
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	200028a0 	.word	0x200028a0
}
   4:	0000f08d 	.word	0x0000f08d
   8:	000152c5 	.word	0x000152c5
   c:	0000f0ed 	.word	0x0000f0ed
  10:	0000f0ed 	.word	0x0000f0ed
  14:	0000f0ed 	.word	0x0000f0ed
  18:	0000f0ed 	.word	0x0000f0ed
  1c:	0000f0ed 	.word	0x0000f0ed
	...
  2c:	0000ee6d 	.word	0x0000ee6d
  30:	0000f0ed 	.word	0x0000f0ed
  34:	00000000 	.word	0x00000000
  38:	0000ee15 	.word	0x0000ee15
  3c:	0000e649 	.word	0x0000e649

00000040 <_irq_vector_table>:
  40:	0000f04d 0000f04d 0000f04d 0000f04d     M...M...M...M...
  50:	0000f04d 0000f04d 0000f04d 0000f04d     M...M...M...M...
  60:	0000f04d 0000f04d 0000f04d 0000f04d     M...M...M...M...
  70:	0000f04d 0000f04d 0000f04d 0000f04d     M...M...M...M...
  80:	0000f04d 0000f04d 0000f04d 0000f04d     M...M...M...M...
  90:	0000f04d 0000f04d 0000f04d 0000f04d     M...M...M...M...
  a0:	0000f04d 0000f04d 0000f04d 0000f04d     M...M...M...M...
  b0:	0000f04d 0000f04d 0000f04d 0000f04d     M...M...M...M...
  c0:	0000f04d 0000f04d 0000f04d 0000f04d     M...M...M...M...
  d0:	0000f04d 0000f04d 0000f04d 0000f04d     M...M...M...M...
  e0:	0000f04d 0000f04d 0000f04d 0000f04d     M...M...M...M...
  f0:	0000f04d 0000f04d 0000f04d 0000f04d     M...M...M...M...
 100:	0000f04d 0000f04d 0000f04d 0000f04d     M...M...M...M...
 110:	0000f04d 0000f04d 0000f04d 0000f04d     M...M...M...M...
 120:	0000f04d 0000f04d 0000f04d 0000f04d     M...M...M...M...
 130:	0000f04d 0000f04d 0000f04d 0000f04d     M...M...M...M...
 140:	0000f04d 0000f04d 0000f04d 0000f04d     M...M...M...M...
 150:	0000f04d                                M...

00000154 <_vector_end>:
	...

00000200 <m_firmware_info>:
 200:	281ee6de 8fcebb4c 00003502 0000003c     ...(L....5..<...
 210:	0001c000 00000001 00000000 00000000     ................
 220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000023c <__aeabi_uldivmod>:
     23c:	b953      	cbnz	r3, 254 <__aeabi_uldivmod+0x18>
     23e:	b94a      	cbnz	r2, 254 <__aeabi_uldivmod+0x18>
     240:	2900      	cmp	r1, #0
     242:	bf08      	it	eq
     244:	2800      	cmpeq	r0, #0
     246:	bf1c      	itt	ne
     248:	f04f 31ff 	movne.w	r1, #4294967295
     24c:	f04f 30ff 	movne.w	r0, #4294967295
     250:	f000 b970 	b.w	534 <__aeabi_idiv0>
     254:	f1ad 0c08 	sub.w	ip, sp, #8
     258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     25c:	f000 f806 	bl	26c <__udivmoddi4>
     260:	f8dd e004 	ldr.w	lr, [sp, #4]
     264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     268:	b004      	add	sp, #16
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     270:	9e08      	ldr	r6, [sp, #32]
     272:	460d      	mov	r5, r1
     274:	4604      	mov	r4, r0
     276:	468a      	mov	sl, r1
     278:	2b00      	cmp	r3, #0
     27a:	d17f      	bne.n	37c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xfc>
     27c:	428a      	cmp	r2, r1
     27e:	4617      	mov	r7, r2
     280:	d941      	bls.n	306 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x86>
     282:	fab2 f282 	clz	r2, r2
     286:	b14a      	cbz	r2, 29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     288:	f1c2 0120 	rsb	r1, r2, #32
     28c:	fa05 f302 	lsl.w	r3, r5, r2
     290:	4097      	lsls	r7, r2
     292:	4094      	lsls	r4, r2
     294:	fa20 f101 	lsr.w	r1, r0, r1
     298:	ea41 0a03 	orr.w	sl, r1, r3
     29c:	ea4f 4817 	mov.w	r8, r7, lsr #16
     2a0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     2a4:	fa1f f987 	uxth.w	r9, r7
     2a8:	fbba fef8 	udiv	lr, sl, r8
     2ac:	fb08 a31e 	mls	r3, r8, lr, sl
     2b0:	fb0e f109 	mul.w	r1, lr, r9
     2b4:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
     2b8:	4299      	cmp	r1, r3
     2ba:	d906      	bls.n	2ca <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4a>
     2bc:	18fb      	adds	r3, r7, r3
     2be:	d202      	bcs.n	2c6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x46>
     2c0:	4299      	cmp	r1, r3
     2c2:	f200 8124 	bhi.w	50e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x26>
     2c6:	f10e 3eff 	add.w	lr, lr, #4294967295
     2ca:	1a59      	subs	r1, r3, r1
     2cc:	b2a3      	uxth	r3, r4
     2ce:	fbb1 f0f8 	udiv	r0, r1, r8
     2d2:	fb08 1110 	mls	r1, r8, r0, r1
     2d6:	fb00 f909 	mul.w	r9, r0, r9
     2da:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     2de:	45a1      	cmp	r9, r4
     2e0:	d905      	bls.n	2ee <CONFIG_PM_PARTITION_SIZE_PROVISION+0x6e>
     2e2:	193c      	adds	r4, r7, r4
     2e4:	d202      	bcs.n	2ec <CONFIG_PM_PARTITION_SIZE_PROVISION+0x6c>
     2e6:	45a1      	cmp	r9, r4
     2e8:	f200 810e 	bhi.w	508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>
     2ec:	3801      	subs	r0, #1
     2ee:	eba4 0409 	sub.w	r4, r4, r9
     2f2:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     2f6:	2100      	movs	r1, #0
     2f8:	b11e      	cbz	r6, 302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     2fa:	40d4      	lsrs	r4, r2
     2fc:	2300      	movs	r3, #0
     2fe:	e9c6 4300 	strd	r4, r3, [r6]
     302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     306:	b902      	cbnz	r2, 30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     308:	deff      	udf	#255	; 0xff
     30a:	fab2 f282 	clz	r2, r2
     30e:	2a00      	cmp	r2, #0
     310:	d14f      	bne.n	3b2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x132>
     312:	1bcb      	subs	r3, r1, r7
     314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     318:	fa1f f887 	uxth.w	r8, r7
     31c:	2101      	movs	r1, #1
     31e:	0c25      	lsrs	r5, r4, #16
     320:	fbb3 fcfe 	udiv	ip, r3, lr
     324:	fb0e 301c 	mls	r0, lr, ip, r3
     328:	462b      	mov	r3, r5
     32a:	fb08 f90c 	mul.w	r9, r8, ip
     32e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     332:	45a9      	cmp	r9, r5
     334:	d90a      	bls.n	34c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xcc>
     336:	197d      	adds	r5, r7, r5
     338:	bf2c      	ite	cs
     33a:	2301      	movcs	r3, #1
     33c:	2300      	movcc	r3, #0
     33e:	45a9      	cmp	r9, r5
     340:	d902      	bls.n	348 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc8>
     342:	2b00      	cmp	r3, #0
     344:	f000 80d9 	beq.w	4fa <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12>
     348:	f10c 3cff 	add.w	ip, ip, #4294967295
     34c:	eba5 0509 	sub.w	r5, r5, r9
     350:	b2a3      	uxth	r3, r4
     352:	fbb5 f0fe 	udiv	r0, r5, lr
     356:	fb0e 5510 	mls	r5, lr, r0, r5
     35a:	fb08 f800 	mul.w	r8, r8, r0
     35e:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     362:	45a0      	cmp	r8, r4
     364:	d905      	bls.n	372 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf2>
     366:	193c      	adds	r4, r7, r4
     368:	d202      	bcs.n	370 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf0>
     36a:	45a0      	cmp	r8, r4
     36c:	f200 80c9 	bhi.w	502 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a>
     370:	3801      	subs	r0, #1
     372:	eba4 0408 	sub.w	r4, r4, r8
     376:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     37a:	e7bd      	b.n	2f8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x78>
     37c:	428b      	cmp	r3, r1
     37e:	d908      	bls.n	392 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x112>
     380:	2e00      	cmp	r6, #0
     382:	f000 80b1 	beq.w	4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>
     386:	2100      	movs	r1, #0
     388:	e9c6 0500 	strd	r0, r5, [r6]
     38c:	4608      	mov	r0, r1
     38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     392:	fab3 f183 	clz	r1, r3
     396:	2900      	cmp	r1, #0
     398:	d146      	bne.n	428 <CONFIG_FLASH_SIZE+0x28>
     39a:	42ab      	cmp	r3, r5
     39c:	f0c0 80a7 	bcc.w	4ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6>
     3a0:	4282      	cmp	r2, r0
     3a2:	f240 80a4 	bls.w	4ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6>
     3a6:	4608      	mov	r0, r1
     3a8:	2e00      	cmp	r6, #0
     3aa:	d0aa      	beq.n	302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     3ac:	e9c6 4a00 	strd	r4, sl, [r6]
     3b0:	e7a7      	b.n	302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     3b2:	f1c2 0020 	rsb	r0, r2, #32
     3b6:	4097      	lsls	r7, r2
     3b8:	fa01 f302 	lsl.w	r3, r1, r2
     3bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     3c0:	40c1      	lsrs	r1, r0
     3c2:	fa24 f500 	lsr.w	r5, r4, r0
     3c6:	fa1f f887 	uxth.w	r8, r7
     3ca:	4094      	lsls	r4, r2
     3cc:	431d      	orrs	r5, r3
     3ce:	fbb1 f0fe 	udiv	r0, r1, lr
     3d2:	0c2b      	lsrs	r3, r5, #16
     3d4:	fb0e 1110 	mls	r1, lr, r0, r1
     3d8:	fb00 fc08 	mul.w	ip, r0, r8
     3dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     3e0:	459c      	cmp	ip, r3
     3e2:	d909      	bls.n	3f8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x178>
     3e4:	18fb      	adds	r3, r7, r3
     3e6:	bf2c      	ite	cs
     3e8:	2101      	movcs	r1, #1
     3ea:	2100      	movcc	r1, #0
     3ec:	459c      	cmp	ip, r3
     3ee:	d902      	bls.n	3f6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x176>
     3f0:	2900      	cmp	r1, #0
     3f2:	f000 8095 	beq.w	520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>
     3f6:	3801      	subs	r0, #1
     3f8:	eba3 030c 	sub.w	r3, r3, ip
     3fc:	b2ad      	uxth	r5, r5
     3fe:	fbb3 f1fe 	udiv	r1, r3, lr
     402:	fb0e 3311 	mls	r3, lr, r1, r3
     406:	fb01 fc08 	mul.w	ip, r1, r8
     40a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     40e:	45ac      	cmp	ip, r5
     410:	d905      	bls.n	41e <CONFIG_FLASH_SIZE+0x1e>
     412:	197d      	adds	r5, r7, r5
     414:	d202      	bcs.n	41c <CONFIG_FLASH_SIZE+0x1c>
     416:	45ac      	cmp	ip, r5
     418:	f200 8089 	bhi.w	52e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x46>
     41c:	3901      	subs	r1, #1
     41e:	eba5 030c 	sub.w	r3, r5, ip
     422:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     426:	e77a      	b.n	31e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9e>
     428:	f1c1 0420 	rsb	r4, r1, #32
     42c:	408b      	lsls	r3, r1
     42e:	fa02 f701 	lsl.w	r7, r2, r1
     432:	fa05 fc01 	lsl.w	ip, r5, r1
     436:	40e2      	lsrs	r2, r4
     438:	fa20 f804 	lsr.w	r8, r0, r4
     43c:	40e5      	lsrs	r5, r4
     43e:	fa00 fe01 	lsl.w	lr, r0, r1
     442:	4313      	orrs	r3, r2
     444:	ea48 020c 	orr.w	r2, r8, ip
     448:	ea4f 4813 	mov.w	r8, r3, lsr #16
     44c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
     450:	fa1f f983 	uxth.w	r9, r3
     454:	fbb5 faf8 	udiv	sl, r5, r8
     458:	fb08 551a 	mls	r5, r8, sl, r5
     45c:	fb0a f009 	mul.w	r0, sl, r9
     460:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
     464:	4560      	cmp	r0, ip
     466:	d90a      	bls.n	47e <CONFIG_FLASH_SIZE+0x7e>
     468:	eb13 0c0c 	adds.w	ip, r3, ip
     46c:	bf2c      	ite	cs
     46e:	2501      	movcs	r5, #1
     470:	2500      	movcc	r5, #0
     472:	4560      	cmp	r0, ip
     474:	d901      	bls.n	47a <CONFIG_FLASH_SIZE+0x7a>
     476:	2d00      	cmp	r5, #0
     478:	d055      	beq.n	526 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3e>
     47a:	f10a 3aff 	add.w	sl, sl, #4294967295
     47e:	ebac 0c00 	sub.w	ip, ip, r0
     482:	b292      	uxth	r2, r2
     484:	fbbc f0f8 	udiv	r0, ip, r8
     488:	fb08 cc10 	mls	ip, r8, r0, ip
     48c:	fb00 f909 	mul.w	r9, r0, r9
     490:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     494:	45e1      	cmp	r9, ip
     496:	d905      	bls.n	4a4 <CONFIG_FLASH_SIZE+0xa4>
     498:	eb13 0c0c 	adds.w	ip, r3, ip
     49c:	d201      	bcs.n	4a2 <CONFIG_FLASH_SIZE+0xa2>
     49e:	45e1      	cmp	r9, ip
     4a0:	d83b      	bhi.n	51a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x32>
     4a2:	3801      	subs	r0, #1
     4a4:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     4a8:	ebac 0c09 	sub.w	ip, ip, r9
     4ac:	fba0 8907 	umull	r8, r9, r0, r7
     4b0:	45cc      	cmp	ip, r9
     4b2:	4645      	mov	r5, r8
     4b4:	464a      	mov	r2, r9
     4b6:	d302      	bcc.n	4be <CONFIG_FLASH_SIZE+0xbe>
     4b8:	d106      	bne.n	4c8 <CONFIG_FLASH_SIZE+0xc8>
     4ba:	45c6      	cmp	lr, r8
     4bc:	d204      	bcs.n	4c8 <CONFIG_FLASH_SIZE+0xc8>
     4be:	3801      	subs	r0, #1
     4c0:	ebb8 0507 	subs.w	r5, r8, r7
     4c4:	eb69 0203 	sbc.w	r2, r9, r3
     4c8:	b32e      	cbz	r6, 516 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2e>
     4ca:	ebbe 0305 	subs.w	r3, lr, r5
     4ce:	eb6c 0c02 	sbc.w	ip, ip, r2
     4d2:	fa23 f201 	lsr.w	r2, r3, r1
     4d6:	fa0c f404 	lsl.w	r4, ip, r4
     4da:	fa2c f301 	lsr.w	r3, ip, r1
     4de:	2100      	movs	r1, #0
     4e0:	4314      	orrs	r4, r2
     4e2:	e9c6 4300 	strd	r4, r3, [r6]
     4e6:	e70c      	b.n	302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     4e8:	4631      	mov	r1, r6
     4ea:	4630      	mov	r0, r6
     4ec:	e709      	b.n	302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     4ee:	1a84      	subs	r4, r0, r2
     4f0:	eb65 0303 	sbc.w	r3, r5, r3
     4f4:	2001      	movs	r0, #1
     4f6:	469a      	mov	sl, r3
     4f8:	e756      	b.n	3a8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x128>
     4fa:	f1ac 0c02 	sub.w	ip, ip, #2
     4fe:	443d      	add	r5, r7
     500:	e724      	b.n	34c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xcc>
     502:	3802      	subs	r0, #2
     504:	443c      	add	r4, r7
     506:	e734      	b.n	372 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf2>
     508:	3802      	subs	r0, #2
     50a:	443c      	add	r4, r7
     50c:	e6ef      	b.n	2ee <CONFIG_PM_PARTITION_SIZE_PROVISION+0x6e>
     50e:	f1ae 0e02 	sub.w	lr, lr, #2
     512:	443b      	add	r3, r7
     514:	e6d9      	b.n	2ca <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4a>
     516:	4631      	mov	r1, r6
     518:	e6f3      	b.n	302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     51a:	3802      	subs	r0, #2
     51c:	449c      	add	ip, r3
     51e:	e7c1      	b.n	4a4 <CONFIG_FLASH_SIZE+0xa4>
     520:	3802      	subs	r0, #2
     522:	443b      	add	r3, r7
     524:	e768      	b.n	3f8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x178>
     526:	f1aa 0a02 	sub.w	sl, sl, #2
     52a:	449c      	add	ip, r3
     52c:	e7a7      	b.n	47e <CONFIG_FLASH_SIZE+0x7e>
     52e:	3902      	subs	r1, #2
     530:	443d      	add	r5, r7
     532:	e774      	b.n	41e <CONFIG_FLASH_SIZE+0x1e>

00000534 <__aeabi_idiv0>:
     534:	4770      	bx	lr
     536:	bf00      	nop

00000538 <sha256_init>:
     538:	4b12      	ldr	r3, [pc, #72]	; (584 <sha256_init+0x4c>)
     53a:	6003      	str	r3, [r0, #0]
     53c:	4b12      	ldr	r3, [pc, #72]	; (588 <sha256_init+0x50>)
     53e:	6043      	str	r3, [r0, #4]
     540:	4b12      	ldr	r3, [pc, #72]	; (58c <sha256_init+0x54>)
     542:	6083      	str	r3, [r0, #8]
     544:	4b12      	ldr	r3, [pc, #72]	; (590 <sha256_init+0x58>)
     546:	60c3      	str	r3, [r0, #12]
     548:	4b12      	ldr	r3, [pc, #72]	; (594 <sha256_init+0x5c>)
     54a:	6103      	str	r3, [r0, #16]
     54c:	4b12      	ldr	r3, [pc, #72]	; (598 <sha256_init+0x60>)
     54e:	6143      	str	r3, [r0, #20]
     550:	4b12      	ldr	r3, [pc, #72]	; (59c <sha256_init+0x64>)
     552:	6183      	str	r3, [r0, #24]
     554:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
     558:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
     55c:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
     560:	61c3      	str	r3, [r0, #28]
     562:	2200      	movs	r2, #0
     564:	2300      	movs	r3, #0
     566:	e9c0 2308 	strd	r2, r3, [r0, #32]
     56a:	f100 0c28 	add.w	ip, r0, #40	; 0x28
     56e:	4663      	mov	r3, ip
     570:	f100 0168 	add.w	r1, r0, #104	; 0x68
     574:	f843 2b04 	str.w	r2, [r3], #4
     578:	428b      	cmp	r3, r1
     57a:	d1fb      	bne.n	574 <sha256_init+0x3c>
     57c:	2300      	movs	r3, #0
     57e:	6683      	str	r3, [r0, #104]	; 0x68
     580:	4770      	bx	lr
     582:	bf00      	nop
     584:	6a09e667 	.word	0x6a09e667
     588:	bb67ae85 	.word	0xbb67ae85
     58c:	3c6ef372 	.word	0x3c6ef372
     590:	a54ff53a 	.word	0xa54ff53a
     594:	510e527f 	.word	0x510e527f
     598:	9b05688c 	.word	0x9b05688c
     59c:	1f83d9ab 	.word	0x1f83d9ab

000005a0 <get_wval>:
     5a0:	3a01      	subs	r2, #1
     5a2:	440a      	add	r2, r1
     5a4:	08d2      	lsrs	r2, r2, #3
     5a6:	5c83      	ldrb	r3, [r0, r2]
     5a8:	08ca      	lsrs	r2, r1, #3
     5aa:	5c80      	ldrb	r0, [r0, r2]
     5ac:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
     5b0:	f001 0107 	and.w	r1, r1, #7
     5b4:	40c8      	lsrs	r0, r1
     5b6:	4770      	bx	lr

000005b8 <booth_encode>:
     5b8:	fa20 f101 	lsr.w	r1, r0, r1
     5bc:	3001      	adds	r0, #1
     5be:	0843      	lsrs	r3, r0, #1
     5c0:	1e4a      	subs	r2, r1, #1
     5c2:	ea02 0050 	and.w	r0, r2, r0, lsr #1
     5c6:	425b      	negs	r3, r3
     5c8:	4249      	negs	r1, r1
     5ca:	4019      	ands	r1, r3
     5cc:	4308      	orrs	r0, r1
     5ce:	4770      	bx	lr

000005d0 <sub_mod_n>:
     5d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     5d4:	9f07      	ldr	r7, [sp, #28]
     5d6:	b397      	cbz	r7, 63e <sub_mod_n+0x6e>
     5d8:	4699      	mov	r9, r3
     5da:	f1a1 0e04 	sub.w	lr, r1, #4
     5de:	1f14      	subs	r4, r2, #4
     5e0:	f1a0 0c04 	sub.w	ip, r0, #4
     5e4:	ea4f 0887 	mov.w	r8, r7, lsl #2
     5e8:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
     5ec:	4666      	mov	r6, ip
     5ee:	2100      	movs	r1, #0
     5f0:	460d      	mov	r5, r1
     5f2:	f85e 2f04 	ldr.w	r2, [lr, #4]!
     5f6:	1a52      	subs	r2, r2, r1
     5f8:	eb65 0105 	sbc.w	r1, r5, r5
     5fc:	f854 3f04 	ldr.w	r3, [r4, #4]!
     600:	1ad2      	subs	r2, r2, r3
     602:	f161 0100 	sbc.w	r1, r1, #0
     606:	f846 2f04 	str.w	r2, [r6, #4]!
     60a:	f001 0101 	and.w	r1, r1, #1
     60e:	45be      	cmp	lr, r7
     610:	d1ef      	bne.n	5f2 <sub_mod_n+0x22>
     612:	424a      	negs	r2, r1
     614:	f1a9 0604 	sub.w	r6, r9, #4
     618:	3804      	subs	r0, #4
     61a:	4480      	add	r8, r0
     61c:	2400      	movs	r4, #0
     61e:	4625      	mov	r5, r4
     620:	f856 3f04 	ldr.w	r3, [r6, #4]!
     624:	4013      	ands	r3, r2
     626:	f85c 1f04 	ldr.w	r1, [ip, #4]!
     62a:	1909      	adds	r1, r1, r4
     62c:	eb45 0405 	adc.w	r4, r5, r5
     630:	185b      	adds	r3, r3, r1
     632:	f8cc 3000 	str.w	r3, [ip]
     636:	f144 0400 	adc.w	r4, r4, #0
     63a:	45c4      	cmp	ip, r8
     63c:	d1f0      	bne.n	620 <sub_mod_n+0x50>
     63e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00000642 <check_mod_n>:
     642:	b5f0      	push	{r4, r5, r6, r7, lr}
     644:	4604      	mov	r4, r0
     646:	4610      	mov	r0, r2
     648:	b302      	cbz	r2, 68c <check_mod_n+0x4a>
     64a:	f1a1 0e04 	sub.w	lr, r1, #4
     64e:	eb0e 0782 	add.w	r7, lr, r2, lsl #2
     652:	2000      	movs	r0, #0
     654:	4605      	mov	r5, r0
     656:	4606      	mov	r6, r0
     658:	e00d      	b.n	676 <check_mod_n+0x34>
     65a:	3404      	adds	r4, #4
     65c:	430d      	orrs	r5, r1
     65e:	f85e 3f04 	ldr.w	r3, [lr, #4]!
     662:	181b      	adds	r3, r3, r0
     664:	eb46 0006 	adc.w	r0, r6, r6
     668:	1ac9      	subs	r1, r1, r3
     66a:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     66e:	f000 0001 	and.w	r0, r0, #1
     672:	45be      	cmp	lr, r7
     674:	d00b      	beq.n	68e <check_mod_n+0x4c>
     676:	46a4      	mov	ip, r4
     678:	2300      	movs	r3, #0
     67a:	4619      	mov	r1, r3
     67c:	f81c 2b01 	ldrb.w	r2, [ip], #1
     680:	409a      	lsls	r2, r3
     682:	4311      	orrs	r1, r2
     684:	3308      	adds	r3, #8
     686:	2b20      	cmp	r3, #32
     688:	d1f8      	bne.n	67c <check_mod_n+0x3a>
     68a:	e7e6      	b.n	65a <check_mod_n+0x18>
     68c:	4615      	mov	r5, r2
     68e:	1e6b      	subs	r3, r5, #1
     690:	ea23 0505 	bic.w	r5, r3, r5
     694:	2d00      	cmp	r5, #0
     696:	bfb4      	ite	lt
     698:	2000      	movlt	r0, #0
     69a:	f000 0001 	andge.w	r0, r0, #1
     69e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000006a0 <rshift_mod_n>:
     6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     6a4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
     6a8:	2a00      	cmp	r2, #0
     6aa:	d049      	beq.n	740 <rshift_mod_n+0xa0>
     6ac:	4606      	mov	r6, r0
     6ae:	460c      	mov	r4, r1
     6b0:	4699      	mov	r9, r3
     6b2:	1e57      	subs	r7, r2, #1
     6b4:	ea4f 0a88 	mov.w	sl, r8, lsl #2
     6b8:	f1aa 0a04 	sub.w	sl, sl, #4
     6bc:	f04f 0e00 	mov.w	lr, #0
     6c0:	e01c      	b.n	6fc <rshift_mod_n+0x5c>
     6c2:	6832      	ldr	r2, [r6, #0]
     6c4:	46c3      	mov	fp, r8
     6c6:	f04f 34ff 	mov.w	r4, #4294967295
     6ca:	4630      	mov	r0, r6
     6cc:	2100      	movs	r1, #0
     6ce:	0853      	lsrs	r3, r2, #1
     6d0:	3101      	adds	r1, #1
     6d2:	6842      	ldr	r2, [r0, #4]
     6d4:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
     6d8:	f840 3b04 	str.w	r3, [r0], #4
     6dc:	42a1      	cmp	r1, r4
     6de:	d3f6      	bcc.n	6ce <rshift_mod_n+0x2e>
     6e0:	2c00      	cmp	r4, #0
     6e2:	bf08      	it	eq
     6e4:	2401      	moveq	r4, #1
     6e6:	ea4f 7bcb 	mov.w	fp, fp, lsl #31
     6ea:	ea4b 0252 	orr.w	r2, fp, r2, lsr #1
     6ee:	f846 2024 	str.w	r2, [r6, r4, lsl #2]
     6f2:	3f01      	subs	r7, #1
     6f4:	f1b7 3fff 	cmp.w	r7, #4294967295
     6f8:	d022      	beq.n	740 <rshift_mod_n+0xa0>
     6fa:	4634      	mov	r4, r6
     6fc:	6825      	ldr	r5, [r4, #0]
     6fe:	f345 0500 	sbfx	r5, r5, #0, #1
     702:	f1b8 0f00 	cmp.w	r8, #0
     706:	d0dc      	beq.n	6c2 <rshift_mod_n+0x22>
     708:	f1a4 0c04 	sub.w	ip, r4, #4
     70c:	f1a9 0004 	sub.w	r0, r9, #4
     710:	1f33      	subs	r3, r6, #4
     712:	4454      	add	r4, sl
     714:	46f3      	mov	fp, lr
     716:	f850 2f04 	ldr.w	r2, [r0, #4]!
     71a:	402a      	ands	r2, r5
     71c:	f85c 1f04 	ldr.w	r1, [ip, #4]!
     720:	eb11 010b 	adds.w	r1, r1, fp
     724:	eb4e 0b0e 	adc.w	fp, lr, lr
     728:	1851      	adds	r1, r2, r1
     72a:	f843 1f04 	str.w	r1, [r3, #4]!
     72e:	f14b 0b00 	adc.w	fp, fp, #0
     732:	45a4      	cmp	ip, r4
     734:	d1ef      	bne.n	716 <rshift_mod_n+0x76>
     736:	6832      	ldr	r2, [r6, #0]
     738:	f1b8 0401 	subs.w	r4, r8, #1
     73c:	d1c5      	bne.n	6ca <rshift_mod_n+0x2a>
     73e:	e7d2      	b.n	6e6 <rshift_mod_n+0x46>
     740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000744 <inner_loop_n>:
     744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     748:	b083      	sub	sp, #12
     74a:	9001      	str	r0, [sp, #4]
     74c:	6808      	ldr	r0, [r1, #0]
     74e:	684e      	ldr	r6, [r1, #4]
     750:	f8d2 8000 	ldr.w	r8, [r2]
     754:	f8d2 9004 	ldr.w	r9, [r2, #4]
     758:	1e5a      	subs	r2, r3, #1
     75a:	9200      	str	r2, [sp, #0]
     75c:	2b00      	cmp	r3, #0
     75e:	d056      	beq.n	80e <CONFIG_ISR_STACK_SIZE+0xe>
     760:	2401      	movs	r4, #1
     762:	2500      	movs	r5, #0
     764:	462b      	mov	r3, r5
     766:	4627      	mov	r7, r4
     768:	46aa      	mov	sl, r5
     76a:	f340 0e00 	sbfx	lr, r0, #0, #1
     76e:	ea0e 0108 	and.w	r1, lr, r8
     772:	1a42      	subs	r2, r0, r1
     774:	1a41      	subs	r1, r0, r1
     776:	eb6a 010a 	sbc.w	r1, sl, sl
     77a:	f001 0b01 	and.w	fp, r1, #1
     77e:	ea0e 0109 	and.w	r1, lr, r9
     782:	1a71      	subs	r1, r6, r1
     784:	eb6a 0c0a 	sbc.w	ip, sl, sl
     788:	ebb1 010b 	subs.w	r1, r1, fp
     78c:	f16c 0c00 	sbc.w	ip, ip, #0
     790:	ea81 010c 	eor.w	r1, r1, ip
     794:	ea82 020c 	eor.w	r2, r2, ip
     798:	f00c 0b01 	and.w	fp, ip, #1
     79c:	eb12 020b 	adds.w	r2, r2, fp
     7a0:	f141 0100 	adc.w	r1, r1, #0
     7a4:	ea80 0008 	eor.w	r0, r0, r8
     7a8:	ea00 000c 	and.w	r0, r0, ip
     7ac:	ea88 0800 	eor.w	r8, r8, r0
     7b0:	ea86 0609 	eor.w	r6, r6, r9
     7b4:	ea06 060c 	and.w	r6, r6, ip
     7b8:	ea89 0906 	eor.w	r9, r9, r6
     7bc:	ea87 0005 	eor.w	r0, r7, r5
     7c0:	ea00 000c 	and.w	r0, r0, ip
     7c4:	4047      	eors	r7, r0
     7c6:	4045      	eors	r5, r0
     7c8:	ea83 0004 	eor.w	r0, r3, r4
     7cc:	ea00 0c0c 	and.w	ip, r0, ip
     7d0:	ea8c 0303 	eor.w	r3, ip, r3
     7d4:	ea8c 0404 	eor.w	r4, ip, r4
     7d8:	ea0e 0005 	and.w	r0, lr, r5
     7dc:	1a3f      	subs	r7, r7, r0
     7de:	ea0e 0e04 	and.w	lr, lr, r4
     7e2:	eba3 030e 	sub.w	r3, r3, lr
     7e6:	006d      	lsls	r5, r5, #1
     7e8:	0064      	lsls	r4, r4, #1
     7ea:	07c8      	lsls	r0, r1, #31
     7ec:	ea40 0052 	orr.w	r0, r0, r2, lsr #1
     7f0:	084e      	lsrs	r6, r1, #1
     7f2:	9a00      	ldr	r2, [sp, #0]
     7f4:	3a01      	subs	r2, #1
     7f6:	9200      	str	r2, [sp, #0]
     7f8:	f1b2 3fff 	cmp.w	r2, #4294967295
     7fc:	d1b5      	bne.n	76a <inner_loop_n+0x26>
     7fe:	9a01      	ldr	r2, [sp, #4]
     800:	6017      	str	r7, [r2, #0]
     802:	6053      	str	r3, [r2, #4]
     804:	6095      	str	r5, [r2, #8]
     806:	60d4      	str	r4, [r2, #12]
     808:	b003      	add	sp, #12
     80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     80e:	461d      	mov	r5, r3
     810:	2401      	movs	r4, #1
     812:	4627      	mov	r7, r4
     814:	e7f3      	b.n	7fe <inner_loop_n+0xba>

00000816 <cneg_n>:
     816:	b1bb      	cbz	r3, 848 <cneg_n+0x32>
     818:	b530      	push	{r4, r5, lr}
     81a:	f002 0c01 	and.w	ip, r2, #1
     81e:	3904      	subs	r1, #4
     820:	3804      	subs	r0, #4
     822:	eb01 0583 	add.w	r5, r1, r3, lsl #2
     826:	f04f 0e00 	mov.w	lr, #0
     82a:	f851 3f04 	ldr.w	r3, [r1, #4]!
     82e:	4053      	eors	r3, r2
     830:	eb03 040c 	add.w	r4, r3, ip
     834:	f840 4f04 	str.w	r4, [r0, #4]!
     838:	eb13 030c 	adds.w	r3, r3, ip
     83c:	eb4e 030e 	adc.w	r3, lr, lr
     840:	469c      	mov	ip, r3
     842:	42a9      	cmp	r1, r5
     844:	d1f1      	bne.n	82a <cneg_n+0x14>
     846:	bd30      	pop	{r4, r5, pc}
     848:	4770      	bx	lr

0000084a <umul_n>:
     84a:	b193      	cbz	r3, 872 <umul_n+0x28>
     84c:	b510      	push	{r4, lr}
     84e:	3904      	subs	r1, #4
     850:	f1a0 0e04 	sub.w	lr, r0, #4
     854:	eb01 0483 	add.w	r4, r1, r3, lsl #2
     858:	2000      	movs	r0, #0
     85a:	f851 3f04 	ldr.w	r3, [r1, #4]!
     85e:	fba3 3c02 	umull	r3, ip, r3, r2
     862:	181b      	adds	r3, r3, r0
     864:	f84e 3f04 	str.w	r3, [lr, #4]!
     868:	f14c 0000 	adc.w	r0, ip, #0
     86c:	42a1      	cmp	r1, r4
     86e:	d1f4      	bne.n	85a <umul_n+0x10>
     870:	bd10      	pop	{r4, pc}
     872:	4618      	mov	r0, r3
     874:	4770      	bx	lr

00000876 <nibble>:
     876:	4603      	mov	r3, r0
     878:	3830      	subs	r0, #48	; 0x30
     87a:	b2c0      	uxtb	r0, r0
     87c:	2809      	cmp	r0, #9
     87e:	d910      	bls.n	8a2 <nibble+0x2c>
     880:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
     884:	b2d2      	uxtb	r2, r2
     886:	2a05      	cmp	r2, #5
     888:	d907      	bls.n	89a <nibble+0x24>
     88a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
     88e:	b2d2      	uxtb	r2, r2
     890:	2a05      	cmp	r2, #5
     892:	d805      	bhi.n	8a0 <nibble+0x2a>
     894:	3b37      	subs	r3, #55	; 0x37
     896:	b2d8      	uxtb	r0, r3
     898:	4770      	bx	lr
     89a:	3b57      	subs	r3, #87	; 0x57
     89c:	b2d8      	uxtb	r0, r3
     89e:	4770      	bx	lr
     8a0:	2010      	movs	r0, #16
     8a2:	4770      	bx	lr

000008a4 <limbs_from_hexascii>:
     8a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     8a8:	4607      	mov	r7, r0
     8aa:	4689      	mov	r9, r1
     8ac:	4616      	mov	r6, r2
     8ae:	7813      	ldrb	r3, [r2, #0]
     8b0:	2b30      	cmp	r3, #48	; 0x30
     8b2:	d00e      	beq.n	8d2 <limbs_from_hexascii+0x2e>
     8b4:	ea5f 0849 	movs.w	r8, r9, lsl #1
     8b8:	d013      	beq.n	8e2 <limbs_from_hexascii+0x3e>
     8ba:	1e75      	subs	r5, r6, #1
     8bc:	2400      	movs	r4, #0
     8be:	f815 0f01 	ldrb.w	r0, [r5, #1]!
     8c2:	f7ff ffd8 	bl	876 <nibble>
     8c6:	280f      	cmp	r0, #15
     8c8:	d80a      	bhi.n	8e0 <limbs_from_hexascii+0x3c>
     8ca:	3401      	adds	r4, #1
     8cc:	4544      	cmp	r4, r8
     8ce:	d1f6      	bne.n	8be <limbs_from_hexascii+0x1a>
     8d0:	e007      	b.n	8e2 <limbs_from_hexascii+0x3e>
     8d2:	7853      	ldrb	r3, [r2, #1]
     8d4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
     8d8:	2b58      	cmp	r3, #88	; 0x58
     8da:	bf08      	it	eq
     8dc:	3602      	addeq	r6, #2
     8de:	e7e9      	b.n	8b4 <limbs_from_hexascii+0x10>
     8e0:	46a0      	mov	r8, r4
     8e2:	ea4f 0099 	mov.w	r0, r9, lsr #2
     8e6:	f1b9 0f03 	cmp.w	r9, #3
     8ea:	d907      	bls.n	8fc <limbs_from_hexascii+0x58>
     8ec:	463a      	mov	r2, r7
     8ee:	2300      	movs	r3, #0
     8f0:	4619      	mov	r1, r3
     8f2:	f842 1b04 	str.w	r1, [r2], #4
     8f6:	3301      	adds	r3, #1
     8f8:	4298      	cmp	r0, r3
     8fa:	d8fa      	bhi.n	8f2 <limbs_from_hexascii+0x4e>
     8fc:	f108 34ff 	add.w	r4, r8, #4294967295
     900:	f1b8 0f00 	cmp.w	r8, #0
     904:	d010      	beq.n	928 <limbs_from_hexascii+0x84>
     906:	2500      	movs	r5, #0
     908:	012d      	lsls	r5, r5, #4
     90a:	f816 0b01 	ldrb.w	r0, [r6], #1
     90e:	f7ff ffb2 	bl	876 <nibble>
     912:	4305      	orrs	r5, r0
     914:	f014 0f07 	tst.w	r4, #7
     918:	bf04      	itt	eq
     91a:	08e3      	lsreq	r3, r4, #3
     91c:	f847 5023 	streq.w	r5, [r7, r3, lsl #2]
     920:	3c01      	subs	r4, #1
     922:	f1b4 3fff 	cmp.w	r4, #4294967295
     926:	d1ef      	bne.n	908 <limbs_from_hexascii+0x64>
     928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000092c <mul_mont_n>:
     92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     930:	b087      	sub	sp, #28
     932:	af00      	add	r7, sp, #0
     934:	6038      	str	r0, [r7, #0]
     936:	60b9      	str	r1, [r7, #8]
     938:	617b      	str	r3, [r7, #20]
     93a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     93c:	3301      	adds	r3, #1
     93e:	0098      	lsls	r0, r3, #2
     940:	6078      	str	r0, [r7, #4]
     942:	1dc3      	adds	r3, r0, #7
     944:	f023 0307 	bic.w	r3, r3, #7
     948:	ebad 0d03 	sub.w	sp, sp, r3
     94c:	46e8      	mov	r8, sp
     94e:	6815      	ldr	r5, [r2, #0]
     950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     952:	b363      	cbz	r3, 9ae <mul_mont_n+0x82>
     954:	1f0c      	subs	r4, r1, #4
     956:	f1a8 0604 	sub.w	r6, r8, #4
     95a:	f1a0 0c04 	sub.w	ip, r0, #4
     95e:	44a4      	add	ip, r4
     960:	2100      	movs	r1, #0
     962:	f854 3f04 	ldr.w	r3, [r4, #4]!
     966:	fba3 3005 	umull	r3, r0, r3, r5
     96a:	185b      	adds	r3, r3, r1
     96c:	f846 3f04 	str.w	r3, [r6, #4]!
     970:	f140 0100 	adc.w	r1, r0, #0
     974:	4564      	cmp	r4, ip
     976:	d1f4      	bne.n	962 <mul_mont_n+0x36>
     978:	6c78      	ldr	r0, [r7, #68]	; 0x44
     97a:	f8d8 3000 	ldr.w	r3, [r8]
     97e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
     980:	fb04 f303 	mul.w	r3, r4, r3
     984:	f848 1020 	str.w	r1, [r8, r0, lsl #2]
     988:	697d      	ldr	r5, [r7, #20]
     98a:	f855 1904 	ldr.w	r1, [r5], #-4
     98e:	60f9      	str	r1, [r7, #12]
     990:	4691      	mov	r9, r2
     992:	6879      	ldr	r1, [r7, #4]
     994:	1f0e      	subs	r6, r1, #4
     996:	3a04      	subs	r2, #4
     998:	4631      	mov	r1, r6
     99a:	4432      	add	r2, r6
     99c:	613a      	str	r2, [r7, #16]
     99e:	4435      	add	r5, r6
     9a0:	68ba      	ldr	r2, [r7, #8]
     9a2:	1f16      	subs	r6, r2, #4
     9a4:	440e      	add	r6, r1
     9a6:	f04f 0c00 	mov.w	ip, #0
     9aa:	4664      	mov	r4, ip
     9ac:	e056      	b.n	a5c <mul_mont_n+0x130>
     9ae:	6c78      	ldr	r0, [r7, #68]	; 0x44
     9b0:	4601      	mov	r1, r0
     9b2:	e7e2      	b.n	97a <mul_mont_n+0x4e>
     9b4:	2301      	movs	r3, #1
     9b6:	e072      	b.n	a9e <mul_mont_n+0x172>
     9b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     9ba:	b37b      	cbz	r3, a1c <mul_mont_n+0xf0>
     9bc:	f1a8 0404 	sub.w	r4, r8, #4
     9c0:	697b      	ldr	r3, [r7, #20]
     9c2:	f1a3 0c04 	sub.w	ip, r3, #4
     9c6:	683b      	ldr	r3, [r7, #0]
     9c8:	1f19      	subs	r1, r3, #4
     9ca:	687b      	ldr	r3, [r7, #4]
     9cc:	3b08      	subs	r3, #8
     9ce:	4498      	add	r8, r3
     9d0:	460e      	mov	r6, r1
     9d2:	4620      	mov	r0, r4
     9d4:	2300      	movs	r3, #0
     9d6:	461d      	mov	r5, r3
     9d8:	f850 2f04 	ldr.w	r2, [r0, #4]!
     9dc:	1ad3      	subs	r3, r2, r3
     9de:	eb65 0205 	sbc.w	r2, r5, r5
     9e2:	f85c 9f04 	ldr.w	r9, [ip, #4]!
     9e6:	ebb3 0309 	subs.w	r3, r3, r9
     9ea:	f162 0200 	sbc.w	r2, r2, #0
     9ee:	f846 3f04 	str.w	r3, [r6, #4]!
     9f2:	f002 0301 	and.w	r3, r2, #1
     9f6:	4540      	cmp	r0, r8
     9f8:	d1ee      	bne.n	9d8 <mul_mont_n+0xac>
     9fa:	ebae 0e03 	sub.w	lr, lr, r3
     9fe:	6838      	ldr	r0, [r7, #0]
     a00:	687b      	ldr	r3, [r7, #4]
     a02:	4418      	add	r0, r3
     a04:	3808      	subs	r0, #8
     a06:	f851 2f04 	ldr.w	r2, [r1, #4]!
     a0a:	f854 3f04 	ldr.w	r3, [r4, #4]!
     a0e:	4053      	eors	r3, r2
     a10:	ea03 030e 	and.w	r3, r3, lr
     a14:	4053      	eors	r3, r2
     a16:	600b      	str	r3, [r1, #0]
     a18:	4281      	cmp	r1, r0
     a1a:	d1f4      	bne.n	a06 <mul_mont_n+0xda>
     a1c:	371c      	adds	r7, #28
     a1e:	46bd      	mov	sp, r7
     a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     a24:	f85e 1f04 	ldr.w	r1, [lr, #4]!
     a28:	fba1 100b 	umull	r1, r0, r1, fp
     a2c:	f85c 3f04 	ldr.w	r3, [ip, #4]!
     a30:	189b      	adds	r3, r3, r2
     a32:	eb44 0204 	adc.w	r2, r4, r4
     a36:	18cb      	adds	r3, r1, r3
     a38:	f8cc 3000 	str.w	r3, [ip]
     a3c:	eb40 0202 	adc.w	r2, r0, r2
     a40:	45b6      	cmp	lr, r6
     a42:	d1ef      	bne.n	a24 <mul_mont_n+0xf8>
     a44:	6c79      	ldr	r1, [r7, #68]	; 0x44
     a46:	f8d8 3000 	ldr.w	r3, [r8]
     a4a:	6c38      	ldr	r0, [r7, #64]	; 0x40
     a4c:	fb00 f303 	mul.w	r3, r0, r3
     a50:	eb12 020a 	adds.w	r2, r2, sl
     a54:	f144 0c00 	adc.w	ip, r4, #0
     a58:	f848 2021 	str.w	r2, [r8, r1, lsl #2]
     a5c:	68fa      	ldr	r2, [r7, #12]
     a5e:	fba3 e102 	umull	lr, r1, r3, r2
     a62:	f8d8 0000 	ldr.w	r0, [r8]
     a66:	eb1e 0000 	adds.w	r0, lr, r0
     a6a:	f141 0200 	adc.w	r2, r1, #0
     a6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
     a70:	2901      	cmp	r1, #1
     a72:	d99f      	bls.n	9b4 <mul_mont_n+0x88>
     a74:	46c6      	mov	lr, r8
     a76:	6978      	ldr	r0, [r7, #20]
     a78:	46b3      	mov	fp, r6
     a7a:	f850 1f04 	ldr.w	r1, [r0, #4]!
     a7e:	fba1 1a03 	umull	r1, sl, r1, r3
     a82:	188a      	adds	r2, r1, r2
     a84:	f14a 0100 	adc.w	r1, sl, #0
     a88:	f8de 6004 	ldr.w	r6, [lr, #4]
     a8c:	1992      	adds	r2, r2, r6
     a8e:	f84e 2b04 	str.w	r2, [lr], #4
     a92:	f141 0200 	adc.w	r2, r1, #0
     a96:	42a8      	cmp	r0, r5
     a98:	d1ef      	bne.n	a7a <mul_mont_n+0x14e>
     a9a:	465e      	mov	r6, fp
     a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     a9e:	eb08 0083 	add.w	r0, r8, r3, lsl #2
     aa2:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
     aa6:	eb12 010c 	adds.w	r1, r2, ip
     aaa:	eb44 0e04 	adc.w	lr, r4, r4
     aae:	1859      	adds	r1, r3, r1
     ab0:	f14e 0e00 	adc.w	lr, lr, #0
     ab4:	f840 1c04 	str.w	r1, [r0, #-4]
     ab8:	46f2      	mov	sl, lr
     aba:	693b      	ldr	r3, [r7, #16]
     abc:	4599      	cmp	r9, r3
     abe:	f43f af7b 	beq.w	9b8 <mul_mont_n+0x8c>
     ac2:	f859 bf04 	ldr.w	fp, [r9, #4]!
     ac6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     ac8:	b133      	cbz	r3, ad8 <mul_mont_n+0x1ac>
     aca:	68bb      	ldr	r3, [r7, #8]
     acc:	f1a3 0e04 	sub.w	lr, r3, #4
     ad0:	f1a8 0c04 	sub.w	ip, r8, #4
     ad4:	4622      	mov	r2, r4
     ad6:	e7a5      	b.n	a24 <mul_mont_n+0xf8>
     ad8:	6c79      	ldr	r1, [r7, #68]	; 0x44
     ada:	460a      	mov	r2, r1
     adc:	e7b3      	b.n	a46 <mul_mont_n+0x11a>

00000ade <sigma>:
     ade:	b510      	push	{r4, lr}
     ae0:	b082      	sub	sp, #8
     ae2:	1f0b      	subs	r3, r1, #4
     ae4:	1f02      	subs	r2, r0, #4
     ae6:	f101 0c5c 	add.w	ip, r1, #92	; 0x5c
     aea:	f853 4f04 	ldr.w	r4, [r3, #4]!
     aee:	f842 4f04 	str.w	r4, [r2, #4]!
     af2:	4563      	cmp	r3, ip
     af4:	d1f9      	bne.n	aea <sigma+0xc>
     af6:	4b06      	ldr	r3, [pc, #24]	; (b10 <sigma+0x32>)
     af8:	220c      	movs	r2, #12
     afa:	9201      	str	r2, [sp, #4]
     afc:	4a05      	ldr	r2, [pc, #20]	; (b14 <sigma+0x36>)
     afe:	9200      	str	r2, [sp, #0]
     b00:	f103 0230 	add.w	r2, r3, #48	; 0x30
     b04:	3160      	adds	r1, #96	; 0x60
     b06:	3060      	adds	r0, #96	; 0x60
     b08:	f7ff ff10 	bl	92c <mul_mont_n>
     b0c:	b002      	add	sp, #8
     b0e:	bd10      	pop	{r4, pc}
     b10:	00015a08 	.word	0x00015a08
     b14:	fffcfffd 	.word	0xfffcfffd

00000b18 <map_fp_times_Zz>:
     b18:	b323      	cbz	r3, b64 <map_fp_times_Zz+0x4c>
     b1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     b1e:	b082      	sub	sp, #8
     b20:	1e5f      	subs	r7, r3, #1
     b22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     b26:	011c      	lsls	r4, r3, #4
     b28:	3c30      	subs	r4, #48	; 0x30
     b2a:	1906      	adds	r6, r0, r4
     b2c:	190d      	adds	r5, r1, r4
     b2e:	4414      	add	r4, r2
     b30:	f8df a034 	ldr.w	sl, [pc, #52]	; b68 <map_fp_times_Zz+0x50>
     b34:	f04f 090c 	mov.w	r9, #12
     b38:	f8df 8030 	ldr.w	r8, [pc, #48]	; b6c <map_fp_times_Zz+0x54>
     b3c:	f8cd 9004 	str.w	r9, [sp, #4]
     b40:	f8cd 8000 	str.w	r8, [sp]
     b44:	4653      	mov	r3, sl
     b46:	4622      	mov	r2, r4
     b48:	4629      	mov	r1, r5
     b4a:	4630      	mov	r0, r6
     b4c:	f7ff feee 	bl	92c <mul_mont_n>
     b50:	3f01      	subs	r7, #1
     b52:	3e30      	subs	r6, #48	; 0x30
     b54:	3d30      	subs	r5, #48	; 0x30
     b56:	3c30      	subs	r4, #48	; 0x30
     b58:	f1b7 3fff 	cmp.w	r7, #4294967295
     b5c:	d1ee      	bne.n	b3c <map_fp_times_Zz+0x24>
     b5e:	b002      	add	sp, #8
     b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b64:	4770      	bx	lr
     b66:	bf00      	nop
     b68:	00015a08 	.word	0x00015a08
     b6c:	fffcfffd 	.word	0xfffcfffd

00000b70 <line_by_Px2>:
     b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     b74:	b082      	sub	sp, #8
     b76:	4604      	mov	r4, r0
     b78:	460d      	mov	r5, r1
     b7a:	3060      	adds	r0, #96	; 0x60
     b7c:	4e16      	ldr	r6, [pc, #88]	; (bd8 <line_by_Px2+0x68>)
     b7e:	f04f 080c 	mov.w	r8, #12
     b82:	f8cd 8004 	str.w	r8, [sp, #4]
     b86:	4f15      	ldr	r7, [pc, #84]	; (bdc <line_by_Px2+0x6c>)
     b88:	9700      	str	r7, [sp, #0]
     b8a:	4633      	mov	r3, r6
     b8c:	460a      	mov	r2, r1
     b8e:	4601      	mov	r1, r0
     b90:	f7ff fecc 	bl	92c <mul_mont_n>
     b94:	f104 0090 	add.w	r0, r4, #144	; 0x90
     b98:	f8cd 8004 	str.w	r8, [sp, #4]
     b9c:	9700      	str	r7, [sp, #0]
     b9e:	4633      	mov	r3, r6
     ba0:	462a      	mov	r2, r5
     ba2:	4601      	mov	r1, r0
     ba4:	f7ff fec2 	bl	92c <mul_mont_n>
     ba8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
     bac:	3530      	adds	r5, #48	; 0x30
     bae:	f8cd 8004 	str.w	r8, [sp, #4]
     bb2:	9700      	str	r7, [sp, #0]
     bb4:	4633      	mov	r3, r6
     bb6:	462a      	mov	r2, r5
     bb8:	4601      	mov	r1, r0
     bba:	f7ff feb7 	bl	92c <mul_mont_n>
     bbe:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
     bc2:	f8cd 8004 	str.w	r8, [sp, #4]
     bc6:	9700      	str	r7, [sp, #0]
     bc8:	4633      	mov	r3, r6
     bca:	462a      	mov	r2, r5
     bcc:	4601      	mov	r1, r0
     bce:	f7ff fead 	bl	92c <mul_mont_n>
     bd2:	b002      	add	sp, #8
     bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     bd8:	00015a08 	.word	0x00015a08
     bdc:	fffcfffd 	.word	0xfffcfffd

00000be0 <post_line_by_Px2>:
     be0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     be4:	b083      	sub	sp, #12
     be6:	4607      	mov	r7, r0
     be8:	460d      	mov	r5, r1
     bea:	4616      	mov	r6, r2
     bec:	1f0b      	subs	r3, r1, #4
     bee:	f1a0 0c04 	sub.w	ip, r0, #4
     bf2:	f101 0e5c 	add.w	lr, r1, #92	; 0x5c
     bf6:	f853 4f04 	ldr.w	r4, [r3, #4]!
     bfa:	f84c 4f04 	str.w	r4, [ip, #4]!
     bfe:	4573      	cmp	r3, lr
     c00:	d1f9      	bne.n	bf6 <post_line_by_Px2+0x16>
     c02:	4c1c      	ldr	r4, [pc, #112]	; (c74 <post_line_by_Px2+0x94>)
     c04:	f04f 090c 	mov.w	r9, #12
     c08:	f8cd 9004 	str.w	r9, [sp, #4]
     c0c:	f8df 8068 	ldr.w	r8, [pc, #104]	; c78 <post_line_by_Px2+0x98>
     c10:	f8cd 8000 	str.w	r8, [sp]
     c14:	4623      	mov	r3, r4
     c16:	4632      	mov	r2, r6
     c18:	f105 0160 	add.w	r1, r5, #96	; 0x60
     c1c:	f107 0060 	add.w	r0, r7, #96	; 0x60
     c20:	f7ff fe84 	bl	92c <mul_mont_n>
     c24:	f8cd 9004 	str.w	r9, [sp, #4]
     c28:	f8cd 8000 	str.w	r8, [sp]
     c2c:	4623      	mov	r3, r4
     c2e:	4632      	mov	r2, r6
     c30:	f105 0190 	add.w	r1, r5, #144	; 0x90
     c34:	f107 0090 	add.w	r0, r7, #144	; 0x90
     c38:	f7ff fe78 	bl	92c <mul_mont_n>
     c3c:	3630      	adds	r6, #48	; 0x30
     c3e:	f8cd 9004 	str.w	r9, [sp, #4]
     c42:	f8cd 8000 	str.w	r8, [sp]
     c46:	4623      	mov	r3, r4
     c48:	4632      	mov	r2, r6
     c4a:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
     c4e:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
     c52:	f7ff fe6b 	bl	92c <mul_mont_n>
     c56:	f8cd 9004 	str.w	r9, [sp, #4]
     c5a:	f8cd 8000 	str.w	r8, [sp]
     c5e:	4623      	mov	r3, r4
     c60:	4632      	mov	r2, r6
     c62:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
     c66:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
     c6a:	f7ff fe5f 	bl	92c <mul_mont_n>
     c6e:	b003      	add	sp, #12
     c70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     c74:	00015a08 	.word	0x00015a08
     c78:	fffcfffd 	.word	0xfffcfffd

00000c7c <add_mod_n>:
     c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c80:	b083      	sub	sp, #12
     c82:	af00      	add	r7, sp, #0
     c84:	607b      	str	r3, [r7, #4]
     c86:	6b3d      	ldr	r5, [r7, #48]	; 0x30
     c88:	ea4f 0985 	mov.w	r9, r5, lsl #2
     c8c:	f109 0407 	add.w	r4, r9, #7
     c90:	f024 0407 	bic.w	r4, r4, #7
     c94:	ebad 0d04 	sub.w	sp, sp, r4
     c98:	2d00      	cmp	r5, #0
     c9a:	d044      	beq.n	d26 <add_mod_n+0xaa>
     c9c:	46ea      	mov	sl, sp
     c9e:	f1a1 0c04 	sub.w	ip, r1, #4
     ca2:	f1a2 0e04 	sub.w	lr, r2, #4
     ca6:	f1aa 0404 	sub.w	r4, sl, #4
     caa:	eb0c 0809 	add.w	r8, ip, r9
     cae:	4626      	mov	r6, r4
     cb0:	2100      	movs	r1, #0
     cb2:	460d      	mov	r5, r1
     cb4:	f85c 2f04 	ldr.w	r2, [ip, #4]!
     cb8:	f85e 3f04 	ldr.w	r3, [lr, #4]!
     cbc:	18d2      	adds	r2, r2, r3
     cbe:	eb45 0b05 	adc.w	fp, r5, r5
     cc2:	1852      	adds	r2, r2, r1
     cc4:	f846 2f04 	str.w	r2, [r6, #4]!
     cc8:	f14b 0100 	adc.w	r1, fp, #0
     ccc:	45c4      	cmp	ip, r8
     cce:	d1f1      	bne.n	cb4 <add_mod_n+0x38>
     cd0:	687b      	ldr	r3, [r7, #4]
     cd2:	3b04      	subs	r3, #4
     cd4:	1f05      	subs	r5, r0, #4
     cd6:	f1a9 0204 	sub.w	r2, r9, #4
     cda:	4492      	add	sl, r2
     cdc:	46ae      	mov	lr, r5
     cde:	4626      	mov	r6, r4
     ce0:	f04f 0800 	mov.w	r8, #0
     ce4:	46c4      	mov	ip, r8
     ce6:	f856 2f04 	ldr.w	r2, [r6, #4]!
     cea:	ebb2 0208 	subs.w	r2, r2, r8
     cee:	eb6c 080c 	sbc.w	r8, ip, ip
     cf2:	f853 bf04 	ldr.w	fp, [r3, #4]!
     cf6:	ebb2 020b 	subs.w	r2, r2, fp
     cfa:	f168 0800 	sbc.w	r8, r8, #0
     cfe:	f84e 2f04 	str.w	r2, [lr, #4]!
     d02:	f008 0801 	and.w	r8, r8, #1
     d06:	4556      	cmp	r6, sl
     d08:	d1ed      	bne.n	ce6 <add_mod_n+0x6a>
     d0a:	eba1 0208 	sub.w	r2, r1, r8
     d0e:	3804      	subs	r0, #4
     d10:	4481      	add	r9, r0
     d12:	f855 1f04 	ldr.w	r1, [r5, #4]!
     d16:	f854 3f04 	ldr.w	r3, [r4, #4]!
     d1a:	404b      	eors	r3, r1
     d1c:	4013      	ands	r3, r2
     d1e:	404b      	eors	r3, r1
     d20:	602b      	str	r3, [r5, #0]
     d22:	454d      	cmp	r5, r9
     d24:	d1f5      	bne.n	d12 <add_mod_n+0x96>
     d26:	370c      	adds	r7, #12
     d28:	46bd      	mov	sp, r7
     d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000d2e <map_fp>:
     d2e:	b343      	cbz	r3, d82 <map_fp+0x54>
     d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     d34:	b082      	sub	sp, #8
     d36:	4604      	mov	r4, r0
     d38:	4688      	mov	r8, r1
     d3a:	1e5e      	subs	r6, r3, #1
     d3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     d40:	eb02 1203 	add.w	r2, r2, r3, lsl #4
     d44:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
     d48:	f8df 9038 	ldr.w	r9, [pc, #56]	; d84 <map_fp+0x56>
     d4c:	270c      	movs	r7, #12
     d4e:	f8df a038 	ldr.w	sl, [pc, #56]	; d88 <map_fp+0x5a>
     d52:	9701      	str	r7, [sp, #4]
     d54:	f8cd a000 	str.w	sl, [sp]
     d58:	464b      	mov	r3, r9
     d5a:	4642      	mov	r2, r8
     d5c:	4621      	mov	r1, r4
     d5e:	4620      	mov	r0, r4
     d60:	f7ff fde4 	bl	92c <mul_mont_n>
     d64:	9700      	str	r7, [sp, #0]
     d66:	464b      	mov	r3, r9
     d68:	462a      	mov	r2, r5
     d6a:	4621      	mov	r1, r4
     d6c:	4620      	mov	r0, r4
     d6e:	f7ff ff85 	bl	c7c <add_mod_n>
     d72:	3e01      	subs	r6, #1
     d74:	3d30      	subs	r5, #48	; 0x30
     d76:	f1b6 3fff 	cmp.w	r6, #4294967295
     d7a:	d1ea      	bne.n	d52 <map_fp+0x24>
     d7c:	b002      	add	sp, #8
     d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     d82:	4770      	bx	lr
     d84:	00015a08 	.word	0x00015a08
     d88:	fffcfffd 	.word	0xfffcfffd

00000d8c <mul_by_3_mod_n>:
     d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d90:	b087      	sub	sp, #28
     d92:	af00      	add	r7, sp, #0
     d94:	60f8      	str	r0, [r7, #12]
     d96:	4618      	mov	r0, r3
     d98:	60bb      	str	r3, [r7, #8]
     d9a:	009e      	lsls	r6, r3, #2
     d9c:	617e      	str	r6, [r7, #20]
     d9e:	1df3      	adds	r3, r6, #7
     da0:	f023 0307 	bic.w	r3, r3, #7
     da4:	ebad 0d03 	sub.w	sp, sp, r3
     da8:	466c      	mov	r4, sp
     daa:	613c      	str	r4, [r7, #16]
     dac:	ebad 0d03 	sub.w	sp, sp, r3
     db0:	2800      	cmp	r0, #0
     db2:	f000 8087 	beq.w	ec4 <mul_by_3_mod_n+0x138>
     db6:	466d      	mov	r5, sp
     db8:	1f08      	subs	r0, r1, #4
     dba:	3c04      	subs	r4, #4
     dbc:	6078      	str	r0, [r7, #4]
     dbe:	eb00 0e06 	add.w	lr, r0, r6
     dc2:	46a4      	mov	ip, r4
     dc4:	4603      	mov	r3, r0
     dc6:	2100      	movs	r1, #0
     dc8:	f853 6f04 	ldr.w	r6, [r3, #4]!
     dcc:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
     dd0:	f84c 1f04 	str.w	r1, [ip, #4]!
     dd4:	0ff1      	lsrs	r1, r6, #31
     dd6:	4573      	cmp	r3, lr
     dd8:	d1f6      	bne.n	dc8 <mul_by_3_mod_n+0x3c>
     dda:	f1a2 0e04 	sub.w	lr, r2, #4
     dde:	3d04      	subs	r5, #4
     de0:	697b      	ldr	r3, [r7, #20]
     de2:	f1a3 0b04 	sub.w	fp, r3, #4
     de6:	693b      	ldr	r3, [r7, #16]
     de8:	449b      	add	fp, r3
     dea:	46a9      	mov	r9, r5
     dec:	46f0      	mov	r8, lr
     dee:	46a4      	mov	ip, r4
     df0:	f04f 0a00 	mov.w	sl, #0
     df4:	4656      	mov	r6, sl
     df6:	f85c 3f04 	ldr.w	r3, [ip, #4]!
     dfa:	ebb3 0a0a 	subs.w	sl, r3, sl
     dfe:	eb66 0206 	sbc.w	r2, r6, r6
     e02:	f858 3f04 	ldr.w	r3, [r8, #4]!
     e06:	ebba 0303 	subs.w	r3, sl, r3
     e0a:	f162 0a00 	sbc.w	sl, r2, #0
     e0e:	f849 3f04 	str.w	r3, [r9, #4]!
     e12:	f00a 0a01 	and.w	sl, sl, #1
     e16:	45dc      	cmp	ip, fp
     e18:	d1ed      	bne.n	df6 <mul_by_3_mod_n+0x6a>
     e1a:	eba1 0a0a 	sub.w	sl, r1, sl
     e1e:	46a0      	mov	r8, r4
     e20:	46ac      	mov	ip, r5
     e22:	2600      	movs	r6, #0
     e24:	68ba      	ldr	r2, [r7, #8]
     e26:	f85c 1f04 	ldr.w	r1, [ip, #4]!
     e2a:	f858 3f04 	ldr.w	r3, [r8, #4]!
     e2e:	404b      	eors	r3, r1
     e30:	ea03 030a 	and.w	r3, r3, sl
     e34:	404b      	eors	r3, r1
     e36:	f8cc 3000 	str.w	r3, [ip]
     e3a:	3601      	adds	r6, #1
     e3c:	42b2      	cmp	r2, r6
     e3e:	d1f2      	bne.n	e26 <mul_by_3_mod_n+0x9a>
     e40:	f8d7 c004 	ldr.w	ip, [r7, #4]
     e44:	697b      	ldr	r3, [r7, #20]
     e46:	449c      	add	ip, r3
     e48:	4626      	mov	r6, r4
     e4a:	2300      	movs	r3, #0
     e4c:	4619      	mov	r1, r3
     e4e:	46a8      	mov	r8, r5
     e50:	f850 2f04 	ldr.w	r2, [r0, #4]!
     e54:	f858 5f04 	ldr.w	r5, [r8, #4]!
     e58:	1952      	adds	r2, r2, r5
     e5a:	eb41 0501 	adc.w	r5, r1, r1
     e5e:	18d2      	adds	r2, r2, r3
     e60:	f846 2f04 	str.w	r2, [r6, #4]!
     e64:	f145 0300 	adc.w	r3, r5, #0
     e68:	4560      	cmp	r0, ip
     e6a:	d1f1      	bne.n	e50 <mul_by_3_mod_n+0xc4>
     e6c:	68fa      	ldr	r2, [r7, #12]
     e6e:	1f15      	subs	r5, r2, #4
     e70:	697a      	ldr	r2, [r7, #20]
     e72:	f1a2 0804 	sub.w	r8, r2, #4
     e76:	693a      	ldr	r2, [r7, #16]
     e78:	4442      	add	r2, r8
     e7a:	4690      	mov	r8, r2
     e7c:	46ac      	mov	ip, r5
     e7e:	4620      	mov	r0, r4
     e80:	2200      	movs	r2, #0
     e82:	4616      	mov	r6, r2
     e84:	f850 1f04 	ldr.w	r1, [r0, #4]!
     e88:	1a8a      	subs	r2, r1, r2
     e8a:	eb66 0106 	sbc.w	r1, r6, r6
     e8e:	f85e 9f04 	ldr.w	r9, [lr, #4]!
     e92:	ebb2 0209 	subs.w	r2, r2, r9
     e96:	f161 0100 	sbc.w	r1, r1, #0
     e9a:	f84c 2f04 	str.w	r2, [ip, #4]!
     e9e:	f001 0201 	and.w	r2, r1, #1
     ea2:	4540      	cmp	r0, r8
     ea4:	d1ee      	bne.n	e84 <mul_by_3_mod_n+0xf8>
     ea6:	1a9b      	subs	r3, r3, r2
     ea8:	68fa      	ldr	r2, [r7, #12]
     eaa:	1f10      	subs	r0, r2, #4
     eac:	697a      	ldr	r2, [r7, #20]
     eae:	4410      	add	r0, r2
     eb0:	f855 1f04 	ldr.w	r1, [r5, #4]!
     eb4:	f854 2f04 	ldr.w	r2, [r4, #4]!
     eb8:	404a      	eors	r2, r1
     eba:	401a      	ands	r2, r3
     ebc:	404a      	eors	r2, r1
     ebe:	602a      	str	r2, [r5, #0]
     ec0:	4285      	cmp	r5, r0
     ec2:	d1f5      	bne.n	eb0 <mul_by_3_mod_n+0x124>
     ec4:	371c      	adds	r7, #28
     ec6:	46bd      	mov	sp, r7
     ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000ecc <lshift_mod_n>:
     ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ed0:	b085      	sub	sp, #20
     ed2:	af00      	add	r7, sp, #0
     ed4:	60f8      	str	r0, [r7, #12]
     ed6:	460d      	mov	r5, r1
     ed8:	607b      	str	r3, [r7, #4]
     eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     edc:	0099      	lsls	r1, r3, #2
     ede:	1dcb      	adds	r3, r1, #7
     ee0:	f023 0307 	bic.w	r3, r3, #7
     ee4:	ebad 0d03 	sub.w	sp, sp, r3
     ee8:	466b      	mov	r3, sp
     eea:	60bb      	str	r3, [r7, #8]
     eec:	2a00      	cmp	r2, #0
     eee:	d04b      	beq.n	f88 <lshift_mod_n+0xbc>
     ef0:	f102 3bff 	add.w	fp, r2, #4294967295
     ef4:	1f0a      	subs	r2, r1, #4
     ef6:	603a      	str	r2, [r7, #0]
     ef8:	eb03 0a02 	add.w	sl, r3, r2
     efc:	f1a0 0904 	sub.w	r9, r0, #4
     f00:	4489      	add	r9, r1
     f02:	2400      	movs	r4, #0
     f04:	e010      	b.n	f28 <lshift_mod_n+0x5c>
     f06:	f850 2f04 	ldr.w	r2, [r0, #4]!
     f0a:	f856 3f04 	ldr.w	r3, [r6, #4]!
     f0e:	4053      	eors	r3, r2
     f10:	ea03 0308 	and.w	r3, r3, r8
     f14:	4053      	eors	r3, r2
     f16:	6003      	str	r3, [r0, #0]
     f18:	4548      	cmp	r0, r9
     f1a:	d1f4      	bne.n	f06 <lshift_mod_n+0x3a>
     f1c:	f10b 3bff 	add.w	fp, fp, #4294967295
     f20:	f1bb 3fff 	cmp.w	fp, #4294967295
     f24:	d030      	beq.n	f88 <lshift_mod_n+0xbc>
     f26:	68fd      	ldr	r5, [r7, #12]
     f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     f2a:	2b00      	cmp	r3, #0
     f2c:	d0f6      	beq.n	f1c <lshift_mod_n+0x50>
     f2e:	1f2b      	subs	r3, r5, #4
     f30:	68ba      	ldr	r2, [r7, #8]
     f32:	1f16      	subs	r6, r2, #4
     f34:	683a      	ldr	r2, [r7, #0]
     f36:	4415      	add	r5, r2
     f38:	4630      	mov	r0, r6
     f3a:	4621      	mov	r1, r4
     f3c:	f853 2f04 	ldr.w	r2, [r3, #4]!
     f40:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
     f44:	f840 1f04 	str.w	r1, [r0, #4]!
     f48:	0fd1      	lsrs	r1, r2, #31
     f4a:	42ab      	cmp	r3, r5
     f4c:	d1f6      	bne.n	f3c <lshift_mod_n+0x70>
     f4e:	687b      	ldr	r3, [r7, #4]
     f50:	f1a3 0e04 	sub.w	lr, r3, #4
     f54:	68fb      	ldr	r3, [r7, #12]
     f56:	1f18      	subs	r0, r3, #4
     f58:	4684      	mov	ip, r0
     f5a:	4635      	mov	r5, r6
     f5c:	46a0      	mov	r8, r4
     f5e:	f855 3f04 	ldr.w	r3, [r5, #4]!
     f62:	ebb3 0808 	subs.w	r8, r3, r8
     f66:	eb64 0204 	sbc.w	r2, r4, r4
     f6a:	f85e 3f04 	ldr.w	r3, [lr, #4]!
     f6e:	ebb8 0303 	subs.w	r3, r8, r3
     f72:	f162 0800 	sbc.w	r8, r2, #0
     f76:	f84c 3f04 	str.w	r3, [ip, #4]!
     f7a:	f008 0801 	and.w	r8, r8, #1
     f7e:	4555      	cmp	r5, sl
     f80:	d1ed      	bne.n	f5e <lshift_mod_n+0x92>
     f82:	eba1 0808 	sub.w	r8, r1, r8
     f86:	e7be      	b.n	f06 <lshift_mod_n+0x3a>
     f88:	3714      	adds	r7, #20
     f8a:	46bd      	mov	sp, r7
     f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000f90 <from_mont_n>:
     f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f94:	b087      	sub	sp, #28
     f96:	af00      	add	r7, sp, #0
     f98:	6078      	str	r0, [r7, #4]
     f9a:	468c      	mov	ip, r1
     f9c:	613a      	str	r2, [r7, #16]
     f9e:	617b      	str	r3, [r7, #20]
     fa0:	f8d7 8040 	ldr.w	r8, [r7, #64]	; 0x40
     fa4:	ea4f 0188 	mov.w	r1, r8, lsl #2
     fa8:	60b9      	str	r1, [r7, #8]
     faa:	1dcb      	adds	r3, r1, #7
     fac:	f023 0307 	bic.w	r3, r3, #7
     fb0:	ebad 0d03 	sub.w	sp, sp, r3
     fb4:	f1b8 0f00 	cmp.w	r8, #0
     fb8:	d063      	beq.n	1082 <CONFIG_MAIN_STACK_SIZE+0x82>
     fba:	46ea      	mov	sl, sp
     fbc:	4616      	mov	r6, r2
     fbe:	f856 3904 	ldr.w	r3, [r6], #-4
     fc2:	60fb      	str	r3, [r7, #12]
     fc4:	440e      	add	r6, r1
     fc6:	f04f 0900 	mov.w	r9, #0
     fca:	464d      	mov	r5, r9
     fcc:	e000      	b.n	fd0 <from_mont_n+0x40>
     fce:	46d4      	mov	ip, sl
     fd0:	f8dc 1000 	ldr.w	r1, [ip]
     fd4:	697b      	ldr	r3, [r7, #20]
     fd6:	fb03 f401 	mul.w	r4, r3, r1
     fda:	68fb      	ldr	r3, [r7, #12]
     fdc:	fba4 2303 	umull	r2, r3, r4, r3
     fe0:	1852      	adds	r2, r2, r1
     fe2:	f143 0b00 	adc.w	fp, r3, #0
     fe6:	f1b8 0f01 	cmp.w	r8, #1
     fea:	d94e      	bls.n	108a <CONFIG_MAIN_STACK_SIZE+0x8a>
     fec:	f1aa 0e04 	sub.w	lr, sl, #4
     ff0:	6938      	ldr	r0, [r7, #16]
     ff2:	f850 2f04 	ldr.w	r2, [r0, #4]!
     ff6:	fba2 2104 	umull	r2, r1, r2, r4
     ffa:	f85c 3f04 	ldr.w	r3, [ip, #4]!
     ffe:	eb13 030b 	adds.w	r3, r3, fp
    1002:	eb45 0b05 	adc.w	fp, r5, r5
    1006:	18d3      	adds	r3, r2, r3
    1008:	f84e 3f04 	str.w	r3, [lr, #4]!
    100c:	eb41 0b0b 	adc.w	fp, r1, fp
    1010:	42b0      	cmp	r0, r6
    1012:	d1ee      	bne.n	ff2 <from_mont_n+0x62>
    1014:	4643      	mov	r3, r8
    1016:	3b01      	subs	r3, #1
    1018:	f84a b023 	str.w	fp, [sl, r3, lsl #2]
    101c:	f109 0901 	add.w	r9, r9, #1
    1020:	45c8      	cmp	r8, r9
    1022:	d1d4      	bne.n	fce <from_mont_n+0x3e>
    1024:	f1aa 0104 	sub.w	r1, sl, #4
    1028:	693b      	ldr	r3, [r7, #16]
    102a:	f1a3 0c04 	sub.w	ip, r3, #4
    102e:	687b      	ldr	r3, [r7, #4]
    1030:	1f18      	subs	r0, r3, #4
    1032:	68bb      	ldr	r3, [r7, #8]
    1034:	3b04      	subs	r3, #4
    1036:	449a      	add	sl, r3
    1038:	4606      	mov	r6, r0
    103a:	460c      	mov	r4, r1
    103c:	2300      	movs	r3, #0
    103e:	461d      	mov	r5, r3
    1040:	f854 2f04 	ldr.w	r2, [r4, #4]!
    1044:	1ad3      	subs	r3, r2, r3
    1046:	eb65 0205 	sbc.w	r2, r5, r5
    104a:	f85c ef04 	ldr.w	lr, [ip, #4]!
    104e:	ebb3 030e 	subs.w	r3, r3, lr
    1052:	f162 0200 	sbc.w	r2, r2, #0
    1056:	f846 3f04 	str.w	r3, [r6, #4]!
    105a:	f002 0301 	and.w	r3, r2, #1
    105e:	4554      	cmp	r4, sl
    1060:	d1ee      	bne.n	1040 <CONFIG_MAIN_STACK_SIZE+0x40>
    1062:	425e      	negs	r6, r3
    1064:	687a      	ldr	r2, [r7, #4]
    1066:	1f15      	subs	r5, r2, #4
    1068:	68ba      	ldr	r2, [r7, #8]
    106a:	4415      	add	r5, r2
    106c:	3b01      	subs	r3, #1
    106e:	f850 2f04 	ldr.w	r2, [r0, #4]!
    1072:	401a      	ands	r2, r3
    1074:	f851 4f04 	ldr.w	r4, [r1, #4]!
    1078:	4034      	ands	r4, r6
    107a:	4322      	orrs	r2, r4
    107c:	6002      	str	r2, [r0, #0]
    107e:	42a8      	cmp	r0, r5
    1080:	d1f5      	bne.n	106e <CONFIG_MAIN_STACK_SIZE+0x6e>
    1082:	371c      	adds	r7, #28
    1084:	46bd      	mov	sp, r7
    1086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    108a:	2301      	movs	r3, #1
    108c:	e7c3      	b.n	1016 <CONFIG_MAIN_STACK_SIZE+0x16>

0000108e <redc_mont_n>:
    108e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1092:	b087      	sub	sp, #28
    1094:	af00      	add	r7, sp, #0
    1096:	6078      	str	r0, [r7, #4]
    1098:	6039      	str	r1, [r7, #0]
    109a:	613a      	str	r2, [r7, #16]
    109c:	617b      	str	r3, [r7, #20]
    109e:	f8d7 8040 	ldr.w	r8, [r7, #64]	; 0x40
    10a2:	ea4f 0088 	mov.w	r0, r8, lsl #2
    10a6:	60b8      	str	r0, [r7, #8]
    10a8:	1dc3      	adds	r3, r0, #7
    10aa:	f023 0307 	bic.w	r3, r3, #7
    10ae:	ebad 0d03 	sub.w	sp, sp, r3
    10b2:	f1b8 0f00 	cmp.w	r8, #0
    10b6:	d07a      	beq.n	11ae <redc_mont_n+0x120>
    10b8:	46ea      	mov	sl, sp
    10ba:	4616      	mov	r6, r2
    10bc:	f856 3904 	ldr.w	r3, [r6], #-4
    10c0:	60fb      	str	r3, [r7, #12]
    10c2:	4406      	add	r6, r0
    10c4:	468c      	mov	ip, r1
    10c6:	f04f 0900 	mov.w	r9, #0
    10ca:	464d      	mov	r5, r9
    10cc:	e000      	b.n	10d0 <redc_mont_n+0x42>
    10ce:	46d4      	mov	ip, sl
    10d0:	f8dc 1000 	ldr.w	r1, [ip]
    10d4:	697b      	ldr	r3, [r7, #20]
    10d6:	fb03 f401 	mul.w	r4, r3, r1
    10da:	68fb      	ldr	r3, [r7, #12]
    10dc:	fba4 2303 	umull	r2, r3, r4, r3
    10e0:	1852      	adds	r2, r2, r1
    10e2:	f143 0b00 	adc.w	fp, r3, #0
    10e6:	f1b8 0f01 	cmp.w	r8, #1
    10ea:	d964      	bls.n	11b6 <redc_mont_n+0x128>
    10ec:	f1aa 0e04 	sub.w	lr, sl, #4
    10f0:	6938      	ldr	r0, [r7, #16]
    10f2:	f850 2f04 	ldr.w	r2, [r0, #4]!
    10f6:	fba2 2104 	umull	r2, r1, r2, r4
    10fa:	f85c 3f04 	ldr.w	r3, [ip, #4]!
    10fe:	eb13 030b 	adds.w	r3, r3, fp
    1102:	eb45 0b05 	adc.w	fp, r5, r5
    1106:	18d3      	adds	r3, r2, r3
    1108:	f84e 3f04 	str.w	r3, [lr, #4]!
    110c:	eb41 0b0b 	adc.w	fp, r1, fp
    1110:	42b0      	cmp	r0, r6
    1112:	d1ee      	bne.n	10f2 <redc_mont_n+0x64>
    1114:	4643      	mov	r3, r8
    1116:	3b01      	subs	r3, #1
    1118:	f84a b023 	str.w	fp, [sl, r3, lsl #2]
    111c:	f109 0901 	add.w	r9, r9, #1
    1120:	45c8      	cmp	r8, r9
    1122:	d1d4      	bne.n	10ce <redc_mont_n+0x40>
    1124:	68bb      	ldr	r3, [r7, #8]
    1126:	1f19      	subs	r1, r3, #4
    1128:	683b      	ldr	r3, [r7, #0]
    112a:	4419      	add	r1, r3
    112c:	f1aa 0504 	sub.w	r5, sl, #4
    1130:	3b04      	subs	r3, #4
    1132:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
    1136:	4628      	mov	r0, r5
    1138:	2300      	movs	r3, #0
    113a:	461c      	mov	r4, r3
    113c:	f851 2f04 	ldr.w	r2, [r1, #4]!
    1140:	f850 6f04 	ldr.w	r6, [r0, #4]!
    1144:	1992      	adds	r2, r2, r6
    1146:	eb44 0604 	adc.w	r6, r4, r4
    114a:	18d2      	adds	r2, r2, r3
    114c:	6002      	str	r2, [r0, #0]
    114e:	f146 0300 	adc.w	r3, r6, #0
    1152:	4549      	cmp	r1, r9
    1154:	d1f2      	bne.n	113c <redc_mont_n+0xae>
    1156:	693a      	ldr	r2, [r7, #16]
    1158:	f1a2 0e04 	sub.w	lr, r2, #4
    115c:	687a      	ldr	r2, [r7, #4]
    115e:	1f10      	subs	r0, r2, #4
    1160:	68ba      	ldr	r2, [r7, #8]
    1162:	3a04      	subs	r2, #4
    1164:	4492      	add	sl, r2
    1166:	4684      	mov	ip, r0
    1168:	462c      	mov	r4, r5
    116a:	2200      	movs	r2, #0
    116c:	4616      	mov	r6, r2
    116e:	f854 1f04 	ldr.w	r1, [r4, #4]!
    1172:	1a8a      	subs	r2, r1, r2
    1174:	eb66 0106 	sbc.w	r1, r6, r6
    1178:	f85e 8f04 	ldr.w	r8, [lr, #4]!
    117c:	ebb2 0208 	subs.w	r2, r2, r8
    1180:	f161 0100 	sbc.w	r1, r1, #0
    1184:	f84c 2f04 	str.w	r2, [ip, #4]!
    1188:	f001 0201 	and.w	r2, r1, #1
    118c:	4554      	cmp	r4, sl
    118e:	d1ee      	bne.n	116e <redc_mont_n+0xe0>
    1190:	1a9b      	subs	r3, r3, r2
    1192:	687a      	ldr	r2, [r7, #4]
    1194:	1f14      	subs	r4, r2, #4
    1196:	68ba      	ldr	r2, [r7, #8]
    1198:	4414      	add	r4, r2
    119a:	f850 1f04 	ldr.w	r1, [r0, #4]!
    119e:	f855 2f04 	ldr.w	r2, [r5, #4]!
    11a2:	404a      	eors	r2, r1
    11a4:	401a      	ands	r2, r3
    11a6:	404a      	eors	r2, r1
    11a8:	6002      	str	r2, [r0, #0]
    11aa:	42a0      	cmp	r0, r4
    11ac:	d1f5      	bne.n	119a <redc_mont_n+0x10c>
    11ae:	371c      	adds	r7, #28
    11b0:	46bd      	mov	sp, r7
    11b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11b6:	2301      	movs	r3, #1
    11b8:	e7ad      	b.n	1116 <redc_mont_n+0x88>

000011ba <sgn0_pty_mod_n>:
    11ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    11be:	af00      	add	r7, sp, #0
    11c0:	ea4f 0982 	mov.w	r9, r2, lsl #2
    11c4:	f109 0307 	add.w	r3, r9, #7
    11c8:	f023 0307 	bic.w	r3, r3, #7
    11cc:	ebad 0d03 	sub.w	sp, sp, r3
    11d0:	6803      	ldr	r3, [r0, #0]
    11d2:	f003 0e01 	and.w	lr, r3, #1
    11d6:	b382      	cbz	r2, 123a <sgn0_pty_mod_n+0x80>
    11d8:	46e8      	mov	r8, sp
    11da:	1f03      	subs	r3, r0, #4
    11dc:	f1a8 0004 	sub.w	r0, r8, #4
    11e0:	eb03 0409 	add.w	r4, r3, r9
    11e4:	4605      	mov	r5, r0
    11e6:	f04f 0c00 	mov.w	ip, #0
    11ea:	f853 2f04 	ldr.w	r2, [r3, #4]!
    11ee:	ea4c 0642 	orr.w	r6, ip, r2, lsl #1
    11f2:	f845 6f04 	str.w	r6, [r5, #4]!
    11f6:	ea4f 7cd2 	mov.w	ip, r2, lsr #31
    11fa:	42a3      	cmp	r3, r4
    11fc:	d1f5      	bne.n	11ea <sgn0_pty_mod_n+0x30>
    11fe:	1f0c      	subs	r4, r1, #4
    1200:	f1a9 0604 	sub.w	r6, r9, #4
    1204:	4446      	add	r6, r8
    1206:	2200      	movs	r2, #0
    1208:	4615      	mov	r5, r2
    120a:	f850 3f04 	ldr.w	r3, [r0, #4]!
    120e:	1a9a      	subs	r2, r3, r2
    1210:	eb65 0305 	sbc.w	r3, r5, r5
    1214:	f854 1f04 	ldr.w	r1, [r4, #4]!
    1218:	1a52      	subs	r2, r2, r1
    121a:	f163 0200 	sbc.w	r2, r3, #0
    121e:	f002 0201 	and.w	r2, r2, #1
    1222:	42b0      	cmp	r0, r6
    1224:	d1f1      	bne.n	120a <sgn0_pty_mod_n+0x50>
    1226:	ebac 0202 	sub.w	r2, ip, r2
    122a:	43d2      	mvns	r2, r2
    122c:	f002 0202 	and.w	r2, r2, #2
    1230:	ea42 000e 	orr.w	r0, r2, lr
    1234:	46bd      	mov	sp, r7
    1236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    123a:	4694      	mov	ip, r2
    123c:	e7f3      	b.n	1226 <sgn0_pty_mod_n+0x6c>

0000123e <mul_mont_nonred_n>:
    123e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1242:	b087      	sub	sp, #28
    1244:	af00      	add	r7, sp, #0
    1246:	6038      	str	r0, [r7, #0]
    1248:	6079      	str	r1, [r7, #4]
    124a:	60fb      	str	r3, [r7, #12]
    124c:	f8d7 8044 	ldr.w	r8, [r7, #68]	; 0x44
    1250:	f108 0401 	add.w	r4, r8, #1
    1254:	00a4      	lsls	r4, r4, #2
    1256:	1de3      	adds	r3, r4, #7
    1258:	f023 0307 	bic.w	r3, r3, #7
    125c:	ebad 0d03 	sub.w	sp, sp, r3
    1260:	46ea      	mov	sl, sp
    1262:	6816      	ldr	r6, [r2, #0]
    1264:	f1b8 0f00 	cmp.w	r8, #0
    1268:	d029      	beq.n	12be <mul_mont_nonred_n+0x80>
    126a:	1f0d      	subs	r5, r1, #4
    126c:	f1aa 0c04 	sub.w	ip, sl, #4
    1270:	f1a4 0e04 	sub.w	lr, r4, #4
    1274:	44ae      	add	lr, r5
    1276:	2100      	movs	r1, #0
    1278:	f855 3f04 	ldr.w	r3, [r5, #4]!
    127c:	fba3 3006 	umull	r3, r0, r3, r6
    1280:	185b      	adds	r3, r3, r1
    1282:	f84c 3f04 	str.w	r3, [ip, #4]!
    1286:	f140 0100 	adc.w	r1, r0, #0
    128a:	4575      	cmp	r5, lr
    128c:	d1f4      	bne.n	1278 <mul_mont_nonred_n+0x3a>
    128e:	4640      	mov	r0, r8
    1290:	f8da 3000 	ldr.w	r3, [sl]
    1294:	6c3d      	ldr	r5, [r7, #64]	; 0x40
    1296:	fb05 f303 	mul.w	r3, r5, r3
    129a:	f84a 1020 	str.w	r1, [sl, r0, lsl #2]
    129e:	f8d7 900c 	ldr.w	r9, [r7, #12]
    12a2:	f859 1904 	ldr.w	r1, [r9], #-4
    12a6:	6139      	str	r1, [r7, #16]
    12a8:	3204      	adds	r2, #4
    12aa:	617a      	str	r2, [r7, #20]
    12ac:	3c04      	subs	r4, #4
    12ae:	44a1      	add	r9, r4
    12b0:	f04f 0b01 	mov.w	fp, #1
    12b4:	2600      	movs	r6, #0
    12b6:	eb0a 0288 	add.w	r2, sl, r8, lsl #2
    12ba:	60ba      	str	r2, [r7, #8]
    12bc:	e03e      	b.n	133c <mul_mont_nonred_n+0xfe>
    12be:	4641      	mov	r1, r8
    12c0:	4640      	mov	r0, r8
    12c2:	e7e5      	b.n	1290 <mul_mont_nonred_n+0x52>
    12c4:	f8da 3004 	ldr.w	r3, [sl, #4]
    12c8:	440b      	add	r3, r1
    12ca:	f8ca 3000 	str.w	r3, [sl]
    12ce:	45d8      	cmp	r8, fp
    12d0:	d058      	beq.n	1384 <mul_mont_nonred_n+0x146>
    12d2:	f1b8 0f00 	cmp.w	r8, #0
    12d6:	d102      	bne.n	12de <mul_mont_nonred_n+0xa0>
    12d8:	4641      	mov	r1, r8
    12da:	4642      	mov	r2, r8
    12dc:	e022      	b.n	1324 <mul_mont_nonred_n+0xe6>
    12de:	697b      	ldr	r3, [r7, #20]
    12e0:	f8d3 c000 	ldr.w	ip, [r3]
    12e4:	e002      	b.n	12ec <mul_mont_nonred_n+0xae>
    12e6:	697b      	ldr	r3, [r7, #20]
    12e8:	f8d3 c000 	ldr.w	ip, [r3]
    12ec:	687b      	ldr	r3, [r7, #4]
    12ee:	f1a3 0e04 	sub.w	lr, r3, #4
    12f2:	f1aa 0504 	sub.w	r5, sl, #4
    12f6:	2400      	movs	r4, #0
    12f8:	4622      	mov	r2, r4
    12fa:	f85e 1f04 	ldr.w	r1, [lr, #4]!
    12fe:	fba1 100c 	umull	r1, r0, r1, ip
    1302:	f855 3f04 	ldr.w	r3, [r5, #4]!
    1306:	189b      	adds	r3, r3, r2
    1308:	eb46 0206 	adc.w	r2, r6, r6
    130c:	18cb      	adds	r3, r1, r3
    130e:	602b      	str	r3, [r5, #0]
    1310:	eb40 0202 	adc.w	r2, r0, r2
    1314:	3401      	adds	r4, #1
    1316:	45a0      	cmp	r8, r4
    1318:	d8ef      	bhi.n	12fa <mul_mont_nonred_n+0xbc>
    131a:	f1b8 0f00 	cmp.w	r8, #0
    131e:	bf14      	ite	ne
    1320:	4641      	movne	r1, r8
    1322:	2101      	moveq	r1, #1
    1324:	f8da 3000 	ldr.w	r3, [sl]
    1328:	6c38      	ldr	r0, [r7, #64]	; 0x40
    132a:	fb00 f303 	mul.w	r3, r0, r3
    132e:	f84a 2021 	str.w	r2, [sl, r1, lsl #2]
    1332:	f10b 0b01 	add.w	fp, fp, #1
    1336:	697a      	ldr	r2, [r7, #20]
    1338:	3204      	adds	r2, #4
    133a:	617a      	str	r2, [r7, #20]
    133c:	693a      	ldr	r2, [r7, #16]
    133e:	fba3 1002 	umull	r1, r0, r3, r2
    1342:	f8da 2000 	ldr.w	r2, [sl]
    1346:	188a      	adds	r2, r1, r2
    1348:	f140 0100 	adc.w	r1, r0, #0
    134c:	460a      	mov	r2, r1
    134e:	f1b8 0f01 	cmp.w	r8, #1
    1352:	d9b7      	bls.n	12c4 <mul_mont_nonred_n+0x86>
    1354:	4654      	mov	r4, sl
    1356:	68f8      	ldr	r0, [r7, #12]
    1358:	f850 1f04 	ldr.w	r1, [r0, #4]!
    135c:	fba1 1503 	umull	r1, r5, r1, r3
    1360:	188a      	adds	r2, r1, r2
    1362:	f145 0100 	adc.w	r1, r5, #0
    1366:	6865      	ldr	r5, [r4, #4]
    1368:	1952      	adds	r2, r2, r5
    136a:	f844 2b04 	str.w	r2, [r4], #4
    136e:	f141 0200 	adc.w	r2, r1, #0
    1372:	4548      	cmp	r0, r9
    1374:	d1f0      	bne.n	1358 <mul_mont_nonred_n+0x11a>
    1376:	68b9      	ldr	r1, [r7, #8]
    1378:	680b      	ldr	r3, [r1, #0]
    137a:	4413      	add	r3, r2
    137c:	f841 3c04 	str.w	r3, [r1, #-4]
    1380:	45d8      	cmp	r8, fp
    1382:	d1b0      	bne.n	12e6 <mul_mont_nonred_n+0xa8>
    1384:	f03b 4140 	bics.w	r1, fp, #3221225472	; 0xc0000000
    1388:	d00b      	beq.n	13a2 <mul_mont_nonred_n+0x164>
    138a:	f1aa 0a04 	sub.w	sl, sl, #4
    138e:	683b      	ldr	r3, [r7, #0]
    1390:	3b04      	subs	r3, #4
    1392:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
    1396:	f85a 2f04 	ldr.w	r2, [sl, #4]!
    139a:	f843 2f04 	str.w	r2, [r3, #4]!
    139e:	458a      	cmp	sl, r1
    13a0:	d1f9      	bne.n	1396 <mul_mont_nonred_n+0x158>
    13a2:	371c      	adds	r7, #28
    13a4:	46bd      	mov	sp, r7
    13a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000013aa <smul_n_shift_n>:
    13aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    13ae:	b085      	sub	sp, #20
    13b0:	af00      	add	r7, sp, #0
    13b2:	60f8      	str	r0, [r7, #12]
    13b4:	4690      	mov	r8, r2
    13b6:	607b      	str	r3, [r7, #4]
    13b8:	f8d7 b038 	ldr.w	fp, [r7, #56]	; 0x38
    13bc:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
    13be:	1c72      	adds	r2, r6, #1
    13c0:	60ba      	str	r2, [r7, #8]
    13c2:	0090      	lsls	r0, r2, #2
    13c4:	6038      	str	r0, [r7, #0]
    13c6:	1dc3      	adds	r3, r0, #7
    13c8:	f023 0307 	bic.w	r3, r3, #7
    13cc:	ebad 0d03 	sub.w	sp, sp, r3
    13d0:	466c      	mov	r4, sp
    13d2:	ebad 0d03 	sub.w	sp, sp, r3
    13d6:	466d      	mov	r5, sp
    13d8:	f8d8 3000 	ldr.w	r3, [r8]
    13dc:	ea4f 79e3 	mov.w	r9, r3, asr #31
    13e0:	ea83 7ae3 	eor.w	sl, r3, r3, asr #31
    13e4:	ebaa 7ae3 	sub.w	sl, sl, r3, asr #31
    13e8:	4633      	mov	r3, r6
    13ea:	464a      	mov	r2, r9
    13ec:	4620      	mov	r0, r4
    13ee:	f7ff fa12 	bl	816 <cneg_n>
    13f2:	4633      	mov	r3, r6
    13f4:	4652      	mov	r2, sl
    13f6:	4621      	mov	r1, r4
    13f8:	4620      	mov	r0, r4
    13fa:	f7ff fa26 	bl	84a <umul_n>
    13fe:	ea09 090a 	and.w	r9, r9, sl
    1402:	eba0 0009 	sub.w	r0, r0, r9
    1406:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
    140a:	f8db 3000 	ldr.w	r3, [fp]
    140e:	ea4f 79e3 	mov.w	r9, r3, asr #31
    1412:	ea83 7ae3 	eor.w	sl, r3, r3, asr #31
    1416:	ebaa 7ae3 	sub.w	sl, sl, r3, asr #31
    141a:	4633      	mov	r3, r6
    141c:	464a      	mov	r2, r9
    141e:	6879      	ldr	r1, [r7, #4]
    1420:	4628      	mov	r0, r5
    1422:	f7ff f9f8 	bl	816 <cneg_n>
    1426:	4633      	mov	r3, r6
    1428:	4652      	mov	r2, sl
    142a:	4629      	mov	r1, r5
    142c:	4628      	mov	r0, r5
    142e:	f7ff fa0c 	bl	84a <umul_n>
    1432:	ea09 090a 	and.w	r9, r9, sl
    1436:	eba0 0009 	sub.w	r0, r0, r9
    143a:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
    143e:	68ba      	ldr	r2, [r7, #8]
    1440:	2a00      	cmp	r2, #0
    1442:	d03e      	beq.n	14c2 <smul_n_shift_n+0x118>
    1444:	1f21      	subs	r1, r4, #4
    1446:	3d04      	subs	r5, #4
    1448:	6838      	ldr	r0, [r7, #0]
    144a:	f1a0 0c04 	sub.w	ip, r0, #4
    144e:	44a4      	add	ip, r4
    1450:	2200      	movs	r2, #0
    1452:	4610      	mov	r0, r2
    1454:	46ae      	mov	lr, r5
    1456:	f851 3f04 	ldr.w	r3, [r1, #4]!
    145a:	f85e 5f04 	ldr.w	r5, [lr, #4]!
    145e:	195b      	adds	r3, r3, r5
    1460:	eb40 0500 	adc.w	r5, r0, r0
    1464:	189b      	adds	r3, r3, r2
    1466:	600b      	str	r3, [r1, #0]
    1468:	f145 0200 	adc.w	r2, r5, #0
    146c:	4561      	cmp	r1, ip
    146e:	d1f2      	bne.n	1456 <smul_n_shift_n+0xac>
    1470:	6822      	ldr	r2, [r4, #0]
    1472:	b166      	cbz	r6, 148e <smul_n_shift_n+0xe4>
    1474:	68fb      	ldr	r3, [r7, #12]
    1476:	1f18      	subs	r0, r3, #4
    1478:	2100      	movs	r1, #0
    147a:	0f93      	lsrs	r3, r2, #30
    147c:	3101      	adds	r1, #1
    147e:	f854 2f04 	ldr.w	r2, [r4, #4]!
    1482:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
    1486:	f840 3f04 	str.w	r3, [r0, #4]!
    148a:	428e      	cmp	r6, r1
    148c:	d8f5      	bhi.n	147a <smul_n_shift_n+0xd0>
    148e:	f8d8 3000 	ldr.w	r3, [r8]
    1492:	ea83 73e2 	eor.w	r3, r3, r2, asr #31
    1496:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    149a:	f8c8 3000 	str.w	r3, [r8]
    149e:	f8db 3000 	ldr.w	r3, [fp]
    14a2:	ea83 73e2 	eor.w	r3, r3, r2, asr #31
    14a6:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    14aa:	f8cb 3000 	str.w	r3, [fp]
    14ae:	4633      	mov	r3, r6
    14b0:	17d2      	asrs	r2, r2, #31
    14b2:	68f9      	ldr	r1, [r7, #12]
    14b4:	4608      	mov	r0, r1
    14b6:	f7ff f9ae 	bl	816 <cneg_n>
    14ba:	3714      	adds	r7, #20
    14bc:	46bd      	mov	sp, r7
    14be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    14c2:	6822      	ldr	r2, [r4, #0]
    14c4:	e7d6      	b.n	1474 <smul_n_shift_n+0xca>

000014c6 <quot_rem_n>:
    14c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14ca:	b083      	sub	sp, #12
    14cc:	af00      	add	r7, sp, #0
    14ce:	6078      	str	r0, [r7, #4]
    14d0:	4608      	mov	r0, r1
    14d2:	6039      	str	r1, [r7, #0]
    14d4:	1c5e      	adds	r6, r3, #1
    14d6:	00b6      	lsls	r6, r6, #2
    14d8:	1df1      	adds	r1, r6, #7
    14da:	f021 0107 	bic.w	r1, r1, #7
    14de:	ebad 0d01 	sub.w	sp, sp, r1
    14e2:	46eb      	mov	fp, sp
    14e4:	2b00      	cmp	r3, #0
    14e6:	d055      	beq.n	1594 <quot_rem_n+0xce>
    14e8:	1f04      	subs	r4, r0, #4
    14ea:	f1ab 0504 	sub.w	r5, fp, #4
    14ee:	f1a6 0c04 	sub.w	ip, r6, #4
    14f2:	44a4      	add	ip, r4
    14f4:	2000      	movs	r0, #0
    14f6:	f854 1f04 	ldr.w	r1, [r4, #4]!
    14fa:	fba1 1e02 	umull	r1, lr, r1, r2
    14fe:	1809      	adds	r1, r1, r0
    1500:	f845 1f04 	str.w	r1, [r5, #4]!
    1504:	f14e 0000 	adc.w	r0, lr, #0
    1508:	4564      	cmp	r4, ip
    150a:	d1f4      	bne.n	14f6 <quot_rem_n+0x30>
    150c:	4619      	mov	r1, r3
    150e:	f84b 0021 	str.w	r0, [fp, r1, lsl #2]
    1512:	6879      	ldr	r1, [r7, #4]
    1514:	1f0d      	subs	r5, r1, #4
    1516:	f1ab 0c04 	sub.w	ip, fp, #4
    151a:	f1a6 0a04 	sub.w	sl, r6, #4
    151e:	448a      	add	sl, r1
    1520:	4664      	mov	r4, ip
    1522:	46ae      	mov	lr, r5
    1524:	f04f 0900 	mov.w	r9, #0
    1528:	46c8      	mov	r8, r9
    152a:	f85e 1f04 	ldr.w	r1, [lr, #4]!
    152e:	ebb1 0909 	subs.w	r9, r1, r9
    1532:	eb68 0008 	sbc.w	r0, r8, r8
    1536:	f854 1f04 	ldr.w	r1, [r4, #4]!
    153a:	ebb9 0101 	subs.w	r1, r9, r1
    153e:	f160 0900 	sbc.w	r9, r0, #0
    1542:	6021      	str	r1, [r4, #0]
    1544:	f009 0901 	and.w	r9, r9, #1
    1548:	45d6      	cmp	lr, sl
    154a:	d1ee      	bne.n	152a <quot_rem_n+0x64>
    154c:	f1c9 0800 	rsb	r8, r9, #0
    1550:	b1bb      	cbz	r3, 1582 <quot_rem_n+0xbc>
    1552:	6839      	ldr	r1, [r7, #0]
    1554:	3904      	subs	r1, #4
    1556:	3e08      	subs	r6, #8
    1558:	44b3      	add	fp, r6
    155a:	2400      	movs	r4, #0
    155c:	46a2      	mov	sl, r4
    155e:	f851 0f04 	ldr.w	r0, [r1, #4]!
    1562:	ea08 0000 	and.w	r0, r8, r0
    1566:	f85c 6f04 	ldr.w	r6, [ip, #4]!
    156a:	1936      	adds	r6, r6, r4
    156c:	eb4a 040a 	adc.w	r4, sl, sl
    1570:	1986      	adds	r6, r0, r6
    1572:	f144 0400 	adc.w	r4, r4, #0
    1576:	f845 6f04 	str.w	r6, [r5, #4]!
    157a:	f004 0401 	and.w	r4, r4, #1
    157e:	45dc      	cmp	ip, fp
    1580:	d1ed      	bne.n	155e <quot_rem_n+0x98>
    1582:	eba2 0009 	sub.w	r0, r2, r9
    1586:	687a      	ldr	r2, [r7, #4]
    1588:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    158c:	370c      	adds	r7, #12
    158e:	46bd      	mov	sp, r7
    1590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1594:	4618      	mov	r0, r3
    1596:	4619      	mov	r1, r3
    1598:	e7b9      	b.n	150e <quot_rem_n+0x48>

0000159a <POINTonE1_affine_Compress_BE>:
    159a:	b570      	push	{r4, r5, r6, lr}
    159c:	b09a      	sub	sp, #104	; 0x68
    159e:	4605      	mov	r5, r0
    15a0:	460c      	mov	r4, r1
    15a2:	230c      	movs	r3, #12
    15a4:	9300      	str	r3, [sp, #0]
    15a6:	4b15      	ldr	r3, [pc, #84]	; (15fc <POINTonE1_affine_Compress_BE+0x62>)
    15a8:	4a15      	ldr	r2, [pc, #84]	; (1600 <POINTonE1_affine_Compress_BE+0x66>)
    15aa:	a80e      	add	r0, sp, #56	; 0x38
    15ac:	f7ff fcf0 	bl	f90 <from_mont_n>
    15b0:	f105 0c30 	add.w	ip, r5, #48	; 0x30
    15b4:	462a      	mov	r2, r5
    15b6:	f105 012f 	add.w	r1, r5, #47	; 0x2f
    15ba:	1a8b      	subs	r3, r1, r2
    15bc:	f023 0003 	bic.w	r0, r3, #3
    15c0:	ad1a      	add	r5, sp, #104	; 0x68
    15c2:	4428      	add	r0, r5
    15c4:	f003 0303 	and.w	r3, r3, #3
    15c8:	00db      	lsls	r3, r3, #3
    15ca:	f850 0c30 	ldr.w	r0, [r0, #-48]
    15ce:	fa20 f303 	lsr.w	r3, r0, r3
    15d2:	f802 3b01 	strb.w	r3, [r2], #1
    15d6:	4594      	cmp	ip, r2
    15d8:	d1ef      	bne.n	15ba <POINTonE1_affine_Compress_BE+0x20>
    15da:	4d09      	ldr	r5, [pc, #36]	; (1600 <POINTonE1_affine_Compress_BE+0x66>)
    15dc:	260c      	movs	r6, #12
    15de:	9600      	str	r6, [sp, #0]
    15e0:	4b06      	ldr	r3, [pc, #24]	; (15fc <POINTonE1_affine_Compress_BE+0x62>)
    15e2:	462a      	mov	r2, r5
    15e4:	f104 0130 	add.w	r1, r4, #48	; 0x30
    15e8:	a802      	add	r0, sp, #8
    15ea:	f7ff fcd1 	bl	f90 <from_mont_n>
    15ee:	4632      	mov	r2, r6
    15f0:	4629      	mov	r1, r5
    15f2:	a802      	add	r0, sp, #8
    15f4:	f7ff fde1 	bl	11ba <sgn0_pty_mod_n>
    15f8:	b01a      	add	sp, #104	; 0x68
    15fa:	bd70      	pop	{r4, r5, r6, pc}
    15fc:	fffcfffd 	.word	0xfffcfffd
    1600:	00015a08 	.word	0x00015a08

00001604 <POINTonE1_affine_Serialize_BE>:
    1604:	b570      	push	{r4, r5, r6, lr}
    1606:	b08e      	sub	sp, #56	; 0x38
    1608:	4605      	mov	r5, r0
    160a:	460e      	mov	r6, r1
    160c:	230c      	movs	r3, #12
    160e:	9300      	str	r3, [sp, #0]
    1610:	4b1e      	ldr	r3, [pc, #120]	; (168c <POINTonE1_affine_Serialize_BE+0x88>)
    1612:	4a1f      	ldr	r2, [pc, #124]	; (1690 <POINTonE1_affine_Serialize_BE+0x8c>)
    1614:	a802      	add	r0, sp, #8
    1616:	f7ff fcbb 	bl	f90 <from_mont_n>
    161a:	f105 0430 	add.w	r4, r5, #48	; 0x30
    161e:	462a      	mov	r2, r5
    1620:	f105 002f 	add.w	r0, r5, #47	; 0x2f
    1624:	1a83      	subs	r3, r0, r2
    1626:	f023 0103 	bic.w	r1, r3, #3
    162a:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
    162e:	4461      	add	r1, ip
    1630:	f003 0303 	and.w	r3, r3, #3
    1634:	00db      	lsls	r3, r3, #3
    1636:	f851 1c30 	ldr.w	r1, [r1, #-48]
    163a:	fa21 f303 	lsr.w	r3, r1, r3
    163e:	f802 3b01 	strb.w	r3, [r2], #1
    1642:	42a2      	cmp	r2, r4
    1644:	d1ee      	bne.n	1624 <POINTonE1_affine_Serialize_BE+0x20>
    1646:	230c      	movs	r3, #12
    1648:	9300      	str	r3, [sp, #0]
    164a:	4b10      	ldr	r3, [pc, #64]	; (168c <POINTonE1_affine_Serialize_BE+0x88>)
    164c:	4a10      	ldr	r2, [pc, #64]	; (1690 <POINTonE1_affine_Serialize_BE+0x8c>)
    164e:	f106 0130 	add.w	r1, r6, #48	; 0x30
    1652:	a802      	add	r0, sp, #8
    1654:	f7ff fc9c 	bl	f90 <from_mont_n>
    1658:	f105 0160 	add.w	r1, r5, #96	; 0x60
    165c:	355f      	adds	r5, #95	; 0x5f
    165e:	1b2b      	subs	r3, r5, r4
    1660:	f023 0203 	bic.w	r2, r3, #3
    1664:	a80e      	add	r0, sp, #56	; 0x38
    1666:	4402      	add	r2, r0
    1668:	f003 0303 	and.w	r3, r3, #3
    166c:	00db      	lsls	r3, r3, #3
    166e:	f852 2c30 	ldr.w	r2, [r2, #-48]
    1672:	fa22 f303 	lsr.w	r3, r2, r3
    1676:	f804 3b01 	strb.w	r3, [r4], #1
    167a:	428c      	cmp	r4, r1
    167c:	d1ef      	bne.n	165e <POINTonE1_affine_Serialize_BE+0x5a>
    167e:	220c      	movs	r2, #12
    1680:	4903      	ldr	r1, [pc, #12]	; (1690 <POINTonE1_affine_Serialize_BE+0x8c>)
    1682:	a802      	add	r0, sp, #8
    1684:	f7ff fd99 	bl	11ba <sgn0_pty_mod_n>
    1688:	b00e      	add	sp, #56	; 0x38
    168a:	bd70      	pop	{r4, r5, r6, pc}
    168c:	fffcfffd 	.word	0xfffcfffd
    1690:	00015a08 	.word	0x00015a08

00001694 <POINTonE2_affine_Compress_BE>:
    1694:	b5f0      	push	{r4, r5, r6, r7, lr}
    1696:	b0a7      	sub	sp, #156	; 0x9c
    1698:	4606      	mov	r6, r0
    169a:	460d      	mov	r5, r1
    169c:	230c      	movs	r3, #12
    169e:	9300      	str	r3, [sp, #0]
    16a0:	4b3e      	ldr	r3, [pc, #248]	; (179c <POINTonE2_affine_Compress_BE+0x108>)
    16a2:	4a3f      	ldr	r2, [pc, #252]	; (17a0 <POINTonE2_affine_Compress_BE+0x10c>)
    16a4:	3130      	adds	r1, #48	; 0x30
    16a6:	a81a      	add	r0, sp, #104	; 0x68
    16a8:	f7ff fc72 	bl	f90 <from_mont_n>
    16ac:	f106 0430 	add.w	r4, r6, #48	; 0x30
    16b0:	4632      	mov	r2, r6
    16b2:	f106 002f 	add.w	r0, r6, #47	; 0x2f
    16b6:	1a83      	subs	r3, r0, r2
    16b8:	f023 0103 	bic.w	r1, r3, #3
    16bc:	af26      	add	r7, sp, #152	; 0x98
    16be:	4439      	add	r1, r7
    16c0:	f003 0303 	and.w	r3, r3, #3
    16c4:	00db      	lsls	r3, r3, #3
    16c6:	f851 1c30 	ldr.w	r1, [r1, #-48]
    16ca:	fa21 f303 	lsr.w	r3, r1, r3
    16ce:	f802 3b01 	strb.w	r3, [r2], #1
    16d2:	42a2      	cmp	r2, r4
    16d4:	d1ef      	bne.n	16b6 <POINTonE2_affine_Compress_BE+0x22>
    16d6:	230c      	movs	r3, #12
    16d8:	9300      	str	r3, [sp, #0]
    16da:	4b30      	ldr	r3, [pc, #192]	; (179c <POINTonE2_affine_Compress_BE+0x108>)
    16dc:	4a30      	ldr	r2, [pc, #192]	; (17a0 <POINTonE2_affine_Compress_BE+0x10c>)
    16de:	4629      	mov	r1, r5
    16e0:	a81a      	add	r0, sp, #104	; 0x68
    16e2:	f7ff fc55 	bl	f90 <from_mont_n>
    16e6:	f106 0160 	add.w	r1, r6, #96	; 0x60
    16ea:	365f      	adds	r6, #95	; 0x5f
    16ec:	1b33      	subs	r3, r6, r4
    16ee:	f023 0203 	bic.w	r2, r3, #3
    16f2:	a826      	add	r0, sp, #152	; 0x98
    16f4:	4402      	add	r2, r0
    16f6:	f003 0303 	and.w	r3, r3, #3
    16fa:	00db      	lsls	r3, r3, #3
    16fc:	f852 2c30 	ldr.w	r2, [r2, #-48]
    1700:	fa22 f303 	lsr.w	r3, r2, r3
    1704:	f804 3b01 	strb.w	r3, [r4], #1
    1708:	428c      	cmp	r4, r1
    170a:	d1ef      	bne.n	16ec <POINTonE2_affine_Compress_BE+0x58>
    170c:	4f23      	ldr	r7, [pc, #140]	; (179c <POINTonE2_affine_Compress_BE+0x108>)
    170e:	4c24      	ldr	r4, [pc, #144]	; (17a0 <POINTonE2_affine_Compress_BE+0x10c>)
    1710:	260c      	movs	r6, #12
    1712:	9600      	str	r6, [sp, #0]
    1714:	463b      	mov	r3, r7
    1716:	4622      	mov	r2, r4
    1718:	f105 0160 	add.w	r1, r5, #96	; 0x60
    171c:	a802      	add	r0, sp, #8
    171e:	f7ff fc37 	bl	f90 <from_mont_n>
    1722:	9600      	str	r6, [sp, #0]
    1724:	463b      	mov	r3, r7
    1726:	4622      	mov	r2, r4
    1728:	f105 0190 	add.w	r1, r5, #144	; 0x90
    172c:	a80e      	add	r0, sp, #56	; 0x38
    172e:	f7ff fc2f 	bl	f90 <from_mont_n>
    1732:	4632      	mov	r2, r6
    1734:	4621      	mov	r1, r4
    1736:	a802      	add	r0, sp, #8
    1738:	f7ff fd3f 	bl	11ba <sgn0_pty_mod_n>
    173c:	4605      	mov	r5, r0
    173e:	4632      	mov	r2, r6
    1740:	4621      	mov	r1, r4
    1742:	a80e      	add	r0, sp, #56	; 0x38
    1744:	f7ff fd39 	bl	11ba <sgn0_pty_mod_n>
    1748:	aa0d      	add	r2, sp, #52	; 0x34
    174a:	ab02      	add	r3, sp, #8
    174c:	ae19      	add	r6, sp, #100	; 0x64
    174e:	2100      	movs	r1, #0
    1750:	f852 4f04 	ldr.w	r4, [r2, #4]!
    1754:	4321      	orrs	r1, r4
    1756:	42b2      	cmp	r2, r6
    1758:	d1fa      	bne.n	1750 <POINTonE2_affine_Compress_BE+0xbc>
    175a:	1e4c      	subs	r4, r1, #1
    175c:	ea24 0101 	bic.w	r1, r4, r1
    1760:	0fcc      	lsrs	r4, r1, #31
    1762:	ea05 71e1 	and.w	r1, r5, r1, asr #31
    1766:	3c01      	subs	r4, #1
    1768:	4004      	ands	r4, r0
    176a:	430c      	orrs	r4, r1
    176c:	f103 0630 	add.w	r6, r3, #48	; 0x30
    1770:	2200      	movs	r2, #0
    1772:	f853 1b04 	ldr.w	r1, [r3], #4
    1776:	430a      	orrs	r2, r1
    1778:	429e      	cmp	r6, r3
    177a:	d1fa      	bne.n	1772 <POINTonE2_affine_Compress_BE+0xde>
    177c:	1e53      	subs	r3, r2, #1
    177e:	ea23 0202 	bic.w	r2, r3, r2
    1782:	0fd3      	lsrs	r3, r2, #31
    1784:	ea00 70e2 	and.w	r0, r0, r2, asr #31
    1788:	3b01      	subs	r3, #1
    178a:	402b      	ands	r3, r5
    178c:	4303      	orrs	r3, r0
    178e:	f003 0301 	and.w	r3, r3, #1
    1792:	f004 0002 	and.w	r0, r4, #2
    1796:	4318      	orrs	r0, r3
    1798:	b027      	add	sp, #156	; 0x9c
    179a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    179c:	fffcfffd 	.word	0xfffcfffd
    17a0:	00015a08 	.word	0x00015a08

000017a4 <POINTonE2_affine_Serialize_BE>:
    17a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    17a6:	b09b      	sub	sp, #108	; 0x6c
    17a8:	4606      	mov	r6, r0
    17aa:	460f      	mov	r7, r1
    17ac:	230c      	movs	r3, #12
    17ae:	9300      	str	r3, [sp, #0]
    17b0:	4b52      	ldr	r3, [pc, #328]	; (18fc <POINTonE2_affine_Serialize_BE+0x158>)
    17b2:	4a53      	ldr	r2, [pc, #332]	; (1900 <POINTonE2_affine_Serialize_BE+0x15c>)
    17b4:	3130      	adds	r1, #48	; 0x30
    17b6:	a80e      	add	r0, sp, #56	; 0x38
    17b8:	f7ff fbea 	bl	f90 <from_mont_n>
    17bc:	f106 0430 	add.w	r4, r6, #48	; 0x30
    17c0:	4632      	mov	r2, r6
    17c2:	f106 002f 	add.w	r0, r6, #47	; 0x2f
    17c6:	1a83      	subs	r3, r0, r2
    17c8:	f023 0103 	bic.w	r1, r3, #3
    17cc:	ad1a      	add	r5, sp, #104	; 0x68
    17ce:	4429      	add	r1, r5
    17d0:	f003 0303 	and.w	r3, r3, #3
    17d4:	00db      	lsls	r3, r3, #3
    17d6:	f851 1c30 	ldr.w	r1, [r1, #-48]
    17da:	fa21 f303 	lsr.w	r3, r1, r3
    17de:	f802 3b01 	strb.w	r3, [r2], #1
    17e2:	42a2      	cmp	r2, r4
    17e4:	d1ef      	bne.n	17c6 <POINTonE2_affine_Serialize_BE+0x22>
    17e6:	230c      	movs	r3, #12
    17e8:	9300      	str	r3, [sp, #0]
    17ea:	4b44      	ldr	r3, [pc, #272]	; (18fc <POINTonE2_affine_Serialize_BE+0x158>)
    17ec:	4a44      	ldr	r2, [pc, #272]	; (1900 <POINTonE2_affine_Serialize_BE+0x15c>)
    17ee:	4639      	mov	r1, r7
    17f0:	a802      	add	r0, sp, #8
    17f2:	f7ff fbcd 	bl	f90 <from_mont_n>
    17f6:	f106 0560 	add.w	r5, r6, #96	; 0x60
    17fa:	f106 015f 	add.w	r1, r6, #95	; 0x5f
    17fe:	1b0b      	subs	r3, r1, r4
    1800:	f023 0203 	bic.w	r2, r3, #3
    1804:	a81a      	add	r0, sp, #104	; 0x68
    1806:	4402      	add	r2, r0
    1808:	f003 0303 	and.w	r3, r3, #3
    180c:	00db      	lsls	r3, r3, #3
    180e:	f852 2c60 	ldr.w	r2, [r2, #-96]
    1812:	fa22 f303 	lsr.w	r3, r2, r3
    1816:	f804 3b01 	strb.w	r3, [r4], #1
    181a:	42ac      	cmp	r4, r5
    181c:	d1ef      	bne.n	17fe <POINTonE2_affine_Serialize_BE+0x5a>
    181e:	230c      	movs	r3, #12
    1820:	9300      	str	r3, [sp, #0]
    1822:	4b36      	ldr	r3, [pc, #216]	; (18fc <POINTonE2_affine_Serialize_BE+0x158>)
    1824:	4a36      	ldr	r2, [pc, #216]	; (1900 <POINTonE2_affine_Serialize_BE+0x15c>)
    1826:	f107 0190 	add.w	r1, r7, #144	; 0x90
    182a:	a80e      	add	r0, sp, #56	; 0x38
    182c:	f7ff fbb0 	bl	f90 <from_mont_n>
    1830:	f106 0490 	add.w	r4, r6, #144	; 0x90
    1834:	f106 018f 	add.w	r1, r6, #143	; 0x8f
    1838:	1b4b      	subs	r3, r1, r5
    183a:	f023 0203 	bic.w	r2, r3, #3
    183e:	a81a      	add	r0, sp, #104	; 0x68
    1840:	4402      	add	r2, r0
    1842:	f003 0303 	and.w	r3, r3, #3
    1846:	00db      	lsls	r3, r3, #3
    1848:	f852 2c30 	ldr.w	r2, [r2, #-48]
    184c:	fa22 f303 	lsr.w	r3, r2, r3
    1850:	f805 3b01 	strb.w	r3, [r5], #1
    1854:	42ac      	cmp	r4, r5
    1856:	d1ef      	bne.n	1838 <POINTonE2_affine_Serialize_BE+0x94>
    1858:	230c      	movs	r3, #12
    185a:	9300      	str	r3, [sp, #0]
    185c:	4b27      	ldr	r3, [pc, #156]	; (18fc <POINTonE2_affine_Serialize_BE+0x158>)
    185e:	4a28      	ldr	r2, [pc, #160]	; (1900 <POINTonE2_affine_Serialize_BE+0x15c>)
    1860:	f107 0160 	add.w	r1, r7, #96	; 0x60
    1864:	a802      	add	r0, sp, #8
    1866:	f7ff fb93 	bl	f90 <from_mont_n>
    186a:	f106 01c0 	add.w	r1, r6, #192	; 0xc0
    186e:	36bf      	adds	r6, #191	; 0xbf
    1870:	1b33      	subs	r3, r6, r4
    1872:	f023 0203 	bic.w	r2, r3, #3
    1876:	a81a      	add	r0, sp, #104	; 0x68
    1878:	4402      	add	r2, r0
    187a:	f003 0303 	and.w	r3, r3, #3
    187e:	00db      	lsls	r3, r3, #3
    1880:	f852 2c60 	ldr.w	r2, [r2, #-96]
    1884:	fa22 f303 	lsr.w	r3, r2, r3
    1888:	f804 3b01 	strb.w	r3, [r4], #1
    188c:	428c      	cmp	r4, r1
    188e:	d1ef      	bne.n	1870 <POINTonE2_affine_Serialize_BE+0xcc>
    1890:	4c1b      	ldr	r4, [pc, #108]	; (1900 <POINTonE2_affine_Serialize_BE+0x15c>)
    1892:	220c      	movs	r2, #12
    1894:	4621      	mov	r1, r4
    1896:	a802      	add	r0, sp, #8
    1898:	f7ff fc8f 	bl	11ba <sgn0_pty_mod_n>
    189c:	4605      	mov	r5, r0
    189e:	220c      	movs	r2, #12
    18a0:	4621      	mov	r1, r4
    18a2:	a80e      	add	r0, sp, #56	; 0x38
    18a4:	f7ff fc89 	bl	11ba <sgn0_pty_mod_n>
    18a8:	aa0d      	add	r2, sp, #52	; 0x34
    18aa:	ab02      	add	r3, sp, #8
    18ac:	ae19      	add	r6, sp, #100	; 0x64
    18ae:	2100      	movs	r1, #0
    18b0:	f852 4f04 	ldr.w	r4, [r2, #4]!
    18b4:	4321      	orrs	r1, r4
    18b6:	42b2      	cmp	r2, r6
    18b8:	d1fa      	bne.n	18b0 <POINTonE2_affine_Serialize_BE+0x10c>
    18ba:	1e4c      	subs	r4, r1, #1
    18bc:	ea24 0101 	bic.w	r1, r4, r1
    18c0:	0fcc      	lsrs	r4, r1, #31
    18c2:	ea05 71e1 	and.w	r1, r5, r1, asr #31
    18c6:	3c01      	subs	r4, #1
    18c8:	4004      	ands	r4, r0
    18ca:	430c      	orrs	r4, r1
    18cc:	f103 0630 	add.w	r6, r3, #48	; 0x30
    18d0:	2200      	movs	r2, #0
    18d2:	f853 1b04 	ldr.w	r1, [r3], #4
    18d6:	430a      	orrs	r2, r1
    18d8:	429e      	cmp	r6, r3
    18da:	d1fa      	bne.n	18d2 <POINTonE2_affine_Serialize_BE+0x12e>
    18dc:	1e53      	subs	r3, r2, #1
    18de:	ea23 0202 	bic.w	r2, r3, r2
    18e2:	0fd3      	lsrs	r3, r2, #31
    18e4:	ea00 70e2 	and.w	r0, r0, r2, asr #31
    18e8:	3b01      	subs	r3, #1
    18ea:	402b      	ands	r3, r5
    18ec:	4303      	orrs	r3, r0
    18ee:	f003 0301 	and.w	r3, r3, #1
    18f2:	f004 0002 	and.w	r0, r4, #2
    18f6:	4318      	orrs	r0, r3
    18f8:	b01b      	add	sp, #108	; 0x6c
    18fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18fc:	fffcfffd 	.word	0xfffcfffd
    1900:	00015a08 	.word	0x00015a08

00001904 <POINTonE1_affine_on_curve>:
    1904:	b5f0      	push	{r4, r5, r6, r7, lr}
    1906:	b09b      	sub	sp, #108	; 0x6c
    1908:	4604      	mov	r4, r0
    190a:	4d24      	ldr	r5, [pc, #144]	; (199c <POINTonE1_affine_on_curve+0x98>)
    190c:	260c      	movs	r6, #12
    190e:	9601      	str	r6, [sp, #4]
    1910:	4f23      	ldr	r7, [pc, #140]	; (19a0 <POINTonE1_affine_on_curve+0x9c>)
    1912:	9700      	str	r7, [sp, #0]
    1914:	462b      	mov	r3, r5
    1916:	4602      	mov	r2, r0
    1918:	4601      	mov	r1, r0
    191a:	a80e      	add	r0, sp, #56	; 0x38
    191c:	f7ff f806 	bl	92c <mul_mont_n>
    1920:	9601      	str	r6, [sp, #4]
    1922:	9700      	str	r7, [sp, #0]
    1924:	462b      	mov	r3, r5
    1926:	4622      	mov	r2, r4
    1928:	a90e      	add	r1, sp, #56	; 0x38
    192a:	4608      	mov	r0, r1
    192c:	f7fe fffe 	bl	92c <mul_mont_n>
    1930:	9600      	str	r6, [sp, #0]
    1932:	462b      	mov	r3, r5
    1934:	f105 0260 	add.w	r2, r5, #96	; 0x60
    1938:	a90e      	add	r1, sp, #56	; 0x38
    193a:	4608      	mov	r0, r1
    193c:	f7ff f99e 	bl	c7c <add_mod_n>
    1940:	f104 0130 	add.w	r1, r4, #48	; 0x30
    1944:	9601      	str	r6, [sp, #4]
    1946:	9700      	str	r7, [sp, #0]
    1948:	462b      	mov	r3, r5
    194a:	460a      	mov	r2, r1
    194c:	a802      	add	r0, sp, #8
    194e:	f7fe ffed 	bl	92c <mul_mont_n>
    1952:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
    1956:	f10d 0e08 	add.w	lr, sp, #8
    195a:	a81a      	add	r0, sp, #104	; 0x68
    195c:	2100      	movs	r1, #0
    195e:	f85c 3b04 	ldr.w	r3, [ip], #4
    1962:	f85e 2b04 	ldr.w	r2, [lr], #4
    1966:	4053      	eors	r3, r2
    1968:	4319      	orrs	r1, r3
    196a:	4584      	cmp	ip, r0
    196c:	d1f7      	bne.n	195e <POINTonE1_affine_on_curve+0x5a>
    196e:	f101 3eff 	add.w	lr, r1, #4294967295
    1972:	ea2e 0101 	bic.w	r1, lr, r1
    1976:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
    197a:	1f23      	subs	r3, r4, #4
    197c:	f104 0c5c 	add.w	ip, r4, #92	; 0x5c
    1980:	2100      	movs	r1, #0
    1982:	f853 2f04 	ldr.w	r2, [r3, #4]!
    1986:	4311      	orrs	r1, r2
    1988:	4563      	cmp	r3, ip
    198a:	d1fa      	bne.n	1982 <POINTonE1_affine_on_curve+0x7e>
    198c:	1e48      	subs	r0, r1, #1
    198e:	ea20 0001 	bic.w	r0, r0, r1
    1992:	ea4e 70d0 	orr.w	r0, lr, r0, lsr #31
    1996:	b01b      	add	sp, #108	; 0x6c
    1998:	bdf0      	pop	{r4, r5, r6, r7, pc}
    199a:	bf00      	nop
    199c:	00015a08 	.word	0x00015a08
    19a0:	fffcfffd 	.word	0xfffcfffd

000019a4 <cneg_mod_n>:
    19a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    19a8:	b083      	sub	sp, #12
    19aa:	af00      	add	r7, sp, #0
    19ac:	607a      	str	r2, [r7, #4]
    19ae:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
    19b2:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
    19b6:	f10b 0207 	add.w	r2, fp, #7
    19ba:	f022 0207 	bic.w	r2, r2, #7
    19be:	ebad 0d02 	sub.w	sp, sp, r2
    19c2:	f1ba 0f00 	cmp.w	sl, #0
    19c6:	d045      	beq.n	1a54 <cneg_mod_n+0xb0>
    19c8:	466d      	mov	r5, sp
    19ca:	f1a3 0e04 	sub.w	lr, r3, #4
    19ce:	1f0c      	subs	r4, r1, #4
    19d0:	f1a5 0904 	sub.w	r9, r5, #4
    19d4:	44f3      	add	fp, lr
    19d6:	46a0      	mov	r8, r4
    19d8:	2300      	movs	r3, #0
    19da:	461e      	mov	r6, r3
    19dc:	f85e 2f04 	ldr.w	r2, [lr, #4]!
    19e0:	1ad3      	subs	r3, r2, r3
    19e2:	eb66 0c06 	sbc.w	ip, r6, r6
    19e6:	f858 2f04 	ldr.w	r2, [r8, #4]!
    19ea:	1a9a      	subs	r2, r3, r2
    19ec:	f16c 0300 	sbc.w	r3, ip, #0
    19f0:	f849 2f04 	str.w	r2, [r9, #4]!
    19f4:	f003 0301 	and.w	r3, r3, #1
    19f8:	45de      	cmp	lr, fp
    19fa:	d1ef      	bne.n	19dc <cneg_mod_n+0x38>
    19fc:	f03a 4c40 	bics.w	ip, sl, #3221225472	; 0xc0000000
    1a00:	d02c      	beq.n	1a5c <cneg_mod_n+0xb8>
    1a02:	1f0e      	subs	r6, r1, #4
    1a04:	eb06 068c 	add.w	r6, r6, ip, lsl #2
    1a08:	2300      	movs	r3, #0
    1a0a:	f854 2f04 	ldr.w	r2, [r4, #4]!
    1a0e:	4313      	orrs	r3, r2
    1a10:	42b4      	cmp	r4, r6
    1a12:	d1fa      	bne.n	1a0a <cneg_mod_n+0x66>
    1a14:	1e5a      	subs	r2, r3, #1
    1a16:	ea22 0303 	bic.w	r3, r2, r3
    1a1a:	f8d7 c004 	ldr.w	ip, [r7, #4]
    1a1e:	2b00      	cmp	r3, #0
    1a20:	bfb4      	ite	lt
    1a22:	f04f 0c00 	movlt.w	ip, #0
    1a26:	f00c 0c01 	andge.w	ip, ip, #1
    1a2a:	f1cc 0600 	rsb	r6, ip, #0
    1a2e:	3904      	subs	r1, #4
    1a30:	3d04      	subs	r5, #4
    1a32:	3804      	subs	r0, #4
    1a34:	2400      	movs	r4, #0
    1a36:	f10c 3cff 	add.w	ip, ip, #4294967295
    1a3a:	f851 3f04 	ldr.w	r3, [r1, #4]!
    1a3e:	ea0c 0303 	and.w	r3, ip, r3
    1a42:	f855 2f04 	ldr.w	r2, [r5, #4]!
    1a46:	4032      	ands	r2, r6
    1a48:	4313      	orrs	r3, r2
    1a4a:	f840 3f04 	str.w	r3, [r0, #4]!
    1a4e:	3401      	adds	r4, #1
    1a50:	45a2      	cmp	sl, r4
    1a52:	d8f2      	bhi.n	1a3a <cneg_mod_n+0x96>
    1a54:	370c      	adds	r7, #12
    1a56:	46bd      	mov	sp, r7
    1a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a5c:	4666      	mov	r6, ip
    1a5e:	e7e6      	b.n	1a2e <cneg_mod_n+0x8a>

00001a60 <POINTonE1_cneg>:
    1a60:	b500      	push	{lr}
    1a62:	b083      	sub	sp, #12
    1a64:	460a      	mov	r2, r1
    1a66:	3030      	adds	r0, #48	; 0x30
    1a68:	230c      	movs	r3, #12
    1a6a:	9300      	str	r3, [sp, #0]
    1a6c:	4b03      	ldr	r3, [pc, #12]	; (1a7c <POINTonE1_cneg+0x1c>)
    1a6e:	4601      	mov	r1, r0
    1a70:	f7ff ff98 	bl	19a4 <cneg_mod_n>
    1a74:	b003      	add	sp, #12
    1a76:	f85d fb04 	ldr.w	pc, [sp], #4
    1a7a:	bf00      	nop
    1a7c:	00015a08 	.word	0x00015a08

00001a80 <POINTonE1_gather_booth_w4>:
    1a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a82:	460d      	mov	r5, r1
    1a84:	f3c2 1100 	ubfx	r1, r2, #4, #1
    1a88:	f002 070f 	and.w	r7, r2, #15
    1a8c:	4603      	mov	r3, r0
    1a8e:	f100 0490 	add.w	r4, r0, #144	; 0x90
    1a92:	2200      	movs	r2, #0
    1a94:	f843 2b04 	str.w	r2, [r3], #4
    1a98:	42a3      	cmp	r3, r4
    1a9a:	d1fb      	bne.n	1a94 <POINTonE1_gather_booth_w4+0x14>
    1a9c:	358c      	adds	r5, #140	; 0x8c
    1a9e:	2601      	movs	r6, #1
    1aa0:	ea87 0e06 	eor.w	lr, r7, r6
    1aa4:	fa5f fe8e 	uxtb.w	lr, lr
    1aa8:	f10e 3eff 	add.w	lr, lr, #4294967295
    1aac:	ea4f 7eee 	mov.w	lr, lr, asr #31
    1ab0:	f1a5 0c90 	sub.w	ip, r5, #144	; 0x90
    1ab4:	1f02      	subs	r2, r0, #4
    1ab6:	f852 4f04 	ldr.w	r4, [r2, #4]!
    1aba:	f85c 3f04 	ldr.w	r3, [ip, #4]!
    1abe:	4063      	eors	r3, r4
    1ac0:	ea03 030e 	and.w	r3, r3, lr
    1ac4:	4063      	eors	r3, r4
    1ac6:	6013      	str	r3, [r2, #0]
    1ac8:	45ac      	cmp	ip, r5
    1aca:	d1f4      	bne.n	1ab6 <POINTonE1_gather_booth_w4+0x36>
    1acc:	3601      	adds	r6, #1
    1ace:	3590      	adds	r5, #144	; 0x90
    1ad0:	2e09      	cmp	r6, #9
    1ad2:	d1e5      	bne.n	1aa0 <POINTonE1_gather_booth_w4+0x20>
    1ad4:	f7ff ffc4 	bl	1a60 <POINTonE1_cneg>
    1ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001ada <POINTonE1_gather_booth_w5>:
    1ada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1adc:	460d      	mov	r5, r1
    1ade:	f3c2 1140 	ubfx	r1, r2, #5, #1
    1ae2:	f002 071f 	and.w	r7, r2, #31
    1ae6:	4603      	mov	r3, r0
    1ae8:	f100 0490 	add.w	r4, r0, #144	; 0x90
    1aec:	2200      	movs	r2, #0
    1aee:	f843 2b04 	str.w	r2, [r3], #4
    1af2:	42a3      	cmp	r3, r4
    1af4:	d1fb      	bne.n	1aee <POINTonE1_gather_booth_w5+0x14>
    1af6:	358c      	adds	r5, #140	; 0x8c
    1af8:	2601      	movs	r6, #1
    1afa:	e003      	b.n	1b04 <POINTonE1_gather_booth_w5+0x2a>
    1afc:	3601      	adds	r6, #1
    1afe:	3590      	adds	r5, #144	; 0x90
    1b00:	2e11      	cmp	r6, #17
    1b02:	d016      	beq.n	1b32 <POINTonE1_gather_booth_w5+0x58>
    1b04:	ea87 0e06 	eor.w	lr, r7, r6
    1b08:	fa5f fe8e 	uxtb.w	lr, lr
    1b0c:	f10e 3eff 	add.w	lr, lr, #4294967295
    1b10:	ea4f 7eee 	mov.w	lr, lr, asr #31
    1b14:	f1a5 0c90 	sub.w	ip, r5, #144	; 0x90
    1b18:	1f02      	subs	r2, r0, #4
    1b1a:	f852 4f04 	ldr.w	r4, [r2, #4]!
    1b1e:	f85c 3f04 	ldr.w	r3, [ip, #4]!
    1b22:	4063      	eors	r3, r4
    1b24:	ea03 030e 	and.w	r3, r3, lr
    1b28:	4063      	eors	r3, r4
    1b2a:	6013      	str	r3, [r2, #0]
    1b2c:	45ac      	cmp	ip, r5
    1b2e:	d1f4      	bne.n	1b1a <POINTonE1_gather_booth_w5+0x40>
    1b30:	e7e4      	b.n	1afc <POINTonE1_gather_booth_w5+0x22>
    1b32:	f7ff ff95 	bl	1a60 <POINTonE1_cneg>
    1b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001b38 <POINTonE2_cneg>:
    1b38:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b3a:	b083      	sub	sp, #12
    1b3c:	4604      	mov	r4, r0
    1b3e:	460d      	mov	r5, r1
    1b40:	3060      	adds	r0, #96	; 0x60
    1b42:	4e09      	ldr	r6, [pc, #36]	; (1b68 <POINTonE2_cneg+0x30>)
    1b44:	270c      	movs	r7, #12
    1b46:	9700      	str	r7, [sp, #0]
    1b48:	4633      	mov	r3, r6
    1b4a:	460a      	mov	r2, r1
    1b4c:	4601      	mov	r1, r0
    1b4e:	f7ff ff29 	bl	19a4 <cneg_mod_n>
    1b52:	f104 0090 	add.w	r0, r4, #144	; 0x90
    1b56:	9700      	str	r7, [sp, #0]
    1b58:	4633      	mov	r3, r6
    1b5a:	462a      	mov	r2, r5
    1b5c:	4601      	mov	r1, r0
    1b5e:	f7ff ff21 	bl	19a4 <cneg_mod_n>
    1b62:	b003      	add	sp, #12
    1b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b66:	bf00      	nop
    1b68:	00015a08 	.word	0x00015a08

00001b6c <POINTonE2_gather_booth_w4>:
    1b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b6e:	460d      	mov	r5, r1
    1b70:	f3c2 1100 	ubfx	r1, r2, #4, #1
    1b74:	f002 070f 	and.w	r7, r2, #15
    1b78:	4603      	mov	r3, r0
    1b7a:	f500 7490 	add.w	r4, r0, #288	; 0x120
    1b7e:	2200      	movs	r2, #0
    1b80:	f843 2b04 	str.w	r2, [r3], #4
    1b84:	42a3      	cmp	r3, r4
    1b86:	d1fb      	bne.n	1b80 <POINTonE2_gather_booth_w4+0x14>
    1b88:	f505 758e 	add.w	r5, r5, #284	; 0x11c
    1b8c:	2601      	movs	r6, #1
    1b8e:	ea87 0e06 	eor.w	lr, r7, r6
    1b92:	fa5f fe8e 	uxtb.w	lr, lr
    1b96:	f10e 3eff 	add.w	lr, lr, #4294967295
    1b9a:	ea4f 7eee 	mov.w	lr, lr, asr #31
    1b9e:	f5a5 7c90 	sub.w	ip, r5, #288	; 0x120
    1ba2:	1f02      	subs	r2, r0, #4
    1ba4:	f852 4f04 	ldr.w	r4, [r2, #4]!
    1ba8:	f85c 3f04 	ldr.w	r3, [ip, #4]!
    1bac:	4063      	eors	r3, r4
    1bae:	ea03 030e 	and.w	r3, r3, lr
    1bb2:	4063      	eors	r3, r4
    1bb4:	6013      	str	r3, [r2, #0]
    1bb6:	45ac      	cmp	ip, r5
    1bb8:	d1f4      	bne.n	1ba4 <POINTonE2_gather_booth_w4+0x38>
    1bba:	3601      	adds	r6, #1
    1bbc:	f505 7590 	add.w	r5, r5, #288	; 0x120
    1bc0:	2e09      	cmp	r6, #9
    1bc2:	d1e4      	bne.n	1b8e <POINTonE2_gather_booth_w4+0x22>
    1bc4:	f7ff ffb8 	bl	1b38 <POINTonE2_cneg>
    1bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001bca <POINTonE2_gather_booth_w5>:
    1bca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bcc:	460d      	mov	r5, r1
    1bce:	f3c2 1140 	ubfx	r1, r2, #5, #1
    1bd2:	f002 071f 	and.w	r7, r2, #31
    1bd6:	4603      	mov	r3, r0
    1bd8:	f500 7490 	add.w	r4, r0, #288	; 0x120
    1bdc:	2200      	movs	r2, #0
    1bde:	f843 2b04 	str.w	r2, [r3], #4
    1be2:	42a3      	cmp	r3, r4
    1be4:	d1fb      	bne.n	1bde <POINTonE2_gather_booth_w5+0x14>
    1be6:	f505 758e 	add.w	r5, r5, #284	; 0x11c
    1bea:	2601      	movs	r6, #1
    1bec:	e004      	b.n	1bf8 <POINTonE2_gather_booth_w5+0x2e>
    1bee:	3601      	adds	r6, #1
    1bf0:	f505 7590 	add.w	r5, r5, #288	; 0x120
    1bf4:	2e11      	cmp	r6, #17
    1bf6:	d016      	beq.n	1c26 <POINTonE2_gather_booth_w5+0x5c>
    1bf8:	ea87 0e06 	eor.w	lr, r7, r6
    1bfc:	fa5f fe8e 	uxtb.w	lr, lr
    1c00:	f10e 3eff 	add.w	lr, lr, #4294967295
    1c04:	ea4f 7eee 	mov.w	lr, lr, asr #31
    1c08:	f5a5 7c90 	sub.w	ip, r5, #288	; 0x120
    1c0c:	1f02      	subs	r2, r0, #4
    1c0e:	f852 4f04 	ldr.w	r4, [r2, #4]!
    1c12:	f85c 3f04 	ldr.w	r3, [ip, #4]!
    1c16:	4063      	eors	r3, r4
    1c18:	ea03 030e 	and.w	r3, r3, lr
    1c1c:	4063      	eors	r3, r4
    1c1e:	6013      	str	r3, [r2, #0]
    1c20:	45ac      	cmp	ip, r5
    1c22:	d1f4      	bne.n	1c0e <POINTonE2_gather_booth_w5+0x44>
    1c24:	e7e3      	b.n	1bee <POINTonE2_gather_booth_w5+0x24>
    1c26:	f7ff ff87 	bl	1b38 <POINTonE2_cneg>
    1c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001c2c <neg_fp6>:
    1c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c2e:	b083      	sub	sp, #12
    1c30:	4604      	mov	r4, r0
    1c32:	460d      	mov	r5, r1
    1c34:	4e1a      	ldr	r6, [pc, #104]	; (1ca0 <neg_fp6+0x74>)
    1c36:	270c      	movs	r7, #12
    1c38:	9700      	str	r7, [sp, #0]
    1c3a:	4633      	mov	r3, r6
    1c3c:	2201      	movs	r2, #1
    1c3e:	f7ff feb1 	bl	19a4 <cneg_mod_n>
    1c42:	9700      	str	r7, [sp, #0]
    1c44:	4633      	mov	r3, r6
    1c46:	2201      	movs	r2, #1
    1c48:	f105 0130 	add.w	r1, r5, #48	; 0x30
    1c4c:	f104 0030 	add.w	r0, r4, #48	; 0x30
    1c50:	f7ff fea8 	bl	19a4 <cneg_mod_n>
    1c54:	9700      	str	r7, [sp, #0]
    1c56:	4633      	mov	r3, r6
    1c58:	2201      	movs	r2, #1
    1c5a:	f105 0160 	add.w	r1, r5, #96	; 0x60
    1c5e:	f104 0060 	add.w	r0, r4, #96	; 0x60
    1c62:	f7ff fe9f 	bl	19a4 <cneg_mod_n>
    1c66:	9700      	str	r7, [sp, #0]
    1c68:	4633      	mov	r3, r6
    1c6a:	2201      	movs	r2, #1
    1c6c:	f105 0190 	add.w	r1, r5, #144	; 0x90
    1c70:	f104 0090 	add.w	r0, r4, #144	; 0x90
    1c74:	f7ff fe96 	bl	19a4 <cneg_mod_n>
    1c78:	9700      	str	r7, [sp, #0]
    1c7a:	4633      	mov	r3, r6
    1c7c:	2201      	movs	r2, #1
    1c7e:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
    1c82:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    1c86:	f7ff fe8d 	bl	19a4 <cneg_mod_n>
    1c8a:	9700      	str	r7, [sp, #0]
    1c8c:	4633      	mov	r3, r6
    1c8e:	2201      	movs	r2, #1
    1c90:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
    1c94:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
    1c98:	f7ff fe84 	bl	19a4 <cneg_mod_n>
    1c9c:	b003      	add	sp, #12
    1c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ca0:	00015a08 	.word	0x00015a08

00001ca4 <conjugate_fp12>:
    1ca4:	b508      	push	{r3, lr}
    1ca6:	f500 7090 	add.w	r0, r0, #288	; 0x120
    1caa:	4601      	mov	r1, r0
    1cac:	f7ff ffbe 	bl	1c2c <neg_fp6>
    1cb0:	bd08      	pop	{r3, pc}

00001cb2 <POINTonE1_is_equal>:
    1cb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1cb6:	b0cd      	sub	sp, #308	; 0x134
    1cb8:	4681      	mov	r9, r0
    1cba:	4688      	mov	r8, r1
    1cbc:	f100 0a60 	add.w	sl, r0, #96	; 0x60
    1cc0:	f100 035c 	add.w	r3, r0, #92	; 0x5c
    1cc4:	308c      	adds	r0, #140	; 0x8c
    1cc6:	2200      	movs	r2, #0
    1cc8:	f853 1f04 	ldr.w	r1, [r3, #4]!
    1ccc:	430a      	orrs	r2, r1
    1cce:	4283      	cmp	r3, r0
    1cd0:	d1fa      	bne.n	1cc8 <POINTonE1_is_equal+0x16>
    1cd2:	1e53      	subs	r3, r2, #1
    1cd4:	ea23 0202 	bic.w	r2, r3, r2
    1cd8:	0fd3      	lsrs	r3, r2, #31
    1cda:	9303      	str	r3, [sp, #12]
    1cdc:	f108 0b60 	add.w	fp, r8, #96	; 0x60
    1ce0:	f108 035c 	add.w	r3, r8, #92	; 0x5c
    1ce4:	f108 008c 	add.w	r0, r8, #140	; 0x8c
    1ce8:	2200      	movs	r2, #0
    1cea:	f853 1f04 	ldr.w	r1, [r3, #4]!
    1cee:	430a      	orrs	r2, r1
    1cf0:	4283      	cmp	r3, r0
    1cf2:	d1fa      	bne.n	1cea <POINTonE1_is_equal+0x38>
    1cf4:	1e54      	subs	r4, r2, #1
    1cf6:	ea24 0402 	bic.w	r4, r4, r2
    1cfa:	0fe4      	lsrs	r4, r4, #31
    1cfc:	4d2e      	ldr	r5, [pc, #184]	; (1db8 <POINTonE1_is_equal+0x106>)
    1cfe:	270c      	movs	r7, #12
    1d00:	9701      	str	r7, [sp, #4]
    1d02:	4e2e      	ldr	r6, [pc, #184]	; (1dbc <POINTonE1_is_equal+0x10a>)
    1d04:	9600      	str	r6, [sp, #0]
    1d06:	462b      	mov	r3, r5
    1d08:	4652      	mov	r2, sl
    1d0a:	4651      	mov	r1, sl
    1d0c:	a840      	add	r0, sp, #256	; 0x100
    1d0e:	f7fe fe0d 	bl	92c <mul_mont_n>
    1d12:	9701      	str	r7, [sp, #4]
    1d14:	9600      	str	r6, [sp, #0]
    1d16:	462b      	mov	r3, r5
    1d18:	465a      	mov	r2, fp
    1d1a:	4659      	mov	r1, fp
    1d1c:	a834      	add	r0, sp, #208	; 0xd0
    1d1e:	f7fe fe05 	bl	92c <mul_mont_n>
    1d22:	9701      	str	r7, [sp, #4]
    1d24:	9600      	str	r6, [sp, #0]
    1d26:	462b      	mov	r3, r5
    1d28:	aa34      	add	r2, sp, #208	; 0xd0
    1d2a:	4649      	mov	r1, r9
    1d2c:	a81c      	add	r0, sp, #112	; 0x70
    1d2e:	f7fe fdfd 	bl	92c <mul_mont_n>
    1d32:	9701      	str	r7, [sp, #4]
    1d34:	9600      	str	r6, [sp, #0]
    1d36:	462b      	mov	r3, r5
    1d38:	aa40      	add	r2, sp, #256	; 0x100
    1d3a:	4641      	mov	r1, r8
    1d3c:	a804      	add	r0, sp, #16
    1d3e:	f7fe fdf5 	bl	92c <mul_mont_n>
    1d42:	9701      	str	r7, [sp, #4]
    1d44:	9600      	str	r6, [sp, #0]
    1d46:	462b      	mov	r3, r5
    1d48:	465a      	mov	r2, fp
    1d4a:	f109 0130 	add.w	r1, r9, #48	; 0x30
    1d4e:	a828      	add	r0, sp, #160	; 0xa0
    1d50:	f7fe fdec 	bl	92c <mul_mont_n>
    1d54:	9701      	str	r7, [sp, #4]
    1d56:	9600      	str	r6, [sp, #0]
    1d58:	462b      	mov	r3, r5
    1d5a:	4652      	mov	r2, sl
    1d5c:	f108 0130 	add.w	r1, r8, #48	; 0x30
    1d60:	a810      	add	r0, sp, #64	; 0x40
    1d62:	f7fe fde3 	bl	92c <mul_mont_n>
    1d66:	9701      	str	r7, [sp, #4]
    1d68:	9600      	str	r6, [sp, #0]
    1d6a:	462b      	mov	r3, r5
    1d6c:	aa34      	add	r2, sp, #208	; 0xd0
    1d6e:	a928      	add	r1, sp, #160	; 0xa0
    1d70:	4608      	mov	r0, r1
    1d72:	f7fe fddb 	bl	92c <mul_mont_n>
    1d76:	9701      	str	r7, [sp, #4]
    1d78:	9600      	str	r6, [sp, #0]
    1d7a:	462b      	mov	r3, r5
    1d7c:	aa40      	add	r2, sp, #256	; 0x100
    1d7e:	a910      	add	r1, sp, #64	; 0x40
    1d80:	4608      	mov	r0, r1
    1d82:	f7fe fdd3 	bl	92c <mul_mont_n>
    1d86:	aa1b      	add	r2, sp, #108	; 0x6c
    1d88:	eb0d 0107 	add.w	r1, sp, r7
    1d8c:	ae33      	add	r6, sp, #204	; 0xcc
    1d8e:	2000      	movs	r0, #0
    1d90:	f852 3f04 	ldr.w	r3, [r2, #4]!
    1d94:	f851 5f04 	ldr.w	r5, [r1, #4]!
    1d98:	406b      	eors	r3, r5
    1d9a:	4318      	orrs	r0, r3
    1d9c:	42b2      	cmp	r2, r6
    1d9e:	d1f7      	bne.n	1d90 <POINTonE1_is_equal+0xde>
    1da0:	1e43      	subs	r3, r0, #1
    1da2:	ea23 0000 	bic.w	r0, r3, r0
    1da6:	9b03      	ldr	r3, [sp, #12]
    1da8:	405c      	eors	r4, r3
    1daa:	f084 0401 	eor.w	r4, r4, #1
    1dae:	ea04 70d0 	and.w	r0, r4, r0, lsr #31
    1db2:	b04d      	add	sp, #308	; 0x134
    1db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1db8:	00015a08 	.word	0x00015a08
    1dbc:	fffcfffd 	.word	0xfffcfffd

00001dc0 <POINTonE1_double>:
    1dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1dc4:	b0a6      	sub	sp, #152	; 0x98
    1dc6:	4606      	mov	r6, r0
    1dc8:	460f      	mov	r7, r1
    1dca:	4c4c      	ldr	r4, [pc, #304]	; (1efc <POINTonE1_double+0x13c>)
    1dcc:	250c      	movs	r5, #12
    1dce:	9501      	str	r5, [sp, #4]
    1dd0:	f8df 812c 	ldr.w	r8, [pc, #300]	; 1f00 <POINTonE1_double+0x140>
    1dd4:	f8cd 8000 	str.w	r8, [sp]
    1dd8:	4623      	mov	r3, r4
    1dda:	460a      	mov	r2, r1
    1ddc:	a81a      	add	r0, sp, #104	; 0x68
    1dde:	f7fe fda5 	bl	92c <mul_mont_n>
    1de2:	f107 0a30 	add.w	sl, r7, #48	; 0x30
    1de6:	9501      	str	r5, [sp, #4]
    1de8:	f8cd 8000 	str.w	r8, [sp]
    1dec:	4623      	mov	r3, r4
    1dee:	4652      	mov	r2, sl
    1df0:	4651      	mov	r1, sl
    1df2:	a80e      	add	r0, sp, #56	; 0x38
    1df4:	f7fe fd9a 	bl	92c <mul_mont_n>
    1df8:	9501      	str	r5, [sp, #4]
    1dfa:	f8cd 8000 	str.w	r8, [sp]
    1dfe:	4623      	mov	r3, r4
    1e00:	aa0e      	add	r2, sp, #56	; 0x38
    1e02:	4611      	mov	r1, r2
    1e04:	a802      	add	r0, sp, #8
    1e06:	f7fe fd91 	bl	92c <mul_mont_n>
    1e0a:	9500      	str	r5, [sp, #0]
    1e0c:	4623      	mov	r3, r4
    1e0e:	463a      	mov	r2, r7
    1e10:	a90e      	add	r1, sp, #56	; 0x38
    1e12:	4608      	mov	r0, r1
    1e14:	f7fe ff32 	bl	c7c <add_mod_n>
    1e18:	9501      	str	r5, [sp, #4]
    1e1a:	f8cd 8000 	str.w	r8, [sp]
    1e1e:	4623      	mov	r3, r4
    1e20:	aa0e      	add	r2, sp, #56	; 0x38
    1e22:	4611      	mov	r1, r2
    1e24:	4610      	mov	r0, r2
    1e26:	f7fe fd81 	bl	92c <mul_mont_n>
    1e2a:	9500      	str	r5, [sp, #0]
    1e2c:	4623      	mov	r3, r4
    1e2e:	aa1a      	add	r2, sp, #104	; 0x68
    1e30:	a90e      	add	r1, sp, #56	; 0x38
    1e32:	4608      	mov	r0, r1
    1e34:	f7fe fbcc 	bl	5d0 <sub_mod_n>
    1e38:	9500      	str	r5, [sp, #0]
    1e3a:	4623      	mov	r3, r4
    1e3c:	aa02      	add	r2, sp, #8
    1e3e:	a90e      	add	r1, sp, #56	; 0x38
    1e40:	4608      	mov	r0, r1
    1e42:	f7fe fbc5 	bl	5d0 <sub_mod_n>
    1e46:	9500      	str	r5, [sp, #0]
    1e48:	4623      	mov	r3, r4
    1e4a:	aa0e      	add	r2, sp, #56	; 0x38
    1e4c:	4611      	mov	r1, r2
    1e4e:	4610      	mov	r0, r2
    1e50:	f7fe ff14 	bl	c7c <add_mod_n>
    1e54:	462b      	mov	r3, r5
    1e56:	4622      	mov	r2, r4
    1e58:	a91a      	add	r1, sp, #104	; 0x68
    1e5a:	4608      	mov	r0, r1
    1e5c:	f7fe ff96 	bl	d8c <mul_by_3_mod_n>
    1e60:	9501      	str	r5, [sp, #4]
    1e62:	f8cd 8000 	str.w	r8, [sp]
    1e66:	4623      	mov	r3, r4
    1e68:	aa1a      	add	r2, sp, #104	; 0x68
    1e6a:	4611      	mov	r1, r2
    1e6c:	4630      	mov	r0, r6
    1e6e:	f7fe fd5d 	bl	92c <mul_mont_n>
    1e72:	9500      	str	r5, [sp, #0]
    1e74:	4623      	mov	r3, r4
    1e76:	aa0e      	add	r2, sp, #56	; 0x38
    1e78:	4631      	mov	r1, r6
    1e7a:	4630      	mov	r0, r6
    1e7c:	f7fe fba8 	bl	5d0 <sub_mod_n>
    1e80:	9500      	str	r5, [sp, #0]
    1e82:	4623      	mov	r3, r4
    1e84:	aa0e      	add	r2, sp, #56	; 0x38
    1e86:	4631      	mov	r1, r6
    1e88:	4630      	mov	r0, r6
    1e8a:	f7fe fba1 	bl	5d0 <sub_mod_n>
    1e8e:	f106 0960 	add.w	r9, r6, #96	; 0x60
    1e92:	f107 0160 	add.w	r1, r7, #96	; 0x60
    1e96:	9500      	str	r5, [sp, #0]
    1e98:	4623      	mov	r3, r4
    1e9a:	460a      	mov	r2, r1
    1e9c:	4648      	mov	r0, r9
    1e9e:	f7fe feed 	bl	c7c <add_mod_n>
    1ea2:	9501      	str	r5, [sp, #4]
    1ea4:	f8cd 8000 	str.w	r8, [sp]
    1ea8:	4623      	mov	r3, r4
    1eaa:	4652      	mov	r2, sl
    1eac:	4649      	mov	r1, r9
    1eae:	4648      	mov	r0, r9
    1eb0:	f7fe fd3c 	bl	92c <mul_mont_n>
    1eb4:	9500      	str	r5, [sp, #0]
    1eb6:	4623      	mov	r3, r4
    1eb8:	2203      	movs	r2, #3
    1eba:	a902      	add	r1, sp, #8
    1ebc:	4608      	mov	r0, r1
    1ebe:	f7ff f805 	bl	ecc <lshift_mod_n>
    1ec2:	f106 0730 	add.w	r7, r6, #48	; 0x30
    1ec6:	9500      	str	r5, [sp, #0]
    1ec8:	4623      	mov	r3, r4
    1eca:	4632      	mov	r2, r6
    1ecc:	a90e      	add	r1, sp, #56	; 0x38
    1ece:	4638      	mov	r0, r7
    1ed0:	f7fe fb7e 	bl	5d0 <sub_mod_n>
    1ed4:	9501      	str	r5, [sp, #4]
    1ed6:	f8cd 8000 	str.w	r8, [sp]
    1eda:	4623      	mov	r3, r4
    1edc:	aa1a      	add	r2, sp, #104	; 0x68
    1ede:	4639      	mov	r1, r7
    1ee0:	4638      	mov	r0, r7
    1ee2:	f7fe fd23 	bl	92c <mul_mont_n>
    1ee6:	9500      	str	r5, [sp, #0]
    1ee8:	4623      	mov	r3, r4
    1eea:	aa02      	add	r2, sp, #8
    1eec:	4639      	mov	r1, r7
    1eee:	4638      	mov	r0, r7
    1ef0:	f7fe fb6e 	bl	5d0 <sub_mod_n>
    1ef4:	b026      	add	sp, #152	; 0x98
    1ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1efa:	bf00      	nop
    1efc:	00015a08 	.word	0x00015a08
    1f00:	fffcfffd 	.word	0xfffcfffd

00001f04 <sub_fp6>:
    1f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f08:	b082      	sub	sp, #8
    1f0a:	4604      	mov	r4, r0
    1f0c:	460d      	mov	r5, r1
    1f0e:	4616      	mov	r6, r2
    1f10:	4f20      	ldr	r7, [pc, #128]	; (1f94 <sub_fp6+0x90>)
    1f12:	f04f 080c 	mov.w	r8, #12
    1f16:	f8cd 8000 	str.w	r8, [sp]
    1f1a:	463b      	mov	r3, r7
    1f1c:	f7fe fb58 	bl	5d0 <sub_mod_n>
    1f20:	f8cd 8000 	str.w	r8, [sp]
    1f24:	463b      	mov	r3, r7
    1f26:	f106 0230 	add.w	r2, r6, #48	; 0x30
    1f2a:	f105 0130 	add.w	r1, r5, #48	; 0x30
    1f2e:	f104 0030 	add.w	r0, r4, #48	; 0x30
    1f32:	f7fe fb4d 	bl	5d0 <sub_mod_n>
    1f36:	f8cd 8000 	str.w	r8, [sp]
    1f3a:	463b      	mov	r3, r7
    1f3c:	f106 0260 	add.w	r2, r6, #96	; 0x60
    1f40:	f105 0160 	add.w	r1, r5, #96	; 0x60
    1f44:	f104 0060 	add.w	r0, r4, #96	; 0x60
    1f48:	f7fe fb42 	bl	5d0 <sub_mod_n>
    1f4c:	f8cd 8000 	str.w	r8, [sp]
    1f50:	463b      	mov	r3, r7
    1f52:	f106 0290 	add.w	r2, r6, #144	; 0x90
    1f56:	f105 0190 	add.w	r1, r5, #144	; 0x90
    1f5a:	f104 0090 	add.w	r0, r4, #144	; 0x90
    1f5e:	f7fe fb37 	bl	5d0 <sub_mod_n>
    1f62:	f8cd 8000 	str.w	r8, [sp]
    1f66:	463b      	mov	r3, r7
    1f68:	f106 02c0 	add.w	r2, r6, #192	; 0xc0
    1f6c:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
    1f70:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    1f74:	f7fe fb2c 	bl	5d0 <sub_mod_n>
    1f78:	f8cd 8000 	str.w	r8, [sp]
    1f7c:	463b      	mov	r3, r7
    1f7e:	f106 02f0 	add.w	r2, r6, #240	; 0xf0
    1f82:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
    1f86:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
    1f8a:	f7fe fb21 	bl	5d0 <sub_mod_n>
    1f8e:	b002      	add	sp, #8
    1f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1f94:	00015a08 	.word	0x00015a08

00001f98 <add_fp6>:
    1f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f9c:	b082      	sub	sp, #8
    1f9e:	4604      	mov	r4, r0
    1fa0:	460d      	mov	r5, r1
    1fa2:	4616      	mov	r6, r2
    1fa4:	4f20      	ldr	r7, [pc, #128]	; (2028 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x28>)
    1fa6:	f04f 080c 	mov.w	r8, #12
    1faa:	f8cd 8000 	str.w	r8, [sp]
    1fae:	463b      	mov	r3, r7
    1fb0:	f7fe fe64 	bl	c7c <add_mod_n>
    1fb4:	f8cd 8000 	str.w	r8, [sp]
    1fb8:	463b      	mov	r3, r7
    1fba:	f106 0230 	add.w	r2, r6, #48	; 0x30
    1fbe:	f105 0130 	add.w	r1, r5, #48	; 0x30
    1fc2:	f104 0030 	add.w	r0, r4, #48	; 0x30
    1fc6:	f7fe fe59 	bl	c7c <add_mod_n>
    1fca:	f8cd 8000 	str.w	r8, [sp]
    1fce:	463b      	mov	r3, r7
    1fd0:	f106 0260 	add.w	r2, r6, #96	; 0x60
    1fd4:	f105 0160 	add.w	r1, r5, #96	; 0x60
    1fd8:	f104 0060 	add.w	r0, r4, #96	; 0x60
    1fdc:	f7fe fe4e 	bl	c7c <add_mod_n>
    1fe0:	f8cd 8000 	str.w	r8, [sp]
    1fe4:	463b      	mov	r3, r7
    1fe6:	f106 0290 	add.w	r2, r6, #144	; 0x90
    1fea:	f105 0190 	add.w	r1, r5, #144	; 0x90
    1fee:	f104 0090 	add.w	r0, r4, #144	; 0x90
    1ff2:	f7fe fe43 	bl	c7c <add_mod_n>
    1ff6:	f8cd 8000 	str.w	r8, [sp]
    1ffa:	463b      	mov	r3, r7
    1ffc:	f106 02c0 	add.w	r2, r6, #192	; 0xc0
    2000:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
    2004:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    2008:	f7fe fe38 	bl	c7c <add_mod_n>
    200c:	f8cd 8000 	str.w	r8, [sp]
    2010:	463b      	mov	r3, r7
    2012:	f106 02f0 	add.w	r2, r6, #240	; 0xf0
    2016:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
    201a:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
    201e:	f7fe fe2d 	bl	c7c <add_mod_n>
    2022:	b002      	add	sp, #8
    2024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2028:	00015a08 	.word	0x00015a08

0000202c <POINTonE1_add_affine>:
    202c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2030:	b0e5      	sub	sp, #404	; 0x194
    2032:	9003      	str	r0, [sp, #12]
    2034:	460d      	mov	r5, r1
    2036:	4692      	mov	sl, r2
    2038:	f101 0b60 	add.w	fp, r1, #96	; 0x60
    203c:	f101 035c 	add.w	r3, r1, #92	; 0x5c
    2040:	f101 008c 	add.w	r0, r1, #140	; 0x8c
    2044:	2200      	movs	r2, #0
    2046:	f853 1f04 	ldr.w	r1, [r3, #4]!
    204a:	430a      	orrs	r2, r1
    204c:	4283      	cmp	r3, r0
    204e:	d1fa      	bne.n	2046 <POINTonE1_add_affine+0x1a>
    2050:	1e56      	subs	r6, r2, #1
    2052:	ea26 0602 	bic.w	r6, r6, r2
    2056:	0ff6      	lsrs	r6, r6, #31
    2058:	4c88      	ldr	r4, [pc, #544]	; (227c <POINTonE1_add_affine+0x250>)
    205a:	f04f 080c 	mov.w	r8, #12
    205e:	f8cd 8004 	str.w	r8, [sp, #4]
    2062:	4f87      	ldr	r7, [pc, #540]	; (2280 <POINTonE1_add_affine+0x254>)
    2064:	9700      	str	r7, [sp, #0]
    2066:	4623      	mov	r3, r4
    2068:	465a      	mov	r2, fp
    206a:	4659      	mov	r1, fp
    206c:	a834      	add	r0, sp, #208	; 0xd0
    206e:	f7fe fc5d 	bl	92c <mul_mont_n>
    2072:	f8cd 8004 	str.w	r8, [sp, #4]
    2076:	9700      	str	r7, [sp, #0]
    2078:	4623      	mov	r3, r4
    207a:	465a      	mov	r2, fp
    207c:	a934      	add	r1, sp, #208	; 0xd0
    207e:	a858      	add	r0, sp, #352	; 0x160
    2080:	f7fe fc54 	bl	92c <mul_mont_n>
    2084:	f8cd 8004 	str.w	r8, [sp, #4]
    2088:	9700      	str	r7, [sp, #0]
    208a:	4623      	mov	r3, r4
    208c:	f10a 0230 	add.w	r2, sl, #48	; 0x30
    2090:	a958      	add	r1, sp, #352	; 0x160
    2092:	4608      	mov	r0, r1
    2094:	f7fe fc4a 	bl	92c <mul_mont_n>
    2098:	f1aa 0804 	sub.w	r8, sl, #4
    209c:	f10a 005c 	add.w	r0, sl, #92	; 0x5c
    20a0:	4643      	mov	r3, r8
    20a2:	2200      	movs	r2, #0
    20a4:	f853 1f04 	ldr.w	r1, [r3, #4]!
    20a8:	430a      	orrs	r2, r1
    20aa:	4283      	cmp	r3, r0
    20ac:	d1fa      	bne.n	20a4 <POINTonE1_add_affine+0x78>
    20ae:	1e53      	subs	r3, r2, #1
    20b0:	ea23 0202 	bic.w	r2, r3, r2
    20b4:	0fd3      	lsrs	r3, r2, #31
    20b6:	9302      	str	r3, [sp, #8]
    20b8:	4c70      	ldr	r4, [pc, #448]	; (227c <POINTonE1_add_affine+0x250>)
    20ba:	270c      	movs	r7, #12
    20bc:	9701      	str	r7, [sp, #4]
    20be:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 2280 <POINTonE1_add_affine+0x254>
    20c2:	f8cd 9000 	str.w	r9, [sp]
    20c6:	4623      	mov	r3, r4
    20c8:	aa34      	add	r2, sp, #208	; 0xd0
    20ca:	4651      	mov	r1, sl
    20cc:	a828      	add	r0, sp, #160	; 0xa0
    20ce:	f7fe fc2d 	bl	92c <mul_mont_n>
    20d2:	9700      	str	r7, [sp, #0]
    20d4:	4623      	mov	r3, r4
    20d6:	462a      	mov	r2, r5
    20d8:	a928      	add	r1, sp, #160	; 0xa0
    20da:	4608      	mov	r0, r1
    20dc:	f7fe fa78 	bl	5d0 <sub_mod_n>
    20e0:	9701      	str	r7, [sp, #4]
    20e2:	f8cd 9000 	str.w	r9, [sp]
    20e6:	4623      	mov	r3, r4
    20e8:	aa28      	add	r2, sp, #160	; 0xa0
    20ea:	4611      	mov	r1, r2
    20ec:	a81c      	add	r0, sp, #112	; 0x70
    20ee:	f7fe fc1d 	bl	92c <mul_mont_n>
    20f2:	9700      	str	r7, [sp, #0]
    20f4:	4623      	mov	r3, r4
    20f6:	aa1c      	add	r2, sp, #112	; 0x70
    20f8:	4611      	mov	r1, r2
    20fa:	a810      	add	r0, sp, #64	; 0x40
    20fc:	f7fe fdbe 	bl	c7c <add_mod_n>
    2100:	9700      	str	r7, [sp, #0]
    2102:	4623      	mov	r3, r4
    2104:	aa10      	add	r2, sp, #64	; 0x40
    2106:	4611      	mov	r1, r2
    2108:	4610      	mov	r0, r2
    210a:	f7fe fdb7 	bl	c7c <add_mod_n>
    210e:	9701      	str	r7, [sp, #4]
    2110:	f8cd 9000 	str.w	r9, [sp]
    2114:	4623      	mov	r3, r4
    2116:	aa10      	add	r2, sp, #64	; 0x40
    2118:	4629      	mov	r1, r5
    211a:	a84c      	add	r0, sp, #304	; 0x130
    211c:	f7fe fc06 	bl	92c <mul_mont_n>
    2120:	9701      	str	r7, [sp, #4]
    2122:	f8cd 9000 	str.w	r9, [sp]
    2126:	4623      	mov	r3, r4
    2128:	aa10      	add	r2, sp, #64	; 0x40
    212a:	a928      	add	r1, sp, #160	; 0xa0
    212c:	a804      	add	r0, sp, #16
    212e:	f7fe fbfd 	bl	92c <mul_mont_n>
    2132:	f105 0a30 	add.w	sl, r5, #48	; 0x30
    2136:	9701      	str	r7, [sp, #4]
    2138:	f8cd 9000 	str.w	r9, [sp]
    213c:	4623      	mov	r3, r4
    213e:	4652      	mov	r2, sl
    2140:	a904      	add	r1, sp, #16
    2142:	a810      	add	r0, sp, #64	; 0x40
    2144:	f7fe fbf2 	bl	92c <mul_mont_n>
    2148:	9700      	str	r7, [sp, #0]
    214a:	4623      	mov	r3, r4
    214c:	4652      	mov	r2, sl
    214e:	a958      	add	r1, sp, #352	; 0x160
    2150:	4608      	mov	r0, r1
    2152:	f7fe fa3d 	bl	5d0 <sub_mod_n>
    2156:	9700      	str	r7, [sp, #0]
    2158:	4623      	mov	r3, r4
    215a:	aa58      	add	r2, sp, #352	; 0x160
    215c:	4611      	mov	r1, r2
    215e:	4610      	mov	r0, r2
    2160:	f7fe fd8c 	bl	c7c <add_mod_n>
    2164:	9701      	str	r7, [sp, #4]
    2166:	f8cd 9000 	str.w	r9, [sp]
    216a:	4623      	mov	r3, r4
    216c:	aa58      	add	r2, sp, #352	; 0x160
    216e:	4611      	mov	r1, r2
    2170:	a840      	add	r0, sp, #256	; 0x100
    2172:	f7fe fbdb 	bl	92c <mul_mont_n>
    2176:	9700      	str	r7, [sp, #0]
    2178:	4623      	mov	r3, r4
    217a:	aa04      	add	r2, sp, #16
    217c:	a940      	add	r1, sp, #256	; 0x100
    217e:	4608      	mov	r0, r1
    2180:	f7fe fa26 	bl	5d0 <sub_mod_n>
    2184:	9700      	str	r7, [sp, #0]
    2186:	4623      	mov	r3, r4
    2188:	aa4c      	add	r2, sp, #304	; 0x130
    218a:	a940      	add	r1, sp, #256	; 0x100
    218c:	4608      	mov	r0, r1
    218e:	f7fe fa1f 	bl	5d0 <sub_mod_n>
    2192:	9700      	str	r7, [sp, #0]
    2194:	4623      	mov	r3, r4
    2196:	aa4c      	add	r2, sp, #304	; 0x130
    2198:	a940      	add	r1, sp, #256	; 0x100
    219a:	4608      	mov	r0, r1
    219c:	f7fe fa18 	bl	5d0 <sub_mod_n>
    21a0:	9700      	str	r7, [sp, #0]
    21a2:	4623      	mov	r3, r4
    21a4:	aa40      	add	r2, sp, #256	; 0x100
    21a6:	a94c      	add	r1, sp, #304	; 0x130
    21a8:	4608      	mov	r0, r1
    21aa:	f7fe fa11 	bl	5d0 <sub_mod_n>
    21ae:	9701      	str	r7, [sp, #4]
    21b0:	f8cd 9000 	str.w	r9, [sp]
    21b4:	4623      	mov	r3, r4
    21b6:	aa58      	add	r2, sp, #352	; 0x160
    21b8:	a94c      	add	r1, sp, #304	; 0x130
    21ba:	4608      	mov	r0, r1
    21bc:	f7fe fbb6 	bl	92c <mul_mont_n>
    21c0:	9700      	str	r7, [sp, #0]
    21c2:	4623      	mov	r3, r4
    21c4:	aa10      	add	r2, sp, #64	; 0x40
    21c6:	a94c      	add	r1, sp, #304	; 0x130
    21c8:	4608      	mov	r0, r1
    21ca:	f7fe fa01 	bl	5d0 <sub_mod_n>
    21ce:	9700      	str	r7, [sp, #0]
    21d0:	4623      	mov	r3, r4
    21d2:	aa10      	add	r2, sp, #64	; 0x40
    21d4:	a94c      	add	r1, sp, #304	; 0x130
    21d6:	4608      	mov	r0, r1
    21d8:	f7fe f9fa 	bl	5d0 <sub_mod_n>
    21dc:	9700      	str	r7, [sp, #0]
    21de:	4623      	mov	r3, r4
    21e0:	aa28      	add	r2, sp, #160	; 0xa0
    21e2:	4659      	mov	r1, fp
    21e4:	a858      	add	r0, sp, #352	; 0x160
    21e6:	f7fe fd49 	bl	c7c <add_mod_n>
    21ea:	9701      	str	r7, [sp, #4]
    21ec:	f8cd 9000 	str.w	r9, [sp]
    21f0:	4623      	mov	r3, r4
    21f2:	aa58      	add	r2, sp, #352	; 0x160
    21f4:	4611      	mov	r1, r2
    21f6:	4610      	mov	r0, r2
    21f8:	f7fe fb98 	bl	92c <mul_mont_n>
    21fc:	9700      	str	r7, [sp, #0]
    21fe:	4623      	mov	r3, r4
    2200:	aa34      	add	r2, sp, #208	; 0xd0
    2202:	a958      	add	r1, sp, #352	; 0x160
    2204:	4608      	mov	r0, r1
    2206:	f7fe f9e3 	bl	5d0 <sub_mod_n>
    220a:	9700      	str	r7, [sp, #0]
    220c:	4623      	mov	r3, r4
    220e:	aa1c      	add	r2, sp, #112	; 0x70
    2210:	a958      	add	r1, sp, #352	; 0x160
    2212:	4608      	mov	r0, r1
    2214:	f7fe f9dc 	bl	5d0 <sub_mod_n>
    2218:	4276      	negs	r6, r6
    221a:	f104 0190 	add.w	r1, r4, #144	; 0x90
    221e:	aa57      	add	r2, sp, #348	; 0x15c
    2220:	34c0      	adds	r4, #192	; 0xc0
    2222:	f851 3b04 	ldr.w	r3, [r1], #4
    2226:	f852 0f04 	ldr.w	r0, [r2, #4]!
    222a:	4043      	eors	r3, r0
    222c:	4033      	ands	r3, r6
    222e:	4043      	eors	r3, r0
    2230:	6013      	str	r3, [r2, #0]
    2232:	42a1      	cmp	r1, r4
    2234:	d1f5      	bne.n	2222 <POINTonE1_add_affine+0x1f6>
    2236:	aa40      	add	r2, sp, #256	; 0x100
    2238:	ac58      	add	r4, sp, #352	; 0x160
    223a:	4611      	mov	r1, r2
    223c:	6808      	ldr	r0, [r1, #0]
    223e:	f858 3f04 	ldr.w	r3, [r8, #4]!
    2242:	4043      	eors	r3, r0
    2244:	4033      	ands	r3, r6
    2246:	4043      	eors	r3, r0
    2248:	f841 3b04 	str.w	r3, [r1], #4
    224c:	42a1      	cmp	r1, r4
    224e:	d1f5      	bne.n	223c <POINTonE1_add_affine+0x210>
    2250:	9b02      	ldr	r3, [sp, #8]
    2252:	425c      	negs	r4, r3
    2254:	3d04      	subs	r5, #4
    2256:	9b03      	ldr	r3, [sp, #12]
    2258:	1f18      	subs	r0, r3, #4
    225a:	f102 0690 	add.w	r6, r2, #144	; 0x90
    225e:	f852 1b04 	ldr.w	r1, [r2], #4
    2262:	f855 3f04 	ldr.w	r3, [r5, #4]!
    2266:	404b      	eors	r3, r1
    2268:	4023      	ands	r3, r4
    226a:	404b      	eors	r3, r1
    226c:	f840 3f04 	str.w	r3, [r0, #4]!
    2270:	42b2      	cmp	r2, r6
    2272:	d1f4      	bne.n	225e <POINTonE1_add_affine+0x232>
    2274:	b065      	add	sp, #404	; 0x194
    2276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    227a:	bf00      	nop
    227c:	00015a08 	.word	0x00015a08
    2280:	fffcfffd 	.word	0xfffcfffd

00002284 <POINTonE1_Deserialize_BE>:
    2284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2288:	b0a6      	sub	sp, #152	; 0x98
    228a:	4604      	mov	r4, r0
    228c:	f101 0230 	add.w	r2, r1, #48	; 0x30
    2290:	4608      	mov	r0, r1
    2292:	2500      	movs	r5, #0
    2294:	f101 072f 	add.w	r7, r1, #47	; 0x2f
    2298:	1a3b      	subs	r3, r7, r0
    229a:	f810 6b01 	ldrb.w	r6, [r0], #1
    229e:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
    22a2:	f023 0303 	bic.w	r3, r3, #3
    22a6:	ae26      	add	r6, sp, #152	; 0x98
    22a8:	4433      	add	r3, r6
    22aa:	f843 5c60 	str.w	r5, [r3, #-96]
    22ae:	4290      	cmp	r0, r2
    22b0:	d1f2      	bne.n	2298 <POINTonE1_Deserialize_BE+0x14>
    22b2:	f101 0660 	add.w	r6, r1, #96	; 0x60
    22b6:	2000      	movs	r0, #0
    22b8:	315f      	adds	r1, #95	; 0x5f
    22ba:	1a8b      	subs	r3, r1, r2
    22bc:	f812 5b01 	ldrb.w	r5, [r2], #1
    22c0:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
    22c4:	f023 0303 	bic.w	r3, r3, #3
    22c8:	ad26      	add	r5, sp, #152	; 0x98
    22ca:	442b      	add	r3, r5
    22cc:	f843 0c30 	str.w	r0, [r3, #-48]
    22d0:	42b2      	cmp	r2, r6
    22d2:	d1f2      	bne.n	22ba <POINTonE1_Deserialize_BE+0x36>
    22d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    22d6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    22da:	9319      	str	r3, [sp, #100]	; 0x64
    22dc:	4b38      	ldr	r3, [pc, #224]	; (23c0 <POINTonE1_Deserialize_BE+0x13c>)
    22de:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    22e2:	220c      	movs	r2, #12
    22e4:	9200      	str	r2, [sp, #0]
    22e6:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
    22ea:	4641      	mov	r1, r8
    22ec:	a802      	add	r0, sp, #8
    22ee:	f7fe fcc5 	bl	c7c <add_mod_n>
    22f2:	ae02      	add	r6, sp, #8
    22f4:	46c2      	mov	sl, r8
    22f6:	4645      	mov	r5, r8
    22f8:	4641      	mov	r1, r8
    22fa:	4632      	mov	r2, r6
    22fc:	2000      	movs	r0, #0
    22fe:	f852 3b04 	ldr.w	r3, [r2], #4
    2302:	f851 7b04 	ldr.w	r7, [r1], #4
    2306:	407b      	eors	r3, r7
    2308:	4318      	orrs	r0, r3
    230a:	42aa      	cmp	r2, r5
    230c:	d1f7      	bne.n	22fe <POINTonE1_Deserialize_BE+0x7a>
    230e:	1e43      	subs	r3, r0, #1
    2310:	4383      	bics	r3, r0
    2312:	d403      	bmi.n	231c <POINTonE1_Deserialize_BE+0x98>
    2314:	2001      	movs	r0, #1
    2316:	b026      	add	sp, #152	; 0x98
    2318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    231c:	4b28      	ldr	r3, [pc, #160]	; (23c0 <POINTonE1_Deserialize_BE+0x13c>)
    231e:	220c      	movs	r2, #12
    2320:	9200      	str	r2, [sp, #0]
    2322:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
    2326:	a91a      	add	r1, sp, #104	; 0x68
    2328:	a802      	add	r0, sp, #8
    232a:	f7fe fca7 	bl	c7c <add_mod_n>
    232e:	a919      	add	r1, sp, #100	; 0x64
    2330:	2200      	movs	r2, #0
    2332:	f856 3b04 	ldr.w	r3, [r6], #4
    2336:	f851 0f04 	ldr.w	r0, [r1, #4]!
    233a:	4043      	eors	r3, r0
    233c:	431a      	orrs	r2, r3
    233e:	42ae      	cmp	r6, r5
    2340:	d1f7      	bne.n	2332 <POINTonE1_Deserialize_BE+0xae>
    2342:	1e53      	subs	r3, r2, #1
    2344:	4393      	bics	r3, r2
    2346:	d401      	bmi.n	234c <POINTonE1_Deserialize_BE+0xc8>
    2348:	2001      	movs	r0, #1
    234a:	e7e4      	b.n	2316 <POINTonE1_Deserialize_BE+0x92>
    234c:	4d1c      	ldr	r5, [pc, #112]	; (23c0 <POINTonE1_Deserialize_BE+0x13c>)
    234e:	f505 7634 	add.w	r6, r5, #720	; 0x2d0
    2352:	f04f 090c 	mov.w	r9, #12
    2356:	f8cd 9004 	str.w	r9, [sp, #4]
    235a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 23c4 <POINTonE1_Deserialize_BE+0x140>
    235e:	f8cd 8000 	str.w	r8, [sp]
    2362:	462b      	mov	r3, r5
    2364:	4632      	mov	r2, r6
    2366:	a90e      	add	r1, sp, #56	; 0x38
    2368:	4608      	mov	r0, r1
    236a:	f7fe fadf 	bl	92c <mul_mont_n>
    236e:	f8cd 9004 	str.w	r9, [sp, #4]
    2372:	f8cd 8000 	str.w	r8, [sp]
    2376:	462b      	mov	r3, r5
    2378:	4632      	mov	r2, r6
    237a:	a91a      	add	r1, sp, #104	; 0x68
    237c:	4608      	mov	r0, r1
    237e:	f7fe fad5 	bl	92c <mul_mont_n>
    2382:	a80e      	add	r0, sp, #56	; 0x38
    2384:	f7ff fabe 	bl	1904 <POINTonE1_affine_on_curve>
    2388:	b1b8      	cbz	r0, 23ba <POINTonE1_Deserialize_BE+0x136>
    238a:	aa0d      	add	r2, sp, #52	; 0x34
    238c:	1f23      	subs	r3, r4, #4
    238e:	f10a 075c 	add.w	r7, sl, #92	; 0x5c
    2392:	4619      	mov	r1, r3
    2394:	f852 0f04 	ldr.w	r0, [r2, #4]!
    2398:	f841 0f04 	str.w	r0, [r1, #4]!
    239c:	42ba      	cmp	r2, r7
    239e:	d1f9      	bne.n	2394 <POINTonE1_Deserialize_BE+0x110>
    23a0:	342c      	adds	r4, #44	; 0x2c
    23a2:	2200      	movs	r2, #0
    23a4:	f853 1f04 	ldr.w	r1, [r3, #4]!
    23a8:	430a      	orrs	r2, r1
    23aa:	42a3      	cmp	r3, r4
    23ac:	d1fa      	bne.n	23a4 <POINTonE1_Deserialize_BE+0x120>
    23ae:	1e53      	subs	r3, r2, #1
    23b0:	4393      	bics	r3, r2
    23b2:	bf4c      	ite	mi
    23b4:	2003      	movmi	r0, #3
    23b6:	2000      	movpl	r0, #0
    23b8:	e7ad      	b.n	2316 <POINTonE1_Deserialize_BE+0x92>
    23ba:	2002      	movs	r0, #2
    23bc:	e7ab      	b.n	2316 <POINTonE1_Deserialize_BE+0x92>
    23be:	bf00      	nop
    23c0:	00015a08 	.word	0x00015a08
    23c4:	fffcfffd 	.word	0xfffcfffd

000023c8 <POINTonE1_add>:
    23c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23cc:	b0fd      	sub	sp, #500	; 0x1f4
    23ce:	9003      	str	r0, [sp, #12]
    23d0:	460f      	mov	r7, r1
    23d2:	4616      	mov	r6, r2
    23d4:	f101 0a60 	add.w	sl, r1, #96	; 0x60
    23d8:	f101 035c 	add.w	r3, r1, #92	; 0x5c
    23dc:	f101 008c 	add.w	r0, r1, #140	; 0x8c
    23e0:	2200      	movs	r2, #0
    23e2:	f853 1f04 	ldr.w	r1, [r3, #4]!
    23e6:	430a      	orrs	r2, r1
    23e8:	4283      	cmp	r3, r0
    23ea:	d1fa      	bne.n	23e2 <POINTonE1_add+0x1a>
    23ec:	1e53      	subs	r3, r2, #1
    23ee:	ea23 0202 	bic.w	r2, r3, r2
    23f2:	0fd3      	lsrs	r3, r2, #31
    23f4:	9302      	str	r3, [sp, #8]
    23f6:	4c95      	ldr	r4, [pc, #596]	; (264c <POINTonE1_add+0x284>)
    23f8:	f04f 080c 	mov.w	r8, #12
    23fc:	f8cd 8004 	str.w	r8, [sp, #4]
    2400:	4d93      	ldr	r5, [pc, #588]	; (2650 <POINTonE1_add+0x288>)
    2402:	9500      	str	r5, [sp, #0]
    2404:	4623      	mov	r3, r4
    2406:	4652      	mov	r2, sl
    2408:	4651      	mov	r1, sl
    240a:	a84c      	add	r0, sp, #304	; 0x130
    240c:	f7fe fa8e 	bl	92c <mul_mont_n>
    2410:	f8cd 8004 	str.w	r8, [sp, #4]
    2414:	9500      	str	r5, [sp, #0]
    2416:	4623      	mov	r3, r4
    2418:	4652      	mov	r2, sl
    241a:	a94c      	add	r1, sp, #304	; 0x130
    241c:	a870      	add	r0, sp, #448	; 0x1c0
    241e:	f7fe fa85 	bl	92c <mul_mont_n>
    2422:	f8cd 8004 	str.w	r8, [sp, #4]
    2426:	9500      	str	r5, [sp, #0]
    2428:	4623      	mov	r3, r4
    242a:	f106 0230 	add.w	r2, r6, #48	; 0x30
    242e:	a970      	add	r1, sp, #448	; 0x1c0
    2430:	4608      	mov	r0, r1
    2432:	f7fe fa7b 	bl	92c <mul_mont_n>
    2436:	f106 0b60 	add.w	fp, r6, #96	; 0x60
    243a:	f106 035c 	add.w	r3, r6, #92	; 0x5c
    243e:	f106 018c 	add.w	r1, r6, #140	; 0x8c
    2442:	f04f 0800 	mov.w	r8, #0
    2446:	f853 2f04 	ldr.w	r2, [r3, #4]!
    244a:	ea48 0802 	orr.w	r8, r8, r2
    244e:	428b      	cmp	r3, r1
    2450:	d1f9      	bne.n	2446 <POINTonE1_add+0x7e>
    2452:	4c7e      	ldr	r4, [pc, #504]	; (264c <POINTonE1_add+0x284>)
    2454:	250c      	movs	r5, #12
    2456:	9501      	str	r5, [sp, #4]
    2458:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 2650 <POINTonE1_add+0x288>
    245c:	f8cd 9000 	str.w	r9, [sp]
    2460:	4623      	mov	r3, r4
    2462:	465a      	mov	r2, fp
    2464:	4659      	mov	r1, fp
    2466:	a840      	add	r0, sp, #256	; 0x100
    2468:	f7fe fa60 	bl	92c <mul_mont_n>
    246c:	9501      	str	r5, [sp, #4]
    246e:	f8cd 9000 	str.w	r9, [sp]
    2472:	4623      	mov	r3, r4
    2474:	465a      	mov	r2, fp
    2476:	a940      	add	r1, sp, #256	; 0x100
    2478:	a828      	add	r0, sp, #160	; 0xa0
    247a:	f7fe fa57 	bl	92c <mul_mont_n>
    247e:	9501      	str	r5, [sp, #4]
    2480:	f8cd 9000 	str.w	r9, [sp]
    2484:	4623      	mov	r3, r4
    2486:	f107 0230 	add.w	r2, r7, #48	; 0x30
    248a:	a928      	add	r1, sp, #160	; 0xa0
    248c:	4608      	mov	r0, r1
    248e:	f7fe fa4d 	bl	92c <mul_mont_n>
    2492:	9500      	str	r5, [sp, #0]
    2494:	4623      	mov	r3, r4
    2496:	aa28      	add	r2, sp, #160	; 0xa0
    2498:	a970      	add	r1, sp, #448	; 0x1c0
    249a:	4608      	mov	r0, r1
    249c:	f7fe f898 	bl	5d0 <sub_mod_n>
    24a0:	9500      	str	r5, [sp, #0]
    24a2:	4623      	mov	r3, r4
    24a4:	aa70      	add	r2, sp, #448	; 0x1c0
    24a6:	4611      	mov	r1, r2
    24a8:	4610      	mov	r0, r2
    24aa:	f7fe fbe7 	bl	c7c <add_mod_n>
    24ae:	9501      	str	r5, [sp, #4]
    24b0:	f8cd 9000 	str.w	r9, [sp]
    24b4:	4623      	mov	r3, r4
    24b6:	aa40      	add	r2, sp, #256	; 0x100
    24b8:	4639      	mov	r1, r7
    24ba:	a834      	add	r0, sp, #208	; 0xd0
    24bc:	f7fe fa36 	bl	92c <mul_mont_n>
    24c0:	9501      	str	r5, [sp, #4]
    24c2:	f8cd 9000 	str.w	r9, [sp]
    24c6:	4623      	mov	r3, r4
    24c8:	aa4c      	add	r2, sp, #304	; 0x130
    24ca:	4631      	mov	r1, r6
    24cc:	a81c      	add	r0, sp, #112	; 0x70
    24ce:	f7fe fa2d 	bl	92c <mul_mont_n>
    24d2:	9500      	str	r5, [sp, #0]
    24d4:	4623      	mov	r3, r4
    24d6:	aa34      	add	r2, sp, #208	; 0xd0
    24d8:	a91c      	add	r1, sp, #112	; 0x70
    24da:	4608      	mov	r0, r1
    24dc:	f7fe f878 	bl	5d0 <sub_mod_n>
    24e0:	9500      	str	r5, [sp, #0]
    24e2:	4623      	mov	r3, r4
    24e4:	aa1c      	add	r2, sp, #112	; 0x70
    24e6:	4611      	mov	r1, r2
    24e8:	a810      	add	r0, sp, #64	; 0x40
    24ea:	f7fe fbc7 	bl	c7c <add_mod_n>
    24ee:	9501      	str	r5, [sp, #4]
    24f0:	f8cd 9000 	str.w	r9, [sp]
    24f4:	4623      	mov	r3, r4
    24f6:	aa10      	add	r2, sp, #64	; 0x40
    24f8:	4611      	mov	r1, r2
    24fa:	4610      	mov	r0, r2
    24fc:	f7fe fa16 	bl	92c <mul_mont_n>
    2500:	9501      	str	r5, [sp, #4]
    2502:	f8cd 9000 	str.w	r9, [sp]
    2506:	4623      	mov	r3, r4
    2508:	aa10      	add	r2, sp, #64	; 0x40
    250a:	a91c      	add	r1, sp, #112	; 0x70
    250c:	a804      	add	r0, sp, #16
    250e:	f7fe fa0d 	bl	92c <mul_mont_n>
    2512:	9501      	str	r5, [sp, #4]
    2514:	f8cd 9000 	str.w	r9, [sp]
    2518:	4623      	mov	r3, r4
    251a:	aa04      	add	r2, sp, #16
    251c:	a928      	add	r1, sp, #160	; 0xa0
    251e:	4608      	mov	r0, r1
    2520:	f7fe fa04 	bl	92c <mul_mont_n>
    2524:	9501      	str	r5, [sp, #4]
    2526:	f8cd 9000 	str.w	r9, [sp]
    252a:	4623      	mov	r3, r4
    252c:	aa10      	add	r2, sp, #64	; 0x40
    252e:	a934      	add	r1, sp, #208	; 0xd0
    2530:	a864      	add	r0, sp, #400	; 0x190
    2532:	f7fe f9fb 	bl	92c <mul_mont_n>
    2536:	9501      	str	r5, [sp, #4]
    2538:	f8cd 9000 	str.w	r9, [sp]
    253c:	4623      	mov	r3, r4
    253e:	aa70      	add	r2, sp, #448	; 0x1c0
    2540:	4611      	mov	r1, r2
    2542:	a858      	add	r0, sp, #352	; 0x160
    2544:	f7fe f9f2 	bl	92c <mul_mont_n>
    2548:	9500      	str	r5, [sp, #0]
    254a:	4623      	mov	r3, r4
    254c:	aa04      	add	r2, sp, #16
    254e:	a958      	add	r1, sp, #352	; 0x160
    2550:	4608      	mov	r0, r1
    2552:	f7fe f83d 	bl	5d0 <sub_mod_n>
    2556:	9500      	str	r5, [sp, #0]
    2558:	4623      	mov	r3, r4
    255a:	aa64      	add	r2, sp, #400	; 0x190
    255c:	a958      	add	r1, sp, #352	; 0x160
    255e:	4608      	mov	r0, r1
    2560:	f7fe f836 	bl	5d0 <sub_mod_n>
    2564:	9500      	str	r5, [sp, #0]
    2566:	4623      	mov	r3, r4
    2568:	aa64      	add	r2, sp, #400	; 0x190
    256a:	a958      	add	r1, sp, #352	; 0x160
    256c:	4608      	mov	r0, r1
    256e:	f7fe f82f 	bl	5d0 <sub_mod_n>
    2572:	9500      	str	r5, [sp, #0]
    2574:	4623      	mov	r3, r4
    2576:	aa58      	add	r2, sp, #352	; 0x160
    2578:	a964      	add	r1, sp, #400	; 0x190
    257a:	4608      	mov	r0, r1
    257c:	f7fe f828 	bl	5d0 <sub_mod_n>
    2580:	9501      	str	r5, [sp, #4]
    2582:	f8cd 9000 	str.w	r9, [sp]
    2586:	4623      	mov	r3, r4
    2588:	aa70      	add	r2, sp, #448	; 0x1c0
    258a:	a964      	add	r1, sp, #400	; 0x190
    258c:	4608      	mov	r0, r1
    258e:	f7fe f9cd 	bl	92c <mul_mont_n>
    2592:	9500      	str	r5, [sp, #0]
    2594:	4623      	mov	r3, r4
    2596:	aa28      	add	r2, sp, #160	; 0xa0
    2598:	a964      	add	r1, sp, #400	; 0x190
    259a:	4608      	mov	r0, r1
    259c:	f7fe f818 	bl	5d0 <sub_mod_n>
    25a0:	9500      	str	r5, [sp, #0]
    25a2:	4623      	mov	r3, r4
    25a4:	aa28      	add	r2, sp, #160	; 0xa0
    25a6:	a964      	add	r1, sp, #400	; 0x190
    25a8:	4608      	mov	r0, r1
    25aa:	f7fe f811 	bl	5d0 <sub_mod_n>
    25ae:	9500      	str	r5, [sp, #0]
    25b0:	4623      	mov	r3, r4
    25b2:	465a      	mov	r2, fp
    25b4:	4651      	mov	r1, sl
    25b6:	a870      	add	r0, sp, #448	; 0x1c0
    25b8:	f7fe fb60 	bl	c7c <add_mod_n>
    25bc:	9501      	str	r5, [sp, #4]
    25be:	f8cd 9000 	str.w	r9, [sp]
    25c2:	4623      	mov	r3, r4
    25c4:	aa70      	add	r2, sp, #448	; 0x1c0
    25c6:	4611      	mov	r1, r2
    25c8:	4610      	mov	r0, r2
    25ca:	f7fe f9af 	bl	92c <mul_mont_n>
    25ce:	9500      	str	r5, [sp, #0]
    25d0:	4623      	mov	r3, r4
    25d2:	aa4c      	add	r2, sp, #304	; 0x130
    25d4:	a970      	add	r1, sp, #448	; 0x1c0
    25d6:	4608      	mov	r0, r1
    25d8:	f7fd fffa 	bl	5d0 <sub_mod_n>
    25dc:	9500      	str	r5, [sp, #0]
    25de:	4623      	mov	r3, r4
    25e0:	aa40      	add	r2, sp, #256	; 0x100
    25e2:	a970      	add	r1, sp, #448	; 0x1c0
    25e4:	4608      	mov	r0, r1
    25e6:	f7fd fff3 	bl	5d0 <sub_mod_n>
    25ea:	9501      	str	r5, [sp, #4]
    25ec:	f8cd 9000 	str.w	r9, [sp]
    25f0:	4623      	mov	r3, r4
    25f2:	aa1c      	add	r2, sp, #112	; 0x70
    25f4:	a970      	add	r1, sp, #448	; 0x1c0
    25f6:	4608      	mov	r0, r1
    25f8:	f7fe f998 	bl	92c <mul_mont_n>
    25fc:	f108 33ff 	add.w	r3, r8, #4294967295
    2600:	ea23 0808 	bic.w	r8, r3, r8
    2604:	ea4f 78e8 	mov.w	r8, r8, asr #31
    2608:	3f04      	subs	r7, #4
    260a:	ac58      	add	r4, sp, #352	; 0x160
    260c:	ad7c      	add	r5, sp, #496	; 0x1f0
    260e:	4622      	mov	r2, r4
    2610:	6811      	ldr	r1, [r2, #0]
    2612:	f857 3f04 	ldr.w	r3, [r7, #4]!
    2616:	404b      	eors	r3, r1
    2618:	ea03 0308 	and.w	r3, r3, r8
    261c:	404b      	eors	r3, r1
    261e:	f842 3b04 	str.w	r3, [r2], #4
    2622:	42aa      	cmp	r2, r5
    2624:	d1f4      	bne.n	2610 <POINTonE1_add+0x248>
    2626:	9b02      	ldr	r3, [sp, #8]
    2628:	425a      	negs	r2, r3
    262a:	3e04      	subs	r6, #4
    262c:	9b03      	ldr	r3, [sp, #12]
    262e:	1f18      	subs	r0, r3, #4
    2630:	f854 1b04 	ldr.w	r1, [r4], #4
    2634:	f856 3f04 	ldr.w	r3, [r6, #4]!
    2638:	404b      	eors	r3, r1
    263a:	4013      	ands	r3, r2
    263c:	404b      	eors	r3, r1
    263e:	f840 3f04 	str.w	r3, [r0, #4]!
    2642:	42ac      	cmp	r4, r5
    2644:	d1f4      	bne.n	2630 <POINTonE1_add+0x268>
    2646:	b07d      	add	sp, #500	; 0x1f4
    2648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    264c:	00015a08 	.word	0x00015a08
    2650:	fffcfffd 	.word	0xfffcfffd

00002654 <POINTonE1_precompute_w4>:
    2654:	b570      	push	{r4, r5, r6, lr}
    2656:	4606      	mov	r6, r0
    2658:	1f0b      	subs	r3, r1, #4
    265a:	1f02      	subs	r2, r0, #4
    265c:	f101 008c 	add.w	r0, r1, #140	; 0x8c
    2660:	f853 4f04 	ldr.w	r4, [r3, #4]!
    2664:	f842 4f04 	str.w	r4, [r2, #4]!
    2668:	4283      	cmp	r3, r0
    266a:	d1f9      	bne.n	2660 <POINTonE1_precompute_w4+0xc>
    266c:	f106 0090 	add.w	r0, r6, #144	; 0x90
    2670:	f7ff fba6 	bl	1dc0 <POINTonE1_double>
    2674:	f506 7590 	add.w	r5, r6, #288	; 0x120
    2678:	4634      	mov	r4, r6
    267a:	f506 76d8 	add.w	r6, r6, #432	; 0x1b0
    267e:	4622      	mov	r2, r4
    2680:	3490      	adds	r4, #144	; 0x90
    2682:	4621      	mov	r1, r4
    2684:	4628      	mov	r0, r5
    2686:	f7ff fe9f 	bl	23c8 <POINTonE1_add>
    268a:	4621      	mov	r1, r4
    268c:	f105 0090 	add.w	r0, r5, #144	; 0x90
    2690:	f7ff fb96 	bl	1dc0 <POINTonE1_double>
    2694:	f505 7590 	add.w	r5, r5, #288	; 0x120
    2698:	42b4      	cmp	r4, r6
    269a:	d1f0      	bne.n	267e <POINTonE1_precompute_w4+0x2a>
    269c:	bd70      	pop	{r4, r5, r6, pc}

0000269e <isogeny_map_to_E1>:
    269e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    26a2:	f2ad 6d6c 	subw	sp, sp, #1644	; 0x66c
    26a6:	4607      	mov	r7, r0
    26a8:	4688      	mov	r8, r1
    26aa:	f101 0960 	add.w	r9, r1, #96	; 0x60
    26ae:	4cad      	ldr	r4, [pc, #692]	; (2964 <isogeny_map_to_E1+0x2c6>)
    26b0:	250c      	movs	r5, #12
    26b2:	9501      	str	r5, [sp, #4]
    26b4:	4eac      	ldr	r6, [pc, #688]	; (2968 <isogeny_map_to_E1+0x2ca>)
    26b6:	9600      	str	r6, [sp, #0]
    26b8:	4623      	mov	r3, r4
    26ba:	464a      	mov	r2, r9
    26bc:	4649      	mov	r1, r9
    26be:	f50d 60c7 	add.w	r0, sp, #1592	; 0x638
    26c2:	f7fe f933 	bl	92c <mul_mont_n>
    26c6:	9501      	str	r5, [sp, #4]
    26c8:	9600      	str	r6, [sp, #0]
    26ca:	4623      	mov	r3, r4
    26cc:	f50d 62c7 	add.w	r2, sp, #1592	; 0x638
    26d0:	4611      	mov	r1, r2
    26d2:	f50d 60c1 	add.w	r0, sp, #1544	; 0x608
    26d6:	f7fe f929 	bl	92c <mul_mont_n>
    26da:	9501      	str	r5, [sp, #4]
    26dc:	9600      	str	r6, [sp, #0]
    26de:	4623      	mov	r3, r4
    26e0:	f50d 62c1 	add.w	r2, sp, #1544	; 0x608
    26e4:	f50d 61c7 	add.w	r1, sp, #1592	; 0x638
    26e8:	f50d 60bb 	add.w	r0, sp, #1496	; 0x5d8
    26ec:	f7fe f91e 	bl	92c <mul_mont_n>
    26f0:	9501      	str	r5, [sp, #4]
    26f2:	9600      	str	r6, [sp, #0]
    26f4:	4623      	mov	r3, r4
    26f6:	f50d 62c1 	add.w	r2, sp, #1544	; 0x608
    26fa:	4611      	mov	r1, r2
    26fc:	f50d 60b5 	add.w	r0, sp, #1448	; 0x5a8
    2700:	f7fe f914 	bl	92c <mul_mont_n>
    2704:	9501      	str	r5, [sp, #4]
    2706:	9600      	str	r6, [sp, #0]
    2708:	4623      	mov	r3, r4
    270a:	f50d 62bb 	add.w	r2, sp, #1496	; 0x5d8
    270e:	f50d 61c1 	add.w	r1, sp, #1544	; 0x608
    2712:	f50d 60af 	add.w	r0, sp, #1400	; 0x578
    2716:	f7fe f909 	bl	92c <mul_mont_n>
    271a:	9501      	str	r5, [sp, #4]
    271c:	9600      	str	r6, [sp, #0]
    271e:	4623      	mov	r3, r4
    2720:	f50d 62bb 	add.w	r2, sp, #1496	; 0x5d8
    2724:	4611      	mov	r1, r2
    2726:	f50d 60a9 	add.w	r0, sp, #1352	; 0x548
    272a:	f7fe f8ff 	bl	92c <mul_mont_n>
    272e:	9501      	str	r5, [sp, #4]
    2730:	9600      	str	r6, [sp, #0]
    2732:	4623      	mov	r3, r4
    2734:	f50d 62b5 	add.w	r2, sp, #1448	; 0x5a8
    2738:	f50d 61bb 	add.w	r1, sp, #1496	; 0x5d8
    273c:	f50d 60a3 	add.w	r0, sp, #1304	; 0x518
    2740:	f7fe f8f4 	bl	92c <mul_mont_n>
    2744:	9501      	str	r5, [sp, #4]
    2746:	9600      	str	r6, [sp, #0]
    2748:	4623      	mov	r3, r4
    274a:	f50d 62b5 	add.w	r2, sp, #1448	; 0x5a8
    274e:	4611      	mov	r1, r2
    2750:	f50d 609d 	add.w	r0, sp, #1256	; 0x4e8
    2754:	f7fe f8ea 	bl	92c <mul_mont_n>
    2758:	9501      	str	r5, [sp, #4]
    275a:	9600      	str	r6, [sp, #0]
    275c:	4623      	mov	r3, r4
    275e:	f50d 62af 	add.w	r2, sp, #1400	; 0x578
    2762:	f50d 61b5 	add.w	r1, sp, #1448	; 0x5a8
    2766:	f50d 6097 	add.w	r0, sp, #1208	; 0x4b8
    276a:	f7fe f8df 	bl	92c <mul_mont_n>
    276e:	9501      	str	r5, [sp, #4]
    2770:	9600      	str	r6, [sp, #0]
    2772:	4623      	mov	r3, r4
    2774:	f50d 62af 	add.w	r2, sp, #1400	; 0x578
    2778:	4611      	mov	r1, r2
    277a:	f50d 6091 	add.w	r0, sp, #1160	; 0x488
    277e:	f7fe f8d5 	bl	92c <mul_mont_n>
    2782:	9501      	str	r5, [sp, #4]
    2784:	9600      	str	r6, [sp, #0]
    2786:	4623      	mov	r3, r4
    2788:	f50d 62a9 	add.w	r2, sp, #1352	; 0x548
    278c:	f50d 61af 	add.w	r1, sp, #1400	; 0x578
    2790:	f50d 608b 	add.w	r0, sp, #1112	; 0x458
    2794:	f7fe f8ca 	bl	92c <mul_mont_n>
    2798:	9501      	str	r5, [sp, #4]
    279a:	9600      	str	r6, [sp, #0]
    279c:	4623      	mov	r3, r4
    279e:	f50d 62a9 	add.w	r2, sp, #1352	; 0x548
    27a2:	4611      	mov	r1, r2
    27a4:	f50d 6085 	add.w	r0, sp, #1064	; 0x428
    27a8:	f7fe f8c0 	bl	92c <mul_mont_n>
    27ac:	9501      	str	r5, [sp, #4]
    27ae:	9600      	str	r6, [sp, #0]
    27b0:	4623      	mov	r3, r4
    27b2:	f50d 62a3 	add.w	r2, sp, #1304	; 0x518
    27b6:	f50d 61a9 	add.w	r1, sp, #1352	; 0x548
    27ba:	a8fe      	add	r0, sp, #1016	; 0x3f8
    27bc:	f7fe f8b6 	bl	92c <mul_mont_n>
    27c0:	9501      	str	r5, [sp, #4]
    27c2:	9600      	str	r6, [sp, #0]
    27c4:	4623      	mov	r3, r4
    27c6:	f50d 62a3 	add.w	r2, sp, #1304	; 0x518
    27ca:	4611      	mov	r1, r2
    27cc:	a8f2      	add	r0, sp, #968	; 0x3c8
    27ce:	f7fe f8ad 	bl	92c <mul_mont_n>
    27d2:	9501      	str	r5, [sp, #4]
    27d4:	9600      	str	r6, [sp, #0]
    27d6:	4623      	mov	r3, r4
    27d8:	f50d 629d 	add.w	r2, sp, #1256	; 0x4e8
    27dc:	f50d 61a3 	add.w	r1, sp, #1304	; 0x518
    27e0:	a8e6      	add	r0, sp, #920	; 0x398
    27e2:	f7fe f8a3 	bl	92c <mul_mont_n>
    27e6:	230b      	movs	r3, #11
    27e8:	f50d 628b 	add.w	r2, sp, #1112	; 0x458
    27ec:	f504 7140 	add.w	r1, r4, #768	; 0x300
    27f0:	a832      	add	r0, sp, #200	; 0xc8
    27f2:	f7fe f991 	bl	b18 <map_fp_times_Zz>
    27f6:	9501      	str	r5, [sp, #4]
    27f8:	9600      	str	r6, [sp, #0]
    27fa:	4623      	mov	r3, r4
    27fc:	f504 62a2 	add.w	r2, r4, #1296	; 0x510
    2800:	4641      	mov	r1, r8
    2802:	a826      	add	r0, sp, #152	; 0x98
    2804:	f7fe f892 	bl	92c <mul_mont_n>
    2808:	9500      	str	r5, [sp, #0]
    280a:	4623      	mov	r3, r4
    280c:	aaaa      	add	r2, sp, #680	; 0x2a8
    280e:	a926      	add	r1, sp, #152	; 0x98
    2810:	4608      	mov	r0, r1
    2812:	f7fe fa33 	bl	c7c <add_mod_n>
    2816:	230a      	movs	r3, #10
    2818:	aa32      	add	r2, sp, #200	; 0xc8
    281a:	4641      	mov	r1, r8
    281c:	a826      	add	r0, sp, #152	; 0x98
    281e:	f7fe fa86 	bl	d2e <map_fp>
    2822:	230a      	movs	r3, #10
    2824:	f50d 6291 	add.w	r2, sp, #1160	; 0x488
    2828:	f504 61a8 	add.w	r1, r4, #1344	; 0x540
    282c:	a832      	add	r0, sp, #200	; 0xc8
    282e:	f7fe f973 	bl	b18 <map_fp_times_Zz>
    2832:	9500      	str	r5, [sp, #0]
    2834:	4623      	mov	r3, r4
    2836:	aa9e      	add	r2, sp, #632	; 0x278
    2838:	4641      	mov	r1, r8
    283a:	a81a      	add	r0, sp, #104	; 0x68
    283c:	f7fe fa1e 	bl	c7c <add_mod_n>
    2840:	2309      	movs	r3, #9
    2842:	aa32      	add	r2, sp, #200	; 0xc8
    2844:	4641      	mov	r1, r8
    2846:	a81a      	add	r0, sp, #104	; 0x68
    2848:	f7fe fa71 	bl	d2e <map_fp>
    284c:	9501      	str	r5, [sp, #4]
    284e:	9600      	str	r6, [sp, #0]
    2850:	4623      	mov	r3, r4
    2852:	f50d 62c7 	add.w	r2, sp, #1592	; 0x638
    2856:	a91a      	add	r1, sp, #104	; 0x68
    2858:	4608      	mov	r0, r1
    285a:	f7fe f867 	bl	92c <mul_mont_n>
    285e:	230f      	movs	r3, #15
    2860:	aae6      	add	r2, sp, #920	; 0x398
    2862:	f504 61e4 	add.w	r1, r4, #1824	; 0x720
    2866:	a832      	add	r0, sp, #200	; 0xc8
    2868:	f7fe f956 	bl	b18 <map_fp_times_Zz>
    286c:	9501      	str	r5, [sp, #4]
    286e:	9600      	str	r6, [sp, #0]
    2870:	4623      	mov	r3, r4
    2872:	f504 621f 	add.w	r2, r4, #2544	; 0x9f0
    2876:	4641      	mov	r1, r8
    2878:	a80e      	add	r0, sp, #56	; 0x38
    287a:	f7fe f857 	bl	92c <mul_mont_n>
    287e:	9500      	str	r5, [sp, #0]
    2880:	4623      	mov	r3, r4
    2882:	aada      	add	r2, sp, #872	; 0x368
    2884:	a90e      	add	r1, sp, #56	; 0x38
    2886:	4608      	mov	r0, r1
    2888:	f7fe f9f8 	bl	c7c <add_mod_n>
    288c:	230e      	movs	r3, #14
    288e:	aa32      	add	r2, sp, #200	; 0xc8
    2890:	4641      	mov	r1, r8
    2892:	a80e      	add	r0, sp, #56	; 0x38
    2894:	f7fe fa4b 	bl	d2e <map_fp>
    2898:	9501      	str	r5, [sp, #4]
    289a:	9600      	str	r6, [sp, #0]
    289c:	4623      	mov	r3, r4
    289e:	f108 0230 	add.w	r2, r8, #48	; 0x30
    28a2:	a90e      	add	r1, sp, #56	; 0x38
    28a4:	4608      	mov	r0, r1
    28a6:	f7fe f841 	bl	92c <mul_mont_n>
    28aa:	230f      	movs	r3, #15
    28ac:	aae6      	add	r2, sp, #920	; 0x398
    28ae:	f504 6122 	add.w	r1, r4, #2592	; 0xa20
    28b2:	a832      	add	r0, sp, #200	; 0xc8
    28b4:	f7fe f930 	bl	b18 <map_fp_times_Zz>
    28b8:	9500      	str	r5, [sp, #0]
    28ba:	4623      	mov	r3, r4
    28bc:	aada      	add	r2, sp, #872	; 0x368
    28be:	4641      	mov	r1, r8
    28c0:	a802      	add	r0, sp, #8
    28c2:	f7fe f9db 	bl	c7c <add_mod_n>
    28c6:	230e      	movs	r3, #14
    28c8:	aa32      	add	r2, sp, #200	; 0xc8
    28ca:	4641      	mov	r1, r8
    28cc:	a802      	add	r0, sp, #8
    28ce:	f7fe fa2e 	bl	d2e <map_fp>
    28d2:	9501      	str	r5, [sp, #4]
    28d4:	9600      	str	r6, [sp, #0]
    28d6:	4623      	mov	r3, r4
    28d8:	464a      	mov	r2, r9
    28da:	f50d 61c7 	add.w	r1, sp, #1592	; 0x638
    28de:	4608      	mov	r0, r1
    28e0:	f7fe f824 	bl	92c <mul_mont_n>
    28e4:	9501      	str	r5, [sp, #4]
    28e6:	9600      	str	r6, [sp, #0]
    28e8:	4623      	mov	r3, r4
    28ea:	f50d 62c7 	add.w	r2, sp, #1592	; 0x638
    28ee:	a902      	add	r1, sp, #8
    28f0:	4608      	mov	r0, r1
    28f2:	f7fe f81b 	bl	92c <mul_mont_n>
    28f6:	f107 0860 	add.w	r8, r7, #96	; 0x60
    28fa:	9501      	str	r5, [sp, #4]
    28fc:	9600      	str	r6, [sp, #0]
    28fe:	4623      	mov	r3, r4
    2900:	aa02      	add	r2, sp, #8
    2902:	a91a      	add	r1, sp, #104	; 0x68
    2904:	4640      	mov	r0, r8
    2906:	f7fe f811 	bl	92c <mul_mont_n>
    290a:	9501      	str	r5, [sp, #4]
    290c:	9600      	str	r6, [sp, #0]
    290e:	4623      	mov	r3, r4
    2910:	aa02      	add	r2, sp, #8
    2912:	a926      	add	r1, sp, #152	; 0x98
    2914:	4638      	mov	r0, r7
    2916:	f7fe f809 	bl	92c <mul_mont_n>
    291a:	9501      	str	r5, [sp, #4]
    291c:	9600      	str	r6, [sp, #0]
    291e:	4623      	mov	r3, r4
    2920:	4642      	mov	r2, r8
    2922:	4639      	mov	r1, r7
    2924:	4638      	mov	r0, r7
    2926:	f7fe f801 	bl	92c <mul_mont_n>
    292a:	3730      	adds	r7, #48	; 0x30
    292c:	9501      	str	r5, [sp, #4]
    292e:	9600      	str	r6, [sp, #0]
    2930:	4623      	mov	r3, r4
    2932:	4642      	mov	r2, r8
    2934:	4641      	mov	r1, r8
    2936:	4638      	mov	r0, r7
    2938:	f7fd fff8 	bl	92c <mul_mont_n>
    293c:	9501      	str	r5, [sp, #4]
    293e:	9600      	str	r6, [sp, #0]
    2940:	4623      	mov	r3, r4
    2942:	aa1a      	add	r2, sp, #104	; 0x68
    2944:	4639      	mov	r1, r7
    2946:	4638      	mov	r0, r7
    2948:	f7fd fff0 	bl	92c <mul_mont_n>
    294c:	9501      	str	r5, [sp, #4]
    294e:	9600      	str	r6, [sp, #0]
    2950:	4623      	mov	r3, r4
    2952:	aa0e      	add	r2, sp, #56	; 0x38
    2954:	4639      	mov	r1, r7
    2956:	4638      	mov	r0, r7
    2958:	f7fd ffe8 	bl	92c <mul_mont_n>
    295c:	f20d 6d6c 	addw	sp, sp, #1644	; 0x66c
    2960:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2964:	00015a08 	.word	0x00015a08
    2968:	fffcfffd 	.word	0xfffcfffd

0000296c <eucl_inverse_mod_n>:
    296c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2970:	b089      	sub	sp, #36	; 0x24
    2972:	af02      	add	r7, sp, #8
    2974:	6038      	str	r0, [r7, #0]
    2976:	460c      	mov	r4, r1
    2978:	469c      	mov	ip, r3
    297a:	6c3d      	ldr	r5, [r7, #64]	; 0x40
    297c:	466b      	mov	r3, sp
    297e:	eba3 03c5 	sub.w	r3, r3, r5, lsl #3
    2982:	469d      	mov	sp, r3
    2984:	ae02      	add	r6, sp, #8
    2986:	eba3 03c5 	sub.w	r3, r3, r5, lsl #3
    298a:	469d      	mov	sp, r3
    298c:	ab02      	add	r3, sp, #8
    298e:	613b      	str	r3, [r7, #16]
    2990:	f035 4140 	bics.w	r1, r5, #3221225472	; 0xc0000000
    2994:	d051      	beq.n	2a3a <eucl_inverse_mod_n+0xce>
    2996:	4692      	mov	sl, r2
    2998:	1f22      	subs	r2, r4, #4
    299a:	008b      	lsls	r3, r1, #2
    299c:	60bb      	str	r3, [r7, #8]
    299e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    29a2:	4613      	mov	r3, r2
    29a4:	2400      	movs	r4, #0
    29a6:	f853 0f04 	ldr.w	r0, [r3, #4]!
    29aa:	4304      	orrs	r4, r0
    29ac:	428b      	cmp	r3, r1
    29ae:	d1fa      	bne.n	29a6 <eucl_inverse_mod_n+0x3a>
    29b0:	1e63      	subs	r3, r4, #1
    29b2:	ea23 0304 	bic.w	r3, r3, r4
    29b6:	0fdb      	lsrs	r3, r3, #31
    29b8:	60fb      	str	r3, [r7, #12]
    29ba:	d135      	bne.n	2a28 <eucl_inverse_mod_n+0xbc>
    29bc:	ea4f 0b85 	mov.w	fp, r5, lsl #2
    29c0:	1f33      	subs	r3, r6, #4
    29c2:	f852 0f04 	ldr.w	r0, [r2, #4]!
    29c6:	f843 0f04 	str.w	r0, [r3, #4]!
    29ca:	428a      	cmp	r2, r1
    29cc:	d1f9      	bne.n	29c2 <eucl_inverse_mod_n+0x56>
    29ce:	f1bc 0f00 	cmp.w	ip, #0
    29d2:	d035      	beq.n	2a40 <eucl_inverse_mod_n+0xd4>
    29d4:	f1ac 0004 	sub.w	r0, ip, #4
    29d8:	f1ab 0304 	sub.w	r3, fp, #4
    29dc:	4433      	add	r3, r6
    29de:	68ba      	ldr	r2, [r7, #8]
    29e0:	1881      	adds	r1, r0, r2
    29e2:	f850 2f04 	ldr.w	r2, [r0, #4]!
    29e6:	f843 2f04 	str.w	r2, [r3, #4]!
    29ea:	4288      	cmp	r0, r1
    29ec:	d1f9      	bne.n	29e2 <eucl_inverse_mod_n+0x76>
    29ee:	f1aa 0304 	sub.w	r3, sl, #4
    29f2:	693a      	ldr	r2, [r7, #16]
    29f4:	3a04      	subs	r2, #4
    29f6:	68b9      	ldr	r1, [r7, #8]
    29f8:	1858      	adds	r0, r3, r1
    29fa:	f853 1f04 	ldr.w	r1, [r3, #4]!
    29fe:	f842 1f04 	str.w	r1, [r2, #4]!
    2a02:	4283      	cmp	r3, r0
    2a04:	d1f9      	bne.n	29fa <eucl_inverse_mod_n+0x8e>
    2a06:	693b      	ldr	r3, [r7, #16]
    2a08:	eb03 000b 	add.w	r0, r3, fp
    2a0c:	4603      	mov	r3, r0
    2a0e:	68ba      	ldr	r2, [r7, #8]
    2a10:	1881      	adds	r1, r0, r2
    2a12:	2200      	movs	r2, #0
    2a14:	f843 2b04 	str.w	r2, [r3], #4
    2a18:	428b      	cmp	r3, r1
    2a1a:	d1fb      	bne.n	2a14 <eucl_inverse_mod_n+0xa8>
    2a1c:	f1ab 0304 	sub.w	r3, fp, #4
    2a20:	607b      	str	r3, [r7, #4]
    2a22:	f105 39ff 	add.w	r9, r5, #4294967295
    2a26:	e094      	b.n	2b52 <eucl_inverse_mod_n+0x1e6>
    2a28:	683a      	ldr	r2, [r7, #0]
    2a2a:	4613      	mov	r3, r2
    2a2c:	68b9      	ldr	r1, [r7, #8]
    2a2e:	4411      	add	r1, r2
    2a30:	2200      	movs	r2, #0
    2a32:	f843 2b04 	str.w	r2, [r3], #4
    2a36:	428b      	cmp	r3, r1
    2a38:	d1fb      	bne.n	2a32 <eucl_inverse_mod_n+0xc6>
    2a3a:	683b      	ldr	r3, [r7, #0]
    2a3c:	2400      	movs	r4, #0
    2a3e:	e0a4      	b.n	2b8a <eucl_inverse_mod_n+0x21e>
    2a40:	eb06 020b 	add.w	r2, r6, fp
    2a44:	4613      	mov	r3, r2
    2a46:	68b9      	ldr	r1, [r7, #8]
    2a48:	1850      	adds	r0, r2, r1
    2a4a:	2100      	movs	r1, #0
    2a4c:	f843 1b04 	str.w	r1, [r3], #4
    2a50:	4283      	cmp	r3, r0
    2a52:	d1fb      	bne.n	2a4c <eucl_inverse_mod_n+0xe0>
    2a54:	2301      	movs	r3, #1
    2a56:	6013      	str	r3, [r2, #0]
    2a58:	e7c9      	b.n	29ee <eucl_inverse_mod_n+0x82>
    2a5a:	b175      	cbz	r5, 2a7a <eucl_inverse_mod_n+0x10e>
    2a5c:	6979      	ldr	r1, [r7, #20]
    2a5e:	f1c2 0c20 	rsb	ip, r2, #32
    2a62:	4696      	mov	lr, r2
    2a64:	684a      	ldr	r2, [r1, #4]
    2a66:	fa02 f00c 	lsl.w	r0, r2, ip
    2a6a:	4303      	orrs	r3, r0
    2a6c:	f841 3b04 	str.w	r3, [r1], #4
    2a70:	fa22 f30e 	lsr.w	r3, r2, lr
    2a74:	42a1      	cmp	r1, r4
    2a76:	d1f5      	bne.n	2a64 <eucl_inverse_mod_n+0xf8>
    2a78:	4672      	mov	r2, lr
    2a7a:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
    2a7e:	f8cd 9000 	str.w	r9, [sp]
    2a82:	4653      	mov	r3, sl
    2a84:	4641      	mov	r1, r8
    2a86:	4640      	mov	r0, r8
    2a88:	f7fd fe0a 	bl	6a0 <rshift_mod_n>
    2a8c:	6831      	ldr	r1, [r6, #0]
    2a8e:	f011 0f01 	tst.w	r1, #1
    2a92:	d10f      	bne.n	2ab4 <eucl_inverse_mod_n+0x148>
    2a94:	084b      	lsrs	r3, r1, #1
    2a96:	f3c1 0240 	ubfx	r2, r1, #1, #1
    2a9a:	f011 0f02 	tst.w	r1, #2
    2a9e:	d1dc      	bne.n	2a5a <eucl_inverse_mod_n+0xee>
    2aa0:	088b      	lsrs	r3, r1, #2
    2aa2:	2202      	movs	r2, #2
    2aa4:	f013 0f01 	tst.w	r3, #1
    2aa8:	d1d7      	bne.n	2a5a <eucl_inverse_mod_n+0xee>
    2aaa:	3201      	adds	r2, #1
    2aac:	085b      	lsrs	r3, r3, #1
    2aae:	2a1f      	cmp	r2, #31
    2ab0:	d1f8      	bne.n	2aa4 <eucl_inverse_mod_n+0x138>
    2ab2:	e7d2      	b.n	2a5a <eucl_inverse_mod_n+0xee>
    2ab4:	462b      	mov	r3, r5
    2ab6:	464d      	mov	r5, r9
    2ab8:	4699      	mov	r9, r3
    2aba:	f1a6 0e04 	sub.w	lr, r6, #4
    2abe:	693b      	ldr	r3, [r7, #16]
    2ac0:	f1a3 0c04 	sub.w	ip, r3, #4
    2ac4:	68f8      	ldr	r0, [r7, #12]
    2ac6:	4602      	mov	r2, r0
    2ac8:	2400      	movs	r4, #0
    2aca:	f85e 3f04 	ldr.w	r3, [lr, #4]!
    2ace:	1a9b      	subs	r3, r3, r2
    2ad0:	eb64 0204 	sbc.w	r2, r4, r4
    2ad4:	f85c 1f04 	ldr.w	r1, [ip, #4]!
    2ad8:	1a5b      	subs	r3, r3, r1
    2ada:	f162 0200 	sbc.w	r2, r2, #0
    2ade:	f002 0201 	and.w	r2, r2, #1
    2ae2:	3001      	adds	r0, #1
    2ae4:	4285      	cmp	r5, r0
    2ae6:	d1f0      	bne.n	2aca <eucl_inverse_mod_n+0x15e>
    2ae8:	b112      	cbz	r2, 2af0 <eucl_inverse_mod_n+0x184>
    2aea:	693b      	ldr	r3, [r7, #16]
    2aec:	613e      	str	r6, [r7, #16]
    2aee:	461e      	mov	r6, r3
    2af0:	1f31      	subs	r1, r6, #4
    2af2:	693b      	ldr	r3, [r7, #16]
    2af4:	f1a3 0e04 	sub.w	lr, r3, #4
    2af8:	460c      	mov	r4, r1
    2afa:	68f8      	ldr	r0, [r7, #12]
    2afc:	4680      	mov	r8, r0
    2afe:	f04f 0c00 	mov.w	ip, #0
    2b02:	f854 3f04 	ldr.w	r3, [r4, #4]!
    2b06:	ebb3 0308 	subs.w	r3, r3, r8
    2b0a:	eb6c 080c 	sbc.w	r8, ip, ip
    2b0e:	f85e 2f04 	ldr.w	r2, [lr, #4]!
    2b12:	1a9b      	subs	r3, r3, r2
    2b14:	f168 0800 	sbc.w	r8, r8, #0
    2b18:	6023      	str	r3, [r4, #0]
    2b1a:	f008 0801 	and.w	r8, r8, #1
    2b1e:	3001      	adds	r0, #1
    2b20:	4285      	cmp	r5, r0
    2b22:	d8ee      	bhi.n	2b02 <eucl_inverse_mod_n+0x196>
    2b24:	68bb      	ldr	r3, [r7, #8]
    2b26:	1f18      	subs	r0, r3, #4
    2b28:	4430      	add	r0, r6
    2b2a:	68fb      	ldr	r3, [r7, #12]
    2b2c:	f851 2f04 	ldr.w	r2, [r1, #4]!
    2b30:	4313      	orrs	r3, r2
    2b32:	4281      	cmp	r1, r0
    2b34:	d1fa      	bne.n	2b2c <eucl_inverse_mod_n+0x1c0>
    2b36:	1e5c      	subs	r4, r3, #1
    2b38:	ea24 0303 	bic.w	r3, r4, r3
    2b3c:	0fdc      	lsrs	r4, r3, #31
    2b3e:	eb06 000b 	add.w	r0, r6, fp
    2b42:	9500      	str	r5, [sp, #0]
    2b44:	4653      	mov	r3, sl
    2b46:	693a      	ldr	r2, [r7, #16]
    2b48:	445a      	add	r2, fp
    2b4a:	4601      	mov	r1, r0
    2b4c:	f7fd fd40 	bl	5d0 <sub_mod_n>
    2b50:	b964      	cbnz	r4, 2b6c <eucl_inverse_mod_n+0x200>
    2b52:	eb06 080b 	add.w	r8, r6, fp
    2b56:	6831      	ldr	r1, [r6, #0]
    2b58:	f011 0f01 	tst.w	r1, #1
    2b5c:	d1ad      	bne.n	2aba <eucl_inverse_mod_n+0x14e>
    2b5e:	617e      	str	r6, [r7, #20]
    2b60:	687b      	ldr	r3, [r7, #4]
    2b62:	199c      	adds	r4, r3, r6
    2b64:	464b      	mov	r3, r9
    2b66:	46a9      	mov	r9, r5
    2b68:	461d      	mov	r5, r3
    2b6a:	e793      	b.n	2a94 <eucl_inverse_mod_n+0x128>
    2b6c:	f1ab 0204 	sub.w	r2, fp, #4
    2b70:	693b      	ldr	r3, [r7, #16]
    2b72:	4413      	add	r3, r2
    2b74:	461a      	mov	r2, r3
    2b76:	683b      	ldr	r3, [r7, #0]
    2b78:	3b04      	subs	r3, #4
    2b7a:	68b8      	ldr	r0, [r7, #8]
    2b7c:	4418      	add	r0, r3
    2b7e:	f852 1f04 	ldr.w	r1, [r2, #4]!
    2b82:	f843 1f04 	str.w	r1, [r3, #4]!
    2b86:	4298      	cmp	r0, r3
    2b88:	d1f9      	bne.n	2b7e <eucl_inverse_mod_n+0x212>
    2b8a:	4620      	mov	r0, r4
    2b8c:	371c      	adds	r7, #28
    2b8e:	46bd      	mov	sp, r7
    2b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00002b94 <POINTonE1_dadd_affine>:
    2b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b98:	b0f3      	sub	sp, #460	; 0x1cc
    2b9a:	9005      	str	r0, [sp, #20]
    2b9c:	460d      	mov	r5, r1
    2b9e:	4614      	mov	r4, r2
    2ba0:	1f17      	subs	r7, r2, #4
    2ba2:	f102 005c 	add.w	r0, r2, #92	; 0x5c
    2ba6:	463b      	mov	r3, r7
    2ba8:	2200      	movs	r2, #0
    2baa:	f853 1f04 	ldr.w	r1, [r3, #4]!
    2bae:	430a      	orrs	r2, r1
    2bb0:	4283      	cmp	r3, r0
    2bb2:	d1fa      	bne.n	2baa <POINTonE1_dadd_affine+0x16>
    2bb4:	1e53      	subs	r3, r2, #1
    2bb6:	ea23 0202 	bic.w	r2, r3, r2
    2bba:	0fd3      	lsrs	r3, r2, #31
    2bbc:	9304      	str	r3, [sp, #16]
    2bbe:	4eac      	ldr	r6, [pc, #688]	; (2e70 <POINTonE1_dadd_affine+0x2dc>)
    2bc0:	f04f 080c 	mov.w	r8, #12
    2bc4:	f8cd 8000 	str.w	r8, [sp]
    2bc8:	4633      	mov	r3, r6
    2bca:	4622      	mov	r2, r4
    2bcc:	4621      	mov	r1, r4
    2bce:	a81e      	add	r0, sp, #120	; 0x78
    2bd0:	f7fe f854 	bl	c7c <add_mod_n>
    2bd4:	f8cd 8004 	str.w	r8, [sp, #4]
    2bd8:	4ba6      	ldr	r3, [pc, #664]	; (2e74 <POINTonE1_dadd_affine+0x2e0>)
    2bda:	9300      	str	r3, [sp, #0]
    2bdc:	4633      	mov	r3, r6
    2bde:	4622      	mov	r2, r4
    2be0:	4621      	mov	r1, r4
    2be2:	a812      	add	r0, sp, #72	; 0x48
    2be4:	f7fd fea2 	bl	92c <mul_mont_n>
    2be8:	4643      	mov	r3, r8
    2bea:	4632      	mov	r2, r6
    2bec:	a912      	add	r1, sp, #72	; 0x48
    2bee:	4608      	mov	r0, r1
    2bf0:	f7fe f8cc 	bl	d8c <mul_by_3_mod_n>
    2bf4:	f104 0b30 	add.w	fp, r4, #48	; 0x30
    2bf8:	f8cd 8000 	str.w	r8, [sp]
    2bfc:	4633      	mov	r3, r6
    2bfe:	465a      	mov	r2, fp
    2c00:	4659      	mov	r1, fp
    2c02:	a806      	add	r0, sp, #24
    2c04:	f7fe f83a 	bl	c7c <add_mod_n>
    2c08:	f105 0a60 	add.w	sl, r5, #96	; 0x60
    2c0c:	f105 035c 	add.w	r3, r5, #92	; 0x5c
    2c10:	f105 008c 	add.w	r0, r5, #140	; 0x8c
    2c14:	2200      	movs	r2, #0
    2c16:	f853 1f04 	ldr.w	r1, [r3, #4]!
    2c1a:	430a      	orrs	r2, r1
    2c1c:	4283      	cmp	r3, r0
    2c1e:	d1fa      	bne.n	2c16 <POINTonE1_dadd_affine+0x82>
    2c20:	1e53      	subs	r3, r2, #1
    2c22:	ea23 0202 	bic.w	r2, r3, r2
    2c26:	0fd3      	lsrs	r3, r2, #31
    2c28:	9303      	str	r3, [sp, #12]
    2c2a:	4e91      	ldr	r6, [pc, #580]	; (2e70 <POINTonE1_dadd_affine+0x2dc>)
    2c2c:	f04f 080c 	mov.w	r8, #12
    2c30:	f8cd 8004 	str.w	r8, [sp, #4]
    2c34:	f8df 923c 	ldr.w	r9, [pc, #572]	; 2e74 <POINTonE1_dadd_affine+0x2e0>
    2c38:	f8cd 9000 	str.w	r9, [sp]
    2c3c:	4633      	mov	r3, r6
    2c3e:	4652      	mov	r2, sl
    2c40:	4651      	mov	r1, sl
    2c42:	a82a      	add	r0, sp, #168	; 0xa8
    2c44:	f7fd fe72 	bl	92c <mul_mont_n>
    2c48:	f8cd 8004 	str.w	r8, [sp, #4]
    2c4c:	f8cd 9000 	str.w	r9, [sp]
    2c50:	4633      	mov	r3, r6
    2c52:	4652      	mov	r2, sl
    2c54:	a92a      	add	r1, sp, #168	; 0xa8
    2c56:	a836      	add	r0, sp, #216	; 0xd8
    2c58:	f7fd fe68 	bl	92c <mul_mont_n>
    2c5c:	f8cd 8004 	str.w	r8, [sp, #4]
    2c60:	f8cd 9000 	str.w	r9, [sp]
    2c64:	4633      	mov	r3, r6
    2c66:	465a      	mov	r2, fp
    2c68:	a936      	add	r1, sp, #216	; 0xd8
    2c6a:	4608      	mov	r0, r1
    2c6c:	f7fd fe5e 	bl	92c <mul_mont_n>
    2c70:	f8cd 8000 	str.w	r8, [sp]
    2c74:	4633      	mov	r3, r6
    2c76:	f105 0230 	add.w	r2, r5, #48	; 0x30
    2c7a:	a936      	add	r1, sp, #216	; 0xd8
    2c7c:	4608      	mov	r0, r1
    2c7e:	f7fd fca7 	bl	5d0 <sub_mod_n>
    2c82:	f8cd 8004 	str.w	r8, [sp, #4]
    2c86:	f8cd 9000 	str.w	r9, [sp]
    2c8a:	4633      	mov	r3, r6
    2c8c:	4622      	mov	r2, r4
    2c8e:	a92a      	add	r1, sp, #168	; 0xa8
    2c90:	4608      	mov	r0, r1
    2c92:	f7fd fe4b 	bl	92c <mul_mont_n>
    2c96:	f8cd 8000 	str.w	r8, [sp]
    2c9a:	4633      	mov	r3, r6
    2c9c:	462a      	mov	r2, r5
    2c9e:	a92a      	add	r1, sp, #168	; 0xa8
    2ca0:	a842      	add	r0, sp, #264	; 0x108
    2ca2:	f7fd ffeb 	bl	c7c <add_mod_n>
    2ca6:	f8cd 8000 	str.w	r8, [sp]
    2caa:	4633      	mov	r3, r6
    2cac:	462a      	mov	r2, r5
    2cae:	a92a      	add	r1, sp, #168	; 0xa8
    2cb0:	4608      	mov	r0, r1
    2cb2:	f7fd fc8d 	bl	5d0 <sub_mod_n>
    2cb6:	f8cd 8004 	str.w	r8, [sp, #4]
    2cba:	f8cd 9000 	str.w	r9, [sp]
    2cbe:	4633      	mov	r3, r6
    2cc0:	4652      	mov	r2, sl
    2cc2:	a92a      	add	r1, sp, #168	; 0xa8
    2cc4:	a866      	add	r0, sp, #408	; 0x198
    2cc6:	f7fd fe31 	bl	92c <mul_mont_n>
    2cca:	a929      	add	r1, sp, #164	; 0xa4
    2ccc:	ac41      	add	r4, sp, #260	; 0x104
    2cce:	460b      	mov	r3, r1
    2cd0:	2200      	movs	r2, #0
    2cd2:	f853 0f04 	ldr.w	r0, [r3, #4]!
    2cd6:	4302      	orrs	r2, r0
    2cd8:	42a3      	cmp	r3, r4
    2cda:	d1fa      	bne.n	2cd2 <POINTonE1_dadd_affine+0x13e>
    2cdc:	1e53      	subs	r3, r2, #1
    2cde:	ea23 0202 	bic.w	r2, r3, r2
    2ce2:	17d2      	asrs	r2, r2, #31
    2ce4:	3d04      	subs	r5, #4
    2ce6:	ac4e      	add	r4, sp, #312	; 0x138
    2ce8:	f50d 78cc 	add.w	r8, sp, #408	; 0x198
    2cec:	4620      	mov	r0, r4
    2cee:	46ac      	mov	ip, r5
    2cf0:	46be      	mov	lr, r7
    2cf2:	f85c 6f04 	ldr.w	r6, [ip, #4]!
    2cf6:	f85e 3f04 	ldr.w	r3, [lr, #4]!
    2cfa:	4073      	eors	r3, r6
    2cfc:	4013      	ands	r3, r2
    2cfe:	4073      	eors	r3, r6
    2d00:	f840 3b04 	str.w	r3, [r0], #4
    2d04:	4540      	cmp	r0, r8
    2d06:	d1f4      	bne.n	2cf2 <POINTonE1_dadd_affine+0x15e>
    2d08:	ae65      	add	r6, sp, #404	; 0x194
    2d0a:	f10d 0948 	add.w	r9, sp, #72	; 0x48
    2d0e:	46b4      	mov	ip, r6
    2d10:	a806      	add	r0, sp, #24
    2d12:	f850 3b04 	ldr.w	r3, [r0], #4
    2d16:	f85c ef04 	ldr.w	lr, [ip, #4]!
    2d1a:	ea83 030e 	eor.w	r3, r3, lr
    2d1e:	4013      	ands	r3, r2
    2d20:	ea83 030e 	eor.w	r3, r3, lr
    2d24:	f8cc 3000 	str.w	r3, [ip]
    2d28:	4548      	cmp	r0, r9
    2d2a:	d1f2      	bne.n	2d12 <POINTonE1_dadd_affine+0x17e>
    2d2c:	a805      	add	r0, sp, #20
    2d2e:	f10d 0ca4 	add.w	ip, sp, #164	; 0xa4
    2d32:	4696      	mov	lr, r2
    2d34:	f851 2f04 	ldr.w	r2, [r1, #4]!
    2d38:	f850 3f04 	ldr.w	r3, [r0, #4]!
    2d3c:	4053      	eors	r3, r2
    2d3e:	ea03 030e 	and.w	r3, r3, lr
    2d42:	4053      	eors	r3, r2
    2d44:	600b      	str	r3, [r1, #0]
    2d46:	4560      	cmp	r0, ip
    2d48:	d1f4      	bne.n	2d34 <POINTonE1_dadd_affine+0x1a0>
    2d4a:	f8df 9124 	ldr.w	r9, [pc, #292]	; 2e70 <POINTonE1_dadd_affine+0x2dc>
    2d4e:	f04f 0a0c 	mov.w	sl, #12
    2d52:	f8cd a004 	str.w	sl, [sp, #4]
    2d56:	f8df b11c 	ldr.w	fp, [pc, #284]	; 2e74 <POINTonE1_dadd_affine+0x2e0>
    2d5a:	f8cd b000 	str.w	fp, [sp]
    2d5e:	464b      	mov	r3, r9
    2d60:	aa2a      	add	r2, sp, #168	; 0xa8
    2d62:	4611      	mov	r1, r2
    2d64:	a806      	add	r0, sp, #24
    2d66:	f7fd fde1 	bl	92c <mul_mont_n>
    2d6a:	f8cd a004 	str.w	sl, [sp, #4]
    2d6e:	f8cd b000 	str.w	fp, [sp]
    2d72:	464b      	mov	r3, r9
    2d74:	aa2a      	add	r2, sp, #168	; 0xa8
    2d76:	a906      	add	r1, sp, #24
    2d78:	a812      	add	r0, sp, #72	; 0x48
    2d7a:	f7fd fdd7 	bl	92c <mul_mont_n>
    2d7e:	f8cd a004 	str.w	sl, [sp, #4]
    2d82:	f8cd b000 	str.w	fp, [sp]
    2d86:	464b      	mov	r3, r9
    2d88:	aa5a      	add	r2, sp, #360	; 0x168
    2d8a:	a912      	add	r1, sp, #72	; 0x48
    2d8c:	4608      	mov	r0, r1
    2d8e:	f7fd fdcd 	bl	92c <mul_mont_n>
    2d92:	f8cd a004 	str.w	sl, [sp, #4]
    2d96:	f8cd b000 	str.w	fp, [sp]
    2d9a:	464b      	mov	r3, r9
    2d9c:	aa4e      	add	r2, sp, #312	; 0x138
    2d9e:	a906      	add	r1, sp, #24
    2da0:	a85a      	add	r0, sp, #360	; 0x168
    2da2:	f7fd fdc3 	bl	92c <mul_mont_n>
    2da6:	f8cd a004 	str.w	sl, [sp, #4]
    2daa:	f8cd b000 	str.w	fp, [sp]
    2dae:	464b      	mov	r3, r9
    2db0:	aa42      	add	r2, sp, #264	; 0x108
    2db2:	a906      	add	r1, sp, #24
    2db4:	4608      	mov	r0, r1
    2db6:	f7fd fdb9 	bl	92c <mul_mont_n>
    2dba:	f8cd a004 	str.w	sl, [sp, #4]
    2dbe:	f8cd b000 	str.w	fp, [sp]
    2dc2:	464b      	mov	r3, r9
    2dc4:	aa36      	add	r2, sp, #216	; 0xd8
    2dc6:	4611      	mov	r1, r2
    2dc8:	a84e      	add	r0, sp, #312	; 0x138
    2dca:	f7fd fdaf 	bl	92c <mul_mont_n>
    2dce:	f8cd a000 	str.w	sl, [sp]
    2dd2:	464b      	mov	r3, r9
    2dd4:	aa06      	add	r2, sp, #24
    2dd6:	a94e      	add	r1, sp, #312	; 0x138
    2dd8:	4608      	mov	r0, r1
    2dda:	f7fd fbf9 	bl	5d0 <sub_mod_n>
    2dde:	f8cd a000 	str.w	sl, [sp]
    2de2:	464b      	mov	r3, r9
    2de4:	aa4e      	add	r2, sp, #312	; 0x138
    2de6:	a95a      	add	r1, sp, #360	; 0x168
    2de8:	4608      	mov	r0, r1
    2dea:	f7fd fbf1 	bl	5d0 <sub_mod_n>
    2dee:	f8cd a004 	str.w	sl, [sp, #4]
    2df2:	f8cd b000 	str.w	fp, [sp]
    2df6:	464b      	mov	r3, r9
    2df8:	aa36      	add	r2, sp, #216	; 0xd8
    2dfa:	a95a      	add	r1, sp, #360	; 0x168
    2dfc:	4608      	mov	r0, r1
    2dfe:	f7fd fd95 	bl	92c <mul_mont_n>
    2e02:	f8cd a000 	str.w	sl, [sp]
    2e06:	464b      	mov	r3, r9
    2e08:	aa12      	add	r2, sp, #72	; 0x48
    2e0a:	a95a      	add	r1, sp, #360	; 0x168
    2e0c:	4608      	mov	r0, r1
    2e0e:	f7fd fbdf 	bl	5d0 <sub_mod_n>
    2e12:	9b03      	ldr	r3, [sp, #12]
    2e14:	425a      	negs	r2, r3
    2e16:	4621      	mov	r1, r4
    2e18:	6808      	ldr	r0, [r1, #0]
    2e1a:	f857 3f04 	ldr.w	r3, [r7, #4]!
    2e1e:	4043      	eors	r3, r0
    2e20:	4013      	ands	r3, r2
    2e22:	4043      	eors	r3, r0
    2e24:	f841 3b04 	str.w	r3, [r1], #4
    2e28:	4541      	cmp	r1, r8
    2e2a:	d1f5      	bne.n	2e18 <POINTonE1_dadd_affine+0x284>
    2e2c:	4f10      	ldr	r7, [pc, #64]	; (2e70 <POINTonE1_dadd_affine+0x2dc>)
    2e2e:	f107 0190 	add.w	r1, r7, #144	; 0x90
    2e32:	37c0      	adds	r7, #192	; 0xc0
    2e34:	f851 3b04 	ldr.w	r3, [r1], #4
    2e38:	f856 0f04 	ldr.w	r0, [r6, #4]!
    2e3c:	4043      	eors	r3, r0
    2e3e:	4013      	ands	r3, r2
    2e40:	4043      	eors	r3, r0
    2e42:	6033      	str	r3, [r6, #0]
    2e44:	42b9      	cmp	r1, r7
    2e46:	d1f5      	bne.n	2e34 <POINTonE1_dadd_affine+0x2a0>
    2e48:	9b04      	ldr	r3, [sp, #16]
    2e4a:	4259      	negs	r1, r3
    2e4c:	9b05      	ldr	r3, [sp, #20]
    2e4e:	1f18      	subs	r0, r3, #4
    2e50:	f104 0690 	add.w	r6, r4, #144	; 0x90
    2e54:	f854 2b04 	ldr.w	r2, [r4], #4
    2e58:	f855 3f04 	ldr.w	r3, [r5, #4]!
    2e5c:	4053      	eors	r3, r2
    2e5e:	400b      	ands	r3, r1
    2e60:	4053      	eors	r3, r2
    2e62:	f840 3f04 	str.w	r3, [r0, #4]!
    2e66:	42a6      	cmp	r6, r4
    2e68:	d1f4      	bne.n	2e54 <POINTonE1_dadd_affine+0x2c0>
    2e6a:	b073      	add	sp, #460	; 0x1cc
    2e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2e70:	00015a08 	.word	0x00015a08
    2e74:	fffcfffd 	.word	0xfffcfffd

00002e78 <POINTonE1_dadd>:
    2e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e7c:	b0f3      	sub	sp, #460	; 0x1cc
    2e7e:	9005      	str	r0, [sp, #20]
    2e80:	460c      	mov	r4, r1
    2e82:	4615      	mov	r5, r2
    2e84:	9302      	str	r3, [sp, #8]
    2e86:	4ec9      	ldr	r6, [pc, #804]	; (31ac <POINTonE1_dadd+0x334>)
    2e88:	270c      	movs	r7, #12
    2e8a:	9700      	str	r7, [sp, #0]
    2e8c:	4633      	mov	r3, r6
    2e8e:	460a      	mov	r2, r1
    2e90:	a81e      	add	r0, sp, #120	; 0x78
    2e92:	f7fd fef3 	bl	c7c <add_mod_n>
    2e96:	9701      	str	r7, [sp, #4]
    2e98:	4bc5      	ldr	r3, [pc, #788]	; (31b0 <POINTonE1_dadd+0x338>)
    2e9a:	9300      	str	r3, [sp, #0]
    2e9c:	4633      	mov	r3, r6
    2e9e:	4622      	mov	r2, r4
    2ea0:	4621      	mov	r1, r4
    2ea2:	a812      	add	r0, sp, #72	; 0x48
    2ea4:	f7fd fd42 	bl	92c <mul_mont_n>
    2ea8:	463b      	mov	r3, r7
    2eaa:	4632      	mov	r2, r6
    2eac:	a912      	add	r1, sp, #72	; 0x48
    2eae:	4608      	mov	r0, r1
    2eb0:	f7fd ff6c 	bl	d8c <mul_by_3_mod_n>
    2eb4:	f104 0830 	add.w	r8, r4, #48	; 0x30
    2eb8:	9700      	str	r7, [sp, #0]
    2eba:	4633      	mov	r3, r6
    2ebc:	4642      	mov	r2, r8
    2ebe:	4641      	mov	r1, r8
    2ec0:	a806      	add	r0, sp, #24
    2ec2:	f7fd fedb 	bl	c7c <add_mod_n>
    2ec6:	f105 0760 	add.w	r7, r5, #96	; 0x60
    2eca:	f105 035c 	add.w	r3, r5, #92	; 0x5c
    2ece:	f105 008c 	add.w	r0, r5, #140	; 0x8c
    2ed2:	2200      	movs	r2, #0
    2ed4:	f853 1f04 	ldr.w	r1, [r3, #4]!
    2ed8:	430a      	orrs	r2, r1
    2eda:	4283      	cmp	r3, r0
    2edc:	d1fa      	bne.n	2ed4 <POINTonE1_dadd+0x5c>
    2ede:	1e53      	subs	r3, r2, #1
    2ee0:	ea23 0202 	bic.w	r2, r3, r2
    2ee4:	0fd3      	lsrs	r3, r2, #31
    2ee6:	9304      	str	r3, [sp, #16]
    2ee8:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 31ac <POINTonE1_dadd+0x334>
    2eec:	f04f 0b0c 	mov.w	fp, #12
    2ef0:	f8cd b004 	str.w	fp, [sp, #4]
    2ef4:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 31b0 <POINTonE1_dadd+0x338>
    2ef8:	f8cd a000 	str.w	sl, [sp]
    2efc:	464b      	mov	r3, r9
    2efe:	463a      	mov	r2, r7
    2f00:	4639      	mov	r1, r7
    2f02:	a84e      	add	r0, sp, #312	; 0x138
    2f04:	f7fd fd12 	bl	92c <mul_mont_n>
    2f08:	f104 0660 	add.w	r6, r4, #96	; 0x60
    2f0c:	f8cd b004 	str.w	fp, [sp, #4]
    2f10:	f8cd a000 	str.w	sl, [sp]
    2f14:	464b      	mov	r3, r9
    2f16:	463a      	mov	r2, r7
    2f18:	4631      	mov	r1, r6
    2f1a:	a866      	add	r0, sp, #408	; 0x198
    2f1c:	f7fd fd06 	bl	92c <mul_mont_n>
    2f20:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    2f24:	f104 008c 	add.w	r0, r4, #140	; 0x8c
    2f28:	2200      	movs	r2, #0
    2f2a:	f853 1f04 	ldr.w	r1, [r3, #4]!
    2f2e:	430a      	orrs	r2, r1
    2f30:	4283      	cmp	r3, r0
    2f32:	d1fa      	bne.n	2f2a <POINTonE1_dadd+0xb2>
    2f34:	1e53      	subs	r3, r2, #1
    2f36:	ea23 0202 	bic.w	r2, r3, r2
    2f3a:	0fd3      	lsrs	r3, r2, #31
    2f3c:	9303      	str	r3, [sp, #12]
    2f3e:	230c      	movs	r3, #12
    2f40:	9301      	str	r3, [sp, #4]
    2f42:	4b9b      	ldr	r3, [pc, #620]	; (31b0 <POINTonE1_dadd+0x338>)
    2f44:	9300      	str	r3, [sp, #0]
    2f46:	4b99      	ldr	r3, [pc, #612]	; (31ac <POINTonE1_dadd+0x334>)
    2f48:	4632      	mov	r2, r6
    2f4a:	4631      	mov	r1, r6
    2f4c:	a82a      	add	r0, sp, #168	; 0xa8
    2f4e:	f7fd fced 	bl	92c <mul_mont_n>
    2f52:	9b02      	ldr	r3, [sp, #8]
    2f54:	b30b      	cbz	r3, 2f9a <POINTonE1_dadd+0x122>
    2f56:	f8df 9254 	ldr.w	r9, [pc, #596]	; 31ac <POINTonE1_dadd+0x334>
    2f5a:	f04f 0a0c 	mov.w	sl, #12
    2f5e:	f8cd a004 	str.w	sl, [sp, #4]
    2f62:	f8df b24c 	ldr.w	fp, [pc, #588]	; 31b0 <POINTonE1_dadd+0x338>
    2f66:	f8cd b000 	str.w	fp, [sp]
    2f6a:	464b      	mov	r3, r9
    2f6c:	aa2a      	add	r2, sp, #168	; 0xa8
    2f6e:	4611      	mov	r1, r2
    2f70:	a85a      	add	r0, sp, #360	; 0x168
    2f72:	f7fd fcdb 	bl	92c <mul_mont_n>
    2f76:	f8cd a004 	str.w	sl, [sp, #4]
    2f7a:	f8cd b000 	str.w	fp, [sp]
    2f7e:	464b      	mov	r3, r9
    2f80:	9a02      	ldr	r2, [sp, #8]
    2f82:	a95a      	add	r1, sp, #360	; 0x168
    2f84:	4608      	mov	r0, r1
    2f86:	f7fd fcd1 	bl	92c <mul_mont_n>
    2f8a:	f8cd a000 	str.w	sl, [sp]
    2f8e:	464b      	mov	r3, r9
    2f90:	aa5a      	add	r2, sp, #360	; 0x168
    2f92:	a912      	add	r1, sp, #72	; 0x48
    2f94:	4608      	mov	r0, r1
    2f96:	f7fd fe71 	bl	c7c <add_mod_n>
    2f9a:	f8df 9210 	ldr.w	r9, [pc, #528]	; 31ac <POINTonE1_dadd+0x334>
    2f9e:	f04f 0a0c 	mov.w	sl, #12
    2fa2:	f8cd a004 	str.w	sl, [sp, #4]
    2fa6:	f8df b208 	ldr.w	fp, [pc, #520]	; 31b0 <POINTonE1_dadd+0x338>
    2faa:	f8cd b000 	str.w	fp, [sp]
    2fae:	464b      	mov	r3, r9
    2fb0:	463a      	mov	r2, r7
    2fb2:	4641      	mov	r1, r8
    2fb4:	a85a      	add	r0, sp, #360	; 0x168
    2fb6:	f7fd fcb9 	bl	92c <mul_mont_n>
    2fba:	f8cd a004 	str.w	sl, [sp, #4]
    2fbe:	f8cd b000 	str.w	fp, [sp]
    2fc2:	464b      	mov	r3, r9
    2fc4:	aa4e      	add	r2, sp, #312	; 0x138
    2fc6:	a95a      	add	r1, sp, #360	; 0x168
    2fc8:	4608      	mov	r0, r1
    2fca:	f7fd fcaf 	bl	92c <mul_mont_n>
    2fce:	f8cd a004 	str.w	sl, [sp, #4]
    2fd2:	f8cd b000 	str.w	fp, [sp]
    2fd6:	464b      	mov	r3, r9
    2fd8:	4632      	mov	r2, r6
    2fda:	f105 0130 	add.w	r1, r5, #48	; 0x30
    2fde:	a836      	add	r0, sp, #216	; 0xd8
    2fe0:	f7fd fca4 	bl	92c <mul_mont_n>
    2fe4:	f8cd a004 	str.w	sl, [sp, #4]
    2fe8:	f8cd b000 	str.w	fp, [sp]
    2fec:	464b      	mov	r3, r9
    2fee:	aa2a      	add	r2, sp, #168	; 0xa8
    2ff0:	a936      	add	r1, sp, #216	; 0xd8
    2ff2:	4608      	mov	r0, r1
    2ff4:	f7fd fc9a 	bl	92c <mul_mont_n>
    2ff8:	f8cd a000 	str.w	sl, [sp]
    2ffc:	464b      	mov	r3, r9
    2ffe:	aa5a      	add	r2, sp, #360	; 0x168
    3000:	a936      	add	r1, sp, #216	; 0xd8
    3002:	4608      	mov	r0, r1
    3004:	f7fd fae4 	bl	5d0 <sub_mod_n>
    3008:	f8cd a004 	str.w	sl, [sp, #4]
    300c:	f8cd b000 	str.w	fp, [sp]
    3010:	464b      	mov	r3, r9
    3012:	4622      	mov	r2, r4
    3014:	a94e      	add	r1, sp, #312	; 0x138
    3016:	4608      	mov	r0, r1
    3018:	f7fd fc88 	bl	92c <mul_mont_n>
    301c:	f8cd a004 	str.w	sl, [sp, #4]
    3020:	f8cd b000 	str.w	fp, [sp]
    3024:	464b      	mov	r3, r9
    3026:	462a      	mov	r2, r5
    3028:	a92a      	add	r1, sp, #168	; 0xa8
    302a:	4608      	mov	r0, r1
    302c:	f7fd fc7e 	bl	92c <mul_mont_n>
    3030:	f8cd a000 	str.w	sl, [sp]
    3034:	464b      	mov	r3, r9
    3036:	aa4e      	add	r2, sp, #312	; 0x138
    3038:	a92a      	add	r1, sp, #168	; 0xa8
    303a:	a842      	add	r0, sp, #264	; 0x108
    303c:	f7fd fe1e 	bl	c7c <add_mod_n>
    3040:	f8cd a000 	str.w	sl, [sp]
    3044:	464b      	mov	r3, r9
    3046:	aa4e      	add	r2, sp, #312	; 0x138
    3048:	a92a      	add	r1, sp, #168	; 0xa8
    304a:	4608      	mov	r0, r1
    304c:	f7fd fac0 	bl	5d0 <sub_mod_n>
    3050:	aa29      	add	r2, sp, #164	; 0xa4
    3052:	ae41      	add	r6, sp, #260	; 0x104
    3054:	4613      	mov	r3, r2
    3056:	2100      	movs	r1, #0
    3058:	f853 0f04 	ldr.w	r0, [r3, #4]!
    305c:	4301      	orrs	r1, r0
    305e:	42b3      	cmp	r3, r6
    3060:	d1fa      	bne.n	3058 <POINTonE1_dadd+0x1e0>
    3062:	1e48      	subs	r0, r1, #1
    3064:	ea20 0001 	bic.w	r0, r0, r1
    3068:	17c0      	asrs	r0, r0, #31
    306a:	3c04      	subs	r4, #4
    306c:	ae4e      	add	r6, sp, #312	; 0x138
    306e:	af72      	add	r7, sp, #456	; 0x1c8
    3070:	4631      	mov	r1, r6
    3072:	46a4      	mov	ip, r4
    3074:	4696      	mov	lr, r2
    3076:	680a      	ldr	r2, [r1, #0]
    3078:	f85c 3f04 	ldr.w	r3, [ip, #4]!
    307c:	4053      	eors	r3, r2
    307e:	4003      	ands	r3, r0
    3080:	4053      	eors	r3, r2
    3082:	f841 3b04 	str.w	r3, [r1], #4
    3086:	42b9      	cmp	r1, r7
    3088:	d1f5      	bne.n	3076 <POINTonE1_dadd+0x1fe>
    308a:	4672      	mov	r2, lr
    308c:	a905      	add	r1, sp, #20
    308e:	f10d 0ca4 	add.w	ip, sp, #164	; 0xa4
    3092:	4686      	mov	lr, r0
    3094:	f852 0f04 	ldr.w	r0, [r2, #4]!
    3098:	f851 3f04 	ldr.w	r3, [r1, #4]!
    309c:	4043      	eors	r3, r0
    309e:	ea03 030e 	and.w	r3, r3, lr
    30a2:	4043      	eors	r3, r0
    30a4:	6013      	str	r3, [r2, #0]
    30a6:	4561      	cmp	r1, ip
    30a8:	d1f4      	bne.n	3094 <POINTonE1_dadd+0x21c>
    30aa:	f8df 8100 	ldr.w	r8, [pc, #256]	; 31ac <POINTonE1_dadd+0x334>
    30ae:	f04f 090c 	mov.w	r9, #12
    30b2:	f8cd 9004 	str.w	r9, [sp, #4]
    30b6:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 31b0 <POINTonE1_dadd+0x338>
    30ba:	f8cd a000 	str.w	sl, [sp]
    30be:	4643      	mov	r3, r8
    30c0:	aa2a      	add	r2, sp, #168	; 0xa8
    30c2:	a966      	add	r1, sp, #408	; 0x198
    30c4:	4608      	mov	r0, r1
    30c6:	f7fd fc31 	bl	92c <mul_mont_n>
    30ca:	f8cd 9004 	str.w	r9, [sp, #4]
    30ce:	f8cd a000 	str.w	sl, [sp]
    30d2:	4643      	mov	r3, r8
    30d4:	aa2a      	add	r2, sp, #168	; 0xa8
    30d6:	4611      	mov	r1, r2
    30d8:	a806      	add	r0, sp, #24
    30da:	f7fd fc27 	bl	92c <mul_mont_n>
    30de:	f8cd 9004 	str.w	r9, [sp, #4]
    30e2:	f8cd a000 	str.w	sl, [sp]
    30e6:	4643      	mov	r3, r8
    30e8:	aa2a      	add	r2, sp, #168	; 0xa8
    30ea:	a906      	add	r1, sp, #24
    30ec:	a812      	add	r0, sp, #72	; 0x48
    30ee:	f7fd fc1d 	bl	92c <mul_mont_n>
    30f2:	f8cd 9004 	str.w	r9, [sp, #4]
    30f6:	f8cd a000 	str.w	sl, [sp]
    30fa:	4643      	mov	r3, r8
    30fc:	aa5a      	add	r2, sp, #360	; 0x168
    30fe:	a912      	add	r1, sp, #72	; 0x48
    3100:	4608      	mov	r0, r1
    3102:	f7fd fc13 	bl	92c <mul_mont_n>
    3106:	f8cd 9004 	str.w	r9, [sp, #4]
    310a:	f8cd a000 	str.w	sl, [sp]
    310e:	4643      	mov	r3, r8
    3110:	aa4e      	add	r2, sp, #312	; 0x138
    3112:	a906      	add	r1, sp, #24
    3114:	a85a      	add	r0, sp, #360	; 0x168
    3116:	f7fd fc09 	bl	92c <mul_mont_n>
    311a:	f8cd 9004 	str.w	r9, [sp, #4]
    311e:	f8cd a000 	str.w	sl, [sp]
    3122:	4643      	mov	r3, r8
    3124:	aa42      	add	r2, sp, #264	; 0x108
    3126:	a906      	add	r1, sp, #24
    3128:	4608      	mov	r0, r1
    312a:	f7fd fbff 	bl	92c <mul_mont_n>
    312e:	f8cd 9004 	str.w	r9, [sp, #4]
    3132:	f8cd a000 	str.w	sl, [sp]
    3136:	4643      	mov	r3, r8
    3138:	aa36      	add	r2, sp, #216	; 0xd8
    313a:	4611      	mov	r1, r2
    313c:	a84e      	add	r0, sp, #312	; 0x138
    313e:	f7fd fbf5 	bl	92c <mul_mont_n>
    3142:	f8cd 9000 	str.w	r9, [sp]
    3146:	4643      	mov	r3, r8
    3148:	aa06      	add	r2, sp, #24
    314a:	a94e      	add	r1, sp, #312	; 0x138
    314c:	4608      	mov	r0, r1
    314e:	f7fd fa3f 	bl	5d0 <sub_mod_n>
    3152:	f8cd 9000 	str.w	r9, [sp]
    3156:	4643      	mov	r3, r8
    3158:	aa4e      	add	r2, sp, #312	; 0x138
    315a:	a95a      	add	r1, sp, #360	; 0x168
    315c:	4608      	mov	r0, r1
    315e:	f7fd fa37 	bl	5d0 <sub_mod_n>
    3162:	f8cd 9004 	str.w	r9, [sp, #4]
    3166:	f8cd a000 	str.w	sl, [sp]
    316a:	4643      	mov	r3, r8
    316c:	aa36      	add	r2, sp, #216	; 0xd8
    316e:	a95a      	add	r1, sp, #360	; 0x168
    3170:	4608      	mov	r0, r1
    3172:	f7fd fbdb 	bl	92c <mul_mont_n>
    3176:	f8cd 9000 	str.w	r9, [sp]
    317a:	4643      	mov	r3, r8
    317c:	aa12      	add	r2, sp, #72	; 0x48
    317e:	a95a      	add	r1, sp, #360	; 0x168
    3180:	4608      	mov	r0, r1
    3182:	f7fd fa25 	bl	5d0 <sub_mod_n>
    3186:	9b04      	ldr	r3, [sp, #16]
    3188:	4258      	negs	r0, r3
    318a:	4632      	mov	r2, r6
    318c:	6811      	ldr	r1, [r2, #0]
    318e:	f854 3f04 	ldr.w	r3, [r4, #4]!
    3192:	404b      	eors	r3, r1
    3194:	4003      	ands	r3, r0
    3196:	404b      	eors	r3, r1
    3198:	f842 3b04 	str.w	r3, [r2], #4
    319c:	42ba      	cmp	r2, r7
    319e:	d1f5      	bne.n	318c <POINTonE1_dadd+0x314>
    31a0:	9b03      	ldr	r3, [sp, #12]
    31a2:	425a      	negs	r2, r3
    31a4:	3d04      	subs	r5, #4
    31a6:	9b05      	ldr	r3, [sp, #20]
    31a8:	1f18      	subs	r0, r3, #4
    31aa:	e003      	b.n	31b4 <POINTonE1_dadd+0x33c>
    31ac:	00015a08 	.word	0x00015a08
    31b0:	fffcfffd 	.word	0xfffcfffd
    31b4:	f856 1b04 	ldr.w	r1, [r6], #4
    31b8:	f855 3f04 	ldr.w	r3, [r5, #4]!
    31bc:	404b      	eors	r3, r1
    31be:	4013      	ands	r3, r2
    31c0:	404b      	eors	r3, r1
    31c2:	f840 3f04 	str.w	r3, [r0, #4]!
    31c6:	42be      	cmp	r6, r7
    31c8:	d1f4      	bne.n	31b4 <POINTonE1_dadd+0x33c>
    31ca:	b073      	add	sp, #460	; 0x1cc
    31cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000031d0 <POINTonE1s_mult_w4>:
    31d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    31d4:	b0a7      	sub	sp, #156	; 0x9c
    31d6:	af00      	add	r7, sp, #0
    31d8:	4605      	mov	r5, r0
    31da:	4616      	mov	r6, r2
    31dc:	603b      	str	r3, [r7, #0]
    31de:	f8d7 80c0 	ldr.w	r8, [r7, #192]	; 0xc0
    31e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
    31e6:	b37b      	cbz	r3, 3248 <POINTonE1s_mult_w4+0x78>
    31e8:	b176      	cbz	r6, 3208 <POINTonE1s_mult_w4+0x38>
    31ea:	f1a1 0a04 	sub.w	sl, r1, #4
    31ee:	f8d7 90c4 	ldr.w	r9, [r7, #196]	; 0xc4
    31f2:	2400      	movs	r4, #0
    31f4:	f85a 1f04 	ldr.w	r1, [sl, #4]!
    31f8:	4648      	mov	r0, r9
    31fa:	f7ff fa2b 	bl	2654 <POINTonE1_precompute_w4>
    31fe:	3401      	adds	r4, #1
    3200:	f509 6990 	add.w	r9, r9, #1152	; 0x480
    3204:	42a6      	cmp	r6, r4
    3206:	d1f5      	bne.n	31f4 <POINTonE1s_mult_w4+0x24>
    3208:	f008 0103 	and.w	r1, r8, #3
    320c:	1c4a      	adds	r2, r1, #1
    320e:	2301      	movs	r3, #1
    3210:	4093      	lsls	r3, r2
    3212:	f103 3aff 	add.w	sl, r3, #4294967295
    3216:	4689      	mov	r9, r1
    3218:	ebb8 0801 	subs.w	r8, r8, r1
    321c:	d01d      	beq.n	325a <POINTonE1s_mult_w4+0x8a>
    321e:	f108 3bff 	add.w	fp, r8, #4294967295
    3222:	4659      	mov	r1, fp
    3224:	683b      	ldr	r3, [r7, #0]
    3226:	6818      	ldr	r0, [r3, #0]
    3228:	f7fd f9ba 	bl	5a0 <get_wval>
    322c:	2104      	movs	r1, #4
    322e:	ea00 000a 	and.w	r0, r0, sl
    3232:	f7fd f9c1 	bl	5b8 <booth_encode>
    3236:	4602      	mov	r2, r0
    3238:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
    323c:	4628      	mov	r0, r5
    323e:	f7fe fc1f 	bl	1a80 <POINTonE1_gather_booth_w4>
    3242:	2401      	movs	r4, #1
    3244:	464b      	mov	r3, r9
    3246:	e021      	b.n	328c <POINTonE1s_mult_w4+0xbc>
    3248:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    324c:	466a      	mov	r2, sp
    324e:	eba2 13c3 	sub.w	r3, r2, r3, lsl #7
    3252:	469d      	mov	sp, r3
    3254:	f8c7 d0c4 	str.w	sp, [r7, #196]	; 0xc4
    3258:	e7c6      	b.n	31e8 <POINTonE1s_mult_w4+0x18>
    325a:	683b      	ldr	r3, [r7, #0]
    325c:	681b      	ldr	r3, [r3, #0]
    325e:	7818      	ldrb	r0, [r3, #0]
    3260:	2104      	movs	r1, #4
    3262:	ea0a 0040 	and.w	r0, sl, r0, lsl #1
    3266:	f7fd f9a7 	bl	5b8 <booth_encode>
    326a:	4602      	mov	r2, r0
    326c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
    3270:	4628      	mov	r0, r5
    3272:	f7fe fc05 	bl	1a80 <POINTonE1_gather_booth_w4>
    3276:	2401      	movs	r4, #1
    3278:	e040      	b.n	32fc <POINTonE1s_mult_w4+0x12c>
    327a:	f1ab 0204 	sub.w	r2, fp, #4
    327e:	f04f 0a1f 	mov.w	sl, #31
    3282:	2304      	movs	r3, #4
    3284:	f1bb 0f03 	cmp.w	fp, #3
    3288:	d036      	beq.n	32f8 <POINTonE1s_mult_w4+0x128>
    328a:	4693      	mov	fp, r2
    328c:	42a6      	cmp	r6, r4
    328e:	d92b      	bls.n	32e8 <POINTonE1s_mult_w4+0x118>
    3290:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
    3294:	f109 39ff 	add.w	r9, r9, #4294967295
    3298:	683a      	ldr	r2, [r7, #0]
    329a:	eb02 0989 	add.w	r9, r2, r9, lsl #2
    329e:	eb04 08c4 	add.w	r8, r4, r4, lsl #3
    32a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
    32a6:	eb02 18c8 	add.w	r8, r2, r8, lsl #7
    32aa:	3301      	adds	r3, #1
    32ac:	607b      	str	r3, [r7, #4]
    32ae:	687a      	ldr	r2, [r7, #4]
    32b0:	4659      	mov	r1, fp
    32b2:	f859 0f04 	ldr.w	r0, [r9, #4]!
    32b6:	f7fd f973 	bl	5a0 <get_wval>
    32ba:	2104      	movs	r1, #4
    32bc:	ea00 000a 	and.w	r0, r0, sl
    32c0:	f7fd f97a 	bl	5b8 <booth_encode>
    32c4:	4602      	mov	r2, r0
    32c6:	4641      	mov	r1, r8
    32c8:	f107 0008 	add.w	r0, r7, #8
    32cc:	f7fe fbd8 	bl	1a80 <POINTonE1_gather_booth_w4>
    32d0:	2300      	movs	r3, #0
    32d2:	f107 0208 	add.w	r2, r7, #8
    32d6:	4629      	mov	r1, r5
    32d8:	4628      	mov	r0, r5
    32da:	f7ff fdcd 	bl	2e78 <POINTonE1_dadd>
    32de:	3401      	adds	r4, #1
    32e0:	f508 6890 	add.w	r8, r8, #1152	; 0x480
    32e4:	42a6      	cmp	r6, r4
    32e6:	d1e2      	bne.n	32ae <POINTonE1s_mult_w4+0xde>
    32e8:	2404      	movs	r4, #4
    32ea:	4629      	mov	r1, r5
    32ec:	4628      	mov	r0, r5
    32ee:	f7fe fd67 	bl	1dc0 <POINTonE1_double>
    32f2:	3c01      	subs	r4, #1
    32f4:	d1f9      	bne.n	32ea <POINTonE1s_mult_w4+0x11a>
    32f6:	e7c0      	b.n	327a <POINTonE1s_mult_w4+0xaa>
    32f8:	f04f 0a1f 	mov.w	sl, #31
    32fc:	42a6      	cmp	r6, r4
    32fe:	d928      	bls.n	3352 <POINTonE1s_mult_w4+0x182>
    3300:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
    3304:	f109 39ff 	add.w	r9, r9, #4294967295
    3308:	683b      	ldr	r3, [r7, #0]
    330a:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    330e:	eb04 08c4 	add.w	r8, r4, r4, lsl #3
    3312:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
    3316:	eb03 18c8 	add.w	r8, r3, r8, lsl #7
    331a:	f04f 0b04 	mov.w	fp, #4
    331e:	f859 3f04 	ldr.w	r3, [r9, #4]!
    3322:	7818      	ldrb	r0, [r3, #0]
    3324:	4659      	mov	r1, fp
    3326:	ea0a 0040 	and.w	r0, sl, r0, lsl #1
    332a:	f7fd f945 	bl	5b8 <booth_encode>
    332e:	4602      	mov	r2, r0
    3330:	4641      	mov	r1, r8
    3332:	f107 0008 	add.w	r0, r7, #8
    3336:	f7fe fba3 	bl	1a80 <POINTonE1_gather_booth_w4>
    333a:	2300      	movs	r3, #0
    333c:	f107 0208 	add.w	r2, r7, #8
    3340:	4629      	mov	r1, r5
    3342:	4628      	mov	r0, r5
    3344:	f7ff fd98 	bl	2e78 <POINTonE1_dadd>
    3348:	3401      	adds	r4, #1
    334a:	f508 6890 	add.w	r8, r8, #1152	; 0x480
    334e:	42a6      	cmp	r6, r4
    3350:	d1e5      	bne.n	331e <POINTonE1s_mult_w4+0x14e>
    3352:	379c      	adds	r7, #156	; 0x9c
    3354:	46bd      	mov	sp, r7
    3356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000335a <POINTonE1_mult_w4>:
    335a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    335e:	f2ad 5d14 	subw	sp, sp, #1300	; 0x514
    3362:	4605      	mov	r5, r0
    3364:	4617      	mov	r7, r2
    3366:	461e      	mov	r6, r3
    3368:	4668      	mov	r0, sp
    336a:	f7ff f973 	bl	2654 <POINTonE1_precompute_w4>
    336e:	f006 0303 	and.w	r3, r6, #3
    3372:	1c5c      	adds	r4, r3, #1
    3374:	1af6      	subs	r6, r6, r3
    3376:	d036      	beq.n	33e6 <POINTonE1_mult_w4+0x8c>
    3378:	4622      	mov	r2, r4
    337a:	1e71      	subs	r1, r6, #1
    337c:	4638      	mov	r0, r7
    337e:	f7fd f90f 	bl	5a0 <get_wval>
    3382:	f04f 33ff 	mov.w	r3, #4294967295
    3386:	40a3      	lsls	r3, r4
    3388:	2104      	movs	r1, #4
    338a:	ea20 0003 	bic.w	r0, r0, r3
    338e:	f7fd f913 	bl	5b8 <booth_encode>
    3392:	4602      	mov	r2, r0
    3394:	4669      	mov	r1, sp
    3396:	4628      	mov	r0, r5
    3398:	f7fe fb72 	bl	1a80 <POINTonE1_gather_booth_w4>
    339c:	f04f 0905 	mov.w	r9, #5
    33a0:	f04f 0804 	mov.w	r8, #4
    33a4:	2404      	movs	r4, #4
    33a6:	4629      	mov	r1, r5
    33a8:	4628      	mov	r0, r5
    33aa:	f7fe fd09 	bl	1dc0 <POINTonE1_double>
    33ae:	3c01      	subs	r4, #1
    33b0:	d1f9      	bne.n	33a6 <POINTonE1_mult_w4+0x4c>
    33b2:	1f34      	subs	r4, r6, #4
    33b4:	d027      	beq.n	3406 <POINTonE1_mult_w4+0xac>
    33b6:	464a      	mov	r2, r9
    33b8:	1f71      	subs	r1, r6, #5
    33ba:	4638      	mov	r0, r7
    33bc:	f7fd f8f0 	bl	5a0 <get_wval>
    33c0:	4641      	mov	r1, r8
    33c2:	f000 001f 	and.w	r0, r0, #31
    33c6:	f7fd f8f7 	bl	5b8 <booth_encode>
    33ca:	4602      	mov	r2, r0
    33cc:	4669      	mov	r1, sp
    33ce:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
    33d2:	f7fe fb55 	bl	1a80 <POINTonE1_gather_booth_w4>
    33d6:	f50d 6290 	add.w	r2, sp, #1152	; 0x480
    33da:	4629      	mov	r1, r5
    33dc:	4628      	mov	r0, r5
    33de:	f7fe fff3 	bl	23c8 <POINTonE1_add>
    33e2:	4626      	mov	r6, r4
    33e4:	e7de      	b.n	33a4 <POINTonE1_mult_w4+0x4a>
    33e6:	7838      	ldrb	r0, [r7, #0]
    33e8:	f04f 33ff 	mov.w	r3, #4294967295
    33ec:	40a3      	lsls	r3, r4
    33ee:	43db      	mvns	r3, r3
    33f0:	2104      	movs	r1, #4
    33f2:	ea03 0040 	and.w	r0, r3, r0, lsl #1
    33f6:	f7fd f8df 	bl	5b8 <booth_encode>
    33fa:	4602      	mov	r2, r0
    33fc:	4669      	mov	r1, sp
    33fe:	4628      	mov	r0, r5
    3400:	f7fe fb3e 	bl	1a80 <POINTonE1_gather_booth_w4>
    3404:	e013      	b.n	342e <POINTonE1_mult_w4+0xd4>
    3406:	7838      	ldrb	r0, [r7, #0]
    3408:	0040      	lsls	r0, r0, #1
    340a:	2104      	movs	r1, #4
    340c:	f000 001e 	and.w	r0, r0, #30
    3410:	f7fd f8d2 	bl	5b8 <booth_encode>
    3414:	4602      	mov	r2, r0
    3416:	4669      	mov	r1, sp
    3418:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
    341c:	f7fe fb30 	bl	1a80 <POINTonE1_gather_booth_w4>
    3420:	2300      	movs	r3, #0
    3422:	f50d 6290 	add.w	r2, sp, #1152	; 0x480
    3426:	4629      	mov	r1, r5
    3428:	4628      	mov	r0, r5
    342a:	f7ff fd25 	bl	2e78 <POINTonE1_dadd>
    342e:	f20d 5d14 	addw	sp, sp, #1300	; 0x514
    3432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00003436 <POINTonE1_mult_w5>:
    3436:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    343a:	f6ad 1d94 	subw	sp, sp, #2452	; 0x994
    343e:	4605      	mov	r5, r0
    3440:	4617      	mov	r7, r2
    3442:	4698      	mov	r8, r3
    3444:	f1a1 0e04 	sub.w	lr, r1, #4
    3448:	466c      	mov	r4, sp
    344a:	ab24      	add	r3, sp, #144	; 0x90
    344c:	46a4      	mov	ip, r4
    344e:	f85e 2f04 	ldr.w	r2, [lr, #4]!
    3452:	f84c 2b04 	str.w	r2, [ip], #4
    3456:	459c      	cmp	ip, r3
    3458:	d1f9      	bne.n	344e <POINTonE1_mult_w5+0x18>
    345a:	a824      	add	r0, sp, #144	; 0x90
    345c:	f7fe fcb0 	bl	1dc0 <POINTonE1_double>
    3460:	ae48      	add	r6, sp, #288	; 0x120
    3462:	f504 797c 	add.w	r9, r4, #1008	; 0x3f0
    3466:	4622      	mov	r2, r4
    3468:	3490      	adds	r4, #144	; 0x90
    346a:	4621      	mov	r1, r4
    346c:	4630      	mov	r0, r6
    346e:	f7fe ffab 	bl	23c8 <POINTonE1_add>
    3472:	4621      	mov	r1, r4
    3474:	f106 0090 	add.w	r0, r6, #144	; 0x90
    3478:	f7fe fca2 	bl	1dc0 <POINTonE1_double>
    347c:	f506 7690 	add.w	r6, r6, #288	; 0x120
    3480:	45a1      	cmp	r9, r4
    3482:	d1f0      	bne.n	3466 <POINTonE1_mult_w5+0x30>
    3484:	4b35      	ldr	r3, [pc, #212]	; (355c <POINTonE1_mult_w5+0x126>)
    3486:	fba3 2308 	umull	r2, r3, r3, r8
    348a:	f023 0603 	bic.w	r6, r3, #3
    348e:	eb06 0693 	add.w	r6, r6, r3, lsr #2
    3492:	eba8 0606 	sub.w	r6, r8, r6
    3496:	1c74      	adds	r4, r6, #1
    3498:	ebb8 0606 	subs.w	r6, r8, r6
    349c:	d036      	beq.n	350c <POINTonE1_mult_w5+0xd6>
    349e:	4622      	mov	r2, r4
    34a0:	1e71      	subs	r1, r6, #1
    34a2:	4638      	mov	r0, r7
    34a4:	f7fd f87c 	bl	5a0 <get_wval>
    34a8:	f04f 33ff 	mov.w	r3, #4294967295
    34ac:	40a3      	lsls	r3, r4
    34ae:	2105      	movs	r1, #5
    34b0:	ea20 0003 	bic.w	r0, r0, r3
    34b4:	f7fd f880 	bl	5b8 <booth_encode>
    34b8:	4602      	mov	r2, r0
    34ba:	4669      	mov	r1, sp
    34bc:	4628      	mov	r0, r5
    34be:	f7fe fb0c 	bl	1ada <POINTonE1_gather_booth_w5>
    34c2:	f04f 0906 	mov.w	r9, #6
    34c6:	f04f 0805 	mov.w	r8, #5
    34ca:	2405      	movs	r4, #5
    34cc:	4629      	mov	r1, r5
    34ce:	4628      	mov	r0, r5
    34d0:	f7fe fc76 	bl	1dc0 <POINTonE1_double>
    34d4:	3c01      	subs	r4, #1
    34d6:	d1f9      	bne.n	34cc <POINTonE1_mult_w5+0x96>
    34d8:	1f74      	subs	r4, r6, #5
    34da:	d027      	beq.n	352c <POINTonE1_mult_w5+0xf6>
    34dc:	464a      	mov	r2, r9
    34de:	1fb1      	subs	r1, r6, #6
    34e0:	4638      	mov	r0, r7
    34e2:	f7fd f85d 	bl	5a0 <get_wval>
    34e6:	4641      	mov	r1, r8
    34e8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    34ec:	f7fd f864 	bl	5b8 <booth_encode>
    34f0:	4602      	mov	r2, r0
    34f2:	4669      	mov	r1, sp
    34f4:	f50d 6010 	add.w	r0, sp, #2304	; 0x900
    34f8:	f7fe faef 	bl	1ada <POINTonE1_gather_booth_w5>
    34fc:	f50d 6210 	add.w	r2, sp, #2304	; 0x900
    3500:	4629      	mov	r1, r5
    3502:	4628      	mov	r0, r5
    3504:	f7fe ff60 	bl	23c8 <POINTonE1_add>
    3508:	4626      	mov	r6, r4
    350a:	e7de      	b.n	34ca <POINTonE1_mult_w5+0x94>
    350c:	7838      	ldrb	r0, [r7, #0]
    350e:	f04f 33ff 	mov.w	r3, #4294967295
    3512:	40a3      	lsls	r3, r4
    3514:	43db      	mvns	r3, r3
    3516:	2105      	movs	r1, #5
    3518:	ea03 0040 	and.w	r0, r3, r0, lsl #1
    351c:	f7fd f84c 	bl	5b8 <booth_encode>
    3520:	4602      	mov	r2, r0
    3522:	4669      	mov	r1, sp
    3524:	4628      	mov	r0, r5
    3526:	f7fe fad8 	bl	1ada <POINTonE1_gather_booth_w5>
    352a:	e013      	b.n	3554 <POINTonE1_mult_w5+0x11e>
    352c:	7838      	ldrb	r0, [r7, #0]
    352e:	0040      	lsls	r0, r0, #1
    3530:	2105      	movs	r1, #5
    3532:	f000 003e 	and.w	r0, r0, #62	; 0x3e
    3536:	f7fd f83f 	bl	5b8 <booth_encode>
    353a:	4602      	mov	r2, r0
    353c:	4669      	mov	r1, sp
    353e:	f50d 6010 	add.w	r0, sp, #2304	; 0x900
    3542:	f7fe faca 	bl	1ada <POINTonE1_gather_booth_w5>
    3546:	2300      	movs	r3, #0
    3548:	f50d 6210 	add.w	r2, sp, #2304	; 0x900
    354c:	4629      	mov	r1, r5
    354e:	4628      	mov	r0, r5
    3550:	f7ff fc92 	bl	2e78 <POINTonE1_dadd>
    3554:	f60d 1d94 	addw	sp, sp, #2452	; 0x994
    3558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    355c:	cccccccd 	.word	0xcccccccd

00003560 <POINTonE1_dbl_n_add>:
    3560:	b570      	push	{r4, r5, r6, lr}
    3562:	4605      	mov	r5, r0
    3564:	4616      	mov	r6, r2
    3566:	1e4c      	subs	r4, r1, #1
    3568:	b139      	cbz	r1, 357a <POINTonE1_dbl_n_add+0x1a>
    356a:	4629      	mov	r1, r5
    356c:	4628      	mov	r0, r5
    356e:	f7fe fc27 	bl	1dc0 <POINTonE1_double>
    3572:	3c01      	subs	r4, #1
    3574:	f1b4 3fff 	cmp.w	r4, #4294967295
    3578:	d1f7      	bne.n	356a <POINTonE1_dbl_n_add+0xa>
    357a:	2300      	movs	r3, #0
    357c:	4632      	mov	r2, r6
    357e:	4629      	mov	r1, r5
    3580:	4628      	mov	r0, r5
    3582:	f7ff fc79 	bl	2e78 <POINTonE1_dadd>
    3586:	bd70      	pop	{r4, r5, r6, pc}

00003588 <POINTonE1_in_G1>:
    3588:	b510      	push	{r4, lr}
    358a:	f5ad 6d90 	sub.w	sp, sp, #1152	; 0x480
    358e:	4604      	mov	r4, r0
    3590:	4601      	mov	r1, r0
    3592:	a8fc      	add	r0, sp, #1008	; 0x3f0
    3594:	f7fd faa3 	bl	ade <sigma>
    3598:	a9fc      	add	r1, sp, #1008	; 0x3f0
    359a:	a8d8      	add	r0, sp, #864	; 0x360
    359c:	f7fd fa9f 	bl	ade <sigma>
    35a0:	a9fc      	add	r1, sp, #1008	; 0x3f0
    35a2:	4608      	mov	r0, r1
    35a4:	f7fe fc0c 	bl	1dc0 <POINTonE1_double>
    35a8:	2300      	movs	r3, #0
    35aa:	4622      	mov	r2, r4
    35ac:	a9d8      	add	r1, sp, #864	; 0x360
    35ae:	a8b4      	add	r0, sp, #720	; 0x2d0
    35b0:	f7ff fc62 	bl	2e78 <POINTonE1_dadd>
    35b4:	2101      	movs	r1, #1
    35b6:	a8b4      	add	r0, sp, #720	; 0x2d0
    35b8:	f7fe fa52 	bl	1a60 <POINTonE1_cneg>
    35bc:	2300      	movs	r3, #0
    35be:	aafc      	add	r2, sp, #1008	; 0x3f0
    35c0:	a9b4      	add	r1, sp, #720	; 0x2d0
    35c2:	4608      	mov	r0, r1
    35c4:	f7ff fc58 	bl	2e78 <POINTonE1_dadd>
    35c8:	a9b4      	add	r1, sp, #720	; 0x2d0
    35ca:	a848      	add	r0, sp, #288	; 0x120
    35cc:	f7fe fbf8 	bl	1dc0 <POINTonE1_double>
    35d0:	2300      	movs	r3, #0
    35d2:	aab4      	add	r2, sp, #720	; 0x2d0
    35d4:	a948      	add	r1, sp, #288	; 0x120
    35d6:	4668      	mov	r0, sp
    35d8:	f7ff fc4e 	bl	2e78 <POINTonE1_dadd>
    35dc:	2300      	movs	r3, #0
    35de:	aa48      	add	r2, sp, #288	; 0x120
    35e0:	4669      	mov	r1, sp
    35e2:	a824      	add	r0, sp, #144	; 0x90
    35e4:	f7ff fc48 	bl	2e78 <POINTonE1_dadd>
    35e8:	2300      	movs	r3, #0
    35ea:	aa48      	add	r2, sp, #288	; 0x120
    35ec:	a924      	add	r1, sp, #144	; 0x90
    35ee:	4610      	mov	r0, r2
    35f0:	f7ff fc42 	bl	2e78 <POINTonE1_dadd>
    35f4:	a924      	add	r1, sp, #144	; 0x90
    35f6:	a890      	add	r0, sp, #576	; 0x240
    35f8:	f7fe fbe2 	bl	1dc0 <POINTonE1_double>
    35fc:	2300      	movs	r3, #0
    35fe:	aab4      	add	r2, sp, #720	; 0x2d0
    3600:	a990      	add	r1, sp, #576	; 0x240
    3602:	a86c      	add	r0, sp, #432	; 0x1b0
    3604:	f7ff fc38 	bl	2e78 <POINTonE1_dadd>
    3608:	aa24      	add	r2, sp, #144	; 0x90
    360a:	2103      	movs	r1, #3
    360c:	a890      	add	r0, sp, #576	; 0x240
    360e:	f7ff ffa7 	bl	3560 <POINTonE1_dbl_n_add>
    3612:	a948      	add	r1, sp, #288	; 0x120
    3614:	a8fc      	add	r0, sp, #1008	; 0x3f0
    3616:	f7fe fbd3 	bl	1dc0 <POINTonE1_double>
    361a:	aa6c      	add	r2, sp, #432	; 0x1b0
    361c:	2105      	movs	r1, #5
    361e:	a8fc      	add	r0, sp, #1008	; 0x3f0
    3620:	f7ff ff9e 	bl	3560 <POINTonE1_dbl_n_add>
    3624:	466a      	mov	r2, sp
    3626:	2103      	movs	r1, #3
    3628:	a8fc      	add	r0, sp, #1008	; 0x3f0
    362a:	f7ff ff99 	bl	3560 <POINTonE1_dbl_n_add>
    362e:	aab4      	add	r2, sp, #720	; 0x2d0
    3630:	2103      	movs	r1, #3
    3632:	a8fc      	add	r0, sp, #1008	; 0x3f0
    3634:	f7ff ff94 	bl	3560 <POINTonE1_dbl_n_add>
    3638:	466a      	mov	r2, sp
    363a:	2105      	movs	r1, #5
    363c:	a8fc      	add	r0, sp, #1008	; 0x3f0
    363e:	f7ff ff8f 	bl	3560 <POINTonE1_dbl_n_add>
    3642:	aa90      	add	r2, sp, #576	; 0x240
    3644:	2112      	movs	r1, #18
    3646:	a8fc      	add	r0, sp, #1008	; 0x3f0
    3648:	f7ff ff8a 	bl	3560 <POINTonE1_dbl_n_add>
    364c:	aa90      	add	r2, sp, #576	; 0x240
    364e:	2108      	movs	r1, #8
    3650:	a8fc      	add	r0, sp, #1008	; 0x3f0
    3652:	f7ff ff85 	bl	3560 <POINTonE1_dbl_n_add>
    3656:	aa48      	add	r2, sp, #288	; 0x120
    3658:	2103      	movs	r1, #3
    365a:	a8fc      	add	r0, sp, #1008	; 0x3f0
    365c:	f7ff ff80 	bl	3560 <POINTonE1_dbl_n_add>
    3660:	aa24      	add	r2, sp, #144	; 0x90
    3662:	2107      	movs	r1, #7
    3664:	a8fc      	add	r0, sp, #1008	; 0x3f0
    3666:	f7ff ff7b 	bl	3560 <POINTonE1_dbl_n_add>
    366a:	aa6c      	add	r2, sp, #432	; 0x1b0
    366c:	2105      	movs	r1, #5
    366e:	a8fc      	add	r0, sp, #1008	; 0x3f0
    3670:	f7ff ff76 	bl	3560 <POINTonE1_dbl_n_add>
    3674:	aa90      	add	r2, sp, #576	; 0x240
    3676:	2129      	movs	r1, #41	; 0x29
    3678:	a8fc      	add	r0, sp, #1008	; 0x3f0
    367a:	f7ff ff71 	bl	3560 <POINTonE1_dbl_n_add>
    367e:	aa90      	add	r2, sp, #576	; 0x240
    3680:	2108      	movs	r1, #8
    3682:	a8fc      	add	r0, sp, #1008	; 0x3f0
    3684:	f7ff ff6c 	bl	3560 <POINTonE1_dbl_n_add>
    3688:	aa90      	add	r2, sp, #576	; 0x240
    368a:	2108      	movs	r1, #8
    368c:	a8fc      	add	r0, sp, #1008	; 0x3f0
    368e:	f7ff ff67 	bl	3560 <POINTonE1_dbl_n_add>
    3692:	aa90      	add	r2, sp, #576	; 0x240
    3694:	2108      	movs	r1, #8
    3696:	a8fc      	add	r0, sp, #1008	; 0x3f0
    3698:	f7ff ff62 	bl	3560 <POINTonE1_dbl_n_add>
    369c:	2101      	movs	r1, #1
    369e:	a8d8      	add	r0, sp, #864	; 0x360
    36a0:	f7fe f9de 	bl	1a60 <POINTonE1_cneg>
    36a4:	2300      	movs	r3, #0
    36a6:	aad8      	add	r2, sp, #864	; 0x360
    36a8:	a9fc      	add	r1, sp, #1008	; 0x3f0
    36aa:	4608      	mov	r0, r1
    36ac:	f7ff fbe4 	bl	2e78 <POINTonE1_dadd>
    36b0:	f20d 434c 	addw	r3, sp, #1100	; 0x44c
    36b4:	f20d 417c 	addw	r1, sp, #1148	; 0x47c
    36b8:	2000      	movs	r0, #0
    36ba:	f853 2f04 	ldr.w	r2, [r3, #4]!
    36be:	4310      	orrs	r0, r2
    36c0:	428b      	cmp	r3, r1
    36c2:	d1fa      	bne.n	36ba <POINTonE1_in_G1+0x132>
    36c4:	1e43      	subs	r3, r0, #1
    36c6:	ea23 0000 	bic.w	r0, r3, r0
    36ca:	0fc0      	lsrs	r0, r0, #31
    36cc:	f50d 6d90 	add.w	sp, sp, #1152	; 0x480
    36d0:	bd10      	pop	{r4, pc}

000036d2 <smul_2n>:
    36d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    36d6:	b083      	sub	sp, #12
    36d8:	af00      	add	r7, sp, #0
    36da:	4683      	mov	fp, r0
    36dc:	607b      	str	r3, [r7, #4]
    36de:	f8d7 8030 	ldr.w	r8, [r7, #48]	; 0x30
    36e2:	6b7e      	ldr	r6, [r7, #52]	; 0x34
    36e4:	ea4f 0986 	mov.w	r9, r6, lsl #2
    36e8:	f109 0307 	add.w	r3, r9, #7
    36ec:	f023 0307 	bic.w	r3, r3, #7
    36f0:	ebad 0d03 	sub.w	sp, sp, r3
    36f4:	466d      	mov	r5, sp
    36f6:	ebad 0d03 	sub.w	sp, sp, r3
    36fa:	466c      	mov	r4, sp
    36fc:	ea82 7ae2 	eor.w	sl, r2, r2, asr #31
    3700:	ebaa 7ae2 	sub.w	sl, sl, r2, asr #31
    3704:	4633      	mov	r3, r6
    3706:	17d2      	asrs	r2, r2, #31
    3708:	4628      	mov	r0, r5
    370a:	f7fd f884 	bl	816 <cneg_n>
    370e:	4633      	mov	r3, r6
    3710:	4652      	mov	r2, sl
    3712:	4629      	mov	r1, r5
    3714:	4628      	mov	r0, r5
    3716:	f7fd f898 	bl	84a <umul_n>
    371a:	ea88 7ae8 	eor.w	sl, r8, r8, asr #31
    371e:	ebaa 7ae8 	sub.w	sl, sl, r8, asr #31
    3722:	4633      	mov	r3, r6
    3724:	ea4f 72e8 	mov.w	r2, r8, asr #31
    3728:	6879      	ldr	r1, [r7, #4]
    372a:	4620      	mov	r0, r4
    372c:	f7fd f873 	bl	816 <cneg_n>
    3730:	4633      	mov	r3, r6
    3732:	4652      	mov	r2, sl
    3734:	4621      	mov	r1, r4
    3736:	4620      	mov	r0, r4
    3738:	f7fd f887 	bl	84a <umul_n>
    373c:	b1b6      	cbz	r6, 376c <smul_2n+0x9a>
    373e:	1f29      	subs	r1, r5, #4
    3740:	3c04      	subs	r4, #4
    3742:	f1ab 0004 	sub.w	r0, fp, #4
    3746:	f1a9 0904 	sub.w	r9, r9, #4
    374a:	444d      	add	r5, r9
    374c:	2200      	movs	r2, #0
    374e:	4694      	mov	ip, r2
    3750:	f851 3f04 	ldr.w	r3, [r1, #4]!
    3754:	f854 6f04 	ldr.w	r6, [r4, #4]!
    3758:	199b      	adds	r3, r3, r6
    375a:	eb4c 060c 	adc.w	r6, ip, ip
    375e:	189b      	adds	r3, r3, r2
    3760:	f840 3f04 	str.w	r3, [r0, #4]!
    3764:	f146 0200 	adc.w	r2, r6, #0
    3768:	42a9      	cmp	r1, r5
    376a:	d1f1      	bne.n	3750 <smul_2n+0x7e>
    376c:	370c      	adds	r7, #12
    376e:	46bd      	mov	sp, r7
    3770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003774 <ct_inverse_mod_n>:
    3774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3778:	b09f      	sub	sp, #124	; 0x7c
    377a:	af02      	add	r7, sp, #8
    377c:	60b8      	str	r0, [r7, #8]
    377e:	607b      	str	r3, [r7, #4]
    3780:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    3784:	009b      	lsls	r3, r3, #2
    3786:	3307      	adds	r3, #7
    3788:	f023 0307 	bic.w	r3, r3, #7
    378c:	ebad 0d03 	sub.w	sp, sp, r3
    3790:	f10d 0808 	add.w	r8, sp, #8
    3794:	ebad 0d03 	sub.w	sp, sp, r3
    3798:	ab02      	add	r3, sp, #8
    379a:	63fb      	str	r3, [r7, #60]	; 0x3c
    379c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    37a0:	005b      	lsls	r3, r3, #1
    37a2:	633b      	str	r3, [r7, #48]	; 0x30
    37a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    37a8:	00db      	lsls	r3, r3, #3
    37aa:	643b      	str	r3, [r7, #64]	; 0x40
    37ac:	466b      	mov	r3, sp
    37ae:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
    37b2:	eba3 03c0 	sub.w	r3, r3, r0, lsl #3
    37b6:	469d      	mov	sp, r3
    37b8:	ab02      	add	r3, sp, #8
    37ba:	63bb      	str	r3, [r7, #56]	; 0x38
    37bc:	466b      	mov	r3, sp
    37be:	eba3 03c0 	sub.w	r3, r3, r0, lsl #3
    37c2:	469d      	mov	sp, r3
    37c4:	ab02      	add	r3, sp, #8
    37c6:	637b      	str	r3, [r7, #52]	; 0x34
    37c8:	466b      	mov	r3, sp
    37ca:	eba3 03c0 	sub.w	r3, r3, r0, lsl #3
    37ce:	469d      	mov	sp, r3
    37d0:	ab02      	add	r3, sp, #8
    37d2:	64fb      	str	r3, [r7, #76]	; 0x4c
    37d4:	f030 4440 	bics.w	r4, r0, #3221225472	; 0xc0000000
    37d8:	62fc      	str	r4, [r7, #44]	; 0x2c
    37da:	d015      	beq.n	3808 <ct_inverse_mod_n+0x94>
    37dc:	1f0b      	subs	r3, r1, #4
    37de:	f1a8 0104 	sub.w	r1, r8, #4
    37e2:	00a0      	lsls	r0, r4, #2
    37e4:	eb03 0584 	add.w	r5, r3, r4, lsl #2
    37e8:	f853 4f04 	ldr.w	r4, [r3, #4]!
    37ec:	f841 4f04 	str.w	r4, [r1, #4]!
    37f0:	42ab      	cmp	r3, r5
    37f2:	d1f9      	bne.n	37e8 <ct_inverse_mod_n+0x74>
    37f4:	1f13      	subs	r3, r2, #4
    37f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    37f8:	3a04      	subs	r2, #4
    37fa:	4418      	add	r0, r3
    37fc:	f853 1f04 	ldr.w	r1, [r3, #4]!
    3800:	f842 1f04 	str.w	r1, [r2, #4]!
    3804:	4283      	cmp	r3, r0
    3806:	d1f9      	bne.n	37fc <ct_inverse_mod_n+0x88>
    3808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    380a:	089c      	lsrs	r4, r3, #2
    380c:	2b03      	cmp	r3, #3
    380e:	d907      	bls.n	3820 <ct_inverse_mod_n+0xac>
    3810:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3812:	2300      	movs	r3, #0
    3814:	4619      	mov	r1, r3
    3816:	f842 1b04 	str.w	r1, [r2], #4
    381a:	3301      	adds	r3, #1
    381c:	429c      	cmp	r4, r3
    381e:	d8fa      	bhi.n	3816 <ct_inverse_mod_n+0xa2>
    3820:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3822:	2301      	movs	r3, #1
    3824:	6013      	str	r3, [r2, #0]
    3826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3828:	2b03      	cmp	r3, #3
    382a:	d907      	bls.n	383c <ct_inverse_mod_n+0xc8>
    382c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    382e:	2300      	movs	r3, #0
    3830:	4619      	mov	r1, r3
    3832:	f842 1b04 	str.w	r1, [r2], #4
    3836:	3301      	adds	r3, #1
    3838:	42a3      	cmp	r3, r4
    383a:	d3fa      	bcc.n	3832 <ct_inverse_mod_n+0xbe>
    383c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    383e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    3842:	019b      	lsls	r3, r3, #6
    3844:	3b02      	subs	r3, #2
    3846:	461a      	mov	r2, r3
    3848:	60fb      	str	r3, [r7, #12]
    384a:	4bbd      	ldr	r3, [pc, #756]	; (3b40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa8>)
    384c:	fba3 2302 	umull	r2, r3, r3, r2
    3850:	091b      	lsrs	r3, r3, #4
    3852:	61bb      	str	r3, [r7, #24]
    3854:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    3858:	1e5a      	subs	r2, r3, #1
    385a:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    385e:	62bb      	str	r3, [r7, #40]	; 0x28
    3860:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    3864:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3868:	3b02      	subs	r3, #2
    386a:	eb08 0183 	add.w	r1, r8, r3, lsl #2
    386e:	6279      	str	r1, [r7, #36]	; 0x24
    3870:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3872:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3876:	623a      	str	r2, [r7, #32]
    3878:	460a      	mov	r2, r1
    387a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    387e:	61fb      	str	r3, [r7, #28]
    3880:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    3884:	3b02      	subs	r3, #2
    3886:	eb08 0183 	add.w	r1, r8, r3, lsl #2
    388a:	6179      	str	r1, [r7, #20]
    388c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3890:	613b      	str	r3, [r7, #16]
    3892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3896:	eb03 0582 	add.w	r5, r3, r2, lsl #2
    389a:	3d04      	subs	r5, #4
    389c:	2300      	movs	r3, #0
    389e:	647b      	str	r3, [r7, #68]	; 0x44
    38a0:	f108 0604 	add.w	r6, r8, #4
    38a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    38a6:	6819      	ldr	r1, [r3, #0]
    38a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    38aa:	f8d3 c000 	ldr.w	ip, [r3]
    38ae:	f8c7 c048 	str.w	ip, [r7, #72]	; 0x48
    38b2:	6a3b      	ldr	r3, [r7, #32]
    38b4:	681a      	ldr	r2, [r3, #0]
    38b6:	69fb      	ldr	r3, [r7, #28]
    38b8:	6818      	ldr	r0, [r3, #0]
    38ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    38be:	2b03      	cmp	r3, #3
    38c0:	d029      	beq.n	3916 <ct_inverse_mod_n+0x1a2>
    38c2:	f8d7 a010 	ldr.w	sl, [r7, #16]
    38c6:	f8d7 9014 	ldr.w	r9, [r7, #20]
    38ca:	4663      	mov	r3, ip
    38cc:	ea41 0c02 	orr.w	ip, r1, r2
    38d0:	f10c 3eff 	add.w	lr, ip, #4294967295
    38d4:	ea2e 0c0c 	bic.w	ip, lr, ip
    38d8:	ea81 0e03 	eor.w	lr, r1, r3
    38dc:	ea0e 7eec 	and.w	lr, lr, ip, asr #31
    38e0:	ea81 010e 	eor.w	r1, r1, lr
    38e4:	ea82 0e00 	eor.w	lr, r2, r0
    38e8:	ea0e 7eec 	and.w	lr, lr, ip, asr #31
    38ec:	ea82 020e 	eor.w	r2, r2, lr
    38f0:	f859 ed04 	ldr.w	lr, [r9, #-4]!
    38f4:	ea83 0e0e 	eor.w	lr, r3, lr
    38f8:	ea0e 7eec 	and.w	lr, lr, ip, asr #31
    38fc:	ea83 030e 	eor.w	r3, r3, lr
    3900:	f85a ed04 	ldr.w	lr, [sl, #-4]!
    3904:	ea80 0e0e 	eor.w	lr, r0, lr
    3908:	ea0e 7cec 	and.w	ip, lr, ip, asr #31
    390c:	ea80 000c 	eor.w	r0, r0, ip
    3910:	45b1      	cmp	r9, r6
    3912:	d1db      	bne.n	38cc <ct_inverse_mod_n+0x158>
    3914:	64bb      	str	r3, [r7, #72]	; 0x48
    3916:	ea41 0a02 	orr.w	sl, r1, r2
    391a:	f10a 3cff 	add.w	ip, sl, #4294967295
    391e:	ea2c 0c0a 	bic.w	ip, ip, sl
    3922:	ea4f 4e1a 	mov.w	lr, sl, lsr #16
    3926:	f1ce 0900 	rsb	r9, lr, #0
    392a:	ea4f 79e9 	mov.w	r9, r9, asr #31
    392e:	f009 0b10 	and.w	fp, r9, #16
    3932:	f1bc 0f00 	cmp.w	ip, #0
    3936:	bfa8      	it	ge
    3938:	f10b 0b01 	addge.w	fp, fp, #1
    393c:	ea8a 0e0e 	eor.w	lr, sl, lr
    3940:	ea0e 0909 	and.w	r9, lr, r9
    3944:	ea89 0c0a 	eor.w	ip, r9, sl
    3948:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
    394c:	f1ce 0900 	rsb	r9, lr, #0
    3950:	ea4f 79e9 	mov.w	r9, r9, asr #31
    3954:	f009 0a08 	and.w	sl, r9, #8
    3958:	44da      	add	sl, fp
    395a:	ea8c 0e0e 	eor.w	lr, ip, lr
    395e:	ea0e 0909 	and.w	r9, lr, r9
    3962:	ea8c 0909 	eor.w	r9, ip, r9
    3966:	ea4f 1e19 	mov.w	lr, r9, lsr #4
    396a:	f1ce 0b00 	rsb	fp, lr, #0
    396e:	ea4f 7beb 	mov.w	fp, fp, asr #31
    3972:	f00b 0c04 	and.w	ip, fp, #4
    3976:	44e2      	add	sl, ip
    3978:	ea89 0e0e 	eor.w	lr, r9, lr
    397c:	ea0e 0e0b 	and.w	lr, lr, fp
    3980:	ea89 0c0e 	eor.w	ip, r9, lr
    3984:	ea4f 0e9c 	mov.w	lr, ip, lsr #2
    3988:	f1ce 0900 	rsb	r9, lr, #0
    398c:	ea4f 79e9 	mov.w	r9, r9, asr #31
    3990:	f009 0b02 	and.w	fp, r9, #2
    3994:	44da      	add	sl, fp
    3996:	ea8c 0e0e 	eor.w	lr, ip, lr
    399a:	ea0e 0e09 	and.w	lr, lr, r9
    399e:	ea8c 0e0e 	eor.w	lr, ip, lr
    39a2:	eb0a 0a5e 	add.w	sl, sl, lr, lsr #1
    39a6:	f1ca 0e20 	rsb	lr, sl, #32
    39aa:	f8d8 3000 	ldr.w	r3, [r8]
    39ae:	66bb      	str	r3, [r7, #104]	; 0x68
    39b0:	f1ca 091f 	rsb	r9, sl, #31
    39b4:	ea29 090e 	bic.w	r9, r9, lr
    39b8:	ea6f 0909 	mvn.w	r9, r9
    39bc:	ea4f 79d9 	mov.w	r9, r9, lsr #31
    39c0:	f1c9 0900 	rsb	r9, r9, #0
    39c4:	f00e 0e1f 	and.w	lr, lr, #31
    39c8:	f00a 0a1f 	and.w	sl, sl, #31
    39cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    39ce:	ea09 0303 	and.w	r3, r9, r3
    39d2:	fa23 f30a 	lsr.w	r3, r3, sl
    39d6:	fa01 f10e 	lsl.w	r1, r1, lr
    39da:	4319      	orrs	r1, r3
    39dc:	66f9      	str	r1, [r7, #108]	; 0x6c
    39de:	f8d7 b03c 	ldr.w	fp, [r7, #60]	; 0x3c
    39e2:	f8db 3000 	ldr.w	r3, [fp]
    39e6:	663b      	str	r3, [r7, #96]	; 0x60
    39e8:	ea09 0000 	and.w	r0, r9, r0
    39ec:	fa20 fa0a 	lsr.w	sl, r0, sl
    39f0:	fa02 f20e 	lsl.w	r2, r2, lr
    39f4:	ea4a 0202 	orr.w	r2, sl, r2
    39f8:	667a      	str	r2, [r7, #100]	; 0x64
    39fa:	231e      	movs	r3, #30
    39fc:	f107 0260 	add.w	r2, r7, #96	; 0x60
    3a00:	f107 0168 	add.w	r1, r7, #104	; 0x68
    3a04:	f107 0050 	add.w	r0, r7, #80	; 0x50
    3a08:	f7fc fe9c 	bl	744 <inner_loop_n>
    3a0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    3a10:	9301      	str	r3, [sp, #4]
    3a12:	f107 0354 	add.w	r3, r7, #84	; 0x54
    3a16:	9300      	str	r3, [sp, #0]
    3a18:	465b      	mov	r3, fp
    3a1a:	f107 0250 	add.w	r2, r7, #80	; 0x50
    3a1e:	4641      	mov	r1, r8
    3a20:	f8d7 904c 	ldr.w	r9, [r7, #76]	; 0x4c
    3a24:	4648      	mov	r0, r9
    3a26:	f7fd fcc0 	bl	13aa <smul_n_shift_n>
    3a2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    3a2e:	9301      	str	r3, [sp, #4]
    3a30:	f107 035c 	add.w	r3, r7, #92	; 0x5c
    3a34:	9300      	str	r3, [sp, #0]
    3a36:	465b      	mov	r3, fp
    3a38:	f107 0258 	add.w	r2, r7, #88	; 0x58
    3a3c:	4641      	mov	r1, r8
    3a3e:	4658      	mov	r0, fp
    3a40:	f7fd fcb3 	bl	13aa <smul_n_shift_n>
    3a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3a46:	b14b      	cbz	r3, 3a5c <ct_inverse_mod_n+0x2e8>
    3a48:	f1a9 0304 	sub.w	r3, r9, #4
    3a4c:	f1a8 0204 	sub.w	r2, r8, #4
    3a50:	f853 1f04 	ldr.w	r1, [r3, #4]!
    3a54:	f842 1f04 	str.w	r1, [r2, #4]!
    3a58:	42ab      	cmp	r3, r5
    3a5a:	d1f9      	bne.n	3a50 <ct_inverse_mod_n+0x2dc>
    3a5c:	f8d7 b030 	ldr.w	fp, [r7, #48]	; 0x30
    3a60:	f8cd b004 	str.w	fp, [sp, #4]
    3a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3a66:	9300      	str	r3, [sp, #0]
    3a68:	f8d7 9034 	ldr.w	r9, [r7, #52]	; 0x34
    3a6c:	464b      	mov	r3, r9
    3a6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    3a70:	f8d7 a038 	ldr.w	sl, [r7, #56]	; 0x38
    3a74:	4651      	mov	r1, sl
    3a76:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    3a78:	f7ff fe2b 	bl	36d2 <smul_2n>
    3a7c:	f8cd b004 	str.w	fp, [sp, #4]
    3a80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    3a82:	9300      	str	r3, [sp, #0]
    3a84:	464b      	mov	r3, r9
    3a86:	6dba      	ldr	r2, [r7, #88]	; 0x58
    3a88:	4651      	mov	r1, sl
    3a8a:	4648      	mov	r0, r9
    3a8c:	f7ff fe21 	bl	36d2 <smul_2n>
    3a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3a92:	2b03      	cmp	r3, #3
    3a94:	d90b      	bls.n	3aae <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x16>
    3a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3a98:	1f19      	subs	r1, r3, #4
    3a9a:	f1aa 0204 	sub.w	r2, sl, #4
    3a9e:	2300      	movs	r3, #0
    3aa0:	f851 0f04 	ldr.w	r0, [r1, #4]!
    3aa4:	f842 0f04 	str.w	r0, [r2, #4]!
    3aa8:	3301      	adds	r3, #1
    3aaa:	429c      	cmp	r4, r3
    3aac:	d8f8      	bhi.n	3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>
    3aae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3ab0:	3301      	adds	r3, #1
    3ab2:	647b      	str	r3, [r7, #68]	; 0x44
    3ab4:	69ba      	ldr	r2, [r7, #24]
    3ab6:	4293      	cmp	r3, r2
    3ab8:	f4ff aef4 	bcc.w	38a4 <ct_inverse_mod_n+0x130>
    3abc:	4b20      	ldr	r3, [pc, #128]	; (3b40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa8>)
    3abe:	68f9      	ldr	r1, [r7, #12]
    3ac0:	fba3 2301 	umull	r2, r3, r3, r1
    3ac4:	f023 020f 	bic.w	r2, r3, #15
    3ac8:	eba2 1313 	sub.w	r3, r2, r3, lsr #4
    3acc:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
    3ad0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3ad2:	4641      	mov	r1, r8
    3ad4:	f107 0050 	add.w	r0, r7, #80	; 0x50
    3ad8:	f7fc fe34 	bl	744 <inner_loop_n>
    3adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3ade:	9301      	str	r3, [sp, #4]
    3ae0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    3ae2:	9300      	str	r3, [sp, #0]
    3ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3ae6:	6dba      	ldr	r2, [r7, #88]	; 0x58
    3ae8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    3aea:	68bc      	ldr	r4, [r7, #8]
    3aec:	4620      	mov	r0, r4
    3aee:	f7ff fdf0 	bl	36d2 <smul_2n>
    3af2:	4622      	mov	r2, r4
    3af4:	6c38      	ldr	r0, [r7, #64]	; 0x40
    3af6:	1823      	adds	r3, r4, r0
    3af8:	f853 4c04 	ldr.w	r4, [r3, #-4]
    3afc:	17e4      	asrs	r4, r4, #31
    3afe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    3b02:	b1cb      	cbz	r3, 3b38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa0>
    3b04:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
    3b08:	3901      	subs	r1, #1
    3b0a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    3b0e:	687b      	ldr	r3, [r7, #4]
    3b10:	1f1e      	subs	r6, r3, #4
    3b12:	f1a2 0c04 	sub.w	ip, r2, #4
    3b16:	4484      	add	ip, r0
    3b18:	2200      	movs	r2, #0
    3b1a:	4615      	mov	r5, r2
    3b1c:	f856 3f04 	ldr.w	r3, [r6, #4]!
    3b20:	4023      	ands	r3, r4
    3b22:	f851 0f04 	ldr.w	r0, [r1, #4]!
    3b26:	1880      	adds	r0, r0, r2
    3b28:	eb45 0205 	adc.w	r2, r5, r5
    3b2c:	181b      	adds	r3, r3, r0
    3b2e:	600b      	str	r3, [r1, #0]
    3b30:	f142 0200 	adc.w	r2, r2, #0
    3b34:	4561      	cmp	r1, ip
    3b36:	d1f1      	bne.n	3b1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x84>
    3b38:	3774      	adds	r7, #116	; 0x74
    3b3a:	46bd      	mov	sp, r7
    3b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b40:	88888889 	.word	0x88888889

00003b44 <blst_p1_cneg>:
    3b44:	b508      	push	{r3, lr}
    3b46:	1e4b      	subs	r3, r1, #1
    3b48:	ea23 0101 	bic.w	r1, r3, r1
    3b4c:	43c9      	mvns	r1, r1
    3b4e:	0fc9      	lsrs	r1, r1, #31
    3b50:	f7fd ff86 	bl	1a60 <POINTonE1_cneg>
    3b54:	bd08      	pop	{r3, pc}

00003b56 <blst_p1_from_affine>:
    3b56:	b430      	push	{r4, r5}
    3b58:	1f0a      	subs	r2, r1, #4
    3b5a:	f1a0 0c04 	sub.w	ip, r0, #4
    3b5e:	f101 045c 	add.w	r4, r1, #92	; 0x5c
    3b62:	4613      	mov	r3, r2
    3b64:	f853 5f04 	ldr.w	r5, [r3, #4]!
    3b68:	f84c 5f04 	str.w	r5, [ip, #4]!
    3b6c:	42a3      	cmp	r3, r4
    3b6e:	d1f9      	bne.n	3b64 <blst_p1_from_affine+0xe>
    3b70:	4613      	mov	r3, r2
    3b72:	f04f 0c00 	mov.w	ip, #0
    3b76:	f853 5f04 	ldr.w	r5, [r3, #4]!
    3b7a:	ea4c 0c05 	orr.w	ip, ip, r5
    3b7e:	42a3      	cmp	r3, r4
    3b80:	d1f9      	bne.n	3b76 <blst_p1_from_affine+0x20>
    3b82:	f10c 33ff 	add.w	r3, ip, #4294967295
    3b86:	ea23 0c0c 	bic.w	ip, r3, ip
    3b8a:	ea4f 7cec 	mov.w	ip, ip, asr #31
    3b8e:	4c09      	ldr	r4, [pc, #36]	; (3bb4 <blst_p1_from_affine+0x5e>)
    3b90:	305c      	adds	r0, #92	; 0x5c
    3b92:	f101 052c 	add.w	r5, r1, #44	; 0x2c
    3b96:	f854 1b04 	ldr.w	r1, [r4], #4
    3b9a:	f852 3f04 	ldr.w	r3, [r2, #4]!
    3b9e:	404b      	eors	r3, r1
    3ba0:	ea03 030c 	and.w	r3, r3, ip
    3ba4:	404b      	eors	r3, r1
    3ba6:	f840 3f04 	str.w	r3, [r0, #4]!
    3baa:	42aa      	cmp	r2, r5
    3bac:	d1f3      	bne.n	3b96 <blst_p1_from_affine+0x40>
    3bae:	bc30      	pop	{r4, r5}
    3bb0:	4770      	bx	lr
    3bb2:	bf00      	nop
    3bb4:	00015a98 	.word	0x00015a98

00003bb8 <blst_p1_affine_on_curve>:
    3bb8:	b508      	push	{r3, lr}
    3bba:	f7fd fea3 	bl	1904 <POINTonE1_affine_on_curve>
    3bbe:	bd08      	pop	{r3, pc}

00003bc0 <blst_p1_on_curve>:
    3bc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3bc4:	b0a7      	sub	sp, #156	; 0x9c
    3bc6:	4605      	mov	r5, r0
    3bc8:	f100 0760 	add.w	r7, r0, #96	; 0x60
    3bcc:	f100 035c 	add.w	r3, r0, #92	; 0x5c
    3bd0:	f100 028c 	add.w	r2, r0, #140	; 0x8c
    3bd4:	f04f 0c00 	mov.w	ip, #0
    3bd8:	f853 4f04 	ldr.w	r4, [r3, #4]!
    3bdc:	ea4c 0c04 	orr.w	ip, ip, r4
    3be0:	4293      	cmp	r3, r2
    3be2:	d1f9      	bne.n	3bd8 <blst_p1_on_curve+0x18>
    3be4:	f10c 36ff 	add.w	r6, ip, #4294967295
    3be8:	ea26 0c0c 	bic.w	ip, r6, ip
    3bec:	ea4f 76dc 	mov.w	r6, ip, lsr #31
    3bf0:	4c32      	ldr	r4, [pc, #200]	; (3cbc <blst_p1_on_curve+0xfc>)
    3bf2:	f04f 080c 	mov.w	r8, #12
    3bf6:	f8cd 8004 	str.w	r8, [sp, #4]
    3bfa:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 3cc0 <blst_p1_on_curve+0x100>
    3bfe:	f8cd 9000 	str.w	r9, [sp]
    3c02:	4623      	mov	r3, r4
    3c04:	463a      	mov	r2, r7
    3c06:	4639      	mov	r1, r7
    3c08:	a81a      	add	r0, sp, #104	; 0x68
    3c0a:	f7fc fe8f 	bl	92c <mul_mont_n>
    3c0e:	f8cd 8004 	str.w	r8, [sp, #4]
    3c12:	f8cd 9000 	str.w	r9, [sp]
    3c16:	4623      	mov	r3, r4
    3c18:	463a      	mov	r2, r7
    3c1a:	a91a      	add	r1, sp, #104	; 0x68
    3c1c:	4608      	mov	r0, r1
    3c1e:	f7fc fe85 	bl	92c <mul_mont_n>
    3c22:	f8cd 8004 	str.w	r8, [sp, #4]
    3c26:	f8cd 9000 	str.w	r9, [sp]
    3c2a:	4623      	mov	r3, r4
    3c2c:	aa1a      	add	r2, sp, #104	; 0x68
    3c2e:	4611      	mov	r1, r2
    3c30:	4610      	mov	r0, r2
    3c32:	f7fc fe7b 	bl	92c <mul_mont_n>
    3c36:	f8cd 8000 	str.w	r8, [sp]
    3c3a:	4623      	mov	r3, r4
    3c3c:	2202      	movs	r2, #2
    3c3e:	a91a      	add	r1, sp, #104	; 0x68
    3c40:	4608      	mov	r0, r1
    3c42:	f7fd f943 	bl	ecc <lshift_mod_n>
    3c46:	f8cd 8004 	str.w	r8, [sp, #4]
    3c4a:	f8cd 9000 	str.w	r9, [sp]
    3c4e:	4623      	mov	r3, r4
    3c50:	462a      	mov	r2, r5
    3c52:	4629      	mov	r1, r5
    3c54:	a802      	add	r0, sp, #8
    3c56:	f7fc fe69 	bl	92c <mul_mont_n>
    3c5a:	f8cd 8004 	str.w	r8, [sp, #4]
    3c5e:	f8cd 9000 	str.w	r9, [sp]
    3c62:	4623      	mov	r3, r4
    3c64:	462a      	mov	r2, r5
    3c66:	a902      	add	r1, sp, #8
    3c68:	4608      	mov	r0, r1
    3c6a:	f7fc fe5f 	bl	92c <mul_mont_n>
    3c6e:	f8cd 8000 	str.w	r8, [sp]
    3c72:	4623      	mov	r3, r4
    3c74:	aa1a      	add	r2, sp, #104	; 0x68
    3c76:	a902      	add	r1, sp, #8
    3c78:	4608      	mov	r0, r1
    3c7a:	f7fc ffff 	bl	c7c <add_mod_n>
    3c7e:	f105 0130 	add.w	r1, r5, #48	; 0x30
    3c82:	f8cd 8004 	str.w	r8, [sp, #4]
    3c86:	f8cd 9000 	str.w	r9, [sp]
    3c8a:	4623      	mov	r3, r4
    3c8c:	460a      	mov	r2, r1
    3c8e:	a80e      	add	r0, sp, #56	; 0x38
    3c90:	f7fc fe4c 	bl	92c <mul_mont_n>
    3c94:	aa02      	add	r2, sp, #8
    3c96:	a90e      	add	r1, sp, #56	; 0x38
    3c98:	460d      	mov	r5, r1
    3c9a:	2000      	movs	r0, #0
    3c9c:	f852 3b04 	ldr.w	r3, [r2], #4
    3ca0:	f851 4b04 	ldr.w	r4, [r1], #4
    3ca4:	4063      	eors	r3, r4
    3ca6:	4318      	orrs	r0, r3
    3ca8:	42aa      	cmp	r2, r5
    3caa:	d1f7      	bne.n	3c9c <blst_p1_on_curve+0xdc>
    3cac:	1e43      	subs	r3, r0, #1
    3cae:	ea23 0000 	bic.w	r0, r3, r0
    3cb2:	ea46 70d0 	orr.w	r0, r6, r0, lsr #31
    3cb6:	b027      	add	sp, #156	; 0x9c
    3cb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3cbc:	00015a08 	.word	0x00015a08
    3cc0:	fffcfffd 	.word	0xfffcfffd

00003cc4 <blst_p1_affine_serialize>:
    3cc4:	b510      	push	{r4, lr}
    3cc6:	1f0b      	subs	r3, r1, #4
    3cc8:	f101 0c5c 	add.w	ip, r1, #92	; 0x5c
    3ccc:	2200      	movs	r2, #0
    3cce:	f853 4f04 	ldr.w	r4, [r3, #4]!
    3cd2:	4322      	orrs	r2, r4
    3cd4:	4563      	cmp	r3, ip
    3cd6:	d1fa      	bne.n	3cce <blst_p1_affine_serialize+0xa>
    3cd8:	1e53      	subs	r3, r2, #1
    3cda:	4393      	bics	r3, r2
    3cdc:	d50a      	bpl.n	3cf4 <blst_p1_affine_serialize+0x30>
    3cde:	1e43      	subs	r3, r0, #1
    3ce0:	f100 015f 	add.w	r1, r0, #95	; 0x5f
    3ce4:	2200      	movs	r2, #0
    3ce6:	f803 2f01 	strb.w	r2, [r3, #1]!
    3cea:	428b      	cmp	r3, r1
    3cec:	d1fb      	bne.n	3ce6 <blst_p1_affine_serialize+0x22>
    3cee:	2340      	movs	r3, #64	; 0x40
    3cf0:	7003      	strb	r3, [r0, #0]
    3cf2:	bd10      	pop	{r4, pc}
    3cf4:	f7fd fc86 	bl	1604 <POINTonE1_affine_Serialize_BE>
    3cf8:	e7fb      	b.n	3cf2 <blst_p1_affine_serialize+0x2e>

00003cfa <blst_p1_affine_compress>:
    3cfa:	b538      	push	{r3, r4, r5, lr}
    3cfc:	4605      	mov	r5, r0
    3cfe:	1f0b      	subs	r3, r1, #4
    3d00:	f101 0c5c 	add.w	ip, r1, #92	; 0x5c
    3d04:	2200      	movs	r2, #0
    3d06:	f853 4f04 	ldr.w	r4, [r3, #4]!
    3d0a:	4322      	orrs	r2, r4
    3d0c:	4563      	cmp	r3, ip
    3d0e:	d1fa      	bne.n	3d06 <blst_p1_affine_compress+0xc>
    3d10:	1e53      	subs	r3, r2, #1
    3d12:	4393      	bics	r3, r2
    3d14:	d50a      	bpl.n	3d2c <blst_p1_affine_compress+0x32>
    3d16:	1e6b      	subs	r3, r5, #1
    3d18:	f105 012f 	add.w	r1, r5, #47	; 0x2f
    3d1c:	2200      	movs	r2, #0
    3d1e:	f803 2f01 	strb.w	r2, [r3, #1]!
    3d22:	428b      	cmp	r3, r1
    3d24:	d1fb      	bne.n	3d1e <blst_p1_affine_compress+0x24>
    3d26:	23c0      	movs	r3, #192	; 0xc0
    3d28:	702b      	strb	r3, [r5, #0]
    3d2a:	bd38      	pop	{r3, r4, r5, pc}
    3d2c:	4628      	mov	r0, r5
    3d2e:	f7fd fc34 	bl	159a <POINTonE1_affine_Compress_BE>
    3d32:	0103      	lsls	r3, r0, #4
    3d34:	f003 0320 	and.w	r3, r3, #32
    3d38:	782a      	ldrb	r2, [r5, #0]
    3d3a:	4313      	orrs	r3, r2
    3d3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3d40:	702b      	strb	r3, [r5, #0]
    3d42:	e7f2      	b.n	3d2a <blst_p1_affine_compress+0x30>

00003d44 <blst_p1_is_equal>:
    3d44:	b508      	push	{r3, lr}
    3d46:	f7fd ffb4 	bl	1cb2 <POINTonE1_is_equal>
    3d4a:	bd08      	pop	{r3, pc}

00003d4c <blst_p1_is_inf>:
    3d4c:	f100 035c 	add.w	r3, r0, #92	; 0x5c
    3d50:	f100 018c 	add.w	r1, r0, #140	; 0x8c
    3d54:	2000      	movs	r0, #0
    3d56:	f853 2f04 	ldr.w	r2, [r3, #4]!
    3d5a:	4310      	orrs	r0, r2
    3d5c:	428b      	cmp	r3, r1
    3d5e:	d1fa      	bne.n	3d56 <blst_p1_is_inf+0xa>
    3d60:	1e43      	subs	r3, r0, #1
    3d62:	ea23 0000 	bic.w	r0, r3, r0
    3d66:	0fc0      	lsrs	r0, r0, #31
    3d68:	4770      	bx	lr

00003d6a <blst_p1_generator>:
    3d6a:	4801      	ldr	r0, [pc, #4]	; (3d70 <blst_p1_generator+0x6>)
    3d6c:	4770      	bx	lr
    3d6e:	bf00      	nop
    3d70:	000166f8 	.word	0x000166f8

00003d74 <blst_p1_affine_is_inf>:
    3d74:	1f03      	subs	r3, r0, #4
    3d76:	f100 015c 	add.w	r1, r0, #92	; 0x5c
    3d7a:	2000      	movs	r0, #0
    3d7c:	f853 2f04 	ldr.w	r2, [r3, #4]!
    3d80:	4310      	orrs	r0, r2
    3d82:	428b      	cmp	r3, r1
    3d84:	d1fa      	bne.n	3d7c <blst_p1_affine_is_inf+0x8>
    3d86:	1e43      	subs	r3, r0, #1
    3d88:	ea23 0000 	bic.w	r0, r3, r0
    3d8c:	0fc0      	lsrs	r0, r0, #31
    3d8e:	4770      	bx	lr

00003d90 <blst_p1_affine_generator>:
    3d90:	4800      	ldr	r0, [pc, #0]	; (3d94 <blst_p1_affine_generator+0x4>)
    3d92:	4770      	bx	lr
    3d94:	000166f8 	.word	0x000166f8

00003d98 <blst_p1_in_g1>:
    3d98:	b508      	push	{r3, lr}
    3d9a:	f7ff fbf5 	bl	3588 <POINTonE1_in_G1>
    3d9e:	bd08      	pop	{r3, pc}

00003da0 <blst_p1_affine_in_g1>:
    3da0:	b510      	push	{r4, lr}
    3da2:	b0a4      	sub	sp, #144	; 0x90
    3da4:	1f02      	subs	r2, r0, #4
    3da6:	466b      	mov	r3, sp
    3da8:	f10d 0c60 	add.w	ip, sp, #96	; 0x60
    3dac:	4611      	mov	r1, r2
    3dae:	f851 4f04 	ldr.w	r4, [r1, #4]!
    3db2:	f843 4b04 	str.w	r4, [r3], #4
    3db6:	4563      	cmp	r3, ip
    3db8:	d1f9      	bne.n	3dae <blst_p1_affine_in_g1+0xe>
    3dba:	f100 0c5c 	add.w	ip, r0, #92	; 0x5c
    3dbe:	4613      	mov	r3, r2
    3dc0:	2100      	movs	r1, #0
    3dc2:	f853 4f04 	ldr.w	r4, [r3, #4]!
    3dc6:	4321      	orrs	r1, r4
    3dc8:	4563      	cmp	r3, ip
    3dca:	d1fa      	bne.n	3dc2 <blst_p1_affine_in_g1+0x22>
    3dcc:	f101 3eff 	add.w	lr, r1, #4294967295
    3dd0:	ea2e 0101 	bic.w	r1, lr, r1
    3dd4:	ea4f 7ee1 	mov.w	lr, r1, asr #31
    3dd8:	4c0a      	ldr	r4, [pc, #40]	; (3e04 <blst_p1_affine_in_g1+0x64>)
    3dda:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
    3dde:	302c      	adds	r0, #44	; 0x2c
    3de0:	f854 1b04 	ldr.w	r1, [r4], #4
    3de4:	f852 3f04 	ldr.w	r3, [r2, #4]!
    3de8:	404b      	eors	r3, r1
    3dea:	ea03 030e 	and.w	r3, r3, lr
    3dee:	404b      	eors	r3, r1
    3df0:	f84c 3f04 	str.w	r3, [ip, #4]!
    3df4:	4282      	cmp	r2, r0
    3df6:	d1f3      	bne.n	3de0 <blst_p1_affine_in_g1+0x40>
    3df8:	4668      	mov	r0, sp
    3dfa:	f7ff fbc5 	bl	3588 <POINTonE1_in_G1>
    3dfe:	b024      	add	sp, #144	; 0x90
    3e00:	bd10      	pop	{r4, pc}
    3e02:	bf00      	nop
    3e04:	00015a98 	.word	0x00015a98

00003e08 <blst_p2_cneg>:
    3e08:	b508      	push	{r3, lr}
    3e0a:	1e4b      	subs	r3, r1, #1
    3e0c:	ea23 0101 	bic.w	r1, r3, r1
    3e10:	43c9      	mvns	r1, r1
    3e12:	0fc9      	lsrs	r1, r1, #31
    3e14:	f7fd fe90 	bl	1b38 <POINTonE2_cneg>
    3e18:	bd08      	pop	{r3, pc}

00003e1a <blst_p2_from_affine>:
    3e1a:	b510      	push	{r4, lr}
    3e1c:	f1a1 0c04 	sub.w	ip, r1, #4
    3e20:	1f02      	subs	r2, r0, #4
    3e22:	31bc      	adds	r1, #188	; 0xbc
    3e24:	4663      	mov	r3, ip
    3e26:	f853 4f04 	ldr.w	r4, [r3, #4]!
    3e2a:	f842 4f04 	str.w	r4, [r2, #4]!
    3e2e:	428b      	cmp	r3, r1
    3e30:	d1f9      	bne.n	3e26 <blst_p2_from_affine+0xc>
    3e32:	4663      	mov	r3, ip
    3e34:	2200      	movs	r2, #0
    3e36:	f853 4f04 	ldr.w	r4, [r3, #4]!
    3e3a:	4322      	orrs	r2, r4
    3e3c:	428b      	cmp	r3, r1
    3e3e:	d1fa      	bne.n	3e36 <blst_p2_from_affine+0x1c>
    3e40:	1e54      	subs	r4, r2, #1
    3e42:	ea24 0202 	bic.w	r2, r4, r2
    3e46:	17d4      	asrs	r4, r2, #31
    3e48:	4b08      	ldr	r3, [pc, #32]	; (3e6c <blst_p2_from_affine+0x52>)
    3e4a:	f103 0290 	add.w	r2, r3, #144	; 0x90
    3e4e:	30bc      	adds	r0, #188	; 0xbc
    3e50:	f103 0ef0 	add.w	lr, r3, #240	; 0xf0
    3e54:	f852 1b04 	ldr.w	r1, [r2], #4
    3e58:	f85c 3f04 	ldr.w	r3, [ip, #4]!
    3e5c:	404b      	eors	r3, r1
    3e5e:	4023      	ands	r3, r4
    3e60:	404b      	eors	r3, r1
    3e62:	f840 3f04 	str.w	r3, [r0, #4]!
    3e66:	4572      	cmp	r2, lr
    3e68:	d1f4      	bne.n	3e54 <blst_p2_from_affine+0x3a>
    3e6a:	bd10      	pop	{r4, pc}
    3e6c:	00015a08 	.word	0x00015a08

00003e70 <blst_p2_affine_serialize>:
    3e70:	b510      	push	{r4, lr}
    3e72:	1f0b      	subs	r3, r1, #4
    3e74:	f101 0cbc 	add.w	ip, r1, #188	; 0xbc
    3e78:	2200      	movs	r2, #0
    3e7a:	f853 4f04 	ldr.w	r4, [r3, #4]!
    3e7e:	4322      	orrs	r2, r4
    3e80:	4563      	cmp	r3, ip
    3e82:	d1fa      	bne.n	3e7a <blst_p2_affine_serialize+0xa>
    3e84:	1e53      	subs	r3, r2, #1
    3e86:	4393      	bics	r3, r2
    3e88:	d50a      	bpl.n	3ea0 <blst_p2_affine_serialize+0x30>
    3e8a:	1e43      	subs	r3, r0, #1
    3e8c:	f100 01bf 	add.w	r1, r0, #191	; 0xbf
    3e90:	2200      	movs	r2, #0
    3e92:	f803 2f01 	strb.w	r2, [r3, #1]!
    3e96:	428b      	cmp	r3, r1
    3e98:	d1fb      	bne.n	3e92 <blst_p2_affine_serialize+0x22>
    3e9a:	2340      	movs	r3, #64	; 0x40
    3e9c:	7003      	strb	r3, [r0, #0]
    3e9e:	bd10      	pop	{r4, pc}
    3ea0:	f7fd fc80 	bl	17a4 <POINTonE2_affine_Serialize_BE>
    3ea4:	e7fb      	b.n	3e9e <blst_p2_affine_serialize+0x2e>

00003ea6 <blst_p2_affine_compress>:
    3ea6:	b538      	push	{r3, r4, r5, lr}
    3ea8:	4605      	mov	r5, r0
    3eaa:	1f0b      	subs	r3, r1, #4
    3eac:	f101 0cbc 	add.w	ip, r1, #188	; 0xbc
    3eb0:	2200      	movs	r2, #0
    3eb2:	f853 4f04 	ldr.w	r4, [r3, #4]!
    3eb6:	4322      	orrs	r2, r4
    3eb8:	4563      	cmp	r3, ip
    3eba:	d1fa      	bne.n	3eb2 <blst_p2_affine_compress+0xc>
    3ebc:	1e53      	subs	r3, r2, #1
    3ebe:	4393      	bics	r3, r2
    3ec0:	d50a      	bpl.n	3ed8 <blst_p2_affine_compress+0x32>
    3ec2:	1e6b      	subs	r3, r5, #1
    3ec4:	f105 015f 	add.w	r1, r5, #95	; 0x5f
    3ec8:	2200      	movs	r2, #0
    3eca:	f803 2f01 	strb.w	r2, [r3, #1]!
    3ece:	428b      	cmp	r3, r1
    3ed0:	d1fb      	bne.n	3eca <blst_p2_affine_compress+0x24>
    3ed2:	23c0      	movs	r3, #192	; 0xc0
    3ed4:	702b      	strb	r3, [r5, #0]
    3ed6:	bd38      	pop	{r3, r4, r5, pc}
    3ed8:	4628      	mov	r0, r5
    3eda:	f7fd fbdb 	bl	1694 <POINTonE2_affine_Compress_BE>
    3ede:	0103      	lsls	r3, r0, #4
    3ee0:	f003 0320 	and.w	r3, r3, #32
    3ee4:	782a      	ldrb	r2, [r5, #0]
    3ee6:	4313      	orrs	r3, r2
    3ee8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3eec:	702b      	strb	r3, [r5, #0]
    3eee:	e7f2      	b.n	3ed6 <blst_p2_affine_compress+0x30>

00003ef0 <blst_p2_is_inf>:
    3ef0:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
    3ef4:	f500 718e 	add.w	r1, r0, #284	; 0x11c
    3ef8:	2000      	movs	r0, #0
    3efa:	f853 2f04 	ldr.w	r2, [r3, #4]!
    3efe:	4310      	orrs	r0, r2
    3f00:	428b      	cmp	r3, r1
    3f02:	d1fa      	bne.n	3efa <blst_p2_is_inf+0xa>
    3f04:	1e43      	subs	r3, r0, #1
    3f06:	ea23 0000 	bic.w	r0, r3, r0
    3f0a:	0fc0      	lsrs	r0, r0, #31
    3f0c:	4770      	bx	lr

00003f0e <blst_p2_generator>:
    3f0e:	4801      	ldr	r0, [pc, #4]	; (3f14 <blst_p2_generator+0x6>)
    3f10:	4770      	bx	lr
    3f12:	bf00      	nop
    3f14:	00016788 	.word	0x00016788

00003f18 <blst_p2_affine_is_inf>:
    3f18:	1f03      	subs	r3, r0, #4
    3f1a:	f100 01bc 	add.w	r1, r0, #188	; 0xbc
    3f1e:	2000      	movs	r0, #0
    3f20:	f853 2f04 	ldr.w	r2, [r3, #4]!
    3f24:	4310      	orrs	r0, r2
    3f26:	428b      	cmp	r3, r1
    3f28:	d1fa      	bne.n	3f20 <blst_p2_affine_is_inf+0x8>
    3f2a:	1e43      	subs	r3, r0, #1
    3f2c:	ea23 0000 	bic.w	r0, r3, r0
    3f30:	0fc0      	lsrs	r0, r0, #31
    3f32:	4770      	bx	lr

00003f34 <blst_p2_affine_generator>:
    3f34:	4800      	ldr	r0, [pc, #0]	; (3f38 <blst_p2_affine_generator+0x4>)
    3f36:	4770      	bx	lr
    3f38:	00016788 	.word	0x00016788

00003f3c <blst_fp12_conjugate>:
    3f3c:	b508      	push	{r3, lr}
    3f3e:	f7fd feb1 	bl	1ca4 <conjugate_fp12>
    3f42:	bd08      	pop	{r3, pc}

00003f44 <blst_fp12_is_equal>:
    3f44:	b410      	push	{r4}
    3f46:	1f02      	subs	r2, r0, #4
    3f48:	3904      	subs	r1, #4
    3f4a:	f500 7c0f 	add.w	ip, r0, #572	; 0x23c
    3f4e:	2000      	movs	r0, #0
    3f50:	f852 3f04 	ldr.w	r3, [r2, #4]!
    3f54:	f851 4f04 	ldr.w	r4, [r1, #4]!
    3f58:	4063      	eors	r3, r4
    3f5a:	4318      	orrs	r0, r3
    3f5c:	4562      	cmp	r2, ip
    3f5e:	d1f7      	bne.n	3f50 <blst_fp12_is_equal+0xc>
    3f60:	1e43      	subs	r3, r0, #1
    3f62:	ea23 0000 	bic.w	r0, r3, r0
    3f66:	0fc0      	lsrs	r0, r0, #31
    3f68:	bc10      	pop	{r4}
    3f6a:	4770      	bx	lr

00003f6c <blst_fp12_is_one>:
    3f6c:	b510      	push	{r4, lr}
    3f6e:	f1a0 0c04 	sub.w	ip, r0, #4
    3f72:	4b12      	ldr	r3, [pc, #72]	; (3fbc <blst_fp12_is_one+0x50>)
    3f74:	f103 0290 	add.w	r2, r3, #144	; 0x90
    3f78:	f103 0ef0 	add.w	lr, r3, #240	; 0xf0
    3f7c:	2100      	movs	r1, #0
    3f7e:	f852 3b04 	ldr.w	r3, [r2], #4
    3f82:	f85c 4f04 	ldr.w	r4, [ip, #4]!
    3f86:	4063      	eors	r3, r4
    3f88:	4319      	orrs	r1, r3
    3f8a:	4572      	cmp	r2, lr
    3f8c:	d1f7      	bne.n	3f7e <blst_fp12_is_one+0x12>
    3f8e:	f101 3cff 	add.w	ip, r1, #4294967295
    3f92:	ea2c 0101 	bic.w	r1, ip, r1
    3f96:	ea4f 7cd1 	mov.w	ip, r1, lsr #31
    3f9a:	f100 035c 	add.w	r3, r0, #92	; 0x5c
    3f9e:	f500 740f 	add.w	r4, r0, #572	; 0x23c
    3fa2:	2200      	movs	r2, #0
    3fa4:	f853 1f04 	ldr.w	r1, [r3, #4]!
    3fa8:	430a      	orrs	r2, r1
    3faa:	42a3      	cmp	r3, r4
    3fac:	d1fa      	bne.n	3fa4 <blst_fp12_is_one+0x38>
    3fae:	1e50      	subs	r0, r2, #1
    3fb0:	ea20 0002 	bic.w	r0, r0, r2
    3fb4:	ea0c 70d0 	and.w	r0, ip, r0, lsr #31
    3fb8:	bd10      	pop	{r4, pc}
    3fba:	bf00      	nop
    3fbc:	00015a08 	.word	0x00015a08

00003fc0 <blst_fp12_one>:
    3fc0:	4800      	ldr	r0, [pc, #0]	; (3fc4 <blst_fp12_one+0x4>)
    3fc2:	4770      	bx	lr
    3fc4:	00015a98 	.word	0x00015a98

00003fc8 <blst_pairing_sizeof>:
    3fc8:	f44f 6047 	mov.w	r0, #3184	; 0xc70
    3fcc:	4770      	bx	lr

00003fce <blst_pairing_init>:
    3fce:	2900      	cmp	r1, #0
    3fd0:	bf14      	ite	ne
    3fd2:	2140      	movne	r1, #64	; 0x40
    3fd4:	2100      	moveq	r1, #0
    3fd6:	6001      	str	r1, [r0, #0]
    3fd8:	2100      	movs	r1, #0
    3fda:	6041      	str	r1, [r0, #4]
    3fdc:	f500 6147 	add.w	r1, r0, #3184	; 0xc70
    3fe0:	4291      	cmp	r1, r2
    3fe2:	bf08      	it	eq
    3fe4:	222a      	moveq	r2, #42	; 0x2a
    3fe6:	6082      	str	r2, [r0, #8]
    3fe8:	60c3      	str	r3, [r0, #12]
    3fea:	4770      	bx	lr

00003fec <blst_pairing_get_dst>:
    3fec:	4603      	mov	r3, r0
    3fee:	6880      	ldr	r0, [r0, #8]
    3ff0:	282a      	cmp	r0, #42	; 0x2a
    3ff2:	bf08      	it	eq
    3ff4:	f503 6047 	addeq.w	r0, r3, #3184	; 0xc70
    3ff8:	4770      	bx	lr

00003ffa <mul_mont_sparse_256>:
    3ffa:	b510      	push	{r4, lr}
    3ffc:	b082      	sub	sp, #8
    3ffe:	2408      	movs	r4, #8
    4000:	9401      	str	r4, [sp, #4]
    4002:	9c04      	ldr	r4, [sp, #16]
    4004:	9400      	str	r4, [sp, #0]
    4006:	f7fc fc91 	bl	92c <mul_mont_n>
    400a:	b002      	add	sp, #8
    400c:	bd10      	pop	{r4, pc}

0000400e <sqr_mont_sparse_256>:
    400e:	b510      	push	{r4, lr}
    4010:	b082      	sub	sp, #8
    4012:	2408      	movs	r4, #8
    4014:	9401      	str	r4, [sp, #4]
    4016:	9300      	str	r3, [sp, #0]
    4018:	4613      	mov	r3, r2
    401a:	460a      	mov	r2, r1
    401c:	f7fc fc86 	bl	92c <mul_mont_n>
    4020:	b002      	add	sp, #8
    4022:	bd10      	pop	{r4, pc}

00004024 <mul_mont_384>:
    4024:	b510      	push	{r4, lr}
    4026:	b082      	sub	sp, #8
    4028:	240c      	movs	r4, #12
    402a:	9401      	str	r4, [sp, #4]
    402c:	9c04      	ldr	r4, [sp, #16]
    402e:	9400      	str	r4, [sp, #0]
    4030:	f7fc fc7c 	bl	92c <mul_mont_n>
    4034:	b002      	add	sp, #8
    4036:	bd10      	pop	{r4, pc}

00004038 <sqr_mont_384>:
    4038:	b510      	push	{r4, lr}
    403a:	b082      	sub	sp, #8
    403c:	240c      	movs	r4, #12
    403e:	9401      	str	r4, [sp, #4]
    4040:	9300      	str	r3, [sp, #0]
    4042:	4613      	mov	r3, r2
    4044:	460a      	mov	r2, r1
    4046:	f7fc fc71 	bl	92c <mul_mont_n>
    404a:	b002      	add	sp, #8
    404c:	bd10      	pop	{r4, pc}

0000404e <add_mod_256>:
    404e:	b510      	push	{r4, lr}
    4050:	b082      	sub	sp, #8
    4052:	2408      	movs	r4, #8
    4054:	9400      	str	r4, [sp, #0]
    4056:	f7fc fe11 	bl	c7c <add_mod_n>
    405a:	b002      	add	sp, #8
    405c:	bd10      	pop	{r4, pc}

0000405e <add_mod_384>:
    405e:	b510      	push	{r4, lr}
    4060:	b082      	sub	sp, #8
    4062:	240c      	movs	r4, #12
    4064:	9400      	str	r4, [sp, #0]
    4066:	f7fc fe09 	bl	c7c <add_mod_n>
    406a:	b002      	add	sp, #8
    406c:	bd10      	pop	{r4, pc}

0000406e <sub_mod_256>:
    406e:	b510      	push	{r4, lr}
    4070:	b082      	sub	sp, #8
    4072:	2408      	movs	r4, #8
    4074:	9400      	str	r4, [sp, #0]
    4076:	f7fc faab 	bl	5d0 <sub_mod_n>
    407a:	b002      	add	sp, #8
    407c:	bd10      	pop	{r4, pc}

0000407e <sub_mod_384>:
    407e:	b510      	push	{r4, lr}
    4080:	b082      	sub	sp, #8
    4082:	240c      	movs	r4, #12
    4084:	9400      	str	r4, [sp, #0]
    4086:	f7fc faa3 	bl	5d0 <sub_mod_n>
    408a:	b002      	add	sp, #8
    408c:	bd10      	pop	{r4, pc}

0000408e <mul_by_3_mod_256>:
    408e:	b508      	push	{r3, lr}
    4090:	2308      	movs	r3, #8
    4092:	f7fc fe7b 	bl	d8c <mul_by_3_mod_n>
    4096:	bd08      	pop	{r3, pc}

00004098 <mul_by_3_mod_384>:
    4098:	b508      	push	{r3, lr}
    409a:	230c      	movs	r3, #12
    409c:	f7fc fe76 	bl	d8c <mul_by_3_mod_n>
    40a0:	bd08      	pop	{r3, pc}

000040a2 <lshift_mod_256>:
    40a2:	b510      	push	{r4, lr}
    40a4:	b082      	sub	sp, #8
    40a6:	2408      	movs	r4, #8
    40a8:	9400      	str	r4, [sp, #0]
    40aa:	f7fc ff0f 	bl	ecc <lshift_mod_n>
    40ae:	b002      	add	sp, #8
    40b0:	bd10      	pop	{r4, pc}

000040b2 <lshift_mod_384>:
    40b2:	b510      	push	{r4, lr}
    40b4:	b082      	sub	sp, #8
    40b6:	240c      	movs	r4, #12
    40b8:	9400      	str	r4, [sp, #0]
    40ba:	f7fc ff07 	bl	ecc <lshift_mod_n>
    40be:	b002      	add	sp, #8
    40c0:	bd10      	pop	{r4, pc}

000040c2 <cneg_mod_256>:
    40c2:	b510      	push	{r4, lr}
    40c4:	b082      	sub	sp, #8
    40c6:	2408      	movs	r4, #8
    40c8:	9400      	str	r4, [sp, #0]
    40ca:	f7fd fc6b 	bl	19a4 <cneg_mod_n>
    40ce:	b002      	add	sp, #8
    40d0:	bd10      	pop	{r4, pc}

000040d2 <cneg_mod_384>:
    40d2:	b510      	push	{r4, lr}
    40d4:	b082      	sub	sp, #8
    40d6:	240c      	movs	r4, #12
    40d8:	9400      	str	r4, [sp, #0]
    40da:	f7fd fc63 	bl	19a4 <cneg_mod_n>
    40de:	b002      	add	sp, #8
    40e0:	bd10      	pop	{r4, pc}

000040e2 <check_mod_256>:
    40e2:	b508      	push	{r3, lr}
    40e4:	2208      	movs	r2, #8
    40e6:	f7fc faac 	bl	642 <check_mod_n>
    40ea:	bd08      	pop	{r3, pc}

000040ec <from_mont_256>:
    40ec:	b510      	push	{r4, lr}
    40ee:	b082      	sub	sp, #8
    40f0:	2408      	movs	r4, #8
    40f2:	9400      	str	r4, [sp, #0]
    40f4:	f7fc ff4c 	bl	f90 <from_mont_n>
    40f8:	b002      	add	sp, #8
    40fa:	bd10      	pop	{r4, pc}

000040fc <from_mont_384>:
    40fc:	b510      	push	{r4, lr}
    40fe:	b082      	sub	sp, #8
    4100:	240c      	movs	r4, #12
    4102:	9400      	str	r4, [sp, #0]
    4104:	f7fc ff44 	bl	f90 <from_mont_n>
    4108:	b002      	add	sp, #8
    410a:	bd10      	pop	{r4, pc}

0000410c <redc_mont_256>:
    410c:	b510      	push	{r4, lr}
    410e:	b082      	sub	sp, #8
    4110:	2408      	movs	r4, #8
    4112:	9400      	str	r4, [sp, #0]
    4114:	f7fc ffbb 	bl	108e <redc_mont_n>
    4118:	b002      	add	sp, #8
    411a:	bd10      	pop	{r4, pc}

0000411c <redc_mont_384>:
    411c:	b510      	push	{r4, lr}
    411e:	b082      	sub	sp, #8
    4120:	240c      	movs	r4, #12
    4122:	9400      	str	r4, [sp, #0]
    4124:	f7fc ffb3 	bl	108e <redc_mont_n>
    4128:	b002      	add	sp, #8
    412a:	bd10      	pop	{r4, pc}

0000412c <rshift_mod_256>:
    412c:	b510      	push	{r4, lr}
    412e:	b082      	sub	sp, #8
    4130:	2408      	movs	r4, #8
    4132:	9400      	str	r4, [sp, #0]
    4134:	f7fc fab4 	bl	6a0 <rshift_mod_n>
    4138:	b002      	add	sp, #8
    413a:	bd10      	pop	{r4, pc}

0000413c <rshift_mod_384>:
    413c:	b510      	push	{r4, lr}
    413e:	b082      	sub	sp, #8
    4140:	240c      	movs	r4, #12
    4142:	9400      	str	r4, [sp, #0]
    4144:	f7fc faac 	bl	6a0 <rshift_mod_n>
    4148:	b002      	add	sp, #8
    414a:	bd10      	pop	{r4, pc}

0000414c <div_by_2_mod_384>:
    414c:	b500      	push	{lr}
    414e:	b083      	sub	sp, #12
    4150:	4613      	mov	r3, r2
    4152:	220c      	movs	r2, #12
    4154:	9200      	str	r2, [sp, #0]
    4156:	2201      	movs	r2, #1
    4158:	f7fc faa2 	bl	6a0 <rshift_mod_n>
    415c:	b003      	add	sp, #12
    415e:	f85d fb04 	ldr.w	pc, [sp], #4

00004162 <eucl_inverse_mod_256>:
    4162:	b510      	push	{r4, lr}
    4164:	b082      	sub	sp, #8
    4166:	2408      	movs	r4, #8
    4168:	9400      	str	r4, [sp, #0]
    416a:	f7fe fbff 	bl	296c <eucl_inverse_mod_n>
    416e:	b002      	add	sp, #8
    4170:	bd10      	pop	{r4, pc}

00004172 <sgn0_pty_mod_384>:
    4172:	b508      	push	{r3, lr}
    4174:	220c      	movs	r2, #12
    4176:	f7fd f820 	bl	11ba <sgn0_pty_mod_n>
    417a:	bd08      	pop	{r3, pc}

0000417c <sgn0_pty_mont_384>:
    417c:	b530      	push	{r4, r5, lr}
    417e:	b08f      	sub	sp, #60	; 0x3c
    4180:	460c      	mov	r4, r1
    4182:	4613      	mov	r3, r2
    4184:	250c      	movs	r5, #12
    4186:	9500      	str	r5, [sp, #0]
    4188:	460a      	mov	r2, r1
    418a:	4601      	mov	r1, r0
    418c:	a802      	add	r0, sp, #8
    418e:	f7fc feff 	bl	f90 <from_mont_n>
    4192:	462a      	mov	r2, r5
    4194:	4621      	mov	r1, r4
    4196:	a802      	add	r0, sp, #8
    4198:	f7fd f80f 	bl	11ba <sgn0_pty_mod_n>
    419c:	b00f      	add	sp, #60	; 0x3c
    419e:	bd30      	pop	{r4, r5, pc}

000041a0 <sgn0_pty_mod_384x>:
    41a0:	b570      	push	{r4, r5, r6, lr}
    41a2:	4605      	mov	r5, r0
    41a4:	460e      	mov	r6, r1
    41a6:	220c      	movs	r2, #12
    41a8:	f7fd f807 	bl	11ba <sgn0_pty_mod_n>
    41ac:	4604      	mov	r4, r0
    41ae:	220c      	movs	r2, #12
    41b0:	4631      	mov	r1, r6
    41b2:	f105 0030 	add.w	r0, r5, #48	; 0x30
    41b6:	f7fd f800 	bl	11ba <sgn0_pty_mod_n>
    41ba:	f105 032c 	add.w	r3, r5, #44	; 0x2c
    41be:	f105 0c5c 	add.w	ip, r5, #92	; 0x5c
    41c2:	2200      	movs	r2, #0
    41c4:	f853 1f04 	ldr.w	r1, [r3, #4]!
    41c8:	430a      	orrs	r2, r1
    41ca:	4563      	cmp	r3, ip
    41cc:	d1fa      	bne.n	41c4 <sgn0_pty_mod_384x+0x24>
    41ce:	f102 3eff 	add.w	lr, r2, #4294967295
    41d2:	ea2e 0202 	bic.w	r2, lr, r2
    41d6:	ea4f 7ed2 	mov.w	lr, r2, lsr #31
    41da:	ea04 72e2 	and.w	r2, r4, r2, asr #31
    41de:	f10e 3eff 	add.w	lr, lr, #4294967295
    41e2:	ea0e 0e00 	and.w	lr, lr, r0
    41e6:	ea4e 0e02 	orr.w	lr, lr, r2
    41ea:	1f2b      	subs	r3, r5, #4
    41ec:	f105 0c2c 	add.w	ip, r5, #44	; 0x2c
    41f0:	2200      	movs	r2, #0
    41f2:	f853 1f04 	ldr.w	r1, [r3, #4]!
    41f6:	430a      	orrs	r2, r1
    41f8:	4563      	cmp	r3, ip
    41fa:	d1fa      	bne.n	41f2 <sgn0_pty_mod_384x+0x52>
    41fc:	1e53      	subs	r3, r2, #1
    41fe:	ea23 0202 	bic.w	r2, r3, r2
    4202:	0fd3      	lsrs	r3, r2, #31
    4204:	ea00 72e2 	and.w	r2, r0, r2, asr #31
    4208:	1e58      	subs	r0, r3, #1
    420a:	4004      	ands	r4, r0
    420c:	4314      	orrs	r4, r2
    420e:	f004 0401 	and.w	r4, r4, #1
    4212:	f00e 0002 	and.w	r0, lr, #2
    4216:	4320      	orrs	r0, r4
    4218:	bd70      	pop	{r4, r5, r6, pc}

0000421a <sgn0_pty_mont_384x>:
    421a:	b5f0      	push	{r4, r5, r6, r7, lr}
    421c:	b09b      	sub	sp, #108	; 0x6c
    421e:	4605      	mov	r5, r0
    4220:	460c      	mov	r4, r1
    4222:	4617      	mov	r7, r2
    4224:	260c      	movs	r6, #12
    4226:	9600      	str	r6, [sp, #0]
    4228:	4613      	mov	r3, r2
    422a:	460a      	mov	r2, r1
    422c:	4601      	mov	r1, r0
    422e:	a802      	add	r0, sp, #8
    4230:	f7fc feae 	bl	f90 <from_mont_n>
    4234:	9600      	str	r6, [sp, #0]
    4236:	463b      	mov	r3, r7
    4238:	4622      	mov	r2, r4
    423a:	f105 0130 	add.w	r1, r5, #48	; 0x30
    423e:	a80e      	add	r0, sp, #56	; 0x38
    4240:	f7fc fea6 	bl	f90 <from_mont_n>
    4244:	4632      	mov	r2, r6
    4246:	4621      	mov	r1, r4
    4248:	a802      	add	r0, sp, #8
    424a:	f7fc ffb6 	bl	11ba <sgn0_pty_mod_n>
    424e:	4605      	mov	r5, r0
    4250:	4632      	mov	r2, r6
    4252:	4621      	mov	r1, r4
    4254:	a80e      	add	r0, sp, #56	; 0x38
    4256:	f7fc ffb0 	bl	11ba <sgn0_pty_mod_n>
    425a:	aa0d      	add	r2, sp, #52	; 0x34
    425c:	ab02      	add	r3, sp, #8
    425e:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
    4262:	2100      	movs	r1, #0
    4264:	f852 4f04 	ldr.w	r4, [r2, #4]!
    4268:	4321      	orrs	r1, r4
    426a:	4562      	cmp	r2, ip
    426c:	d1fa      	bne.n	4264 <sgn0_pty_mont_384x+0x4a>
    426e:	1e4c      	subs	r4, r1, #1
    4270:	ea24 0101 	bic.w	r1, r4, r1
    4274:	0fcc      	lsrs	r4, r1, #31
    4276:	ea05 71e1 	and.w	r1, r5, r1, asr #31
    427a:	3c01      	subs	r4, #1
    427c:	4004      	ands	r4, r0
    427e:	430c      	orrs	r4, r1
    4280:	f103 0c30 	add.w	ip, r3, #48	; 0x30
    4284:	2200      	movs	r2, #0
    4286:	f853 1b04 	ldr.w	r1, [r3], #4
    428a:	430a      	orrs	r2, r1
    428c:	4563      	cmp	r3, ip
    428e:	d1fa      	bne.n	4286 <sgn0_pty_mont_384x+0x6c>
    4290:	1e53      	subs	r3, r2, #1
    4292:	ea23 0202 	bic.w	r2, r3, r2
    4296:	0fd3      	lsrs	r3, r2, #31
    4298:	ea00 70e2 	and.w	r0, r0, r2, asr #31
    429c:	3b01      	subs	r3, #1
    429e:	402b      	ands	r3, r5
    42a0:	4303      	orrs	r3, r0
    42a2:	f003 0301 	and.w	r3, r3, #1
    42a6:	f004 0002 	and.w	r0, r4, #2
    42aa:	4318      	orrs	r0, r3
    42ac:	b01b      	add	sp, #108	; 0x6c
    42ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000042b0 <mul_mont_384x>:
    42b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    42b4:	b0a7      	sub	sp, #156	; 0x9c
    42b6:	4605      	mov	r5, r0
    42b8:	4688      	mov	r8, r1
    42ba:	4617      	mov	r7, r2
    42bc:	461c      	mov	r4, r3
    42be:	f8dd 90c0 	ldr.w	r9, [sp, #192]	; 0xc0
    42c2:	f101 0a30 	add.w	sl, r1, #48	; 0x30
    42c6:	260c      	movs	r6, #12
    42c8:	9600      	str	r6, [sp, #0]
    42ca:	4652      	mov	r2, sl
    42cc:	a81a      	add	r0, sp, #104	; 0x68
    42ce:	f7fc fcd5 	bl	c7c <add_mod_n>
    42d2:	f107 0b30 	add.w	fp, r7, #48	; 0x30
    42d6:	9600      	str	r6, [sp, #0]
    42d8:	4623      	mov	r3, r4
    42da:	465a      	mov	r2, fp
    42dc:	4639      	mov	r1, r7
    42de:	a80e      	add	r0, sp, #56	; 0x38
    42e0:	f7fc fccc 	bl	c7c <add_mod_n>
    42e4:	9601      	str	r6, [sp, #4]
    42e6:	f8cd 9000 	str.w	r9, [sp]
    42ea:	4623      	mov	r3, r4
    42ec:	aa1a      	add	r2, sp, #104	; 0x68
    42ee:	a90e      	add	r1, sp, #56	; 0x38
    42f0:	4608      	mov	r0, r1
    42f2:	f7fc fb1b 	bl	92c <mul_mont_n>
    42f6:	9601      	str	r6, [sp, #4]
    42f8:	f8cd 9000 	str.w	r9, [sp]
    42fc:	4623      	mov	r3, r4
    42fe:	463a      	mov	r2, r7
    4300:	4641      	mov	r1, r8
    4302:	a81a      	add	r0, sp, #104	; 0x68
    4304:	f7fc fb12 	bl	92c <mul_mont_n>
    4308:	9601      	str	r6, [sp, #4]
    430a:	f8cd 9000 	str.w	r9, [sp]
    430e:	4623      	mov	r3, r4
    4310:	465a      	mov	r2, fp
    4312:	4651      	mov	r1, sl
    4314:	a802      	add	r0, sp, #8
    4316:	f7fc fb09 	bl	92c <mul_mont_n>
    431a:	9600      	str	r6, [sp, #0]
    431c:	4623      	mov	r3, r4
    431e:	aa02      	add	r2, sp, #8
    4320:	a91a      	add	r1, sp, #104	; 0x68
    4322:	4628      	mov	r0, r5
    4324:	f7fc f954 	bl	5d0 <sub_mod_n>
    4328:	3530      	adds	r5, #48	; 0x30
    432a:	9600      	str	r6, [sp, #0]
    432c:	4623      	mov	r3, r4
    432e:	aa1a      	add	r2, sp, #104	; 0x68
    4330:	a90e      	add	r1, sp, #56	; 0x38
    4332:	4628      	mov	r0, r5
    4334:	f7fc f94c 	bl	5d0 <sub_mod_n>
    4338:	9600      	str	r6, [sp, #0]
    433a:	4623      	mov	r3, r4
    433c:	aa02      	add	r2, sp, #8
    433e:	4629      	mov	r1, r5
    4340:	4628      	mov	r0, r5
    4342:	f7fc f945 	bl	5d0 <sub_mod_n>
    4346:	b027      	add	sp, #156	; 0x9c
    4348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000434c <psi>:
    434c:	b5f0      	push	{r4, r5, r6, r7, lr}
    434e:	b083      	sub	sp, #12
    4350:	4604      	mov	r4, r0
    4352:	1f0b      	subs	r3, r1, #4
    4354:	1f02      	subs	r2, r0, #4
    4356:	f501 7c8e 	add.w	ip, r1, #284	; 0x11c
    435a:	f853 1f04 	ldr.w	r1, [r3, #4]!
    435e:	f842 1f04 	str.w	r1, [r2, #4]!
    4362:	4563      	cmp	r3, ip
    4364:	d1f9      	bne.n	435a <psi+0xe>
    4366:	f104 0030 	add.w	r0, r4, #48	; 0x30
    436a:	4d16      	ldr	r5, [pc, #88]	; (43c4 <psi+0x78>)
    436c:	260c      	movs	r6, #12
    436e:	9600      	str	r6, [sp, #0]
    4370:	462b      	mov	r3, r5
    4372:	2201      	movs	r2, #1
    4374:	4601      	mov	r1, r0
    4376:	f7fd fb15 	bl	19a4 <cneg_mod_n>
    437a:	4f13      	ldr	r7, [pc, #76]	; (43c8 <psi+0x7c>)
    437c:	9700      	str	r7, [sp, #0]
    437e:	462b      	mov	r3, r5
    4380:	f505 626a 	add.w	r2, r5, #3744	; 0xea0
    4384:	4621      	mov	r1, r4
    4386:	4620      	mov	r0, r4
    4388:	f7ff ff92 	bl	42b0 <mul_mont_384x>
    438c:	f104 0090 	add.w	r0, r4, #144	; 0x90
    4390:	9600      	str	r6, [sp, #0]
    4392:	462b      	mov	r3, r5
    4394:	2201      	movs	r2, #1
    4396:	4601      	mov	r1, r0
    4398:	f7fd fb04 	bl	19a4 <cneg_mod_n>
    439c:	f104 0060 	add.w	r0, r4, #96	; 0x60
    43a0:	9700      	str	r7, [sp, #0]
    43a2:	462b      	mov	r3, r5
    43a4:	f505 6270 	add.w	r2, r5, #3840	; 0xf00
    43a8:	4601      	mov	r1, r0
    43aa:	f7ff ff81 	bl	42b0 <mul_mont_384x>
    43ae:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
    43b2:	9600      	str	r6, [sp, #0]
    43b4:	462b      	mov	r3, r5
    43b6:	2201      	movs	r2, #1
    43b8:	4601      	mov	r1, r0
    43ba:	f7fd faf3 	bl	19a4 <cneg_mod_n>
    43be:	b003      	add	sp, #12
    43c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    43c2:	bf00      	nop
    43c4:	00015a08 	.word	0x00015a08
    43c8:	fffcfffd 	.word	0xfffcfffd

000043cc <map_fp2_times_Zz>:
    43cc:	b303      	cbz	r3, 4410 <map_fp2_times_Zz+0x44>
    43ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    43d2:	b083      	sub	sp, #12
    43d4:	1e5f      	subs	r7, r3, #1
    43d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    43da:	015c      	lsls	r4, r3, #5
    43dc:	3c60      	subs	r4, #96	; 0x60
    43de:	1906      	adds	r6, r0, r4
    43e0:	190d      	adds	r5, r1, r4
    43e2:	4414      	add	r4, r2
    43e4:	f8df 902c 	ldr.w	r9, [pc, #44]	; 4414 <map_fp2_times_Zz+0x48>
    43e8:	f8df 802c 	ldr.w	r8, [pc, #44]	; 4418 <map_fp2_times_Zz+0x4c>
    43ec:	f8cd 8000 	str.w	r8, [sp]
    43f0:	464b      	mov	r3, r9
    43f2:	4622      	mov	r2, r4
    43f4:	4629      	mov	r1, r5
    43f6:	4630      	mov	r0, r6
    43f8:	f7ff ff5a 	bl	42b0 <mul_mont_384x>
    43fc:	3f01      	subs	r7, #1
    43fe:	3e60      	subs	r6, #96	; 0x60
    4400:	3d60      	subs	r5, #96	; 0x60
    4402:	3c60      	subs	r4, #96	; 0x60
    4404:	f1b7 3fff 	cmp.w	r7, #4294967295
    4408:	d1f0      	bne.n	43ec <map_fp2_times_Zz+0x20>
    440a:	b003      	add	sp, #12
    440c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4410:	4770      	bx	lr
    4412:	bf00      	nop
    4414:	00015a08 	.word	0x00015a08
    4418:	fffcfffd 	.word	0xfffcfffd

0000441c <frobenius_map_fp6>:
    441c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4420:	b083      	sub	sp, #12
    4422:	4604      	mov	r4, r0
    4424:	460d      	mov	r5, r1
    4426:	4616      	mov	r6, r2
    4428:	1f0b      	subs	r3, r1, #4
    442a:	1f02      	subs	r2, r0, #4
    442c:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    4430:	f853 1f04 	ldr.w	r1, [r3, #4]!
    4434:	f842 1f04 	str.w	r1, [r2, #4]!
    4438:	4283      	cmp	r3, r0
    443a:	d1f9      	bne.n	4430 <frobenius_map_fp6+0x14>
    443c:	f006 0701 	and.w	r7, r6, #1
    4440:	230c      	movs	r3, #12
    4442:	9300      	str	r3, [sp, #0]
    4444:	4b31      	ldr	r3, [pc, #196]	; (450c <frobenius_map_fp6+0xf0>)
    4446:	463a      	mov	r2, r7
    4448:	f105 0130 	add.w	r1, r5, #48	; 0x30
    444c:	f104 0030 	add.w	r0, r4, #48	; 0x30
    4450:	f7fd faa8 	bl	19a4 <cneg_mod_n>
    4454:	f104 0860 	add.w	r8, r4, #96	; 0x60
    4458:	f105 035c 	add.w	r3, r5, #92	; 0x5c
    445c:	f104 025c 	add.w	r2, r4, #92	; 0x5c
    4460:	f105 008c 	add.w	r0, r5, #140	; 0x8c
    4464:	f853 1f04 	ldr.w	r1, [r3, #4]!
    4468:	f842 1f04 	str.w	r1, [r2, #4]!
    446c:	4283      	cmp	r3, r0
    446e:	d1f9      	bne.n	4464 <frobenius_map_fp6+0x48>
    4470:	230c      	movs	r3, #12
    4472:	9300      	str	r3, [sp, #0]
    4474:	4b25      	ldr	r3, [pc, #148]	; (450c <frobenius_map_fp6+0xf0>)
    4476:	463a      	mov	r2, r7
    4478:	f105 0190 	add.w	r1, r5, #144	; 0x90
    447c:	f104 0090 	add.w	r0, r4, #144	; 0x90
    4480:	f7fd fa90 	bl	19a4 <cneg_mod_n>
    4484:	f105 03bc 	add.w	r3, r5, #188	; 0xbc
    4488:	f104 0cbc 	add.w	ip, r4, #188	; 0xbc
    448c:	f105 01ec 	add.w	r1, r5, #236	; 0xec
    4490:	f853 2f04 	ldr.w	r2, [r3, #4]!
    4494:	f84c 2f04 	str.w	r2, [ip, #4]!
    4498:	428b      	cmp	r3, r1
    449a:	d1f9      	bne.n	4490 <frobenius_map_fp6+0x74>
    449c:	f104 0af0 	add.w	sl, r4, #240	; 0xf0
    44a0:	f8df 9068 	ldr.w	r9, [pc, #104]	; 450c <frobenius_map_fp6+0xf0>
    44a4:	f04f 0b0c 	mov.w	fp, #12
    44a8:	f8cd b000 	str.w	fp, [sp]
    44ac:	464b      	mov	r3, r9
    44ae:	463a      	mov	r2, r7
    44b0:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
    44b4:	4650      	mov	r0, sl
    44b6:	f7fd fa75 	bl	19a4 <cneg_mod_n>
    44ba:	3e01      	subs	r6, #1
    44bc:	f509 6276 	add.w	r2, r9, #3936	; 0xf60
    44c0:	0077      	lsls	r7, r6, #1
    44c2:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    44c6:	4d12      	ldr	r5, [pc, #72]	; (4510 <frobenius_map_fp6+0xf4>)
    44c8:	9500      	str	r5, [sp, #0]
    44ca:	464b      	mov	r3, r9
    44cc:	eb02 1241 	add.w	r2, r2, r1, lsl #5
    44d0:	4641      	mov	r1, r8
    44d2:	4640      	mov	r0, r8
    44d4:	f7ff feec 	bl	42b0 <mul_mont_384x>
    44d8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    44dc:	4437      	add	r7, r6
    44de:	4e0d      	ldr	r6, [pc, #52]	; (4514 <frobenius_map_fp6+0xf8>)
    44e0:	eb06 1607 	add.w	r6, r6, r7, lsl #4
    44e4:	f8cd b004 	str.w	fp, [sp, #4]
    44e8:	9500      	str	r5, [sp, #0]
    44ea:	464b      	mov	r3, r9
    44ec:	4632      	mov	r2, r6
    44ee:	4601      	mov	r1, r0
    44f0:	f7fc fa1c 	bl	92c <mul_mont_n>
    44f4:	f8cd b004 	str.w	fp, [sp, #4]
    44f8:	9500      	str	r5, [sp, #0]
    44fa:	464b      	mov	r3, r9
    44fc:	4632      	mov	r2, r6
    44fe:	4651      	mov	r1, sl
    4500:	4650      	mov	r0, sl
    4502:	f7fc fa13 	bl	92c <mul_mont_n>
    4506:	b003      	add	sp, #12
    4508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    450c:	00015a08 	.word	0x00015a08
    4510:	fffcfffd 	.word	0xfffcfffd
    4514:	00016a88 	.word	0x00016a88

00004518 <frobenius_map_fp12>:
    4518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    451c:	b082      	sub	sp, #8
    451e:	4605      	mov	r5, r0
    4520:	460e      	mov	r6, r1
    4522:	4614      	mov	r4, r2
    4524:	f7ff ff7a 	bl	441c <frobenius_map_fp6>
    4528:	f505 7790 	add.w	r7, r5, #288	; 0x120
    452c:	4622      	mov	r2, r4
    452e:	f506 7190 	add.w	r1, r6, #288	; 0x120
    4532:	4638      	mov	r0, r7
    4534:	f7ff ff72 	bl	441c <frobenius_map_fp6>
    4538:	3c01      	subs	r4, #1
    453a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    453e:	4b11      	ldr	r3, [pc, #68]	; (4584 <frobenius_map_fp12+0x6c>)
    4540:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    4544:	4e10      	ldr	r6, [pc, #64]	; (4588 <frobenius_map_fp12+0x70>)
    4546:	f8df 8044 	ldr.w	r8, [pc, #68]	; 458c <frobenius_map_fp12+0x74>
    454a:	f8cd 8000 	str.w	r8, [sp]
    454e:	4633      	mov	r3, r6
    4550:	4622      	mov	r2, r4
    4552:	4639      	mov	r1, r7
    4554:	4638      	mov	r0, r7
    4556:	f7ff feab 	bl	42b0 <mul_mont_384x>
    455a:	f505 70c0 	add.w	r0, r5, #384	; 0x180
    455e:	f8cd 8000 	str.w	r8, [sp]
    4562:	4633      	mov	r3, r6
    4564:	4622      	mov	r2, r4
    4566:	4601      	mov	r1, r0
    4568:	f7ff fea2 	bl	42b0 <mul_mont_384x>
    456c:	f505 70f0 	add.w	r0, r5, #480	; 0x1e0
    4570:	f8cd 8000 	str.w	r8, [sp]
    4574:	4633      	mov	r3, r6
    4576:	4622      	mov	r2, r4
    4578:	4601      	mov	r1, r0
    457a:	f7ff fe99 	bl	42b0 <mul_mont_384x>
    457e:	b002      	add	sp, #8
    4580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4584:	00016b18 	.word	0x00016b18
    4588:	00015a08 	.word	0x00015a08
    458c:	fffcfffd 	.word	0xfffcfffd

00004590 <blst_fp12_frobenius_map>:
    4590:	b508      	push	{r3, lr}
    4592:	f7ff ffc1 	bl	4518 <frobenius_map_fp12>
    4596:	bd08      	pop	{r3, pc}

00004598 <map_fp2>:
    4598:	b393      	cbz	r3, 4600 <map_fp2+0x68>
    459a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    459e:	b082      	sub	sp, #8
    45a0:	4604      	mov	r4, r0
    45a2:	4689      	mov	r9, r1
    45a4:	1e5e      	subs	r6, r3, #1
    45a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    45aa:	eb02 1243 	add.w	r2, r2, r3, lsl #5
    45ae:	f1a2 0560 	sub.w	r5, r2, #96	; 0x60
    45b2:	4f14      	ldr	r7, [pc, #80]	; (4604 <map_fp2+0x6c>)
    45b4:	f8df a050 	ldr.w	sl, [pc, #80]	; 4608 <map_fp2+0x70>
    45b8:	f04f 080c 	mov.w	r8, #12
    45bc:	f8cd a000 	str.w	sl, [sp]
    45c0:	463b      	mov	r3, r7
    45c2:	464a      	mov	r2, r9
    45c4:	4621      	mov	r1, r4
    45c6:	4620      	mov	r0, r4
    45c8:	f7ff fe72 	bl	42b0 <mul_mont_384x>
    45cc:	f8cd 8000 	str.w	r8, [sp]
    45d0:	463b      	mov	r3, r7
    45d2:	462a      	mov	r2, r5
    45d4:	4621      	mov	r1, r4
    45d6:	4620      	mov	r0, r4
    45d8:	f7fc fb50 	bl	c7c <add_mod_n>
    45dc:	f104 0030 	add.w	r0, r4, #48	; 0x30
    45e0:	f8cd 8000 	str.w	r8, [sp]
    45e4:	463b      	mov	r3, r7
    45e6:	f105 0230 	add.w	r2, r5, #48	; 0x30
    45ea:	4601      	mov	r1, r0
    45ec:	f7fc fb46 	bl	c7c <add_mod_n>
    45f0:	3e01      	subs	r6, #1
    45f2:	3d60      	subs	r5, #96	; 0x60
    45f4:	f1b6 3fff 	cmp.w	r6, #4294967295
    45f8:	d1e0      	bne.n	45bc <map_fp2+0x24>
    45fa:	b002      	add	sp, #8
    45fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4600:	4770      	bx	lr
    4602:	bf00      	nop
    4604:	00015a08 	.word	0x00015a08
    4608:	fffcfffd 	.word	0xfffcfffd

0000460c <mul_fp6>:
    460c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4610:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
    4614:	4683      	mov	fp, r0
    4616:	460f      	mov	r7, r1
    4618:	4616      	mov	r6, r2
    461a:	4cad      	ldr	r4, [pc, #692]	; (48d0 <mul_fp6+0x2c4>)
    461c:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 48d4 <mul_fp6+0x2c8>
    4620:	f8cd a000 	str.w	sl, [sp]
    4624:	4623      	mov	r3, r4
    4626:	a88e      	add	r0, sp, #568	; 0x238
    4628:	f7ff fe42 	bl	42b0 <mul_mont_384x>
    462c:	f107 0960 	add.w	r9, r7, #96	; 0x60
    4630:	f106 0860 	add.w	r8, r6, #96	; 0x60
    4634:	f8cd a000 	str.w	sl, [sp]
    4638:	4623      	mov	r3, r4
    463a:	4642      	mov	r2, r8
    463c:	4649      	mov	r1, r9
    463e:	a876      	add	r0, sp, #472	; 0x1d8
    4640:	f7ff fe36 	bl	42b0 <mul_mont_384x>
    4644:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
    4648:	f106 03c0 	add.w	r3, r6, #192	; 0xc0
    464c:	461a      	mov	r2, r3
    464e:	f8cd a000 	str.w	sl, [sp]
    4652:	4623      	mov	r3, r4
    4654:	9204      	str	r2, [sp, #16]
    4656:	9103      	str	r1, [sp, #12]
    4658:	a85e      	add	r0, sp, #376	; 0x178
    465a:	f7ff fe29 	bl	42b0 <mul_mont_384x>
    465e:	250c      	movs	r5, #12
    4660:	9500      	str	r5, [sp, #0]
    4662:	4623      	mov	r3, r4
    4664:	9a03      	ldr	r2, [sp, #12]
    4666:	4649      	mov	r1, r9
    4668:	a82e      	add	r0, sp, #184	; 0xb8
    466a:	f7fc fb07 	bl	c7c <add_mod_n>
    466e:	f107 0190 	add.w	r1, r7, #144	; 0x90
    4672:	9108      	str	r1, [sp, #32]
    4674:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
    4678:	9009      	str	r0, [sp, #36]	; 0x24
    467a:	9500      	str	r5, [sp, #0]
    467c:	4623      	mov	r3, r4
    467e:	4602      	mov	r2, r0
    4680:	a83a      	add	r0, sp, #232	; 0xe8
    4682:	f7fc fafb 	bl	c7c <add_mod_n>
    4686:	9500      	str	r5, [sp, #0]
    4688:	4623      	mov	r3, r4
    468a:	9a04      	ldr	r2, [sp, #16]
    468c:	4641      	mov	r1, r8
    468e:	a816      	add	r0, sp, #88	; 0x58
    4690:	f7fc faf4 	bl	c7c <add_mod_n>
    4694:	f106 0190 	add.w	r1, r6, #144	; 0x90
    4698:	9106      	str	r1, [sp, #24]
    469a:	f106 03f0 	add.w	r3, r6, #240	; 0xf0
    469e:	461a      	mov	r2, r3
    46a0:	9307      	str	r3, [sp, #28]
    46a2:	9500      	str	r5, [sp, #0]
    46a4:	4623      	mov	r3, r4
    46a6:	a822      	add	r0, sp, #136	; 0x88
    46a8:	f7fc fae8 	bl	c7c <add_mod_n>
    46ac:	f8cd a000 	str.w	sl, [sp]
    46b0:	4623      	mov	r3, r4
    46b2:	aa16      	add	r2, sp, #88	; 0x58
    46b4:	a92e      	add	r1, sp, #184	; 0xb8
    46b6:	a846      	add	r0, sp, #280	; 0x118
    46b8:	f7ff fdfa 	bl	42b0 <mul_mont_384x>
    46bc:	9500      	str	r5, [sp, #0]
    46be:	4623      	mov	r3, r4
    46c0:	aa76      	add	r2, sp, #472	; 0x1d8
    46c2:	a946      	add	r1, sp, #280	; 0x118
    46c4:	4608      	mov	r0, r1
    46c6:	f7fb ff83 	bl	5d0 <sub_mod_n>
    46ca:	9500      	str	r5, [sp, #0]
    46cc:	4623      	mov	r3, r4
    46ce:	aa82      	add	r2, sp, #520	; 0x208
    46d0:	a952      	add	r1, sp, #328	; 0x148
    46d2:	4608      	mov	r0, r1
    46d4:	f7fb ff7c 	bl	5d0 <sub_mod_n>
    46d8:	9500      	str	r5, [sp, #0]
    46da:	4623      	mov	r3, r4
    46dc:	aa5e      	add	r2, sp, #376	; 0x178
    46de:	a946      	add	r1, sp, #280	; 0x118
    46e0:	4608      	mov	r0, r1
    46e2:	f7fb ff75 	bl	5d0 <sub_mod_n>
    46e6:	9500      	str	r5, [sp, #0]
    46e8:	4623      	mov	r3, r4
    46ea:	aa6a      	add	r2, sp, #424	; 0x1a8
    46ec:	a952      	add	r1, sp, #328	; 0x148
    46ee:	4608      	mov	r0, r1
    46f0:	f7fb ff6e 	bl	5d0 <sub_mod_n>
    46f4:	9500      	str	r5, [sp, #0]
    46f6:	4623      	mov	r3, r4
    46f8:	aa52      	add	r2, sp, #328	; 0x148
    46fa:	a946      	add	r1, sp, #280	; 0x118
    46fc:	a80a      	add	r0, sp, #40	; 0x28
    46fe:	f7fc fabd 	bl	c7c <add_mod_n>
    4702:	9500      	str	r5, [sp, #0]
    4704:	4623      	mov	r3, r4
    4706:	aa52      	add	r2, sp, #328	; 0x148
    4708:	a946      	add	r1, sp, #280	; 0x118
    470a:	4608      	mov	r0, r1
    470c:	f7fb ff60 	bl	5d0 <sub_mod_n>
    4710:	ab0a      	add	r3, sp, #40	; 0x28
    4712:	aa51      	add	r2, sp, #324	; 0x144
    4714:	a816      	add	r0, sp, #88	; 0x58
    4716:	f853 1b04 	ldr.w	r1, [r3], #4
    471a:	f842 1f04 	str.w	r1, [r2, #4]!
    471e:	4298      	cmp	r0, r3
    4720:	d1f9      	bne.n	4716 <mul_fp6+0x10a>
    4722:	4c6b      	ldr	r4, [pc, #428]	; (48d0 <mul_fp6+0x2c4>)
    4724:	250c      	movs	r5, #12
    4726:	9500      	str	r5, [sp, #0]
    4728:	4623      	mov	r3, r4
    472a:	464a      	mov	r2, r9
    472c:	4639      	mov	r1, r7
    472e:	a82e      	add	r0, sp, #184	; 0xb8
    4730:	f7fc faa4 	bl	c7c <add_mod_n>
    4734:	f107 0330 	add.w	r3, r7, #48	; 0x30
    4738:	4619      	mov	r1, r3
    473a:	9305      	str	r3, [sp, #20]
    473c:	9500      	str	r5, [sp, #0]
    473e:	4623      	mov	r3, r4
    4740:	9a08      	ldr	r2, [sp, #32]
    4742:	a83a      	add	r0, sp, #232	; 0xe8
    4744:	f7fc fa9a 	bl	c7c <add_mod_n>
    4748:	9500      	str	r5, [sp, #0]
    474a:	4623      	mov	r3, r4
    474c:	4642      	mov	r2, r8
    474e:	4631      	mov	r1, r6
    4750:	a816      	add	r0, sp, #88	; 0x58
    4752:	f7fc fa93 	bl	c7c <add_mod_n>
    4756:	f106 0a30 	add.w	sl, r6, #48	; 0x30
    475a:	9500      	str	r5, [sp, #0]
    475c:	4623      	mov	r3, r4
    475e:	9a06      	ldr	r2, [sp, #24]
    4760:	4651      	mov	r1, sl
    4762:	a822      	add	r0, sp, #136	; 0x88
    4764:	f7fc fa8a 	bl	c7c <add_mod_n>
    4768:	f10b 0860 	add.w	r8, fp, #96	; 0x60
    476c:	4b59      	ldr	r3, [pc, #356]	; (48d4 <mul_fp6+0x2c8>)
    476e:	9300      	str	r3, [sp, #0]
    4770:	4623      	mov	r3, r4
    4772:	aa16      	add	r2, sp, #88	; 0x58
    4774:	a92e      	add	r1, sp, #184	; 0xb8
    4776:	4640      	mov	r0, r8
    4778:	f7ff fd9a 	bl	42b0 <mul_mont_384x>
    477c:	9500      	str	r5, [sp, #0]
    477e:	4623      	mov	r3, r4
    4780:	aa8e      	add	r2, sp, #568	; 0x238
    4782:	4641      	mov	r1, r8
    4784:	4640      	mov	r0, r8
    4786:	f7fb ff23 	bl	5d0 <sub_mod_n>
    478a:	f10b 0990 	add.w	r9, fp, #144	; 0x90
    478e:	9500      	str	r5, [sp, #0]
    4790:	4623      	mov	r3, r4
    4792:	aa9a      	add	r2, sp, #616	; 0x268
    4794:	4649      	mov	r1, r9
    4796:	4648      	mov	r0, r9
    4798:	f7fb ff1a 	bl	5d0 <sub_mod_n>
    479c:	9500      	str	r5, [sp, #0]
    479e:	4623      	mov	r3, r4
    47a0:	aa76      	add	r2, sp, #472	; 0x1d8
    47a2:	4641      	mov	r1, r8
    47a4:	4640      	mov	r0, r8
    47a6:	f7fb ff13 	bl	5d0 <sub_mod_n>
    47aa:	9500      	str	r5, [sp, #0]
    47ac:	4623      	mov	r3, r4
    47ae:	aa82      	add	r2, sp, #520	; 0x208
    47b0:	4649      	mov	r1, r9
    47b2:	4648      	mov	r0, r9
    47b4:	f7fb ff0c 	bl	5d0 <sub_mod_n>
    47b8:	9500      	str	r5, [sp, #0]
    47ba:	4623      	mov	r3, r4
    47bc:	aa6a      	add	r2, sp, #424	; 0x1a8
    47be:	a95e      	add	r1, sp, #376	; 0x178
    47c0:	a80a      	add	r0, sp, #40	; 0x28
    47c2:	f7fc fa5b 	bl	c7c <add_mod_n>
    47c6:	9500      	str	r5, [sp, #0]
    47c8:	4623      	mov	r3, r4
    47ca:	aa6a      	add	r2, sp, #424	; 0x1a8
    47cc:	a95e      	add	r1, sp, #376	; 0x178
    47ce:	a82e      	add	r0, sp, #184	; 0xb8
    47d0:	f7fb fefe 	bl	5d0 <sub_mod_n>
    47d4:	ab0a      	add	r3, sp, #40	; 0x28
    47d6:	aa39      	add	r2, sp, #228	; 0xe4
    47d8:	a816      	add	r0, sp, #88	; 0x58
    47da:	f853 1b04 	ldr.w	r1, [r3], #4
    47de:	f842 1f04 	str.w	r1, [r2, #4]!
    47e2:	4298      	cmp	r0, r3
    47e4:	d1f9      	bne.n	47da <mul_fp6+0x1ce>
    47e6:	4c3a      	ldr	r4, [pc, #232]	; (48d0 <mul_fp6+0x2c4>)
    47e8:	250c      	movs	r5, #12
    47ea:	9500      	str	r5, [sp, #0]
    47ec:	4623      	mov	r3, r4
    47ee:	aa2e      	add	r2, sp, #184	; 0xb8
    47f0:	4641      	mov	r1, r8
    47f2:	4640      	mov	r0, r8
    47f4:	f7fc fa42 	bl	c7c <add_mod_n>
    47f8:	9500      	str	r5, [sp, #0]
    47fa:	4623      	mov	r3, r4
    47fc:	aa3a      	add	r2, sp, #232	; 0xe8
    47fe:	4649      	mov	r1, r9
    4800:	4648      	mov	r0, r9
    4802:	f7fc fa3b 	bl	c7c <add_mod_n>
    4806:	9500      	str	r5, [sp, #0]
    4808:	4623      	mov	r3, r4
    480a:	9a03      	ldr	r2, [sp, #12]
    480c:	4639      	mov	r1, r7
    480e:	a82e      	add	r0, sp, #184	; 0xb8
    4810:	f7fc fa34 	bl	c7c <add_mod_n>
    4814:	9500      	str	r5, [sp, #0]
    4816:	4623      	mov	r3, r4
    4818:	9a09      	ldr	r2, [sp, #36]	; 0x24
    481a:	9905      	ldr	r1, [sp, #20]
    481c:	a83a      	add	r0, sp, #232	; 0xe8
    481e:	f7fc fa2d 	bl	c7c <add_mod_n>
    4822:	9500      	str	r5, [sp, #0]
    4824:	4623      	mov	r3, r4
    4826:	9a04      	ldr	r2, [sp, #16]
    4828:	4631      	mov	r1, r6
    482a:	a816      	add	r0, sp, #88	; 0x58
    482c:	f7fc fa26 	bl	c7c <add_mod_n>
    4830:	9500      	str	r5, [sp, #0]
    4832:	4623      	mov	r3, r4
    4834:	9a07      	ldr	r2, [sp, #28]
    4836:	4651      	mov	r1, sl
    4838:	a822      	add	r0, sp, #136	; 0x88
    483a:	f7fc fa1f 	bl	c7c <add_mod_n>
    483e:	f10b 06c0 	add.w	r6, fp, #192	; 0xc0
    4842:	4b24      	ldr	r3, [pc, #144]	; (48d4 <mul_fp6+0x2c8>)
    4844:	9300      	str	r3, [sp, #0]
    4846:	4623      	mov	r3, r4
    4848:	aa16      	add	r2, sp, #88	; 0x58
    484a:	a92e      	add	r1, sp, #184	; 0xb8
    484c:	4630      	mov	r0, r6
    484e:	f7ff fd2f 	bl	42b0 <mul_mont_384x>
    4852:	9500      	str	r5, [sp, #0]
    4854:	4623      	mov	r3, r4
    4856:	aa8e      	add	r2, sp, #568	; 0x238
    4858:	4631      	mov	r1, r6
    485a:	4630      	mov	r0, r6
    485c:	f7fb feb8 	bl	5d0 <sub_mod_n>
    4860:	f10b 07f0 	add.w	r7, fp, #240	; 0xf0
    4864:	9500      	str	r5, [sp, #0]
    4866:	4623      	mov	r3, r4
    4868:	aa9a      	add	r2, sp, #616	; 0x268
    486a:	4639      	mov	r1, r7
    486c:	4638      	mov	r0, r7
    486e:	f7fb feaf 	bl	5d0 <sub_mod_n>
    4872:	9500      	str	r5, [sp, #0]
    4874:	4623      	mov	r3, r4
    4876:	aa5e      	add	r2, sp, #376	; 0x178
    4878:	4631      	mov	r1, r6
    487a:	4630      	mov	r0, r6
    487c:	f7fb fea8 	bl	5d0 <sub_mod_n>
    4880:	9500      	str	r5, [sp, #0]
    4882:	4623      	mov	r3, r4
    4884:	aa6a      	add	r2, sp, #424	; 0x1a8
    4886:	4639      	mov	r1, r7
    4888:	4638      	mov	r0, r7
    488a:	f7fb fea1 	bl	5d0 <sub_mod_n>
    488e:	9500      	str	r5, [sp, #0]
    4890:	4623      	mov	r3, r4
    4892:	aa76      	add	r2, sp, #472	; 0x1d8
    4894:	4631      	mov	r1, r6
    4896:	4630      	mov	r0, r6
    4898:	f7fc f9f0 	bl	c7c <add_mod_n>
    489c:	9500      	str	r5, [sp, #0]
    489e:	4623      	mov	r3, r4
    48a0:	aa82      	add	r2, sp, #520	; 0x208
    48a2:	4639      	mov	r1, r7
    48a4:	4638      	mov	r0, r7
    48a6:	f7fc f9e9 	bl	c7c <add_mod_n>
    48aa:	9500      	str	r5, [sp, #0]
    48ac:	4623      	mov	r3, r4
    48ae:	aa8e      	add	r2, sp, #568	; 0x238
    48b0:	a946      	add	r1, sp, #280	; 0x118
    48b2:	4658      	mov	r0, fp
    48b4:	f7fc f9e2 	bl	c7c <add_mod_n>
    48b8:	9500      	str	r5, [sp, #0]
    48ba:	4623      	mov	r3, r4
    48bc:	aa9a      	add	r2, sp, #616	; 0x268
    48be:	a952      	add	r1, sp, #328	; 0x148
    48c0:	f10b 0030 	add.w	r0, fp, #48	; 0x30
    48c4:	f7fc f9da 	bl	c7c <add_mod_n>
    48c8:	f50d 7d27 	add.w	sp, sp, #668	; 0x29c
    48cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    48d0:	00015a08 	.word	0x00015a08
    48d4:	fffcfffd 	.word	0xfffcfffd

000048d8 <mul_fp12>:
    48d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    48dc:	f5ad 7d66 	sub.w	sp, sp, #920	; 0x398
    48e0:	4604      	mov	r4, r0
    48e2:	460d      	mov	r5, r1
    48e4:	4616      	mov	r6, r2
    48e6:	a89e      	add	r0, sp, #632	; 0x278
    48e8:	f7ff fe90 	bl	460c <mul_fp6>
    48ec:	f505 7890 	add.w	r8, r5, #288	; 0x120
    48f0:	f506 7790 	add.w	r7, r6, #288	; 0x120
    48f4:	463a      	mov	r2, r7
    48f6:	4641      	mov	r1, r8
    48f8:	a856      	add	r0, sp, #344	; 0x158
    48fa:	f7ff fe87 	bl	460c <mul_fp6>
    48fe:	4642      	mov	r2, r8
    4900:	4629      	mov	r1, r5
    4902:	a80e      	add	r0, sp, #56	; 0x38
    4904:	f7fd fb48 	bl	1f98 <add_fp6>
    4908:	f504 7590 	add.w	r5, r4, #288	; 0x120
    490c:	463a      	mov	r2, r7
    490e:	4631      	mov	r1, r6
    4910:	4628      	mov	r0, r5
    4912:	f7fd fb41 	bl	1f98 <add_fp6>
    4916:	aa0e      	add	r2, sp, #56	; 0x38
    4918:	4629      	mov	r1, r5
    491a:	4628      	mov	r0, r5
    491c:	f7ff fe76 	bl	460c <mul_fp6>
    4920:	aa9e      	add	r2, sp, #632	; 0x278
    4922:	4629      	mov	r1, r5
    4924:	4628      	mov	r0, r5
    4926:	f7fd faed 	bl	1f04 <sub_fp6>
    492a:	aa56      	add	r2, sp, #344	; 0x158
    492c:	4629      	mov	r1, r5
    492e:	4628      	mov	r0, r5
    4930:	f7fd fae8 	bl	1f04 <sub_fp6>
    4934:	4d26      	ldr	r5, [pc, #152]	; (49d0 <mul_fp12+0xf8>)
    4936:	260c      	movs	r6, #12
    4938:	9600      	str	r6, [sp, #0]
    493a:	462b      	mov	r3, r5
    493c:	aa92      	add	r2, sp, #584	; 0x248
    493e:	a986      	add	r1, sp, #536	; 0x218
    4940:	a802      	add	r0, sp, #8
    4942:	f7fc f99b 	bl	c7c <add_mod_n>
    4946:	9600      	str	r6, [sp, #0]
    4948:	462b      	mov	r3, r5
    494a:	aa92      	add	r2, sp, #584	; 0x248
    494c:	a986      	add	r1, sp, #536	; 0x218
    494e:	4608      	mov	r0, r1
    4950:	f7fb fe3e 	bl	5d0 <sub_mod_n>
    4954:	ab02      	add	r3, sp, #8
    4956:	aa91      	add	r2, sp, #580	; 0x244
    4958:	a80e      	add	r0, sp, #56	; 0x38
    495a:	f853 1b04 	ldr.w	r1, [r3], #4
    495e:	f842 1f04 	str.w	r1, [r2, #4]!
    4962:	4283      	cmp	r3, r0
    4964:	d1f9      	bne.n	495a <mul_fp12+0x82>
    4966:	4d1a      	ldr	r5, [pc, #104]	; (49d0 <mul_fp12+0xf8>)
    4968:	260c      	movs	r6, #12
    496a:	9600      	str	r6, [sp, #0]
    496c:	462b      	mov	r3, r5
    496e:	aa86      	add	r2, sp, #536	; 0x218
    4970:	a99e      	add	r1, sp, #632	; 0x278
    4972:	4620      	mov	r0, r4
    4974:	f7fc f982 	bl	c7c <add_mod_n>
    4978:	9600      	str	r6, [sp, #0]
    497a:	462b      	mov	r3, r5
    497c:	aa92      	add	r2, sp, #584	; 0x248
    497e:	a9aa      	add	r1, sp, #680	; 0x2a8
    4980:	f104 0030 	add.w	r0, r4, #48	; 0x30
    4984:	f7fc f97a 	bl	c7c <add_mod_n>
    4988:	9600      	str	r6, [sp, #0]
    498a:	462b      	mov	r3, r5
    498c:	aa56      	add	r2, sp, #344	; 0x158
    498e:	a9b6      	add	r1, sp, #728	; 0x2d8
    4990:	f104 0060 	add.w	r0, r4, #96	; 0x60
    4994:	f7fc f972 	bl	c7c <add_mod_n>
    4998:	9600      	str	r6, [sp, #0]
    499a:	462b      	mov	r3, r5
    499c:	aa62      	add	r2, sp, #392	; 0x188
    499e:	a9c2      	add	r1, sp, #776	; 0x308
    49a0:	f104 0090 	add.w	r0, r4, #144	; 0x90
    49a4:	f7fc f96a 	bl	c7c <add_mod_n>
    49a8:	9600      	str	r6, [sp, #0]
    49aa:	462b      	mov	r3, r5
    49ac:	aa6e      	add	r2, sp, #440	; 0x1b8
    49ae:	a9ce      	add	r1, sp, #824	; 0x338
    49b0:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    49b4:	f7fc f962 	bl	c7c <add_mod_n>
    49b8:	9600      	str	r6, [sp, #0]
    49ba:	462b      	mov	r3, r5
    49bc:	aa7a      	add	r2, sp, #488	; 0x1e8
    49be:	a9da      	add	r1, sp, #872	; 0x368
    49c0:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
    49c4:	f7fc f95a 	bl	c7c <add_mod_n>
    49c8:	f50d 7d66 	add.w	sp, sp, #920	; 0x398
    49cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    49d0:	00015a08 	.word	0x00015a08

000049d4 <blst_fp12_mul>:
    49d4:	b508      	push	{r3, lr}
    49d6:	f7ff ff7f 	bl	48d8 <mul_fp12>
    49da:	bd08      	pop	{r3, pc}

000049dc <sqr_fp12>:
    49dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    49e0:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
    49e4:	4606      	mov	r6, r0
    49e6:	460d      	mov	r5, r1
    49e8:	f501 7790 	add.w	r7, r1, #288	; 0x120
    49ec:	463a      	mov	r2, r7
    49ee:	a856      	add	r0, sp, #344	; 0x158
    49f0:	f7fd fad2 	bl	1f98 <add_fp6>
    49f4:	f505 74f0 	add.w	r4, r5, #480	; 0x1e0
    49f8:	f505 7804 	add.w	r8, r5, #528	; 0x210
    49fc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 4b78 <sqr_fp12+0x19c>
    4a00:	f04f 0a0c 	mov.w	sl, #12
    4a04:	f8cd a000 	str.w	sl, [sp]
    4a08:	464b      	mov	r3, r9
    4a0a:	4642      	mov	r2, r8
    4a0c:	4621      	mov	r1, r4
    4a0e:	a802      	add	r0, sp, #8
    4a10:	f7fc f934 	bl	c7c <add_mod_n>
    4a14:	f8cd a000 	str.w	sl, [sp]
    4a18:	464b      	mov	r3, r9
    4a1a:	4642      	mov	r2, r8
    4a1c:	4621      	mov	r1, r4
    4a1e:	a83e      	add	r0, sp, #248	; 0xf8
    4a20:	f7fb fdd6 	bl	5d0 <sub_mod_n>
    4a24:	ab02      	add	r3, sp, #8
    4a26:	ac49      	add	r4, sp, #292	; 0x124
    4a28:	a80e      	add	r0, sp, #56	; 0x38
    4a2a:	4622      	mov	r2, r4
    4a2c:	f853 1b04 	ldr.w	r1, [r3], #4
    4a30:	f842 1f04 	str.w	r1, [r2, #4]!
    4a34:	4283      	cmp	r3, r0
    4a36:	d1f9      	bne.n	4a2c <sqr_fp12+0x50>
    4a38:	f8df 813c 	ldr.w	r8, [pc, #316]	; 4b78 <sqr_fp12+0x19c>
    4a3c:	f04f 090c 	mov.w	r9, #12
    4a40:	f8cd 9000 	str.w	r9, [sp]
    4a44:	4643      	mov	r3, r8
    4a46:	aa3e      	add	r2, sp, #248	; 0xf8
    4a48:	4629      	mov	r1, r5
    4a4a:	a80e      	add	r0, sp, #56	; 0x38
    4a4c:	f7fc f916 	bl	c7c <add_mod_n>
    4a50:	f8cd 9000 	str.w	r9, [sp]
    4a54:	4643      	mov	r3, r8
    4a56:	aa4a      	add	r2, sp, #296	; 0x128
    4a58:	f105 0130 	add.w	r1, r5, #48	; 0x30
    4a5c:	a81a      	add	r0, sp, #104	; 0x68
    4a5e:	f7fc f90d 	bl	c7c <add_mod_n>
    4a62:	f8cd 9000 	str.w	r9, [sp]
    4a66:	4643      	mov	r3, r8
    4a68:	f505 7290 	add.w	r2, r5, #288	; 0x120
    4a6c:	f105 0160 	add.w	r1, r5, #96	; 0x60
    4a70:	a826      	add	r0, sp, #152	; 0x98
    4a72:	f7fc f903 	bl	c7c <add_mod_n>
    4a76:	f8cd 9000 	str.w	r9, [sp]
    4a7a:	4643      	mov	r3, r8
    4a7c:	f505 72a8 	add.w	r2, r5, #336	; 0x150
    4a80:	f105 0190 	add.w	r1, r5, #144	; 0x90
    4a84:	a832      	add	r0, sp, #200	; 0xc8
    4a86:	f7fc f8f9 	bl	c7c <add_mod_n>
    4a8a:	f8cd 9000 	str.w	r9, [sp]
    4a8e:	4643      	mov	r3, r8
    4a90:	f505 72c0 	add.w	r2, r5, #384	; 0x180
    4a94:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
    4a98:	a83e      	add	r0, sp, #248	; 0xf8
    4a9a:	f7fc f8ef 	bl	c7c <add_mod_n>
    4a9e:	f8cd 9000 	str.w	r9, [sp]
    4aa2:	4643      	mov	r3, r8
    4aa4:	f505 72d8 	add.w	r2, r5, #432	; 0x1b0
    4aa8:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
    4aac:	a84a      	add	r0, sp, #296	; 0x128
    4aae:	f7fc f8e5 	bl	c7c <add_mod_n>
    4ab2:	aa0e      	add	r2, sp, #56	; 0x38
    4ab4:	a956      	add	r1, sp, #344	; 0x158
    4ab6:	4608      	mov	r0, r1
    4ab8:	f7ff fda8 	bl	460c <mul_fp6>
    4abc:	463a      	mov	r2, r7
    4abe:	4629      	mov	r1, r5
    4ac0:	a80e      	add	r0, sp, #56	; 0x38
    4ac2:	f7ff fda3 	bl	460c <mul_fp6>
    4ac6:	aa0e      	add	r2, sp, #56	; 0x38
    4ac8:	4611      	mov	r1, r2
    4aca:	f506 7090 	add.w	r0, r6, #288	; 0x120
    4ace:	f7fd fa63 	bl	1f98 <add_fp6>
    4ad2:	aa0e      	add	r2, sp, #56	; 0x38
    4ad4:	a956      	add	r1, sp, #344	; 0x158
    4ad6:	4630      	mov	r0, r6
    4ad8:	f7fd fa14 	bl	1f04 <sub_fp6>
    4adc:	f8cd 9000 	str.w	r9, [sp]
    4ae0:	4643      	mov	r3, r8
    4ae2:	aa4a      	add	r2, sp, #296	; 0x128
    4ae4:	a93e      	add	r1, sp, #248	; 0xf8
    4ae6:	a802      	add	r0, sp, #8
    4ae8:	f7fc f8c8 	bl	c7c <add_mod_n>
    4aec:	f8cd 9000 	str.w	r9, [sp]
    4af0:	4643      	mov	r3, r8
    4af2:	aa4a      	add	r2, sp, #296	; 0x128
    4af4:	a93e      	add	r1, sp, #248	; 0xf8
    4af6:	4608      	mov	r0, r1
    4af8:	f7fb fd6a 	bl	5d0 <sub_mod_n>
    4afc:	ab02      	add	r3, sp, #8
    4afe:	a90e      	add	r1, sp, #56	; 0x38
    4b00:	f853 2b04 	ldr.w	r2, [r3], #4
    4b04:	f844 2f04 	str.w	r2, [r4, #4]!
    4b08:	4299      	cmp	r1, r3
    4b0a:	d1f9      	bne.n	4b00 <sqr_fp12+0x124>
    4b0c:	4c1a      	ldr	r4, [pc, #104]	; (4b78 <sqr_fp12+0x19c>)
    4b0e:	250c      	movs	r5, #12
    4b10:	9500      	str	r5, [sp, #0]
    4b12:	4623      	mov	r3, r4
    4b14:	aa3e      	add	r2, sp, #248	; 0xf8
    4b16:	4631      	mov	r1, r6
    4b18:	4630      	mov	r0, r6
    4b1a:	f7fb fd59 	bl	5d0 <sub_mod_n>
    4b1e:	f106 0030 	add.w	r0, r6, #48	; 0x30
    4b22:	9500      	str	r5, [sp, #0]
    4b24:	4623      	mov	r3, r4
    4b26:	aa4a      	add	r2, sp, #296	; 0x128
    4b28:	4601      	mov	r1, r0
    4b2a:	f7fb fd51 	bl	5d0 <sub_mod_n>
    4b2e:	f106 0060 	add.w	r0, r6, #96	; 0x60
    4b32:	9500      	str	r5, [sp, #0]
    4b34:	4623      	mov	r3, r4
    4b36:	aa0e      	add	r2, sp, #56	; 0x38
    4b38:	4601      	mov	r1, r0
    4b3a:	f7fb fd49 	bl	5d0 <sub_mod_n>
    4b3e:	f106 0090 	add.w	r0, r6, #144	; 0x90
    4b42:	9500      	str	r5, [sp, #0]
    4b44:	4623      	mov	r3, r4
    4b46:	aa1a      	add	r2, sp, #104	; 0x68
    4b48:	4601      	mov	r1, r0
    4b4a:	f7fb fd41 	bl	5d0 <sub_mod_n>
    4b4e:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
    4b52:	9500      	str	r5, [sp, #0]
    4b54:	4623      	mov	r3, r4
    4b56:	aa26      	add	r2, sp, #152	; 0x98
    4b58:	4601      	mov	r1, r0
    4b5a:	f7fb fd39 	bl	5d0 <sub_mod_n>
    4b5e:	f106 00f0 	add.w	r0, r6, #240	; 0xf0
    4b62:	9500      	str	r5, [sp, #0]
    4b64:	4623      	mov	r3, r4
    4b66:	aa32      	add	r2, sp, #200	; 0xc8
    4b68:	4601      	mov	r1, r0
    4b6a:	f7fb fd31 	bl	5d0 <sub_mod_n>
    4b6e:	f50d 7d1e 	add.w	sp, sp, #632	; 0x278
    4b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4b76:	bf00      	nop
    4b78:	00015a08 	.word	0x00015a08

00004b7c <blst_fp12_sqr>:
    4b7c:	b508      	push	{r3, lr}
    4b7e:	f7ff ff2d 	bl	49dc <sqr_fp12>
    4b82:	bd08      	pop	{r3, pc}

00004b84 <mul_by_xy0_fp6>:
    4b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4b88:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
    4b8c:	4604      	mov	r4, r0
    4b8e:	460e      	mov	r6, r1
    4b90:	4615      	mov	r5, r2
    4b92:	f8df a184 	ldr.w	sl, [pc, #388]	; 4d18 <mul_by_xy0_fp6+0x194>
    4b96:	f8df b184 	ldr.w	fp, [pc, #388]	; 4d1c <mul_by_xy0_fp6+0x198>
    4b9a:	f8cd b000 	str.w	fp, [sp]
    4b9e:	4653      	mov	r3, sl
    4ba0:	a86e      	add	r0, sp, #440	; 0x1b8
    4ba2:	f7ff fb85 	bl	42b0 <mul_mont_384x>
    4ba6:	f106 0960 	add.w	r9, r6, #96	; 0x60
    4baa:	f105 0760 	add.w	r7, r5, #96	; 0x60
    4bae:	f8cd b000 	str.w	fp, [sp]
    4bb2:	4653      	mov	r3, sl
    4bb4:	463a      	mov	r2, r7
    4bb6:	4649      	mov	r1, r9
    4bb8:	a856      	add	r0, sp, #344	; 0x158
    4bba:	f7ff fb79 	bl	42b0 <mul_mont_384x>
    4bbe:	f106 08c0 	add.w	r8, r6, #192	; 0xc0
    4bc2:	f8cd b000 	str.w	fp, [sp]
    4bc6:	4653      	mov	r3, sl
    4bc8:	463a      	mov	r2, r7
    4bca:	4641      	mov	r1, r8
    4bcc:	a83e      	add	r0, sp, #248	; 0xf8
    4bce:	f7ff fb6f 	bl	42b0 <mul_mont_384x>
    4bd2:	f04f 0b0c 	mov.w	fp, #12
    4bd6:	f8cd b000 	str.w	fp, [sp]
    4bda:	4653      	mov	r3, sl
    4bdc:	aa4a      	add	r2, sp, #296	; 0x128
    4bde:	a93e      	add	r1, sp, #248	; 0xf8
    4be0:	a802      	add	r0, sp, #8
    4be2:	f7fc f84b 	bl	c7c <add_mod_n>
    4be6:	f8cd b000 	str.w	fp, [sp]
    4bea:	4653      	mov	r3, sl
    4bec:	aa4a      	add	r2, sp, #296	; 0x128
    4bee:	a93e      	add	r1, sp, #248	; 0xf8
    4bf0:	4608      	mov	r0, r1
    4bf2:	f7fb fced 	bl	5d0 <sub_mod_n>
    4bf6:	ab02      	add	r3, sp, #8
    4bf8:	f50d 7c92 	add.w	ip, sp, #292	; 0x124
    4bfc:	a90e      	add	r1, sp, #56	; 0x38
    4bfe:	f853 2b04 	ldr.w	r2, [r3], #4
    4c02:	f84c 2f04 	str.w	r2, [ip, #4]!
    4c06:	4299      	cmp	r1, r3
    4c08:	d1f9      	bne.n	4bfe <mul_by_xy0_fp6+0x7a>
    4c0a:	f8df a10c 	ldr.w	sl, [pc, #268]	; 4d18 <mul_by_xy0_fp6+0x194>
    4c0e:	f04f 0b0c 	mov.w	fp, #12
    4c12:	f8cd b000 	str.w	fp, [sp]
    4c16:	4653      	mov	r3, sl
    4c18:	464a      	mov	r2, r9
    4c1a:	4631      	mov	r1, r6
    4c1c:	a826      	add	r0, sp, #152	; 0x98
    4c1e:	f7fc f82d 	bl	c7c <add_mod_n>
    4c22:	f8cd b000 	str.w	fp, [sp]
    4c26:	4653      	mov	r3, sl
    4c28:	f106 0290 	add.w	r2, r6, #144	; 0x90
    4c2c:	f106 0130 	add.w	r1, r6, #48	; 0x30
    4c30:	a832      	add	r0, sp, #200	; 0xc8
    4c32:	f7fc f823 	bl	c7c <add_mod_n>
    4c36:	f8cd b000 	str.w	fp, [sp]
    4c3a:	4653      	mov	r3, sl
    4c3c:	463a      	mov	r2, r7
    4c3e:	4629      	mov	r1, r5
    4c40:	a80e      	add	r0, sp, #56	; 0x38
    4c42:	f7fc f81b 	bl	c7c <add_mod_n>
    4c46:	f8cd b000 	str.w	fp, [sp]
    4c4a:	4653      	mov	r3, sl
    4c4c:	f105 0290 	add.w	r2, r5, #144	; 0x90
    4c50:	f105 0130 	add.w	r1, r5, #48	; 0x30
    4c54:	a81a      	add	r0, sp, #104	; 0x68
    4c56:	f7fc f811 	bl	c7c <add_mod_n>
    4c5a:	f104 0660 	add.w	r6, r4, #96	; 0x60
    4c5e:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 4d1c <mul_by_xy0_fp6+0x198>
    4c62:	f8cd 9000 	str.w	r9, [sp]
    4c66:	4653      	mov	r3, sl
    4c68:	aa0e      	add	r2, sp, #56	; 0x38
    4c6a:	a926      	add	r1, sp, #152	; 0x98
    4c6c:	4630      	mov	r0, r6
    4c6e:	f7ff fb1f 	bl	42b0 <mul_mont_384x>
    4c72:	f8cd b000 	str.w	fp, [sp]
    4c76:	4653      	mov	r3, sl
    4c78:	aa6e      	add	r2, sp, #440	; 0x1b8
    4c7a:	4631      	mov	r1, r6
    4c7c:	4630      	mov	r0, r6
    4c7e:	f7fb fca7 	bl	5d0 <sub_mod_n>
    4c82:	f104 0790 	add.w	r7, r4, #144	; 0x90
    4c86:	f8cd b000 	str.w	fp, [sp]
    4c8a:	4653      	mov	r3, sl
    4c8c:	aa7a      	add	r2, sp, #488	; 0x1e8
    4c8e:	4639      	mov	r1, r7
    4c90:	4638      	mov	r0, r7
    4c92:	f7fb fc9d 	bl	5d0 <sub_mod_n>
    4c96:	f8cd b000 	str.w	fp, [sp]
    4c9a:	4653      	mov	r3, sl
    4c9c:	aa56      	add	r2, sp, #344	; 0x158
    4c9e:	4631      	mov	r1, r6
    4ca0:	4630      	mov	r0, r6
    4ca2:	f7fb fc95 	bl	5d0 <sub_mod_n>
    4ca6:	f8cd b000 	str.w	fp, [sp]
    4caa:	4653      	mov	r3, sl
    4cac:	aa62      	add	r2, sp, #392	; 0x188
    4cae:	4639      	mov	r1, r7
    4cb0:	4638      	mov	r0, r7
    4cb2:	f7fb fc8d 	bl	5d0 <sub_mod_n>
    4cb6:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
    4cba:	f8cd 9000 	str.w	r9, [sp]
    4cbe:	4653      	mov	r3, sl
    4cc0:	462a      	mov	r2, r5
    4cc2:	4641      	mov	r1, r8
    4cc4:	4630      	mov	r0, r6
    4cc6:	f7ff faf3 	bl	42b0 <mul_mont_384x>
    4cca:	f8cd b000 	str.w	fp, [sp]
    4cce:	4653      	mov	r3, sl
    4cd0:	aa56      	add	r2, sp, #344	; 0x158
    4cd2:	4631      	mov	r1, r6
    4cd4:	4630      	mov	r0, r6
    4cd6:	f7fb ffd1 	bl	c7c <add_mod_n>
    4cda:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
    4cde:	f8cd b000 	str.w	fp, [sp]
    4ce2:	4653      	mov	r3, sl
    4ce4:	aa62      	add	r2, sp, #392	; 0x188
    4ce6:	4601      	mov	r1, r0
    4ce8:	f7fb ffc8 	bl	c7c <add_mod_n>
    4cec:	f8cd b000 	str.w	fp, [sp]
    4cf0:	4653      	mov	r3, sl
    4cf2:	aa6e      	add	r2, sp, #440	; 0x1b8
    4cf4:	a93e      	add	r1, sp, #248	; 0xf8
    4cf6:	4620      	mov	r0, r4
    4cf8:	f7fb ffc0 	bl	c7c <add_mod_n>
    4cfc:	f8cd b000 	str.w	fp, [sp]
    4d00:	4653      	mov	r3, sl
    4d02:	aa7a      	add	r2, sp, #488	; 0x1e8
    4d04:	a94a      	add	r1, sp, #296	; 0x128
    4d06:	f104 0030 	add.w	r0, r4, #48	; 0x30
    4d0a:	f7fb ffb7 	bl	c7c <add_mod_n>
    4d0e:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
    4d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4d16:	bf00      	nop
    4d18:	00015a08 	.word	0x00015a08
    4d1c:	fffcfffd 	.word	0xfffcfffd

00004d20 <mul_by_xy00z0_fp12>:
    4d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4d24:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
    4d28:	4604      	mov	r4, r0
    4d2a:	460e      	mov	r6, r1
    4d2c:	4615      	mov	r5, r2
    4d2e:	a8b6      	add	r0, sp, #728	; 0x2d8
    4d30:	f7ff ff28 	bl	4b84 <mul_by_xy0_fp6>
    4d34:	f506 7890 	add.w	r8, r6, #288	; 0x120
    4d38:	f105 07c0 	add.w	r7, r5, #192	; 0xc0
    4d3c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 4eb8 <mul_by_xy00z0_fp12+0x198>
    4d40:	f8df a178 	ldr.w	sl, [pc, #376]	; 4ebc <mul_by_xy00z0_fp12+0x19c>
    4d44:	f8cd a000 	str.w	sl, [sp]
    4d48:	464b      	mov	r3, r9
    4d4a:	463a      	mov	r2, r7
    4d4c:	f506 71f0 	add.w	r1, r6, #480	; 0x1e0
    4d50:	a80e      	add	r0, sp, #56	; 0x38
    4d52:	f7ff faad 	bl	42b0 <mul_mont_384x>
    4d56:	f8cd a000 	str.w	sl, [sp]
    4d5a:	464b      	mov	r3, r9
    4d5c:	463a      	mov	r2, r7
    4d5e:	f506 71c0 	add.w	r1, r6, #384	; 0x180
    4d62:	a89e      	add	r0, sp, #632	; 0x278
    4d64:	f7ff faa4 	bl	42b0 <mul_mont_384x>
    4d68:	f8cd a000 	str.w	sl, [sp]
    4d6c:	464b      	mov	r3, r9
    4d6e:	463a      	mov	r2, r7
    4d70:	4641      	mov	r1, r8
    4d72:	a886      	add	r0, sp, #536	; 0x218
    4d74:	f7ff fa9c 	bl	42b0 <mul_mont_384x>
    4d78:	f04f 0a0c 	mov.w	sl, #12
    4d7c:	f8cd a000 	str.w	sl, [sp]
    4d80:	464b      	mov	r3, r9
    4d82:	aa1a      	add	r2, sp, #104	; 0x68
    4d84:	a90e      	add	r1, sp, #56	; 0x38
    4d86:	a802      	add	r0, sp, #8
    4d88:	f7fb ff78 	bl	c7c <add_mod_n>
    4d8c:	f8cd a000 	str.w	sl, [sp]
    4d90:	464b      	mov	r3, r9
    4d92:	aa1a      	add	r2, sp, #104	; 0x68
    4d94:	a90e      	add	r1, sp, #56	; 0x38
    4d96:	a86e      	add	r0, sp, #440	; 0x1b8
    4d98:	f7fb fc1a 	bl	5d0 <sub_mod_n>
    4d9c:	ab02      	add	r3, sp, #8
    4d9e:	aa79      	add	r2, sp, #484	; 0x1e4
    4da0:	a80e      	add	r0, sp, #56	; 0x38
    4da2:	f853 1b04 	ldr.w	r1, [r3], #4
    4da6:	f842 1f04 	str.w	r1, [r2, #4]!
    4daa:	4283      	cmp	r3, r0
    4dac:	d1f9      	bne.n	4da2 <mul_by_xy00z0_fp12+0x82>
    4dae:	f1a5 0c04 	sub.w	ip, r5, #4
    4db2:	ab26      	add	r3, sp, #152	; 0x98
    4db4:	a93e      	add	r1, sp, #248	; 0xf8
    4db6:	f85c 2f04 	ldr.w	r2, [ip, #4]!
    4dba:	f843 2b04 	str.w	r2, [r3], #4
    4dbe:	428b      	cmp	r3, r1
    4dc0:	d1f9      	bne.n	4db6 <mul_by_xy00z0_fp12+0x96>
    4dc2:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 4eb8 <mul_by_xy00z0_fp12+0x198>
    4dc6:	f04f 0a0c 	mov.w	sl, #12
    4dca:	f8cd a000 	str.w	sl, [sp]
    4dce:	464b      	mov	r3, r9
    4dd0:	463a      	mov	r2, r7
    4dd2:	f105 0160 	add.w	r1, r5, #96	; 0x60
    4dd6:	a83e      	add	r0, sp, #248	; 0xf8
    4dd8:	f7fb ff50 	bl	c7c <add_mod_n>
    4ddc:	f8cd a000 	str.w	sl, [sp]
    4de0:	464b      	mov	r3, r9
    4de2:	f105 02f0 	add.w	r2, r5, #240	; 0xf0
    4de6:	f105 0190 	add.w	r1, r5, #144	; 0x90
    4dea:	a84a      	add	r0, sp, #296	; 0x128
    4dec:	f7fb ff46 	bl	c7c <add_mod_n>
    4df0:	f504 7590 	add.w	r5, r4, #288	; 0x120
    4df4:	4642      	mov	r2, r8
    4df6:	4631      	mov	r1, r6
    4df8:	4628      	mov	r0, r5
    4dfa:	f7fd f8cd 	bl	1f98 <add_fp6>
    4dfe:	aa26      	add	r2, sp, #152	; 0x98
    4e00:	4629      	mov	r1, r5
    4e02:	4628      	mov	r0, r5
    4e04:	f7ff febe 	bl	4b84 <mul_by_xy0_fp6>
    4e08:	aab6      	add	r2, sp, #728	; 0x2d8
    4e0a:	4629      	mov	r1, r5
    4e0c:	4628      	mov	r0, r5
    4e0e:	f7fd f879 	bl	1f04 <sub_fp6>
    4e12:	aa6e      	add	r2, sp, #440	; 0x1b8
    4e14:	4629      	mov	r1, r5
    4e16:	4628      	mov	r0, r5
    4e18:	f7fd f874 	bl	1f04 <sub_fp6>
    4e1c:	f8cd a000 	str.w	sl, [sp]
    4e20:	464b      	mov	r3, r9
    4e22:	aaaa      	add	r2, sp, #680	; 0x2a8
    4e24:	a99e      	add	r1, sp, #632	; 0x278
    4e26:	a80e      	add	r0, sp, #56	; 0x38
    4e28:	f7fb ff28 	bl	c7c <add_mod_n>
    4e2c:	f8cd a000 	str.w	sl, [sp]
    4e30:	464b      	mov	r3, r9
    4e32:	aaaa      	add	r2, sp, #680	; 0x2a8
    4e34:	a99e      	add	r1, sp, #632	; 0x278
    4e36:	4608      	mov	r0, r1
    4e38:	f7fb fbca 	bl	5d0 <sub_mod_n>
    4e3c:	ab0e      	add	r3, sp, #56	; 0x38
    4e3e:	aaa9      	add	r2, sp, #676	; 0x2a4
    4e40:	a81a      	add	r0, sp, #104	; 0x68
    4e42:	f853 1b04 	ldr.w	r1, [r3], #4
    4e46:	f842 1f04 	str.w	r1, [r2, #4]!
    4e4a:	4283      	cmp	r3, r0
    4e4c:	d1f9      	bne.n	4e42 <mul_by_xy00z0_fp12+0x122>
    4e4e:	4d1a      	ldr	r5, [pc, #104]	; (4eb8 <mul_by_xy00z0_fp12+0x198>)
    4e50:	260c      	movs	r6, #12
    4e52:	9600      	str	r6, [sp, #0]
    4e54:	462b      	mov	r3, r5
    4e56:	aa9e      	add	r2, sp, #632	; 0x278
    4e58:	a9b6      	add	r1, sp, #728	; 0x2d8
    4e5a:	4620      	mov	r0, r4
    4e5c:	f7fb ff0e 	bl	c7c <add_mod_n>
    4e60:	9600      	str	r6, [sp, #0]
    4e62:	462b      	mov	r3, r5
    4e64:	aaaa      	add	r2, sp, #680	; 0x2a8
    4e66:	a9c2      	add	r1, sp, #776	; 0x308
    4e68:	f104 0030 	add.w	r0, r4, #48	; 0x30
    4e6c:	f7fb ff06 	bl	c7c <add_mod_n>
    4e70:	9600      	str	r6, [sp, #0]
    4e72:	462b      	mov	r3, r5
    4e74:	aa6e      	add	r2, sp, #440	; 0x1b8
    4e76:	a9ce      	add	r1, sp, #824	; 0x338
    4e78:	f104 0060 	add.w	r0, r4, #96	; 0x60
    4e7c:	f7fb fefe 	bl	c7c <add_mod_n>
    4e80:	9600      	str	r6, [sp, #0]
    4e82:	462b      	mov	r3, r5
    4e84:	aa7a      	add	r2, sp, #488	; 0x1e8
    4e86:	a9da      	add	r1, sp, #872	; 0x368
    4e88:	f104 0090 	add.w	r0, r4, #144	; 0x90
    4e8c:	f7fb fef6 	bl	c7c <add_mod_n>
    4e90:	9600      	str	r6, [sp, #0]
    4e92:	462b      	mov	r3, r5
    4e94:	aa86      	add	r2, sp, #536	; 0x218
    4e96:	a9e6      	add	r1, sp, #920	; 0x398
    4e98:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    4e9c:	f7fb feee 	bl	c7c <add_mod_n>
    4ea0:	9600      	str	r6, [sp, #0]
    4ea2:	462b      	mov	r3, r5
    4ea4:	aa92      	add	r2, sp, #584	; 0x248
    4ea6:	a9f2      	add	r1, sp, #968	; 0x3c8
    4ea8:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
    4eac:	f7fb fee6 	bl	c7c <add_mod_n>
    4eb0:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
    4eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4eb8:	00015a08 	.word	0x00015a08
    4ebc:	fffcfffd 	.word	0xfffcfffd

00004ec0 <blst_fp12_mul_by_xy00z0>:
    4ec0:	b508      	push	{r3, lr}
    4ec2:	f7ff ff2d 	bl	4d20 <mul_by_xy00z0_fp12>
    4ec6:	bd08      	pop	{r3, pc}

00004ec8 <post_add_n_dbl>:
    4ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ecc:	b0c8      	sub	sp, #288	; 0x120
    4ece:	4604      	mov	r4, r0
    4ed0:	4617      	mov	r7, r2
    4ed2:	4698      	mov	r8, r3
    4ed4:	f501 7590 	add.w	r5, r1, #288	; 0x120
    4ed8:	4668      	mov	r0, sp
    4eda:	f7fb fe81 	bl	be0 <post_line_by_Px2>
    4ede:	466a      	mov	r2, sp
    4ee0:	4621      	mov	r1, r4
    4ee2:	4620      	mov	r0, r4
    4ee4:	f7ff ff1c 	bl	4d20 <mul_by_xy00z0_fp12>
    4ee8:	f108 36ff 	add.w	r6, r8, #4294967295
    4eec:	f1b8 0f00 	cmp.w	r8, #0
    4ef0:	d013      	beq.n	4f1a <post_add_n_dbl+0x52>
    4ef2:	4621      	mov	r1, r4
    4ef4:	4620      	mov	r0, r4
    4ef6:	f7ff fd71 	bl	49dc <sqr_fp12>
    4efa:	4629      	mov	r1, r5
    4efc:	463a      	mov	r2, r7
    4efe:	f505 7590 	add.w	r5, r5, #288	; 0x120
    4f02:	4668      	mov	r0, sp
    4f04:	f7fb fe6c 	bl	be0 <post_line_by_Px2>
    4f08:	466a      	mov	r2, sp
    4f0a:	4621      	mov	r1, r4
    4f0c:	4620      	mov	r0, r4
    4f0e:	f7ff ff07 	bl	4d20 <mul_by_xy00z0_fp12>
    4f12:	3e01      	subs	r6, #1
    4f14:	f1b6 3fff 	cmp.w	r6, #4294967295
    4f18:	d1eb      	bne.n	4ef2 <post_add_n_dbl+0x2a>
    4f1a:	b048      	add	sp, #288	; 0x120
    4f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004f20 <miller_loop_lines>:
    4f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f24:	b0e2      	sub	sp, #392	; 0x188
    4f26:	4605      	mov	r5, r0
    4f28:	460e      	mov	r6, r1
    4f2a:	4614      	mov	r4, r2
    4f2c:	4f32      	ldr	r7, [pc, #200]	; (4ff8 <miller_loop_lines+0xd8>)
    4f2e:	f04f 080c 	mov.w	r8, #12
    4f32:	f8cd 8000 	str.w	r8, [sp]
    4f36:	463b      	mov	r3, r7
    4f38:	4611      	mov	r1, r2
    4f3a:	a84a      	add	r0, sp, #296	; 0x128
    4f3c:	f7fb fe9e 	bl	c7c <add_mod_n>
    4f40:	f8cd 8000 	str.w	r8, [sp]
    4f44:	463b      	mov	r3, r7
    4f46:	2201      	movs	r2, #1
    4f48:	a94a      	add	r1, sp, #296	; 0x128
    4f4a:	4608      	mov	r0, r1
    4f4c:	f7fc fd2a 	bl	19a4 <cneg_mod_n>
    4f50:	f104 0130 	add.w	r1, r4, #48	; 0x30
    4f54:	f8cd 8000 	str.w	r8, [sp]
    4f58:	463b      	mov	r3, r7
    4f5a:	460a      	mov	r2, r1
    4f5c:	a856      	add	r0, sp, #344	; 0x158
    4f5e:	f7fb fe8d 	bl	c7c <add_mod_n>
    4f62:	aa4a      	add	r2, sp, #296	; 0x128
    4f64:	4631      	mov	r1, r6
    4f66:	a802      	add	r0, sp, #8
    4f68:	f7fb fe3a 	bl	be0 <post_line_by_Px2>
    4f6c:	462b      	mov	r3, r5
    4f6e:	f505 7110 	add.w	r1, r5, #576	; 0x240
    4f72:	2200      	movs	r2, #0
    4f74:	f843 2b04 	str.w	r2, [r3], #4
    4f78:	428b      	cmp	r3, r1
    4f7a:	d1fb      	bne.n	4f74 <miller_loop_lines+0x54>
    4f7c:	ab01      	add	r3, sp, #4
    4f7e:	1f2a      	subs	r2, r5, #4
    4f80:	a831      	add	r0, sp, #196	; 0xc4
    4f82:	f853 1f04 	ldr.w	r1, [r3, #4]!
    4f86:	f842 1f04 	str.w	r1, [r2, #4]!
    4f8a:	4283      	cmp	r3, r0
    4f8c:	d1f9      	bne.n	4f82 <miller_loop_lines+0x62>
    4f8e:	ab31      	add	r3, sp, #196	; 0xc4
    4f90:	f505 72be 	add.w	r2, r5, #380	; 0x17c
    4f94:	a949      	add	r1, sp, #292	; 0x124
    4f96:	f853 4f04 	ldr.w	r4, [r3, #4]!
    4f9a:	f842 4f04 	str.w	r4, [r2, #4]!
    4f9e:	428b      	cmp	r3, r1
    4fa0:	d1f9      	bne.n	4f96 <miller_loop_lines+0x76>
    4fa2:	2302      	movs	r3, #2
    4fa4:	aa4a      	add	r2, sp, #296	; 0x128
    4fa6:	f506 7190 	add.w	r1, r6, #288	; 0x120
    4faa:	4628      	mov	r0, r5
    4fac:	f7ff ff8c 	bl	4ec8 <post_add_n_dbl>
    4fb0:	2303      	movs	r3, #3
    4fb2:	aa4a      	add	r2, sp, #296	; 0x128
    4fb4:	f506 6190 	add.w	r1, r6, #1152	; 0x480
    4fb8:	4628      	mov	r0, r5
    4fba:	f7ff ff85 	bl	4ec8 <post_add_n_dbl>
    4fbe:	2309      	movs	r3, #9
    4fc0:	aa4a      	add	r2, sp, #296	; 0x128
    4fc2:	f506 6110 	add.w	r1, r6, #2304	; 0x900
    4fc6:	4628      	mov	r0, r5
    4fc8:	f7ff ff7e 	bl	4ec8 <post_add_n_dbl>
    4fcc:	2320      	movs	r3, #32
    4fce:	aa4a      	add	r2, sp, #296	; 0x128
    4fd0:	f506 51a2 	add.w	r1, r6, #5184	; 0x1440
    4fd4:	4628      	mov	r0, r5
    4fd6:	f7ff ff77 	bl	4ec8 <post_add_n_dbl>
    4fda:	2310      	movs	r3, #16
    4fdc:	aa4a      	add	r2, sp, #296	; 0x128
    4fde:	f506 5165 	add.w	r1, r6, #14656	; 0x3940
    4fe2:	3120      	adds	r1, #32
    4fe4:	4628      	mov	r0, r5
    4fe6:	f7ff ff6f 	bl	4ec8 <post_add_n_dbl>
    4fea:	4628      	mov	r0, r5
    4fec:	f7fc fe5a 	bl	1ca4 <conjugate_fp12>
    4ff0:	b062      	add	sp, #392	; 0x188
    4ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4ff6:	bf00      	nop
    4ff8:	00015a08 	.word	0x00015a08

00004ffc <blst_miller_loop_lines>:
    4ffc:	b508      	push	{r3, lr}
    4ffe:	f7ff ff8f 	bl	4f20 <miller_loop_lines>
    5002:	bd08      	pop	{r3, pc}

00005004 <sqr_n_mul_mont_383>:
    5004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5008:	b082      	sub	sp, #8
    500a:	4605      	mov	r5, r0
    500c:	461e      	mov	r6, r3
    500e:	9f08      	ldr	r7, [sp, #32]
    5010:	b182      	cbz	r2, 5034 <sqr_n_mul_mont_383+0x30>
    5012:	1e54      	subs	r4, r2, #1
    5014:	f04f 080c 	mov.w	r8, #12
    5018:	e000      	b.n	501c <sqr_n_mul_mont_383+0x18>
    501a:	4629      	mov	r1, r5
    501c:	f8cd 8004 	str.w	r8, [sp, #4]
    5020:	9700      	str	r7, [sp, #0]
    5022:	4633      	mov	r3, r6
    5024:	460a      	mov	r2, r1
    5026:	4628      	mov	r0, r5
    5028:	f7fc f909 	bl	123e <mul_mont_nonred_n>
    502c:	3c01      	subs	r4, #1
    502e:	f1b4 3fff 	cmp.w	r4, #4294967295
    5032:	d1f2      	bne.n	501a <sqr_n_mul_mont_383+0x16>
    5034:	230c      	movs	r3, #12
    5036:	9301      	str	r3, [sp, #4]
    5038:	9700      	str	r7, [sp, #0]
    503a:	4633      	mov	r3, r6
    503c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    503e:	4629      	mov	r1, r5
    5040:	4628      	mov	r0, r5
    5042:	f7fb fc73 	bl	92c <mul_mont_n>
    5046:	b002      	add	sp, #8
    5048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000504c <flt_reciprocal_fp>:
    504c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5050:	f5ad 7d45 	sub.w	sp, sp, #788	; 0x314
    5054:	9003      	str	r0, [sp, #12]
    5056:	1f0b      	subs	r3, r1, #4
    5058:	aa0f      	add	r2, sp, #60	; 0x3c
    505a:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    505e:	f853 1f04 	ldr.w	r1, [r3, #4]!
    5062:	f842 1f04 	str.w	r1, [r2, #4]!
    5066:	4283      	cmp	r3, r0
    5068:	d1f9      	bne.n	505e <flt_reciprocal_fp+0x12>
    506a:	f8df b2e4 	ldr.w	fp, [pc, #740]	; 5350 <flt_reciprocal_fp+0x304>
    506e:	270c      	movs	r7, #12
    5070:	9701      	str	r7, [sp, #4]
    5072:	4eb8      	ldr	r6, [pc, #736]	; (5354 <flt_reciprocal_fp+0x308>)
    5074:	9600      	str	r6, [sp, #0]
    5076:	465b      	mov	r3, fp
    5078:	aa10      	add	r2, sp, #64	; 0x40
    507a:	4611      	mov	r1, r2
    507c:	a804      	add	r0, sp, #16
    507e:	f7fb fc55 	bl	92c <mul_mont_n>
    5082:	ad70      	add	r5, sp, #448	; 0x1c0
    5084:	9701      	str	r7, [sp, #4]
    5086:	9600      	str	r6, [sp, #0]
    5088:	465b      	mov	r3, fp
    508a:	aa10      	add	r2, sp, #64	; 0x40
    508c:	a904      	add	r1, sp, #16
    508e:	4628      	mov	r0, r5
    5090:	f7fb fc4c 	bl	92c <mul_mont_n>
    5094:	ac40      	add	r4, sp, #256	; 0x100
    5096:	9701      	str	r7, [sp, #4]
    5098:	9600      	str	r6, [sp, #0]
    509a:	465b      	mov	r3, fp
    509c:	aa04      	add	r2, sp, #16
    509e:	4611      	mov	r1, r2
    50a0:	4620      	mov	r0, r4
    50a2:	f7fb fc43 	bl	92c <mul_mont_n>
    50a6:	9701      	str	r7, [sp, #4]
    50a8:	9600      	str	r6, [sp, #0]
    50aa:	465b      	mov	r3, fp
    50ac:	aa04      	add	r2, sp, #16
    50ae:	4629      	mov	r1, r5
    50b0:	a81c      	add	r0, sp, #112	; 0x70
    50b2:	f7fb fc3b 	bl	92c <mul_mont_n>
    50b6:	9701      	str	r7, [sp, #4]
    50b8:	9600      	str	r6, [sp, #0]
    50ba:	465b      	mov	r3, fp
    50bc:	462a      	mov	r2, r5
    50be:	4621      	mov	r1, r4
    50c0:	a858      	add	r0, sp, #352	; 0x160
    50c2:	f7fb fc33 	bl	92c <mul_mont_n>
    50c6:	9701      	str	r7, [sp, #4]
    50c8:	9600      	str	r6, [sp, #0]
    50ca:	465b      	mov	r3, fp
    50cc:	4622      	mov	r2, r4
    50ce:	a91c      	add	r1, sp, #112	; 0x70
    50d0:	a87c      	add	r0, sp, #496	; 0x1f0
    50d2:	f7fb fc2b 	bl	92c <mul_mont_n>
    50d6:	9701      	str	r7, [sp, #4]
    50d8:	9600      	str	r6, [sp, #0]
    50da:	465b      	mov	r3, fp
    50dc:	4622      	mov	r2, r4
    50de:	a958      	add	r1, sp, #352	; 0x160
    50e0:	a8a0      	add	r0, sp, #640	; 0x280
    50e2:	f7fb fc23 	bl	92c <mul_mont_n>
    50e6:	f10d 08d0 	add.w	r8, sp, #208	; 0xd0
    50ea:	9701      	str	r7, [sp, #4]
    50ec:	9600      	str	r6, [sp, #0]
    50ee:	465b      	mov	r3, fp
    50f0:	4622      	mov	r2, r4
    50f2:	a97c      	add	r1, sp, #496	; 0x1f0
    50f4:	4640      	mov	r0, r8
    50f6:	f7fb fc19 	bl	92c <mul_mont_n>
    50fa:	f50d 79c8 	add.w	r9, sp, #400	; 0x190
    50fe:	9701      	str	r7, [sp, #4]
    5100:	9600      	str	r6, [sp, #0]
    5102:	465b      	mov	r3, fp
    5104:	4622      	mov	r2, r4
    5106:	a9a0      	add	r1, sp, #640	; 0x280
    5108:	4648      	mov	r0, r9
    510a:	f7fb fc0f 	bl	92c <mul_mont_n>
    510e:	9701      	str	r7, [sp, #4]
    5110:	9600      	str	r6, [sp, #0]
    5112:	465b      	mov	r3, fp
    5114:	4622      	mov	r2, r4
    5116:	4641      	mov	r1, r8
    5118:	a8b8      	add	r0, sp, #736	; 0x2e0
    511a:	f7fb fc07 	bl	92c <mul_mont_n>
    511e:	9701      	str	r7, [sp, #4]
    5120:	9600      	str	r6, [sp, #0]
    5122:	465b      	mov	r3, fp
    5124:	4622      	mov	r2, r4
    5126:	4649      	mov	r1, r9
    5128:	a888      	add	r0, sp, #544	; 0x220
    512a:	f7fb fbff 	bl	92c <mul_mont_n>
    512e:	9701      	str	r7, [sp, #4]
    5130:	9600      	str	r6, [sp, #0]
    5132:	465b      	mov	r3, fp
    5134:	4622      	mov	r2, r4
    5136:	a9b8      	add	r1, sp, #736	; 0x2e0
    5138:	a828      	add	r0, sp, #160	; 0xa0
    513a:	f7fb fbf7 	bl	92c <mul_mont_n>
    513e:	9701      	str	r7, [sp, #4]
    5140:	9600      	str	r6, [sp, #0]
    5142:	465b      	mov	r3, fp
    5144:	4622      	mov	r2, r4
    5146:	a988      	add	r1, sp, #544	; 0x220
    5148:	a894      	add	r0, sp, #592	; 0x250
    514a:	f7fb fbef 	bl	92c <mul_mont_n>
    514e:	9701      	str	r7, [sp, #4]
    5150:	9600      	str	r6, [sp, #0]
    5152:	465b      	mov	r3, fp
    5154:	4642      	mov	r2, r8
    5156:	4641      	mov	r1, r8
    5158:	a804      	add	r0, sp, #16
    515a:	f7fb fbe7 	bl	92c <mul_mont_n>
    515e:	9701      	str	r7, [sp, #4]
    5160:	9600      	str	r6, [sp, #0]
    5162:	465b      	mov	r3, fp
    5164:	4622      	mov	r2, r4
    5166:	a994      	add	r1, sp, #592	; 0x250
    5168:	a8ac      	add	r0, sp, #688	; 0x2b0
    516a:	f7fb fbdf 	bl	92c <mul_mont_n>
    516e:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
    5172:	9701      	str	r7, [sp, #4]
    5174:	9600      	str	r6, [sp, #0]
    5176:	465b      	mov	r3, fp
    5178:	462a      	mov	r2, r5
    517a:	a904      	add	r1, sp, #16
    517c:	4650      	mov	r0, sl
    517e:	f7fb fbd5 	bl	92c <mul_mont_n>
    5182:	9701      	str	r7, [sp, #4]
    5184:	9600      	str	r6, [sp, #0]
    5186:	465b      	mov	r3, fp
    5188:	aa1c      	add	r2, sp, #112	; 0x70
    518a:	a904      	add	r1, sp, #16
    518c:	4620      	mov	r0, r4
    518e:	f7fb fbcd 	bl	92c <mul_mont_n>
    5192:	abb8      	add	r3, sp, #736	; 0x2e0
    5194:	9301      	str	r3, [sp, #4]
    5196:	9600      	str	r6, [sp, #0]
    5198:	465b      	mov	r3, fp
    519a:	463a      	mov	r2, r7
    519c:	a904      	add	r1, sp, #16
    519e:	4608      	mov	r0, r1
    51a0:	f7ff ff30 	bl	5004 <sqr_n_mul_mont_383>
    51a4:	f8cd 9004 	str.w	r9, [sp, #4]
    51a8:	9600      	str	r6, [sp, #0]
    51aa:	465b      	mov	r3, fp
    51ac:	2207      	movs	r2, #7
    51ae:	a904      	add	r1, sp, #16
    51b0:	4608      	mov	r0, r1
    51b2:	f7ff ff27 	bl	5004 <sqr_n_mul_mont_383>
    51b6:	ab1c      	add	r3, sp, #112	; 0x70
    51b8:	9301      	str	r3, [sp, #4]
    51ba:	9600      	str	r6, [sp, #0]
    51bc:	465b      	mov	r3, fp
    51be:	2204      	movs	r2, #4
    51c0:	a904      	add	r1, sp, #16
    51c2:	4608      	mov	r0, r1
    51c4:	f7ff ff1e 	bl	5004 <sqr_n_mul_mont_383>
    51c8:	ab58      	add	r3, sp, #352	; 0x160
    51ca:	9301      	str	r3, [sp, #4]
    51cc:	9600      	str	r6, [sp, #0]
    51ce:	465b      	mov	r3, fp
    51d0:	2206      	movs	r2, #6
    51d2:	a904      	add	r1, sp, #16
    51d4:	4608      	mov	r0, r1
    51d6:	f7ff ff15 	bl	5004 <sqr_n_mul_mont_383>
    51da:	ab94      	add	r3, sp, #592	; 0x250
    51dc:	9301      	str	r3, [sp, #4]
    51de:	9600      	str	r6, [sp, #0]
    51e0:	465b      	mov	r3, fp
    51e2:	2207      	movs	r2, #7
    51e4:	a904      	add	r1, sp, #16
    51e6:	4608      	mov	r0, r1
    51e8:	f7ff ff0c 	bl	5004 <sqr_n_mul_mont_383>
    51ec:	9401      	str	r4, [sp, #4]
    51ee:	9600      	str	r6, [sp, #0]
    51f0:	465b      	mov	r3, fp
    51f2:	2205      	movs	r2, #5
    51f4:	a904      	add	r1, sp, #16
    51f6:	4608      	mov	r0, r1
    51f8:	f7ff ff04 	bl	5004 <sqr_n_mul_mont_383>
    51fc:	9501      	str	r5, [sp, #4]
    51fe:	9600      	str	r6, [sp, #0]
    5200:	465b      	mov	r3, fp
    5202:	2202      	movs	r2, #2
    5204:	a904      	add	r1, sp, #16
    5206:	4608      	mov	r0, r1
    5208:	f7ff fefc 	bl	5004 <sqr_n_mul_mont_383>
    520c:	f8cd 8004 	str.w	r8, [sp, #4]
    5210:	9600      	str	r6, [sp, #0]
    5212:	465b      	mov	r3, fp
    5214:	2206      	movs	r2, #6
    5216:	a904      	add	r1, sp, #16
    5218:	4608      	mov	r0, r1
    521a:	f7ff fef3 	bl	5004 <sqr_n_mul_mont_383>
    521e:	f8cd 8004 	str.w	r8, [sp, #4]
    5222:	9600      	str	r6, [sp, #0]
    5224:	465b      	mov	r3, fp
    5226:	2206      	movs	r2, #6
    5228:	a904      	add	r1, sp, #16
    522a:	4608      	mov	r0, r1
    522c:	f7ff feea 	bl	5004 <sqr_n_mul_mont_383>
    5230:	ab7c      	add	r3, sp, #496	; 0x1f0
    5232:	9301      	str	r3, [sp, #4]
    5234:	9600      	str	r6, [sp, #0]
    5236:	465b      	mov	r3, fp
    5238:	2206      	movs	r2, #6
    523a:	a904      	add	r1, sp, #16
    523c:	4608      	mov	r0, r1
    523e:	f7ff fee1 	bl	5004 <sqr_n_mul_mont_383>
    5242:	9501      	str	r5, [sp, #4]
    5244:	9600      	str	r6, [sp, #0]
    5246:	465b      	mov	r3, fp
    5248:	2203      	movs	r2, #3
    524a:	a904      	add	r1, sp, #16
    524c:	4608      	mov	r0, r1
    524e:	f7ff fed9 	bl	5004 <sqr_n_mul_mont_383>
    5252:	f8cd 8004 	str.w	r8, [sp, #4]
    5256:	9600      	str	r6, [sp, #0]
    5258:	465b      	mov	r3, fp
    525a:	2207      	movs	r2, #7
    525c:	a904      	add	r1, sp, #16
    525e:	4608      	mov	r0, r1
    5260:	f7ff fed0 	bl	5004 <sqr_n_mul_mont_383>
    5264:	f8cd 8004 	str.w	r8, [sp, #4]
    5268:	9600      	str	r6, [sp, #0]
    526a:	465b      	mov	r3, fp
    526c:	2204      	movs	r2, #4
    526e:	a904      	add	r1, sp, #16
    5270:	4608      	mov	r0, r1
    5272:	f7ff fec7 	bl	5004 <sqr_n_mul_mont_383>
    5276:	f8cd 9004 	str.w	r9, [sp, #4]
    527a:	9600      	str	r6, [sp, #0]
    527c:	465b      	mov	r3, fp
    527e:	2206      	movs	r2, #6
    5280:	a904      	add	r1, sp, #16
    5282:	4608      	mov	r0, r1
    5284:	f7ff febe 	bl	5004 <sqr_n_mul_mont_383>
    5288:	abac      	add	r3, sp, #688	; 0x2b0
    528a:	9301      	str	r3, [sp, #4]
    528c:	9600      	str	r6, [sp, #0]
    528e:	465b      	mov	r3, fp
    5290:	2206      	movs	r2, #6
    5292:	a904      	add	r1, sp, #16
    5294:	4608      	mov	r0, r1
    5296:	f7ff feb5 	bl	5004 <sqr_n_mul_mont_383>
    529a:	ab10      	add	r3, sp, #64	; 0x40
    529c:	9301      	str	r3, [sp, #4]
    529e:	9600      	str	r6, [sp, #0]
    52a0:	465b      	mov	r3, fp
    52a2:	2203      	movs	r2, #3
    52a4:	a904      	add	r1, sp, #16
    52a6:	4608      	mov	r0, r1
    52a8:	f7ff feac 	bl	5004 <sqr_n_mul_mont_383>
    52ac:	f8cd 8004 	str.w	r8, [sp, #4]
    52b0:	9600      	str	r6, [sp, #0]
    52b2:	465b      	mov	r3, fp
    52b4:	2208      	movs	r2, #8
    52b6:	a904      	add	r1, sp, #16
    52b8:	4608      	mov	r0, r1
    52ba:	f7ff fea3 	bl	5004 <sqr_n_mul_mont_383>
    52be:	ab94      	add	r3, sp, #592	; 0x250
    52c0:	9301      	str	r3, [sp, #4]
    52c2:	9600      	str	r6, [sp, #0]
    52c4:	465b      	mov	r3, fp
    52c6:	2207      	movs	r2, #7
    52c8:	a904      	add	r1, sp, #16
    52ca:	4608      	mov	r0, r1
    52cc:	f7ff fe9a 	bl	5004 <sqr_n_mul_mont_383>
    52d0:	aba0      	add	r3, sp, #640	; 0x280
    52d2:	9301      	str	r3, [sp, #4]
    52d4:	9600      	str	r6, [sp, #0]
    52d6:	465b      	mov	r3, fp
    52d8:	2205      	movs	r2, #5
    52da:	a904      	add	r1, sp, #16
    52dc:	4608      	mov	r0, r1
    52de:	f7ff fe91 	bl	5004 <sqr_n_mul_mont_383>
    52e2:	f8cd 8004 	str.w	r8, [sp, #4]
    52e6:	9600      	str	r6, [sp, #0]
    52e8:	465b      	mov	r3, fp
    52ea:	2206      	movs	r2, #6
    52ec:	a904      	add	r1, sp, #16
    52ee:	4608      	mov	r0, r1
    52f0:	f7ff fe88 	bl	5004 <sqr_n_mul_mont_383>
    52f4:	f8cd a004 	str.w	sl, [sp, #4]
    52f8:	9600      	str	r6, [sp, #0]
    52fa:	465b      	mov	r3, fp
    52fc:	2206      	movs	r2, #6
    52fe:	a904      	add	r1, sp, #16
    5300:	4608      	mov	r0, r1
    5302:	f7ff fe7f 	bl	5004 <sqr_n_mul_mont_383>
    5306:	ab7c      	add	r3, sp, #496	; 0x1f0
    5308:	9301      	str	r3, [sp, #4]
    530a:	9600      	str	r6, [sp, #0]
    530c:	465b      	mov	r3, fp
    530e:	2204      	movs	r2, #4
    5310:	a904      	add	r1, sp, #16
    5312:	4608      	mov	r0, r1
    5314:	f7ff fe76 	bl	5004 <sqr_n_mul_mont_383>
    5318:	f8cd a004 	str.w	sl, [sp, #4]
    531c:	9600      	str	r6, [sp, #0]
    531e:	465b      	mov	r3, fp
    5320:	2208      	movs	r2, #8
    5322:	a904      	add	r1, sp, #16
    5324:	4608      	mov	r0, r1
    5326:	f7ff fe6d 	bl	5004 <sqr_n_mul_mont_383>
    532a:	f8cd 8004 	str.w	r8, [sp, #4]
    532e:	9600      	str	r6, [sp, #0]
    5330:	465b      	mov	r3, fp
    5332:	2204      	movs	r2, #4
    5334:	a904      	add	r1, sp, #16
    5336:	4608      	mov	r0, r1
    5338:	f7ff fe64 	bl	5004 <sqr_n_mul_mont_383>
    533c:	ab94      	add	r3, sp, #592	; 0x250
    533e:	9301      	str	r3, [sp, #4]
    5340:	9600      	str	r6, [sp, #0]
    5342:	465b      	mov	r3, fp
    5344:	2207      	movs	r2, #7
    5346:	a904      	add	r1, sp, #16
    5348:	4608      	mov	r0, r1
    534a:	f7ff fe5b 	bl	5004 <sqr_n_mul_mont_383>
    534e:	e003      	b.n	5358 <flt_reciprocal_fp+0x30c>
    5350:	00015a08 	.word	0x00015a08
    5354:	fffcfffd 	.word	0xfffcfffd
    5358:	ab88      	add	r3, sp, #544	; 0x220
    535a:	9301      	str	r3, [sp, #4]
    535c:	9600      	str	r6, [sp, #0]
    535e:	465b      	mov	r3, fp
    5360:	2209      	movs	r2, #9
    5362:	a904      	add	r1, sp, #16
    5364:	4608      	mov	r0, r1
    5366:	f7ff fe4d 	bl	5004 <sqr_n_mul_mont_383>
    536a:	9501      	str	r5, [sp, #4]
    536c:	9600      	str	r6, [sp, #0]
    536e:	465b      	mov	r3, fp
    5370:	2202      	movs	r2, #2
    5372:	a904      	add	r1, sp, #16
    5374:	4608      	mov	r0, r1
    5376:	f7ff fe45 	bl	5004 <sqr_n_mul_mont_383>
    537a:	ab58      	add	r3, sp, #352	; 0x160
    537c:	9301      	str	r3, [sp, #4]
    537e:	9600      	str	r6, [sp, #0]
    5380:	465b      	mov	r3, fp
    5382:	2205      	movs	r2, #5
    5384:	a904      	add	r1, sp, #16
    5386:	4608      	mov	r0, r1
    5388:	f7ff fe3c 	bl	5004 <sqr_n_mul_mont_383>
    538c:	ab1c      	add	r3, sp, #112	; 0x70
    538e:	9301      	str	r3, [sp, #4]
    5390:	9600      	str	r6, [sp, #0]
    5392:	465b      	mov	r3, fp
    5394:	2207      	movs	r2, #7
    5396:	a904      	add	r1, sp, #16
    5398:	4608      	mov	r0, r1
    539a:	f7ff fe33 	bl	5004 <sqr_n_mul_mont_383>
    539e:	ab7c      	add	r3, sp, #496	; 0x1f0
    53a0:	9301      	str	r3, [sp, #4]
    53a2:	9600      	str	r6, [sp, #0]
    53a4:	465b      	mov	r3, fp
    53a6:	2207      	movs	r2, #7
    53a8:	a904      	add	r1, sp, #16
    53aa:	4608      	mov	r0, r1
    53ac:	f7ff fe2a 	bl	5004 <sqr_n_mul_mont_383>
    53b0:	ab94      	add	r3, sp, #592	; 0x250
    53b2:	9301      	str	r3, [sp, #4]
    53b4:	9600      	str	r6, [sp, #0]
    53b6:	465b      	mov	r3, fp
    53b8:	2206      	movs	r2, #6
    53ba:	a904      	add	r1, sp, #16
    53bc:	4608      	mov	r0, r1
    53be:	f7ff fe21 	bl	5004 <sqr_n_mul_mont_383>
    53c2:	f8cd a004 	str.w	sl, [sp, #4]
    53c6:	9600      	str	r6, [sp, #0]
    53c8:	465b      	mov	r3, fp
    53ca:	2205      	movs	r2, #5
    53cc:	a904      	add	r1, sp, #16
    53ce:	4608      	mov	r0, r1
    53d0:	f7ff fe18 	bl	5004 <sqr_n_mul_mont_383>
    53d4:	ab88      	add	r3, sp, #544	; 0x220
    53d6:	9301      	str	r3, [sp, #4]
    53d8:	9600      	str	r6, [sp, #0]
    53da:	465b      	mov	r3, fp
    53dc:	2205      	movs	r2, #5
    53de:	a904      	add	r1, sp, #16
    53e0:	4608      	mov	r0, r1
    53e2:	f7ff fe0f 	bl	5004 <sqr_n_mul_mont_383>
    53e6:	ab88      	add	r3, sp, #544	; 0x220
    53e8:	9301      	str	r3, [sp, #4]
    53ea:	9600      	str	r6, [sp, #0]
    53ec:	465b      	mov	r3, fp
    53ee:	2205      	movs	r2, #5
    53f0:	a904      	add	r1, sp, #16
    53f2:	4608      	mov	r0, r1
    53f4:	f7ff fe06 	bl	5004 <sqr_n_mul_mont_383>
    53f8:	f8cd 8004 	str.w	r8, [sp, #4]
    53fc:	9600      	str	r6, [sp, #0]
    53fe:	465b      	mov	r3, fp
    5400:	2208      	movs	r2, #8
    5402:	a904      	add	r1, sp, #16
    5404:	4608      	mov	r0, r1
    5406:	f7ff fdfd 	bl	5004 <sqr_n_mul_mont_383>
    540a:	ab28      	add	r3, sp, #160	; 0xa0
    540c:	9301      	str	r3, [sp, #4]
    540e:	9600      	str	r6, [sp, #0]
    5410:	465b      	mov	r3, fp
    5412:	2207      	movs	r2, #7
    5414:	a904      	add	r1, sp, #16
    5416:	4608      	mov	r0, r1
    5418:	f7ff fdf4 	bl	5004 <sqr_n_mul_mont_383>
    541c:	f8cd 9004 	str.w	r9, [sp, #4]
    5420:	9600      	str	r6, [sp, #0]
    5422:	465b      	mov	r3, fp
    5424:	2209      	movs	r2, #9
    5426:	a904      	add	r1, sp, #16
    5428:	4608      	mov	r0, r1
    542a:	f7ff fdeb 	bl	5004 <sqr_n_mul_mont_383>
    542e:	f8cd 8004 	str.w	r8, [sp, #4]
    5432:	9600      	str	r6, [sp, #0]
    5434:	465b      	mov	r3, fp
    5436:	2205      	movs	r2, #5
    5438:	a904      	add	r1, sp, #16
    543a:	4608      	mov	r0, r1
    543c:	f7ff fde2 	bl	5004 <sqr_n_mul_mont_383>
    5440:	9501      	str	r5, [sp, #4]
    5442:	9600      	str	r6, [sp, #0]
    5444:	465b      	mov	r3, fp
    5446:	2203      	movs	r2, #3
    5448:	a904      	add	r1, sp, #16
    544a:	4608      	mov	r0, r1
    544c:	f7ff fdda 	bl	5004 <sqr_n_mul_mont_383>
    5450:	f8cd 9004 	str.w	r9, [sp, #4]
    5454:	9600      	str	r6, [sp, #0]
    5456:	465b      	mov	r3, fp
    5458:	2208      	movs	r2, #8
    545a:	a904      	add	r1, sp, #16
    545c:	4608      	mov	r0, r1
    545e:	f7ff fdd1 	bl	5004 <sqr_n_mul_mont_383>
    5462:	9501      	str	r5, [sp, #4]
    5464:	9600      	str	r6, [sp, #0]
    5466:	465b      	mov	r3, fp
    5468:	2203      	movs	r2, #3
    546a:	a904      	add	r1, sp, #16
    546c:	4608      	mov	r0, r1
    546e:	f7ff fdc9 	bl	5004 <sqr_n_mul_mont_383>
    5472:	ab7c      	add	r3, sp, #496	; 0x1f0
    5474:	9301      	str	r3, [sp, #4]
    5476:	9600      	str	r6, [sp, #0]
    5478:	465b      	mov	r3, fp
    547a:	2207      	movs	r2, #7
    547c:	a904      	add	r1, sp, #16
    547e:	4608      	mov	r0, r1
    5480:	f7ff fdc0 	bl	5004 <sqr_n_mul_mont_383>
    5484:	f8cd 9004 	str.w	r9, [sp, #4]
    5488:	9600      	str	r6, [sp, #0]
    548a:	465b      	mov	r3, fp
    548c:	2209      	movs	r2, #9
    548e:	a904      	add	r1, sp, #16
    5490:	4608      	mov	r0, r1
    5492:	f7ff fdb7 	bl	5004 <sqr_n_mul_mont_383>
    5496:	ab28      	add	r3, sp, #160	; 0xa0
    5498:	9301      	str	r3, [sp, #4]
    549a:	9600      	str	r6, [sp, #0]
    549c:	465b      	mov	r3, fp
    549e:	2206      	movs	r2, #6
    54a0:	a904      	add	r1, sp, #16
    54a2:	4608      	mov	r0, r1
    54a4:	f7ff fdae 	bl	5004 <sqr_n_mul_mont_383>
    54a8:	9401      	str	r4, [sp, #4]
    54aa:	9600      	str	r6, [sp, #0]
    54ac:	465b      	mov	r3, fp
    54ae:	2206      	movs	r2, #6
    54b0:	a904      	add	r1, sp, #16
    54b2:	4608      	mov	r0, r1
    54b4:	f7ff fda6 	bl	5004 <sqr_n_mul_mont_383>
    54b8:	9401      	str	r4, [sp, #4]
    54ba:	9600      	str	r6, [sp, #0]
    54bc:	465b      	mov	r3, fp
    54be:	2205      	movs	r2, #5
    54c0:	a904      	add	r1, sp, #16
    54c2:	4608      	mov	r0, r1
    54c4:	f7ff fd9e 	bl	5004 <sqr_n_mul_mont_383>
    54c8:	9401      	str	r4, [sp, #4]
    54ca:	9600      	str	r6, [sp, #0]
    54cc:	465b      	mov	r3, fp
    54ce:	2205      	movs	r2, #5
    54d0:	a904      	add	r1, sp, #16
    54d2:	4608      	mov	r0, r1
    54d4:	f7ff fd96 	bl	5004 <sqr_n_mul_mont_383>
    54d8:	f8cd 8004 	str.w	r8, [sp, #4]
    54dc:	9600      	str	r6, [sp, #0]
    54de:	465b      	mov	r3, fp
    54e0:	2204      	movs	r2, #4
    54e2:	a904      	add	r1, sp, #16
    54e4:	4608      	mov	r0, r1
    54e6:	f7ff fd8d 	bl	5004 <sqr_n_mul_mont_383>
    54ea:	9501      	str	r5, [sp, #4]
    54ec:	9600      	str	r6, [sp, #0]
    54ee:	465b      	mov	r3, fp
    54f0:	2203      	movs	r2, #3
    54f2:	a904      	add	r1, sp, #16
    54f4:	4608      	mov	r0, r1
    54f6:	f7ff fd85 	bl	5004 <sqr_n_mul_mont_383>
    54fa:	ab28      	add	r3, sp, #160	; 0xa0
    54fc:	9301      	str	r3, [sp, #4]
    54fe:	9600      	str	r6, [sp, #0]
    5500:	465b      	mov	r3, fp
    5502:	2208      	movs	r2, #8
    5504:	a904      	add	r1, sp, #16
    5506:	4608      	mov	r0, r1
    5508:	f7ff fd7c 	bl	5004 <sqr_n_mul_mont_383>
    550c:	9401      	str	r4, [sp, #4]
    550e:	9600      	str	r6, [sp, #0]
    5510:	465b      	mov	r3, fp
    5512:	2207      	movs	r2, #7
    5514:	a904      	add	r1, sp, #16
    5516:	4608      	mov	r0, r1
    5518:	f7ff fd74 	bl	5004 <sqr_n_mul_mont_383>
    551c:	9401      	str	r4, [sp, #4]
    551e:	9600      	str	r6, [sp, #0]
    5520:	465b      	mov	r3, fp
    5522:	2205      	movs	r2, #5
    5524:	a904      	add	r1, sp, #16
    5526:	4608      	mov	r0, r1
    5528:	f7ff fd6c 	bl	5004 <sqr_n_mul_mont_383>
    552c:	9401      	str	r4, [sp, #4]
    552e:	9600      	str	r6, [sp, #0]
    5530:	465b      	mov	r3, fp
    5532:	2205      	movs	r2, #5
    5534:	a904      	add	r1, sp, #16
    5536:	4608      	mov	r0, r1
    5538:	f7ff fd64 	bl	5004 <sqr_n_mul_mont_383>
    553c:	f8cd 9004 	str.w	r9, [sp, #4]
    5540:	9600      	str	r6, [sp, #0]
    5542:	465b      	mov	r3, fp
    5544:	2204      	movs	r2, #4
    5546:	a904      	add	r1, sp, #16
    5548:	4608      	mov	r0, r1
    554a:	f7ff fd5b 	bl	5004 <sqr_n_mul_mont_383>
    554e:	ab58      	add	r3, sp, #352	; 0x160
    5550:	9301      	str	r3, [sp, #4]
    5552:	9600      	str	r6, [sp, #0]
    5554:	465b      	mov	r3, fp
    5556:	2204      	movs	r2, #4
    5558:	a904      	add	r1, sp, #16
    555a:	4608      	mov	r0, r1
    555c:	f7ff fd52 	bl	5004 <sqr_n_mul_mont_383>
    5560:	9401      	str	r4, [sp, #4]
    5562:	9600      	str	r6, [sp, #0]
    5564:	465b      	mov	r3, fp
    5566:	2207      	movs	r2, #7
    5568:	a904      	add	r1, sp, #16
    556a:	4608      	mov	r0, r1
    556c:	f7ff fd4a 	bl	5004 <sqr_n_mul_mont_383>
    5570:	f8cd a004 	str.w	sl, [sp, #4]
    5574:	9600      	str	r6, [sp, #0]
    5576:	465b      	mov	r3, fp
    5578:	2205      	movs	r2, #5
    557a:	a904      	add	r1, sp, #16
    557c:	4608      	mov	r0, r1
    557e:	f7ff fd41 	bl	5004 <sqr_n_mul_mont_383>
    5582:	ae40      	add	r6, sp, #256	; 0x100
    5584:	9601      	str	r6, [sp, #4]
    5586:	4d2c      	ldr	r5, [pc, #176]	; (5638 <flt_reciprocal_fp+0x5ec>)
    5588:	9500      	str	r5, [sp, #0]
    558a:	465b      	mov	r3, fp
    558c:	2205      	movs	r2, #5
    558e:	a904      	add	r1, sp, #16
    5590:	4608      	mov	r0, r1
    5592:	f7ff fd37 	bl	5004 <sqr_n_mul_mont_383>
    5596:	9601      	str	r6, [sp, #4]
    5598:	9500      	str	r5, [sp, #0]
    559a:	465b      	mov	r3, fp
    559c:	2205      	movs	r2, #5
    559e:	a904      	add	r1, sp, #16
    55a0:	4608      	mov	r0, r1
    55a2:	f7ff fd2f 	bl	5004 <sqr_n_mul_mont_383>
    55a6:	9601      	str	r6, [sp, #4]
    55a8:	9500      	str	r5, [sp, #0]
    55aa:	465b      	mov	r3, fp
    55ac:	2205      	movs	r2, #5
    55ae:	a904      	add	r1, sp, #16
    55b0:	4608      	mov	r0, r1
    55b2:	f7ff fd27 	bl	5004 <sqr_n_mul_mont_383>
    55b6:	9601      	str	r6, [sp, #4]
    55b8:	9500      	str	r5, [sp, #0]
    55ba:	465b      	mov	r3, fp
    55bc:	2205      	movs	r2, #5
    55be:	a904      	add	r1, sp, #16
    55c0:	4608      	mov	r0, r1
    55c2:	f7ff fd1f 	bl	5004 <sqr_n_mul_mont_383>
    55c6:	9601      	str	r6, [sp, #4]
    55c8:	9500      	str	r5, [sp, #0]
    55ca:	465b      	mov	r3, fp
    55cc:	2205      	movs	r2, #5
    55ce:	a904      	add	r1, sp, #16
    55d0:	4608      	mov	r0, r1
    55d2:	f7ff fd17 	bl	5004 <sqr_n_mul_mont_383>
    55d6:	9601      	str	r6, [sp, #4]
    55d8:	9500      	str	r5, [sp, #0]
    55da:	465b      	mov	r3, fp
    55dc:	2205      	movs	r2, #5
    55de:	a904      	add	r1, sp, #16
    55e0:	4608      	mov	r0, r1
    55e2:	f7ff fd0f 	bl	5004 <sqr_n_mul_mont_383>
    55e6:	f8cd 8004 	str.w	r8, [sp, #4]
    55ea:	9500      	str	r5, [sp, #0]
    55ec:	465b      	mov	r3, fp
    55ee:	2204      	movs	r2, #4
    55f0:	a904      	add	r1, sp, #16
    55f2:	4608      	mov	r0, r1
    55f4:	f7ff fd06 	bl	5004 <sqr_n_mul_mont_383>
    55f8:	ab28      	add	r3, sp, #160	; 0xa0
    55fa:	9301      	str	r3, [sp, #4]
    55fc:	9500      	str	r5, [sp, #0]
    55fe:	465b      	mov	r3, fp
    5600:	2206      	movs	r2, #6
    5602:	a904      	add	r1, sp, #16
    5604:	4608      	mov	r0, r1
    5606:	f7ff fcfd 	bl	5004 <sqr_n_mul_mont_383>
    560a:	ab1c      	add	r3, sp, #112	; 0x70
    560c:	9301      	str	r3, [sp, #4]
    560e:	9500      	str	r5, [sp, #0]
    5610:	465b      	mov	r3, fp
    5612:	2204      	movs	r2, #4
    5614:	a904      	add	r1, sp, #16
    5616:	4608      	mov	r0, r1
    5618:	f7ff fcf4 	bl	5004 <sqr_n_mul_mont_383>
    561c:	ab10      	add	r3, sp, #64	; 0x40
    561e:	9301      	str	r3, [sp, #4]
    5620:	9500      	str	r5, [sp, #0]
    5622:	465b      	mov	r3, fp
    5624:	2203      	movs	r2, #3
    5626:	a904      	add	r1, sp, #16
    5628:	9803      	ldr	r0, [sp, #12]
    562a:	f7ff fceb 	bl	5004 <sqr_n_mul_mont_383>
    562e:	f50d 7d45 	add.w	sp, sp, #788	; 0x314
    5632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5636:	bf00      	nop
    5638:	fffcfffd 	.word	0xfffcfffd

0000563c <reciprocal_fp>:
    563c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5640:	b09b      	sub	sp, #108	; 0x6c
    5642:	4606      	mov	r6, r0
    5644:	460f      	mov	r7, r1
    5646:	f8df 9094 	ldr.w	r9, [pc, #148]	; 56dc <reciprocal_fp+0xa0>
    564a:	4d25      	ldr	r5, [pc, #148]	; (56e0 <reciprocal_fp+0xa4>)
    564c:	240c      	movs	r4, #12
    564e:	9400      	str	r4, [sp, #0]
    5650:	f509 739c 	add.w	r3, r9, #312	; 0x138
    5654:	462a      	mov	r2, r5
    5656:	a802      	add	r0, sp, #8
    5658:	f7fe f88c 	bl	3774 <ct_inverse_mod_n>
    565c:	f8df 8084 	ldr.w	r8, [pc, #132]	; 56e4 <reciprocal_fp+0xa8>
    5660:	9400      	str	r4, [sp, #0]
    5662:	4643      	mov	r3, r8
    5664:	462a      	mov	r2, r5
    5666:	a902      	add	r1, sp, #8
    5668:	4608      	mov	r0, r1
    566a:	f7fb fd10 	bl	108e <redc_mont_n>
    566e:	9401      	str	r4, [sp, #4]
    5670:	f8cd 8000 	str.w	r8, [sp]
    5674:	462b      	mov	r3, r5
    5676:	f509 72b4 	add.w	r2, r9, #360	; 0x168
    567a:	a902      	add	r1, sp, #8
    567c:	4608      	mov	r0, r1
    567e:	f7fb f955 	bl	92c <mul_mont_n>
    5682:	9401      	str	r4, [sp, #4]
    5684:	f8cd 8000 	str.w	r8, [sp]
    5688:	462b      	mov	r3, r5
    568a:	463a      	mov	r2, r7
    568c:	a902      	add	r1, sp, #8
    568e:	a80e      	add	r0, sp, #56	; 0x38
    5690:	f7fb f94c 	bl	92c <mul_mont_n>
    5694:	ac0d      	add	r4, sp, #52	; 0x34
    5696:	f105 0e90 	add.w	lr, r5, #144	; 0x90
    569a:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
    569e:	2200      	movs	r2, #0
    56a0:	f85e 3b04 	ldr.w	r3, [lr], #4
    56a4:	f854 5f04 	ldr.w	r5, [r4, #4]!
    56a8:	ea83 0c05 	eor.w	ip, r3, r5
    56ac:	ea42 020c 	orr.w	r2, r2, ip
    56b0:	458e      	cmp	lr, r1
    56b2:	d1f5      	bne.n	56a0 <reciprocal_fp+0x64>
    56b4:	1e53      	subs	r3, r2, #1
    56b6:	4393      	bics	r3, r2
    56b8:	d50b      	bpl.n	56d2 <reciprocal_fp+0x96>
    56ba:	aa02      	add	r2, sp, #8
    56bc:	1f33      	subs	r3, r6, #4
    56be:	362c      	adds	r6, #44	; 0x2c
    56c0:	f852 1b04 	ldr.w	r1, [r2], #4
    56c4:	f843 1f04 	str.w	r1, [r3, #4]!
    56c8:	42b3      	cmp	r3, r6
    56ca:	d1f9      	bne.n	56c0 <reciprocal_fp+0x84>
    56cc:	b01b      	add	sp, #108	; 0x6c
    56ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    56d2:	4639      	mov	r1, r7
    56d4:	4630      	mov	r0, r6
    56d6:	f7ff fcb9 	bl	504c <flt_reciprocal_fp>
    56da:	e7f7      	b.n	56cc <reciprocal_fp+0x90>
    56dc:	00016b00 	.word	0x00016b00
    56e0:	00015a08 	.word	0x00015a08
    56e4:	fffcfffd 	.word	0xfffcfffd

000056e8 <POINTonE1_from_Jacobian>:
    56e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    56ec:	b09b      	sub	sp, #108	; 0x6c
    56ee:	4607      	mov	r7, r0
    56f0:	4689      	mov	r9, r1
    56f2:	3160      	adds	r1, #96	; 0x60
    56f4:	f109 045c 	add.w	r4, r9, #92	; 0x5c
    56f8:	f109 058c 	add.w	r5, r9, #140	; 0x8c
    56fc:	4623      	mov	r3, r4
    56fe:	f04f 0800 	mov.w	r8, #0
    5702:	f853 2f04 	ldr.w	r2, [r3, #4]!
    5706:	ea48 0802 	orr.w	r8, r8, r2
    570a:	42ab      	cmp	r3, r5
    570c:	d1f9      	bne.n	5702 <POINTonE1_from_Jacobian+0x1a>
    570e:	a80e      	add	r0, sp, #56	; 0x38
    5710:	f7ff ff94 	bl	563c <reciprocal_fp>
    5714:	4e23      	ldr	r6, [pc, #140]	; (57a4 <POINTonE1_from_Jacobian+0xbc>)
    5716:	f04f 0b0c 	mov.w	fp, #12
    571a:	f8cd b004 	str.w	fp, [sp, #4]
    571e:	f8df a088 	ldr.w	sl, [pc, #136]	; 57a8 <POINTonE1_from_Jacobian+0xc0>
    5722:	f8cd a000 	str.w	sl, [sp]
    5726:	4633      	mov	r3, r6
    5728:	aa0e      	add	r2, sp, #56	; 0x38
    572a:	4611      	mov	r1, r2
    572c:	a802      	add	r0, sp, #8
    572e:	f7fb f8fd 	bl	92c <mul_mont_n>
    5732:	f8cd b004 	str.w	fp, [sp, #4]
    5736:	f8cd a000 	str.w	sl, [sp]
    573a:	4633      	mov	r3, r6
    573c:	aa02      	add	r2, sp, #8
    573e:	4649      	mov	r1, r9
    5740:	4638      	mov	r0, r7
    5742:	f7fb f8f3 	bl	92c <mul_mont_n>
    5746:	f8cd b004 	str.w	fp, [sp, #4]
    574a:	f8cd a000 	str.w	sl, [sp]
    574e:	4633      	mov	r3, r6
    5750:	aa0e      	add	r2, sp, #56	; 0x38
    5752:	a902      	add	r1, sp, #8
    5754:	4608      	mov	r0, r1
    5756:	f7fb f8e9 	bl	92c <mul_mont_n>
    575a:	f8cd b004 	str.w	fp, [sp, #4]
    575e:	f8cd a000 	str.w	sl, [sp]
    5762:	4633      	mov	r3, r6
    5764:	aa02      	add	r2, sp, #8
    5766:	f109 0130 	add.w	r1, r9, #48	; 0x30
    576a:	f107 0030 	add.w	r0, r7, #48	; 0x30
    576e:	f7fb f8dd 	bl	92c <mul_mont_n>
    5772:	f108 33ff 	add.w	r3, r8, #4294967295
    5776:	ea23 0808 	bic.w	r8, r3, r8
    577a:	ea4f 78e8 	mov.w	r8, r8, asr #31
    577e:	f606 534c 	addw	r3, r6, #3404	; 0xd4c
    5782:	f107 005c 	add.w	r0, r7, #92	; 0x5c
    5786:	f853 1f04 	ldr.w	r1, [r3, #4]!
    578a:	f854 2f04 	ldr.w	r2, [r4, #4]!
    578e:	404a      	eors	r2, r1
    5790:	ea02 0208 	and.w	r2, r2, r8
    5794:	404a      	eors	r2, r1
    5796:	f840 2f04 	str.w	r2, [r0, #4]!
    579a:	42ac      	cmp	r4, r5
    579c:	d1f3      	bne.n	5786 <POINTonE1_from_Jacobian+0x9e>
    579e:	b01b      	add	sp, #108	; 0x6c
    57a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    57a4:	00015a08 	.word	0x00015a08
    57a8:	fffcfffd 	.word	0xfffcfffd

000057ac <blst_p1_from_jacobian>:
    57ac:	b508      	push	{r3, lr}
    57ae:	f7ff ff9b 	bl	56e8 <POINTonE1_from_Jacobian>
    57b2:	bd08      	pop	{r3, pc}

000057b4 <blst_p1_to_affine>:
    57b4:	b570      	push	{r4, r5, r6, lr}
    57b6:	b0a4      	sub	sp, #144	; 0x90
    57b8:	4604      	mov	r4, r0
    57ba:	f101 025c 	add.w	r2, r1, #92	; 0x5c
    57be:	4d0f      	ldr	r5, [pc, #60]	; (57fc <blst_p1_to_affine+0x48>)
    57c0:	f101 0c8c 	add.w	ip, r1, #140	; 0x8c
    57c4:	2000      	movs	r0, #0
    57c6:	f855 3b04 	ldr.w	r3, [r5], #4
    57ca:	f852 6f04 	ldr.w	r6, [r2, #4]!
    57ce:	4073      	eors	r3, r6
    57d0:	4318      	orrs	r0, r3
    57d2:	4562      	cmp	r2, ip
    57d4:	d1f7      	bne.n	57c6 <blst_p1_to_affine+0x12>
    57d6:	1e43      	subs	r3, r0, #1
    57d8:	4383      	bics	r3, r0
    57da:	d50a      	bpl.n	57f2 <blst_p1_to_affine+0x3e>
    57dc:	1f0b      	subs	r3, r1, #4
    57de:	1f20      	subs	r0, r4, #4
    57e0:	315c      	adds	r1, #92	; 0x5c
    57e2:	f853 2f04 	ldr.w	r2, [r3, #4]!
    57e6:	f840 2f04 	str.w	r2, [r0, #4]!
    57ea:	428b      	cmp	r3, r1
    57ec:	d1f9      	bne.n	57e2 <blst_p1_to_affine+0x2e>
    57ee:	b024      	add	sp, #144	; 0x90
    57f0:	bd70      	pop	{r4, r5, r6, pc}
    57f2:	4668      	mov	r0, sp
    57f4:	f7ff ff78 	bl	56e8 <POINTonE1_from_Jacobian>
    57f8:	4669      	mov	r1, sp
    57fa:	e7ef      	b.n	57dc <blst_p1_to_affine+0x28>
    57fc:	00015a98 	.word	0x00015a98

00005800 <POINTonE1_Serialize_BE>:
    5800:	b570      	push	{r4, r5, r6, lr}
    5802:	b0a4      	sub	sp, #144	; 0x90
    5804:	4606      	mov	r6, r0
    5806:	f101 025c 	add.w	r2, r1, #92	; 0x5c
    580a:	4c0e      	ldr	r4, [pc, #56]	; (5844 <POINTonE1_Serialize_BE+0x44>)
    580c:	f101 0e8c 	add.w	lr, r1, #140	; 0x8c
    5810:	f04f 0c00 	mov.w	ip, #0
    5814:	f854 3b04 	ldr.w	r3, [r4], #4
    5818:	f852 5f04 	ldr.w	r5, [r2, #4]!
    581c:	406b      	eors	r3, r5
    581e:	ea4c 0c03 	orr.w	ip, ip, r3
    5822:	4572      	cmp	r2, lr
    5824:	d1f6      	bne.n	5814 <POINTonE1_Serialize_BE+0x14>
    5826:	f10c 33ff 	add.w	r3, ip, #4294967295
    582a:	ea33 030c 	bics.w	r3, r3, ip
    582e:	d504      	bpl.n	583a <POINTonE1_Serialize_BE+0x3a>
    5830:	4630      	mov	r0, r6
    5832:	f7fb fee7 	bl	1604 <POINTonE1_affine_Serialize_BE>
    5836:	b024      	add	sp, #144	; 0x90
    5838:	bd70      	pop	{r4, r5, r6, pc}
    583a:	4668      	mov	r0, sp
    583c:	f7ff ff54 	bl	56e8 <POINTonE1_from_Jacobian>
    5840:	4669      	mov	r1, sp
    5842:	e7f5      	b.n	5830 <POINTonE1_Serialize_BE+0x30>
    5844:	00015a98 	.word	0x00015a98

00005848 <blst_p1_serialize>:
    5848:	b510      	push	{r4, lr}
    584a:	f101 035c 	add.w	r3, r1, #92	; 0x5c
    584e:	f101 0c8c 	add.w	ip, r1, #140	; 0x8c
    5852:	2200      	movs	r2, #0
    5854:	f853 4f04 	ldr.w	r4, [r3, #4]!
    5858:	4322      	orrs	r2, r4
    585a:	4563      	cmp	r3, ip
    585c:	d1fa      	bne.n	5854 <blst_p1_serialize+0xc>
    585e:	1e53      	subs	r3, r2, #1
    5860:	4393      	bics	r3, r2
    5862:	d50a      	bpl.n	587a <blst_p1_serialize+0x32>
    5864:	1e43      	subs	r3, r0, #1
    5866:	f100 015f 	add.w	r1, r0, #95	; 0x5f
    586a:	2200      	movs	r2, #0
    586c:	f803 2f01 	strb.w	r2, [r3, #1]!
    5870:	428b      	cmp	r3, r1
    5872:	d1fb      	bne.n	586c <blst_p1_serialize+0x24>
    5874:	2340      	movs	r3, #64	; 0x40
    5876:	7003      	strb	r3, [r0, #0]
    5878:	bd10      	pop	{r4, pc}
    587a:	f7ff ffc1 	bl	5800 <POINTonE1_Serialize_BE>
    587e:	e7fb      	b.n	5878 <blst_p1_serialize+0x30>

00005880 <blst_p1_compress>:
    5880:	b570      	push	{r4, r5, r6, lr}
    5882:	b0a4      	sub	sp, #144	; 0x90
    5884:	4605      	mov	r5, r0
    5886:	f101 0c5c 	add.w	ip, r1, #92	; 0x5c
    588a:	f101 008c 	add.w	r0, r1, #140	; 0x8c
    588e:	4663      	mov	r3, ip
    5890:	2200      	movs	r2, #0
    5892:	f853 4f04 	ldr.w	r4, [r3, #4]!
    5896:	4322      	orrs	r2, r4
    5898:	4283      	cmp	r3, r0
    589a:	d1fa      	bne.n	5892 <blst_p1_compress+0x12>
    589c:	1e53      	subs	r3, r2, #1
    589e:	ea23 0202 	bic.w	r2, r3, r2
    58a2:	0fd2      	lsrs	r2, r2, #31
    58a4:	d00b      	beq.n	58be <blst_p1_compress+0x3e>
    58a6:	1e6b      	subs	r3, r5, #1
    58a8:	f105 012f 	add.w	r1, r5, #47	; 0x2f
    58ac:	2200      	movs	r2, #0
    58ae:	f803 2f01 	strb.w	r2, [r3, #1]!
    58b2:	428b      	cmp	r3, r1
    58b4:	d1fb      	bne.n	58ae <blst_p1_compress+0x2e>
    58b6:	23c0      	movs	r3, #192	; 0xc0
    58b8:	702b      	strb	r3, [r5, #0]
    58ba:	b024      	add	sp, #144	; 0x90
    58bc:	bd70      	pop	{r4, r5, r6, pc}
    58be:	4c0e      	ldr	r4, [pc, #56]	; (58f8 <blst_p1_compress+0x78>)
    58c0:	f854 3b04 	ldr.w	r3, [r4], #4
    58c4:	f85c 6f04 	ldr.w	r6, [ip, #4]!
    58c8:	4073      	eors	r3, r6
    58ca:	431a      	orrs	r2, r3
    58cc:	4584      	cmp	ip, r0
    58ce:	d1f7      	bne.n	58c0 <blst_p1_compress+0x40>
    58d0:	1e53      	subs	r3, r2, #1
    58d2:	4393      	bics	r3, r2
    58d4:	d50b      	bpl.n	58ee <blst_p1_compress+0x6e>
    58d6:	4628      	mov	r0, r5
    58d8:	f7fb fe5f 	bl	159a <POINTonE1_affine_Compress_BE>
    58dc:	0103      	lsls	r3, r0, #4
    58de:	f003 0320 	and.w	r3, r3, #32
    58e2:	782a      	ldrb	r2, [r5, #0]
    58e4:	4313      	orrs	r3, r2
    58e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    58ea:	702b      	strb	r3, [r5, #0]
    58ec:	e7e5      	b.n	58ba <blst_p1_compress+0x3a>
    58ee:	4668      	mov	r0, sp
    58f0:	f7ff fefa 	bl	56e8 <POINTonE1_from_Jacobian>
    58f4:	4669      	mov	r1, sp
    58f6:	e7ee      	b.n	58d6 <blst_p1_compress+0x56>
    58f8:	00015a98 	.word	0x00015a98

000058fc <reciprocal_fp2>:
    58fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5900:	b09b      	sub	sp, #108	; 0x6c
    5902:	4604      	mov	r4, r0
    5904:	460f      	mov	r7, r1
    5906:	4d1f      	ldr	r5, [pc, #124]	; (5984 <reciprocal_fp2+0x88>)
    5908:	260c      	movs	r6, #12
    590a:	9601      	str	r6, [sp, #4]
    590c:	f8df 8078 	ldr.w	r8, [pc, #120]	; 5988 <reciprocal_fp2+0x8c>
    5910:	f8cd 8000 	str.w	r8, [sp]
    5914:	462b      	mov	r3, r5
    5916:	460a      	mov	r2, r1
    5918:	a80e      	add	r0, sp, #56	; 0x38
    591a:	f7fb f807 	bl	92c <mul_mont_n>
    591e:	f107 0930 	add.w	r9, r7, #48	; 0x30
    5922:	9601      	str	r6, [sp, #4]
    5924:	f8cd 8000 	str.w	r8, [sp]
    5928:	462b      	mov	r3, r5
    592a:	464a      	mov	r2, r9
    592c:	4649      	mov	r1, r9
    592e:	a802      	add	r0, sp, #8
    5930:	f7fa fffc 	bl	92c <mul_mont_n>
    5934:	9600      	str	r6, [sp, #0]
    5936:	462b      	mov	r3, r5
    5938:	aa02      	add	r2, sp, #8
    593a:	a90e      	add	r1, sp, #56	; 0x38
    593c:	4608      	mov	r0, r1
    593e:	f7fb f99d 	bl	c7c <add_mod_n>
    5942:	a90e      	add	r1, sp, #56	; 0x38
    5944:	a802      	add	r0, sp, #8
    5946:	f7ff fe79 	bl	563c <reciprocal_fp>
    594a:	9601      	str	r6, [sp, #4]
    594c:	f8cd 8000 	str.w	r8, [sp]
    5950:	462b      	mov	r3, r5
    5952:	aa02      	add	r2, sp, #8
    5954:	4639      	mov	r1, r7
    5956:	4620      	mov	r0, r4
    5958:	f7fa ffe8 	bl	92c <mul_mont_n>
    595c:	3430      	adds	r4, #48	; 0x30
    595e:	9601      	str	r6, [sp, #4]
    5960:	f8cd 8000 	str.w	r8, [sp]
    5964:	462b      	mov	r3, r5
    5966:	aa02      	add	r2, sp, #8
    5968:	4649      	mov	r1, r9
    596a:	4620      	mov	r0, r4
    596c:	f7fa ffde 	bl	92c <mul_mont_n>
    5970:	9600      	str	r6, [sp, #0]
    5972:	462b      	mov	r3, r5
    5974:	2201      	movs	r2, #1
    5976:	4621      	mov	r1, r4
    5978:	4620      	mov	r0, r4
    597a:	f7fc f813 	bl	19a4 <cneg_mod_n>
    597e:	b01b      	add	sp, #108	; 0x6c
    5980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5984:	00015a08 	.word	0x00015a08
    5988:	fffcfffd 	.word	0xfffcfffd

0000598c <blst_fp2_inverse>:
    598c:	b508      	push	{r3, lr}
    598e:	f7ff ffb5 	bl	58fc <reciprocal_fp2>
    5992:	bd08      	pop	{r3, pc}

00005994 <blst_fp2_eucl_inverse>:
    5994:	b508      	push	{r3, lr}
    5996:	f7ff ffb1 	bl	58fc <reciprocal_fp2>
    599a:	bd08      	pop	{r3, pc}

0000599c <blst_fp_inverse>:
    599c:	b508      	push	{r3, lr}
    599e:	f7ff fe4d 	bl	563c <reciprocal_fp>
    59a2:	bd08      	pop	{r3, pc}

000059a4 <blst_fp_eucl_inverse>:
    59a4:	b508      	push	{r3, lr}
    59a6:	f7ff fe49 	bl	563c <reciprocal_fp>
    59aa:	bd08      	pop	{r3, pc}

000059ac <recip_sqrt_fp_3mod4>:
    59ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    59b0:	f5ad 7d45 	sub.w	sp, sp, #788	; 0x314
    59b4:	9003      	str	r0, [sp, #12]
    59b6:	1f0b      	subs	r3, r1, #4
    59b8:	aa9f      	add	r2, sp, #636	; 0x27c
    59ba:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    59be:	f853 1f04 	ldr.w	r1, [r3, #4]!
    59c2:	f842 1f04 	str.w	r1, [r2, #4]!
    59c6:	4283      	cmp	r3, r0
    59c8:	d1f9      	bne.n	59be <recip_sqrt_fp_3mod4+0x12>
    59ca:	f8df b2e4 	ldr.w	fp, [pc, #740]	; 5cb0 <recip_sqrt_fp_3mod4+0x304>
    59ce:	270c      	movs	r7, #12
    59d0:	9701      	str	r7, [sp, #4]
    59d2:	4eb8      	ldr	r6, [pc, #736]	; (5cb4 <recip_sqrt_fp_3mod4+0x308>)
    59d4:	9600      	str	r6, [sp, #0]
    59d6:	465b      	mov	r3, fp
    59d8:	aaa0      	add	r2, sp, #640	; 0x280
    59da:	4611      	mov	r1, r2
    59dc:	a804      	add	r0, sp, #16
    59de:	f7fa ffa5 	bl	92c <mul_mont_n>
    59e2:	ad64      	add	r5, sp, #400	; 0x190
    59e4:	9701      	str	r7, [sp, #4]
    59e6:	9600      	str	r6, [sp, #0]
    59e8:	465b      	mov	r3, fp
    59ea:	aaa0      	add	r2, sp, #640	; 0x280
    59ec:	a904      	add	r1, sp, #16
    59ee:	4628      	mov	r0, r5
    59f0:	f7fa ff9c 	bl	92c <mul_mont_n>
    59f4:	ac34      	add	r4, sp, #208	; 0xd0
    59f6:	9701      	str	r7, [sp, #4]
    59f8:	9600      	str	r6, [sp, #0]
    59fa:	465b      	mov	r3, fp
    59fc:	aa04      	add	r2, sp, #16
    59fe:	4611      	mov	r1, r2
    5a00:	4620      	mov	r0, r4
    5a02:	f7fa ff93 	bl	92c <mul_mont_n>
    5a06:	9701      	str	r7, [sp, #4]
    5a08:	9600      	str	r6, [sp, #0]
    5a0a:	465b      	mov	r3, fp
    5a0c:	aa04      	add	r2, sp, #16
    5a0e:	4629      	mov	r1, r5
    5a10:	a810      	add	r0, sp, #64	; 0x40
    5a12:	f7fa ff8b 	bl	92c <mul_mont_n>
    5a16:	9701      	str	r7, [sp, #4]
    5a18:	9600      	str	r6, [sp, #0]
    5a1a:	465b      	mov	r3, fp
    5a1c:	462a      	mov	r2, r5
    5a1e:	4621      	mov	r1, r4
    5a20:	a84c      	add	r0, sp, #304	; 0x130
    5a22:	f7fa ff83 	bl	92c <mul_mont_n>
    5a26:	9701      	str	r7, [sp, #4]
    5a28:	9600      	str	r6, [sp, #0]
    5a2a:	465b      	mov	r3, fp
    5a2c:	4622      	mov	r2, r4
    5a2e:	a910      	add	r1, sp, #64	; 0x40
    5a30:	a870      	add	r0, sp, #448	; 0x1c0
    5a32:	f7fa ff7b 	bl	92c <mul_mont_n>
    5a36:	9701      	str	r7, [sp, #4]
    5a38:	9600      	str	r6, [sp, #0]
    5a3a:	465b      	mov	r3, fp
    5a3c:	4622      	mov	r2, r4
    5a3e:	a94c      	add	r1, sp, #304	; 0x130
    5a40:	a894      	add	r0, sp, #592	; 0x250
    5a42:	f7fa ff73 	bl	92c <mul_mont_n>
    5a46:	f10d 08a0 	add.w	r8, sp, #160	; 0xa0
    5a4a:	9701      	str	r7, [sp, #4]
    5a4c:	9600      	str	r6, [sp, #0]
    5a4e:	465b      	mov	r3, fp
    5a50:	4622      	mov	r2, r4
    5a52:	a970      	add	r1, sp, #448	; 0x1c0
    5a54:	4640      	mov	r0, r8
    5a56:	f7fa ff69 	bl	92c <mul_mont_n>
    5a5a:	f50d 79b0 	add.w	r9, sp, #352	; 0x160
    5a5e:	9701      	str	r7, [sp, #4]
    5a60:	9600      	str	r6, [sp, #0]
    5a62:	465b      	mov	r3, fp
    5a64:	4622      	mov	r2, r4
    5a66:	a994      	add	r1, sp, #592	; 0x250
    5a68:	4648      	mov	r0, r9
    5a6a:	f7fa ff5f 	bl	92c <mul_mont_n>
    5a6e:	9701      	str	r7, [sp, #4]
    5a70:	9600      	str	r6, [sp, #0]
    5a72:	465b      	mov	r3, fp
    5a74:	4622      	mov	r2, r4
    5a76:	4641      	mov	r1, r8
    5a78:	a8b8      	add	r0, sp, #736	; 0x2e0
    5a7a:	f7fa ff57 	bl	92c <mul_mont_n>
    5a7e:	9701      	str	r7, [sp, #4]
    5a80:	9600      	str	r6, [sp, #0]
    5a82:	465b      	mov	r3, fp
    5a84:	4622      	mov	r2, r4
    5a86:	4649      	mov	r1, r9
    5a88:	a87c      	add	r0, sp, #496	; 0x1f0
    5a8a:	f7fa ff4f 	bl	92c <mul_mont_n>
    5a8e:	9701      	str	r7, [sp, #4]
    5a90:	9600      	str	r6, [sp, #0]
    5a92:	465b      	mov	r3, fp
    5a94:	4622      	mov	r2, r4
    5a96:	a9b8      	add	r1, sp, #736	; 0x2e0
    5a98:	a81c      	add	r0, sp, #112	; 0x70
    5a9a:	f7fa ff47 	bl	92c <mul_mont_n>
    5a9e:	9701      	str	r7, [sp, #4]
    5aa0:	9600      	str	r6, [sp, #0]
    5aa2:	465b      	mov	r3, fp
    5aa4:	4622      	mov	r2, r4
    5aa6:	a97c      	add	r1, sp, #496	; 0x1f0
    5aa8:	a888      	add	r0, sp, #544	; 0x220
    5aaa:	f7fa ff3f 	bl	92c <mul_mont_n>
    5aae:	9701      	str	r7, [sp, #4]
    5ab0:	9600      	str	r6, [sp, #0]
    5ab2:	465b      	mov	r3, fp
    5ab4:	4642      	mov	r2, r8
    5ab6:	4641      	mov	r1, r8
    5ab8:	a804      	add	r0, sp, #16
    5aba:	f7fa ff37 	bl	92c <mul_mont_n>
    5abe:	9701      	str	r7, [sp, #4]
    5ac0:	9600      	str	r6, [sp, #0]
    5ac2:	465b      	mov	r3, fp
    5ac4:	4622      	mov	r2, r4
    5ac6:	a988      	add	r1, sp, #544	; 0x220
    5ac8:	a8ac      	add	r0, sp, #688	; 0x2b0
    5aca:	f7fa ff2f 	bl	92c <mul_mont_n>
    5ace:	f50d 7a80 	add.w	sl, sp, #256	; 0x100
    5ad2:	9701      	str	r7, [sp, #4]
    5ad4:	9600      	str	r6, [sp, #0]
    5ad6:	465b      	mov	r3, fp
    5ad8:	462a      	mov	r2, r5
    5ada:	a904      	add	r1, sp, #16
    5adc:	4650      	mov	r0, sl
    5ade:	f7fa ff25 	bl	92c <mul_mont_n>
    5ae2:	9701      	str	r7, [sp, #4]
    5ae4:	9600      	str	r6, [sp, #0]
    5ae6:	465b      	mov	r3, fp
    5ae8:	aa10      	add	r2, sp, #64	; 0x40
    5aea:	a904      	add	r1, sp, #16
    5aec:	4620      	mov	r0, r4
    5aee:	f7fa ff1d 	bl	92c <mul_mont_n>
    5af2:	abb8      	add	r3, sp, #736	; 0x2e0
    5af4:	9301      	str	r3, [sp, #4]
    5af6:	9600      	str	r6, [sp, #0]
    5af8:	465b      	mov	r3, fp
    5afa:	463a      	mov	r2, r7
    5afc:	a904      	add	r1, sp, #16
    5afe:	4608      	mov	r0, r1
    5b00:	f7ff fa80 	bl	5004 <sqr_n_mul_mont_383>
    5b04:	f8cd 9004 	str.w	r9, [sp, #4]
    5b08:	9600      	str	r6, [sp, #0]
    5b0a:	465b      	mov	r3, fp
    5b0c:	2207      	movs	r2, #7
    5b0e:	a904      	add	r1, sp, #16
    5b10:	4608      	mov	r0, r1
    5b12:	f7ff fa77 	bl	5004 <sqr_n_mul_mont_383>
    5b16:	ab10      	add	r3, sp, #64	; 0x40
    5b18:	9301      	str	r3, [sp, #4]
    5b1a:	9600      	str	r6, [sp, #0]
    5b1c:	465b      	mov	r3, fp
    5b1e:	2204      	movs	r2, #4
    5b20:	a904      	add	r1, sp, #16
    5b22:	4608      	mov	r0, r1
    5b24:	f7ff fa6e 	bl	5004 <sqr_n_mul_mont_383>
    5b28:	ab4c      	add	r3, sp, #304	; 0x130
    5b2a:	9301      	str	r3, [sp, #4]
    5b2c:	9600      	str	r6, [sp, #0]
    5b2e:	465b      	mov	r3, fp
    5b30:	2206      	movs	r2, #6
    5b32:	a904      	add	r1, sp, #16
    5b34:	4608      	mov	r0, r1
    5b36:	f7ff fa65 	bl	5004 <sqr_n_mul_mont_383>
    5b3a:	ab88      	add	r3, sp, #544	; 0x220
    5b3c:	9301      	str	r3, [sp, #4]
    5b3e:	9600      	str	r6, [sp, #0]
    5b40:	465b      	mov	r3, fp
    5b42:	2207      	movs	r2, #7
    5b44:	a904      	add	r1, sp, #16
    5b46:	4608      	mov	r0, r1
    5b48:	f7ff fa5c 	bl	5004 <sqr_n_mul_mont_383>
    5b4c:	9401      	str	r4, [sp, #4]
    5b4e:	9600      	str	r6, [sp, #0]
    5b50:	465b      	mov	r3, fp
    5b52:	2205      	movs	r2, #5
    5b54:	a904      	add	r1, sp, #16
    5b56:	4608      	mov	r0, r1
    5b58:	f7ff fa54 	bl	5004 <sqr_n_mul_mont_383>
    5b5c:	9501      	str	r5, [sp, #4]
    5b5e:	9600      	str	r6, [sp, #0]
    5b60:	465b      	mov	r3, fp
    5b62:	2202      	movs	r2, #2
    5b64:	a904      	add	r1, sp, #16
    5b66:	4608      	mov	r0, r1
    5b68:	f7ff fa4c 	bl	5004 <sqr_n_mul_mont_383>
    5b6c:	f8cd 8004 	str.w	r8, [sp, #4]
    5b70:	9600      	str	r6, [sp, #0]
    5b72:	465b      	mov	r3, fp
    5b74:	2206      	movs	r2, #6
    5b76:	a904      	add	r1, sp, #16
    5b78:	4608      	mov	r0, r1
    5b7a:	f7ff fa43 	bl	5004 <sqr_n_mul_mont_383>
    5b7e:	f8cd 8004 	str.w	r8, [sp, #4]
    5b82:	9600      	str	r6, [sp, #0]
    5b84:	465b      	mov	r3, fp
    5b86:	2206      	movs	r2, #6
    5b88:	a904      	add	r1, sp, #16
    5b8a:	4608      	mov	r0, r1
    5b8c:	f7ff fa3a 	bl	5004 <sqr_n_mul_mont_383>
    5b90:	ab70      	add	r3, sp, #448	; 0x1c0
    5b92:	9301      	str	r3, [sp, #4]
    5b94:	9600      	str	r6, [sp, #0]
    5b96:	465b      	mov	r3, fp
    5b98:	2206      	movs	r2, #6
    5b9a:	a904      	add	r1, sp, #16
    5b9c:	4608      	mov	r0, r1
    5b9e:	f7ff fa31 	bl	5004 <sqr_n_mul_mont_383>
    5ba2:	9501      	str	r5, [sp, #4]
    5ba4:	9600      	str	r6, [sp, #0]
    5ba6:	465b      	mov	r3, fp
    5ba8:	2203      	movs	r2, #3
    5baa:	a904      	add	r1, sp, #16
    5bac:	4608      	mov	r0, r1
    5bae:	f7ff fa29 	bl	5004 <sqr_n_mul_mont_383>
    5bb2:	f8cd 8004 	str.w	r8, [sp, #4]
    5bb6:	9600      	str	r6, [sp, #0]
    5bb8:	465b      	mov	r3, fp
    5bba:	2207      	movs	r2, #7
    5bbc:	a904      	add	r1, sp, #16
    5bbe:	4608      	mov	r0, r1
    5bc0:	f7ff fa20 	bl	5004 <sqr_n_mul_mont_383>
    5bc4:	f8cd 8004 	str.w	r8, [sp, #4]
    5bc8:	9600      	str	r6, [sp, #0]
    5bca:	465b      	mov	r3, fp
    5bcc:	2204      	movs	r2, #4
    5bce:	a904      	add	r1, sp, #16
    5bd0:	4608      	mov	r0, r1
    5bd2:	f7ff fa17 	bl	5004 <sqr_n_mul_mont_383>
    5bd6:	f8cd 9004 	str.w	r9, [sp, #4]
    5bda:	9600      	str	r6, [sp, #0]
    5bdc:	465b      	mov	r3, fp
    5bde:	2206      	movs	r2, #6
    5be0:	a904      	add	r1, sp, #16
    5be2:	4608      	mov	r0, r1
    5be4:	f7ff fa0e 	bl	5004 <sqr_n_mul_mont_383>
    5be8:	abac      	add	r3, sp, #688	; 0x2b0
    5bea:	9301      	str	r3, [sp, #4]
    5bec:	9600      	str	r6, [sp, #0]
    5bee:	465b      	mov	r3, fp
    5bf0:	2206      	movs	r2, #6
    5bf2:	a904      	add	r1, sp, #16
    5bf4:	4608      	mov	r0, r1
    5bf6:	f7ff fa05 	bl	5004 <sqr_n_mul_mont_383>
    5bfa:	aba0      	add	r3, sp, #640	; 0x280
    5bfc:	9301      	str	r3, [sp, #4]
    5bfe:	9600      	str	r6, [sp, #0]
    5c00:	465b      	mov	r3, fp
    5c02:	2203      	movs	r2, #3
    5c04:	a904      	add	r1, sp, #16
    5c06:	4608      	mov	r0, r1
    5c08:	f7ff f9fc 	bl	5004 <sqr_n_mul_mont_383>
    5c0c:	f8cd 8004 	str.w	r8, [sp, #4]
    5c10:	9600      	str	r6, [sp, #0]
    5c12:	465b      	mov	r3, fp
    5c14:	2208      	movs	r2, #8
    5c16:	a904      	add	r1, sp, #16
    5c18:	4608      	mov	r0, r1
    5c1a:	f7ff f9f3 	bl	5004 <sqr_n_mul_mont_383>
    5c1e:	ab88      	add	r3, sp, #544	; 0x220
    5c20:	9301      	str	r3, [sp, #4]
    5c22:	9600      	str	r6, [sp, #0]
    5c24:	465b      	mov	r3, fp
    5c26:	2207      	movs	r2, #7
    5c28:	a904      	add	r1, sp, #16
    5c2a:	4608      	mov	r0, r1
    5c2c:	f7ff f9ea 	bl	5004 <sqr_n_mul_mont_383>
    5c30:	ab94      	add	r3, sp, #592	; 0x250
    5c32:	9301      	str	r3, [sp, #4]
    5c34:	9600      	str	r6, [sp, #0]
    5c36:	465b      	mov	r3, fp
    5c38:	2205      	movs	r2, #5
    5c3a:	a904      	add	r1, sp, #16
    5c3c:	4608      	mov	r0, r1
    5c3e:	f7ff f9e1 	bl	5004 <sqr_n_mul_mont_383>
    5c42:	f8cd 8004 	str.w	r8, [sp, #4]
    5c46:	9600      	str	r6, [sp, #0]
    5c48:	465b      	mov	r3, fp
    5c4a:	2206      	movs	r2, #6
    5c4c:	a904      	add	r1, sp, #16
    5c4e:	4608      	mov	r0, r1
    5c50:	f7ff f9d8 	bl	5004 <sqr_n_mul_mont_383>
    5c54:	f8cd a004 	str.w	sl, [sp, #4]
    5c58:	9600      	str	r6, [sp, #0]
    5c5a:	465b      	mov	r3, fp
    5c5c:	2206      	movs	r2, #6
    5c5e:	a904      	add	r1, sp, #16
    5c60:	4608      	mov	r0, r1
    5c62:	f7ff f9cf 	bl	5004 <sqr_n_mul_mont_383>
    5c66:	ab70      	add	r3, sp, #448	; 0x1c0
    5c68:	9301      	str	r3, [sp, #4]
    5c6a:	9600      	str	r6, [sp, #0]
    5c6c:	465b      	mov	r3, fp
    5c6e:	2204      	movs	r2, #4
    5c70:	a904      	add	r1, sp, #16
    5c72:	4608      	mov	r0, r1
    5c74:	f7ff f9c6 	bl	5004 <sqr_n_mul_mont_383>
    5c78:	f8cd a004 	str.w	sl, [sp, #4]
    5c7c:	9600      	str	r6, [sp, #0]
    5c7e:	465b      	mov	r3, fp
    5c80:	2208      	movs	r2, #8
    5c82:	a904      	add	r1, sp, #16
    5c84:	4608      	mov	r0, r1
    5c86:	f7ff f9bd 	bl	5004 <sqr_n_mul_mont_383>
    5c8a:	f8cd 8004 	str.w	r8, [sp, #4]
    5c8e:	9600      	str	r6, [sp, #0]
    5c90:	465b      	mov	r3, fp
    5c92:	2204      	movs	r2, #4
    5c94:	a904      	add	r1, sp, #16
    5c96:	4608      	mov	r0, r1
    5c98:	f7ff f9b4 	bl	5004 <sqr_n_mul_mont_383>
    5c9c:	ab88      	add	r3, sp, #544	; 0x220
    5c9e:	9301      	str	r3, [sp, #4]
    5ca0:	9600      	str	r6, [sp, #0]
    5ca2:	465b      	mov	r3, fp
    5ca4:	2207      	movs	r2, #7
    5ca6:	a904      	add	r1, sp, #16
    5ca8:	4608      	mov	r0, r1
    5caa:	f7ff f9ab 	bl	5004 <sqr_n_mul_mont_383>
    5cae:	e003      	b.n	5cb8 <recip_sqrt_fp_3mod4+0x30c>
    5cb0:	00015a08 	.word	0x00015a08
    5cb4:	fffcfffd 	.word	0xfffcfffd
    5cb8:	ab7c      	add	r3, sp, #496	; 0x1f0
    5cba:	9301      	str	r3, [sp, #4]
    5cbc:	9600      	str	r6, [sp, #0]
    5cbe:	465b      	mov	r3, fp
    5cc0:	2209      	movs	r2, #9
    5cc2:	a904      	add	r1, sp, #16
    5cc4:	4608      	mov	r0, r1
    5cc6:	f7ff f99d 	bl	5004 <sqr_n_mul_mont_383>
    5cca:	9501      	str	r5, [sp, #4]
    5ccc:	9600      	str	r6, [sp, #0]
    5cce:	465b      	mov	r3, fp
    5cd0:	2202      	movs	r2, #2
    5cd2:	a904      	add	r1, sp, #16
    5cd4:	4608      	mov	r0, r1
    5cd6:	f7ff f995 	bl	5004 <sqr_n_mul_mont_383>
    5cda:	ab4c      	add	r3, sp, #304	; 0x130
    5cdc:	9301      	str	r3, [sp, #4]
    5cde:	9600      	str	r6, [sp, #0]
    5ce0:	465b      	mov	r3, fp
    5ce2:	2205      	movs	r2, #5
    5ce4:	a904      	add	r1, sp, #16
    5ce6:	4608      	mov	r0, r1
    5ce8:	f7ff f98c 	bl	5004 <sqr_n_mul_mont_383>
    5cec:	ab10      	add	r3, sp, #64	; 0x40
    5cee:	9301      	str	r3, [sp, #4]
    5cf0:	9600      	str	r6, [sp, #0]
    5cf2:	465b      	mov	r3, fp
    5cf4:	2207      	movs	r2, #7
    5cf6:	a904      	add	r1, sp, #16
    5cf8:	4608      	mov	r0, r1
    5cfa:	f7ff f983 	bl	5004 <sqr_n_mul_mont_383>
    5cfe:	ab70      	add	r3, sp, #448	; 0x1c0
    5d00:	9301      	str	r3, [sp, #4]
    5d02:	9600      	str	r6, [sp, #0]
    5d04:	465b      	mov	r3, fp
    5d06:	2207      	movs	r2, #7
    5d08:	a904      	add	r1, sp, #16
    5d0a:	4608      	mov	r0, r1
    5d0c:	f7ff f97a 	bl	5004 <sqr_n_mul_mont_383>
    5d10:	ab88      	add	r3, sp, #544	; 0x220
    5d12:	9301      	str	r3, [sp, #4]
    5d14:	9600      	str	r6, [sp, #0]
    5d16:	465b      	mov	r3, fp
    5d18:	2206      	movs	r2, #6
    5d1a:	a904      	add	r1, sp, #16
    5d1c:	4608      	mov	r0, r1
    5d1e:	f7ff f971 	bl	5004 <sqr_n_mul_mont_383>
    5d22:	f8cd a004 	str.w	sl, [sp, #4]
    5d26:	9600      	str	r6, [sp, #0]
    5d28:	465b      	mov	r3, fp
    5d2a:	2205      	movs	r2, #5
    5d2c:	a904      	add	r1, sp, #16
    5d2e:	4608      	mov	r0, r1
    5d30:	f7ff f968 	bl	5004 <sqr_n_mul_mont_383>
    5d34:	ab7c      	add	r3, sp, #496	; 0x1f0
    5d36:	9301      	str	r3, [sp, #4]
    5d38:	9600      	str	r6, [sp, #0]
    5d3a:	465b      	mov	r3, fp
    5d3c:	2205      	movs	r2, #5
    5d3e:	a904      	add	r1, sp, #16
    5d40:	4608      	mov	r0, r1
    5d42:	f7ff f95f 	bl	5004 <sqr_n_mul_mont_383>
    5d46:	ab7c      	add	r3, sp, #496	; 0x1f0
    5d48:	9301      	str	r3, [sp, #4]
    5d4a:	9600      	str	r6, [sp, #0]
    5d4c:	465b      	mov	r3, fp
    5d4e:	2205      	movs	r2, #5
    5d50:	a904      	add	r1, sp, #16
    5d52:	4608      	mov	r0, r1
    5d54:	f7ff f956 	bl	5004 <sqr_n_mul_mont_383>
    5d58:	f8cd 8004 	str.w	r8, [sp, #4]
    5d5c:	9600      	str	r6, [sp, #0]
    5d5e:	465b      	mov	r3, fp
    5d60:	2208      	movs	r2, #8
    5d62:	a904      	add	r1, sp, #16
    5d64:	4608      	mov	r0, r1
    5d66:	f7ff f94d 	bl	5004 <sqr_n_mul_mont_383>
    5d6a:	ab1c      	add	r3, sp, #112	; 0x70
    5d6c:	9301      	str	r3, [sp, #4]
    5d6e:	9600      	str	r6, [sp, #0]
    5d70:	465b      	mov	r3, fp
    5d72:	2207      	movs	r2, #7
    5d74:	a904      	add	r1, sp, #16
    5d76:	4608      	mov	r0, r1
    5d78:	f7ff f944 	bl	5004 <sqr_n_mul_mont_383>
    5d7c:	f8cd 9004 	str.w	r9, [sp, #4]
    5d80:	9600      	str	r6, [sp, #0]
    5d82:	465b      	mov	r3, fp
    5d84:	2209      	movs	r2, #9
    5d86:	a904      	add	r1, sp, #16
    5d88:	4608      	mov	r0, r1
    5d8a:	f7ff f93b 	bl	5004 <sqr_n_mul_mont_383>
    5d8e:	f8cd 8004 	str.w	r8, [sp, #4]
    5d92:	9600      	str	r6, [sp, #0]
    5d94:	465b      	mov	r3, fp
    5d96:	2205      	movs	r2, #5
    5d98:	a904      	add	r1, sp, #16
    5d9a:	4608      	mov	r0, r1
    5d9c:	f7ff f932 	bl	5004 <sqr_n_mul_mont_383>
    5da0:	9501      	str	r5, [sp, #4]
    5da2:	9600      	str	r6, [sp, #0]
    5da4:	465b      	mov	r3, fp
    5da6:	2203      	movs	r2, #3
    5da8:	a904      	add	r1, sp, #16
    5daa:	4608      	mov	r0, r1
    5dac:	f7ff f92a 	bl	5004 <sqr_n_mul_mont_383>
    5db0:	f8cd 9004 	str.w	r9, [sp, #4]
    5db4:	9600      	str	r6, [sp, #0]
    5db6:	465b      	mov	r3, fp
    5db8:	2208      	movs	r2, #8
    5dba:	a904      	add	r1, sp, #16
    5dbc:	4608      	mov	r0, r1
    5dbe:	f7ff f921 	bl	5004 <sqr_n_mul_mont_383>
    5dc2:	9501      	str	r5, [sp, #4]
    5dc4:	9600      	str	r6, [sp, #0]
    5dc6:	465b      	mov	r3, fp
    5dc8:	2203      	movs	r2, #3
    5dca:	a904      	add	r1, sp, #16
    5dcc:	4608      	mov	r0, r1
    5dce:	f7ff f919 	bl	5004 <sqr_n_mul_mont_383>
    5dd2:	ab70      	add	r3, sp, #448	; 0x1c0
    5dd4:	9301      	str	r3, [sp, #4]
    5dd6:	9600      	str	r6, [sp, #0]
    5dd8:	465b      	mov	r3, fp
    5dda:	2207      	movs	r2, #7
    5ddc:	a904      	add	r1, sp, #16
    5dde:	4608      	mov	r0, r1
    5de0:	f7ff f910 	bl	5004 <sqr_n_mul_mont_383>
    5de4:	f8cd 9004 	str.w	r9, [sp, #4]
    5de8:	9600      	str	r6, [sp, #0]
    5dea:	465b      	mov	r3, fp
    5dec:	2209      	movs	r2, #9
    5dee:	a904      	add	r1, sp, #16
    5df0:	4608      	mov	r0, r1
    5df2:	f7ff f907 	bl	5004 <sqr_n_mul_mont_383>
    5df6:	ab1c      	add	r3, sp, #112	; 0x70
    5df8:	9301      	str	r3, [sp, #4]
    5dfa:	9600      	str	r6, [sp, #0]
    5dfc:	465b      	mov	r3, fp
    5dfe:	2206      	movs	r2, #6
    5e00:	a904      	add	r1, sp, #16
    5e02:	4608      	mov	r0, r1
    5e04:	f7ff f8fe 	bl	5004 <sqr_n_mul_mont_383>
    5e08:	9401      	str	r4, [sp, #4]
    5e0a:	9600      	str	r6, [sp, #0]
    5e0c:	465b      	mov	r3, fp
    5e0e:	2206      	movs	r2, #6
    5e10:	a904      	add	r1, sp, #16
    5e12:	4608      	mov	r0, r1
    5e14:	f7ff f8f6 	bl	5004 <sqr_n_mul_mont_383>
    5e18:	9401      	str	r4, [sp, #4]
    5e1a:	9600      	str	r6, [sp, #0]
    5e1c:	465b      	mov	r3, fp
    5e1e:	2205      	movs	r2, #5
    5e20:	a904      	add	r1, sp, #16
    5e22:	4608      	mov	r0, r1
    5e24:	f7ff f8ee 	bl	5004 <sqr_n_mul_mont_383>
    5e28:	9401      	str	r4, [sp, #4]
    5e2a:	9600      	str	r6, [sp, #0]
    5e2c:	465b      	mov	r3, fp
    5e2e:	2205      	movs	r2, #5
    5e30:	a904      	add	r1, sp, #16
    5e32:	4608      	mov	r0, r1
    5e34:	f7ff f8e6 	bl	5004 <sqr_n_mul_mont_383>
    5e38:	f8cd 8004 	str.w	r8, [sp, #4]
    5e3c:	9600      	str	r6, [sp, #0]
    5e3e:	465b      	mov	r3, fp
    5e40:	2204      	movs	r2, #4
    5e42:	a904      	add	r1, sp, #16
    5e44:	4608      	mov	r0, r1
    5e46:	f7ff f8dd 	bl	5004 <sqr_n_mul_mont_383>
    5e4a:	9501      	str	r5, [sp, #4]
    5e4c:	9600      	str	r6, [sp, #0]
    5e4e:	465b      	mov	r3, fp
    5e50:	2203      	movs	r2, #3
    5e52:	a904      	add	r1, sp, #16
    5e54:	4608      	mov	r0, r1
    5e56:	f7ff f8d5 	bl	5004 <sqr_n_mul_mont_383>
    5e5a:	ab1c      	add	r3, sp, #112	; 0x70
    5e5c:	9301      	str	r3, [sp, #4]
    5e5e:	9600      	str	r6, [sp, #0]
    5e60:	465b      	mov	r3, fp
    5e62:	2208      	movs	r2, #8
    5e64:	a904      	add	r1, sp, #16
    5e66:	4608      	mov	r0, r1
    5e68:	f7ff f8cc 	bl	5004 <sqr_n_mul_mont_383>
    5e6c:	9401      	str	r4, [sp, #4]
    5e6e:	9600      	str	r6, [sp, #0]
    5e70:	465b      	mov	r3, fp
    5e72:	2207      	movs	r2, #7
    5e74:	a904      	add	r1, sp, #16
    5e76:	4608      	mov	r0, r1
    5e78:	f7ff f8c4 	bl	5004 <sqr_n_mul_mont_383>
    5e7c:	9401      	str	r4, [sp, #4]
    5e7e:	9600      	str	r6, [sp, #0]
    5e80:	465b      	mov	r3, fp
    5e82:	2205      	movs	r2, #5
    5e84:	a904      	add	r1, sp, #16
    5e86:	4608      	mov	r0, r1
    5e88:	f7ff f8bc 	bl	5004 <sqr_n_mul_mont_383>
    5e8c:	9401      	str	r4, [sp, #4]
    5e8e:	9600      	str	r6, [sp, #0]
    5e90:	465b      	mov	r3, fp
    5e92:	2205      	movs	r2, #5
    5e94:	a904      	add	r1, sp, #16
    5e96:	4608      	mov	r0, r1
    5e98:	f7ff f8b4 	bl	5004 <sqr_n_mul_mont_383>
    5e9c:	f8cd 9004 	str.w	r9, [sp, #4]
    5ea0:	9600      	str	r6, [sp, #0]
    5ea2:	465b      	mov	r3, fp
    5ea4:	2204      	movs	r2, #4
    5ea6:	a904      	add	r1, sp, #16
    5ea8:	4608      	mov	r0, r1
    5eaa:	f7ff f8ab 	bl	5004 <sqr_n_mul_mont_383>
    5eae:	ab4c      	add	r3, sp, #304	; 0x130
    5eb0:	9301      	str	r3, [sp, #4]
    5eb2:	9600      	str	r6, [sp, #0]
    5eb4:	465b      	mov	r3, fp
    5eb6:	2204      	movs	r2, #4
    5eb8:	a904      	add	r1, sp, #16
    5eba:	4608      	mov	r0, r1
    5ebc:	f7ff f8a2 	bl	5004 <sqr_n_mul_mont_383>
    5ec0:	9401      	str	r4, [sp, #4]
    5ec2:	9600      	str	r6, [sp, #0]
    5ec4:	465b      	mov	r3, fp
    5ec6:	2207      	movs	r2, #7
    5ec8:	a904      	add	r1, sp, #16
    5eca:	4608      	mov	r0, r1
    5ecc:	f7ff f89a 	bl	5004 <sqr_n_mul_mont_383>
    5ed0:	f8cd a004 	str.w	sl, [sp, #4]
    5ed4:	9600      	str	r6, [sp, #0]
    5ed6:	465b      	mov	r3, fp
    5ed8:	2205      	movs	r2, #5
    5eda:	a904      	add	r1, sp, #16
    5edc:	4608      	mov	r0, r1
    5ede:	f7ff f891 	bl	5004 <sqr_n_mul_mont_383>
    5ee2:	ae34      	add	r6, sp, #208	; 0xd0
    5ee4:	9601      	str	r6, [sp, #4]
    5ee6:	4d2b      	ldr	r5, [pc, #172]	; (5f94 <recip_sqrt_fp_3mod4+0x5e8>)
    5ee8:	9500      	str	r5, [sp, #0]
    5eea:	465b      	mov	r3, fp
    5eec:	2205      	movs	r2, #5
    5eee:	a904      	add	r1, sp, #16
    5ef0:	4608      	mov	r0, r1
    5ef2:	f7ff f887 	bl	5004 <sqr_n_mul_mont_383>
    5ef6:	9601      	str	r6, [sp, #4]
    5ef8:	9500      	str	r5, [sp, #0]
    5efa:	465b      	mov	r3, fp
    5efc:	2205      	movs	r2, #5
    5efe:	a904      	add	r1, sp, #16
    5f00:	4608      	mov	r0, r1
    5f02:	f7ff f87f 	bl	5004 <sqr_n_mul_mont_383>
    5f06:	9601      	str	r6, [sp, #4]
    5f08:	9500      	str	r5, [sp, #0]
    5f0a:	465b      	mov	r3, fp
    5f0c:	2205      	movs	r2, #5
    5f0e:	a904      	add	r1, sp, #16
    5f10:	4608      	mov	r0, r1
    5f12:	f7ff f877 	bl	5004 <sqr_n_mul_mont_383>
    5f16:	9601      	str	r6, [sp, #4]
    5f18:	9500      	str	r5, [sp, #0]
    5f1a:	465b      	mov	r3, fp
    5f1c:	2205      	movs	r2, #5
    5f1e:	a904      	add	r1, sp, #16
    5f20:	4608      	mov	r0, r1
    5f22:	f7ff f86f 	bl	5004 <sqr_n_mul_mont_383>
    5f26:	9601      	str	r6, [sp, #4]
    5f28:	9500      	str	r5, [sp, #0]
    5f2a:	465b      	mov	r3, fp
    5f2c:	2205      	movs	r2, #5
    5f2e:	a904      	add	r1, sp, #16
    5f30:	4608      	mov	r0, r1
    5f32:	f7ff f867 	bl	5004 <sqr_n_mul_mont_383>
    5f36:	9601      	str	r6, [sp, #4]
    5f38:	9500      	str	r5, [sp, #0]
    5f3a:	465b      	mov	r3, fp
    5f3c:	2205      	movs	r2, #5
    5f3e:	a904      	add	r1, sp, #16
    5f40:	4608      	mov	r0, r1
    5f42:	f7ff f85f 	bl	5004 <sqr_n_mul_mont_383>
    5f46:	f8cd 8004 	str.w	r8, [sp, #4]
    5f4a:	9500      	str	r5, [sp, #0]
    5f4c:	465b      	mov	r3, fp
    5f4e:	2204      	movs	r2, #4
    5f50:	a904      	add	r1, sp, #16
    5f52:	4608      	mov	r0, r1
    5f54:	f7ff f856 	bl	5004 <sqr_n_mul_mont_383>
    5f58:	ab1c      	add	r3, sp, #112	; 0x70
    5f5a:	9301      	str	r3, [sp, #4]
    5f5c:	9500      	str	r5, [sp, #0]
    5f5e:	465b      	mov	r3, fp
    5f60:	2206      	movs	r2, #6
    5f62:	a904      	add	r1, sp, #16
    5f64:	4608      	mov	r0, r1
    5f66:	f7ff f84d 	bl	5004 <sqr_n_mul_mont_383>
    5f6a:	ab10      	add	r3, sp, #64	; 0x40
    5f6c:	9301      	str	r3, [sp, #4]
    5f6e:	9500      	str	r5, [sp, #0]
    5f70:	465b      	mov	r3, fp
    5f72:	2204      	movs	r2, #4
    5f74:	a904      	add	r1, sp, #16
    5f76:	4608      	mov	r0, r1
    5f78:	f7ff f844 	bl	5004 <sqr_n_mul_mont_383>
    5f7c:	9701      	str	r7, [sp, #4]
    5f7e:	9500      	str	r5, [sp, #0]
    5f80:	465b      	mov	r3, fp
    5f82:	aa04      	add	r2, sp, #16
    5f84:	4611      	mov	r1, r2
    5f86:	9803      	ldr	r0, [sp, #12]
    5f88:	f7fa fcd0 	bl	92c <mul_mont_n>
    5f8c:	f50d 7d45 	add.w	sp, sp, #788	; 0x314
    5f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5f94:	fffcfffd 	.word	0xfffcfffd

00005f98 <sqrt_fp>:
    5f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f9c:	b09a      	sub	sp, #104	; 0x68
    5f9e:	4604      	mov	r4, r0
    5fa0:	460d      	mov	r5, r1
    5fa2:	a80e      	add	r0, sp, #56	; 0x38
    5fa4:	f7ff fd02 	bl	59ac <recip_sqrt_fp_3mod4>
    5fa8:	4e1a      	ldr	r6, [pc, #104]	; (6014 <sqrt_fp+0x7c>)
    5faa:	f04f 080c 	mov.w	r8, #12
    5fae:	f8cd 8004 	str.w	r8, [sp, #4]
    5fb2:	4f19      	ldr	r7, [pc, #100]	; (6018 <sqrt_fp+0x80>)
    5fb4:	9700      	str	r7, [sp, #0]
    5fb6:	4633      	mov	r3, r6
    5fb8:	462a      	mov	r2, r5
    5fba:	a90e      	add	r1, sp, #56	; 0x38
    5fbc:	4608      	mov	r0, r1
    5fbe:	f7fa fcb5 	bl	92c <mul_mont_n>
    5fc2:	f8cd 8004 	str.w	r8, [sp, #4]
    5fc6:	9700      	str	r7, [sp, #0]
    5fc8:	4633      	mov	r3, r6
    5fca:	aa0e      	add	r2, sp, #56	; 0x38
    5fcc:	4611      	mov	r1, r2
    5fce:	a802      	add	r0, sp, #8
    5fd0:	f7fa fcac 	bl	92c <mul_mont_n>
    5fd4:	f10d 0e08 	add.w	lr, sp, #8
    5fd8:	f1a5 0c04 	sub.w	ip, r5, #4
    5fdc:	f105 012c 	add.w	r1, r5, #44	; 0x2c
    5fe0:	2200      	movs	r2, #0
    5fe2:	f85e 3b04 	ldr.w	r3, [lr], #4
    5fe6:	f85c 0f04 	ldr.w	r0, [ip, #4]!
    5fea:	4043      	eors	r3, r0
    5fec:	431a      	orrs	r2, r3
    5fee:	458c      	cmp	ip, r1
    5ff0:	d1f7      	bne.n	5fe2 <sqrt_fp+0x4a>
    5ff2:	1e50      	subs	r0, r2, #1
    5ff4:	ea20 0002 	bic.w	r0, r0, r2
    5ff8:	0fc0      	lsrs	r0, r0, #31
    5ffa:	a90e      	add	r1, sp, #56	; 0x38
    5ffc:	1f23      	subs	r3, r4, #4
    5ffe:	342c      	adds	r4, #44	; 0x2c
    6000:	f851 2b04 	ldr.w	r2, [r1], #4
    6004:	f843 2f04 	str.w	r2, [r3, #4]!
    6008:	42a3      	cmp	r3, r4
    600a:	d1f9      	bne.n	6000 <sqrt_fp+0x68>
    600c:	b01a      	add	sp, #104	; 0x68
    600e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6012:	bf00      	nop
    6014:	00015a08 	.word	0x00015a08
    6018:	fffcfffd 	.word	0xfffcfffd

0000601c <POINTonE1_Uncompress>:
    601c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6020:	b0b3      	sub	sp, #204	; 0xcc
    6022:	780d      	ldrb	r5, [r1, #0]
    6024:	f991 3000 	ldrsb.w	r3, [r1]
    6028:	2b00      	cmp	r3, #0
    602a:	f280 80be 	bge.w	61aa <POINTonE1_Uncompress+0x18e>
    602e:	4604      	mov	r4, r0
    6030:	f015 0640 	ands.w	r6, r5, #64	; 0x40
    6034:	d01a      	beq.n	606c <POINTonE1_Uncompress+0x50>
    6036:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    603a:	3d01      	subs	r5, #1
    603c:	0fed      	lsrs	r5, r5, #31
    603e:	460b      	mov	r3, r1
    6040:	312f      	adds	r1, #47	; 0x2f
    6042:	2200      	movs	r2, #0
    6044:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    6048:	4302      	orrs	r2, r0
    604a:	4299      	cmp	r1, r3
    604c:	d1fa      	bne.n	6044 <POINTonE1_Uncompress+0x28>
    604e:	3a01      	subs	r2, #1
    6050:	ea15 73d2 	ands.w	r3, r5, r2, lsr #31
    6054:	f000 80ae 	beq.w	61b4 <POINTonE1_Uncompress+0x198>
    6058:	4623      	mov	r3, r4
    605a:	f104 0160 	add.w	r1, r4, #96	; 0x60
    605e:	2200      	movs	r2, #0
    6060:	f843 2b04 	str.w	r2, [r3], #4
    6064:	4299      	cmp	r1, r3
    6066:	d1fb      	bne.n	6060 <POINTonE1_Uncompress+0x44>
    6068:	2600      	movs	r6, #0
    606a:	e09f      	b.n	61ac <POINTonE1_Uncompress+0x190>
    606c:	f101 0c30 	add.w	ip, r1, #48	; 0x30
    6070:	460a      	mov	r2, r1
    6072:	2000      	movs	r0, #0
    6074:	312f      	adds	r1, #47	; 0x2f
    6076:	1a8b      	subs	r3, r1, r2
    6078:	f812 7b01 	ldrb.w	r7, [r2], #1
    607c:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    6080:	f023 0303 	bic.w	r3, r3, #3
    6084:	af32      	add	r7, sp, #200	; 0xc8
    6086:	443b      	add	r3, r7
    6088:	f843 0c60 	str.w	r0, [r3, #-96]
    608c:	4562      	cmp	r2, ip
    608e:	d1f2      	bne.n	6076 <POINTonE1_Uncompress+0x5a>
    6090:	9b25      	ldr	r3, [sp, #148]	; 0x94
    6092:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    6096:	9325      	str	r3, [sp, #148]	; 0x94
    6098:	4b4b      	ldr	r3, [pc, #300]	; (61c8 <POINTonE1_Uncompress+0x1ac>)
    609a:	f10d 0868 	add.w	r8, sp, #104	; 0x68
    609e:	220c      	movs	r2, #12
    60a0:	9200      	str	r2, [sp, #0]
    60a2:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
    60a6:	4641      	mov	r1, r8
    60a8:	a802      	add	r0, sp, #8
    60aa:	f7fa fde7 	bl	c7c <add_mod_n>
    60ae:	aa02      	add	r2, sp, #8
    60b0:	46c3      	mov	fp, r8
    60b2:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
    60b6:	4641      	mov	r1, r8
    60b8:	2000      	movs	r0, #0
    60ba:	f852 3b04 	ldr.w	r3, [r2], #4
    60be:	f851 7b04 	ldr.w	r7, [r1], #4
    60c2:	407b      	eors	r3, r7
    60c4:	4318      	orrs	r0, r3
    60c6:	4572      	cmp	r2, lr
    60c8:	d1f7      	bne.n	60ba <POINTonE1_Uncompress+0x9e>
    60ca:	1e43      	subs	r3, r0, #1
    60cc:	4383      	bics	r3, r0
    60ce:	d573      	bpl.n	61b8 <POINTonE1_Uncompress+0x19c>
    60d0:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 61c8 <POINTonE1_Uncompress+0x1ac>
    60d4:	f04f 090c 	mov.w	r9, #12
    60d8:	f8cd 9004 	str.w	r9, [sp, #4]
    60dc:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 61cc <POINTonE1_Uncompress+0x1b0>
    60e0:	f8cd a000 	str.w	sl, [sp]
    60e4:	4643      	mov	r3, r8
    60e6:	f508 7234 	add.w	r2, r8, #720	; 0x2d0
    60ea:	a91a      	add	r1, sp, #104	; 0x68
    60ec:	4608      	mov	r0, r1
    60ee:	f7fa fc1d 	bl	92c <mul_mont_n>
    60f2:	f8cd 9004 	str.w	r9, [sp, #4]
    60f6:	f8cd a000 	str.w	sl, [sp]
    60fa:	4643      	mov	r3, r8
    60fc:	aa1a      	add	r2, sp, #104	; 0x68
    60fe:	4611      	mov	r1, r2
    6100:	a826      	add	r0, sp, #152	; 0x98
    6102:	f7fa fc13 	bl	92c <mul_mont_n>
    6106:	f8cd 9004 	str.w	r9, [sp, #4]
    610a:	f8cd a000 	str.w	sl, [sp]
    610e:	4643      	mov	r3, r8
    6110:	aa1a      	add	r2, sp, #104	; 0x68
    6112:	a926      	add	r1, sp, #152	; 0x98
    6114:	4608      	mov	r0, r1
    6116:	f7fa fc09 	bl	92c <mul_mont_n>
    611a:	f8cd 9000 	str.w	r9, [sp]
    611e:	4643      	mov	r3, r8
    6120:	f108 0260 	add.w	r2, r8, #96	; 0x60
    6124:	a926      	add	r1, sp, #152	; 0x98
    6126:	4608      	mov	r0, r1
    6128:	f7fa fda8 	bl	c7c <add_mod_n>
    612c:	a926      	add	r1, sp, #152	; 0x98
    612e:	4608      	mov	r0, r1
    6130:	f7ff ff32 	bl	5f98 <sqrt_fp>
    6134:	2800      	cmp	r0, #0
    6136:	d044      	beq.n	61c2 <POINTonE1_Uncompress+0x1a6>
    6138:	ab19      	add	r3, sp, #100	; 0x64
    613a:	f1a4 0804 	sub.w	r8, r4, #4
    613e:	f10b 075c 	add.w	r7, fp, #92	; 0x5c
    6142:	4642      	mov	r2, r8
    6144:	f853 1f04 	ldr.w	r1, [r3, #4]!
    6148:	f842 1f04 	str.w	r1, [r2, #4]!
    614c:	42bb      	cmp	r3, r7
    614e:	d1f9      	bne.n	6144 <POINTonE1_Uncompress+0x128>
    6150:	f104 0730 	add.w	r7, r4, #48	; 0x30
    6154:	f8df 9070 	ldr.w	r9, [pc, #112]	; 61c8 <POINTonE1_Uncompress+0x1ac>
    6158:	f04f 0a0c 	mov.w	sl, #12
    615c:	f8cd a000 	str.w	sl, [sp]
    6160:	4b1a      	ldr	r3, [pc, #104]	; (61cc <POINTonE1_Uncompress+0x1b0>)
    6162:	464a      	mov	r2, r9
    6164:	4639      	mov	r1, r7
    6166:	a80e      	add	r0, sp, #56	; 0x38
    6168:	f7fa ff12 	bl	f90 <from_mont_n>
    616c:	4652      	mov	r2, sl
    616e:	4649      	mov	r1, r9
    6170:	a80e      	add	r0, sp, #56	; 0x38
    6172:	f7fb f822 	bl	11ba <sgn0_pty_mod_n>
    6176:	2803      	cmp	r0, #3
    6178:	d820      	bhi.n	61bc <POINTonE1_Uncompress+0x1a0>
    617a:	f3c5 1540 	ubfx	r5, r5, #5, #1
    617e:	230c      	movs	r3, #12
    6180:	9300      	str	r3, [sp, #0]
    6182:	4b11      	ldr	r3, [pc, #68]	; (61c8 <POINTonE1_Uncompress+0x1ac>)
    6184:	ea85 0250 	eor.w	r2, r5, r0, lsr #1
    6188:	4639      	mov	r1, r7
    618a:	4638      	mov	r0, r7
    618c:	f7fb fc0a 	bl	19a4 <cneg_mod_n>
    6190:	342c      	adds	r4, #44	; 0x2c
    6192:	2300      	movs	r3, #0
    6194:	f858 2f04 	ldr.w	r2, [r8, #4]!
    6198:	4313      	orrs	r3, r2
    619a:	45a0      	cmp	r8, r4
    619c:	d1fa      	bne.n	6194 <POINTonE1_Uncompress+0x178>
    619e:	1e5a      	subs	r2, r3, #1
    61a0:	ea32 0303 	bics.w	r3, r2, r3
    61a4:	bf48      	it	mi
    61a6:	2603      	movmi	r6, #3
    61a8:	e000      	b.n	61ac <POINTonE1_Uncompress+0x190>
    61aa:	2601      	movs	r6, #1
    61ac:	4630      	mov	r0, r6
    61ae:	b033      	add	sp, #204	; 0xcc
    61b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    61b4:	2601      	movs	r6, #1
    61b6:	e7f9      	b.n	61ac <POINTonE1_Uncompress+0x190>
    61b8:	f04f 30ff 	mov.w	r0, #4294967295
    61bc:	4240      	negs	r0, r0
    61be:	b2c6      	uxtb	r6, r0
    61c0:	e7f4      	b.n	61ac <POINTonE1_Uncompress+0x190>
    61c2:	f06f 0001 	mvn.w	r0, #1
    61c6:	e7f9      	b.n	61bc <POINTonE1_Uncompress+0x1a0>
    61c8:	00015a08 	.word	0x00015a08
    61cc:	fffcfffd 	.word	0xfffcfffd

000061d0 <blst_p1_uncompress>:
    61d0:	b508      	push	{r3, lr}
    61d2:	f7ff ff23 	bl	601c <POINTonE1_Uncompress>
    61d6:	bd08      	pop	{r3, pc}

000061d8 <blst_p1_deserialize>:
    61d8:	b508      	push	{r3, lr}
    61da:	780b      	ldrb	r3, [r1, #0]
    61dc:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    61e0:	d01a      	beq.n	6218 <blst_p1_deserialize+0x40>
    61e2:	f013 0f80 	tst.w	r3, #128	; 0x80
    61e6:	d11a      	bne.n	621e <blst_p1_deserialize+0x46>
    61e8:	f013 0f40 	tst.w	r3, #64	; 0x40
    61ec:	d024      	beq.n	6238 <blst_p1_deserialize+0x60>
    61ee:	f003 0c3f 	and.w	ip, r3, #63	; 0x3f
    61f2:	f10c 3cff 	add.w	ip, ip, #4294967295
    61f6:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
    61fa:	460b      	mov	r3, r1
    61fc:	315f      	adds	r1, #95	; 0x5f
    61fe:	2200      	movs	r2, #0
    6200:	f813 ef01 	ldrb.w	lr, [r3, #1]!
    6204:	ea42 020e 	orr.w	r2, r2, lr
    6208:	428b      	cmp	r3, r1
    620a:	d1f9      	bne.n	6200 <blst_p1_deserialize+0x28>
    620c:	3a01      	subs	r2, #1
    620e:	ea1c 73d2 	ands.w	r3, ip, r2, lsr #31
    6212:	d107      	bne.n	6224 <blst_p1_deserialize+0x4c>
    6214:	2001      	movs	r0, #1
    6216:	e010      	b.n	623a <blst_p1_deserialize+0x62>
    6218:	f7fc f834 	bl	2284 <POINTonE1_Deserialize_BE>
    621c:	e00d      	b.n	623a <blst_p1_deserialize+0x62>
    621e:	f7ff fefd 	bl	601c <POINTonE1_Uncompress>
    6222:	e00a      	b.n	623a <blst_p1_deserialize+0x62>
    6224:	4603      	mov	r3, r0
    6226:	f100 0160 	add.w	r1, r0, #96	; 0x60
    622a:	2200      	movs	r2, #0
    622c:	f843 2b04 	str.w	r2, [r3], #4
    6230:	428b      	cmp	r3, r1
    6232:	d1fb      	bne.n	622c <blst_p1_deserialize+0x54>
    6234:	2000      	movs	r0, #0
    6236:	e000      	b.n	623a <blst_p1_deserialize+0x62>
    6238:	2001      	movs	r0, #1
    623a:	bd08      	pop	{r3, pc}

0000623c <blst_aggregate_in_g1>:
    623c:	b5f0      	push	{r4, r5, r6, r7, lr}
    623e:	b0a5      	sub	sp, #148	; 0x94
    6240:	4605      	mov	r5, r0
    6242:	460e      	mov	r6, r1
    6244:	7813      	ldrb	r3, [r2, #0]
    6246:	f013 0740 	ands.w	r7, r3, #64	; 0x40
    624a:	d120      	bne.n	628e <blst_aggregate_in_g1+0x52>
    624c:	4611      	mov	r1, r2
    624e:	f013 0f80 	tst.w	r3, #128	; 0x80
    6252:	d12b      	bne.n	62ac <blst_aggregate_in_g1+0x70>
    6254:	4668      	mov	r0, sp
    6256:	f7fc f815 	bl	2284 <POINTonE1_Deserialize_BE>
    625a:	4668      	mov	r0, sp
    625c:	f7fb fb52 	bl	1904 <POINTonE1_affine_on_curve>
    6260:	b3b0      	cbz	r0, 62d0 <blst_aggregate_in_g1+0x94>
    6262:	481d      	ldr	r0, [pc, #116]	; (62d8 <blst_aggregate_in_g1+0x9c>)
    6264:	f100 0390 	add.w	r3, r0, #144	; 0x90
    6268:	aa17      	add	r2, sp, #92	; 0x5c
    626a:	30c0      	adds	r0, #192	; 0xc0
    626c:	f853 4b04 	ldr.w	r4, [r3], #4
    6270:	f842 4f04 	str.w	r4, [r2, #4]!
    6274:	4283      	cmp	r3, r0
    6276:	d1f9      	bne.n	626c <blst_aggregate_in_g1+0x30>
    6278:	4668      	mov	r0, sp
    627a:	f7fd f985 	bl	3588 <POINTonE1_in_G1>
    627e:	b348      	cbz	r0, 62d4 <blst_aggregate_in_g1+0x98>
    6280:	b1de      	cbz	r6, 62ba <blst_aggregate_in_g1+0x7e>
    6282:	466a      	mov	r2, sp
    6284:	4631      	mov	r1, r6
    6286:	4628      	mov	r0, r5
    6288:	f7fc fc84 	bl	2b94 <POINTonE1_dadd_affine>
    628c:	e001      	b.n	6292 <blst_aggregate_in_g1+0x56>
    628e:	b119      	cbz	r1, 6298 <blst_aggregate_in_g1+0x5c>
    6290:	2700      	movs	r7, #0
    6292:	4638      	mov	r0, r7
    6294:	b025      	add	sp, #148	; 0x94
    6296:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6298:	4603      	mov	r3, r0
    629a:	f100 0190 	add.w	r1, r0, #144	; 0x90
    629e:	2200      	movs	r2, #0
    62a0:	f843 2b04 	str.w	r2, [r3], #4
    62a4:	4299      	cmp	r1, r3
    62a6:	d1fb      	bne.n	62a0 <blst_aggregate_in_g1+0x64>
    62a8:	2700      	movs	r7, #0
    62aa:	e7f2      	b.n	6292 <blst_aggregate_in_g1+0x56>
    62ac:	4668      	mov	r0, sp
    62ae:	f7ff feb5 	bl	601c <POINTonE1_Uncompress>
    62b2:	2800      	cmp	r0, #0
    62b4:	d0d5      	beq.n	6262 <blst_aggregate_in_g1+0x26>
    62b6:	4607      	mov	r7, r0
    62b8:	e7eb      	b.n	6292 <blst_aggregate_in_g1+0x56>
    62ba:	f1ad 0304 	sub.w	r3, sp, #4
    62be:	3d04      	subs	r5, #4
    62c0:	a923      	add	r1, sp, #140	; 0x8c
    62c2:	f853 2f04 	ldr.w	r2, [r3, #4]!
    62c6:	f845 2f04 	str.w	r2, [r5, #4]!
    62ca:	428b      	cmp	r3, r1
    62cc:	d1f9      	bne.n	62c2 <blst_aggregate_in_g1+0x86>
    62ce:	e7e0      	b.n	6292 <blst_aggregate_in_g1+0x56>
    62d0:	2702      	movs	r7, #2
    62d2:	e7de      	b.n	6292 <blst_aggregate_in_g1+0x56>
    62d4:	2703      	movs	r7, #3
    62d6:	e7dc      	b.n	6292 <blst_aggregate_in_g1+0x56>
    62d8:	00015a08 	.word	0x00015a08

000062dc <blst_fp_sqrt>:
    62dc:	b508      	push	{r3, lr}
    62de:	f7ff fe5b 	bl	5f98 <sqrt_fp>
    62e2:	bd08      	pop	{r3, pc}

000062e4 <recip_sqrt_fp>:
    62e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    62e8:	b09a      	sub	sp, #104	; 0x68
    62ea:	4604      	mov	r4, r0
    62ec:	460d      	mov	r5, r1
    62ee:	a80e      	add	r0, sp, #56	; 0x38
    62f0:	f7ff fb5c 	bl	59ac <recip_sqrt_fp_3mod4>
    62f4:	4e1a      	ldr	r6, [pc, #104]	; (6360 <recip_sqrt_fp+0x7c>)
    62f6:	f04f 080c 	mov.w	r8, #12
    62fa:	f8cd 8004 	str.w	r8, [sp, #4]
    62fe:	4f19      	ldr	r7, [pc, #100]	; (6364 <recip_sqrt_fp+0x80>)
    6300:	9700      	str	r7, [sp, #0]
    6302:	4633      	mov	r3, r6
    6304:	462a      	mov	r2, r5
    6306:	a90e      	add	r1, sp, #56	; 0x38
    6308:	a802      	add	r0, sp, #8
    630a:	f7fa fb0f 	bl	92c <mul_mont_n>
    630e:	f8cd 8004 	str.w	r8, [sp, #4]
    6312:	9700      	str	r7, [sp, #0]
    6314:	4633      	mov	r3, r6
    6316:	aa02      	add	r2, sp, #8
    6318:	4611      	mov	r1, r2
    631a:	4610      	mov	r0, r2
    631c:	f7fa fb06 	bl	92c <mul_mont_n>
    6320:	f10d 0e08 	add.w	lr, sp, #8
    6324:	f1a5 0c04 	sub.w	ip, r5, #4
    6328:	f105 012c 	add.w	r1, r5, #44	; 0x2c
    632c:	2200      	movs	r2, #0
    632e:	f85e 3b04 	ldr.w	r3, [lr], #4
    6332:	f85c 0f04 	ldr.w	r0, [ip, #4]!
    6336:	4043      	eors	r3, r0
    6338:	431a      	orrs	r2, r3
    633a:	458c      	cmp	ip, r1
    633c:	d1f7      	bne.n	632e <recip_sqrt_fp+0x4a>
    633e:	1e50      	subs	r0, r2, #1
    6340:	ea20 0002 	bic.w	r0, r0, r2
    6344:	0fc0      	lsrs	r0, r0, #31
    6346:	a90e      	add	r1, sp, #56	; 0x38
    6348:	1f23      	subs	r3, r4, #4
    634a:	342c      	adds	r4, #44	; 0x2c
    634c:	f851 2b04 	ldr.w	r2, [r1], #4
    6350:	f843 2f04 	str.w	r2, [r3, #4]!
    6354:	42a3      	cmp	r3, r4
    6356:	d1f9      	bne.n	634c <recip_sqrt_fp+0x68>
    6358:	b01a      	add	sp, #104	; 0x68
    635a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    635e:	bf00      	nop
    6360:	00015a08 	.word	0x00015a08
    6364:	fffcfffd 	.word	0xfffcfffd

00006368 <map_to_isogenous_E1>:
    6368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    636c:	b0d9      	sub	sp, #356	; 0x164
    636e:	4605      	mov	r5, r0
    6370:	460a      	mov	r2, r1
    6372:	9103      	str	r1, [sp, #12]
    6374:	4c9e      	ldr	r4, [pc, #632]	; (65f0 <map_to_isogenous_E1+0x288>)
    6376:	260c      	movs	r6, #12
    6378:	9601      	str	r6, [sp, #4]
    637a:	4f9e      	ldr	r7, [pc, #632]	; (65f4 <map_to_isogenous_E1+0x28c>)
    637c:	9700      	str	r7, [sp, #0]
    637e:	4623      	mov	r3, r4
    6380:	a84c      	add	r0, sp, #304	; 0x130
    6382:	f7fa fad3 	bl	92c <mul_mont_n>
    6386:	f8df 8270 	ldr.w	r8, [pc, #624]	; 65f8 <map_to_isogenous_E1+0x290>
    638a:	9601      	str	r6, [sp, #4]
    638c:	9700      	str	r7, [sp, #0]
    638e:	4623      	mov	r3, r4
    6390:	aa4c      	add	r2, sp, #304	; 0x130
    6392:	f508 71cc 	add.w	r1, r8, #408	; 0x198
    6396:	a834      	add	r0, sp, #208	; 0xd0
    6398:	f7fa fac8 	bl	92c <mul_mont_n>
    639c:	9601      	str	r6, [sp, #4]
    639e:	9700      	str	r7, [sp, #0]
    63a0:	4623      	mov	r3, r4
    63a2:	aa34      	add	r2, sp, #208	; 0xd0
    63a4:	4611      	mov	r1, r2
    63a6:	a840      	add	r0, sp, #256	; 0x100
    63a8:	f7fa fac0 	bl	92c <mul_mont_n>
    63ac:	9600      	str	r6, [sp, #0]
    63ae:	4623      	mov	r3, r4
    63b0:	aa34      	add	r2, sp, #208	; 0xd0
    63b2:	a940      	add	r1, sp, #256	; 0x100
    63b4:	4608      	mov	r0, r1
    63b6:	f7fa fc61 	bl	c7c <add_mod_n>
    63ba:	9600      	str	r6, [sp, #0]
    63bc:	4623      	mov	r3, r4
    63be:	f104 0290 	add.w	r2, r4, #144	; 0x90
    63c2:	a940      	add	r1, sp, #256	; 0x100
    63c4:	4628      	mov	r0, r5
    63c6:	f7fa fc59 	bl	c7c <add_mod_n>
    63ca:	9601      	str	r6, [sp, #4]
    63cc:	9700      	str	r7, [sp, #0]
    63ce:	4623      	mov	r3, r4
    63d0:	f508 72e4 	add.w	r2, r8, #456	; 0x1c8
    63d4:	4629      	mov	r1, r5
    63d6:	4628      	mov	r0, r5
    63d8:	f7fa faa8 	bl	92c <mul_mont_n>
    63dc:	9601      	str	r6, [sp, #4]
    63de:	9700      	str	r7, [sp, #0]
    63e0:	4623      	mov	r3, r4
    63e2:	462a      	mov	r2, r5
    63e4:	a934      	add	r1, sp, #208	; 0xd0
    63e6:	4608      	mov	r0, r1
    63e8:	f7fa faa0 	bl	92c <mul_mont_n>
    63ec:	f105 0a60 	add.w	sl, r5, #96	; 0x60
    63f0:	9601      	str	r6, [sp, #4]
    63f2:	9700      	str	r7, [sp, #0]
    63f4:	4623      	mov	r3, r4
    63f6:	aa40      	add	r2, sp, #256	; 0x100
    63f8:	f508 71fc 	add.w	r1, r8, #504	; 0x1f8
    63fc:	4650      	mov	r0, sl
    63fe:	f7fa fa95 	bl	92c <mul_mont_n>
    6402:	f105 025c 	add.w	r2, r5, #92	; 0x5c
    6406:	f105 048c 	add.w	r4, r5, #140	; 0x8c
    640a:	4613      	mov	r3, r2
    640c:	2100      	movs	r1, #0
    640e:	f853 0f04 	ldr.w	r0, [r3, #4]!
    6412:	4301      	orrs	r1, r0
    6414:	42a3      	cmp	r3, r4
    6416:	d1fa      	bne.n	640e <map_to_isogenous_E1+0xa6>
    6418:	1e4e      	subs	r6, r1, #1
    641a:	ea26 0101 	bic.w	r1, r6, r1
    641e:	17ce      	asrs	r6, r1, #31
    6420:	4876      	ldr	r0, [pc, #472]	; (65fc <map_to_isogenous_E1+0x294>)
    6422:	f850 3b04 	ldr.w	r3, [r0], #4
    6426:	f852 1f04 	ldr.w	r1, [r2, #4]!
    642a:	404b      	eors	r3, r1
    642c:	4033      	ands	r3, r6
    642e:	404b      	eors	r3, r1
    6430:	6013      	str	r3, [r2, #0]
    6432:	42a2      	cmp	r2, r4
    6434:	d1f5      	bne.n	6422 <map_to_isogenous_E1+0xba>
    6436:	4e6e      	ldr	r6, [pc, #440]	; (65f0 <map_to_isogenous_E1+0x288>)
    6438:	270c      	movs	r7, #12
    643a:	9701      	str	r7, [sp, #4]
    643c:	4c6d      	ldr	r4, [pc, #436]	; (65f4 <map_to_isogenous_E1+0x28c>)
    643e:	9400      	str	r4, [sp, #0]
    6440:	4633      	mov	r3, r6
    6442:	4652      	mov	r2, sl
    6444:	4651      	mov	r1, sl
    6446:	a840      	add	r0, sp, #256	; 0x100
    6448:	f7fa fa70 	bl	92c <mul_mont_n>
    644c:	9701      	str	r7, [sp, #4]
    644e:	9400      	str	r4, [sp, #0]
    6450:	4633      	mov	r3, r6
    6452:	aa40      	add	r2, sp, #256	; 0x100
    6454:	4651      	mov	r1, sl
    6456:	a81c      	add	r0, sp, #112	; 0x70
    6458:	f7fa fa68 	bl	92c <mul_mont_n>
    645c:	f8df b198 	ldr.w	fp, [pc, #408]	; 65f8 <map_to_isogenous_E1+0x290>
    6460:	9701      	str	r7, [sp, #4]
    6462:	9400      	str	r4, [sp, #0]
    6464:	4633      	mov	r3, r6
    6466:	aa40      	add	r2, sp, #256	; 0x100
    6468:	f50b 7116 	add.w	r1, fp, #600	; 0x258
    646c:	4610      	mov	r0, r2
    646e:	f7fa fa5d 	bl	92c <mul_mont_n>
    6472:	9701      	str	r7, [sp, #4]
    6474:	9400      	str	r4, [sp, #0]
    6476:	4633      	mov	r3, r6
    6478:	462a      	mov	r2, r5
    647a:	4629      	mov	r1, r5
    647c:	a828      	add	r0, sp, #160	; 0xa0
    647e:	f7fa fa55 	bl	92c <mul_mont_n>
    6482:	9700      	str	r7, [sp, #0]
    6484:	4633      	mov	r3, r6
    6486:	aa40      	add	r2, sp, #256	; 0x100
    6488:	a928      	add	r1, sp, #160	; 0xa0
    648a:	4608      	mov	r0, r1
    648c:	f7fa fbf6 	bl	c7c <add_mod_n>
    6490:	9701      	str	r7, [sp, #4]
    6492:	9400      	str	r4, [sp, #0]
    6494:	4633      	mov	r3, r6
    6496:	462a      	mov	r2, r5
    6498:	a928      	add	r1, sp, #160	; 0xa0
    649a:	4608      	mov	r0, r1
    649c:	f7fa fa46 	bl	92c <mul_mont_n>
    64a0:	9701      	str	r7, [sp, #4]
    64a2:	9400      	str	r4, [sp, #0]
    64a4:	4633      	mov	r3, r6
    64a6:	aa1c      	add	r2, sp, #112	; 0x70
    64a8:	f50b 71e4 	add.w	r1, fp, #456	; 0x1c8
    64ac:	a840      	add	r0, sp, #256	; 0x100
    64ae:	f7fa fa3d 	bl	92c <mul_mont_n>
    64b2:	9700      	str	r7, [sp, #0]
    64b4:	4633      	mov	r3, r6
    64b6:	aa40      	add	r2, sp, #256	; 0x100
    64b8:	a928      	add	r1, sp, #160	; 0xa0
    64ba:	4608      	mov	r0, r1
    64bc:	f7fa fbde 	bl	c7c <add_mod_n>
    64c0:	f105 0830 	add.w	r8, r5, #48	; 0x30
    64c4:	9701      	str	r7, [sp, #4]
    64c6:	9400      	str	r4, [sp, #0]
    64c8:	4633      	mov	r3, r6
    64ca:	aa1c      	add	r2, sp, #112	; 0x70
    64cc:	4611      	mov	r1, r2
    64ce:	4640      	mov	r0, r8
    64d0:	f7fa fa2c 	bl	92c <mul_mont_n>
    64d4:	9701      	str	r7, [sp, #4]
    64d6:	9400      	str	r4, [sp, #0]
    64d8:	4633      	mov	r3, r6
    64da:	aa1c      	add	r2, sp, #112	; 0x70
    64dc:	a928      	add	r1, sp, #160	; 0xa0
    64de:	a840      	add	r0, sp, #256	; 0x100
    64e0:	f7fa fa24 	bl	92c <mul_mont_n>
    64e4:	9701      	str	r7, [sp, #4]
    64e6:	9400      	str	r4, [sp, #0]
    64e8:	4633      	mov	r3, r6
    64ea:	aa40      	add	r2, sp, #256	; 0x100
    64ec:	4641      	mov	r1, r8
    64ee:	4640      	mov	r0, r8
    64f0:	f7fa fa1c 	bl	92c <mul_mont_n>
    64f4:	4641      	mov	r1, r8
    64f6:	4640      	mov	r0, r8
    64f8:	f7ff fef4 	bl	62e4 <recip_sqrt_fp>
    64fc:	4681      	mov	r9, r0
    64fe:	9701      	str	r7, [sp, #4]
    6500:	9400      	str	r4, [sp, #0]
    6502:	4633      	mov	r3, r6
    6504:	aa40      	add	r2, sp, #256	; 0x100
    6506:	4641      	mov	r1, r8
    6508:	4640      	mov	r0, r8
    650a:	f7fa fa0f 	bl	92c <mul_mont_n>
    650e:	9701      	str	r7, [sp, #4]
    6510:	9400      	str	r4, [sp, #0]
    6512:	4633      	mov	r3, r6
    6514:	f50b 7222 	add.w	r2, fp, #648	; 0x288
    6518:	4641      	mov	r1, r8
    651a:	a810      	add	r0, sp, #64	; 0x40
    651c:	f7fa fa06 	bl	92c <mul_mont_n>
    6520:	9701      	str	r7, [sp, #4]
    6522:	9400      	str	r4, [sp, #0]
    6524:	4633      	mov	r3, r6
    6526:	aa4c      	add	r2, sp, #304	; 0x130
    6528:	a910      	add	r1, sp, #64	; 0x40
    652a:	4608      	mov	r0, r1
    652c:	f7fa f9fe 	bl	92c <mul_mont_n>
    6530:	9701      	str	r7, [sp, #4]
    6532:	9400      	str	r4, [sp, #0]
    6534:	4633      	mov	r3, r6
    6536:	9a03      	ldr	r2, [sp, #12]
    6538:	a910      	add	r1, sp, #64	; 0x40
    653a:	4608      	mov	r0, r1
    653c:	f7fa f9f6 	bl	92c <mul_mont_n>
    6540:	f1c9 0400 	rsb	r4, r9, #0
    6544:	1f2a      	subs	r2, r5, #4
    6546:	a834      	add	r0, sp, #208	; 0xd0
    6548:	f105 062c 	add.w	r6, r5, #44	; 0x2c
    654c:	f850 1b04 	ldr.w	r1, [r0], #4
    6550:	f852 3f04 	ldr.w	r3, [r2, #4]!
    6554:	404b      	eors	r3, r1
    6556:	4023      	ands	r3, r4
    6558:	404b      	eors	r3, r1
    655a:	6013      	str	r3, [r2, #0]
    655c:	42b2      	cmp	r2, r6
    655e:	d1f5      	bne.n	654c <map_to_isogenous_E1+0x1e4>
    6560:	f105 022c 	add.w	r2, r5, #44	; 0x2c
    6564:	a810      	add	r0, sp, #64	; 0x40
    6566:	f105 065c 	add.w	r6, r5, #92	; 0x5c
    656a:	f850 1b04 	ldr.w	r1, [r0], #4
    656e:	f852 3f04 	ldr.w	r3, [r2, #4]!
    6572:	404b      	eors	r3, r1
    6574:	4023      	ands	r3, r4
    6576:	404b      	eors	r3, r1
    6578:	6013      	str	r3, [r2, #0]
    657a:	4296      	cmp	r6, r2
    657c:	d1f5      	bne.n	656a <map_to_isogenous_E1+0x202>
    657e:	4f1d      	ldr	r7, [pc, #116]	; (65f4 <map_to_isogenous_E1+0x28c>)
    6580:	4c1b      	ldr	r4, [pc, #108]	; (65f0 <map_to_isogenous_E1+0x288>)
    6582:	260c      	movs	r6, #12
    6584:	9600      	str	r6, [sp, #0]
    6586:	463b      	mov	r3, r7
    6588:	4622      	mov	r2, r4
    658a:	9903      	ldr	r1, [sp, #12]
    658c:	a804      	add	r0, sp, #16
    658e:	f7fa fcff 	bl	f90 <from_mont_n>
    6592:	4632      	mov	r2, r6
    6594:	4621      	mov	r1, r4
    6596:	a804      	add	r0, sp, #16
    6598:	f7fa fe0f 	bl	11ba <sgn0_pty_mod_n>
    659c:	4681      	mov	r9, r0
    659e:	9600      	str	r6, [sp, #0]
    65a0:	463b      	mov	r3, r7
    65a2:	4622      	mov	r2, r4
    65a4:	4641      	mov	r1, r8
    65a6:	a804      	add	r0, sp, #16
    65a8:	f7fa fcf2 	bl	f90 <from_mont_n>
    65ac:	4632      	mov	r2, r6
    65ae:	4621      	mov	r1, r4
    65b0:	a804      	add	r0, sp, #16
    65b2:	f7fa fe02 	bl	11ba <sgn0_pty_mod_n>
    65b6:	ea80 0209 	eor.w	r2, r0, r9
    65ba:	9600      	str	r6, [sp, #0]
    65bc:	4623      	mov	r3, r4
    65be:	f002 0201 	and.w	r2, r2, #1
    65c2:	4641      	mov	r1, r8
    65c4:	4640      	mov	r0, r8
    65c6:	f7fb f9ed 	bl	19a4 <cneg_mod_n>
    65ca:	9601      	str	r6, [sp, #4]
    65cc:	9700      	str	r7, [sp, #0]
    65ce:	4623      	mov	r3, r4
    65d0:	4652      	mov	r2, sl
    65d2:	4629      	mov	r1, r5
    65d4:	4628      	mov	r0, r5
    65d6:	f7fa f9a9 	bl	92c <mul_mont_n>
    65da:	9601      	str	r6, [sp, #4]
    65dc:	9700      	str	r7, [sp, #0]
    65de:	4623      	mov	r3, r4
    65e0:	aa1c      	add	r2, sp, #112	; 0x70
    65e2:	4641      	mov	r1, r8
    65e4:	4640      	mov	r0, r8
    65e6:	f7fa f9a1 	bl	92c <mul_mont_n>
    65ea:	b059      	add	sp, #356	; 0x164
    65ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    65f0:	00015a08 	.word	0x00015a08
    65f4:	fffcfffd 	.word	0xfffcfffd
    65f8:	00016b00 	.word	0x00016b00
    65fc:	00016d28 	.word	0x00016d28

00006600 <map_to_g1>:
    6600:	b530      	push	{r4, r5, lr}
    6602:	b0a5      	sub	sp, #148	; 0x94
    6604:	4604      	mov	r4, r0
    6606:	4615      	mov	r5, r2
    6608:	4668      	mov	r0, sp
    660a:	f7ff fead 	bl	6368 <map_to_isogenous_E1>
    660e:	b14d      	cbz	r5, 6624 <map_to_g1+0x24>
    6610:	4629      	mov	r1, r5
    6612:	4620      	mov	r0, r4
    6614:	f7ff fea8 	bl	6368 <map_to_isogenous_E1>
    6618:	4b16      	ldr	r3, [pc, #88]	; (6674 <map_to_g1+0x74>)
    661a:	4622      	mov	r2, r4
    661c:	4669      	mov	r1, sp
    661e:	4668      	mov	r0, sp
    6620:	f7fc fc2a 	bl	2e78 <POINTonE1_dadd>
    6624:	4669      	mov	r1, sp
    6626:	4668      	mov	r0, sp
    6628:	f7fc f839 	bl	269e <isogeny_map_to_E1>
    662c:	4669      	mov	r1, sp
    662e:	4620      	mov	r0, r4
    6630:	f7fb fbc6 	bl	1dc0 <POINTonE1_double>
    6634:	466a      	mov	r2, sp
    6636:	4621      	mov	r1, r4
    6638:	4620      	mov	r0, r4
    663a:	f7fb fec5 	bl	23c8 <POINTonE1_add>
    663e:	466a      	mov	r2, sp
    6640:	2102      	movs	r1, #2
    6642:	4620      	mov	r0, r4
    6644:	f7fc ff8c 	bl	3560 <POINTonE1_dbl_n_add>
    6648:	466a      	mov	r2, sp
    664a:	2103      	movs	r1, #3
    664c:	4620      	mov	r0, r4
    664e:	f7fc ff87 	bl	3560 <POINTonE1_dbl_n_add>
    6652:	466a      	mov	r2, sp
    6654:	2109      	movs	r1, #9
    6656:	4620      	mov	r0, r4
    6658:	f7fc ff82 	bl	3560 <POINTonE1_dbl_n_add>
    665c:	466a      	mov	r2, sp
    665e:	2120      	movs	r1, #32
    6660:	4620      	mov	r0, r4
    6662:	f7fc ff7d 	bl	3560 <POINTonE1_dbl_n_add>
    6666:	466a      	mov	r2, sp
    6668:	2110      	movs	r1, #16
    666a:	4620      	mov	r0, r4
    666c:	f7fc ff78 	bl	3560 <POINTonE1_dbl_n_add>
    6670:	b025      	add	sp, #148	; 0x94
    6672:	bd30      	pop	{r4, r5, pc}
    6674:	00016d58 	.word	0x00016d58

00006678 <blst_map_to_g1>:
    6678:	b508      	push	{r3, lr}
    667a:	f7ff ffc1 	bl	6600 <map_to_g1>
    667e:	bd08      	pop	{r3, pc}

00006680 <sqr_mont_382x>:
    6680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6684:	b09b      	sub	sp, #108	; 0x6c
    6686:	4607      	mov	r7, r0
    6688:	4615      	mov	r5, r2
    668a:	4698      	mov	r8, r3
    668c:	1f0b      	subs	r3, r1, #4
    668e:	ae0e      	add	r6, sp, #56	; 0x38
    6690:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    6694:	46b2      	mov	sl, r6
    6696:	469e      	mov	lr, r3
    6698:	f04f 0b00 	mov.w	fp, #0
    669c:	46d9      	mov	r9, fp
    669e:	f85e 4f04 	ldr.w	r4, [lr, #4]!
    66a2:	f8de 2030 	ldr.w	r2, [lr, #48]	; 0x30
    66a6:	eb14 0c02 	adds.w	ip, r4, r2
    66aa:	eb49 0209 	adc.w	r2, r9, r9
    66ae:	eb1c 040b 	adds.w	r4, ip, fp
    66b2:	f84a 4b04 	str.w	r4, [sl], #4
    66b6:	f142 0b00 	adc.w	fp, r2, #0
    66ba:	4586      	cmp	lr, r0
    66bc:	d1ef      	bne.n	669e <sqr_mont_382x+0x1e>
    66be:	f10d 0e08 	add.w	lr, sp, #8
    66c2:	2200      	movs	r2, #0
    66c4:	4694      	mov	ip, r2
    66c6:	f853 4f04 	ldr.w	r4, [r3, #4]!
    66ca:	1aa4      	subs	r4, r4, r2
    66cc:	eb6c 090c 	sbc.w	r9, ip, ip
    66d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    66d2:	1aa2      	subs	r2, r4, r2
    66d4:	f169 0400 	sbc.w	r4, r9, #0
    66d8:	f84e 2b04 	str.w	r2, [lr], #4
    66dc:	f004 0201 	and.w	r2, r4, #1
    66e0:	4283      	cmp	r3, r0
    66e2:	d1f0      	bne.n	66c6 <sqr_mont_382x+0x46>
    66e4:	4254      	negs	r4, r2
    66e6:	230c      	movs	r3, #12
    66e8:	9301      	str	r3, [sp, #4]
    66ea:	f8cd 8000 	str.w	r8, [sp]
    66ee:	462b      	mov	r3, r5
    66f0:	f101 0230 	add.w	r2, r1, #48	; 0x30
    66f4:	f107 0030 	add.w	r0, r7, #48	; 0x30
    66f8:	f7fa fda1 	bl	123e <mul_mont_nonred_n>
    66fc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
    6700:	f107 005c 	add.w	r0, r7, #92	; 0x5c
    6704:	2300      	movs	r3, #0
    6706:	f852 1f04 	ldr.w	r1, [r2, #4]!
    670a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    670e:	6013      	str	r3, [r2, #0]
    6710:	0fcb      	lsrs	r3, r1, #31
    6712:	4282      	cmp	r2, r0
    6714:	d1f7      	bne.n	6706 <sqr_mont_382x+0x86>
    6716:	230c      	movs	r3, #12
    6718:	9301      	str	r3, [sp, #4]
    671a:	f8cd 8000 	str.w	r8, [sp]
    671e:	462b      	mov	r3, r5
    6720:	aa02      	add	r2, sp, #8
    6722:	a90e      	add	r1, sp, #56	; 0x38
    6724:	4638      	mov	r0, r7
    6726:	f7fa fd8a 	bl	123e <mul_mont_nonred_n>
    672a:	f1a7 0c04 	sub.w	ip, r7, #4
    672e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
    6732:	4667      	mov	r7, ip
    6734:	2100      	movs	r1, #0
    6736:	468e      	mov	lr, r1
    6738:	f856 2b04 	ldr.w	r2, [r6], #4
    673c:	f857 3f04 	ldr.w	r3, [r7, #4]!
    6740:	1a5b      	subs	r3, r3, r1
    6742:	eb6e 010e 	sbc.w	r1, lr, lr
    6746:	4022      	ands	r2, r4
    6748:	1a9b      	subs	r3, r3, r2
    674a:	f161 0100 	sbc.w	r1, r1, #0
    674e:	603b      	str	r3, [r7, #0]
    6750:	f001 0101 	and.w	r1, r1, #1
    6754:	42b8      	cmp	r0, r7
    6756:	d1ef      	bne.n	6738 <sqr_mont_382x+0xb8>
    6758:	4249      	negs	r1, r1
    675a:	3d04      	subs	r5, #4
    675c:	2600      	movs	r6, #0
    675e:	4632      	mov	r2, r6
    6760:	f855 3f04 	ldr.w	r3, [r5, #4]!
    6764:	400b      	ands	r3, r1
    6766:	f85c 4f04 	ldr.w	r4, [ip, #4]!
    676a:	19a4      	adds	r4, r4, r6
    676c:	eb42 0602 	adc.w	r6, r2, r2
    6770:	191b      	adds	r3, r3, r4
    6772:	f8cc 3000 	str.w	r3, [ip]
    6776:	f146 0600 	adc.w	r6, r6, #0
    677a:	4584      	cmp	ip, r0
    677c:	d1f0      	bne.n	6760 <sqr_mont_382x+0xe0>
    677e:	b01b      	add	sp, #108	; 0x6c
    6780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00006784 <ct_inverse_mod_383>:
    6784:	b510      	push	{r4, lr}
    6786:	b082      	sub	sp, #8
    6788:	240c      	movs	r4, #12
    678a:	9400      	str	r4, [sp, #0]
    678c:	f7fc fff2 	bl	3774 <ct_inverse_mod_n>
    6790:	b002      	add	sp, #8
    6792:	bd10      	pop	{r4, pc}

00006794 <div_3_limbs>:
    6794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6798:	4696      	mov	lr, r2
    679a:	6802      	ldr	r2, [r0, #0]
    679c:	6840      	ldr	r0, [r0, #4]
    679e:	2620      	movs	r6, #32
    67a0:	2400      	movs	r4, #0
    67a2:	4625      	mov	r5, r4
    67a4:	1a57      	subs	r7, r2, r1
    67a6:	1a53      	subs	r3, r2, r1
    67a8:	eb65 0c05 	sbc.w	ip, r5, r5
    67ac:	f00c 0c01 	and.w	ip, ip, #1
    67b0:	ebb0 080e 	subs.w	r8, r0, lr
    67b4:	eb65 0305 	sbc.w	r3, r5, r5
    67b8:	ebb8 0c0c 	subs.w	ip, r8, ip
    67bc:	f163 0300 	sbc.w	r3, r3, #0
    67c0:	407a      	eors	r2, r7
    67c2:	401a      	ands	r2, r3
    67c4:	407a      	eors	r2, r7
    67c6:	ea8c 0000 	eor.w	r0, ip, r0
    67ca:	4018      	ands	r0, r3
    67cc:	ea80 000c 	eor.w	r0, r0, ip
    67d0:	f083 0301 	eor.w	r3, r3, #1
    67d4:	f003 0301 	and.w	r3, r3, #1
    67d8:	ea43 0444 	orr.w	r4, r3, r4, lsl #1
    67dc:	ea4f 73ce 	mov.w	r3, lr, lsl #31
    67e0:	ea43 0151 	orr.w	r1, r3, r1, lsr #1
    67e4:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
    67e8:	3e01      	subs	r6, #1
    67ea:	d1db      	bne.n	67a4 <div_3_limbs+0x10>
    67ec:	2300      	movs	r3, #0
    67ee:	1a51      	subs	r1, r2, r1
    67f0:	eb63 0203 	sbc.w	r2, r3, r3
    67f4:	f002 0201 	and.w	r2, r2, #1
    67f8:	ebb0 000e 	subs.w	r0, r0, lr
    67fc:	eb63 0303 	sbc.w	r3, r3, r3
    6800:	1a80      	subs	r0, r0, r2
    6802:	f163 0300 	sbc.w	r3, r3, #0
    6806:	43db      	mvns	r3, r3
    6808:	f003 0301 	and.w	r3, r3, #1
    680c:	0060      	lsls	r0, r4, #1
    680e:	ea40 70e4 	orr.w	r0, r0, r4, asr #31
    6812:	4318      	orrs	r0, r3
    6814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006818 <div_by_zz>:
    6818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    681c:	f100 0418 	add.w	r4, r0, #24
    6820:	f100 0508 	add.w	r5, r0, #8
    6824:	f8df 8028 	ldr.w	r8, [pc, #40]	; 6850 <div_by_zz+0x38>
    6828:	4f0a      	ldr	r7, [pc, #40]	; (6854 <div_by_zz+0x3c>)
    682a:	4e0b      	ldr	r6, [pc, #44]	; (6858 <div_by_zz+0x40>)
    682c:	4642      	mov	r2, r8
    682e:	4639      	mov	r1, r7
    6830:	4620      	mov	r0, r4
    6832:	f7ff ffaf 	bl	6794 <div_3_limbs>
    6836:	4602      	mov	r2, r0
    6838:	2304      	movs	r3, #4
    683a:	4631      	mov	r1, r6
    683c:	f1a4 000c 	sub.w	r0, r4, #12
    6840:	f7fa fe41 	bl	14c6 <quot_rem_n>
    6844:	3c04      	subs	r4, #4
    6846:	42ac      	cmp	r4, r5
    6848:	d1f0      	bne.n	682c <div_by_zz+0x14>
    684a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    684e:	bf00      	nop
    6850:	ac45a401 	.word	0xac45a401
    6854:	0001a402 	.word	0x0001a402
    6858:	00016db8 	.word	0x00016db8

0000685c <POINTonE1_mult_glv>:
    685c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6860:	b0b3      	sub	sp, #204	; 0xcc
    6862:	4605      	mov	r5, r0
    6864:	460e      	mov	r6, r1
    6866:	f102 0c20 	add.w	ip, r2, #32
    686a:	2400      	movs	r4, #0
    686c:	43d0      	mvns	r0, r2
    686e:	eb00 030c 	add.w	r3, r0, ip
    6872:	f81c 1d01 	ldrb.w	r1, [ip, #-1]!
    6876:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
    687a:	f023 0303 	bic.w	r3, r3, #3
    687e:	a932      	add	r1, sp, #200	; 0xc8
    6880:	440b      	add	r3, r1
    6882:	f843 4c20 	str.w	r4, [r3, #-32]
    6886:	4562      	cmp	r2, ip
    6888:	d1f1      	bne.n	686e <POINTonE1_mult_glv+0x12>
    688a:	ac2a      	add	r4, sp, #168	; 0xa8
    688c:	4620      	mov	r0, r4
    688e:	f7ff ffc3 	bl	6818 <div_by_zz>
    6892:	af06      	add	r7, sp, #24
    6894:	4631      	mov	r1, r6
    6896:	4638      	mov	r0, r7
    6898:	f7fa f921 	bl	ade <sigma>
    689c:	2101      	movs	r1, #1
    689e:	4638      	mov	r0, r7
    68a0:	f7fb f8de 	bl	1a60 <POINTonE1_cneg>
    68a4:	9602      	str	r6, [sp, #8]
    68a6:	ab2e      	add	r3, sp, #184	; 0xb8
    68a8:	9304      	str	r3, [sp, #16]
    68aa:	9703      	str	r7, [sp, #12]
    68ac:	9405      	str	r4, [sp, #20]
    68ae:	2300      	movs	r3, #0
    68b0:	9301      	str	r3, [sp, #4]
    68b2:	2380      	movs	r3, #128	; 0x80
    68b4:	9300      	str	r3, [sp, #0]
    68b6:	ab04      	add	r3, sp, #16
    68b8:	2202      	movs	r2, #2
    68ba:	a902      	add	r1, sp, #8
    68bc:	4628      	mov	r0, r5
    68be:	f7fc fc87 	bl	31d0 <POINTonE1s_mult_w4>
    68c2:	2101      	movs	r1, #1
    68c4:	4628      	mov	r0, r5
    68c6:	f7fb f8cb 	bl	1a60 <POINTonE1_cneg>
    68ca:	3560      	adds	r5, #96	; 0x60
    68cc:	4e12      	ldr	r6, [pc, #72]	; (6918 <POINTonE1_mult_glv+0xbc>)
    68ce:	f106 0730 	add.w	r7, r6, #48	; 0x30
    68d2:	f04f 090c 	mov.w	r9, #12
    68d6:	f8cd 9004 	str.w	r9, [sp, #4]
    68da:	f8df 8040 	ldr.w	r8, [pc, #64]	; 691c <POINTonE1_mult_glv+0xc0>
    68de:	f8cd 8000 	str.w	r8, [sp]
    68e2:	4633      	mov	r3, r6
    68e4:	463a      	mov	r2, r7
    68e6:	4629      	mov	r1, r5
    68e8:	4628      	mov	r0, r5
    68ea:	f7fa f81f 	bl	92c <mul_mont_n>
    68ee:	f8cd 9004 	str.w	r9, [sp, #4]
    68f2:	f8cd 8000 	str.w	r8, [sp]
    68f6:	4633      	mov	r3, r6
    68f8:	463a      	mov	r2, r7
    68fa:	4629      	mov	r1, r5
    68fc:	4628      	mov	r0, r5
    68fe:	f7fa f815 	bl	92c <mul_mont_n>
    6902:	4620      	mov	r0, r4
    6904:	aa32      	add	r2, sp, #200	; 0xc8
    6906:	2300      	movs	r3, #0
    6908:	f840 3b04 	str.w	r3, [r0], #4
    690c:	4290      	cmp	r0, r2
    690e:	d1fb      	bne.n	6908 <POINTonE1_mult_glv+0xac>
    6910:	ab2a      	add	r3, sp, #168	; 0xa8
    6912:	b033      	add	sp, #204	; 0xcc
    6914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6918:	00015a08 	.word	0x00015a08
    691c:	fffcfffd 	.word	0xfffcfffd

00006920 <POINTonE1_sign>:
    6920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6924:	b09a      	sub	sp, #104	; 0x68
    6926:	4680      	mov	r8, r0
    6928:	f7ff ff98 	bl	685c <POINTonE1_mult_glv>
    692c:	f108 0160 	add.w	r1, r8, #96	; 0x60
    6930:	f108 045c 	add.w	r4, r8, #92	; 0x5c
    6934:	f108 058c 	add.w	r5, r8, #140	; 0x8c
    6938:	4623      	mov	r3, r4
    693a:	2700      	movs	r7, #0
    693c:	f853 2f04 	ldr.w	r2, [r3, #4]!
    6940:	4317      	orrs	r7, r2
    6942:	42ab      	cmp	r3, r5
    6944:	d1fa      	bne.n	693c <POINTonE1_sign+0x1c>
    6946:	a80e      	add	r0, sp, #56	; 0x38
    6948:	f7fe fb80 	bl	504c <flt_reciprocal_fp>
    694c:	4e20      	ldr	r6, [pc, #128]	; (69d0 <POINTonE1_sign+0xb0>)
    694e:	f04f 0a0c 	mov.w	sl, #12
    6952:	f8cd a004 	str.w	sl, [sp, #4]
    6956:	f8df 907c 	ldr.w	r9, [pc, #124]	; 69d4 <POINTonE1_sign+0xb4>
    695a:	f8cd 9000 	str.w	r9, [sp]
    695e:	4633      	mov	r3, r6
    6960:	aa0e      	add	r2, sp, #56	; 0x38
    6962:	4611      	mov	r1, r2
    6964:	a802      	add	r0, sp, #8
    6966:	f7f9 ffe1 	bl	92c <mul_mont_n>
    696a:	f8cd a004 	str.w	sl, [sp, #4]
    696e:	f8cd 9000 	str.w	r9, [sp]
    6972:	4633      	mov	r3, r6
    6974:	aa02      	add	r2, sp, #8
    6976:	4641      	mov	r1, r8
    6978:	4640      	mov	r0, r8
    697a:	f7f9 ffd7 	bl	92c <mul_mont_n>
    697e:	f8cd a004 	str.w	sl, [sp, #4]
    6982:	f8cd 9000 	str.w	r9, [sp]
    6986:	4633      	mov	r3, r6
    6988:	aa0e      	add	r2, sp, #56	; 0x38
    698a:	a902      	add	r1, sp, #8
    698c:	4608      	mov	r0, r1
    698e:	f7f9 ffcd 	bl	92c <mul_mont_n>
    6992:	f108 0030 	add.w	r0, r8, #48	; 0x30
    6996:	f8cd a004 	str.w	sl, [sp, #4]
    699a:	f8cd 9000 	str.w	r9, [sp]
    699e:	4633      	mov	r3, r6
    69a0:	aa02      	add	r2, sp, #8
    69a2:	4601      	mov	r1, r0
    69a4:	f7f9 ffc2 	bl	92c <mul_mont_n>
    69a8:	1e7b      	subs	r3, r7, #1
    69aa:	ea23 0707 	bic.w	r7, r3, r7
    69ae:	17ff      	asrs	r7, r7, #31
    69b0:	f606 534c 	addw	r3, r6, #3404	; 0xd4c
    69b4:	f853 1f04 	ldr.w	r1, [r3, #4]!
    69b8:	f854 2f04 	ldr.w	r2, [r4, #4]!
    69bc:	404a      	eors	r2, r1
    69be:	403a      	ands	r2, r7
    69c0:	404a      	eors	r2, r1
    69c2:	6022      	str	r2, [r4, #0]
    69c4:	42ac      	cmp	r4, r5
    69c6:	d1f5      	bne.n	69b4 <POINTonE1_sign+0x94>
    69c8:	b01a      	add	sp, #104	; 0x68
    69ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    69ce:	bf00      	nop
    69d0:	00015a08 	.word	0x00015a08
    69d4:	fffcfffd 	.word	0xfffcfffd

000069d8 <blst_sk_to_pk_in_g1>:
    69d8:	b508      	push	{r3, lr}
    69da:	460a      	mov	r2, r1
    69dc:	4901      	ldr	r1, [pc, #4]	; (69e4 <blst_sk_to_pk_in_g1+0xc>)
    69de:	f7ff ff9f 	bl	6920 <POINTonE1_sign>
    69e2:	bd08      	pop	{r3, pc}
    69e4:	000166f8 	.word	0x000166f8

000069e8 <blst_sign_pk_in_g2>:
    69e8:	b508      	push	{r3, lr}
    69ea:	f7ff ff99 	bl	6920 <POINTonE1_sign>
    69ee:	bd08      	pop	{r3, pc}

000069f0 <blst_sk_to_pk2_in_g1>:
    69f0:	b530      	push	{r4, r5, lr}
    69f2:	b0a5      	sub	sp, #148	; 0x94
    69f4:	4605      	mov	r5, r0
    69f6:	460c      	mov	r4, r1
    69f8:	4914      	ldr	r1, [pc, #80]	; (6a4c <blst_sk_to_pk2_in_g1+0x5c>)
    69fa:	4668      	mov	r0, sp
    69fc:	f7ff ff90 	bl	6920 <POINTonE1_sign>
    6a00:	b14c      	cbz	r4, 6a16 <blst_sk_to_pk2_in_g1+0x26>
    6a02:	f1ad 0304 	sub.w	r3, sp, #4
    6a06:	1f21      	subs	r1, r4, #4
    6a08:	a817      	add	r0, sp, #92	; 0x5c
    6a0a:	f853 2f04 	ldr.w	r2, [r3, #4]!
    6a0e:	f841 2f04 	str.w	r2, [r1, #4]!
    6a12:	4283      	cmp	r3, r0
    6a14:	d1f9      	bne.n	6a0a <blst_sk_to_pk2_in_g1+0x1a>
    6a16:	b1bd      	cbz	r5, 6a48 <blst_sk_to_pk2_in_g1+0x58>
    6a18:	4669      	mov	r1, sp
    6a1a:	4628      	mov	r0, r5
    6a1c:	f7fe fef0 	bl	5800 <POINTonE1_Serialize_BE>
    6a20:	0100      	lsls	r0, r0, #4
    6a22:	f000 0220 	and.w	r2, r0, #32
    6a26:	7828      	ldrb	r0, [r5, #0]
    6a28:	4310      	orrs	r0, r2
    6a2a:	ab17      	add	r3, sp, #92	; 0x5c
    6a2c:	ac23      	add	r4, sp, #140	; 0x8c
    6a2e:	2200      	movs	r2, #0
    6a30:	f853 1f04 	ldr.w	r1, [r3, #4]!
    6a34:	430a      	orrs	r2, r1
    6a36:	42a3      	cmp	r3, r4
    6a38:	d1fa      	bne.n	6a30 <blst_sk_to_pk2_in_g1+0x40>
    6a3a:	1e53      	subs	r3, r2, #1
    6a3c:	ea23 0202 	bic.w	r2, r3, r2
    6a40:	0fd2      	lsrs	r2, r2, #31
    6a42:	ea40 1282 	orr.w	r2, r0, r2, lsl #6
    6a46:	702a      	strb	r2, [r5, #0]
    6a48:	b025      	add	sp, #148	; 0x94
    6a4a:	bd30      	pop	{r4, r5, pc}
    6a4c:	000166f8 	.word	0x000166f8

00006a50 <blst_sign_pk2_in_g2>:
    6a50:	b530      	push	{r4, r5, lr}
    6a52:	b0a5      	sub	sp, #148	; 0x94
    6a54:	4605      	mov	r5, r0
    6a56:	460c      	mov	r4, r1
    6a58:	4611      	mov	r1, r2
    6a5a:	461a      	mov	r2, r3
    6a5c:	4668      	mov	r0, sp
    6a5e:	f7ff ff5f 	bl	6920 <POINTonE1_sign>
    6a62:	b14c      	cbz	r4, 6a78 <blst_sign_pk2_in_g2+0x28>
    6a64:	f1ad 0304 	sub.w	r3, sp, #4
    6a68:	1f21      	subs	r1, r4, #4
    6a6a:	a817      	add	r0, sp, #92	; 0x5c
    6a6c:	f853 2f04 	ldr.w	r2, [r3, #4]!
    6a70:	f841 2f04 	str.w	r2, [r1, #4]!
    6a74:	4283      	cmp	r3, r0
    6a76:	d1f9      	bne.n	6a6c <blst_sign_pk2_in_g2+0x1c>
    6a78:	b1bd      	cbz	r5, 6aaa <blst_sign_pk2_in_g2+0x5a>
    6a7a:	4669      	mov	r1, sp
    6a7c:	4628      	mov	r0, r5
    6a7e:	f7fe febf 	bl	5800 <POINTonE1_Serialize_BE>
    6a82:	0100      	lsls	r0, r0, #4
    6a84:	f000 0220 	and.w	r2, r0, #32
    6a88:	7828      	ldrb	r0, [r5, #0]
    6a8a:	4310      	orrs	r0, r2
    6a8c:	ab17      	add	r3, sp, #92	; 0x5c
    6a8e:	ac23      	add	r4, sp, #140	; 0x8c
    6a90:	2200      	movs	r2, #0
    6a92:	f853 1f04 	ldr.w	r1, [r3, #4]!
    6a96:	430a      	orrs	r2, r1
    6a98:	42a3      	cmp	r3, r4
    6a9a:	d1fa      	bne.n	6a92 <blst_sign_pk2_in_g2+0x42>
    6a9c:	1e53      	subs	r3, r2, #1
    6a9e:	ea23 0202 	bic.w	r2, r3, r2
    6aa2:	0fd2      	lsrs	r2, r2, #31
    6aa4:	ea40 1282 	orr.w	r2, r0, r2, lsl #6
    6aa8:	702a      	strb	r2, [r5, #0]
    6aaa:	b025      	add	sp, #148	; 0x94
    6aac:	bd30      	pop	{r4, r5, pc}

00006aae <blst_p1_mult>:
    6aae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6ab2:	b089      	sub	sp, #36	; 0x24
    6ab4:	4607      	mov	r7, r0
    6ab6:	4688      	mov	r8, r1
    6ab8:	4615      	mov	r5, r2
    6aba:	461e      	mov	r6, r3
    6abc:	2bbf      	cmp	r3, #191	; 0xbf
    6abe:	d934      	bls.n	6b2a <blst_p1_mult+0x7c>
    6ac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    6ac4:	d83b      	bhi.n	6b3e <blst_p1_mult+0x90>
    6ac6:	1dd8      	adds	r0, r3, #7
    6ac8:	08c0      	lsrs	r0, r0, #3
    6aca:	f10d 33ff 	add.w	r3, sp, #4294967295
    6ace:	466c      	mov	r4, sp
    6ad0:	f10d 0e1f 	add.w	lr, sp, #31
    6ad4:	f04f 39ff 	mov.w	r9, #4294967295
    6ad8:	2100      	movs	r1, #0
    6ada:	469c      	mov	ip, r3
    6adc:	5c6a      	ldrb	r2, [r5, r1]
    6ade:	ea02 0209 	and.w	r2, r2, r9
    6ae2:	f803 2f01 	strb.w	r2, [r3, #1]!
    6ae6:	f10c 0c02 	add.w	ip, ip, #2
    6aea:	ebac 0c04 	sub.w	ip, ip, r4
    6aee:	ebac 0c00 	sub.w	ip, ip, r0
    6af2:	ea4f 79ec 	mov.w	r9, ip, asr #31
    6af6:	eb01 71dc 	add.w	r1, r1, ip, lsr #31
    6afa:	4573      	cmp	r3, lr
    6afc:	d1ed      	bne.n	6ada <blst_p1_mult+0x2c>
    6afe:	2208      	movs	r2, #8
    6b00:	4910      	ldr	r1, [pc, #64]	; (6b44 <blst_p1_mult+0x96>)
    6b02:	4668      	mov	r0, sp
    6b04:	f7f9 fd9d 	bl	642 <check_mod_n>
    6b08:	b190      	cbz	r0, 6b30 <blst_p1_mult+0x82>
    6b0a:	466a      	mov	r2, sp
    6b0c:	4641      	mov	r1, r8
    6b0e:	4638      	mov	r0, r7
    6b10:	f7ff fea4 	bl	685c <POINTonE1_mult_glv>
    6b14:	f104 0220 	add.w	r2, r4, #32
    6b18:	2300      	movs	r3, #0
    6b1a:	f844 3b04 	str.w	r3, [r4], #4
    6b1e:	42a2      	cmp	r2, r4
    6b20:	d1fb      	bne.n	6b1a <blst_p1_mult+0x6c>
    6b22:	466b      	mov	r3, sp
    6b24:	b009      	add	sp, #36	; 0x24
    6b26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6b2a:	f7fc fc16 	bl	335a <POINTonE1_mult_w4>
    6b2e:	e7f9      	b.n	6b24 <blst_p1_mult+0x76>
    6b30:	4633      	mov	r3, r6
    6b32:	462a      	mov	r2, r5
    6b34:	4641      	mov	r1, r8
    6b36:	4638      	mov	r0, r7
    6b38:	f7fc fc7d 	bl	3436 <POINTonE1_mult_w5>
    6b3c:	e7ea      	b.n	6b14 <blst_p1_mult+0x66>
    6b3e:	f7fc fc7a 	bl	3436 <POINTonE1_mult_w5>
    6b42:	e7ef      	b.n	6b24 <blst_p1_mult+0x76>
    6b44:	00016dc8 	.word	0x00016dc8

00006b48 <div_by_z>:
    6b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b4a:	4604      	mov	r4, r0
    6b4c:	4f0d      	ldr	r7, [pc, #52]	; (6b84 <div_by_z+0x3c>)
    6b4e:	463a      	mov	r2, r7
    6b50:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    6b54:	3008      	adds	r0, #8
    6b56:	f7ff fe1d 	bl	6794 <div_3_limbs>
    6b5a:	4602      	mov	r2, r0
    6b5c:	1d26      	adds	r6, r4, #4
    6b5e:	4d0a      	ldr	r5, [pc, #40]	; (6b88 <div_by_z+0x40>)
    6b60:	2302      	movs	r3, #2
    6b62:	4629      	mov	r1, r5
    6b64:	4630      	mov	r0, r6
    6b66:	f7fa fcae 	bl	14c6 <quot_rem_n>
    6b6a:	463a      	mov	r2, r7
    6b6c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    6b70:	4630      	mov	r0, r6
    6b72:	f7ff fe0f 	bl	6794 <div_3_limbs>
    6b76:	4602      	mov	r2, r0
    6b78:	2302      	movs	r3, #2
    6b7a:	4629      	mov	r1, r5
    6b7c:	4620      	mov	r0, r4
    6b7e:	f7fa fca2 	bl	14c6 <quot_rem_n>
    6b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b84:	d2010000 	.word	0xd2010000
    6b88:	00016de8 	.word	0x00016de8

00006b8c <quot_rem_128>:
    6b8c:	b508      	push	{r3, lr}
    6b8e:	2304      	movs	r3, #4
    6b90:	f7fa fc99 	bl	14c6 <quot_rem_n>
    6b94:	bd08      	pop	{r3, pc}

00006b96 <quot_rem_64>:
    6b96:	b508      	push	{r3, lr}
    6b98:	2302      	movs	r3, #2
    6b9a:	f7fa fc94 	bl	14c6 <quot_rem_n>
    6b9e:	bd08      	pop	{r3, pc}

00006ba0 <blst_sha256_block_data_order>:
    6ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ba4:	b099      	sub	sp, #100	; 0x64
    6ba6:	4603      	mov	r3, r0
    6ba8:	9007      	str	r0, [sp, #28]
    6baa:	9105      	str	r1, [sp, #20]
    6bac:	6800      	ldr	r0, [r0, #0]
    6bae:	685f      	ldr	r7, [r3, #4]
    6bb0:	f8d3 b008 	ldr.w	fp, [r3, #8]
    6bb4:	68dd      	ldr	r5, [r3, #12]
    6bb6:	691c      	ldr	r4, [r3, #16]
    6bb8:	695e      	ldr	r6, [r3, #20]
    6bba:	6999      	ldr	r1, [r3, #24]
    6bbc:	9101      	str	r1, [sp, #4]
    6bbe:	69d9      	ldr	r1, [r3, #28]
    6bc0:	1e53      	subs	r3, r2, #1
    6bc2:	9306      	str	r3, [sp, #24]
    6bc4:	2a00      	cmp	r2, #0
    6bc6:	f000 80f0 	beq.w	6daa <blst_sha256_block_data_order+0x20a>
    6bca:	46b0      	mov	r8, r6
    6bcc:	462e      	mov	r6, r5
    6bce:	465d      	mov	r5, fp
    6bd0:	e0e2      	b.n	6d98 <blst_sha256_block_data_order+0x1f8>
    6bd2:	f8cd 8004 	str.w	r8, [sp, #4]
    6bd6:	46a0      	mov	r8, r4
    6bd8:	4674      	mov	r4, lr
    6bda:	463d      	mov	r5, r7
    6bdc:	4607      	mov	r7, r0
    6bde:	4610      	mov	r0, r2
    6be0:	f81c 3c03 	ldrb.w	r3, [ip, #-3]
    6be4:	f81c 2c04 	ldrb.w	r2, [ip, #-4]
    6be8:	0612      	lsls	r2, r2, #24
    6bea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    6bee:	f81c 3c01 	ldrb.w	r3, [ip, #-1]
    6bf2:	431a      	orrs	r2, r3
    6bf4:	f81c 3c02 	ldrb.w	r3, [ip, #-2]
    6bf8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    6bfc:	f849 2b04 	str.w	r2, [r9], #4
    6c00:	ea4f 23f4 	mov.w	r3, r4, ror #11
    6c04:	ea83 13b4 	eor.w	r3, r3, r4, ror #6
    6c08:	ea83 6374 	eor.w	r3, r3, r4, ror #25
    6c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
    6c10:	ea2e 0e04 	bic.w	lr, lr, r4
    6c14:	ea04 0b08 	and.w	fp, r4, r8
    6c18:	ea8e 0e0b 	eor.w	lr, lr, fp
    6c1c:	4473      	add	r3, lr
    6c1e:	f85a ef04 	ldr.w	lr, [sl, #4]!
    6c22:	4473      	add	r3, lr
    6c24:	441a      	add	r2, r3
    6c26:	4411      	add	r1, r2
    6c28:	ea4f 3370 	mov.w	r3, r0, ror #13
    6c2c:	ea83 03b0 	eor.w	r3, r3, r0, ror #2
    6c30:	ea83 53b0 	eor.w	r3, r3, r0, ror #22
    6c34:	ea87 0205 	eor.w	r2, r7, r5
    6c38:	4002      	ands	r2, r0
    6c3a:	ea07 0e05 	and.w	lr, r7, r5
    6c3e:	ea82 020e 	eor.w	r2, r2, lr
    6c42:	441a      	add	r2, r3
    6c44:	eb01 0e06 	add.w	lr, r1, r6
    6c48:	440a      	add	r2, r1
    6c4a:	f10c 0c04 	add.w	ip, ip, #4
    6c4e:	462e      	mov	r6, r5
    6c50:	9901      	ldr	r1, [sp, #4]
    6c52:	ab18      	add	r3, sp, #96	; 0x60
    6c54:	454b      	cmp	r3, r9
    6c56:	d1bc      	bne.n	6bd2 <blst_sha256_block_data_order+0x32>
    6c58:	4673      	mov	r3, lr
    6c5a:	9905      	ldr	r1, [sp, #20]
    6c5c:	3140      	adds	r1, #64	; 0x40
    6c5e:	9105      	str	r1, [sp, #20]
    6c60:	4953      	ldr	r1, [pc, #332]	; (6db0 <blst_sha256_block_data_order+0x210>)
    6c62:	f501 7b4b 	add.w	fp, r1, #812	; 0x32c
    6c66:	f8cd 800c 	str.w	r8, [sp, #12]
    6c6a:	9402      	str	r4, [sp, #8]
    6c6c:	4680      	mov	r8, r0
    6c6e:	f04f 0c10 	mov.w	ip, #16
    6c72:	f8cd b010 	str.w	fp, [sp, #16]
    6c76:	46a9      	mov	r9, r5
    6c78:	f8dd a004 	ldr.w	sl, [sp, #4]
    6c7c:	46be      	mov	lr, r7
    6c7e:	e006      	b.n	6c8e <blst_sha256_block_data_order+0xee>
    6c80:	9802      	ldr	r0, [sp, #8]
    6c82:	9003      	str	r0, [sp, #12]
    6c84:	9302      	str	r3, [sp, #8]
    6c86:	4623      	mov	r3, r4
    6c88:	46c6      	mov	lr, r8
    6c8a:	4690      	mov	r8, r2
    6c8c:	460a      	mov	r2, r1
    6c8e:	4665      	mov	r5, ip
    6c90:	f10c 0c01 	add.w	ip, ip, #1
    6c94:	f00c 010f 	and.w	r1, ip, #15
    6c98:	a818      	add	r0, sp, #96	; 0x60
    6c9a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    6c9e:	f851 6c40 	ldr.w	r6, [r1, #-64]
    6ca2:	ea4f 41b6 	mov.w	r1, r6, ror #18
    6ca6:	ea81 11f6 	eor.w	r1, r1, r6, ror #7
    6caa:	f105 000e 	add.w	r0, r5, #14
    6cae:	f000 000f 	and.w	r0, r0, #15
    6cb2:	ac18      	add	r4, sp, #96	; 0x60
    6cb4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    6cb8:	f850 7c40 	ldr.w	r7, [r0, #-64]
    6cbc:	ea4f 40f7 	mov.w	r0, r7, ror #19
    6cc0:	ea80 4077 	eor.w	r0, r0, r7, ror #17
    6cc4:	f005 040f 	and.w	r4, r5, #15
    6cc8:	3509      	adds	r5, #9
    6cca:	f005 050f 	and.w	r5, r5, #15
    6cce:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
    6cd2:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
    6cd6:	eb0b 0484 	add.w	r4, fp, r4, lsl #2
    6cda:	f855 5c40 	ldr.w	r5, [r5, #-64]
    6cde:	f854 bc40 	ldr.w	fp, [r4, #-64]
    6ce2:	445d      	add	r5, fp
    6ce4:	ea81 01d6 	eor.w	r1, r1, r6, lsr #3
    6ce8:	440d      	add	r5, r1
    6cea:	ea80 2197 	eor.w	r1, r0, r7, lsr #10
    6cee:	4429      	add	r1, r5
    6cf0:	f844 1c40 	str.w	r1, [r4, #-64]
    6cf4:	ea4f 25f3 	mov.w	r5, r3, ror #11
    6cf8:	ea85 15b3 	eor.w	r5, r5, r3, ror #6
    6cfc:	ea85 6073 	eor.w	r0, r5, r3, ror #25
    6d00:	9e03      	ldr	r6, [sp, #12]
    6d02:	ea26 0503 	bic.w	r5, r6, r3
    6d06:	9c02      	ldr	r4, [sp, #8]
    6d08:	401c      	ands	r4, r3
    6d0a:	4065      	eors	r5, r4
    6d0c:	4405      	add	r5, r0
    6d0e:	9c04      	ldr	r4, [sp, #16]
    6d10:	f854 0f04 	ldr.w	r0, [r4, #4]!
    6d14:	9404      	str	r4, [sp, #16]
    6d16:	4405      	add	r5, r0
    6d18:	440d      	add	r5, r1
    6d1a:	44aa      	add	sl, r5
    6d1c:	ea4f 3172 	mov.w	r1, r2, ror #13
    6d20:	ea81 01b2 	eor.w	r1, r1, r2, ror #2
    6d24:	ea81 50b2 	eor.w	r0, r1, r2, ror #22
    6d28:	ea88 010e 	eor.w	r1, r8, lr
    6d2c:	4011      	ands	r1, r2
    6d2e:	ea08 040e 	and.w	r4, r8, lr
    6d32:	4061      	eors	r1, r4
    6d34:	4401      	add	r1, r0
    6d36:	eb0a 0409 	add.w	r4, sl, r9
    6d3a:	4451      	add	r1, sl
    6d3c:	46f1      	mov	r9, lr
    6d3e:	46b2      	mov	sl, r6
    6d40:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    6d44:	d19c      	bne.n	6c80 <blst_sha256_block_data_order+0xe0>
    6d46:	4676      	mov	r6, lr
    6d48:	9d07      	ldr	r5, [sp, #28]
    6d4a:	6828      	ldr	r0, [r5, #0]
    6d4c:	4408      	add	r0, r1
    6d4e:	4629      	mov	r1, r5
    6d50:	6028      	str	r0, [r5, #0]
    6d52:	686f      	ldr	r7, [r5, #4]
    6d54:	4417      	add	r7, r2
    6d56:	606f      	str	r7, [r5, #4]
    6d58:	68ad      	ldr	r5, [r5, #8]
    6d5a:	4445      	add	r5, r8
    6d5c:	608d      	str	r5, [r1, #8]
    6d5e:	68ca      	ldr	r2, [r1, #12]
    6d60:	4416      	add	r6, r2
    6d62:	60ce      	str	r6, [r1, #12]
    6d64:	690a      	ldr	r2, [r1, #16]
    6d66:	4414      	add	r4, r2
    6d68:	610c      	str	r4, [r1, #16]
    6d6a:	694a      	ldr	r2, [r1, #20]
    6d6c:	eb03 0802 	add.w	r8, r3, r2
    6d70:	460a      	mov	r2, r1
    6d72:	f8c1 8014 	str.w	r8, [r1, #20]
    6d76:	698b      	ldr	r3, [r1, #24]
    6d78:	9902      	ldr	r1, [sp, #8]
    6d7a:	4419      	add	r1, r3
    6d7c:	9101      	str	r1, [sp, #4]
    6d7e:	4613      	mov	r3, r2
    6d80:	6191      	str	r1, [r2, #24]
    6d82:	69d1      	ldr	r1, [r2, #28]
    6d84:	4652      	mov	r2, sl
    6d86:	440a      	add	r2, r1
    6d88:	4611      	mov	r1, r2
    6d8a:	61da      	str	r2, [r3, #28]
    6d8c:	9b06      	ldr	r3, [sp, #24]
    6d8e:	3b01      	subs	r3, #1
    6d90:	9306      	str	r3, [sp, #24]
    6d92:	f1b3 3fff 	cmp.w	r3, #4294967295
    6d96:	d008      	beq.n	6daa <blst_sha256_block_data_order+0x20a>
    6d98:	9b05      	ldr	r3, [sp, #20]
    6d9a:	f103 0c04 	add.w	ip, r3, #4
    6d9e:	f10d 0920 	add.w	r9, sp, #32
    6da2:	4b03      	ldr	r3, [pc, #12]	; (6db0 <blst_sha256_block_data_order+0x210>)
    6da4:	f503 7a3b 	add.w	sl, r3, #748	; 0x2ec
    6da8:	e71a      	b.n	6be0 <blst_sha256_block_data_order+0x40>
    6daa:	b019      	add	sp, #100	; 0x64
    6dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6db0:	00016b00 	.word	0x00016b00

00006db4 <blst_sha256_hcopy>:
    6db4:	1f0b      	subs	r3, r1, #4
    6db6:	3804      	subs	r0, #4
    6db8:	311c      	adds	r1, #28
    6dba:	f853 2f04 	ldr.w	r2, [r3, #4]!
    6dbe:	f840 2f04 	str.w	r2, [r0, #4]!
    6dc2:	428b      	cmp	r3, r1
    6dc4:	d1f9      	bne.n	6dba <blst_sha256_hcopy+0x6>
    6dc6:	4770      	bx	lr

00006dc8 <blst_sha256_emit>:
    6dc8:	1d03      	adds	r3, r0, #4
    6dca:	3904      	subs	r1, #4
    6dcc:	f100 0c24 	add.w	ip, r0, #36	; 0x24
    6dd0:	f851 2f04 	ldr.w	r2, [r1, #4]!
    6dd4:	0e10      	lsrs	r0, r2, #24
    6dd6:	f803 0c04 	strb.w	r0, [r3, #-4]
    6dda:	0c10      	lsrs	r0, r2, #16
    6ddc:	f803 0c03 	strb.w	r0, [r3, #-3]
    6de0:	0a10      	lsrs	r0, r2, #8
    6de2:	f803 0c02 	strb.w	r0, [r3, #-2]
    6de6:	f803 2c01 	strb.w	r2, [r3, #-1]
    6dea:	3304      	adds	r3, #4
    6dec:	4563      	cmp	r3, ip
    6dee:	d1ef      	bne.n	6dd0 <blst_sha256_emit+0x8>
    6df0:	4770      	bx	lr

00006df2 <sha256_final>:
    6df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6df6:	4607      	mov	r7, r0
    6df8:	460c      	mov	r4, r1
    6dfa:	6a0e      	ldr	r6, [r1, #32]
    6dfc:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    6dfe:	00ed      	lsls	r5, r5, #3
    6e00:	ea45 7556 	orr.w	r5, r5, r6, lsr #29
    6e04:	00f6      	lsls	r6, r6, #3
    6e06:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    6e08:	18ca      	adds	r2, r1, r3
    6e0a:	2180      	movs	r1, #128	; 0x80
    6e0c:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    6e10:	3301      	adds	r3, #1
    6e12:	2b38      	cmp	r3, #56	; 0x38
    6e14:	d821      	bhi.n	6e5a <sha256_final+0x68>
    6e16:	0e2b      	lsrs	r3, r5, #24
    6e18:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    6e1c:	0c2b      	lsrs	r3, r5, #16
    6e1e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    6e22:	0a2b      	lsrs	r3, r5, #8
    6e24:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    6e28:	f884 5063 	strb.w	r5, [r4, #99]	; 0x63
    6e2c:	0e33      	lsrs	r3, r6, #24
    6e2e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    6e32:	0c33      	lsrs	r3, r6, #16
    6e34:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    6e38:	0a33      	lsrs	r3, r6, #8
    6e3a:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    6e3e:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
    6e42:	2201      	movs	r2, #1
    6e44:	f104 0128 	add.w	r1, r4, #40	; 0x28
    6e48:	4620      	mov	r0, r4
    6e4a:	f7ff fea9 	bl	6ba0 <blst_sha256_block_data_order>
    6e4e:	4621      	mov	r1, r4
    6e50:	4638      	mov	r0, r7
    6e52:	f7ff ffb9 	bl	6dc8 <blst_sha256_emit>
    6e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e5a:	f104 0828 	add.w	r8, r4, #40	; 0x28
    6e5e:	2201      	movs	r2, #1
    6e60:	4641      	mov	r1, r8
    6e62:	4620      	mov	r0, r4
    6e64:	f7ff fe9c 	bl	6ba0 <blst_sha256_block_data_order>
    6e68:	4643      	mov	r3, r8
    6e6a:	f104 0168 	add.w	r1, r4, #104	; 0x68
    6e6e:	2200      	movs	r2, #0
    6e70:	f843 2b04 	str.w	r2, [r3], #4
    6e74:	428b      	cmp	r3, r1
    6e76:	d1fb      	bne.n	6e70 <sha256_final+0x7e>
    6e78:	e7cd      	b.n	6e16 <sha256_final+0x24>

00006e7a <HMAC_final>:
    6e7a:	b570      	push	{r4, r5, r6, lr}
    6e7c:	4605      	mov	r5, r0
    6e7e:	460c      	mov	r4, r1
    6e80:	f101 06b0 	add.w	r6, r1, #176	; 0xb0
    6e84:	4630      	mov	r0, r6
    6e86:	f7ff ffb4 	bl	6df2 <sha256_final>
    6e8a:	f104 0190 	add.w	r1, r4, #144	; 0x90
    6e8e:	4620      	mov	r0, r4
    6e90:	f7ff ff90 	bl	6db4 <blst_sha256_hcopy>
    6e94:	2201      	movs	r2, #1
    6e96:	4631      	mov	r1, r6
    6e98:	4620      	mov	r0, r4
    6e9a:	f7ff fe81 	bl	6ba0 <blst_sha256_block_data_order>
    6e9e:	4621      	mov	r1, r4
    6ea0:	4628      	mov	r0, r5
    6ea2:	f7ff ff91 	bl	6dc8 <blst_sha256_emit>
    6ea6:	bd70      	pop	{r4, r5, r6, pc}

00006ea8 <blst_sha256_bcopy>:
    6ea8:	b152      	cbz	r2, 6ec0 <blst_sha256_bcopy+0x18>
    6eaa:	1e4b      	subs	r3, r1, #1
    6eac:	3801      	subs	r0, #1
    6eae:	f102 3cff 	add.w	ip, r2, #4294967295
    6eb2:	4461      	add	r1, ip
    6eb4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    6eb8:	f800 2f01 	strb.w	r2, [r0, #1]!
    6ebc:	428b      	cmp	r3, r1
    6ebe:	d1f9      	bne.n	6eb4 <blst_sha256_bcopy+0xc>
    6ec0:	4770      	bx	lr

00006ec2 <sha256_update>:
    6ec2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6ec6:	4605      	mov	r5, r0
    6ec8:	460e      	mov	r6, r1
    6eca:	4614      	mov	r4, r2
    6ecc:	6a03      	ldr	r3, [r0, #32]
    6ece:	6a42      	ldr	r2, [r0, #36]	; 0x24
    6ed0:	191b      	adds	r3, r3, r4
    6ed2:	f142 0200 	adc.w	r2, r2, #0
    6ed6:	6203      	str	r3, [r0, #32]
    6ed8:	6242      	str	r2, [r0, #36]	; 0x24
    6eda:	6e87      	ldr	r7, [r0, #104]	; 0x68
    6edc:	b1ec      	cbz	r4, 6f1a <sha256_update+0x58>
    6ede:	b1e7      	cbz	r7, 6f1a <sha256_update+0x58>
    6ee0:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    6ee4:	454c      	cmp	r4, r9
    6ee6:	d31d      	bcc.n	6f24 <sha256_update+0x62>
    6ee8:	f100 0828 	add.w	r8, r0, #40	; 0x28
    6eec:	464a      	mov	r2, r9
    6eee:	eb08 0007 	add.w	r0, r8, r7
    6ef2:	f7ff ffd9 	bl	6ea8 <blst_sha256_bcopy>
    6ef6:	444e      	add	r6, r9
    6ef8:	3c40      	subs	r4, #64	; 0x40
    6efa:	443c      	add	r4, r7
    6efc:	2201      	movs	r2, #1
    6efe:	4641      	mov	r1, r8
    6f00:	4628      	mov	r0, r5
    6f02:	f7ff fe4d 	bl	6ba0 <blst_sha256_block_data_order>
    6f06:	4643      	mov	r3, r8
    6f08:	f105 0168 	add.w	r1, r5, #104	; 0x68
    6f0c:	2200      	movs	r2, #0
    6f0e:	f843 2b04 	str.w	r2, [r3], #4
    6f12:	428b      	cmp	r3, r1
    6f14:	d1fb      	bne.n	6f0e <sha256_update+0x4c>
    6f16:	2300      	movs	r3, #0
    6f18:	66ab      	str	r3, [r5, #104]	; 0x68
    6f1a:	2c3f      	cmp	r4, #63	; 0x3f
    6f1c:	d80b      	bhi.n	6f36 <sha256_update+0x74>
    6f1e:	b9a4      	cbnz	r4, 6f4a <sha256_update+0x88>
    6f20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6f24:	3028      	adds	r0, #40	; 0x28
    6f26:	4622      	mov	r2, r4
    6f28:	4438      	add	r0, r7
    6f2a:	f7ff ffbd 	bl	6ea8 <blst_sha256_bcopy>
    6f2e:	6eab      	ldr	r3, [r5, #104]	; 0x68
    6f30:	4423      	add	r3, r4
    6f32:	66ab      	str	r3, [r5, #104]	; 0x68
    6f34:	e7f4      	b.n	6f20 <sha256_update+0x5e>
    6f36:	09a2      	lsrs	r2, r4, #6
    6f38:	4631      	mov	r1, r6
    6f3a:	4628      	mov	r0, r5
    6f3c:	f7ff fe30 	bl	6ba0 <blst_sha256_block_data_order>
    6f40:	f024 033f 	bic.w	r3, r4, #63	; 0x3f
    6f44:	441e      	add	r6, r3
    6f46:	1ae4      	subs	r4, r4, r3
    6f48:	e7e9      	b.n	6f1e <sha256_update+0x5c>
    6f4a:	66ac      	str	r4, [r5, #104]	; 0x68
    6f4c:	4622      	mov	r2, r4
    6f4e:	4631      	mov	r1, r6
    6f50:	f105 0028 	add.w	r0, r5, #40	; 0x28
    6f54:	f7ff ffa8 	bl	6ea8 <blst_sha256_bcopy>
    6f58:	e7e2      	b.n	6f20 <sha256_update+0x5e>

00006f5a <hash_to_field>:
    6f5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f5e:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
    6f62:	af02      	add	r7, sp, #8
    6f64:	4605      	mov	r5, r0
    6f66:	6079      	str	r1, [r7, #4]
    6f68:	f8d7 6268 	ldr.w	r6, [r7, #616]	; 0x268
    6f6c:	f8d7 826c 	ldr.w	r8, [r7, #620]	; 0x26c
    6f70:	018c      	lsls	r4, r1, #6
    6f72:	4668      	mov	r0, sp
    6f74:	eba0 1181 	sub.w	r1, r0, r1, lsl #6
    6f78:	468d      	mov	sp, r1
    6f7a:	f10d 0b08 	add.w	fp, sp, #8
    6f7e:	f1b2 0900 	subs.w	r9, r2, #0
    6f82:	bf08      	it	eq
    6f84:	2300      	moveq	r3, #0
    6f86:	603b      	str	r3, [r7, #0]
    6f88:	2e00      	cmp	r6, #0
    6f8a:	f000 817a 	beq.w	7282 <hash_to_field+0x328>
    6f8e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    6f92:	f200 815b 	bhi.w	724c <hash_to_field+0x2f2>
    6f96:	f108 0a6a 	add.w	sl, r8, #106	; 0x6a
    6f9a:	f02a 003f 	bic.w	r0, sl, #63	; 0x3f
    6f9e:	f507 730e 	add.w	r3, r7, #568	; 0x238
    6fa2:	eb03 0c00 	add.w	ip, r3, r0
    6fa6:	f5ac 7cf0 	sub.w	ip, ip, #480	; 0x1e0
    6faa:	4663      	mov	r3, ip
    6fac:	f10c 0140 	add.w	r1, ip, #64	; 0x40
    6fb0:	2200      	movs	r2, #0
    6fb2:	f843 2b04 	str.w	r2, [r3], #4
    6fb6:	428b      	cmp	r3, r1
    6fb8:	d1fb      	bne.n	6fb2 <hash_to_field+0x58>
    6fba:	f1b8 0f00 	cmp.w	r8, #0
    6fbe:	f000 8163 	beq.w	7288 <hash_to_field+0x32e>
    6fc2:	1e73      	subs	r3, r6, #1
    6fc4:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
    6fc8:	f108 31ff 	add.w	r1, r8, #4294967295
    6fcc:	440e      	add	r6, r1
    6fce:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    6fd2:	f802 1f01 	strb.w	r1, [r2, #1]!
    6fd6:	42b3      	cmp	r3, r6
    6fd8:	d1f9      	bne.n	6fce <hash_to_field+0x74>
    6fda:	4643      	mov	r3, r8
    6fdc:	f107 02b9 	add.w	r2, r7, #185	; 0xb9
    6fe0:	f802 8003 	strb.w	r8, [r2, r3]
    6fe4:	f107 02ba 	add.w	r2, r7, #186	; 0xba
    6fe8:	2180      	movs	r1, #128	; 0x80
    6fea:	54d1      	strb	r1, [r2, r3]
    6fec:	2200      	movs	r2, #0
    6fee:	f107 01bb 	add.w	r1, r7, #187	; 0xbb
    6ff2:	54ca      	strb	r2, [r1, r3]
    6ff4:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
    6ff8:	54ca      	strb	r2, [r1, r3]
    6ffa:	f107 01bd 	add.w	r1, r7, #189	; 0xbd
    6ffe:	54ca      	strb	r2, [r1, r3]
    7000:	f107 01be 	add.w	r1, r7, #190	; 0xbe
    7004:	54ca      	strb	r2, [r1, r3]
    7006:	f107 01bf 	add.w	r1, r7, #191	; 0xbf
    700a:	54ca      	strb	r2, [r1, r3]
    700c:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
    7010:	54ca      	strb	r2, [r1, r3]
    7012:	f107 01c1 	add.w	r1, r7, #193	; 0xc1
    7016:	54ca      	strb	r2, [r1, r3]
    7018:	f108 0322 	add.w	r3, r8, #34	; 0x22
    701c:	00da      	lsls	r2, r3, #3
    701e:	f107 0198 	add.w	r1, r7, #152	; 0x98
    7022:	4408      	add	r0, r1
    7024:	f3c3 1357 	ubfx	r3, r3, #5, #24
    7028:	f800 3c02 	strb.w	r3, [r0, #-2]
    702c:	f800 2c01 	strb.w	r2, [r0, #-1]
    7030:	4b96      	ldr	r3, [pc, #600]	; (728c <hash_to_field+0x332>)
    7032:	62bb      	str	r3, [r7, #40]	; 0x28
    7034:	4b96      	ldr	r3, [pc, #600]	; (7290 <hash_to_field+0x336>)
    7036:	62fb      	str	r3, [r7, #44]	; 0x2c
    7038:	4b96      	ldr	r3, [pc, #600]	; (7294 <hash_to_field+0x33a>)
    703a:	633b      	str	r3, [r7, #48]	; 0x30
    703c:	f103 53ab 	add.w	r3, r3, #358612992	; 0x15600000
    7040:	f503 2346 	add.w	r3, r3, #811008	; 0xc6000
    7044:	f203 7331 	addw	r3, r3, #1841	; 0x731
    7048:	637b      	str	r3, [r7, #52]	; 0x34
    704a:	4b93      	ldr	r3, [pc, #588]	; (7298 <hash_to_field+0x33e>)
    704c:	63bb      	str	r3, [r7, #56]	; 0x38
    704e:	f103 534f 	add.w	r3, r3, #868220928	; 0x33c00000
    7052:	f503 1332 	add.w	r3, r3, #2916352	; 0x2c8000
    7056:	f603 53b2 	addw	r3, r3, #3506	; 0xdb2
    705a:	63fb      	str	r3, [r7, #60]	; 0x3c
    705c:	4b8f      	ldr	r3, [pc, #572]	; (729c <hash_to_field+0x342>)
    705e:	643b      	str	r3, [r7, #64]	; 0x40
    7060:	4b8f      	ldr	r3, [pc, #572]	; (72a0 <hash_to_field+0x346>)
    7062:	647b      	str	r3, [r7, #68]	; 0x44
    7064:	2240      	movs	r2, #64	; 0x40
    7066:	2300      	movs	r3, #0
    7068:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    706c:	f107 0350 	add.w	r3, r7, #80	; 0x50
    7070:	f107 0190 	add.w	r1, r7, #144	; 0x90
    7074:	2200      	movs	r2, #0
    7076:	f843 2b04 	str.w	r2, [r3], #4
    707a:	428b      	cmp	r3, r1
    707c:	d1fb      	bne.n	7076 <hash_to_field+0x11c>
    707e:	f107 0350 	add.w	r3, r7, #80	; 0x50
    7082:	2600      	movs	r6, #0
    7084:	f8c7 6090 	str.w	r6, [r7, #144]	; 0x90
    7088:	683a      	ldr	r2, [r7, #0]
    708a:	4649      	mov	r1, r9
    708c:	f107 0028 	add.w	r0, r7, #40	; 0x28
    7090:	f7ff ff17 	bl	6ec2 <sha256_update>
    7094:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
    7098:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
    709c:	f107 0028 	add.w	r0, r7, #40	; 0x28
    70a0:	f7ff ff0f 	bl	6ec2 <sha256_update>
    70a4:	0a23      	lsrs	r3, r4, #8
    70a6:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
    70aa:	f887 40b7 	strb.w	r4, [r7, #183]	; 0xb7
    70ae:	f887 60b8 	strb.w	r6, [r7, #184]	; 0xb8
    70b2:	f108 0204 	add.w	r2, r8, #4
    70b6:	f107 01b6 	add.w	r1, r7, #182	; 0xb6
    70ba:	f107 0028 	add.w	r0, r7, #40	; 0x28
    70be:	f7ff ff00 	bl	6ec2 <sha256_update>
    70c2:	f107 0128 	add.w	r1, r7, #40	; 0x28
    70c6:	f107 0008 	add.w	r0, r7, #8
    70ca:	f7ff fe92 	bl	6df2 <sha256_final>
    70ce:	4b75      	ldr	r3, [pc, #468]	; (72a4 <hash_to_field+0x34a>)
    70d0:	62bb      	str	r3, [r7, #40]	; 0x28
    70d2:	4b75      	ldr	r3, [pc, #468]	; (72a8 <hash_to_field+0x34e>)
    70d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    70d6:	4b75      	ldr	r3, [pc, #468]	; (72ac <hash_to_field+0x352>)
    70d8:	633b      	str	r3, [r7, #48]	; 0x30
    70da:	4b75      	ldr	r3, [pc, #468]	; (72b0 <hash_to_field+0x356>)
    70dc:	637b      	str	r3, [r7, #52]	; 0x34
    70de:	4b75      	ldr	r3, [pc, #468]	; (72b4 <hash_to_field+0x35a>)
    70e0:	63bb      	str	r3, [r7, #56]	; 0x38
    70e2:	4b75      	ldr	r3, [pc, #468]	; (72b8 <hash_to_field+0x35e>)
    70e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    70e6:	4b75      	ldr	r3, [pc, #468]	; (72bc <hash_to_field+0x362>)
    70e8:	643b      	str	r3, [r7, #64]	; 0x40
    70ea:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    70ee:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    70f2:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    70f6:	647b      	str	r3, [r7, #68]	; 0x44
    70f8:	f107 0024 	add.w	r0, r7, #36	; 0x24
    70fc:	f107 0294 	add.w	r2, r7, #148	; 0x94
    7100:	1d3b      	adds	r3, r7, #4
    7102:	f853 1f04 	ldr.w	r1, [r3, #4]!
    7106:	f842 1f04 	str.w	r1, [r2, #4]!
    710a:	4283      	cmp	r3, r0
    710c:	d1f9      	bne.n	7102 <hash_to_field+0x1a8>
    710e:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
    7112:	3301      	adds	r3, #1
    7114:	f887 30b8 	strb.w	r3, [r7, #184]	; 0xb8
    7118:	ea4f 1a9a 	mov.w	sl, sl, lsr #6
    711c:	4652      	mov	r2, sl
    711e:	f107 0198 	add.w	r1, r7, #152	; 0x98
    7122:	f107 0028 	add.w	r0, r7, #40	; 0x28
    7126:	f7ff fd3b 	bl	6ba0 <blst_sha256_block_data_order>
    712a:	f107 0128 	add.w	r1, r7, #40	; 0x28
    712e:	4658      	mov	r0, fp
    7130:	f7ff fe4a 	bl	6dc8 <blst_sha256_emit>
    7134:	0964      	lsrs	r4, r4, #5
    7136:	f1b4 0801 	subs.w	r8, r4, #1
    713a:	d03e      	beq.n	71ba <hash_to_field+0x260>
    713c:	f10b 041c 	add.w	r4, fp, #28
    7140:	465e      	mov	r6, fp
    7142:	f8df 9164 	ldr.w	r9, [pc, #356]	; 72a8 <hash_to_field+0x34e>
    7146:	603d      	str	r5, [r7, #0]
    7148:	4b56      	ldr	r3, [pc, #344]	; (72a4 <hash_to_field+0x34a>)
    714a:	62bb      	str	r3, [r7, #40]	; 0x28
    714c:	f8c7 902c 	str.w	r9, [r7, #44]	; 0x2c
    7150:	4b56      	ldr	r3, [pc, #344]	; (72ac <hash_to_field+0x352>)
    7152:	633b      	str	r3, [r7, #48]	; 0x30
    7154:	4b56      	ldr	r3, [pc, #344]	; (72b0 <hash_to_field+0x356>)
    7156:	637b      	str	r3, [r7, #52]	; 0x34
    7158:	4b56      	ldr	r3, [pc, #344]	; (72b4 <hash_to_field+0x35a>)
    715a:	63bb      	str	r3, [r7, #56]	; 0x38
    715c:	4b56      	ldr	r3, [pc, #344]	; (72b8 <hash_to_field+0x35e>)
    715e:	63fb      	str	r3, [r7, #60]	; 0x3c
    7160:	4b56      	ldr	r3, [pc, #344]	; (72bc <hash_to_field+0x362>)
    7162:	643b      	str	r3, [r7, #64]	; 0x40
    7164:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    7168:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    716c:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    7170:	647b      	str	r3, [r7, #68]	; 0x44
    7172:	1f32      	subs	r2, r6, #4
    7174:	f107 0094 	add.w	r0, r7, #148	; 0x94
    7178:	1d39      	adds	r1, r7, #4
    717a:	f851 3f04 	ldr.w	r3, [r1, #4]!
    717e:	f852 5f04 	ldr.w	r5, [r2, #4]!
    7182:	406b      	eors	r3, r5
    7184:	f840 3f04 	str.w	r3, [r0, #4]!
    7188:	42a2      	cmp	r2, r4
    718a:	d1f6      	bne.n	717a <hash_to_field+0x220>
    718c:	3620      	adds	r6, #32
    718e:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
    7192:	3301      	adds	r3, #1
    7194:	f887 30b8 	strb.w	r3, [r7, #184]	; 0xb8
    7198:	4652      	mov	r2, sl
    719a:	f107 0198 	add.w	r1, r7, #152	; 0x98
    719e:	f107 0028 	add.w	r0, r7, #40	; 0x28
    71a2:	f7ff fcfd 	bl	6ba0 <blst_sha256_block_data_order>
    71a6:	f107 0128 	add.w	r1, r7, #40	; 0x28
    71aa:	4630      	mov	r0, r6
    71ac:	f7ff fe0c 	bl	6dc8 <blst_sha256_emit>
    71b0:	3420      	adds	r4, #32
    71b2:	f1b8 0801 	subs.w	r8, r8, #1
    71b6:	d1c7      	bne.n	7148 <hash_to_field+0x1ee>
    71b8:	683d      	ldr	r5, [r7, #0]
    71ba:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    71be:	f507 710e 	add.w	r1, r7, #568	; 0x238
    71c2:	2200      	movs	r2, #0
    71c4:	f843 2b04 	str.w	r2, [r3], #4
    71c8:	428b      	cmp	r3, r1
    71ca:	d1fb      	bne.n	71c4 <hash_to_field+0x26a>
    71cc:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
    71d0:	687b      	ldr	r3, [r7, #4]
    71d2:	1e5e      	subs	r6, r3, #1
    71d4:	b3ab      	cbz	r3, 7242 <hash_to_field+0x2e8>
    71d6:	f10b 0440 	add.w	r4, fp, #64	; 0x40
    71da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 72c0 <hash_to_field+0x366>
    71de:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 72c4 <hash_to_field+0x36a>
    71e2:	465a      	mov	r2, fp
    71e4:	2100      	movs	r1, #0
    71e6:	f10b 0c3f 	add.w	ip, fp, #63	; 0x3f
    71ea:	ebac 0302 	sub.w	r3, ip, r2
    71ee:	f812 0b01 	ldrb.w	r0, [r2], #1
    71f2:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    71f6:	f023 0303 	bic.w	r3, r3, #3
    71fa:	f507 700e 	add.w	r0, r7, #568	; 0x238
    71fe:	4403      	add	r3, r0
    7200:	f843 1c60 	str.w	r1, [r3, #-96]
    7204:	42a2      	cmp	r2, r4
    7206:	d1f0      	bne.n	71ea <hash_to_field+0x290>
    7208:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
    720c:	f04f 080c 	mov.w	r8, #12
    7210:	f8cd 8000 	str.w	r8, [sp]
    7214:	4653      	mov	r3, sl
    7216:	464a      	mov	r2, r9
    7218:	f507 71ec 	add.w	r1, r7, #472	; 0x1d8
    721c:	4628      	mov	r0, r5
    721e:	f7f9 ff36 	bl	108e <redc_mont_n>
    7222:	f8cd 8004 	str.w	r8, [sp, #4]
    7226:	f8cd a000 	str.w	sl, [sp]
    722a:	464b      	mov	r3, r9
    722c:	4a26      	ldr	r2, [pc, #152]	; (72c8 <hash_to_field+0x36e>)
    722e:	4629      	mov	r1, r5
    7230:	4628      	mov	r0, r5
    7232:	f7f9 fb7b 	bl	92c <mul_mont_n>
    7236:	3530      	adds	r5, #48	; 0x30
    7238:	3e01      	subs	r6, #1
    723a:	3440      	adds	r4, #64	; 0x40
    723c:	f1b6 3fff 	cmp.w	r6, #4294967295
    7240:	d1cf      	bne.n	71e2 <hash_to_field+0x288>
    7242:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    7246:	46bd      	mov	sp, r7
    7248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    724c:	f107 0028 	add.w	r0, r7, #40	; 0x28
    7250:	f7f9 f972 	bl	538 <sha256_init>
    7254:	2211      	movs	r2, #17
    7256:	491d      	ldr	r1, [pc, #116]	; (72cc <hash_to_field+0x372>)
    7258:	f107 0028 	add.w	r0, r7, #40	; 0x28
    725c:	f7ff fe31 	bl	6ec2 <sha256_update>
    7260:	4642      	mov	r2, r8
    7262:	4631      	mov	r1, r6
    7264:	f107 0028 	add.w	r0, r7, #40	; 0x28
    7268:	f7ff fe2b 	bl	6ec2 <sha256_update>
    726c:	f107 0128 	add.w	r1, r7, #40	; 0x28
    7270:	f107 0008 	add.w	r0, r7, #8
    7274:	f7ff fdbd 	bl	6df2 <sha256_final>
    7278:	f04f 0820 	mov.w	r8, #32
    727c:	f107 0608 	add.w	r6, r7, #8
    7280:	e689      	b.n	6f96 <hash_to_field+0x3c>
    7282:	f04f 0800 	mov.w	r8, #0
    7286:	e686      	b.n	6f96 <hash_to_field+0x3c>
    7288:	4643      	mov	r3, r8
    728a:	e6a7      	b.n	6fdc <hash_to_field+0x82>
    728c:	da5698be 	.word	0xda5698be
    7290:	17b9b469 	.word	0x17b9b469
    7294:	62335799 	.word	0x62335799
    7298:	8ce5d491 	.word	0x8ce5d491
    729c:	bafef9ea 	.word	0xbafef9ea
    72a0:	1837a9d8 	.word	0x1837a9d8
    72a4:	6a09e667 	.word	0x6a09e667
    72a8:	bb67ae85 	.word	0xbb67ae85
    72ac:	3c6ef372 	.word	0x3c6ef372
    72b0:	a54ff53a 	.word	0xa54ff53a
    72b4:	510e527f 	.word	0x510e527f
    72b8:	9b05688c 	.word	0x9b05688c
    72bc:	1f83d9ab 	.word	0x1f83d9ab
    72c0:	fffcfffd 	.word	0xfffcfffd
    72c4:	00015a08 	.word	0x00015a08
    72c8:	00016ef0 	.word	0x00016ef0
    72cc:	00017cb0 	.word	0x00017cb0

000072d0 <blst_encode_to_g1>:
    72d0:	b510      	push	{r4, lr}
    72d2:	b090      	sub	sp, #64	; 0x40
    72d4:	4604      	mov	r4, r0
    72d6:	9812      	ldr	r0, [sp, #72]	; 0x48
    72d8:	9003      	str	r0, [sp, #12]
    72da:	9302      	str	r3, [sp, #8]
    72dc:	9201      	str	r2, [sp, #4]
    72de:	9100      	str	r1, [sp, #0]
    72e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
    72e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    72e4:	2101      	movs	r1, #1
    72e6:	a804      	add	r0, sp, #16
    72e8:	f7ff fe37 	bl	6f5a <hash_to_field>
    72ec:	2200      	movs	r2, #0
    72ee:	a904      	add	r1, sp, #16
    72f0:	4620      	mov	r0, r4
    72f2:	f7ff f985 	bl	6600 <map_to_g1>
    72f6:	b010      	add	sp, #64	; 0x40
    72f8:	bd10      	pop	{r4, pc}

000072fa <blst_hash_to_g1>:
    72fa:	b510      	push	{r4, lr}
    72fc:	b09c      	sub	sp, #112	; 0x70
    72fe:	4604      	mov	r4, r0
    7300:	981e      	ldr	r0, [sp, #120]	; 0x78
    7302:	9003      	str	r0, [sp, #12]
    7304:	9302      	str	r3, [sp, #8]
    7306:	9201      	str	r2, [sp, #4]
    7308:	9100      	str	r1, [sp, #0]
    730a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    730c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    730e:	2102      	movs	r1, #2
    7310:	a804      	add	r0, sp, #16
    7312:	f7ff fe22 	bl	6f5a <hash_to_field>
    7316:	aa10      	add	r2, sp, #64	; 0x40
    7318:	a904      	add	r1, sp, #16
    731a:	4620      	mov	r0, r4
    731c:	f7ff f970 	bl	6600 <map_to_g1>
    7320:	b01c      	add	sp, #112	; 0x70
    7322:	bd10      	pop	{r4, pc}

00007324 <HMAC_init>:
    7324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7328:	4607      	mov	r7, r0
    732a:	2900      	cmp	r1, #0
    732c:	d06d      	beq.n	740a <HMAC_init+0xe6>
    732e:	4614      	mov	r4, r2
    7330:	460d      	mov	r5, r1
    7332:	f100 09b0 	add.w	r9, r0, #176	; 0xb0
    7336:	464e      	mov	r6, r9
    7338:	f100 08f0 	add.w	r8, r0, #240	; 0xf0
    733c:	464b      	mov	r3, r9
    733e:	2100      	movs	r1, #0
    7340:	f843 1b04 	str.w	r1, [r3], #4
    7344:	4543      	cmp	r3, r8
    7346:	d1fb      	bne.n	7340 <HMAC_init+0x1c>
    7348:	2c40      	cmp	r4, #64	; 0x40
    734a:	d973      	bls.n	7434 <HMAC_init+0x110>
    734c:	4638      	mov	r0, r7
    734e:	f7f9 f8f3 	bl	538 <sha256_init>
    7352:	4622      	mov	r2, r4
    7354:	4629      	mov	r1, r5
    7356:	4638      	mov	r0, r7
    7358:	f7ff fdb3 	bl	6ec2 <sha256_update>
    735c:	4639      	mov	r1, r7
    735e:	4648      	mov	r0, r9
    7360:	f7ff fd47 	bl	6df2 <sha256_final>
    7364:	f107 04ac 	add.w	r4, r7, #172	; 0xac
    7368:	f107 05ec 	add.w	r5, r7, #236	; 0xec
    736c:	4623      	mov	r3, r4
    736e:	f853 2f04 	ldr.w	r2, [r3, #4]!
    7372:	f082 3236 	eor.w	r2, r2, #909522486	; 0x36363636
    7376:	601a      	str	r2, [r3, #0]
    7378:	42ab      	cmp	r3, r5
    737a:	d1f8      	bne.n	736e <HMAC_init+0x4a>
    737c:	4638      	mov	r0, r7
    737e:	f7f9 f8db 	bl	538 <sha256_init>
    7382:	2240      	movs	r2, #64	; 0x40
    7384:	4649      	mov	r1, r9
    7386:	4638      	mov	r0, r7
    7388:	f7ff fd9b 	bl	6ec2 <sha256_update>
    738c:	4639      	mov	r1, r7
    738e:	f107 0070 	add.w	r0, r7, #112	; 0x70
    7392:	f7ff fd0f 	bl	6db4 <blst_sha256_hcopy>
    7396:	f854 3f04 	ldr.w	r3, [r4, #4]!
    739a:	f083 336a 	eor.w	r3, r3, #1785358954	; 0x6a6a6a6a
    739e:	6023      	str	r3, [r4, #0]
    73a0:	42ac      	cmp	r4, r5
    73a2:	d1f8      	bne.n	7396 <HMAC_init+0x72>
    73a4:	4b26      	ldr	r3, [pc, #152]	; (7440 <HMAC_init+0x11c>)
    73a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    73aa:	4b26      	ldr	r3, [pc, #152]	; (7444 <HMAC_init+0x120>)
    73ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    73b0:	4b25      	ldr	r3, [pc, #148]	; (7448 <HMAC_init+0x124>)
    73b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    73b6:	4b25      	ldr	r3, [pc, #148]	; (744c <HMAC_init+0x128>)
    73b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    73bc:	4b24      	ldr	r3, [pc, #144]	; (7450 <HMAC_init+0x12c>)
    73be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    73c2:	4b24      	ldr	r3, [pc, #144]	; (7454 <HMAC_init+0x130>)
    73c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    73c8:	4b23      	ldr	r3, [pc, #140]	; (7458 <HMAC_init+0x134>)
    73ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    73ce:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    73d2:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    73d6:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    73da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    73de:	2201      	movs	r2, #1
    73e0:	4649      	mov	r1, r9
    73e2:	f107 0090 	add.w	r0, r7, #144	; 0x90
    73e6:	f7ff fbdb 	bl	6ba0 <blst_sha256_block_data_order>
    73ea:	2300      	movs	r3, #0
    73ec:	f846 3b04 	str.w	r3, [r6], #4
    73f0:	4546      	cmp	r6, r8
    73f2:	d1fb      	bne.n	73ec <HMAC_init+0xc8>
    73f4:	2380      	movs	r3, #128	; 0x80
    73f6:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0
    73fa:	2303      	movs	r3, #3
    73fc:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
    7400:	2300      	movs	r3, #0
    7402:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    7406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    740a:	f100 0170 	add.w	r1, r0, #112	; 0x70
    740e:	f7ff fcd1 	bl	6db4 <blst_sha256_hcopy>
    7412:	2240      	movs	r2, #64	; 0x40
    7414:	2300      	movs	r3, #0
    7416:	e9c7 2308 	strd	r2, r3, [r7, #32]
    741a:	f107 0028 	add.w	r0, r7, #40	; 0x28
    741e:	4603      	mov	r3, r0
    7420:	f107 0168 	add.w	r1, r7, #104	; 0x68
    7424:	2200      	movs	r2, #0
    7426:	f843 2b04 	str.w	r2, [r3], #4
    742a:	4299      	cmp	r1, r3
    742c:	d1fb      	bne.n	7426 <HMAC_init+0x102>
    742e:	2300      	movs	r3, #0
    7430:	66bb      	str	r3, [r7, #104]	; 0x68
    7432:	e7e8      	b.n	7406 <HMAC_init+0xe2>
    7434:	4622      	mov	r2, r4
    7436:	4629      	mov	r1, r5
    7438:	4648      	mov	r0, r9
    743a:	f7ff fd35 	bl	6ea8 <blst_sha256_bcopy>
    743e:	e791      	b.n	7364 <HMAC_init+0x40>
    7440:	6a09e667 	.word	0x6a09e667
    7444:	bb67ae85 	.word	0xbb67ae85
    7448:	3c6ef372 	.word	0x3c6ef372
    744c:	a54ff53a 	.word	0xa54ff53a
    7450:	510e527f 	.word	0x510e527f
    7454:	9b05688c 	.word	0x9b05688c
    7458:	1f83d9ab 	.word	0x1f83d9ab

0000745c <blst_keygen>:
    745c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7460:	b0f3      	sub	sp, #460	; 0x1cc
    7462:	af02      	add	r7, sp, #8
    7464:	6038      	str	r0, [r7, #0]
    7466:	6139      	str	r1, [r7, #16]
    7468:	4616      	mov	r6, r2
    746a:	60fa      	str	r2, [r7, #12]
    746c:	607b      	str	r3, [r7, #4]
    746e:	f8d7 b1e8 	ldr.w	fp, [r7, #488]	; 0x1e8
    7472:	f107 0420 	add.w	r4, r7, #32
    7476:	4d8c      	ldr	r5, [pc, #560]	; (76a8 <blst_keygen+0x24c>)
    7478:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    747a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    747c:	e895 0003 	ldmia.w	r5, {r0, r1}
    7480:	f844 0b04 	str.w	r0, [r4], #4
    7484:	7021      	strb	r1, [r4, #0]
    7486:	2300      	movs	r3, #0
    7488:	f8c7 3035 	str.w	r3, [r7, #53]	; 0x35
    748c:	f8c7 3039 	str.w	r3, [r7, #57]	; 0x39
    7490:	63fb      	str	r3, [r7, #60]	; 0x3c
    7492:	2e1f      	cmp	r6, #31
    7494:	d90f      	bls.n	74b6 <blst_keygen+0x5a>
    7496:	687b      	ldr	r3, [r7, #4]
    7498:	2b00      	cmp	r3, #0
    749a:	bf08      	it	eq
    749c:	f04f 0b00 	moveq.w	fp, #0
    74a0:	f04f 0914 	mov.w	r9, #20
    74a4:	2500      	movs	r5, #0
    74a6:	f10b 030a 	add.w	r3, fp, #10
    74aa:	f023 0307 	bic.w	r3, r3, #7
    74ae:	60bb      	str	r3, [r7, #8]
    74b0:	f507 74c0 	add.w	r4, r7, #384	; 0x180
    74b4:	e090      	b.n	75d8 <blst_keygen+0x17c>
    74b6:	683a      	ldr	r2, [r7, #0]
    74b8:	4613      	mov	r3, r2
    74ba:	f102 0120 	add.w	r1, r2, #32
    74be:	2200      	movs	r2, #0
    74c0:	f843 2b04 	str.w	r2, [r3], #4
    74c4:	4299      	cmp	r1, r3
    74c6:	d1fb      	bne.n	74c0 <blst_keygen+0x64>
    74c8:	683b      	ldr	r3, [r7, #0]
    74ca:	e0db      	b.n	7684 <blst_keygen+0x228>
    74cc:	f806 500b 	strb.w	r5, [r6, fp]
    74d0:	eb06 030b 	add.w	r3, r6, fp
    74d4:	2230      	movs	r2, #48	; 0x30
    74d6:	705a      	strb	r2, [r3, #1]
    74d8:	2301      	movs	r3, #1
    74da:	f806 3008 	strb.w	r3, [r6, r8]
    74de:	464a      	mov	r2, r9
    74e0:	4631      	mov	r1, r6
    74e2:	f107 0040 	add.w	r0, r7, #64	; 0x40
    74e6:	f7ff fcec 	bl	6ec2 <sha256_update>
    74ea:	f107 0140 	add.w	r1, r7, #64	; 0x40
    74ee:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
    74f2:	f7ff fcc2 	bl	6e7a <HMAC_final>
    74f6:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
    74fa:	f507 70a8 	add.w	r0, r7, #336	; 0x150
    74fe:	f7ff fc59 	bl	6db4 <blst_sha256_hcopy>
    7502:	f816 3008 	ldrb.w	r3, [r6, r8]
    7506:	3301      	adds	r3, #1
    7508:	f806 3008 	strb.w	r3, [r6, r8]
    750c:	462a      	mov	r2, r5
    750e:	4629      	mov	r1, r5
    7510:	f107 0040 	add.w	r0, r7, #64	; 0x40
    7514:	f7ff ff06 	bl	7324 <HMAC_init>
    7518:	2220      	movs	r2, #32
    751a:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
    751e:	f107 0040 	add.w	r0, r7, #64	; 0x40
    7522:	f7ff fcce 	bl	6ec2 <sha256_update>
    7526:	464a      	mov	r2, r9
    7528:	4631      	mov	r1, r6
    752a:	f107 0040 	add.w	r0, r7, #64	; 0x40
    752e:	f7ff fcc8 	bl	6ec2 <sha256_update>
    7532:	f107 0140 	add.w	r1, r7, #64	; 0x40
    7536:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
    753a:	f7ff fc9e 	bl	6e7a <HMAC_final>
    753e:	2210      	movs	r2, #16
    7540:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
    7544:	f507 70b8 	add.w	r0, r7, #368	; 0x170
    7548:	f7ff fcae 	bl	6ea8 <blst_sha256_bcopy>
    754c:	46d5      	mov	sp, sl
    754e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
    7552:	617b      	str	r3, [r7, #20]
    7554:	f107 0a40 	add.w	sl, r7, #64	; 0x40
    7558:	f507 76e0 	add.w	r6, r7, #448	; 0x1c0
    755c:	f843 5b04 	str.w	r5, [r3], #4
    7560:	42b3      	cmp	r3, r6
    7562:	d1fb      	bne.n	755c <blst_keygen+0x100>
    7564:	f507 72a8 	add.w	r2, r7, #336	; 0x150
    7568:	4629      	mov	r1, r5
    756a:	f20a 103f 	addw	r0, sl, #319	; 0x13f
    756e:	1a83      	subs	r3, r0, r2
    7570:	f812 cb01 	ldrb.w	ip, [r2], #1
    7574:	ea4c 2101 	orr.w	r1, ip, r1, lsl #8
    7578:	f023 0303 	bic.w	r3, r3, #3
    757c:	f507 7ce0 	add.w	ip, r7, #448	; 0x1c0
    7580:	4463      	add	r3, ip
    7582:	f843 1c40 	str.w	r1, [r3, #-64]
    7586:	42a2      	cmp	r2, r4
    7588:	d1f1      	bne.n	756e <blst_keygen+0x112>
    758a:	f8df 8120 	ldr.w	r8, [pc, #288]	; 76ac <blst_keygen+0x250>
    758e:	f508 7932 	add.w	r9, r8, #712	; 0x2c8
    7592:	2308      	movs	r3, #8
    7594:	9300      	str	r3, [sp, #0]
    7596:	f04f 33ff 	mov.w	r3, #4294967295
    759a:	464a      	mov	r2, r9
    759c:	4621      	mov	r1, r4
    759e:	4620      	mov	r0, r4
    75a0:	f7f9 fd75 	bl	108e <redc_mont_n>
    75a4:	2308      	movs	r3, #8
    75a6:	9301      	str	r3, [sp, #4]
    75a8:	f04f 33ff 	mov.w	r3, #4294967295
    75ac:	9300      	str	r3, [sp, #0]
    75ae:	464b      	mov	r3, r9
    75b0:	f508 6288 	add.w	r2, r8, #1088	; 0x440
    75b4:	4621      	mov	r1, r4
    75b6:	4620      	mov	r0, r4
    75b8:	f7f9 f9b8 	bl	92c <mul_mont_n>
    75bc:	f50a 70b0 	add.w	r0, sl, #352	; 0x160
    75c0:	697b      	ldr	r3, [r7, #20]
    75c2:	2200      	movs	r2, #0
    75c4:	f853 1b04 	ldr.w	r1, [r3], #4
    75c8:	430a      	orrs	r2, r1
    75ca:	4298      	cmp	r0, r3
    75cc:	d1fa      	bne.n	75c4 <blst_keygen+0x168>
    75ce:	f04f 0920 	mov.w	r9, #32
    75d2:	1e53      	subs	r3, r2, #1
    75d4:	4393      	bics	r3, r2
    75d6:	d544      	bpl.n	7662 <blst_keygen+0x206>
    75d8:	f107 0040 	add.w	r0, r7, #64	; 0x40
    75dc:	f7f8 ffac 	bl	538 <sha256_init>
    75e0:	464a      	mov	r2, r9
    75e2:	f107 0120 	add.w	r1, r7, #32
    75e6:	f107 0040 	add.w	r0, r7, #64	; 0x40
    75ea:	f7ff fc6a 	bl	6ec2 <sha256_update>
    75ee:	f107 0140 	add.w	r1, r7, #64	; 0x40
    75f2:	f107 0020 	add.w	r0, r7, #32
    75f6:	f7ff fbfc 	bl	6df2 <sha256_final>
    75fa:	773d      	strb	r5, [r7, #28]
    75fc:	2220      	movs	r2, #32
    75fe:	18b9      	adds	r1, r7, r2
    7600:	f107 0040 	add.w	r0, r7, #64	; 0x40
    7604:	f7ff fe8e 	bl	7324 <HMAC_init>
    7608:	68fa      	ldr	r2, [r7, #12]
    760a:	6939      	ldr	r1, [r7, #16]
    760c:	f107 0040 	add.w	r0, r7, #64	; 0x40
    7610:	f7ff fc57 	bl	6ec2 <sha256_update>
    7614:	2201      	movs	r2, #1
    7616:	f107 011c 	add.w	r1, r7, #28
    761a:	f107 0040 	add.w	r0, r7, #64	; 0x40
    761e:	f7ff fc50 	bl	6ec2 <sha256_update>
    7622:	f107 0140 	add.w	r1, r7, #64	; 0x40
    7626:	f507 7098 	add.w	r0, r7, #304	; 0x130
    762a:	f7ff fc26 	bl	6e7a <HMAC_final>
    762e:	46ea      	mov	sl, sp
    7630:	f10b 0903 	add.w	r9, fp, #3
    7634:	f10b 0802 	add.w	r8, fp, #2
    7638:	68bb      	ldr	r3, [r7, #8]
    763a:	ebad 0d03 	sub.w	sp, sp, r3
    763e:	ae02      	add	r6, sp, #8
    7640:	2220      	movs	r2, #32
    7642:	f507 7198 	add.w	r1, r7, #304	; 0x130
    7646:	f107 0040 	add.w	r0, r7, #64	; 0x40
    764a:	f7ff fe6b 	bl	7324 <HMAC_init>
    764e:	f1bb 0f00 	cmp.w	fp, #0
    7652:	f43f af3b 	beq.w	74cc <blst_keygen+0x70>
    7656:	465a      	mov	r2, fp
    7658:	6879      	ldr	r1, [r7, #4]
    765a:	4630      	mov	r0, r6
    765c:	f7ff fc24 	bl	6ea8 <blst_sha256_bcopy>
    7660:	e734      	b.n	74cc <blst_keygen+0x70>
    7662:	46d0      	mov	r8, sl
    7664:	f507 73c0 	add.w	r3, r7, #384	; 0x180
    7668:	683a      	ldr	r2, [r7, #0]
    766a:	429a      	cmp	r2, r3
    766c:	d003      	beq.n	7676 <blst_keygen+0x21a>
    766e:	6839      	ldr	r1, [r7, #0]
    7670:	3104      	adds	r1, #4
    7672:	697c      	ldr	r4, [r7, #20]
    7674:	e00e      	b.n	7694 <blst_keygen+0x238>
    7676:	2300      	movs	r3, #0
    7678:	f848 3b04 	str.w	r3, [r8], #4
    767c:	45b0      	cmp	r8, r6
    767e:	d1fb      	bne.n	7678 <blst_keygen+0x21c>
    7680:	f107 0340 	add.w	r3, r7, #64	; 0x40
    7684:	f507 77e2 	add.w	r7, r7, #452	; 0x1c4
    7688:	46bd      	mov	sp, r7
    768a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    768e:	3104      	adds	r1, #4
    7690:	42a0      	cmp	r0, r4
    7692:	d0f0      	beq.n	7676 <blst_keygen+0x21a>
    7694:	1f0a      	subs	r2, r1, #4
    7696:	f854 3b04 	ldr.w	r3, [r4], #4
    769a:	f802 3b01 	strb.w	r3, [r2], #1
    769e:	0a1b      	lsrs	r3, r3, #8
    76a0:	428a      	cmp	r2, r1
    76a2:	d1fa      	bne.n	769a <blst_keygen+0x23e>
    76a4:	e7f3      	b.n	768e <blst_keygen+0x232>
    76a6:	bf00      	nop
    76a8:	00016f20 	.word	0x00016f20
    76ac:	00016b00 	.word	0x00016b00

000076b0 <mul_by_8_mod_384>:
    76b0:	b500      	push	{lr}
    76b2:	b083      	sub	sp, #12
    76b4:	4613      	mov	r3, r2
    76b6:	220c      	movs	r2, #12
    76b8:	9200      	str	r2, [sp, #0]
    76ba:	2203      	movs	r2, #3
    76bc:	f7f9 fc06 	bl	ecc <lshift_mod_n>
    76c0:	b003      	add	sp, #12
    76c2:	f85d fb04 	ldr.w	pc, [sp], #4

000076c6 <mul_by_3_mod_384x>:
    76c6:	b570      	push	{r4, r5, r6, lr}
    76c8:	4604      	mov	r4, r0
    76ca:	460d      	mov	r5, r1
    76cc:	4616      	mov	r6, r2
    76ce:	230c      	movs	r3, #12
    76d0:	f7f9 fb5c 	bl	d8c <mul_by_3_mod_n>
    76d4:	230c      	movs	r3, #12
    76d6:	4632      	mov	r2, r6
    76d8:	f105 0130 	add.w	r1, r5, #48	; 0x30
    76dc:	f104 0030 	add.w	r0, r4, #48	; 0x30
    76e0:	f7f9 fb54 	bl	d8c <mul_by_3_mod_n>
    76e4:	bd70      	pop	{r4, r5, r6, pc}

000076e6 <mul_by_8_mod_384x>:
    76e6:	b5f0      	push	{r4, r5, r6, r7, lr}
    76e8:	b083      	sub	sp, #12
    76ea:	4605      	mov	r5, r0
    76ec:	460e      	mov	r6, r1
    76ee:	4614      	mov	r4, r2
    76f0:	270c      	movs	r7, #12
    76f2:	9700      	str	r7, [sp, #0]
    76f4:	4613      	mov	r3, r2
    76f6:	2203      	movs	r2, #3
    76f8:	f7f9 fbe8 	bl	ecc <lshift_mod_n>
    76fc:	9700      	str	r7, [sp, #0]
    76fe:	4623      	mov	r3, r4
    7700:	2203      	movs	r2, #3
    7702:	f106 0130 	add.w	r1, r6, #48	; 0x30
    7706:	f105 0030 	add.w	r0, r5, #48	; 0x30
    770a:	f7f9 fbdf 	bl	ecc <lshift_mod_n>
    770e:	b003      	add	sp, #12
    7710:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007712 <mul_by_1_plus_i_mod_384x>:
    7712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7716:	b08e      	sub	sp, #56	; 0x38
    7718:	4604      	mov	r4, r0
    771a:	460d      	mov	r5, r1
    771c:	4616      	mov	r6, r2
    771e:	f101 0730 	add.w	r7, r1, #48	; 0x30
    7722:	f04f 080c 	mov.w	r8, #12
    7726:	f8cd 8000 	str.w	r8, [sp]
    772a:	4613      	mov	r3, r2
    772c:	463a      	mov	r2, r7
    772e:	a802      	add	r0, sp, #8
    7730:	f7f9 faa4 	bl	c7c <add_mod_n>
    7734:	f8cd 8000 	str.w	r8, [sp]
    7738:	4633      	mov	r3, r6
    773a:	463a      	mov	r2, r7
    773c:	4629      	mov	r1, r5
    773e:	4620      	mov	r0, r4
    7740:	f7f8 ff46 	bl	5d0 <sub_mod_n>
    7744:	aa02      	add	r2, sp, #8
    7746:	f104 032c 	add.w	r3, r4, #44	; 0x2c
    774a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    774e:	f852 1b04 	ldr.w	r1, [r2], #4
    7752:	f843 1f04 	str.w	r1, [r3, #4]!
    7756:	4283      	cmp	r3, r0
    7758:	d1f9      	bne.n	774e <mul_by_1_plus_i_mod_384x+0x3c>
    775a:	b00e      	add	sp, #56	; 0x38
    775c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007760 <add_mod_384x>:
    7760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7764:	b082      	sub	sp, #8
    7766:	4604      	mov	r4, r0
    7768:	460d      	mov	r5, r1
    776a:	4616      	mov	r6, r2
    776c:	461f      	mov	r7, r3
    776e:	f04f 080c 	mov.w	r8, #12
    7772:	f8cd 8000 	str.w	r8, [sp]
    7776:	f7f9 fa81 	bl	c7c <add_mod_n>
    777a:	f8cd 8000 	str.w	r8, [sp]
    777e:	463b      	mov	r3, r7
    7780:	f106 0230 	add.w	r2, r6, #48	; 0x30
    7784:	f105 0130 	add.w	r1, r5, #48	; 0x30
    7788:	f104 0030 	add.w	r0, r4, #48	; 0x30
    778c:	f7f9 fa76 	bl	c7c <add_mod_n>
    7790:	b002      	add	sp, #8
    7792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007796 <sub_mod_384x>:
    7796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    779a:	b082      	sub	sp, #8
    779c:	4604      	mov	r4, r0
    779e:	460d      	mov	r5, r1
    77a0:	4616      	mov	r6, r2
    77a2:	461f      	mov	r7, r3
    77a4:	f04f 080c 	mov.w	r8, #12
    77a8:	f8cd 8000 	str.w	r8, [sp]
    77ac:	f7f8 ff10 	bl	5d0 <sub_mod_n>
    77b0:	f8cd 8000 	str.w	r8, [sp]
    77b4:	463b      	mov	r3, r7
    77b6:	f106 0230 	add.w	r2, r6, #48	; 0x30
    77ba:	f105 0130 	add.w	r1, r5, #48	; 0x30
    77be:	f104 0030 	add.w	r0, r4, #48	; 0x30
    77c2:	f7f8 ff05 	bl	5d0 <sub_mod_n>
    77c6:	b002      	add	sp, #8
    77c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000077cc <sqr_mont_384x>:
    77cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    77d0:	b09a      	sub	sp, #104	; 0x68
    77d2:	4607      	mov	r7, r0
    77d4:	460e      	mov	r6, r1
    77d6:	4614      	mov	r4, r2
    77d8:	4698      	mov	r8, r3
    77da:	f101 0a30 	add.w	sl, r1, #48	; 0x30
    77de:	250c      	movs	r5, #12
    77e0:	9500      	str	r5, [sp, #0]
    77e2:	4613      	mov	r3, r2
    77e4:	4652      	mov	r2, sl
    77e6:	a80e      	add	r0, sp, #56	; 0x38
    77e8:	f7f9 fa48 	bl	c7c <add_mod_n>
    77ec:	9500      	str	r5, [sp, #0]
    77ee:	4623      	mov	r3, r4
    77f0:	4652      	mov	r2, sl
    77f2:	4631      	mov	r1, r6
    77f4:	a802      	add	r0, sp, #8
    77f6:	f7f8 feeb 	bl	5d0 <sub_mod_n>
    77fa:	f107 0930 	add.w	r9, r7, #48	; 0x30
    77fe:	9501      	str	r5, [sp, #4]
    7800:	f8cd 8000 	str.w	r8, [sp]
    7804:	4623      	mov	r3, r4
    7806:	4652      	mov	r2, sl
    7808:	4631      	mov	r1, r6
    780a:	4648      	mov	r0, r9
    780c:	f7f9 f88e 	bl	92c <mul_mont_n>
    7810:	9500      	str	r5, [sp, #0]
    7812:	4623      	mov	r3, r4
    7814:	464a      	mov	r2, r9
    7816:	4649      	mov	r1, r9
    7818:	4648      	mov	r0, r9
    781a:	f7f9 fa2f 	bl	c7c <add_mod_n>
    781e:	9501      	str	r5, [sp, #4]
    7820:	f8cd 8000 	str.w	r8, [sp]
    7824:	4623      	mov	r3, r4
    7826:	aa02      	add	r2, sp, #8
    7828:	a90e      	add	r1, sp, #56	; 0x38
    782a:	4638      	mov	r0, r7
    782c:	f7f9 f87e 	bl	92c <mul_mont_n>
    7830:	b01a      	add	sp, #104	; 0x68
    7832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00007836 <POINTonE2_from_Jacobian>:
    7836:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    783a:	b0b3      	sub	sp, #204	; 0xcc
    783c:	4605      	mov	r5, r0
    783e:	4688      	mov	r8, r1
    7840:	31c0      	adds	r1, #192	; 0xc0
    7842:	f108 04bc 	add.w	r4, r8, #188	; 0xbc
    7846:	f508 708e 	add.w	r0, r8, #284	; 0x11c
    784a:	4623      	mov	r3, r4
    784c:	2600      	movs	r6, #0
    784e:	f853 2f04 	ldr.w	r2, [r3, #4]!
    7852:	4316      	orrs	r6, r2
    7854:	4283      	cmp	r3, r0
    7856:	d1fa      	bne.n	784e <POINTonE2_from_Jacobian+0x18>
    7858:	a81a      	add	r0, sp, #104	; 0x68
    785a:	f7fe f84f 	bl	58fc <reciprocal_fp2>
    785e:	f8df 9074 	ldr.w	r9, [pc, #116]	; 78d4 <POINTonE2_from_Jacobian+0x9e>
    7862:	4f1d      	ldr	r7, [pc, #116]	; (78d8 <POINTonE2_from_Jacobian+0xa2>)
    7864:	464b      	mov	r3, r9
    7866:	463a      	mov	r2, r7
    7868:	a91a      	add	r1, sp, #104	; 0x68
    786a:	a802      	add	r0, sp, #8
    786c:	f7ff ffae 	bl	77cc <sqr_mont_384x>
    7870:	f8cd 9000 	str.w	r9, [sp]
    7874:	463b      	mov	r3, r7
    7876:	aa02      	add	r2, sp, #8
    7878:	4641      	mov	r1, r8
    787a:	4628      	mov	r0, r5
    787c:	f7fc fd18 	bl	42b0 <mul_mont_384x>
    7880:	f8cd 9000 	str.w	r9, [sp]
    7884:	463b      	mov	r3, r7
    7886:	aa1a      	add	r2, sp, #104	; 0x68
    7888:	a902      	add	r1, sp, #8
    788a:	4608      	mov	r0, r1
    788c:	f7fc fd10 	bl	42b0 <mul_mont_384x>
    7890:	f8cd 9000 	str.w	r9, [sp]
    7894:	463b      	mov	r3, r7
    7896:	aa02      	add	r2, sp, #8
    7898:	f108 0160 	add.w	r1, r8, #96	; 0x60
    789c:	f105 0060 	add.w	r0, r5, #96	; 0x60
    78a0:	f7fc fd06 	bl	42b0 <mul_mont_384x>
    78a4:	1e73      	subs	r3, r6, #1
    78a6:	ea23 0606 	bic.w	r6, r3, r6
    78aa:	17f6      	asrs	r6, r6, #31
    78ac:	f507 6164 	add.w	r1, r7, #3648	; 0xe40
    78b0:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    78b4:	f507 656a 	add.w	r5, r7, #3744	; 0xea0
    78b8:	f851 3b04 	ldr.w	r3, [r1], #4
    78bc:	f854 2f04 	ldr.w	r2, [r4, #4]!
    78c0:	405a      	eors	r2, r3
    78c2:	4032      	ands	r2, r6
    78c4:	405a      	eors	r2, r3
    78c6:	f840 2f04 	str.w	r2, [r0, #4]!
    78ca:	42a9      	cmp	r1, r5
    78cc:	d1f4      	bne.n	78b8 <POINTonE2_from_Jacobian+0x82>
    78ce:	b033      	add	sp, #204	; 0xcc
    78d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    78d4:	fffcfffd 	.word	0xfffcfffd
    78d8:	00015a08 	.word	0x00015a08

000078dc <blst_p2_from_jacobian>:
    78dc:	b508      	push	{r3, lr}
    78de:	f7ff ffaa 	bl	7836 <POINTonE2_from_Jacobian>
    78e2:	bd08      	pop	{r3, pc}

000078e4 <POINTonE2_to_affine>:
    78e4:	b530      	push	{r4, r5, lr}
    78e6:	b0c9      	sub	sp, #292	; 0x124
    78e8:	4604      	mov	r4, r0
    78ea:	f101 0cbc 	add.w	ip, r1, #188	; 0xbc
    78ee:	4b10      	ldr	r3, [pc, #64]	; (7930 <POINTonE2_to_affine+0x4c>)
    78f0:	f103 0290 	add.w	r2, r3, #144	; 0x90
    78f4:	f103 0ef0 	add.w	lr, r3, #240	; 0xf0
    78f8:	2000      	movs	r0, #0
    78fa:	f852 3b04 	ldr.w	r3, [r2], #4
    78fe:	f85c 5f04 	ldr.w	r5, [ip, #4]!
    7902:	406b      	eors	r3, r5
    7904:	4318      	orrs	r0, r3
    7906:	4572      	cmp	r2, lr
    7908:	d1f7      	bne.n	78fa <POINTonE2_to_affine+0x16>
    790a:	1e43      	subs	r3, r0, #1
    790c:	4383      	bics	r3, r0
    790e:	d50a      	bpl.n	7926 <POINTonE2_to_affine+0x42>
    7910:	1f0b      	subs	r3, r1, #4
    7912:	1f20      	subs	r0, r4, #4
    7914:	31bc      	adds	r1, #188	; 0xbc
    7916:	f853 2f04 	ldr.w	r2, [r3, #4]!
    791a:	f840 2f04 	str.w	r2, [r0, #4]!
    791e:	428b      	cmp	r3, r1
    7920:	d1f9      	bne.n	7916 <POINTonE2_to_affine+0x32>
    7922:	b049      	add	sp, #292	; 0x124
    7924:	bd30      	pop	{r4, r5, pc}
    7926:	4668      	mov	r0, sp
    7928:	f7ff ff85 	bl	7836 <POINTonE2_from_Jacobian>
    792c:	4669      	mov	r1, sp
    792e:	e7ef      	b.n	7910 <POINTonE2_to_affine+0x2c>
    7930:	00015a08 	.word	0x00015a08

00007934 <blst_p2_to_affine>:
    7934:	b508      	push	{r3, lr}
    7936:	f7ff ffd5 	bl	78e4 <POINTonE2_to_affine>
    793a:	bd08      	pop	{r3, pc}

0000793c <POINTonE2_Serialize_BE>:
    793c:	b570      	push	{r4, r5, r6, lr}
    793e:	b0c8      	sub	sp, #288	; 0x120
    7940:	4606      	mov	r6, r0
    7942:	f101 0ebc 	add.w	lr, r1, #188	; 0xbc
    7946:	4d0f      	ldr	r5, [pc, #60]	; (7984 <POINTonE2_Serialize_BE+0x48>)
    7948:	f105 0290 	add.w	r2, r5, #144	; 0x90
    794c:	35f0      	adds	r5, #240	; 0xf0
    794e:	f04f 0c00 	mov.w	ip, #0
    7952:	f852 3b04 	ldr.w	r3, [r2], #4
    7956:	f85e 4f04 	ldr.w	r4, [lr, #4]!
    795a:	4063      	eors	r3, r4
    795c:	ea4c 0c03 	orr.w	ip, ip, r3
    7960:	42aa      	cmp	r2, r5
    7962:	d1f6      	bne.n	7952 <POINTonE2_Serialize_BE+0x16>
    7964:	f10c 33ff 	add.w	r3, ip, #4294967295
    7968:	ea33 030c 	bics.w	r3, r3, ip
    796c:	d504      	bpl.n	7978 <POINTonE2_Serialize_BE+0x3c>
    796e:	4630      	mov	r0, r6
    7970:	f7f9 ff18 	bl	17a4 <POINTonE2_affine_Serialize_BE>
    7974:	b048      	add	sp, #288	; 0x120
    7976:	bd70      	pop	{r4, r5, r6, pc}
    7978:	4668      	mov	r0, sp
    797a:	f7ff ff5c 	bl	7836 <POINTonE2_from_Jacobian>
    797e:	4669      	mov	r1, sp
    7980:	e7f5      	b.n	796e <POINTonE2_Serialize_BE+0x32>
    7982:	bf00      	nop
    7984:	00015a08 	.word	0x00015a08

00007988 <blst_p2_serialize>:
    7988:	b510      	push	{r4, lr}
    798a:	f101 03bc 	add.w	r3, r1, #188	; 0xbc
    798e:	f501 7c8e 	add.w	ip, r1, #284	; 0x11c
    7992:	2200      	movs	r2, #0
    7994:	f853 4f04 	ldr.w	r4, [r3, #4]!
    7998:	4322      	orrs	r2, r4
    799a:	4563      	cmp	r3, ip
    799c:	d1fa      	bne.n	7994 <blst_p2_serialize+0xc>
    799e:	1e53      	subs	r3, r2, #1
    79a0:	4393      	bics	r3, r2
    79a2:	d50a      	bpl.n	79ba <blst_p2_serialize+0x32>
    79a4:	1e43      	subs	r3, r0, #1
    79a6:	f100 01bf 	add.w	r1, r0, #191	; 0xbf
    79aa:	2200      	movs	r2, #0
    79ac:	f803 2f01 	strb.w	r2, [r3, #1]!
    79b0:	428b      	cmp	r3, r1
    79b2:	d1fb      	bne.n	79ac <blst_p2_serialize+0x24>
    79b4:	2340      	movs	r3, #64	; 0x40
    79b6:	7003      	strb	r3, [r0, #0]
    79b8:	bd10      	pop	{r4, pc}
    79ba:	f7ff ffbf 	bl	793c <POINTonE2_Serialize_BE>
    79be:	e7fb      	b.n	79b8 <blst_p2_serialize+0x30>

000079c0 <POINTonE2_Compress_BE>:
    79c0:	b570      	push	{r4, r5, r6, lr}
    79c2:	b0c8      	sub	sp, #288	; 0x120
    79c4:	4606      	mov	r6, r0
    79c6:	f101 0ebc 	add.w	lr, r1, #188	; 0xbc
    79ca:	4d0f      	ldr	r5, [pc, #60]	; (7a08 <POINTonE2_Compress_BE+0x48>)
    79cc:	f105 0290 	add.w	r2, r5, #144	; 0x90
    79d0:	35f0      	adds	r5, #240	; 0xf0
    79d2:	f04f 0c00 	mov.w	ip, #0
    79d6:	f852 3b04 	ldr.w	r3, [r2], #4
    79da:	f85e 4f04 	ldr.w	r4, [lr, #4]!
    79de:	4063      	eors	r3, r4
    79e0:	ea4c 0c03 	orr.w	ip, ip, r3
    79e4:	42aa      	cmp	r2, r5
    79e6:	d1f6      	bne.n	79d6 <POINTonE2_Compress_BE+0x16>
    79e8:	f10c 33ff 	add.w	r3, ip, #4294967295
    79ec:	ea33 030c 	bics.w	r3, r3, ip
    79f0:	d504      	bpl.n	79fc <POINTonE2_Compress_BE+0x3c>
    79f2:	4630      	mov	r0, r6
    79f4:	f7f9 fe4e 	bl	1694 <POINTonE2_affine_Compress_BE>
    79f8:	b048      	add	sp, #288	; 0x120
    79fa:	bd70      	pop	{r4, r5, r6, pc}
    79fc:	4668      	mov	r0, sp
    79fe:	f7ff ff1a 	bl	7836 <POINTonE2_from_Jacobian>
    7a02:	4669      	mov	r1, sp
    7a04:	e7f5      	b.n	79f2 <POINTonE2_Compress_BE+0x32>
    7a06:	bf00      	nop
    7a08:	00015a08 	.word	0x00015a08

00007a0c <blst_p2_compress>:
    7a0c:	b538      	push	{r3, r4, r5, lr}
    7a0e:	4605      	mov	r5, r0
    7a10:	f101 03bc 	add.w	r3, r1, #188	; 0xbc
    7a14:	f501 7c8e 	add.w	ip, r1, #284	; 0x11c
    7a18:	2200      	movs	r2, #0
    7a1a:	f853 4f04 	ldr.w	r4, [r3, #4]!
    7a1e:	4322      	orrs	r2, r4
    7a20:	4563      	cmp	r3, ip
    7a22:	d1fa      	bne.n	7a1a <blst_p2_compress+0xe>
    7a24:	1e53      	subs	r3, r2, #1
    7a26:	4393      	bics	r3, r2
    7a28:	d50a      	bpl.n	7a40 <blst_p2_compress+0x34>
    7a2a:	1e6b      	subs	r3, r5, #1
    7a2c:	f105 015f 	add.w	r1, r5, #95	; 0x5f
    7a30:	2200      	movs	r2, #0
    7a32:	f803 2f01 	strb.w	r2, [r3, #1]!
    7a36:	428b      	cmp	r3, r1
    7a38:	d1fb      	bne.n	7a32 <blst_p2_compress+0x26>
    7a3a:	23c0      	movs	r3, #192	; 0xc0
    7a3c:	702b      	strb	r3, [r5, #0]
    7a3e:	bd38      	pop	{r3, r4, r5, pc}
    7a40:	4628      	mov	r0, r5
    7a42:	f7ff ffbd 	bl	79c0 <POINTonE2_Compress_BE>
    7a46:	0103      	lsls	r3, r0, #4
    7a48:	f003 0320 	and.w	r3, r3, #32
    7a4c:	782a      	ldrb	r2, [r5, #0]
    7a4e:	4313      	orrs	r3, r2
    7a50:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7a54:	702b      	strb	r3, [r5, #0]
    7a56:	e7f2      	b.n	7a3e <blst_p2_compress+0x32>

00007a58 <POINTonE2_affine_on_curve>:
    7a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a5c:	b0b2      	sub	sp, #200	; 0xc8
    7a5e:	4604      	mov	r4, r0
    7a60:	4e29      	ldr	r6, [pc, #164]	; (7b08 <POINTonE2_affine_on_curve+0xb0>)
    7a62:	4d2a      	ldr	r5, [pc, #168]	; (7b0c <POINTonE2_affine_on_curve+0xb4>)
    7a64:	4633      	mov	r3, r6
    7a66:	462a      	mov	r2, r5
    7a68:	4601      	mov	r1, r0
    7a6a:	a81a      	add	r0, sp, #104	; 0x68
    7a6c:	f7ff feae 	bl	77cc <sqr_mont_384x>
    7a70:	9600      	str	r6, [sp, #0]
    7a72:	462b      	mov	r3, r5
    7a74:	4622      	mov	r2, r4
    7a76:	a91a      	add	r1, sp, #104	; 0x68
    7a78:	4608      	mov	r0, r1
    7a7a:	f7fc fc19 	bl	42b0 <mul_mont_384x>
    7a7e:	4f24      	ldr	r7, [pc, #144]	; (7b10 <POINTonE2_affine_on_curve+0xb8>)
    7a80:	f04f 080c 	mov.w	r8, #12
    7a84:	f8cd 8000 	str.w	r8, [sp]
    7a88:	462b      	mov	r3, r5
    7a8a:	f507 628c 	add.w	r2, r7, #1120	; 0x460
    7a8e:	a91a      	add	r1, sp, #104	; 0x68
    7a90:	4608      	mov	r0, r1
    7a92:	f7f9 f8f3 	bl	c7c <add_mod_n>
    7a96:	f8cd 8000 	str.w	r8, [sp]
    7a9a:	462b      	mov	r3, r5
    7a9c:	f507 6292 	add.w	r2, r7, #1168	; 0x490
    7aa0:	a926      	add	r1, sp, #152	; 0x98
    7aa2:	4608      	mov	r0, r1
    7aa4:	f7f9 f8ea 	bl	c7c <add_mod_n>
    7aa8:	4633      	mov	r3, r6
    7aaa:	462a      	mov	r2, r5
    7aac:	f104 0160 	add.w	r1, r4, #96	; 0x60
    7ab0:	a802      	add	r0, sp, #8
    7ab2:	f7ff fe8b 	bl	77cc <sqr_mont_384x>
    7ab6:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
    7aba:	aa01      	add	r2, sp, #4
    7abc:	a831      	add	r0, sp, #196	; 0xc4
    7abe:	f04f 0e00 	mov.w	lr, #0
    7ac2:	f85c 3f04 	ldr.w	r3, [ip, #4]!
    7ac6:	f852 1f04 	ldr.w	r1, [r2, #4]!
    7aca:	404b      	eors	r3, r1
    7acc:	ea4e 0e03 	orr.w	lr, lr, r3
    7ad0:	4584      	cmp	ip, r0
    7ad2:	d1f6      	bne.n	7ac2 <POINTonE2_affine_on_curve+0x6a>
    7ad4:	f10e 30ff 	add.w	r0, lr, #4294967295
    7ad8:	ea20 0e0e 	bic.w	lr, r0, lr
    7adc:	ea4f 7ede 	mov.w	lr, lr, lsr #31
    7ae0:	1f23      	subs	r3, r4, #4
    7ae2:	f104 01bc 	add.w	r1, r4, #188	; 0xbc
    7ae6:	f04f 0c00 	mov.w	ip, #0
    7aea:	f853 2f04 	ldr.w	r2, [r3, #4]!
    7aee:	ea4c 0c02 	orr.w	ip, ip, r2
    7af2:	428b      	cmp	r3, r1
    7af4:	d1f9      	bne.n	7aea <POINTonE2_affine_on_curve+0x92>
    7af6:	f10c 30ff 	add.w	r0, ip, #4294967295
    7afa:	ea20 000c 	bic.w	r0, r0, ip
    7afe:	ea4e 70d0 	orr.w	r0, lr, r0, lsr #31
    7b02:	b032      	add	sp, #200	; 0xc8
    7b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b08:	fffcfffd 	.word	0xfffcfffd
    7b0c:	00015a08 	.word	0x00015a08
    7b10:	00016b00 	.word	0x00016b00

00007b14 <blst_p2_affine_on_curve>:
    7b14:	b508      	push	{r3, lr}
    7b16:	f7ff ff9f 	bl	7a58 <POINTonE2_affine_on_curve>
    7b1a:	bd08      	pop	{r3, pc}

00007b1c <POINTonE2_Deserialize_BE>:
    7b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7b20:	b0be      	sub	sp, #248	; 0xf8
    7b22:	4604      	mov	r4, r0
    7b24:	f101 0230 	add.w	r2, r1, #48	; 0x30
    7b28:	4608      	mov	r0, r1
    7b2a:	2500      	movs	r5, #0
    7b2c:	f101 072f 	add.w	r7, r1, #47	; 0x2f
    7b30:	1a3b      	subs	r3, r7, r0
    7b32:	f810 6b01 	ldrb.w	r6, [r0], #1
    7b36:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
    7b3a:	f023 0303 	bic.w	r3, r3, #3
    7b3e:	ae3e      	add	r6, sp, #248	; 0xf8
    7b40:	4433      	add	r3, r6
    7b42:	f843 5c90 	str.w	r5, [r3, #-144]
    7b46:	4290      	cmp	r0, r2
    7b48:	d1f2      	bne.n	7b30 <POINTonE2_Deserialize_BE+0x14>
    7b4a:	f101 0060 	add.w	r0, r1, #96	; 0x60
    7b4e:	2500      	movs	r5, #0
    7b50:	f101 075f 	add.w	r7, r1, #95	; 0x5f
    7b54:	1abb      	subs	r3, r7, r2
    7b56:	f812 6b01 	ldrb.w	r6, [r2], #1
    7b5a:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
    7b5e:	f023 0303 	bic.w	r3, r3, #3
    7b62:	ae3e      	add	r6, sp, #248	; 0xf8
    7b64:	4433      	add	r3, r6
    7b66:	f843 5cc0 	str.w	r5, [r3, #-192]
    7b6a:	4282      	cmp	r2, r0
    7b6c:	d1f2      	bne.n	7b54 <POINTonE2_Deserialize_BE+0x38>
    7b6e:	f101 0290 	add.w	r2, r1, #144	; 0x90
    7b72:	2500      	movs	r5, #0
    7b74:	f101 078f 	add.w	r7, r1, #143	; 0x8f
    7b78:	1a3b      	subs	r3, r7, r0
    7b7a:	f810 6b01 	ldrb.w	r6, [r0], #1
    7b7e:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
    7b82:	f023 0303 	bic.w	r3, r3, #3
    7b86:	ae3e      	add	r6, sp, #248	; 0xf8
    7b88:	4433      	add	r3, r6
    7b8a:	f843 5c30 	str.w	r5, [r3, #-48]
    7b8e:	4290      	cmp	r0, r2
    7b90:	d1f2      	bne.n	7b78 <POINTonE2_Deserialize_BE+0x5c>
    7b92:	f101 06c0 	add.w	r6, r1, #192	; 0xc0
    7b96:	2000      	movs	r0, #0
    7b98:	31bf      	adds	r1, #191	; 0xbf
    7b9a:	1a8b      	subs	r3, r1, r2
    7b9c:	f812 5b01 	ldrb.w	r5, [r2], #1
    7ba0:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
    7ba4:	f023 0303 	bic.w	r3, r3, #3
    7ba8:	ad3e      	add	r5, sp, #248	; 0xf8
    7baa:	442b      	add	r3, r5
    7bac:	f843 0c60 	str.w	r0, [r3, #-96]
    7bb0:	42b2      	cmp	r2, r6
    7bb2:	d1f2      	bne.n	7b9a <POINTonE2_Deserialize_BE+0x7e>
    7bb4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    7bb6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    7bba:	9325      	str	r3, [sp, #148]	; 0x94
    7bbc:	4b55      	ldr	r3, [pc, #340]	; (7d14 <POINTonE2_Deserialize_BE+0x1f8>)
    7bbe:	220c      	movs	r2, #12
    7bc0:	9200      	str	r2, [sp, #0]
    7bc2:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
    7bc6:	a91a      	add	r1, sp, #104	; 0x68
    7bc8:	a802      	add	r0, sp, #8
    7bca:	f7f9 f857 	bl	c7c <add_mod_n>
    7bce:	ae02      	add	r6, sp, #8
    7bd0:	a819      	add	r0, sp, #100	; 0x64
    7bd2:	ad0e      	add	r5, sp, #56	; 0x38
    7bd4:	4632      	mov	r2, r6
    7bd6:	2100      	movs	r1, #0
    7bd8:	f852 3b04 	ldr.w	r3, [r2], #4
    7bdc:	f850 7f04 	ldr.w	r7, [r0, #4]!
    7be0:	407b      	eors	r3, r7
    7be2:	4319      	orrs	r1, r3
    7be4:	42aa      	cmp	r2, r5
    7be6:	d1f7      	bne.n	7bd8 <POINTonE2_Deserialize_BE+0xbc>
    7be8:	1e4b      	subs	r3, r1, #1
    7bea:	438b      	bics	r3, r1
    7bec:	d403      	bmi.n	7bf6 <POINTonE2_Deserialize_BE+0xda>
    7bee:	2001      	movs	r0, #1
    7bf0:	b03e      	add	sp, #248	; 0xf8
    7bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7bf6:	4b47      	ldr	r3, [pc, #284]	; (7d14 <POINTonE2_Deserialize_BE+0x1f8>)
    7bf8:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    7bfc:	220c      	movs	r2, #12
    7bfe:	9200      	str	r2, [sp, #0]
    7c00:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
    7c04:	4641      	mov	r1, r8
    7c06:	a802      	add	r0, sp, #8
    7c08:	f7f9 f838 	bl	c7c <add_mod_n>
    7c0c:	46c2      	mov	sl, r8
    7c0e:	4641      	mov	r1, r8
    7c10:	4632      	mov	r2, r6
    7c12:	2000      	movs	r0, #0
    7c14:	f852 3b04 	ldr.w	r3, [r2], #4
    7c18:	f851 7b04 	ldr.w	r7, [r1], #4
    7c1c:	407b      	eors	r3, r7
    7c1e:	4318      	orrs	r0, r3
    7c20:	42aa      	cmp	r2, r5
    7c22:	d1f7      	bne.n	7c14 <POINTonE2_Deserialize_BE+0xf8>
    7c24:	1e43      	subs	r3, r0, #1
    7c26:	4383      	bics	r3, r0
    7c28:	d401      	bmi.n	7c2e <POINTonE2_Deserialize_BE+0x112>
    7c2a:	2001      	movs	r0, #1
    7c2c:	e7e0      	b.n	7bf0 <POINTonE2_Deserialize_BE+0xd4>
    7c2e:	4b39      	ldr	r3, [pc, #228]	; (7d14 <POINTonE2_Deserialize_BE+0x1f8>)
    7c30:	220c      	movs	r2, #12
    7c32:	9200      	str	r2, [sp, #0]
    7c34:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
    7c38:	a932      	add	r1, sp, #200	; 0xc8
    7c3a:	a802      	add	r0, sp, #8
    7c3c:	f7f9 f81e 	bl	c7c <add_mod_n>
    7c40:	a831      	add	r0, sp, #196	; 0xc4
    7c42:	4632      	mov	r2, r6
    7c44:	2100      	movs	r1, #0
    7c46:	f852 3b04 	ldr.w	r3, [r2], #4
    7c4a:	f850 7f04 	ldr.w	r7, [r0, #4]!
    7c4e:	407b      	eors	r3, r7
    7c50:	4319      	orrs	r1, r3
    7c52:	42aa      	cmp	r2, r5
    7c54:	d1f7      	bne.n	7c46 <POINTonE2_Deserialize_BE+0x12a>
    7c56:	1e4b      	subs	r3, r1, #1
    7c58:	438b      	bics	r3, r1
    7c5a:	d401      	bmi.n	7c60 <POINTonE2_Deserialize_BE+0x144>
    7c5c:	2001      	movs	r0, #1
    7c5e:	e7c7      	b.n	7bf0 <POINTonE2_Deserialize_BE+0xd4>
    7c60:	4b2c      	ldr	r3, [pc, #176]	; (7d14 <POINTonE2_Deserialize_BE+0x1f8>)
    7c62:	220c      	movs	r2, #12
    7c64:	9200      	str	r2, [sp, #0]
    7c66:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
    7c6a:	a926      	add	r1, sp, #152	; 0x98
    7c6c:	a802      	add	r0, sp, #8
    7c6e:	f7f9 f805 	bl	c7c <add_mod_n>
    7c72:	a925      	add	r1, sp, #148	; 0x94
    7c74:	2200      	movs	r2, #0
    7c76:	f856 3b04 	ldr.w	r3, [r6], #4
    7c7a:	f851 0f04 	ldr.w	r0, [r1, #4]!
    7c7e:	4043      	eors	r3, r0
    7c80:	431a      	orrs	r2, r3
    7c82:	42ae      	cmp	r6, r5
    7c84:	d1f7      	bne.n	7c76 <POINTonE2_Deserialize_BE+0x15a>
    7c86:	1e53      	subs	r3, r2, #1
    7c88:	4393      	bics	r3, r2
    7c8a:	d401      	bmi.n	7c90 <POINTonE2_Deserialize_BE+0x174>
    7c8c:	2001      	movs	r0, #1
    7c8e:	e7af      	b.n	7bf0 <POINTonE2_Deserialize_BE+0xd4>
    7c90:	4d20      	ldr	r5, [pc, #128]	; (7d14 <POINTonE2_Deserialize_BE+0x1f8>)
    7c92:	f505 7634 	add.w	r6, r5, #720	; 0x2d0
    7c96:	f04f 090c 	mov.w	r9, #12
    7c9a:	f8cd 9004 	str.w	r9, [sp, #4]
    7c9e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 7d18 <POINTonE2_Deserialize_BE+0x1fc>
    7ca2:	f8cd 8000 	str.w	r8, [sp]
    7ca6:	462b      	mov	r3, r5
    7ca8:	4632      	mov	r2, r6
    7caa:	a90e      	add	r1, sp, #56	; 0x38
    7cac:	4608      	mov	r0, r1
    7cae:	f7f8 fe3d 	bl	92c <mul_mont_n>
    7cb2:	f8cd 9004 	str.w	r9, [sp, #4]
    7cb6:	f8cd 8000 	str.w	r8, [sp]
    7cba:	462b      	mov	r3, r5
    7cbc:	4632      	mov	r2, r6
    7cbe:	a91a      	add	r1, sp, #104	; 0x68
    7cc0:	4608      	mov	r0, r1
    7cc2:	f7f8 fe33 	bl	92c <mul_mont_n>
    7cc6:	f8cd 9004 	str.w	r9, [sp, #4]
    7cca:	f8cd 8000 	str.w	r8, [sp]
    7cce:	462b      	mov	r3, r5
    7cd0:	4632      	mov	r2, r6
    7cd2:	a926      	add	r1, sp, #152	; 0x98
    7cd4:	4608      	mov	r0, r1
    7cd6:	f7f8 fe29 	bl	92c <mul_mont_n>
    7cda:	f8cd 9004 	str.w	r9, [sp, #4]
    7cde:	f8cd 8000 	str.w	r8, [sp]
    7ce2:	462b      	mov	r3, r5
    7ce4:	4632      	mov	r2, r6
    7ce6:	a932      	add	r1, sp, #200	; 0xc8
    7ce8:	4608      	mov	r0, r1
    7cea:	f7f8 fe1f 	bl	92c <mul_mont_n>
    7cee:	a80e      	add	r0, sp, #56	; 0x38
    7cf0:	f7ff feb2 	bl	7a58 <POINTonE2_affine_on_curve>
    7cf4:	b158      	cbz	r0, 7d0e <POINTonE2_Deserialize_BE+0x1f2>
    7cf6:	ab0d      	add	r3, sp, #52	; 0x34
    7cf8:	3c04      	subs	r4, #4
    7cfa:	f10a 07bc 	add.w	r7, sl, #188	; 0xbc
    7cfe:	f853 2f04 	ldr.w	r2, [r3, #4]!
    7d02:	f844 2f04 	str.w	r2, [r4, #4]!
    7d06:	429f      	cmp	r7, r3
    7d08:	d1f9      	bne.n	7cfe <POINTonE2_Deserialize_BE+0x1e2>
    7d0a:	2000      	movs	r0, #0
    7d0c:	e770      	b.n	7bf0 <POINTonE2_Deserialize_BE+0xd4>
    7d0e:	2002      	movs	r0, #2
    7d10:	e76e      	b.n	7bf0 <POINTonE2_Deserialize_BE+0xd4>
    7d12:	bf00      	nop
    7d14:	00015a08 	.word	0x00015a08
    7d18:	fffcfffd 	.word	0xfffcfffd

00007d1c <POINTonE2_on_curve>:
    7d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d20:	b0ca      	sub	sp, #296	; 0x128
    7d22:	4606      	mov	r6, r0
    7d24:	f100 07c0 	add.w	r7, r0, #192	; 0xc0
    7d28:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
    7d2c:	f500 758e 	add.w	r5, r0, #284	; 0x11c
    7d30:	f04f 0c00 	mov.w	ip, #0
    7d34:	f853 4f04 	ldr.w	r4, [r3, #4]!
    7d38:	ea4c 0c04 	orr.w	ip, ip, r4
    7d3c:	42ab      	cmp	r3, r5
    7d3e:	d1f9      	bne.n	7d34 <POINTonE2_on_curve+0x18>
    7d40:	f10c 35ff 	add.w	r5, ip, #4294967295
    7d44:	ea25 0c0c 	bic.w	ip, r5, ip
    7d48:	ea4f 75dc 	mov.w	r5, ip, lsr #31
    7d4c:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 7e24 <POINTonE2_on_curve+0x108>
    7d50:	4c35      	ldr	r4, [pc, #212]	; (7e28 <POINTonE2_on_curve+0x10c>)
    7d52:	4643      	mov	r3, r8
    7d54:	4622      	mov	r2, r4
    7d56:	4639      	mov	r1, r7
    7d58:	a802      	add	r0, sp, #8
    7d5a:	f7ff fd37 	bl	77cc <sqr_mont_384x>
    7d5e:	f8cd 8000 	str.w	r8, [sp]
    7d62:	4623      	mov	r3, r4
    7d64:	463a      	mov	r2, r7
    7d66:	a902      	add	r1, sp, #8
    7d68:	4608      	mov	r0, r1
    7d6a:	f7fc faa1 	bl	42b0 <mul_mont_384x>
    7d6e:	4643      	mov	r3, r8
    7d70:	4622      	mov	r2, r4
    7d72:	a902      	add	r1, sp, #8
    7d74:	a832      	add	r0, sp, #200	; 0xc8
    7d76:	f7ff fd29 	bl	77cc <sqr_mont_384x>
    7d7a:	270c      	movs	r7, #12
    7d7c:	9700      	str	r7, [sp, #0]
    7d7e:	4623      	mov	r3, r4
    7d80:	aa3e      	add	r2, sp, #248	; 0xf8
    7d82:	a932      	add	r1, sp, #200	; 0xc8
    7d84:	a802      	add	r0, sp, #8
    7d86:	f7f8 fc23 	bl	5d0 <sub_mod_n>
    7d8a:	9700      	str	r7, [sp, #0]
    7d8c:	4623      	mov	r3, r4
    7d8e:	aa3e      	add	r2, sp, #248	; 0xf8
    7d90:	a932      	add	r1, sp, #200	; 0xc8
    7d92:	a80e      	add	r0, sp, #56	; 0x38
    7d94:	f7f8 ff72 	bl	c7c <add_mod_n>
    7d98:	9700      	str	r7, [sp, #0]
    7d9a:	4623      	mov	r3, r4
    7d9c:	2202      	movs	r2, #2
    7d9e:	a902      	add	r1, sp, #8
    7da0:	4608      	mov	r0, r1
    7da2:	f7f9 f893 	bl	ecc <lshift_mod_n>
    7da6:	9700      	str	r7, [sp, #0]
    7da8:	4623      	mov	r3, r4
    7daa:	2202      	movs	r2, #2
    7dac:	a90e      	add	r1, sp, #56	; 0x38
    7dae:	4608      	mov	r0, r1
    7db0:	f7f9 f88c 	bl	ecc <lshift_mod_n>
    7db4:	4643      	mov	r3, r8
    7db6:	4622      	mov	r2, r4
    7db8:	4631      	mov	r1, r6
    7dba:	a832      	add	r0, sp, #200	; 0xc8
    7dbc:	f7ff fd06 	bl	77cc <sqr_mont_384x>
    7dc0:	f8cd 8000 	str.w	r8, [sp]
    7dc4:	4623      	mov	r3, r4
    7dc6:	4632      	mov	r2, r6
    7dc8:	a932      	add	r1, sp, #200	; 0xc8
    7dca:	4608      	mov	r0, r1
    7dcc:	f7fc fa70 	bl	42b0 <mul_mont_384x>
    7dd0:	9700      	str	r7, [sp, #0]
    7dd2:	4623      	mov	r3, r4
    7dd4:	aa02      	add	r2, sp, #8
    7dd6:	a932      	add	r1, sp, #200	; 0xc8
    7dd8:	4608      	mov	r0, r1
    7dda:	f7f8 ff4f 	bl	c7c <add_mod_n>
    7dde:	9700      	str	r7, [sp, #0]
    7de0:	4623      	mov	r3, r4
    7de2:	aa0e      	add	r2, sp, #56	; 0x38
    7de4:	a93e      	add	r1, sp, #248	; 0xf8
    7de6:	4608      	mov	r0, r1
    7de8:	f7f8 ff48 	bl	c7c <add_mod_n>
    7dec:	4643      	mov	r3, r8
    7dee:	4622      	mov	r2, r4
    7df0:	f106 0160 	add.w	r1, r6, #96	; 0x60
    7df4:	a81a      	add	r0, sp, #104	; 0x68
    7df6:	f7ff fce9 	bl	77cc <sqr_mont_384x>
    7dfa:	aa31      	add	r2, sp, #196	; 0xc4
    7dfc:	a919      	add	r1, sp, #100	; 0x64
    7dfe:	f50d 7c92 	add.w	ip, sp, #292	; 0x124
    7e02:	2000      	movs	r0, #0
    7e04:	f852 3f04 	ldr.w	r3, [r2, #4]!
    7e08:	f851 4f04 	ldr.w	r4, [r1, #4]!
    7e0c:	4063      	eors	r3, r4
    7e0e:	4318      	orrs	r0, r3
    7e10:	4562      	cmp	r2, ip
    7e12:	d1f7      	bne.n	7e04 <POINTonE2_on_curve+0xe8>
    7e14:	1e43      	subs	r3, r0, #1
    7e16:	ea23 0000 	bic.w	r0, r3, r0
    7e1a:	ea45 70d0 	orr.w	r0, r5, r0, lsr #31
    7e1e:	b04a      	add	sp, #296	; 0x128
    7e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7e24:	fffcfffd 	.word	0xfffcfffd
    7e28:	00015a08 	.word	0x00015a08

00007e2c <blst_p2_on_curve>:
    7e2c:	b508      	push	{r3, lr}
    7e2e:	f7ff ff75 	bl	7d1c <POINTonE2_on_curve>
    7e32:	bd08      	pop	{r3, pc}

00007e34 <sqrt_align_fp2>:
    7e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7e38:	b0cd      	sub	sp, #308	; 0x134
    7e3a:	9002      	str	r0, [sp, #8]
    7e3c:	9103      	str	r1, [sp, #12]
    7e3e:	4611      	mov	r1, r2
    7e40:	461f      	mov	r7, r3
    7e42:	4c6d      	ldr	r4, [pc, #436]	; (7ff8 <__kernel_ram_size+0x168>)
    7e44:	4b6d      	ldr	r3, [pc, #436]	; (7ffc <__kernel_ram_size+0x16c>)
    7e46:	4622      	mov	r2, r4
    7e48:	a81c      	add	r0, sp, #112	; 0x70
    7e4a:	f7ff fcbf 	bl	77cc <sqr_mont_384x>
    7e4e:	250c      	movs	r5, #12
    7e50:	9500      	str	r5, [sp, #0]
    7e52:	4623      	mov	r3, r4
    7e54:	463a      	mov	r2, r7
    7e56:	a91c      	add	r1, sp, #112	; 0x70
    7e58:	a804      	add	r0, sp, #16
    7e5a:	f7f8 fbb9 	bl	5d0 <sub_mod_n>
    7e5e:	f107 0930 	add.w	r9, r7, #48	; 0x30
    7e62:	9500      	str	r5, [sp, #0]
    7e64:	4623      	mov	r3, r4
    7e66:	464a      	mov	r2, r9
    7e68:	a928      	add	r1, sp, #160	; 0xa0
    7e6a:	a810      	add	r0, sp, #64	; 0x40
    7e6c:	f7f8 fbb0 	bl	5d0 <sub_mod_n>
    7e70:	eb0d 0605 	add.w	r6, sp, r5
    7e74:	ac1b      	add	r4, sp, #108	; 0x6c
    7e76:	4633      	mov	r3, r6
    7e78:	2200      	movs	r2, #0
    7e7a:	f853 1f04 	ldr.w	r1, [r3, #4]!
    7e7e:	430a      	orrs	r2, r1
    7e80:	42a3      	cmp	r3, r4
    7e82:	d1fa      	bne.n	7e7a <sqrt_align_fp2+0x46>
    7e84:	f102 38ff 	add.w	r8, r2, #4294967295
    7e88:	ea28 0802 	bic.w	r8, r8, r2
    7e8c:	ea4f 78d8 	mov.w	r8, r8, lsr #31
    7e90:	4859      	ldr	r0, [pc, #356]	; (7ff8 <__kernel_ram_size+0x168>)
    7e92:	f100 038c 	add.w	r3, r0, #140	; 0x8c
    7e96:	ad33      	add	r5, sp, #204	; 0xcc
    7e98:	30ec      	adds	r0, #236	; 0xec
    7e9a:	462a      	mov	r2, r5
    7e9c:	f853 1f04 	ldr.w	r1, [r3, #4]!
    7ea0:	f842 1f04 	str.w	r1, [r2, #4]!
    7ea4:	4283      	cmp	r3, r0
    7ea6:	d1f9      	bne.n	7e9c <__kernel_ram_size+0xc>
    7ea8:	f8df a14c 	ldr.w	sl, [pc, #332]	; 7ff8 <__kernel_ram_size+0x168>
    7eac:	f04f 0b0c 	mov.w	fp, #12
    7eb0:	f8cd b000 	str.w	fp, [sp]
    7eb4:	4653      	mov	r3, sl
    7eb6:	463a      	mov	r2, r7
    7eb8:	a91c      	add	r1, sp, #112	; 0x70
    7eba:	a804      	add	r0, sp, #16
    7ebc:	f7f8 fede 	bl	c7c <add_mod_n>
    7ec0:	f8cd b000 	str.w	fp, [sp]
    7ec4:	4653      	mov	r3, sl
    7ec6:	464a      	mov	r2, r9
    7ec8:	a928      	add	r1, sp, #160	; 0xa0
    7eca:	a810      	add	r0, sp, #64	; 0x40
    7ecc:	f7f8 fed6 	bl	c7c <add_mod_n>
    7ed0:	4633      	mov	r3, r6
    7ed2:	2200      	movs	r2, #0
    7ed4:	f853 1f04 	ldr.w	r1, [r3, #4]!
    7ed8:	430a      	orrs	r2, r1
    7eda:	42a3      	cmp	r3, r4
    7edc:	d1fa      	bne.n	7ed4 <__kernel_ram_size+0x44>
    7ede:	f102 3cff 	add.w	ip, r2, #4294967295
    7ee2:	ea2c 0c02 	bic.w	ip, ip, r2
    7ee6:	ea4f 7adc 	mov.w	sl, ip, lsr #31
    7eea:	ea4f 7cec 	mov.w	ip, ip, asr #31
    7eee:	4b44      	ldr	r3, [pc, #272]	; (8000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>)
    7ef0:	f203 41bc 	addw	r1, r3, #1212	; 0x4bc
    7ef4:	f203 5e1c 	addw	lr, r3, #1308	; 0x51c
    7ef8:	462a      	mov	r2, r5
    7efa:	f852 0f04 	ldr.w	r0, [r2, #4]!
    7efe:	f851 3f04 	ldr.w	r3, [r1, #4]!
    7f02:	4043      	eors	r3, r0
    7f04:	ea03 030c 	and.w	r3, r3, ip
    7f08:	4043      	eors	r3, r0
    7f0a:	6013      	str	r3, [r2, #0]
    7f0c:	4571      	cmp	r1, lr
    7f0e:	d1f4      	bne.n	7efa <__kernel_ram_size+0x6a>
    7f10:	ea48 080a 	orr.w	r8, r8, sl
    7f14:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 7ff8 <__kernel_ram_size+0x168>
    7f18:	f04f 0b0c 	mov.w	fp, #12
    7f1c:	f8cd b000 	str.w	fp, [sp]
    7f20:	4653      	mov	r3, sl
    7f22:	464a      	mov	r2, r9
    7f24:	a91c      	add	r1, sp, #112	; 0x70
    7f26:	a804      	add	r0, sp, #16
    7f28:	f7f8 fb52 	bl	5d0 <sub_mod_n>
    7f2c:	f8cd b000 	str.w	fp, [sp]
    7f30:	4653      	mov	r3, sl
    7f32:	463a      	mov	r2, r7
    7f34:	a928      	add	r1, sp, #160	; 0xa0
    7f36:	a810      	add	r0, sp, #64	; 0x40
    7f38:	f7f8 fea0 	bl	c7c <add_mod_n>
    7f3c:	4633      	mov	r3, r6
    7f3e:	2200      	movs	r2, #0
    7f40:	f853 1f04 	ldr.w	r1, [r3, #4]!
    7f44:	430a      	orrs	r2, r1
    7f46:	42a3      	cmp	r3, r4
    7f48:	d1fa      	bne.n	7f40 <__kernel_ram_size+0xb0>
    7f4a:	f102 3cff 	add.w	ip, r2, #4294967295
    7f4e:	ea2c 0c02 	bic.w	ip, ip, r2
    7f52:	ea4f 7adc 	mov.w	sl, ip, lsr #31
    7f56:	ea4f 7cec 	mov.w	ip, ip, asr #31
    7f5a:	4b29      	ldr	r3, [pc, #164]	; (8000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>)
    7f5c:	f203 511c 	addw	r1, r3, #1308	; 0x51c
    7f60:	f203 5e7c 	addw	lr, r3, #1404	; 0x57c
    7f64:	462a      	mov	r2, r5
    7f66:	f852 0f04 	ldr.w	r0, [r2, #4]!
    7f6a:	f851 3f04 	ldr.w	r3, [r1, #4]!
    7f6e:	4043      	eors	r3, r0
    7f70:	ea03 030c 	and.w	r3, r3, ip
    7f74:	4043      	eors	r3, r0
    7f76:	6013      	str	r3, [r2, #0]
    7f78:	4571      	cmp	r1, lr
    7f7a:	d1f4      	bne.n	7f66 <__kernel_ram_size+0xd6>
    7f7c:	ea48 080a 	orr.w	r8, r8, sl
    7f80:	f8df a074 	ldr.w	sl, [pc, #116]	; 7ff8 <__kernel_ram_size+0x168>
    7f84:	f04f 0b0c 	mov.w	fp, #12
    7f88:	f8cd b000 	str.w	fp, [sp]
    7f8c:	4653      	mov	r3, sl
    7f8e:	464a      	mov	r2, r9
    7f90:	a91c      	add	r1, sp, #112	; 0x70
    7f92:	a804      	add	r0, sp, #16
    7f94:	f7f8 fe72 	bl	c7c <add_mod_n>
    7f98:	f8cd b000 	str.w	fp, [sp]
    7f9c:	4653      	mov	r3, sl
    7f9e:	463a      	mov	r2, r7
    7fa0:	a928      	add	r1, sp, #160	; 0xa0
    7fa2:	a810      	add	r0, sp, #64	; 0x40
    7fa4:	f7f8 fb14 	bl	5d0 <sub_mod_n>
    7fa8:	2300      	movs	r3, #0
    7faa:	f856 2f04 	ldr.w	r2, [r6, #4]!
    7fae:	4313      	orrs	r3, r2
    7fb0:	42a6      	cmp	r6, r4
    7fb2:	d1fa      	bne.n	7faa <__kernel_ram_size+0x11a>
    7fb4:	1e5c      	subs	r4, r3, #1
    7fb6:	ea24 0303 	bic.w	r3, r4, r3
    7fba:	0fd8      	lsrs	r0, r3, #31
    7fbc:	17dc      	asrs	r4, r3, #31
    7fbe:	4e10      	ldr	r6, [pc, #64]	; (8000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>)
    7fc0:	f206 527c 	addw	r2, r6, #1404	; 0x57c
    7fc4:	f206 56dc 	addw	r6, r6, #1500	; 0x5dc
    7fc8:	f855 1f04 	ldr.w	r1, [r5, #4]!
    7fcc:	f852 3f04 	ldr.w	r3, [r2, #4]!
    7fd0:	404b      	eors	r3, r1
    7fd2:	4023      	ands	r3, r4
    7fd4:	404b      	eors	r3, r1
    7fd6:	602b      	str	r3, [r5, #0]
    7fd8:	42b2      	cmp	r2, r6
    7fda:	d1f5      	bne.n	7fc8 <__kernel_ram_size+0x138>
    7fdc:	ea48 0800 	orr.w	r8, r8, r0
    7fe0:	4b06      	ldr	r3, [pc, #24]	; (7ffc <__kernel_ram_size+0x16c>)
    7fe2:	9300      	str	r3, [sp, #0]
    7fe4:	4b04      	ldr	r3, [pc, #16]	; (7ff8 <__kernel_ram_size+0x168>)
    7fe6:	aa34      	add	r2, sp, #208	; 0xd0
    7fe8:	9903      	ldr	r1, [sp, #12]
    7fea:	9802      	ldr	r0, [sp, #8]
    7fec:	f7fc f960 	bl	42b0 <mul_mont_384x>
    7ff0:	4640      	mov	r0, r8
    7ff2:	b04d      	add	sp, #308	; 0x134
    7ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7ff8:	00015a08 	.word	0x00015a08
    7ffc:	fffcfffd 	.word	0xfffcfffd
    8000:	00016b00 	.word	0x00016b00

00008004 <sqrt_fp2>:
    8004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8008:	b0b2      	sub	sp, #200	; 0xc8
    800a:	4682      	mov	sl, r0
    800c:	460c      	mov	r4, r1
    800e:	4f40      	ldr	r7, [pc, #256]	; (8110 <sqrt_fp2+0x10c>)
    8010:	250c      	movs	r5, #12
    8012:	9501      	str	r5, [sp, #4]
    8014:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8114 <sqrt_fp2+0x110>
    8018:	f8cd 9000 	str.w	r9, [sp]
    801c:	463b      	mov	r3, r7
    801e:	460a      	mov	r2, r1
    8020:	a80e      	add	r0, sp, #56	; 0x38
    8022:	f7f8 fc83 	bl	92c <mul_mont_n>
    8026:	f104 0630 	add.w	r6, r4, #48	; 0x30
    802a:	9501      	str	r5, [sp, #4]
    802c:	f8cd 9000 	str.w	r9, [sp]
    8030:	463b      	mov	r3, r7
    8032:	4632      	mov	r2, r6
    8034:	4631      	mov	r1, r6
    8036:	a802      	add	r0, sp, #8
    8038:	f7f8 fc78 	bl	92c <mul_mont_n>
    803c:	9500      	str	r5, [sp, #0]
    803e:	463b      	mov	r3, r7
    8040:	aa02      	add	r2, sp, #8
    8042:	a90e      	add	r1, sp, #56	; 0x38
    8044:	4608      	mov	r0, r1
    8046:	f7f8 fe19 	bl	c7c <add_mod_n>
    804a:	a90e      	add	r1, sp, #56	; 0x38
    804c:	4608      	mov	r0, r1
    804e:	f7fd ffa3 	bl	5f98 <sqrt_fp>
    8052:	9500      	str	r5, [sp, #0]
    8054:	463b      	mov	r3, r7
    8056:	aa0e      	add	r2, sp, #56	; 0x38
    8058:	4621      	mov	r1, r4
    805a:	a802      	add	r0, sp, #8
    805c:	f7f8 fab8 	bl	5d0 <sub_mod_n>
    8060:	9500      	str	r5, [sp, #0]
    8062:	463b      	mov	r3, r7
    8064:	aa0e      	add	r2, sp, #56	; 0x38
    8066:	4621      	mov	r1, r4
    8068:	4610      	mov	r0, r2
    806a:	f7f8 fe07 	bl	c7c <add_mod_n>
    806e:	a90e      	add	r1, sp, #56	; 0x38
    8070:	a81a      	add	r0, sp, #104	; 0x68
    8072:	468c      	mov	ip, r1
    8074:	2300      	movs	r3, #0
    8076:	f85c 2b04 	ldr.w	r2, [ip], #4
    807a:	4313      	orrs	r3, r2
    807c:	4584      	cmp	ip, r0
    807e:	d1fa      	bne.n	8076 <sqrt_fp2+0x72>
    8080:	f103 3cff 	add.w	ip, r3, #4294967295
    8084:	ea2c 0303 	bic.w	r3, ip, r3
    8088:	ea4f 7ce3 	mov.w	ip, r3, asr #31
    808c:	ab02      	add	r3, sp, #8
    808e:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
    8092:	f853 2b04 	ldr.w	r2, [r3], #4
    8096:	6808      	ldr	r0, [r1, #0]
    8098:	4042      	eors	r2, r0
    809a:	ea02 020c 	and.w	r2, r2, ip
    809e:	4042      	eors	r2, r0
    80a0:	f841 2b04 	str.w	r2, [r1], #4
    80a4:	4573      	cmp	r3, lr
    80a6:	d1f4      	bne.n	8092 <sqrt_fp2+0x8e>
    80a8:	4f19      	ldr	r7, [pc, #100]	; (8110 <sqrt_fp2+0x10c>)
    80aa:	f04f 080c 	mov.w	r8, #12
    80ae:	f8cd 8000 	str.w	r8, [sp]
    80b2:	463b      	mov	r3, r7
    80b4:	2201      	movs	r2, #1
    80b6:	a90e      	add	r1, sp, #56	; 0x38
    80b8:	4608      	mov	r0, r1
    80ba:	f7f8 faf1 	bl	6a0 <rshift_mod_n>
    80be:	a90e      	add	r1, sp, #56	; 0x38
    80c0:	a81a      	add	r0, sp, #104	; 0x68
    80c2:	f7fe f90f 	bl	62e4 <recip_sqrt_fp>
    80c6:	f8cd 8000 	str.w	r8, [sp]
    80ca:	463b      	mov	r3, r7
    80cc:	2201      	movs	r2, #1
    80ce:	4631      	mov	r1, r6
    80d0:	a826      	add	r0, sp, #152	; 0x98
    80d2:	f7f8 fae5 	bl	6a0 <rshift_mod_n>
    80d6:	f8cd 8004 	str.w	r8, [sp, #4]
    80da:	4e0e      	ldr	r6, [pc, #56]	; (8114 <sqrt_fp2+0x110>)
    80dc:	9600      	str	r6, [sp, #0]
    80de:	463b      	mov	r3, r7
    80e0:	aa1a      	add	r2, sp, #104	; 0x68
    80e2:	a926      	add	r1, sp, #152	; 0x98
    80e4:	4608      	mov	r0, r1
    80e6:	f7f8 fc21 	bl	92c <mul_mont_n>
    80ea:	f8cd 8004 	str.w	r8, [sp, #4]
    80ee:	9600      	str	r6, [sp, #0]
    80f0:	463b      	mov	r3, r7
    80f2:	aa0e      	add	r2, sp, #56	; 0x38
    80f4:	a91a      	add	r1, sp, #104	; 0x68
    80f6:	4608      	mov	r0, r1
    80f8:	f7f8 fc18 	bl	92c <mul_mont_n>
    80fc:	4623      	mov	r3, r4
    80fe:	aa1a      	add	r2, sp, #104	; 0x68
    8100:	4611      	mov	r1, r2
    8102:	4650      	mov	r0, sl
    8104:	f7ff fe96 	bl	7e34 <sqrt_align_fp2>
    8108:	b032      	add	sp, #200	; 0xc8
    810a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    810e:	bf00      	nop
    8110:	00015a08 	.word	0x00015a08
    8114:	fffcfffd 	.word	0xfffcfffd

00008118 <blst_fp2_sqrt>:
    8118:	b508      	push	{r3, lr}
    811a:	f7ff ff73 	bl	8004 <sqrt_fp2>
    811e:	bd08      	pop	{r3, pc}

00008120 <POINTonE2_Uncompress_BE>:
    8120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8124:	b0d7      	sub	sp, #348	; 0x15c
    8126:	4604      	mov	r4, r0
    8128:	f101 0230 	add.w	r2, r1, #48	; 0x30
    812c:	4608      	mov	r0, r1
    812e:	2500      	movs	r5, #0
    8130:	f101 072f 	add.w	r7, r1, #47	; 0x2f
    8134:	1a3b      	subs	r3, r7, r0
    8136:	f810 6b01 	ldrb.w	r6, [r0], #1
    813a:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
    813e:	f023 0303 	bic.w	r3, r3, #3
    8142:	ae56      	add	r6, sp, #344	; 0x158
    8144:	4433      	add	r3, r6
    8146:	f843 5c90 	str.w	r5, [r3, #-144]
    814a:	4290      	cmp	r0, r2
    814c:	d1f2      	bne.n	8134 <POINTonE2_Uncompress_BE+0x14>
    814e:	f101 0660 	add.w	r6, r1, #96	; 0x60
    8152:	2000      	movs	r0, #0
    8154:	315f      	adds	r1, #95	; 0x5f
    8156:	1a8b      	subs	r3, r1, r2
    8158:	f812 5b01 	ldrb.w	r5, [r2], #1
    815c:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
    8160:	f023 0303 	bic.w	r3, r3, #3
    8164:	ad56      	add	r5, sp, #344	; 0x158
    8166:	442b      	add	r3, r5
    8168:	f843 0cc0 	str.w	r0, [r3, #-192]
    816c:	42b2      	cmp	r2, r6
    816e:	d1f2      	bne.n	8156 <POINTonE2_Uncompress_BE+0x36>
    8170:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
    8172:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    8176:	933d      	str	r3, [sp, #244]	; 0xf4
    8178:	4b64      	ldr	r3, [pc, #400]	; (830c <POINTonE2_Uncompress_BE+0x1ec>)
    817a:	220c      	movs	r2, #12
    817c:	9200      	str	r2, [sp, #0]
    817e:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
    8182:	a932      	add	r1, sp, #200	; 0xc8
    8184:	a81a      	add	r0, sp, #104	; 0x68
    8186:	f7f8 fd79 	bl	c7c <add_mod_n>
    818a:	ad1a      	add	r5, sp, #104	; 0x68
    818c:	a831      	add	r0, sp, #196	; 0xc4
    818e:	ae26      	add	r6, sp, #152	; 0x98
    8190:	462a      	mov	r2, r5
    8192:	2100      	movs	r1, #0
    8194:	f852 3b04 	ldr.w	r3, [r2], #4
    8198:	f850 7f04 	ldr.w	r7, [r0, #4]!
    819c:	407b      	eors	r3, r7
    819e:	4319      	orrs	r1, r3
    81a0:	42b2      	cmp	r2, r6
    81a2:	d1f7      	bne.n	8194 <POINTonE2_Uncompress_BE+0x74>
    81a4:	1e4b      	subs	r3, r1, #1
    81a6:	438b      	bics	r3, r1
    81a8:	f140 80a4 	bpl.w	82f4 <POINTonE2_Uncompress_BE+0x1d4>
    81ac:	4b57      	ldr	r3, [pc, #348]	; (830c <POINTonE2_Uncompress_BE+0x1ec>)
    81ae:	af26      	add	r7, sp, #152	; 0x98
    81b0:	220c      	movs	r2, #12
    81b2:	9200      	str	r2, [sp, #0]
    81b4:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
    81b8:	4639      	mov	r1, r7
    81ba:	a81a      	add	r0, sp, #104	; 0x68
    81bc:	f7f8 fd5e 	bl	c7c <add_mod_n>
    81c0:	46b8      	mov	r8, r7
    81c2:	4639      	mov	r1, r7
    81c4:	2200      	movs	r2, #0
    81c6:	f855 3b04 	ldr.w	r3, [r5], #4
    81ca:	f851 0b04 	ldr.w	r0, [r1], #4
    81ce:	4043      	eors	r3, r0
    81d0:	431a      	orrs	r2, r3
    81d2:	42b5      	cmp	r5, r6
    81d4:	d1f7      	bne.n	81c6 <POINTonE2_Uncompress_BE+0xa6>
    81d6:	1e53      	subs	r3, r2, #1
    81d8:	4393      	bics	r3, r2
    81da:	f140 8090 	bpl.w	82fe <POINTonE2_Uncompress_BE+0x1de>
    81de:	4d4b      	ldr	r5, [pc, #300]	; (830c <POINTonE2_Uncompress_BE+0x1ec>)
    81e0:	f505 7934 	add.w	r9, r5, #720	; 0x2d0
    81e4:	260c      	movs	r6, #12
    81e6:	9601      	str	r6, [sp, #4]
    81e8:	4f49      	ldr	r7, [pc, #292]	; (8310 <POINTonE2_Uncompress_BE+0x1f0>)
    81ea:	9700      	str	r7, [sp, #0]
    81ec:	462b      	mov	r3, r5
    81ee:	464a      	mov	r2, r9
    81f0:	a926      	add	r1, sp, #152	; 0x98
    81f2:	4608      	mov	r0, r1
    81f4:	f7f8 fb9a 	bl	92c <mul_mont_n>
    81f8:	9601      	str	r6, [sp, #4]
    81fa:	9700      	str	r7, [sp, #0]
    81fc:	462b      	mov	r3, r5
    81fe:	464a      	mov	r2, r9
    8200:	a932      	add	r1, sp, #200	; 0xc8
    8202:	4608      	mov	r0, r1
    8204:	f7f8 fb92 	bl	92c <mul_mont_n>
    8208:	463b      	mov	r3, r7
    820a:	462a      	mov	r2, r5
    820c:	a926      	add	r1, sp, #152	; 0x98
    820e:	a83e      	add	r0, sp, #248	; 0xf8
    8210:	f7ff fadc 	bl	77cc <sqr_mont_384x>
    8214:	9700      	str	r7, [sp, #0]
    8216:	462b      	mov	r3, r5
    8218:	aa26      	add	r2, sp, #152	; 0x98
    821a:	a93e      	add	r1, sp, #248	; 0xf8
    821c:	4608      	mov	r0, r1
    821e:	f7fc f847 	bl	42b0 <mul_mont_384x>
    8222:	4f3c      	ldr	r7, [pc, #240]	; (8314 <POINTonE2_Uncompress_BE+0x1f4>)
    8224:	9600      	str	r6, [sp, #0]
    8226:	462b      	mov	r3, r5
    8228:	f507 628c 	add.w	r2, r7, #1120	; 0x460
    822c:	a93e      	add	r1, sp, #248	; 0xf8
    822e:	4608      	mov	r0, r1
    8230:	f7f8 fd24 	bl	c7c <add_mod_n>
    8234:	9600      	str	r6, [sp, #0]
    8236:	462b      	mov	r3, r5
    8238:	f507 6292 	add.w	r2, r7, #1168	; 0x490
    823c:	a94a      	add	r1, sp, #296	; 0x128
    823e:	4608      	mov	r0, r1
    8240:	f7f8 fd1c 	bl	c7c <add_mod_n>
    8244:	a93e      	add	r1, sp, #248	; 0xf8
    8246:	4608      	mov	r0, r1
    8248:	f7ff fedc 	bl	8004 <sqrt_fp2>
    824c:	2800      	cmp	r0, #0
    824e:	d059      	beq.n	8304 <POINTonE2_Uncompress_BE+0x1e4>
    8250:	ab25      	add	r3, sp, #148	; 0x94
    8252:	1f22      	subs	r2, r4, #4
    8254:	f108 08bc 	add.w	r8, r8, #188	; 0xbc
    8258:	f853 1f04 	ldr.w	r1, [r3, #4]!
    825c:	f842 1f04 	str.w	r1, [r2, #4]!
    8260:	4543      	cmp	r3, r8
    8262:	d1f9      	bne.n	8258 <POINTonE2_Uncompress_BE+0x138>
    8264:	4d2a      	ldr	r5, [pc, #168]	; (8310 <POINTonE2_Uncompress_BE+0x1f0>)
    8266:	4e29      	ldr	r6, [pc, #164]	; (830c <POINTonE2_Uncompress_BE+0x1ec>)
    8268:	270c      	movs	r7, #12
    826a:	9700      	str	r7, [sp, #0]
    826c:	462b      	mov	r3, r5
    826e:	4632      	mov	r2, r6
    8270:	f104 0160 	add.w	r1, r4, #96	; 0x60
    8274:	a802      	add	r0, sp, #8
    8276:	f7f8 fe8b 	bl	f90 <from_mont_n>
    827a:	9700      	str	r7, [sp, #0]
    827c:	462b      	mov	r3, r5
    827e:	4632      	mov	r2, r6
    8280:	f104 0190 	add.w	r1, r4, #144	; 0x90
    8284:	a80e      	add	r0, sp, #56	; 0x38
    8286:	f7f8 fe83 	bl	f90 <from_mont_n>
    828a:	463a      	mov	r2, r7
    828c:	4631      	mov	r1, r6
    828e:	a802      	add	r0, sp, #8
    8290:	f7f8 ff93 	bl	11ba <sgn0_pty_mod_n>
    8294:	4605      	mov	r5, r0
    8296:	463a      	mov	r2, r7
    8298:	4631      	mov	r1, r6
    829a:	a80e      	add	r0, sp, #56	; 0x38
    829c:	f7f8 ff8d 	bl	11ba <sgn0_pty_mod_n>
    82a0:	aa0d      	add	r2, sp, #52	; 0x34
    82a2:	ab02      	add	r3, sp, #8
    82a4:	ae19      	add	r6, sp, #100	; 0x64
    82a6:	2100      	movs	r1, #0
    82a8:	f852 4f04 	ldr.w	r4, [r2, #4]!
    82ac:	4321      	orrs	r1, r4
    82ae:	42b2      	cmp	r2, r6
    82b0:	d1fa      	bne.n	82a8 <POINTonE2_Uncompress_BE+0x188>
    82b2:	1e4c      	subs	r4, r1, #1
    82b4:	ea24 0101 	bic.w	r1, r4, r1
    82b8:	0fcc      	lsrs	r4, r1, #31
    82ba:	ea05 71e1 	and.w	r1, r5, r1, asr #31
    82be:	3c01      	subs	r4, #1
    82c0:	4004      	ands	r4, r0
    82c2:	430c      	orrs	r4, r1
    82c4:	f103 0630 	add.w	r6, r3, #48	; 0x30
    82c8:	2200      	movs	r2, #0
    82ca:	f853 1b04 	ldr.w	r1, [r3], #4
    82ce:	430a      	orrs	r2, r1
    82d0:	42b3      	cmp	r3, r6
    82d2:	d1fa      	bne.n	82ca <POINTonE2_Uncompress_BE+0x1aa>
    82d4:	1e53      	subs	r3, r2, #1
    82d6:	ea23 0202 	bic.w	r2, r3, r2
    82da:	0fd3      	lsrs	r3, r2, #31
    82dc:	ea00 72e2 	and.w	r2, r0, r2, asr #31
    82e0:	3b01      	subs	r3, #1
    82e2:	ea03 0005 	and.w	r0, r3, r5
    82e6:	4310      	orrs	r0, r2
    82e8:	f000 0001 	and.w	r0, r0, #1
    82ec:	f004 0402 	and.w	r4, r4, #2
    82f0:	4320      	orrs	r0, r4
    82f2:	e001      	b.n	82f8 <POINTonE2_Uncompress_BE+0x1d8>
    82f4:	f04f 30ff 	mov.w	r0, #4294967295
    82f8:	b057      	add	sp, #348	; 0x15c
    82fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    82fe:	f04f 30ff 	mov.w	r0, #4294967295
    8302:	e7f9      	b.n	82f8 <POINTonE2_Uncompress_BE+0x1d8>
    8304:	f06f 0001 	mvn.w	r0, #1
    8308:	e7f6      	b.n	82f8 <POINTonE2_Uncompress_BE+0x1d8>
    830a:	bf00      	nop
    830c:	00015a08 	.word	0x00015a08
    8310:	fffcfffd 	.word	0xfffcfffd
    8314:	00016b00 	.word	0x00016b00

00008318 <POINTonE2_Uncompress>:
    8318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    831c:	b082      	sub	sp, #8
    831e:	780d      	ldrb	r5, [r1, #0]
    8320:	f991 3000 	ldrsb.w	r3, [r1]
    8324:	2b00      	cmp	r3, #0
    8326:	da3f      	bge.n	83a8 <POINTonE2_Uncompress+0x90>
    8328:	4604      	mov	r4, r0
    832a:	f015 0640 	ands.w	r6, r5, #64	; 0x40
    832e:	d01a      	beq.n	8366 <POINTonE2_Uncompress+0x4e>
    8330:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    8334:	3d01      	subs	r5, #1
    8336:	0fed      	lsrs	r5, r5, #31
    8338:	460b      	mov	r3, r1
    833a:	315f      	adds	r1, #95	; 0x5f
    833c:	2200      	movs	r2, #0
    833e:	f813 cf01 	ldrb.w	ip, [r3, #1]!
    8342:	ea42 020c 	orr.w	r2, r2, ip
    8346:	428b      	cmp	r3, r1
    8348:	d1f9      	bne.n	833e <POINTonE2_Uncompress+0x26>
    834a:	3a01      	subs	r2, #1
    834c:	ea15 73d2 	ands.w	r3, r5, r2, lsr #31
    8350:	d02f      	beq.n	83b2 <POINTonE2_Uncompress+0x9a>
    8352:	4623      	mov	r3, r4
    8354:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
    8358:	2200      	movs	r2, #0
    835a:	f843 2b04 	str.w	r2, [r3], #4
    835e:	428b      	cmp	r3, r1
    8360:	d1fb      	bne.n	835a <POINTonE2_Uncompress+0x42>
    8362:	2600      	movs	r6, #0
    8364:	e021      	b.n	83aa <POINTonE2_Uncompress+0x92>
    8366:	f7ff fedb 	bl	8120 <POINTonE2_Uncompress_BE>
    836a:	2803      	cmp	r0, #3
    836c:	d902      	bls.n	8374 <POINTonE2_Uncompress+0x5c>
    836e:	4240      	negs	r0, r0
    8370:	b2c6      	uxtb	r6, r0
    8372:	e01a      	b.n	83aa <POINTonE2_Uncompress+0x92>
    8374:	f3c5 1540 	ubfx	r5, r5, #5, #1
    8378:	ea85 0550 	eor.w	r5, r5, r0, lsr #1
    837c:	f104 0060 	add.w	r0, r4, #96	; 0x60
    8380:	4f0d      	ldr	r7, [pc, #52]	; (83b8 <POINTonE2_Uncompress+0xa0>)
    8382:	f04f 080c 	mov.w	r8, #12
    8386:	f8cd 8000 	str.w	r8, [sp]
    838a:	463b      	mov	r3, r7
    838c:	462a      	mov	r2, r5
    838e:	4601      	mov	r1, r0
    8390:	f7f9 fb08 	bl	19a4 <cneg_mod_n>
    8394:	f104 0090 	add.w	r0, r4, #144	; 0x90
    8398:	f8cd 8000 	str.w	r8, [sp]
    839c:	463b      	mov	r3, r7
    839e:	462a      	mov	r2, r5
    83a0:	4601      	mov	r1, r0
    83a2:	f7f9 faff 	bl	19a4 <cneg_mod_n>
    83a6:	e000      	b.n	83aa <POINTonE2_Uncompress+0x92>
    83a8:	2601      	movs	r6, #1
    83aa:	4630      	mov	r0, r6
    83ac:	b002      	add	sp, #8
    83ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    83b2:	2601      	movs	r6, #1
    83b4:	e7f9      	b.n	83aa <POINTonE2_Uncompress+0x92>
    83b6:	bf00      	nop
    83b8:	00015a08 	.word	0x00015a08

000083bc <blst_p2_uncompress>:
    83bc:	b508      	push	{r3, lr}
    83be:	f7ff ffab 	bl	8318 <POINTonE2_Uncompress>
    83c2:	bd08      	pop	{r3, pc}

000083c4 <blst_p2_deserialize>:
    83c4:	b508      	push	{r3, lr}
    83c6:	780b      	ldrb	r3, [r1, #0]
    83c8:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    83cc:	d01a      	beq.n	8404 <blst_p2_deserialize+0x40>
    83ce:	f013 0f80 	tst.w	r3, #128	; 0x80
    83d2:	d11a      	bne.n	840a <blst_p2_deserialize+0x46>
    83d4:	f013 0f40 	tst.w	r3, #64	; 0x40
    83d8:	d024      	beq.n	8424 <blst_p2_deserialize+0x60>
    83da:	f003 0c3f 	and.w	ip, r3, #63	; 0x3f
    83de:	f10c 3cff 	add.w	ip, ip, #4294967295
    83e2:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
    83e6:	460b      	mov	r3, r1
    83e8:	31bf      	adds	r1, #191	; 0xbf
    83ea:	2200      	movs	r2, #0
    83ec:	f813 ef01 	ldrb.w	lr, [r3, #1]!
    83f0:	ea42 020e 	orr.w	r2, r2, lr
    83f4:	428b      	cmp	r3, r1
    83f6:	d1f9      	bne.n	83ec <blst_p2_deserialize+0x28>
    83f8:	3a01      	subs	r2, #1
    83fa:	ea1c 73d2 	ands.w	r3, ip, r2, lsr #31
    83fe:	d107      	bne.n	8410 <blst_p2_deserialize+0x4c>
    8400:	2001      	movs	r0, #1
    8402:	e010      	b.n	8426 <blst_p2_deserialize+0x62>
    8404:	f7ff fb8a 	bl	7b1c <POINTonE2_Deserialize_BE>
    8408:	e00d      	b.n	8426 <blst_p2_deserialize+0x62>
    840a:	f7ff ff85 	bl	8318 <POINTonE2_Uncompress>
    840e:	e00a      	b.n	8426 <blst_p2_deserialize+0x62>
    8410:	4603      	mov	r3, r0
    8412:	f100 01c0 	add.w	r1, r0, #192	; 0xc0
    8416:	2200      	movs	r2, #0
    8418:	f843 2b04 	str.w	r2, [r3], #4
    841c:	428b      	cmp	r3, r1
    841e:	d1fb      	bne.n	8418 <blst_p2_deserialize+0x54>
    8420:	2000      	movs	r0, #0
    8422:	e000      	b.n	8426 <blst_p2_deserialize+0x62>
    8424:	2001      	movs	r0, #1
    8426:	bd08      	pop	{r3, pc}

00008428 <POINTonE2_is_equal>:
    8428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    842c:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
    8430:	4607      	mov	r7, r0
    8432:	460e      	mov	r6, r1
    8434:	f100 08c0 	add.w	r8, r0, #192	; 0xc0
    8438:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
    843c:	f500 708e 	add.w	r0, r0, #284	; 0x11c
    8440:	2200      	movs	r2, #0
    8442:	f853 1f04 	ldr.w	r1, [r3, #4]!
    8446:	430a      	orrs	r2, r1
    8448:	4283      	cmp	r3, r0
    844a:	d1fa      	bne.n	8442 <POINTonE2_is_equal+0x1a>
    844c:	1e55      	subs	r5, r2, #1
    844e:	ea25 0502 	bic.w	r5, r5, r2
    8452:	0fed      	lsrs	r5, r5, #31
    8454:	f106 09c0 	add.w	r9, r6, #192	; 0xc0
    8458:	f106 03bc 	add.w	r3, r6, #188	; 0xbc
    845c:	f506 708e 	add.w	r0, r6, #284	; 0x11c
    8460:	2200      	movs	r2, #0
    8462:	f853 1f04 	ldr.w	r1, [r3, #4]!
    8466:	430a      	orrs	r2, r1
    8468:	4283      	cmp	r3, r0
    846a:	d1fa      	bne.n	8462 <POINTonE2_is_equal+0x3a>
    846c:	1e54      	subs	r4, r2, #1
    846e:	ea24 0202 	bic.w	r2, r4, r2
    8472:	0fd4      	lsrs	r4, r2, #31
    8474:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8528 <POINTonE2_is_equal+0x100>
    8478:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 852c <POINTonE2_is_equal+0x104>
    847c:	465b      	mov	r3, fp
    847e:	4652      	mov	r2, sl
    8480:	4641      	mov	r1, r8
    8482:	a87a      	add	r0, sp, #488	; 0x1e8
    8484:	f7ff f9a2 	bl	77cc <sqr_mont_384x>
    8488:	465b      	mov	r3, fp
    848a:	4652      	mov	r2, sl
    848c:	4649      	mov	r1, r9
    848e:	a862      	add	r0, sp, #392	; 0x188
    8490:	f7ff f99c 	bl	77cc <sqr_mont_384x>
    8494:	f8cd b000 	str.w	fp, [sp]
    8498:	4653      	mov	r3, sl
    849a:	aa62      	add	r2, sp, #392	; 0x188
    849c:	4639      	mov	r1, r7
    849e:	a832      	add	r0, sp, #200	; 0xc8
    84a0:	f7fb ff06 	bl	42b0 <mul_mont_384x>
    84a4:	f8cd b000 	str.w	fp, [sp]
    84a8:	4653      	mov	r3, sl
    84aa:	aa7a      	add	r2, sp, #488	; 0x1e8
    84ac:	4631      	mov	r1, r6
    84ae:	a802      	add	r0, sp, #8
    84b0:	f7fb fefe 	bl	42b0 <mul_mont_384x>
    84b4:	f8cd b000 	str.w	fp, [sp]
    84b8:	4653      	mov	r3, sl
    84ba:	464a      	mov	r2, r9
    84bc:	f107 0160 	add.w	r1, r7, #96	; 0x60
    84c0:	a84a      	add	r0, sp, #296	; 0x128
    84c2:	f7fb fef5 	bl	42b0 <mul_mont_384x>
    84c6:	f8cd b000 	str.w	fp, [sp]
    84ca:	4653      	mov	r3, sl
    84cc:	4642      	mov	r2, r8
    84ce:	f106 0160 	add.w	r1, r6, #96	; 0x60
    84d2:	a81a      	add	r0, sp, #104	; 0x68
    84d4:	f7fb feec 	bl	42b0 <mul_mont_384x>
    84d8:	f8cd b000 	str.w	fp, [sp]
    84dc:	4653      	mov	r3, sl
    84de:	aa62      	add	r2, sp, #392	; 0x188
    84e0:	a94a      	add	r1, sp, #296	; 0x128
    84e2:	4608      	mov	r0, r1
    84e4:	f7fb fee4 	bl	42b0 <mul_mont_384x>
    84e8:	f8cd b000 	str.w	fp, [sp]
    84ec:	4653      	mov	r3, sl
    84ee:	aa7a      	add	r2, sp, #488	; 0x1e8
    84f0:	a91a      	add	r1, sp, #104	; 0x68
    84f2:	4608      	mov	r0, r1
    84f4:	f7fb fedc 	bl	42b0 <mul_mont_384x>
    84f8:	aa31      	add	r2, sp, #196	; 0xc4
    84fa:	a901      	add	r1, sp, #4
    84fc:	af61      	add	r7, sp, #388	; 0x184
    84fe:	2000      	movs	r0, #0
    8500:	f852 3f04 	ldr.w	r3, [r2, #4]!
    8504:	f851 6f04 	ldr.w	r6, [r1, #4]!
    8508:	4073      	eors	r3, r6
    850a:	4318      	orrs	r0, r3
    850c:	42ba      	cmp	r2, r7
    850e:	d1f7      	bne.n	8500 <POINTonE2_is_equal+0xd8>
    8510:	1e43      	subs	r3, r0, #1
    8512:	ea23 0000 	bic.w	r0, r3, r0
    8516:	406c      	eors	r4, r5
    8518:	f084 0401 	eor.w	r4, r4, #1
    851c:	ea04 70d0 	and.w	r0, r4, r0, lsr #31
    8520:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
    8524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8528:	fffcfffd 	.word	0xfffcfffd
    852c:	00015a08 	.word	0x00015a08

00008530 <blst_p2_is_equal>:
    8530:	b508      	push	{r3, lr}
    8532:	f7ff ff79 	bl	8428 <POINTonE2_is_equal>
    8536:	bd08      	pop	{r3, pc}

00008538 <POINTonE2_add>:
    8538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    853c:	f5ad 7d75 	sub.w	sp, sp, #980	; 0x3d4
    8540:	9003      	str	r0, [sp, #12]
    8542:	460e      	mov	r6, r1
    8544:	4615      	mov	r5, r2
    8546:	f101 0ac0 	add.w	sl, r1, #192	; 0xc0
    854a:	f101 03bc 	add.w	r3, r1, #188	; 0xbc
    854e:	f501 708e 	add.w	r0, r1, #284	; 0x11c
    8552:	2200      	movs	r2, #0
    8554:	f853 1f04 	ldr.w	r1, [r3, #4]!
    8558:	430a      	orrs	r2, r1
    855a:	4283      	cmp	r3, r0
    855c:	d1fa      	bne.n	8554 <POINTonE2_add+0x1c>
    855e:	1e53      	subs	r3, r2, #1
    8560:	ea23 0202 	bic.w	r2, r3, r2
    8564:	0fd3      	lsrs	r3, r2, #31
    8566:	9302      	str	r3, [sp, #8]
    8568:	4fb5      	ldr	r7, [pc, #724]	; (8840 <POINTonE2_add+0x308>)
    856a:	4cb6      	ldr	r4, [pc, #728]	; (8844 <POINTonE2_add+0x30c>)
    856c:	463b      	mov	r3, r7
    856e:	4622      	mov	r2, r4
    8570:	4651      	mov	r1, sl
    8572:	a894      	add	r0, sp, #592	; 0x250
    8574:	f7ff f92a 	bl	77cc <sqr_mont_384x>
    8578:	9700      	str	r7, [sp, #0]
    857a:	4623      	mov	r3, r4
    857c:	4652      	mov	r2, sl
    857e:	a994      	add	r1, sp, #592	; 0x250
    8580:	a8dc      	add	r0, sp, #880	; 0x370
    8582:	f7fb fe95 	bl	42b0 <mul_mont_384x>
    8586:	9700      	str	r7, [sp, #0]
    8588:	4623      	mov	r3, r4
    858a:	f105 0260 	add.w	r2, r5, #96	; 0x60
    858e:	a9dc      	add	r1, sp, #880	; 0x370
    8590:	4608      	mov	r0, r1
    8592:	f7fb fe8d 	bl	42b0 <mul_mont_384x>
    8596:	f105 0bc0 	add.w	fp, r5, #192	; 0xc0
    859a:	f105 03bc 	add.w	r3, r5, #188	; 0xbc
    859e:	f505 718e 	add.w	r1, r5, #284	; 0x11c
    85a2:	f04f 0800 	mov.w	r8, #0
    85a6:	f853 2f04 	ldr.w	r2, [r3, #4]!
    85aa:	ea48 0802 	orr.w	r8, r8, r2
    85ae:	4299      	cmp	r1, r3
    85b0:	d1f9      	bne.n	85a6 <POINTonE2_add+0x6e>
    85b2:	f8df 928c 	ldr.w	r9, [pc, #652]	; 8840 <POINTonE2_add+0x308>
    85b6:	4ca3      	ldr	r4, [pc, #652]	; (8844 <POINTonE2_add+0x30c>)
    85b8:	464b      	mov	r3, r9
    85ba:	4622      	mov	r2, r4
    85bc:	4659      	mov	r1, fp
    85be:	a87c      	add	r0, sp, #496	; 0x1f0
    85c0:	f7ff f904 	bl	77cc <sqr_mont_384x>
    85c4:	f8cd 9000 	str.w	r9, [sp]
    85c8:	4623      	mov	r3, r4
    85ca:	465a      	mov	r2, fp
    85cc:	a97c      	add	r1, sp, #496	; 0x1f0
    85ce:	a84c      	add	r0, sp, #304	; 0x130
    85d0:	f7fb fe6e 	bl	42b0 <mul_mont_384x>
    85d4:	f8cd 9000 	str.w	r9, [sp]
    85d8:	4623      	mov	r3, r4
    85da:	f106 0260 	add.w	r2, r6, #96	; 0x60
    85de:	a94c      	add	r1, sp, #304	; 0x130
    85e0:	4608      	mov	r0, r1
    85e2:	f7fb fe65 	bl	42b0 <mul_mont_384x>
    85e6:	270c      	movs	r7, #12
    85e8:	9700      	str	r7, [sp, #0]
    85ea:	4623      	mov	r3, r4
    85ec:	aa4c      	add	r2, sp, #304	; 0x130
    85ee:	a9dc      	add	r1, sp, #880	; 0x370
    85f0:	4608      	mov	r0, r1
    85f2:	f7f7 ffed 	bl	5d0 <sub_mod_n>
    85f6:	9700      	str	r7, [sp, #0]
    85f8:	4623      	mov	r3, r4
    85fa:	aa58      	add	r2, sp, #352	; 0x160
    85fc:	a9e8      	add	r1, sp, #928	; 0x3a0
    85fe:	4608      	mov	r0, r1
    8600:	f7f7 ffe6 	bl	5d0 <sub_mod_n>
    8604:	9700      	str	r7, [sp, #0]
    8606:	4623      	mov	r3, r4
    8608:	aadc      	add	r2, sp, #880	; 0x370
    860a:	4611      	mov	r1, r2
    860c:	4610      	mov	r0, r2
    860e:	f7f8 fb35 	bl	c7c <add_mod_n>
    8612:	9700      	str	r7, [sp, #0]
    8614:	4623      	mov	r3, r4
    8616:	aae8      	add	r2, sp, #928	; 0x3a0
    8618:	4611      	mov	r1, r2
    861a:	4610      	mov	r0, r2
    861c:	f7f8 fb2e 	bl	c7c <add_mod_n>
    8620:	f8cd 9000 	str.w	r9, [sp]
    8624:	4623      	mov	r3, r4
    8626:	aa7c      	add	r2, sp, #496	; 0x1f0
    8628:	4631      	mov	r1, r6
    862a:	a864      	add	r0, sp, #400	; 0x190
    862c:	f7fb fe40 	bl	42b0 <mul_mont_384x>
    8630:	f8cd 9000 	str.w	r9, [sp]
    8634:	4623      	mov	r3, r4
    8636:	aa94      	add	r2, sp, #592	; 0x250
    8638:	4629      	mov	r1, r5
    863a:	a834      	add	r0, sp, #208	; 0xd0
    863c:	f7fb fe38 	bl	42b0 <mul_mont_384x>
    8640:	9700      	str	r7, [sp, #0]
    8642:	4623      	mov	r3, r4
    8644:	aa64      	add	r2, sp, #400	; 0x190
    8646:	a934      	add	r1, sp, #208	; 0xd0
    8648:	4608      	mov	r0, r1
    864a:	f7f7 ffc1 	bl	5d0 <sub_mod_n>
    864e:	9700      	str	r7, [sp, #0]
    8650:	4623      	mov	r3, r4
    8652:	aa70      	add	r2, sp, #448	; 0x1c0
    8654:	a940      	add	r1, sp, #256	; 0x100
    8656:	4608      	mov	r0, r1
    8658:	f7f7 ffba 	bl	5d0 <sub_mod_n>
    865c:	9700      	str	r7, [sp, #0]
    865e:	4623      	mov	r3, r4
    8660:	aa34      	add	r2, sp, #208	; 0xd0
    8662:	4611      	mov	r1, r2
    8664:	a81c      	add	r0, sp, #112	; 0x70
    8666:	f7f8 fb09 	bl	c7c <add_mod_n>
    866a:	9700      	str	r7, [sp, #0]
    866c:	4623      	mov	r3, r4
    866e:	aa40      	add	r2, sp, #256	; 0x100
    8670:	4611      	mov	r1, r2
    8672:	a828      	add	r0, sp, #160	; 0xa0
    8674:	f7f8 fb02 	bl	c7c <add_mod_n>
    8678:	464b      	mov	r3, r9
    867a:	4622      	mov	r2, r4
    867c:	a91c      	add	r1, sp, #112	; 0x70
    867e:	4608      	mov	r0, r1
    8680:	f7ff f8a4 	bl	77cc <sqr_mont_384x>
    8684:	f8cd 9000 	str.w	r9, [sp]
    8688:	4623      	mov	r3, r4
    868a:	aa1c      	add	r2, sp, #112	; 0x70
    868c:	a934      	add	r1, sp, #208	; 0xd0
    868e:	a804      	add	r0, sp, #16
    8690:	f7fb fe0e 	bl	42b0 <mul_mont_384x>
    8694:	f8cd 9000 	str.w	r9, [sp]
    8698:	4623      	mov	r3, r4
    869a:	aa04      	add	r2, sp, #16
    869c:	a94c      	add	r1, sp, #304	; 0x130
    869e:	4608      	mov	r0, r1
    86a0:	f7fb fe06 	bl	42b0 <mul_mont_384x>
    86a4:	f8cd 9000 	str.w	r9, [sp]
    86a8:	4623      	mov	r3, r4
    86aa:	aa1c      	add	r2, sp, #112	; 0x70
    86ac:	a964      	add	r1, sp, #400	; 0x190
    86ae:	a8c4      	add	r0, sp, #784	; 0x310
    86b0:	f7fb fdfe 	bl	42b0 <mul_mont_384x>
    86b4:	464b      	mov	r3, r9
    86b6:	4622      	mov	r2, r4
    86b8:	a9dc      	add	r1, sp, #880	; 0x370
    86ba:	a8ac      	add	r0, sp, #688	; 0x2b0
    86bc:	f7ff f886 	bl	77cc <sqr_mont_384x>
    86c0:	9700      	str	r7, [sp, #0]
    86c2:	4623      	mov	r3, r4
    86c4:	aa04      	add	r2, sp, #16
    86c6:	a9ac      	add	r1, sp, #688	; 0x2b0
    86c8:	4608      	mov	r0, r1
    86ca:	f7f7 ff81 	bl	5d0 <sub_mod_n>
    86ce:	9700      	str	r7, [sp, #0]
    86d0:	4623      	mov	r3, r4
    86d2:	aa10      	add	r2, sp, #64	; 0x40
    86d4:	a9b8      	add	r1, sp, #736	; 0x2e0
    86d6:	4608      	mov	r0, r1
    86d8:	f7f7 ff7a 	bl	5d0 <sub_mod_n>
    86dc:	9700      	str	r7, [sp, #0]
    86de:	4623      	mov	r3, r4
    86e0:	aac4      	add	r2, sp, #784	; 0x310
    86e2:	a9ac      	add	r1, sp, #688	; 0x2b0
    86e4:	4608      	mov	r0, r1
    86e6:	f7f7 ff73 	bl	5d0 <sub_mod_n>
    86ea:	9700      	str	r7, [sp, #0]
    86ec:	4623      	mov	r3, r4
    86ee:	aad0      	add	r2, sp, #832	; 0x340
    86f0:	a9b8      	add	r1, sp, #736	; 0x2e0
    86f2:	4608      	mov	r0, r1
    86f4:	f7f7 ff6c 	bl	5d0 <sub_mod_n>
    86f8:	9700      	str	r7, [sp, #0]
    86fa:	4623      	mov	r3, r4
    86fc:	aac4      	add	r2, sp, #784	; 0x310
    86fe:	a9ac      	add	r1, sp, #688	; 0x2b0
    8700:	4608      	mov	r0, r1
    8702:	f7f7 ff65 	bl	5d0 <sub_mod_n>
    8706:	9700      	str	r7, [sp, #0]
    8708:	4623      	mov	r3, r4
    870a:	aad0      	add	r2, sp, #832	; 0x340
    870c:	a9b8      	add	r1, sp, #736	; 0x2e0
    870e:	4608      	mov	r0, r1
    8710:	f7f7 ff5e 	bl	5d0 <sub_mod_n>
    8714:	9700      	str	r7, [sp, #0]
    8716:	4623      	mov	r3, r4
    8718:	aaac      	add	r2, sp, #688	; 0x2b0
    871a:	a9c4      	add	r1, sp, #784	; 0x310
    871c:	4608      	mov	r0, r1
    871e:	f7f7 ff57 	bl	5d0 <sub_mod_n>
    8722:	9700      	str	r7, [sp, #0]
    8724:	4623      	mov	r3, r4
    8726:	aab8      	add	r2, sp, #736	; 0x2e0
    8728:	a9d0      	add	r1, sp, #832	; 0x340
    872a:	4608      	mov	r0, r1
    872c:	f7f7 ff50 	bl	5d0 <sub_mod_n>
    8730:	f8cd 9000 	str.w	r9, [sp]
    8734:	4623      	mov	r3, r4
    8736:	aadc      	add	r2, sp, #880	; 0x370
    8738:	a9c4      	add	r1, sp, #784	; 0x310
    873a:	4608      	mov	r0, r1
    873c:	f7fb fdb8 	bl	42b0 <mul_mont_384x>
    8740:	9700      	str	r7, [sp, #0]
    8742:	4623      	mov	r3, r4
    8744:	aa4c      	add	r2, sp, #304	; 0x130
    8746:	a9c4      	add	r1, sp, #784	; 0x310
    8748:	4608      	mov	r0, r1
    874a:	f7f7 ff41 	bl	5d0 <sub_mod_n>
    874e:	9700      	str	r7, [sp, #0]
    8750:	4623      	mov	r3, r4
    8752:	aa58      	add	r2, sp, #352	; 0x160
    8754:	a9d0      	add	r1, sp, #832	; 0x340
    8756:	4608      	mov	r0, r1
    8758:	f7f7 ff3a 	bl	5d0 <sub_mod_n>
    875c:	9700      	str	r7, [sp, #0]
    875e:	4623      	mov	r3, r4
    8760:	aa4c      	add	r2, sp, #304	; 0x130
    8762:	a9c4      	add	r1, sp, #784	; 0x310
    8764:	4608      	mov	r0, r1
    8766:	f7f7 ff33 	bl	5d0 <sub_mod_n>
    876a:	9700      	str	r7, [sp, #0]
    876c:	4623      	mov	r3, r4
    876e:	aa58      	add	r2, sp, #352	; 0x160
    8770:	a9d0      	add	r1, sp, #832	; 0x340
    8772:	4608      	mov	r0, r1
    8774:	f7f7 ff2c 	bl	5d0 <sub_mod_n>
    8778:	9700      	str	r7, [sp, #0]
    877a:	4623      	mov	r3, r4
    877c:	465a      	mov	r2, fp
    877e:	4651      	mov	r1, sl
    8780:	a8dc      	add	r0, sp, #880	; 0x370
    8782:	f7f8 fa7b 	bl	c7c <add_mod_n>
    8786:	9700      	str	r7, [sp, #0]
    8788:	4623      	mov	r3, r4
    878a:	f105 02f0 	add.w	r2, r5, #240	; 0xf0
    878e:	f106 01f0 	add.w	r1, r6, #240	; 0xf0
    8792:	a8e8      	add	r0, sp, #928	; 0x3a0
    8794:	f7f8 fa72 	bl	c7c <add_mod_n>
    8798:	464b      	mov	r3, r9
    879a:	4622      	mov	r2, r4
    879c:	a9dc      	add	r1, sp, #880	; 0x370
    879e:	4608      	mov	r0, r1
    87a0:	f7ff f814 	bl	77cc <sqr_mont_384x>
    87a4:	9700      	str	r7, [sp, #0]
    87a6:	4623      	mov	r3, r4
    87a8:	aa94      	add	r2, sp, #592	; 0x250
    87aa:	a9dc      	add	r1, sp, #880	; 0x370
    87ac:	4608      	mov	r0, r1
    87ae:	f7f7 ff0f 	bl	5d0 <sub_mod_n>
    87b2:	9700      	str	r7, [sp, #0]
    87b4:	4623      	mov	r3, r4
    87b6:	aaa0      	add	r2, sp, #640	; 0x280
    87b8:	a9e8      	add	r1, sp, #928	; 0x3a0
    87ba:	4608      	mov	r0, r1
    87bc:	f7f7 ff08 	bl	5d0 <sub_mod_n>
    87c0:	9700      	str	r7, [sp, #0]
    87c2:	4623      	mov	r3, r4
    87c4:	aa7c      	add	r2, sp, #496	; 0x1f0
    87c6:	a9dc      	add	r1, sp, #880	; 0x370
    87c8:	4608      	mov	r0, r1
    87ca:	f7f7 ff01 	bl	5d0 <sub_mod_n>
    87ce:	9700      	str	r7, [sp, #0]
    87d0:	4623      	mov	r3, r4
    87d2:	aa88      	add	r2, sp, #544	; 0x220
    87d4:	a9e8      	add	r1, sp, #928	; 0x3a0
    87d6:	4608      	mov	r0, r1
    87d8:	f7f7 fefa 	bl	5d0 <sub_mod_n>
    87dc:	f8cd 9000 	str.w	r9, [sp]
    87e0:	4623      	mov	r3, r4
    87e2:	aa34      	add	r2, sp, #208	; 0xd0
    87e4:	a9dc      	add	r1, sp, #880	; 0x370
    87e6:	4608      	mov	r0, r1
    87e8:	f7fb fd62 	bl	42b0 <mul_mont_384x>
    87ec:	f108 33ff 	add.w	r3, r8, #4294967295
    87f0:	ea23 0808 	bic.w	r8, r3, r8
    87f4:	ea4f 78e8 	mov.w	r8, r8, asr #31
    87f8:	3e04      	subs	r6, #4
    87fa:	acac      	add	r4, sp, #688	; 0x2b0
    87fc:	aff4      	add	r7, sp, #976	; 0x3d0
    87fe:	4622      	mov	r2, r4
    8800:	6811      	ldr	r1, [r2, #0]
    8802:	f856 3f04 	ldr.w	r3, [r6, #4]!
    8806:	404b      	eors	r3, r1
    8808:	ea03 0308 	and.w	r3, r3, r8
    880c:	404b      	eors	r3, r1
    880e:	f842 3b04 	str.w	r3, [r2], #4
    8812:	4297      	cmp	r7, r2
    8814:	d1f4      	bne.n	8800 <POINTonE2_add+0x2c8>
    8816:	9b02      	ldr	r3, [sp, #8]
    8818:	4259      	negs	r1, r3
    881a:	3d04      	subs	r5, #4
    881c:	9b03      	ldr	r3, [sp, #12]
    881e:	1f18      	subs	r0, r3, #4
    8820:	f854 2b04 	ldr.w	r2, [r4], #4
    8824:	f855 3f04 	ldr.w	r3, [r5, #4]!
    8828:	4053      	eors	r3, r2
    882a:	400b      	ands	r3, r1
    882c:	4053      	eors	r3, r2
    882e:	f840 3f04 	str.w	r3, [r0, #4]!
    8832:	42a7      	cmp	r7, r4
    8834:	d1f4      	bne.n	8820 <POINTonE2_add+0x2e8>
    8836:	f50d 7d75 	add.w	sp, sp, #980	; 0x3d4
    883a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    883e:	bf00      	nop
    8840:	fffcfffd 	.word	0xfffcfffd
    8844:	00015a08 	.word	0x00015a08

00008848 <POINTonE2_double>:
    8848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    884c:	b0cb      	sub	sp, #300	; 0x12c
    884e:	4606      	mov	r6, r0
    8850:	460f      	mov	r7, r1
    8852:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8a04 <POINTonE2_double+0x1bc>
    8856:	4c6c      	ldr	r4, [pc, #432]	; (8a08 <POINTonE2_double+0x1c0>)
    8858:	4643      	mov	r3, r8
    885a:	4622      	mov	r2, r4
    885c:	a832      	add	r0, sp, #200	; 0xc8
    885e:	f7fe ffb5 	bl	77cc <sqr_mont_384x>
    8862:	f107 0b60 	add.w	fp, r7, #96	; 0x60
    8866:	4643      	mov	r3, r8
    8868:	4622      	mov	r2, r4
    886a:	4659      	mov	r1, fp
    886c:	a81a      	add	r0, sp, #104	; 0x68
    886e:	f7fe ffad 	bl	77cc <sqr_mont_384x>
    8872:	4643      	mov	r3, r8
    8874:	4622      	mov	r2, r4
    8876:	a91a      	add	r1, sp, #104	; 0x68
    8878:	a802      	add	r0, sp, #8
    887a:	f7fe ffa7 	bl	77cc <sqr_mont_384x>
    887e:	250c      	movs	r5, #12
    8880:	9500      	str	r5, [sp, #0]
    8882:	4623      	mov	r3, r4
    8884:	463a      	mov	r2, r7
    8886:	a91a      	add	r1, sp, #104	; 0x68
    8888:	4608      	mov	r0, r1
    888a:	f7f8 f9f7 	bl	c7c <add_mod_n>
    888e:	9500      	str	r5, [sp, #0]
    8890:	4623      	mov	r3, r4
    8892:	f107 0230 	add.w	r2, r7, #48	; 0x30
    8896:	a926      	add	r1, sp, #152	; 0x98
    8898:	4608      	mov	r0, r1
    889a:	f7f8 f9ef 	bl	c7c <add_mod_n>
    889e:	4643      	mov	r3, r8
    88a0:	4622      	mov	r2, r4
    88a2:	a91a      	add	r1, sp, #104	; 0x68
    88a4:	4608      	mov	r0, r1
    88a6:	f7fe ff91 	bl	77cc <sqr_mont_384x>
    88aa:	9500      	str	r5, [sp, #0]
    88ac:	4623      	mov	r3, r4
    88ae:	aa32      	add	r2, sp, #200	; 0xc8
    88b0:	a91a      	add	r1, sp, #104	; 0x68
    88b2:	4608      	mov	r0, r1
    88b4:	f7f7 fe8c 	bl	5d0 <sub_mod_n>
    88b8:	9500      	str	r5, [sp, #0]
    88ba:	4623      	mov	r3, r4
    88bc:	aa3e      	add	r2, sp, #248	; 0xf8
    88be:	a926      	add	r1, sp, #152	; 0x98
    88c0:	4608      	mov	r0, r1
    88c2:	f7f7 fe85 	bl	5d0 <sub_mod_n>
    88c6:	9500      	str	r5, [sp, #0]
    88c8:	4623      	mov	r3, r4
    88ca:	aa02      	add	r2, sp, #8
    88cc:	a91a      	add	r1, sp, #104	; 0x68
    88ce:	4608      	mov	r0, r1
    88d0:	f7f7 fe7e 	bl	5d0 <sub_mod_n>
    88d4:	9500      	str	r5, [sp, #0]
    88d6:	4623      	mov	r3, r4
    88d8:	aa0e      	add	r2, sp, #56	; 0x38
    88da:	a926      	add	r1, sp, #152	; 0x98
    88dc:	4608      	mov	r0, r1
    88de:	f7f7 fe77 	bl	5d0 <sub_mod_n>
    88e2:	9500      	str	r5, [sp, #0]
    88e4:	4623      	mov	r3, r4
    88e6:	aa1a      	add	r2, sp, #104	; 0x68
    88e8:	4611      	mov	r1, r2
    88ea:	4610      	mov	r0, r2
    88ec:	f7f8 f9c6 	bl	c7c <add_mod_n>
    88f0:	9500      	str	r5, [sp, #0]
    88f2:	4623      	mov	r3, r4
    88f4:	aa26      	add	r2, sp, #152	; 0x98
    88f6:	4611      	mov	r1, r2
    88f8:	4610      	mov	r0, r2
    88fa:	f7f8 f9bf 	bl	c7c <add_mod_n>
    88fe:	462b      	mov	r3, r5
    8900:	4622      	mov	r2, r4
    8902:	a932      	add	r1, sp, #200	; 0xc8
    8904:	4608      	mov	r0, r1
    8906:	f7f8 fa41 	bl	d8c <mul_by_3_mod_n>
    890a:	462b      	mov	r3, r5
    890c:	4622      	mov	r2, r4
    890e:	a93e      	add	r1, sp, #248	; 0xf8
    8910:	4608      	mov	r0, r1
    8912:	f7f8 fa3b 	bl	d8c <mul_by_3_mod_n>
    8916:	4643      	mov	r3, r8
    8918:	4622      	mov	r2, r4
    891a:	a932      	add	r1, sp, #200	; 0xc8
    891c:	4630      	mov	r0, r6
    891e:	f7fe ff55 	bl	77cc <sqr_mont_384x>
    8922:	9500      	str	r5, [sp, #0]
    8924:	4623      	mov	r3, r4
    8926:	aa1a      	add	r2, sp, #104	; 0x68
    8928:	4631      	mov	r1, r6
    892a:	4630      	mov	r0, r6
    892c:	f7f7 fe50 	bl	5d0 <sub_mod_n>
    8930:	f106 0930 	add.w	r9, r6, #48	; 0x30
    8934:	9500      	str	r5, [sp, #0]
    8936:	4623      	mov	r3, r4
    8938:	aa26      	add	r2, sp, #152	; 0x98
    893a:	4649      	mov	r1, r9
    893c:	4648      	mov	r0, r9
    893e:	f7f7 fe47 	bl	5d0 <sub_mod_n>
    8942:	9500      	str	r5, [sp, #0]
    8944:	4623      	mov	r3, r4
    8946:	aa1a      	add	r2, sp, #104	; 0x68
    8948:	4631      	mov	r1, r6
    894a:	4630      	mov	r0, r6
    894c:	f7f7 fe40 	bl	5d0 <sub_mod_n>
    8950:	9500      	str	r5, [sp, #0]
    8952:	4623      	mov	r3, r4
    8954:	aa26      	add	r2, sp, #152	; 0x98
    8956:	4649      	mov	r1, r9
    8958:	4648      	mov	r0, r9
    895a:	f7f7 fe39 	bl	5d0 <sub_mod_n>
    895e:	f106 0ac0 	add.w	sl, r6, #192	; 0xc0
    8962:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
    8966:	9500      	str	r5, [sp, #0]
    8968:	4623      	mov	r3, r4
    896a:	460a      	mov	r2, r1
    896c:	4650      	mov	r0, sl
    896e:	f7f8 f985 	bl	c7c <add_mod_n>
    8972:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
    8976:	9500      	str	r5, [sp, #0]
    8978:	4623      	mov	r3, r4
    897a:	460a      	mov	r2, r1
    897c:	f106 00f0 	add.w	r0, r6, #240	; 0xf0
    8980:	f7f8 f97c 	bl	c7c <add_mod_n>
    8984:	f8cd 8000 	str.w	r8, [sp]
    8988:	4623      	mov	r3, r4
    898a:	465a      	mov	r2, fp
    898c:	4651      	mov	r1, sl
    898e:	4650      	mov	r0, sl
    8990:	f7fb fc8e 	bl	42b0 <mul_mont_384x>
    8994:	9500      	str	r5, [sp, #0]
    8996:	4623      	mov	r3, r4
    8998:	2203      	movs	r2, #3
    899a:	a902      	add	r1, sp, #8
    899c:	4608      	mov	r0, r1
    899e:	f7f8 fa95 	bl	ecc <lshift_mod_n>
    89a2:	9500      	str	r5, [sp, #0]
    89a4:	4623      	mov	r3, r4
    89a6:	2203      	movs	r2, #3
    89a8:	a90e      	add	r1, sp, #56	; 0x38
    89aa:	4608      	mov	r0, r1
    89ac:	f7f8 fa8e 	bl	ecc <lshift_mod_n>
    89b0:	f106 0760 	add.w	r7, r6, #96	; 0x60
    89b4:	9500      	str	r5, [sp, #0]
    89b6:	4623      	mov	r3, r4
    89b8:	4632      	mov	r2, r6
    89ba:	a91a      	add	r1, sp, #104	; 0x68
    89bc:	4638      	mov	r0, r7
    89be:	f7f7 fe07 	bl	5d0 <sub_mod_n>
    89c2:	3690      	adds	r6, #144	; 0x90
    89c4:	9500      	str	r5, [sp, #0]
    89c6:	4623      	mov	r3, r4
    89c8:	464a      	mov	r2, r9
    89ca:	a926      	add	r1, sp, #152	; 0x98
    89cc:	4630      	mov	r0, r6
    89ce:	f7f7 fdff 	bl	5d0 <sub_mod_n>
    89d2:	f8cd 8000 	str.w	r8, [sp]
    89d6:	4623      	mov	r3, r4
    89d8:	aa32      	add	r2, sp, #200	; 0xc8
    89da:	4639      	mov	r1, r7
    89dc:	4638      	mov	r0, r7
    89de:	f7fb fc67 	bl	42b0 <mul_mont_384x>
    89e2:	9500      	str	r5, [sp, #0]
    89e4:	4623      	mov	r3, r4
    89e6:	aa02      	add	r2, sp, #8
    89e8:	4639      	mov	r1, r7
    89ea:	4638      	mov	r0, r7
    89ec:	f7f7 fdf0 	bl	5d0 <sub_mod_n>
    89f0:	9500      	str	r5, [sp, #0]
    89f2:	4623      	mov	r3, r4
    89f4:	aa0e      	add	r2, sp, #56	; 0x38
    89f6:	4631      	mov	r1, r6
    89f8:	4630      	mov	r0, r6
    89fa:	f7f7 fde9 	bl	5d0 <sub_mod_n>
    89fe:	b04b      	add	sp, #300	; 0x12c
    8a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8a04:	fffcfffd 	.word	0xfffcfffd
    8a08:	00015a08 	.word	0x00015a08

00008a0c <POINTonE2_precompute_w4>:
    8a0c:	b570      	push	{r4, r5, r6, lr}
    8a0e:	4606      	mov	r6, r0
    8a10:	1f0b      	subs	r3, r1, #4
    8a12:	1f02      	subs	r2, r0, #4
    8a14:	f501 708e 	add.w	r0, r1, #284	; 0x11c
    8a18:	f853 4f04 	ldr.w	r4, [r3, #4]!
    8a1c:	f842 4f04 	str.w	r4, [r2, #4]!
    8a20:	4283      	cmp	r3, r0
    8a22:	d1f9      	bne.n	8a18 <POINTonE2_precompute_w4+0xc>
    8a24:	f506 7090 	add.w	r0, r6, #288	; 0x120
    8a28:	f7ff ff0e 	bl	8848 <POINTonE2_double>
    8a2c:	f506 7510 	add.w	r5, r6, #576	; 0x240
    8a30:	4634      	mov	r4, r6
    8a32:	f506 7658 	add.w	r6, r6, #864	; 0x360
    8a36:	4622      	mov	r2, r4
    8a38:	f504 7490 	add.w	r4, r4, #288	; 0x120
    8a3c:	4621      	mov	r1, r4
    8a3e:	4628      	mov	r0, r5
    8a40:	f7ff fd7a 	bl	8538 <POINTonE2_add>
    8a44:	4621      	mov	r1, r4
    8a46:	f505 7090 	add.w	r0, r5, #288	; 0x120
    8a4a:	f7ff fefd 	bl	8848 <POINTonE2_double>
    8a4e:	f505 7510 	add.w	r5, r5, #576	; 0x240
    8a52:	42b4      	cmp	r4, r6
    8a54:	d1ef      	bne.n	8a36 <POINTonE2_precompute_w4+0x2a>
    8a56:	bd70      	pop	{r4, r5, r6, pc}

00008a58 <POINTonE2_dadd>:
    8a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8a5c:	f5ad 7d5d 	sub.w	sp, sp, #884	; 0x374
    8a60:	9003      	str	r0, [sp, #12]
    8a62:	460c      	mov	r4, r1
    8a64:	4615      	mov	r5, r2
    8a66:	461e      	mov	r6, r3
    8a68:	4fc8      	ldr	r7, [pc, #800]	; (8d8c <POINTonE2_dadd+0x334>)
    8a6a:	f04f 090c 	mov.w	r9, #12
    8a6e:	f8cd 9000 	str.w	r9, [sp]
    8a72:	463b      	mov	r3, r7
    8a74:	460a      	mov	r2, r1
    8a76:	a834      	add	r0, sp, #208	; 0xd0
    8a78:	f7f8 f900 	bl	c7c <add_mod_n>
    8a7c:	f104 0130 	add.w	r1, r4, #48	; 0x30
    8a80:	f8cd 9000 	str.w	r9, [sp]
    8a84:	463b      	mov	r3, r7
    8a86:	460a      	mov	r2, r1
    8a88:	a840      	add	r0, sp, #256	; 0x100
    8a8a:	f7f8 f8f7 	bl	c7c <add_mod_n>
    8a8e:	4bc0      	ldr	r3, [pc, #768]	; (8d90 <POINTonE2_dadd+0x338>)
    8a90:	463a      	mov	r2, r7
    8a92:	4621      	mov	r1, r4
    8a94:	a81c      	add	r0, sp, #112	; 0x70
    8a96:	f7fe fe99 	bl	77cc <sqr_mont_384x>
    8a9a:	464b      	mov	r3, r9
    8a9c:	463a      	mov	r2, r7
    8a9e:	a91c      	add	r1, sp, #112	; 0x70
    8aa0:	4608      	mov	r0, r1
    8aa2:	f7f8 f973 	bl	d8c <mul_by_3_mod_n>
    8aa6:	464b      	mov	r3, r9
    8aa8:	463a      	mov	r2, r7
    8aaa:	a928      	add	r1, sp, #160	; 0xa0
    8aac:	4608      	mov	r0, r1
    8aae:	f7f8 f96d 	bl	d8c <mul_by_3_mod_n>
    8ab2:	f104 0860 	add.w	r8, r4, #96	; 0x60
    8ab6:	f8cd 9000 	str.w	r9, [sp]
    8aba:	463b      	mov	r3, r7
    8abc:	4642      	mov	r2, r8
    8abe:	4641      	mov	r1, r8
    8ac0:	a804      	add	r0, sp, #16
    8ac2:	f7f8 f8db 	bl	c7c <add_mod_n>
    8ac6:	f104 0190 	add.w	r1, r4, #144	; 0x90
    8aca:	f8cd 9000 	str.w	r9, [sp]
    8ace:	463b      	mov	r3, r7
    8ad0:	460a      	mov	r2, r1
    8ad2:	a810      	add	r0, sp, #64	; 0x40
    8ad4:	f7f8 f8d2 	bl	c7c <add_mod_n>
    8ad8:	f105 09c0 	add.w	r9, r5, #192	; 0xc0
    8adc:	f105 03bc 	add.w	r3, r5, #188	; 0xbc
    8ae0:	f505 708e 	add.w	r0, r5, #284	; 0x11c
    8ae4:	2200      	movs	r2, #0
    8ae6:	f853 1f04 	ldr.w	r1, [r3, #4]!
    8aea:	430a      	orrs	r2, r1
    8aec:	4283      	cmp	r3, r0
    8aee:	d1fa      	bne.n	8ae6 <POINTonE2_dadd+0x8e>
    8af0:	1e53      	subs	r3, r2, #1
    8af2:	ea23 0202 	bic.w	r2, r3, r2
    8af6:	0fd3      	lsrs	r3, r2, #31
    8af8:	9302      	str	r3, [sp, #8]
    8afa:	f8df b294 	ldr.w	fp, [pc, #660]	; 8d90 <POINTonE2_dadd+0x338>
    8afe:	f8df a28c 	ldr.w	sl, [pc, #652]	; 8d8c <POINTonE2_dadd+0x334>
    8b02:	465b      	mov	r3, fp
    8b04:	4652      	mov	r2, sl
    8b06:	4649      	mov	r1, r9
    8b08:	a894      	add	r0, sp, #592	; 0x250
    8b0a:	f7fe fe5f 	bl	77cc <sqr_mont_384x>
    8b0e:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
    8b12:	f8cd b000 	str.w	fp, [sp]
    8b16:	4653      	mov	r3, sl
    8b18:	464a      	mov	r2, r9
    8b1a:	4639      	mov	r1, r7
    8b1c:	a8c4      	add	r0, sp, #784	; 0x310
    8b1e:	f7fb fbc7 	bl	42b0 <mul_mont_384x>
    8b22:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
    8b26:	f504 708e 	add.w	r0, r4, #284	; 0x11c
    8b2a:	2200      	movs	r2, #0
    8b2c:	f853 1f04 	ldr.w	r1, [r3, #4]!
    8b30:	430a      	orrs	r2, r1
    8b32:	4283      	cmp	r3, r0
    8b34:	d1fa      	bne.n	8b2c <POINTonE2_dadd+0xd4>
    8b36:	1e53      	subs	r3, r2, #1
    8b38:	ea23 0202 	bic.w	r2, r3, r2
    8b3c:	ea4f 7bd2 	mov.w	fp, r2, lsr #31
    8b40:	4b93      	ldr	r3, [pc, #588]	; (8d90 <POINTonE2_dadd+0x338>)
    8b42:	4a92      	ldr	r2, [pc, #584]	; (8d8c <POINTonE2_dadd+0x334>)
    8b44:	4639      	mov	r1, r7
    8b46:	a84c      	add	r0, sp, #304	; 0x130
    8b48:	f7fe fe40 	bl	77cc <sqr_mont_384x>
    8b4c:	b1f6      	cbz	r6, 8b8c <POINTonE2_dadd+0x134>
    8b4e:	f8df a23c 	ldr.w	sl, [pc, #572]	; 8d8c <POINTonE2_dadd+0x334>
    8b52:	4b8f      	ldr	r3, [pc, #572]	; (8d90 <POINTonE2_dadd+0x338>)
    8b54:	4652      	mov	r2, sl
    8b56:	a94c      	add	r1, sp, #304	; 0x130
    8b58:	a8ac      	add	r0, sp, #688	; 0x2b0
    8b5a:	f7fe fe37 	bl	77cc <sqr_mont_384x>
    8b5e:	4b8c      	ldr	r3, [pc, #560]	; (8d90 <POINTonE2_dadd+0x338>)
    8b60:	9300      	str	r3, [sp, #0]
    8b62:	4653      	mov	r3, sl
    8b64:	4632      	mov	r2, r6
    8b66:	a9ac      	add	r1, sp, #688	; 0x2b0
    8b68:	4608      	mov	r0, r1
    8b6a:	f7fb fba1 	bl	42b0 <mul_mont_384x>
    8b6e:	260c      	movs	r6, #12
    8b70:	9600      	str	r6, [sp, #0]
    8b72:	4653      	mov	r3, sl
    8b74:	aaac      	add	r2, sp, #688	; 0x2b0
    8b76:	a91c      	add	r1, sp, #112	; 0x70
    8b78:	4608      	mov	r0, r1
    8b7a:	f7f8 f87f 	bl	c7c <add_mod_n>
    8b7e:	9600      	str	r6, [sp, #0]
    8b80:	4653      	mov	r3, sl
    8b82:	aab8      	add	r2, sp, #736	; 0x2e0
    8b84:	a928      	add	r1, sp, #160	; 0xa0
    8b86:	4608      	mov	r0, r1
    8b88:	f7f8 f878 	bl	c7c <add_mod_n>
    8b8c:	4e7f      	ldr	r6, [pc, #508]	; (8d8c <POINTonE2_dadd+0x334>)
    8b8e:	f8df a200 	ldr.w	sl, [pc, #512]	; 8d90 <POINTonE2_dadd+0x338>
    8b92:	f8cd a000 	str.w	sl, [sp]
    8b96:	4633      	mov	r3, r6
    8b98:	464a      	mov	r2, r9
    8b9a:	4641      	mov	r1, r8
    8b9c:	a8ac      	add	r0, sp, #688	; 0x2b0
    8b9e:	f7fb fb87 	bl	42b0 <mul_mont_384x>
    8ba2:	f8cd a000 	str.w	sl, [sp]
    8ba6:	4633      	mov	r3, r6
    8ba8:	aa94      	add	r2, sp, #592	; 0x250
    8baa:	a9ac      	add	r1, sp, #688	; 0x2b0
    8bac:	4608      	mov	r0, r1
    8bae:	f7fb fb7f 	bl	42b0 <mul_mont_384x>
    8bb2:	f8cd a000 	str.w	sl, [sp]
    8bb6:	4633      	mov	r3, r6
    8bb8:	463a      	mov	r2, r7
    8bba:	f105 0160 	add.w	r1, r5, #96	; 0x60
    8bbe:	a864      	add	r0, sp, #400	; 0x190
    8bc0:	f7fb fb76 	bl	42b0 <mul_mont_384x>
    8bc4:	f8cd a000 	str.w	sl, [sp]
    8bc8:	4633      	mov	r3, r6
    8bca:	aa4c      	add	r2, sp, #304	; 0x130
    8bcc:	a964      	add	r1, sp, #400	; 0x190
    8bce:	4608      	mov	r0, r1
    8bd0:	f7fb fb6e 	bl	42b0 <mul_mont_384x>
    8bd4:	270c      	movs	r7, #12
    8bd6:	9700      	str	r7, [sp, #0]
    8bd8:	4633      	mov	r3, r6
    8bda:	aaac      	add	r2, sp, #688	; 0x2b0
    8bdc:	a964      	add	r1, sp, #400	; 0x190
    8bde:	4608      	mov	r0, r1
    8be0:	f7f7 fcf6 	bl	5d0 <sub_mod_n>
    8be4:	9700      	str	r7, [sp, #0]
    8be6:	4633      	mov	r3, r6
    8be8:	aab8      	add	r2, sp, #736	; 0x2e0
    8bea:	a970      	add	r1, sp, #448	; 0x1c0
    8bec:	4608      	mov	r0, r1
    8bee:	f7f7 fcef 	bl	5d0 <sub_mod_n>
    8bf2:	f8cd a000 	str.w	sl, [sp]
    8bf6:	4633      	mov	r3, r6
    8bf8:	4622      	mov	r2, r4
    8bfa:	a994      	add	r1, sp, #592	; 0x250
    8bfc:	4608      	mov	r0, r1
    8bfe:	f7fb fb57 	bl	42b0 <mul_mont_384x>
    8c02:	f8cd a000 	str.w	sl, [sp]
    8c06:	4633      	mov	r3, r6
    8c08:	462a      	mov	r2, r5
    8c0a:	a94c      	add	r1, sp, #304	; 0x130
    8c0c:	4608      	mov	r0, r1
    8c0e:	f7fb fb4f 	bl	42b0 <mul_mont_384x>
    8c12:	9700      	str	r7, [sp, #0]
    8c14:	4633      	mov	r3, r6
    8c16:	aa94      	add	r2, sp, #592	; 0x250
    8c18:	a94c      	add	r1, sp, #304	; 0x130
    8c1a:	a87c      	add	r0, sp, #496	; 0x1f0
    8c1c:	f7f8 f82e 	bl	c7c <add_mod_n>
    8c20:	9700      	str	r7, [sp, #0]
    8c22:	4633      	mov	r3, r6
    8c24:	aaa0      	add	r2, sp, #640	; 0x280
    8c26:	a958      	add	r1, sp, #352	; 0x160
    8c28:	a888      	add	r0, sp, #544	; 0x220
    8c2a:	f7f8 f827 	bl	c7c <add_mod_n>
    8c2e:	9700      	str	r7, [sp, #0]
    8c30:	4633      	mov	r3, r6
    8c32:	aa94      	add	r2, sp, #592	; 0x250
    8c34:	a94c      	add	r1, sp, #304	; 0x130
    8c36:	4608      	mov	r0, r1
    8c38:	f7f7 fcca 	bl	5d0 <sub_mod_n>
    8c3c:	9700      	str	r7, [sp, #0]
    8c3e:	4633      	mov	r3, r6
    8c40:	aaa0      	add	r2, sp, #640	; 0x280
    8c42:	a958      	add	r1, sp, #352	; 0x160
    8c44:	4608      	mov	r0, r1
    8c46:	f7f7 fcc3 	bl	5d0 <sub_mod_n>
    8c4a:	aa4b      	add	r2, sp, #300	; 0x12c
    8c4c:	ae7b      	add	r6, sp, #492	; 0x1ec
    8c4e:	4613      	mov	r3, r2
    8c50:	2100      	movs	r1, #0
    8c52:	f853 0f04 	ldr.w	r0, [r3, #4]!
    8c56:	4301      	orrs	r1, r0
    8c58:	42b3      	cmp	r3, r6
    8c5a:	d1fa      	bne.n	8c52 <POINTonE2_dadd+0x1fa>
    8c5c:	1e48      	subs	r0, r1, #1
    8c5e:	ea20 0001 	bic.w	r0, r0, r1
    8c62:	17c0      	asrs	r0, r0, #31
    8c64:	3c04      	subs	r4, #4
    8c66:	ae94      	add	r6, sp, #592	; 0x250
    8c68:	afdc      	add	r7, sp, #880	; 0x370
    8c6a:	4631      	mov	r1, r6
    8c6c:	46a4      	mov	ip, r4
    8c6e:	4696      	mov	lr, r2
    8c70:	680a      	ldr	r2, [r1, #0]
    8c72:	f85c 3f04 	ldr.w	r3, [ip, #4]!
    8c76:	4053      	eors	r3, r2
    8c78:	4003      	ands	r3, r0
    8c7a:	4053      	eors	r3, r2
    8c7c:	f841 3b04 	str.w	r3, [r1], #4
    8c80:	42b9      	cmp	r1, r7
    8c82:	d1f5      	bne.n	8c70 <POINTonE2_dadd+0x218>
    8c84:	4672      	mov	r2, lr
    8c86:	a903      	add	r1, sp, #12
    8c88:	f50d 7c96 	add.w	ip, sp, #300	; 0x12c
    8c8c:	4686      	mov	lr, r0
    8c8e:	f852 0f04 	ldr.w	r0, [r2, #4]!
    8c92:	f851 3f04 	ldr.w	r3, [r1, #4]!
    8c96:	4043      	eors	r3, r0
    8c98:	ea03 030e 	and.w	r3, r3, lr
    8c9c:	4043      	eors	r3, r0
    8c9e:	6013      	str	r3, [r2, #0]
    8ca0:	458c      	cmp	ip, r1
    8ca2:	d1f4      	bne.n	8c8e <POINTonE2_dadd+0x236>
    8ca4:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8d8c <POINTonE2_dadd+0x334>
    8ca8:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8d90 <POINTonE2_dadd+0x338>
    8cac:	f8cd 9000 	str.w	r9, [sp]
    8cb0:	4643      	mov	r3, r8
    8cb2:	aa4c      	add	r2, sp, #304	; 0x130
    8cb4:	a9c4      	add	r1, sp, #784	; 0x310
    8cb6:	4608      	mov	r0, r1
    8cb8:	f7fb fafa 	bl	42b0 <mul_mont_384x>
    8cbc:	464b      	mov	r3, r9
    8cbe:	4642      	mov	r2, r8
    8cc0:	a94c      	add	r1, sp, #304	; 0x130
    8cc2:	a804      	add	r0, sp, #16
    8cc4:	f7fe fd82 	bl	77cc <sqr_mont_384x>
    8cc8:	f8cd 9000 	str.w	r9, [sp]
    8ccc:	4643      	mov	r3, r8
    8cce:	aa4c      	add	r2, sp, #304	; 0x130
    8cd0:	a904      	add	r1, sp, #16
    8cd2:	a81c      	add	r0, sp, #112	; 0x70
    8cd4:	f7fb faec 	bl	42b0 <mul_mont_384x>
    8cd8:	f8cd 9000 	str.w	r9, [sp]
    8cdc:	4643      	mov	r3, r8
    8cde:	aaac      	add	r2, sp, #688	; 0x2b0
    8ce0:	a91c      	add	r1, sp, #112	; 0x70
    8ce2:	4608      	mov	r0, r1
    8ce4:	f7fb fae4 	bl	42b0 <mul_mont_384x>
    8ce8:	f8cd 9000 	str.w	r9, [sp]
    8cec:	4643      	mov	r3, r8
    8cee:	aa94      	add	r2, sp, #592	; 0x250
    8cf0:	a904      	add	r1, sp, #16
    8cf2:	a8ac      	add	r0, sp, #688	; 0x2b0
    8cf4:	f7fb fadc 	bl	42b0 <mul_mont_384x>
    8cf8:	f8cd 9000 	str.w	r9, [sp]
    8cfc:	4643      	mov	r3, r8
    8cfe:	aa7c      	add	r2, sp, #496	; 0x1f0
    8d00:	a904      	add	r1, sp, #16
    8d02:	4608      	mov	r0, r1
    8d04:	f7fb fad4 	bl	42b0 <mul_mont_384x>
    8d08:	464b      	mov	r3, r9
    8d0a:	4642      	mov	r2, r8
    8d0c:	a964      	add	r1, sp, #400	; 0x190
    8d0e:	a894      	add	r0, sp, #592	; 0x250
    8d10:	f7fe fd5c 	bl	77cc <sqr_mont_384x>
    8d14:	f04f 0a0c 	mov.w	sl, #12
    8d18:	f8cd a000 	str.w	sl, [sp]
    8d1c:	4643      	mov	r3, r8
    8d1e:	aa04      	add	r2, sp, #16
    8d20:	a994      	add	r1, sp, #592	; 0x250
    8d22:	4608      	mov	r0, r1
    8d24:	f7f7 fc54 	bl	5d0 <sub_mod_n>
    8d28:	f8cd a000 	str.w	sl, [sp]
    8d2c:	4643      	mov	r3, r8
    8d2e:	aa10      	add	r2, sp, #64	; 0x40
    8d30:	a9a0      	add	r1, sp, #640	; 0x280
    8d32:	4608      	mov	r0, r1
    8d34:	f7f7 fc4c 	bl	5d0 <sub_mod_n>
    8d38:	f8cd a000 	str.w	sl, [sp]
    8d3c:	4643      	mov	r3, r8
    8d3e:	aa94      	add	r2, sp, #592	; 0x250
    8d40:	a9ac      	add	r1, sp, #688	; 0x2b0
    8d42:	4608      	mov	r0, r1
    8d44:	f7f7 fc44 	bl	5d0 <sub_mod_n>
    8d48:	f8cd a000 	str.w	sl, [sp]
    8d4c:	4643      	mov	r3, r8
    8d4e:	aaa0      	add	r2, sp, #640	; 0x280
    8d50:	a9b8      	add	r1, sp, #736	; 0x2e0
    8d52:	4608      	mov	r0, r1
    8d54:	f7f7 fc3c 	bl	5d0 <sub_mod_n>
    8d58:	f8cd 9000 	str.w	r9, [sp]
    8d5c:	4643      	mov	r3, r8
    8d5e:	aa64      	add	r2, sp, #400	; 0x190
    8d60:	a9ac      	add	r1, sp, #688	; 0x2b0
    8d62:	4608      	mov	r0, r1
    8d64:	f7fb faa4 	bl	42b0 <mul_mont_384x>
    8d68:	f8cd a000 	str.w	sl, [sp]
    8d6c:	4643      	mov	r3, r8
    8d6e:	aa1c      	add	r2, sp, #112	; 0x70
    8d70:	a9ac      	add	r1, sp, #688	; 0x2b0
    8d72:	4608      	mov	r0, r1
    8d74:	f7f7 fc2c 	bl	5d0 <sub_mod_n>
    8d78:	f8cd a000 	str.w	sl, [sp]
    8d7c:	4643      	mov	r3, r8
    8d7e:	aa28      	add	r2, sp, #160	; 0xa0
    8d80:	a9b8      	add	r1, sp, #736	; 0x2e0
    8d82:	4608      	mov	r0, r1
    8d84:	f7f7 fc24 	bl	5d0 <sub_mod_n>
    8d88:	9b02      	ldr	r3, [sp, #8]
    8d8a:	e003      	b.n	8d94 <POINTonE2_dadd+0x33c>
    8d8c:	00015a08 	.word	0x00015a08
    8d90:	fffcfffd 	.word	0xfffcfffd
    8d94:	4258      	negs	r0, r3
    8d96:	4632      	mov	r2, r6
    8d98:	6811      	ldr	r1, [r2, #0]
    8d9a:	f854 3f04 	ldr.w	r3, [r4, #4]!
    8d9e:	404b      	eors	r3, r1
    8da0:	4003      	ands	r3, r0
    8da2:	404b      	eors	r3, r1
    8da4:	f842 3b04 	str.w	r3, [r2], #4
    8da8:	42ba      	cmp	r2, r7
    8daa:	d1f5      	bne.n	8d98 <POINTonE2_dadd+0x340>
    8dac:	f1cb 0200 	rsb	r2, fp, #0
    8db0:	3d04      	subs	r5, #4
    8db2:	9b03      	ldr	r3, [sp, #12]
    8db4:	1f18      	subs	r0, r3, #4
    8db6:	f856 1b04 	ldr.w	r1, [r6], #4
    8dba:	f855 3f04 	ldr.w	r3, [r5, #4]!
    8dbe:	404b      	eors	r3, r1
    8dc0:	4013      	ands	r3, r2
    8dc2:	404b      	eors	r3, r1
    8dc4:	f840 3f04 	str.w	r3, [r0, #4]!
    8dc8:	42be      	cmp	r6, r7
    8dca:	d1f4      	bne.n	8db6 <POINTonE2_dadd+0x35e>
    8dcc:	f50d 7d5d 	add.w	sp, sp, #884	; 0x374
    8dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00008dd4 <POINTonE2s_mult_w4>:
    8dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8dd8:	b0cb      	sub	sp, #300	; 0x12c
    8dda:	af00      	add	r7, sp, #0
    8ddc:	4605      	mov	r5, r0
    8dde:	4616      	mov	r6, r2
    8de0:	603b      	str	r3, [r7, #0]
    8de2:	f8d7 8150 	ldr.w	r8, [r7, #336]	; 0x150
    8de6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    8dea:	b37b      	cbz	r3, 8e4c <POINTonE2s_mult_w4+0x78>
    8dec:	b176      	cbz	r6, 8e0c <POINTonE2s_mult_w4+0x38>
    8dee:	f1a1 0a04 	sub.w	sl, r1, #4
    8df2:	f8d7 9154 	ldr.w	r9, [r7, #340]	; 0x154
    8df6:	2400      	movs	r4, #0
    8df8:	f85a 1f04 	ldr.w	r1, [sl, #4]!
    8dfc:	4648      	mov	r0, r9
    8dfe:	f7ff fe05 	bl	8a0c <POINTonE2_precompute_w4>
    8e02:	3401      	adds	r4, #1
    8e04:	f509 6910 	add.w	r9, r9, #2304	; 0x900
    8e08:	42a6      	cmp	r6, r4
    8e0a:	d1f5      	bne.n	8df8 <POINTonE2s_mult_w4+0x24>
    8e0c:	f008 0103 	and.w	r1, r8, #3
    8e10:	1c4a      	adds	r2, r1, #1
    8e12:	2301      	movs	r3, #1
    8e14:	4093      	lsls	r3, r2
    8e16:	f103 3aff 	add.w	sl, r3, #4294967295
    8e1a:	4689      	mov	r9, r1
    8e1c:	ebb8 0801 	subs.w	r8, r8, r1
    8e20:	d01d      	beq.n	8e5e <POINTonE2s_mult_w4+0x8a>
    8e22:	f108 3bff 	add.w	fp, r8, #4294967295
    8e26:	4659      	mov	r1, fp
    8e28:	683b      	ldr	r3, [r7, #0]
    8e2a:	6818      	ldr	r0, [r3, #0]
    8e2c:	f7f7 fbb8 	bl	5a0 <get_wval>
    8e30:	2104      	movs	r1, #4
    8e32:	ea00 000a 	and.w	r0, r0, sl
    8e36:	f7f7 fbbf 	bl	5b8 <booth_encode>
    8e3a:	4602      	mov	r2, r0
    8e3c:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
    8e40:	4628      	mov	r0, r5
    8e42:	f7f8 fe93 	bl	1b6c <POINTonE2_gather_booth_w4>
    8e46:	2401      	movs	r4, #1
    8e48:	464b      	mov	r3, r9
    8e4a:	e021      	b.n	8e90 <POINTonE2s_mult_w4+0xbc>
    8e4c:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    8e50:	466a      	mov	r2, sp
    8e52:	eba2 2303 	sub.w	r3, r2, r3, lsl #8
    8e56:	469d      	mov	sp, r3
    8e58:	f8c7 d154 	str.w	sp, [r7, #340]	; 0x154
    8e5c:	e7c6      	b.n	8dec <POINTonE2s_mult_w4+0x18>
    8e5e:	683b      	ldr	r3, [r7, #0]
    8e60:	681b      	ldr	r3, [r3, #0]
    8e62:	7818      	ldrb	r0, [r3, #0]
    8e64:	2104      	movs	r1, #4
    8e66:	ea0a 0040 	and.w	r0, sl, r0, lsl #1
    8e6a:	f7f7 fba5 	bl	5b8 <booth_encode>
    8e6e:	4602      	mov	r2, r0
    8e70:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
    8e74:	4628      	mov	r0, r5
    8e76:	f7f8 fe79 	bl	1b6c <POINTonE2_gather_booth_w4>
    8e7a:	2401      	movs	r4, #1
    8e7c:	e040      	b.n	8f00 <POINTonE2s_mult_w4+0x12c>
    8e7e:	f1ab 0204 	sub.w	r2, fp, #4
    8e82:	f04f 0a1f 	mov.w	sl, #31
    8e86:	2304      	movs	r3, #4
    8e88:	f1bb 0f03 	cmp.w	fp, #3
    8e8c:	d036      	beq.n	8efc <POINTonE2s_mult_w4+0x128>
    8e8e:	4693      	mov	fp, r2
    8e90:	42a6      	cmp	r6, r4
    8e92:	d92b      	bls.n	8eec <POINTonE2s_mult_w4+0x118>
    8e94:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
    8e98:	f109 39ff 	add.w	r9, r9, #4294967295
    8e9c:	683a      	ldr	r2, [r7, #0]
    8e9e:	eb02 0989 	add.w	r9, r2, r9, lsl #2
    8ea2:	eb04 08c4 	add.w	r8, r4, r4, lsl #3
    8ea6:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
    8eaa:	eb02 2808 	add.w	r8, r2, r8, lsl #8
    8eae:	3301      	adds	r3, #1
    8eb0:	607b      	str	r3, [r7, #4]
    8eb2:	687a      	ldr	r2, [r7, #4]
    8eb4:	4659      	mov	r1, fp
    8eb6:	f859 0f04 	ldr.w	r0, [r9, #4]!
    8eba:	f7f7 fb71 	bl	5a0 <get_wval>
    8ebe:	2104      	movs	r1, #4
    8ec0:	ea00 000a 	and.w	r0, r0, sl
    8ec4:	f7f7 fb78 	bl	5b8 <booth_encode>
    8ec8:	4602      	mov	r2, r0
    8eca:	4641      	mov	r1, r8
    8ecc:	f107 0008 	add.w	r0, r7, #8
    8ed0:	f7f8 fe4c 	bl	1b6c <POINTonE2_gather_booth_w4>
    8ed4:	2300      	movs	r3, #0
    8ed6:	f107 0208 	add.w	r2, r7, #8
    8eda:	4629      	mov	r1, r5
    8edc:	4628      	mov	r0, r5
    8ede:	f7ff fdbb 	bl	8a58 <POINTonE2_dadd>
    8ee2:	3401      	adds	r4, #1
    8ee4:	f508 6810 	add.w	r8, r8, #2304	; 0x900
    8ee8:	42a6      	cmp	r6, r4
    8eea:	d1e2      	bne.n	8eb2 <POINTonE2s_mult_w4+0xde>
    8eec:	2404      	movs	r4, #4
    8eee:	4629      	mov	r1, r5
    8ef0:	4628      	mov	r0, r5
    8ef2:	f7ff fca9 	bl	8848 <POINTonE2_double>
    8ef6:	3c01      	subs	r4, #1
    8ef8:	d1f9      	bne.n	8eee <POINTonE2s_mult_w4+0x11a>
    8efa:	e7c0      	b.n	8e7e <POINTonE2s_mult_w4+0xaa>
    8efc:	f04f 0a1f 	mov.w	sl, #31
    8f00:	42a6      	cmp	r6, r4
    8f02:	d928      	bls.n	8f56 <POINTonE2s_mult_w4+0x182>
    8f04:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
    8f08:	f109 39ff 	add.w	r9, r9, #4294967295
    8f0c:	683b      	ldr	r3, [r7, #0]
    8f0e:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    8f12:	eb04 08c4 	add.w	r8, r4, r4, lsl #3
    8f16:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
    8f1a:	eb03 2808 	add.w	r8, r3, r8, lsl #8
    8f1e:	f04f 0b04 	mov.w	fp, #4
    8f22:	f859 3f04 	ldr.w	r3, [r9, #4]!
    8f26:	7818      	ldrb	r0, [r3, #0]
    8f28:	4659      	mov	r1, fp
    8f2a:	ea0a 0040 	and.w	r0, sl, r0, lsl #1
    8f2e:	f7f7 fb43 	bl	5b8 <booth_encode>
    8f32:	4602      	mov	r2, r0
    8f34:	4641      	mov	r1, r8
    8f36:	f107 0008 	add.w	r0, r7, #8
    8f3a:	f7f8 fe17 	bl	1b6c <POINTonE2_gather_booth_w4>
    8f3e:	2300      	movs	r3, #0
    8f40:	f107 0208 	add.w	r2, r7, #8
    8f44:	4629      	mov	r1, r5
    8f46:	4628      	mov	r0, r5
    8f48:	f7ff fd86 	bl	8a58 <POINTonE2_dadd>
    8f4c:	3401      	adds	r4, #1
    8f4e:	f508 6810 	add.w	r8, r8, #2304	; 0x900
    8f52:	42a6      	cmp	r6, r4
    8f54:	d1e5      	bne.n	8f22 <POINTonE2s_mult_w4+0x14e>
    8f56:	f507 7796 	add.w	r7, r7, #300	; 0x12c
    8f5a:	46bd      	mov	sp, r7
    8f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00008f60 <POINTonE2_mult_gls>:
    8f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8f64:	f5ad 7d6a 	sub.w	sp, sp, #936	; 0x3a8
    8f68:	4606      	mov	r6, r0
    8f6a:	460d      	mov	r5, r1
    8f6c:	f102 0c20 	add.w	ip, r2, #32
    8f70:	2400      	movs	r4, #0
    8f72:	43d0      	mvns	r0, r2
    8f74:	eb00 030c 	add.w	r3, r0, ip
    8f78:	f81c 1d01 	ldrb.w	r1, [ip, #-1]!
    8f7c:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
    8f80:	f023 0303 	bic.w	r3, r3, #3
    8f84:	a9ea      	add	r1, sp, #936	; 0x3a8
    8f86:	440b      	add	r3, r1
    8f88:	f843 4c20 	str.w	r4, [r3, #-32]
    8f8c:	4562      	cmp	r2, ip
    8f8e:	d1f1      	bne.n	8f74 <POINTonE2_mult_gls+0x14>
    8f90:	ace2      	add	r4, sp, #904	; 0x388
    8f92:	4620      	mov	r0, r4
    8f94:	f7fd fc40 	bl	6818 <div_by_zz>
    8f98:	4620      	mov	r0, r4
    8f9a:	f7fd fdd5 	bl	6b48 <div_by_z>
    8f9e:	f50d 7a66 	add.w	sl, sp, #920	; 0x398
    8fa2:	4650      	mov	r0, sl
    8fa4:	f7fd fdd0 	bl	6b48 <div_by_z>
    8fa8:	af0a      	add	r7, sp, #40	; 0x28
    8faa:	4629      	mov	r1, r5
    8fac:	4638      	mov	r0, r7
    8fae:	f7fb f9cd 	bl	434c <psi>
    8fb2:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
    8fb6:	4639      	mov	r1, r7
    8fb8:	4648      	mov	r0, r9
    8fba:	f7fb f9c7 	bl	434c <psi>
    8fbe:	f50d 781a 	add.w	r8, sp, #616	; 0x268
    8fc2:	4649      	mov	r1, r9
    8fc4:	4640      	mov	r0, r8
    8fc6:	f7fb f9c1 	bl	434c <psi>
    8fca:	2101      	movs	r1, #1
    8fcc:	4638      	mov	r0, r7
    8fce:	f7f8 fdb3 	bl	1b38 <POINTonE2_cneg>
    8fd2:	2101      	movs	r1, #1
    8fd4:	4640      	mov	r0, r8
    8fd6:	f7f8 fdaf 	bl	1b38 <POINTonE2_cneg>
    8fda:	9502      	str	r5, [sp, #8]
    8fdc:	9406      	str	r4, [sp, #24]
    8fde:	9703      	str	r7, [sp, #12]
    8fe0:	abe4      	add	r3, sp, #912	; 0x390
    8fe2:	9307      	str	r3, [sp, #28]
    8fe4:	f8cd 9010 	str.w	r9, [sp, #16]
    8fe8:	f8cd a020 	str.w	sl, [sp, #32]
    8fec:	f8cd 8014 	str.w	r8, [sp, #20]
    8ff0:	abe8      	add	r3, sp, #928	; 0x3a0
    8ff2:	9309      	str	r3, [sp, #36]	; 0x24
    8ff4:	2300      	movs	r3, #0
    8ff6:	9301      	str	r3, [sp, #4]
    8ff8:	2340      	movs	r3, #64	; 0x40
    8ffa:	9300      	str	r3, [sp, #0]
    8ffc:	ab06      	add	r3, sp, #24
    8ffe:	2204      	movs	r2, #4
    9000:	a902      	add	r1, sp, #8
    9002:	4630      	mov	r0, r6
    9004:	f7ff fee6 	bl	8dd4 <POINTonE2s_mult_w4>
    9008:	4620      	mov	r0, r4
    900a:	aaea      	add	r2, sp, #936	; 0x3a8
    900c:	2300      	movs	r3, #0
    900e:	f840 3b04 	str.w	r3, [r0], #4
    9012:	4290      	cmp	r0, r2
    9014:	d1fb      	bne.n	900e <POINTonE2_mult_gls+0xae>
    9016:	abe2      	add	r3, sp, #904	; 0x388
    9018:	f50d 7d6a 	add.w	sp, sp, #936	; 0x3a8
    901c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00009020 <POINTonE2_mult_w4>:
    9020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9024:	f6ad 2d24 	subw	sp, sp, #2596	; 0xa24
    9028:	4605      	mov	r5, r0
    902a:	4617      	mov	r7, r2
    902c:	461e      	mov	r6, r3
    902e:	4668      	mov	r0, sp
    9030:	f7ff fcec 	bl	8a0c <POINTonE2_precompute_w4>
    9034:	f006 0303 	and.w	r3, r6, #3
    9038:	1c5c      	adds	r4, r3, #1
    903a:	1af6      	subs	r6, r6, r3
    903c:	d036      	beq.n	90ac <POINTonE2_mult_w4+0x8c>
    903e:	4622      	mov	r2, r4
    9040:	1e71      	subs	r1, r6, #1
    9042:	4638      	mov	r0, r7
    9044:	f7f7 faac 	bl	5a0 <get_wval>
    9048:	f04f 33ff 	mov.w	r3, #4294967295
    904c:	40a3      	lsls	r3, r4
    904e:	2104      	movs	r1, #4
    9050:	ea20 0003 	bic.w	r0, r0, r3
    9054:	f7f7 fab0 	bl	5b8 <booth_encode>
    9058:	4602      	mov	r2, r0
    905a:	4669      	mov	r1, sp
    905c:	4628      	mov	r0, r5
    905e:	f7f8 fd85 	bl	1b6c <POINTonE2_gather_booth_w4>
    9062:	f04f 0905 	mov.w	r9, #5
    9066:	f04f 0804 	mov.w	r8, #4
    906a:	2404      	movs	r4, #4
    906c:	4629      	mov	r1, r5
    906e:	4628      	mov	r0, r5
    9070:	f7ff fbea 	bl	8848 <POINTonE2_double>
    9074:	3c01      	subs	r4, #1
    9076:	d1f9      	bne.n	906c <POINTonE2_mult_w4+0x4c>
    9078:	1f34      	subs	r4, r6, #4
    907a:	d027      	beq.n	90cc <POINTonE2_mult_w4+0xac>
    907c:	464a      	mov	r2, r9
    907e:	1f71      	subs	r1, r6, #5
    9080:	4638      	mov	r0, r7
    9082:	f7f7 fa8d 	bl	5a0 <get_wval>
    9086:	4641      	mov	r1, r8
    9088:	f000 001f 	and.w	r0, r0, #31
    908c:	f7f7 fa94 	bl	5b8 <booth_encode>
    9090:	4602      	mov	r2, r0
    9092:	4669      	mov	r1, sp
    9094:	f50d 6010 	add.w	r0, sp, #2304	; 0x900
    9098:	f7f8 fd68 	bl	1b6c <POINTonE2_gather_booth_w4>
    909c:	f50d 6210 	add.w	r2, sp, #2304	; 0x900
    90a0:	4629      	mov	r1, r5
    90a2:	4628      	mov	r0, r5
    90a4:	f7ff fa48 	bl	8538 <POINTonE2_add>
    90a8:	4626      	mov	r6, r4
    90aa:	e7de      	b.n	906a <POINTonE2_mult_w4+0x4a>
    90ac:	7838      	ldrb	r0, [r7, #0]
    90ae:	f04f 33ff 	mov.w	r3, #4294967295
    90b2:	40a3      	lsls	r3, r4
    90b4:	43db      	mvns	r3, r3
    90b6:	2104      	movs	r1, #4
    90b8:	ea03 0040 	and.w	r0, r3, r0, lsl #1
    90bc:	f7f7 fa7c 	bl	5b8 <booth_encode>
    90c0:	4602      	mov	r2, r0
    90c2:	4669      	mov	r1, sp
    90c4:	4628      	mov	r0, r5
    90c6:	f7f8 fd51 	bl	1b6c <POINTonE2_gather_booth_w4>
    90ca:	e013      	b.n	90f4 <POINTonE2_mult_w4+0xd4>
    90cc:	7838      	ldrb	r0, [r7, #0]
    90ce:	0040      	lsls	r0, r0, #1
    90d0:	2104      	movs	r1, #4
    90d2:	f000 001e 	and.w	r0, r0, #30
    90d6:	f7f7 fa6f 	bl	5b8 <booth_encode>
    90da:	4602      	mov	r2, r0
    90dc:	4669      	mov	r1, sp
    90de:	f50d 6010 	add.w	r0, sp, #2304	; 0x900
    90e2:	f7f8 fd43 	bl	1b6c <POINTonE2_gather_booth_w4>
    90e6:	2300      	movs	r3, #0
    90e8:	f50d 6210 	add.w	r2, sp, #2304	; 0x900
    90ec:	4629      	mov	r1, r5
    90ee:	4628      	mov	r0, r5
    90f0:	f7ff fcb2 	bl	8a58 <POINTonE2_dadd>
    90f4:	f60d 2d24 	addw	sp, sp, #2596	; 0xa24
    90f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000090fc <POINTonE2_mult_w5>:
    90fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9100:	f5ad 5d99 	sub.w	sp, sp, #4896	; 0x1320
    9104:	b081      	sub	sp, #4
    9106:	4605      	mov	r5, r0
    9108:	4617      	mov	r7, r2
    910a:	4698      	mov	r8, r3
    910c:	f1a1 0e04 	sub.w	lr, r1, #4
    9110:	466c      	mov	r4, sp
    9112:	ab48      	add	r3, sp, #288	; 0x120
    9114:	46a4      	mov	ip, r4
    9116:	f85e 2f04 	ldr.w	r2, [lr, #4]!
    911a:	f84c 2b04 	str.w	r2, [ip], #4
    911e:	459c      	cmp	ip, r3
    9120:	d1f9      	bne.n	9116 <POINTonE2_mult_w5+0x1a>
    9122:	a848      	add	r0, sp, #288	; 0x120
    9124:	f7ff fb90 	bl	8848 <POINTonE2_double>
    9128:	ae90      	add	r6, sp, #576	; 0x240
    912a:	f504 69fc 	add.w	r9, r4, #2016	; 0x7e0
    912e:	4622      	mov	r2, r4
    9130:	f504 7490 	add.w	r4, r4, #288	; 0x120
    9134:	4621      	mov	r1, r4
    9136:	4630      	mov	r0, r6
    9138:	f7ff f9fe 	bl	8538 <POINTonE2_add>
    913c:	4621      	mov	r1, r4
    913e:	f506 7090 	add.w	r0, r6, #288	; 0x120
    9142:	f7ff fb81 	bl	8848 <POINTonE2_double>
    9146:	f506 7610 	add.w	r6, r6, #576	; 0x240
    914a:	45a1      	cmp	r9, r4
    914c:	d1ef      	bne.n	912e <POINTonE2_mult_w5+0x32>
    914e:	4b36      	ldr	r3, [pc, #216]	; (9228 <POINTonE2_mult_w5+0x12c>)
    9150:	fba3 2308 	umull	r2, r3, r3, r8
    9154:	f023 0603 	bic.w	r6, r3, #3
    9158:	eb06 0693 	add.w	r6, r6, r3, lsr #2
    915c:	eba8 0606 	sub.w	r6, r8, r6
    9160:	1c74      	adds	r4, r6, #1
    9162:	ebb8 0606 	subs.w	r6, r8, r6
    9166:	d036      	beq.n	91d6 <POINTonE2_mult_w5+0xda>
    9168:	4622      	mov	r2, r4
    916a:	1e71      	subs	r1, r6, #1
    916c:	4638      	mov	r0, r7
    916e:	f7f7 fa17 	bl	5a0 <get_wval>
    9172:	f04f 33ff 	mov.w	r3, #4294967295
    9176:	40a3      	lsls	r3, r4
    9178:	2105      	movs	r1, #5
    917a:	ea20 0003 	bic.w	r0, r0, r3
    917e:	f7f7 fa1b 	bl	5b8 <booth_encode>
    9182:	4602      	mov	r2, r0
    9184:	4669      	mov	r1, sp
    9186:	4628      	mov	r0, r5
    9188:	f7f8 fd1f 	bl	1bca <POINTonE2_gather_booth_w5>
    918c:	f04f 0906 	mov.w	r9, #6
    9190:	f04f 0805 	mov.w	r8, #5
    9194:	2405      	movs	r4, #5
    9196:	4629      	mov	r1, r5
    9198:	4628      	mov	r0, r5
    919a:	f7ff fb55 	bl	8848 <POINTonE2_double>
    919e:	3c01      	subs	r4, #1
    91a0:	d1f9      	bne.n	9196 <POINTonE2_mult_w5+0x9a>
    91a2:	1f74      	subs	r4, r6, #5
    91a4:	d027      	beq.n	91f6 <POINTonE2_mult_w5+0xfa>
    91a6:	464a      	mov	r2, r9
    91a8:	1fb1      	subs	r1, r6, #6
    91aa:	4638      	mov	r0, r7
    91ac:	f7f7 f9f8 	bl	5a0 <get_wval>
    91b0:	4641      	mov	r1, r8
    91b2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    91b6:	f7f7 f9ff 	bl	5b8 <booth_encode>
    91ba:	4602      	mov	r2, r0
    91bc:	4669      	mov	r1, sp
    91be:	f50d 5090 	add.w	r0, sp, #4608	; 0x1200
    91c2:	f7f8 fd02 	bl	1bca <POINTonE2_gather_booth_w5>
    91c6:	f50d 5290 	add.w	r2, sp, #4608	; 0x1200
    91ca:	4629      	mov	r1, r5
    91cc:	4628      	mov	r0, r5
    91ce:	f7ff f9b3 	bl	8538 <POINTonE2_add>
    91d2:	4626      	mov	r6, r4
    91d4:	e7de      	b.n	9194 <POINTonE2_mult_w5+0x98>
    91d6:	7838      	ldrb	r0, [r7, #0]
    91d8:	f04f 33ff 	mov.w	r3, #4294967295
    91dc:	40a3      	lsls	r3, r4
    91de:	43db      	mvns	r3, r3
    91e0:	2105      	movs	r1, #5
    91e2:	ea03 0040 	and.w	r0, r3, r0, lsl #1
    91e6:	f7f7 f9e7 	bl	5b8 <booth_encode>
    91ea:	4602      	mov	r2, r0
    91ec:	4669      	mov	r1, sp
    91ee:	4628      	mov	r0, r5
    91f0:	f7f8 fceb 	bl	1bca <POINTonE2_gather_booth_w5>
    91f4:	e013      	b.n	921e <POINTonE2_mult_w5+0x122>
    91f6:	7838      	ldrb	r0, [r7, #0]
    91f8:	0040      	lsls	r0, r0, #1
    91fa:	2105      	movs	r1, #5
    91fc:	f000 003e 	and.w	r0, r0, #62	; 0x3e
    9200:	f7f7 f9da 	bl	5b8 <booth_encode>
    9204:	4602      	mov	r2, r0
    9206:	4669      	mov	r1, sp
    9208:	f50d 5090 	add.w	r0, sp, #4608	; 0x1200
    920c:	f7f8 fcdd 	bl	1bca <POINTonE2_gather_booth_w5>
    9210:	2300      	movs	r3, #0
    9212:	f50d 5290 	add.w	r2, sp, #4608	; 0x1200
    9216:	4629      	mov	r1, r5
    9218:	4628      	mov	r0, r5
    921a:	f7ff fc1d 	bl	8a58 <POINTonE2_dadd>
    921e:	f50d 5d99 	add.w	sp, sp, #4896	; 0x1320
    9222:	b001      	add	sp, #4
    9224:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9228:	cccccccd 	.word	0xcccccccd

0000922c <blst_p2_mult>:
    922c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9230:	b089      	sub	sp, #36	; 0x24
    9232:	4607      	mov	r7, r0
    9234:	4688      	mov	r8, r1
    9236:	4615      	mov	r5, r2
    9238:	461e      	mov	r6, r3
    923a:	2b9f      	cmp	r3, #159	; 0x9f
    923c:	d934      	bls.n	92a8 <blst_p2_mult+0x7c>
    923e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    9242:	d83b      	bhi.n	92bc <blst_p2_mult+0x90>
    9244:	1dd8      	adds	r0, r3, #7
    9246:	08c0      	lsrs	r0, r0, #3
    9248:	f10d 33ff 	add.w	r3, sp, #4294967295
    924c:	466c      	mov	r4, sp
    924e:	f10d 0e1f 	add.w	lr, sp, #31
    9252:	f04f 39ff 	mov.w	r9, #4294967295
    9256:	2100      	movs	r1, #0
    9258:	469c      	mov	ip, r3
    925a:	5c6a      	ldrb	r2, [r5, r1]
    925c:	ea02 0209 	and.w	r2, r2, r9
    9260:	f803 2f01 	strb.w	r2, [r3, #1]!
    9264:	f10c 0c02 	add.w	ip, ip, #2
    9268:	ebac 0c04 	sub.w	ip, ip, r4
    926c:	ebac 0c00 	sub.w	ip, ip, r0
    9270:	ea4f 79ec 	mov.w	r9, ip, asr #31
    9274:	eb01 71dc 	add.w	r1, r1, ip, lsr #31
    9278:	4573      	cmp	r3, lr
    927a:	d1ed      	bne.n	9258 <blst_p2_mult+0x2c>
    927c:	2208      	movs	r2, #8
    927e:	4911      	ldr	r1, [pc, #68]	; (92c4 <blst_p2_mult+0x98>)
    9280:	4668      	mov	r0, sp
    9282:	f7f7 f9de 	bl	642 <check_mod_n>
    9286:	b190      	cbz	r0, 92ae <blst_p2_mult+0x82>
    9288:	466a      	mov	r2, sp
    928a:	4641      	mov	r1, r8
    928c:	4638      	mov	r0, r7
    928e:	f7ff fe67 	bl	8f60 <POINTonE2_mult_gls>
    9292:	f104 0220 	add.w	r2, r4, #32
    9296:	2300      	movs	r3, #0
    9298:	f844 3b04 	str.w	r3, [r4], #4
    929c:	42a2      	cmp	r2, r4
    929e:	d1fb      	bne.n	9298 <blst_p2_mult+0x6c>
    92a0:	466b      	mov	r3, sp
    92a2:	b009      	add	sp, #36	; 0x24
    92a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    92a8:	f7ff feba 	bl	9020 <POINTonE2_mult_w4>
    92ac:	e7f9      	b.n	92a2 <blst_p2_mult+0x76>
    92ae:	4633      	mov	r3, r6
    92b0:	462a      	mov	r2, r5
    92b2:	4641      	mov	r1, r8
    92b4:	4638      	mov	r0, r7
    92b6:	f7ff ff21 	bl	90fc <POINTonE2_mult_w5>
    92ba:	e7ea      	b.n	9292 <blst_p2_mult+0x66>
    92bc:	f7ff ff1e 	bl	90fc <POINTonE2_mult_w5>
    92c0:	e7ef      	b.n	92a2 <blst_p2_mult+0x76>
    92c2:	bf00      	nop
    92c4:	00016dc8 	.word	0x00016dc8

000092c8 <POINTonE2_add_n_dbl>:
    92c8:	b570      	push	{r4, r5, r6, lr}
    92ca:	4605      	mov	r5, r0
    92cc:	4616      	mov	r6, r2
    92ce:	2300      	movs	r3, #0
    92d0:	460a      	mov	r2, r1
    92d2:	4601      	mov	r1, r0
    92d4:	f7ff fbc0 	bl	8a58 <POINTonE2_dadd>
    92d8:	1e74      	subs	r4, r6, #1
    92da:	b13e      	cbz	r6, 92ec <POINTonE2_add_n_dbl+0x24>
    92dc:	4629      	mov	r1, r5
    92de:	4628      	mov	r0, r5
    92e0:	f7ff fab2 	bl	8848 <POINTonE2_double>
    92e4:	3c01      	subs	r4, #1
    92e6:	f1b4 3fff 	cmp.w	r4, #4294967295
    92ea:	d1f7      	bne.n	92dc <POINTonE2_add_n_dbl+0x14>
    92ec:	bd70      	pop	{r4, r5, r6, pc}

000092ee <POINTonE2_times_minus_z>:
    92ee:	b538      	push	{r3, r4, r5, lr}
    92f0:	4604      	mov	r4, r0
    92f2:	460d      	mov	r5, r1
    92f4:	f7ff faa8 	bl	8848 <POINTonE2_double>
    92f8:	2202      	movs	r2, #2
    92fa:	4629      	mov	r1, r5
    92fc:	4620      	mov	r0, r4
    92fe:	f7ff ffe3 	bl	92c8 <POINTonE2_add_n_dbl>
    9302:	2203      	movs	r2, #3
    9304:	4629      	mov	r1, r5
    9306:	4620      	mov	r0, r4
    9308:	f7ff ffde 	bl	92c8 <POINTonE2_add_n_dbl>
    930c:	2209      	movs	r2, #9
    930e:	4629      	mov	r1, r5
    9310:	4620      	mov	r0, r4
    9312:	f7ff ffd9 	bl	92c8 <POINTonE2_add_n_dbl>
    9316:	2220      	movs	r2, #32
    9318:	4629      	mov	r1, r5
    931a:	4620      	mov	r0, r4
    931c:	f7ff ffd4 	bl	92c8 <POINTonE2_add_n_dbl>
    9320:	2210      	movs	r2, #16
    9322:	4629      	mov	r1, r5
    9324:	4620      	mov	r0, r4
    9326:	f7ff ffcf 	bl	92c8 <POINTonE2_add_n_dbl>
    932a:	bd38      	pop	{r3, r4, r5, pc}

0000932c <POINTonE2_in_G2>:
    932c:	b510      	push	{r4, lr}
    932e:	f5ad 7d58 	sub.w	sp, sp, #864	; 0x360
    9332:	4604      	mov	r4, r0
    9334:	4601      	mov	r1, r0
    9336:	a890      	add	r0, sp, #576	; 0x240
    9338:	f7fb f808 	bl	434c <psi>
    933c:	a990      	add	r1, sp, #576	; 0x240
    933e:	4608      	mov	r0, r1
    9340:	f7fb f804 	bl	434c <psi>
    9344:	a990      	add	r1, sp, #576	; 0x240
    9346:	a848      	add	r0, sp, #288	; 0x120
    9348:	f7fb f800 	bl	434c <psi>
    934c:	a948      	add	r1, sp, #288	; 0x120
    934e:	4668      	mov	r0, sp
    9350:	f7ff ffcd 	bl	92ee <POINTonE2_times_minus_z>
    9354:	2300      	movs	r3, #0
    9356:	466a      	mov	r2, sp
    9358:	a990      	add	r1, sp, #576	; 0x240
    935a:	4608      	mov	r0, r1
    935c:	f7ff fb7c 	bl	8a58 <POINTonE2_dadd>
    9360:	2101      	movs	r1, #1
    9362:	a890      	add	r0, sp, #576	; 0x240
    9364:	f7f8 fbe8 	bl	1b38 <POINTonE2_cneg>
    9368:	2300      	movs	r3, #0
    936a:	4622      	mov	r2, r4
    936c:	a990      	add	r1, sp, #576	; 0x240
    936e:	4608      	mov	r0, r1
    9370:	f7ff fb72 	bl	8a58 <POINTonE2_dadd>
    9374:	abbf      	add	r3, sp, #764	; 0x2fc
    9376:	a9d7      	add	r1, sp, #860	; 0x35c
    9378:	2000      	movs	r0, #0
    937a:	f853 2f04 	ldr.w	r2, [r3, #4]!
    937e:	4310      	orrs	r0, r2
    9380:	428b      	cmp	r3, r1
    9382:	d1fa      	bne.n	937a <POINTonE2_in_G2+0x4e>
    9384:	1e43      	subs	r3, r0, #1
    9386:	ea23 0000 	bic.w	r0, r3, r0
    938a:	0fc0      	lsrs	r0, r0, #31
    938c:	f50d 7d58 	add.w	sp, sp, #864	; 0x360
    9390:	bd10      	pop	{r4, pc}

00009392 <blst_p2_in_g2>:
    9392:	b508      	push	{r3, lr}
    9394:	f7ff ffca 	bl	932c <POINTonE2_in_G2>
    9398:	bd08      	pop	{r3, pc}

0000939a <blst_p2_affine_in_g2>:
    939a:	b510      	push	{r4, lr}
    939c:	b0c8      	sub	sp, #288	; 0x120
    939e:	f1a0 0c04 	sub.w	ip, r0, #4
    93a2:	466b      	mov	r3, sp
    93a4:	ac30      	add	r4, sp, #192	; 0xc0
    93a6:	4662      	mov	r2, ip
    93a8:	f852 1f04 	ldr.w	r1, [r2, #4]!
    93ac:	f843 1b04 	str.w	r1, [r3], #4
    93b0:	42a3      	cmp	r3, r4
    93b2:	d1f9      	bne.n	93a8 <blst_p2_affine_in_g2+0xe>
    93b4:	30bc      	adds	r0, #188	; 0xbc
    93b6:	4663      	mov	r3, ip
    93b8:	2200      	movs	r2, #0
    93ba:	f853 1f04 	ldr.w	r1, [r3, #4]!
    93be:	430a      	orrs	r2, r1
    93c0:	4283      	cmp	r3, r0
    93c2:	d1fa      	bne.n	93ba <blst_p2_affine_in_g2+0x20>
    93c4:	f102 3eff 	add.w	lr, r2, #4294967295
    93c8:	ea2e 0202 	bic.w	r2, lr, r2
    93cc:	ea4f 7ee2 	mov.w	lr, r2, asr #31
    93d0:	4c0a      	ldr	r4, [pc, #40]	; (93fc <blst_p2_affine_in_g2+0x62>)
    93d2:	f104 0290 	add.w	r2, r4, #144	; 0x90
    93d6:	a82f      	add	r0, sp, #188	; 0xbc
    93d8:	34f0      	adds	r4, #240	; 0xf0
    93da:	f852 1b04 	ldr.w	r1, [r2], #4
    93de:	f85c 3f04 	ldr.w	r3, [ip, #4]!
    93e2:	404b      	eors	r3, r1
    93e4:	ea03 030e 	and.w	r3, r3, lr
    93e8:	404b      	eors	r3, r1
    93ea:	f840 3f04 	str.w	r3, [r0, #4]!
    93ee:	42a2      	cmp	r2, r4
    93f0:	d1f3      	bne.n	93da <blst_p2_affine_in_g2+0x40>
    93f2:	4668      	mov	r0, sp
    93f4:	f7ff ff9a 	bl	932c <POINTonE2_in_G2>
    93f8:	b048      	add	sp, #288	; 0x120
    93fa:	bd10      	pop	{r4, pc}
    93fc:	00015a08 	.word	0x00015a08

00009400 <blst_pairing_merge>:
    9400:	b538      	push	{r3, r4, r5, lr}
    9402:	4604      	mov	r4, r0
    9404:	460d      	mov	r5, r1
    9406:	6803      	ldr	r3, [r0, #0]
    9408:	f013 0203 	ands.w	r2, r3, #3
    940c:	d007      	beq.n	941e <blst_pairing_merge+0x1e>
    940e:	6809      	ldr	r1, [r1, #0]
    9410:	f011 0f03 	tst.w	r1, #3
    9414:	d003      	beq.n	941e <blst_pairing_merge+0x1e>
    9416:	4019      	ands	r1, r3
    9418:	f011 0f03 	tst.w	r1, #3
    941c:	d07f      	beq.n	951e <blst_pairing_merge+0x11e>
    941e:	6861      	ldr	r1, [r4, #4]
    9420:	2900      	cmp	r1, #0
    9422:	d17e      	bne.n	9522 <blst_pairing_merge+0x122>
    9424:	6869      	ldr	r1, [r5, #4]
    9426:	2900      	cmp	r1, #0
    9428:	d17d      	bne.n	9526 <blst_pairing_merge+0x126>
    942a:	2a01      	cmp	r2, #1
    942c:	d005      	beq.n	943a <blst_pairing_merge+0x3a>
    942e:	2a02      	cmp	r2, #2
    9430:	d03e      	beq.n	94b0 <blst_pairing_merge+0xb0>
    9432:	2a00      	cmp	r2, #0
    9434:	d05e      	beq.n	94f4 <blst_pairing_merge+0xf4>
    9436:	2004      	movs	r0, #4
    9438:	bd38      	pop	{r3, r4, r5, pc}
    943a:	682a      	ldr	r2, [r5, #0]
    943c:	ea03 0102 	and.w	r1, r3, r2
    9440:	f011 0f10 	tst.w	r1, #16
    9444:	d112      	bne.n	946c <blst_pairing_merge+0x6c>
    9446:	f012 0f10 	tst.w	r2, #16
    944a:	d017      	beq.n	947c <blst_pairing_merge+0x7c>
    944c:	f043 0310 	orr.w	r3, r3, #16
    9450:	6023      	str	r3, [r4, #0]
    9452:	f505 7313 	add.w	r3, r5, #588	; 0x24c
    9456:	f504 7213 	add.w	r2, r4, #588	; 0x24c
    945a:	f505 7037 	add.w	r0, r5, #732	; 0x2dc
    945e:	f853 1f04 	ldr.w	r1, [r3, #4]!
    9462:	f842 1f04 	str.w	r1, [r2, #4]!
    9466:	4283      	cmp	r3, r0
    9468:	d1f9      	bne.n	945e <blst_pairing_merge+0x5e>
    946a:	e007      	b.n	947c <blst_pairing_merge+0x7c>
    946c:	f504 7014 	add.w	r0, r4, #592	; 0x250
    9470:	2300      	movs	r3, #0
    9472:	f505 7214 	add.w	r2, r5, #592	; 0x250
    9476:	4601      	mov	r1, r0
    9478:	f7f9 fcfe 	bl	2e78 <POINTonE1_dadd>
    947c:	6823      	ldr	r3, [r4, #0]
    947e:	682a      	ldr	r2, [r5, #0]
    9480:	ea03 0102 	and.w	r1, r3, r2
    9484:	f011 0f20 	tst.w	r1, #32
    9488:	d140      	bne.n	950c <blst_pairing_merge+0x10c>
    948a:	f012 0f20 	tst.w	r2, #32
    948e:	d04c      	beq.n	952a <blst_pairing_merge+0x12a>
    9490:	f043 0320 	orr.w	r3, r3, #32
    9494:	f844 3b0c 	str.w	r3, [r4], #12
    9498:	f105 030c 	add.w	r3, r5, #12
    949c:	f505 7513 	add.w	r5, r5, #588	; 0x24c
    94a0:	f853 2f04 	ldr.w	r2, [r3, #4]!
    94a4:	f844 2f04 	str.w	r2, [r4, #4]!
    94a8:	42ab      	cmp	r3, r5
    94aa:	d1f9      	bne.n	94a0 <blst_pairing_merge+0xa0>
    94ac:	2000      	movs	r0, #0
    94ae:	e7c3      	b.n	9438 <blst_pairing_merge+0x38>
    94b0:	682a      	ldr	r2, [r5, #0]
    94b2:	ea03 0102 	and.w	r1, r3, r2
    94b6:	f011 0f10 	tst.w	r1, #16
    94ba:	d112      	bne.n	94e2 <blst_pairing_merge+0xe2>
    94bc:	f012 0f10 	tst.w	r2, #16
    94c0:	d0dc      	beq.n	947c <blst_pairing_merge+0x7c>
    94c2:	f043 0310 	orr.w	r3, r3, #16
    94c6:	6023      	str	r3, [r4, #0]
    94c8:	f505 7313 	add.w	r3, r5, #588	; 0x24c
    94cc:	f504 7213 	add.w	r2, r4, #588	; 0x24c
    94d0:	f505 705b 	add.w	r0, r5, #876	; 0x36c
    94d4:	f853 1f04 	ldr.w	r1, [r3, #4]!
    94d8:	f842 1f04 	str.w	r1, [r2, #4]!
    94dc:	4283      	cmp	r3, r0
    94de:	d1f9      	bne.n	94d4 <blst_pairing_merge+0xd4>
    94e0:	e7cc      	b.n	947c <blst_pairing_merge+0x7c>
    94e2:	f504 7014 	add.w	r0, r4, #592	; 0x250
    94e6:	2300      	movs	r3, #0
    94e8:	f505 7214 	add.w	r2, r5, #592	; 0x250
    94ec:	4601      	mov	r1, r0
    94ee:	f7ff fab3 	bl	8a58 <POINTonE2_dadd>
    94f2:	e7c3      	b.n	947c <blst_pairing_merge+0x7c>
    94f4:	1f2b      	subs	r3, r5, #4
    94f6:	3c04      	subs	r4, #4
    94f8:	f605 456c 	addw	r5, r5, #3180	; 0xc6c
    94fc:	f853 2f04 	ldr.w	r2, [r3, #4]!
    9500:	f844 2f04 	str.w	r2, [r4, #4]!
    9504:	42ab      	cmp	r3, r5
    9506:	d1f9      	bne.n	94fc <blst_pairing_merge+0xfc>
    9508:	2000      	movs	r0, #0
    950a:	e795      	b.n	9438 <blst_pairing_merge+0x38>
    950c:	f104 0010 	add.w	r0, r4, #16
    9510:	f105 0210 	add.w	r2, r5, #16
    9514:	4601      	mov	r1, r0
    9516:	f7fb f9df 	bl	48d8 <mul_fp12>
    951a:	2000      	movs	r0, #0
    951c:	e78c      	b.n	9438 <blst_pairing_merge+0x38>
    951e:	2004      	movs	r0, #4
    9520:	e78a      	b.n	9438 <blst_pairing_merge+0x38>
    9522:	2004      	movs	r0, #4
    9524:	e788      	b.n	9438 <blst_pairing_merge+0x38>
    9526:	2004      	movs	r0, #4
    9528:	e786      	b.n	9438 <blst_pairing_merge+0x38>
    952a:	2000      	movs	r0, #0
    952c:	e784      	b.n	9438 <blst_pairing_merge+0x38>

0000952e <POINTonE2_sign>:
    952e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9532:	b0cb      	sub	sp, #300	; 0x12c
    9534:	4607      	mov	r7, r0
    9536:	f7ff fd13 	bl	8f60 <POINTonE2_mult_gls>
    953a:	f107 08c0 	add.w	r8, r7, #192	; 0xc0
    953e:	f107 04bc 	add.w	r4, r7, #188	; 0xbc
    9542:	f507 718e 	add.w	r1, r7, #284	; 0x11c
    9546:	4623      	mov	r3, r4
    9548:	2600      	movs	r6, #0
    954a:	f853 2f04 	ldr.w	r2, [r3, #4]!
    954e:	4316      	orrs	r6, r2
    9550:	428b      	cmp	r3, r1
    9552:	d1fa      	bne.n	954a <POINTonE2_sign+0x1c>
    9554:	4d3b      	ldr	r5, [pc, #236]	; (9644 <POINTonE2_sign+0x116>)
    9556:	f04f 0a0c 	mov.w	sl, #12
    955a:	f8cd a004 	str.w	sl, [sp, #4]
    955e:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 9648 <POINTonE2_sign+0x11a>
    9562:	f8cd 9000 	str.w	r9, [sp]
    9566:	462b      	mov	r3, r5
    9568:	4642      	mov	r2, r8
    956a:	4641      	mov	r1, r8
    956c:	a802      	add	r0, sp, #8
    956e:	f7f7 f9dd 	bl	92c <mul_mont_n>
    9572:	f107 0bf0 	add.w	fp, r7, #240	; 0xf0
    9576:	f8cd a004 	str.w	sl, [sp, #4]
    957a:	f8cd 9000 	str.w	r9, [sp]
    957e:	462b      	mov	r3, r5
    9580:	465a      	mov	r2, fp
    9582:	4659      	mov	r1, fp
    9584:	a80e      	add	r0, sp, #56	; 0x38
    9586:	f7f7 f9d1 	bl	92c <mul_mont_n>
    958a:	f8cd a000 	str.w	sl, [sp]
    958e:	462b      	mov	r3, r5
    9590:	aa0e      	add	r2, sp, #56	; 0x38
    9592:	a902      	add	r1, sp, #8
    9594:	4608      	mov	r0, r1
    9596:	f7f7 fb71 	bl	c7c <add_mod_n>
    959a:	a902      	add	r1, sp, #8
    959c:	a80e      	add	r0, sp, #56	; 0x38
    959e:	f7fb fd55 	bl	504c <flt_reciprocal_fp>
    95a2:	f8cd a004 	str.w	sl, [sp, #4]
    95a6:	f8cd 9000 	str.w	r9, [sp]
    95aa:	462b      	mov	r3, r5
    95ac:	aa0e      	add	r2, sp, #56	; 0x38
    95ae:	4641      	mov	r1, r8
    95b0:	a832      	add	r0, sp, #200	; 0xc8
    95b2:	f7f7 f9bb 	bl	92c <mul_mont_n>
    95b6:	f8cd a004 	str.w	sl, [sp, #4]
    95ba:	f8cd 9000 	str.w	r9, [sp]
    95be:	462b      	mov	r3, r5
    95c0:	aa0e      	add	r2, sp, #56	; 0x38
    95c2:	4659      	mov	r1, fp
    95c4:	a83e      	add	r0, sp, #248	; 0xf8
    95c6:	f7f7 f9b1 	bl	92c <mul_mont_n>
    95ca:	f8cd a000 	str.w	sl, [sp]
    95ce:	462b      	mov	r3, r5
    95d0:	2201      	movs	r2, #1
    95d2:	a93e      	add	r1, sp, #248	; 0xf8
    95d4:	4608      	mov	r0, r1
    95d6:	f7f8 f9e5 	bl	19a4 <cneg_mod_n>
    95da:	464b      	mov	r3, r9
    95dc:	462a      	mov	r2, r5
    95de:	a932      	add	r1, sp, #200	; 0xc8
    95e0:	a81a      	add	r0, sp, #104	; 0x68
    95e2:	f7fe f8f3 	bl	77cc <sqr_mont_384x>
    95e6:	f8cd 9000 	str.w	r9, [sp]
    95ea:	462b      	mov	r3, r5
    95ec:	aa1a      	add	r2, sp, #104	; 0x68
    95ee:	4639      	mov	r1, r7
    95f0:	4638      	mov	r0, r7
    95f2:	f7fa fe5d 	bl	42b0 <mul_mont_384x>
    95f6:	f8cd 9000 	str.w	r9, [sp]
    95fa:	462b      	mov	r3, r5
    95fc:	aa32      	add	r2, sp, #200	; 0xc8
    95fe:	a91a      	add	r1, sp, #104	; 0x68
    9600:	4608      	mov	r0, r1
    9602:	f7fa fe55 	bl	42b0 <mul_mont_384x>
    9606:	f107 0060 	add.w	r0, r7, #96	; 0x60
    960a:	f8cd 9000 	str.w	r9, [sp]
    960e:	462b      	mov	r3, r5
    9610:	aa1a      	add	r2, sp, #104	; 0x68
    9612:	4601      	mov	r1, r0
    9614:	f7fa fe4c 	bl	42b0 <mul_mont_384x>
    9618:	1e73      	subs	r3, r6, #1
    961a:	ea23 0606 	bic.w	r6, r3, r6
    961e:	17f6      	asrs	r6, r6, #31
    9620:	f505 6164 	add.w	r1, r5, #3648	; 0xe40
    9624:	f505 656a 	add.w	r5, r5, #3744	; 0xea0
    9628:	f851 0b04 	ldr.w	r0, [r1], #4
    962c:	f854 2f04 	ldr.w	r2, [r4, #4]!
    9630:	4042      	eors	r2, r0
    9632:	4032      	ands	r2, r6
    9634:	4042      	eors	r2, r0
    9636:	6022      	str	r2, [r4, #0]
    9638:	42a9      	cmp	r1, r5
    963a:	d1f5      	bne.n	9628 <POINTonE2_sign+0xfa>
    963c:	b04b      	add	sp, #300	; 0x12c
    963e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9642:	bf00      	nop
    9644:	00015a08 	.word	0x00015a08
    9648:	fffcfffd 	.word	0xfffcfffd

0000964c <blst_sk_to_pk_in_g2>:
    964c:	b508      	push	{r3, lr}
    964e:	460a      	mov	r2, r1
    9650:	4901      	ldr	r1, [pc, #4]	; (9658 <blst_sk_to_pk_in_g2+0xc>)
    9652:	f7ff ff6c 	bl	952e <POINTonE2_sign>
    9656:	bd08      	pop	{r3, pc}
    9658:	00016788 	.word	0x00016788

0000965c <blst_sign_pk_in_g1>:
    965c:	b508      	push	{r3, lr}
    965e:	f7ff ff66 	bl	952e <POINTonE2_sign>
    9662:	bd08      	pop	{r3, pc}

00009664 <blst_sk_to_pk2_in_g2>:
    9664:	b530      	push	{r4, r5, lr}
    9666:	b0c9      	sub	sp, #292	; 0x124
    9668:	4605      	mov	r5, r0
    966a:	460c      	mov	r4, r1
    966c:	4914      	ldr	r1, [pc, #80]	; (96c0 <blst_sk_to_pk2_in_g2+0x5c>)
    966e:	4668      	mov	r0, sp
    9670:	f7ff ff5d 	bl	952e <POINTonE2_sign>
    9674:	b14c      	cbz	r4, 968a <blst_sk_to_pk2_in_g2+0x26>
    9676:	f1ad 0304 	sub.w	r3, sp, #4
    967a:	1f21      	subs	r1, r4, #4
    967c:	a82f      	add	r0, sp, #188	; 0xbc
    967e:	f853 2f04 	ldr.w	r2, [r3, #4]!
    9682:	f841 2f04 	str.w	r2, [r1, #4]!
    9686:	4283      	cmp	r3, r0
    9688:	d1f9      	bne.n	967e <blst_sk_to_pk2_in_g2+0x1a>
    968a:	b1bd      	cbz	r5, 96bc <blst_sk_to_pk2_in_g2+0x58>
    968c:	4669      	mov	r1, sp
    968e:	4628      	mov	r0, r5
    9690:	f7fe f954 	bl	793c <POINTonE2_Serialize_BE>
    9694:	0100      	lsls	r0, r0, #4
    9696:	f000 0220 	and.w	r2, r0, #32
    969a:	7828      	ldrb	r0, [r5, #0]
    969c:	4310      	orrs	r0, r2
    969e:	ab2f      	add	r3, sp, #188	; 0xbc
    96a0:	ac47      	add	r4, sp, #284	; 0x11c
    96a2:	2200      	movs	r2, #0
    96a4:	f853 1f04 	ldr.w	r1, [r3, #4]!
    96a8:	430a      	orrs	r2, r1
    96aa:	42a3      	cmp	r3, r4
    96ac:	d1fa      	bne.n	96a4 <blst_sk_to_pk2_in_g2+0x40>
    96ae:	1e53      	subs	r3, r2, #1
    96b0:	ea23 0202 	bic.w	r2, r3, r2
    96b4:	0fd2      	lsrs	r2, r2, #31
    96b6:	ea40 1282 	orr.w	r2, r0, r2, lsl #6
    96ba:	702a      	strb	r2, [r5, #0]
    96bc:	b049      	add	sp, #292	; 0x124
    96be:	bd30      	pop	{r4, r5, pc}
    96c0:	00016788 	.word	0x00016788

000096c4 <blst_sign_pk2_in_g1>:
    96c4:	b530      	push	{r4, r5, lr}
    96c6:	b0c9      	sub	sp, #292	; 0x124
    96c8:	4605      	mov	r5, r0
    96ca:	460c      	mov	r4, r1
    96cc:	4611      	mov	r1, r2
    96ce:	461a      	mov	r2, r3
    96d0:	4668      	mov	r0, sp
    96d2:	f7ff ff2c 	bl	952e <POINTonE2_sign>
    96d6:	b14c      	cbz	r4, 96ec <blst_sign_pk2_in_g1+0x28>
    96d8:	f1ad 0304 	sub.w	r3, sp, #4
    96dc:	1f21      	subs	r1, r4, #4
    96de:	a82f      	add	r0, sp, #188	; 0xbc
    96e0:	f853 2f04 	ldr.w	r2, [r3, #4]!
    96e4:	f841 2f04 	str.w	r2, [r1, #4]!
    96e8:	4283      	cmp	r3, r0
    96ea:	d1f9      	bne.n	96e0 <blst_sign_pk2_in_g1+0x1c>
    96ec:	b1bd      	cbz	r5, 971e <blst_sign_pk2_in_g1+0x5a>
    96ee:	4669      	mov	r1, sp
    96f0:	4628      	mov	r0, r5
    96f2:	f7fe f923 	bl	793c <POINTonE2_Serialize_BE>
    96f6:	0100      	lsls	r0, r0, #4
    96f8:	f000 0220 	and.w	r2, r0, #32
    96fc:	7828      	ldrb	r0, [r5, #0]
    96fe:	4310      	orrs	r0, r2
    9700:	ab2f      	add	r3, sp, #188	; 0xbc
    9702:	ac47      	add	r4, sp, #284	; 0x11c
    9704:	2200      	movs	r2, #0
    9706:	f853 1f04 	ldr.w	r1, [r3, #4]!
    970a:	430a      	orrs	r2, r1
    970c:	42a3      	cmp	r3, r4
    970e:	d1fa      	bne.n	9706 <blst_sign_pk2_in_g1+0x42>
    9710:	1e53      	subs	r3, r2, #1
    9712:	ea23 0202 	bic.w	r2, r3, r2
    9716:	0fd2      	lsrs	r2, r2, #31
    9718:	ea40 1282 	orr.w	r2, r0, r2, lsl #6
    971c:	702a      	strb	r2, [r5, #0]
    971e:	b049      	add	sp, #292	; 0x124
    9720:	bd30      	pop	{r4, r5, pc}

00009722 <map_to_isogenous_E2>:
    9722:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9726:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
    972a:	4606      	mov	r6, r0
    972c:	9103      	str	r1, [sp, #12]
    972e:	4dc5      	ldr	r5, [pc, #788]	; (9a44 <map_to_isogenous_E2+0x322>)
    9730:	4cc5      	ldr	r4, [pc, #788]	; (9a48 <map_to_isogenous_E2+0x326>)
    9732:	462b      	mov	r3, r5
    9734:	4622      	mov	r2, r4
    9736:	a8e8      	add	r0, sp, #928	; 0x3a0
    9738:	f7fe f848 	bl	77cc <sqr_mont_384x>
    973c:	f8df 830c 	ldr.w	r8, [pc, #780]	; 9a4c <map_to_isogenous_E2+0x32a>
    9740:	9500      	str	r5, [sp, #0]
    9742:	4623      	mov	r3, r4
    9744:	aae8      	add	r2, sp, #928	; 0x3a0
    9746:	f508 61bc 	add.w	r1, r8, #1504	; 0x5e0
    974a:	a8a0      	add	r0, sp, #640	; 0x280
    974c:	f7fa fdb0 	bl	42b0 <mul_mont_384x>
    9750:	462b      	mov	r3, r5
    9752:	4622      	mov	r2, r4
    9754:	a9a0      	add	r1, sp, #640	; 0x280
    9756:	a8d0      	add	r0, sp, #832	; 0x340
    9758:	f7fe f838 	bl	77cc <sqr_mont_384x>
    975c:	270c      	movs	r7, #12
    975e:	9700      	str	r7, [sp, #0]
    9760:	4623      	mov	r3, r4
    9762:	aaa0      	add	r2, sp, #640	; 0x280
    9764:	a9d0      	add	r1, sp, #832	; 0x340
    9766:	4608      	mov	r0, r1
    9768:	f7f7 fa88 	bl	c7c <add_mod_n>
    976c:	9700      	str	r7, [sp, #0]
    976e:	4623      	mov	r3, r4
    9770:	aaac      	add	r2, sp, #688	; 0x2b0
    9772:	a9dc      	add	r1, sp, #880	; 0x370
    9774:	4608      	mov	r0, r1
    9776:	f7f7 fa81 	bl	c7c <add_mod_n>
    977a:	9700      	str	r7, [sp, #0]
    977c:	4623      	mov	r3, r4
    977e:	f104 0290 	add.w	r2, r4, #144	; 0x90
    9782:	a9d0      	add	r1, sp, #832	; 0x340
    9784:	4630      	mov	r0, r6
    9786:	f7f7 fa79 	bl	c7c <add_mod_n>
    978a:	9700      	str	r7, [sp, #0]
    978c:	4623      	mov	r3, r4
    978e:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
    9792:	a9dc      	add	r1, sp, #880	; 0x370
    9794:	f106 0030 	add.w	r0, r6, #48	; 0x30
    9798:	f7f7 fa70 	bl	c7c <add_mod_n>
    979c:	9500      	str	r5, [sp, #0]
    979e:	4623      	mov	r3, r4
    97a0:	f508 62c8 	add.w	r2, r8, #1600	; 0x640
    97a4:	4631      	mov	r1, r6
    97a6:	4630      	mov	r0, r6
    97a8:	f7fa fd82 	bl	42b0 <mul_mont_384x>
    97ac:	9500      	str	r5, [sp, #0]
    97ae:	4623      	mov	r3, r4
    97b0:	4632      	mov	r2, r6
    97b2:	a9a0      	add	r1, sp, #640	; 0x280
    97b4:	4608      	mov	r0, r1
    97b6:	f7fa fd7b 	bl	42b0 <mul_mont_384x>
    97ba:	f106 09c0 	add.w	r9, r6, #192	; 0xc0
    97be:	9500      	str	r5, [sp, #0]
    97c0:	4623      	mov	r3, r4
    97c2:	aad0      	add	r2, sp, #832	; 0x340
    97c4:	f508 61d4 	add.w	r1, r8, #1696	; 0x6a0
    97c8:	4648      	mov	r0, r9
    97ca:	f7fa fd71 	bl	42b0 <mul_mont_384x>
    97ce:	f106 02bc 	add.w	r2, r6, #188	; 0xbc
    97d2:	f506 748e 	add.w	r4, r6, #284	; 0x11c
    97d6:	4613      	mov	r3, r2
    97d8:	2100      	movs	r1, #0
    97da:	f853 0f04 	ldr.w	r0, [r3, #4]!
    97de:	4301      	orrs	r1, r0
    97e0:	42a3      	cmp	r3, r4
    97e2:	d1fa      	bne.n	97da <map_to_isogenous_E2+0xb8>
    97e4:	1e4c      	subs	r4, r1, #1
    97e6:	ea24 0101 	bic.w	r1, r4, r1
    97ea:	17cc      	asrs	r4, r1, #31
    97ec:	4d97      	ldr	r5, [pc, #604]	; (9a4c <map_to_isogenous_E2+0x32a>)
    97ee:	f205 61fc 	addw	r1, r5, #1788	; 0x6fc
    97f2:	f205 755c 	addw	r5, r5, #1884	; 0x75c
    97f6:	f852 0f04 	ldr.w	r0, [r2, #4]!
    97fa:	f851 3f04 	ldr.w	r3, [r1, #4]!
    97fe:	4043      	eors	r3, r0
    9800:	4023      	ands	r3, r4
    9802:	4043      	eors	r3, r0
    9804:	6013      	str	r3, [r2, #0]
    9806:	42a9      	cmp	r1, r5
    9808:	d1f5      	bne.n	97f6 <map_to_isogenous_E2+0xd4>
    980a:	4c8e      	ldr	r4, [pc, #568]	; (9a44 <map_to_isogenous_E2+0x322>)
    980c:	4d8e      	ldr	r5, [pc, #568]	; (9a48 <map_to_isogenous_E2+0x326>)
    980e:	4623      	mov	r3, r4
    9810:	462a      	mov	r2, r5
    9812:	4649      	mov	r1, r9
    9814:	a8d0      	add	r0, sp, #832	; 0x340
    9816:	f7fd ffd9 	bl	77cc <sqr_mont_384x>
    981a:	9400      	str	r4, [sp, #0]
    981c:	462b      	mov	r3, r5
    981e:	aad0      	add	r2, sp, #832	; 0x340
    9820:	4649      	mov	r1, r9
    9822:	a870      	add	r0, sp, #448	; 0x1c0
    9824:	f7fa fd44 	bl	42b0 <mul_mont_384x>
    9828:	f8df a220 	ldr.w	sl, [pc, #544]	; 9a4c <map_to_isogenous_E2+0x32a>
    982c:	9400      	str	r4, [sp, #0]
    982e:	462b      	mov	r3, r5
    9830:	aad0      	add	r2, sp, #832	; 0x340
    9832:	f50a 61ec 	add.w	r1, sl, #1888	; 0x760
    9836:	4610      	mov	r0, r2
    9838:	f7fa fd3a 	bl	42b0 <mul_mont_384x>
    983c:	4623      	mov	r3, r4
    983e:	462a      	mov	r2, r5
    9840:	4631      	mov	r1, r6
    9842:	a888      	add	r0, sp, #544	; 0x220
    9844:	f7fd ffc2 	bl	77cc <sqr_mont_384x>
    9848:	f04f 080c 	mov.w	r8, #12
    984c:	f8cd 8000 	str.w	r8, [sp]
    9850:	462b      	mov	r3, r5
    9852:	aad0      	add	r2, sp, #832	; 0x340
    9854:	a988      	add	r1, sp, #544	; 0x220
    9856:	4608      	mov	r0, r1
    9858:	f7f7 fa10 	bl	c7c <add_mod_n>
    985c:	f8cd 8000 	str.w	r8, [sp]
    9860:	462b      	mov	r3, r5
    9862:	aadc      	add	r2, sp, #880	; 0x370
    9864:	a994      	add	r1, sp, #592	; 0x250
    9866:	4608      	mov	r0, r1
    9868:	f7f7 fa08 	bl	c7c <add_mod_n>
    986c:	9400      	str	r4, [sp, #0]
    986e:	462b      	mov	r3, r5
    9870:	4632      	mov	r2, r6
    9872:	a988      	add	r1, sp, #544	; 0x220
    9874:	4608      	mov	r0, r1
    9876:	f7fa fd1b 	bl	42b0 <mul_mont_384x>
    987a:	9400      	str	r4, [sp, #0]
    987c:	462b      	mov	r3, r5
    987e:	aa70      	add	r2, sp, #448	; 0x1c0
    9880:	f50a 61c8 	add.w	r1, sl, #1600	; 0x640
    9884:	a8d0      	add	r0, sp, #832	; 0x340
    9886:	f7fa fd13 	bl	42b0 <mul_mont_384x>
    988a:	f8cd 8000 	str.w	r8, [sp]
    988e:	462b      	mov	r3, r5
    9890:	aad0      	add	r2, sp, #832	; 0x340
    9892:	a988      	add	r1, sp, #544	; 0x220
    9894:	4608      	mov	r0, r1
    9896:	f7f7 f9f1 	bl	c7c <add_mod_n>
    989a:	f8cd 8000 	str.w	r8, [sp]
    989e:	462b      	mov	r3, r5
    98a0:	aadc      	add	r2, sp, #880	; 0x370
    98a2:	a994      	add	r1, sp, #592	; 0x250
    98a4:	4608      	mov	r0, r1
    98a6:	f7f7 f9e9 	bl	c7c <add_mod_n>
    98aa:	4623      	mov	r3, r4
    98ac:	462a      	mov	r2, r5
    98ae:	a970      	add	r1, sp, #448	; 0x1c0
    98b0:	a8b8      	add	r0, sp, #736	; 0x2e0
    98b2:	f7fd ff8b 	bl	77cc <sqr_mont_384x>
    98b6:	9400      	str	r4, [sp, #0]
    98b8:	462b      	mov	r3, r5
    98ba:	aa70      	add	r2, sp, #448	; 0x1c0
    98bc:	a988      	add	r1, sp, #544	; 0x220
    98be:	a8d0      	add	r0, sp, #832	; 0x340
    98c0:	f7fa fcf6 	bl	42b0 <mul_mont_384x>
    98c4:	9400      	str	r4, [sp, #0]
    98c6:	462b      	mov	r3, r5
    98c8:	aad0      	add	r2, sp, #832	; 0x340
    98ca:	a9b8      	add	r1, sp, #736	; 0x2e0
    98cc:	4608      	mov	r0, r1
    98ce:	f7fa fcef 	bl	42b0 <mul_mont_384x>
    98d2:	f106 0760 	add.w	r7, r6, #96	; 0x60
    98d6:	f8cd 8004 	str.w	r8, [sp, #4]
    98da:	9400      	str	r4, [sp, #0]
    98dc:	462b      	mov	r3, r5
    98de:	aab8      	add	r2, sp, #736	; 0x2e0
    98e0:	4611      	mov	r1, r2
    98e2:	a804      	add	r0, sp, #16
    98e4:	f7f7 f822 	bl	92c <mul_mont_n>
    98e8:	f8cd 8004 	str.w	r8, [sp, #4]
    98ec:	9400      	str	r4, [sp, #0]
    98ee:	462b      	mov	r3, r5
    98f0:	aac4      	add	r2, sp, #784	; 0x310
    98f2:	4611      	mov	r1, r2
    98f4:	a810      	add	r0, sp, #64	; 0x40
    98f6:	f7f7 f819 	bl	92c <mul_mont_n>
    98fa:	f8cd 8000 	str.w	r8, [sp]
    98fe:	462b      	mov	r3, r5
    9900:	aa10      	add	r2, sp, #64	; 0x40
    9902:	a904      	add	r1, sp, #16
    9904:	4608      	mov	r0, r1
    9906:	f7f7 f9b9 	bl	c7c <add_mod_n>
    990a:	a904      	add	r1, sp, #16
    990c:	a81c      	add	r0, sp, #112	; 0x70
    990e:	f7fc fce9 	bl	62e4 <recip_sqrt_fp>
    9912:	4683      	mov	fp, r0
    9914:	9400      	str	r4, [sp, #0]
    9916:	462b      	mov	r3, r5
    9918:	f50a 62f8 	add.w	r2, sl, #1984	; 0x7c0
    991c:	a9b8      	add	r1, sp, #736	; 0x2e0
    991e:	a840      	add	r0, sp, #256	; 0x100
    9920:	f7fa fcc6 	bl	42b0 <mul_mont_384x>
    9924:	f8cd 8004 	str.w	r8, [sp, #4]
    9928:	9400      	str	r4, [sp, #0]
    992a:	462b      	mov	r3, r5
    992c:	f50a 6202 	add.w	r2, sl, #2080	; 0x820
    9930:	a904      	add	r1, sp, #16
    9932:	a828      	add	r0, sp, #160	; 0xa0
    9934:	f7f6 fffa 	bl	92c <mul_mont_n>
    9938:	f8cd 8004 	str.w	r8, [sp, #4]
    993c:	9400      	str	r4, [sp, #0]
    993e:	462b      	mov	r3, r5
    9940:	f50a 6205 	add.w	r2, sl, #2128	; 0x850
    9944:	a91c      	add	r1, sp, #112	; 0x70
    9946:	a834      	add	r0, sp, #208	; 0xd0
    9948:	f7f6 fff0 	bl	92c <mul_mont_n>
    994c:	f1cb 0400 	rsb	r4, fp, #0
    9950:	ad04      	add	r5, sp, #16
    9952:	a828      	add	r0, sp, #160	; 0xa0
    9954:	f10d 0840 	add.w	r8, sp, #64	; 0x40
    9958:	462a      	mov	r2, r5
    995a:	6813      	ldr	r3, [r2, #0]
    995c:	f850 1b04 	ldr.w	r1, [r0], #4
    9960:	404b      	eors	r3, r1
    9962:	4023      	ands	r3, r4
    9964:	404b      	eors	r3, r1
    9966:	f842 3b04 	str.w	r3, [r2], #4
    996a:	4542      	cmp	r2, r8
    996c:	d1f5      	bne.n	995a <map_to_isogenous_E2+0x238>
    996e:	aa1c      	add	r2, sp, #112	; 0x70
    9970:	a934      	add	r1, sp, #208	; 0xd0
    9972:	a828      	add	r0, sp, #160	; 0xa0
    9974:	468c      	mov	ip, r1
    9976:	6813      	ldr	r3, [r2, #0]
    9978:	f85c 1b04 	ldr.w	r1, [ip], #4
    997c:	404b      	eors	r3, r1
    997e:	4023      	ands	r3, r4
    9980:	404b      	eors	r3, r1
    9982:	f842 3b04 	str.w	r3, [r2], #4
    9986:	4282      	cmp	r2, r0
    9988:	d1f5      	bne.n	9976 <map_to_isogenous_E2+0x254>
    998a:	a9b7      	add	r1, sp, #732	; 0x2dc
    998c:	aa3f      	add	r2, sp, #252	; 0xfc
    998e:	a8cf      	add	r0, sp, #828	; 0x33c
    9990:	46a4      	mov	ip, r4
    9992:	f852 4f04 	ldr.w	r4, [r2, #4]!
    9996:	f851 3f04 	ldr.w	r3, [r1, #4]!
    999a:	4063      	eors	r3, r4
    999c:	ea03 030c 	and.w	r3, r3, ip
    99a0:	4063      	eors	r3, r4
    99a2:	6013      	str	r3, [r2, #0]
    99a4:	4281      	cmp	r1, r0
    99a6:	d1f4      	bne.n	9992 <map_to_isogenous_E2+0x270>
    99a8:	4664      	mov	r4, ip
    99aa:	f8df a09c 	ldr.w	sl, [pc, #156]	; 9a48 <map_to_isogenous_E2+0x326>
    99ae:	f04f 0b0c 	mov.w	fp, #12
    99b2:	f8cd b004 	str.w	fp, [sp, #4]
    99b6:	4b23      	ldr	r3, [pc, #140]	; (9a44 <map_to_isogenous_E2+0x322>)
    99b8:	9300      	str	r3, [sp, #0]
    99ba:	4653      	mov	r3, sl
    99bc:	aa1c      	add	r2, sp, #112	; 0x70
    99be:	a904      	add	r1, sp, #16
    99c0:	4608      	mov	r0, r1
    99c2:	f7f6 ffb3 	bl	92c <mul_mont_n>
    99c6:	f8cd b000 	str.w	fp, [sp]
    99ca:	4653      	mov	r3, sl
    99cc:	aa04      	add	r2, sp, #16
    99ce:	a940      	add	r1, sp, #256	; 0x100
    99d0:	a810      	add	r0, sp, #64	; 0x40
    99d2:	f7f6 fdfd 	bl	5d0 <sub_mod_n>
    99d6:	f8cd b000 	str.w	fp, [sp]
    99da:	4653      	mov	r3, sl
    99dc:	aa04      	add	r2, sp, #16
    99de:	a940      	add	r1, sp, #256	; 0x100
    99e0:	4610      	mov	r0, r2
    99e2:	f7f7 f94b 	bl	c7c <add_mod_n>
    99e6:	462b      	mov	r3, r5
    99e8:	2200      	movs	r2, #0
    99ea:	f853 1b04 	ldr.w	r1, [r3], #4
    99ee:	430a      	orrs	r2, r1
    99f0:	4543      	cmp	r3, r8
    99f2:	d1fa      	bne.n	99ea <map_to_isogenous_E2+0x2c8>
    99f4:	1e50      	subs	r0, r2, #1
    99f6:	ea20 0202 	bic.w	r2, r0, r2
    99fa:	17d0      	asrs	r0, r2, #31
    99fc:	aa10      	add	r2, sp, #64	; 0x40
    99fe:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    9a02:	f852 3b04 	ldr.w	r3, [r2], #4
    9a06:	6829      	ldr	r1, [r5, #0]
    9a08:	404b      	eors	r3, r1
    9a0a:	4003      	ands	r3, r0
    9a0c:	404b      	eors	r3, r1
    9a0e:	f845 3b04 	str.w	r3, [r5], #4
    9a12:	4562      	cmp	r2, ip
    9a14:	d1f5      	bne.n	9a02 <map_to_isogenous_E2+0x2e0>
    9a16:	f8df 8030 	ldr.w	r8, [pc, #48]	; 9a48 <map_to_isogenous_E2+0x326>
    9a1a:	f04f 0b0c 	mov.w	fp, #12
    9a1e:	f8cd b000 	str.w	fp, [sp]
    9a22:	4643      	mov	r3, r8
    9a24:	2201      	movs	r2, #1
    9a26:	a904      	add	r1, sp, #16
    9a28:	4608      	mov	r0, r1
    9a2a:	f7f6 fe39 	bl	6a0 <rshift_mod_n>
    9a2e:	a904      	add	r1, sp, #16
    9a30:	4638      	mov	r0, r7
    9a32:	f7fc fc57 	bl	62e4 <recip_sqrt_fp>
    9a36:	f106 0590 	add.w	r5, r6, #144	; 0x90
    9a3a:	f8cd b000 	str.w	fp, [sp]
    9a3e:	4643      	mov	r3, r8
    9a40:	2201      	movs	r2, #1
    9a42:	e005      	b.n	9a50 <map_to_isogenous_E2+0x32e>
    9a44:	fffcfffd 	.word	0xfffcfffd
    9a48:	00015a08 	.word	0x00015a08
    9a4c:	00016b00 	.word	0x00016b00
    9a50:	a94c      	add	r1, sp, #304	; 0x130
    9a52:	4628      	mov	r0, r5
    9a54:	f7f6 fe24 	bl	6a0 <rshift_mod_n>
    9a58:	f8cd b004 	str.w	fp, [sp, #4]
    9a5c:	f8df a248 	ldr.w	sl, [pc, #584]	; 9ca8 <map_to_isogenous_E2+0x586>
    9a60:	f8cd a000 	str.w	sl, [sp]
    9a64:	4643      	mov	r3, r8
    9a66:	463a      	mov	r2, r7
    9a68:	4629      	mov	r1, r5
    9a6a:	4628      	mov	r0, r5
    9a6c:	f7f6 ff5e 	bl	92c <mul_mont_n>
    9a70:	f8cd b004 	str.w	fp, [sp, #4]
    9a74:	f8cd a000 	str.w	sl, [sp]
    9a78:	4643      	mov	r3, r8
    9a7a:	aa04      	add	r2, sp, #16
    9a7c:	4639      	mov	r1, r7
    9a7e:	4638      	mov	r0, r7
    9a80:	f7f6 ff54 	bl	92c <mul_mont_n>
    9a84:	ab40      	add	r3, sp, #256	; 0x100
    9a86:	463a      	mov	r2, r7
    9a88:	4639      	mov	r1, r7
    9a8a:	4638      	mov	r0, r7
    9a8c:	f7fe f9d2 	bl	7e34 <sqrt_align_fp2>
    9a90:	f8cd b004 	str.w	fp, [sp, #4]
    9a94:	f8cd a000 	str.w	sl, [sp]
    9a98:	4643      	mov	r3, r8
    9a9a:	aa1c      	add	r2, sp, #112	; 0x70
    9a9c:	4639      	mov	r1, r7
    9a9e:	4638      	mov	r0, r7
    9aa0:	f7f6 ff44 	bl	92c <mul_mont_n>
    9aa4:	f8cd b004 	str.w	fp, [sp, #4]
    9aa8:	f8cd a000 	str.w	sl, [sp]
    9aac:	4643      	mov	r3, r8
    9aae:	aa1c      	add	r2, sp, #112	; 0x70
    9ab0:	4629      	mov	r1, r5
    9ab2:	4628      	mov	r0, r5
    9ab4:	f7f6 ff3a 	bl	92c <mul_mont_n>
    9ab8:	f8cd b000 	str.w	fp, [sp]
    9abc:	4643      	mov	r3, r8
    9abe:	2201      	movs	r2, #1
    9ac0:	4629      	mov	r1, r5
    9ac2:	4628      	mov	r0, r5
    9ac4:	f7f7 ff6e 	bl	19a4 <cneg_mod_n>
    9ac8:	f8cd a000 	str.w	sl, [sp]
    9acc:	4643      	mov	r3, r8
    9ace:	aad0      	add	r2, sp, #832	; 0x340
    9ad0:	4639      	mov	r1, r7
    9ad2:	4638      	mov	r0, r7
    9ad4:	f7fa fbec 	bl	42b0 <mul_mont_384x>
    9ad8:	f8cd a000 	str.w	sl, [sp]
    9adc:	4643      	mov	r3, r8
    9ade:	aae8      	add	r2, sp, #928	; 0x3a0
    9ae0:	4639      	mov	r1, r7
    9ae2:	a858      	add	r0, sp, #352	; 0x160
    9ae4:	f7fa fbe4 	bl	42b0 <mul_mont_384x>
    9ae8:	f8cd a000 	str.w	sl, [sp]
    9aec:	4643      	mov	r3, r8
    9aee:	9a03      	ldr	r2, [sp, #12]
    9af0:	a958      	add	r1, sp, #352	; 0x160
    9af2:	4608      	mov	r0, r1
    9af4:	f7fa fbdc 	bl	42b0 <mul_mont_384x>
    9af8:	1f31      	subs	r1, r6, #4
    9afa:	aaa0      	add	r2, sp, #640	; 0x280
    9afc:	f50d 7c38 	add.w	ip, sp, #736	; 0x2e0
    9b00:	f852 0b04 	ldr.w	r0, [r2], #4
    9b04:	f851 3f04 	ldr.w	r3, [r1, #4]!
    9b08:	4043      	eors	r3, r0
    9b0a:	4023      	ands	r3, r4
    9b0c:	4043      	eors	r3, r0
    9b0e:	600b      	str	r3, [r1, #0]
    9b10:	4562      	cmp	r2, ip
    9b12:	d1f5      	bne.n	9b00 <map_to_isogenous_E2+0x3de>
    9b14:	f106 015c 	add.w	r1, r6, #92	; 0x5c
    9b18:	aa58      	add	r2, sp, #352	; 0x160
    9b1a:	f50d 7ce0 	add.w	ip, sp, #448	; 0x1c0
    9b1e:	f852 0b04 	ldr.w	r0, [r2], #4
    9b22:	f851 3f04 	ldr.w	r3, [r1, #4]!
    9b26:	4043      	eors	r3, r0
    9b28:	4023      	ands	r3, r4
    9b2a:	4043      	eors	r3, r0
    9b2c:	600b      	str	r3, [r1, #0]
    9b2e:	4562      	cmp	r2, ip
    9b30:	d1f5      	bne.n	9b1e <map_to_isogenous_E2+0x3fc>
    9b32:	f8df 8174 	ldr.w	r8, [pc, #372]	; 9ca8 <map_to_isogenous_E2+0x586>
    9b36:	4c5d      	ldr	r4, [pc, #372]	; (9cac <map_to_isogenous_E2+0x58a>)
    9b38:	f04f 0a0c 	mov.w	sl, #12
    9b3c:	f8cd a000 	str.w	sl, [sp]
    9b40:	4643      	mov	r3, r8
    9b42:	4622      	mov	r2, r4
    9b44:	f8dd b00c 	ldr.w	fp, [sp, #12]
    9b48:	4659      	mov	r1, fp
    9b4a:	a840      	add	r0, sp, #256	; 0x100
    9b4c:	f7f7 fa20 	bl	f90 <from_mont_n>
    9b50:	f8cd a000 	str.w	sl, [sp]
    9b54:	4643      	mov	r3, r8
    9b56:	4622      	mov	r2, r4
    9b58:	4659      	mov	r1, fp
    9b5a:	3130      	adds	r1, #48	; 0x30
    9b5c:	a84c      	add	r0, sp, #304	; 0x130
    9b5e:	f7f7 fa17 	bl	f90 <from_mont_n>
    9b62:	4652      	mov	r2, sl
    9b64:	4621      	mov	r1, r4
    9b66:	a840      	add	r0, sp, #256	; 0x100
    9b68:	f7f7 fb27 	bl	11ba <sgn0_pty_mod_n>
    9b6c:	4680      	mov	r8, r0
    9b6e:	4652      	mov	r2, sl
    9b70:	4621      	mov	r1, r4
    9b72:	a84c      	add	r0, sp, #304	; 0x130
    9b74:	f7f7 fb21 	bl	11ba <sgn0_pty_mod_n>
    9b78:	aa4b      	add	r2, sp, #300	; 0x12c
    9b7a:	ab40      	add	r3, sp, #256	; 0x100
    9b7c:	f50d 7cae 	add.w	ip, sp, #348	; 0x15c
    9b80:	2100      	movs	r1, #0
    9b82:	f852 4f04 	ldr.w	r4, [r2, #4]!
    9b86:	4321      	orrs	r1, r4
    9b88:	4562      	cmp	r2, ip
    9b8a:	d1fa      	bne.n	9b82 <map_to_isogenous_E2+0x460>
    9b8c:	f101 3cff 	add.w	ip, r1, #4294967295
    9b90:	ea2c 0101 	bic.w	r1, ip, r1
    9b94:	ea4f 7cd1 	mov.w	ip, r1, lsr #31
    9b98:	ea08 71e1 	and.w	r1, r8, r1, asr #31
    9b9c:	f10c 3cff 	add.w	ip, ip, #4294967295
    9ba0:	ea0c 0c00 	and.w	ip, ip, r0
    9ba4:	ea4c 0c01 	orr.w	ip, ip, r1
    9ba8:	f103 0430 	add.w	r4, r3, #48	; 0x30
    9bac:	2200      	movs	r2, #0
    9bae:	f853 1b04 	ldr.w	r1, [r3], #4
    9bb2:	430a      	orrs	r2, r1
    9bb4:	42a3      	cmp	r3, r4
    9bb6:	d1fa      	bne.n	9bae <map_to_isogenous_E2+0x48c>
    9bb8:	1e54      	subs	r4, r2, #1
    9bba:	ea24 0202 	bic.w	r2, r4, r2
    9bbe:	0fd4      	lsrs	r4, r2, #31
    9bc0:	ea00 70e2 	and.w	r0, r0, r2, asr #31
    9bc4:	3c01      	subs	r4, #1
    9bc6:	ea04 0408 	and.w	r4, r4, r8
    9bca:	4304      	orrs	r4, r0
    9bcc:	f004 0401 	and.w	r4, r4, #1
    9bd0:	f00c 0c02 	and.w	ip, ip, #2
    9bd4:	ea44 040c 	orr.w	r4, r4, ip
    9bd8:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 9ca8 <map_to_isogenous_E2+0x586>
    9bdc:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 9cac <map_to_isogenous_E2+0x58a>
    9be0:	f04f 0b0c 	mov.w	fp, #12
    9be4:	f8cd b000 	str.w	fp, [sp]
    9be8:	4643      	mov	r3, r8
    9bea:	4652      	mov	r2, sl
    9bec:	4639      	mov	r1, r7
    9bee:	a840      	add	r0, sp, #256	; 0x100
    9bf0:	f7f7 f9ce 	bl	f90 <from_mont_n>
    9bf4:	f8cd b000 	str.w	fp, [sp]
    9bf8:	4643      	mov	r3, r8
    9bfa:	4652      	mov	r2, sl
    9bfc:	4629      	mov	r1, r5
    9bfe:	a84c      	add	r0, sp, #304	; 0x130
    9c00:	f7f7 f9c6 	bl	f90 <from_mont_n>
    9c04:	465a      	mov	r2, fp
    9c06:	4651      	mov	r1, sl
    9c08:	a840      	add	r0, sp, #256	; 0x100
    9c0a:	f7f7 fad6 	bl	11ba <sgn0_pty_mod_n>
    9c0e:	4680      	mov	r8, r0
    9c10:	465a      	mov	r2, fp
    9c12:	4651      	mov	r1, sl
    9c14:	a84c      	add	r0, sp, #304	; 0x130
    9c16:	f7f7 fad0 	bl	11ba <sgn0_pty_mod_n>
    9c1a:	4686      	mov	lr, r0
    9c1c:	a94b      	add	r1, sp, #300	; 0x12c
    9c1e:	ab40      	add	r3, sp, #256	; 0x100
    9c20:	aa57      	add	r2, sp, #348	; 0x15c
    9c22:	f851 0f04 	ldr.w	r0, [r1, #4]!
    9c26:	428a      	cmp	r2, r1
    9c28:	d1fb      	bne.n	9c22 <map_to_isogenous_E2+0x500>
    9c2a:	f103 0c30 	add.w	ip, r3, #48	; 0x30
    9c2e:	2200      	movs	r2, #0
    9c30:	f853 1b04 	ldr.w	r1, [r3], #4
    9c34:	430a      	orrs	r2, r1
    9c36:	459c      	cmp	ip, r3
    9c38:	d1fa      	bne.n	9c30 <map_to_isogenous_E2+0x50e>
    9c3a:	1e53      	subs	r3, r2, #1
    9c3c:	ea23 0202 	bic.w	r2, r3, r2
    9c40:	0fd0      	lsrs	r0, r2, #31
    9c42:	ea0e 72e2 	and.w	r2, lr, r2, asr #31
    9c46:	3801      	subs	r0, #1
    9c48:	ea00 0808 	and.w	r8, r0, r8
    9c4c:	ea48 0802 	orr.w	r8, r8, r2
    9c50:	ea84 0408 	eor.w	r4, r4, r8
    9c54:	f004 0401 	and.w	r4, r4, #1
    9c58:	f8df 8050 	ldr.w	r8, [pc, #80]	; 9cac <map_to_isogenous_E2+0x58a>
    9c5c:	f04f 0a0c 	mov.w	sl, #12
    9c60:	f8cd a000 	str.w	sl, [sp]
    9c64:	4643      	mov	r3, r8
    9c66:	4622      	mov	r2, r4
    9c68:	4639      	mov	r1, r7
    9c6a:	4638      	mov	r0, r7
    9c6c:	f7f7 fe9a 	bl	19a4 <cneg_mod_n>
    9c70:	f8cd a000 	str.w	sl, [sp]
    9c74:	4643      	mov	r3, r8
    9c76:	4622      	mov	r2, r4
    9c78:	4629      	mov	r1, r5
    9c7a:	4628      	mov	r0, r5
    9c7c:	f7f7 fe92 	bl	19a4 <cneg_mod_n>
    9c80:	4c09      	ldr	r4, [pc, #36]	; (9ca8 <map_to_isogenous_E2+0x586>)
    9c82:	9400      	str	r4, [sp, #0]
    9c84:	4643      	mov	r3, r8
    9c86:	464a      	mov	r2, r9
    9c88:	4631      	mov	r1, r6
    9c8a:	4630      	mov	r0, r6
    9c8c:	f7fa fb10 	bl	42b0 <mul_mont_384x>
    9c90:	9400      	str	r4, [sp, #0]
    9c92:	4643      	mov	r3, r8
    9c94:	aa70      	add	r2, sp, #448	; 0x1c0
    9c96:	4639      	mov	r1, r7
    9c98:	4638      	mov	r0, r7
    9c9a:	f7fa fb09 	bl	42b0 <mul_mont_384x>
    9c9e:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
    9ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ca6:	bf00      	nop
    9ca8:	fffcfffd 	.word	0xfffcfffd
    9cac:	00015a08 	.word	0x00015a08

00009cb0 <map_to_g2>:
    9cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9cb4:	f5ad 6d9d 	sub.w	sp, sp, #1256	; 0x4e8
    9cb8:	4606      	mov	r6, r0
    9cba:	4614      	mov	r4, r2
    9cbc:	a8f2      	add	r0, sp, #968	; 0x3c8
    9cbe:	f7ff fd30 	bl	9722 <map_to_isogenous_E2>
    9cc2:	b14c      	cbz	r4, 9cd8 <map_to_g2+0x28>
    9cc4:	4621      	mov	r1, r4
    9cc6:	4630      	mov	r0, r6
    9cc8:	f7ff fd2b 	bl	9722 <map_to_isogenous_E2>
    9ccc:	4b97      	ldr	r3, [pc, #604]	; (9f2c <map_to_g2+0x27c>)
    9cce:	4632      	mov	r2, r6
    9cd0:	a9f2      	add	r1, sp, #968	; 0x3c8
    9cd2:	4608      	mov	r0, r1
    9cd4:	f7fe fec0 	bl	8a58 <POINTonE2_dadd>
    9cd8:	4d95      	ldr	r5, [pc, #596]	; (9f30 <map_to_g2+0x280>)
    9cda:	4c96      	ldr	r4, [pc, #600]	; (9f34 <map_to_g2+0x284>)
    9cdc:	462b      	mov	r3, r5
    9cde:	4622      	mov	r2, r4
    9ce0:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
    9ce4:	a892      	add	r0, sp, #584	; 0x248
    9ce6:	f7fd fd71 	bl	77cc <sqr_mont_384x>
    9cea:	462b      	mov	r3, r5
    9cec:	4622      	mov	r2, r4
    9cee:	a992      	add	r1, sp, #584	; 0x248
    9cf0:	a87a      	add	r0, sp, #488	; 0x1e8
    9cf2:	f7fd fd6b 	bl	77cc <sqr_mont_384x>
    9cf6:	9500      	str	r5, [sp, #0]
    9cf8:	4623      	mov	r3, r4
    9cfa:	aa7a      	add	r2, sp, #488	; 0x1e8
    9cfc:	a992      	add	r1, sp, #584	; 0x248
    9cfe:	a862      	add	r0, sp, #392	; 0x188
    9d00:	f7fa fad6 	bl	42b0 <mul_mont_384x>
    9d04:	f8df 8230 	ldr.w	r8, [pc, #560]	; 9f38 <map_to_g2+0x288>
    9d08:	2303      	movs	r3, #3
    9d0a:	aa62      	add	r2, sp, #392	; 0x188
    9d0c:	f508 6108 	add.w	r1, r8, #2176	; 0x880
    9d10:	a8aa      	add	r0, sp, #680	; 0x2a8
    9d12:	f7fa fb5b 	bl	43cc <map_fp2_times_Zz>
    9d16:	9500      	str	r5, [sp, #0]
    9d18:	4623      	mov	r3, r4
    9d1a:	f508 621a 	add.w	r2, r8, #2464	; 0x9a0
    9d1e:	a9f2      	add	r1, sp, #968	; 0x3c8
    9d20:	a802      	add	r0, sp, #8
    9d22:	f7fa fac5 	bl	42b0 <mul_mont_384x>
    9d26:	270c      	movs	r7, #12
    9d28:	9700      	str	r7, [sp, #0]
    9d2a:	4623      	mov	r3, r4
    9d2c:	aada      	add	r2, sp, #872	; 0x368
    9d2e:	a902      	add	r1, sp, #8
    9d30:	4608      	mov	r0, r1
    9d32:	f7f6 ffa3 	bl	c7c <add_mod_n>
    9d36:	9700      	str	r7, [sp, #0]
    9d38:	4623      	mov	r3, r4
    9d3a:	aae6      	add	r2, sp, #920	; 0x398
    9d3c:	a90e      	add	r1, sp, #56	; 0x38
    9d3e:	4608      	mov	r0, r1
    9d40:	f7f6 ff9c 	bl	c7c <add_mod_n>
    9d44:	2302      	movs	r3, #2
    9d46:	aaaa      	add	r2, sp, #680	; 0x2a8
    9d48:	a9f2      	add	r1, sp, #968	; 0x3c8
    9d4a:	a802      	add	r0, sp, #8
    9d4c:	f7fa fc24 	bl	4598 <map_fp2>
    9d50:	2302      	movs	r3, #2
    9d52:	aa7a      	add	r2, sp, #488	; 0x1e8
    9d54:	f508 6120 	add.w	r1, r8, #2560	; 0xa00
    9d58:	a8aa      	add	r0, sp, #680	; 0x2a8
    9d5a:	f7fa fb37 	bl	43cc <map_fp2_times_Zz>
    9d5e:	9700      	str	r7, [sp, #0]
    9d60:	4623      	mov	r3, r4
    9d62:	aac2      	add	r2, sp, #776	; 0x308
    9d64:	a9f2      	add	r1, sp, #968	; 0x3c8
    9d66:	a81a      	add	r0, sp, #104	; 0x68
    9d68:	f7f6 ff88 	bl	c7c <add_mod_n>
    9d6c:	9700      	str	r7, [sp, #0]
    9d6e:	4623      	mov	r3, r4
    9d70:	aace      	add	r2, sp, #824	; 0x338
    9d72:	a9fe      	add	r1, sp, #1016	; 0x3f8
    9d74:	a826      	add	r0, sp, #152	; 0x98
    9d76:	f7f6 ff81 	bl	c7c <add_mod_n>
    9d7a:	2301      	movs	r3, #1
    9d7c:	aaaa      	add	r2, sp, #680	; 0x2a8
    9d7e:	a9f2      	add	r1, sp, #968	; 0x3c8
    9d80:	a81a      	add	r0, sp, #104	; 0x68
    9d82:	f7fa fc09 	bl	4598 <map_fp2>
    9d86:	9500      	str	r5, [sp, #0]
    9d88:	4623      	mov	r3, r4
    9d8a:	aa92      	add	r2, sp, #584	; 0x248
    9d8c:	a91a      	add	r1, sp, #104	; 0x68
    9d8e:	4608      	mov	r0, r1
    9d90:	f7fa fa8e 	bl	42b0 <mul_mont_384x>
    9d94:	2303      	movs	r3, #3
    9d96:	aa62      	add	r2, sp, #392	; 0x188
    9d98:	f508 612c 	add.w	r1, r8, #2752	; 0xac0
    9d9c:	a8aa      	add	r0, sp, #680	; 0x2a8
    9d9e:	f7fa fb15 	bl	43cc <map_fp2_times_Zz>
    9da2:	9500      	str	r5, [sp, #0]
    9da4:	4623      	mov	r3, r4
    9da6:	f508 623e 	add.w	r2, r8, #3040	; 0xbe0
    9daa:	a9f2      	add	r1, sp, #968	; 0x3c8
    9dac:	a832      	add	r0, sp, #200	; 0xc8
    9dae:	f7fa fa7f 	bl	42b0 <mul_mont_384x>
    9db2:	9700      	str	r7, [sp, #0]
    9db4:	4623      	mov	r3, r4
    9db6:	aada      	add	r2, sp, #872	; 0x368
    9db8:	a932      	add	r1, sp, #200	; 0xc8
    9dba:	4608      	mov	r0, r1
    9dbc:	f7f6 ff5e 	bl	c7c <add_mod_n>
    9dc0:	9700      	str	r7, [sp, #0]
    9dc2:	4623      	mov	r3, r4
    9dc4:	aae6      	add	r2, sp, #920	; 0x398
    9dc6:	a93e      	add	r1, sp, #248	; 0xf8
    9dc8:	4608      	mov	r0, r1
    9dca:	f7f6 ff57 	bl	c7c <add_mod_n>
    9dce:	2302      	movs	r3, #2
    9dd0:	aaaa      	add	r2, sp, #680	; 0x2a8
    9dd2:	a9f2      	add	r1, sp, #968	; 0x3c8
    9dd4:	a832      	add	r0, sp, #200	; 0xc8
    9dd6:	f7fa fbdf 	bl	4598 <map_fp2>
    9dda:	9500      	str	r5, [sp, #0]
    9ddc:	4623      	mov	r3, r4
    9dde:	f50d 6285 	add.w	r2, sp, #1064	; 0x428
    9de2:	a932      	add	r1, sp, #200	; 0xc8
    9de4:	4608      	mov	r0, r1
    9de6:	f7fa fa63 	bl	42b0 <mul_mont_384x>
    9dea:	2303      	movs	r3, #3
    9dec:	aa62      	add	r2, sp, #392	; 0x188
    9dee:	f508 6144 	add.w	r1, r8, #3136	; 0xc40
    9df2:	a8aa      	add	r0, sp, #680	; 0x2a8
    9df4:	f7fa faea 	bl	43cc <map_fp2_times_Zz>
    9df8:	9700      	str	r7, [sp, #0]
    9dfa:	4623      	mov	r3, r4
    9dfc:	aada      	add	r2, sp, #872	; 0x368
    9dfe:	a9f2      	add	r1, sp, #968	; 0x3c8
    9e00:	a84a      	add	r0, sp, #296	; 0x128
    9e02:	f7f6 ff3b 	bl	c7c <add_mod_n>
    9e06:	9700      	str	r7, [sp, #0]
    9e08:	4623      	mov	r3, r4
    9e0a:	aae6      	add	r2, sp, #920	; 0x398
    9e0c:	a9fe      	add	r1, sp, #1016	; 0x3f8
    9e0e:	a856      	add	r0, sp, #344	; 0x158
    9e10:	f7f6 ff34 	bl	c7c <add_mod_n>
    9e14:	2302      	movs	r3, #2
    9e16:	aaaa      	add	r2, sp, #680	; 0x2a8
    9e18:	a9f2      	add	r1, sp, #968	; 0x3c8
    9e1a:	a84a      	add	r0, sp, #296	; 0x128
    9e1c:	f7fa fbbc 	bl	4598 <map_fp2>
    9e20:	9500      	str	r5, [sp, #0]
    9e22:	4623      	mov	r3, r4
    9e24:	f50d 6291 	add.w	r2, sp, #1160	; 0x488
    9e28:	a992      	add	r1, sp, #584	; 0x248
    9e2a:	4608      	mov	r0, r1
    9e2c:	f7fa fa40 	bl	42b0 <mul_mont_384x>
    9e30:	9500      	str	r5, [sp, #0]
    9e32:	4623      	mov	r3, r4
    9e34:	aa92      	add	r2, sp, #584	; 0x248
    9e36:	a94a      	add	r1, sp, #296	; 0x128
    9e38:	4608      	mov	r0, r1
    9e3a:	f7fa fa39 	bl	42b0 <mul_mont_384x>
    9e3e:	9500      	str	r5, [sp, #0]
    9e40:	4623      	mov	r3, r4
    9e42:	aa4a      	add	r2, sp, #296	; 0x128
    9e44:	a91a      	add	r1, sp, #104	; 0x68
    9e46:	f50d 6091 	add.w	r0, sp, #1160	; 0x488
    9e4a:	f7fa fa31 	bl	42b0 <mul_mont_384x>
    9e4e:	9500      	str	r5, [sp, #0]
    9e50:	4623      	mov	r3, r4
    9e52:	aa4a      	add	r2, sp, #296	; 0x128
    9e54:	a902      	add	r1, sp, #8
    9e56:	a8f2      	add	r0, sp, #968	; 0x3c8
    9e58:	f7fa fa2a 	bl	42b0 <mul_mont_384x>
    9e5c:	9500      	str	r5, [sp, #0]
    9e5e:	4623      	mov	r3, r4
    9e60:	f50d 6291 	add.w	r2, sp, #1160	; 0x488
    9e64:	a9f2      	add	r1, sp, #968	; 0x3c8
    9e66:	4608      	mov	r0, r1
    9e68:	f7fa fa22 	bl	42b0 <mul_mont_384x>
    9e6c:	462b      	mov	r3, r5
    9e6e:	4622      	mov	r2, r4
    9e70:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
    9e74:	f50d 6085 	add.w	r0, sp, #1064	; 0x428
    9e78:	f7fd fca8 	bl	77cc <sqr_mont_384x>
    9e7c:	9500      	str	r5, [sp, #0]
    9e7e:	4623      	mov	r3, r4
    9e80:	aa1a      	add	r2, sp, #104	; 0x68
    9e82:	f50d 6185 	add.w	r1, sp, #1064	; 0x428
    9e86:	4608      	mov	r0, r1
    9e88:	f7fa fa12 	bl	42b0 <mul_mont_384x>
    9e8c:	9500      	str	r5, [sp, #0]
    9e8e:	4623      	mov	r3, r4
    9e90:	aa32      	add	r2, sp, #200	; 0xc8
    9e92:	f50d 6185 	add.w	r1, sp, #1064	; 0x428
    9e96:	4608      	mov	r0, r1
    9e98:	f7fa fa0a 	bl	42b0 <mul_mont_384x>
    9e9c:	a9f2      	add	r1, sp, #968	; 0x3c8
    9e9e:	4630      	mov	r0, r6
    9ea0:	f7fe fcd2 	bl	8848 <POINTonE2_double>
    9ea4:	4631      	mov	r1, r6
    9ea6:	4630      	mov	r0, r6
    9ea8:	f7fa fa50 	bl	434c <psi>
    9eac:	4631      	mov	r1, r6
    9eae:	4630      	mov	r0, r6
    9eb0:	f7fa fa4c 	bl	434c <psi>
    9eb4:	abf1      	add	r3, sp, #964	; 0x3c4
    9eb6:	aa61      	add	r2, sp, #388	; 0x184
    9eb8:	f20d 41e4 	addw	r1, sp, #1252	; 0x4e4
    9ebc:	f853 4f04 	ldr.w	r4, [r3, #4]!
    9ec0:	f842 4f04 	str.w	r4, [r2, #4]!
    9ec4:	428b      	cmp	r3, r1
    9ec6:	d1f9      	bne.n	9ebc <map_to_g2+0x20c>
    9ec8:	2101      	movs	r1, #1
    9eca:	a862      	add	r0, sp, #392	; 0x188
    9ecc:	f7f7 fe34 	bl	1b38 <POINTonE2_cneg>
    9ed0:	a962      	add	r1, sp, #392	; 0x188
    9ed2:	a8aa      	add	r0, sp, #680	; 0x2a8
    9ed4:	f7fa fa3a 	bl	434c <psi>
    9ed8:	2300      	movs	r3, #0
    9eda:	aa62      	add	r2, sp, #392	; 0x188
    9edc:	4631      	mov	r1, r6
    9ede:	4630      	mov	r0, r6
    9ee0:	f7fe fdba 	bl	8a58 <POINTonE2_dadd>
    9ee4:	2300      	movs	r3, #0
    9ee6:	aaaa      	add	r2, sp, #680	; 0x2a8
    9ee8:	4631      	mov	r1, r6
    9eea:	4630      	mov	r0, r6
    9eec:	f7fe fdb4 	bl	8a58 <POINTonE2_dadd>
    9ef0:	a9f2      	add	r1, sp, #968	; 0x3c8
    9ef2:	a862      	add	r0, sp, #392	; 0x188
    9ef4:	f7ff f9fb 	bl	92ee <POINTonE2_times_minus_z>
    9ef8:	2300      	movs	r3, #0
    9efa:	aaf2      	add	r2, sp, #968	; 0x3c8
    9efc:	a962      	add	r1, sp, #392	; 0x188
    9efe:	4608      	mov	r0, r1
    9f00:	f7fe fdaa 	bl	8a58 <POINTonE2_dadd>
    9f04:	2300      	movs	r3, #0
    9f06:	aaaa      	add	r2, sp, #680	; 0x2a8
    9f08:	a962      	add	r1, sp, #392	; 0x188
    9f0a:	4608      	mov	r0, r1
    9f0c:	f7fe fda4 	bl	8a58 <POINTonE2_dadd>
    9f10:	a962      	add	r1, sp, #392	; 0x188
    9f12:	a8aa      	add	r0, sp, #680	; 0x2a8
    9f14:	f7ff f9eb 	bl	92ee <POINTonE2_times_minus_z>
    9f18:	2300      	movs	r3, #0
    9f1a:	aaaa      	add	r2, sp, #680	; 0x2a8
    9f1c:	4631      	mov	r1, r6
    9f1e:	4630      	mov	r0, r6
    9f20:	f7fe fd9a 	bl	8a58 <POINTonE2_dadd>
    9f24:	f50d 6d9d 	add.w	sp, sp, #1256	; 0x4e8
    9f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9f2c:	00017260 	.word	0x00017260
    9f30:	fffcfffd 	.word	0xfffcfffd
    9f34:	00015a08 	.word	0x00015a08
    9f38:	00016b00 	.word	0x00016b00

00009f3c <blst_map_to_g2>:
    9f3c:	b508      	push	{r3, lr}
    9f3e:	f7ff feb7 	bl	9cb0 <map_to_g2>
    9f42:	bd08      	pop	{r3, pc}

00009f44 <blst_encode_to_g2>:
    9f44:	b510      	push	{r4, lr}
    9f46:	b09c      	sub	sp, #112	; 0x70
    9f48:	4604      	mov	r4, r0
    9f4a:	981e      	ldr	r0, [sp, #120]	; 0x78
    9f4c:	9003      	str	r0, [sp, #12]
    9f4e:	9302      	str	r3, [sp, #8]
    9f50:	9201      	str	r2, [sp, #4]
    9f52:	9100      	str	r1, [sp, #0]
    9f54:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9f56:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    9f58:	2102      	movs	r1, #2
    9f5a:	a804      	add	r0, sp, #16
    9f5c:	f7fc fffd 	bl	6f5a <hash_to_field>
    9f60:	2200      	movs	r2, #0
    9f62:	a904      	add	r1, sp, #16
    9f64:	4620      	mov	r0, r4
    9f66:	f7ff fea3 	bl	9cb0 <map_to_g2>
    9f6a:	b01c      	add	sp, #112	; 0x70
    9f6c:	bd10      	pop	{r4, pc}

00009f6e <blst_hash_to_g2>:
    9f6e:	b510      	push	{r4, lr}
    9f70:	b0b4      	sub	sp, #208	; 0xd0
    9f72:	4604      	mov	r4, r0
    9f74:	9836      	ldr	r0, [sp, #216]	; 0xd8
    9f76:	9003      	str	r0, [sp, #12]
    9f78:	9302      	str	r3, [sp, #8]
    9f7a:	9201      	str	r2, [sp, #4]
    9f7c:	9100      	str	r1, [sp, #0]
    9f7e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    9f80:	9a37      	ldr	r2, [sp, #220]	; 0xdc
    9f82:	2104      	movs	r1, #4
    9f84:	a804      	add	r0, sp, #16
    9f86:	f7fc ffe8 	bl	6f5a <hash_to_field>
    9f8a:	aa1c      	add	r2, sp, #112	; 0x70
    9f8c:	a904      	add	r1, sp, #16
    9f8e:	4620      	mov	r0, r4
    9f90:	f7ff fe8e 	bl	9cb0 <map_to_g2>
    9f94:	b034      	add	sp, #208	; 0xd0
    9f96:	bd10      	pop	{r4, pc}

00009f98 <sqr_fp4>:
    9f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9f9c:	b0be      	sub	sp, #248	; 0xf8
    9f9e:	4604      	mov	r4, r0
    9fa0:	468a      	mov	sl, r1
    9fa2:	4690      	mov	r8, r2
    9fa4:	4d3e      	ldr	r5, [pc, #248]	; (a0a0 <sqr_fp4+0x108>)
    9fa6:	4f3f      	ldr	r7, [pc, #252]	; (a0a4 <sqr_fp4+0x10c>)
    9fa8:	462b      	mov	r3, r5
    9faa:	463a      	mov	r2, r7
    9fac:	a826      	add	r0, sp, #152	; 0x98
    9fae:	f7fd fc0d 	bl	77cc <sqr_mont_384x>
    9fb2:	462b      	mov	r3, r5
    9fb4:	463a      	mov	r2, r7
    9fb6:	4641      	mov	r1, r8
    9fb8:	a80e      	add	r0, sp, #56	; 0x38
    9fba:	f7fd fc07 	bl	77cc <sqr_mont_384x>
    9fbe:	f104 0560 	add.w	r5, r4, #96	; 0x60
    9fc2:	f04f 090c 	mov.w	r9, #12
    9fc6:	f8cd 9000 	str.w	r9, [sp]
    9fca:	463b      	mov	r3, r7
    9fcc:	4642      	mov	r2, r8
    9fce:	4651      	mov	r1, sl
    9fd0:	4628      	mov	r0, r5
    9fd2:	f7f6 fe53 	bl	c7c <add_mod_n>
    9fd6:	f104 0690 	add.w	r6, r4, #144	; 0x90
    9fda:	f8cd 9000 	str.w	r9, [sp]
    9fde:	463b      	mov	r3, r7
    9fe0:	f108 0230 	add.w	r2, r8, #48	; 0x30
    9fe4:	f10a 0130 	add.w	r1, sl, #48	; 0x30
    9fe8:	4630      	mov	r0, r6
    9fea:	f7f6 fe47 	bl	c7c <add_mod_n>
    9fee:	f8cd 9000 	str.w	r9, [sp]
    9ff2:	463b      	mov	r3, r7
    9ff4:	aa1a      	add	r2, sp, #104	; 0x68
    9ff6:	a90e      	add	r1, sp, #56	; 0x38
    9ff8:	a802      	add	r0, sp, #8
    9ffa:	f7f6 fe3f 	bl	c7c <add_mod_n>
    9ffe:	f8cd 9000 	str.w	r9, [sp]
    a002:	463b      	mov	r3, r7
    a004:	aa1a      	add	r2, sp, #104	; 0x68
    a006:	a90e      	add	r1, sp, #56	; 0x38
    a008:	4620      	mov	r0, r4
    a00a:	f7f6 fae1 	bl	5d0 <sub_mod_n>
    a00e:	aa02      	add	r2, sp, #8
    a010:	f104 032c 	add.w	r3, r4, #44	; 0x2c
    a014:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    a018:	f852 1b04 	ldr.w	r1, [r2], #4
    a01c:	f843 1f04 	str.w	r1, [r3, #4]!
    a020:	4298      	cmp	r0, r3
    a022:	d1f9      	bne.n	a018 <sqr_fp4+0x80>
    a024:	4f1f      	ldr	r7, [pc, #124]	; (a0a4 <sqr_fp4+0x10c>)
    a026:	f04f 080c 	mov.w	r8, #12
    a02a:	f8cd 8000 	str.w	r8, [sp]
    a02e:	463b      	mov	r3, r7
    a030:	aa26      	add	r2, sp, #152	; 0x98
    a032:	4621      	mov	r1, r4
    a034:	4620      	mov	r0, r4
    a036:	f7f6 fe21 	bl	c7c <add_mod_n>
    a03a:	f104 0030 	add.w	r0, r4, #48	; 0x30
    a03e:	f8cd 8000 	str.w	r8, [sp]
    a042:	463b      	mov	r3, r7
    a044:	aa32      	add	r2, sp, #200	; 0xc8
    a046:	4601      	mov	r1, r0
    a048:	f7f6 fe18 	bl	c7c <add_mod_n>
    a04c:	4b14      	ldr	r3, [pc, #80]	; (a0a0 <sqr_fp4+0x108>)
    a04e:	463a      	mov	r2, r7
    a050:	4629      	mov	r1, r5
    a052:	4628      	mov	r0, r5
    a054:	f7fd fbba 	bl	77cc <sqr_mont_384x>
    a058:	f8cd 8000 	str.w	r8, [sp]
    a05c:	463b      	mov	r3, r7
    a05e:	aa26      	add	r2, sp, #152	; 0x98
    a060:	4629      	mov	r1, r5
    a062:	4628      	mov	r0, r5
    a064:	f7f6 fab4 	bl	5d0 <sub_mod_n>
    a068:	f8cd 8000 	str.w	r8, [sp]
    a06c:	463b      	mov	r3, r7
    a06e:	aa32      	add	r2, sp, #200	; 0xc8
    a070:	4631      	mov	r1, r6
    a072:	4630      	mov	r0, r6
    a074:	f7f6 faac 	bl	5d0 <sub_mod_n>
    a078:	f8cd 8000 	str.w	r8, [sp]
    a07c:	463b      	mov	r3, r7
    a07e:	aa0e      	add	r2, sp, #56	; 0x38
    a080:	4629      	mov	r1, r5
    a082:	4628      	mov	r0, r5
    a084:	f7f6 faa4 	bl	5d0 <sub_mod_n>
    a088:	f8cd 8000 	str.w	r8, [sp]
    a08c:	463b      	mov	r3, r7
    a08e:	aa1a      	add	r2, sp, #104	; 0x68
    a090:	4631      	mov	r1, r6
    a092:	4630      	mov	r0, r6
    a094:	f7f6 fa9c 	bl	5d0 <sub_mod_n>
    a098:	b03e      	add	sp, #248	; 0xf8
    a09a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a09e:	bf00      	nop
    a0a0:	fffcfffd 	.word	0xfffcfffd
    a0a4:	00015a08 	.word	0x00015a08

0000a0a8 <cyclotomic_sqr_fp12>:
    a0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a0ac:	f5ad 7d21 	sub.w	sp, sp, #644	; 0x284
    a0b0:	4604      	mov	r4, r0
    a0b2:	460f      	mov	r7, r1
    a0b4:	f501 7590 	add.w	r5, r1, #288	; 0x120
    a0b8:	9503      	str	r5, [sp, #12]
    a0ba:	f501 7ac0 	add.w	sl, r1, #384	; 0x180
    a0be:	4652      	mov	r2, sl
    a0c0:	a870      	add	r0, sp, #448	; 0x1c0
    a0c2:	f7ff ff69 	bl	9f98 <sqr_fp4>
    a0c6:	f107 0bc0 	add.w	fp, r7, #192	; 0xc0
    a0ca:	465a      	mov	r2, fp
    a0cc:	4629      	mov	r1, r5
    a0ce:	a840      	add	r0, sp, #256	; 0x100
    a0d0:	f7ff ff62 	bl	9f98 <sqr_fp4>
    a0d4:	f107 0860 	add.w	r8, r7, #96	; 0x60
    a0d8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
    a0dc:	9302      	str	r3, [sp, #8]
    a0de:	461a      	mov	r2, r3
    a0e0:	4641      	mov	r1, r8
    a0e2:	a810      	add	r0, sp, #64	; 0x40
    a0e4:	f7ff ff58 	bl	9f98 <sqr_fp4>
    a0e8:	4d9b      	ldr	r5, [pc, #620]	; (a358 <cyclotomic_sqr_fp12+0x2b0>)
    a0ea:	260c      	movs	r6, #12
    a0ec:	9600      	str	r6, [sp, #0]
    a0ee:	462b      	mov	r3, r5
    a0f0:	463a      	mov	r2, r7
    a0f2:	a970      	add	r1, sp, #448	; 0x1c0
    a0f4:	4620      	mov	r0, r4
    a0f6:	f7f6 fa6b 	bl	5d0 <sub_mod_n>
    a0fa:	f104 0930 	add.w	r9, r4, #48	; 0x30
    a0fe:	9600      	str	r6, [sp, #0]
    a100:	462b      	mov	r3, r5
    a102:	f107 0230 	add.w	r2, r7, #48	; 0x30
    a106:	a97c      	add	r1, sp, #496	; 0x1f0
    a108:	4648      	mov	r0, r9
    a10a:	f7f6 fa61 	bl	5d0 <sub_mod_n>
    a10e:	9600      	str	r6, [sp, #0]
    a110:	462b      	mov	r3, r5
    a112:	4622      	mov	r2, r4
    a114:	4621      	mov	r1, r4
    a116:	4620      	mov	r0, r4
    a118:	f7f6 fdb0 	bl	c7c <add_mod_n>
    a11c:	9600      	str	r6, [sp, #0]
    a11e:	462b      	mov	r3, r5
    a120:	464a      	mov	r2, r9
    a122:	4649      	mov	r1, r9
    a124:	4648      	mov	r0, r9
    a126:	f7f6 fda9 	bl	c7c <add_mod_n>
    a12a:	9600      	str	r6, [sp, #0]
    a12c:	462b      	mov	r3, r5
    a12e:	aa70      	add	r2, sp, #448	; 0x1c0
    a130:	4621      	mov	r1, r4
    a132:	4620      	mov	r0, r4
    a134:	f7f6 fda2 	bl	c7c <add_mod_n>
    a138:	9600      	str	r6, [sp, #0]
    a13a:	462b      	mov	r3, r5
    a13c:	aa7c      	add	r2, sp, #496	; 0x1f0
    a13e:	4649      	mov	r1, r9
    a140:	4648      	mov	r0, r9
    a142:	f7f6 fd9b 	bl	c7c <add_mod_n>
    a146:	f104 0960 	add.w	r9, r4, #96	; 0x60
    a14a:	9600      	str	r6, [sp, #0]
    a14c:	462b      	mov	r3, r5
    a14e:	4642      	mov	r2, r8
    a150:	a940      	add	r1, sp, #256	; 0x100
    a152:	4648      	mov	r0, r9
    a154:	f7f6 fa3c 	bl	5d0 <sub_mod_n>
    a158:	f104 0890 	add.w	r8, r4, #144	; 0x90
    a15c:	9600      	str	r6, [sp, #0]
    a15e:	462b      	mov	r3, r5
    a160:	f107 0290 	add.w	r2, r7, #144	; 0x90
    a164:	a94c      	add	r1, sp, #304	; 0x130
    a166:	4640      	mov	r0, r8
    a168:	f7f6 fa32 	bl	5d0 <sub_mod_n>
    a16c:	9600      	str	r6, [sp, #0]
    a16e:	462b      	mov	r3, r5
    a170:	464a      	mov	r2, r9
    a172:	4649      	mov	r1, r9
    a174:	4648      	mov	r0, r9
    a176:	f7f6 fd81 	bl	c7c <add_mod_n>
    a17a:	9600      	str	r6, [sp, #0]
    a17c:	462b      	mov	r3, r5
    a17e:	4642      	mov	r2, r8
    a180:	4641      	mov	r1, r8
    a182:	4640      	mov	r0, r8
    a184:	f7f6 fd7a 	bl	c7c <add_mod_n>
    a188:	9600      	str	r6, [sp, #0]
    a18a:	462b      	mov	r3, r5
    a18c:	aa40      	add	r2, sp, #256	; 0x100
    a18e:	4649      	mov	r1, r9
    a190:	4648      	mov	r0, r9
    a192:	f7f6 fd73 	bl	c7c <add_mod_n>
    a196:	9600      	str	r6, [sp, #0]
    a198:	462b      	mov	r3, r5
    a19a:	aa4c      	add	r2, sp, #304	; 0x130
    a19c:	4641      	mov	r1, r8
    a19e:	4640      	mov	r0, r8
    a1a0:	f7f6 fd6c 	bl	c7c <add_mod_n>
    a1a4:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
    a1a8:	9600      	str	r6, [sp, #0]
    a1aa:	462b      	mov	r3, r5
    a1ac:	465a      	mov	r2, fp
    a1ae:	a910      	add	r1, sp, #64	; 0x40
    a1b0:	4640      	mov	r0, r8
    a1b2:	f7f6 fa0d 	bl	5d0 <sub_mod_n>
    a1b6:	f104 09f0 	add.w	r9, r4, #240	; 0xf0
    a1ba:	9600      	str	r6, [sp, #0]
    a1bc:	462b      	mov	r3, r5
    a1be:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
    a1c2:	a91c      	add	r1, sp, #112	; 0x70
    a1c4:	4648      	mov	r0, r9
    a1c6:	f7f6 fa03 	bl	5d0 <sub_mod_n>
    a1ca:	9600      	str	r6, [sp, #0]
    a1cc:	462b      	mov	r3, r5
    a1ce:	4642      	mov	r2, r8
    a1d0:	4641      	mov	r1, r8
    a1d2:	4640      	mov	r0, r8
    a1d4:	f7f6 fd52 	bl	c7c <add_mod_n>
    a1d8:	9600      	str	r6, [sp, #0]
    a1da:	462b      	mov	r3, r5
    a1dc:	464a      	mov	r2, r9
    a1de:	4649      	mov	r1, r9
    a1e0:	4648      	mov	r0, r9
    a1e2:	f7f6 fd4b 	bl	c7c <add_mod_n>
    a1e6:	9600      	str	r6, [sp, #0]
    a1e8:	462b      	mov	r3, r5
    a1ea:	aa10      	add	r2, sp, #64	; 0x40
    a1ec:	4641      	mov	r1, r8
    a1ee:	4640      	mov	r0, r8
    a1f0:	f7f6 fd44 	bl	c7c <add_mod_n>
    a1f4:	9600      	str	r6, [sp, #0]
    a1f6:	462b      	mov	r3, r5
    a1f8:	aa1c      	add	r2, sp, #112	; 0x70
    a1fa:	4649      	mov	r1, r9
    a1fc:	4648      	mov	r0, r9
    a1fe:	f7f6 fd3d 	bl	c7c <add_mod_n>
    a202:	9600      	str	r6, [sp, #0]
    a204:	462b      	mov	r3, r5
    a206:	aa34      	add	r2, sp, #208	; 0xd0
    a208:	a928      	add	r1, sp, #160	; 0xa0
    a20a:	a804      	add	r0, sp, #16
    a20c:	f7f6 fd36 	bl	c7c <add_mod_n>
    a210:	9600      	str	r6, [sp, #0]
    a212:	462b      	mov	r3, r5
    a214:	aa34      	add	r2, sp, #208	; 0xd0
    a216:	a928      	add	r1, sp, #160	; 0xa0
    a218:	4608      	mov	r0, r1
    a21a:	f7f6 f9d9 	bl	5d0 <sub_mod_n>
    a21e:	ab04      	add	r3, sp, #16
    a220:	aa33      	add	r2, sp, #204	; 0xcc
    a222:	a810      	add	r0, sp, #64	; 0x40
    a224:	f853 1b04 	ldr.w	r1, [r3], #4
    a228:	f842 1f04 	str.w	r1, [r2, #4]!
    a22c:	4298      	cmp	r0, r3
    a22e:	d1f9      	bne.n	a224 <cyclotomic_sqr_fp12+0x17c>
    a230:	f504 7890 	add.w	r8, r4, #288	; 0x120
    a234:	4d48      	ldr	r5, [pc, #288]	; (a358 <cyclotomic_sqr_fp12+0x2b0>)
    a236:	260c      	movs	r6, #12
    a238:	9600      	str	r6, [sp, #0]
    a23a:	462b      	mov	r3, r5
    a23c:	9a03      	ldr	r2, [sp, #12]
    a23e:	a928      	add	r1, sp, #160	; 0xa0
    a240:	4640      	mov	r0, r8
    a242:	f7f6 fd1b 	bl	c7c <add_mod_n>
    a246:	f504 79a8 	add.w	r9, r4, #336	; 0x150
    a24a:	9600      	str	r6, [sp, #0]
    a24c:	462b      	mov	r3, r5
    a24e:	f507 72a8 	add.w	r2, r7, #336	; 0x150
    a252:	a934      	add	r1, sp, #208	; 0xd0
    a254:	4648      	mov	r0, r9
    a256:	f7f6 fd11 	bl	c7c <add_mod_n>
    a25a:	9600      	str	r6, [sp, #0]
    a25c:	462b      	mov	r3, r5
    a25e:	4642      	mov	r2, r8
    a260:	4641      	mov	r1, r8
    a262:	4640      	mov	r0, r8
    a264:	f7f6 fd0a 	bl	c7c <add_mod_n>
    a268:	9600      	str	r6, [sp, #0]
    a26a:	462b      	mov	r3, r5
    a26c:	464a      	mov	r2, r9
    a26e:	4649      	mov	r1, r9
    a270:	4648      	mov	r0, r9
    a272:	f7f6 fd03 	bl	c7c <add_mod_n>
    a276:	9600      	str	r6, [sp, #0]
    a278:	462b      	mov	r3, r5
    a27a:	aa28      	add	r2, sp, #160	; 0xa0
    a27c:	4641      	mov	r1, r8
    a27e:	4640      	mov	r0, r8
    a280:	f7f6 fcfc 	bl	c7c <add_mod_n>
    a284:	9600      	str	r6, [sp, #0]
    a286:	462b      	mov	r3, r5
    a288:	aa34      	add	r2, sp, #208	; 0xd0
    a28a:	4649      	mov	r1, r9
    a28c:	4648      	mov	r0, r9
    a28e:	f7f6 fcf5 	bl	c7c <add_mod_n>
    a292:	f504 79c0 	add.w	r9, r4, #384	; 0x180
    a296:	9600      	str	r6, [sp, #0]
    a298:	462b      	mov	r3, r5
    a29a:	4652      	mov	r2, sl
    a29c:	a988      	add	r1, sp, #544	; 0x220
    a29e:	4648      	mov	r0, r9
    a2a0:	f7f6 fcec 	bl	c7c <add_mod_n>
    a2a4:	f504 78d8 	add.w	r8, r4, #432	; 0x1b0
    a2a8:	9600      	str	r6, [sp, #0]
    a2aa:	462b      	mov	r3, r5
    a2ac:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
    a2b0:	a994      	add	r1, sp, #592	; 0x250
    a2b2:	4640      	mov	r0, r8
    a2b4:	f7f6 fce2 	bl	c7c <add_mod_n>
    a2b8:	9600      	str	r6, [sp, #0]
    a2ba:	462b      	mov	r3, r5
    a2bc:	464a      	mov	r2, r9
    a2be:	4649      	mov	r1, r9
    a2c0:	4648      	mov	r0, r9
    a2c2:	f7f6 fcdb 	bl	c7c <add_mod_n>
    a2c6:	9600      	str	r6, [sp, #0]
    a2c8:	462b      	mov	r3, r5
    a2ca:	4642      	mov	r2, r8
    a2cc:	4641      	mov	r1, r8
    a2ce:	4640      	mov	r0, r8
    a2d0:	f7f6 fcd4 	bl	c7c <add_mod_n>
    a2d4:	9600      	str	r6, [sp, #0]
    a2d6:	462b      	mov	r3, r5
    a2d8:	aa88      	add	r2, sp, #544	; 0x220
    a2da:	4649      	mov	r1, r9
    a2dc:	4648      	mov	r0, r9
    a2de:	f7f6 fccd 	bl	c7c <add_mod_n>
    a2e2:	9600      	str	r6, [sp, #0]
    a2e4:	462b      	mov	r3, r5
    a2e6:	aa94      	add	r2, sp, #592	; 0x250
    a2e8:	4641      	mov	r1, r8
    a2ea:	4640      	mov	r0, r8
    a2ec:	f7f6 fcc6 	bl	c7c <add_mod_n>
    a2f0:	f504 78f0 	add.w	r8, r4, #480	; 0x1e0
    a2f4:	9600      	str	r6, [sp, #0]
    a2f6:	462b      	mov	r3, r5
    a2f8:	9a02      	ldr	r2, [sp, #8]
    a2fa:	a958      	add	r1, sp, #352	; 0x160
    a2fc:	4640      	mov	r0, r8
    a2fe:	f7f6 fcbd 	bl	c7c <add_mod_n>
    a302:	f504 7404 	add.w	r4, r4, #528	; 0x210
    a306:	9600      	str	r6, [sp, #0]
    a308:	462b      	mov	r3, r5
    a30a:	f507 7204 	add.w	r2, r7, #528	; 0x210
    a30e:	a964      	add	r1, sp, #400	; 0x190
    a310:	4620      	mov	r0, r4
    a312:	f7f6 fcb3 	bl	c7c <add_mod_n>
    a316:	9600      	str	r6, [sp, #0]
    a318:	462b      	mov	r3, r5
    a31a:	4642      	mov	r2, r8
    a31c:	4641      	mov	r1, r8
    a31e:	4640      	mov	r0, r8
    a320:	f7f6 fcac 	bl	c7c <add_mod_n>
    a324:	9600      	str	r6, [sp, #0]
    a326:	462b      	mov	r3, r5
    a328:	4622      	mov	r2, r4
    a32a:	4621      	mov	r1, r4
    a32c:	4620      	mov	r0, r4
    a32e:	f7f6 fca5 	bl	c7c <add_mod_n>
    a332:	9600      	str	r6, [sp, #0]
    a334:	462b      	mov	r3, r5
    a336:	aa58      	add	r2, sp, #352	; 0x160
    a338:	4641      	mov	r1, r8
    a33a:	4640      	mov	r0, r8
    a33c:	f7f6 fc9e 	bl	c7c <add_mod_n>
    a340:	9600      	str	r6, [sp, #0]
    a342:	462b      	mov	r3, r5
    a344:	aa64      	add	r2, sp, #400	; 0x190
    a346:	4621      	mov	r1, r4
    a348:	4620      	mov	r0, r4
    a34a:	f7f6 fc97 	bl	c7c <add_mod_n>
    a34e:	f50d 7d21 	add.w	sp, sp, #644	; 0x284
    a352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a356:	bf00      	nop
    a358:	00015a08 	.word	0x00015a08

0000a35c <blst_fp12_cyclotomic_sqr>:
    a35c:	b508      	push	{r3, lr}
    a35e:	f7ff fea3 	bl	a0a8 <cyclotomic_sqr_fp12>
    a362:	bd08      	pop	{r3, pc}

0000a364 <mul_n_sqr>:
    a364:	b570      	push	{r4, r5, r6, lr}
    a366:	4605      	mov	r5, r0
    a368:	4616      	mov	r6, r2
    a36a:	460a      	mov	r2, r1
    a36c:	4601      	mov	r1, r0
    a36e:	f7fa fab3 	bl	48d8 <mul_fp12>
    a372:	1e74      	subs	r4, r6, #1
    a374:	b13e      	cbz	r6, a386 <mul_n_sqr+0x22>
    a376:	4629      	mov	r1, r5
    a378:	4628      	mov	r0, r5
    a37a:	f7ff fe95 	bl	a0a8 <cyclotomic_sqr_fp12>
    a37e:	3c01      	subs	r4, #1
    a380:	f1b4 3fff 	cmp.w	r4, #4294967295
    a384:	d1f7      	bne.n	a376 <mul_n_sqr+0x12>
    a386:	bd70      	pop	{r4, r5, r6, pc}

0000a388 <raise_to_z_div_by_2>:
    a388:	b538      	push	{r3, r4, r5, lr}
    a38a:	4604      	mov	r4, r0
    a38c:	460d      	mov	r5, r1
    a38e:	f7ff fe8b 	bl	a0a8 <cyclotomic_sqr_fp12>
    a392:	2202      	movs	r2, #2
    a394:	4629      	mov	r1, r5
    a396:	4620      	mov	r0, r4
    a398:	f7ff ffe4 	bl	a364 <mul_n_sqr>
    a39c:	2203      	movs	r2, #3
    a39e:	4629      	mov	r1, r5
    a3a0:	4620      	mov	r0, r4
    a3a2:	f7ff ffdf 	bl	a364 <mul_n_sqr>
    a3a6:	2209      	movs	r2, #9
    a3a8:	4629      	mov	r1, r5
    a3aa:	4620      	mov	r0, r4
    a3ac:	f7ff ffda 	bl	a364 <mul_n_sqr>
    a3b0:	2220      	movs	r2, #32
    a3b2:	4629      	mov	r1, r5
    a3b4:	4620      	mov	r0, r4
    a3b6:	f7ff ffd5 	bl	a364 <mul_n_sqr>
    a3ba:	220f      	movs	r2, #15
    a3bc:	4629      	mov	r1, r5
    a3be:	4620      	mov	r0, r4
    a3c0:	f7ff ffd0 	bl	a364 <mul_n_sqr>
    a3c4:	4620      	mov	r0, r4
    a3c6:	f7f7 fc6d 	bl	1ca4 <conjugate_fp12>
    a3ca:	bd38      	pop	{r3, r4, r5, pc}

0000a3cc <sqr_fp6>:
    a3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a3d0:	b0ef      	sub	sp, #444	; 0x1bc
    a3d2:	4606      	mov	r6, r0
    a3d4:	4689      	mov	r9, r1
    a3d6:	f8df a1f0 	ldr.w	sl, [pc, #496]	; a5c8 <sqr_fp6+0x1fc>
    a3da:	4c7c      	ldr	r4, [pc, #496]	; (a5cc <sqr_fp6+0x200>)
    a3dc:	4653      	mov	r3, sl
    a3de:	4622      	mov	r2, r4
    a3e0:	a856      	add	r0, sp, #344	; 0x158
    a3e2:	f7fd f9f3 	bl	77cc <sqr_mont_384x>
    a3e6:	f109 0b60 	add.w	fp, r9, #96	; 0x60
    a3ea:	f8cd a000 	str.w	sl, [sp]
    a3ee:	4623      	mov	r3, r4
    a3f0:	465a      	mov	r2, fp
    a3f2:	4649      	mov	r1, r9
    a3f4:	a83e      	add	r0, sp, #248	; 0xf8
    a3f6:	f7f9 ff5b 	bl	42b0 <mul_mont_384x>
    a3fa:	250c      	movs	r5, #12
    a3fc:	9500      	str	r5, [sp, #0]
    a3fe:	4623      	mov	r3, r4
    a400:	aa3e      	add	r2, sp, #248	; 0xf8
    a402:	4611      	mov	r1, r2
    a404:	4610      	mov	r0, r2
    a406:	f7f6 fc39 	bl	c7c <add_mod_n>
    a40a:	9500      	str	r5, [sp, #0]
    a40c:	4623      	mov	r3, r4
    a40e:	aa4a      	add	r2, sp, #296	; 0x128
    a410:	4611      	mov	r1, r2
    a412:	4610      	mov	r0, r2
    a414:	f7f6 fc32 	bl	c7c <add_mod_n>
    a418:	f109 08c0 	add.w	r8, r9, #192	; 0xc0
    a41c:	f8cd a000 	str.w	sl, [sp]
    a420:	4623      	mov	r3, r4
    a422:	4642      	mov	r2, r8
    a424:	4659      	mov	r1, fp
    a426:	a826      	add	r0, sp, #152	; 0x98
    a428:	f7f9 ff42 	bl	42b0 <mul_mont_384x>
    a42c:	9500      	str	r5, [sp, #0]
    a42e:	4623      	mov	r3, r4
    a430:	aa26      	add	r2, sp, #152	; 0x98
    a432:	4611      	mov	r1, r2
    a434:	4610      	mov	r0, r2
    a436:	f7f6 fc21 	bl	c7c <add_mod_n>
    a43a:	9500      	str	r5, [sp, #0]
    a43c:	4623      	mov	r3, r4
    a43e:	aa32      	add	r2, sp, #200	; 0xc8
    a440:	4611      	mov	r1, r2
    a442:	4610      	mov	r0, r2
    a444:	f7f6 fc1a 	bl	c7c <add_mod_n>
    a448:	4653      	mov	r3, sl
    a44a:	4622      	mov	r2, r4
    a44c:	4641      	mov	r1, r8
    a44e:	a80e      	add	r0, sp, #56	; 0x38
    a450:	f7fd f9bc 	bl	77cc <sqr_mont_384x>
    a454:	f106 07c0 	add.w	r7, r6, #192	; 0xc0
    a458:	9500      	str	r5, [sp, #0]
    a45a:	4623      	mov	r3, r4
    a45c:	465a      	mov	r2, fp
    a45e:	4641      	mov	r1, r8
    a460:	4638      	mov	r0, r7
    a462:	f7f6 fc0b 	bl	c7c <add_mod_n>
    a466:	f106 08f0 	add.w	r8, r6, #240	; 0xf0
    a46a:	9500      	str	r5, [sp, #0]
    a46c:	4623      	mov	r3, r4
    a46e:	f109 0290 	add.w	r2, r9, #144	; 0x90
    a472:	f109 01f0 	add.w	r1, r9, #240	; 0xf0
    a476:	4640      	mov	r0, r8
    a478:	f7f6 fc00 	bl	c7c <add_mod_n>
    a47c:	9500      	str	r5, [sp, #0]
    a47e:	4623      	mov	r3, r4
    a480:	464a      	mov	r2, r9
    a482:	4639      	mov	r1, r7
    a484:	4638      	mov	r0, r7
    a486:	f7f6 fbf9 	bl	c7c <add_mod_n>
    a48a:	9500      	str	r5, [sp, #0]
    a48c:	4623      	mov	r3, r4
    a48e:	f109 0230 	add.w	r2, r9, #48	; 0x30
    a492:	4641      	mov	r1, r8
    a494:	4640      	mov	r0, r8
    a496:	f7f6 fbf1 	bl	c7c <add_mod_n>
    a49a:	4653      	mov	r3, sl
    a49c:	4622      	mov	r2, r4
    a49e:	4639      	mov	r1, r7
    a4a0:	4638      	mov	r0, r7
    a4a2:	f7fd f993 	bl	77cc <sqr_mont_384x>
    a4a6:	9500      	str	r5, [sp, #0]
    a4a8:	4623      	mov	r3, r4
    a4aa:	aa56      	add	r2, sp, #344	; 0x158
    a4ac:	4639      	mov	r1, r7
    a4ae:	4638      	mov	r0, r7
    a4b0:	f7f6 f88e 	bl	5d0 <sub_mod_n>
    a4b4:	9500      	str	r5, [sp, #0]
    a4b6:	4623      	mov	r3, r4
    a4b8:	aa62      	add	r2, sp, #392	; 0x188
    a4ba:	4641      	mov	r1, r8
    a4bc:	4640      	mov	r0, r8
    a4be:	f7f6 f887 	bl	5d0 <sub_mod_n>
    a4c2:	9500      	str	r5, [sp, #0]
    a4c4:	4623      	mov	r3, r4
    a4c6:	aa0e      	add	r2, sp, #56	; 0x38
    a4c8:	4639      	mov	r1, r7
    a4ca:	4638      	mov	r0, r7
    a4cc:	f7f6 f880 	bl	5d0 <sub_mod_n>
    a4d0:	9500      	str	r5, [sp, #0]
    a4d2:	4623      	mov	r3, r4
    a4d4:	aa1a      	add	r2, sp, #104	; 0x68
    a4d6:	4641      	mov	r1, r8
    a4d8:	4640      	mov	r0, r8
    a4da:	f7f6 f879 	bl	5d0 <sub_mod_n>
    a4de:	9500      	str	r5, [sp, #0]
    a4e0:	4623      	mov	r3, r4
    a4e2:	aa3e      	add	r2, sp, #248	; 0xf8
    a4e4:	4639      	mov	r1, r7
    a4e6:	4638      	mov	r0, r7
    a4e8:	f7f6 f872 	bl	5d0 <sub_mod_n>
    a4ec:	9500      	str	r5, [sp, #0]
    a4ee:	4623      	mov	r3, r4
    a4f0:	aa4a      	add	r2, sp, #296	; 0x128
    a4f2:	4641      	mov	r1, r8
    a4f4:	4640      	mov	r0, r8
    a4f6:	f7f6 f86b 	bl	5d0 <sub_mod_n>
    a4fa:	9500      	str	r5, [sp, #0]
    a4fc:	4623      	mov	r3, r4
    a4fe:	aa26      	add	r2, sp, #152	; 0x98
    a500:	4639      	mov	r1, r7
    a502:	4638      	mov	r0, r7
    a504:	f7f6 f864 	bl	5d0 <sub_mod_n>
    a508:	9500      	str	r5, [sp, #0]
    a50a:	4623      	mov	r3, r4
    a50c:	aa32      	add	r2, sp, #200	; 0xc8
    a50e:	4641      	mov	r1, r8
    a510:	4640      	mov	r0, r8
    a512:	f7f6 f85d 	bl	5d0 <sub_mod_n>
    a516:	9500      	str	r5, [sp, #0]
    a518:	4623      	mov	r3, r4
    a51a:	aa32      	add	r2, sp, #200	; 0xc8
    a51c:	a926      	add	r1, sp, #152	; 0x98
    a51e:	a802      	add	r0, sp, #8
    a520:	f7f6 fbac 	bl	c7c <add_mod_n>
    a524:	9500      	str	r5, [sp, #0]
    a526:	4623      	mov	r3, r4
    a528:	aa32      	add	r2, sp, #200	; 0xc8
    a52a:	a926      	add	r1, sp, #152	; 0x98
    a52c:	4630      	mov	r0, r6
    a52e:	f7f6 f84f 	bl	5d0 <sub_mod_n>
    a532:	aa02      	add	r2, sp, #8
    a534:	f106 032c 	add.w	r3, r6, #44	; 0x2c
    a538:	f106 005c 	add.w	r0, r6, #92	; 0x5c
    a53c:	f852 1b04 	ldr.w	r1, [r2], #4
    a540:	f843 1f04 	str.w	r1, [r3, #4]!
    a544:	4298      	cmp	r0, r3
    a546:	d1f9      	bne.n	a53c <sqr_fp6+0x170>
    a548:	4c20      	ldr	r4, [pc, #128]	; (a5cc <sqr_fp6+0x200>)
    a54a:	250c      	movs	r5, #12
    a54c:	9500      	str	r5, [sp, #0]
    a54e:	4623      	mov	r3, r4
    a550:	aa56      	add	r2, sp, #344	; 0x158
    a552:	4631      	mov	r1, r6
    a554:	4630      	mov	r0, r6
    a556:	f7f6 fb91 	bl	c7c <add_mod_n>
    a55a:	f106 0030 	add.w	r0, r6, #48	; 0x30
    a55e:	9500      	str	r5, [sp, #0]
    a560:	4623      	mov	r3, r4
    a562:	aa62      	add	r2, sp, #392	; 0x188
    a564:	4601      	mov	r1, r0
    a566:	f7f6 fb89 	bl	c7c <add_mod_n>
    a56a:	f106 0760 	add.w	r7, r6, #96	; 0x60
    a56e:	9500      	str	r5, [sp, #0]
    a570:	4623      	mov	r3, r4
    a572:	aa1a      	add	r2, sp, #104	; 0x68
    a574:	a90e      	add	r1, sp, #56	; 0x38
    a576:	a802      	add	r0, sp, #8
    a578:	f7f6 fb80 	bl	c7c <add_mod_n>
    a57c:	9500      	str	r5, [sp, #0]
    a57e:	4623      	mov	r3, r4
    a580:	aa1a      	add	r2, sp, #104	; 0x68
    a582:	a90e      	add	r1, sp, #56	; 0x38
    a584:	4638      	mov	r0, r7
    a586:	f7f6 f823 	bl	5d0 <sub_mod_n>
    a58a:	aa02      	add	r2, sp, #8
    a58c:	f106 038c 	add.w	r3, r6, #140	; 0x8c
    a590:	f106 00bc 	add.w	r0, r6, #188	; 0xbc
    a594:	f852 1b04 	ldr.w	r1, [r2], #4
    a598:	f843 1f04 	str.w	r1, [r3, #4]!
    a59c:	4283      	cmp	r3, r0
    a59e:	d1f9      	bne.n	a594 <sqr_fp6+0x1c8>
    a5a0:	4c0a      	ldr	r4, [pc, #40]	; (a5cc <sqr_fp6+0x200>)
    a5a2:	250c      	movs	r5, #12
    a5a4:	9500      	str	r5, [sp, #0]
    a5a6:	4623      	mov	r3, r4
    a5a8:	aa3e      	add	r2, sp, #248	; 0xf8
    a5aa:	4639      	mov	r1, r7
    a5ac:	4638      	mov	r0, r7
    a5ae:	f7f6 fb65 	bl	c7c <add_mod_n>
    a5b2:	f106 0090 	add.w	r0, r6, #144	; 0x90
    a5b6:	9500      	str	r5, [sp, #0]
    a5b8:	4623      	mov	r3, r4
    a5ba:	aa4a      	add	r2, sp, #296	; 0x128
    a5bc:	4601      	mov	r1, r0
    a5be:	f7f6 fb5d 	bl	c7c <add_mod_n>
    a5c2:	b06f      	add	sp, #444	; 0x1bc
    a5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a5c8:	fffcfffd 	.word	0xfffcfffd
    a5cc:	00015a08 	.word	0x00015a08

0000a5d0 <inverse_fp12>:
    a5d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a5d4:	f5ad 6d8b 	sub.w	sp, sp, #1112	; 0x458
    a5d8:	4605      	mov	r5, r0
    a5da:	460e      	mov	r6, r1
    a5dc:	a8ce      	add	r0, sp, #824	; 0x338
    a5de:	f7ff fef5 	bl	a3cc <sqr_fp6>
    a5e2:	f506 7790 	add.w	r7, r6, #288	; 0x120
    a5e6:	4639      	mov	r1, r7
    a5e8:	a886      	add	r0, sp, #536	; 0x218
    a5ea:	f7ff feef 	bl	a3cc <sqr_fp6>
    a5ee:	4cb7      	ldr	r4, [pc, #732]	; (a8cc <inverse_fp12+0x2fc>)
    a5f0:	f04f 080c 	mov.w	r8, #12
    a5f4:	f8cd 8000 	str.w	r8, [sp]
    a5f8:	4623      	mov	r3, r4
    a5fa:	aac2      	add	r2, sp, #776	; 0x308
    a5fc:	a9b6      	add	r1, sp, #728	; 0x2d8
    a5fe:	a86e      	add	r0, sp, #440	; 0x1b8
    a600:	f7f6 fb3c 	bl	c7c <add_mod_n>
    a604:	f8cd 8000 	str.w	r8, [sp]
    a608:	4623      	mov	r3, r4
    a60a:	aac2      	add	r2, sp, #776	; 0x308
    a60c:	a9b6      	add	r1, sp, #728	; 0x2d8
    a60e:	4608      	mov	r0, r1
    a610:	f7f5 ffde 	bl	5d0 <sub_mod_n>
    a614:	ab6e      	add	r3, sp, #440	; 0x1b8
    a616:	aac1      	add	r2, sp, #772	; 0x304
    a618:	a87a      	add	r0, sp, #488	; 0x1e8
    a61a:	f853 1b04 	ldr.w	r1, [r3], #4
    a61e:	f842 1f04 	str.w	r1, [r2, #4]!
    a622:	4283      	cmp	r3, r0
    a624:	d1f9      	bne.n	a61a <inverse_fp12+0x4a>
    a626:	4ca9      	ldr	r4, [pc, #676]	; (a8cc <inverse_fp12+0x2fc>)
    a628:	f04f 080c 	mov.w	r8, #12
    a62c:	f8cd 8000 	str.w	r8, [sp]
    a630:	4623      	mov	r3, r4
    a632:	aab6      	add	r2, sp, #728	; 0x2d8
    a634:	a9ce      	add	r1, sp, #824	; 0x338
    a636:	4608      	mov	r0, r1
    a638:	f7f5 ffca 	bl	5d0 <sub_mod_n>
    a63c:	f8cd 8000 	str.w	r8, [sp]
    a640:	4623      	mov	r3, r4
    a642:	aac2      	add	r2, sp, #776	; 0x308
    a644:	a9da      	add	r1, sp, #872	; 0x368
    a646:	4608      	mov	r0, r1
    a648:	f7f5 ffc2 	bl	5d0 <sub_mod_n>
    a64c:	f8cd 8000 	str.w	r8, [sp]
    a650:	4623      	mov	r3, r4
    a652:	aa86      	add	r2, sp, #536	; 0x218
    a654:	a9e6      	add	r1, sp, #920	; 0x398
    a656:	4608      	mov	r0, r1
    a658:	f7f5 ffba 	bl	5d0 <sub_mod_n>
    a65c:	f8cd 8000 	str.w	r8, [sp]
    a660:	4623      	mov	r3, r4
    a662:	aa92      	add	r2, sp, #584	; 0x248
    a664:	a9f2      	add	r1, sp, #968	; 0x3c8
    a666:	4608      	mov	r0, r1
    a668:	f7f5 ffb2 	bl	5d0 <sub_mod_n>
    a66c:	f8cd 8000 	str.w	r8, [sp]
    a670:	4623      	mov	r3, r4
    a672:	aa9e      	add	r2, sp, #632	; 0x278
    a674:	a9fe      	add	r1, sp, #1016	; 0x3f8
    a676:	4608      	mov	r0, r1
    a678:	f7f5 ffaa 	bl	5d0 <sub_mod_n>
    a67c:	f8cd 8000 	str.w	r8, [sp]
    a680:	4623      	mov	r3, r4
    a682:	aaaa      	add	r2, sp, #680	; 0x2a8
    a684:	f50d 6185 	add.w	r1, sp, #1064	; 0x428
    a688:	4608      	mov	r0, r1
    a68a:	f7f5 ffa1 	bl	5d0 <sub_mod_n>
    a68e:	f8df 9240 	ldr.w	r9, [pc, #576]	; a8d0 <inverse_fp12+0x300>
    a692:	464b      	mov	r3, r9
    a694:	4622      	mov	r2, r4
    a696:	a9ce      	add	r1, sp, #824	; 0x338
    a698:	a80e      	add	r0, sp, #56	; 0x38
    a69a:	f7fd f897 	bl	77cc <sqr_mont_384x>
    a69e:	f8cd 9000 	str.w	r9, [sp]
    a6a2:	4623      	mov	r3, r4
    a6a4:	aafe      	add	r2, sp, #1016	; 0x3f8
    a6a6:	a9e6      	add	r1, sp, #920	; 0x398
    a6a8:	a856      	add	r0, sp, #344	; 0x158
    a6aa:	f7f9 fe01 	bl	42b0 <mul_mont_384x>
    a6ae:	f8cd 8000 	str.w	r8, [sp]
    a6b2:	4623      	mov	r3, r4
    a6b4:	aa62      	add	r2, sp, #392	; 0x188
    a6b6:	a956      	add	r1, sp, #344	; 0x158
    a6b8:	a86e      	add	r0, sp, #440	; 0x1b8
    a6ba:	f7f6 fadf 	bl	c7c <add_mod_n>
    a6be:	f8cd 8000 	str.w	r8, [sp]
    a6c2:	4623      	mov	r3, r4
    a6c4:	aa62      	add	r2, sp, #392	; 0x188
    a6c6:	a956      	add	r1, sp, #344	; 0x158
    a6c8:	4608      	mov	r0, r1
    a6ca:	f7f5 ff81 	bl	5d0 <sub_mod_n>
    a6ce:	ab6e      	add	r3, sp, #440	; 0x1b8
    a6d0:	ac61      	add	r4, sp, #388	; 0x184
    a6d2:	a87a      	add	r0, sp, #488	; 0x1e8
    a6d4:	4622      	mov	r2, r4
    a6d6:	f853 1b04 	ldr.w	r1, [r3], #4
    a6da:	f842 1f04 	str.w	r1, [r2, #4]!
    a6de:	4283      	cmp	r3, r0
    a6e0:	d1f9      	bne.n	a6d6 <inverse_fp12+0x106>
    a6e2:	f8df 81e8 	ldr.w	r8, [pc, #488]	; a8cc <inverse_fp12+0x2fc>
    a6e6:	f04f 090c 	mov.w	r9, #12
    a6ea:	f8cd 9000 	str.w	r9, [sp]
    a6ee:	4643      	mov	r3, r8
    a6f0:	aa56      	add	r2, sp, #344	; 0x158
    a6f2:	a90e      	add	r1, sp, #56	; 0x38
    a6f4:	4608      	mov	r0, r1
    a6f6:	f7f5 ff6b 	bl	5d0 <sub_mod_n>
    a6fa:	f8cd 9000 	str.w	r9, [sp]
    a6fe:	4643      	mov	r3, r8
    a700:	aa62      	add	r2, sp, #392	; 0x188
    a702:	a91a      	add	r1, sp, #104	; 0x68
    a704:	4608      	mov	r0, r1
    a706:	f7f5 ff63 	bl	5d0 <sub_mod_n>
    a70a:	4b71      	ldr	r3, [pc, #452]	; (a8d0 <inverse_fp12+0x300>)
    a70c:	4642      	mov	r2, r8
    a70e:	a9fe      	add	r1, sp, #1016	; 0x3f8
    a710:	a826      	add	r0, sp, #152	; 0x98
    a712:	f7fd f85b 	bl	77cc <sqr_mont_384x>
    a716:	f8cd 9000 	str.w	r9, [sp]
    a71a:	4643      	mov	r3, r8
    a71c:	aa32      	add	r2, sp, #200	; 0xc8
    a71e:	a926      	add	r1, sp, #152	; 0x98
    a720:	a86e      	add	r0, sp, #440	; 0x1b8
    a722:	f7f6 faab 	bl	c7c <add_mod_n>
    a726:	f8cd 9000 	str.w	r9, [sp]
    a72a:	4643      	mov	r3, r8
    a72c:	aa32      	add	r2, sp, #200	; 0xc8
    a72e:	a926      	add	r1, sp, #152	; 0x98
    a730:	4608      	mov	r0, r1
    a732:	f7f5 ff4d 	bl	5d0 <sub_mod_n>
    a736:	ab6e      	add	r3, sp, #440	; 0x1b8
    a738:	aa31      	add	r2, sp, #196	; 0xc4
    a73a:	a87a      	add	r0, sp, #488	; 0x1e8
    a73c:	f853 1b04 	ldr.w	r1, [r3], #4
    a740:	f842 1f04 	str.w	r1, [r2, #4]!
    a744:	4298      	cmp	r0, r3
    a746:	d1f9      	bne.n	a73c <inverse_fp12+0x16c>
    a748:	f8df 8180 	ldr.w	r8, [pc, #384]	; a8cc <inverse_fp12+0x2fc>
    a74c:	f8df a180 	ldr.w	sl, [pc, #384]	; a8d0 <inverse_fp12+0x300>
    a750:	f8cd a000 	str.w	sl, [sp]
    a754:	4643      	mov	r3, r8
    a756:	aae6      	add	r2, sp, #920	; 0x398
    a758:	a9ce      	add	r1, sp, #824	; 0x338
    a75a:	a856      	add	r0, sp, #344	; 0x158
    a75c:	f7f9 fda8 	bl	42b0 <mul_mont_384x>
    a760:	f04f 090c 	mov.w	r9, #12
    a764:	f8cd 9000 	str.w	r9, [sp]
    a768:	4643      	mov	r3, r8
    a76a:	aa56      	add	r2, sp, #344	; 0x158
    a76c:	a926      	add	r1, sp, #152	; 0x98
    a76e:	4608      	mov	r0, r1
    a770:	f7f5 ff2e 	bl	5d0 <sub_mod_n>
    a774:	f8cd 9000 	str.w	r9, [sp]
    a778:	4643      	mov	r3, r8
    a77a:	aa62      	add	r2, sp, #392	; 0x188
    a77c:	a932      	add	r1, sp, #200	; 0xc8
    a77e:	4608      	mov	r0, r1
    a780:	f7f5 ff26 	bl	5d0 <sub_mod_n>
    a784:	4653      	mov	r3, sl
    a786:	4642      	mov	r2, r8
    a788:	a9e6      	add	r1, sp, #920	; 0x398
    a78a:	a83e      	add	r0, sp, #248	; 0xf8
    a78c:	f7fd f81e 	bl	77cc <sqr_mont_384x>
    a790:	f8cd a000 	str.w	sl, [sp]
    a794:	4643      	mov	r3, r8
    a796:	aafe      	add	r2, sp, #1016	; 0x3f8
    a798:	a9ce      	add	r1, sp, #824	; 0x338
    a79a:	a856      	add	r0, sp, #344	; 0x158
    a79c:	f7f9 fd88 	bl	42b0 <mul_mont_384x>
    a7a0:	f8cd 9000 	str.w	r9, [sp]
    a7a4:	4643      	mov	r3, r8
    a7a6:	aa56      	add	r2, sp, #344	; 0x158
    a7a8:	a93e      	add	r1, sp, #248	; 0xf8
    a7aa:	4608      	mov	r0, r1
    a7ac:	f7f5 ff10 	bl	5d0 <sub_mod_n>
    a7b0:	f8cd 9000 	str.w	r9, [sp]
    a7b4:	4643      	mov	r3, r8
    a7b6:	aa62      	add	r2, sp, #392	; 0x188
    a7b8:	a94a      	add	r1, sp, #296	; 0x128
    a7ba:	4608      	mov	r0, r1
    a7bc:	f7f5 ff08 	bl	5d0 <sub_mod_n>
    a7c0:	f8cd a000 	str.w	sl, [sp]
    a7c4:	4643      	mov	r3, r8
    a7c6:	aafe      	add	r2, sp, #1016	; 0x3f8
    a7c8:	a926      	add	r1, sp, #152	; 0x98
    a7ca:	a856      	add	r0, sp, #344	; 0x158
    a7cc:	f7f9 fd70 	bl	42b0 <mul_mont_384x>
    a7d0:	f8cd a000 	str.w	sl, [sp]
    a7d4:	4643      	mov	r3, r8
    a7d6:	aae6      	add	r2, sp, #920	; 0x398
    a7d8:	a93e      	add	r1, sp, #248	; 0xf8
    a7da:	a86e      	add	r0, sp, #440	; 0x1b8
    a7dc:	f7f9 fd68 	bl	42b0 <mul_mont_384x>
    a7e0:	f8cd 9000 	str.w	r9, [sp]
    a7e4:	4643      	mov	r3, r8
    a7e6:	aa6e      	add	r2, sp, #440	; 0x1b8
    a7e8:	a956      	add	r1, sp, #344	; 0x158
    a7ea:	4608      	mov	r0, r1
    a7ec:	f7f6 fa46 	bl	c7c <add_mod_n>
    a7f0:	f8cd 9000 	str.w	r9, [sp]
    a7f4:	4643      	mov	r3, r8
    a7f6:	aa7a      	add	r2, sp, #488	; 0x1e8
    a7f8:	a962      	add	r1, sp, #392	; 0x188
    a7fa:	4608      	mov	r0, r1
    a7fc:	f7f6 fa3e 	bl	c7c <add_mod_n>
    a800:	f8cd 9000 	str.w	r9, [sp]
    a804:	4643      	mov	r3, r8
    a806:	aa62      	add	r2, sp, #392	; 0x188
    a808:	a956      	add	r1, sp, #344	; 0x158
    a80a:	a802      	add	r0, sp, #8
    a80c:	f7f6 fa36 	bl	c7c <add_mod_n>
    a810:	f8cd 9000 	str.w	r9, [sp]
    a814:	4643      	mov	r3, r8
    a816:	aa62      	add	r2, sp, #392	; 0x188
    a818:	a956      	add	r1, sp, #344	; 0x158
    a81a:	4608      	mov	r0, r1
    a81c:	f7f5 fed8 	bl	5d0 <sub_mod_n>
    a820:	ab02      	add	r3, sp, #8
    a822:	a90e      	add	r1, sp, #56	; 0x38
    a824:	f853 2b04 	ldr.w	r2, [r3], #4
    a828:	f844 2f04 	str.w	r2, [r4, #4]!
    a82c:	4299      	cmp	r1, r3
    a82e:	d1f9      	bne.n	a824 <inverse_fp12+0x254>
    a830:	4c26      	ldr	r4, [pc, #152]	; (a8cc <inverse_fp12+0x2fc>)
    a832:	f8df 809c 	ldr.w	r8, [pc, #156]	; a8d0 <inverse_fp12+0x300>
    a836:	f8cd 8000 	str.w	r8, [sp]
    a83a:	4623      	mov	r3, r4
    a83c:	aace      	add	r2, sp, #824	; 0x338
    a83e:	a90e      	add	r1, sp, #56	; 0x38
    a840:	a86e      	add	r0, sp, #440	; 0x1b8
    a842:	f7f9 fd35 	bl	42b0 <mul_mont_384x>
    a846:	f04f 090c 	mov.w	r9, #12
    a84a:	f8cd 9000 	str.w	r9, [sp]
    a84e:	4623      	mov	r3, r4
    a850:	aa6e      	add	r2, sp, #440	; 0x1b8
    a852:	a956      	add	r1, sp, #344	; 0x158
    a854:	4608      	mov	r0, r1
    a856:	f7f6 fa11 	bl	c7c <add_mod_n>
    a85a:	f8cd 9000 	str.w	r9, [sp]
    a85e:	4623      	mov	r3, r4
    a860:	aa7a      	add	r2, sp, #488	; 0x1e8
    a862:	a962      	add	r1, sp, #392	; 0x188
    a864:	4608      	mov	r0, r1
    a866:	f7f6 fa09 	bl	c7c <add_mod_n>
    a86a:	a956      	add	r1, sp, #344	; 0x158
    a86c:	a86e      	add	r0, sp, #440	; 0x1b8
    a86e:	f7fb f845 	bl	58fc <reciprocal_fp2>
    a872:	f8cd 8000 	str.w	r8, [sp]
    a876:	4623      	mov	r3, r4
    a878:	aa6e      	add	r2, sp, #440	; 0x1b8
    a87a:	a90e      	add	r1, sp, #56	; 0x38
    a87c:	a886      	add	r0, sp, #536	; 0x218
    a87e:	f7f9 fd17 	bl	42b0 <mul_mont_384x>
    a882:	f8cd 8000 	str.w	r8, [sp]
    a886:	4623      	mov	r3, r4
    a888:	aa6e      	add	r2, sp, #440	; 0x1b8
    a88a:	a926      	add	r1, sp, #152	; 0x98
    a88c:	a89e      	add	r0, sp, #632	; 0x278
    a88e:	f7f9 fd0f 	bl	42b0 <mul_mont_384x>
    a892:	f8cd 8000 	str.w	r8, [sp]
    a896:	4623      	mov	r3, r4
    a898:	aa6e      	add	r2, sp, #440	; 0x1b8
    a89a:	a93e      	add	r1, sp, #248	; 0xf8
    a89c:	a8b6      	add	r0, sp, #728	; 0x2d8
    a89e:	f7f9 fd07 	bl	42b0 <mul_mont_384x>
    a8a2:	aa86      	add	r2, sp, #536	; 0x218
    a8a4:	4631      	mov	r1, r6
    a8a6:	4628      	mov	r0, r5
    a8a8:	f7f9 feb0 	bl	460c <mul_fp6>
    a8ac:	f505 7590 	add.w	r5, r5, #288	; 0x120
    a8b0:	aa86      	add	r2, sp, #536	; 0x218
    a8b2:	4639      	mov	r1, r7
    a8b4:	4628      	mov	r0, r5
    a8b6:	f7f9 fea9 	bl	460c <mul_fp6>
    a8ba:	4629      	mov	r1, r5
    a8bc:	4628      	mov	r0, r5
    a8be:	f7f7 f9b5 	bl	1c2c <neg_fp6>
    a8c2:	f50d 6d8b 	add.w	sp, sp, #1112	; 0x458
    a8c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a8ca:	bf00      	nop
    a8cc:	00015a08 	.word	0x00015a08
    a8d0:	fffcfffd 	.word	0xfffcfffd

0000a8d4 <blst_fp12_inverse>:
    a8d4:	b508      	push	{r3, lr}
    a8d6:	f7ff fe7b 	bl	a5d0 <inverse_fp12>
    a8da:	bd08      	pop	{r3, pc}

0000a8dc <final_exp>:
    a8dc:	b530      	push	{r4, r5, lr}
    a8de:	f6ad 1d04 	subw	sp, sp, #2308	; 0x904
    a8e2:	4604      	mov	r4, r0
    a8e4:	460d      	mov	r5, r1
    a8e6:	f1a1 0c04 	sub.w	ip, r1, #4
    a8ea:	f50d 6390 	add.w	r3, sp, #1152	; 0x480
    a8ee:	f50d 60d8 	add.w	r0, sp, #1728	; 0x6c0
    a8f2:	f85c 2f04 	ldr.w	r2, [ip, #4]!
    a8f6:	f843 2b04 	str.w	r2, [r3], #4
    a8fa:	4283      	cmp	r3, r0
    a8fc:	d1f9      	bne.n	a8f2 <final_exp+0x16>
    a8fe:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
    a902:	f7f7 f9cf 	bl	1ca4 <conjugate_fp12>
    a906:	4629      	mov	r1, r5
    a908:	a890      	add	r0, sp, #576	; 0x240
    a90a:	f7ff fe61 	bl	a5d0 <inverse_fp12>
    a90e:	aa90      	add	r2, sp, #576	; 0x240
    a910:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
    a914:	4620      	mov	r0, r4
    a916:	f7f9 ffdf 	bl	48d8 <mul_fp12>
    a91a:	2202      	movs	r2, #2
    a91c:	4621      	mov	r1, r4
    a91e:	a890      	add	r0, sp, #576	; 0x240
    a920:	f7f9 fdfa 	bl	4518 <frobenius_map_fp12>
    a924:	aa90      	add	r2, sp, #576	; 0x240
    a926:	4621      	mov	r1, r4
    a928:	4620      	mov	r0, r4
    a92a:	f7f9 ffd5 	bl	48d8 <mul_fp12>
    a92e:	4621      	mov	r1, r4
    a930:	f50d 60d8 	add.w	r0, sp, #1728	; 0x6c0
    a934:	f7ff fbb8 	bl	a0a8 <cyclotomic_sqr_fp12>
    a938:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
    a93c:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
    a940:	f7ff fd22 	bl	a388 <raise_to_z_div_by_2>
    a944:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
    a948:	4608      	mov	r0, r1
    a94a:	f7ff fbad 	bl	a0a8 <cyclotomic_sqr_fp12>
    a94e:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
    a952:	a890      	add	r0, sp, #576	; 0x240
    a954:	f7ff fd18 	bl	a388 <raise_to_z_div_by_2>
    a958:	f1a4 0c04 	sub.w	ip, r4, #4
    a95c:	466b      	mov	r3, sp
    a95e:	a990      	add	r1, sp, #576	; 0x240
    a960:	f85c 2f04 	ldr.w	r2, [ip, #4]!
    a964:	f843 2b04 	str.w	r2, [r3], #4
    a968:	428b      	cmp	r3, r1
    a96a:	d1f9      	bne.n	a960 <final_exp+0x84>
    a96c:	4668      	mov	r0, sp
    a96e:	f7f7 f999 	bl	1ca4 <conjugate_fp12>
    a972:	466a      	mov	r2, sp
    a974:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
    a978:	4608      	mov	r0, r1
    a97a:	f7f9 ffad 	bl	48d8 <mul_fp12>
    a97e:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
    a982:	f7f7 f98f 	bl	1ca4 <conjugate_fp12>
    a986:	aa90      	add	r2, sp, #576	; 0x240
    a988:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
    a98c:	4608      	mov	r0, r1
    a98e:	f7f9 ffa3 	bl	48d8 <mul_fp12>
    a992:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
    a996:	a890      	add	r0, sp, #576	; 0x240
    a998:	f7ff fcf6 	bl	a388 <raise_to_z_div_by_2>
    a99c:	a990      	add	r1, sp, #576	; 0x240
    a99e:	4608      	mov	r0, r1
    a9a0:	f7ff fb82 	bl	a0a8 <cyclotomic_sqr_fp12>
    a9a4:	a990      	add	r1, sp, #576	; 0x240
    a9a6:	4668      	mov	r0, sp
    a9a8:	f7ff fcee 	bl	a388 <raise_to_z_div_by_2>
    a9ac:	4669      	mov	r1, sp
    a9ae:	4668      	mov	r0, sp
    a9b0:	f7ff fb7a 	bl	a0a8 <cyclotomic_sqr_fp12>
    a9b4:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
    a9b8:	f7f7 f974 	bl	1ca4 <conjugate_fp12>
    a9bc:	f50d 6290 	add.w	r2, sp, #1152	; 0x480
    a9c0:	4669      	mov	r1, sp
    a9c2:	4668      	mov	r0, sp
    a9c4:	f7f9 ff88 	bl	48d8 <mul_fp12>
    a9c8:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
    a9cc:	f7f7 f96a 	bl	1ca4 <conjugate_fp12>
    a9d0:	2203      	movs	r2, #3
    a9d2:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
    a9d6:	4608      	mov	r0, r1
    a9d8:	f7f9 fd9e 	bl	4518 <frobenius_map_fp12>
    a9dc:	2202      	movs	r2, #2
    a9de:	a990      	add	r1, sp, #576	; 0x240
    a9e0:	4608      	mov	r0, r1
    a9e2:	f7f9 fd99 	bl	4518 <frobenius_map_fp12>
    a9e6:	aa90      	add	r2, sp, #576	; 0x240
    a9e8:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
    a9ec:	4608      	mov	r0, r1
    a9ee:	f7f9 ff73 	bl	48d8 <mul_fp12>
    a9f2:	4669      	mov	r1, sp
    a9f4:	a890      	add	r0, sp, #576	; 0x240
    a9f6:	f7ff fcc7 	bl	a388 <raise_to_z_div_by_2>
    a9fa:	a990      	add	r1, sp, #576	; 0x240
    a9fc:	4608      	mov	r0, r1
    a9fe:	f7ff fb53 	bl	a0a8 <cyclotomic_sqr_fp12>
    aa02:	f50d 62d8 	add.w	r2, sp, #1728	; 0x6c0
    aa06:	a990      	add	r1, sp, #576	; 0x240
    aa08:	4608      	mov	r0, r1
    aa0a:	f7f9 ff65 	bl	48d8 <mul_fp12>
    aa0e:	4622      	mov	r2, r4
    aa10:	a990      	add	r1, sp, #576	; 0x240
    aa12:	4608      	mov	r0, r1
    aa14:	f7f9 ff60 	bl	48d8 <mul_fp12>
    aa18:	aa90      	add	r2, sp, #576	; 0x240
    aa1a:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
    aa1e:	4608      	mov	r0, r1
    aa20:	f7f9 ff5a 	bl	48d8 <mul_fp12>
    aa24:	2201      	movs	r2, #1
    aa26:	4669      	mov	r1, sp
    aa28:	a890      	add	r0, sp, #576	; 0x240
    aa2a:	f7f9 fd75 	bl	4518 <frobenius_map_fp12>
    aa2e:	aa90      	add	r2, sp, #576	; 0x240
    aa30:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
    aa34:	4620      	mov	r0, r4
    aa36:	f7f9 ff4f 	bl	48d8 <mul_fp12>
    aa3a:	f60d 1d04 	addw	sp, sp, #2308	; 0x904
    aa3e:	bd30      	pop	{r4, r5, pc}

0000aa40 <blst_final_exp>:
    aa40:	b508      	push	{r3, lr}
    aa42:	f7ff ff4b 	bl	a8dc <final_exp>
    aa46:	bd08      	pop	{r3, pc}

0000aa48 <line_dbl>:
    aa48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aa4c:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
    aa50:	4606      	mov	r6, r0
    aa52:	4689      	mov	r9, r1
    aa54:	4617      	mov	r7, r2
    aa56:	f8df a2dc 	ldr.w	sl, [pc, #732]	; ad34 <line_dbl+0x2ec>
    aa5a:	4cb7      	ldr	r4, [pc, #732]	; (ad38 <line_dbl+0x2f0>)
    aa5c:	4653      	mov	r3, sl
    aa5e:	4622      	mov	r2, r4
    aa60:	4639      	mov	r1, r7
    aa62:	a87e      	add	r0, sp, #504	; 0x1f8
    aa64:	f7fc feb2 	bl	77cc <sqr_mont_384x>
    aa68:	f107 0b60 	add.w	fp, r7, #96	; 0x60
    aa6c:	4653      	mov	r3, sl
    aa6e:	4622      	mov	r2, r4
    aa70:	4659      	mov	r1, fp
    aa72:	a866      	add	r0, sp, #408	; 0x198
    aa74:	f7fc feaa 	bl	77cc <sqr_mont_384x>
    aa78:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
    aa7c:	4619      	mov	r1, r3
    aa7e:	4653      	mov	r3, sl
    aa80:	4622      	mov	r2, r4
    aa82:	9103      	str	r1, [sp, #12]
    aa84:	a896      	add	r0, sp, #600	; 0x258
    aa86:	f7fc fea1 	bl	77cc <sqr_mont_384x>
    aa8a:	4653      	mov	r3, sl
    aa8c:	4622      	mov	r2, r4
    aa8e:	a866      	add	r0, sp, #408	; 0x198
    aa90:	4601      	mov	r1, r0
    aa92:	a84e      	add	r0, sp, #312	; 0x138
    aa94:	f7fc fe9a 	bl	77cc <sqr_mont_384x>
    aa98:	250c      	movs	r5, #12
    aa9a:	9500      	str	r5, [sp, #0]
    aa9c:	4623      	mov	r3, r4
    aa9e:	aa66      	add	r2, sp, #408	; 0x198
    aaa0:	4639      	mov	r1, r7
    aaa2:	a836      	add	r0, sp, #216	; 0xd8
    aaa4:	f7f6 f8ea 	bl	c7c <add_mod_n>
    aaa8:	f107 0830 	add.w	r8, r7, #48	; 0x30
    aaac:	9500      	str	r5, [sp, #0]
    aaae:	4623      	mov	r3, r4
    aab0:	aa72      	add	r2, sp, #456	; 0x1c8
    aab2:	4641      	mov	r1, r8
    aab4:	a842      	add	r0, sp, #264	; 0x108
    aab6:	f7f6 f8e1 	bl	c7c <add_mod_n>
    aaba:	4653      	mov	r3, sl
    aabc:	4622      	mov	r2, r4
    aabe:	a836      	add	r0, sp, #216	; 0xd8
    aac0:	4601      	mov	r1, r0
    aac2:	f7fc fe83 	bl	77cc <sqr_mont_384x>
    aac6:	9500      	str	r5, [sp, #0]
    aac8:	4623      	mov	r3, r4
    aaca:	aa7e      	add	r2, sp, #504	; 0x1f8
    aacc:	a836      	add	r0, sp, #216	; 0xd8
    aace:	4601      	mov	r1, r0
    aad0:	f7f5 fd7e 	bl	5d0 <sub_mod_n>
    aad4:	9500      	str	r5, [sp, #0]
    aad6:	4623      	mov	r3, r4
    aad8:	aa8a      	add	r2, sp, #552	; 0x228
    aada:	a842      	add	r0, sp, #264	; 0x108
    aadc:	4601      	mov	r1, r0
    aade:	f7f5 fd77 	bl	5d0 <sub_mod_n>
    aae2:	9500      	str	r5, [sp, #0]
    aae4:	4623      	mov	r3, r4
    aae6:	aa4e      	add	r2, sp, #312	; 0x138
    aae8:	a836      	add	r0, sp, #216	; 0xd8
    aaea:	4601      	mov	r1, r0
    aaec:	f7f5 fd70 	bl	5d0 <sub_mod_n>
    aaf0:	9500      	str	r5, [sp, #0]
    aaf2:	4623      	mov	r3, r4
    aaf4:	aa5a      	add	r2, sp, #360	; 0x168
    aaf6:	a842      	add	r0, sp, #264	; 0x108
    aaf8:	4601      	mov	r1, r0
    aafa:	f7f5 fd69 	bl	5d0 <sub_mod_n>
    aafe:	9500      	str	r5, [sp, #0]
    ab00:	4623      	mov	r3, r4
    ab02:	aa36      	add	r2, sp, #216	; 0xd8
    ab04:	4610      	mov	r0, r2
    ab06:	4611      	mov	r1, r2
    ab08:	f7f6 f8b8 	bl	c7c <add_mod_n>
    ab0c:	9500      	str	r5, [sp, #0]
    ab0e:	4623      	mov	r3, r4
    ab10:	aa42      	add	r2, sp, #264	; 0x108
    ab12:	4610      	mov	r0, r2
    ab14:	4611      	mov	r1, r2
    ab16:	f7f6 f8b1 	bl	c7c <add_mod_n>
    ab1a:	462b      	mov	r3, r5
    ab1c:	4622      	mov	r2, r4
    ab1e:	a87e      	add	r0, sp, #504	; 0x1f8
    ab20:	4601      	mov	r1, r0
    ab22:	a81e      	add	r0, sp, #120	; 0x78
    ab24:	f7f6 f932 	bl	d8c <mul_by_3_mod_n>
    ab28:	462b      	mov	r3, r5
    ab2a:	4622      	mov	r2, r4
    ab2c:	a88a      	add	r0, sp, #552	; 0x228
    ab2e:	4601      	mov	r1, r0
    ab30:	a82a      	add	r0, sp, #168	; 0xa8
    ab32:	f7f6 f92b 	bl	d8c <mul_by_3_mod_n>
    ab36:	4653      	mov	r3, sl
    ab38:	4622      	mov	r2, r4
    ab3a:	a81e      	add	r0, sp, #120	; 0x78
    ab3c:	4601      	mov	r1, r0
    ab3e:	a806      	add	r0, sp, #24
    ab40:	f7fc fe44 	bl	77cc <sqr_mont_384x>
    ab44:	9500      	str	r5, [sp, #0]
    ab46:	4623      	mov	r3, r4
    ab48:	463a      	mov	r2, r7
    ab4a:	a81e      	add	r0, sp, #120	; 0x78
    ab4c:	4601      	mov	r1, r0
    ab4e:	4630      	mov	r0, r6
    ab50:	f7f6 f894 	bl	c7c <add_mod_n>
    ab54:	f106 0030 	add.w	r0, r6, #48	; 0x30
    ab58:	9500      	str	r5, [sp, #0]
    ab5a:	4623      	mov	r3, r4
    ab5c:	4642      	mov	r2, r8
    ab5e:	f10d 0ca8 	add.w	ip, sp, #168	; 0xa8
    ab62:	4661      	mov	r1, ip
    ab64:	9005      	str	r0, [sp, #20]
    ab66:	f7f6 f889 	bl	c7c <add_mod_n>
    ab6a:	9500      	str	r5, [sp, #0]
    ab6c:	4623      	mov	r3, r4
    ab6e:	aa36      	add	r2, sp, #216	; 0xd8
    ab70:	f10d 0c18 	add.w	ip, sp, #24
    ab74:	4661      	mov	r1, ip
    ab76:	4648      	mov	r0, r9
    ab78:	f7f5 fd2a 	bl	5d0 <sub_mod_n>
    ab7c:	f109 0830 	add.w	r8, r9, #48	; 0x30
    ab80:	9500      	str	r5, [sp, #0]
    ab82:	4623      	mov	r3, r4
    ab84:	aa42      	add	r2, sp, #264	; 0x108
    ab86:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
    ab8a:	4661      	mov	r1, ip
    ab8c:	4640      	mov	r0, r8
    ab8e:	f7f5 fd1f 	bl	5d0 <sub_mod_n>
    ab92:	9500      	str	r5, [sp, #0]
    ab94:	4623      	mov	r3, r4
    ab96:	aa36      	add	r2, sp, #216	; 0xd8
    ab98:	4649      	mov	r1, r9
    ab9a:	4648      	mov	r0, r9
    ab9c:	f7f5 fd18 	bl	5d0 <sub_mod_n>
    aba0:	9500      	str	r5, [sp, #0]
    aba2:	4623      	mov	r3, r4
    aba4:	aa42      	add	r2, sp, #264	; 0x108
    aba6:	4641      	mov	r1, r8
    aba8:	f8cd 8010 	str.w	r8, [sp, #16]
    abac:	4640      	mov	r0, r8
    abae:	f7f5 fd0f 	bl	5d0 <sub_mod_n>
    abb2:	f109 08c0 	add.w	r8, r9, #192	; 0xc0
    abb6:	9500      	str	r5, [sp, #0]
    abb8:	4623      	mov	r3, r4
    abba:	9a03      	ldr	r2, [sp, #12]
    abbc:	4659      	mov	r1, fp
    abbe:	4640      	mov	r0, r8
    abc0:	f7f6 f85c 	bl	c7c <add_mod_n>
    abc4:	f109 0bf0 	add.w	fp, r9, #240	; 0xf0
    abc8:	9500      	str	r5, [sp, #0]
    abca:	4623      	mov	r3, r4
    abcc:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
    abd0:	f107 0190 	add.w	r1, r7, #144	; 0x90
    abd4:	4658      	mov	r0, fp
    abd6:	f7f6 f851 	bl	c7c <add_mod_n>
    abda:	4653      	mov	r3, sl
    abdc:	4622      	mov	r2, r4
    abde:	4641      	mov	r1, r8
    abe0:	4640      	mov	r0, r8
    abe2:	f7fc fdf3 	bl	77cc <sqr_mont_384x>
    abe6:	9500      	str	r5, [sp, #0]
    abe8:	4623      	mov	r3, r4
    abea:	aa66      	add	r2, sp, #408	; 0x198
    abec:	4641      	mov	r1, r8
    abee:	4640      	mov	r0, r8
    abf0:	f7f5 fcee 	bl	5d0 <sub_mod_n>
    abf4:	9500      	str	r5, [sp, #0]
    abf6:	4623      	mov	r3, r4
    abf8:	aa72      	add	r2, sp, #456	; 0x1c8
    abfa:	4659      	mov	r1, fp
    abfc:	4658      	mov	r0, fp
    abfe:	f7f5 fce7 	bl	5d0 <sub_mod_n>
    ac02:	9500      	str	r5, [sp, #0]
    ac04:	4623      	mov	r3, r4
    ac06:	aa96      	add	r2, sp, #600	; 0x258
    ac08:	4641      	mov	r1, r8
    ac0a:	4640      	mov	r0, r8
    ac0c:	f7f5 fce0 	bl	5d0 <sub_mod_n>
    ac10:	9500      	str	r5, [sp, #0]
    ac12:	4623      	mov	r3, r4
    ac14:	aaa2      	add	r2, sp, #648	; 0x288
    ac16:	4659      	mov	r1, fp
    ac18:	4658      	mov	r0, fp
    ac1a:	f7f5 fcd9 	bl	5d0 <sub_mod_n>
    ac1e:	9500      	str	r5, [sp, #0]
    ac20:	4623      	mov	r3, r4
    ac22:	2203      	movs	r2, #3
    ac24:	a94e      	add	r1, sp, #312	; 0x138
    ac26:	4608      	mov	r0, r1
    ac28:	f7f6 f950 	bl	ecc <lshift_mod_n>
    ac2c:	9500      	str	r5, [sp, #0]
    ac2e:	4623      	mov	r3, r4
    ac30:	2203      	movs	r2, #3
    ac32:	a95a      	add	r1, sp, #360	; 0x168
    ac34:	4608      	mov	r0, r1
    ac36:	f7f6 f949 	bl	ecc <lshift_mod_n>
    ac3a:	f109 0b60 	add.w	fp, r9, #96	; 0x60
    ac3e:	9500      	str	r5, [sp, #0]
    ac40:	4623      	mov	r3, r4
    ac42:	464a      	mov	r2, r9
    ac44:	a936      	add	r1, sp, #216	; 0xd8
    ac46:	4658      	mov	r0, fp
    ac48:	f7f5 fcc2 	bl	5d0 <sub_mod_n>
    ac4c:	f109 0790 	add.w	r7, r9, #144	; 0x90
    ac50:	9500      	str	r5, [sp, #0]
    ac52:	4623      	mov	r3, r4
    ac54:	9a04      	ldr	r2, [sp, #16]
    ac56:	a942      	add	r1, sp, #264	; 0x108
    ac58:	4638      	mov	r0, r7
    ac5a:	f7f5 fcb9 	bl	5d0 <sub_mod_n>
    ac5e:	f8cd a000 	str.w	sl, [sp]
    ac62:	4623      	mov	r3, r4
    ac64:	aa1e      	add	r2, sp, #120	; 0x78
    ac66:	4659      	mov	r1, fp
    ac68:	4658      	mov	r0, fp
    ac6a:	f7f9 fb21 	bl	42b0 <mul_mont_384x>
    ac6e:	9500      	str	r5, [sp, #0]
    ac70:	4623      	mov	r3, r4
    ac72:	aa4e      	add	r2, sp, #312	; 0x138
    ac74:	4659      	mov	r1, fp
    ac76:	4658      	mov	r0, fp
    ac78:	f7f5 fcaa 	bl	5d0 <sub_mod_n>
    ac7c:	9500      	str	r5, [sp, #0]
    ac7e:	4623      	mov	r3, r4
    ac80:	aa5a      	add	r2, sp, #360	; 0x168
    ac82:	4639      	mov	r1, r7
    ac84:	4638      	mov	r0, r7
    ac86:	f7f5 fca3 	bl	5d0 <sub_mod_n>
    ac8a:	4653      	mov	r3, sl
    ac8c:	4622      	mov	r2, r4
    ac8e:	4631      	mov	r1, r6
    ac90:	4630      	mov	r0, r6
    ac92:	f7fc fd9b 	bl	77cc <sqr_mont_384x>
    ac96:	9500      	str	r5, [sp, #0]
    ac98:	4623      	mov	r3, r4
    ac9a:	aa7e      	add	r2, sp, #504	; 0x1f8
    ac9c:	4631      	mov	r1, r6
    ac9e:	4630      	mov	r0, r6
    aca0:	f7f5 fc96 	bl	5d0 <sub_mod_n>
    aca4:	9500      	str	r5, [sp, #0]
    aca6:	4623      	mov	r3, r4
    aca8:	aa8a      	add	r2, sp, #552	; 0x228
    acaa:	9f05      	ldr	r7, [sp, #20]
    acac:	4639      	mov	r1, r7
    acae:	4638      	mov	r0, r7
    acb0:	f7f5 fc8e 	bl	5d0 <sub_mod_n>
    acb4:	9500      	str	r5, [sp, #0]
    acb6:	4623      	mov	r3, r4
    acb8:	aa06      	add	r2, sp, #24
    acba:	4631      	mov	r1, r6
    acbc:	4630      	mov	r0, r6
    acbe:	f7f5 fc87 	bl	5d0 <sub_mod_n>
    acc2:	9500      	str	r5, [sp, #0]
    acc4:	4623      	mov	r3, r4
    acc6:	aa12      	add	r2, sp, #72	; 0x48
    acc8:	4639      	mov	r1, r7
    acca:	4638      	mov	r0, r7
    accc:	f7f5 fc80 	bl	5d0 <sub_mod_n>
    acd0:	9500      	str	r5, [sp, #0]
    acd2:	4623      	mov	r3, r4
    acd4:	2202      	movs	r2, #2
    acd6:	a966      	add	r1, sp, #408	; 0x198
    acd8:	4608      	mov	r0, r1
    acda:	f7f6 f8f7 	bl	ecc <lshift_mod_n>
    acde:	9500      	str	r5, [sp, #0]
    ace0:	4623      	mov	r3, r4
    ace2:	2202      	movs	r2, #2
    ace4:	a972      	add	r1, sp, #456	; 0x1c8
    ace6:	4608      	mov	r0, r1
    ace8:	f7f6 f8f0 	bl	ecc <lshift_mod_n>
    acec:	9500      	str	r5, [sp, #0]
    acee:	4623      	mov	r3, r4
    acf0:	aa66      	add	r2, sp, #408	; 0x198
    acf2:	4631      	mov	r1, r6
    acf4:	4630      	mov	r0, r6
    acf6:	f7f5 fc6b 	bl	5d0 <sub_mod_n>
    acfa:	9500      	str	r5, [sp, #0]
    acfc:	4623      	mov	r3, r4
    acfe:	aa72      	add	r2, sp, #456	; 0x1c8
    ad00:	4639      	mov	r1, r7
    ad02:	4638      	mov	r0, r7
    ad04:	f7f5 fc64 	bl	5d0 <sub_mod_n>
    ad08:	f8cd a000 	str.w	sl, [sp]
    ad0c:	4623      	mov	r3, r4
    ad0e:	aa96      	add	r2, sp, #600	; 0x258
    ad10:	a91e      	add	r1, sp, #120	; 0x78
    ad12:	f106 0060 	add.w	r0, r6, #96	; 0x60
    ad16:	f7f9 facb 	bl	42b0 <mul_mont_384x>
    ad1a:	f8cd a000 	str.w	sl, [sp]
    ad1e:	4623      	mov	r3, r4
    ad20:	aa96      	add	r2, sp, #600	; 0x258
    ad22:	4641      	mov	r1, r8
    ad24:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
    ad28:	f7f9 fac2 	bl	42b0 <mul_mont_384x>
    ad2c:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
    ad30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ad34:	fffcfffd 	.word	0xfffcfffd
    ad38:	00015a08 	.word	0x00015a08

0000ad3c <start_dbl_n>:
    ad3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ad40:	b0c8      	sub	sp, #288	; 0x120
    ad42:	4606      	mov	r6, r0
    ad44:	460c      	mov	r4, r1
    ad46:	4615      	mov	r5, r2
    ad48:	461f      	mov	r7, r3
    ad4a:	460a      	mov	r2, r1
    ad4c:	4668      	mov	r0, sp
    ad4e:	f7ff fe7b 	bl	aa48 <line_dbl>
    ad52:	4629      	mov	r1, r5
    ad54:	4668      	mov	r0, sp
    ad56:	f7f5 ff0b 	bl	b70 <line_by_Px2>
    ad5a:	4633      	mov	r3, r6
    ad5c:	f506 7110 	add.w	r1, r6, #576	; 0x240
    ad60:	2200      	movs	r2, #0
    ad62:	f843 2b04 	str.w	r2, [r3], #4
    ad66:	428b      	cmp	r3, r1
    ad68:	d1fb      	bne.n	ad62 <start_dbl_n+0x26>
    ad6a:	f1ad 0204 	sub.w	r2, sp, #4
    ad6e:	1f33      	subs	r3, r6, #4
    ad70:	a82f      	add	r0, sp, #188	; 0xbc
    ad72:	f852 1f04 	ldr.w	r1, [r2, #4]!
    ad76:	f843 1f04 	str.w	r1, [r3, #4]!
    ad7a:	4282      	cmp	r2, r0
    ad7c:	d1f9      	bne.n	ad72 <start_dbl_n+0x36>
    ad7e:	aa2f      	add	r2, sp, #188	; 0xbc
    ad80:	f506 73be 	add.w	r3, r6, #380	; 0x17c
    ad84:	a847      	add	r0, sp, #284	; 0x11c
    ad86:	f852 1f04 	ldr.w	r1, [r2, #4]!
    ad8a:	f843 1f04 	str.w	r1, [r3, #4]!
    ad8e:	4282      	cmp	r2, r0
    ad90:	d1f9      	bne.n	ad86 <start_dbl_n+0x4a>
    ad92:	2f01      	cmp	r7, #1
    ad94:	d919      	bls.n	adca <start_dbl_n+0x8e>
    ad96:	f504 7490 	add.w	r4, r4, #288	; 0x120
    ad9a:	3560      	adds	r5, #96	; 0x60
    ad9c:	f04f 0801 	mov.w	r8, #1
    ada0:	4622      	mov	r2, r4
    ada2:	4621      	mov	r1, r4
    ada4:	4668      	mov	r0, sp
    ada6:	f7ff fe4f 	bl	aa48 <line_dbl>
    adaa:	4629      	mov	r1, r5
    adac:	4668      	mov	r0, sp
    adae:	f7f5 fedf 	bl	b70 <line_by_Px2>
    adb2:	466a      	mov	r2, sp
    adb4:	4631      	mov	r1, r6
    adb6:	4630      	mov	r0, r6
    adb8:	f7f9 ffb2 	bl	4d20 <mul_by_xy00z0_fp12>
    adbc:	f108 0801 	add.w	r8, r8, #1
    adc0:	f504 7490 	add.w	r4, r4, #288	; 0x120
    adc4:	3560      	adds	r5, #96	; 0x60
    adc6:	4547      	cmp	r7, r8
    adc8:	d1ea      	bne.n	ada0 <start_dbl_n+0x64>
    adca:	b048      	add	sp, #288	; 0x120
    adcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000add0 <line_add>:
    add0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    add4:	f5ad 7d47 	sub.w	sp, sp, #796	; 0x31c
    add8:	4682      	mov	sl, r0
    adda:	460e      	mov	r6, r1
    addc:	4693      	mov	fp, r2
    adde:	4699      	mov	r9, r3
    ade0:	f102 05c0 	add.w	r5, r2, #192	; 0xc0
    ade4:	4fcc      	ldr	r7, [pc, #816]	; (b118 <line_add+0x348>)
    ade6:	4ccd      	ldr	r4, [pc, #820]	; (b11c <line_add+0x34c>)
    ade8:	463b      	mov	r3, r7
    adea:	4622      	mov	r2, r4
    adec:	4629      	mov	r1, r5
    adee:	a8ae      	add	r0, sp, #696	; 0x2b8
    adf0:	f7fc fcec 	bl	77cc <sqr_mont_384x>
    adf4:	9700      	str	r7, [sp, #0]
    adf6:	4623      	mov	r3, r4
    adf8:	aaae      	add	r2, sp, #696	; 0x2b8
    adfa:	4649      	mov	r1, r9
    adfc:	a896      	add	r0, sp, #600	; 0x258
    adfe:	f7f9 fa57 	bl	42b0 <mul_mont_384x>
    ae02:	f8cd 9014 	str.w	r9, [sp, #20]
    ae06:	f109 0060 	add.w	r0, r9, #96	; 0x60
    ae0a:	9700      	str	r7, [sp, #0]
    ae0c:	4623      	mov	r3, r4
    ae0e:	9502      	str	r5, [sp, #8]
    ae10:	462a      	mov	r2, r5
    ae12:	9003      	str	r0, [sp, #12]
    ae14:	4601      	mov	r1, r0
    ae16:	a87e      	add	r0, sp, #504	; 0x1f8
    ae18:	f7f9 fa4a 	bl	42b0 <mul_mont_384x>
    ae1c:	9700      	str	r7, [sp, #0]
    ae1e:	4623      	mov	r3, r4
    ae20:	adae      	add	r5, sp, #696	; 0x2b8
    ae22:	462a      	mov	r2, r5
    ae24:	ad7e      	add	r5, sp, #504	; 0x1f8
    ae26:	4629      	mov	r1, r5
    ae28:	4628      	mov	r0, r5
    ae2a:	f7f9 fa41 	bl	42b0 <mul_mont_384x>
    ae2e:	250c      	movs	r5, #12
    ae30:	9500      	str	r5, [sp, #0]
    ae32:	4623      	mov	r3, r4
    ae34:	465a      	mov	r2, fp
    ae36:	f50d 7c16 	add.w	ip, sp, #600	; 0x258
    ae3a:	4661      	mov	r1, ip
    ae3c:	a866      	add	r0, sp, #408	; 0x198
    ae3e:	f7f5 fbc7 	bl	5d0 <sub_mod_n>
    ae42:	9500      	str	r5, [sp, #0]
    ae44:	4623      	mov	r3, r4
    ae46:	f10b 0230 	add.w	r2, fp, #48	; 0x30
    ae4a:	a9a2      	add	r1, sp, #648	; 0x288
    ae4c:	a872      	add	r0, sp, #456	; 0x1c8
    ae4e:	f7f5 fbbf 	bl	5d0 <sub_mod_n>
    ae52:	463b      	mov	r3, r7
    ae54:	4622      	mov	r2, r4
    ae56:	f50d 7ccc 	add.w	ip, sp, #408	; 0x198
    ae5a:	4661      	mov	r1, ip
    ae5c:	a84e      	add	r0, sp, #312	; 0x138
    ae5e:	f7fc fcb5 	bl	77cc <sqr_mont_384x>
    ae62:	9500      	str	r5, [sp, #0]
    ae64:	4623      	mov	r3, r4
    ae66:	f50d 7c9c 	add.w	ip, sp, #312	; 0x138
    ae6a:	4662      	mov	r2, ip
    ae6c:	4661      	mov	r1, ip
    ae6e:	a836      	add	r0, sp, #216	; 0xd8
    ae70:	f7f5 ff04 	bl	c7c <add_mod_n>
    ae74:	9500      	str	r5, [sp, #0]
    ae76:	4623      	mov	r3, r4
    ae78:	f50d 7cb4 	add.w	ip, sp, #360	; 0x168
    ae7c:	4662      	mov	r2, ip
    ae7e:	4661      	mov	r1, ip
    ae80:	a842      	add	r0, sp, #264	; 0x108
    ae82:	f7f5 fefb 	bl	c7c <add_mod_n>
    ae86:	9500      	str	r5, [sp, #0]
    ae88:	4623      	mov	r3, r4
    ae8a:	f10d 0cd8 	add.w	ip, sp, #216	; 0xd8
    ae8e:	4662      	mov	r2, ip
    ae90:	4661      	mov	r1, ip
    ae92:	4660      	mov	r0, ip
    ae94:	f7f5 fef2 	bl	c7c <add_mod_n>
    ae98:	9500      	str	r5, [sp, #0]
    ae9a:	4623      	mov	r3, r4
    ae9c:	f50d 7c84 	add.w	ip, sp, #264	; 0x108
    aea0:	4662      	mov	r2, ip
    aea2:	4661      	mov	r1, ip
    aea4:	4660      	mov	r0, ip
    aea6:	f7f5 fee9 	bl	c7c <add_mod_n>
    aeaa:	9700      	str	r7, [sp, #0]
    aeac:	4623      	mov	r3, r4
    aeae:	f10d 0cd8 	add.w	ip, sp, #216	; 0xd8
    aeb2:	4662      	mov	r2, ip
    aeb4:	f50d 7ccc 	add.w	ip, sp, #408	; 0x198
    aeb8:	4661      	mov	r1, ip
    aeba:	a81e      	add	r0, sp, #120	; 0x78
    aebc:	f7f9 f9f8 	bl	42b0 <mul_mont_384x>
    aec0:	f10a 0860 	add.w	r8, sl, #96	; 0x60
    aec4:	f10b 0960 	add.w	r9, fp, #96	; 0x60
    aec8:	9500      	str	r5, [sp, #0]
    aeca:	4623      	mov	r3, r4
    aecc:	464a      	mov	r2, r9
    aece:	f50d 7cfc 	add.w	ip, sp, #504	; 0x1f8
    aed2:	4661      	mov	r1, ip
    aed4:	4640      	mov	r0, r8
    aed6:	f7f5 fb7b 	bl	5d0 <sub_mod_n>
    aeda:	f8cd a010 	str.w	sl, [sp, #16]
    aede:	f10a 0a90 	add.w	sl, sl, #144	; 0x90
    aee2:	9500      	str	r5, [sp, #0]
    aee4:	4623      	mov	r3, r4
    aee6:	f10b 0290 	add.w	r2, fp, #144	; 0x90
    aeea:	a98a      	add	r1, sp, #552	; 0x228
    aeec:	4650      	mov	r0, sl
    aeee:	f7f5 fb6f 	bl	5d0 <sub_mod_n>
    aef2:	9500      	str	r5, [sp, #0]
    aef4:	4623      	mov	r3, r4
    aef6:	4642      	mov	r2, r8
    aef8:	4641      	mov	r1, r8
    aefa:	4640      	mov	r0, r8
    aefc:	f7f5 febe 	bl	c7c <add_mod_n>
    af00:	9500      	str	r5, [sp, #0]
    af02:	4623      	mov	r3, r4
    af04:	4652      	mov	r2, sl
    af06:	4651      	mov	r1, sl
    af08:	4650      	mov	r0, sl
    af0a:	f7f5 feb7 	bl	c7c <add_mod_n>
    af0e:	9700      	str	r7, [sp, #0]
    af10:	4623      	mov	r3, r4
    af12:	f10d 0cd8 	add.w	ip, sp, #216	; 0xd8
    af16:	4662      	mov	r2, ip
    af18:	4659      	mov	r1, fp
    af1a:	a806      	add	r0, sp, #24
    af1c:	f7f9 f9c8 	bl	42b0 <mul_mont_384x>
    af20:	463b      	mov	r3, r7
    af22:	4622      	mov	r2, r4
    af24:	4641      	mov	r1, r8
    af26:	4630      	mov	r0, r6
    af28:	f7fc fc50 	bl	77cc <sqr_mont_384x>
    af2c:	9500      	str	r5, [sp, #0]
    af2e:	4623      	mov	r3, r4
    af30:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
    af34:	4662      	mov	r2, ip
    af36:	4631      	mov	r1, r6
    af38:	4630      	mov	r0, r6
    af3a:	f7f5 fb49 	bl	5d0 <sub_mod_n>
    af3e:	f106 0a30 	add.w	sl, r6, #48	; 0x30
    af42:	9500      	str	r5, [sp, #0]
    af44:	4623      	mov	r3, r4
    af46:	f10d 0ca8 	add.w	ip, sp, #168	; 0xa8
    af4a:	4662      	mov	r2, ip
    af4c:	4651      	mov	r1, sl
    af4e:	4650      	mov	r0, sl
    af50:	f7f5 fb3e 	bl	5d0 <sub_mod_n>
    af54:	9500      	str	r5, [sp, #0]
    af56:	4623      	mov	r3, r4
    af58:	f10d 0c18 	add.w	ip, sp, #24
    af5c:	4662      	mov	r2, ip
    af5e:	4631      	mov	r1, r6
    af60:	4630      	mov	r0, r6
    af62:	f7f5 fb35 	bl	5d0 <sub_mod_n>
    af66:	9500      	str	r5, [sp, #0]
    af68:	4623      	mov	r3, r4
    af6a:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
    af6e:	4662      	mov	r2, ip
    af70:	4651      	mov	r1, sl
    af72:	4650      	mov	r0, sl
    af74:	f7f5 fb2c 	bl	5d0 <sub_mod_n>
    af78:	9500      	str	r5, [sp, #0]
    af7a:	4623      	mov	r3, r4
    af7c:	f10d 0c18 	add.w	ip, sp, #24
    af80:	4662      	mov	r2, ip
    af82:	4631      	mov	r1, r6
    af84:	4630      	mov	r0, r6
    af86:	f7f5 fb23 	bl	5d0 <sub_mod_n>
    af8a:	9500      	str	r5, [sp, #0]
    af8c:	4623      	mov	r3, r4
    af8e:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
    af92:	4662      	mov	r2, ip
    af94:	4651      	mov	r1, sl
    af96:	4650      	mov	r0, sl
    af98:	f7f5 fb1a 	bl	5d0 <sub_mod_n>
    af9c:	9700      	str	r7, [sp, #0]
    af9e:	4623      	mov	r3, r4
    afa0:	464a      	mov	r2, r9
    afa2:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
    afa6:	4661      	mov	r1, ip
    afa8:	4660      	mov	r0, ip
    afaa:	f7f9 f981 	bl	42b0 <mul_mont_384x>
    afae:	f106 0960 	add.w	r9, r6, #96	; 0x60
    afb2:	9500      	str	r5, [sp, #0]
    afb4:	4623      	mov	r3, r4
    afb6:	4632      	mov	r2, r6
    afb8:	f10d 0c18 	add.w	ip, sp, #24
    afbc:	4661      	mov	r1, ip
    afbe:	4648      	mov	r0, r9
    afc0:	f7f5 fb06 	bl	5d0 <sub_mod_n>
    afc4:	f106 0090 	add.w	r0, r6, #144	; 0x90
    afc8:	9500      	str	r5, [sp, #0]
    afca:	4623      	mov	r3, r4
    afcc:	4652      	mov	r2, sl
    afce:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
    afd2:	4661      	mov	r1, ip
    afd4:	4682      	mov	sl, r0
    afd6:	f7f5 fafb 	bl	5d0 <sub_mod_n>
    afda:	9700      	str	r7, [sp, #0]
    afdc:	4623      	mov	r3, r4
    afde:	4642      	mov	r2, r8
    afe0:	4649      	mov	r1, r9
    afe2:	4648      	mov	r0, r9
    afe4:	f7f9 f964 	bl	42b0 <mul_mont_384x>
    afe8:	9500      	str	r5, [sp, #0]
    afea:	4623      	mov	r3, r4
    afec:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
    aff0:	4662      	mov	r2, ip
    aff2:	4649      	mov	r1, r9
    aff4:	4648      	mov	r0, r9
    aff6:	f7f5 faeb 	bl	5d0 <sub_mod_n>
    affa:	9500      	str	r5, [sp, #0]
    affc:	4623      	mov	r3, r4
    affe:	f10d 0ca8 	add.w	ip, sp, #168	; 0xa8
    b002:	4662      	mov	r2, ip
    b004:	4651      	mov	r1, sl
    b006:	4650      	mov	r0, sl
    b008:	f7f5 fae2 	bl	5d0 <sub_mod_n>
    b00c:	9500      	str	r5, [sp, #0]
    b00e:	4623      	mov	r3, r4
    b010:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
    b014:	4662      	mov	r2, ip
    b016:	4649      	mov	r1, r9
    b018:	4648      	mov	r0, r9
    b01a:	f7f5 fad9 	bl	5d0 <sub_mod_n>
    b01e:	9500      	str	r5, [sp, #0]
    b020:	4623      	mov	r3, r4
    b022:	f10d 0ca8 	add.w	ip, sp, #168	; 0xa8
    b026:	4662      	mov	r2, ip
    b028:	4651      	mov	r1, sl
    b02a:	4650      	mov	r0, sl
    b02c:	f7f5 fad0 	bl	5d0 <sub_mod_n>
    b030:	f106 09c0 	add.w	r9, r6, #192	; 0xc0
    b034:	9500      	str	r5, [sp, #0]
    b036:	4623      	mov	r3, r4
    b038:	f50d 7ccc 	add.w	ip, sp, #408	; 0x198
    b03c:	4662      	mov	r2, ip
    b03e:	9902      	ldr	r1, [sp, #8]
    b040:	4648      	mov	r0, r9
    b042:	f7f5 fe1b 	bl	c7c <add_mod_n>
    b046:	f106 0af0 	add.w	sl, r6, #240	; 0xf0
    b04a:	9500      	str	r5, [sp, #0]
    b04c:	4623      	mov	r3, r4
    b04e:	aa72      	add	r2, sp, #456	; 0x1c8
    b050:	f10b 01f0 	add.w	r1, fp, #240	; 0xf0
    b054:	4650      	mov	r0, sl
    b056:	f7f5 fe11 	bl	c7c <add_mod_n>
    b05a:	463b      	mov	r3, r7
    b05c:	4622      	mov	r2, r4
    b05e:	4649      	mov	r1, r9
    b060:	4648      	mov	r0, r9
    b062:	f7fc fbb3 	bl	77cc <sqr_mont_384x>
    b066:	9500      	str	r5, [sp, #0]
    b068:	4623      	mov	r3, r4
    b06a:	aaae      	add	r2, sp, #696	; 0x2b8
    b06c:	4649      	mov	r1, r9
    b06e:	4648      	mov	r0, r9
    b070:	f7f5 faae 	bl	5d0 <sub_mod_n>
    b074:	9500      	str	r5, [sp, #0]
    b076:	4623      	mov	r3, r4
    b078:	aaba      	add	r2, sp, #744	; 0x2e8
    b07a:	4651      	mov	r1, sl
    b07c:	4650      	mov	r0, sl
    b07e:	f7f5 faa7 	bl	5d0 <sub_mod_n>
    b082:	9500      	str	r5, [sp, #0]
    b084:	4623      	mov	r3, r4
    b086:	aa4e      	add	r2, sp, #312	; 0x138
    b088:	4649      	mov	r1, r9
    b08a:	4648      	mov	r0, r9
    b08c:	f7f5 faa0 	bl	5d0 <sub_mod_n>
    b090:	9500      	str	r5, [sp, #0]
    b092:	4623      	mov	r3, r4
    b094:	aa5a      	add	r2, sp, #360	; 0x168
    b096:	4651      	mov	r1, sl
    b098:	4650      	mov	r0, sl
    b09a:	f7f5 fa99 	bl	5d0 <sub_mod_n>
    b09e:	9700      	str	r7, [sp, #0]
    b0a0:	4623      	mov	r3, r4
    b0a2:	9a05      	ldr	r2, [sp, #20]
    b0a4:	4641      	mov	r1, r8
    b0a6:	a836      	add	r0, sp, #216	; 0xd8
    b0a8:	f7f9 f902 	bl	42b0 <mul_mont_384x>
    b0ac:	9700      	str	r7, [sp, #0]
    b0ae:	4623      	mov	r3, r4
    b0b0:	464a      	mov	r2, r9
    b0b2:	9903      	ldr	r1, [sp, #12]
    b0b4:	a81e      	add	r0, sp, #120	; 0x78
    b0b6:	f7f9 f8fb 	bl	42b0 <mul_mont_384x>
    b0ba:	9500      	str	r5, [sp, #0]
    b0bc:	4623      	mov	r3, r4
    b0be:	aa1e      	add	r2, sp, #120	; 0x78
    b0c0:	a936      	add	r1, sp, #216	; 0xd8
    b0c2:	4608      	mov	r0, r1
    b0c4:	f7f5 fa84 	bl	5d0 <sub_mod_n>
    b0c8:	9500      	str	r5, [sp, #0]
    b0ca:	4623      	mov	r3, r4
    b0cc:	aa2a      	add	r2, sp, #168	; 0xa8
    b0ce:	a942      	add	r1, sp, #264	; 0x108
    b0d0:	4608      	mov	r0, r1
    b0d2:	f7f5 fa7d 	bl	5d0 <sub_mod_n>
    b0d6:	9500      	str	r5, [sp, #0]
    b0d8:	4623      	mov	r3, r4
    b0da:	aa36      	add	r2, sp, #216	; 0xd8
    b0dc:	4611      	mov	r1, r2
    b0de:	f8dd 8010 	ldr.w	r8, [sp, #16]
    b0e2:	4640      	mov	r0, r8
    b0e4:	f7f5 fdca 	bl	c7c <add_mod_n>
    b0e8:	9500      	str	r5, [sp, #0]
    b0ea:	4623      	mov	r3, r4
    b0ec:	aa42      	add	r2, sp, #264	; 0x108
    b0ee:	4611      	mov	r1, r2
    b0f0:	f108 0030 	add.w	r0, r8, #48	; 0x30
    b0f4:	f7f5 fdc2 	bl	c7c <add_mod_n>
    b0f8:	f106 03bc 	add.w	r3, r6, #188	; 0xbc
    b0fc:	f108 00bc 	add.w	r0, r8, #188	; 0xbc
    b100:	f506 768e 	add.w	r6, r6, #284	; 0x11c
    b104:	f853 2f04 	ldr.w	r2, [r3, #4]!
    b108:	f840 2f04 	str.w	r2, [r0, #4]!
    b10c:	429e      	cmp	r6, r3
    b10e:	d1f9      	bne.n	b104 <line_add+0x334>
    b110:	f50d 7d47 	add.w	sp, sp, #796	; 0x31c
    b114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b118:	fffcfffd 	.word	0xfffcfffd
    b11c:	00015a08 	.word	0x00015a08

0000b120 <add_n_dbl_n>:
    b120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b124:	b0c9      	sub	sp, #292	; 0x124
    b126:	4604      	mov	r4, r0
    b128:	468b      	mov	fp, r1
    b12a:	469a      	mov	sl, r3
    b12c:	9d52      	ldr	r5, [sp, #328]	; 0x148
    b12e:	b1e5      	cbz	r5, b16a <add_n_dbl_n+0x4a>
    b130:	460e      	mov	r6, r1
    b132:	4617      	mov	r7, r2
    b134:	4699      	mov	r9, r3
    b136:	f04f 0800 	mov.w	r8, #0
    b13a:	463b      	mov	r3, r7
    b13c:	4632      	mov	r2, r6
    b13e:	4631      	mov	r1, r6
    b140:	4668      	mov	r0, sp
    b142:	f7ff fe45 	bl	add0 <line_add>
    b146:	4649      	mov	r1, r9
    b148:	4668      	mov	r0, sp
    b14a:	f7f5 fd11 	bl	b70 <line_by_Px2>
    b14e:	466a      	mov	r2, sp
    b150:	4621      	mov	r1, r4
    b152:	4620      	mov	r0, r4
    b154:	f7f9 fde4 	bl	4d20 <mul_by_xy00z0_fp12>
    b158:	f108 0801 	add.w	r8, r8, #1
    b15c:	f506 7690 	add.w	r6, r6, #288	; 0x120
    b160:	37c0      	adds	r7, #192	; 0xc0
    b162:	f109 0960 	add.w	r9, r9, #96	; 0x60
    b166:	4545      	cmp	r5, r8
    b168:	d1e7      	bne.n	b13a <add_n_dbl_n+0x1a>
    b16a:	9b53      	ldr	r3, [sp, #332]	; 0x14c
    b16c:	f103 38ff 	add.w	r8, r3, #4294967295
    b170:	b30b      	cbz	r3, b1b6 <add_n_dbl_n+0x96>
    b172:	4621      	mov	r1, r4
    b174:	4620      	mov	r0, r4
    b176:	f7f9 fc31 	bl	49dc <sqr_fp12>
    b17a:	b1bd      	cbz	r5, b1ac <add_n_dbl_n+0x8c>
    b17c:	465e      	mov	r6, fp
    b17e:	46d1      	mov	r9, sl
    b180:	2700      	movs	r7, #0
    b182:	4632      	mov	r2, r6
    b184:	4631      	mov	r1, r6
    b186:	4668      	mov	r0, sp
    b188:	f7ff fc5e 	bl	aa48 <line_dbl>
    b18c:	4649      	mov	r1, r9
    b18e:	4668      	mov	r0, sp
    b190:	f7f5 fcee 	bl	b70 <line_by_Px2>
    b194:	466a      	mov	r2, sp
    b196:	4621      	mov	r1, r4
    b198:	4620      	mov	r0, r4
    b19a:	f7f9 fdc1 	bl	4d20 <mul_by_xy00z0_fp12>
    b19e:	3701      	adds	r7, #1
    b1a0:	f506 7690 	add.w	r6, r6, #288	; 0x120
    b1a4:	f109 0960 	add.w	r9, r9, #96	; 0x60
    b1a8:	42bd      	cmp	r5, r7
    b1aa:	d1ea      	bne.n	b182 <add_n_dbl_n+0x62>
    b1ac:	f108 38ff 	add.w	r8, r8, #4294967295
    b1b0:	f1b8 3fff 	cmp.w	r8, #4294967295
    b1b4:	d1dd      	bne.n	b172 <add_n_dbl_n+0x52>
    b1b6:	b049      	add	sp, #292	; 0x124
    b1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000b1bc <miller_loop_n>:
    b1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b1c0:	b089      	sub	sp, #36	; 0x24
    b1c2:	af02      	add	r7, sp, #8
    b1c4:	6038      	str	r0, [r7, #0]
    b1c6:	6139      	str	r1, [r7, #16]
    b1c8:	4690      	mov	r8, r2
    b1ca:	461a      	mov	r2, r3
    b1cc:	617b      	str	r3, [r7, #20]
    b1ce:	f8c7 d004 	str.w	sp, [r7, #4]
    b1d2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    b1d6:	4669      	mov	r1, sp
    b1d8:	eba1 1343 	sub.w	r3, r1, r3, lsl #5
    b1dc:	469d      	mov	sp, r3
    b1de:	ab02      	add	r3, sp, #8
    b1e0:	60fb      	str	r3, [r7, #12]
    b1e2:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    b1e6:	4669      	mov	r1, sp
    b1e8:	eba1 1343 	sub.w	r3, r1, r3, lsl #5
    b1ec:	469d      	mov	sp, r3
    b1ee:	ab02      	add	r3, sp, #8
    b1f0:	60bb      	str	r3, [r7, #8]
    b1f2:	2a01      	cmp	r2, #1
    b1f4:	f000 808b 	beq.w	b30e <miller_loop_n+0x152>
    b1f8:	697b      	ldr	r3, [r7, #20]
    b1fa:	2b00      	cmp	r3, #0
    b1fc:	d044      	beq.n	b288 <miller_loop_n+0xcc>
    b1fe:	68be      	ldr	r6, [r7, #8]
    b200:	68fb      	ldr	r3, [r7, #12]
    b202:	f103 0abc 	add.w	sl, r3, #188	; 0xbc
    b206:	693b      	ldr	r3, [r7, #16]
    b208:	f103 04bc 	add.w	r4, r3, #188	; 0xbc
    b20c:	f04f 0b00 	mov.w	fp, #0
    b210:	f8df 9158 	ldr.w	r9, [pc, #344]	; b36c <miller_loop_n+0x1b0>
    b214:	f109 05ec 	add.w	r5, r9, #236	; 0xec
    b218:	230c      	movs	r3, #12
    b21a:	9300      	str	r3, [sp, #0]
    b21c:	464b      	mov	r3, r9
    b21e:	4642      	mov	r2, r8
    b220:	4641      	mov	r1, r8
    b222:	4630      	mov	r0, r6
    b224:	f7f5 fd2a 	bl	c7c <add_mod_n>
    b228:	230c      	movs	r3, #12
    b22a:	9300      	str	r3, [sp, #0]
    b22c:	464b      	mov	r3, r9
    b22e:	2201      	movs	r2, #1
    b230:	4631      	mov	r1, r6
    b232:	4630      	mov	r0, r6
    b234:	f7f6 fbb6 	bl	19a4 <cneg_mod_n>
    b238:	f108 0130 	add.w	r1, r8, #48	; 0x30
    b23c:	230c      	movs	r3, #12
    b23e:	9300      	str	r3, [sp, #0]
    b240:	464b      	mov	r3, r9
    b242:	460a      	mov	r2, r1
    b244:	f106 0030 	add.w	r0, r6, #48	; 0x30
    b248:	f7f5 fd18 	bl	c7c <add_mod_n>
    b24c:	f1a4 03c0 	sub.w	r3, r4, #192	; 0xc0
    b250:	f1aa 02c0 	sub.w	r2, sl, #192	; 0xc0
    b254:	f853 1f04 	ldr.w	r1, [r3, #4]!
    b258:	f842 1f04 	str.w	r1, [r2, #4]!
    b25c:	42a3      	cmp	r3, r4
    b25e:	d1f9      	bne.n	b254 <miller_loop_n+0x98>
    b260:	f109 038c 	add.w	r3, r9, #140	; 0x8c
    b264:	4652      	mov	r2, sl
    b266:	f853 1f04 	ldr.w	r1, [r3, #4]!
    b26a:	f842 1f04 	str.w	r1, [r2, #4]!
    b26e:	42ab      	cmp	r3, r5
    b270:	d1f9      	bne.n	b266 <miller_loop_n+0xaa>
    b272:	f10b 0b01 	add.w	fp, fp, #1
    b276:	3660      	adds	r6, #96	; 0x60
    b278:	f108 0860 	add.w	r8, r8, #96	; 0x60
    b27c:	f50a 7a90 	add.w	sl, sl, #288	; 0x120
    b280:	34c0      	adds	r4, #192	; 0xc0
    b282:	697b      	ldr	r3, [r7, #20]
    b284:	455b      	cmp	r3, fp
    b286:	d8c7      	bhi.n	b218 <miller_loop_n+0x5c>
    b288:	697d      	ldr	r5, [r7, #20]
    b28a:	462b      	mov	r3, r5
    b28c:	f8d7 8008 	ldr.w	r8, [r7, #8]
    b290:	4642      	mov	r2, r8
    b292:	68fe      	ldr	r6, [r7, #12]
    b294:	4631      	mov	r1, r6
    b296:	683c      	ldr	r4, [r7, #0]
    b298:	4620      	mov	r0, r4
    b29a:	f7ff fd4f 	bl	ad3c <start_dbl_n>
    b29e:	2302      	movs	r3, #2
    b2a0:	9301      	str	r3, [sp, #4]
    b2a2:	9500      	str	r5, [sp, #0]
    b2a4:	4643      	mov	r3, r8
    b2a6:	f8d7 9010 	ldr.w	r9, [r7, #16]
    b2aa:	464a      	mov	r2, r9
    b2ac:	4631      	mov	r1, r6
    b2ae:	4620      	mov	r0, r4
    b2b0:	f7ff ff36 	bl	b120 <add_n_dbl_n>
    b2b4:	2303      	movs	r3, #3
    b2b6:	9301      	str	r3, [sp, #4]
    b2b8:	9500      	str	r5, [sp, #0]
    b2ba:	4643      	mov	r3, r8
    b2bc:	464a      	mov	r2, r9
    b2be:	4631      	mov	r1, r6
    b2c0:	4620      	mov	r0, r4
    b2c2:	f7ff ff2d 	bl	b120 <add_n_dbl_n>
    b2c6:	2309      	movs	r3, #9
    b2c8:	9301      	str	r3, [sp, #4]
    b2ca:	9500      	str	r5, [sp, #0]
    b2cc:	4643      	mov	r3, r8
    b2ce:	464a      	mov	r2, r9
    b2d0:	4631      	mov	r1, r6
    b2d2:	4620      	mov	r0, r4
    b2d4:	f7ff ff24 	bl	b120 <add_n_dbl_n>
    b2d8:	2320      	movs	r3, #32
    b2da:	9301      	str	r3, [sp, #4]
    b2dc:	9500      	str	r5, [sp, #0]
    b2de:	4643      	mov	r3, r8
    b2e0:	464a      	mov	r2, r9
    b2e2:	4631      	mov	r1, r6
    b2e4:	4620      	mov	r0, r4
    b2e6:	f7ff ff1b 	bl	b120 <add_n_dbl_n>
    b2ea:	2310      	movs	r3, #16
    b2ec:	9301      	str	r3, [sp, #4]
    b2ee:	9500      	str	r5, [sp, #0]
    b2f0:	4643      	mov	r3, r8
    b2f2:	464a      	mov	r2, r9
    b2f4:	4631      	mov	r1, r6
    b2f6:	4620      	mov	r0, r4
    b2f8:	f7ff ff12 	bl	b120 <add_n_dbl_n>
    b2fc:	4620      	mov	r0, r4
    b2fe:	f7f6 fcd1 	bl	1ca4 <conjugate_fp12>
    b302:	f8d7 d004 	ldr.w	sp, [r7, #4]
    b306:	371c      	adds	r7, #28
    b308:	46bd      	mov	sp, r7
    b30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b30e:	693a      	ldr	r2, [r7, #16]
    b310:	1f13      	subs	r3, r2, #4
    b312:	f102 00bc 	add.w	r0, r2, #188	; 0xbc
    b316:	2100      	movs	r1, #0
    b318:	f853 2f04 	ldr.w	r2, [r3, #4]!
    b31c:	4311      	orrs	r1, r2
    b31e:	4283      	cmp	r3, r0
    b320:	d1fa      	bne.n	b318 <miller_loop_n+0x15c>
    b322:	1e4c      	subs	r4, r1, #1
    b324:	ea24 0101 	bic.w	r1, r4, r1
    b328:	0fcc      	lsrs	r4, r1, #31
    b32a:	f1a8 0304 	sub.w	r3, r8, #4
    b32e:	f108 005c 	add.w	r0, r8, #92	; 0x5c
    b332:	2100      	movs	r1, #0
    b334:	f853 2f04 	ldr.w	r2, [r3, #4]!
    b338:	4311      	orrs	r1, r2
    b33a:	4283      	cmp	r3, r0
    b33c:	d1fa      	bne.n	b334 <miller_loop_n+0x178>
    b33e:	1e4b      	subs	r3, r1, #1
    b340:	ea23 0101 	bic.w	r1, r3, r1
    b344:	ea54 73d1 	orrs.w	r3, r4, r1, lsr #31
    b348:	f43f af59 	beq.w	b1fe <miller_loop_n+0x42>
    b34c:	4807      	ldr	r0, [pc, #28]	; (b36c <miller_loop_n+0x1b0>)
    b34e:	f100 038c 	add.w	r3, r0, #140	; 0x8c
    b352:	683a      	ldr	r2, [r7, #0]
    b354:	3a04      	subs	r2, #4
    b356:	f500 7033 	add.w	r0, r0, #716	; 0x2cc
    b35a:	f853 1f04 	ldr.w	r1, [r3, #4]!
    b35e:	f842 1f04 	str.w	r1, [r2, #4]!
    b362:	4283      	cmp	r3, r0
    b364:	d1f9      	bne.n	b35a <miller_loop_n+0x19e>
    b366:	f8d7 d004 	ldr.w	sp, [r7, #4]
    b36a:	e7cc      	b.n	b306 <miller_loop_n+0x14a>
    b36c:	00015a08 	.word	0x00015a08

0000b370 <blst_miller_loop>:
    b370:	b508      	push	{r3, lr}
    b372:	2301      	movs	r3, #1
    b374:	f7ff ff22 	bl	b1bc <miller_loop_n>
    b378:	bd08      	pop	{r3, pc}

0000b37a <PAIRING_Aggregate_PK_in_G2>:
    b37a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b37e:	f5ad 7d38 	sub.w	sp, sp, #736	; 0x2e0
    b382:	4698      	mov	r8, r3
    b384:	6803      	ldr	r3, [r0, #0]
    b386:	f013 0602 	ands.w	r6, r3, #2
    b38a:	f040 8148 	bne.w	b61e <PAIRING_Aggregate_PK_in_G2+0x2a4>
    b38e:	4607      	mov	r7, r0
    b390:	460d      	mov	r5, r1
    b392:	4691      	mov	r9, r2
    b394:	f043 0301 	orr.w	r3, r3, #1
    b398:	6003      	str	r3, [r0, #0]
    b39a:	f1b8 0f00 	cmp.w	r8, #0
    b39e:	d072      	beq.n	b486 <PAIRING_Aggregate_PK_in_G2+0x10c>
    b3a0:	f1a8 0304 	sub.w	r3, r8, #4
    b3a4:	f108 045c 	add.w	r4, r8, #92	; 0x5c
    b3a8:	461a      	mov	r2, r3
    b3aa:	4631      	mov	r1, r6
    b3ac:	f852 0f04 	ldr.w	r0, [r2, #4]!
    b3b0:	4301      	orrs	r1, r0
    b3b2:	42a2      	cmp	r2, r4
    b3b4:	d1fa      	bne.n	b3ac <PAIRING_Aggregate_PK_in_G2+0x32>
    b3b6:	1e48      	subs	r0, r1, #1
    b3b8:	ea20 0101 	bic.w	r1, r0, r1
    b3bc:	0fc9      	lsrs	r1, r1, #31
    b3be:	d162      	bne.n	b486 <PAIRING_Aggregate_PK_in_G2+0x10c>
    b3c0:	f507 7a14 	add.w	sl, r7, #592	; 0x250
    b3c4:	f50d 7e80 	add.w	lr, sp, #256	; 0x100
    b3c8:	aa28      	add	r2, sp, #160	; 0xa0
    b3ca:	4618      	mov	r0, r3
    b3cc:	f850 cf04 	ldr.w	ip, [r0, #4]!
    b3d0:	f842 cb04 	str.w	ip, [r2], #4
    b3d4:	4572      	cmp	r2, lr
    b3d6:	d1f9      	bne.n	b3cc <PAIRING_Aggregate_PK_in_G2+0x52>
    b3d8:	461a      	mov	r2, r3
    b3da:	f852 0f04 	ldr.w	r0, [r2, #4]!
    b3de:	4301      	orrs	r1, r0
    b3e0:	42a2      	cmp	r2, r4
    b3e2:	d1fa      	bne.n	b3da <PAIRING_Aggregate_PK_in_G2+0x60>
    b3e4:	1e48      	subs	r0, r1, #1
    b3e6:	ea20 0101 	bic.w	r1, r0, r1
    b3ea:	17c8      	asrs	r0, r1, #31
    b3ec:	498e      	ldr	r1, [pc, #568]	; (b628 <PAIRING_Aggregate_PK_in_G2+0x2ae>)
    b3ee:	aa3f      	add	r2, sp, #252	; 0xfc
    b3f0:	f108 0c2c 	add.w	ip, r8, #44	; 0x2c
    b3f4:	f851 eb04 	ldr.w	lr, [r1], #4
    b3f8:	f853 4f04 	ldr.w	r4, [r3, #4]!
    b3fc:	ea8e 0404 	eor.w	r4, lr, r4
    b400:	4004      	ands	r4, r0
    b402:	ea84 040e 	eor.w	r4, r4, lr
    b406:	f842 4f04 	str.w	r4, [r2, #4]!
    b40a:	4563      	cmp	r3, ip
    b40c:	d1f2      	bne.n	b3f4 <PAIRING_Aggregate_PK_in_G2+0x7a>
    b40e:	9bc0      	ldr	r3, [sp, #768]	; 0x300
    b410:	b9a3      	cbnz	r3, b43c <PAIRING_Aggregate_PK_in_G2+0xc2>
    b412:	683b      	ldr	r3, [r7, #0]
    b414:	f013 0f10 	tst.w	r3, #16
    b418:	d01d      	beq.n	b456 <PAIRING_Aggregate_PK_in_G2+0xdc>
    b41a:	9bc2      	ldr	r3, [sp, #776]	; 0x308
    b41c:	b1ab      	cbz	r3, b44a <PAIRING_Aggregate_PK_in_G2+0xd0>
    b41e:	9bc1      	ldr	r3, [sp, #772]	; 0x304
    b420:	b19b      	cbz	r3, b44a <PAIRING_Aggregate_PK_in_G2+0xd0>
    b422:	9bc2      	ldr	r3, [sp, #776]	; 0x308
    b424:	9ac1      	ldr	r2, [sp, #772]	; 0x304
    b426:	a928      	add	r1, sp, #160	; 0xa0
    b428:	4608      	mov	r0, r1
    b42a:	f7f8 f804 	bl	3436 <POINTonE1_mult_w5>
    b42e:	2300      	movs	r3, #0
    b430:	aa28      	add	r2, sp, #160	; 0xa0
    b432:	4651      	mov	r1, sl
    b434:	4650      	mov	r0, sl
    b436:	f7f7 fd1f 	bl	2e78 <POINTonE1_dadd>
    b43a:	e024      	b.n	b486 <PAIRING_Aggregate_PK_in_G2+0x10c>
    b43c:	a828      	add	r0, sp, #160	; 0xa0
    b43e:	f7f8 f8a3 	bl	3588 <POINTonE1_in_G1>
    b442:	2800      	cmp	r0, #0
    b444:	d1e5      	bne.n	b412 <PAIRING_Aggregate_PK_in_G2+0x98>
    b446:	2003      	movs	r0, #3
    b448:	e0b1      	b.n	b5ae <PAIRING_Aggregate_PK_in_G2+0x234>
    b44a:	4642      	mov	r2, r8
    b44c:	4651      	mov	r1, sl
    b44e:	4650      	mov	r0, sl
    b450:	f7f7 fba0 	bl	2b94 <POINTonE1_dadd_affine>
    b454:	e017      	b.n	b486 <PAIRING_Aggregate_PK_in_G2+0x10c>
    b456:	f043 0310 	orr.w	r3, r3, #16
    b45a:	603b      	str	r3, [r7, #0]
    b45c:	9bc2      	ldr	r3, [sp, #776]	; 0x308
    b45e:	b143      	cbz	r3, b472 <PAIRING_Aggregate_PK_in_G2+0xf8>
    b460:	9bc1      	ldr	r3, [sp, #772]	; 0x304
    b462:	b133      	cbz	r3, b472 <PAIRING_Aggregate_PK_in_G2+0xf8>
    b464:	9bc2      	ldr	r3, [sp, #776]	; 0x308
    b466:	9ac1      	ldr	r2, [sp, #772]	; 0x304
    b468:	a928      	add	r1, sp, #160	; 0xa0
    b46a:	4650      	mov	r0, sl
    b46c:	f7f7 ffe3 	bl	3436 <POINTonE1_mult_w5>
    b470:	e009      	b.n	b486 <PAIRING_Aggregate_PK_in_G2+0x10c>
    b472:	ab27      	add	r3, sp, #156	; 0x9c
    b474:	f507 7213 	add.w	r2, r7, #588	; 0x24c
    b478:	a84b      	add	r0, sp, #300	; 0x12c
    b47a:	f853 1f04 	ldr.w	r1, [r3, #4]!
    b47e:	f842 1f04 	str.w	r1, [r2, #4]!
    b482:	4283      	cmp	r3, r0
    b484:	d1f9      	bne.n	b47a <PAIRING_Aggregate_PK_in_G2+0x100>
    b486:	2d00      	cmp	r5, #0
    b488:	f000 80cb 	beq.w	b622 <PAIRING_Aggregate_PK_in_G2+0x2a8>
    b48c:	f8d7 8008 	ldr.w	r8, [r7, #8]
    b490:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
    b494:	bf08      	it	eq
    b496:	f507 6847 	addeq.w	r8, r7, #3184	; 0xc70
    b49a:	1f2c      	subs	r4, r5, #4
    b49c:	35bc      	adds	r5, #188	; 0xbc
    b49e:	4623      	mov	r3, r4
    b4a0:	f853 2f04 	ldr.w	r2, [r3, #4]!
    b4a4:	4316      	orrs	r6, r2
    b4a6:	42ab      	cmp	r3, r5
    b4a8:	d1fa      	bne.n	b4a0 <PAIRING_Aggregate_PK_in_G2+0x126>
    b4aa:	1e73      	subs	r3, r6, #1
    b4ac:	ea23 0606 	bic.w	r6, r3, r6
    b4b0:	0ff6      	lsrs	r6, r6, #31
    b4b2:	f040 80b2 	bne.w	b61a <PAIRING_Aggregate_PK_in_G2+0x2a0>
    b4b6:	f1b9 0f00 	cmp.w	r9, #0
    b4ba:	d02f      	beq.n	b51c <PAIRING_Aggregate_PK_in_G2+0x1a2>
    b4bc:	ab28      	add	r3, sp, #160	; 0xa0
    b4be:	a858      	add	r0, sp, #352	; 0x160
    b4c0:	4622      	mov	r2, r4
    b4c2:	f852 1f04 	ldr.w	r1, [r2, #4]!
    b4c6:	f843 1b04 	str.w	r1, [r3], #4
    b4ca:	4283      	cmp	r3, r0
    b4cc:	d1f9      	bne.n	b4c2 <PAIRING_Aggregate_PK_in_G2+0x148>
    b4ce:	4623      	mov	r3, r4
    b4d0:	4632      	mov	r2, r6
    b4d2:	f853 1f04 	ldr.w	r1, [r3, #4]!
    b4d6:	430a      	orrs	r2, r1
    b4d8:	42ab      	cmp	r3, r5
    b4da:	d1fa      	bne.n	b4d2 <PAIRING_Aggregate_PK_in_G2+0x158>
    b4dc:	f102 3cff 	add.w	ip, r2, #4294967295
    b4e0:	ea2c 0c02 	bic.w	ip, ip, r2
    b4e4:	ea4f 7cec 	mov.w	ip, ip, asr #31
    b4e8:	4b50      	ldr	r3, [pc, #320]	; (b62c <PAIRING_Aggregate_PK_in_G2+0x2b2>)
    b4ea:	f103 0290 	add.w	r2, r3, #144	; 0x90
    b4ee:	a857      	add	r0, sp, #348	; 0x15c
    b4f0:	f103 0ef0 	add.w	lr, r3, #240	; 0xf0
    b4f4:	4621      	mov	r1, r4
    b4f6:	f852 9b04 	ldr.w	r9, [r2], #4
    b4fa:	f851 3f04 	ldr.w	r3, [r1, #4]!
    b4fe:	ea89 0303 	eor.w	r3, r9, r3
    b502:	ea03 030c 	and.w	r3, r3, ip
    b506:	ea83 0309 	eor.w	r3, r3, r9
    b50a:	f840 3f04 	str.w	r3, [r0, #4]!
    b50e:	4572      	cmp	r2, lr
    b510:	d1f1      	bne.n	b4f6 <PAIRING_Aggregate_PK_in_G2+0x17c>
    b512:	a828      	add	r0, sp, #160	; 0xa0
    b514:	f7fd ff0a 	bl	932c <POINTonE2_in_G2>
    b518:	2800      	cmp	r0, #0
    b51a:	d04c      	beq.n	b5b6 <PAIRING_Aggregate_PK_in_G2+0x23c>
    b51c:	683b      	ldr	r3, [r7, #0]
    b51e:	f013 0f40 	tst.w	r3, #64	; 0x40
    b522:	d04a      	beq.n	b5ba <PAIRING_Aggregate_PK_in_G2+0x240>
    b524:	68fb      	ldr	r3, [r7, #12]
    b526:	9303      	str	r3, [sp, #12]
    b528:	f8cd 8008 	str.w	r8, [sp, #8]
    b52c:	9bc4      	ldr	r3, [sp, #784]	; 0x310
    b52e:	9301      	str	r3, [sp, #4]
    b530:	9bc3      	ldr	r3, [sp, #780]	; 0x30c
    b532:	9300      	str	r3, [sp, #0]
    b534:	9bc6      	ldr	r3, [sp, #792]	; 0x318
    b536:	9ac5      	ldr	r2, [sp, #788]	; 0x314
    b538:	2102      	movs	r1, #2
    b53a:	a828      	add	r0, sp, #160	; 0xa0
    b53c:	f7fb fd0d 	bl	6f5a <hash_to_field>
    b540:	aa34      	add	r2, sp, #208	; 0xd0
    b542:	a928      	add	r1, sp, #160	; 0xa0
    b544:	a804      	add	r0, sp, #16
    b546:	f7fb f85b 	bl	6600 <map_to_g1>
    b54a:	9bc2      	ldr	r3, [sp, #776]	; 0x308
    b54c:	b13b      	cbz	r3, b55e <PAIRING_Aggregate_PK_in_G2+0x1e4>
    b54e:	9bc1      	ldr	r3, [sp, #772]	; 0x304
    b550:	b12b      	cbz	r3, b55e <PAIRING_Aggregate_PK_in_G2+0x1e4>
    b552:	9bc2      	ldr	r3, [sp, #776]	; 0x308
    b554:	9ac1      	ldr	r2, [sp, #772]	; 0x304
    b556:	a904      	add	r1, sp, #16
    b558:	4608      	mov	r0, r1
    b55a:	f7f7 ff6c 	bl	3436 <POINTonE1_mult_w5>
    b55e:	a904      	add	r1, sp, #16
    b560:	4608      	mov	r0, r1
    b562:	f7fa f8c1 	bl	56e8 <POINTonE1_from_Jacobian>
    b566:	687a      	ldr	r2, [r7, #4]
    b568:	f507 715c 	add.w	r1, r7, #880	; 0x370
    b56c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    b570:	eb07 1383 	add.w	r3, r7, r3, lsl #6
    b574:	f503 735b 	add.w	r3, r3, #876	; 0x36c
    b578:	f854 0f04 	ldr.w	r0, [r4, #4]!
    b57c:	f843 0f04 	str.w	r0, [r3, #4]!
    b580:	42ac      	cmp	r4, r5
    b582:	d1f9      	bne.n	b578 <PAIRING_Aggregate_PK_in_G2+0x1fe>
    b584:	f507 6c17 	add.w	ip, r7, #2416	; 0x970
    b588:	ab03      	add	r3, sp, #12
    b58a:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    b58e:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    b592:	f600 106c 	addw	r0, r0, #2412	; 0x96c
    b596:	ad1b      	add	r5, sp, #108	; 0x6c
    b598:	f853 4f04 	ldr.w	r4, [r3, #4]!
    b59c:	f840 4f04 	str.w	r4, [r0, #4]!
    b5a0:	429d      	cmp	r5, r3
    b5a2:	d1f9      	bne.n	b598 <PAIRING_Aggregate_PK_in_G2+0x21e>
    b5a4:	1c54      	adds	r4, r2, #1
    b5a6:	2a07      	cmp	r2, #7
    b5a8:	d01b      	beq.n	b5e2 <PAIRING_Aggregate_PK_in_G2+0x268>
    b5aa:	607c      	str	r4, [r7, #4]
    b5ac:	2000      	movs	r0, #0
    b5ae:	f50d 7d38 	add.w	sp, sp, #736	; 0x2e0
    b5b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b5b6:	2003      	movs	r0, #3
    b5b8:	e7f9      	b.n	b5ae <PAIRING_Aggregate_PK_in_G2+0x234>
    b5ba:	68fb      	ldr	r3, [r7, #12]
    b5bc:	9303      	str	r3, [sp, #12]
    b5be:	f8cd 8008 	str.w	r8, [sp, #8]
    b5c2:	9bc4      	ldr	r3, [sp, #784]	; 0x310
    b5c4:	9301      	str	r3, [sp, #4]
    b5c6:	9bc3      	ldr	r3, [sp, #780]	; 0x30c
    b5c8:	9300      	str	r3, [sp, #0]
    b5ca:	9bc6      	ldr	r3, [sp, #792]	; 0x318
    b5cc:	9ac5      	ldr	r2, [sp, #788]	; 0x314
    b5ce:	2101      	movs	r1, #1
    b5d0:	a828      	add	r0, sp, #160	; 0xa0
    b5d2:	f7fb fcc2 	bl	6f5a <hash_to_field>
    b5d6:	2200      	movs	r2, #0
    b5d8:	a928      	add	r1, sp, #160	; 0xa0
    b5da:	a804      	add	r0, sp, #16
    b5dc:	f7fb f810 	bl	6600 <map_to_g1>
    b5e0:	e7b3      	b.n	b54a <PAIRING_Aggregate_PK_in_G2+0x1d0>
    b5e2:	683c      	ldr	r4, [r7, #0]
    b5e4:	f014 0420 	ands.w	r4, r4, #32
    b5e8:	d00c      	beq.n	b604 <PAIRING_Aggregate_PK_in_G2+0x28a>
    b5ea:	2308      	movs	r3, #8
    b5ec:	4662      	mov	r2, ip
    b5ee:	a828      	add	r0, sp, #160	; 0xa0
    b5f0:	f7ff fde4 	bl	b1bc <miller_loop_n>
    b5f4:	f107 0010 	add.w	r0, r7, #16
    b5f8:	aa28      	add	r2, sp, #160	; 0xa0
    b5fa:	4601      	mov	r1, r0
    b5fc:	f7f9 f96c 	bl	48d8 <mul_fp12>
    b600:	4634      	mov	r4, r6
    b602:	e7d2      	b.n	b5aa <PAIRING_Aggregate_PK_in_G2+0x230>
    b604:	2308      	movs	r3, #8
    b606:	4662      	mov	r2, ip
    b608:	f107 0010 	add.w	r0, r7, #16
    b60c:	f7ff fdd6 	bl	b1bc <miller_loop_n>
    b610:	683b      	ldr	r3, [r7, #0]
    b612:	f043 0320 	orr.w	r3, r3, #32
    b616:	603b      	str	r3, [r7, #0]
    b618:	e7c7      	b.n	b5aa <PAIRING_Aggregate_PK_in_G2+0x230>
    b61a:	2006      	movs	r0, #6
    b61c:	e7c7      	b.n	b5ae <PAIRING_Aggregate_PK_in_G2+0x234>
    b61e:	2004      	movs	r0, #4
    b620:	e7c5      	b.n	b5ae <PAIRING_Aggregate_PK_in_G2+0x234>
    b622:	2000      	movs	r0, #0
    b624:	e7c3      	b.n	b5ae <PAIRING_Aggregate_PK_in_G2+0x234>
    b626:	bf00      	nop
    b628:	00015a98 	.word	0x00015a98
    b62c:	00015a08 	.word	0x00015a08

0000b630 <blst_pairing_aggregate_pk_in_g2>:
    b630:	b500      	push	{lr}
    b632:	b089      	sub	sp, #36	; 0x24
    b634:	4694      	mov	ip, r2
    b636:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b638:	9206      	str	r2, [sp, #24]
    b63a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b63c:	9205      	str	r2, [sp, #20]
    b63e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b640:	9204      	str	r2, [sp, #16]
    b642:	9303      	str	r3, [sp, #12]
    b644:	2200      	movs	r2, #0
    b646:	9202      	str	r2, [sp, #8]
    b648:	9201      	str	r2, [sp, #4]
    b64a:	2301      	movs	r3, #1
    b64c:	9300      	str	r3, [sp, #0]
    b64e:	4663      	mov	r3, ip
    b650:	f7ff fe93 	bl	b37a <PAIRING_Aggregate_PK_in_G2>
    b654:	b009      	add	sp, #36	; 0x24
    b656:	f85d fb04 	ldr.w	pc, [sp], #4

0000b65a <blst_pairing_mul_n_aggregate_pk_in_g2>:
    b65a:	b500      	push	{lr}
    b65c:	b089      	sub	sp, #36	; 0x24
    b65e:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    b662:	f8cd c018 	str.w	ip, [sp, #24]
    b666:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
    b66a:	f8cd c014 	str.w	ip, [sp, #20]
    b66e:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
    b672:	f8cd c010 	str.w	ip, [sp, #16]
    b676:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
    b67a:	f8cd c00c 	str.w	ip, [sp, #12]
    b67e:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    b682:	f8cd c008 	str.w	ip, [sp, #8]
    b686:	9301      	str	r3, [sp, #4]
    b688:	2301      	movs	r3, #1
    b68a:	9300      	str	r3, [sp, #0]
    b68c:	4613      	mov	r3, r2
    b68e:	2200      	movs	r2, #0
    b690:	f7ff fe73 	bl	b37a <PAIRING_Aggregate_PK_in_G2>
    b694:	b009      	add	sp, #36	; 0x24
    b696:	f85d fb04 	ldr.w	pc, [sp], #4

0000b69a <blst_pairing_chk_n_aggr_pk_in_g2>:
    b69a:	b510      	push	{r4, lr}
    b69c:	b088      	sub	sp, #32
    b69e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    b6a0:	9406      	str	r4, [sp, #24]
    b6a2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    b6a4:	9405      	str	r4, [sp, #20]
    b6a6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    b6a8:	9404      	str	r4, [sp, #16]
    b6aa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    b6ac:	9403      	str	r4, [sp, #12]
    b6ae:	2400      	movs	r4, #0
    b6b0:	9402      	str	r4, [sp, #8]
    b6b2:	9401      	str	r4, [sp, #4]
    b6b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    b6b6:	9400      	str	r4, [sp, #0]
    b6b8:	f7ff fe5f 	bl	b37a <PAIRING_Aggregate_PK_in_G2>
    b6bc:	b008      	add	sp, #32
    b6be:	bd10      	pop	{r4, pc}

0000b6c0 <blst_pairing_chk_n_mul_n_aggr_pk_in_g2>:
    b6c0:	b500      	push	{lr}
    b6c2:	b089      	sub	sp, #36	; 0x24
    b6c4:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    b6c8:	f8cd c018 	str.w	ip, [sp, #24]
    b6cc:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    b6d0:	f8cd c014 	str.w	ip, [sp, #20]
    b6d4:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    b6d8:	f8cd c010 	str.w	ip, [sp, #16]
    b6dc:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
    b6e0:	f8cd c00c 	str.w	ip, [sp, #12]
    b6e4:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
    b6e8:	f8cd c008 	str.w	ip, [sp, #8]
    b6ec:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
    b6f0:	f8cd c004 	str.w	ip, [sp, #4]
    b6f4:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    b6f8:	f8cd c000 	str.w	ip, [sp]
    b6fc:	f7ff fe3d 	bl	b37a <PAIRING_Aggregate_PK_in_G2>
    b700:	b009      	add	sp, #36	; 0x24
    b702:	f85d fb04 	ldr.w	pc, [sp], #4

0000b706 <PAIRING_Commit>:
    b706:	6843      	ldr	r3, [r0, #4]
    b708:	b32b      	cbz	r3, b756 <PAIRING_Commit+0x50>
    b70a:	b510      	push	{r4, lr}
    b70c:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
    b710:	4604      	mov	r4, r0
    b712:	6802      	ldr	r2, [r0, #0]
    b714:	f012 0f20 	tst.w	r2, #32
    b718:	d011      	beq.n	b73e <PAIRING_Commit+0x38>
    b71a:	f500 6217 	add.w	r2, r0, #2416	; 0x970
    b71e:	f500 715c 	add.w	r1, r0, #880	; 0x370
    b722:	4668      	mov	r0, sp
    b724:	f7ff fd4a 	bl	b1bc <miller_loop_n>
    b728:	f104 0010 	add.w	r0, r4, #16
    b72c:	466a      	mov	r2, sp
    b72e:	4601      	mov	r1, r0
    b730:	f7f9 f8d2 	bl	48d8 <mul_fp12>
    b734:	2300      	movs	r3, #0
    b736:	6063      	str	r3, [r4, #4]
    b738:	f50d 7d10 	add.w	sp, sp, #576	; 0x240
    b73c:	bd10      	pop	{r4, pc}
    b73e:	f500 6217 	add.w	r2, r0, #2416	; 0x970
    b742:	f500 715c 	add.w	r1, r0, #880	; 0x370
    b746:	3010      	adds	r0, #16
    b748:	f7ff fd38 	bl	b1bc <miller_loop_n>
    b74c:	6823      	ldr	r3, [r4, #0]
    b74e:	f043 0320 	orr.w	r3, r3, #32
    b752:	6023      	str	r3, [r4, #0]
    b754:	e7ee      	b.n	b734 <PAIRING_Commit+0x2e>
    b756:	4770      	bx	lr

0000b758 <blst_pairing_commit>:
    b758:	b508      	push	{r3, lr}
    b75a:	f7ff ffd4 	bl	b706 <PAIRING_Commit>
    b75e:	bd08      	pop	{r3, pc}

0000b760 <PAIRING_FinalVerify>:
    b760:	b530      	push	{r4, r5, lr}
    b762:	f5ad 7d59 	sub.w	sp, sp, #868	; 0x364
    b766:	4605      	mov	r5, r0
    b768:	6803      	ldr	r3, [r0, #0]
    b76a:	f013 0020 	ands.w	r0, r3, #32
    b76e:	d03a      	beq.n	b7e6 <PAIRING_FinalVerify+0x86>
    b770:	2900      	cmp	r1, #0
    b772:	d03b      	beq.n	b7ec <PAIRING_FinalVerify+0x8c>
    b774:	3904      	subs	r1, #4
    b776:	ab48      	add	r3, sp, #288	; 0x120
    b778:	a8d8      	add	r0, sp, #864	; 0x360
    b77a:	f851 2f04 	ldr.w	r2, [r1, #4]!
    b77e:	f843 2b04 	str.w	r2, [r3], #4
    b782:	4283      	cmp	r3, r0
    b784:	d1f9      	bne.n	b77a <PAIRING_FinalVerify+0x1a>
    b786:	ac48      	add	r4, sp, #288	; 0x120
    b788:	4620      	mov	r0, r4
    b78a:	f7f6 fa8b 	bl	1ca4 <conjugate_fp12>
    b78e:	f105 0210 	add.w	r2, r5, #16
    b792:	4621      	mov	r1, r4
    b794:	4620      	mov	r0, r4
    b796:	f7f9 f89f 	bl	48d8 <mul_fp12>
    b79a:	4621      	mov	r1, r4
    b79c:	4620      	mov	r0, r4
    b79e:	f7ff f89d 	bl	a8dc <final_exp>
    b7a2:	aa47      	add	r2, sp, #284	; 0x11c
    b7a4:	4929      	ldr	r1, [pc, #164]	; (b84c <PAIRING_FinalVerify+0xec>)
    b7a6:	f50d 7ebe 	add.w	lr, sp, #380	; 0x17c
    b7aa:	f04f 0c00 	mov.w	ip, #0
    b7ae:	f852 3f04 	ldr.w	r3, [r2, #4]!
    b7b2:	f851 0f04 	ldr.w	r0, [r1, #4]!
    b7b6:	4043      	eors	r3, r0
    b7b8:	ea4c 0c03 	orr.w	ip, ip, r3
    b7bc:	4572      	cmp	r2, lr
    b7be:	d1f6      	bne.n	b7ae <PAIRING_FinalVerify+0x4e>
    b7c0:	f10c 30ff 	add.w	r0, ip, #4294967295
    b7c4:	ea20 000c 	bic.w	r0, r0, ip
    b7c8:	0fc0      	lsrs	r0, r0, #31
    b7ca:	ab5f      	add	r3, sp, #380	; 0x17c
    b7cc:	f504 710f 	add.w	r1, r4, #572	; 0x23c
    b7d0:	2200      	movs	r2, #0
    b7d2:	f853 4f04 	ldr.w	r4, [r3, #4]!
    b7d6:	4322      	orrs	r2, r4
    b7d8:	4299      	cmp	r1, r3
    b7da:	d1fa      	bne.n	b7d2 <PAIRING_FinalVerify+0x72>
    b7dc:	1e53      	subs	r3, r2, #1
    b7de:	ea23 0202 	bic.w	r2, r3, r2
    b7e2:	ea00 70d2 	and.w	r0, r0, r2, lsr #31
    b7e6:	f50d 7d59 	add.w	sp, sp, #868	; 0x364
    b7ea:	bd30      	pop	{r4, r5, pc}
    b7ec:	f013 0f10 	tst.w	r3, #16
    b7f0:	d01f      	beq.n	b832 <PAIRING_FinalVerify+0xd2>
    b7f2:	f003 0303 	and.w	r3, r3, #3
    b7f6:	2b01      	cmp	r3, #1
    b7f8:	d003      	beq.n	b802 <PAIRING_FinalVerify+0xa2>
    b7fa:	2b02      	cmp	r3, #2
    b7fc:	d00d      	beq.n	b81a <PAIRING_FinalVerify+0xba>
    b7fe:	2000      	movs	r0, #0
    b800:	e7f1      	b.n	b7e6 <PAIRING_FinalVerify+0x86>
    b802:	f505 7114 	add.w	r1, r5, #592	; 0x250
    b806:	4668      	mov	r0, sp
    b808:	f7f9 ff6e 	bl	56e8 <POINTonE1_from_Jacobian>
    b80c:	2301      	movs	r3, #1
    b80e:	466a      	mov	r2, sp
    b810:	490f      	ldr	r1, [pc, #60]	; (b850 <PAIRING_FinalVerify+0xf0>)
    b812:	a848      	add	r0, sp, #288	; 0x120
    b814:	f7ff fcd2 	bl	b1bc <miller_loop_n>
    b818:	e7b5      	b.n	b786 <PAIRING_FinalVerify+0x26>
    b81a:	f505 7114 	add.w	r1, r5, #592	; 0x250
    b81e:	4668      	mov	r0, sp
    b820:	f7fc f809 	bl	7836 <POINTonE2_from_Jacobian>
    b824:	2301      	movs	r3, #1
    b826:	4a0b      	ldr	r2, [pc, #44]	; (b854 <PAIRING_FinalVerify+0xf4>)
    b828:	4669      	mov	r1, sp
    b82a:	a848      	add	r0, sp, #288	; 0x120
    b82c:	f7ff fcc6 	bl	b1bc <miller_loop_n>
    b830:	e7a9      	b.n	b786 <PAIRING_FinalVerify+0x26>
    b832:	4809      	ldr	r0, [pc, #36]	; (b858 <PAIRING_FinalVerify+0xf8>)
    b834:	f100 038c 	add.w	r3, r0, #140	; 0x8c
    b838:	aa47      	add	r2, sp, #284	; 0x11c
    b83a:	f500 7033 	add.w	r0, r0, #716	; 0x2cc
    b83e:	f853 1f04 	ldr.w	r1, [r3, #4]!
    b842:	f842 1f04 	str.w	r1, [r2, #4]!
    b846:	4283      	cmp	r3, r0
    b848:	d1f9      	bne.n	b83e <PAIRING_FinalVerify+0xde>
    b84a:	e79c      	b.n	b786 <PAIRING_FinalVerify+0x26>
    b84c:	00015a94 	.word	0x00015a94
    b850:	00016788 	.word	0x00016788
    b854:	000166f8 	.word	0x000166f8
    b858:	00015a08 	.word	0x00015a08

0000b85c <blst_pairing_finalverify>:
    b85c:	b508      	push	{r3, lr}
    b85e:	f7ff ff7f 	bl	b760 <PAIRING_FinalVerify>
    b862:	bd08      	pop	{r3, pc}

0000b864 <blst_core_verify_pk_in_g2>:
    b864:	b510      	push	{r4, lr}
    b866:	f5ad 6d49 	sub.w	sp, sp, #3216	; 0xc90
    b86a:	2a00      	cmp	r2, #0
    b86c:	bf14      	ite	ne
    b86e:	2240      	movne	r2, #64	; 0x40
    b870:	2200      	moveq	r2, #0
    b872:	9208      	str	r2, [sp, #32]
    b874:	2200      	movs	r2, #0
    b876:	9209      	str	r2, [sp, #36]	; 0x24
    b878:	f8dd 4c9c 	ldr.w	r4, [sp, #3228]	; 0xc9c
    b87c:	940a      	str	r4, [sp, #40]	; 0x28
    b87e:	f8dd 4ca0 	ldr.w	r4, [sp, #3232]	; 0xca0
    b882:	940b      	str	r4, [sp, #44]	; 0x2c
    b884:	f8dd 4ca8 	ldr.w	r4, [sp, #3240]	; 0xca8
    b888:	9406      	str	r4, [sp, #24]
    b88a:	f8dd 4ca4 	ldr.w	r4, [sp, #3236]	; 0xca4
    b88e:	9405      	str	r4, [sp, #20]
    b890:	f8dd 4c98 	ldr.w	r4, [sp, #3224]	; 0xc98
    b894:	9404      	str	r4, [sp, #16]
    b896:	9303      	str	r3, [sp, #12]
    b898:	9202      	str	r2, [sp, #8]
    b89a:	9201      	str	r2, [sp, #4]
    b89c:	2201      	movs	r2, #1
    b89e:	9200      	str	r2, [sp, #0]
    b8a0:	460b      	mov	r3, r1
    b8a2:	4601      	mov	r1, r0
    b8a4:	a808      	add	r0, sp, #32
    b8a6:	f7ff fd68 	bl	b37a <PAIRING_Aggregate_PK_in_G2>
    b8aa:	4604      	mov	r4, r0
    b8ac:	b118      	cbz	r0, b8b6 <blst_core_verify_pk_in_g2+0x52>
    b8ae:	4620      	mov	r0, r4
    b8b0:	f50d 6d49 	add.w	sp, sp, #3216	; 0xc90
    b8b4:	bd10      	pop	{r4, pc}
    b8b6:	a808      	add	r0, sp, #32
    b8b8:	f7ff ff25 	bl	b706 <PAIRING_Commit>
    b8bc:	2100      	movs	r1, #0
    b8be:	a808      	add	r0, sp, #32
    b8c0:	f7ff ff4e 	bl	b760 <PAIRING_FinalVerify>
    b8c4:	2800      	cmp	r0, #0
    b8c6:	bf08      	it	eq
    b8c8:	2405      	moveq	r4, #5
    b8ca:	e7f0      	b.n	b8ae <blst_core_verify_pk_in_g2+0x4a>

0000b8cc <blst_aggregated_in_g1>:
    b8cc:	b508      	push	{r3, lr}
    b8ce:	460a      	mov	r2, r1
    b8d0:	2301      	movs	r3, #1
    b8d2:	4902      	ldr	r1, [pc, #8]	; (b8dc <blst_aggregated_in_g1+0x10>)
    b8d4:	f7ff fc72 	bl	b1bc <miller_loop_n>
    b8d8:	bd08      	pop	{r3, pc}
    b8da:	bf00      	nop
    b8dc:	00016788 	.word	0x00016788

0000b8e0 <blst_aggregated_in_g2>:
    b8e0:	b508      	push	{r3, lr}
    b8e2:	2301      	movs	r3, #1
    b8e4:	4a01      	ldr	r2, [pc, #4]	; (b8ec <blst_aggregated_in_g2+0xc>)
    b8e6:	f7ff fc69 	bl	b1bc <miller_loop_n>
    b8ea:	bd08      	pop	{r3, pc}
    b8ec:	000166f8 	.word	0x000166f8

0000b8f0 <pre_add_n_dbl>:
    b8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b8f2:	460e      	mov	r6, r1
    b8f4:	461f      	mov	r7, r3
    b8f6:	f500 7490 	add.w	r4, r0, #288	; 0x120
    b8fa:	4613      	mov	r3, r2
    b8fc:	460a      	mov	r2, r1
    b8fe:	f7ff fa67 	bl	add0 <line_add>
    b902:	1e7d      	subs	r5, r7, #1
    b904:	b157      	cbz	r7, b91c <pre_add_n_dbl+0x2c>
    b906:	4620      	mov	r0, r4
    b908:	4632      	mov	r2, r6
    b90a:	4631      	mov	r1, r6
    b90c:	f504 7490 	add.w	r4, r4, #288	; 0x120
    b910:	f7ff f89a 	bl	aa48 <line_dbl>
    b914:	3d01      	subs	r5, #1
    b916:	f1b5 3fff 	cmp.w	r5, #4294967295
    b91a:	d1f4      	bne.n	b906 <pre_add_n_dbl+0x16>
    b91c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000b91e <precompute_lines>:
    b91e:	b530      	push	{r4, r5, lr}
    b920:	b0c9      	sub	sp, #292	; 0x124
    b922:	4604      	mov	r4, r0
    b924:	460d      	mov	r5, r1
    b926:	f1a1 0c04 	sub.w	ip, r1, #4
    b92a:	466b      	mov	r3, sp
    b92c:	a930      	add	r1, sp, #192	; 0xc0
    b92e:	f85c 2f04 	ldr.w	r2, [ip, #4]!
    b932:	f843 2b04 	str.w	r2, [r3], #4
    b936:	428b      	cmp	r3, r1
    b938:	d1f9      	bne.n	b92e <precompute_lines+0x10>
    b93a:	491b      	ldr	r1, [pc, #108]	; (b9a8 <precompute_lines+0x8a>)
    b93c:	f101 038c 	add.w	r3, r1, #140	; 0x8c
    b940:	f10d 0cbc 	add.w	ip, sp, #188	; 0xbc
    b944:	31ec      	adds	r1, #236	; 0xec
    b946:	f853 2f04 	ldr.w	r2, [r3, #4]!
    b94a:	f84c 2f04 	str.w	r2, [ip, #4]!
    b94e:	428b      	cmp	r3, r1
    b950:	d1f9      	bne.n	b946 <precompute_lines+0x28>
    b952:	466a      	mov	r2, sp
    b954:	4669      	mov	r1, sp
    b956:	4620      	mov	r0, r4
    b958:	f7ff f876 	bl	aa48 <line_dbl>
    b95c:	2302      	movs	r3, #2
    b95e:	462a      	mov	r2, r5
    b960:	4669      	mov	r1, sp
    b962:	f504 7090 	add.w	r0, r4, #288	; 0x120
    b966:	f7ff ffc3 	bl	b8f0 <pre_add_n_dbl>
    b96a:	2303      	movs	r3, #3
    b96c:	462a      	mov	r2, r5
    b96e:	4669      	mov	r1, sp
    b970:	f504 6090 	add.w	r0, r4, #1152	; 0x480
    b974:	f7ff ffbc 	bl	b8f0 <pre_add_n_dbl>
    b978:	2309      	movs	r3, #9
    b97a:	462a      	mov	r2, r5
    b97c:	4669      	mov	r1, sp
    b97e:	f504 6010 	add.w	r0, r4, #2304	; 0x900
    b982:	f7ff ffb5 	bl	b8f0 <pre_add_n_dbl>
    b986:	2320      	movs	r3, #32
    b988:	462a      	mov	r2, r5
    b98a:	4669      	mov	r1, sp
    b98c:	f504 50a2 	add.w	r0, r4, #5184	; 0x1440
    b990:	f7ff ffae 	bl	b8f0 <pre_add_n_dbl>
    b994:	2310      	movs	r3, #16
    b996:	462a      	mov	r2, r5
    b998:	4669      	mov	r1, sp
    b99a:	f504 5065 	add.w	r0, r4, #14656	; 0x3940
    b99e:	3020      	adds	r0, #32
    b9a0:	f7ff ffa6 	bl	b8f0 <pre_add_n_dbl>
    b9a4:	b049      	add	sp, #292	; 0x124
    b9a6:	bd30      	pop	{r4, r5, pc}
    b9a8:	00015a08 	.word	0x00015a08

0000b9ac <blst_precompute_lines>:
    b9ac:	b508      	push	{r3, lr}
    b9ae:	f7ff ffb6 	bl	b91e <precompute_lines>
    b9b2:	bd08      	pop	{r3, pc}

0000b9b4 <POINTonE2_dadd_affine>:
    b9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b9b8:	f5ad 7d5f 	sub.w	sp, sp, #892	; 0x37c
    b9bc:	9005      	str	r0, [sp, #20]
    b9be:	460c      	mov	r4, r1
    b9c0:	4616      	mov	r6, r2
    b9c2:	1f17      	subs	r7, r2, #4
    b9c4:	f102 00bc 	add.w	r0, r2, #188	; 0xbc
    b9c8:	463b      	mov	r3, r7
    b9ca:	2200      	movs	r2, #0
    b9cc:	f853 1f04 	ldr.w	r1, [r3, #4]!
    b9d0:	430a      	orrs	r2, r1
    b9d2:	4283      	cmp	r3, r0
    b9d4:	d1fa      	bne.n	b9cc <POINTonE2_dadd_affine+0x18>
    b9d6:	1e53      	subs	r3, r2, #1
    b9d8:	ea23 0202 	bic.w	r2, r3, r2
    b9dc:	0fd3      	lsrs	r3, r2, #31
    b9de:	9304      	str	r3, [sp, #16]
    b9e0:	4dc1      	ldr	r5, [pc, #772]	; (bce8 <POINTonE2_dadd_affine+0x334>)
    b9e2:	f04f 090c 	mov.w	r9, #12
    b9e6:	f8cd 9000 	str.w	r9, [sp]
    b9ea:	462b      	mov	r3, r5
    b9ec:	4632      	mov	r2, r6
    b9ee:	4631      	mov	r1, r6
    b9f0:	a836      	add	r0, sp, #216	; 0xd8
    b9f2:	f7f5 f943 	bl	c7c <add_mod_n>
    b9f6:	f106 0130 	add.w	r1, r6, #48	; 0x30
    b9fa:	f8cd 9000 	str.w	r9, [sp]
    b9fe:	462b      	mov	r3, r5
    ba00:	460a      	mov	r2, r1
    ba02:	a842      	add	r0, sp, #264	; 0x108
    ba04:	f7f5 f93a 	bl	c7c <add_mod_n>
    ba08:	4bb8      	ldr	r3, [pc, #736]	; (bcec <POINTonE2_dadd_affine+0x338>)
    ba0a:	462a      	mov	r2, r5
    ba0c:	4631      	mov	r1, r6
    ba0e:	a81e      	add	r0, sp, #120	; 0x78
    ba10:	f7fb fedc 	bl	77cc <sqr_mont_384x>
    ba14:	464b      	mov	r3, r9
    ba16:	462a      	mov	r2, r5
    ba18:	a91e      	add	r1, sp, #120	; 0x78
    ba1a:	4608      	mov	r0, r1
    ba1c:	f7f5 f9b6 	bl	d8c <mul_by_3_mod_n>
    ba20:	464b      	mov	r3, r9
    ba22:	462a      	mov	r2, r5
    ba24:	a92a      	add	r1, sp, #168	; 0xa8
    ba26:	4608      	mov	r0, r1
    ba28:	f7f5 f9b0 	bl	d8c <mul_by_3_mod_n>
    ba2c:	f106 0860 	add.w	r8, r6, #96	; 0x60
    ba30:	f8cd 9000 	str.w	r9, [sp]
    ba34:	462b      	mov	r3, r5
    ba36:	4642      	mov	r2, r8
    ba38:	4641      	mov	r1, r8
    ba3a:	a806      	add	r0, sp, #24
    ba3c:	f7f5 f91e 	bl	c7c <add_mod_n>
    ba40:	f106 0190 	add.w	r1, r6, #144	; 0x90
    ba44:	f8cd 9000 	str.w	r9, [sp]
    ba48:	462b      	mov	r3, r5
    ba4a:	460a      	mov	r2, r1
    ba4c:	a812      	add	r0, sp, #72	; 0x48
    ba4e:	f7f5 f915 	bl	c7c <add_mod_n>
    ba52:	f104 0ac0 	add.w	sl, r4, #192	; 0xc0
    ba56:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
    ba5a:	f504 708e 	add.w	r0, r4, #284	; 0x11c
    ba5e:	2200      	movs	r2, #0
    ba60:	f853 1f04 	ldr.w	r1, [r3, #4]!
    ba64:	430a      	orrs	r2, r1
    ba66:	4283      	cmp	r3, r0
    ba68:	d1fa      	bne.n	ba60 <POINTonE2_dadd_affine+0xac>
    ba6a:	1e53      	subs	r3, r2, #1
    ba6c:	ea23 0202 	bic.w	r2, r3, r2
    ba70:	0fd3      	lsrs	r3, r2, #31
    ba72:	9303      	str	r3, [sp, #12]
    ba74:	f8df 9274 	ldr.w	r9, [pc, #628]	; bcec <POINTonE2_dadd_affine+0x338>
    ba78:	4d9b      	ldr	r5, [pc, #620]	; (bce8 <POINTonE2_dadd_affine+0x334>)
    ba7a:	464b      	mov	r3, r9
    ba7c:	462a      	mov	r2, r5
    ba7e:	4651      	mov	r1, sl
    ba80:	a84e      	add	r0, sp, #312	; 0x138
    ba82:	f7fb fea3 	bl	77cc <sqr_mont_384x>
    ba86:	f8cd 9000 	str.w	r9, [sp]
    ba8a:	462b      	mov	r3, r5
    ba8c:	4652      	mov	r2, sl
    ba8e:	a94e      	add	r1, sp, #312	; 0x138
    ba90:	a866      	add	r0, sp, #408	; 0x198
    ba92:	f7f8 fc0d 	bl	42b0 <mul_mont_384x>
    ba96:	f8cd 9000 	str.w	r9, [sp]
    ba9a:	462b      	mov	r3, r5
    ba9c:	4642      	mov	r2, r8
    ba9e:	a966      	add	r1, sp, #408	; 0x198
    baa0:	4608      	mov	r0, r1
    baa2:	f7f8 fc05 	bl	42b0 <mul_mont_384x>
    baa6:	f04f 080c 	mov.w	r8, #12
    baaa:	f8cd 8000 	str.w	r8, [sp]
    baae:	462b      	mov	r3, r5
    bab0:	f104 0260 	add.w	r2, r4, #96	; 0x60
    bab4:	a966      	add	r1, sp, #408	; 0x198
    bab6:	4608      	mov	r0, r1
    bab8:	f7f4 fd8a 	bl	5d0 <sub_mod_n>
    babc:	f8cd 8000 	str.w	r8, [sp]
    bac0:	462b      	mov	r3, r5
    bac2:	f104 0290 	add.w	r2, r4, #144	; 0x90
    bac6:	a972      	add	r1, sp, #456	; 0x1c8
    bac8:	4608      	mov	r0, r1
    baca:	f7f4 fd81 	bl	5d0 <sub_mod_n>
    bace:	f8cd 9000 	str.w	r9, [sp]
    bad2:	462b      	mov	r3, r5
    bad4:	4632      	mov	r2, r6
    bad6:	a94e      	add	r1, sp, #312	; 0x138
    bad8:	4608      	mov	r0, r1
    bada:	f7f8 fbe9 	bl	42b0 <mul_mont_384x>
    bade:	f8cd 8000 	str.w	r8, [sp]
    bae2:	462b      	mov	r3, r5
    bae4:	4622      	mov	r2, r4
    bae6:	a94e      	add	r1, sp, #312	; 0x138
    bae8:	a87e      	add	r0, sp, #504	; 0x1f8
    baea:	f7f5 f8c7 	bl	c7c <add_mod_n>
    baee:	f104 0630 	add.w	r6, r4, #48	; 0x30
    baf2:	f8cd 8000 	str.w	r8, [sp]
    baf6:	462b      	mov	r3, r5
    baf8:	4632      	mov	r2, r6
    bafa:	a95a      	add	r1, sp, #360	; 0x168
    bafc:	a88a      	add	r0, sp, #552	; 0x228
    bafe:	f7f5 f8bd 	bl	c7c <add_mod_n>
    bb02:	f8cd 8000 	str.w	r8, [sp]
    bb06:	462b      	mov	r3, r5
    bb08:	4622      	mov	r2, r4
    bb0a:	a94e      	add	r1, sp, #312	; 0x138
    bb0c:	4608      	mov	r0, r1
    bb0e:	f7f4 fd5f 	bl	5d0 <sub_mod_n>
    bb12:	f8cd 8000 	str.w	r8, [sp]
    bb16:	462b      	mov	r3, r5
    bb18:	4632      	mov	r2, r6
    bb1a:	a95a      	add	r1, sp, #360	; 0x168
    bb1c:	4608      	mov	r0, r1
    bb1e:	f7f4 fd57 	bl	5d0 <sub_mod_n>
    bb22:	f8cd 9000 	str.w	r9, [sp]
    bb26:	462b      	mov	r3, r5
    bb28:	4652      	mov	r2, sl
    bb2a:	a94e      	add	r1, sp, #312	; 0x138
    bb2c:	a8c6      	add	r0, sp, #792	; 0x318
    bb2e:	f7f8 fbbf 	bl	42b0 <mul_mont_384x>
    bb32:	f50d 7c9a 	add.w	ip, sp, #308	; 0x134
    bb36:	a87d      	add	r0, sp, #500	; 0x1f4
    bb38:	4663      	mov	r3, ip
    bb3a:	2200      	movs	r2, #0
    bb3c:	f853 1f04 	ldr.w	r1, [r3, #4]!
    bb40:	430a      	orrs	r2, r1
    bb42:	4283      	cmp	r3, r0
    bb44:	d1fa      	bne.n	bb3c <POINTonE2_dadd_affine+0x188>
    bb46:	1e50      	subs	r0, r2, #1
    bb48:	ea20 0002 	bic.w	r0, r0, r2
    bb4c:	17c0      	asrs	r0, r0, #31
    bb4e:	3c04      	subs	r4, #4
    bb50:	ad96      	add	r5, sp, #600	; 0x258
    bb52:	f50d 7846 	add.w	r8, sp, #792	; 0x318
    bb56:	462a      	mov	r2, r5
    bb58:	4626      	mov	r6, r4
    bb5a:	46be      	mov	lr, r7
    bb5c:	f856 1f04 	ldr.w	r1, [r6, #4]!
    bb60:	f85e 3f04 	ldr.w	r3, [lr, #4]!
    bb64:	404b      	eors	r3, r1
    bb66:	4003      	ands	r3, r0
    bb68:	404b      	eors	r3, r1
    bb6a:	f842 3b04 	str.w	r3, [r2], #4
    bb6e:	4542      	cmp	r2, r8
    bb70:	d1f4      	bne.n	bb5c <POINTonE2_dadd_affine+0x1a8>
    bb72:	aa05      	add	r2, sp, #20
    bb74:	aec5      	add	r6, sp, #788	; 0x314
    bb76:	f10d 0a74 	add.w	sl, sp, #116	; 0x74
    bb7a:	46b6      	mov	lr, r6
    bb7c:	4611      	mov	r1, r2
    bb7e:	f85e 9f04 	ldr.w	r9, [lr, #4]!
    bb82:	f851 3f04 	ldr.w	r3, [r1, #4]!
    bb86:	ea89 0303 	eor.w	r3, r9, r3
    bb8a:	4003      	ands	r3, r0
    bb8c:	ea83 0309 	eor.w	r3, r3, r9
    bb90:	f8ce 3000 	str.w	r3, [lr]
    bb94:	4551      	cmp	r1, sl
    bb96:	d1f2      	bne.n	bb7e <POINTonE2_dadd_affine+0x1ca>
    bb98:	a94d      	add	r1, sp, #308	; 0x134
    bb9a:	468e      	mov	lr, r1
    bb9c:	f85c 1f04 	ldr.w	r1, [ip, #4]!
    bba0:	f852 3f04 	ldr.w	r3, [r2, #4]!
    bba4:	404b      	eors	r3, r1
    bba6:	4003      	ands	r3, r0
    bba8:	404b      	eors	r3, r1
    bbaa:	f8cc 3000 	str.w	r3, [ip]
    bbae:	4572      	cmp	r2, lr
    bbb0:	d1f4      	bne.n	bb9c <POINTonE2_dadd_affine+0x1e8>
    bbb2:	f8df a138 	ldr.w	sl, [pc, #312]	; bcec <POINTonE2_dadd_affine+0x338>
    bbb6:	f8df 9130 	ldr.w	r9, [pc, #304]	; bce8 <POINTonE2_dadd_affine+0x334>
    bbba:	4653      	mov	r3, sl
    bbbc:	464a      	mov	r2, r9
    bbbe:	a94e      	add	r1, sp, #312	; 0x138
    bbc0:	a806      	add	r0, sp, #24
    bbc2:	f7fb fe03 	bl	77cc <sqr_mont_384x>
    bbc6:	f8cd a000 	str.w	sl, [sp]
    bbca:	464b      	mov	r3, r9
    bbcc:	aa4e      	add	r2, sp, #312	; 0x138
    bbce:	a906      	add	r1, sp, #24
    bbd0:	a81e      	add	r0, sp, #120	; 0x78
    bbd2:	f7f8 fb6d 	bl	42b0 <mul_mont_384x>
    bbd6:	f8cd a000 	str.w	sl, [sp]
    bbda:	464b      	mov	r3, r9
    bbdc:	aaae      	add	r2, sp, #696	; 0x2b8
    bbde:	a91e      	add	r1, sp, #120	; 0x78
    bbe0:	4608      	mov	r0, r1
    bbe2:	f7f8 fb65 	bl	42b0 <mul_mont_384x>
    bbe6:	f8cd a000 	str.w	sl, [sp]
    bbea:	464b      	mov	r3, r9
    bbec:	aa96      	add	r2, sp, #600	; 0x258
    bbee:	a906      	add	r1, sp, #24
    bbf0:	a8ae      	add	r0, sp, #696	; 0x2b8
    bbf2:	f7f8 fb5d 	bl	42b0 <mul_mont_384x>
    bbf6:	f8cd a000 	str.w	sl, [sp]
    bbfa:	464b      	mov	r3, r9
    bbfc:	aa7e      	add	r2, sp, #504	; 0x1f8
    bbfe:	a906      	add	r1, sp, #24
    bc00:	4608      	mov	r0, r1
    bc02:	f7f8 fb55 	bl	42b0 <mul_mont_384x>
    bc06:	4653      	mov	r3, sl
    bc08:	464a      	mov	r2, r9
    bc0a:	a966      	add	r1, sp, #408	; 0x198
    bc0c:	a896      	add	r0, sp, #600	; 0x258
    bc0e:	f7fb fddd 	bl	77cc <sqr_mont_384x>
    bc12:	f04f 0b0c 	mov.w	fp, #12
    bc16:	f8cd b000 	str.w	fp, [sp]
    bc1a:	464b      	mov	r3, r9
    bc1c:	aa06      	add	r2, sp, #24
    bc1e:	a996      	add	r1, sp, #600	; 0x258
    bc20:	4608      	mov	r0, r1
    bc22:	f7f4 fcd5 	bl	5d0 <sub_mod_n>
    bc26:	f8cd b000 	str.w	fp, [sp]
    bc2a:	464b      	mov	r3, r9
    bc2c:	aa12      	add	r2, sp, #72	; 0x48
    bc2e:	a9a2      	add	r1, sp, #648	; 0x288
    bc30:	4608      	mov	r0, r1
    bc32:	f7f4 fccd 	bl	5d0 <sub_mod_n>
    bc36:	f8cd b000 	str.w	fp, [sp]
    bc3a:	464b      	mov	r3, r9
    bc3c:	aa96      	add	r2, sp, #600	; 0x258
    bc3e:	a9ae      	add	r1, sp, #696	; 0x2b8
    bc40:	4608      	mov	r0, r1
    bc42:	f7f4 fcc5 	bl	5d0 <sub_mod_n>
    bc46:	f8cd b000 	str.w	fp, [sp]
    bc4a:	464b      	mov	r3, r9
    bc4c:	aaa2      	add	r2, sp, #648	; 0x288
    bc4e:	a9ba      	add	r1, sp, #744	; 0x2e8
    bc50:	4608      	mov	r0, r1
    bc52:	f7f4 fcbd 	bl	5d0 <sub_mod_n>
    bc56:	f8cd a000 	str.w	sl, [sp]
    bc5a:	464b      	mov	r3, r9
    bc5c:	aa66      	add	r2, sp, #408	; 0x198
    bc5e:	a9ae      	add	r1, sp, #696	; 0x2b8
    bc60:	4608      	mov	r0, r1
    bc62:	f7f8 fb25 	bl	42b0 <mul_mont_384x>
    bc66:	f8cd b000 	str.w	fp, [sp]
    bc6a:	464b      	mov	r3, r9
    bc6c:	aa1e      	add	r2, sp, #120	; 0x78
    bc6e:	a9ae      	add	r1, sp, #696	; 0x2b8
    bc70:	4608      	mov	r0, r1
    bc72:	f7f4 fcad 	bl	5d0 <sub_mod_n>
    bc76:	f8cd b000 	str.w	fp, [sp]
    bc7a:	464b      	mov	r3, r9
    bc7c:	aa2a      	add	r2, sp, #168	; 0xa8
    bc7e:	a9ba      	add	r1, sp, #744	; 0x2e8
    bc80:	4608      	mov	r0, r1
    bc82:	f7f4 fca5 	bl	5d0 <sub_mod_n>
    bc86:	9b03      	ldr	r3, [sp, #12]
    bc88:	425a      	negs	r2, r3
    bc8a:	4629      	mov	r1, r5
    bc8c:	6808      	ldr	r0, [r1, #0]
    bc8e:	f857 3f04 	ldr.w	r3, [r7, #4]!
    bc92:	4043      	eors	r3, r0
    bc94:	4013      	ands	r3, r2
    bc96:	4043      	eors	r3, r0
    bc98:	f841 3b04 	str.w	r3, [r1], #4
    bc9c:	4541      	cmp	r1, r8
    bc9e:	d1f5      	bne.n	bc8c <POINTonE2_dadd_affine+0x2d8>
    bca0:	4f11      	ldr	r7, [pc, #68]	; (bce8 <POINTonE2_dadd_affine+0x334>)
    bca2:	f107 018c 	add.w	r1, r7, #140	; 0x8c
    bca6:	37ec      	adds	r7, #236	; 0xec
    bca8:	f856 0f04 	ldr.w	r0, [r6, #4]!
    bcac:	f851 3f04 	ldr.w	r3, [r1, #4]!
    bcb0:	4043      	eors	r3, r0
    bcb2:	4013      	ands	r3, r2
    bcb4:	4043      	eors	r3, r0
    bcb6:	6033      	str	r3, [r6, #0]
    bcb8:	42b9      	cmp	r1, r7
    bcba:	d1f5      	bne.n	bca8 <POINTonE2_dadd_affine+0x2f4>
    bcbc:	9b04      	ldr	r3, [sp, #16]
    bcbe:	4259      	negs	r1, r3
    bcc0:	9b05      	ldr	r3, [sp, #20]
    bcc2:	1f18      	subs	r0, r3, #4
    bcc4:	f505 7690 	add.w	r6, r5, #288	; 0x120
    bcc8:	f855 2b04 	ldr.w	r2, [r5], #4
    bccc:	f854 3f04 	ldr.w	r3, [r4, #4]!
    bcd0:	4053      	eors	r3, r2
    bcd2:	400b      	ands	r3, r1
    bcd4:	4053      	eors	r3, r2
    bcd6:	f840 3f04 	str.w	r3, [r0, #4]!
    bcda:	42b5      	cmp	r5, r6
    bcdc:	d1f4      	bne.n	bcc8 <POINTonE2_dadd_affine+0x314>
    bcde:	f50d 7d5f 	add.w	sp, sp, #892	; 0x37c
    bce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bce6:	bf00      	nop
    bce8:	00015a08 	.word	0x00015a08
    bcec:	fffcfffd 	.word	0xfffcfffd

0000bcf0 <PAIRING_Aggregate_PK_in_G1>:
    bcf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bcf4:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
    bcf8:	4698      	mov	r8, r3
    bcfa:	6803      	ldr	r3, [r0, #0]
    bcfc:	f013 0501 	ands.w	r5, r3, #1
    bd00:	f040 818b 	bne.w	c01a <PAIRING_Aggregate_PK_in_G1+0x32a>
    bd04:	4607      	mov	r7, r0
    bd06:	460e      	mov	r6, r1
    bd08:	4691      	mov	r9, r2
    bd0a:	f043 0302 	orr.w	r3, r3, #2
    bd0e:	6003      	str	r3, [r0, #0]
    bd10:	f1b8 0f00 	cmp.w	r8, #0
    bd14:	d07d      	beq.n	be12 <PAIRING_Aggregate_PK_in_G1+0x122>
    bd16:	f1a8 0204 	sub.w	r2, r8, #4
    bd1a:	f108 04bc 	add.w	r4, r8, #188	; 0xbc
    bd1e:	4613      	mov	r3, r2
    bd20:	4629      	mov	r1, r5
    bd22:	f853 0f04 	ldr.w	r0, [r3, #4]!
    bd26:	4301      	orrs	r1, r0
    bd28:	42a3      	cmp	r3, r4
    bd2a:	d1fa      	bne.n	bd22 <PAIRING_Aggregate_PK_in_G1+0x32>
    bd2c:	1e48      	subs	r0, r1, #1
    bd2e:	ea20 0101 	bic.w	r1, r0, r1
    bd32:	0fc9      	lsrs	r1, r1, #31
    bd34:	d16d      	bne.n	be12 <PAIRING_Aggregate_PK_in_G1+0x122>
    bd36:	f507 7a14 	add.w	sl, r7, #592	; 0x250
    bd3a:	f50d 7e20 	add.w	lr, sp, #640	; 0x280
    bd3e:	ab70      	add	r3, sp, #448	; 0x1c0
    bd40:	4610      	mov	r0, r2
    bd42:	f850 cf04 	ldr.w	ip, [r0, #4]!
    bd46:	f843 cb04 	str.w	ip, [r3], #4
    bd4a:	4573      	cmp	r3, lr
    bd4c:	d1f9      	bne.n	bd42 <PAIRING_Aggregate_PK_in_G1+0x52>
    bd4e:	4613      	mov	r3, r2
    bd50:	f853 0f04 	ldr.w	r0, [r3, #4]!
    bd54:	4301      	orrs	r1, r0
    bd56:	42a3      	cmp	r3, r4
    bd58:	d1fa      	bne.n	bd50 <PAIRING_Aggregate_PK_in_G1+0x60>
    bd5a:	1e48      	subs	r0, r1, #1
    bd5c:	ea20 0101 	bic.w	r1, r0, r1
    bd60:	17c8      	asrs	r0, r1, #31
    bd62:	4cb0      	ldr	r4, [pc, #704]	; (c024 <PAIRING_Aggregate_PK_in_G1+0x334>)
    bd64:	f104 0390 	add.w	r3, r4, #144	; 0x90
    bd68:	a99f      	add	r1, sp, #636	; 0x27c
    bd6a:	f104 0cf0 	add.w	ip, r4, #240	; 0xf0
    bd6e:	f853 eb04 	ldr.w	lr, [r3], #4
    bd72:	f852 4f04 	ldr.w	r4, [r2, #4]!
    bd76:	ea8e 0404 	eor.w	r4, lr, r4
    bd7a:	4004      	ands	r4, r0
    bd7c:	ea84 040e 	eor.w	r4, r4, lr
    bd80:	f841 4f04 	str.w	r4, [r1, #4]!
    bd84:	4563      	cmp	r3, ip
    bd86:	d1f2      	bne.n	bd6e <PAIRING_Aggregate_PK_in_G1+0x7e>
    bd88:	f8dd 3428 	ldr.w	r3, [sp, #1064]	; 0x428
    bd8c:	b9c3      	cbnz	r3, bdc0 <PAIRING_Aggregate_PK_in_G1+0xd0>
    bd8e:	683b      	ldr	r3, [r7, #0]
    bd90:	f013 0f10 	tst.w	r3, #16
    bd94:	d021      	beq.n	bdda <PAIRING_Aggregate_PK_in_G1+0xea>
    bd96:	f8dd 3430 	ldr.w	r3, [sp, #1072]	; 0x430
    bd9a:	b1c3      	cbz	r3, bdce <PAIRING_Aggregate_PK_in_G1+0xde>
    bd9c:	f8dd 342c 	ldr.w	r3, [sp, #1068]	; 0x42c
    bda0:	b1ab      	cbz	r3, bdce <PAIRING_Aggregate_PK_in_G1+0xde>
    bda2:	f8dd 3430 	ldr.w	r3, [sp, #1072]	; 0x430
    bda6:	f8dd 242c 	ldr.w	r2, [sp, #1068]	; 0x42c
    bdaa:	a970      	add	r1, sp, #448	; 0x1c0
    bdac:	4608      	mov	r0, r1
    bdae:	f7fd f9a5 	bl	90fc <POINTonE2_mult_w5>
    bdb2:	2300      	movs	r3, #0
    bdb4:	aa70      	add	r2, sp, #448	; 0x1c0
    bdb6:	4651      	mov	r1, sl
    bdb8:	4650      	mov	r0, sl
    bdba:	f7fc fe4d 	bl	8a58 <POINTonE2_dadd>
    bdbe:	e028      	b.n	be12 <PAIRING_Aggregate_PK_in_G1+0x122>
    bdc0:	a870      	add	r0, sp, #448	; 0x1c0
    bdc2:	f7fd fab3 	bl	932c <POINTonE2_in_G2>
    bdc6:	2800      	cmp	r0, #0
    bdc8:	d1e1      	bne.n	bd8e <PAIRING_Aggregate_PK_in_G1+0x9e>
    bdca:	2003      	movs	r0, #3
    bdcc:	e0e9      	b.n	bfa2 <PAIRING_Aggregate_PK_in_G1+0x2b2>
    bdce:	4642      	mov	r2, r8
    bdd0:	4651      	mov	r1, sl
    bdd2:	4650      	mov	r0, sl
    bdd4:	f7ff fdee 	bl	b9b4 <POINTonE2_dadd_affine>
    bdd8:	e01b      	b.n	be12 <PAIRING_Aggregate_PK_in_G1+0x122>
    bdda:	f043 0310 	orr.w	r3, r3, #16
    bdde:	603b      	str	r3, [r7, #0]
    bde0:	f8dd 3430 	ldr.w	r3, [sp, #1072]	; 0x430
    bde4:	b15b      	cbz	r3, bdfe <PAIRING_Aggregate_PK_in_G1+0x10e>
    bde6:	f8dd 342c 	ldr.w	r3, [sp, #1068]	; 0x42c
    bdea:	b143      	cbz	r3, bdfe <PAIRING_Aggregate_PK_in_G1+0x10e>
    bdec:	f8dd 3430 	ldr.w	r3, [sp, #1072]	; 0x430
    bdf0:	f8dd 242c 	ldr.w	r2, [sp, #1068]	; 0x42c
    bdf4:	a970      	add	r1, sp, #448	; 0x1c0
    bdf6:	4650      	mov	r0, sl
    bdf8:	f7fd f980 	bl	90fc <POINTonE2_mult_w5>
    bdfc:	e009      	b.n	be12 <PAIRING_Aggregate_PK_in_G1+0x122>
    bdfe:	ab6f      	add	r3, sp, #444	; 0x1bc
    be00:	f507 7213 	add.w	r2, r7, #588	; 0x24c
    be04:	a8b7      	add	r0, sp, #732	; 0x2dc
    be06:	f853 1f04 	ldr.w	r1, [r3, #4]!
    be0a:	f842 1f04 	str.w	r1, [r2, #4]!
    be0e:	4283      	cmp	r3, r0
    be10:	d1f9      	bne.n	be06 <PAIRING_Aggregate_PK_in_G1+0x116>
    be12:	2e00      	cmp	r6, #0
    be14:	f000 8103 	beq.w	c01e <PAIRING_Aggregate_PK_in_G1+0x32e>
    be18:	f8d7 b008 	ldr.w	fp, [r7, #8]
    be1c:	f1bb 0f2a 	cmp.w	fp, #42	; 0x2a
    be20:	bf08      	it	eq
    be22:	f507 6b47 	addeq.w	fp, r7, #3184	; 0xc70
    be26:	f1a6 0804 	sub.w	r8, r6, #4
    be2a:	46b2      	mov	sl, r6
    be2c:	f106 045c 	add.w	r4, r6, #92	; 0x5c
    be30:	4643      	mov	r3, r8
    be32:	f853 2f04 	ldr.w	r2, [r3, #4]!
    be36:	4315      	orrs	r5, r2
    be38:	42a3      	cmp	r3, r4
    be3a:	d1fa      	bne.n	be32 <PAIRING_Aggregate_PK_in_G1+0x142>
    be3c:	1e6b      	subs	r3, r5, #1
    be3e:	ea23 0505 	bic.w	r5, r3, r5
    be42:	0fed      	lsrs	r5, r5, #31
    be44:	f040 80e7 	bne.w	c016 <PAIRING_Aggregate_PK_in_G1+0x326>
    be48:	f1b9 0f00 	cmp.w	r9, #0
    be4c:	d02d      	beq.n	beaa <PAIRING_Aggregate_PK_in_G1+0x1ba>
    be4e:	ab70      	add	r3, sp, #448	; 0x1c0
    be50:	a888      	add	r0, sp, #544	; 0x220
    be52:	4642      	mov	r2, r8
    be54:	f852 1f04 	ldr.w	r1, [r2, #4]!
    be58:	f843 1b04 	str.w	r1, [r3], #4
    be5c:	4283      	cmp	r3, r0
    be5e:	d1f9      	bne.n	be54 <PAIRING_Aggregate_PK_in_G1+0x164>
    be60:	4643      	mov	r3, r8
    be62:	462a      	mov	r2, r5
    be64:	f853 1f04 	ldr.w	r1, [r3, #4]!
    be68:	430a      	orrs	r2, r1
    be6a:	42a3      	cmp	r3, r4
    be6c:	d1fa      	bne.n	be64 <PAIRING_Aggregate_PK_in_G1+0x174>
    be6e:	f102 3cff 	add.w	ip, r2, #4294967295
    be72:	ea2c 0c02 	bic.w	ip, ip, r2
    be76:	ea4f 7cec 	mov.w	ip, ip, asr #31
    be7a:	486b      	ldr	r0, [pc, #428]	; (c028 <PAIRING_Aggregate_PK_in_G1+0x338>)
    be7c:	a987      	add	r1, sp, #540	; 0x21c
    be7e:	f10a 0e2c 	add.w	lr, sl, #44	; 0x2c
    be82:	4642      	mov	r2, r8
    be84:	f850 9b04 	ldr.w	r9, [r0], #4
    be88:	f852 3f04 	ldr.w	r3, [r2, #4]!
    be8c:	ea89 0303 	eor.w	r3, r9, r3
    be90:	ea03 030c 	and.w	r3, r3, ip
    be94:	ea83 0309 	eor.w	r3, r3, r9
    be98:	f841 3f04 	str.w	r3, [r1, #4]!
    be9c:	4572      	cmp	r2, lr
    be9e:	d1f1      	bne.n	be84 <PAIRING_Aggregate_PK_in_G1+0x194>
    bea0:	a870      	add	r0, sp, #448	; 0x1c0
    bea2:	f7f7 fb71 	bl	3588 <POINTonE1_in_G1>
    bea6:	2800      	cmp	r0, #0
    bea8:	d07f      	beq.n	bfaa <PAIRING_Aggregate_PK_in_G1+0x2ba>
    beaa:	683b      	ldr	r3, [r7, #0]
    beac:	f013 0f40 	tst.w	r3, #64	; 0x40
    beb0:	d07d      	beq.n	bfae <PAIRING_Aggregate_PK_in_G1+0x2be>
    beb2:	68fb      	ldr	r3, [r7, #12]
    beb4:	9303      	str	r3, [sp, #12]
    beb6:	f8cd b008 	str.w	fp, [sp, #8]
    beba:	f8dd 3438 	ldr.w	r3, [sp, #1080]	; 0x438
    bebe:	9301      	str	r3, [sp, #4]
    bec0:	f8dd 3434 	ldr.w	r3, [sp, #1076]	; 0x434
    bec4:	9300      	str	r3, [sp, #0]
    bec6:	f8dd 3440 	ldr.w	r3, [sp, #1088]	; 0x440
    beca:	f8dd 243c 	ldr.w	r2, [sp, #1084]	; 0x43c
    bece:	2104      	movs	r1, #4
    bed0:	a870      	add	r0, sp, #448	; 0x1c0
    bed2:	f7fb f842 	bl	6f5a <hash_to_field>
    bed6:	aa88      	add	r2, sp, #544	; 0x220
    bed8:	a970      	add	r1, sp, #448	; 0x1c0
    beda:	a828      	add	r0, sp, #160	; 0xa0
    bedc:	f7fd fee8 	bl	9cb0 <map_to_g2>
    bee0:	a928      	add	r1, sp, #160	; 0xa0
    bee2:	4608      	mov	r0, r1
    bee4:	f7fb fca7 	bl	7836 <POINTonE2_from_Jacobian>
    bee8:	f8dd 3430 	ldr.w	r3, [sp, #1072]	; 0x430
    beec:	b393      	cbz	r3, bf54 <PAIRING_Aggregate_PK_in_G1+0x264>
    beee:	f8dd 342c 	ldr.w	r3, [sp, #1068]	; 0x42c
    bef2:	b37b      	cbz	r3, bf54 <PAIRING_Aggregate_PK_in_G1+0x264>
    bef4:	ab04      	add	r3, sp, #16
    bef6:	a81c      	add	r0, sp, #112	; 0x70
    bef8:	4642      	mov	r2, r8
    befa:	f852 1f04 	ldr.w	r1, [r2, #4]!
    befe:	f843 1b04 	str.w	r1, [r3], #4
    bf02:	4283      	cmp	r3, r0
    bf04:	d1f9      	bne.n	befa <PAIRING_Aggregate_PK_in_G1+0x20a>
    bf06:	4643      	mov	r3, r8
    bf08:	462a      	mov	r2, r5
    bf0a:	f853 1f04 	ldr.w	r1, [r3, #4]!
    bf0e:	430a      	orrs	r2, r1
    bf10:	42a3      	cmp	r3, r4
    bf12:	d1fa      	bne.n	bf0a <PAIRING_Aggregate_PK_in_G1+0x21a>
    bf14:	1e54      	subs	r4, r2, #1
    bf16:	ea24 0202 	bic.w	r2, r4, r2
    bf1a:	17d4      	asrs	r4, r2, #31
    bf1c:	4842      	ldr	r0, [pc, #264]	; (c028 <PAIRING_Aggregate_PK_in_G1+0x338>)
    bf1e:	a91b      	add	r1, sp, #108	; 0x6c
    bf20:	f10a 0a2c 	add.w	sl, sl, #44	; 0x2c
    bf24:	f850 2b04 	ldr.w	r2, [r0], #4
    bf28:	f858 3f04 	ldr.w	r3, [r8, #4]!
    bf2c:	4053      	eors	r3, r2
    bf2e:	4023      	ands	r3, r4
    bf30:	4053      	eors	r3, r2
    bf32:	f841 3f04 	str.w	r3, [r1, #4]!
    bf36:	45d0      	cmp	r8, sl
    bf38:	d1f4      	bne.n	bf24 <PAIRING_Aggregate_PK_in_G1+0x234>
    bf3a:	f8dd 3430 	ldr.w	r3, [sp, #1072]	; 0x430
    bf3e:	f8dd 242c 	ldr.w	r2, [sp, #1068]	; 0x42c
    bf42:	a904      	add	r1, sp, #16
    bf44:	4608      	mov	r0, r1
    bf46:	f7f7 fa76 	bl	3436 <POINTonE1_mult_w5>
    bf4a:	a904      	add	r1, sp, #16
    bf4c:	4608      	mov	r0, r1
    bf4e:	f7f9 fbcb 	bl	56e8 <POINTonE1_from_Jacobian>
    bf52:	ae04      	add	r6, sp, #16
    bf54:	687c      	ldr	r4, [r7, #4]
    bf56:	f507 715c 	add.w	r1, r7, #880	; 0x370
    bf5a:	ab27      	add	r3, sp, #156	; 0x9c
    bf5c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    bf60:	eb07 1282 	add.w	r2, r7, r2, lsl #6
    bf64:	f502 725b 	add.w	r2, r2, #876	; 0x36c
    bf68:	f50d 7cae 	add.w	ip, sp, #348	; 0x15c
    bf6c:	f853 0f04 	ldr.w	r0, [r3, #4]!
    bf70:	f842 0f04 	str.w	r0, [r2, #4]!
    bf74:	4563      	cmp	r3, ip
    bf76:	d1f9      	bne.n	bf6c <PAIRING_Aggregate_PK_in_G1+0x27c>
    bf78:	f507 6c17 	add.w	ip, r7, #2416	; 0x970
    bf7c:	1f33      	subs	r3, r6, #4
    bf7e:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    bf82:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    bf86:	f600 106c 	addw	r0, r0, #2412	; 0x96c
    bf8a:	365c      	adds	r6, #92	; 0x5c
    bf8c:	f853 2f04 	ldr.w	r2, [r3, #4]!
    bf90:	f840 2f04 	str.w	r2, [r0, #4]!
    bf94:	42b3      	cmp	r3, r6
    bf96:	d1f9      	bne.n	bf8c <PAIRING_Aggregate_PK_in_G1+0x29c>
    bf98:	1c66      	adds	r6, r4, #1
    bf9a:	2c07      	cmp	r4, #7
    bf9c:	d01f      	beq.n	bfde <PAIRING_Aggregate_PK_in_G1+0x2ee>
    bf9e:	607e      	str	r6, [r7, #4]
    bfa0:	2000      	movs	r0, #0
    bfa2:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
    bfa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bfaa:	2003      	movs	r0, #3
    bfac:	e7f9      	b.n	bfa2 <PAIRING_Aggregate_PK_in_G1+0x2b2>
    bfae:	68fb      	ldr	r3, [r7, #12]
    bfb0:	9303      	str	r3, [sp, #12]
    bfb2:	f8cd b008 	str.w	fp, [sp, #8]
    bfb6:	f8dd 3438 	ldr.w	r3, [sp, #1080]	; 0x438
    bfba:	9301      	str	r3, [sp, #4]
    bfbc:	f8dd 3434 	ldr.w	r3, [sp, #1076]	; 0x434
    bfc0:	9300      	str	r3, [sp, #0]
    bfc2:	f8dd 3440 	ldr.w	r3, [sp, #1088]	; 0x440
    bfc6:	f8dd 243c 	ldr.w	r2, [sp, #1084]	; 0x43c
    bfca:	2102      	movs	r1, #2
    bfcc:	a870      	add	r0, sp, #448	; 0x1c0
    bfce:	f7fa ffc4 	bl	6f5a <hash_to_field>
    bfd2:	2200      	movs	r2, #0
    bfd4:	a970      	add	r1, sp, #448	; 0x1c0
    bfd6:	a828      	add	r0, sp, #160	; 0xa0
    bfd8:	f7fd fe6a 	bl	9cb0 <map_to_g2>
    bfdc:	e780      	b.n	bee0 <PAIRING_Aggregate_PK_in_G1+0x1f0>
    bfde:	683e      	ldr	r6, [r7, #0]
    bfe0:	f016 0620 	ands.w	r6, r6, #32
    bfe4:	d00c      	beq.n	c000 <PAIRING_Aggregate_PK_in_G1+0x310>
    bfe6:	2308      	movs	r3, #8
    bfe8:	4662      	mov	r2, ip
    bfea:	a870      	add	r0, sp, #448	; 0x1c0
    bfec:	f7ff f8e6 	bl	b1bc <miller_loop_n>
    bff0:	f107 0010 	add.w	r0, r7, #16
    bff4:	aa70      	add	r2, sp, #448	; 0x1c0
    bff6:	4601      	mov	r1, r0
    bff8:	f7f8 fc6e 	bl	48d8 <mul_fp12>
    bffc:	462e      	mov	r6, r5
    bffe:	e7ce      	b.n	bf9e <PAIRING_Aggregate_PK_in_G1+0x2ae>
    c000:	2308      	movs	r3, #8
    c002:	4662      	mov	r2, ip
    c004:	f107 0010 	add.w	r0, r7, #16
    c008:	f7ff f8d8 	bl	b1bc <miller_loop_n>
    c00c:	683b      	ldr	r3, [r7, #0]
    c00e:	f043 0320 	orr.w	r3, r3, #32
    c012:	603b      	str	r3, [r7, #0]
    c014:	e7c3      	b.n	bf9e <PAIRING_Aggregate_PK_in_G1+0x2ae>
    c016:	2006      	movs	r0, #6
    c018:	e7c3      	b.n	bfa2 <PAIRING_Aggregate_PK_in_G1+0x2b2>
    c01a:	2004      	movs	r0, #4
    c01c:	e7c1      	b.n	bfa2 <PAIRING_Aggregate_PK_in_G1+0x2b2>
    c01e:	2000      	movs	r0, #0
    c020:	e7bf      	b.n	bfa2 <PAIRING_Aggregate_PK_in_G1+0x2b2>
    c022:	bf00      	nop
    c024:	00015a08 	.word	0x00015a08
    c028:	00015a98 	.word	0x00015a98

0000c02c <blst_pairing_aggregate_pk_in_g1>:
    c02c:	b500      	push	{lr}
    c02e:	b089      	sub	sp, #36	; 0x24
    c030:	4694      	mov	ip, r2
    c032:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c034:	9206      	str	r2, [sp, #24]
    c036:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c038:	9205      	str	r2, [sp, #20]
    c03a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c03c:	9204      	str	r2, [sp, #16]
    c03e:	9303      	str	r3, [sp, #12]
    c040:	2200      	movs	r2, #0
    c042:	9202      	str	r2, [sp, #8]
    c044:	9201      	str	r2, [sp, #4]
    c046:	2301      	movs	r3, #1
    c048:	9300      	str	r3, [sp, #0]
    c04a:	4663      	mov	r3, ip
    c04c:	f7ff fe50 	bl	bcf0 <PAIRING_Aggregate_PK_in_G1>
    c050:	b009      	add	sp, #36	; 0x24
    c052:	f85d fb04 	ldr.w	pc, [sp], #4

0000c056 <blst_pairing_mul_n_aggregate_pk_in_g1>:
    c056:	b500      	push	{lr}
    c058:	b089      	sub	sp, #36	; 0x24
    c05a:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    c05e:	f8cd c018 	str.w	ip, [sp, #24]
    c062:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
    c066:	f8cd c014 	str.w	ip, [sp, #20]
    c06a:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
    c06e:	f8cd c010 	str.w	ip, [sp, #16]
    c072:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
    c076:	f8cd c00c 	str.w	ip, [sp, #12]
    c07a:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    c07e:	f8cd c008 	str.w	ip, [sp, #8]
    c082:	9301      	str	r3, [sp, #4]
    c084:	2301      	movs	r3, #1
    c086:	9300      	str	r3, [sp, #0]
    c088:	4613      	mov	r3, r2
    c08a:	2200      	movs	r2, #0
    c08c:	f7ff fe30 	bl	bcf0 <PAIRING_Aggregate_PK_in_G1>
    c090:	b009      	add	sp, #36	; 0x24
    c092:	f85d fb04 	ldr.w	pc, [sp], #4

0000c096 <blst_pairing_chk_n_aggr_pk_in_g1>:
    c096:	b510      	push	{r4, lr}
    c098:	b088      	sub	sp, #32
    c09a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    c09c:	9406      	str	r4, [sp, #24]
    c09e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    c0a0:	9405      	str	r4, [sp, #20]
    c0a2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    c0a4:	9404      	str	r4, [sp, #16]
    c0a6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    c0a8:	9403      	str	r4, [sp, #12]
    c0aa:	2400      	movs	r4, #0
    c0ac:	9402      	str	r4, [sp, #8]
    c0ae:	9401      	str	r4, [sp, #4]
    c0b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    c0b2:	9400      	str	r4, [sp, #0]
    c0b4:	f7ff fe1c 	bl	bcf0 <PAIRING_Aggregate_PK_in_G1>
    c0b8:	b008      	add	sp, #32
    c0ba:	bd10      	pop	{r4, pc}

0000c0bc <blst_pairing_chk_n_mul_n_aggr_pk_in_g1>:
    c0bc:	b500      	push	{lr}
    c0be:	b089      	sub	sp, #36	; 0x24
    c0c0:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    c0c4:	f8cd c018 	str.w	ip, [sp, #24]
    c0c8:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    c0cc:	f8cd c014 	str.w	ip, [sp, #20]
    c0d0:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    c0d4:	f8cd c010 	str.w	ip, [sp, #16]
    c0d8:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
    c0dc:	f8cd c00c 	str.w	ip, [sp, #12]
    c0e0:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
    c0e4:	f8cd c008 	str.w	ip, [sp, #8]
    c0e8:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
    c0ec:	f8cd c004 	str.w	ip, [sp, #4]
    c0f0:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    c0f4:	f8cd c000 	str.w	ip, [sp]
    c0f8:	f7ff fdfa 	bl	bcf0 <PAIRING_Aggregate_PK_in_G1>
    c0fc:	b009      	add	sp, #36	; 0x24
    c0fe:	f85d fb04 	ldr.w	pc, [sp], #4

0000c102 <blst_core_verify_pk_in_g1>:
    c102:	b510      	push	{r4, lr}
    c104:	f5ad 6d49 	sub.w	sp, sp, #3216	; 0xc90
    c108:	2a00      	cmp	r2, #0
    c10a:	bf14      	ite	ne
    c10c:	2240      	movne	r2, #64	; 0x40
    c10e:	2200      	moveq	r2, #0
    c110:	9208      	str	r2, [sp, #32]
    c112:	2200      	movs	r2, #0
    c114:	9209      	str	r2, [sp, #36]	; 0x24
    c116:	f8dd 4c9c 	ldr.w	r4, [sp, #3228]	; 0xc9c
    c11a:	940a      	str	r4, [sp, #40]	; 0x28
    c11c:	f8dd 4ca0 	ldr.w	r4, [sp, #3232]	; 0xca0
    c120:	940b      	str	r4, [sp, #44]	; 0x2c
    c122:	f8dd 4ca8 	ldr.w	r4, [sp, #3240]	; 0xca8
    c126:	9406      	str	r4, [sp, #24]
    c128:	f8dd 4ca4 	ldr.w	r4, [sp, #3236]	; 0xca4
    c12c:	9405      	str	r4, [sp, #20]
    c12e:	f8dd 4c98 	ldr.w	r4, [sp, #3224]	; 0xc98
    c132:	9404      	str	r4, [sp, #16]
    c134:	9303      	str	r3, [sp, #12]
    c136:	9202      	str	r2, [sp, #8]
    c138:	9201      	str	r2, [sp, #4]
    c13a:	2201      	movs	r2, #1
    c13c:	9200      	str	r2, [sp, #0]
    c13e:	460b      	mov	r3, r1
    c140:	4601      	mov	r1, r0
    c142:	a808      	add	r0, sp, #32
    c144:	f7ff fdd4 	bl	bcf0 <PAIRING_Aggregate_PK_in_G1>
    c148:	4604      	mov	r4, r0
    c14a:	b118      	cbz	r0, c154 <blst_core_verify_pk_in_g1+0x52>
    c14c:	4620      	mov	r0, r4
    c14e:	f50d 6d49 	add.w	sp, sp, #3216	; 0xc90
    c152:	bd10      	pop	{r4, pc}
    c154:	a808      	add	r0, sp, #32
    c156:	f7ff fad6 	bl	b706 <PAIRING_Commit>
    c15a:	2100      	movs	r1, #0
    c15c:	a808      	add	r0, sp, #32
    c15e:	f7ff faff 	bl	b760 <PAIRING_FinalVerify>
    c162:	2800      	cmp	r0, #0
    c164:	bf08      	it	eq
    c166:	2405      	moveq	r4, #5
    c168:	e7f0      	b.n	c14c <blst_core_verify_pk_in_g1+0x4a>

0000c16a <blst_aggregate_in_g2>:
    c16a:	b5f0      	push	{r4, r5, r6, r7, lr}
    c16c:	b0c9      	sub	sp, #292	; 0x124
    c16e:	4605      	mov	r5, r0
    c170:	460e      	mov	r6, r1
    c172:	7813      	ldrb	r3, [r2, #0]
    c174:	f013 0740 	ands.w	r7, r3, #64	; 0x40
    c178:	d120      	bne.n	c1bc <blst_aggregate_in_g2+0x52>
    c17a:	4611      	mov	r1, r2
    c17c:	f013 0f80 	tst.w	r3, #128	; 0x80
    c180:	d12b      	bne.n	c1da <blst_aggregate_in_g2+0x70>
    c182:	4668      	mov	r0, sp
    c184:	f7fb fcca 	bl	7b1c <POINTonE2_Deserialize_BE>
    c188:	4668      	mov	r0, sp
    c18a:	f7fb fc65 	bl	7a58 <POINTonE2_affine_on_curve>
    c18e:	b3b0      	cbz	r0, c1fe <blst_aggregate_in_g2+0x94>
    c190:	481d      	ldr	r0, [pc, #116]	; (c208 <blst_aggregate_in_g2+0x9e>)
    c192:	f100 038c 	add.w	r3, r0, #140	; 0x8c
    c196:	aa2f      	add	r2, sp, #188	; 0xbc
    c198:	30ec      	adds	r0, #236	; 0xec
    c19a:	f853 4f04 	ldr.w	r4, [r3, #4]!
    c19e:	f842 4f04 	str.w	r4, [r2, #4]!
    c1a2:	4283      	cmp	r3, r0
    c1a4:	d1f9      	bne.n	c19a <blst_aggregate_in_g2+0x30>
    c1a6:	4668      	mov	r0, sp
    c1a8:	f7fd f8c0 	bl	932c <POINTonE2_in_G2>
    c1ac:	b348      	cbz	r0, c202 <blst_aggregate_in_g2+0x98>
    c1ae:	b1de      	cbz	r6, c1e8 <blst_aggregate_in_g2+0x7e>
    c1b0:	466a      	mov	r2, sp
    c1b2:	4631      	mov	r1, r6
    c1b4:	4628      	mov	r0, r5
    c1b6:	f7ff fbfd 	bl	b9b4 <POINTonE2_dadd_affine>
    c1ba:	e001      	b.n	c1c0 <blst_aggregate_in_g2+0x56>
    c1bc:	b119      	cbz	r1, c1c6 <blst_aggregate_in_g2+0x5c>
    c1be:	2700      	movs	r7, #0
    c1c0:	4638      	mov	r0, r7
    c1c2:	b049      	add	sp, #292	; 0x124
    c1c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c1c6:	4603      	mov	r3, r0
    c1c8:	f500 7190 	add.w	r1, r0, #288	; 0x120
    c1cc:	2200      	movs	r2, #0
    c1ce:	f843 2b04 	str.w	r2, [r3], #4
    c1d2:	4299      	cmp	r1, r3
    c1d4:	d1fb      	bne.n	c1ce <blst_aggregate_in_g2+0x64>
    c1d6:	2700      	movs	r7, #0
    c1d8:	e7f2      	b.n	c1c0 <blst_aggregate_in_g2+0x56>
    c1da:	4668      	mov	r0, sp
    c1dc:	f7fc f89c 	bl	8318 <POINTonE2_Uncompress>
    c1e0:	2800      	cmp	r0, #0
    c1e2:	d0d5      	beq.n	c190 <blst_aggregate_in_g2+0x26>
    c1e4:	4607      	mov	r7, r0
    c1e6:	e7eb      	b.n	c1c0 <blst_aggregate_in_g2+0x56>
    c1e8:	f1ad 0304 	sub.w	r3, sp, #4
    c1ec:	3d04      	subs	r5, #4
    c1ee:	a947      	add	r1, sp, #284	; 0x11c
    c1f0:	f853 2f04 	ldr.w	r2, [r3, #4]!
    c1f4:	f845 2f04 	str.w	r2, [r5, #4]!
    c1f8:	428b      	cmp	r3, r1
    c1fa:	d1f9      	bne.n	c1f0 <blst_aggregate_in_g2+0x86>
    c1fc:	e7e0      	b.n	c1c0 <blst_aggregate_in_g2+0x56>
    c1fe:	2702      	movs	r7, #2
    c200:	e7de      	b.n	c1c0 <blst_aggregate_in_g2+0x56>
    c202:	2703      	movs	r7, #3
    c204:	e7dc      	b.n	c1c0 <blst_aggregate_in_g2+0x56>
    c206:	bf00      	nop
    c208:	00015a08 	.word	0x00015a08

0000c20c <POINTonE2_add_affine>:
    c20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c210:	f5ad 7d45 	sub.w	sp, sp, #788	; 0x314
    c214:	9003      	str	r0, [sp, #12]
    c216:	460d      	mov	r5, r1
    c218:	4616      	mov	r6, r2
    c21a:	f101 0bc0 	add.w	fp, r1, #192	; 0xc0
    c21e:	f101 03bc 	add.w	r3, r1, #188	; 0xbc
    c222:	f501 708e 	add.w	r0, r1, #284	; 0x11c
    c226:	2200      	movs	r2, #0
    c228:	f853 1f04 	ldr.w	r1, [r3, #4]!
    c22c:	430a      	orrs	r2, r1
    c22e:	4283      	cmp	r3, r0
    c230:	d1fa      	bne.n	c228 <POINTonE2_add_affine+0x1c>
    c232:	1e57      	subs	r7, r2, #1
    c234:	ea27 0702 	bic.w	r7, r7, r2
    c238:	0fff      	lsrs	r7, r7, #31
    c23a:	f8df 82c4 	ldr.w	r8, [pc, #708]	; c500 <POINTonE2_add_affine+0x2f4>
    c23e:	4cb1      	ldr	r4, [pc, #708]	; (c504 <POINTonE2_add_affine+0x2f8>)
    c240:	4643      	mov	r3, r8
    c242:	4622      	mov	r2, r4
    c244:	4659      	mov	r1, fp
    c246:	a864      	add	r0, sp, #400	; 0x190
    c248:	f7fb fac0 	bl	77cc <sqr_mont_384x>
    c24c:	f8cd 8000 	str.w	r8, [sp]
    c250:	4623      	mov	r3, r4
    c252:	465a      	mov	r2, fp
    c254:	a964      	add	r1, sp, #400	; 0x190
    c256:	a8ac      	add	r0, sp, #688	; 0x2b0
    c258:	f7f8 f82a 	bl	42b0 <mul_mont_384x>
    c25c:	f8cd 8000 	str.w	r8, [sp]
    c260:	4623      	mov	r3, r4
    c262:	f106 0260 	add.w	r2, r6, #96	; 0x60
    c266:	a9ac      	add	r1, sp, #688	; 0x2b0
    c268:	4608      	mov	r0, r1
    c26a:	f7f8 f821 	bl	42b0 <mul_mont_384x>
    c26e:	f1a6 0804 	sub.w	r8, r6, #4
    c272:	f106 00bc 	add.w	r0, r6, #188	; 0xbc
    c276:	4643      	mov	r3, r8
    c278:	2200      	movs	r2, #0
    c27a:	f853 1f04 	ldr.w	r1, [r3, #4]!
    c27e:	430a      	orrs	r2, r1
    c280:	4283      	cmp	r3, r0
    c282:	d1fa      	bne.n	c27a <POINTonE2_add_affine+0x6e>
    c284:	1e53      	subs	r3, r2, #1
    c286:	ea23 0202 	bic.w	r2, r3, r2
    c28a:	0fd3      	lsrs	r3, r2, #31
    c28c:	9302      	str	r3, [sp, #8]
    c28e:	4c9d      	ldr	r4, [pc, #628]	; (c504 <POINTonE2_add_affine+0x2f8>)
    c290:	f8df 926c 	ldr.w	r9, [pc, #620]	; c500 <POINTonE2_add_affine+0x2f4>
    c294:	f8cd 9000 	str.w	r9, [sp]
    c298:	4623      	mov	r3, r4
    c29a:	aa64      	add	r2, sp, #400	; 0x190
    c29c:	4631      	mov	r1, r6
    c29e:	a84c      	add	r0, sp, #304	; 0x130
    c2a0:	f7f8 f806 	bl	42b0 <mul_mont_384x>
    c2a4:	260c      	movs	r6, #12
    c2a6:	9600      	str	r6, [sp, #0]
    c2a8:	4623      	mov	r3, r4
    c2aa:	462a      	mov	r2, r5
    c2ac:	a94c      	add	r1, sp, #304	; 0x130
    c2ae:	4608      	mov	r0, r1
    c2b0:	f7f4 f98e 	bl	5d0 <sub_mod_n>
    c2b4:	9600      	str	r6, [sp, #0]
    c2b6:	4623      	mov	r3, r4
    c2b8:	f105 0230 	add.w	r2, r5, #48	; 0x30
    c2bc:	a958      	add	r1, sp, #352	; 0x160
    c2be:	4608      	mov	r0, r1
    c2c0:	f7f4 f986 	bl	5d0 <sub_mod_n>
    c2c4:	464b      	mov	r3, r9
    c2c6:	4622      	mov	r2, r4
    c2c8:	a94c      	add	r1, sp, #304	; 0x130
    c2ca:	a834      	add	r0, sp, #208	; 0xd0
    c2cc:	f7fb fa7e 	bl	77cc <sqr_mont_384x>
    c2d0:	9600      	str	r6, [sp, #0]
    c2d2:	4623      	mov	r3, r4
    c2d4:	aa34      	add	r2, sp, #208	; 0xd0
    c2d6:	4611      	mov	r1, r2
    c2d8:	a81c      	add	r0, sp, #112	; 0x70
    c2da:	f7f4 fccf 	bl	c7c <add_mod_n>
    c2de:	9600      	str	r6, [sp, #0]
    c2e0:	4623      	mov	r3, r4
    c2e2:	aa40      	add	r2, sp, #256	; 0x100
    c2e4:	4611      	mov	r1, r2
    c2e6:	a828      	add	r0, sp, #160	; 0xa0
    c2e8:	f7f4 fcc8 	bl	c7c <add_mod_n>
    c2ec:	9600      	str	r6, [sp, #0]
    c2ee:	4623      	mov	r3, r4
    c2f0:	aa1c      	add	r2, sp, #112	; 0x70
    c2f2:	4611      	mov	r1, r2
    c2f4:	4610      	mov	r0, r2
    c2f6:	f7f4 fcc1 	bl	c7c <add_mod_n>
    c2fa:	9600      	str	r6, [sp, #0]
    c2fc:	4623      	mov	r3, r4
    c2fe:	aa28      	add	r2, sp, #160	; 0xa0
    c300:	4611      	mov	r1, r2
    c302:	4610      	mov	r0, r2
    c304:	f7f4 fcba 	bl	c7c <add_mod_n>
    c308:	f8cd 9000 	str.w	r9, [sp]
    c30c:	4623      	mov	r3, r4
    c30e:	aa1c      	add	r2, sp, #112	; 0x70
    c310:	4629      	mov	r1, r5
    c312:	a894      	add	r0, sp, #592	; 0x250
    c314:	f7f7 ffcc 	bl	42b0 <mul_mont_384x>
    c318:	f8cd 9000 	str.w	r9, [sp]
    c31c:	4623      	mov	r3, r4
    c31e:	aa1c      	add	r2, sp, #112	; 0x70
    c320:	a94c      	add	r1, sp, #304	; 0x130
    c322:	a804      	add	r0, sp, #16
    c324:	f7f7 ffc4 	bl	42b0 <mul_mont_384x>
    c328:	f105 0a60 	add.w	sl, r5, #96	; 0x60
    c32c:	f8cd 9000 	str.w	r9, [sp]
    c330:	4623      	mov	r3, r4
    c332:	4652      	mov	r2, sl
    c334:	a904      	add	r1, sp, #16
    c336:	a81c      	add	r0, sp, #112	; 0x70
    c338:	f7f7 ffba 	bl	42b0 <mul_mont_384x>
    c33c:	9600      	str	r6, [sp, #0]
    c33e:	4623      	mov	r3, r4
    c340:	4652      	mov	r2, sl
    c342:	a9ac      	add	r1, sp, #688	; 0x2b0
    c344:	4608      	mov	r0, r1
    c346:	f7f4 f943 	bl	5d0 <sub_mod_n>
    c34a:	9600      	str	r6, [sp, #0]
    c34c:	4623      	mov	r3, r4
    c34e:	f105 0290 	add.w	r2, r5, #144	; 0x90
    c352:	a9b8      	add	r1, sp, #736	; 0x2e0
    c354:	4608      	mov	r0, r1
    c356:	f7f4 f93b 	bl	5d0 <sub_mod_n>
    c35a:	9600      	str	r6, [sp, #0]
    c35c:	4623      	mov	r3, r4
    c35e:	aaac      	add	r2, sp, #688	; 0x2b0
    c360:	4611      	mov	r1, r2
    c362:	4610      	mov	r0, r2
    c364:	f7f4 fc8a 	bl	c7c <add_mod_n>
    c368:	9600      	str	r6, [sp, #0]
    c36a:	4623      	mov	r3, r4
    c36c:	aab8      	add	r2, sp, #736	; 0x2e0
    c36e:	4611      	mov	r1, r2
    c370:	4610      	mov	r0, r2
    c372:	f7f4 fc83 	bl	c7c <add_mod_n>
    c376:	464b      	mov	r3, r9
    c378:	4622      	mov	r2, r4
    c37a:	a9ac      	add	r1, sp, #688	; 0x2b0
    c37c:	a87c      	add	r0, sp, #496	; 0x1f0
    c37e:	f7fb fa25 	bl	77cc <sqr_mont_384x>
    c382:	9600      	str	r6, [sp, #0]
    c384:	4623      	mov	r3, r4
    c386:	aa04      	add	r2, sp, #16
    c388:	a97c      	add	r1, sp, #496	; 0x1f0
    c38a:	4608      	mov	r0, r1
    c38c:	f7f4 f920 	bl	5d0 <sub_mod_n>
    c390:	9600      	str	r6, [sp, #0]
    c392:	4623      	mov	r3, r4
    c394:	aa10      	add	r2, sp, #64	; 0x40
    c396:	a988      	add	r1, sp, #544	; 0x220
    c398:	4608      	mov	r0, r1
    c39a:	f7f4 f919 	bl	5d0 <sub_mod_n>
    c39e:	9600      	str	r6, [sp, #0]
    c3a0:	4623      	mov	r3, r4
    c3a2:	aa94      	add	r2, sp, #592	; 0x250
    c3a4:	a97c      	add	r1, sp, #496	; 0x1f0
    c3a6:	4608      	mov	r0, r1
    c3a8:	f7f4 f912 	bl	5d0 <sub_mod_n>
    c3ac:	9600      	str	r6, [sp, #0]
    c3ae:	4623      	mov	r3, r4
    c3b0:	aaa0      	add	r2, sp, #640	; 0x280
    c3b2:	a988      	add	r1, sp, #544	; 0x220
    c3b4:	4608      	mov	r0, r1
    c3b6:	f7f4 f90b 	bl	5d0 <sub_mod_n>
    c3ba:	9600      	str	r6, [sp, #0]
    c3bc:	4623      	mov	r3, r4
    c3be:	aa94      	add	r2, sp, #592	; 0x250
    c3c0:	a97c      	add	r1, sp, #496	; 0x1f0
    c3c2:	4608      	mov	r0, r1
    c3c4:	f7f4 f904 	bl	5d0 <sub_mod_n>
    c3c8:	9600      	str	r6, [sp, #0]
    c3ca:	4623      	mov	r3, r4
    c3cc:	aaa0      	add	r2, sp, #640	; 0x280
    c3ce:	a988      	add	r1, sp, #544	; 0x220
    c3d0:	4608      	mov	r0, r1
    c3d2:	f7f4 f8fd 	bl	5d0 <sub_mod_n>
    c3d6:	9600      	str	r6, [sp, #0]
    c3d8:	4623      	mov	r3, r4
    c3da:	aa7c      	add	r2, sp, #496	; 0x1f0
    c3dc:	a994      	add	r1, sp, #592	; 0x250
    c3de:	4608      	mov	r0, r1
    c3e0:	f7f4 f8f6 	bl	5d0 <sub_mod_n>
    c3e4:	9600      	str	r6, [sp, #0]
    c3e6:	4623      	mov	r3, r4
    c3e8:	aa88      	add	r2, sp, #544	; 0x220
    c3ea:	a9a0      	add	r1, sp, #640	; 0x280
    c3ec:	4608      	mov	r0, r1
    c3ee:	f7f4 f8ef 	bl	5d0 <sub_mod_n>
    c3f2:	f8cd 9000 	str.w	r9, [sp]
    c3f6:	4623      	mov	r3, r4
    c3f8:	aaac      	add	r2, sp, #688	; 0x2b0
    c3fa:	a994      	add	r1, sp, #592	; 0x250
    c3fc:	4608      	mov	r0, r1
    c3fe:	f7f7 ff57 	bl	42b0 <mul_mont_384x>
    c402:	9600      	str	r6, [sp, #0]
    c404:	4623      	mov	r3, r4
    c406:	aa1c      	add	r2, sp, #112	; 0x70
    c408:	a994      	add	r1, sp, #592	; 0x250
    c40a:	4608      	mov	r0, r1
    c40c:	f7f4 f8e0 	bl	5d0 <sub_mod_n>
    c410:	9600      	str	r6, [sp, #0]
    c412:	4623      	mov	r3, r4
    c414:	aa28      	add	r2, sp, #160	; 0xa0
    c416:	a9a0      	add	r1, sp, #640	; 0x280
    c418:	4608      	mov	r0, r1
    c41a:	f7f4 f8d9 	bl	5d0 <sub_mod_n>
    c41e:	9600      	str	r6, [sp, #0]
    c420:	4623      	mov	r3, r4
    c422:	aa1c      	add	r2, sp, #112	; 0x70
    c424:	a994      	add	r1, sp, #592	; 0x250
    c426:	4608      	mov	r0, r1
    c428:	f7f4 f8d2 	bl	5d0 <sub_mod_n>
    c42c:	9600      	str	r6, [sp, #0]
    c42e:	4623      	mov	r3, r4
    c430:	aa28      	add	r2, sp, #160	; 0xa0
    c432:	a9a0      	add	r1, sp, #640	; 0x280
    c434:	4608      	mov	r0, r1
    c436:	f7f4 f8cb 	bl	5d0 <sub_mod_n>
    c43a:	9600      	str	r6, [sp, #0]
    c43c:	4623      	mov	r3, r4
    c43e:	aa4c      	add	r2, sp, #304	; 0x130
    c440:	4659      	mov	r1, fp
    c442:	a8ac      	add	r0, sp, #688	; 0x2b0
    c444:	f7f4 fc1a 	bl	c7c <add_mod_n>
    c448:	9600      	str	r6, [sp, #0]
    c44a:	4623      	mov	r3, r4
    c44c:	aa58      	add	r2, sp, #352	; 0x160
    c44e:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
    c452:	a8b8      	add	r0, sp, #736	; 0x2e0
    c454:	f7f4 fc12 	bl	c7c <add_mod_n>
    c458:	464b      	mov	r3, r9
    c45a:	4622      	mov	r2, r4
    c45c:	a9ac      	add	r1, sp, #688	; 0x2b0
    c45e:	4608      	mov	r0, r1
    c460:	f7fb f9b4 	bl	77cc <sqr_mont_384x>
    c464:	9600      	str	r6, [sp, #0]
    c466:	4623      	mov	r3, r4
    c468:	aa64      	add	r2, sp, #400	; 0x190
    c46a:	a9ac      	add	r1, sp, #688	; 0x2b0
    c46c:	4608      	mov	r0, r1
    c46e:	f7f4 f8af 	bl	5d0 <sub_mod_n>
    c472:	9600      	str	r6, [sp, #0]
    c474:	4623      	mov	r3, r4
    c476:	aa70      	add	r2, sp, #448	; 0x1c0
    c478:	a9b8      	add	r1, sp, #736	; 0x2e0
    c47a:	4608      	mov	r0, r1
    c47c:	f7f4 f8a8 	bl	5d0 <sub_mod_n>
    c480:	9600      	str	r6, [sp, #0]
    c482:	4623      	mov	r3, r4
    c484:	aa34      	add	r2, sp, #208	; 0xd0
    c486:	a9ac      	add	r1, sp, #688	; 0x2b0
    c488:	4608      	mov	r0, r1
    c48a:	f7f4 f8a1 	bl	5d0 <sub_mod_n>
    c48e:	9600      	str	r6, [sp, #0]
    c490:	4623      	mov	r3, r4
    c492:	aa40      	add	r2, sp, #256	; 0x100
    c494:	a9b8      	add	r1, sp, #736	; 0x2e0
    c496:	4608      	mov	r0, r1
    c498:	f7f4 f89a 	bl	5d0 <sub_mod_n>
    c49c:	427f      	negs	r7, r7
    c49e:	f104 018c 	add.w	r1, r4, #140	; 0x8c
    c4a2:	aaab      	add	r2, sp, #684	; 0x2ac
    c4a4:	34ec      	adds	r4, #236	; 0xec
    c4a6:	f852 0f04 	ldr.w	r0, [r2, #4]!
    c4aa:	f851 3f04 	ldr.w	r3, [r1, #4]!
    c4ae:	4043      	eors	r3, r0
    c4b0:	403b      	ands	r3, r7
    c4b2:	4043      	eors	r3, r0
    c4b4:	6013      	str	r3, [r2, #0]
    c4b6:	428c      	cmp	r4, r1
    c4b8:	d1f5      	bne.n	c4a6 <POINTonE2_add_affine+0x29a>
    c4ba:	aa7c      	add	r2, sp, #496	; 0x1f0
    c4bc:	acac      	add	r4, sp, #688	; 0x2b0
    c4be:	4611      	mov	r1, r2
    c4c0:	6808      	ldr	r0, [r1, #0]
    c4c2:	f858 3f04 	ldr.w	r3, [r8, #4]!
    c4c6:	4043      	eors	r3, r0
    c4c8:	403b      	ands	r3, r7
    c4ca:	4043      	eors	r3, r0
    c4cc:	f841 3b04 	str.w	r3, [r1], #4
    c4d0:	428c      	cmp	r4, r1
    c4d2:	d1f5      	bne.n	c4c0 <POINTonE2_add_affine+0x2b4>
    c4d4:	9b02      	ldr	r3, [sp, #8]
    c4d6:	425c      	negs	r4, r3
    c4d8:	3d04      	subs	r5, #4
    c4da:	9b03      	ldr	r3, [sp, #12]
    c4dc:	1f18      	subs	r0, r3, #4
    c4de:	f502 7690 	add.w	r6, r2, #288	; 0x120
    c4e2:	f852 1b04 	ldr.w	r1, [r2], #4
    c4e6:	f855 3f04 	ldr.w	r3, [r5, #4]!
    c4ea:	404b      	eors	r3, r1
    c4ec:	4023      	ands	r3, r4
    c4ee:	404b      	eors	r3, r1
    c4f0:	f840 3f04 	str.w	r3, [r0, #4]!
    c4f4:	4296      	cmp	r6, r2
    c4f6:	d1f4      	bne.n	c4e2 <POINTonE2_add_affine+0x2d6>
    c4f8:	f50d 7d45 	add.w	sp, sp, #788	; 0x314
    c4fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c500:	fffcfffd 	.word	0xfffcfffd
    c504:	00015a08 	.word	0x00015a08

0000c508 <blst_fr_add>:
    c508:	b500      	push	{lr}
    c50a:	b083      	sub	sp, #12
    c50c:	2308      	movs	r3, #8
    c50e:	9300      	str	r3, [sp, #0]
    c510:	4b02      	ldr	r3, [pc, #8]	; (c51c <blst_fr_add+0x14>)
    c512:	f7f4 fbb3 	bl	c7c <add_mod_n>
    c516:	b003      	add	sp, #12
    c518:	f85d fb04 	ldr.w	pc, [sp], #4
    c51c:	00016dc8 	.word	0x00016dc8

0000c520 <blst_fr_sub>:
    c520:	b500      	push	{lr}
    c522:	b083      	sub	sp, #12
    c524:	2308      	movs	r3, #8
    c526:	9300      	str	r3, [sp, #0]
    c528:	4b02      	ldr	r3, [pc, #8]	; (c534 <blst_fr_sub+0x14>)
    c52a:	f7f4 f851 	bl	5d0 <sub_mod_n>
    c52e:	b003      	add	sp, #12
    c530:	f85d fb04 	ldr.w	pc, [sp], #4
    c534:	00016dc8 	.word	0x00016dc8

0000c538 <blst_fr_mul_by_3>:
    c538:	b508      	push	{r3, lr}
    c53a:	2308      	movs	r3, #8
    c53c:	4a01      	ldr	r2, [pc, #4]	; (c544 <blst_fr_mul_by_3+0xc>)
    c53e:	f7f4 fc25 	bl	d8c <mul_by_3_mod_n>
    c542:	bd08      	pop	{r3, pc}
    c544:	00016dc8 	.word	0x00016dc8

0000c548 <blst_fr_lshift>:
    c548:	b500      	push	{lr}
    c54a:	b083      	sub	sp, #12
    c54c:	2308      	movs	r3, #8
    c54e:	9300      	str	r3, [sp, #0]
    c550:	4b02      	ldr	r3, [pc, #8]	; (c55c <blst_fr_lshift+0x14>)
    c552:	f7f4 fcbb 	bl	ecc <lshift_mod_n>
    c556:	b003      	add	sp, #12
    c558:	f85d fb04 	ldr.w	pc, [sp], #4
    c55c:	00016dc8 	.word	0x00016dc8

0000c560 <blst_fr_rshift>:
    c560:	b500      	push	{lr}
    c562:	b083      	sub	sp, #12
    c564:	2308      	movs	r3, #8
    c566:	9300      	str	r3, [sp, #0]
    c568:	4b02      	ldr	r3, [pc, #8]	; (c574 <blst_fr_rshift+0x14>)
    c56a:	f7f4 f899 	bl	6a0 <rshift_mod_n>
    c56e:	b003      	add	sp, #12
    c570:	f85d fb04 	ldr.w	pc, [sp], #4
    c574:	00016dc8 	.word	0x00016dc8

0000c578 <blst_fr_mul>:
    c578:	b500      	push	{lr}
    c57a:	b083      	sub	sp, #12
    c57c:	2308      	movs	r3, #8
    c57e:	9301      	str	r3, [sp, #4]
    c580:	f04f 33ff 	mov.w	r3, #4294967295
    c584:	9300      	str	r3, [sp, #0]
    c586:	4b03      	ldr	r3, [pc, #12]	; (c594 <blst_fr_mul+0x1c>)
    c588:	f7f4 f9d0 	bl	92c <mul_mont_n>
    c58c:	b003      	add	sp, #12
    c58e:	f85d fb04 	ldr.w	pc, [sp], #4
    c592:	bf00      	nop
    c594:	00016dc8 	.word	0x00016dc8

0000c598 <blst_fr_sqr>:
    c598:	b500      	push	{lr}
    c59a:	b083      	sub	sp, #12
    c59c:	460a      	mov	r2, r1
    c59e:	2308      	movs	r3, #8
    c5a0:	9301      	str	r3, [sp, #4]
    c5a2:	f04f 33ff 	mov.w	r3, #4294967295
    c5a6:	9300      	str	r3, [sp, #0]
    c5a8:	4b02      	ldr	r3, [pc, #8]	; (c5b4 <blst_fr_sqr+0x1c>)
    c5aa:	f7f4 f9bf 	bl	92c <mul_mont_n>
    c5ae:	b003      	add	sp, #12
    c5b0:	f85d fb04 	ldr.w	pc, [sp], #4
    c5b4:	00016dc8 	.word	0x00016dc8

0000c5b8 <blst_fr_cneg>:
    c5b8:	b500      	push	{lr}
    c5ba:	b083      	sub	sp, #12
    c5bc:	1e53      	subs	r3, r2, #1
    c5be:	ea23 0202 	bic.w	r2, r3, r2
    c5c2:	2308      	movs	r3, #8
    c5c4:	9300      	str	r3, [sp, #0]
    c5c6:	4b04      	ldr	r3, [pc, #16]	; (c5d8 <blst_fr_cneg+0x20>)
    c5c8:	43d2      	mvns	r2, r2
    c5ca:	0fd2      	lsrs	r2, r2, #31
    c5cc:	f7f5 f9ea 	bl	19a4 <cneg_mod_n>
    c5d0:	b003      	add	sp, #12
    c5d2:	f85d fb04 	ldr.w	pc, [sp], #4
    c5d6:	bf00      	nop
    c5d8:	00016dc8 	.word	0x00016dc8

0000c5dc <blst_fr_to>:
    c5dc:	b500      	push	{lr}
    c5de:	b083      	sub	sp, #12
    c5e0:	4a07      	ldr	r2, [pc, #28]	; (c600 <blst_fr_to+0x24>)
    c5e2:	2308      	movs	r3, #8
    c5e4:	9301      	str	r3, [sp, #4]
    c5e6:	f04f 33ff 	mov.w	r3, #4294967295
    c5ea:	9300      	str	r3, [sp, #0]
    c5ec:	f502 7332 	add.w	r3, r2, #712	; 0x2c8
    c5f0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
    c5f4:	f7f4 f99a 	bl	92c <mul_mont_n>
    c5f8:	b003      	add	sp, #12
    c5fa:	f85d fb04 	ldr.w	pc, [sp], #4
    c5fe:	bf00      	nop
    c600:	00016b00 	.word	0x00016b00

0000c604 <blst_fr_from>:
    c604:	b500      	push	{lr}
    c606:	b083      	sub	sp, #12
    c608:	2308      	movs	r3, #8
    c60a:	9300      	str	r3, [sp, #0]
    c60c:	f04f 33ff 	mov.w	r3, #4294967295
    c610:	4a02      	ldr	r2, [pc, #8]	; (c61c <blst_fr_from+0x18>)
    c612:	f7f4 fcbd 	bl	f90 <from_mont_n>
    c616:	b003      	add	sp, #12
    c618:	f85d fb04 	ldr.w	pc, [sp], #4
    c61c:	00016dc8 	.word	0x00016dc8

0000c620 <blst_fr_eucl_inverse>:
    c620:	b500      	push	{lr}
    c622:	b083      	sub	sp, #12
    c624:	4a05      	ldr	r2, [pc, #20]	; (c63c <blst_fr_eucl_inverse+0x1c>)
    c626:	2308      	movs	r3, #8
    c628:	9300      	str	r3, [sp, #0]
    c62a:	f502 6388 	add.w	r3, r2, #1088	; 0x440
    c62e:	f502 7232 	add.w	r2, r2, #712	; 0x2c8
    c632:	f7f6 f99b 	bl	296c <eucl_inverse_mod_n>
    c636:	b003      	add	sp, #12
    c638:	f85d fb04 	ldr.w	pc, [sp], #4
    c63c:	00016b00 	.word	0x00016b00

0000c640 <blst_fp_add>:
    c640:	b500      	push	{lr}
    c642:	b083      	sub	sp, #12
    c644:	230c      	movs	r3, #12
    c646:	9300      	str	r3, [sp, #0]
    c648:	4b02      	ldr	r3, [pc, #8]	; (c654 <blst_fp_add+0x14>)
    c64a:	f7f4 fb17 	bl	c7c <add_mod_n>
    c64e:	b003      	add	sp, #12
    c650:	f85d fb04 	ldr.w	pc, [sp], #4
    c654:	00015a08 	.word	0x00015a08

0000c658 <blst_fp_sub>:
    c658:	b500      	push	{lr}
    c65a:	b083      	sub	sp, #12
    c65c:	230c      	movs	r3, #12
    c65e:	9300      	str	r3, [sp, #0]
    c660:	4b02      	ldr	r3, [pc, #8]	; (c66c <blst_fp_sub+0x14>)
    c662:	f7f3 ffb5 	bl	5d0 <sub_mod_n>
    c666:	b003      	add	sp, #12
    c668:	f85d fb04 	ldr.w	pc, [sp], #4
    c66c:	00015a08 	.word	0x00015a08

0000c670 <blst_fp_mul_by_3>:
    c670:	b508      	push	{r3, lr}
    c672:	230c      	movs	r3, #12
    c674:	4a01      	ldr	r2, [pc, #4]	; (c67c <blst_fp_mul_by_3+0xc>)
    c676:	f7f4 fb89 	bl	d8c <mul_by_3_mod_n>
    c67a:	bd08      	pop	{r3, pc}
    c67c:	00015a08 	.word	0x00015a08

0000c680 <blst_fp_mul_by_8>:
    c680:	b500      	push	{lr}
    c682:	b083      	sub	sp, #12
    c684:	230c      	movs	r3, #12
    c686:	9300      	str	r3, [sp, #0]
    c688:	4b03      	ldr	r3, [pc, #12]	; (c698 <blst_fp_mul_by_8+0x18>)
    c68a:	2203      	movs	r2, #3
    c68c:	f7f4 fc1e 	bl	ecc <lshift_mod_n>
    c690:	b003      	add	sp, #12
    c692:	f85d fb04 	ldr.w	pc, [sp], #4
    c696:	bf00      	nop
    c698:	00015a08 	.word	0x00015a08

0000c69c <blst_fp_lshift>:
    c69c:	b500      	push	{lr}
    c69e:	b083      	sub	sp, #12
    c6a0:	230c      	movs	r3, #12
    c6a2:	9300      	str	r3, [sp, #0]
    c6a4:	4b02      	ldr	r3, [pc, #8]	; (c6b0 <blst_fp_lshift+0x14>)
    c6a6:	f7f4 fc11 	bl	ecc <lshift_mod_n>
    c6aa:	b003      	add	sp, #12
    c6ac:	f85d fb04 	ldr.w	pc, [sp], #4
    c6b0:	00015a08 	.word	0x00015a08

0000c6b4 <blst_fp_mul>:
    c6b4:	b500      	push	{lr}
    c6b6:	b083      	sub	sp, #12
    c6b8:	230c      	movs	r3, #12
    c6ba:	9301      	str	r3, [sp, #4]
    c6bc:	4b03      	ldr	r3, [pc, #12]	; (c6cc <blst_fp_mul+0x18>)
    c6be:	9300      	str	r3, [sp, #0]
    c6c0:	4b03      	ldr	r3, [pc, #12]	; (c6d0 <blst_fp_mul+0x1c>)
    c6c2:	f7f4 f933 	bl	92c <mul_mont_n>
    c6c6:	b003      	add	sp, #12
    c6c8:	f85d fb04 	ldr.w	pc, [sp], #4
    c6cc:	fffcfffd 	.word	0xfffcfffd
    c6d0:	00015a08 	.word	0x00015a08

0000c6d4 <blst_fp_sqr>:
    c6d4:	b500      	push	{lr}
    c6d6:	b083      	sub	sp, #12
    c6d8:	460a      	mov	r2, r1
    c6da:	230c      	movs	r3, #12
    c6dc:	9301      	str	r3, [sp, #4]
    c6de:	4b04      	ldr	r3, [pc, #16]	; (c6f0 <blst_fp_sqr+0x1c>)
    c6e0:	9300      	str	r3, [sp, #0]
    c6e2:	4b04      	ldr	r3, [pc, #16]	; (c6f4 <blst_fp_sqr+0x20>)
    c6e4:	f7f4 f922 	bl	92c <mul_mont_n>
    c6e8:	b003      	add	sp, #12
    c6ea:	f85d fb04 	ldr.w	pc, [sp], #4
    c6ee:	bf00      	nop
    c6f0:	fffcfffd 	.word	0xfffcfffd
    c6f4:	00015a08 	.word	0x00015a08

0000c6f8 <blst_fp_cneg>:
    c6f8:	b500      	push	{lr}
    c6fa:	b083      	sub	sp, #12
    c6fc:	1e53      	subs	r3, r2, #1
    c6fe:	ea23 0202 	bic.w	r2, r3, r2
    c702:	230c      	movs	r3, #12
    c704:	9300      	str	r3, [sp, #0]
    c706:	4b04      	ldr	r3, [pc, #16]	; (c718 <blst_fp_cneg+0x20>)
    c708:	43d2      	mvns	r2, r2
    c70a:	0fd2      	lsrs	r2, r2, #31
    c70c:	f7f5 f94a 	bl	19a4 <cneg_mod_n>
    c710:	b003      	add	sp, #12
    c712:	f85d fb04 	ldr.w	pc, [sp], #4
    c716:	bf00      	nop
    c718:	00015a08 	.word	0x00015a08

0000c71c <blst_fp_to>:
    c71c:	b500      	push	{lr}
    c71e:	b083      	sub	sp, #12
    c720:	4b05      	ldr	r3, [pc, #20]	; (c738 <blst_fp_to+0x1c>)
    c722:	220c      	movs	r2, #12
    c724:	9201      	str	r2, [sp, #4]
    c726:	4a05      	ldr	r2, [pc, #20]	; (c73c <blst_fp_to+0x20>)
    c728:	9200      	str	r2, [sp, #0]
    c72a:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
    c72e:	f7f4 f8fd 	bl	92c <mul_mont_n>
    c732:	b003      	add	sp, #12
    c734:	f85d fb04 	ldr.w	pc, [sp], #4
    c738:	00015a08 	.word	0x00015a08
    c73c:	fffcfffd 	.word	0xfffcfffd

0000c740 <blst_fp_from>:
    c740:	b500      	push	{lr}
    c742:	b083      	sub	sp, #12
    c744:	230c      	movs	r3, #12
    c746:	9300      	str	r3, [sp, #0]
    c748:	4b03      	ldr	r3, [pc, #12]	; (c758 <blst_fp_from+0x18>)
    c74a:	4a04      	ldr	r2, [pc, #16]	; (c75c <blst_fp_from+0x1c>)
    c74c:	f7f4 fc20 	bl	f90 <from_mont_n>
    c750:	b003      	add	sp, #12
    c752:	f85d fb04 	ldr.w	pc, [sp], #4
    c756:	bf00      	nop
    c758:	fffcfffd 	.word	0xfffcfffd
    c75c:	00015a08 	.word	0x00015a08

0000c760 <blst_fp_from_uint32>:
    c760:	b500      	push	{lr}
    c762:	b083      	sub	sp, #12
    c764:	4b05      	ldr	r3, [pc, #20]	; (c77c <blst_fp_from_uint32+0x1c>)
    c766:	220c      	movs	r2, #12
    c768:	9201      	str	r2, [sp, #4]
    c76a:	4a05      	ldr	r2, [pc, #20]	; (c780 <blst_fp_from_uint32+0x20>)
    c76c:	9200      	str	r2, [sp, #0]
    c76e:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
    c772:	f7f4 f8db 	bl	92c <mul_mont_n>
    c776:	b003      	add	sp, #12
    c778:	f85d fb04 	ldr.w	pc, [sp], #4
    c77c:	00015a08 	.word	0x00015a08
    c780:	fffcfffd 	.word	0xfffcfffd

0000c784 <blst_uint32_from_fp>:
    c784:	b500      	push	{lr}
    c786:	b083      	sub	sp, #12
    c788:	230c      	movs	r3, #12
    c78a:	9300      	str	r3, [sp, #0]
    c78c:	4b03      	ldr	r3, [pc, #12]	; (c79c <blst_uint32_from_fp+0x18>)
    c78e:	4a04      	ldr	r2, [pc, #16]	; (c7a0 <blst_uint32_from_fp+0x1c>)
    c790:	f7f4 fbfe 	bl	f90 <from_mont_n>
    c794:	b003      	add	sp, #12
    c796:	f85d fb04 	ldr.w	pc, [sp], #4
    c79a:	bf00      	nop
    c79c:	fffcfffd 	.word	0xfffcfffd
    c7a0:	00015a08 	.word	0x00015a08

0000c7a4 <blst_fp_from_uint64>:
    c7a4:	b500      	push	{lr}
    c7a6:	b083      	sub	sp, #12
    c7a8:	4b05      	ldr	r3, [pc, #20]	; (c7c0 <blst_fp_from_uint64+0x1c>)
    c7aa:	220c      	movs	r2, #12
    c7ac:	9201      	str	r2, [sp, #4]
    c7ae:	4a05      	ldr	r2, [pc, #20]	; (c7c4 <blst_fp_from_uint64+0x20>)
    c7b0:	9200      	str	r2, [sp, #0]
    c7b2:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
    c7b6:	f7f4 f8b9 	bl	92c <mul_mont_n>
    c7ba:	b003      	add	sp, #12
    c7bc:	f85d fb04 	ldr.w	pc, [sp], #4
    c7c0:	00015a08 	.word	0x00015a08
    c7c4:	fffcfffd 	.word	0xfffcfffd

0000c7c8 <blst_uint64_from_fp>:
    c7c8:	b500      	push	{lr}
    c7ca:	b083      	sub	sp, #12
    c7cc:	230c      	movs	r3, #12
    c7ce:	9300      	str	r3, [sp, #0]
    c7d0:	4b03      	ldr	r3, [pc, #12]	; (c7e0 <blst_uint64_from_fp+0x18>)
    c7d2:	4a04      	ldr	r2, [pc, #16]	; (c7e4 <blst_uint64_from_fp+0x1c>)
    c7d4:	f7f4 fbdc 	bl	f90 <from_mont_n>
    c7d8:	b003      	add	sp, #12
    c7da:	f85d fb04 	ldr.w	pc, [sp], #4
    c7de:	bf00      	nop
    c7e0:	fffcfffd 	.word	0xfffcfffd
    c7e4:	00015a08 	.word	0x00015a08

0000c7e8 <blst_fp_from_bendian>:
    c7e8:	b510      	push	{r4, lr}
    c7ea:	b08e      	sub	sp, #56	; 0x38
    c7ec:	f101 0e30 	add.w	lr, r1, #48	; 0x30
    c7f0:	460a      	mov	r2, r1
    c7f2:	2400      	movs	r4, #0
    c7f4:	f101 0c2f 	add.w	ip, r1, #47	; 0x2f
    c7f8:	ebac 0302 	sub.w	r3, ip, r2
    c7fc:	f812 1b01 	ldrb.w	r1, [r2], #1
    c800:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
    c804:	f023 0303 	bic.w	r3, r3, #3
    c808:	a90e      	add	r1, sp, #56	; 0x38
    c80a:	440b      	add	r3, r1
    c80c:	f843 4c30 	str.w	r4, [r3, #-48]
    c810:	4572      	cmp	r2, lr
    c812:	d1f1      	bne.n	c7f8 <blst_fp_from_bendian+0x10>
    c814:	4b05      	ldr	r3, [pc, #20]	; (c82c <blst_fp_from_bendian+0x44>)
    c816:	220c      	movs	r2, #12
    c818:	9201      	str	r2, [sp, #4]
    c81a:	4a05      	ldr	r2, [pc, #20]	; (c830 <blst_fp_from_bendian+0x48>)
    c81c:	9200      	str	r2, [sp, #0]
    c81e:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
    c822:	a902      	add	r1, sp, #8
    c824:	f7f4 f882 	bl	92c <mul_mont_n>
    c828:	b00e      	add	sp, #56	; 0x38
    c82a:	bd10      	pop	{r4, pc}
    c82c:	00015a08 	.word	0x00015a08
    c830:	fffcfffd 	.word	0xfffcfffd

0000c834 <blst_bendian_from_fp>:
    c834:	b510      	push	{r4, lr}
    c836:	b08e      	sub	sp, #56	; 0x38
    c838:	4604      	mov	r4, r0
    c83a:	230c      	movs	r3, #12
    c83c:	9300      	str	r3, [sp, #0]
    c83e:	4b0e      	ldr	r3, [pc, #56]	; (c878 <blst_bendian_from_fp+0x44>)
    c840:	4a0e      	ldr	r2, [pc, #56]	; (c87c <blst_bendian_from_fp+0x48>)
    c842:	a802      	add	r0, sp, #8
    c844:	f7f4 fba4 	bl	f90 <from_mont_n>
    c848:	f104 0c30 	add.w	ip, r4, #48	; 0x30
    c84c:	4622      	mov	r2, r4
    c84e:	f104 002f 	add.w	r0, r4, #47	; 0x2f
    c852:	1a83      	subs	r3, r0, r2
    c854:	f023 0103 	bic.w	r1, r3, #3
    c858:	ac0e      	add	r4, sp, #56	; 0x38
    c85a:	4421      	add	r1, r4
    c85c:	f003 0303 	and.w	r3, r3, #3
    c860:	00db      	lsls	r3, r3, #3
    c862:	f851 1c30 	ldr.w	r1, [r1, #-48]
    c866:	fa21 f303 	lsr.w	r3, r1, r3
    c86a:	f802 3b01 	strb.w	r3, [r2], #1
    c86e:	4562      	cmp	r2, ip
    c870:	d1ef      	bne.n	c852 <blst_bendian_from_fp+0x1e>
    c872:	b00e      	add	sp, #56	; 0x38
    c874:	bd10      	pop	{r4, pc}
    c876:	bf00      	nop
    c878:	fffcfffd 	.word	0xfffcfffd
    c87c:	00015a08 	.word	0x00015a08

0000c880 <blst_fp_from_lendian>:
    c880:	b510      	push	{r4, lr}
    c882:	b08e      	sub	sp, #56	; 0x38
    c884:	f101 0230 	add.w	r2, r1, #48	; 0x30
    c888:	2400      	movs	r4, #0
    c88a:	ea6f 0e01 	mvn.w	lr, r1
    c88e:	eb0e 0302 	add.w	r3, lr, r2
    c892:	f812 cd01 	ldrb.w	ip, [r2, #-1]!
    c896:	ea4c 2404 	orr.w	r4, ip, r4, lsl #8
    c89a:	f023 0303 	bic.w	r3, r3, #3
    c89e:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
    c8a2:	4463      	add	r3, ip
    c8a4:	f843 4c30 	str.w	r4, [r3, #-48]
    c8a8:	428a      	cmp	r2, r1
    c8aa:	d1f0      	bne.n	c88e <blst_fp_from_lendian+0xe>
    c8ac:	4b05      	ldr	r3, [pc, #20]	; (c8c4 <blst_fp_from_lendian+0x44>)
    c8ae:	220c      	movs	r2, #12
    c8b0:	9201      	str	r2, [sp, #4]
    c8b2:	4a05      	ldr	r2, [pc, #20]	; (c8c8 <blst_fp_from_lendian+0x48>)
    c8b4:	9200      	str	r2, [sp, #0]
    c8b6:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
    c8ba:	a902      	add	r1, sp, #8
    c8bc:	f7f4 f836 	bl	92c <mul_mont_n>
    c8c0:	b00e      	add	sp, #56	; 0x38
    c8c2:	bd10      	pop	{r4, pc}
    c8c4:	00015a08 	.word	0x00015a08
    c8c8:	fffcfffd 	.word	0xfffcfffd

0000c8cc <blst_lendian_from_fp>:
    c8cc:	b530      	push	{r4, r5, lr}
    c8ce:	b08f      	sub	sp, #60	; 0x3c
    c8d0:	4604      	mov	r4, r0
    c8d2:	ad02      	add	r5, sp, #8
    c8d4:	230c      	movs	r3, #12
    c8d6:	9300      	str	r3, [sp, #0]
    c8d8:	4b0c      	ldr	r3, [pc, #48]	; (c90c <blst_lendian_from_fp+0x40>)
    c8da:	4a0d      	ldr	r2, [pc, #52]	; (c910 <blst_lendian_from_fp+0x44>)
    c8dc:	4628      	mov	r0, r5
    c8de:	f7f4 fb57 	bl	f90 <from_mont_n>
    c8e2:	42ac      	cmp	r4, r5
    c8e4:	d00f      	beq.n	c906 <blst_lendian_from_fp+0x3a>
    c8e6:	4628      	mov	r0, r5
    c8e8:	1d21      	adds	r1, r4, #4
    c8ea:	ac0e      	add	r4, sp, #56	; 0x38
    c8ec:	e002      	b.n	c8f4 <blst_lendian_from_fp+0x28>
    c8ee:	3104      	adds	r1, #4
    c8f0:	42a0      	cmp	r0, r4
    c8f2:	d008      	beq.n	c906 <blst_lendian_from_fp+0x3a>
    c8f4:	1f0a      	subs	r2, r1, #4
    c8f6:	f850 3b04 	ldr.w	r3, [r0], #4
    c8fa:	f802 3b01 	strb.w	r3, [r2], #1
    c8fe:	0a1b      	lsrs	r3, r3, #8
    c900:	428a      	cmp	r2, r1
    c902:	d1fa      	bne.n	c8fa <blst_lendian_from_fp+0x2e>
    c904:	e7f3      	b.n	c8ee <blst_lendian_from_fp+0x22>
    c906:	b00f      	add	sp, #60	; 0x3c
    c908:	bd30      	pop	{r4, r5, pc}
    c90a:	bf00      	nop
    c90c:	fffcfffd 	.word	0xfffcfffd
    c910:	00015a08 	.word	0x00015a08

0000c914 <blst_fp2_add>:
    c914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c918:	b082      	sub	sp, #8
    c91a:	4604      	mov	r4, r0
    c91c:	460d      	mov	r5, r1
    c91e:	4616      	mov	r6, r2
    c920:	4f0a      	ldr	r7, [pc, #40]	; (c94c <blst_fp2_add+0x38>)
    c922:	f04f 080c 	mov.w	r8, #12
    c926:	f8cd 8000 	str.w	r8, [sp]
    c92a:	463b      	mov	r3, r7
    c92c:	f7f4 f9a6 	bl	c7c <add_mod_n>
    c930:	f8cd 8000 	str.w	r8, [sp]
    c934:	463b      	mov	r3, r7
    c936:	f106 0230 	add.w	r2, r6, #48	; 0x30
    c93a:	f105 0130 	add.w	r1, r5, #48	; 0x30
    c93e:	f104 0030 	add.w	r0, r4, #48	; 0x30
    c942:	f7f4 f99b 	bl	c7c <add_mod_n>
    c946:	b002      	add	sp, #8
    c948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c94c:	00015a08 	.word	0x00015a08

0000c950 <blst_fp2_sub>:
    c950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c954:	b082      	sub	sp, #8
    c956:	4604      	mov	r4, r0
    c958:	460d      	mov	r5, r1
    c95a:	4616      	mov	r6, r2
    c95c:	4f0a      	ldr	r7, [pc, #40]	; (c988 <blst_fp2_sub+0x38>)
    c95e:	f04f 080c 	mov.w	r8, #12
    c962:	f8cd 8000 	str.w	r8, [sp]
    c966:	463b      	mov	r3, r7
    c968:	f7f3 fe32 	bl	5d0 <sub_mod_n>
    c96c:	f8cd 8000 	str.w	r8, [sp]
    c970:	463b      	mov	r3, r7
    c972:	f106 0230 	add.w	r2, r6, #48	; 0x30
    c976:	f105 0130 	add.w	r1, r5, #48	; 0x30
    c97a:	f104 0030 	add.w	r0, r4, #48	; 0x30
    c97e:	f7f3 fe27 	bl	5d0 <sub_mod_n>
    c982:	b002      	add	sp, #8
    c984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c988:	00015a08 	.word	0x00015a08

0000c98c <blst_fp2_mul_by_3>:
    c98c:	b570      	push	{r4, r5, r6, lr}
    c98e:	4604      	mov	r4, r0
    c990:	460d      	mov	r5, r1
    c992:	4e07      	ldr	r6, [pc, #28]	; (c9b0 <blst_fp2_mul_by_3+0x24>)
    c994:	230c      	movs	r3, #12
    c996:	4632      	mov	r2, r6
    c998:	f7f4 f9f8 	bl	d8c <mul_by_3_mod_n>
    c99c:	230c      	movs	r3, #12
    c99e:	4632      	mov	r2, r6
    c9a0:	f105 0130 	add.w	r1, r5, #48	; 0x30
    c9a4:	f104 0030 	add.w	r0, r4, #48	; 0x30
    c9a8:	f7f4 f9f0 	bl	d8c <mul_by_3_mod_n>
    c9ac:	bd70      	pop	{r4, r5, r6, pc}
    c9ae:	bf00      	nop
    c9b0:	00015a08 	.word	0x00015a08

0000c9b4 <blst_fp2_mul_by_8>:
    c9b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c9b6:	b083      	sub	sp, #12
    c9b8:	4604      	mov	r4, r0
    c9ba:	460d      	mov	r5, r1
    c9bc:	4e08      	ldr	r6, [pc, #32]	; (c9e0 <blst_fp2_mul_by_8+0x2c>)
    c9be:	270c      	movs	r7, #12
    c9c0:	9700      	str	r7, [sp, #0]
    c9c2:	4633      	mov	r3, r6
    c9c4:	2203      	movs	r2, #3
    c9c6:	f7f4 fa81 	bl	ecc <lshift_mod_n>
    c9ca:	9700      	str	r7, [sp, #0]
    c9cc:	4633      	mov	r3, r6
    c9ce:	2203      	movs	r2, #3
    c9d0:	f105 0130 	add.w	r1, r5, #48	; 0x30
    c9d4:	f104 0030 	add.w	r0, r4, #48	; 0x30
    c9d8:	f7f4 fa78 	bl	ecc <lshift_mod_n>
    c9dc:	b003      	add	sp, #12
    c9de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c9e0:	00015a08 	.word	0x00015a08

0000c9e4 <blst_fp2_lshift>:
    c9e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c9e8:	b082      	sub	sp, #8
    c9ea:	4604      	mov	r4, r0
    c9ec:	460d      	mov	r5, r1
    c9ee:	4616      	mov	r6, r2
    c9f0:	4f0a      	ldr	r7, [pc, #40]	; (ca1c <blst_fp2_lshift+0x38>)
    c9f2:	f04f 080c 	mov.w	r8, #12
    c9f6:	f8cd 8000 	str.w	r8, [sp]
    c9fa:	463b      	mov	r3, r7
    c9fc:	f7f4 fa66 	bl	ecc <lshift_mod_n>
    ca00:	f8cd 8000 	str.w	r8, [sp]
    ca04:	463b      	mov	r3, r7
    ca06:	4632      	mov	r2, r6
    ca08:	f105 0130 	add.w	r1, r5, #48	; 0x30
    ca0c:	f104 0030 	add.w	r0, r4, #48	; 0x30
    ca10:	f7f4 fa5c 	bl	ecc <lshift_mod_n>
    ca14:	b002      	add	sp, #8
    ca16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ca1a:	bf00      	nop
    ca1c:	00015a08 	.word	0x00015a08

0000ca20 <blst_fp2_mul>:
    ca20:	b500      	push	{lr}
    ca22:	b083      	sub	sp, #12
    ca24:	4b03      	ldr	r3, [pc, #12]	; (ca34 <blst_fp2_mul+0x14>)
    ca26:	9300      	str	r3, [sp, #0]
    ca28:	4b03      	ldr	r3, [pc, #12]	; (ca38 <blst_fp2_mul+0x18>)
    ca2a:	f7f7 fc41 	bl	42b0 <mul_mont_384x>
    ca2e:	b003      	add	sp, #12
    ca30:	f85d fb04 	ldr.w	pc, [sp], #4
    ca34:	fffcfffd 	.word	0xfffcfffd
    ca38:	00015a08 	.word	0x00015a08

0000ca3c <blst_fp2_sqr>:
    ca3c:	b508      	push	{r3, lr}
    ca3e:	4b02      	ldr	r3, [pc, #8]	; (ca48 <blst_fp2_sqr+0xc>)
    ca40:	4a02      	ldr	r2, [pc, #8]	; (ca4c <blst_fp2_sqr+0x10>)
    ca42:	f7fa fec3 	bl	77cc <sqr_mont_384x>
    ca46:	bd08      	pop	{r3, pc}
    ca48:	fffcfffd 	.word	0xfffcfffd
    ca4c:	00015a08 	.word	0x00015a08

0000ca50 <blst_fp2_cneg>:
    ca50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ca54:	b082      	sub	sp, #8
    ca56:	4605      	mov	r5, r0
    ca58:	460e      	mov	r6, r1
    ca5a:	1e54      	subs	r4, r2, #1
    ca5c:	ea24 0402 	bic.w	r4, r4, r2
    ca60:	43e4      	mvns	r4, r4
    ca62:	0fe4      	lsrs	r4, r4, #31
    ca64:	4f0a      	ldr	r7, [pc, #40]	; (ca90 <blst_fp2_cneg+0x40>)
    ca66:	f04f 080c 	mov.w	r8, #12
    ca6a:	f8cd 8000 	str.w	r8, [sp]
    ca6e:	463b      	mov	r3, r7
    ca70:	4622      	mov	r2, r4
    ca72:	f7f4 ff97 	bl	19a4 <cneg_mod_n>
    ca76:	f8cd 8000 	str.w	r8, [sp]
    ca7a:	463b      	mov	r3, r7
    ca7c:	4622      	mov	r2, r4
    ca7e:	f106 0130 	add.w	r1, r6, #48	; 0x30
    ca82:	f105 0030 	add.w	r0, r5, #48	; 0x30
    ca86:	f7f4 ff8d 	bl	19a4 <cneg_mod_n>
    ca8a:	b002      	add	sp, #8
    ca8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ca90:	00015a08 	.word	0x00015a08

0000ca94 <blst_p1_add>:
    ca94:	b508      	push	{r3, lr}
    ca96:	f7f5 fc97 	bl	23c8 <POINTonE1_add>
    ca9a:	bd08      	pop	{r3, pc}

0000ca9c <blst_p1_add_or_double>:
    ca9c:	b508      	push	{r3, lr}
    ca9e:	2300      	movs	r3, #0
    caa0:	f7f6 f9ea 	bl	2e78 <POINTonE1_dadd>
    caa4:	bd08      	pop	{r3, pc}

0000caa6 <blst_p1_add_affine>:
    caa6:	b508      	push	{r3, lr}
    caa8:	f7f5 fac0 	bl	202c <POINTonE1_add_affine>
    caac:	bd08      	pop	{r3, pc}

0000caae <blst_p1_add_or_double_affine>:
    caae:	b508      	push	{r3, lr}
    cab0:	f7f6 f870 	bl	2b94 <POINTonE1_dadd_affine>
    cab4:	bd08      	pop	{r3, pc}

0000cab6 <blst_p1_double>:
    cab6:	b508      	push	{r3, lr}
    cab8:	f7f5 f982 	bl	1dc0 <POINTonE1_double>
    cabc:	bd08      	pop	{r3, pc}

0000cabe <blst_p1_affine_is_equal>:
    cabe:	b410      	push	{r4}
    cac0:	1f02      	subs	r2, r0, #4
    cac2:	3904      	subs	r1, #4
    cac4:	f100 0c5c 	add.w	ip, r0, #92	; 0x5c
    cac8:	2000      	movs	r0, #0
    caca:	f852 3f04 	ldr.w	r3, [r2, #4]!
    cace:	f851 4f04 	ldr.w	r4, [r1, #4]!
    cad2:	4063      	eors	r3, r4
    cad4:	4318      	orrs	r0, r3
    cad6:	4562      	cmp	r2, ip
    cad8:	d1f7      	bne.n	caca <blst_p1_affine_is_equal+0xc>
    cada:	1e43      	subs	r3, r0, #1
    cadc:	ea23 0000 	bic.w	r0, r3, r0
    cae0:	0fc0      	lsrs	r0, r0, #31
    cae2:	bc10      	pop	{r4}
    cae4:	4770      	bx	lr

0000cae6 <blst_p2_add>:
    cae6:	b508      	push	{r3, lr}
    cae8:	f7fb fd26 	bl	8538 <POINTonE2_add>
    caec:	bd08      	pop	{r3, pc}

0000caee <blst_p2_add_or_double>:
    caee:	b508      	push	{r3, lr}
    caf0:	2300      	movs	r3, #0
    caf2:	f7fb ffb1 	bl	8a58 <POINTonE2_dadd>
    caf6:	bd08      	pop	{r3, pc}

0000caf8 <blst_p2_add_affine>:
    caf8:	b508      	push	{r3, lr}
    cafa:	f7ff fb87 	bl	c20c <POINTonE2_add_affine>
    cafe:	bd08      	pop	{r3, pc}

0000cb00 <blst_p2_add_or_double_affine>:
    cb00:	b508      	push	{r3, lr}
    cb02:	f7fe ff57 	bl	b9b4 <POINTonE2_dadd_affine>
    cb06:	bd08      	pop	{r3, pc}

0000cb08 <blst_p2_double>:
    cb08:	b508      	push	{r3, lr}
    cb0a:	f7fb fe9d 	bl	8848 <POINTonE2_double>
    cb0e:	bd08      	pop	{r3, pc}

0000cb10 <blst_p2_affine_is_equal>:
    cb10:	b410      	push	{r4}
    cb12:	1f02      	subs	r2, r0, #4
    cb14:	3904      	subs	r1, #4
    cb16:	f100 0cbc 	add.w	ip, r0, #188	; 0xbc
    cb1a:	2000      	movs	r0, #0
    cb1c:	f852 3f04 	ldr.w	r3, [r2, #4]!
    cb20:	f851 4f04 	ldr.w	r4, [r1, #4]!
    cb24:	4063      	eors	r3, r4
    cb26:	4318      	orrs	r0, r3
    cb28:	4562      	cmp	r2, ip
    cb2a:	d1f7      	bne.n	cb1c <blst_p2_affine_is_equal+0xc>
    cb2c:	1e43      	subs	r3, r0, #1
    cb2e:	ea23 0000 	bic.w	r0, r3, r0
    cb32:	0fc0      	lsrs	r0, r0, #31
    cb34:	bc10      	pop	{r4}
    cb36:	4770      	bx	lr

0000cb38 <blst_scalar_from_uint32>:
    cb38:	4281      	cmp	r1, r0
    cb3a:	d014      	beq.n	cb66 <blst_scalar_from_uint32+0x2e>
    cb3c:	1d03      	adds	r3, r0, #4
    cb3e:	3904      	subs	r1, #4
    cb40:	3024      	adds	r0, #36	; 0x24
    cb42:	f851 2f04 	ldr.w	r2, [r1, #4]!
    cb46:	f803 2c04 	strb.w	r2, [r3, #-4]
    cb4a:	ea4f 2c12 	mov.w	ip, r2, lsr #8
    cb4e:	f803 cc03 	strb.w	ip, [r3, #-3]
    cb52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
    cb56:	f803 cc02 	strb.w	ip, [r3, #-2]
    cb5a:	0e12      	lsrs	r2, r2, #24
    cb5c:	f803 2c01 	strb.w	r2, [r3, #-1]
    cb60:	3304      	adds	r3, #4
    cb62:	4283      	cmp	r3, r0
    cb64:	d1ed      	bne.n	cb42 <blst_scalar_from_uint32+0xa>
    cb66:	4770      	bx	lr

0000cb68 <blst_uint32_from_scalar>:
    cb68:	4288      	cmp	r0, r1
    cb6a:	d019      	beq.n	cba0 <blst_uint32_from_scalar+0x38>
    cb6c:	b500      	push	{lr}
    cb6e:	1d0a      	adds	r2, r1, #4
    cb70:	3804      	subs	r0, #4
    cb72:	3124      	adds	r1, #36	; 0x24
    cb74:	f812 cc04 	ldrb.w	ip, [r2, #-4]
    cb78:	f812 ec03 	ldrb.w	lr, [r2, #-3]
    cb7c:	f812 3c02 	ldrb.w	r3, [r2, #-2]
    cb80:	041b      	lsls	r3, r3, #16
    cb82:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
    cb86:	ea43 030c 	orr.w	r3, r3, ip
    cb8a:	f812 cc01 	ldrb.w	ip, [r2, #-1]
    cb8e:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
    cb92:	f840 3f04 	str.w	r3, [r0, #4]!
    cb96:	3204      	adds	r2, #4
    cb98:	428a      	cmp	r2, r1
    cb9a:	d1eb      	bne.n	cb74 <blst_uint32_from_scalar+0xc>
    cb9c:	f85d fb04 	ldr.w	pc, [sp], #4
    cba0:	4770      	bx	lr

0000cba2 <blst_scalar_from_uint64>:
    cba2:	4281      	cmp	r1, r0
    cba4:	d026      	beq.n	cbf4 <blst_scalar_from_uint64+0x52>
    cba6:	b500      	push	{lr}
    cba8:	f100 0308 	add.w	r3, r0, #8
    cbac:	f1a1 0c08 	sub.w	ip, r1, #8
    cbb0:	3028      	adds	r0, #40	; 0x28
    cbb2:	f85c 1f08 	ldr.w	r1, [ip, #8]!
    cbb6:	f8dc 2004 	ldr.w	r2, [ip, #4]
    cbba:	f803 1c08 	strb.w	r1, [r3, #-8]
    cbbe:	ea4f 2e11 	mov.w	lr, r1, lsr #8
    cbc2:	f803 ec07 	strb.w	lr, [r3, #-7]
    cbc6:	ea4f 4e11 	mov.w	lr, r1, lsr #16
    cbca:	f803 ec06 	strb.w	lr, [r3, #-6]
    cbce:	0e09      	lsrs	r1, r1, #24
    cbd0:	f803 1c05 	strb.w	r1, [r3, #-5]
    cbd4:	f803 2c04 	strb.w	r2, [r3, #-4]
    cbd8:	0a11      	lsrs	r1, r2, #8
    cbda:	f803 1c03 	strb.w	r1, [r3, #-3]
    cbde:	0c11      	lsrs	r1, r2, #16
    cbe0:	f803 1c02 	strb.w	r1, [r3, #-2]
    cbe4:	0e12      	lsrs	r2, r2, #24
    cbe6:	f803 2c01 	strb.w	r2, [r3, #-1]
    cbea:	3308      	adds	r3, #8
    cbec:	4283      	cmp	r3, r0
    cbee:	d1e0      	bne.n	cbb2 <blst_scalar_from_uint64+0x10>
    cbf0:	f85d fb04 	ldr.w	pc, [sp], #4
    cbf4:	4770      	bx	lr

0000cbf6 <blst_uint64_from_scalar>:
    cbf6:	4288      	cmp	r0, r1
    cbf8:	d029      	beq.n	cc4e <blst_uint64_from_scalar+0x58>
    cbfa:	b500      	push	{lr}
    cbfc:	f101 0308 	add.w	r3, r1, #8
    cc00:	3808      	subs	r0, #8
    cc02:	f101 0c28 	add.w	ip, r1, #40	; 0x28
    cc06:	f813 1c08 	ldrb.w	r1, [r3, #-8]
    cc0a:	f813 ec07 	ldrb.w	lr, [r3, #-7]
    cc0e:	f813 2c06 	ldrb.w	r2, [r3, #-6]
    cc12:	0412      	lsls	r2, r2, #16
    cc14:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
    cc18:	430a      	orrs	r2, r1
    cc1a:	f813 1c05 	ldrb.w	r1, [r3, #-5]
    cc1e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    cc22:	f813 1c04 	ldrb.w	r1, [r3, #-4]
    cc26:	f813 ec03 	ldrb.w	lr, [r3, #-3]
    cc2a:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
    cc2e:	f813 ec02 	ldrb.w	lr, [r3, #-2]
    cc32:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
    cc36:	f813 ec01 	ldrb.w	lr, [r3, #-1]
    cc3a:	ea41 610e 	orr.w	r1, r1, lr, lsl #24
    cc3e:	f840 2f08 	str.w	r2, [r0, #8]!
    cc42:	6041      	str	r1, [r0, #4]
    cc44:	3308      	adds	r3, #8
    cc46:	4563      	cmp	r3, ip
    cc48:	d1dd      	bne.n	cc06 <blst_uint64_from_scalar+0x10>
    cc4a:	f85d fb04 	ldr.w	pc, [sp], #4
    cc4e:	4770      	bx	lr

0000cc50 <blst_scalar_from_bendian>:
    cc50:	b510      	push	{r4, lr}
    cc52:	b088      	sub	sp, #32
    cc54:	468e      	mov	lr, r1
    cc56:	f101 0420 	add.w	r4, r1, #32
    cc5a:	460a      	mov	r2, r1
    cc5c:	2100      	movs	r1, #0
    cc5e:	f10e 0e1f 	add.w	lr, lr, #31
    cc62:	ebae 0302 	sub.w	r3, lr, r2
    cc66:	f812 cb01 	ldrb.w	ip, [r2], #1
    cc6a:	ea4c 2101 	orr.w	r1, ip, r1, lsl #8
    cc6e:	f023 0303 	bic.w	r3, r3, #3
    cc72:	f10d 0c20 	add.w	ip, sp, #32
    cc76:	4463      	add	r3, ip
    cc78:	f843 1c20 	str.w	r1, [r3, #-32]
    cc7c:	42a2      	cmp	r2, r4
    cc7e:	d1f0      	bne.n	cc62 <blst_scalar_from_bendian+0x12>
    cc80:	46ec      	mov	ip, sp
    cc82:	4560      	cmp	r0, ip
    cc84:	d005      	beq.n	cc92 <blst_scalar_from_bendian+0x42>
    cc86:	1d01      	adds	r1, r0, #4
    cc88:	f1ad 0004 	sub.w	r0, sp, #4
    cc8c:	f10c 041c 	add.w	r4, ip, #28
    cc90:	e00c      	b.n	ccac <blst_scalar_from_bendian+0x5c>
    cc92:	f10c 0220 	add.w	r2, ip, #32
    cc96:	2300      	movs	r3, #0
    cc98:	f84c 3b04 	str.w	r3, [ip], #4
    cc9c:	4562      	cmp	r2, ip
    cc9e:	d1fb      	bne.n	cc98 <blst_scalar_from_bendian+0x48>
    cca0:	466b      	mov	r3, sp
    cca2:	b008      	add	sp, #32
    cca4:	bd10      	pop	{r4, pc}
    cca6:	3104      	adds	r1, #4
    cca8:	42a0      	cmp	r0, r4
    ccaa:	d0f2      	beq.n	cc92 <blst_scalar_from_bendian+0x42>
    ccac:	1f0a      	subs	r2, r1, #4
    ccae:	f850 3f04 	ldr.w	r3, [r0, #4]!
    ccb2:	f802 3b01 	strb.w	r3, [r2], #1
    ccb6:	0a1b      	lsrs	r3, r3, #8
    ccb8:	428a      	cmp	r2, r1
    ccba:	d1fa      	bne.n	ccb2 <blst_scalar_from_bendian+0x62>
    ccbc:	e7f3      	b.n	cca6 <blst_scalar_from_bendian+0x56>

0000ccbe <blst_bendian_from_scalar>:
    ccbe:	b510      	push	{r4, lr}
    ccc0:	b088      	sub	sp, #32
    ccc2:	f101 0220 	add.w	r2, r1, #32
    ccc6:	2400      	movs	r4, #0
    ccc8:	ea6f 0e01 	mvn.w	lr, r1
    cccc:	eb0e 0302 	add.w	r3, lr, r2
    ccd0:	f812 cd01 	ldrb.w	ip, [r2, #-1]!
    ccd4:	ea4c 2404 	orr.w	r4, ip, r4, lsl #8
    ccd8:	f023 0303 	bic.w	r3, r3, #3
    ccdc:	f10d 0c20 	add.w	ip, sp, #32
    cce0:	4463      	add	r3, ip
    cce2:	f843 4c20 	str.w	r4, [r3, #-32]
    cce6:	428a      	cmp	r2, r1
    cce8:	d1f0      	bne.n	cccc <blst_bendian_from_scalar+0xe>
    ccea:	f100 0420 	add.w	r4, r0, #32
    ccee:	4602      	mov	r2, r0
    ccf0:	301f      	adds	r0, #31
    ccf2:	1a83      	subs	r3, r0, r2
    ccf4:	f023 0103 	bic.w	r1, r3, #3
    ccf8:	f10d 0c20 	add.w	ip, sp, #32
    ccfc:	4461      	add	r1, ip
    ccfe:	f003 0303 	and.w	r3, r3, #3
    cd02:	00db      	lsls	r3, r3, #3
    cd04:	f851 1c20 	ldr.w	r1, [r1, #-32]
    cd08:	fa21 f303 	lsr.w	r3, r1, r3
    cd0c:	f802 3b01 	strb.w	r3, [r2], #1
    cd10:	42a2      	cmp	r2, r4
    cd12:	d1ee      	bne.n	ccf2 <blst_bendian_from_scalar+0x34>
    cd14:	466b      	mov	r3, sp
    cd16:	4661      	mov	r1, ip
    cd18:	2200      	movs	r2, #0
    cd1a:	f843 2b04 	str.w	r2, [r3], #4
    cd1e:	4299      	cmp	r1, r3
    cd20:	d1fb      	bne.n	cd1a <blst_bendian_from_scalar+0x5c>
    cd22:	466b      	mov	r3, sp
    cd24:	b008      	add	sp, #32
    cd26:	bd10      	pop	{r4, pc}

0000cd28 <blst_scalar_from_lendian>:
    cd28:	4288      	cmp	r0, r1
    cd2a:	d009      	beq.n	cd40 <blst_scalar_from_lendian+0x18>
    cd2c:	1e4b      	subs	r3, r1, #1
    cd2e:	1e42      	subs	r2, r0, #1
    cd30:	f101 001f 	add.w	r0, r1, #31
    cd34:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    cd38:	f802 1f01 	strb.w	r1, [r2, #1]!
    cd3c:	4283      	cmp	r3, r0
    cd3e:	d1f9      	bne.n	cd34 <blst_scalar_from_lendian+0xc>
    cd40:	4770      	bx	lr

0000cd42 <blst_lendian_from_scalar>:
    cd42:	4288      	cmp	r0, r1
    cd44:	d009      	beq.n	cd5a <blst_lendian_from_scalar+0x18>
    cd46:	1e4b      	subs	r3, r1, #1
    cd48:	1e42      	subs	r2, r0, #1
    cd4a:	f101 001f 	add.w	r0, r1, #31
    cd4e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    cd52:	f802 1f01 	strb.w	r1, [r2, #1]!
    cd56:	4283      	cmp	r3, r0
    cd58:	d1f9      	bne.n	cd4e <blst_lendian_from_scalar+0xc>
    cd5a:	4770      	bx	lr

0000cd5c <blst_scalar_fr_check>:
    cd5c:	b530      	push	{r4, r5, lr}
    cd5e:	b093      	sub	sp, #76	; 0x4c
    cd60:	4605      	mov	r5, r0
    cd62:	2220      	movs	r2, #32
    cd64:	2100      	movs	r1, #0
    cd66:	a802      	add	r0, sp, #8
    cd68:	f008 fb2f 	bl	153ca <memset>
    cd6c:	f105 0220 	add.w	r2, r5, #32
    cd70:	2100      	movs	r1, #0
    cd72:	43e8      	mvns	r0, r5
    cd74:	1883      	adds	r3, r0, r2
    cd76:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
    cd7a:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    cd7e:	f023 0303 	bic.w	r3, r3, #3
    cd82:	ac12      	add	r4, sp, #72	; 0x48
    cd84:	4423      	add	r3, r4
    cd86:	f843 1c20 	str.w	r1, [r3, #-32]
    cd8a:	42aa      	cmp	r2, r5
    cd8c:	d1f2      	bne.n	cd74 <blst_scalar_fr_check+0x18>
    cd8e:	2308      	movs	r3, #8
    cd90:	9300      	str	r3, [sp, #0]
    cd92:	4b15      	ldr	r3, [pc, #84]	; (cde8 <blst_scalar_fr_check+0x8c>)
    cd94:	aa0a      	add	r2, sp, #40	; 0x28
    cd96:	a902      	add	r1, sp, #8
    cd98:	4608      	mov	r0, r1
    cd9a:	f7f3 ff6f 	bl	c7c <add_mod_n>
    cd9e:	a901      	add	r1, sp, #4
    cda0:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
    cda4:	aa02      	add	r2, sp, #8
    cda6:	4665      	mov	r5, ip
    cda8:	2000      	movs	r0, #0
    cdaa:	f851 3f04 	ldr.w	r3, [r1, #4]!
    cdae:	f85c 4f04 	ldr.w	r4, [ip, #4]!
    cdb2:	4063      	eors	r3, r4
    cdb4:	4318      	orrs	r0, r3
    cdb6:	42a9      	cmp	r1, r5
    cdb8:	d1f7      	bne.n	cdaa <blst_scalar_fr_check+0x4e>
    cdba:	1e43      	subs	r3, r0, #1
    cdbc:	ea23 0000 	bic.w	r0, r3, r0
    cdc0:	0fc0      	lsrs	r0, r0, #31
    cdc2:	f102 0120 	add.w	r1, r2, #32
    cdc6:	2300      	movs	r3, #0
    cdc8:	f842 3b04 	str.w	r3, [r2], #4
    cdcc:	428a      	cmp	r2, r1
    cdce:	d1fb      	bne.n	cdc8 <blst_scalar_fr_check+0x6c>
    cdd0:	ab02      	add	r3, sp, #8
    cdd2:	ab0a      	add	r3, sp, #40	; 0x28
    cdd4:	a912      	add	r1, sp, #72	; 0x48
    cdd6:	2200      	movs	r2, #0
    cdd8:	f843 2b04 	str.w	r2, [r3], #4
    cddc:	4299      	cmp	r1, r3
    cdde:	d1fb      	bne.n	cdd8 <blst_scalar_fr_check+0x7c>
    cde0:	ab0a      	add	r3, sp, #40	; 0x28
    cde2:	b013      	add	sp, #76	; 0x4c
    cde4:	bd30      	pop	{r4, r5, pc}
    cde6:	bf00      	nop
    cde8:	00016dc8 	.word	0x00016dc8

0000cdec <blst_sk_check>:
    cdec:	b508      	push	{r3, lr}
    cdee:	2208      	movs	r2, #8
    cdf0:	4901      	ldr	r1, [pc, #4]	; (cdf8 <blst_sk_check+0xc>)
    cdf2:	f7f3 fc26 	bl	642 <check_mod_n>
    cdf6:	bd08      	pop	{r3, pc}
    cdf8:	00016dc8 	.word	0x00016dc8

0000cdfc <blst_fr_from_uint64>:
    cdfc:	b500      	push	{lr}
    cdfe:	b083      	sub	sp, #12
    ce00:	4a07      	ldr	r2, [pc, #28]	; (ce20 <blst_fr_from_uint64+0x24>)
    ce02:	2308      	movs	r3, #8
    ce04:	9301      	str	r3, [sp, #4]
    ce06:	f04f 33ff 	mov.w	r3, #4294967295
    ce0a:	9300      	str	r3, [sp, #0]
    ce0c:	f502 7332 	add.w	r3, r2, #712	; 0x2c8
    ce10:	f502 6288 	add.w	r2, r2, #1088	; 0x440
    ce14:	f7f3 fd8a 	bl	92c <mul_mont_n>
    ce18:	b003      	add	sp, #12
    ce1a:	f85d fb04 	ldr.w	pc, [sp], #4
    ce1e:	bf00      	nop
    ce20:	00016b00 	.word	0x00016b00

0000ce24 <blst_uint64_from_fr>:
    ce24:	b500      	push	{lr}
    ce26:	b083      	sub	sp, #12
    ce28:	2308      	movs	r3, #8
    ce2a:	9300      	str	r3, [sp, #0]
    ce2c:	f04f 33ff 	mov.w	r3, #4294967295
    ce30:	4a02      	ldr	r2, [pc, #8]	; (ce3c <blst_uint64_from_fr+0x18>)
    ce32:	f7f4 f8ad 	bl	f90 <from_mont_n>
    ce36:	b003      	add	sp, #12
    ce38:	f85d fb04 	ldr.w	pc, [sp], #4
    ce3c:	00016dc8 	.word	0x00016dc8

0000ce40 <blst_fr_from_scalar>:
    ce40:	b510      	push	{r4, lr}
    ce42:	b082      	sub	sp, #8
    ce44:	f101 0320 	add.w	r3, r1, #32
    ce48:	2400      	movs	r4, #0
    ce4a:	ea6f 0e01 	mvn.w	lr, r1
    ce4e:	eb0e 0203 	add.w	r2, lr, r3
    ce52:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    ce56:	ea4c 2404 	orr.w	r4, ip, r4, lsl #8
    ce5a:	f022 0203 	bic.w	r2, r2, #3
    ce5e:	5084      	str	r4, [r0, r2]
    ce60:	428b      	cmp	r3, r1
    ce62:	d1f4      	bne.n	ce4e <blst_fr_from_scalar+0xe>
    ce64:	4a07      	ldr	r2, [pc, #28]	; (ce84 <blst_fr_from_scalar+0x44>)
    ce66:	2308      	movs	r3, #8
    ce68:	9301      	str	r3, [sp, #4]
    ce6a:	f04f 33ff 	mov.w	r3, #4294967295
    ce6e:	9300      	str	r3, [sp, #0]
    ce70:	f502 7332 	add.w	r3, r2, #712	; 0x2c8
    ce74:	f502 6288 	add.w	r2, r2, #1088	; 0x440
    ce78:	4601      	mov	r1, r0
    ce7a:	f7f3 fd57 	bl	92c <mul_mont_n>
    ce7e:	b002      	add	sp, #8
    ce80:	bd10      	pop	{r4, pc}
    ce82:	bf00      	nop
    ce84:	00016b00 	.word	0x00016b00

0000ce88 <blst_scalar_from_fr>:
    ce88:	b530      	push	{r4, r5, lr}
    ce8a:	b08b      	sub	sp, #44	; 0x2c
    ce8c:	4604      	mov	r4, r0
    ce8e:	ad02      	add	r5, sp, #8
    ce90:	2308      	movs	r3, #8
    ce92:	9300      	str	r3, [sp, #0]
    ce94:	f04f 33ff 	mov.w	r3, #4294967295
    ce98:	4a10      	ldr	r2, [pc, #64]	; (cedc <blst_scalar_from_fr+0x54>)
    ce9a:	4628      	mov	r0, r5
    ce9c:	f7f4 f878 	bl	f90 <from_mont_n>
    cea0:	4628      	mov	r0, r5
    cea2:	42ac      	cmp	r4, r5
    cea4:	d004      	beq.n	ceb0 <blst_scalar_from_fr+0x28>
    cea6:	1d21      	adds	r1, r4, #4
    cea8:	ac01      	add	r4, sp, #4
    ceaa:	f105 0c1c 	add.w	ip, r5, #28
    ceae:	e00c      	b.n	ceca <blst_scalar_from_fr+0x42>
    ceb0:	f100 0220 	add.w	r2, r0, #32
    ceb4:	2300      	movs	r3, #0
    ceb6:	f840 3b04 	str.w	r3, [r0], #4
    ceba:	4290      	cmp	r0, r2
    cebc:	d1fb      	bne.n	ceb6 <blst_scalar_from_fr+0x2e>
    cebe:	ab02      	add	r3, sp, #8
    cec0:	b00b      	add	sp, #44	; 0x2c
    cec2:	bd30      	pop	{r4, r5, pc}
    cec4:	3104      	adds	r1, #4
    cec6:	4564      	cmp	r4, ip
    cec8:	d0f2      	beq.n	ceb0 <blst_scalar_from_fr+0x28>
    ceca:	1f0a      	subs	r2, r1, #4
    cecc:	f854 3f04 	ldr.w	r3, [r4, #4]!
    ced0:	f802 3b01 	strb.w	r3, [r2], #1
    ced4:	0a1b      	lsrs	r3, r3, #8
    ced6:	428a      	cmp	r2, r1
    ced8:	d1fa      	bne.n	ced0 <blst_scalar_from_fr+0x48>
    ceda:	e7f3      	b.n	cec4 <blst_scalar_from_fr+0x3c>
    cedc:	00016dc8 	.word	0x00016dc8

0000cee0 <blst_scalar_from_hexascii>:
    cee0:	b508      	push	{r3, lr}
    cee2:	460a      	mov	r2, r1
    cee4:	2120      	movs	r1, #32
    cee6:	f7f3 fcdd 	bl	8a4 <limbs_from_hexascii>
    ceea:	bd08      	pop	{r3, pc}

0000ceec <blst_fp_from_hexascii>:
    ceec:	b510      	push	{r4, lr}
    ceee:	b082      	sub	sp, #8
    cef0:	4604      	mov	r4, r0
    cef2:	460a      	mov	r2, r1
    cef4:	2130      	movs	r1, #48	; 0x30
    cef6:	f7f3 fcd5 	bl	8a4 <limbs_from_hexascii>
    cefa:	4b06      	ldr	r3, [pc, #24]	; (cf14 <blst_fp_from_hexascii+0x28>)
    cefc:	220c      	movs	r2, #12
    cefe:	9201      	str	r2, [sp, #4]
    cf00:	4a05      	ldr	r2, [pc, #20]	; (cf18 <blst_fp_from_hexascii+0x2c>)
    cf02:	9200      	str	r2, [sp, #0]
    cf04:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
    cf08:	4621      	mov	r1, r4
    cf0a:	4620      	mov	r0, r4
    cf0c:	f7f3 fd0e 	bl	92c <mul_mont_n>
    cf10:	b002      	add	sp, #8
    cf12:	bd10      	pop	{r4, pc}
    cf14:	00015a08 	.word	0x00015a08
    cf18:	fffcfffd 	.word	0xfffcfffd

0000cf1c <blst_uniq_sizeof>:
    cf1c:	0100      	lsls	r0, r0, #4
    cf1e:	3008      	adds	r0, #8
    cf20:	4770      	bx	lr

0000cf22 <blst_uniq_init>:
    cf22:	2300      	movs	r3, #0
    cf24:	6003      	str	r3, [r0, #0]
    cf26:	6043      	str	r3, [r0, #4]
    cf28:	4770      	bx	lr

0000cf2a <blst_uniq_test>:
    cf2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cf2e:	b0a8      	sub	sp, #160	; 0xa0
    cf30:	4607      	mov	r7, r0
    cf32:	4688      	mov	r8, r1
    cf34:	4615      	mov	r5, r2
    cf36:	6801      	ldr	r1, [r0, #0]
    cf38:	2900      	cmp	r1, #0
    cf3a:	f000 80ac 	beq.w	d096 <blst_uniq_test+0x16c>
    cf3e:	f10d 0920 	add.w	r9, sp, #32
    cf42:	466e      	mov	r6, sp
    cf44:	2400      	movs	r4, #0
    cf46:	e014      	b.n	cf72 <blst_uniq_test+0x48>
    cf48:	eba0 000e 	sub.w	r0, r0, lr
    cf4c:	e001      	b.n	cf52 <blst_uniq_test+0x28>
    cf4e:	eba5 000a 	sub.w	r0, r5, sl
    cf52:	2800      	cmp	r0, #0
    cf54:	f000 80b7 	beq.w	d0c6 <blst_uniq_test+0x19c>
    cf58:	f849 1b04 	str.w	r1, [r9], #4
    cf5c:	2800      	cmp	r0, #0
    cf5e:	bfd4      	ite	le
    cf60:	2000      	movle	r0, #0
    cf62:	2001      	movgt	r0, #1
    cf64:	f806 0b01 	strb.w	r0, [r6], #1
    cf68:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    cf6c:	1c63      	adds	r3, r4, #1
    cf6e:	b1c1      	cbz	r1, cfa2 <blst_uniq_test+0x78>
    cf70:	461c      	mov	r4, r3
    cf72:	688a      	ldr	r2, [r1, #8]
    cf74:	68cb      	ldr	r3, [r1, #12]
    cf76:	ea4f 0a53 	mov.w	sl, r3, lsr #1
    cf7a:	4628      	mov	r0, r5
    cf7c:	4555      	cmp	r5, sl
    cf7e:	bf28      	it	cs
    cf80:	4650      	movcs	r0, sl
    cf82:	2800      	cmp	r0, #0
    cf84:	d0e3      	beq.n	cf4e <blst_uniq_test+0x24>
    cf86:	f108 33ff 	add.w	r3, r8, #4294967295
    cf8a:	f102 3cff 	add.w	ip, r2, #4294967295
    cf8e:	181a      	adds	r2, r3, r0
    cf90:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    cf94:	f81c ef01 	ldrb.w	lr, [ip, #1]!
    cf98:	4570      	cmp	r0, lr
    cf9a:	d1d5      	bne.n	cf48 <blst_uniq_test+0x1e>
    cf9c:	4293      	cmp	r3, r2
    cf9e:	d1f7      	bne.n	cf90 <blst_uniq_test+0x66>
    cfa0:	e7d5      	b.n	cf4e <blst_uniq_test+0x24>
    cfa2:	687a      	ldr	r2, [r7, #4]
    cfa4:	1c51      	adds	r1, r2, #1
    cfa6:	6079      	str	r1, [r7, #4]
    cfa8:	0112      	lsls	r2, r2, #4
    cfaa:	f102 0108 	add.w	r1, r2, #8
    cfae:	4439      	add	r1, r7
    cfb0:	443a      	add	r2, r7
    cfb2:	2000      	movs	r0, #0
    cfb4:	60d0      	str	r0, [r2, #12]
    cfb6:	6090      	str	r0, [r2, #8]
    cfb8:	f8c2 8010 	str.w	r8, [r2, #16]
    cfbc:	0068      	lsls	r0, r5, #1
    cfbe:	f040 0001 	orr.w	r0, r0, #1
    cfc2:	6150      	str	r0, [r2, #20]
    cfc4:	2b00      	cmp	r3, #0
    cfc6:	d077      	beq.n	d0b8 <blst_uniq_test+0x18e>
    cfc8:	aa28      	add	r2, sp, #160	; 0xa0
    cfca:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    cfce:	f852 2c80 	ldr.w	r2, [r2, #-128]
    cfd2:	a828      	add	r0, sp, #160	; 0xa0
    cfd4:	4404      	add	r4, r0
    cfd6:	f814 0ca0 	ldrb.w	r0, [r4, #-160]
    cfda:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
    cfde:	2b01      	cmp	r3, #1
    cfe0:	d96b      	bls.n	d0ba <blst_uniq_test+0x190>
    cfe2:	aa08      	add	r2, sp, #32
    cfe4:	eb02 0183 	add.w	r1, r2, r3, lsl #2
    cfe8:	f103 3eff 	add.w	lr, r3, #4294967295
    cfec:	f851 4c04 	ldr.w	r4, [r1, #-4]
    cff0:	68e2      	ldr	r2, [r4, #12]
    cff2:	f012 0f01 	tst.w	r2, #1
    cff6:	d060      	beq.n	d0ba <blst_uniq_test+0x190>
    cff8:	eb0d 0203 	add.w	r2, sp, r3
    cffc:	f812 cc02 	ldrb.w	ip, [r2, #-2]
    d000:	f851 0c08 	ldr.w	r0, [r1, #-8]
    d004:	f08c 0501 	eor.w	r5, ip, #1
    d008:	f850 2025 	ldr.w	r2, [r0, r5, lsl #2]
    d00c:	b1a2      	cbz	r2, d038 <blst_uniq_test+0x10e>
    d00e:	68d6      	ldr	r6, [r2, #12]
    d010:	f016 0f01 	tst.w	r6, #1
    d014:	d010      	beq.n	d038 <blst_uniq_test+0x10e>
    d016:	68c5      	ldr	r5, [r0, #12]
    d018:	f045 0501 	orr.w	r5, r5, #1
    d01c:	60c5      	str	r5, [r0, #12]
    d01e:	68e0      	ldr	r0, [r4, #12]
    d020:	f020 0001 	bic.w	r0, r0, #1
    d024:	60e0      	str	r0, [r4, #12]
    d026:	68d0      	ldr	r0, [r2, #12]
    d028:	f020 0001 	bic.w	r0, r0, #1
    d02c:	60d0      	str	r0, [r2, #12]
    d02e:	3b02      	subs	r3, #2
    d030:	3908      	subs	r1, #8
    d032:	2b01      	cmp	r3, #1
    d034:	d8d8      	bhi.n	cfe8 <blst_uniq_test+0xbe>
    d036:	e040      	b.n	d0ba <blst_uniq_test+0x190>
    d038:	aa28      	add	r2, sp, #160	; 0xa0
    d03a:	4496      	add	lr, r2
    d03c:	f81e 2ca0 	ldrb.w	r2, [lr, #-160]
    d040:	4562      	cmp	r2, ip
    d042:	d024      	beq.n	d08e <blst_uniq_test+0x164>
    d044:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
    d048:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
    d04c:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
    d050:	f842 402c 	str.w	r4, [r2, ip, lsl #2]
    d054:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
    d058:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
    d05c:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
    d060:	68c1      	ldr	r1, [r0, #12]
    d062:	f041 0101 	orr.w	r1, r1, #1
    d066:	60c1      	str	r1, [r0, #12]
    d068:	68d1      	ldr	r1, [r2, #12]
    d06a:	f021 0101 	bic.w	r1, r1, #1
    d06e:	60d1      	str	r1, [r2, #12]
    d070:	2b02      	cmp	r3, #2
    d072:	d90e      	bls.n	d092 <blst_uniq_test+0x168>
    d074:	3b03      	subs	r3, #3
    d076:	a928      	add	r1, sp, #160	; 0xa0
    d078:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    d07c:	f851 1c80 	ldr.w	r1, [r1, #-128]
    d080:	a828      	add	r0, sp, #160	; 0xa0
    d082:	4403      	add	r3, r0
    d084:	f813 3ca0 	ldrb.w	r3, [r3, #-160]
    d088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    d08c:	e015      	b.n	d0ba <blst_uniq_test+0x190>
    d08e:	4622      	mov	r2, r4
    d090:	e7e0      	b.n	d054 <blst_uniq_test+0x12a>
    d092:	603a      	str	r2, [r7, #0]
    d094:	e011      	b.n	d0ba <blst_uniq_test+0x190>
    d096:	6842      	ldr	r2, [r0, #4]
    d098:	1c53      	adds	r3, r2, #1
    d09a:	6043      	str	r3, [r0, #4]
    d09c:	0112      	lsls	r2, r2, #4
    d09e:	f102 0108 	add.w	r1, r2, #8
    d0a2:	4401      	add	r1, r0
    d0a4:	4402      	add	r2, r0
    d0a6:	2300      	movs	r3, #0
    d0a8:	60d3      	str	r3, [r2, #12]
    d0aa:	6093      	str	r3, [r2, #8]
    d0ac:	f8c2 8010 	str.w	r8, [r2, #16]
    d0b0:	006b      	lsls	r3, r5, #1
    d0b2:	f043 0301 	orr.w	r3, r3, #1
    d0b6:	6153      	str	r3, [r2, #20]
    d0b8:	6039      	str	r1, [r7, #0]
    d0ba:	683a      	ldr	r2, [r7, #0]
    d0bc:	68d3      	ldr	r3, [r2, #12]
    d0be:	f023 0301 	bic.w	r3, r3, #1
    d0c2:	60d3      	str	r3, [r2, #12]
    d0c4:	2001      	movs	r0, #1
    d0c6:	b028      	add	sp, #160	; 0xa0
    d0c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000d0cc <__gnu_cmse_nonsecure_call>:
    d0cc:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
    d0d0:	4627      	mov	r7, r4
    d0d2:	46a0      	mov	r8, r4
    d0d4:	46a1      	mov	r9, r4
    d0d6:	46a2      	mov	sl, r4
    d0d8:	46a3      	mov	fp, r4
    d0da:	46a4      	mov	ip, r4
    d0dc:	b0a2      	sub	sp, #136	; 0x88
    d0de:	ec2d 0a00 	vlstm	sp
    d0e2:	f384 8800 	msr	CPSR_f, r4
    d0e6:	4625      	mov	r5, r4
    d0e8:	4626      	mov	r6, r4
    d0ea:	47a4      	blxns	r4
    d0ec:	ec3d 0a00 	vlldm	sp
    d0f0:	b022      	add	sp, #136	; 0x88
    d0f2:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}
	...

0000d0f8 <__acle_se_public_key_to_sk>:

blst_scalar sk;
blst_scalar secret_keys_store[10];

__TZ_NONSECURE_ENTRY_FUNC
void public_key_to_sk(char * public_key_hex, blst_scalar* sk, char* public_keys_hex_store, int keys_counter){
    d0f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d0fc:	b0b1      	sub	sp, #196	; 0xc4
    d0fe:	460c      	mov	r4, r1
    d100:	4615      	mov	r5, r2
    d102:	461e      	mov	r6, r3
    d104:	f102 015f 	add.w	r1, r2, #95	; 0x5f
    d108:	1e53      	subs	r3, r2, #1
    d10a:	aa18      	add	r2, sp, #96	; 0x60
    
        char aux[96];
        char aux2[96];
        for(int i = 0; i < 96; i++){
           aux2[i] = public_keys_hex_store[i];
    d10c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
        for(int i = 0; i < 96; i++){
    d110:	428b      	cmp	r3, r1
           aux2[i] = public_keys_hex_store[i];
    d112:	f802 0b01 	strb.w	r0, [r2], #1
        for(int i = 0; i < 96; i++){
    d116:	d1f9      	bne.n	d10c <__acle_se_public_key_to_sk+0x14>
            if (strcmp(aux, aux2) == 0){
                *sk = secret_keys_store[i];
                break;
            } else {
                for(int k = 0; k < 96; k++){
                  aux2[k] = public_keys_hex_store[k+96*cont];
    d118:	f04f 0860 	mov.w	r8, #96	; 0x60
        for(int i = 0; i < keys_counter; i++){
    d11c:	2700      	movs	r7, #0
        int cont = keys_counter - 1;
    d11e:	1e73      	subs	r3, r6, #1
                  aux2[k] = public_keys_hex_store[k+96*cont];
    d120:	fb08 f803 	mul.w	r8, r8, r3
    d124:	f105 0960 	add.w	r9, r5, #96	; 0x60
    d128:	44c1      	add	r9, r8
        for(int i = 0; i < keys_counter; i++){
    d12a:	42b7      	cmp	r7, r6
    d12c:	da0f      	bge.n	d14e <__acle_se_public_key_to_sk+0x56>
            if (strcmp(aux, aux2) == 0){
    d12e:	4668      	mov	r0, sp
    d130:	a918      	add	r1, sp, #96	; 0x60
    d132:	f008 f8ec 	bl	1530e <strcmp>
    d136:	b9a8      	cbnz	r0, d164 <__acle_se_public_key_to_sk+0x6c>
                *sk = secret_keys_store[i];
    d138:	4b10      	ldr	r3, [pc, #64]	; (d17c <__acle_se_public_key_to_sk+0x84>)
    d13a:	eb03 1347 	add.w	r3, r3, r7, lsl #5
    d13e:	f103 0220 	add.w	r2, r3, #32
    d142:	f853 1b04 	ldr.w	r1, [r3], #4
    d146:	4293      	cmp	r3, r2
    d148:	f844 1b04 	str.w	r1, [r4], #4
    d14c:	d1f9      	bne.n	d142 <__acle_se_public_key_to_sk+0x4a>
                }
            }
        }
}
    d14e:	b031      	add	sp, #196	; 0xc4
    d150:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d154:	4670      	mov	r0, lr
    d156:	4671      	mov	r1, lr
    d158:	4672      	mov	r2, lr
    d15a:	4673      	mov	r3, lr
    d15c:	46f4      	mov	ip, lr
    d15e:	f38e 8c00 	msr	CPSR_fs, lr
    d162:	4774      	bxns	lr
    d164:	eb05 0308 	add.w	r3, r5, r8
            if (strcmp(aux, aux2) == 0){
    d168:	aa18      	add	r2, sp, #96	; 0x60
                  aux2[k] = public_keys_hex_store[k+96*cont];
    d16a:	f813 1b01 	ldrb.w	r1, [r3], #1
                for(int k = 0; k < 96; k++){
    d16e:	454b      	cmp	r3, r9
                  aux2[k] = public_keys_hex_store[k+96*cont];
    d170:	f802 1b01 	strb.w	r1, [r2], #1
                for(int k = 0; k < 96; k++){
    d174:	d1f9      	bne.n	d16a <__acle_se_public_key_to_sk+0x72>
        for(int i = 0; i < keys_counter; i++){
    d176:	3701      	adds	r7, #1
    d178:	e7d7      	b.n	d12a <__acle_se_public_key_to_sk+0x32>
    d17a:	bf00      	nop
    d17c:	2000173c 	.word	0x2000173c

0000d180 <__acle_se_ikm_sk>:
        // For security, IKM MUST be infeasible to guess, e.g., generated by a trusted
        // source of randomness. IKM MUST be at least 32 bytes long, but it MAY be longer.
        unsigned char ikm[32];
	const int random_number_len = 144;     
        uint8_t random_number[random_number_len];
        size_t olen = random_number_len;
    d180:	2190      	movs	r1, #144	; 0x90
void ikm_sk(int* keys_counter){
    d182:	b5f0      	push	{r4, r5, r6, r7, lr}
    d184:	b0b9      	sub	sp, #228	; 0xe4
        int ret;

        ret = spm_request_random_number_nse(random_number, random_number_len, &olen);
    d186:	aa03      	add	r2, sp, #12
void ikm_sk(int* keys_counter){
    d188:	4604      	mov	r4, r0
        ret = spm_request_random_number_nse(random_number, random_number_len, &olen);
    d18a:	a814      	add	r0, sp, #80	; 0x50
        size_t olen = random_number_len;
    d18c:	9103      	str	r1, [sp, #12]
        ret = spm_request_random_number_nse(random_number, random_number_len, &olen);
    d18e:	f001 fd27 	bl	ebe0 <__acle_se_spm_request_random_number_nse>
        
        //TO DO: IMPLEMENTATION OF HASH FOR RANDOM NUMBER STRING
        //ocrypto_sha256(ikm, random_number, random_number_len);

        for(int i = 0; i < sizeof(ikm); i++){
    d192:	a904      	add	r1, sp, #16
    d194:	2200      	movs	r2, #0
    d196:	460f      	mov	r7, r1
    d198:	ab14      	add	r3, sp, #80	; 0x50
          ikm[i] = random_number[i];
    d19a:	f813 0b01 	ldrb.w	r0, [r3], #1
        for(int i = 0; i < sizeof(ikm); i++){
    d19e:	3201      	adds	r2, #1
    d1a0:	2a20      	cmp	r2, #32
          ikm[i] = random_number[i];
    d1a2:	f801 0b01 	strb.w	r0, [r1], #1
        for(int i = 0; i < sizeof(ikm); i++){
    d1a6:	d1f8      	bne.n	d19a <__acle_se_ikm_sk+0x1a>
        }
        // key_info is an optional parameter.  This parameter MAY be used to derive
        // multiple independent keys from the same IKM.  By default, key_info is the empty string.
        char info[] = {
    d1a8:	ad0c      	add	r5, sp, #48	; 0x30
    d1aa:	462b      	mov	r3, r5
    d1ac:	4a15      	ldr	r2, [pc, #84]	; (d204 <__acle_se_ikm_sk+0x84>)
    d1ae:	f102 0c20 	add.w	ip, r2, #32
    d1b2:	462e      	mov	r6, r5
    d1b4:	6810      	ldr	r0, [r2, #0]
    d1b6:	6851      	ldr	r1, [r2, #4]
    d1b8:	3208      	adds	r2, #8
    d1ba:	c603      	stmia	r6!, {r0, r1}
    d1bc:	4562      	cmp	r2, ip
    d1be:	4635      	mov	r5, r6
    d1c0:	d1f7      	bne.n	d1b2 <__acle_se_ikm_sk+0x32>
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
        
        //Secret key (256-bit scalar)
        blst_keygen(&sk, ikm, sizeof(ikm), info, sizeof(info));
    d1c2:	2220      	movs	r2, #32
    d1c4:	4639      	mov	r1, r7
    d1c6:	4810      	ldr	r0, [pc, #64]	; (d208 <__acle_se_ikm_sk+0x88>)
    d1c8:	9200      	str	r2, [sp, #0]
    d1ca:	f7fa f947 	bl	745c <blst_keygen>
        secret_keys_store[*keys_counter] = sk;
    d1ce:	6823      	ldr	r3, [r4, #0]
    d1d0:	4a0d      	ldr	r2, [pc, #52]	; (d208 <__acle_se_ikm_sk+0x88>)
    d1d2:	490e      	ldr	r1, [pc, #56]	; (d20c <__acle_se_ikm_sk+0x8c>)
    d1d4:	f102 0020 	add.w	r0, r2, #32
    d1d8:	eb01 1143 	add.w	r1, r1, r3, lsl #5
    d1dc:	f852 5b04 	ldr.w	r5, [r2], #4
    d1e0:	4282      	cmp	r2, r0
    d1e2:	f841 5b04 	str.w	r5, [r1], #4
    d1e6:	d1f9      	bne.n	d1dc <__acle_se_ikm_sk+0x5c>
        (*keys_counter)++;
    d1e8:	3301      	adds	r3, #1
    d1ea:	6023      	str	r3, [r4, #0]
}
    d1ec:	b039      	add	sp, #228	; 0xe4
    d1ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    d1f2:	4670      	mov	r0, lr
    d1f4:	4671      	mov	r1, lr
    d1f6:	4672      	mov	r2, lr
    d1f8:	4673      	mov	r3, lr
    d1fa:	46f4      	mov	ip, lr
    d1fc:	f38e 8c00 	msr	CPSR_fs, lr
    d200:	4774      	bxns	lr
    d202:	bf00      	nop
    d204:	00017a14 	.word	0x00017a14
    d208:	2000187c 	.word	0x2000187c
    d20c:	2000173c 	.word	0x2000173c

0000d210 <__acle_se_sk_to_pk>:

__TZ_NONSECURE_ENTRY_FUNC
void sk_to_pk(blst_p1* pk){
    d210:	b508      	push	{r3, lr}
        blst_sk_to_pk_in_g1(pk, &sk);
    d212:	4906      	ldr	r1, [pc, #24]	; (d22c <__acle_se_sk_to_pk+0x1c>)
    d214:	f7f9 fbe0 	bl	69d8 <blst_sk_to_pk_in_g1>
}
    d218:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    d21c:	4670      	mov	r0, lr
    d21e:	4671      	mov	r1, lr
    d220:	4672      	mov	r2, lr
    d222:	4673      	mov	r3, lr
    d224:	46f4      	mov	ip, lr
    d226:	f38e 8c00 	msr	CPSR_fs, lr
    d22a:	4774      	bxns	lr
    d22c:	2000187c 	.word	0x2000187c

0000d230 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    d230:	b538      	push	{r3, r4, r5, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    d232:	6844      	ldr	r4, [r0, #4]
    d234:	4605      	mov	r5, r0

	return method & SYS_NOTIFY_METHOD_MASK;
    d236:	f004 0403 	and.w	r4, r4, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    d23a:	2c03      	cmp	r4, #3
	notify->result = res;
    d23c:	6081      	str	r1, [r0, #8]
	switch (method) {
    d23e:	d002      	beq.n	d246 <sys_notify_finalize+0x16>
    d240:	b12c      	cbz	r4, d24e <sys_notify_finalize+0x1e>
    d242:	2000      	movs	r0, #0
    d244:	e000      	b.n	d248 <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    d246:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    d248:	2300      	movs	r3, #0
    d24a:	606b      	str	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    d24c:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT_NO_MSG(false);
    d24e:	2245      	movs	r2, #69	; 0x45
    d250:	4904      	ldr	r1, [pc, #16]	; (d264 <sys_notify_finalize+0x34>)
    d252:	4805      	ldr	r0, [pc, #20]	; (d268 <sys_notify_finalize+0x38>)
    d254:	f007 fe9a 	bl	14f8c <printk>
    d258:	2145      	movs	r1, #69	; 0x45
    d25a:	4802      	ldr	r0, [pc, #8]	; (d264 <sys_notify_finalize+0x34>)
    d25c:	f007 ff62 	bl	15124 <assert_post_action>
    d260:	e7ef      	b.n	d242 <sys_notify_finalize+0x12>
    d262:	bf00      	nop
    d264:	00017e4f 	.word	0x00017e4f
    d268:	00017e72 	.word	0x00017e72

0000d26c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    d26c:	680b      	ldr	r3, [r1, #0]
    d26e:	3301      	adds	r3, #1
    d270:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    d272:	4b01      	ldr	r3, [pc, #4]	; (d278 <char_out+0xc>)
    d274:	681b      	ldr	r3, [r3, #0]
    d276:	4718      	bx	r3
    d278:	20000000 	.word	0x20000000

0000d27c <__printk_hook_install>:
	_char_out = fn;
    d27c:	4b01      	ldr	r3, [pc, #4]	; (d284 <__printk_hook_install+0x8>)
    d27e:	6018      	str	r0, [r3, #0]
}
    d280:	4770      	bx	lr
    d282:	bf00      	nop
    d284:	20000000 	.word	0x20000000

0000d288 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    d288:	b507      	push	{r0, r1, r2, lr}
    d28a:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    d28c:	2100      	movs	r1, #0
{
    d28e:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    d290:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    d292:	4803      	ldr	r0, [pc, #12]	; (d2a0 <vprintk+0x18>)
    d294:	a901      	add	r1, sp, #4
    d296:	f000 fa6d 	bl	d774 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    d29a:	b003      	add	sp, #12
    d29c:	f85d fb04 	ldr.w	pc, [sp], #4
    d2a0:	0000d26d 	.word	0x0000d26d

0000d2a4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    d2a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    d2a8:	f8b0 a01c 	ldrh.w	sl, [r0, #28]
{
    d2ac:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    d2ae:	f01a 0f08 	tst.w	sl, #8
{
    d2b2:	4693      	mov	fp, r2
	if (processing) {
    d2b4:	d01c      	beq.n	d2f0 <process_event+0x4c>
		if (evt == EVT_COMPLETE) {
    d2b6:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    d2b8:	bf0c      	ite	eq
    d2ba:	f04a 0a10 	orreq.w	sl, sl, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    d2be:	f04a 0a20 	orrne.w	sl, sl, #32
    d2c2:	f8a0 a01c 	strh.w	sl, [r0, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d2c6:	f104 0014 	add.w	r0, r4, #20
    d2ca:	f003 fbe3 	bl	10a94 <z_spin_unlock_valid>
    d2ce:	b940      	cbnz	r0, d2e2 <process_event+0x3e>
    d2d0:	49ba      	ldr	r1, [pc, #744]	; (d5bc <process_event+0x318>)
    d2d2:	48bb      	ldr	r0, [pc, #748]	; (d5c0 <process_event+0x31c>)
    d2d4:	22ac      	movs	r2, #172	; 0xac
    d2d6:	f007 fe59 	bl	14f8c <printk>
    d2da:	21ac      	movs	r1, #172	; 0xac
    d2dc:	48b7      	ldr	r0, [pc, #732]	; (d5bc <process_event+0x318>)
    d2de:	f007 ff21 	bl	15124 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    d2e2:	f38b 8811 	msr	BASEPRI, fp
    d2e6:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    d2ea:	b003      	add	sp, #12
    d2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    d2f0:	4fb4      	ldr	r7, [pc, #720]	; (d5c4 <process_event+0x320>)
    d2f2:	f8df 82cc 	ldr.w	r8, [pc, #716]	; d5c0 <process_event+0x31c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    d2f6:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
    d2fa:	2902      	cmp	r1, #2
    d2fc:	d106      	bne.n	d30c <process_event+0x68>
			evt = process_recheck(mgr);
    d2fe:	4620      	mov	r0, r4
    d300:	f007 fe51 	bl	14fa6 <process_recheck>
		if (evt == EVT_NOP) {
    d304:	2800      	cmp	r0, #0
    d306:	d0de      	beq.n	d2c6 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    d308:	2801      	cmp	r0, #1
    d30a:	d165      	bne.n	d3d8 <process_event+0x134>
			res = mgr->last_res;
    d30c:	f8d4 9018 	ldr.w	r9, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    d310:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    d312:	f1b9 0f00 	cmp.w	r9, #0
    d316:	da19      	bge.n	d34c <process_event+0xa8>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    d318:	2600      	movs	r6, #0
		*clients = mgr->clients;
    d31a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    d31c:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    d320:	e9c4 6600 	strd	r6, r6, [r4]
    d324:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    d328:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    d32a:	8ba3      	ldrh	r3, [r4, #28]
    d32c:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    d330:	4552      	cmp	r2, sl
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    d332:	9200      	str	r2, [sp, #0]
				   && !sys_slist_is_empty(&mgr->monitors);
    d334:	d003      	beq.n	d33e <process_event+0x9a>
		if (do_monitors
    d336:	68a2      	ldr	r2, [r4, #8]
    d338:	2a00      	cmp	r2, #0
    d33a:	f040 80f1 	bne.w	d520 <process_event+0x27c>
		    || !sys_slist_is_empty(&clients)
    d33e:	b915      	cbnz	r5, d346 <process_event+0xa2>
		    || (transit != NULL)) {
    d340:	2e00      	cmp	r6, #0
    d342:	f000 812b 	beq.w	d59c <process_event+0x2f8>
    d346:	f04f 0a00 	mov.w	sl, #0
    d34a:	e0eb      	b.n	d524 <process_event+0x280>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    d34c:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    d350:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    d352:	2901      	cmp	r1, #1
    d354:	d822      	bhi.n	d39c <process_event+0xf8>
	list->head = NULL;
    d356:	2100      	movs	r1, #0
    d358:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    d35c:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    d35e:	6825      	ldr	r5, [r4, #0]
    d360:	b29b      	uxth	r3, r3
	list->tail = NULL;
    d362:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    d366:	d10c      	bne.n	d382 <process_event+0xde>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    d368:	428d      	cmp	r5, r1
    d36a:	462a      	mov	r2, r5
    d36c:	bf38      	it	cc
    d36e:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    d370:	b12a      	cbz	r2, d37e <process_event+0xda>
				mgr->refs += 1U;
    d372:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    d374:	6812      	ldr	r2, [r2, #0]
    d376:	3101      	adds	r1, #1
    d378:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    d37a:	2a00      	cmp	r2, #0
    d37c:	d1f8      	bne.n	d370 <process_event+0xcc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    d37e:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
    d382:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    d384:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    d386:	f007 fe0e 	bl	14fa6 <process_recheck>
    d38a:	4606      	mov	r6, r0
    d38c:	2800      	cmp	r0, #0
    d38e:	d0cc      	beq.n	d32a <process_event+0x86>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    d390:	8ba3      	ldrh	r3, [r4, #28]
    d392:	f043 0320 	orr.w	r3, r3, #32
    d396:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    d398:	2600      	movs	r6, #0
    d39a:	e7c6      	b.n	d32a <process_event+0x86>
	} else if (state == ONOFF_STATE_TO_OFF) {
    d39c:	2a04      	cmp	r2, #4
    d39e:	d10d      	bne.n	d3bc <process_event+0x118>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    d3a0:	f023 0307 	bic.w	r3, r3, #7
    d3a4:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
    d3a6:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    d3a8:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    d3aa:	f007 fdfc 	bl	14fa6 <process_recheck>
    d3ae:	4605      	mov	r5, r0
    d3b0:	b180      	cbz	r0, d3d4 <process_event+0x130>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    d3b2:	f042 0220 	orr.w	r2, r2, #32
    d3b6:	2500      	movs	r5, #0
    d3b8:	83a2      	strh	r2, [r4, #28]
    d3ba:	e7ed      	b.n	d398 <process_event+0xf4>
		__ASSERT_NO_MSG(false);
    d3bc:	f240 121b 	movw	r2, #283	; 0x11b
    d3c0:	4639      	mov	r1, r7
    d3c2:	4640      	mov	r0, r8
    d3c4:	f007 fde2 	bl	14f8c <printk>
    d3c8:	f240 111b 	movw	r1, #283	; 0x11b
    d3cc:	4638      	mov	r0, r7
    d3ce:	f007 fea9 	bl	15124 <assert_post_action>
    d3d2:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    d3d4:	462e      	mov	r6, r5
    d3d6:	e7a8      	b.n	d32a <process_event+0x86>
		} else if (evt == EVT_START) {
    d3d8:	2803      	cmp	r0, #3
    d3da:	d131      	bne.n	d440 <process_event+0x19c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    d3dc:	f1ba 0f00 	cmp.w	sl, #0
    d3e0:	d00a      	beq.n	d3f8 <process_event+0x154>
    d3e2:	4639      	mov	r1, r7
    d3e4:	4640      	mov	r0, r8
    d3e6:	f44f 72ab 	mov.w	r2, #342	; 0x156
    d3ea:	f007 fdcf 	bl	14f8c <printk>
    d3ee:	f44f 71ab 	mov.w	r1, #342	; 0x156
    d3f2:	4638      	mov	r0, r7
    d3f4:	f007 fe96 	bl	15124 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    d3f8:	6823      	ldr	r3, [r4, #0]
    d3fa:	b953      	cbnz	r3, d412 <process_event+0x16e>
    d3fc:	4639      	mov	r1, r7
    d3fe:	4640      	mov	r0, r8
    d400:	f240 1257 	movw	r2, #343	; 0x157
    d404:	f007 fdc2 	bl	14f8c <printk>
    d408:	f240 1157 	movw	r1, #343	; 0x157
    d40c:	4638      	mov	r0, r7
    d40e:	f007 fe89 	bl	15124 <assert_post_action>
			transit = mgr->transitions->start;
    d412:	6923      	ldr	r3, [r4, #16]
    d414:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    d416:	b956      	cbnz	r6, d42e <process_event+0x18a>
    d418:	4639      	mov	r1, r7
    d41a:	4640      	mov	r0, r8
    d41c:	f44f 72ad 	mov.w	r2, #346	; 0x15a
    d420:	f007 fdb4 	bl	14f8c <printk>
    d424:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    d428:	4638      	mov	r0, r7
    d42a:	f007 fe7b 	bl	15124 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    d42e:	8ba3      	ldrh	r3, [r4, #28]
    d430:	f023 0307 	bic.w	r3, r3, #7
    d434:	f043 0306 	orr.w	r3, r3, #6
}
    d438:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    d43a:	83a3      	strh	r3, [r4, #28]
		res = 0;
    d43c:	46a9      	mov	r9, r5
}
    d43e:	e774      	b.n	d32a <process_event+0x86>
		} else if (evt == EVT_STOP) {
    d440:	2804      	cmp	r0, #4
    d442:	d12e      	bne.n	d4a2 <process_event+0x1fe>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    d444:	f1ba 0f02 	cmp.w	sl, #2
    d448:	d00a      	beq.n	d460 <process_event+0x1bc>
    d44a:	4639      	mov	r1, r7
    d44c:	4640      	mov	r0, r8
    d44e:	f240 125d 	movw	r2, #349	; 0x15d
    d452:	f007 fd9b 	bl	14f8c <printk>
    d456:	f240 115d 	movw	r1, #349	; 0x15d
    d45a:	4638      	mov	r0, r7
    d45c:	f007 fe62 	bl	15124 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    d460:	8be3      	ldrh	r3, [r4, #30]
    d462:	b153      	cbz	r3, d47a <process_event+0x1d6>
    d464:	4639      	mov	r1, r7
    d466:	4640      	mov	r0, r8
    d468:	f44f 72af 	mov.w	r2, #350	; 0x15e
    d46c:	f007 fd8e 	bl	14f8c <printk>
    d470:	f44f 71af 	mov.w	r1, #350	; 0x15e
    d474:	4638      	mov	r0, r7
    d476:	f007 fe55 	bl	15124 <assert_post_action>
			transit = mgr->transitions->stop;
    d47a:	6923      	ldr	r3, [r4, #16]
    d47c:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    d47e:	b956      	cbnz	r6, d496 <process_event+0x1f2>
    d480:	4639      	mov	r1, r7
    d482:	4640      	mov	r0, r8
    d484:	f240 1261 	movw	r2, #353	; 0x161
    d488:	f007 fd80 	bl	14f8c <printk>
    d48c:	f240 1161 	movw	r1, #353	; 0x161
    d490:	4638      	mov	r0, r7
    d492:	f007 fe47 	bl	15124 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    d496:	8ba3      	ldrh	r3, [r4, #28]
    d498:	f023 0307 	bic.w	r3, r3, #7
    d49c:	f043 0304 	orr.w	r3, r3, #4
    d4a0:	e7ca      	b.n	d438 <process_event+0x194>
		} else if (evt == EVT_RESET) {
    d4a2:	2805      	cmp	r0, #5
    d4a4:	d12e      	bne.n	d504 <process_event+0x260>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    d4a6:	f1ba 0f01 	cmp.w	sl, #1
    d4aa:	d00a      	beq.n	d4c2 <process_event+0x21e>
    d4ac:	4639      	mov	r1, r7
    d4ae:	4640      	mov	r0, r8
    d4b0:	f44f 72b2 	mov.w	r2, #356	; 0x164
    d4b4:	f007 fd6a 	bl	14f8c <printk>
    d4b8:	f44f 71b2 	mov.w	r1, #356	; 0x164
    d4bc:	4638      	mov	r0, r7
    d4be:	f007 fe31 	bl	15124 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    d4c2:	6823      	ldr	r3, [r4, #0]
    d4c4:	b953      	cbnz	r3, d4dc <process_event+0x238>
    d4c6:	4639      	mov	r1, r7
    d4c8:	4640      	mov	r0, r8
    d4ca:	f240 1265 	movw	r2, #357	; 0x165
    d4ce:	f007 fd5d 	bl	14f8c <printk>
    d4d2:	f240 1165 	movw	r1, #357	; 0x165
    d4d6:	4638      	mov	r0, r7
    d4d8:	f007 fe24 	bl	15124 <assert_post_action>
			transit = mgr->transitions->reset;
    d4dc:	6923      	ldr	r3, [r4, #16]
    d4de:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    d4e0:	b956      	cbnz	r6, d4f8 <process_event+0x254>
    d4e2:	4639      	mov	r1, r7
    d4e4:	4640      	mov	r0, r8
    d4e6:	f44f 72b4 	mov.w	r2, #360	; 0x168
    d4ea:	f007 fd4f 	bl	14f8c <printk>
    d4ee:	f44f 71b4 	mov.w	r1, #360	; 0x168
    d4f2:	4638      	mov	r0, r7
    d4f4:	f007 fe16 	bl	15124 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    d4f8:	8ba3      	ldrh	r3, [r4, #28]
    d4fa:	f023 0307 	bic.w	r3, r3, #7
    d4fe:	f043 0305 	orr.w	r3, r3, #5
    d502:	e799      	b.n	d438 <process_event+0x194>
			__ASSERT_NO_MSG(false);
    d504:	2500      	movs	r5, #0
    d506:	f240 126b 	movw	r2, #363	; 0x16b
    d50a:	4639      	mov	r1, r7
    d50c:	4640      	mov	r0, r8
    d50e:	f007 fd3d 	bl	14f8c <printk>
    d512:	f240 116b 	movw	r1, #363	; 0x16b
    d516:	4638      	mov	r0, r7
    d518:	f007 fe04 	bl	15124 <assert_post_action>
		onoff_transition_fn transit = NULL;
    d51c:	462e      	mov	r6, r5
    d51e:	e78d      	b.n	d43c <process_event+0x198>
				   && !sys_slist_is_empty(&mgr->monitors);
    d520:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    d524:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    d528:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
    d52a:	f104 0314 	add.w	r3, r4, #20
    d52e:	4618      	mov	r0, r3
    d530:	9301      	str	r3, [sp, #4]
    d532:	f003 faaf 	bl	10a94 <z_spin_unlock_valid>
    d536:	b940      	cbnz	r0, d54a <process_event+0x2a6>
    d538:	4640      	mov	r0, r8
    d53a:	4920      	ldr	r1, [pc, #128]	; (d5bc <process_event+0x318>)
    d53c:	22ac      	movs	r2, #172	; 0xac
    d53e:	f007 fd25 	bl	14f8c <printk>
    d542:	21ac      	movs	r1, #172	; 0xac
    d544:	481d      	ldr	r0, [pc, #116]	; (d5bc <process_event+0x318>)
    d546:	f007 fded 	bl	15124 <assert_post_action>
    d54a:	f38b 8811 	msr	BASEPRI, fp
    d54e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    d552:	f1ba 0f00 	cmp.w	sl, #0
    d556:	d139      	bne.n	d5cc <process_event+0x328>
	while (!sys_slist_is_empty(list)) {
    d558:	2d00      	cmp	r5, #0
    d55a:	d14c      	bne.n	d5f6 <process_event+0x352>
			if (transit != NULL) {
    d55c:	b116      	cbz	r6, d564 <process_event+0x2c0>
				transit(mgr, transition_complete);
    d55e:	4620      	mov	r0, r4
    d560:	4919      	ldr	r1, [pc, #100]	; (d5c8 <process_event+0x324>)
    d562:	47b0      	blx	r6
	__asm__ volatile(
    d564:	f04f 0320 	mov.w	r3, #32
    d568:	f3ef 8b11 	mrs	fp, BASEPRI
    d56c:	f383 8811 	msr	BASEPRI, r3
    d570:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d574:	9801      	ldr	r0, [sp, #4]
    d576:	f003 fa7f 	bl	10a78 <z_spin_lock_valid>
    d57a:	b940      	cbnz	r0, d58e <process_event+0x2ea>
    d57c:	4640      	mov	r0, r8
    d57e:	490f      	ldr	r1, [pc, #60]	; (d5bc <process_event+0x318>)
    d580:	2281      	movs	r2, #129	; 0x81
    d582:	f007 fd03 	bl	14f8c <printk>
    d586:	2181      	movs	r1, #129	; 0x81
    d588:	480c      	ldr	r0, [pc, #48]	; (d5bc <process_event+0x318>)
    d58a:	f007 fdcb 	bl	15124 <assert_post_action>
	z_spin_lock_set_owner(l);
    d58e:	9801      	ldr	r0, [sp, #4]
    d590:	f003 fa8e 	bl	10ab0 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    d594:	8ba3      	ldrh	r3, [r4, #28]
    d596:	f023 0308 	bic.w	r3, r3, #8
    d59a:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    d59c:	8ba3      	ldrh	r3, [r4, #28]
    d59e:	06da      	lsls	r2, r3, #27
    d5a0:	d531      	bpl.n	d606 <process_event+0x362>
			evt = EVT_COMPLETE;
    d5a2:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    d5a4:	f023 0310 	bic.w	r3, r3, #16
    d5a8:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    d5aa:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
    d5ae:	f00a 0a07 	and.w	sl, sl, #7
	} while (evt != EVT_NOP);
    d5b2:	2900      	cmp	r1, #0
    d5b4:	f47f aea1 	bne.w	d2fa <process_event+0x56>
out:
    d5b8:	e685      	b.n	d2c6 <process_event+0x22>
    d5ba:	bf00      	nop
    d5bc:	00017eac 	.word	0x00017eac
    d5c0:	00017e72 	.word	0x00017e72
    d5c4:	00017e8a 	.word	0x00017e8a
    d5c8:	0000d619 	.word	0x0000d619
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    d5cc:	68a1      	ldr	r1, [r4, #8]
    d5ce:	2900      	cmp	r1, #0
    d5d0:	d0c2      	beq.n	d558 <process_event+0x2b4>
	return node->next;
    d5d2:	680b      	ldr	r3, [r1, #0]
    d5d4:	2b00      	cmp	r3, #0
    d5d6:	bf38      	it	cc
    d5d8:	2300      	movcc	r3, #0
    d5da:	469a      	mov	sl, r3
		mon->callback(mgr, mon, state, res);
    d5dc:	4620      	mov	r0, r4
    d5de:	464b      	mov	r3, r9
    d5e0:	f8d1 b004 	ldr.w	fp, [r1, #4]
    d5e4:	9a00      	ldr	r2, [sp, #0]
    d5e6:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    d5e8:	f1ba 0f00 	cmp.w	sl, #0
    d5ec:	d0b4      	beq.n	d558 <process_event+0x2b4>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    d5ee:	4651      	mov	r1, sl
    d5f0:	f8da 3000 	ldr.w	r3, [sl]
    d5f4:	e7ee      	b.n	d5d4 <process_event+0x330>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    d5f6:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    d5f8:	464b      	mov	r3, r9
    d5fa:	4620      	mov	r0, r4
    d5fc:	9a00      	ldr	r2, [sp, #0]
    d5fe:	682d      	ldr	r5, [r5, #0]
    d600:	f007 fced 	bl	14fde <notify_one>
    d604:	e7a8      	b.n	d558 <process_event+0x2b4>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    d606:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    d60a:	bf1e      	ittt	ne
    d60c:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    d610:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    d612:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    d614:	e7c9      	b.n	d5aa <process_event+0x306>
    d616:	bf00      	nop

0000d618 <transition_complete>:
{
    d618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d61a:	4604      	mov	r4, r0
    d61c:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    d61e:	f100 0614 	add.w	r6, r0, #20
    d622:	f04f 0320 	mov.w	r3, #32
    d626:	f3ef 8711 	mrs	r7, BASEPRI
    d62a:	f383 8811 	msr	BASEPRI, r3
    d62e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d632:	4630      	mov	r0, r6
    d634:	f003 fa20 	bl	10a78 <z_spin_lock_valid>
    d638:	b940      	cbnz	r0, d64c <transition_complete+0x34>
    d63a:	490a      	ldr	r1, [pc, #40]	; (d664 <transition_complete+0x4c>)
    d63c:	480a      	ldr	r0, [pc, #40]	; (d668 <transition_complete+0x50>)
    d63e:	2281      	movs	r2, #129	; 0x81
    d640:	f007 fca4 	bl	14f8c <printk>
    d644:	2181      	movs	r1, #129	; 0x81
    d646:	4807      	ldr	r0, [pc, #28]	; (d664 <transition_complete+0x4c>)
    d648:	f007 fd6c 	bl	15124 <assert_post_action>
	z_spin_lock_set_owner(l);
    d64c:	4630      	mov	r0, r6
    d64e:	f003 fa2f 	bl	10ab0 <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
    d652:	463a      	mov	r2, r7
    d654:	4620      	mov	r0, r4
	mgr->last_res = res;
    d656:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    d658:	2101      	movs	r1, #1
}
    d65a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    d65e:	f7ff be21 	b.w	d2a4 <process_event>
    d662:	bf00      	nop
    d664:	00017eac 	.word	0x00017eac
    d668:	00017e72 	.word	0x00017e72

0000d66c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    d66c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d670:	4604      	mov	r4, r0
    d672:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    d674:	f007 fcc9 	bl	1500a <validate_args>

	if (rv < 0) {
    d678:	1e05      	subs	r5, r0, #0
    d67a:	db54      	blt.n	d726 <onoff_request+0xba>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    d67c:	f104 0914 	add.w	r9, r4, #20
    d680:	f04f 0320 	mov.w	r3, #32
    d684:	f3ef 8a11 	mrs	sl, BASEPRI
    d688:	f383 8811 	msr	BASEPRI, r3
    d68c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d690:	4648      	mov	r0, r9
    d692:	f003 f9f1 	bl	10a78 <z_spin_lock_valid>
    d696:	b940      	cbnz	r0, d6aa <onoff_request+0x3e>
    d698:	4933      	ldr	r1, [pc, #204]	; (d768 <onoff_request+0xfc>)
    d69a:	4834      	ldr	r0, [pc, #208]	; (d76c <onoff_request+0x100>)
    d69c:	2281      	movs	r2, #129	; 0x81
    d69e:	f007 fc75 	bl	14f8c <printk>
    d6a2:	2181      	movs	r1, #129	; 0x81
    d6a4:	4830      	ldr	r0, [pc, #192]	; (d768 <onoff_request+0xfc>)
    d6a6:	f007 fd3d 	bl	15124 <assert_post_action>
	z_spin_lock_set_owner(l);
    d6aa:	4648      	mov	r0, r9
    d6ac:	f003 fa00 	bl	10ab0 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    d6b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d6b4:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    d6b6:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    d6b8:	428b      	cmp	r3, r1
    d6ba:	f002 0607 	and.w	r6, r2, #7
    d6be:	d04a      	beq.n	d756 <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    d6c0:	2e02      	cmp	r6, #2
    d6c2:	d11f      	bne.n	d704 <onoff_request+0x98>
	rv = state;
    d6c4:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
    d6c6:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
    d6ca:	3301      	adds	r3, #1
    d6cc:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d6ce:	4648      	mov	r0, r9
    d6d0:	f003 f9e0 	bl	10a94 <z_spin_unlock_valid>
    d6d4:	b940      	cbnz	r0, d6e8 <onoff_request+0x7c>
    d6d6:	4924      	ldr	r1, [pc, #144]	; (d768 <onoff_request+0xfc>)
    d6d8:	4824      	ldr	r0, [pc, #144]	; (d76c <onoff_request+0x100>)
    d6da:	22ac      	movs	r2, #172	; 0xac
    d6dc:	f007 fc56 	bl	14f8c <printk>
    d6e0:	21ac      	movs	r1, #172	; 0xac
    d6e2:	4821      	ldr	r0, [pc, #132]	; (d768 <onoff_request+0xfc>)
    d6e4:	f007 fd1e 	bl	15124 <assert_post_action>
	__asm__ volatile(
    d6e8:	f38a 8811 	msr	BASEPRI, sl
    d6ec:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    d6f0:	f1b8 0f00 	cmp.w	r8, #0
    d6f4:	d017      	beq.n	d726 <onoff_request+0xba>
			notify_one(mgr, cli, state, 0);
    d6f6:	2300      	movs	r3, #0
    d6f8:	4632      	mov	r2, r6
    d6fa:	4639      	mov	r1, r7
    d6fc:	4620      	mov	r0, r4
    d6fe:	f007 fc6e 	bl	14fde <notify_one>
    d702:	e010      	b.n	d726 <onoff_request+0xba>
	} else if ((state == ONOFF_STATE_OFF)
    d704:	0793      	lsls	r3, r2, #30
    d706:	d001      	beq.n	d70c <onoff_request+0xa0>
		   || (state == ONOFF_STATE_TO_ON)) {
    d708:	2e06      	cmp	r6, #6
    d70a:	d10f      	bne.n	d72c <onoff_request+0xc0>
	parent->next = child;
    d70c:	2300      	movs	r3, #0
    d70e:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
    d710:	6863      	ldr	r3, [r4, #4]
    d712:	b9eb      	cbnz	r3, d750 <onoff_request+0xe4>
	list->head = node;
    d714:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    d718:	4635      	mov	r5, r6
    d71a:	b9f6      	cbnz	r6, d75a <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
    d71c:	4652      	mov	r2, sl
    d71e:	2102      	movs	r1, #2
    d720:	4620      	mov	r0, r4
    d722:	f7ff fdbf 	bl	d2a4 <process_event>
		}
	}

	return rv;
}
    d726:	4628      	mov	r0, r5
    d728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    d72c:	2e05      	cmp	r6, #5
    d72e:	d017      	beq.n	d760 <onoff_request+0xf4>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    d730:	2e01      	cmp	r6, #1
    d732:	d00a      	beq.n	d74a <onoff_request+0xde>
    d734:	490e      	ldr	r1, [pc, #56]	; (d770 <onoff_request+0x104>)
    d736:	480d      	ldr	r0, [pc, #52]	; (d76c <onoff_request+0x100>)
    d738:	f240 12c9 	movw	r2, #457	; 0x1c9
    d73c:	f007 fc26 	bl	14f8c <printk>
    d740:	f240 11c9 	movw	r1, #457	; 0x1c9
    d744:	480a      	ldr	r0, [pc, #40]	; (d770 <onoff_request+0x104>)
    d746:	f007 fced 	bl	15124 <assert_post_action>
		rv = -EIO;
    d74a:	f06f 0504 	mvn.w	r5, #4
    d74e:	e004      	b.n	d75a <onoff_request+0xee>
	parent->next = child;
    d750:	601f      	str	r7, [r3, #0]
	list->tail = node;
    d752:	6067      	str	r7, [r4, #4]
}
    d754:	e7e0      	b.n	d718 <onoff_request+0xac>
		rv = -EAGAIN;
    d756:	f06f 050a 	mvn.w	r5, #10
    d75a:	f04f 0800 	mov.w	r8, #0
    d75e:	e7b6      	b.n	d6ce <onoff_request+0x62>
		rv = -ENOTSUP;
    d760:	f06f 0585 	mvn.w	r5, #133	; 0x85
    d764:	e7f9      	b.n	d75a <onoff_request+0xee>
    d766:	bf00      	nop
    d768:	00017eac 	.word	0x00017eac
    d76c:	00017e72 	.word	0x00017e72
    d770:	00017e8a 	.word	0x00017e8a

0000d774 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    d774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d778:	468b      	mov	fp, r1
    d77a:	4692      	mov	sl, r2
    d77c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    d77e:	2500      	movs	r5, #0
{
    d780:	b091      	sub	sp, #68	; 0x44
    d782:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    d784:	f89a 0000 	ldrb.w	r0, [sl]
    d788:	b908      	cbnz	r0, d78e <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    d78a:	4628      	mov	r0, r5
    d78c:	e35e      	b.n	de4c <cbvprintf+0x6d8>
		if (*fp != '%') {
    d78e:	2825      	cmp	r0, #37	; 0x25
    d790:	f10a 0701 	add.w	r7, sl, #1
    d794:	d007      	beq.n	d7a6 <cbvprintf+0x32>
			OUTC('%');
    d796:	4659      	mov	r1, fp
    d798:	9b02      	ldr	r3, [sp, #8]
    d79a:	4798      	blx	r3
    d79c:	2800      	cmp	r0, #0
    d79e:	f2c0 8355 	blt.w	de4c <cbvprintf+0x6d8>
    d7a2:	3501      	adds	r5, #1
			break;
    d7a4:	e210      	b.n	dbc8 <cbvprintf+0x454>
		} state = {
    d7a6:	2218      	movs	r2, #24
    d7a8:	2100      	movs	r1, #0
    d7aa:	a80a      	add	r0, sp, #40	; 0x28
    d7ac:	f007 fe0d 	bl	153ca <memset>
	if (*sp == '%') {
    d7b0:	f89a 3001 	ldrb.w	r3, [sl, #1]
    d7b4:	2b25      	cmp	r3, #37	; 0x25
    d7b6:	d078      	beq.n	d8aa <cbvprintf+0x136>
    d7b8:	2200      	movs	r2, #0
    d7ba:	4694      	mov	ip, r2
    d7bc:	4616      	mov	r6, r2
    d7be:	4696      	mov	lr, r2
    d7c0:	4610      	mov	r0, r2
    d7c2:	4639      	mov	r1, r7
		switch (*sp) {
    d7c4:	f817 3b01 	ldrb.w	r3, [r7], #1
    d7c8:	2b2b      	cmp	r3, #43	; 0x2b
    d7ca:	f000 809d 	beq.w	d908 <cbvprintf+0x194>
    d7ce:	f200 8094 	bhi.w	d8fa <cbvprintf+0x186>
    d7d2:	2b20      	cmp	r3, #32
    d7d4:	f000 809b 	beq.w	d90e <cbvprintf+0x19a>
    d7d8:	2b23      	cmp	r3, #35	; 0x23
    d7da:	f000 809a 	beq.w	d912 <cbvprintf+0x19e>
    d7de:	b128      	cbz	r0, d7ec <cbvprintf+0x78>
    d7e0:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    d7e4:	f040 0004 	orr.w	r0, r0, #4
    d7e8:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    d7ec:	f1be 0f00 	cmp.w	lr, #0
    d7f0:	d005      	beq.n	d7fe <cbvprintf+0x8a>
    d7f2:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    d7f6:	f040 0008 	orr.w	r0, r0, #8
    d7fa:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    d7fe:	b12e      	cbz	r6, d80c <cbvprintf+0x98>
    d800:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    d804:	f040 0010 	orr.w	r0, r0, #16
    d808:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    d80c:	f1bc 0f00 	cmp.w	ip, #0
    d810:	d005      	beq.n	d81e <cbvprintf+0xaa>
    d812:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    d816:	f040 0020 	orr.w	r0, r0, #32
    d81a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    d81e:	b12a      	cbz	r2, d82c <cbvprintf+0xb8>
    d820:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    d824:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    d828:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    d82c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    d830:	f002 0044 	and.w	r0, r2, #68	; 0x44
    d834:	2844      	cmp	r0, #68	; 0x44
    d836:	d103      	bne.n	d840 <cbvprintf+0xcc>
		conv->flag_zero = false;
    d838:	f36f 1286 	bfc	r2, #6, #1
    d83c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    d840:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    d844:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    d846:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    d84a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    d84e:	d17b      	bne.n	d948 <cbvprintf+0x1d4>
		conv->width_star = true;
    d850:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    d854:	1c4b      	adds	r3, r1, #1
    d856:	f042 0201 	orr.w	r2, r2, #1
    d85a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    d85e:	781a      	ldrb	r2, [r3, #0]
    d860:	2a2e      	cmp	r2, #46	; 0x2e
    d862:	bf0c      	ite	eq
    d864:	2101      	moveq	r1, #1
    d866:	2100      	movne	r1, #0
    d868:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    d86c:	f361 0241 	bfi	r2, r1, #1, #1
    d870:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    d874:	d174      	bne.n	d960 <cbvprintf+0x1ec>
	if (*sp == '*') {
    d876:	785a      	ldrb	r2, [r3, #1]
    d878:	2a2a      	cmp	r2, #42	; 0x2a
    d87a:	d06a      	beq.n	d952 <cbvprintf+0x1de>
	size_t val = 0;
    d87c:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    d87e:	260a      	movs	r6, #10
    d880:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    d882:	4618      	mov	r0, r3
    d884:	f810 2b01 	ldrb.w	r2, [r0], #1
    d888:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    d88c:	2f09      	cmp	r7, #9
    d88e:	f240 808e 	bls.w	d9ae <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    d892:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    d896:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    d898:	f3c2 0040 	ubfx	r0, r2, #1, #1
    d89c:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    d8a0:	f361 0241 	bfi	r2, r1, #1, #1
    d8a4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    d8a8:	e05a      	b.n	d960 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    d8aa:	f10a 0702 	add.w	r7, sl, #2
    d8ae:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    d8b2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    d8b6:	07d9      	lsls	r1, r3, #31
    d8b8:	f140 8149 	bpl.w	db4e <cbvprintf+0x3da>
			width = va_arg(ap, int);
    d8bc:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    d8c0:	f1b9 0f00 	cmp.w	r9, #0
    d8c4:	da07      	bge.n	d8d6 <cbvprintf+0x162>
				conv->flag_dash = true;
    d8c6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
    d8ca:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
    d8ce:	f042 0204 	orr.w	r2, r2, #4
    d8d2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
    d8d6:	075a      	lsls	r2, r3, #29
    d8d8:	f140 8142 	bpl.w	db60 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    d8dc:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    d8e0:	f1b8 0f00 	cmp.w	r8, #0
    d8e4:	f280 8141 	bge.w	db6a <cbvprintf+0x3f6>
				conv->prec_present = false;
    d8e8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    d8ec:	f36f 0341 	bfc	r3, #1, #1
    d8f0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    d8f4:	f04f 38ff 	mov.w	r8, #4294967295
    d8f8:	e137      	b.n	db6a <cbvprintf+0x3f6>
		switch (*sp) {
    d8fa:	2b2d      	cmp	r3, #45	; 0x2d
    d8fc:	d00c      	beq.n	d918 <cbvprintf+0x1a4>
    d8fe:	2b30      	cmp	r3, #48	; 0x30
    d900:	f47f af6d 	bne.w	d7de <cbvprintf+0x6a>
			conv->flag_zero = true;
    d904:	2201      	movs	r2, #1
	} while (loop);
    d906:	e75c      	b.n	d7c2 <cbvprintf+0x4e>
			conv->flag_plus = true;
    d908:	f04f 0e01 	mov.w	lr, #1
    d90c:	e759      	b.n	d7c2 <cbvprintf+0x4e>
			conv->flag_space = true;
    d90e:	2601      	movs	r6, #1
    d910:	e757      	b.n	d7c2 <cbvprintf+0x4e>
			conv->flag_hash = true;
    d912:	f04f 0c01 	mov.w	ip, #1
    d916:	e754      	b.n	d7c2 <cbvprintf+0x4e>
		switch (*sp) {
    d918:	2001      	movs	r0, #1
    d91a:	e752      	b.n	d7c2 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    d91c:	4633      	mov	r3, r6
    d91e:	fb0c 0202 	mla	r2, ip, r2, r0
    d922:	3a30      	subs	r2, #48	; 0x30
    d924:	461e      	mov	r6, r3
    d926:	f816 0b01 	ldrb.w	r0, [r6], #1
    d92a:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    d92e:	2f09      	cmp	r7, #9
    d930:	d9f4      	bls.n	d91c <cbvprintf+0x1a8>
	if (sp != wp) {
    d932:	4299      	cmp	r1, r3
    d934:	d093      	beq.n	d85e <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    d936:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    d93a:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    d93c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    d93e:	f362 0141 	bfi	r1, r2, #1, #1
    d942:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    d946:	e78a      	b.n	d85e <cbvprintf+0xea>
    d948:	460b      	mov	r3, r1
	size_t val = 0;
    d94a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    d94c:	f04f 0c0a 	mov.w	ip, #10
    d950:	e7e8      	b.n	d924 <cbvprintf+0x1b0>
		conv->prec_star = true;
    d952:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    d956:	3302      	adds	r3, #2
		conv->prec_star = true;
    d958:	f042 0204 	orr.w	r2, r2, #4
    d95c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
    d960:	461f      	mov	r7, r3
    d962:	f817 2b01 	ldrb.w	r2, [r7], #1
    d966:	2a6c      	cmp	r2, #108	; 0x6c
    d968:	d041      	beq.n	d9ee <cbvprintf+0x27a>
    d96a:	d825      	bhi.n	d9b8 <cbvprintf+0x244>
    d96c:	2a68      	cmp	r2, #104	; 0x68
    d96e:	d02b      	beq.n	d9c8 <cbvprintf+0x254>
    d970:	2a6a      	cmp	r2, #106	; 0x6a
    d972:	d046      	beq.n	da02 <cbvprintf+0x28e>
    d974:	2a4c      	cmp	r2, #76	; 0x4c
    d976:	d04c      	beq.n	da12 <cbvprintf+0x29e>
    d978:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    d97a:	f817 2b01 	ldrb.w	r2, [r7], #1
    d97e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
    d982:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    d984:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    d988:	f200 80d9 	bhi.w	db3e <cbvprintf+0x3ca>
    d98c:	2a57      	cmp	r2, #87	; 0x57
    d98e:	d84d      	bhi.n	da2c <cbvprintf+0x2b8>
    d990:	2a41      	cmp	r2, #65	; 0x41
    d992:	d003      	beq.n	d99c <cbvprintf+0x228>
    d994:	3a45      	subs	r2, #69	; 0x45
    d996:	2a02      	cmp	r2, #2
    d998:	f200 80d1 	bhi.w	db3e <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    d99c:	2204      	movs	r2, #4
    d99e:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    d9a2:	f362 0302 	bfi	r3, r2, #0, #3
    d9a6:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    d9aa:	2301      	movs	r3, #1
			break;
    d9ac:	e09e      	b.n	daec <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    d9ae:	fb06 2101 	mla	r1, r6, r1, r2
    d9b2:	4603      	mov	r3, r0
    d9b4:	3930      	subs	r1, #48	; 0x30
    d9b6:	e764      	b.n	d882 <cbvprintf+0x10e>
	switch (*sp) {
    d9b8:	2a74      	cmp	r2, #116	; 0x74
    d9ba:	d026      	beq.n	da0a <cbvprintf+0x296>
    d9bc:	2a7a      	cmp	r2, #122	; 0x7a
    d9be:	d1db      	bne.n	d978 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    d9c0:	2206      	movs	r2, #6
    d9c2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    d9c6:	e00d      	b.n	d9e4 <cbvprintf+0x270>
		if (*++sp == 'h') {
    d9c8:	785a      	ldrb	r2, [r3, #1]
    d9ca:	2a68      	cmp	r2, #104	; 0x68
    d9cc:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    d9d0:	d106      	bne.n	d9e0 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    d9d2:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    d9d4:	f361 02c6 	bfi	r2, r1, #3, #4
    d9d8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    d9dc:	1c9f      	adds	r7, r3, #2
    d9de:	e7cc      	b.n	d97a <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    d9e0:	4613      	mov	r3, r2
    d9e2:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    d9e4:	f362 03c6 	bfi	r3, r2, #3, #4
    d9e8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    d9ec:	e7c5      	b.n	d97a <cbvprintf+0x206>
		if (*++sp == 'l') {
    d9ee:	785a      	ldrb	r2, [r3, #1]
    d9f0:	2a6c      	cmp	r2, #108	; 0x6c
    d9f2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    d9f6:	d101      	bne.n	d9fc <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    d9f8:	2104      	movs	r1, #4
    d9fa:	e7eb      	b.n	d9d4 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    d9fc:	4613      	mov	r3, r2
    d9fe:	2203      	movs	r2, #3
    da00:	e7f0      	b.n	d9e4 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    da02:	2205      	movs	r2, #5
    da04:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    da08:	e7ec      	b.n	d9e4 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    da0a:	2207      	movs	r2, #7
    da0c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    da10:	e7e8      	b.n	d9e4 <cbvprintf+0x270>
		conv->unsupported = true;
    da12:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    da16:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    da1a:	f023 0302 	bic.w	r3, r3, #2
    da1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    da22:	f043 0302 	orr.w	r3, r3, #2
    da26:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    da2a:	e7a6      	b.n	d97a <cbvprintf+0x206>
    da2c:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    da30:	2920      	cmp	r1, #32
    da32:	f200 8084 	bhi.w	db3e <cbvprintf+0x3ca>
    da36:	a001      	add	r0, pc, #4	; (adr r0, da3c <cbvprintf+0x2c8>)
    da38:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    da3c:	0000db01 	.word	0x0000db01
    da40:	0000db3f 	.word	0x0000db3f
    da44:	0000db3f 	.word	0x0000db3f
    da48:	0000db3f 	.word	0x0000db3f
    da4c:	0000db3f 	.word	0x0000db3f
    da50:	0000db3f 	.word	0x0000db3f
    da54:	0000db3f 	.word	0x0000db3f
    da58:	0000db3f 	.word	0x0000db3f
    da5c:	0000db3f 	.word	0x0000db3f
    da60:	0000d99d 	.word	0x0000d99d
    da64:	0000db3f 	.word	0x0000db3f
    da68:	0000db01 	.word	0x0000db01
    da6c:	0000dac1 	.word	0x0000dac1
    da70:	0000d99d 	.word	0x0000d99d
    da74:	0000d99d 	.word	0x0000d99d
    da78:	0000d99d 	.word	0x0000d99d
    da7c:	0000db3f 	.word	0x0000db3f
    da80:	0000dac1 	.word	0x0000dac1
    da84:	0000db3f 	.word	0x0000db3f
    da88:	0000db3f 	.word	0x0000db3f
    da8c:	0000db3f 	.word	0x0000db3f
    da90:	0000db3f 	.word	0x0000db3f
    da94:	0000db09 	.word	0x0000db09
    da98:	0000db01 	.word	0x0000db01
    da9c:	0000db25 	.word	0x0000db25
    daa0:	0000db3f 	.word	0x0000db3f
    daa4:	0000db3f 	.word	0x0000db3f
    daa8:	0000db25 	.word	0x0000db25
    daac:	0000db3f 	.word	0x0000db3f
    dab0:	0000db01 	.word	0x0000db01
    dab4:	0000db3f 	.word	0x0000db3f
    dab8:	0000db3f 	.word	0x0000db3f
    dabc:	0000db01 	.word	0x0000db01
		conv->specifier_cat = SPECIFIER_SINT;
    dac0:	2001      	movs	r0, #1
    dac2:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    dac6:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    daca:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    dace:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    dad0:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    dad4:	bf02      	ittt	eq
    dad6:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    dada:	f041 0101 	orreq.w	r1, r1, #1
    dade:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    dae2:	2a63      	cmp	r2, #99	; 0x63
    dae4:	d131      	bne.n	db4a <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    dae6:	3b00      	subs	r3, #0
    dae8:	bf18      	it	ne
    daea:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    daec:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    daf0:	f3c2 0140 	ubfx	r1, r2, #1, #1
    daf4:	430b      	orrs	r3, r1
    daf6:	f363 0241 	bfi	r2, r3, #1, #1
    dafa:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    dafe:	e6d8      	b.n	d8b2 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    db00:	2002      	movs	r0, #2
    db02:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    db06:	e7de      	b.n	dac6 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    db08:	2103      	movs	r1, #3
    db0a:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    db0e:	f003 0378 	and.w	r3, r3, #120	; 0x78
    db12:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    db16:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    db1a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    db1c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    db20:	4143      	adcs	r3, r0
    db22:	e7e3      	b.n	daec <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    db24:	2103      	movs	r1, #3
    db26:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    db2a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    db2e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    db32:	bf14      	ite	ne
    db34:	2301      	movne	r3, #1
    db36:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
    db38:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    db3c:	e7d6      	b.n	daec <cbvprintf+0x378>
		conv->invalid = true;
    db3e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    db42:	f043 0301 	orr.w	r3, r3, #1
    db46:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    db4a:	2300      	movs	r3, #0
    db4c:	e7ce      	b.n	daec <cbvprintf+0x378>
		} else if (conv->width_present) {
    db4e:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    db52:	2a00      	cmp	r2, #0
		int width = -1;
    db54:	bfac      	ite	ge
    db56:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
    db5a:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
    db5e:	e6ba      	b.n	d8d6 <cbvprintf+0x162>
		} else if (conv->prec_present) {
    db60:	079b      	lsls	r3, r3, #30
    db62:	f57f aec7 	bpl.w	d8f4 <cbvprintf+0x180>
			precision = conv->prec_value;
    db66:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
    db6a:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    db6c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    db70:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
    db74:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
    db78:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    db7c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    db7e:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    db82:	d136      	bne.n	dbf2 <cbvprintf+0x47e>
			switch (length_mod) {
    db84:	1ed3      	subs	r3, r2, #3
    db86:	2b04      	cmp	r3, #4
    db88:	d820      	bhi.n	dbcc <cbvprintf+0x458>
    db8a:	e8df f003 	tbb	[pc, r3]
    db8e:	0703      	.short	0x0703
    db90:	1f07      	.short	0x1f07
    db92:	1f          	.byte	0x1f
    db93:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    db94:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
    db98:	17c1      	asrs	r1, r0, #31
    db9a:	e004      	b.n	dba6 <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
    db9c:	3407      	adds	r4, #7
    db9e:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    dba2:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
    dba6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    dbaa:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    dbae:	f013 0603 	ands.w	r6, r3, #3
    dbb2:	d054      	beq.n	dc5e <cbvprintf+0x4ea>
			OUTS(sp, fp);
    dbb4:	463b      	mov	r3, r7
    dbb6:	4652      	mov	r2, sl
    dbb8:	4659      	mov	r1, fp
    dbba:	9802      	ldr	r0, [sp, #8]
    dbbc:	f007 fa9c 	bl	150f8 <outs>
    dbc0:	2800      	cmp	r0, #0
    dbc2:	f2c0 8143 	blt.w	de4c <cbvprintf+0x6d8>
    dbc6:	4405      	add	r5, r0
			continue;
    dbc8:	46ba      	mov	sl, r7
    dbca:	e5db      	b.n	d784 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    dbcc:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
    dbd0:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    dbd2:	ea4f 71e0 	mov.w	r1, r0, asr #31
    dbd6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    dbda:	d105      	bne.n	dbe8 <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
    dbdc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    dbe0:	930a      	str	r3, [sp, #40]	; 0x28
    dbe2:	2300      	movs	r3, #0
    dbe4:	930b      	str	r3, [sp, #44]	; 0x2c
    dbe6:	e7e0      	b.n	dbaa <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
    dbe8:	2a02      	cmp	r2, #2
    dbea:	d1de      	bne.n	dbaa <cbvprintf+0x436>
				value->sint = (short)value->sint;
    dbec:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
    dbf0:	e7d2      	b.n	db98 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    dbf2:	2b02      	cmp	r3, #2
    dbf4:	d123      	bne.n	dc3e <cbvprintf+0x4ca>
			switch (length_mod) {
    dbf6:	1ed3      	subs	r3, r2, #3
    dbf8:	2b04      	cmp	r3, #4
    dbfa:	d813      	bhi.n	dc24 <cbvprintf+0x4b0>
    dbfc:	e8df f003 	tbb	[pc, r3]
    dc00:	120a0a03 	.word	0x120a0a03
    dc04:	12          	.byte	0x12
    dc05:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
    dc06:	2100      	movs	r1, #0
					value->uint = (wchar_t)va_arg(ap,
    dc08:	6820      	ldr	r0, [r4, #0]
    dc0a:	1d23      	adds	r3, r4, #4
    dc0c:	900a      	str	r0, [sp, #40]	; 0x28
    dc0e:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    dc10:	461c      	mov	r4, r3
    dc12:	e7ca      	b.n	dbaa <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
    dc14:	3407      	adds	r4, #7
    dc16:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
    dc1a:	e8f3 0102 	ldrd	r0, r1, [r3], #8
    dc1e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
    dc22:	e7f5      	b.n	dc10 <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
    dc24:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    dc28:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
    dc2a:	930a      	str	r3, [sp, #40]	; 0x28
    dc2c:	f04f 0300 	mov.w	r3, #0
    dc30:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    dc32:	d0d3      	beq.n	dbdc <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
    dc34:	2a02      	cmp	r2, #2
    dc36:	d1b8      	bne.n	dbaa <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
    dc38:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    dc3c:	e7d0      	b.n	dbe0 <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
    dc3e:	2b04      	cmp	r3, #4
    dc40:	d107      	bne.n	dc52 <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
    dc42:	3407      	adds	r4, #7
    dc44:	f024 0407 	bic.w	r4, r4, #7
    dc48:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
    dc4c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    dc50:	e7ab      	b.n	dbaa <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
    dc52:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    dc54:	bf04      	itt	eq
    dc56:	f854 3b04 	ldreq.w	r3, [r4], #4
    dc5a:	930a      	streq	r3, [sp, #40]	; 0x28
    dc5c:	e7a5      	b.n	dbaa <cbvprintf+0x436>
		switch (conv->specifier) {
    dc5e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    dc62:	2878      	cmp	r0, #120	; 0x78
    dc64:	d8b0      	bhi.n	dbc8 <cbvprintf+0x454>
    dc66:	2862      	cmp	r0, #98	; 0x62
    dc68:	d822      	bhi.n	dcb0 <cbvprintf+0x53c>
    dc6a:	2825      	cmp	r0, #37	; 0x25
    dc6c:	f43f ad93 	beq.w	d796 <cbvprintf+0x22>
    dc70:	2858      	cmp	r0, #88	; 0x58
    dc72:	d1a9      	bne.n	dbc8 <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
    dc74:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    dc78:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    dc7c:	9300      	str	r3, [sp, #0]
    dc7e:	aa0c      	add	r2, sp, #48	; 0x30
    dc80:	ab04      	add	r3, sp, #16
    dc82:	f007 f9ee 	bl	15062 <encode_uint>
    dc86:	4682      	mov	sl, r0
			if (precision >= 0) {
    dc88:	f1b8 0f00 	cmp.w	r8, #0
    dc8c:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    dc90:	db0c      	blt.n	dcac <cbvprintf+0x538>
				conv->flag_zero = false;
    dc92:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    dc96:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    dc9a:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    dc9e:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    dca0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    dca4:	d902      	bls.n	dcac <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
    dca6:	eba8 0303 	sub.w	r3, r8, r3
    dcaa:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    dcac:	4680      	mov	r8, r0
    dcae:	e03d      	b.n	dd2c <cbvprintf+0x5b8>
    dcb0:	3863      	subs	r0, #99	; 0x63
    dcb2:	2815      	cmp	r0, #21
    dcb4:	d888      	bhi.n	dbc8 <cbvprintf+0x454>
    dcb6:	a101      	add	r1, pc, #4	; (adr r1, dcbc <cbvprintf+0x548>)
    dcb8:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
    dcbc:	0000dd3d 	.word	0x0000dd3d
    dcc0:	0000dda1 	.word	0x0000dda1
    dcc4:	0000dbc9 	.word	0x0000dbc9
    dcc8:	0000dbc9 	.word	0x0000dbc9
    dccc:	0000dbc9 	.word	0x0000dbc9
    dcd0:	0000dbc9 	.word	0x0000dbc9
    dcd4:	0000dda1 	.word	0x0000dda1
    dcd8:	0000dbc9 	.word	0x0000dbc9
    dcdc:	0000dbc9 	.word	0x0000dbc9
    dce0:	0000dbc9 	.word	0x0000dbc9
    dce4:	0000dbc9 	.word	0x0000dbc9
    dce8:	0000ddff 	.word	0x0000ddff
    dcec:	0000ddcd 	.word	0x0000ddcd
    dcf0:	0000ddd1 	.word	0x0000ddd1
    dcf4:	0000dbc9 	.word	0x0000dbc9
    dcf8:	0000dbc9 	.word	0x0000dbc9
    dcfc:	0000dd15 	.word	0x0000dd15
    dd00:	0000dbc9 	.word	0x0000dbc9
    dd04:	0000ddcd 	.word	0x0000ddcd
    dd08:	0000dbc9 	.word	0x0000dbc9
    dd0c:	0000dbc9 	.word	0x0000dbc9
    dd10:	0000ddcd 	.word	0x0000ddcd
			if (precision >= 0) {
    dd14:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    dd18:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    dd1c:	db0a      	blt.n	dd34 <cbvprintf+0x5c0>
				len = strnlen(bps, precision);
    dd1e:	4641      	mov	r1, r8
    dd20:	4650      	mov	r0, sl
    dd22:	f007 faeb 	bl	152fc <strnlen>
		char sign = 0;
    dd26:	2600      	movs	r6, #0
			bpe = bps + len;
    dd28:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
    dd2c:	f1ba 0f00 	cmp.w	sl, #0
    dd30:	d10c      	bne.n	dd4c <cbvprintf+0x5d8>
    dd32:	e749      	b.n	dbc8 <cbvprintf+0x454>
				len = strlen(bps);
    dd34:	4650      	mov	r0, sl
    dd36:	f007 fada 	bl	152ee <strlen>
    dd3a:	e7f4      	b.n	dd26 <cbvprintf+0x5b2>
			break;
    dd3c:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    dd3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bpe = buf + 1;
    dd40:	f10d 0811 	add.w	r8, sp, #17
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    dd44:	f88d 3010 	strb.w	r3, [sp, #16]
			bps = buf;
    dd48:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
    dd4c:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    dd50:	b106      	cbz	r6, dd54 <cbvprintf+0x5e0>
			nj_len += 1U;
    dd52:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    dd54:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    dd58:	06d0      	lsls	r0, r2, #27
    dd5a:	d56b      	bpl.n	de34 <cbvprintf+0x6c0>
			nj_len += 2U;
    dd5c:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    dd5e:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    dd60:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    dd62:	bf48      	it	mi
    dd64:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    dd66:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    dd68:	bf48      	it	mi
    dd6a:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    dd6c:	f1b9 0f00 	cmp.w	r9, #0
    dd70:	dd79      	ble.n	de66 <cbvprintf+0x6f2>
			if (!conv->flag_dash) {
    dd72:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    dd76:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    dd7a:	f3c2 0380 	ubfx	r3, r2, #2, #1
    dd7e:	9303      	str	r3, [sp, #12]
    dd80:	0753      	lsls	r3, r2, #29
    dd82:	d470      	bmi.n	de66 <cbvprintf+0x6f2>
				if (conv->flag_zero) {
    dd84:	0650      	lsls	r0, r2, #25
    dd86:	d564      	bpl.n	de52 <cbvprintf+0x6de>
					if (sign != 0) {
    dd88:	b146      	cbz	r6, dd9c <cbvprintf+0x628>
						OUTC(sign);
    dd8a:	4659      	mov	r1, fp
    dd8c:	4630      	mov	r0, r6
    dd8e:	9b02      	ldr	r3, [sp, #8]
    dd90:	4798      	blx	r3
    dd92:	2800      	cmp	r0, #0
    dd94:	db5a      	blt.n	de4c <cbvprintf+0x6d8>
						sign = 0;
    dd96:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    dd98:	3501      	adds	r5, #1
						sign = 0;
    dd9a:	461e      	mov	r6, r3
					pad = '0';
    dd9c:	2330      	movs	r3, #48	; 0x30
    dd9e:	e059      	b.n	de54 <cbvprintf+0x6e0>
			if (conv->flag_plus) {
    dda0:	071e      	lsls	r6, r3, #28
    dda2:	d411      	bmi.n	ddc8 <cbvprintf+0x654>
				sign = ' ';
    dda4:	f013 0610 	ands.w	r6, r3, #16
    dda8:	bf18      	it	ne
    ddaa:	2620      	movne	r6, #32
			sint = value->sint;
    ddac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    ddb0:	2a00      	cmp	r2, #0
    ddb2:	f173 0100 	sbcs.w	r1, r3, #0
    ddb6:	f6bf af5d 	bge.w	dc74 <cbvprintf+0x500>
				value->uint = (uint_value_type)-sint;
    ddba:	4252      	negs	r2, r2
    ddbc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    ddc0:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    ddc2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    ddc6:	e755      	b.n	dc74 <cbvprintf+0x500>
				sign = '+';
    ddc8:	262b      	movs	r6, #43	; 0x2b
    ddca:	e7ef      	b.n	ddac <cbvprintf+0x638>
		switch (conv->specifier) {
    ddcc:	2600      	movs	r6, #0
    ddce:	e751      	b.n	dc74 <cbvprintf+0x500>
			if (value->ptr != NULL) {
    ddd0:	980a      	ldr	r0, [sp, #40]	; 0x28
    ddd2:	b348      	cbz	r0, de28 <cbvprintf+0x6b4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    ddd4:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    ddd8:	9300      	str	r3, [sp, #0]
    ddda:	2100      	movs	r1, #0
    dddc:	ab04      	add	r3, sp, #16
    ddde:	aa0c      	add	r2, sp, #48	; 0x30
    dde0:	f007 f93f 	bl	15062 <encode_uint>
				conv->altform_0c = true;
    dde4:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
    dde8:	4682      	mov	sl, r0
				conv->altform_0c = true;
    ddea:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    ddee:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    ddf2:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    ddf6:	2600      	movs	r6, #0
				conv->altform_0c = true;
    ddf8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
    ddfc:	e744      	b.n	dc88 <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
    ddfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    de00:	2a07      	cmp	r2, #7
    de02:	f63f aee1 	bhi.w	dbc8 <cbvprintf+0x454>
    de06:	e8df f002 	tbb	[pc, r2]
    de0a:	040d      	.short	0x040d
    de0c:	08080d06 	.word	0x08080d06
    de10:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    de12:	701d      	strb	r5, [r3, #0]
		break;
    de14:	e6d8      	b.n	dbc8 <cbvprintf+0x454>
		*(short *)dp = (short)count;
    de16:	801d      	strh	r5, [r3, #0]
		break;
    de18:	e6d6      	b.n	dbc8 <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
    de1a:	4628      	mov	r0, r5
    de1c:	17e9      	asrs	r1, r5, #31
    de1e:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    de22:	e6d1      	b.n	dbc8 <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    de24:	601d      	str	r5, [r3, #0]
		break;
    de26:	e6cf      	b.n	dbc8 <cbvprintf+0x454>
			bpe = bps + 5;
    de28:	f8df 80c4 	ldr.w	r8, [pc, #196]	; def0 <cbvprintf+0x77c>
    de2c:	4606      	mov	r6, r0
			bps = "(nil)";
    de2e:	f1a8 0a05 	sub.w	sl, r8, #5
    de32:	e78b      	b.n	dd4c <cbvprintf+0x5d8>
		} else if (conv->altform_0) {
    de34:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    de36:	bf48      	it	mi
    de38:	3301      	addmi	r3, #1
    de3a:	e790      	b.n	dd5e <cbvprintf+0x5ea>
					OUTC(pad);
    de3c:	4618      	mov	r0, r3
    de3e:	9303      	str	r3, [sp, #12]
    de40:	4659      	mov	r1, fp
    de42:	9b02      	ldr	r3, [sp, #8]
    de44:	4798      	blx	r3
    de46:	2800      	cmp	r0, #0
    de48:	9b03      	ldr	r3, [sp, #12]
    de4a:	da04      	bge.n	de56 <cbvprintf+0x6e2>
#undef OUTS
#undef OUTC
}
    de4c:	b011      	add	sp, #68	; 0x44
    de4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    de52:	2320      	movs	r3, #32
    de54:	444d      	add	r5, r9
    de56:	464a      	mov	r2, r9
				while (width-- > 0) {
    de58:	2a00      	cmp	r2, #0
    de5a:	eba5 0109 	sub.w	r1, r5, r9
    de5e:	f109 39ff 	add.w	r9, r9, #4294967295
    de62:	dceb      	bgt.n	de3c <cbvprintf+0x6c8>
    de64:	460d      	mov	r5, r1
		if (sign != 0) {
    de66:	b136      	cbz	r6, de76 <cbvprintf+0x702>
			OUTC(sign);
    de68:	4659      	mov	r1, fp
    de6a:	4630      	mov	r0, r6
    de6c:	9b02      	ldr	r3, [sp, #8]
    de6e:	4798      	blx	r3
    de70:	2800      	cmp	r0, #0
    de72:	dbeb      	blt.n	de4c <cbvprintf+0x6d8>
    de74:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    de76:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    de7a:	06d9      	lsls	r1, r3, #27
    de7c:	d401      	bmi.n	de82 <cbvprintf+0x70e>
    de7e:	071a      	lsls	r2, r3, #28
    de80:	d506      	bpl.n	de90 <cbvprintf+0x71c>
				OUTC('0');
    de82:	4659      	mov	r1, fp
    de84:	2030      	movs	r0, #48	; 0x30
    de86:	9b02      	ldr	r3, [sp, #8]
    de88:	4798      	blx	r3
    de8a:	2800      	cmp	r0, #0
    de8c:	dbde      	blt.n	de4c <cbvprintf+0x6d8>
    de8e:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    de90:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    de94:	06db      	lsls	r3, r3, #27
    de96:	d507      	bpl.n	dea8 <cbvprintf+0x734>
				OUTC(conv->specifier);
    de98:	4659      	mov	r1, fp
    de9a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    de9e:	9b02      	ldr	r3, [sp, #8]
    dea0:	4798      	blx	r3
    dea2:	2800      	cmp	r0, #0
    dea4:	dbd2      	blt.n	de4c <cbvprintf+0x6d8>
    dea6:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    dea8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    deaa:	442e      	add	r6, r5
    deac:	1b73      	subs	r3, r6, r5
    deae:	2b00      	cmp	r3, #0
    deb0:	dc16      	bgt.n	dee0 <cbvprintf+0x76c>
			OUTS(bps, bpe);
    deb2:	4643      	mov	r3, r8
    deb4:	4652      	mov	r2, sl
    deb6:	4659      	mov	r1, fp
    deb8:	9802      	ldr	r0, [sp, #8]
    deba:	f007 f91d 	bl	150f8 <outs>
    debe:	2800      	cmp	r0, #0
    dec0:	dbc4      	blt.n	de4c <cbvprintf+0x6d8>
    dec2:	4405      	add	r5, r0
		while (width > 0) {
    dec4:	44a9      	add	r9, r5
    dec6:	eba9 0305 	sub.w	r3, r9, r5
    deca:	2b00      	cmp	r3, #0
    decc:	f77f ae7c 	ble.w	dbc8 <cbvprintf+0x454>
			OUTC(' ');
    ded0:	4659      	mov	r1, fp
    ded2:	2020      	movs	r0, #32
    ded4:	9b02      	ldr	r3, [sp, #8]
    ded6:	4798      	blx	r3
    ded8:	2800      	cmp	r0, #0
    deda:	dbb7      	blt.n	de4c <cbvprintf+0x6d8>
    dedc:	3501      	adds	r5, #1
			--width;
    dede:	e7f2      	b.n	dec6 <cbvprintf+0x752>
				OUTC('0');
    dee0:	4659      	mov	r1, fp
    dee2:	2030      	movs	r0, #48	; 0x30
    dee4:	9b02      	ldr	r3, [sp, #8]
    dee6:	4798      	blx	r3
    dee8:	2800      	cmp	r0, #0
    deea:	dbaf      	blt.n	de4c <cbvprintf+0x6d8>
    deec:	3501      	adds	r5, #1
    deee:	e7dd      	b.n	deac <cbvprintf+0x738>
    def0:	00017ed7 	.word	0x00017ed7

0000def4 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
    def4:	4604      	mov	r4, r0
    def6:	b508      	push	{r3, lr}
	__asm__ volatile(
    def8:	f04f 0220 	mov.w	r2, #32
    defc:	f3ef 8311 	mrs	r3, BASEPRI
    df00:	f382 8811 	msr	BASEPRI, r2
    df04:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    df08:	f007 f99d 	bl	15246 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    df0c:	4620      	mov	r0, r4
    df0e:	f001 fb67 	bl	f5e0 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    df12:	4803      	ldr	r0, [pc, #12]	; (df20 <sys_reboot+0x2c>)
    df14:	f007 f83a 	bl	14f8c <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    df18:	f001 f832 	bl	ef80 <arch_cpu_idle>
    df1c:	e7fc      	b.n	df18 <sys_reboot+0x24>
    df1e:	bf00      	nop
    df20:	00017ed8 	.word	0x00017ed8

0000df24 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    df24:	6802      	ldr	r2, [r0, #0]
{
    df26:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    df28:	0953      	lsrs	r3, r2, #5
{
    df2a:	4604      	mov	r4, r0
    switch (port)
    df2c:	d029      	beq.n	df82 <nrf_gpio_pin_port_decode+0x5e>
    df2e:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    df30:	f64f 73ff 	movw	r3, #65535	; 0xffff
    df34:	bf18      	it	ne
    df36:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
    df38:	f002 021f 	and.w	r2, r2, #31

    return (mask & (1UL << pin_number)) ? true : false;
    df3c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    df3e:	07db      	lsls	r3, r3, #31
    df40:	d40a      	bmi.n	df58 <nrf_gpio_pin_port_decode+0x34>
    df42:	4912      	ldr	r1, [pc, #72]	; (df8c <nrf_gpio_pin_port_decode+0x68>)
    df44:	4812      	ldr	r0, [pc, #72]	; (df90 <nrf_gpio_pin_port_decode+0x6c>)
    df46:	f44f 7205 	mov.w	r2, #532	; 0x214
    df4a:	f007 f81f 	bl	14f8c <printk>
    df4e:	f44f 7105 	mov.w	r1, #532	; 0x214
    df52:	480e      	ldr	r0, [pc, #56]	; (df8c <nrf_gpio_pin_port_decode+0x68>)
    df54:	f007 f8e6 	bl	15124 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    df58:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    df5a:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    df5e:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    df60:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    df62:	d00c      	beq.n	df7e <nrf_gpio_pin_port_decode+0x5a>
    df64:	2b01      	cmp	r3, #1
    df66:	d00f      	beq.n	df88 <nrf_gpio_pin_port_decode+0x64>
            NRFX_ASSERT(0);
    df68:	4908      	ldr	r1, [pc, #32]	; (df8c <nrf_gpio_pin_port_decode+0x68>)
    df6a:	4809      	ldr	r0, [pc, #36]	; (df90 <nrf_gpio_pin_port_decode+0x6c>)
    df6c:	f240 2219 	movw	r2, #537	; 0x219
    df70:	f007 f80c 	bl	14f8c <printk>
    df74:	f240 2119 	movw	r1, #537	; 0x219
    df78:	4804      	ldr	r0, [pc, #16]	; (df8c <nrf_gpio_pin_port_decode+0x68>)
    df7a:	f007 f8d3 	bl	15124 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    df7e:	4805      	ldr	r0, [pc, #20]	; (df94 <nrf_gpio_pin_port_decode+0x70>)
}
    df80:	bd10      	pop	{r4, pc}
    switch (port)
    df82:	f04f 33ff 	mov.w	r3, #4294967295
    df86:	e7d7      	b.n	df38 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    df88:	4803      	ldr	r0, [pc, #12]	; (df98 <nrf_gpio_pin_port_decode+0x74>)
    df8a:	e7f9      	b.n	df80 <nrf_gpio_pin_port_decode+0x5c>
    df8c:	00017f01 	.word	0x00017f01
    df90:	00017e72 	.word	0x00017e72
    df94:	50842500 	.word	0x50842500
    df98:	50842800 	.word	0x50842800

0000df9c <nordicsemi_nrf53_init>:

#define LOG_LEVEL CONFIG_SOC_LOG_LEVEL
LOG_MODULE_REGISTER(soc);

static int nordicsemi_nrf53_init(const struct device *arg)
{
    df9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    df9e:	f04f 0320 	mov.w	r3, #32
    dfa2:	f3ef 8711 	mrs	r7, BASEPRI
    dfa6:	f383 8811 	msr	BASEPRI, r3
    dfaa:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
    dfae:	2401      	movs	r4, #1
    dfb0:	4b19      	ldr	r3, [pc, #100]	; (e018 <nordicsemi_nrf53_init+0x7c>)
    dfb2:	2600      	movs	r6, #0
    dfb4:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
    dfb8:	2302      	movs	r3, #2
    dfba:	4d18      	ldr	r5, [pc, #96]	; (e01c <nordicsemi_nrf53_init+0x80>)
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    dfbc:	a801      	add	r0, sp, #4
    dfbe:	f8c5 36d0 	str.w	r3, [r5, #1744]	; 0x6d0
			NRF_OSCILLATORS_LFXO_CAP_7PF :
		IS_ENABLED(CONFIG_SOC_LFXO_CAP_INT_9PF) ?
			NRF_OSCILLATORS_LFXO_CAP_9PF :
			NRF_OSCILLATORS_LFXO_CAP_EXTERNAL);
	/* This can only be done from secure code. */
	nrf_gpio_pin_mcu_select(PIN_XL1, NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
    dfc2:	9601      	str	r6, [sp, #4]
    dfc4:	f7ff ffae 	bl	df24 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    dfc8:	9b01      	ldr	r3, [sp, #4]
    dfca:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    dfce:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    dfd2:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
    dfd6:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    dfda:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    dfde:	a801      	add	r0, sp, #4
    dfe0:	9401      	str	r4, [sp, #4]
    dfe2:	f7ff ff9f 	bl	df24 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    dfe6:	9b01      	ldr	r3, [sp, #4]
    dfe8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    dfec:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    dff0:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
    dff4:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    dff8:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    dffc:	f8c5 4704 	str.w	r4, [r5, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
    e000:	f8c5 4904 	str.w	r4, [r5, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    e004:	f8c5 4b00 	str.w	r4, [r5, #2816]	; 0xb00
	__asm__ volatile(
    e008:	f387 8811 	msr	BASEPRI, r7
    e00c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    e010:	4630      	mov	r0, r6
    e012:	b003      	add	sp, #12
    e014:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e016:	bf00      	nop
    e018:	50001000 	.word	0x50001000
    e01c:	50004000 	.word	0x50004000

0000e020 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    e020:	b148      	cbz	r0, e036 <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    e022:	4b05      	ldr	r3, [pc, #20]	; (e038 <arch_busy_wait+0x18>)
    e024:	681a      	ldr	r2, [r3, #0]
    e026:	4b05      	ldr	r3, [pc, #20]	; (e03c <arch_busy_wait+0x1c>)
    e028:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    e02c:	4b04      	ldr	r3, [pc, #16]	; (e040 <arch_busy_wait+0x20>)
    delay_cycles(cycles);
    e02e:	4350      	muls	r0, r2
    e030:	f043 0301 	orr.w	r3, r3, #1
    e034:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    e036:	4770      	bx	lr
    e038:	20000040 	.word	0x20000040
    e03c:	000f4240 	.word	0x000f4240
    e040:	00017a40 	.word	0x00017a40

0000e044 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void pm_power_state_set(struct pm_state_info info)
{
    e044:	b084      	sub	sp, #16
    e046:	ab04      	add	r3, sp, #16
    e048:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    e04c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    e050:	2b06      	cmp	r3, #6
    e052:	d107      	bne.n	e064 <pm_power_state_set+0x20>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    e054:	2201      	movs	r2, #1
    e056:	4b04      	ldr	r3, [pc, #16]	; (e068 <pm_power_state_set+0x24>)
    e058:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    e05c:	f3bf 8f4f 	dsb	sy
        __WFE();
    e060:	bf20      	wfe
    while (true)
    e062:	e7fd      	b.n	e060 <pm_power_state_set+0x1c>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    e064:	b004      	add	sp, #16
    e066:	4770      	bx	lr
    e068:	50004000 	.word	0x50004000

0000e06c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    e06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e06e:	4605      	mov	r5, r0
	__asm__ volatile(
    e070:	f04f 0320 	mov.w	r3, #32
    e074:	f3ef 8611 	mrs	r6, BASEPRI
    e078:	f383 8811 	msr	BASEPRI, r3
    e07c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e080:	4819      	ldr	r0, [pc, #100]	; (e0e8 <pm_state_notify+0x7c>)
    e082:	f002 fcf9 	bl	10a78 <z_spin_lock_valid>
    e086:	b940      	cbnz	r0, e09a <pm_state_notify+0x2e>
    e088:	4918      	ldr	r1, [pc, #96]	; (e0ec <pm_state_notify+0x80>)
    e08a:	4819      	ldr	r0, [pc, #100]	; (e0f0 <pm_state_notify+0x84>)
    e08c:	2281      	movs	r2, #129	; 0x81
    e08e:	f006 ff7d 	bl	14f8c <printk>
    e092:	2181      	movs	r1, #129	; 0x81
    e094:	4815      	ldr	r0, [pc, #84]	; (e0ec <pm_state_notify+0x80>)
    e096:	f007 f845 	bl	15124 <assert_post_action>
	z_spin_lock_set_owner(l);
    e09a:	4813      	ldr	r0, [pc, #76]	; (e0e8 <pm_state_notify+0x7c>)
    e09c:	f002 fd08 	bl	10ab0 <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    e0a0:	4b14      	ldr	r3, [pc, #80]	; (e0f4 <pm_state_notify+0x88>)
    e0a2:	681c      	ldr	r4, [r3, #0]
    e0a4:	2c00      	cmp	r4, #0
    e0a6:	bf38      	it	cc
    e0a8:	2400      	movcc	r4, #0
    e0aa:	b15c      	cbz	r4, e0c4 <pm_state_notify+0x58>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
    e0ac:	4f12      	ldr	r7, [pc, #72]	; (e0f8 <pm_state_notify+0x8c>)
			callback = notifier->state_exit;
    e0ae:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    e0b2:	2d00      	cmp	r5, #0
    e0b4:	bf08      	it	eq
    e0b6:	4613      	moveq	r3, r2
		if (callback) {
    e0b8:	b10b      	cbz	r3, e0be <pm_state_notify+0x52>
			callback(z_power_state.state);
    e0ba:	7838      	ldrb	r0, [r7, #0]
    e0bc:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    e0be:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    e0c0:	2c00      	cmp	r4, #0
    e0c2:	d1f4      	bne.n	e0ae <pm_state_notify+0x42>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e0c4:	4808      	ldr	r0, [pc, #32]	; (e0e8 <pm_state_notify+0x7c>)
    e0c6:	f002 fce5 	bl	10a94 <z_spin_unlock_valid>
    e0ca:	b940      	cbnz	r0, e0de <pm_state_notify+0x72>
    e0cc:	4907      	ldr	r1, [pc, #28]	; (e0ec <pm_state_notify+0x80>)
    e0ce:	4808      	ldr	r0, [pc, #32]	; (e0f0 <pm_state_notify+0x84>)
    e0d0:	22ac      	movs	r2, #172	; 0xac
    e0d2:	f006 ff5b 	bl	14f8c <printk>
    e0d6:	21ac      	movs	r1, #172	; 0xac
    e0d8:	4804      	ldr	r0, [pc, #16]	; (e0ec <pm_state_notify+0x80>)
    e0da:	f007 f823 	bl	15124 <assert_post_action>
	__asm__ volatile(
    e0de:	f386 8811 	msr	BASEPRI, r6
    e0e2:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    e0e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e0e8:	20000278 	.word	0x20000278
    e0ec:	00017eac 	.word	0x00017eac
    e0f0:	00017e72 	.word	0x00017e72
    e0f4:	2000027c 	.word	0x2000027c
    e0f8:	20000284 	.word	0x20000284

0000e0fc <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    e0fc:	4b08      	ldr	r3, [pc, #32]	; (e120 <pm_system_resume+0x24>)
{
    e0fe:	b510      	push	{r4, lr}
	if (!post_ops_done) {
    e100:	681c      	ldr	r4, [r3, #0]
    e102:	b95c      	cbnz	r4, e11c <pm_system_resume+0x20>
		post_ops_done = 1;
    e104:	2201      	movs	r2, #1
    e106:	601a      	str	r2, [r3, #0]
		pm_power_state_exit_post_ops(z_power_state);
    e108:	4b06      	ldr	r3, [pc, #24]	; (e124 <pm_system_resume+0x28>)
    e10a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    e10e:	f007 f813 	bl	15138 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    e112:	4620      	mov	r0, r4
	}
}
    e114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pm_state_notify(false);
    e118:	f7ff bfa8 	b.w	e06c <pm_state_notify>
}
    e11c:	bd10      	pop	{r4, pc}
    e11e:	bf00      	nop
    e120:	20000004 	.word	0x20000004
    e124:	20000284 	.word	0x20000284

0000e128 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    e128:	b5f0      	push	{r4, r5, r6, r7, lr}
    e12a:	b085      	sub	sp, #20
	z_power_state = pm_policy_next_state(ticks);
    e12c:	466e      	mov	r6, sp
    e12e:	4c1d      	ldr	r4, [pc, #116]	; (e1a4 <pm_system_suspend+0x7c>)
    e130:	4601      	mov	r1, r0
{
    e132:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
    e134:	4630      	mov	r0, r6
    e136:	f007 f817 	bl	15168 <pm_policy_next_state>
    e13a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    e13e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    e142:	7820      	ldrb	r0, [r4, #0]
    e144:	b360      	cbz	r0, e1a0 <pm_system_suspend+0x78>
		LOG_DBG("No PM operations done.");
		return z_power_state.state;
	}
	post_ops_done = 0;
    e146:	2000      	movs	r0, #0
    e148:	4b17      	ldr	r3, [pc, #92]	; (e1a8 <pm_system_suspend+0x80>)
    e14a:	6018      	str	r0, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    e14c:	1c6b      	adds	r3, r5, #1
    e14e:	d019      	beq.n	e184 <pm_system_suspend+0x5c>
		/*
		 * Just a sanity check in case the policy manager does not
		 * handle this error condition properly.
		 */
		__ASSERT(z_power_state.min_residency_us >=
    e150:	4291      	cmp	r1, r2
    e152:	d208      	bcs.n	e166 <pm_system_suspend+0x3e>
    e154:	4915      	ldr	r1, [pc, #84]	; (e1ac <pm_system_suspend+0x84>)
    e156:	4816      	ldr	r0, [pc, #88]	; (e1b0 <pm_system_suspend+0x88>)
    e158:	22bd      	movs	r2, #189	; 0xbd
    e15a:	f006 ff17 	bl	14f8c <printk>
    e15e:	21bd      	movs	r1, #189	; 0xbd
    e160:	4812      	ldr	r0, [pc, #72]	; (e1ac <pm_system_suspend+0x84>)
    e162:	f006 ffdf 	bl	15124 <assert_post_action>
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    e166:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    e16a:	2100      	movs	r1, #0
    e16c:	68a7      	ldr	r7, [r4, #8]
    e16e:	4811      	ldr	r0, [pc, #68]	; (e1b4 <pm_system_suspend+0x8c>)
    e170:	2300      	movs	r3, #0
    e172:	fbe6 0107 	umlal	r0, r1, r6, r7
    e176:	4a10      	ldr	r2, [pc, #64]	; (e1b8 <pm_system_suspend+0x90>)
    e178:	f7f2 f860 	bl	23c <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    e17c:	2101      	movs	r1, #1
    e17e:	1a28      	subs	r0, r5, r0
    e180:	f003 ffba 	bl	120f8 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    e184:	f002 ff60 	bl	11048 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
    e188:	2001      	movs	r0, #1
    e18a:	f7ff ff6f 	bl	e06c <pm_state_notify>
	pm_power_state_set(z_power_state);
    e18e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    e192:	f7ff ff57 	bl	e044 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    e196:	f7ff ffb1 	bl	e0fc <pm_system_resume>
	k_sched_unlock();
    e19a:	f003 f93d 	bl	11418 <k_sched_unlock>

	return z_power_state.state;
    e19e:	7820      	ldrb	r0, [r4, #0]
}
    e1a0:	b005      	add	sp, #20
    e1a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e1a4:	20000284 	.word	0x20000284
    e1a8:	20000004 	.word	0x20000004
    e1ac:	00017f38 	.word	0x00017f38
    e1b0:	00017e72 	.word	0x00017e72
    e1b4:	000f423f 	.word	0x000f423f
    e1b8:	000f4240 	.word	0x000f4240

0000e1bc <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    e1bc:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    e1be:	4807      	ldr	r0, [pc, #28]	; (e1dc <uart_console_init+0x20>)
    e1c0:	f002 f964 	bl	1048c <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
    e1c4:	4c06      	ldr	r4, [pc, #24]	; (e1e0 <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    e1c6:	4b07      	ldr	r3, [pc, #28]	; (e1e4 <uart_console_init+0x28>)
    e1c8:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    e1ca:	4620      	mov	r0, r4
    e1cc:	f001 fcce 	bl	fb6c <__stdout_hook_install>
	__printk_hook_install(console_out);
    e1d0:	4620      	mov	r0, r4
    e1d2:	f7ff f853 	bl	d27c <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    e1d6:	2000      	movs	r0, #0
    e1d8:	bd10      	pop	{r4, pc}
    e1da:	bf00      	nop
    e1dc:	00017f63 	.word	0x00017f63
    e1e0:	0000e1e9 	.word	0x0000e1e9
    e1e4:	20000290 	.word	0x20000290

0000e1e8 <console_out>:
	if ('\n' == c) {
    e1e8:	280a      	cmp	r0, #10
{
    e1ea:	b538      	push	{r3, r4, r5, lr}
    e1ec:	4604      	mov	r4, r0
    e1ee:	4d07      	ldr	r5, [pc, #28]	; (e20c <console_out+0x24>)
	if ('\n' == c) {
    e1f0:	d104      	bne.n	e1fc <console_out+0x14>
    e1f2:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    e1f4:	6883      	ldr	r3, [r0, #8]
    e1f6:	210d      	movs	r1, #13
    e1f8:	685b      	ldr	r3, [r3, #4]
    e1fa:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    e1fc:	6828      	ldr	r0, [r5, #0]
    e1fe:	6883      	ldr	r3, [r0, #8]
    e200:	b2e1      	uxtb	r1, r4
    e202:	685b      	ldr	r3, [r3, #4]
    e204:	4798      	blx	r3
}
    e206:	4620      	mov	r0, r4
    e208:	bd38      	pop	{r3, r4, r5, pc}
    e20a:	bf00      	nop
    e20c:	20000290 	.word	0x20000290

0000e210 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    e210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    e214:	4c0e      	ldr	r4, [pc, #56]	; (e250 <onoff_start+0x40>)
{
    e216:	4607      	mov	r7, r0
	size_t offset = (size_t)(mgr - data->mgr);
    e218:	1b05      	subs	r5, r0, r4
    e21a:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
    e21e:	250c      	movs	r5, #12
    e220:	435d      	muls	r5, r3
    e222:	f105 0088 	add.w	r0, r5, #136	; 0x88
{
    e226:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    e228:	4420      	add	r0, r4
    e22a:	2140      	movs	r1, #64	; 0x40
    e22c:	f006 ffa1 	bl	15172 <set_starting_state>
	if (err < 0) {
    e230:	1e01      	subs	r1, r0, #0
    e232:	db08      	blt.n	e246 <onoff_start+0x36>
	subdata->cb = cb;
    e234:	4b07      	ldr	r3, [pc, #28]	; (e254 <onoff_start+0x44>)
    e236:	442c      	add	r4, r5
	subdata->user_data = user_data;
    e238:	e9c4 3620 	strd	r3, r6, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
    e23c:	4b06      	ldr	r3, [pc, #24]	; (e258 <onoff_start+0x48>)
    e23e:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    e240:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    e244:	4718      	bx	r3
		notify(mgr, err);
    e246:	4638      	mov	r0, r7
    e248:	4633      	mov	r3, r6
}
    e24a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    e24e:	4718      	bx	r3
    e250:	200002a8 	.word	0x200002a8
    e254:	000151d5 	.word	0x000151d5
    e258:	00017a5c 	.word	0x00017a5c

0000e25c <get_status>:
{
    e25c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    e25e:	b2cc      	uxtb	r4, r1
    e260:	2c03      	cmp	r4, #3
{
    e262:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    e264:	d908      	bls.n	e278 <get_status+0x1c>
    e266:	4909      	ldr	r1, [pc, #36]	; (e28c <get_status+0x30>)
    e268:	4809      	ldr	r0, [pc, #36]	; (e290 <get_status+0x34>)
    e26a:	227e      	movs	r2, #126	; 0x7e
    e26c:	f006 fe8e 	bl	14f8c <printk>
    e270:	217e      	movs	r1, #126	; 0x7e
    e272:	4806      	ldr	r0, [pc, #24]	; (e28c <get_status+0x30>)
    e274:	f006 ff56 	bl	15124 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    e278:	210c      	movs	r1, #12
    e27a:	692b      	ldr	r3, [r5, #16]
    e27c:	fb04 3401 	mla	r4, r4, r1, r3
    e280:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
}
    e284:	f000 0007 	and.w	r0, r0, #7
    e288:	bd38      	pop	{r3, r4, r5, pc}
    e28a:	bf00      	nop
    e28c:	00017f6a 	.word	0x00017f6a
    e290:	00017e72 	.word	0x00017e72

0000e294 <stop>:
{
    e294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e296:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    e298:	2c03      	cmp	r4, #3
{
    e29a:	4605      	mov	r5, r0
    e29c:	4616      	mov	r6, r2
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    e29e:	6907      	ldr	r7, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    e2a0:	d90a      	bls.n	e2b8 <stop+0x24>
    e2a2:	4919      	ldr	r1, [pc, #100]	; (e308 <stop+0x74>)
    e2a4:	4819      	ldr	r0, [pc, #100]	; (e30c <stop+0x78>)
    e2a6:	f240 1253 	movw	r2, #339	; 0x153
    e2aa:	f006 fe6f 	bl	14f8c <printk>
    e2ae:	f240 1153 	movw	r1, #339	; 0x153
    e2b2:	4815      	ldr	r0, [pc, #84]	; (e308 <stop+0x74>)
    e2b4:	f006 ff36 	bl	15124 <assert_post_action>
	__asm__ volatile(
    e2b8:	f04f 0320 	mov.w	r3, #32
    e2bc:	f3ef 8211 	mrs	r2, BASEPRI
    e2c0:	f383 8811 	msr	BASEPRI, r3
    e2c4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    e2c8:	230c      	movs	r3, #12
    e2ca:	fb03 7104 	mla	r1, r3, r4, r7
    e2ce:	f8d1 1088 	ldr.w	r1, [r1, #136]	; 0x88
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    e2d2:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
    e2d6:	d001      	beq.n	e2dc <stop+0x48>
    e2d8:	428e      	cmp	r6, r1
    e2da:	d112      	bne.n	e302 <stop+0x6e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    e2dc:	2101      	movs	r1, #1
	int err = 0;
    e2de:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
    e2e0:	fb03 7304 	mla	r3, r3, r4, r7
    e2e4:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	__asm__ volatile(
    e2e8:	f382 8811 	msr	BASEPRI, r2
    e2ec:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    e2f0:	b930      	cbnz	r0, e300 <stop+0x6c>
	get_sub_config(dev, type)->stop();
    e2f2:	230c      	movs	r3, #12
    e2f4:	6869      	ldr	r1, [r5, #4]
    e2f6:	fb03 1404 	mla	r4, r3, r4, r1
    e2fa:	6863      	ldr	r3, [r4, #4]
    e2fc:	4798      	blx	r3
	return 0;
    e2fe:	2000      	movs	r0, #0
}
    e300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    e302:	f04f 30ff 	mov.w	r0, #4294967295
    e306:	e7ef      	b.n	e2e8 <stop+0x54>
    e308:	00017f6a 	.word	0x00017f6a
    e30c:	00017e72 	.word	0x00017e72

0000e310 <onoff_stop>:
{
    e310:	b570      	push	{r4, r5, r6, lr}
    e312:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    e314:	4906      	ldr	r1, [pc, #24]	; (e330 <onoff_stop+0x20>)
{
    e316:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    e318:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    e31a:	1149      	asrs	r1, r1, #5
    e31c:	2240      	movs	r2, #64	; 0x40
    e31e:	4805      	ldr	r0, [pc, #20]	; (e334 <onoff_stop+0x24>)
    e320:	f7ff ffb8 	bl	e294 <stop>
	notify(mgr, res);
    e324:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    e326:	4601      	mov	r1, r0
	notify(mgr, res);
    e328:	4620      	mov	r0, r4
}
    e32a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    e32e:	4718      	bx	r3
    e330:	200002a8 	.word	0x200002a8
    e334:	200000bc 	.word	0x200000bc

0000e338 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
    e338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    e33c:	2200      	movs	r2, #0
    e33e:	2101      	movs	r1, #1
{
    e340:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    e342:	2005      	movs	r0, #5
    e344:	f000 fdc0 	bl	eec8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    e348:	2005      	movs	r0, #5
    e34a:	f000 fd9f 	bl	ee8c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    e34e:	4811      	ldr	r0, [pc, #68]	; (e394 <clk_init+0x5c>)
    e350:	f001 fed0 	bl	100f4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    e354:	4b10      	ldr	r3, [pc, #64]	; (e398 <clk_init+0x60>)
    e356:	4298      	cmp	r0, r3
    e358:	d119      	bne.n	e38e <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    e35a:	f001 feeb 	bl	10134 <nrfx_clock_enable>
    e35e:	2400      	movs	r4, #0
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    e360:	f04f 080c 	mov.w	r8, #12
    e364:	2701      	movs	r7, #1
		err = onoff_manager_init(get_onoff_manager(dev, i),
    e366:	f8df 9034 	ldr.w	r9, [pc, #52]	; e39c <clk_init+0x64>
						get_sub_data(dev, i);
    e36a:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    e36c:	4649      	mov	r1, r9
    e36e:	eb05 1044 	add.w	r0, r5, r4, lsl #5
    e372:	f006 fe59 	bl	15028 <onoff_manager_init>
		if (err < 0) {
    e376:	2800      	cmp	r0, #0
    e378:	db07      	blt.n	e38a <clk_init+0x52>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    e37a:	fb08 5504 	mla	r5, r8, r4, r5
    e37e:	3401      	adds	r4, #1
	for (enum clock_control_nrf_type i = 0;
    e380:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    e382:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
	for (enum clock_control_nrf_type i = 0;
    e386:	d1f0      	bne.n	e36a <clk_init+0x32>
	}

	return 0;
    e388:	2000      	movs	r0, #0
}
    e38a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    e38e:	f06f 0004 	mvn.w	r0, #4
    e392:	e7fa      	b.n	e38a <clk_init+0x52>
    e394:	0000e3d9 	.word	0x0000e3d9
    e398:	0bad0000 	.word	0x0bad0000
    e39c:	00017a8c 	.word	0x00017a8c

0000e3a0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    e3a0:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    e3a2:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    e3a4:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    e3a6:	434b      	muls	r3, r1
    e3a8:	4809      	ldr	r0, [pc, #36]	; (e3d0 <clkstarted_handle.constprop.0+0x30>)
static void clkstarted_handle(const struct device *dev,
    e3aa:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    e3ac:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    e3ae:	3388      	adds	r3, #136	; 0x88
	void *user_data = sub_data->user_data;
    e3b0:	e9d4 5620 	ldrd	r5, r6, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
    e3b4:	4418      	add	r0, r3
	sub_data->cb = NULL;
    e3b6:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
    e3ba:	f006 fef8 	bl	151ae <set_on_state>
	if (callback) {
    e3be:	b12d      	cbz	r5, e3cc <clkstarted_handle.constprop.0+0x2c>
		callback(dev, (clock_control_subsys_t)type, user_data);
    e3c0:	4632      	mov	r2, r6
    e3c2:	462b      	mov	r3, r5
}
    e3c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    e3c8:	4802      	ldr	r0, [pc, #8]	; (e3d4 <clkstarted_handle.constprop.0+0x34>)
    e3ca:	4718      	bx	r3
}
    e3cc:	bd70      	pop	{r4, r5, r6, pc}
    e3ce:	bf00      	nop
    e3d0:	200002a8 	.word	0x200002a8
    e3d4:	200000bc 	.word	0x200000bc

0000e3d8 <clock_event_handler>:
{
    e3d8:	b508      	push	{r3, lr}
    e3da:	2805      	cmp	r0, #5
    e3dc:	d821      	bhi.n	e422 <clock_event_handler+0x4a>
    e3de:	e8df f000 	tbb	[pc, r0]
    e3e2:	1103      	.short	0x1103
    e3e4:	0d0f1320 	.word	0x0d0f1320
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    e3e8:	4b13      	ldr	r3, [pc, #76]	; (e438 <clock_event_handler+0x60>)
    e3ea:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    e3ee:	f010 0007 	ands.w	r0, r0, #7
    e3f2:	d11f      	bne.n	e434 <clock_event_handler+0x5c>
}
    e3f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    e3f8:	f7ff bfd2 	b.w	e3a0 <clkstarted_handle.constprop.0>
    e3fc:	2002      	movs	r0, #2
    e3fe:	e7f9      	b.n	e3f4 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    e400:	2003      	movs	r0, #3
    e402:	e7f7      	b.n	e3f4 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    e404:	2001      	movs	r0, #1
    e406:	e7f5      	b.n	e3f4 <clock_event_handler+0x1c>
			__ASSERT_NO_MSG(false);
    e408:	490c      	ldr	r1, [pc, #48]	; (e43c <clock_event_handler+0x64>)
    e40a:	f240 2266 	movw	r2, #614	; 0x266
    e40e:	480c      	ldr	r0, [pc, #48]	; (e440 <clock_event_handler+0x68>)
    e410:	f006 fdbc 	bl	14f8c <printk>
    e414:	f240 2166 	movw	r1, #614	; 0x266
}
    e418:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    e41c:	4807      	ldr	r0, [pc, #28]	; (e43c <clock_event_handler+0x64>)
    e41e:	f006 be81 	b.w	15124 <assert_post_action>
    e422:	4906      	ldr	r1, [pc, #24]	; (e43c <clock_event_handler+0x64>)
    e424:	f240 226a 	movw	r2, #618	; 0x26a
    e428:	4805      	ldr	r0, [pc, #20]	; (e440 <clock_event_handler+0x68>)
    e42a:	f006 fdaf 	bl	14f8c <printk>
    e42e:	f240 216a 	movw	r1, #618	; 0x26a
    e432:	e7f1      	b.n	e418 <clock_event_handler+0x40>
}
    e434:	bd08      	pop	{r3, pc}
    e436:	bf00      	nop
    e438:	200002a8 	.word	0x200002a8
    e43c:	00017f6a 	.word	0x00017f6a
    e440:	00017e72 	.word	0x00017e72

0000e444 <generic_hfclk_start>:
{
    e444:	b508      	push	{r3, lr}
	__asm__ volatile(
    e446:	f04f 0320 	mov.w	r3, #32
    e44a:	f3ef 8111 	mrs	r1, BASEPRI
    e44e:	f383 8811 	msr	BASEPRI, r3
    e452:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    e456:	4a12      	ldr	r2, [pc, #72]	; (e4a0 <generic_hfclk_start+0x5c>)
    e458:	6813      	ldr	r3, [r2, #0]
    e45a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    e45e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    e462:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    e464:	d00c      	beq.n	e480 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    e466:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    e46a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    e46e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    e472:	f013 0301 	ands.w	r3, r3, #1
    e476:	d003      	beq.n	e480 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    e478:	480a      	ldr	r0, [pc, #40]	; (e4a4 <generic_hfclk_start+0x60>)
    e47a:	f006 fe98 	bl	151ae <set_on_state>
			already_started = true;
    e47e:	2301      	movs	r3, #1
	__asm__ volatile(
    e480:	f381 8811 	msr	BASEPRI, r1
    e484:	f3bf 8f6f 	isb	sy
	if (already_started) {
    e488:	b123      	cbz	r3, e494 <generic_hfclk_start+0x50>
}
    e48a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    e48e:	2000      	movs	r0, #0
    e490:	f7ff bf86 	b.w	e3a0 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    e494:	2001      	movs	r0, #1
}
    e496:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    e49a:	f001 be6d 	b.w	10178 <nrfx_clock_start>
    e49e:	bf00      	nop
    e4a0:	20000358 	.word	0x20000358
    e4a4:	20000330 	.word	0x20000330

0000e4a8 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e4a8:	4b07      	ldr	r3, [pc, #28]	; (e4c8 <generic_hfclk_stop+0x20>)
    e4aa:	e8d3 2fef 	ldaex	r2, [r3]
    e4ae:	f022 0102 	bic.w	r1, r2, #2
    e4b2:	e8c3 1fe0 	stlex	r0, r1, [r3]
    e4b6:	2800      	cmp	r0, #0
    e4b8:	d1f7      	bne.n	e4aa <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    e4ba:	07d3      	lsls	r3, r2, #31
    e4bc:	d402      	bmi.n	e4c4 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    e4be:	2001      	movs	r0, #1
    e4c0:	f001 bed0 	b.w	10264 <nrfx_clock_stop>
}
    e4c4:	4770      	bx	lr
    e4c6:	bf00      	nop
    e4c8:	20000358 	.word	0x20000358

0000e4cc <api_blocking_start>:
{
    e4cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    e4ce:	2200      	movs	r2, #0
    e4d0:	2301      	movs	r3, #1
    e4d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    e4d6:	466b      	mov	r3, sp
    e4d8:	4a08      	ldr	r2, [pc, #32]	; (e4fc <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    e4da:	f8cd d000 	str.w	sp, [sp]
    e4de:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    e4e2:	f006 fe95 	bl	15210 <api_start>
	if (err < 0) {
    e4e6:	2800      	cmp	r0, #0
    e4e8:	db05      	blt.n	e4f6 <api_blocking_start+0x2a>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    e4ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    e4ee:	2300      	movs	r3, #0
    e4f0:	4668      	mov	r0, sp
    e4f2:	f002 fc9f 	bl	10e34 <z_impl_k_sem_take>
}
    e4f6:	b005      	add	sp, #20
    e4f8:	f85d fb04 	ldr.w	pc, [sp], #4
    e4fc:	0001520b 	.word	0x0001520b

0000e500 <z_nrf_clock_control_lf_on>:
{
    e500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    e504:	2201      	movs	r2, #1
    e506:	4605      	mov	r5, r0
    e508:	4946      	ldr	r1, [pc, #280]	; (e624 <z_nrf_clock_control_lf_on+0x124>)
    e50a:	e8d1 3fef 	ldaex	r3, [r1]
    e50e:	e8c1 2fe0 	stlex	r0, r2, [r1]
    e512:	2800      	cmp	r0, #0
    e514:	d1f9      	bne.n	e50a <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    e516:	b99b      	cbnz	r3, e540 <z_nrf_clock_control_lf_on+0x40>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    e518:	4943      	ldr	r1, [pc, #268]	; (e628 <z_nrf_clock_control_lf_on+0x128>)
		err = onoff_request(mgr, &cli);
    e51a:	4844      	ldr	r0, [pc, #272]	; (e62c <z_nrf_clock_control_lf_on+0x12c>)
    e51c:	604b      	str	r3, [r1, #4]
    e51e:	60cb      	str	r3, [r1, #12]
    e520:	608a      	str	r2, [r1, #8]
    e522:	f7ff f8a3 	bl	d66c <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    e526:	2800      	cmp	r0, #0
    e528:	da0a      	bge.n	e540 <z_nrf_clock_control_lf_on+0x40>
    e52a:	4941      	ldr	r1, [pc, #260]	; (e630 <z_nrf_clock_control_lf_on+0x130>)
    e52c:	4841      	ldr	r0, [pc, #260]	; (e634 <z_nrf_clock_control_lf_on+0x134>)
    e52e:	f240 2226 	movw	r2, #550	; 0x226
    e532:	f006 fd2b 	bl	14f8c <printk>
    e536:	f240 2126 	movw	r1, #550	; 0x226
    e53a:	483d      	ldr	r0, [pc, #244]	; (e630 <z_nrf_clock_control_lf_on+0x130>)
    e53c:	f006 fdf2 	bl	15124 <assert_post_action>
	switch (start_mode) {
    e540:	b3ad      	cbz	r5, e5ae <z_nrf_clock_control_lf_on+0xae>
    e542:	1e6b      	subs	r3, r5, #1
    e544:	2b01      	cmp	r3, #1
    e546:	d859      	bhi.n	e5fc <z_nrf_clock_control_lf_on+0xfc>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    e548:	2d01      	cmp	r5, #1
    e54a:	d107      	bne.n	e55c <z_nrf_clock_control_lf_on+0x5c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    e54c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    e550:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    e554:	f003 0303 	and.w	r3, r3, #3
    e558:	2b02      	cmp	r3, #2
    e55a:	d028      	beq.n	e5ae <z_nrf_clock_control_lf_on+0xae>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    e55c:	f007 f897 	bl	1568e <k_is_in_isr>
    e560:	4604      	mov	r4, r0
    e562:	b918      	cbnz	r0, e56c <z_nrf_clock_control_lf_on+0x6c>
	return !z_sys_post_kernel;
    e564:	4b34      	ldr	r3, [pc, #208]	; (e638 <z_nrf_clock_control_lf_on+0x138>)
	int key = isr_mode ? irq_lock() : 0;
    e566:	781b      	ldrb	r3, [r3, #0]
    e568:	2b00      	cmp	r3, #0
    e56a:	d154      	bne.n	e616 <z_nrf_clock_control_lf_on+0x116>
	__asm__ volatile(
    e56c:	f04f 0320 	mov.w	r3, #32
    e570:	f3ef 8611 	mrs	r6, BASEPRI
    e574:	f383 8811 	msr	BASEPRI, r3
    e578:	f3bf 8f6f 	isb	sy
    e57c:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    e57e:	4f2f      	ldr	r7, [pc, #188]	; (e63c <z_nrf_clock_control_lf_on+0x13c>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e580:	f8df 80bc 	ldr.w	r8, [pc, #188]	; e640 <z_nrf_clock_control_lf_on+0x140>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e584:	f8df 90bc 	ldr.w	r9, [pc, #188]	; e644 <z_nrf_clock_control_lf_on+0x144>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    e588:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    e58c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    e590:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    e594:	03d2      	lsls	r2, r2, #15
    e596:	d50c      	bpl.n	e5b2 <z_nrf_clock_control_lf_on+0xb2>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    e598:	f003 0303 	and.w	r3, r3, #3
    e59c:	2b02      	cmp	r3, #2
    e59e:	d001      	beq.n	e5a4 <z_nrf_clock_control_lf_on+0xa4>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    e5a0:	2d01      	cmp	r5, #1
    e5a2:	d106      	bne.n	e5b2 <z_nrf_clock_control_lf_on+0xb2>
	if (isr_mode) {
    e5a4:	b324      	cbz	r4, e5f0 <z_nrf_clock_control_lf_on+0xf0>
	__asm__ volatile(
    e5a6:	f386 8811 	msr	BASEPRI, r6
    e5aa:	f3bf 8f6f 	isb	sy
}
    e5ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    e5b2:	b1c4      	cbz	r4, e5e6 <z_nrf_clock_control_lf_on+0xe6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    e5b4:	4630      	mov	r0, r6
    e5b6:	f000 fcf1 	bl	ef9c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    e5ba:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    e5be:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    e5c2:	b2db      	uxtb	r3, r3
    e5c4:	2b01      	cmp	r3, #1
    e5c6:	d1df      	bne.n	e588 <z_nrf_clock_control_lf_on+0x88>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    e5c8:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    e5ca:	2900      	cmp	r1, #0
    e5cc:	d0dc      	beq.n	e588 <z_nrf_clock_control_lf_on+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    e5ce:	2100      	movs	r1, #0
    e5d0:	6039      	str	r1, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    e5d2:	6839      	ldr	r1, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    e5d4:	2102      	movs	r1, #2
    e5d6:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
    e5da:	2220      	movs	r2, #32
    e5dc:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    e5e0:	f8c9 3000 	str.w	r3, [r9]
}
    e5e4:	e7d0      	b.n	e588 <z_nrf_clock_control_lf_on+0x88>
	return z_impl_k_sleep(timeout);
    e5e6:	2100      	movs	r1, #0
    e5e8:	2021      	movs	r0, #33	; 0x21
    e5ea:	f003 fb25 	bl	11c38 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    e5ee:	e7e4      	b.n	e5ba <z_nrf_clock_control_lf_on+0xba>
    p_reg->INTENSET = mask;
    e5f0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    e5f4:	2202      	movs	r2, #2
    e5f6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    e5fa:	e7d8      	b.n	e5ae <z_nrf_clock_control_lf_on+0xae>
		__ASSERT_NO_MSG(false);
    e5fc:	490c      	ldr	r1, [pc, #48]	; (e630 <z_nrf_clock_control_lf_on+0x130>)
    e5fe:	480d      	ldr	r0, [pc, #52]	; (e634 <z_nrf_clock_control_lf_on+0x134>)
    e600:	f44f 720e 	mov.w	r2, #568	; 0x238
    e604:	f006 fcc2 	bl	14f8c <printk>
}
    e608:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
    e60c:	f44f 710e 	mov.w	r1, #568	; 0x238
    e610:	4807      	ldr	r0, [pc, #28]	; (e630 <z_nrf_clock_control_lf_on+0x130>)
    e612:	f006 bd87 	b.w	15124 <assert_post_action>
    p_reg->INTENCLR = mask;
    e616:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    e61a:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    e61c:	4606      	mov	r6, r0
    e61e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    e622:	e7ac      	b.n	e57e <z_nrf_clock_control_lf_on+0x7e>
    e624:	2000035c 	.word	0x2000035c
    e628:	20000298 	.word	0x20000298
    e62c:	200002c8 	.word	0x200002c8
    e630:	00017f6a 	.word	0x00017f6a
    e634:	00017e72 	.word	0x00017e72
    e638:	2000189d 	.word	0x2000189d
    e63c:	50005104 	.word	0x50005104
    e640:	e000e100 	.word	0xe000e100
    e644:	50005008 	.word	0x50005008

0000e648 <sys_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
    e648:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    e64a:	4c06      	ldr	r4, [pc, #24]	; (e664 <sys_clock_isr+0x1c>)
    e64c:	4806      	ldr	r0, [pc, #24]	; (e668 <sys_clock_isr+0x20>)
    e64e:	4621      	mov	r1, r4
    e650:	2217      	movs	r2, #23
    e652:	f006 fc9b 	bl	14f8c <printk>
    e656:	4620      	mov	r0, r4
}
    e658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    e65c:	2117      	movs	r1, #23
    e65e:	f006 bd61 	b.w	15124 <assert_post_action>
    e662:	bf00      	nop
    e664:	00017fd6 	.word	0x00017fd6
    e668:	00017e72 	.word	0x00017e72

0000e66c <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    e66c:	4a04      	ldr	r2, [pc, #16]	; (e680 <sys_clock_timeout_handler+0x14>)
    e66e:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    e670:	1ac8      	subs	r0, r1, r3
    e672:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    e676:	4403      	add	r3, r0
    e678:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    e67a:	f003 bd7b 	b.w	12174 <sys_clock_announce>
    e67e:	bf00      	nop
    e680:	20000370 	.word	0x20000370

0000e684 <set_absolute_alarm>:
{
    e684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    e688:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    e68c:	f04f 0900 	mov.w	r9, #0
    e690:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    e692:	f100 0450 	add.w	r4, r0, #80	; 0x50
    e696:	f106 2650 	add.w	r6, r6, #1342197760	; 0x50005000
    e69a:	00a4      	lsls	r4, r4, #2
    e69c:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
    e6a0:	b2a4      	uxth	r4, r4
    e6a2:	f104 2450 	add.w	r4, r4, #1342197760	; 0x50005000
    return p_reg->CC[ch];
    e6a6:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    e6aa:	f8df 806c 	ldr.w	r8, [pc, #108]	; e718 <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    e6ae:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    e6b2:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    e6b6:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    e6b8:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    e6bc:	eba3 030a 	sub.w	r3, r3, sl
    e6c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    e6c4:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    e6c8:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    e6ca:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    e6ce:	d102      	bne.n	e6d6 <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
    e6d0:	2013      	movs	r0, #19
    e6d2:	f007 f816 	bl	15702 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    e6d6:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    e6da:	1aab      	subs	r3, r5, r2
    e6dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    e6e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    e6e4:	bf88      	it	hi
    e6e6:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    e6e8:	f8c4 9000 	str.w	r9, [r4]
    e6ec:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    e6ee:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    e6f2:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    e6f6:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    e6fa:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    e6fe:	459a      	cmp	sl, r3
    e700:	d006      	beq.n	e710 <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
    e702:	1aeb      	subs	r3, r5, r3
    e704:	3b02      	subs	r3, #2
    e706:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    e70a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    e70e:	d801      	bhi.n	e714 <set_absolute_alarm+0x90>
}
    e710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    e714:	462b      	mov	r3, r5
    e716:	e7cf      	b.n	e6b8 <set_absolute_alarm+0x34>
    e718:	50015000 	.word	0x50015000

0000e71c <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    e71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    e71e:	2400      	movs	r4, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    e720:	4627      	mov	r7, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e722:	4e0f      	ldr	r6, [pc, #60]	; (e760 <rtc_nrf_isr+0x44>)
    e724:	4b0f      	ldr	r3, [pc, #60]	; (e764 <rtc_nrf_isr+0x48>)
    return p_reg->INTENSET & mask;
    e726:	4a10      	ldr	r2, [pc, #64]	; (e768 <rtc_nrf_isr+0x4c>)
    e728:	4618      	mov	r0, r3
    e72a:	681d      	ldr	r5, [r3, #0]
    e72c:	b104      	cbz	r4, e730 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    e72e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e730:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    e734:	03c9      	lsls	r1, r1, #15
    e736:	d5fa      	bpl.n	e72e <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    e738:	6831      	ldr	r1, [r6, #0]
    e73a:	2900      	cmp	r1, #0
    e73c:	d0f7      	beq.n	e72e <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    e73e:	6034      	str	r4, [r6, #0]
    e740:	6831      	ldr	r1, [r6, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    e742:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    e746:	f8c2 1348 	str.w	r1, [r2, #840]	; 0x348
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    e74a:	2401      	movs	r4, #1
    return p_reg->CC[ch];
    e74c:	f8d2 1540 	ldr.w	r1, [r2, #1344]	; 0x540
			if (handler) {
    e750:	b125      	cbz	r5, e75c <rtc_nrf_isr+0x40>
				handler(chan, cc_val,
    e752:	2000      	movs	r0, #0
    e754:	685a      	ldr	r2, [r3, #4]
    e756:	601f      	str	r7, [r3, #0]
    e758:	47a8      	blx	r5
    e75a:	e7e3      	b.n	e724 <rtc_nrf_isr+0x8>
    e75c:	6005      	str	r5, [r0, #0]
}
    e75e:	e7e6      	b.n	e72e <rtc_nrf_isr+0x12>
    e760:	50015140 	.word	0x50015140
    e764:	20000364 	.word	0x20000364
    e768:	50015000 	.word	0x50015000

0000e76c <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    e76c:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    e76e:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    e770:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    e774:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    e778:	4d0d      	ldr	r5, [pc, #52]	; (e7b0 <sys_clock_driver_init+0x44>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    e77a:	2101      	movs	r1, #1
    e77c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    e780:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    e784:	4b0b      	ldr	r3, [pc, #44]	; (e7b4 <sys_clock_driver_init+0x48>)
    e786:	2015      	movs	r0, #21
    e788:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    e78c:	4622      	mov	r2, r4
    e78e:	f000 fb9b 	bl	eec8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    e792:	2015      	movs	r0, #21
    e794:	f000 fb7a 	bl	ee8c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    e798:	2301      	movs	r3, #1
    e79a:	4a07      	ldr	r2, [pc, #28]	; (e7b8 <sys_clock_driver_init+0x4c>)
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    e79c:	2002      	movs	r0, #2
    e79e:	6013      	str	r3, [r2, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    e7a0:	4a06      	ldr	r2, [pc, #24]	; (e7bc <sys_clock_driver_init+0x50>)
    e7a2:	602b      	str	r3, [r5, #0]
    e7a4:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    e7a6:	f7ff feab 	bl	e500 <z_nrf_clock_control_lf_on>

	return 0;
}
    e7aa:	4620      	mov	r0, r4
    e7ac:	bd38      	pop	{r3, r4, r5, pc}
    e7ae:	bf00      	nop
    e7b0:	50015000 	.word	0x50015000
    e7b4:	e000e100 	.word	0xe000e100
    e7b8:	50015008 	.word	0x50015008
    e7bc:	2000036c 	.word	0x2000036c

0000e7c0 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    e7c0:	4b13      	ldr	r3, [pc, #76]	; (e810 <sys_clock_set_timeout+0x50>)
    e7c2:	f1b0 3fff 	cmp.w	r0, #4294967295
    e7c6:	bf08      	it	eq
    e7c8:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    e7ca:	3801      	subs	r0, #1
    e7cc:	2800      	cmp	r0, #0
    e7ce:	dd1c      	ble.n	e80a <sys_clock_set_timeout+0x4a>
    e7d0:	4298      	cmp	r0, r3
    e7d2:	bfa8      	it	ge
    e7d4:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    e7d6:	4b0f      	ldr	r3, [pc, #60]	; (e814 <sys_clock_set_timeout+0x54>)
    e7d8:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    e7dc:	4b0e      	ldr	r3, [pc, #56]	; (e818 <sys_clock_set_timeout+0x58>)
    e7de:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    e7e0:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    e7e2:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
    e7e6:	bf18      	it	ne
    e7e8:	2000      	movne	r0, #0
	return (a - b) & COUNTER_MAX;
    e7ea:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    e7ee:	3301      	adds	r3, #1
	cc_data[chan].callback = handler;
    e7f0:	4a0a      	ldr	r2, [pc, #40]	; (e81c <sys_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    e7f2:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
    e7f4:	480a      	ldr	r0, [pc, #40]	; (e820 <sys_clock_set_timeout+0x60>)
    e7f6:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    e7f8:	2000      	movs	r0, #0
    e7fa:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    e7fc:	4a04      	ldr	r2, [pc, #16]	; (e810 <sys_clock_set_timeout+0x50>)
    e7fe:	4293      	cmp	r3, r2
    e800:	bf94      	ite	ls
    e802:	18c9      	addls	r1, r1, r3
    e804:	1889      	addhi	r1, r1, r2
    e806:	f7ff bf3d 	b.w	e684 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    e80a:	2000      	movs	r0, #0
    e80c:	e7e3      	b.n	e7d6 <sys_clock_set_timeout+0x16>
    e80e:	bf00      	nop
    e810:	007fffff 	.word	0x007fffff
    e814:	50015000 	.word	0x50015000
    e818:	20000370 	.word	0x20000370
    e81c:	20000364 	.word	0x20000364
    e820:	0000e66d 	.word	0x0000e66d

0000e824 <sys_clock_elapsed>:
    e824:	4b04      	ldr	r3, [pc, #16]	; (e838 <sys_clock_elapsed+0x14>)
    e826:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
    e82a:	4b04      	ldr	r3, [pc, #16]	; (e83c <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
    e82c:	681b      	ldr	r3, [r3, #0]
    e82e:	1ac0      	subs	r0, r0, r3
}
    e830:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    e834:	4770      	bx	lr
    e836:	bf00      	nop
    e838:	50015000 	.word	0x50015000
    e83c:	20000370 	.word	0x20000370

0000e840 <__NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
    e840:	2800      	cmp	r0, #0
    e842:	db0d      	blt.n	e860 <__NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e844:	2201      	movs	r2, #1
    e846:	0943      	lsrs	r3, r0, #5
    e848:	f000 001f 	and.w	r0, r0, #31
    e84c:	fa02 f000 	lsl.w	r0, r2, r0
    e850:	4a04      	ldr	r2, [pc, #16]	; (e864 <__NVIC_DisableIRQ+0x24>)
    e852:	3320      	adds	r3, #32
    e854:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    e858:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e85c:	f3bf 8f6f 	isb	sy
}
    e860:	4770      	bx	lr
    e862:	bf00      	nop
    e864:	e000e100 	.word	0xe000e100

0000e868 <config_regions>:
}
#endif /* CONFIG_ARM_FIRMWARE_HAS_SECURE_ENTRY_FUNCS */


static void config_regions(bool ram, size_t start, size_t end, uint32_t perm)
{
    e868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const size_t region_size = ram ? RAM_SECURE_ATTRIBUTION_REGION_SIZE
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
    e86a:	2800      	cmp	r0, #0
{
    e86c:	461c      	mov	r4, r3
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
    e86e:	bf14      	ite	ne
    e870:	f44f 5300 	movne.w	r3, #8192	; 0x2000
    e874:	f44f 4380 	moveq.w	r3, #16384	; 0x4000

	__ASSERT_NO_MSG(end >= start);
    e878:	428a      	cmp	r2, r1
    e87a:	d20b      	bcs.n	e894 <config_regions+0x2c>
    e87c:	2294      	movs	r2, #148	; 0x94
    e87e:	4927      	ldr	r1, [pc, #156]	; (e91c <config_regions+0xb4>)
    e880:	4827      	ldr	r0, [pc, #156]	; (e920 <config_regions+0xb8>)
    e882:	f006 fb83 	bl	14f8c <printk>
    e886:	2194      	movs	r1, #148	; 0x94
    e888:	4824      	ldr	r0, [pc, #144]	; (e91c <config_regions+0xb4>)
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
	PRINT("\n");
}
    e88a:	b003      	add	sp, #12
    e88c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	__ASSERT_NO_MSG(end >= start);
    e890:	f006 bc48 	b.w	15124 <assert_post_action>
	if (end <= start) {
    e894:	d040      	beq.n	e918 <config_regions+0xb0>
    e896:	460d      	mov	r5, r1
    e898:	4e22      	ldr	r6, [pc, #136]	; (e924 <config_regions+0xbc>)
		if (ram) {
    e89a:	2800      	cmp	r0, #0
    e89c:	d039      	beq.n	e912 <config_regions+0xaa>
			NRF_SPU->RAMREGION[i].PERM = perm;
    e89e:	f505 77e0 	add.w	r7, r5, #448	; 0x1c0
	for (size_t i = start; i < end; i++) {
    e8a2:	3501      	adds	r5, #1
    e8a4:	42aa      	cmp	r2, r5
			NRF_SPU->FLASHREGION[i].PERM = perm;
    e8a6:	f846 4027 	str.w	r4, [r6, r7, lsl #2]
	for (size_t i = start; i < end; i++) {
    e8aa:	d8f6      	bhi.n	e89a <config_regions+0x32>
	PRINT("%02u %02u 0x%05x 0x%05x \t", start, end - 1,
    e8ac:	fb02 f003 	mul.w	r0, r2, r3
    e8b0:	3a01      	subs	r2, #1
    e8b2:	434b      	muls	r3, r1
    e8b4:	9000      	str	r0, [sp, #0]
    e8b6:	481c      	ldr	r0, [pc, #112]	; (e928 <config_regions+0xc0>)
    e8b8:	f006 fb68 	bl	14f8c <printk>
	PRINT("%s", perm & (ram ? SRAM_SECURE : FLASH_SECURE) ? "Secure\t\t" :
    e8bc:	4b1b      	ldr	r3, [pc, #108]	; (e92c <config_regions+0xc4>)
    e8be:	f014 0f10 	tst.w	r4, #16
    e8c2:	491b      	ldr	r1, [pc, #108]	; (e930 <config_regions+0xc8>)
    e8c4:	481b      	ldr	r0, [pc, #108]	; (e934 <config_regions+0xcc>)
    e8c6:	bf08      	it	eq
    e8c8:	4619      	moveq	r1, r3
    e8ca:	f006 fb5f 	bl	14f8c <printk>
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
    e8ce:	f014 0f04 	tst.w	r4, #4
    e8d2:	bf14      	ite	ne
    e8d4:	2172      	movne	r1, #114	; 0x72
    e8d6:	212d      	moveq	r1, #45	; 0x2d
    e8d8:	4817      	ldr	r0, [pc, #92]	; (e938 <config_regions+0xd0>)
    e8da:	f006 fb57 	bl	14f8c <printk>
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
    e8de:	f014 0f02 	tst.w	r4, #2
    e8e2:	bf14      	ite	ne
    e8e4:	2177      	movne	r1, #119	; 0x77
    e8e6:	212d      	moveq	r1, #45	; 0x2d
    e8e8:	4813      	ldr	r0, [pc, #76]	; (e938 <config_regions+0xd0>)
    e8ea:	f006 fb4f 	bl	14f8c <printk>
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
    e8ee:	f014 0f01 	tst.w	r4, #1
    e8f2:	bf0c      	ite	eq
    e8f4:	212d      	moveq	r1, #45	; 0x2d
    e8f6:	2178      	movne	r1, #120	; 0x78
    e8f8:	480f      	ldr	r0, [pc, #60]	; (e938 <config_regions+0xd0>)
    e8fa:	f006 fb47 	bl	14f8c <printk>
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
    e8fe:	216c      	movs	r1, #108	; 0x6c
    e900:	480d      	ldr	r0, [pc, #52]	; (e938 <config_regions+0xd0>)
    e902:	f006 fb43 	bl	14f8c <printk>
	PRINT("\n");
    e906:	480d      	ldr	r0, [pc, #52]	; (e93c <config_regions+0xd4>)
}
    e908:	b003      	add	sp, #12
    e90a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	PRINT("\n");
    e90e:	f006 bb3d 	b.w	14f8c <printk>
			NRF_SPU->FLASHREGION[i].PERM = perm;
    e912:	f505 77c0 	add.w	r7, r5, #384	; 0x180
    e916:	e7c4      	b.n	e8a2 <config_regions+0x3a>
}
    e918:	b003      	add	sp, #12
    e91a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e91c:	00018027 	.word	0x00018027
    e920:	00017e72 	.word	0x00017e72
    e924:	50003000 	.word	0x50003000
    e928:	00018048 	.word	0x00018048
    e92c:	0001801b 	.word	0x0001801b
    e930:	00018012 	.word	0x00018012
    e934:	000181f9 	.word	0x000181f9
    e938:	00018062 	.word	0x00018062
    e93c:	00018c5a 	.word	0x00018c5a

0000e940 <spm_jump>:
	tz_nonsecure_fpu_access_enable();
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */
}

void spm_jump(void)
{
    e940:	b530      	push	{r4, r5, lr}
	 * The assumption is that the MSP is located at VTOR_NS[0].
	 */
	uint32_t *vtor_ns = (uint32_t *)NON_SECURE_APP_ADDRESS;

	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
    e942:	f44f 3400 	mov.w	r4, #131072	; 0x20000
{
    e946:	b085      	sub	sp, #20
	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
    e948:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    e94c:	4825      	ldr	r0, [pc, #148]	; (e9e4 <spm_jump+0xa4>)
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
    e94e:	4d26      	ldr	r5, [pc, #152]	; (e9e8 <spm_jump+0xa8>)
	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
    e950:	f006 fb1c 	bl	14f8c <printk>
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
    e954:	6821      	ldr	r1, [r4, #0]
    e956:	4825      	ldr	r0, [pc, #148]	; (e9ec <spm_jump+0xac>)
    e958:	f006 fb18 	bl	14f8c <printk>
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
    e95c:	6829      	ldr	r1, [r5, #0]
    e95e:	4824      	ldr	r0, [pc, #144]	; (e9f0 <spm_jump+0xb0>)
    e960:	f006 fb14 	bl	14f8c <printk>

	/* Configure Non-Secure stack */
	tz_nonsecure_setup_conf_t spm_ns_conf = {
    e964:	2210      	movs	r2, #16
    e966:	2100      	movs	r1, #0
    e968:	4668      	mov	r0, sp
    e96a:	f006 fd2e 	bl	153ca <memset>
		.vtor_ns = (uint32_t)vtor_ns,
		.msp_ns = vtor_ns[0],
    e96e:	6823      	ldr	r3, [r4, #0]
	tz_nonsecure_state_setup(spm_ns_conf);
    e970:	4668      	mov	r0, sp
	tz_nonsecure_setup_conf_t spm_ns_conf = {
    e972:	9300      	str	r3, [sp, #0]
    e974:	9402      	str	r4, [sp, #8]
	tz_nonsecure_state_setup(spm_ns_conf);
    e976:	f000 fe99 	bl	f6ac <tz_nonsecure_state_setup>
	tz_nonsecure_exception_prio_config(1);
    e97a:	2001      	movs	r0, #1
    e97c:	f000 fec6 	bl	f70c <tz_nonsecure_exception_prio_config>
	tz_nbanked_exception_target_state_set(0);
    e980:	2000      	movs	r0, #0
    e982:	f000 feaf 	bl	f6e4 <tz_nbanked_exception_target_state_set>
	tz_nonsecure_system_reset_req_block(
    e986:	2000      	movs	r0, #0
    e988:	f000 fed4 	bl	f734 <tz_nonsecure_system_reset_req_block>
	tz_sau_configure(0, 1);
    e98c:	2101      	movs	r1, #1
    e98e:	2000      	movs	r0, #0
    e990:	f000 feee 	bl	f770 <tz_sau_configure>
	tz_nonsecure_fpu_access_enable();
    e994:	f000 fee2 	bl	f75c <tz_nonsecure_fpu_access_enable>
	/* Generate function pointer for Non-Secure function call. */
	TZ_NONSECURE_FUNC_PTR_DECLARE(reset_ns);
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);

	if (TZ_NONSECURE_FUNC_PTR_IS_NS(reset_ns)) {
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
    e998:	4816      	ldr	r0, [pc, #88]	; (e9f4 <spm_jump+0xb4>)
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
    e99a:	682c      	ldr	r4, [r5, #0]
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
    e99c:	f006 faf6 	bl	14f8c <printk>
	NVIC_DisableIRQ(id);
    e9a0:	2008      	movs	r0, #8
    e9a2:	f7ff ff4d 	bl	e840 <__NVIC_DisableIRQ>
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    e9a6:	4a14      	ldr	r2, [pc, #80]	; (e9f8 <spm_jump+0xb8>)
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
    e9a8:	f024 0401 	bic.w	r4, r4, #1
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    e9ac:	f8d2 3820 	ldr.w	r3, [r2, #2080]	; 0x820
	return present && (usel || split);
    e9b0:	2b00      	cmp	r3, #0
    e9b2:	da07      	bge.n	e9c4 <spm_jump+0x84>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
    e9b4:	f003 0303 	and.w	r3, r3, #3
	return present && (usel || split);
    e9b8:	3b02      	subs	r3, #2
    e9ba:	2b01      	cmp	r3, #1
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
    e9bc:	bf9c      	itt	ls
    e9be:	4b0f      	ldrls	r3, [pc, #60]	; (e9fc <spm_jump+0xbc>)
    e9c0:	f8c2 3820 	strls.w	r3, [r2, #2080]	; 0x820
	irq_target_state_set(id, IRQ_TARGET_STATE_NON_SECURE);
    e9c4:	2101      	movs	r1, #1
    e9c6:	2008      	movs	r0, #8
    e9c8:	f006 fc45 	bl	15256 <irq_target_state_set>
  __ASM volatile ("dsb 0xF":::"memory");
    e9cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e9d0:	f3bf 8f6f 	isb	sy

		__DSB();
		__ISB();

		/* Jump to Non-Secure firmware */
		reset_ns();
    e9d4:	0864      	lsrs	r4, r4, #1
    e9d6:	0064      	lsls	r4, r4, #1
    e9d8:	4620      	mov	r0, r4
    e9da:	4621      	mov	r1, r4
    e9dc:	4622      	mov	r2, r4
    e9de:	4623      	mov	r3, r4
    e9e0:	f7fe fb74 	bl	d0cc <__gnu_cmse_nonsecure_call>

		CODE_UNREACHABLE;
    e9e4:	00018065 	.word	0x00018065
    e9e8:	00020004 	.word	0x00020004
    e9ec:	0001807c 	.word	0x0001807c
    e9f0:	00018091 	.word	0x00018091
    e9f4:	000180af 	.word	0x000180af
    e9f8:	50003000 	.word	0x50003000
    e9fc:	80000100 	.word	0x80000100

0000ea00 <spm_config>:
		      (uint32_t)reset_ns);
	}
}

void spm_config(void)
{
    ea00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("Flash regions\t\tDomain\t\tPermissions\n");
    ea04:	485f      	ldr	r0, [pc, #380]	; (eb84 <spm_config+0x184>)
    ea06:	f006 fac1 	bl	14f8c <printk>
	config_regions(false, 0, NON_SECURE_FLASH_REGION_INDEX,
    ea0a:	2100      	movs	r1, #0
    ea0c:	f240 1317 	movw	r3, #279	; 0x117
    ea10:	4608      	mov	r0, r1
    ea12:	2208      	movs	r2, #8
    ea14:	f7ff ff28 	bl	e868 <config_regions>
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    ea18:	4d5b      	ldr	r5, [pc, #364]	; (eb88 <spm_config+0x188>)
	config_regions(false, NON_SECURE_FLASH_REGION_INDEX,
    ea1a:	f240 1307 	movw	r3, #263	; 0x107
    ea1e:	2240      	movs	r2, #64	; 0x40
    ea20:	2108      	movs	r1, #8
    ea22:	2000      	movs	r0, #0
    ea24:	f7ff ff20 	bl	e868 <config_regions>
	PRINT("\n");
    ea28:	4858      	ldr	r0, [pc, #352]	; (eb8c <spm_config+0x18c>)
    ea2a:	f006 faaf 	bl	14f8c <printk>
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    ea2e:	f3c5 040d 	ubfx	r4, r5, #0, #14
	__ASSERT((uint32_t)__sg_size <= nsc_size,
    ea32:	4b57      	ldr	r3, [pc, #348]	; (eb90 <spm_config+0x190>)
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    ea34:	f5c4 4480 	rsb	r4, r4, #16384	; 0x4000
	__ASSERT((uint32_t)__sg_size <= nsc_size,
    ea38:	429c      	cmp	r4, r3
    ea3a:	d208      	bcs.n	ea4e <spm_config+0x4e>
    ea3c:	4955      	ldr	r1, [pc, #340]	; (eb94 <spm_config+0x194>)
    ea3e:	4856      	ldr	r0, [pc, #344]	; (eb98 <spm_config+0x198>)
    ea40:	2282      	movs	r2, #130	; 0x82
    ea42:	f006 faa3 	bl	14f8c <printk>
    ea46:	2182      	movs	r1, #130	; 0x82
    ea48:	4852      	ldr	r0, [pc, #328]	; (eb94 <spm_config+0x194>)
    ea4a:	f006 fb6b 	bl	15124 <assert_post_action>
                                            uint8_t            flash_nsc_id,
                                            nrf_spu_nsc_size_t flash_nsc_size,
                                            uint8_t            region_number,
                                            bool               lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].REGION & SPU_FLASHNSC_REGION_LOCK_Msk));
    ea4e:	4e53      	ldr	r6, [pc, #332]	; (eb9c <spm_config+0x19c>)
	nrf_spu_flashnsc_set(NRF_SPU, 0, FLASH_NSC_SIZE_REG(nsc_size),
    ea50:	f3c4 1443 	ubfx	r4, r4, #5, #4
    ea54:	f8d6 2500 	ldr.w	r2, [r6, #1280]	; 0x500
    ea58:	f3c5 3585 	ubfx	r5, r5, #14, #6
    ea5c:	05d2      	lsls	r2, r2, #23
    ea5e:	d50a      	bpl.n	ea76 <spm_config+0x76>
    ea60:	494f      	ldr	r1, [pc, #316]	; (eba0 <spm_config+0x1a0>)
    ea62:	484d      	ldr	r0, [pc, #308]	; (eb98 <spm_config+0x198>)
    ea64:	f44f 72bd 	mov.w	r2, #378	; 0x17a
    ea68:	f006 fa90 	bl	14f8c <printk>
    ea6c:	f44f 71bd 	mov.w	r1, #378	; 0x17a
    ea70:	484b      	ldr	r0, [pc, #300]	; (eba0 <spm_config+0x1a0>)
    ea72:	f006 fb57 	bl	15124 <assert_post_action>
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].SIZE & SPU_FLASHNSC_SIZE_LOCK_Msk));
    ea76:	f8d6 3504 	ldr.w	r3, [r6, #1284]	; 0x504
    ea7a:	05db      	lsls	r3, r3, #23
    ea7c:	d50a      	bpl.n	ea94 <spm_config+0x94>
    ea7e:	4948      	ldr	r1, [pc, #288]	; (eba0 <spm_config+0x1a0>)
    ea80:	4845      	ldr	r0, [pc, #276]	; (eb98 <spm_config+0x198>)
    ea82:	f240 127b 	movw	r2, #379	; 0x17b
    ea86:	f006 fa81 	bl	14f8c <printk>
    ea8a:	f240 117b 	movw	r1, #379	; 0x17b
    ea8e:	4844      	ldr	r0, [pc, #272]	; (eba0 <spm_config+0x1a0>)
    ea90:	f006 fb48 	bl	15124 <assert_post_action>

    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
    ea94:	4b41      	ldr	r3, [pc, #260]	; (eb9c <spm_config+0x19c>)
	PRINT("Non-secure callable region 0 placed in flash region %d with size %d.\n",
    ea96:	4843      	ldr	r0, [pc, #268]	; (eba4 <spm_config+0x1a4>)
    ea98:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
        (lock_conf ? SPU_FLASHNSC_REGION_LOCK_Msk : 0);
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
    ea9c:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
    eaa0:	f8d3 1500 	ldr.w	r1, [r3, #1280]	; 0x500
    eaa4:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    eaa8:	0152      	lsls	r2, r2, #5
    eaaa:	f006 fa6f 	bl	14f8c <printk>
	PRINT("\n");
    eaae:	4837      	ldr	r0, [pc, #220]	; (eb8c <spm_config+0x18c>)
    eab0:	f006 fa6c 	bl	14f8c <printk>
	int err = spm_secure_services_init();
    eab4:	f000 f88c 	bl	ebd0 <spm_secure_services_init>
	if (err != 0) {
    eab8:	4601      	mov	r1, r0
    eaba:	b110      	cbz	r0, eac2 <spm_config+0xc2>
		PRINT("Could not initialize secure services (err %d).\n", err);
    eabc:	483a      	ldr	r0, [pc, #232]	; (eba8 <spm_config+0x1a8>)
    eabe:	f006 fa65 	bl	14f8c <printk>
	NRF_SPU->DPPI[0].PERM = mask;
    eac2:	2400      	movs	r4, #0
	PRINT("SRAM region\t\tDomain\t\tPermissions\n");
    eac4:	4839      	ldr	r0, [pc, #228]	; (ebac <spm_config+0x1ac>)
    eac6:	f006 fa61 	bl	14f8c <printk>
	config_regions(true, 0, NON_SECURE_RAM_REGION_INDEX,
    eaca:	f240 1317 	movw	r3, #279	; 0x117
    eace:	2204      	movs	r2, #4
    ead0:	2100      	movs	r1, #0
    ead2:	2001      	movs	r0, #1
    ead4:	f7ff fec8 	bl	e868 <config_regions>
	NRF_SPU->DPPI[0].PERM = mask;
    ead8:	4d30      	ldr	r5, [pc, #192]	; (eb9c <spm_config+0x19c>)
	config_regions(true, NON_SECURE_RAM_REGION_INDEX,
    eada:	f240 1307 	movw	r3, #263	; 0x107
    eade:	2240      	movs	r2, #64	; 0x40
    eae0:	2104      	movs	r1, #4
    eae2:	2001      	movs	r0, #1
    eae4:	f7ff fec0 	bl	e868 <config_regions>
	PRINT("\n");
    eae8:	4828      	ldr	r0, [pc, #160]	; (eb8c <spm_config+0x18c>)
    eaea:	f006 fa4f 	bl	14f8c <printk>
	NRF_SPU->DPPI[0].PERM = mask;
    eaee:	f8c5 4480 	str.w	r4, [r5, #1152]	; 0x480
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
    eaf2:	482f      	ldr	r0, [pc, #188]	; (ebb0 <spm_config+0x1b0>)
    eaf4:	f006 fa4a 	bl	14f8c <printk>
		PRINT("%02u %-21s%s", i, periph[i].name,
    eaf8:	4e2e      	ldr	r6, [pc, #184]	; (ebb4 <spm_config+0x1b4>)
		NRF_SPU->GPIOPORT[0].PERM = 0;
    eafa:	f8c5 44c0 	str.w	r4, [r5, #1216]	; 0x4c0
		PRINT("%02u %-21s%s", i, periph[i].name,
    eafe:	4f2e      	ldr	r7, [pc, #184]	; (ebb8 <spm_config+0x1b8>)
		NRF_SPU->GPIOPORT[1].PERM = 0;
    eb00:	f8c5 44c8 	str.w	r4, [r5, #1224]	; 0x4c8
		PRINT("%02u %-21s%s", i, periph[i].name,
    eb04:	f8df 80c4 	ldr.w	r8, [pc, #196]	; ebcc <spm_config+0x1cc>
    eb08:	4d2c      	ldr	r5, [pc, #176]	; (ebbc <spm_config+0x1bc>)
    eb0a:	f895 9005 	ldrb.w	r9, [r5, #5]
    eb0e:	4621      	mov	r1, r4
    eb10:	f1b9 0f00 	cmp.w	r9, #0
    eb14:	bf14      	ite	ne
    eb16:	4633      	movne	r3, r6
    eb18:	463b      	moveq	r3, r7
    eb1a:	4640      	mov	r0, r8
    eb1c:	682a      	ldr	r2, [r5, #0]
    eb1e:	f006 fa35 	bl	14f8c <printk>
		if (!periph[i].nonsecure) {
    eb22:	f1b9 0f00 	cmp.w	r9, #0
    eb26:	d10c      	bne.n	eb42 <spm_config+0x142>
			PRINT("\tSKIP\n");
    eb28:	4825      	ldr	r0, [pc, #148]	; (ebc0 <spm_config+0x1c0>)
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
    eb2a:	3401      	adds	r4, #1
			PRINT("\tOK\n");
    eb2c:	f006 fa2e 	bl	14f8c <printk>
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
    eb30:	2c2d      	cmp	r4, #45	; 0x2d
    eb32:	f105 0508 	add.w	r5, r5, #8
    eb36:	d1e8      	bne.n	eb0a <spm_config+0x10a>
	PRINT("\n");
    eb38:	4814      	ldr	r0, [pc, #80]	; (eb8c <spm_config+0x18c>)
	spm_config_flash();
	spm_config_sram();
	spm_config_peripherals();
}
    eb3a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("\n");
    eb3e:	f006 ba25 	b.w	14f8c <printk>
		err = spm_config_peripheral(periph[i].id, false);
    eb42:	f895 9004 	ldrb.w	r9, [r5, #4]
	NVIC_DisableIRQ(id);
    eb46:	f995 0004 	ldrsb.w	r0, [r5, #4]
    eb4a:	f7ff fe79 	bl	e840 <__NVIC_DisableIRQ>
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    eb4e:	ea4f 0389 	mov.w	r3, r9, lsl #2
    eb52:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    eb56:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
    eb5a:	f1b9 0f2f 	cmp.w	r9, #47	; 0x2f
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    eb5e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
    eb62:	d006      	beq.n	eb72 <spm_config+0x172>
	return present && (usel || split);
    eb64:	2a00      	cmp	r2, #0
    eb66:	da07      	bge.n	eb78 <spm_config+0x178>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
    eb68:	f002 0203 	and.w	r2, r2, #3
	return present && (usel || split);
    eb6c:	3a02      	subs	r2, #2
    eb6e:	2a01      	cmp	r2, #1
    eb70:	d802      	bhi.n	eb78 <spm_config+0x178>
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
    eb72:	4a14      	ldr	r2, [pc, #80]	; (ebc4 <spm_config+0x1c4>)
    eb74:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	irq_target_state_set(id, IRQ_TARGET_STATE_NON_SECURE);
    eb78:	2101      	movs	r1, #1
    eb7a:	4648      	mov	r0, r9
    eb7c:	f006 fb6b 	bl	15256 <irq_target_state_set>
			PRINT("\tOK\n");
    eb80:	4811      	ldr	r0, [pc, #68]	; (ebc8 <spm_config+0x1c8>)
    eb82:	e7d2      	b.n	eb2a <spm_config+0x12a>
    eb84:	000180e5 	.word	0x000180e5
    eb88:	0001bfe0 	.word	0x0001bfe0
    eb8c:	00018c5a 	.word	0x00018c5a
    eb90:	00000020 	.word	0x00000020
    eb94:	00018027 	.word	0x00018027
    eb98:	00017e72 	.word	0x00017e72
    eb9c:	50003000 	.word	0x50003000
    eba0:	00018109 	.word	0x00018109
    eba4:	0001813b 	.word	0x0001813b
    eba8:	00018181 	.word	0x00018181
    ebac:	000181b1 	.word	0x000181b1
    ebb0:	000181d3 	.word	0x000181d3
    ebb4:	000180da 	.word	0x000180da
    ebb8:	0001801f 	.word	0x0001801f
    ebbc:	00017a98 	.word	0x00017a98
    ebc0:	000181fc 	.word	0x000181fc
    ebc4:	80000100 	.word	0x80000100
    ebc8:	00018203 	.word	0x00018203
    ebcc:	000181ef 	.word	0x000181ef

0000ebd0 <spm_secure_services_init>:
int spm_secure_services_init(void)
{
	int err = 0;

#ifdef CONFIG_SPM_SERVICE_RNG
	err = nrf_cc3xx_platform_ctr_drbg_init(&ctr_drbg_ctx, NULL, 0);
    ebd0:	2200      	movs	r2, #0
    ebd2:	4802      	ldr	r0, [pc, #8]	; (ebdc <spm_secure_services_init+0xc>)
    ebd4:	4611      	mov	r1, r2
    ebd6:	f003 bc27 	b.w	12428 <nrf_cc3xx_platform_ctr_drbg_init>
    ebda:	bf00      	nop
    ebdc:	20000374 	.word	0x20000374

0000ebe0 <__acle_se_spm_request_random_number_nse>:


#ifdef CONFIG_SPM_SERVICE_RNG
__TZ_NONSECURE_ENTRY_FUNC
int spm_request_random_number_nse(uint8_t *output, size_t len, size_t *olen)
{
    ebe0:	b570      	push	{r4, r5, r6, lr}
    ebe2:	4606      	mov	r6, r0
    ebe4:	460d      	mov	r5, r1
    ebe6:	4614      	mov	r4, r2
	return arm_cmse_addr_is_secure(ptr) == 1;
    ebe8:	f006 fb7c 	bl	152e4 <arm_cmse_addr_is_secure>
	int err = -EINVAL;

	if (ptr_in_secure_area((intptr_t)output) ||
    ebec:	2801      	cmp	r0, #1
    ebee:	d00d      	beq.n	ec0c <__acle_se_spm_request_random_number_nse+0x2c>
	return arm_cmse_addr_is_secure(ptr) == 1;
    ebf0:	4620      	mov	r0, r4
    ebf2:	f006 fb77 	bl	152e4 <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)output) ||
    ebf6:	2801      	cmp	r0, #1
    ebf8:	d008      	beq.n	ec0c <__acle_se_spm_request_random_number_nse+0x2c>
	    ptr_in_secure_area((intptr_t)olen)) {
		return -EINVAL;
	}

	err = nrf_cc3xx_platform_ctr_drbg_get(&ctr_drbg_ctx, output, len, olen);
    ebfa:	4623      	mov	r3, r4
    ebfc:	462a      	mov	r2, r5
    ebfe:	4631      	mov	r1, r6
    ec00:	4808      	ldr	r0, [pc, #32]	; (ec24 <__acle_se_spm_request_random_number_nse+0x44>)
    ec02:	f003 fc45 	bl	12490 <nrf_cc3xx_platform_ctr_drbg_get>
	if (*olen != len) {
    ec06:	6823      	ldr	r3, [r4, #0]
    ec08:	42ab      	cmp	r3, r5
    ec0a:	d001      	beq.n	ec10 <__acle_se_spm_request_random_number_nse+0x30>
		return -EINVAL;
    ec0c:	f06f 0015 	mvn.w	r0, #21
	}

	return err;
}
    ec10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ec14:	4671      	mov	r1, lr
    ec16:	4672      	mov	r2, lr
    ec18:	4673      	mov	r3, lr
    ec1a:	46f4      	mov	ip, lr
    ec1c:	f38e 8c00 	msr	CPSR_fs, lr
    ec20:	4774      	bxns	lr
    ec22:	bf00      	nop
    ec24:	20000374 	.word	0x20000374

0000ec28 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    ec28:	4801      	ldr	r0, [pc, #4]	; (ec30 <nrf_cc3xx_platform_abort_init+0x8>)
    ec2a:	f003 bbf5 	b.w	12418 <nrf_cc3xx_platform_set_abort>
    ec2e:	bf00      	nop
    ec30:	00017c00 	.word	0x00017c00

0000ec34 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    ec34:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    ec36:	b308      	cbz	r0, ec7c <mutex_unlock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    ec38:	6843      	ldr	r3, [r0, #4]
    ec3a:	2b04      	cmp	r3, #4
    ec3c:	d007      	beq.n	ec4e <mutex_unlock_platform+0x1a>
    ec3e:	2b08      	cmp	r3, #8
    ec40:	d013      	beq.n	ec6a <mutex_unlock_platform+0x36>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    ec42:	b1f3      	cbz	r3, ec82 <mutex_unlock_platform+0x4e>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    ec44:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    ec46:	f002 f823 	bl	10c90 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    ec4a:	2000      	movs	r0, #0
    ec4c:	e00c      	b.n	ec68 <mutex_unlock_platform+0x34>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    ec4e:	2200      	movs	r2, #0
    ec50:	6803      	ldr	r3, [r0, #0]
    ec52:	e8d3 1fef 	ldaex	r1, [r3]
    ec56:	2901      	cmp	r1, #1
    ec58:	d103      	bne.n	ec62 <mutex_unlock_platform+0x2e>
    ec5a:	e8c3 2fe0 	stlex	r0, r2, [r3]
    ec5e:	2800      	cmp	r0, #0
    ec60:	d1f7      	bne.n	ec52 <mutex_unlock_platform+0x1e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    ec62:	4809      	ldr	r0, [pc, #36]	; (ec88 <mutex_unlock_platform+0x54>)
    ec64:	bf08      	it	eq
    ec66:	4610      	moveq	r0, r2
    }
}
    ec68:	bd08      	pop	{r3, pc}
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    ec6a:	6803      	ldr	r3, [r0, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    ec6c:	2000      	movs	r0, #0
    ec6e:	781b      	ldrb	r3, [r3, #0]
    ec70:	4a06      	ldr	r2, [pc, #24]	; (ec8c <mutex_unlock_platform+0x58>)
    ec72:	f503 7380 	add.w	r3, r3, #256	; 0x100
    ec76:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
        return NRF_CC3XX_PLATFORM_SUCCESS;
    ec7a:	e7f5      	b.n	ec68 <mutex_unlock_platform+0x34>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    ec7c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    ec80:	e7f2      	b.n	ec68 <mutex_unlock_platform+0x34>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    ec82:	4803      	ldr	r0, [pc, #12]	; (ec90 <mutex_unlock_platform+0x5c>)
    ec84:	e7f0      	b.n	ec68 <mutex_unlock_platform+0x34>
    ec86:	bf00      	nop
    ec88:	ffff8fe9 	.word	0xffff8fe9
    ec8c:	50030000 	.word	0x50030000
    ec90:	ffff8fea 	.word	0xffff8fea

0000ec94 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    ec94:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    ec96:	4604      	mov	r4, r0
    ec98:	b918      	cbnz	r0, eca2 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    ec9a:	4b0d      	ldr	r3, [pc, #52]	; (ecd0 <mutex_free_platform+0x3c>)
    ec9c:	480d      	ldr	r0, [pc, #52]	; (ecd4 <mutex_free_platform+0x40>)
    ec9e:	685b      	ldr	r3, [r3, #4]
    eca0:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    eca2:	6861      	ldr	r1, [r4, #4]
    eca4:	2908      	cmp	r1, #8
    eca6:	d00d      	beq.n	ecc4 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    eca8:	f031 0304 	bics.w	r3, r1, #4
    ecac:	d00a      	beq.n	ecc4 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    ecae:	f011 0102 	ands.w	r1, r1, #2
    ecb2:	d008      	beq.n	ecc6 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    ecb4:	4621      	mov	r1, r4
    ecb6:	4808      	ldr	r0, [pc, #32]	; (ecd8 <mutex_free_platform+0x44>)
    ecb8:	f001 fdb8 	bl	1082c <k_mem_slab_free>
        mutex->mutex = NULL;
    ecbc:	2300      	movs	r3, #0
    ecbe:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    ecc0:	2300      	movs	r3, #0
    ecc2:	6063      	str	r3, [r4, #4]
}
    ecc4:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    ecc6:	2214      	movs	r2, #20
    ecc8:	6820      	ldr	r0, [r4, #0]
    ecca:	f006 fb7e 	bl	153ca <memset>
    ecce:	e7f7      	b.n	ecc0 <mutex_free_platform+0x2c>
    ecd0:	2000004c 	.word	0x2000004c
    ecd4:	000183bd 	.word	0x000183bd
    ecd8:	20000530 	.word	0x20000530

0000ecdc <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    ecdc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    ecde:	4604      	mov	r4, r0
    ece0:	b918      	cbnz	r0, ecea <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    ece2:	4b16      	ldr	r3, [pc, #88]	; (ed3c <mutex_init_platform+0x60>)
    ece4:	4816      	ldr	r0, [pc, #88]	; (ed40 <mutex_init_platform+0x64>)
    ece6:	685b      	ldr	r3, [r3, #4]
    ece8:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    ecea:	6863      	ldr	r3, [r4, #4]
    ecec:	2b04      	cmp	r3, #4
    ecee:	d023      	beq.n	ed38 <mutex_init_platform+0x5c>
    ecf0:	2b08      	cmp	r3, #8
    ecf2:	d021      	beq.n	ed38 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    ecf4:	b9cb      	cbnz	r3, ed2a <mutex_init_platform+0x4e>
    ecf6:	6823      	ldr	r3, [r4, #0]
    ecf8:	b9bb      	cbnz	r3, ed2a <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    ecfa:	f04f 32ff 	mov.w	r2, #4294967295
    ecfe:	f04f 33ff 	mov.w	r3, #4294967295
    ed02:	4621      	mov	r1, r4
    ed04:	480f      	ldr	r0, [pc, #60]	; (ed44 <mutex_init_platform+0x68>)
    ed06:	f001 fd37 	bl	10778 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    ed0a:	b908      	cbnz	r0, ed10 <mutex_init_platform+0x34>
    ed0c:	6823      	ldr	r3, [r4, #0]
    ed0e:	b91b      	cbnz	r3, ed18 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    ed10:	4b0a      	ldr	r3, [pc, #40]	; (ed3c <mutex_init_platform+0x60>)
    ed12:	480d      	ldr	r0, [pc, #52]	; (ed48 <mutex_init_platform+0x6c>)
    ed14:	685b      	ldr	r3, [r3, #4]
    ed16:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    ed18:	2214      	movs	r2, #20
    ed1a:	2100      	movs	r1, #0
    ed1c:	6820      	ldr	r0, [r4, #0]
    ed1e:	f006 fb54 	bl	153ca <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    ed22:	6863      	ldr	r3, [r4, #4]
    ed24:	f043 0302 	orr.w	r3, r3, #2
    ed28:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    ed2a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    ed2c:	f006 fcbe 	bl	156ac <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    ed30:	6863      	ldr	r3, [r4, #4]
    ed32:	f043 0301 	orr.w	r3, r3, #1
    ed36:	6063      	str	r3, [r4, #4]
}
    ed38:	bd10      	pop	{r4, pc}
    ed3a:	bf00      	nop
    ed3c:	2000004c 	.word	0x2000004c
    ed40:	000183bd 	.word	0x000183bd
    ed44:	20000530 	.word	0x20000530
    ed48:	000183e3 	.word	0x000183e3

0000ed4c <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    ed4c:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    ed4e:	b340      	cbz	r0, eda2 <mutex_lock_platform+0x56>
    switch (mutex->flags) {
    ed50:	6843      	ldr	r3, [r0, #4]
    ed52:	2b04      	cmp	r3, #4
    ed54:	d00b      	beq.n	ed6e <mutex_lock_platform+0x22>
    ed56:	2b08      	cmp	r3, #8
    ed58:	d016      	beq.n	ed88 <mutex_lock_platform+0x3c>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    ed5a:	b303      	cbz	r3, ed9e <mutex_lock_platform+0x52>
        p_mutex = (struct k_mutex *)mutex->mutex;
    ed5c:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    ed5e:	f04f 32ff 	mov.w	r2, #4294967295
    ed62:	f04f 33ff 	mov.w	r3, #4294967295
    ed66:	f001 fec1 	bl	10aec <z_impl_k_mutex_lock>
        if (ret == 0) {
    ed6a:	b158      	cbz	r0, ed84 <mutex_lock_platform+0x38>
    ed6c:	e015      	b.n	ed9a <mutex_lock_platform+0x4e>
    ed6e:	2201      	movs	r2, #1
    ed70:	6803      	ldr	r3, [r0, #0]
    ed72:	e8d3 1fef 	ldaex	r1, [r3]
    ed76:	2900      	cmp	r1, #0
    ed78:	d103      	bne.n	ed82 <mutex_lock_platform+0x36>
    ed7a:	e8c3 2fe0 	stlex	r0, r2, [r3]
    ed7e:	2800      	cmp	r0, #0
    ed80:	d1f7      	bne.n	ed72 <mutex_lock_platform+0x26>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    ed82:	d10a      	bne.n	ed9a <mutex_lock_platform+0x4e>
    ed84:	2000      	movs	r0, #0
}
    ed86:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    ed88:	6803      	ldr	r3, [r0, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    ed8a:	4a07      	ldr	r2, [pc, #28]	; (eda8 <mutex_lock_platform+0x5c>)
    ed8c:	781b      	ldrb	r3, [r3, #0]
    ed8e:	f503 7380 	add.w	r3, r3, #256	; 0x100
    ed92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    ed96:	2b00      	cmp	r3, #0
    ed98:	d0f4      	beq.n	ed84 <mutex_lock_platform+0x38>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    ed9a:	4804      	ldr	r0, [pc, #16]	; (edac <mutex_lock_platform+0x60>)
    ed9c:	e7f3      	b.n	ed86 <mutex_lock_platform+0x3a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    ed9e:	4804      	ldr	r0, [pc, #16]	; (edb0 <mutex_lock_platform+0x64>)
    eda0:	e7f1      	b.n	ed86 <mutex_lock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    eda2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    eda6:	e7ee      	b.n	ed86 <mutex_lock_platform+0x3a>
    eda8:	50030000 	.word	0x50030000
    edac:	ffff8fe9 	.word	0xffff8fe9
    edb0:	ffff8fea 	.word	0xffff8fea

0000edb4 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    edb4:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    edb6:	4906      	ldr	r1, [pc, #24]	; (edd0 <nrf_cc3xx_platform_mutex_init+0x1c>)
    edb8:	2340      	movs	r3, #64	; 0x40
    edba:	2214      	movs	r2, #20
    edbc:	4805      	ldr	r0, [pc, #20]	; (edd4 <nrf_cc3xx_platform_mutex_init+0x20>)
    edbe:	f006 fc4a 	bl	15656 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    edc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    edc6:	4904      	ldr	r1, [pc, #16]	; (edd8 <nrf_cc3xx_platform_mutex_init+0x24>)
    edc8:	4804      	ldr	r0, [pc, #16]	; (eddc <nrf_cc3xx_platform_mutex_init+0x28>)
    edca:	f003 bbcd 	b.w	12568 <nrf_cc3xx_platform_set_mutexes>
    edce:	bf00      	nop
    edd0:	20000550 	.word	0x20000550
    edd4:	20000530 	.word	0x20000530
    edd8:	00017c18 	.word	0x00017c18
    eddc:	00017c08 	.word	0x00017c08

0000ede0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    ede0:	4a09      	ldr	r2, [pc, #36]	; (ee08 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    ede2:	490a      	ldr	r1, [pc, #40]	; (ee0c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    ede4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    ede6:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    ede8:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    edea:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    edec:	4908      	ldr	r1, [pc, #32]	; (ee10 <arch_swap+0x30>)
    edee:	684b      	ldr	r3, [r1, #4]
    edf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    edf4:	604b      	str	r3, [r1, #4]
    edf6:	2300      	movs	r3, #0
    edf8:	f383 8811 	msr	BASEPRI, r3
    edfc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    ee00:	6893      	ldr	r3, [r2, #8]
}
    ee02:	6f98      	ldr	r0, [r3, #120]	; 0x78
    ee04:	4770      	bx	lr
    ee06:	bf00      	nop
    ee08:	20000c30 	.word	0x20000c30
    ee0c:	00017c98 	.word	0x00017c98
    ee10:	e000ed00 	.word	0xe000ed00

0000ee14 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    ee14:	4913      	ldr	r1, [pc, #76]	; (ee64 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    ee16:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    ee18:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    ee1c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    ee1e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    ee22:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    ee26:	2020      	movs	r0, #32
    msr BASEPRI, r0
    ee28:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    ee2c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    ee30:	4f0d      	ldr	r7, [pc, #52]	; (ee68 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    ee32:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    ee36:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    ee38:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    ee3a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    ee3c:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    ee3e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    ee40:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    ee42:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    ee46:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    ee4a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    ee4e:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    ee52:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    ee56:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    ee58:	f006 fa2c 	bl	152b4 <configure_builtin_stack_guard>
    pop {r2, lr}
    ee5c:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    ee60:	4770      	bx	lr
    ee62:	0000      	.short	0x0000
    ldr r1, =_kernel
    ee64:	20000c30 	.word	0x20000c30
    ldr v4, =_SCS_ICSR
    ee68:	e000ed04 	.word	0xe000ed04

0000ee6c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    ee6c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    ee70:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    ee72:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    ee76:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    ee7a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    ee7c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    ee80:	2902      	cmp	r1, #2
    beq _oops
    ee82:	d0ff      	beq.n	ee84 <_oops>

0000ee84 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    ee84:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    ee86:	f006 fa19 	bl	152bc <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    ee8a:	bd01      	pop	{r0, pc}

0000ee8c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    ee8c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    ee8e:	2b00      	cmp	r3, #0
    ee90:	db08      	blt.n	eea4 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ee92:	2201      	movs	r2, #1
    ee94:	f000 001f 	and.w	r0, r0, #31
    ee98:	fa02 f000 	lsl.w	r0, r2, r0
    ee9c:	4a02      	ldr	r2, [pc, #8]	; (eea8 <arch_irq_enable+0x1c>)
    ee9e:	095b      	lsrs	r3, r3, #5
    eea0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    eea4:	4770      	bx	lr
    eea6:	bf00      	nop
    eea8:	e000e100 	.word	0xe000e100

0000eeac <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    eeac:	4b05      	ldr	r3, [pc, #20]	; (eec4 <arch_irq_is_enabled+0x18>)
    eeae:	0942      	lsrs	r2, r0, #5
    eeb0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    eeb4:	2301      	movs	r3, #1
    eeb6:	f000 001f 	and.w	r0, r0, #31
    eeba:	fa03 f000 	lsl.w	r0, r3, r0
}
    eebe:	4010      	ands	r0, r2
    eec0:	4770      	bx	lr
    eec2:	bf00      	nop
    eec4:	e000e100 	.word	0xe000e100

0000eec8 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    eec8:	b538      	push	{r3, r4, r5, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    eeca:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    eecc:	2c07      	cmp	r4, #7
{
    eece:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    eed0:	d908      	bls.n	eee4 <z_arm_irq_priority_set+0x1c>
    eed2:	490d      	ldr	r1, [pc, #52]	; (ef08 <z_arm_irq_priority_set+0x40>)
    eed4:	480d      	ldr	r0, [pc, #52]	; (ef0c <z_arm_irq_priority_set+0x44>)
    eed6:	2258      	movs	r2, #88	; 0x58
    eed8:	f006 f858 	bl	14f8c <printk>
    eedc:	2158      	movs	r1, #88	; 0x58
    eede:	480a      	ldr	r0, [pc, #40]	; (ef08 <z_arm_irq_priority_set+0x40>)
    eee0:	f006 f920 	bl	15124 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    eee4:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    eee6:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    eee8:	bfac      	ite	ge
    eeea:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    eeee:	4b08      	ldrlt	r3, [pc, #32]	; (ef10 <z_arm_irq_priority_set+0x48>)
    eef0:	ea4f 1444 	mov.w	r4, r4, lsl #5
    eef4:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    eef6:	bfab      	itete	ge
    eef8:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    eefc:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ef00:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ef04:	555c      	strblt	r4, [r3, r5]
}
    ef06:	bd38      	pop	{r3, r4, r5, pc}
    ef08:	00018410 	.word	0x00018410
    ef0c:	00017e72 	.word	0x00017e72
    ef10:	e000ed14 	.word	0xe000ed14

0000ef14 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    ef14:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    ef18:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    ef1a:	490b      	ldr	r1, [pc, #44]	; (ef48 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    ef1c:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    ef20:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    ef22:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    ef26:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    ef2a:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    ef2c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    ef30:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    ef34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    ef38:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    ef3c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    ef3e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    ef40:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    ef42:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    ef44:	4770      	bx	lr
    ef46:	bf00      	nop
    ef48:	0001504f 	.word	0x0001504f

0000ef4c <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    ef4c:	4b08      	ldr	r3, [pc, #32]	; (ef70 <arch_switch_to_main_thread+0x24>)
    ef4e:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    ef50:	6e43      	ldr	r3, [r0, #100]	; 0x64
    ef52:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    ef56:	4610      	mov	r0, r2
    ef58:	f381 8809 	msr	PSP, r1
    ef5c:	2100      	movs	r1, #0
    ef5e:	b663      	cpsie	if
    ef60:	f381 8811 	msr	BASEPRI, r1
    ef64:	f3bf 8f6f 	isb	sy
    ef68:	2200      	movs	r2, #0
    ef6a:	2300      	movs	r3, #0
    ef6c:	f006 f86f 	bl	1504e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    ef70:	20000c30 	.word	0x20000c30

0000ef74 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    ef74:	4901      	ldr	r1, [pc, #4]	; (ef7c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    ef76:	2210      	movs	r2, #16
	str	r2, [r1]
    ef78:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    ef7a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    ef7c:	e000ed10 	.word	0xe000ed10

0000ef80 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    ef80:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    ef82:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    ef84:	f380 8811 	msr	BASEPRI, r0
	isb
    ef88:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    ef8c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    ef90:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    ef92:	b662      	cpsie	i
	isb
    ef94:	f3bf 8f6f 	isb	sy

	bx	lr
    ef98:	4770      	bx	lr
    ef9a:	bf00      	nop

0000ef9c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    ef9c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    ef9e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    efa0:	f381 8811 	msr	BASEPRI, r1

	wfe
    efa4:	bf20      	wfe

	msr	BASEPRI, r0
    efa6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    efaa:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    efac:	4770      	bx	lr
    efae:	bf00      	nop

0000efb0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    efb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    efb2:	4605      	mov	r5, r0

	if (esf != NULL) {
    efb4:	460c      	mov	r4, r1
    efb6:	b1c9      	cbz	r1, efec <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    efb8:	688b      	ldr	r3, [r1, #8]
    efba:	4810      	ldr	r0, [pc, #64]	; (effc <z_arm_fatal_error+0x4c>)
    efbc:	9300      	str	r3, [sp, #0]
    efbe:	e9d1 2300 	ldrd	r2, r3, [r1]
    efc2:	2145      	movs	r1, #69	; 0x45
    efc4:	f006 f8c3 	bl	1514e <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    efc8:	6963      	ldr	r3, [r4, #20]
    efca:	2145      	movs	r1, #69	; 0x45
    efcc:	9300      	str	r3, [sp, #0]
    efce:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    efd2:	480b      	ldr	r0, [pc, #44]	; (f000 <z_arm_fatal_error+0x50>)
    efd4:	f006 f8bb 	bl	1514e <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    efd8:	2145      	movs	r1, #69	; 0x45
    efda:	69e2      	ldr	r2, [r4, #28]
    efdc:	4809      	ldr	r0, [pc, #36]	; (f004 <z_arm_fatal_error+0x54>)
    efde:	f006 f8b6 	bl	1514e <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    efe2:	2145      	movs	r1, #69	; 0x45
    efe4:	69a2      	ldr	r2, [r4, #24]
    efe6:	4808      	ldr	r0, [pc, #32]	; (f008 <z_arm_fatal_error+0x58>)
    efe8:	f006 f8b1 	bl	1514e <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    efec:	4621      	mov	r1, r4
    efee:	4628      	mov	r0, r5
}
    eff0:	b003      	add	sp, #12
    eff2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    eff6:	f001 ba75 	b.w	104e4 <z_fatal_error>
    effa:	bf00      	nop
    effc:	00018446 	.word	0x00018446
    f000:	0001847a 	.word	0x0001847a
    f004:	000184ae 	.word	0x000184ae
    f008:	000184c2 	.word	0x000184c2

0000f00c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    f00c:	bf30      	wfi
    b z_SysNmiOnReset
    f00e:	f7ff bffd 	b.w	f00c <z_SysNmiOnReset>
    f012:	bf00      	nop

0000f014 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    f014:	4a0b      	ldr	r2, [pc, #44]	; (f044 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    f016:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    f018:	4b0b      	ldr	r3, [pc, #44]	; (f048 <z_arm_prep_c+0x34>)
    f01a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    f01e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    f020:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    f024:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    f028:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    f02c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    f030:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    f034:	f001 fab2 	bl	1059c <z_bss_zero>
	z_data_copy();
    f038:	f002 fec8 	bl	11dcc <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    f03c:	f000 fb18 	bl	f670 <z_arm_interrupt_init>
	z_cstart();
    f040:	f001 fad0 	bl	105e4 <z_cstart>
    f044:	00000000 	.word	0x00000000
    f048:	e000ed00 	.word	0xe000ed00

0000f04c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    f04c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    f04e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    f050:	4a0b      	ldr	r2, [pc, #44]	; (f080 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    f052:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    f054:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    f056:	bf1e      	ittt	ne
	movne	r1, #0
    f058:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    f05a:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
    f05c:	f006 fb1f 	blne	1569e <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    f060:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    f062:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    f066:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    f06a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    f06e:	4905      	ldr	r1, [pc, #20]	; (f084 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    f070:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    f072:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    f074:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    f076:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    f07a:	4903      	ldr	r1, [pc, #12]	; (f088 <_isr_wrapper+0x3c>)
	bx r1
    f07c:	4708      	bx	r1
    f07e:	0000      	.short	0x0000
	ldr r2, =_kernel
    f080:	20000c30 	.word	0x20000c30
	ldr r1, =_sw_isr_table
    f084:	00015764 	.word	0x00015764
	ldr r1, =z_arm_int_exit
    f088:	0000f5c5 	.word	0x0000f5c5

0000f08c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    f08c:	2000      	movs	r0, #0
    msr CONTROL, r0
    f08e:	f380 8814 	msr	CONTROL, r0
    isb
    f092:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    f096:	2000      	movs	r0, #0
    msr MSPLIM, r0
    f098:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    f09c:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    f0a0:	f006 f848 	bl	15134 <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    f0a4:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    f0a6:	490e      	ldr	r1, [pc, #56]	; (f0e0 <__start+0x54>)
    str r0, [r1]
    f0a8:	6008      	str	r0, [r1, #0]
    dsb
    f0aa:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    f0ae:	480d      	ldr	r0, [pc, #52]	; (f0e4 <__start+0x58>)
    msr msp, r0
    f0b0:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    f0b4:	f000 fab6 	bl	f624 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    f0b8:	2020      	movs	r0, #32
    msr BASEPRI, r0
    f0ba:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    f0be:	480a      	ldr	r0, [pc, #40]	; (f0e8 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    f0c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    f0c4:	1840      	adds	r0, r0, r1
    msr PSP, r0
    f0c6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    f0ca:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    f0ce:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    f0d0:	4308      	orrs	r0, r1
    msr CONTROL, r0
    f0d2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    f0d6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    f0da:	f7ff ff9b 	bl	f014 <z_arm_prep_c>
    f0de:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    f0e0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    f0e4:	200028a0 	.word	0x200028a0
    ldr r0, =z_interrupt_stacks
    f0e8:	200029e0 	.word	0x200029e0

0000f0ec <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    f0ec:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    f0f0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    f0f4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    f0f6:	4672      	mov	r2, lr
	bl z_arm_fault
    f0f8:	f000 f970 	bl	f3dc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    f0fc:	bd01      	pop	{r0, pc}
    f0fe:	bf00      	nop

0000f100 <mem_manage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    f100:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    f102:	4c2b      	ldr	r4, [pc, #172]	; (f1b0 <mem_manage_fault.isra.0+0xb0>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    f104:	4606      	mov	r6, r0
    f106:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    f108:	482a      	ldr	r0, [pc, #168]	; (f1b4 <mem_manage_fault.isra.0+0xb4>)
    f10a:	2145      	movs	r1, #69	; 0x45
    f10c:	f006 f81f 	bl	1514e <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    f110:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    f112:	06d0      	lsls	r0, r2, #27
    f114:	d503      	bpl.n	f11e <mem_manage_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    f116:	2145      	movs	r1, #69	; 0x45
    f118:	4827      	ldr	r0, [pc, #156]	; (f1b8 <mem_manage_fault.isra.0+0xb8>)
    f11a:	f006 f818 	bl	1514e <z_log_minimal_printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    f11e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f120:	0719      	lsls	r1, r3, #28
    f122:	d503      	bpl.n	f12c <mem_manage_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    f124:	2145      	movs	r1, #69	; 0x45
    f126:	4825      	ldr	r0, [pc, #148]	; (f1bc <mem_manage_fault.isra.0+0xbc>)
    f128:	f006 f811 	bl	1514e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    f12c:	4c20      	ldr	r4, [pc, #128]	; (f1b0 <mem_manage_fault.isra.0+0xb0>)
    f12e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f130:	079a      	lsls	r2, r3, #30
    f132:	d510      	bpl.n	f156 <mem_manage_fault.isra.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    f134:	2145      	movs	r1, #69	; 0x45
    f136:	4822      	ldr	r0, [pc, #136]	; (f1c0 <mem_manage_fault.isra.0+0xc0>)
    f138:	f006 f809 	bl	1514e <z_log_minimal_printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    f13c:	6b62      	ldr	r2, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    f13e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f140:	061b      	lsls	r3, r3, #24
    f142:	d508      	bpl.n	f156 <mem_manage_fault.isra.0+0x56>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    f144:	2145      	movs	r1, #69	; 0x45
    f146:	481f      	ldr	r0, [pc, #124]	; (f1c4 <mem_manage_fault.isra.0+0xc4>)
    f148:	f006 f801 	bl	1514e <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    f14c:	b11e      	cbz	r6, f156 <mem_manage_fault.isra.0+0x56>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    f14e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f150:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    f154:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    f156:	4c16      	ldr	r4, [pc, #88]	; (f1b0 <mem_manage_fault.isra.0+0xb0>)
    f158:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    f15a:	07d6      	lsls	r6, r2, #31
    f15c:	d503      	bpl.n	f166 <mem_manage_fault.isra.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    f15e:	2145      	movs	r1, #69	; 0x45
    f160:	4819      	ldr	r0, [pc, #100]	; (f1c8 <mem_manage_fault.isra.0+0xc8>)
    f162:	f005 fff4 	bl	1514e <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    f166:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f168:	0698      	lsls	r0, r3, #26
    f16a:	d503      	bpl.n	f174 <mem_manage_fault.isra.0+0x74>
		PR_FAULT_INFO(
    f16c:	2145      	movs	r1, #69	; 0x45
    f16e:	4817      	ldr	r0, [pc, #92]	; (f1cc <mem_manage_fault.isra.0+0xcc>)
    f170:	f005 ffed 	bl	1514e <z_log_minimal_printk>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    f174:	4b0e      	ldr	r3, [pc, #56]	; (f1b0 <mem_manage_fault.isra.0+0xb0>)
    f176:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    f178:	06d1      	lsls	r1, r2, #27
    f17a:	d402      	bmi.n	f182 <mem_manage_fault.isra.0+0x82>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    f17c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    f17e:	0792      	lsls	r2, r2, #30
    f180:	d50d      	bpl.n	f19e <mem_manage_fault.isra.0+0x9e>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    f182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f184:	06db      	lsls	r3, r3, #27
    f186:	d50a      	bpl.n	f19e <mem_manage_fault.isra.0+0x9e>
    f188:	4911      	ldr	r1, [pc, #68]	; (f1d0 <mem_manage_fault.isra.0+0xd0>)
    f18a:	4812      	ldr	r0, [pc, #72]	; (f1d4 <mem_manage_fault.isra.0+0xd4>)
    f18c:	f240 124f 	movw	r2, #335	; 0x14f
    f190:	f005 fefc 	bl	14f8c <printk>
    f194:	f240 114f 	movw	r1, #335	; 0x14f
    f198:	480d      	ldr	r0, [pc, #52]	; (f1d0 <mem_manage_fault.isra.0+0xd0>)
    f19a:	f005 ffc3 	bl	15124 <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    f19e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    f1a0:	4a03      	ldr	r2, [pc, #12]	; (f1b0 <mem_manage_fault.isra.0+0xb0>)
    f1a2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    f1a4:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    f1a8:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    f1aa:	7028      	strb	r0, [r5, #0]

	return reason;
}
    f1ac:	bd70      	pop	{r4, r5, r6, pc}
    f1ae:	bf00      	nop
    f1b0:	e000ed00 	.word	0xe000ed00
    f1b4:	000184f5 	.word	0x000184f5
    f1b8:	00018510 	.word	0x00018510
    f1bc:	00018548 	.word	0x00018548
    f1c0:	00018560 	.word	0x00018560
    f1c4:	0001857d 	.word	0x0001857d
    f1c8:	00018598 	.word	0x00018598
    f1cc:	000185bc 	.word	0x000185bc
    f1d0:	000185f0 	.word	0x000185f0
    f1d4:	00017e72 	.word	0x00017e72

0000f1d8 <bus_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    f1d8:	b570      	push	{r4, r5, r6, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    f1da:	4c23      	ldr	r4, [pc, #140]	; (f268 <bus_fault.isra.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    f1dc:	4606      	mov	r6, r0
    f1de:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    f1e0:	4822      	ldr	r0, [pc, #136]	; (f26c <bus_fault.isra.0+0x94>)
    f1e2:	2145      	movs	r1, #69	; 0x45
    f1e4:	f005 ffb3 	bl	1514e <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    f1e8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    f1ea:	04d1      	lsls	r1, r2, #19
    f1ec:	d503      	bpl.n	f1f6 <bus_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    f1ee:	2145      	movs	r1, #69	; 0x45
    f1f0:	481f      	ldr	r0, [pc, #124]	; (f270 <bus_fault.isra.0+0x98>)
    f1f2:	f005 ffac 	bl	1514e <z_log_minimal_printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    f1f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f1f8:	051a      	lsls	r2, r3, #20
    f1fa:	d503      	bpl.n	f204 <bus_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    f1fc:	2145      	movs	r1, #69	; 0x45
    f1fe:	481d      	ldr	r0, [pc, #116]	; (f274 <bus_fault.isra.0+0x9c>)
    f200:	f005 ffa5 	bl	1514e <z_log_minimal_printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    f204:	4c18      	ldr	r4, [pc, #96]	; (f268 <bus_fault.isra.0+0x90>)
    f206:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f208:	059b      	lsls	r3, r3, #22
    f20a:	d510      	bpl.n	f22e <bus_fault.isra.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    f20c:	481a      	ldr	r0, [pc, #104]	; (f278 <bus_fault.isra.0+0xa0>)
    f20e:	2145      	movs	r1, #69	; 0x45
    f210:	f005 ff9d 	bl	1514e <z_log_minimal_printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    f214:	6ba2      	ldr	r2, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    f216:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f218:	0418      	lsls	r0, r3, #16
    f21a:	d508      	bpl.n	f22e <bus_fault.isra.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    f21c:	2145      	movs	r1, #69	; 0x45
    f21e:	4817      	ldr	r0, [pc, #92]	; (f27c <bus_fault.isra.0+0xa4>)
    f220:	f005 ff95 	bl	1514e <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    f224:	b11e      	cbz	r6, f22e <bus_fault.isra.0+0x56>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    f226:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f228:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    f22c:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    f22e:	4c0e      	ldr	r4, [pc, #56]	; (f268 <bus_fault.isra.0+0x90>)
    f230:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f232:	0559      	lsls	r1, r3, #21
    f234:	d503      	bpl.n	f23e <bus_fault.isra.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    f236:	2145      	movs	r1, #69	; 0x45
    f238:	4811      	ldr	r0, [pc, #68]	; (f280 <bus_fault.isra.0+0xa8>)
    f23a:	f005 ff88 	bl	1514e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    f23e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f240:	05da      	lsls	r2, r3, #23
    f242:	d50b      	bpl.n	f25c <bus_fault.isra.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    f244:	2145      	movs	r1, #69	; 0x45
    f246:	480f      	ldr	r0, [pc, #60]	; (f284 <bus_fault.isra.0+0xac>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    f248:	f005 ff81 	bl	1514e <z_log_minimal_printk>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
    f24c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    f24e:	4a06      	ldr	r2, [pc, #24]	; (f268 <bus_fault.isra.0+0x90>)
    f250:	6a93      	ldr	r3, [r2, #40]	; 0x28
    f252:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    f256:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    f258:	7028      	strb	r0, [r5, #0]

	return reason;
}
    f25a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    f25c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f25e:	049b      	lsls	r3, r3, #18
    f260:	d5f4      	bpl.n	f24c <bus_fault.isra.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    f262:	2145      	movs	r1, #69	; 0x45
    f264:	4808      	ldr	r0, [pc, #32]	; (f288 <bus_fault.isra.0+0xb0>)
    f266:	e7ef      	b.n	f248 <bus_fault.isra.0+0x70>
    f268:	e000ed00 	.word	0xe000ed00
    f26c:	0001862a 	.word	0x0001862a
    f270:	00018645 	.word	0x00018645
    f274:	00018548 	.word	0x00018548
    f278:	0001865b 	.word	0x0001865b
    f27c:	00018679 	.word	0x00018679
    f280:	00018693 	.word	0x00018693
    f284:	000186b3 	.word	0x000186b3
    f288:	000185bc 	.word	0x000185bc

0000f28c <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    f28c:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    f28e:	4c21      	ldr	r4, [pc, #132]	; (f314 <usage_fault.isra.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    f290:	2145      	movs	r1, #69	; 0x45
    f292:	4821      	ldr	r0, [pc, #132]	; (f318 <usage_fault.isra.0+0x8c>)
    f294:	f005 ff5b 	bl	1514e <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    f298:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    f29a:	0195      	lsls	r5, r2, #6
    f29c:	d503      	bpl.n	f2a6 <usage_fault.isra.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    f29e:	2145      	movs	r1, #69	; 0x45
    f2a0:	481e      	ldr	r0, [pc, #120]	; (f31c <usage_fault.isra.0+0x90>)
    f2a2:	f005 ff54 	bl	1514e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    f2a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f2a8:	01dc      	lsls	r4, r3, #7
    f2aa:	d503      	bpl.n	f2b4 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    f2ac:	2145      	movs	r1, #69	; 0x45
    f2ae:	481c      	ldr	r0, [pc, #112]	; (f320 <usage_fault.isra.0+0x94>)
    f2b0:	f005 ff4d 	bl	1514e <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    f2b4:	4d17      	ldr	r5, [pc, #92]	; (f314 <usage_fault.isra.0+0x88>)
    f2b6:	6aac      	ldr	r4, [r5, #40]	; 0x28
    f2b8:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    f2bc:	d004      	beq.n	f2c8 <usage_fault.isra.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    f2be:	2145      	movs	r1, #69	; 0x45
    f2c0:	4818      	ldr	r0, [pc, #96]	; (f324 <usage_fault.isra.0+0x98>)
    f2c2:	f005 ff44 	bl	1514e <z_log_minimal_printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    f2c6:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    f2c8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f2ca:	0318      	lsls	r0, r3, #12
    f2cc:	d503      	bpl.n	f2d6 <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    f2ce:	2145      	movs	r1, #69	; 0x45
    f2d0:	4815      	ldr	r0, [pc, #84]	; (f328 <usage_fault.isra.0+0x9c>)
    f2d2:	f005 ff3c 	bl	1514e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    f2d6:	4d0f      	ldr	r5, [pc, #60]	; (f314 <usage_fault.isra.0+0x88>)
    f2d8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    f2da:	0351      	lsls	r1, r2, #13
    f2dc:	d503      	bpl.n	f2e6 <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    f2de:	2145      	movs	r1, #69	; 0x45
    f2e0:	4812      	ldr	r0, [pc, #72]	; (f32c <usage_fault.isra.0+0xa0>)
    f2e2:	f005 ff34 	bl	1514e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    f2e6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f2e8:	039a      	lsls	r2, r3, #14
    f2ea:	d503      	bpl.n	f2f4 <usage_fault.isra.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    f2ec:	2145      	movs	r1, #69	; 0x45
    f2ee:	4810      	ldr	r0, [pc, #64]	; (f330 <usage_fault.isra.0+0xa4>)
    f2f0:	f005 ff2d 	bl	1514e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    f2f4:	4d07      	ldr	r5, [pc, #28]	; (f314 <usage_fault.isra.0+0x88>)
    f2f6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    f2f8:	03db      	lsls	r3, r3, #15
    f2fa:	d503      	bpl.n	f304 <usage_fault.isra.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    f2fc:	2145      	movs	r1, #69	; 0x45
    f2fe:	480d      	ldr	r0, [pc, #52]	; (f334 <usage_fault.isra.0+0xa8>)
    f300:	f005 ff25 	bl	1514e <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    f304:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    f306:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    f308:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    f30c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    f310:	62ab      	str	r3, [r5, #40]	; 0x28
}
    f312:	bd38      	pop	{r3, r4, r5, pc}
    f314:	e000ed00 	.word	0xe000ed00
    f318:	000186d0 	.word	0x000186d0
    f31c:	000186ed 	.word	0x000186ed
    f320:	00018705 	.word	0x00018705
    f324:	00018724 	.word	0x00018724
    f328:	00018753 	.word	0x00018753
    f32c:	00018776 	.word	0x00018776
    f330:	000187a0 	.word	0x000187a0
    f334:	000187bf 	.word	0x000187bf

0000f338 <secure_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void secure_fault(const z_arch_esf_t *esf)
    f338:	b510      	push	{r4, lr}
{
	PR_FAULT_INFO("***** SECURE FAULT *****");

	STORE_xFAR(sfar, SAU->SFAR);
    f33a:	4c1e      	ldr	r4, [pc, #120]	; (f3b4 <secure_fault.isra.0+0x7c>)
	PR_FAULT_INFO("***** SECURE FAULT *****");
    f33c:	481e      	ldr	r0, [pc, #120]	; (f3b8 <secure_fault.isra.0+0x80>)
    f33e:	2145      	movs	r1, #69	; 0x45
    f340:	f005 ff05 	bl	1514e <z_log_minimal_printk>
	STORE_xFAR(sfar, SAU->SFAR);
    f344:	69a2      	ldr	r2, [r4, #24]
	if ((SAU->SFSR & SAU_SFSR_SFARVALID_Msk) != 0) {
    f346:	6963      	ldr	r3, [r4, #20]
    f348:	0658      	lsls	r0, r3, #25
    f34a:	d503      	bpl.n	f354 <secure_fault.isra.0+0x1c>
		PR_EXC("  Address: 0x%x", sfar);
    f34c:	2145      	movs	r1, #69	; 0x45
    f34e:	481b      	ldr	r0, [pc, #108]	; (f3bc <secure_fault.isra.0+0x84>)
    f350:	f005 fefd 	bl	1514e <z_log_minimal_printk>
	}

	/* bits are sticky: they stack and must be reset */
	if ((SAU->SFSR & SAU_SFSR_INVEP_Msk) != 0) {
    f354:	6963      	ldr	r3, [r4, #20]
    f356:	07d9      	lsls	r1, r3, #31
    f358:	d508      	bpl.n	f36c <secure_fault.isra.0+0x34>
		PR_FAULT_INFO("  Invalid entry point");
    f35a:	2145      	movs	r1, #69	; 0x45
    f35c:	4818      	ldr	r0, [pc, #96]	; (f3c0 <secure_fault.isra.0+0x88>)
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
		PR_FAULT_INFO("  Invalid transition");
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
		PR_FAULT_INFO("  Lazy state preservation");
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
		PR_FAULT_INFO("  Lazy state error");
    f35e:	f005 fef6 	bl	1514e <z_log_minimal_printk>
	}

	/* clear SFSR sticky bits */
	SAU->SFSR |= 0xFF;
    f362:	6963      	ldr	r3, [r4, #20]
    f364:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    f368:	6163      	str	r3, [r4, #20]
}
    f36a:	bd10      	pop	{r4, pc}
	} else if ((SAU->SFSR & SAU_SFSR_INVIS_Msk) != 0) {
    f36c:	6963      	ldr	r3, [r4, #20]
    f36e:	079a      	lsls	r2, r3, #30
    f370:	d502      	bpl.n	f378 <secure_fault.isra.0+0x40>
		PR_FAULT_INFO("  Invalid integrity signature");
    f372:	2145      	movs	r1, #69	; 0x45
    f374:	4813      	ldr	r0, [pc, #76]	; (f3c4 <secure_fault.isra.0+0x8c>)
    f376:	e7f2      	b.n	f35e <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_INVER_Msk) != 0) {
    f378:	6963      	ldr	r3, [r4, #20]
    f37a:	075b      	lsls	r3, r3, #29
    f37c:	d502      	bpl.n	f384 <secure_fault.isra.0+0x4c>
		PR_FAULT_INFO("  Invalid exception return");
    f37e:	2145      	movs	r1, #69	; 0x45
    f380:	4811      	ldr	r0, [pc, #68]	; (f3c8 <secure_fault.isra.0+0x90>)
    f382:	e7ec      	b.n	f35e <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_AUVIOL_Msk) != 0) {
    f384:	6963      	ldr	r3, [r4, #20]
    f386:	0718      	lsls	r0, r3, #28
    f388:	d502      	bpl.n	f390 <secure_fault.isra.0+0x58>
		PR_FAULT_INFO("  Attribution unit violation");
    f38a:	2145      	movs	r1, #69	; 0x45
    f38c:	480f      	ldr	r0, [pc, #60]	; (f3cc <secure_fault.isra.0+0x94>)
    f38e:	e7e6      	b.n	f35e <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
    f390:	6963      	ldr	r3, [r4, #20]
    f392:	06d9      	lsls	r1, r3, #27
    f394:	d502      	bpl.n	f39c <secure_fault.isra.0+0x64>
		PR_FAULT_INFO("  Invalid transition");
    f396:	2145      	movs	r1, #69	; 0x45
    f398:	480d      	ldr	r0, [pc, #52]	; (f3d0 <secure_fault.isra.0+0x98>)
    f39a:	e7e0      	b.n	f35e <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
    f39c:	6963      	ldr	r3, [r4, #20]
    f39e:	069a      	lsls	r2, r3, #26
    f3a0:	d502      	bpl.n	f3a8 <secure_fault.isra.0+0x70>
		PR_FAULT_INFO("  Lazy state preservation");
    f3a2:	2145      	movs	r1, #69	; 0x45
    f3a4:	480b      	ldr	r0, [pc, #44]	; (f3d4 <secure_fault.isra.0+0x9c>)
    f3a6:	e7da      	b.n	f35e <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
    f3a8:	6963      	ldr	r3, [r4, #20]
    f3aa:	061b      	lsls	r3, r3, #24
    f3ac:	d5d9      	bpl.n	f362 <secure_fault.isra.0+0x2a>
		PR_FAULT_INFO("  Lazy state error");
    f3ae:	2145      	movs	r1, #69	; 0x45
    f3b0:	4809      	ldr	r0, [pc, #36]	; (f3d8 <secure_fault.isra.0+0xa0>)
    f3b2:	e7d4      	b.n	f35e <secure_fault.isra.0+0x26>
    f3b4:	e000edd0 	.word	0xe000edd0
    f3b8:	000187ef 	.word	0x000187ef
    f3bc:	0001880d 	.word	0x0001880d
    f3c0:	00018822 	.word	0x00018822
    f3c4:	0001883d 	.word	0x0001883d
    f3c8:	00018860 	.word	0x00018860
    f3cc:	00018880 	.word	0x00018880
    f3d0:	000188a2 	.word	0x000188a2
    f3d4:	000188bc 	.word	0x000188bc
    f3d8:	000188db 	.word	0x000188db

0000f3dc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    f3dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    f3e0:	4b62      	ldr	r3, [pc, #392]	; (f56c <z_arm_fault+0x190>)
{
    f3e2:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    f3e4:	685c      	ldr	r4, [r3, #4]
    f3e6:	2600      	movs	r6, #0
{
    f3e8:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    f3ea:	f3c4 0708 	ubfx	r7, r4, #0, #9
    f3ee:	f386 8811 	msr	BASEPRI, r6
    f3f2:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    f3f6:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    f3fa:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    f3fe:	d11e      	bne.n	f43e <z_arm_fault+0x62>
	if ((exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) == 0U) {
    f400:	f012 0301 	ands.w	r3, r2, #1
    f404:	d039      	beq.n	f47a <z_arm_fault+0x9e>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    f406:	f012 0340 	ands.w	r3, r2, #64	; 0x40
    f40a:	f002 0808 	and.w	r8, r2, #8
    f40e:	f040 80a6 	bne.w	f55e <z_arm_fault+0x182>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    f412:	0752      	lsls	r2, r2, #29
			secure_esf = (z_arch_esf_t *)msp;
    f414:	bf54      	ite	pl
    f416:	4605      	movpl	r5, r0
	*nested_exc = false;
    f418:	461e      	movmi	r6, r3
	if ((*top_of_sec_stack == INTEGRITY_SIGNATURE_STD) ||
    f41a:	682a      	ldr	r2, [r5, #0]
    f41c:	4b54      	ldr	r3, [pc, #336]	; (f570 <z_arm_fault+0x194>)
			*nested_exc = true;
    f41e:	bf58      	it	pl
    f420:	2601      	movpl	r6, #1
	if ((*top_of_sec_stack == INTEGRITY_SIGNATURE_STD) ||
    f422:	4413      	add	r3, r2
    f424:	2b01      	cmp	r3, #1
		sec_ret_addr = secure_esf->basic.pc;
    f426:	bf98      	it	ls
    f428:	6c2a      	ldrls	r2, [r5, #64]	; 0x40
	PR_FAULT_INFO("  S instruction address:  0x%x", sec_ret_addr);
    f42a:	2145      	movs	r1, #69	; 0x45
    f42c:	4851      	ldr	r0, [pc, #324]	; (f574 <z_arm_fault+0x198>)
    f42e:	f005 fe8e 	bl	1514e <z_log_minimal_printk>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    f432:	f1b8 0f00 	cmp.w	r8, #0
    f436:	d01d      	beq.n	f474 <z_arm_fault+0x98>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
    f438:	f3ef 8589 	mrs	r5, PSP_NS

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    f43c:	b95d      	cbnz	r5, f456 <z_arm_fault+0x7a>
    f43e:	f240 32e1 	movw	r2, #993	; 0x3e1
    f442:	494d      	ldr	r1, [pc, #308]	; (f578 <z_arm_fault+0x19c>)
    f444:	484d      	ldr	r0, [pc, #308]	; (f57c <z_arm_fault+0x1a0>)
    f446:	f005 fda1 	bl	14f8c <printk>
    f44a:	f240 31e1 	movw	r1, #993	; 0x3e1
    f44e:	484a      	ldr	r0, [pc, #296]	; (f578 <z_arm_fault+0x19c>)
    f450:	f005 fe68 	bl	15124 <assert_post_action>
    f454:	2500      	movs	r5, #0
	*recoverable = false;
    f456:	2300      	movs	r3, #0
    f458:	1efa      	subs	r2, r7, #3
    f45a:	4698      	mov	r8, r3
    f45c:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    f460:	4613      	mov	r3, r2
    f462:	2b09      	cmp	r3, #9
    f464:	d869      	bhi.n	f53a <z_arm_fault+0x15e>
    f466:	e8df f003 	tbb	[pc, r3]
    f46a:	590a      	.short	0x590a
    f46c:	6861385d 	.word	0x6861385d
    f470:	65686868 	.word	0x65686868
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
    f474:	f3ef 8588 	mrs	r5, MSP_NS
  return(result);
    f478:	e7e0      	b.n	f43c <z_arm_fault+0x60>
	*nested_exc = false;
    f47a:	461e      	mov	r6, r3
    f47c:	e7df      	b.n	f43e <z_arm_fault+0x62>
	PR_FAULT_INFO("***** HARD FAULT *****");
    f47e:	2145      	movs	r1, #69	; 0x45
    f480:	483f      	ldr	r0, [pc, #252]	; (f580 <z_arm_fault+0x1a4>)
    f482:	f005 fe64 	bl	1514e <z_log_minimal_printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    f486:	4b39      	ldr	r3, [pc, #228]	; (f56c <z_arm_fault+0x190>)
	*recoverable = false;
    f488:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    f48c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    f48e:	f014 0402 	ands.w	r4, r4, #2
    f492:	d004      	beq.n	f49e <z_arm_fault+0xc2>
		PR_EXC("  Bus fault on vector table read");
    f494:	2145      	movs	r1, #69	; 0x45
    f496:	483b      	ldr	r0, [pc, #236]	; (f584 <z_arm_fault+0x1a8>)
	PR_FAULT_INFO(
    f498:	f005 fe59 	bl	1514e <z_log_minimal_printk>
    f49c:	e048      	b.n	f530 <z_arm_fault+0x154>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    f49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    f4a0:	005b      	lsls	r3, r3, #1
    f4a2:	d522      	bpl.n	f4ea <z_arm_fault+0x10e>
		PR_EXC("  Fault escalation (see below)");
    f4a4:	2145      	movs	r1, #69	; 0x45
    f4a6:	4838      	ldr	r0, [pc, #224]	; (f588 <z_arm_fault+0x1ac>)
    f4a8:	f005 fe51 	bl	1514e <z_log_minimal_printk>
		if (SCB_MMFSR != 0) {
    f4ac:	4b37      	ldr	r3, [pc, #220]	; (f58c <z_arm_fault+0x1b0>)
    f4ae:	781b      	ldrb	r3, [r3, #0]
    f4b0:	b133      	cbz	r3, f4c0 <z_arm_fault+0xe4>
			reason = mem_manage_fault(esf, 1, recoverable);
    f4b2:	2001      	movs	r0, #1
    f4b4:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    f4b8:	f7ff fe22 	bl	f100 <mem_manage_fault.isra.0>
    f4bc:	4604      	mov	r4, r0
		break;
    f4be:	e014      	b.n	f4ea <z_arm_fault+0x10e>
		} else if (SCB_BFSR != 0) {
    f4c0:	4b33      	ldr	r3, [pc, #204]	; (f590 <z_arm_fault+0x1b4>)
    f4c2:	781b      	ldrb	r3, [r3, #0]
    f4c4:	b12b      	cbz	r3, f4d2 <z_arm_fault+0xf6>
			reason = bus_fault(esf, 1, recoverable);
    f4c6:	2001      	movs	r0, #1
    f4c8:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    f4cc:	f7ff fe84 	bl	f1d8 <bus_fault.isra.0>
    f4d0:	e7f4      	b.n	f4bc <z_arm_fault+0xe0>
		} else if (SCB_UFSR != 0) {
    f4d2:	4b30      	ldr	r3, [pc, #192]	; (f594 <z_arm_fault+0x1b8>)
    f4d4:	881b      	ldrh	r3, [r3, #0]
    f4d6:	b29b      	uxth	r3, r3
    f4d8:	b113      	cbz	r3, f4e0 <z_arm_fault+0x104>
		reason = usage_fault(esf);
    f4da:	f7ff fed7 	bl	f28c <usage_fault.isra.0>
    f4de:	e7ed      	b.n	f4bc <z_arm_fault+0xe0>
		} else if (SAU->SFSR != 0) {
    f4e0:	4b2d      	ldr	r3, [pc, #180]	; (f598 <z_arm_fault+0x1bc>)
    f4e2:	695b      	ldr	r3, [r3, #20]
    f4e4:	b10b      	cbz	r3, f4ea <z_arm_fault+0x10e>
			secure_fault(esf);
    f4e6:	f7ff ff27 	bl	f338 <secure_fault.isra.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    f4ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f4ee:	b993      	cbnz	r3, f516 <z_arm_fault+0x13a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    f4f0:	2220      	movs	r2, #32
    f4f2:	4629      	mov	r1, r5
    f4f4:	a802      	add	r0, sp, #8
    f4f6:	f005 ff3d 	bl	15374 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    f4fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f4fc:	b356      	cbz	r6, f554 <z_arm_fault+0x178>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    f4fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
    f502:	b922      	cbnz	r2, f50e <z_arm_fault+0x132>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    f504:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    f508:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    f50c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    f50e:	4620      	mov	r0, r4
    f510:	a902      	add	r1, sp, #8
    f512:	f7ff fd4d 	bl	efb0 <z_arm_fatal_error>
}
    f516:	b00a      	add	sp, #40	; 0x28
    f518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    f51c:	2000      	movs	r0, #0
    f51e:	f10d 0107 	add.w	r1, sp, #7
    f522:	e7c9      	b.n	f4b8 <z_arm_fault+0xdc>
		reason = bus_fault(esf, 0, recoverable);
    f524:	2000      	movs	r0, #0
    f526:	f10d 0107 	add.w	r1, sp, #7
    f52a:	e7cf      	b.n	f4cc <z_arm_fault+0xf0>
		secure_fault(esf);
    f52c:	f7ff ff04 	bl	f338 <secure_fault.isra.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    f530:	2400      	movs	r4, #0
}
    f532:	e7da      	b.n	f4ea <z_arm_fault+0x10e>
	PR_FAULT_INFO(
    f534:	2145      	movs	r1, #69	; 0x45
    f536:	4819      	ldr	r0, [pc, #100]	; (f59c <z_arm_fault+0x1c0>)
    f538:	e7ae      	b.n	f498 <z_arm_fault+0xbc>
	PR_FAULT_INFO("***** %s %d) *****",
    f53a:	4919      	ldr	r1, [pc, #100]	; (f5a0 <z_arm_fault+0x1c4>)
    f53c:	f414 7ff8 	tst.w	r4, #496	; 0x1f0
    f540:	4a18      	ldr	r2, [pc, #96]	; (f5a4 <z_arm_fault+0x1c8>)
    f542:	4819      	ldr	r0, [pc, #100]	; (f5a8 <z_arm_fault+0x1cc>)
    f544:	bf08      	it	eq
    f546:	460a      	moveq	r2, r1
    f548:	f1a7 0310 	sub.w	r3, r7, #16
    f54c:	2145      	movs	r1, #69	; 0x45
    f54e:	f005 fdfe 	bl	1514e <z_log_minimal_printk>
    f552:	e7ed      	b.n	f530 <z_arm_fault+0x154>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    f554:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    f558:	f023 0301 	bic.w	r3, r3, #1
    f55c:	e7d6      	b.n	f50c <z_arm_fault+0x130>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    f55e:	f1b8 0f00 	cmp.w	r8, #0
    f562:	f47f af6b 	bne.w	f43c <z_arm_fault+0x60>
			ptr_esf = (z_arch_esf_t *)msp;
    f566:	4605      	mov	r5, r0
			*nested_exc = true;
    f568:	2601      	movs	r6, #1
    f56a:	e767      	b.n	f43c <z_arm_fault+0x60>
    f56c:	e000ed00 	.word	0xe000ed00
    f570:	0105eda6 	.word	0x0105eda6
    f574:	00018921 	.word	0x00018921
    f578:	000185f0 	.word	0x000185f0
    f57c:	00017e72 	.word	0x00017e72
    f580:	00018945 	.word	0x00018945
    f584:	00018961 	.word	0x00018961
    f588:	00018987 	.word	0x00018987
    f58c:	e000ed28 	.word	0xe000ed28
    f590:	e000ed29 	.word	0xe000ed29
    f594:	e000ed2a 	.word	0xe000ed2a
    f598:	e000edd0 	.word	0xe000edd0
    f59c:	000189ab 	.word	0x000189ab
    f5a0:	000188f3 	.word	0x000188f3
    f5a4:	00018908 	.word	0x00018908
    f5a8:	000189d4 	.word	0x000189d4

0000f5ac <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    f5ac:	4b04      	ldr	r3, [pc, #16]	; (f5c0 <z_arm_fault_init+0x14>)
    f5ae:	695a      	ldr	r2, [r3, #20]
    f5b0:	f042 0210 	orr.w	r2, r2, #16
    f5b4:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    f5b6:	695a      	ldr	r2, [r3, #20]
    f5b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    f5bc:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    f5be:	4770      	bx	lr
    f5c0:	e000ed00 	.word	0xe000ed00

0000f5c4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    f5c4:	4b04      	ldr	r3, [pc, #16]	; (f5d8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    f5c6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    f5c8:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    f5ca:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    f5cc:	d003      	beq.n	f5d6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    f5ce:	4903      	ldr	r1, [pc, #12]	; (f5dc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    f5d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    f5d4:	600a      	str	r2, [r1, #0]

0000f5d6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    f5d6:	4770      	bx	lr
	ldr r3, =_kernel
    f5d8:	20000c30 	.word	0x20000c30
	ldr r1, =_SCS_ICSR
    f5dc:	e000ed04 	.word	0xe000ed04

0000f5e0 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    f5e0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    f5e4:	4905      	ldr	r1, [pc, #20]	; (f5fc <sys_arch_reboot+0x1c>)
    f5e6:	4b06      	ldr	r3, [pc, #24]	; (f600 <sys_arch_reboot+0x20>)
    f5e8:	68ca      	ldr	r2, [r1, #12]
    f5ea:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    f5ee:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    f5f0:	60cb      	str	r3, [r1, #12]
    f5f2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    f5f6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    f5f8:	e7fd      	b.n	f5f6 <sys_arch_reboot+0x16>
    f5fa:	bf00      	nop
    f5fc:	e000ed00 	.word	0xe000ed00
    f600:	05fa0004 	.word	0x05fa0004

0000f604 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    f604:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    f606:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    f608:	4a05      	ldr	r2, [pc, #20]	; (f620 <z_arm_clear_arm_mpu_config+0x1c>)
    f60a:	6811      	ldr	r1, [r2, #0]
	int num_regions =
    f60c:	f3c1 2107 	ubfx	r1, r1, #8, #8
	for (i = 0; i < num_regions; i++) {
    f610:	428b      	cmp	r3, r1
    f612:	d100      	bne.n	f616 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    f614:	4770      	bx	lr
  mpu->RNR = rnr;
    f616:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    f618:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    f61a:	3301      	adds	r3, #1
    f61c:	e7f8      	b.n	f610 <z_arm_clear_arm_mpu_config+0xc>
    f61e:	bf00      	nop
    f620:	e000ed90 	.word	0xe000ed90

0000f624 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    f624:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    f626:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    f628:	2400      	movs	r4, #0
    f62a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    f62e:	f7ff ffe9 	bl	f604 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    f632:	4a0e      	ldr	r2, [pc, #56]	; (f66c <z_arm_init_arch_hw_at_boot+0x48>)
	z_arm_clear_arm_mpu_config();
    f634:	4623      	mov	r3, r4
    f636:	4611      	mov	r1, r2
		NVIC->ICER[i] = 0xFFFFFFFF;
    f638:	f04f 34ff 	mov.w	r4, #4294967295
    f63c:	f103 0020 	add.w	r0, r3, #32
    f640:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    f642:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    f644:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    f648:	d1f8      	bne.n	f63c <z_arm_init_arch_hw_at_boot+0x18>
    f64a:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    f64c:	f04f 30ff 	mov.w	r0, #4294967295
    f650:	f103 0260 	add.w	r2, r3, #96	; 0x60
    f654:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    f656:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    f658:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    f65c:	d1f8      	bne.n	f650 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    f65e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    f660:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    f664:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    f668:	bd10      	pop	{r4, pc}
    f66a:	bf00      	nop
    f66c:	e000e100 	.word	0xe000e100

0000f670 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    f670:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f672:	2120      	movs	r1, #32
    f674:	4803      	ldr	r0, [pc, #12]	; (f684 <z_arm_interrupt_init+0x14>)
    f676:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    f678:	3301      	adds	r3, #1
    f67a:	2b45      	cmp	r3, #69	; 0x45
    f67c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    f680:	d1f9      	bne.n	f676 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    f682:	4770      	bx	lr
    f684:	e000e100 	.word	0xe000e100

0000f688 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    f688:	4b06      	ldr	r3, [pc, #24]	; (f6a4 <z_impl_k_thread_abort+0x1c>)
    f68a:	689b      	ldr	r3, [r3, #8]
    f68c:	4283      	cmp	r3, r0
    f68e:	d107      	bne.n	f6a0 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    f690:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    f694:	b123      	cbz	r3, f6a0 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    f696:	4a04      	ldr	r2, [pc, #16]	; (f6a8 <z_impl_k_thread_abort+0x20>)
    f698:	6853      	ldr	r3, [r2, #4]
    f69a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    f69e:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    f6a0:	f002 bb00 	b.w	11ca4 <z_thread_abort>
    f6a4:	20000c30 	.word	0x20000c30
    f6a8:	e000ed00 	.word	0xe000ed00

0000f6ac <tz_nonsecure_state_setup>:
}
#endif /* CONFIG_ARMV8_M_MAINLINE */

void tz_nonsecure_state_setup(const tz_nonsecure_setup_conf_t *p_ns_conf)
{
	configure_nonsecure_vtor_offset(p_ns_conf->vtor_ns);
    f6ac:	6882      	ldr	r2, [r0, #8]
	SCB_NS->VTOR = vtor_ns;
    f6ae:	4b0c      	ldr	r3, [pc, #48]	; (f6e0 <tz_nonsecure_state_setup+0x34>)
    f6b0:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
    f6b2:	6803      	ldr	r3, [r0, #0]
    f6b4:	f383 8888 	msr	MSP_NS, r3
  __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
    f6b8:	6843      	ldr	r3, [r0, #4]
    f6ba:	f383 8889 	msr	PSP_NS, r3
	configure_nonsecure_psp(p_ns_conf->psp_ns);
	/* Select which stack-pointer to use (MSP or PSP) and
	 * the privilege level for thread mode.
	 */
	configure_nonsecure_control(p_ns_conf->control_ns.spsel,
		p_ns_conf->control_ns.npriv);
    f6be:	7b02      	ldrb	r2, [r0, #12]
    f6c0:	f002 0101 	and.w	r1, r2, #1
  __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
    f6c4:	f3ef 8394 	mrs	r3, CONTROL_NS
	control_ns &= ~(CONTROL_SPSEL_Msk | CONTROL_nPRIV_Msk);
    f6c8:	f023 0303 	bic.w	r3, r3, #3
	if (spsel_ns) {
    f6cc:	0792      	lsls	r2, r2, #30
		control_ns |= CONTROL_SPSEL_Msk;
    f6ce:	bf48      	it	mi
    f6d0:	f043 0302 	orrmi.w	r3, r3, #2
	if (npriv_ns) {
    f6d4:	b109      	cbz	r1, f6da <tz_nonsecure_state_setup+0x2e>
		control_ns |= CONTROL_nPRIV_Msk;
    f6d6:	f043 0301 	orr.w	r3, r3, #1
  __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
    f6da:	f383 8894 	msr	CONTROL_NS, r3
}
    f6de:	4770      	bx	lr
    f6e0:	e002ed00 	.word	0xe002ed00

0000f6e4 <tz_nbanked_exception_target_state_set>:

void tz_nbanked_exception_target_state_set(int secure_state)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    f6e4:	4a08      	ldr	r2, [pc, #32]	; (f708 <tz_nbanked_exception_target_state_set+0x24>)
    f6e6:	68d3      	ldr	r3, [r2, #12]
	if (secure_state) {
    f6e8:	b148      	cbz	r0, f6fe <tz_nbanked_exception_target_state_set+0x1a>
		aircr_payload &= ~(SCB_AIRCR_BFHFNMINS_Msk);
    f6ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    f6ee:	041b      	lsls	r3, r3, #16
    f6f0:	0c1b      	lsrs	r3, r3, #16
	} else {
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    f6f2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    f6f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    f6fa:	60d3      	str	r3, [r2, #12]
}
    f6fc:	4770      	bx	lr
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    f6fe:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
    f700:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    f704:	e7f5      	b.n	f6f2 <tz_nbanked_exception_target_state_set+0xe>
    f706:	bf00      	nop
    f708:	e000ed00 	.word	0xe000ed00

0000f70c <tz_nonsecure_exception_prio_config>:

void tz_nonsecure_exception_prio_config(int secure_boost)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    f70c:	4a08      	ldr	r2, [pc, #32]	; (f730 <tz_nonsecure_exception_prio_config+0x24>)
    f70e:	68d3      	ldr	r3, [r2, #12]
	if (secure_boost) {
    f710:	b140      	cbz	r0, f724 <tz_nonsecure_exception_prio_config+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    f712:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_PRIS_Msk;
    f714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else {
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    f718:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    f71c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    f720:	60d3      	str	r3, [r2, #12]
}
    f722:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
    f724:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    f728:	041b      	lsls	r3, r3, #16
    f72a:	0c1b      	lsrs	r3, r3, #16
    f72c:	e7f4      	b.n	f718 <tz_nonsecure_exception_prio_config+0xc>
    f72e:	bf00      	nop
    f730:	e000ed00 	.word	0xe000ed00

0000f734 <tz_nonsecure_system_reset_req_block>:

void tz_nonsecure_system_reset_req_block(int block)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    f734:	4a08      	ldr	r2, [pc, #32]	; (f758 <tz_nonsecure_system_reset_req_block+0x24>)
    f736:	68d3      	ldr	r3, [r2, #12]
	if (block) {
    f738:	b140      	cbz	r0, f74c <tz_nonsecure_system_reset_req_block+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    f73a:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_SYSRESETREQS_Msk;
    f73c:	f043 0308 	orr.w	r3, r3, #8
	} else {
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
	}
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    f740:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    f744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
    f748:	60d3      	str	r3, [r2, #12]
}
    f74a:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
    f74c:	f023 0308 	bic.w	r3, r3, #8
    f750:	041b      	lsls	r3, r3, #16
    f752:	0c1b      	lsrs	r3, r3, #16
    f754:	e7f4      	b.n	f740 <tz_nonsecure_system_reset_req_block+0xc>
    f756:	bf00      	nop
    f758:	e000ed00 	.word	0xe000ed00

0000f75c <tz_nonsecure_fpu_access_enable>:

#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
void tz_nonsecure_fpu_access_enable(void)
{
	SCB->NSACR |=
    f75c:	4a03      	ldr	r2, [pc, #12]	; (f76c <tz_nonsecure_fpu_access_enable+0x10>)
    f75e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    f762:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    f766:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		(1UL << SCB_NSACR_CP10_Pos) | (1UL << SCB_NSACR_CP11_Pos);
}
    f76a:	4770      	bx	lr
    f76c:	e000ed00 	.word	0xe000ed00

0000f770 <tz_sau_configure>:
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

void tz_sau_configure(int enable, int allns)
{
	if (enable) {
    f770:	4b08      	ldr	r3, [pc, #32]	; (f794 <tz_sau_configure+0x24>)
  \brief   Enable SAU
  \details Enables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Enable(void)
{
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
    f772:	681a      	ldr	r2, [r3, #0]
    f774:	b118      	cbz	r0, f77e <tz_sau_configure+0xe>
    f776:	f042 0201 	orr.w	r2, r2, #1
	} else {
		TZ_SAU_Disable();
		if (allns) {
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
		} else {
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    f77a:	601a      	str	r2, [r3, #0]
		}
	}
}
    f77c:	4770      	bx	lr
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
    f77e:	f022 0201 	bic.w	r2, r2, #1
    f782:	601a      	str	r2, [r3, #0]
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    f784:	681a      	ldr	r2, [r3, #0]
		if (allns) {
    f786:	b111      	cbz	r1, f78e <tz_sau_configure+0x1e>
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    f788:	f042 0202 	orr.w	r2, r2, #2
    f78c:	e7f5      	b.n	f77a <tz_sau_configure+0xa>
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    f78e:	f022 0202 	bic.w	r2, r2, #2
    f792:	e7f2      	b.n	f77a <tz_sau_configure+0xa>
    f794:	e000edd0 	.word	0xe000edd0

0000f798 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    f798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    f79a:	4c09      	ldr	r4, [pc, #36]	; (f7c0 <z_arm_configure_static_mpu_regions+0x28>)
    f79c:	4a09      	ldr	r2, [pc, #36]	; (f7c4 <z_arm_configure_static_mpu_regions+0x2c>)
    f79e:	4623      	mov	r3, r4
    f7a0:	2101      	movs	r1, #1
    f7a2:	4809      	ldr	r0, [pc, #36]	; (f7c8 <z_arm_configure_static_mpu_regions+0x30>)
    f7a4:	f000 f91a 	bl	f9dc <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    f7a8:	2300      	movs	r3, #0
    f7aa:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    f7ac:	4b07      	ldr	r3, [pc, #28]	; (f7cc <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    f7ae:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    f7b0:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    f7b2:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    f7b4:	9301      	str	r3, [sp, #4]
    f7b6:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    f7b8:	f000 f92c 	bl	fa14 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    f7bc:	b004      	add	sp, #16
    f7be:	bd10      	pop	{r4, pc}
    f7c0:	20008000 	.word	0x20008000
    f7c4:	20000000 	.word	0x20000000
    f7c8:	00017c2c 	.word	0x00017c2c
    f7cc:	20000170 	.word	0x20000170

0000f7d0 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    f7d0:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    f7d2:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    f7d4:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    f7d6:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    f7da:	f004 031f 	and.w	r3, r4, #31
    f7de:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    f7e0:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    f7e2:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    f7e4:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    f7e8:	4904      	ldr	r1, [pc, #16]	; (f7fc <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    f7ea:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    f7ee:	f043 0301 	orr.w	r3, r3, #1
    f7f2:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    f7f4:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    f7f6:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    f7f8:	bd10      	pop	{r4, pc}
    f7fa:	bf00      	nop
    f7fc:	e000ed90 	.word	0xe000ed90

0000f800 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    f800:	b530      	push	{r4, r5, lr}

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    f802:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    f804:	680c      	ldr	r4, [r1, #0]
{
    f806:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    f808:	890a      	ldrh	r2, [r1, #8]
    f80a:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
    f80c:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    f80e:	3b01      	subs	r3, #1
    f810:	f024 041f 	bic.w	r4, r4, #31
    f814:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    f816:	f002 021f 	and.w	r2, r2, #31
    f81a:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    f81e:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    f822:	2807      	cmp	r0, #7
    f824:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    f826:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    f82a:	9303      	str	r3, [sp, #12]
    f82c:	d909      	bls.n	f842 <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    f82e:	4602      	mov	r2, r0
    f830:	2145      	movs	r1, #69	; 0x45
    f832:	4806      	ldr	r0, [pc, #24]	; (f84c <mpu_configure_region+0x4c>)
    f834:	f005 fc8b 	bl	1514e <z_log_minimal_printk>
    f838:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    f83c:	4620      	mov	r0, r4
    f83e:	b005      	add	sp, #20
    f840:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    f842:	4669      	mov	r1, sp
    f844:	f7ff ffc4 	bl	f7d0 <region_init>
	return region_allocate_and_init(index,
    f848:	e7f8      	b.n	f83c <mpu_configure_region+0x3c>
    f84a:	bf00      	nop
    f84c:	000189f0 	.word	0x000189f0

0000f850 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    f850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f854:	4689      	mov	r9, r1
    f856:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    f858:	4606      	mov	r6, r0
    f85a:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    f85e:	4d52      	ldr	r5, [pc, #328]	; (f9a8 <mpu_configure_regions_and_partition.constprop.0+0x158>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    f860:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    f862:	45c8      	cmp	r8, r9
    f864:	da23      	bge.n	f8ae <mpu_configure_regions_and_partition.constprop.0+0x5e>
		if (regions[i].size == 0U) {
    f866:	6877      	ldr	r7, [r6, #4]
    f868:	2f00      	cmp	r7, #0
    f86a:	d042      	beq.n	f8f2 <mpu_configure_regions_and_partition.constprop.0+0xa2>
		&&
    f86c:	2f1f      	cmp	r7, #31
    f86e:	d917      	bls.n	f8a0 <mpu_configure_regions_and_partition.constprop.0+0x50>
		&&
    f870:	06fb      	lsls	r3, r7, #27
    f872:	d115      	bne.n	f8a0 <mpu_configure_regions_and_partition.constprop.0+0x50>
		((part->start &
    f874:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    f878:	f01a 0f1f 	tst.w	sl, #31
    f87c:	d110      	bne.n	f8a0 <mpu_configure_regions_and_partition.constprop.0+0x50>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    f87e:	4650      	mov	r0, sl
    f880:	f005 fd27 	bl	152d2 <arm_cmse_mpu_region_get>
    f884:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    f886:	eb07 000a 	add.w	r0, r7, sl
    f88a:	3801      	subs	r0, #1
    f88c:	f005 fd21 	bl	152d2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    f890:	4583      	cmp	fp, r0
    f892:	d010      	beq.n	f8b6 <mpu_configure_regions_and_partition.constprop.0+0x66>
	return -EINVAL;
    f894:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    f898:	465a      	mov	r2, fp
    f89a:	2145      	movs	r1, #69	; 0x45
    f89c:	4843      	ldr	r0, [pc, #268]	; (f9ac <mpu_configure_regions_and_partition.constprop.0+0x15c>)
    f89e:	e002      	b.n	f8a6 <mpu_configure_regions_and_partition.constprop.0+0x56>
			LOG_ERR("Partition %u: sanity check failed.", i);
    f8a0:	4642      	mov	r2, r8
    f8a2:	2145      	movs	r1, #69	; 0x45
    f8a4:	4842      	ldr	r0, [pc, #264]	; (f9b0 <mpu_configure_regions_and_partition.constprop.0+0x160>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    f8a6:	f005 fc52 	bl	1514e <z_log_minimal_printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    f8aa:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    f8ae:	4620      	mov	r0, r4
    f8b0:	b005      	add	sp, #20
    f8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    f8b6:	f11b 0f16 	cmn.w	fp, #22
    f8ba:	d0ed      	beq.n	f898 <mpu_configure_regions_and_partition.constprop.0+0x48>
			(u_reg_index > (reg_index - 1))) {
    f8bc:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    f8be:	455b      	cmp	r3, fp
    f8c0:	dbea      	blt.n	f898 <mpu_configure_regions_and_partition.constprop.0+0x48>
	MPU->RNR = index;
    f8c2:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    f8c6:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
    f8c8:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    f8cc:	692f      	ldr	r7, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    f8ce:	f021 011f 	bic.w	r1, r1, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    f8d2:	e9d6 3200 	ldrd	r3, r2, [r6]
    f8d6:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    f8d8:	4299      	cmp	r1, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    f8da:	f047 071f 	orr.w	r7, r7, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    f8de:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    f8e2:	d11c      	bne.n	f91e <mpu_configure_regions_and_partition.constprop.0+0xce>
    f8e4:	4557      	cmp	r7, sl
    f8e6:	d108      	bne.n	f8fa <mpu_configure_regions_and_partition.constprop.0+0xaa>
			mpu_configure_region(u_reg_index, &regions[i]);
    f8e8:	4631      	mov	r1, r6
    f8ea:	fa5f f08b 	uxtb.w	r0, fp
    f8ee:	f7ff ff87 	bl	f800 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    f8f2:	f108 0801 	add.w	r8, r8, #1
    f8f6:	360c      	adds	r6, #12
    f8f8:	e7b3      	b.n	f862 <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    f8fa:	4631      	mov	r1, r6
	MPU->RNR = index;
    f8fc:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    f900:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    f902:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    f906:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    f90a:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    f90c:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
    f90e:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    f910:	f7ff ff76 	bl	f800 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    f914:	f110 0f16 	cmn.w	r0, #22
    f918:	d0c7      	beq.n	f8aa <mpu_configure_regions_and_partition.constprop.0+0x5a>
			reg_index++;
    f91a:	1c44      	adds	r4, r0, #1
    f91c:	e7e9      	b.n	f8f2 <mpu_configure_regions_and_partition.constprop.0+0xa2>
		} else if (reg_last == u_reg_last) {
    f91e:	3b01      	subs	r3, #1
    f920:	4557      	cmp	r7, sl
    f922:	b2e0      	uxtb	r0, r4
    f924:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    f928:	f8c5 b008 	str.w	fp, [r5, #8]
		} else if (reg_last == u_reg_last) {
    f92c:	d106      	bne.n	f93c <mpu_configure_regions_and_partition.constprop.0+0xec>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    f92e:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    f930:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    f932:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    f936:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    f938:	612b      	str	r3, [r5, #16]
			reg_index =
    f93a:	e7e9      	b.n	f910 <mpu_configure_regions_and_partition.constprop.0+0xc0>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    f93c:	6929      	ldr	r1, [r5, #16]
    f93e:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    f942:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    f944:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    f946:	4631      	mov	r1, r6
    f948:	f7ff ff5a 	bl	f800 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    f94c:	f110 0f16 	cmn.w	r0, #22
    f950:	d0ab      	beq.n	f8aa <mpu_configure_regions_and_partition.constprop.0+0x5a>
	MPU->RNR = index;
    f952:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    f956:	68ea      	ldr	r2, [r5, #12]
    f958:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    f95c:	3f01      	subs	r7, #1
	attr->rbar = MPU->RBAR &
    f95e:	f362 0304 	bfi	r3, r2, #0, #5
    f962:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    f966:	692b      	ldr	r3, [r5, #16]
    f968:	f89d 2008 	ldrb.w	r2, [sp, #8]
    f96c:	085b      	lsrs	r3, r3, #1
    f96e:	f363 1247 	bfi	r2, r3, #5, #3
    f972:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    f976:	e9d6 3200 	ldrd	r3, r2, [r6]
    f97a:	4413      	add	r3, r2
    f97c:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    f97e:	f023 031f 	bic.w	r3, r3, #31
    f982:	443b      	add	r3, r7
			reg_index++;
    f984:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    f986:	eba3 0a0a 	sub.w	sl, r3, sl
    f98a:	b2e0      	uxtb	r0, r4
    f98c:	f02a 031f 	bic.w	r3, sl, #31
	if (index > (get_num_regions() - 1U)) {
    f990:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
    f992:	9303      	str	r3, [sp, #12]
    f994:	d903      	bls.n	f99e <mpu_configure_regions_and_partition.constprop.0+0x14e>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    f996:	4602      	mov	r2, r0
    f998:	2145      	movs	r1, #69	; 0x45
    f99a:	4806      	ldr	r0, [pc, #24]	; (f9b4 <mpu_configure_regions_and_partition.constprop.0+0x164>)
    f99c:	e783      	b.n	f8a6 <mpu_configure_regions_and_partition.constprop.0+0x56>
	region_init(index, region_conf);
    f99e:	4669      	mov	r1, sp
    f9a0:	f7ff ff16 	bl	f7d0 <region_init>
    f9a4:	e7b9      	b.n	f91a <mpu_configure_regions_and_partition.constprop.0+0xca>
    f9a6:	bf00      	nop
    f9a8:	e000ed90 	.word	0xe000ed90
    f9ac:	00018a43 	.word	0x00018a43
    f9b0:	00018a1b 	.word	0x00018a1b
    f9b4:	000189f0 	.word	0x000189f0

0000f9b8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    f9b8:	2205      	movs	r2, #5
    f9ba:	4b03      	ldr	r3, [pc, #12]	; (f9c8 <arm_core_mpu_enable+0x10>)
    f9bc:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    f9be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    f9c2:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    f9c6:	4770      	bx	lr
    f9c8:	e000ed90 	.word	0xe000ed90

0000f9cc <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    f9cc:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    f9d0:	2200      	movs	r2, #0
    f9d2:	4b01      	ldr	r3, [pc, #4]	; (f9d8 <arm_core_mpu_disable+0xc>)
    f9d4:	605a      	str	r2, [r3, #4]
}
    f9d6:	4770      	bx	lr
    f9d8:	e000ed90 	.word	0xe000ed90

0000f9dc <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    f9dc:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    f9de:	4c0a      	ldr	r4, [pc, #40]	; (fa08 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    f9e0:	7822      	ldrb	r2, [r4, #0]
    f9e2:	f7ff ff35 	bl	f850 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    f9e6:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    f9e8:	3016      	adds	r0, #22
    f9ea:	d10c      	bne.n	fa06 <arm_core_mpu_configure_static_mpu_regions+0x2a>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    f9ec:	4907      	ldr	r1, [pc, #28]	; (fa0c <arm_core_mpu_configure_static_mpu_regions+0x30>)
    f9ee:	4808      	ldr	r0, [pc, #32]	; (fa10 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    f9f0:	f240 1205 	movw	r2, #261	; 0x105
    f9f4:	f005 faca 	bl	14f8c <printk>
			regions_num);
	}
}
    f9f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    f9fc:	f240 1105 	movw	r1, #261	; 0x105
    fa00:	4802      	ldr	r0, [pc, #8]	; (fa0c <arm_core_mpu_configure_static_mpu_regions+0x30>)
    fa02:	f005 bb8f 	b.w	15124 <assert_post_action>
}
    fa06:	bd10      	pop	{r4, pc}
    fa08:	2000189c 	.word	0x2000189c
    fa0c:	00018a6b 	.word	0x00018a6b
    fa10:	00017e72 	.word	0x00017e72

0000fa14 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    fa14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fa18:	4d2d      	ldr	r5, [pc, #180]	; (fad0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>)
    fa1a:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    fa1c:	4606      	mov	r6, r0
    fa1e:	f04f 0800 	mov.w	r8, #0
    fa22:	46ab      	mov	fp, r5
	MPU->RNR = index;
    fa24:	4f2b      	ldr	r7, [pc, #172]	; (fad4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    fa26:	45d0      	cmp	r8, sl
    fa28:	db02      	blt.n	fa30 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    fa2a:	b003      	add	sp, #12
    fa2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    fa30:	f8d6 9004 	ldr.w	r9, [r6, #4]
    fa34:	f1b9 0f00 	cmp.w	r9, #0
    fa38:	d044      	beq.n	fac4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    fa3a:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    fa3c:	4608      	mov	r0, r1
    fa3e:	9101      	str	r1, [sp, #4]
    fa40:	f005 fc47 	bl	152d2 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    fa44:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    fa46:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    fa48:	eb09 0001 	add.w	r0, r9, r1
    fa4c:	3801      	subs	r0, #1
    fa4e:	f005 fc40 	bl	152d2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    fa52:	4284      	cmp	r4, r0
    fa54:	f04f 0214 	mov.w	r2, #20
    fa58:	4b1f      	ldr	r3, [pc, #124]	; (fad8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
    fa5a:	d013      	beq.n	fa84 <arm_core_mpu_mark_areas_for_dynamic_regions+0x70>
		dyn_reg_info[i].index =
    fa5c:	f06f 0315 	mvn.w	r3, #21
    fa60:	fb02 f808 	mul.w	r8, r2, r8
    fa64:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    fa68:	f240 1215 	movw	r2, #277	; 0x115
    fa6c:	491b      	ldr	r1, [pc, #108]	; (fadc <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
    fa6e:	481c      	ldr	r0, [pc, #112]	; (fae0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
    fa70:	f005 fa8c 	bl	14f8c <printk>
    fa74:	f240 1115 	movw	r1, #277	; 0x115
    fa78:	4818      	ldr	r0, [pc, #96]	; (fadc <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
}
    fa7a:	b003      	add	sp, #12
    fa7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    fa80:	f005 bb50 	b.w	15124 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    fa84:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    fa88:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    fa8a:	d0ed      	beq.n	fa68 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    fa8c:	7819      	ldrb	r1, [r3, #0]
    fa8e:	42a1      	cmp	r1, r4
    fa90:	ddea      	ble.n	fa68 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
    fa92:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    fa96:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
    fa98:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
    fa9a:	68fc      	ldr	r4, [r7, #12]
    fa9c:	f100 0108 	add.w	r1, r0, #8
    faa0:	7b00      	ldrb	r0, [r0, #12]
    faa2:	f364 0004 	bfi	r0, r4, #0, #5
    faa6:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    faa8:	6938      	ldr	r0, [r7, #16]
    faaa:	790c      	ldrb	r4, [r1, #4]
    faac:	0840      	lsrs	r0, r0, #1
    faae:	f360 1447 	bfi	r4, r0, #5, #3
    fab2:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    fab4:	68f9      	ldr	r1, [r7, #12]
    fab6:	f021 011f 	bic.w	r1, r1, #31
    faba:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    fabc:	6939      	ldr	r1, [r7, #16]
    fabe:	f021 011f 	bic.w	r1, r1, #31
    fac2:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    fac4:	f108 0801 	add.w	r8, r8, #1
    fac8:	3514      	adds	r5, #20
    faca:	360c      	adds	r6, #12
    facc:	e7ab      	b.n	fa26 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    face:	bf00      	nop
    fad0:	20000a50 	.word	0x20000a50
    fad4:	e000ed90 	.word	0xe000ed90
    fad8:	2000189c 	.word	0x2000189c
    fadc:	00018a6b 	.word	0x00018a6b
    fae0:	00017e72 	.word	0x00017e72

0000fae4 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    fae4:	b570      	push	{r4, r5, r6, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    fae6:	4d1b      	ldr	r5, [pc, #108]	; (fb54 <z_arm_mpu_init+0x70>)
    fae8:	682e      	ldr	r6, [r5, #0]
    faea:	2e08      	cmp	r6, #8
    faec:	d90d      	bls.n	fb0a <z_arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    faee:	f44f 729e 	mov.w	r2, #316	; 0x13c
    faf2:	4919      	ldr	r1, [pc, #100]	; (fb58 <z_arm_mpu_init+0x74>)
    faf4:	4819      	ldr	r0, [pc, #100]	; (fb5c <z_arm_mpu_init+0x78>)
    faf6:	f005 fa49 	bl	14f8c <printk>
    fafa:	4817      	ldr	r0, [pc, #92]	; (fb58 <z_arm_mpu_init+0x74>)
    fafc:	f44f 719e 	mov.w	r1, #316	; 0x13c
    fb00:	f005 fb10 	bl	15124 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    fb04:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    fb08:	bd70      	pop	{r4, r5, r6, pc}
	arm_core_mpu_disable();
    fb0a:	f7ff ff5f 	bl	f9cc <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    fb0e:	2000      	movs	r0, #0
	MPU->MAIR0 =
    fb10:	4c13      	ldr	r4, [pc, #76]	; (fb60 <z_arm_mpu_init+0x7c>)
    fb12:	4a14      	ldr	r2, [pc, #80]	; (fb64 <z_arm_mpu_init+0x80>)
    fb14:	6322      	str	r2, [r4, #48]	; 0x30
    fb16:	4286      	cmp	r6, r0
    fb18:	d115      	bne.n	fb46 <z_arm_mpu_init+0x62>
	static_regions_num = mpu_config.num_regions;
    fb1a:	4b13      	ldr	r3, [pc, #76]	; (fb68 <z_arm_mpu_init+0x84>)
    fb1c:	701e      	strb	r6, [r3, #0]
	arm_core_mpu_enable();
    fb1e:	f7ff ff4b 	bl	f9b8 <arm_core_mpu_enable>
	__ASSERT(
    fb22:	6823      	ldr	r3, [r4, #0]
    fb24:	f3c3 2307 	ubfx	r3, r3, #8, #8
    fb28:	2b08      	cmp	r3, #8
    fb2a:	d00a      	beq.n	fb42 <z_arm_mpu_init+0x5e>
    fb2c:	490a      	ldr	r1, [pc, #40]	; (fb58 <z_arm_mpu_init+0x74>)
    fb2e:	480b      	ldr	r0, [pc, #44]	; (fb5c <z_arm_mpu_init+0x78>)
    fb30:	f44f 72cf 	mov.w	r2, #414	; 0x19e
    fb34:	f005 fa2a 	bl	14f8c <printk>
    fb38:	f44f 71cf 	mov.w	r1, #414	; 0x19e
    fb3c:	4806      	ldr	r0, [pc, #24]	; (fb58 <z_arm_mpu_init+0x74>)
    fb3e:	f005 faf1 	bl	15124 <assert_post_action>
	return 0;
    fb42:	2000      	movs	r0, #0
    fb44:	e7e0      	b.n	fb08 <z_arm_mpu_init+0x24>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    fb46:	6869      	ldr	r1, [r5, #4]
    fb48:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    fb4c:	f7ff fe40 	bl	f7d0 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    fb50:	3001      	adds	r0, #1
    fb52:	e7e0      	b.n	fb16 <z_arm_mpu_init+0x32>
    fb54:	00017c38 	.word	0x00017c38
    fb58:	00018a6b 	.word	0x00018a6b
    fb5c:	00017e72 	.word	0x00017e72
    fb60:	e000ed90 	.word	0xe000ed90
    fb64:	0044ffaa 	.word	0x0044ffaa
    fb68:	2000189c 	.word	0x2000189c

0000fb6c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    fb6c:	4b01      	ldr	r3, [pc, #4]	; (fb74 <__stdout_hook_install+0x8>)
    fb6e:	6018      	str	r0, [r3, #0]
}
    fb70:	4770      	bx	lr
    fb72:	bf00      	nop
    fb74:	20000028 	.word	0x20000028

0000fb78 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    fb78:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    fb7a:	794b      	ldrb	r3, [r1, #5]
    fb7c:	2b01      	cmp	r3, #1
    fb7e:	d02c      	beq.n	fbda <uarte_nrfx_configure+0x62>
    fb80:	2b03      	cmp	r3, #3
    fb82:	d127      	bne.n	fbd4 <uarte_nrfx_configure+0x5c>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    fb84:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    fb86:	798b      	ldrb	r3, [r1, #6]
    fb88:	2b03      	cmp	r3, #3
    fb8a:	d123      	bne.n	fbd4 <uarte_nrfx_configure+0x5c>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    fb8c:	79cd      	ldrb	r5, [r1, #7]
    fb8e:	b12d      	cbz	r5, fb9c <uarte_nrfx_configure+0x24>
    fb90:	2d01      	cmp	r5, #1
    fb92:	d11f      	bne.n	fbd4 <uarte_nrfx_configure+0x5c>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
    fb94:	6843      	ldr	r3, [r0, #4]
    fb96:	685b      	ldr	r3, [r3, #4]
    fb98:	079b      	lsls	r3, r3, #30
    fb9a:	d01b      	beq.n	fbd4 <uarte_nrfx_configure+0x5c>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    fb9c:	790a      	ldrb	r2, [r1, #4]
    fb9e:	2a01      	cmp	r2, #1
    fba0:	d01d      	beq.n	fbde <uarte_nrfx_configure+0x66>
    fba2:	2a02      	cmp	r2, #2
    fba4:	d01f      	beq.n	fbe6 <uarte_nrfx_configure+0x6e>
    fba6:	b9aa      	cbnz	r2, fbd4 <uarte_nrfx_configure+0x5c>
    fba8:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    fbaa:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    fbac:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
    fbae:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    fbb2:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
    fbb4:	d06e      	beq.n	fc94 <uarte_nrfx_configure+0x11c>
    fbb6:	d833      	bhi.n	fc20 <uarte_nrfx_configure+0xa8>
    fbb8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    fbbc:	d06d      	beq.n	fc9a <uarte_nrfx_configure+0x122>
    fbbe:	d81c      	bhi.n	fbfa <uarte_nrfx_configure+0x82>
    fbc0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    fbc4:	d06b      	beq.n	fc9e <uarte_nrfx_configure+0x126>
    fbc6:	d810      	bhi.n	fbea <uarte_nrfx_configure+0x72>
    fbc8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    fbcc:	d06a      	beq.n	fca4 <uarte_nrfx_configure+0x12c>
    fbce:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    fbd2:	d06a      	beq.n	fcaa <uarte_nrfx_configure+0x132>
    fbd4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    fbd8:	e05b      	b.n	fc92 <uarte_nrfx_configure+0x11a>
	switch (cfg->stop_bits) {
    fbda:	2700      	movs	r7, #0
    fbdc:	e7d3      	b.n	fb86 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    fbde:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    fbe2:	220e      	movs	r2, #14
    fbe4:	e7e1      	b.n	fbaa <uarte_nrfx_configure+0x32>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    fbe6:	2400      	movs	r4, #0
    fbe8:	e7fb      	b.n	fbe2 <uarte_nrfx_configure+0x6a>
	switch (baudrate) {
    fbea:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    fbee:	d05f      	beq.n	fcb0 <uarte_nrfx_configure+0x138>
    fbf0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    fbf4:	d1ee      	bne.n	fbd4 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    fbf6:	4b39      	ldr	r3, [pc, #228]	; (fcdc <uarte_nrfx_configure+0x164>)
    fbf8:	e03e      	b.n	fc78 <uarte_nrfx_configure+0x100>
	switch (baudrate) {
    fbfa:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    fbfe:	d05a      	beq.n	fcb6 <uarte_nrfx_configure+0x13e>
    fc00:	d807      	bhi.n	fc12 <uarte_nrfx_configure+0x9a>
    fc02:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    fc06:	d058      	beq.n	fcba <uarte_nrfx_configure+0x142>
    fc08:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    fc0c:	d1e2      	bne.n	fbd4 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    fc0e:	4b34      	ldr	r3, [pc, #208]	; (fce0 <uarte_nrfx_configure+0x168>)
    fc10:	e032      	b.n	fc78 <uarte_nrfx_configure+0x100>
	switch (baudrate) {
    fc12:	f647 2c12 	movw	ip, #31250	; 0x7a12
    fc16:	4563      	cmp	r3, ip
    fc18:	d1dc      	bne.n	fbd4 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    fc1a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    fc1e:	e02b      	b.n	fc78 <uarte_nrfx_configure+0x100>
	switch (baudrate) {
    fc20:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    fc24:	d04b      	beq.n	fcbe <uarte_nrfx_configure+0x146>
    fc26:	d813      	bhi.n	fc50 <uarte_nrfx_configure+0xd8>
    fc28:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    fc2c:	d04a      	beq.n	fcc4 <uarte_nrfx_configure+0x14c>
    fc2e:	d809      	bhi.n	fc44 <uarte_nrfx_configure+0xcc>
    fc30:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
    fc34:	4563      	cmp	r3, ip
    fc36:	d047      	beq.n	fcc8 <uarte_nrfx_configure+0x150>
    fc38:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    fc3c:	d1ca      	bne.n	fbd4 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    fc3e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    fc42:	e019      	b.n	fc78 <uarte_nrfx_configure+0x100>
	switch (baudrate) {
    fc44:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    fc48:	d1c4      	bne.n	fbd4 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    fc4a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    fc4e:	e013      	b.n	fc78 <uarte_nrfx_configure+0x100>
	switch (baudrate) {
    fc50:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    fc54:	d03b      	beq.n	fcce <uarte_nrfx_configure+0x156>
    fc56:	d809      	bhi.n	fc6c <uarte_nrfx_configure+0xf4>
    fc58:	f8df c098 	ldr.w	ip, [pc, #152]	; fcf4 <uarte_nrfx_configure+0x17c>
    fc5c:	4563      	cmp	r3, ip
    fc5e:	d039      	beq.n	fcd4 <uarte_nrfx_configure+0x15c>
    fc60:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    fc64:	d1b6      	bne.n	fbd4 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    fc66:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    fc6a:	e005      	b.n	fc78 <uarte_nrfx_configure+0x100>
	switch (baudrate) {
    fc6c:	f8df c088 	ldr.w	ip, [pc, #136]	; fcf8 <uarte_nrfx_configure+0x180>
    fc70:	4563      	cmp	r3, ip
    fc72:	d1af      	bne.n	fbd4 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    fc74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    fc78:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    fc7c:	6903      	ldr	r3, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
    fc7e:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
    fc80:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
    fc82:	4322      	orrs	r2, r4
    fc84:	3304      	adds	r3, #4
    fc86:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    fc88:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
    fc8c:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    fc90:	2000      	movs	r0, #0
}
    fc92:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    fc94:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    fc98:	e7ee      	b.n	fc78 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    fc9a:	4b12      	ldr	r3, [pc, #72]	; (fce4 <uarte_nrfx_configure+0x16c>)
    fc9c:	e7ec      	b.n	fc78 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    fc9e:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    fca2:	e7e9      	b.n	fc78 <uarte_nrfx_configure+0x100>
		nrf_baudrate = 0x00014000;
    fca4:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    fca8:	e7e6      	b.n	fc78 <uarte_nrfx_configure+0x100>
	switch (baudrate) {
    fcaa:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    fcae:	e7e3      	b.n	fc78 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    fcb0:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    fcb4:	e7e0      	b.n	fc78 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    fcb6:	4b0c      	ldr	r3, [pc, #48]	; (fce8 <uarte_nrfx_configure+0x170>)
    fcb8:	e7de      	b.n	fc78 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    fcba:	4b0c      	ldr	r3, [pc, #48]	; (fcec <uarte_nrfx_configure+0x174>)
    fcbc:	e7dc      	b.n	fc78 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    fcbe:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    fcc2:	e7d9      	b.n	fc78 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    fcc4:	4b0a      	ldr	r3, [pc, #40]	; (fcf0 <uarte_nrfx_configure+0x178>)
    fcc6:	e7d7      	b.n	fc78 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    fcc8:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    fccc:	e7d4      	b.n	fc78 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    fcce:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    fcd2:	e7d1      	b.n	fc78 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    fcd4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    fcd8:	e7ce      	b.n	fc78 <uarte_nrfx_configure+0x100>
    fcda:	bf00      	nop
    fcdc:	0013b000 	.word	0x0013b000
    fce0:	004ea000 	.word	0x004ea000
    fce4:	00275000 	.word	0x00275000
    fce8:	0075c000 	.word	0x0075c000
    fcec:	003af000 	.word	0x003af000
    fcf0:	013a9000 	.word	0x013a9000
    fcf4:	0003d090 	.word	0x0003d090
    fcf8:	000f4240 	.word	0x000f4240

0000fcfc <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    fcfc:	6802      	ldr	r2, [r0, #0]
{
    fcfe:	b510      	push	{r4, lr}
    switch (port)
    fd00:	0953      	lsrs	r3, r2, #5
{
    fd02:	4604      	mov	r4, r0
    switch (port)
    fd04:	d029      	beq.n	fd5a <nrf_gpio_pin_port_decode+0x5e>
    fd06:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    fd08:	f64f 73ff 	movw	r3, #65535	; 0xffff
    fd0c:	bf18      	it	ne
    fd0e:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    fd10:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    fd14:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    fd16:	07db      	lsls	r3, r3, #31
    fd18:	d40a      	bmi.n	fd30 <nrf_gpio_pin_port_decode+0x34>
    fd1a:	4912      	ldr	r1, [pc, #72]	; (fd64 <nrf_gpio_pin_port_decode+0x68>)
    fd1c:	4812      	ldr	r0, [pc, #72]	; (fd68 <nrf_gpio_pin_port_decode+0x6c>)
    fd1e:	f44f 7205 	mov.w	r2, #532	; 0x214
    fd22:	f005 f933 	bl	14f8c <printk>
    fd26:	f44f 7105 	mov.w	r1, #532	; 0x214
    fd2a:	480e      	ldr	r0, [pc, #56]	; (fd64 <nrf_gpio_pin_port_decode+0x68>)
    fd2c:	f005 f9fa 	bl	15124 <assert_post_action>
    uint32_t pin_number = *p_pin;
    fd30:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    fd32:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    fd36:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    fd38:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    fd3a:	d00c      	beq.n	fd56 <nrf_gpio_pin_port_decode+0x5a>
    fd3c:	2b01      	cmp	r3, #1
    fd3e:	d00f      	beq.n	fd60 <nrf_gpio_pin_port_decode+0x64>
            NRFX_ASSERT(0);
    fd40:	4908      	ldr	r1, [pc, #32]	; (fd64 <nrf_gpio_pin_port_decode+0x68>)
    fd42:	4809      	ldr	r0, [pc, #36]	; (fd68 <nrf_gpio_pin_port_decode+0x6c>)
    fd44:	f240 2219 	movw	r2, #537	; 0x219
    fd48:	f005 f920 	bl	14f8c <printk>
    fd4c:	f240 2119 	movw	r1, #537	; 0x219
    fd50:	4804      	ldr	r0, [pc, #16]	; (fd64 <nrf_gpio_pin_port_decode+0x68>)
    fd52:	f005 f9e7 	bl	15124 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    fd56:	4805      	ldr	r0, [pc, #20]	; (fd6c <nrf_gpio_pin_port_decode+0x70>)
}
    fd58:	bd10      	pop	{r4, pc}
    switch (port)
    fd5a:	f04f 33ff 	mov.w	r3, #4294967295
    fd5e:	e7d7      	b.n	fd10 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    fd60:	4803      	ldr	r0, [pc, #12]	; (fd70 <nrf_gpio_pin_port_decode+0x74>)
    fd62:	e7f9      	b.n	fd58 <nrf_gpio_pin_port_decode+0x5c>
    fd64:	00017f01 	.word	0x00017f01
    fd68:	00017e72 	.word	0x00017e72
    fd6c:	50842500 	.word	0x50842500
    fd70:	50842800 	.word	0x50842800

0000fd74 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    fd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fd76:	4605      	mov	r5, r0
    fd78:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
    fd7a:	6906      	ldr	r6, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    fd7c:	f005 fc87 	bl	1568e <k_is_in_isr>
    fd80:	b910      	cbnz	r0, fd88 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    fd82:	4b2c      	ldr	r3, [pc, #176]	; (fe34 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
    fd84:	781b      	ldrb	r3, [r3, #0]
    fd86:	b983      	cbnz	r3, fdaa <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    fd88:	f04f 0320 	mov.w	r3, #32
    fd8c:	f3ef 8411 	mrs	r4, BASEPRI
    fd90:	f383 8811 	msr	BASEPRI, r3
    fd94:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    fd98:	4628      	mov	r0, r5
    fd9a:	f005 fb85 	bl	154a8 <is_tx_ready>
    fd9e:	bb28      	cbnz	r0, fdec <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    fda0:	f384 8811 	msr	BASEPRI, r4
    fda4:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    fda8:	e7ee      	b.n	fd88 <uarte_nrfx_poll_out+0x14>
{
    fdaa:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    fdac:	4628      	mov	r0, r5
    fdae:	f005 fb7b 	bl	154a8 <is_tx_ready>
    fdb2:	b970      	cbnz	r0, fdd2 <uarte_nrfx_poll_out+0x5e>
    fdb4:	2001      	movs	r0, #1
    fdb6:	f005 fc42 	bl	1563e <nrfx_busy_wait>
    fdba:	3c01      	subs	r4, #1
    fdbc:	d1f6      	bne.n	fdac <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
    fdbe:	2100      	movs	r1, #0
    fdc0:	2021      	movs	r0, #33	; 0x21
    fdc2:	f001 ff39 	bl	11c38 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    fdc6:	e7f0      	b.n	fdaa <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    fdc8:	f384 8811 	msr	BASEPRI, r4
    fdcc:	f3bf 8f6f 	isb	sy
}
    fdd0:	e7f5      	b.n	fdbe <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    fdd2:	f04f 0320 	mov.w	r3, #32
    fdd6:	f3ef 8411 	mrs	r4, BASEPRI
    fdda:	f383 8811 	msr	BASEPRI, r3
    fdde:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    fde2:	4628      	mov	r0, r5
    fde4:	f005 fb60 	bl	154a8 <is_tx_ready>
    fde8:	2800      	cmp	r0, #0
    fdea:	d0ed      	beq.n	fdc8 <uarte_nrfx_poll_out+0x54>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    fdec:	2201      	movs	r2, #1
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    fdee:	f806 7f10 	strb.w	r7, [r6, #16]!
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    fdf2:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    fdf4:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    fdf6:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    fdfa:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fdfe:	2200      	movs	r2, #0
    fe00:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    fe04:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    fe08:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    fe0c:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    fe10:	684a      	ldr	r2, [r1, #4]
    fe12:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    fe14:	bf41      	itttt	mi
    fe16:	2208      	movmi	r2, #8
    fe18:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    fe1c:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    fe20:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fe24:	2201      	movs	r2, #1
    fe26:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    fe28:	f384 8811 	msr	BASEPRI, r4
    fe2c:	f3bf 8f6f 	isb	sy
	tx_start(dev, &data->char_out, 1);

	irq_unlock(key);
}
    fe30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fe32:	bf00      	nop
    fe34:	2000189d 	.word	0x2000189d

0000fe38 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
    fe38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    fe3c:	460f      	mov	r7, r1
    fe3e:	4616      	mov	r6, r2
	int res = -EINVAL;

	__ASSERT_NO_MSG(dev != NULL);
    fe40:	b940      	cbnz	r0, fe54 <entropy_cc3xx_rng_get_entropy+0x1c>
    fe42:	491a      	ldr	r1, [pc, #104]	; (feac <entropy_cc3xx_rng_get_entropy+0x74>)
    fe44:	481a      	ldr	r0, [pc, #104]	; (feb0 <entropy_cc3xx_rng_get_entropy+0x78>)
    fe46:	2226      	movs	r2, #38	; 0x26
    fe48:	f005 f8a0 	bl	14f8c <printk>
    fe4c:	2126      	movs	r1, #38	; 0x26
    fe4e:	4817      	ldr	r0, [pc, #92]	; (feac <entropy_cc3xx_rng_get_entropy+0x74>)
    fe50:	f005 f968 	bl	15124 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
    fe54:	b947      	cbnz	r7, fe68 <entropy_cc3xx_rng_get_entropy+0x30>
    fe56:	4915      	ldr	r1, [pc, #84]	; (feac <entropy_cc3xx_rng_get_entropy+0x74>)
    fe58:	4815      	ldr	r0, [pc, #84]	; (feb0 <entropy_cc3xx_rng_get_entropy+0x78>)
    fe5a:	2227      	movs	r2, #39	; 0x27
    fe5c:	f005 f896 	bl	14f8c <printk>
    fe60:	2127      	movs	r1, #39	; 0x27
    fe62:	4812      	ldr	r0, [pc, #72]	; (feac <entropy_cc3xx_rng_get_entropy+0x74>)
    fe64:	f005 f95e 	bl	15124 <assert_post_action>
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {

		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
    fe68:	f44f 6580 	mov.w	r5, #1024	; 0x400
    fe6c:	2400      	movs	r4, #0
    fe6e:	f06f 0015 	mvn.w	r0, #21
			/** This is a call from a secure app, in which
			 * case entropy is gathered using CC3xx HW
			 * using the CTR_DRBG features of the
			 * nrf_cc310_platform/nrf_cc312_platform library.
			 */
			res = nrf_cc3xx_platform_ctr_drbg_get(&ctr_drbg_ctx,
    fe72:	f8df 8040 	ldr.w	r8, [pc, #64]	; feb4 <entropy_cc3xx_rng_get_entropy+0x7c>
	while (offset < length) {
    fe76:	42a6      	cmp	r6, r4
    fe78:	d802      	bhi.n	fe80 <entropy_cc3xx_rng_get_entropy+0x48>
		offset += chunk_size;
	}
#endif

	return res;
}
    fe7a:	b002      	add	sp, #8
    fe7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
    fe80:	1b33      	subs	r3, r6, r4
    fe82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    fe86:	bf38      	it	cc
    fe88:	461d      	movcc	r5, r3
			res = nrf_cc3xx_platform_ctr_drbg_get(&ctr_drbg_ctx,
    fe8a:	4640      	mov	r0, r8
    fe8c:	ab01      	add	r3, sp, #4
    fe8e:	462a      	mov	r2, r5
    fe90:	1939      	adds	r1, r7, r4
    fe92:	f002 fafd 	bl	12490 <nrf_cc3xx_platform_ctr_drbg_get>
		if (olen != chunk_size) {
    fe96:	9b01      	ldr	r3, [sp, #4]
    fe98:	42ab      	cmp	r3, r5
    fe9a:	d103      	bne.n	fea4 <entropy_cc3xx_rng_get_entropy+0x6c>
		if (res != 0) {
    fe9c:	2800      	cmp	r0, #0
    fe9e:	d1ec      	bne.n	fe7a <entropy_cc3xx_rng_get_entropy+0x42>
		offset += chunk_size;
    fea0:	442c      	add	r4, r5
    fea2:	e7e8      	b.n	fe76 <entropy_cc3xx_rng_get_entropy+0x3e>
			return -EINVAL;
    fea4:	f06f 0015 	mvn.w	r0, #21
    fea8:	e7e7      	b.n	fe7a <entropy_cc3xx_rng_get_entropy+0x42>
    feaa:	bf00      	nop
    feac:	00018ac1 	.word	0x00018ac1
    feb0:	00017e72 	.word	0x00017e72
    feb4:	20000a6c 	.word	0x20000a6c

0000feb8 <entropy_cc3xx_rng_init>:
		}

	#elif !defined(CONFIG_SPM)
		int ret = 0;

		ret = nrf_cc3xx_platform_ctr_drbg_init(&ctr_drbg_ctx, NULL, 0);
    feb8:	2200      	movs	r2, #0
{
    feba:	b508      	push	{r3, lr}
		ret = nrf_cc3xx_platform_ctr_drbg_init(&ctr_drbg_ctx, NULL, 0);
    febc:	4611      	mov	r1, r2
    febe:	4804      	ldr	r0, [pc, #16]	; (fed0 <entropy_cc3xx_rng_init+0x18>)
    fec0:	f002 fab2 	bl	12428 <nrf_cc3xx_platform_ctr_drbg_init>
		if (ret != 0) {
    fec4:	2800      	cmp	r0, #0
			return -EINVAL;
		}
	#endif

	return 0;
}
    fec6:	bf18      	it	ne
    fec8:	f06f 0015 	mvnne.w	r0, #21
    fecc:	bd08      	pop	{r3, pc}
    fece:	bf00      	nop
    fed0:	20000a6c 	.word	0x20000a6c

0000fed4 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    fed4:	4803      	ldr	r0, [pc, #12]	; (fee4 <k_sys_fatal_error_handler+0x10>)
    fed6:	2145      	movs	r1, #69	; 0x45
{
    fed8:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
    feda:	f005 f938 	bl	1514e <z_log_minimal_printk>
		sys_arch_reboot(0);
    fede:	2000      	movs	r0, #0
    fee0:	f7ff fb7e 	bl	f5e0 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    fee4:	00018afc 	.word	0x00018afc

0000fee8 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
    fee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    feec:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
    feee:	4c21      	ldr	r4, [pc, #132]	; (ff74 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
    fef0:	4e21      	ldr	r6, [pc, #132]	; (ff78 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    fef2:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
    fef6:	f8df 9088 	ldr.w	r9, [pc, #136]	; ff80 <check_ext_api_requests+0x98>
{
    fefa:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    fefc:	45a8      	cmp	r8, r5
    fefe:	d803      	bhi.n	ff08 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
    ff00:	2000      	movs	r0, #0
    ff02:	b005      	add	sp, #20
    ff04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
    ff08:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ff0a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    ff0e:	681f      	ldr	r7, [r3, #0]
    ff10:	ab01      	add	r3, sp, #4
    ff12:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
    ff16:	220c      	movs	r2, #12
    ff18:	4619      	mov	r1, r3
    ff1a:	4638      	mov	r0, r7
    ff1c:	f005 fa03 	bl	15326 <memcmp>
    ff20:	b990      	cbnz	r0, ff48 <check_ext_api_requests+0x60>
    ff22:	b18f      	cbz	r7, ff48 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    ff24:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
    ff26:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    ff28:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
    ff2a:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    ff2c:	4291      	cmp	r1, r2
    ff2e:	d10b      	bne.n	ff48 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
    ff30:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
    ff32:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
    ff34:	4291      	cmp	r1, r2
    ff36:	d807      	bhi.n	ff48 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
    ff38:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
    ff3a:	4291      	cmp	r1, r2
    ff3c:	d904      	bls.n	ff48 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
    ff3e:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    ff40:	695b      	ldr	r3, [r3, #20]
    ff42:	ea32 0303 	bics.w	r3, r2, r3
    ff46:	d00a      	beq.n	ff5e <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
    ff48:	6a27      	ldr	r7, [r4, #32]
    ff4a:	b167      	cbz	r7, ff66 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
    ff4c:	480b      	ldr	r0, [pc, #44]	; (ff7c <check_ext_api_requests+0x94>)
    ff4e:	f005 f81d 	bl	14f8c <printk>
			k_panic();
    ff52:	4040      	eors	r0, r0
    ff54:	f380 8811 	msr	BASEPRI, r0
    ff58:	f04f 0004 	mov.w	r0, #4
    ff5c:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
    ff5e:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    ff60:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
    ff62:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    ff64:	e7ca      	b.n	fefc <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
    ff66:	4648      	mov	r0, r9
    ff68:	f005 f810 	bl	14f8c <printk>
			*ext_api_req->ext_api = NULL;
    ff6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ff6e:	601f      	str	r7, [r3, #0]
    ff70:	e7f5      	b.n	ff5e <check_ext_api_requests+0x76>
    ff72:	bf00      	nop
    ff74:	0000023c 	.word	0x0000023c
    ff78:	000159f0 	.word	0x000159f0
    ff7c:	00018b1e 	.word	0x00018b1e
    ff80:	00018b47 	.word	0x00018b47

0000ff84 <nrf53_errata_42>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    ff84:	4b06      	ldr	r3, [pc, #24]	; (ffa0 <nrf53_errata_42+0x1c>)
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    ff86:	681b      	ldr	r3, [r3, #0]
    ff88:	2b07      	cmp	r3, #7
    ff8a:	d107      	bne.n	ff9c <nrf53_errata_42+0x18>
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    ff8c:	4b05      	ldr	r3, [pc, #20]	; (ffa4 <nrf53_errata_42+0x20>)
    ff8e:	681b      	ldr	r3, [r3, #0]
    ff90:	3b02      	subs	r3, #2
    ff92:	2b03      	cmp	r3, #3
    ff94:	d802      	bhi.n	ff9c <nrf53_errata_42+0x18>
    ff96:	4a04      	ldr	r2, [pc, #16]	; (ffa8 <nrf53_errata_42+0x24>)
    ff98:	5cd0      	ldrb	r0, [r2, r3]
    ff9a:	4770      	bx	lr
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    ff9c:	2000      	movs	r0, #0
    #endif
}
    ff9e:	4770      	bx	lr
    ffa0:	00ff0130 	.word	0x00ff0130
    ffa4:	00ff0134 	.word	0x00ff0134
    ffa8:	00018b7a 	.word	0x00018b7a

0000ffac <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    ffac:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    ffb0:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    ffb4:	4b03      	ldr	r3, [pc, #12]	; (ffc4 <SystemCoreClockUpdate+0x18>)
    ffb6:	f002 0203 	and.w	r2, r2, #3
    ffba:	40d3      	lsrs	r3, r2
    ffbc:	4a02      	ldr	r2, [pc, #8]	; (ffc8 <SystemCoreClockUpdate+0x1c>)
    ffbe:	6013      	str	r3, [r2, #0]
#endif
}
    ffc0:	4770      	bx	lr
    ffc2:	bf00      	nop
    ffc4:	07a12000 	.word	0x07a12000
    ffc8:	20000040 	.word	0x20000040

0000ffcc <SystemInit>:
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    ffcc:	4a3d      	ldr	r2, [pc, #244]	; (100c4 <CONFIG_PM_PARTITION_SIZE_SPM+0xc4>)
{
    ffce:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    ffd0:	6813      	ldr	r3, [r2, #0]
    ffd2:	f043 0302 	orr.w	r3, r3, #2
    ffd6:	6013      	str	r3, [r2, #0]
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    ffd8:	f7ff ffd4 	bl	ff84 <nrf53_errata_42>
    ffdc:	b148      	cbz	r0, fff2 <SystemInit+0x26>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    ffde:	4b3a      	ldr	r3, [pc, #232]	; (100c8 <CONFIG_PM_PARTITION_SIZE_SPM+0xc8>)
    ffe0:	681a      	ldr	r2, [r3, #0]
    ffe2:	b932      	cbnz	r2, fff2 <SystemInit+0x26>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    ffe4:	210d      	movs	r1, #13
    ffe6:	6019      	str	r1, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    ffe8:	2101      	movs	r1, #1
    ffea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
    ffee:	6019      	str	r1, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    fff0:	601a      	str	r2, [r3, #0]
{
    fff2:	2200      	movs	r2, #0
    fff4:	00d3      	lsls	r3, r2, #3
    fff6:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    fffa:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    fffe:	3101      	adds	r1, #1
   10000:	d007      	beq.n	10012 <CONFIG_PM_PARTITION_SIZE_SPM+0x12>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
   10002:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
   10006:	3201      	adds	r2, #1
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
   10008:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
   1000c:	2a20      	cmp	r2, #32
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
   1000e:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
   10010:	d1f0      	bne.n	fff4 <SystemInit+0x28>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
   10012:	f7ff ffb7 	bl	ff84 <nrf53_errata_42>
   10016:	2800      	cmp	r0, #0
   10018:	d14e      	bne.n	100b8 <CONFIG_PM_PARTITION_SIZE_SPM+0xb8>
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
   1001a:	f7ff ffb3 	bl	ff84 <nrf53_errata_42>
   1001e:	b138      	cbz	r0, 10030 <CONFIG_PM_PARTITION_SIZE_SPM+0x30>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
   10020:	4b2a      	ldr	r3, [pc, #168]	; (100cc <CONFIG_PM_PARTITION_SIZE_SPM+0xcc>)
   10022:	4a2b      	ldr	r2, [pc, #172]	; (100d0 <CONFIG_PM_PARTITION_SIZE_SPM+0xd0>)
   10024:	601a      	str	r2, [r3, #0]
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
   10026:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1002a:	2201      	movs	r2, #1
   1002c:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
   10030:	4b28      	ldr	r3, [pc, #160]	; (100d4 <CONFIG_PM_PARTITION_SIZE_SPM+0xd4>)
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
   10032:	681b      	ldr	r3, [r3, #0]
   10034:	2b07      	cmp	r3, #7
   10036:	d10a      	bne.n	1004e <CONFIG_PM_PARTITION_SIZE_SPM+0x4e>
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
   10038:	4b27      	ldr	r3, [pc, #156]	; (100d8 <CONFIG_PM_PARTITION_SIZE_SPM+0xd8>)
   1003a:	681b      	ldr	r3, [r3, #0]
   1003c:	3b02      	subs	r3, #2
   1003e:	2b03      	cmp	r3, #3
   10040:	d805      	bhi.n	1004e <CONFIG_PM_PARTITION_SIZE_SPM+0x4e>
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
   10042:	4a26      	ldr	r2, [pc, #152]	; (100dc <CONFIG_PM_PARTITION_SIZE_SPM+0xdc>)
   10044:	5cd3      	ldrb	r3, [r2, r3]
   10046:	b113      	cbz	r3, 1004e <CONFIG_PM_PARTITION_SIZE_SPM+0x4e>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
   10048:	2200      	movs	r2, #0
   1004a:	4b25      	ldr	r3, [pc, #148]	; (100e0 <CONFIG_PM_PARTITION_SIZE_SPM+0xe0>)
   1004c:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
   1004e:	f7ff ff99 	bl	ff84 <nrf53_errata_42>
   10052:	b150      	cbz	r0, 1006a <CONFIG_PM_PARTITION_SIZE_SPM+0x6a>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
   10054:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   10058:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1005c:	07d1      	lsls	r1, r2, #31
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
   1005e:	bf42      	ittt	mi
   10060:	2200      	movmi	r2, #0
   10062:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
   10066:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
   1006a:	4b1a      	ldr	r3, [pc, #104]	; (100d4 <CONFIG_PM_PARTITION_SIZE_SPM+0xd4>)
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
   1006c:	681b      	ldr	r3, [r3, #0]
   1006e:	2b07      	cmp	r3, #7
   10070:	d109      	bne.n	10086 <CONFIG_PM_PARTITION_SIZE_SPM+0x86>

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
   10072:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   10076:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1007a:	07d2      	lsls	r2, r2, #31
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
   1007c:	bf44      	itt	mi
   1007e:	f06f 0201 	mvnmi.w	r2, #1
   10082:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
   10086:	f7ff ff7d 	bl	ff84 <nrf53_errata_42>
   1008a:	b110      	cbz	r0, 10092 <CONFIG_PM_PARTITION_SIZE_SPM+0x92>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
   1008c:	2265      	movs	r2, #101	; 0x65
   1008e:	4b15      	ldr	r3, [pc, #84]	; (100e4 <CONFIG_PM_PARTITION_SIZE_SPM+0xe4>)
   10090:	601a      	str	r2, [r3, #0]

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
   10092:	4a15      	ldr	r2, [pc, #84]	; (100e8 <CONFIG_PM_PARTITION_SIZE_SPM+0xe8>)
   10094:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   10098:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
   1009c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
   100a0:	4a12      	ldr	r2, [pc, #72]	; (100ec <CONFIG_PM_PARTITION_SIZE_SPM+0xec>)
   100a2:	4b13      	ldr	r3, [pc, #76]	; (100f0 <CONFIG_PM_PARTITION_SIZE_SPM+0xf0>)
   100a4:	6811      	ldr	r1, [r2, #0]
   100a6:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
   100aa:	69d2      	ldr	r2, [r2, #28]
   100ac:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
}
   100b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SystemCoreClockUpdate();
   100b4:	f7ff bf7a 	b.w	ffac <SystemCoreClockUpdate>
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
   100b8:	2229      	movs	r2, #41	; 0x29
   100ba:	4b0a      	ldr	r3, [pc, #40]	; (100e4 <CONFIG_PM_PARTITION_SIZE_SPM+0xe4>)
   100bc:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
   100be:	2203      	movs	r2, #3
   100c0:	631a      	str	r2, [r3, #48]	; 0x30
   100c2:	e7aa      	b.n	1001a <CONFIG_PM_PARTITION_SIZE_SPM+0x1a>
   100c4:	e000edd0 	.word	0xe000edd0
   100c8:	50004a20 	.word	0x50004a20
   100cc:	50039530 	.word	0x50039530
   100d0:	beef0044 	.word	0xbeef0044
   100d4:	00ff0130 	.word	0x00ff0130
   100d8:	00ff0134 	.word	0x00ff0134
   100dc:	00018b7e 	.word	0x00018b7e
   100e0:	5003254c 	.word	0x5003254c
   100e4:	5000470c 	.word	0x5000470c
   100e8:	e000ed00 	.word	0xe000ed00
   100ec:	00ff8000 	.word	0x00ff8000
   100f0:	50006000 	.word	0x50006000

000100f4 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   100f4:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   100f6:	4604      	mov	r4, r0
   100f8:	b940      	cbnz	r0, 1010c <nrfx_clock_init+0x18>
   100fa:	4909      	ldr	r1, [pc, #36]	; (10120 <nrfx_clock_init+0x2c>)
   100fc:	4809      	ldr	r0, [pc, #36]	; (10124 <nrfx_clock_init+0x30>)
   100fe:	22b5      	movs	r2, #181	; 0xb5
   10100:	f004 ff44 	bl	14f8c <printk>
   10104:	21b5      	movs	r1, #181	; 0xb5
   10106:	4806      	ldr	r0, [pc, #24]	; (10120 <nrfx_clock_init+0x2c>)
   10108:	f005 f80c 	bl	15124 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1010c:	4b06      	ldr	r3, [pc, #24]	; (10128 <nrfx_clock_init+0x34>)
   1010e:	791a      	ldrb	r2, [r3, #4]
   10110:	b922      	cbnz	r2, 1011c <nrfx_clock_init+0x28>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   10112:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   10114:	4805      	ldr	r0, [pc, #20]	; (1012c <nrfx_clock_init+0x38>)
        m_clock_cb.event_handler = event_handler;
   10116:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   10118:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1011a:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1011c:	4804      	ldr	r0, [pc, #16]	; (10130 <nrfx_clock_init+0x3c>)
    return err_code;
   1011e:	e7fc      	b.n	1011a <nrfx_clock_init+0x26>
   10120:	00018b82 	.word	0x00018b82
   10124:	00017e72 	.word	0x00017e72
   10128:	20000c28 	.word	0x20000c28
   1012c:	0bad0000 	.word	0x0bad0000
   10130:	0bad000c 	.word	0x0bad000c

00010134 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   10134:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   10136:	4b0d      	ldr	r3, [pc, #52]	; (1016c <nrfx_clock_enable+0x38>)
   10138:	791b      	ldrb	r3, [r3, #4]
   1013a:	b943      	cbnz	r3, 1014e <nrfx_clock_enable+0x1a>
   1013c:	490c      	ldr	r1, [pc, #48]	; (10170 <nrfx_clock_enable+0x3c>)
   1013e:	480d      	ldr	r0, [pc, #52]	; (10174 <nrfx_clock_enable+0x40>)
   10140:	22ce      	movs	r2, #206	; 0xce
   10142:	f004 ff23 	bl	14f8c <printk>
   10146:	21ce      	movs	r1, #206	; 0xce
   10148:	4809      	ldr	r0, [pc, #36]	; (10170 <nrfx_clock_enable+0x3c>)
   1014a:	f004 ffeb 	bl	15124 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1014e:	2005      	movs	r0, #5
   10150:	f7fe feac 	bl	eeac <arch_irq_is_enabled>
   10154:	b910      	cbnz	r0, 1015c <nrfx_clock_enable+0x28>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   10156:	2005      	movs	r0, #5
   10158:	f7fe fe98 	bl	ee8c <arch_irq_enable>
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
   1015c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   10160:	2201      	movs	r2, #1
   10162:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   10166:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   1016a:	bd08      	pop	{r3, pc}
   1016c:	20000c28 	.word	0x20000c28
   10170:	00018b82 	.word	0x00018b82
   10174:	00017e72 	.word	0x00017e72

00010178 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   10178:	4b33      	ldr	r3, [pc, #204]	; (10248 <nrfx_clock_start+0xd0>)
{
   1017a:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1017c:	791b      	ldrb	r3, [r3, #4]
{
   1017e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   10180:	b953      	cbnz	r3, 10198 <nrfx_clock_start+0x20>
   10182:	4932      	ldr	r1, [pc, #200]	; (1024c <nrfx_clock_start+0xd4>)
   10184:	4832      	ldr	r0, [pc, #200]	; (10250 <nrfx_clock_start+0xd8>)
   10186:	f44f 7285 	mov.w	r2, #266	; 0x10a
   1018a:	f004 feff 	bl	14f8c <printk>
   1018e:	f44f 7185 	mov.w	r1, #266	; 0x10a
   10192:	482e      	ldr	r0, [pc, #184]	; (1024c <nrfx_clock_start+0xd4>)
   10194:	f004 ffc6 	bl	15124 <assert_post_action>
    switch (domain)
   10198:	2c03      	cmp	r4, #3
   1019a:	d848      	bhi.n	1022e <nrfx_clock_start+0xb6>
   1019c:	e8df f004 	tbb	[pc, r4]
   101a0:	3a2d2202 	.word	0x3a2d2202
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   101a4:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
   101a8:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   101ac:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   101b0:	03c9      	lsls	r1, r1, #15
   101b2:	d511      	bpl.n	101d8 <nrfx_clock_start+0x60>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   101b4:	f003 0303 	and.w	r3, r3, #3
   101b8:	2b02      	cmp	r3, #2
   101ba:	d10d      	bne.n	101d8 <nrfx_clock_start+0x60>
    p_reg->LFCLKSRC = (uint32_t)(source);
   101bc:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   101c0:	2200      	movs	r2, #0
   101c2:	4b24      	ldr	r3, [pc, #144]	; (10254 <nrfx_clock_start+0xdc>)
   101c4:	601a      	str	r2, [r3, #0]
   101c6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   101c8:	2202      	movs	r2, #2
   101ca:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   101ce:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   101d2:	2201      	movs	r2, #1
   101d4:	609a      	str	r2, [r3, #8]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   101d6:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   101d8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   101dc:	2201      	movs	r2, #1
   101de:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   101e2:	e7ed      	b.n	101c0 <nrfx_clock_start+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   101e4:	2200      	movs	r2, #0
   101e6:	4b1c      	ldr	r3, [pc, #112]	; (10258 <nrfx_clock_start+0xe0>)
   101e8:	601a      	str	r2, [r3, #0]
   101ea:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   101ec:	2201      	movs	r2, #1
   101ee:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   101f2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   101f6:	601a      	str	r2, [r3, #0]
}
   101f8:	e7ed      	b.n	101d6 <nrfx_clock_start+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   101fa:	2200      	movs	r2, #0
   101fc:	4b17      	ldr	r3, [pc, #92]	; (1025c <nrfx_clock_start+0xe4>)
   101fe:	601a      	str	r2, [r3, #0]
   10200:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   10202:	f44f 7200 	mov.w	r2, #512	; 0x200
   10206:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1020a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1020e:	2201      	movs	r2, #1
   10210:	621a      	str	r2, [r3, #32]
}
   10212:	e7e0      	b.n	101d6 <nrfx_clock_start+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10214:	2200      	movs	r2, #0
   10216:	4b12      	ldr	r3, [pc, #72]	; (10260 <nrfx_clock_start+0xe8>)
   10218:	601a      	str	r2, [r3, #0]
   1021a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1021c:	f44f 7280 	mov.w	r2, #256	; 0x100
   10220:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   10224:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10228:	2201      	movs	r2, #1
   1022a:	619a      	str	r2, [r3, #24]
}
   1022c:	e7d3      	b.n	101d6 <nrfx_clock_start+0x5e>
            NRFX_ASSERT(0);
   1022e:	4907      	ldr	r1, [pc, #28]	; (1024c <nrfx_clock_start+0xd4>)
   10230:	4807      	ldr	r0, [pc, #28]	; (10250 <nrfx_clock_start+0xd8>)
   10232:	f44f 729e 	mov.w	r2, #316	; 0x13c
   10236:	f004 fea9 	bl	14f8c <printk>
}
   1023a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
   1023e:	f44f 719e 	mov.w	r1, #316	; 0x13c
   10242:	4802      	ldr	r0, [pc, #8]	; (1024c <nrfx_clock_start+0xd4>)
   10244:	f004 bf6e 	b.w	15124 <assert_post_action>
   10248:	20000c28 	.word	0x20000c28
   1024c:	00018b82 	.word	0x00018b82
   10250:	00017e72 	.word	0x00017e72
   10254:	50005104 	.word	0x50005104
   10258:	50005100 	.word	0x50005100
   1025c:	50005124 	.word	0x50005124
   10260:	50005120 	.word	0x50005120

00010264 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   10264:	4b44      	ldr	r3, [pc, #272]	; (10378 <nrfx_clock_stop+0x114>)
{
   10266:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   10268:	791b      	ldrb	r3, [r3, #4]
{
   1026a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   1026c:	b953      	cbnz	r3, 10284 <nrfx_clock_stop+0x20>
   1026e:	4943      	ldr	r1, [pc, #268]	; (1037c <nrfx_clock_stop+0x118>)
   10270:	4843      	ldr	r0, [pc, #268]	; (10380 <nrfx_clock_stop+0x11c>)
   10272:	f240 1243 	movw	r2, #323	; 0x143
   10276:	f004 fe89 	bl	14f8c <printk>
   1027a:	f240 1143 	movw	r1, #323	; 0x143
   1027e:	483f      	ldr	r0, [pc, #252]	; (1037c <nrfx_clock_stop+0x118>)
   10280:	f004 ff50 	bl	15124 <assert_post_action>
    switch (domain)
   10284:	2c03      	cmp	r4, #3
   10286:	d85a      	bhi.n	1033e <nrfx_clock_stop+0xda>
   10288:	e8df f004 	tbb	[pc, r4]
   1028c:	4c3f2302 	.word	0x4c3f2302
    p_reg->INTENCLR = mask;
   10290:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   10294:	2202      	movs	r2, #2
   10296:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1029a:	2200      	movs	r2, #0
   1029c:	f503 7382 	add.w	r3, r3, #260	; 0x104
   102a0:	601a      	str	r2, [r3, #0]
   102a2:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   102a4:	4b37      	ldr	r3, [pc, #220]	; (10384 <nrfx_clock_stop+0x120>)
   102a6:	2201      	movs	r2, #1
   102a8:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   102ac:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   102b0:	601a      	str	r2, [r3, #0]
    switch (domain)
   102b2:	2c02      	cmp	r4, #2
   102b4:	d050      	beq.n	10358 <nrfx_clock_stop+0xf4>
   102b6:	2c03      	cmp	r4, #3
   102b8:	d051      	beq.n	1035e <nrfx_clock_stop+0xfa>
   102ba:	2c00      	cmp	r4, #0
   102bc:	d152      	bne.n	10364 <nrfx_clock_stop+0x100>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   102be:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   102c2:	03db      	lsls	r3, r3, #15
   102c4:	d520      	bpl.n	10308 <nrfx_clock_stop+0xa4>
   102c6:	2001      	movs	r0, #1
   102c8:	f005 f9b9 	bl	1563e <nrfx_busy_wait>
   102cc:	3d01      	subs	r5, #1
   102ce:	d1f0      	bne.n	102b2 <nrfx_clock_stop+0x4e>
   102d0:	e01a      	b.n	10308 <nrfx_clock_stop+0xa4>
    p_reg->INTENCLR = mask;
   102d2:	2301      	movs	r3, #1
   102d4:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   102d8:	2100      	movs	r1, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   102da:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   102de:	4a2a      	ldr	r2, [pc, #168]	; (10388 <nrfx_clock_stop+0x124>)
    p_reg->INTENCLR = mask;
   102e0:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   102e4:	6011      	str	r1, [r2, #0]
   102e6:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   102e8:	4a28      	ldr	r2, [pc, #160]	; (1038c <nrfx_clock_stop+0x128>)
   102ea:	6013      	str	r3, [r2, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   102ec:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   102f0:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   102f4:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   102f8:	03d2      	lsls	r2, r2, #15
   102fa:	d505      	bpl.n	10308 <nrfx_clock_stop+0xa4>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   102fc:	b123      	cbz	r3, 10308 <nrfx_clock_stop+0xa4>
   102fe:	2001      	movs	r0, #1
   10300:	f005 f99d 	bl	1563e <nrfx_busy_wait>
   10304:	3d01      	subs	r5, #1
   10306:	d1f1      	bne.n	102ec <nrfx_clock_stop+0x88>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   10308:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
   1030a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1030e:	f44f 7200 	mov.w	r2, #512	; 0x200
   10312:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10316:	2200      	movs	r2, #0
   10318:	f503 7392 	add.w	r3, r3, #292	; 0x124
   1031c:	601a      	str	r2, [r3, #0]
   1031e:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10320:	4b1b      	ldr	r3, [pc, #108]	; (10390 <nrfx_clock_stop+0x12c>)
   10322:	e7c0      	b.n	102a6 <nrfx_clock_stop+0x42>
    p_reg->INTENCLR = mask;
   10324:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   10328:	f44f 7280 	mov.w	r2, #256	; 0x100
   1032c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10330:	2200      	movs	r2, #0
   10332:	f503 7390 	add.w	r3, r3, #288	; 0x120
   10336:	601a      	str	r2, [r3, #0]
   10338:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1033a:	4b16      	ldr	r3, [pc, #88]	; (10394 <nrfx_clock_stop+0x130>)
   1033c:	e7b3      	b.n	102a6 <nrfx_clock_stop+0x42>
            NRFX_ASSERT(0);
   1033e:	490f      	ldr	r1, [pc, #60]	; (1037c <nrfx_clock_stop+0x118>)
   10340:	480f      	ldr	r0, [pc, #60]	; (10380 <nrfx_clock_stop+0x11c>)
   10342:	f240 125f 	movw	r2, #351	; 0x15f
   10346:	f004 fe21 	bl	14f8c <printk>
   1034a:	f240 115f 	movw	r1, #351	; 0x15f
   1034e:	480b      	ldr	r0, [pc, #44]	; (1037c <nrfx_clock_stop+0x118>)
}
   10350:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            NRFX_ASSERT(0);
   10354:	f004 bee6 	b.w	15124 <assert_post_action>
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   10358:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   1035c:	e7b1      	b.n	102c2 <nrfx_clock_stop+0x5e>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   1035e:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   10362:	e7ae      	b.n	102c2 <nrfx_clock_stop+0x5e>
            NRFX_ASSERT(0);
   10364:	490c      	ldr	r1, [pc, #48]	; (10398 <nrfx_clock_stop+0x134>)
   10366:	4806      	ldr	r0, [pc, #24]	; (10380 <nrfx_clock_stop+0x11c>)
   10368:	f44f 724f 	mov.w	r2, #828	; 0x33c
   1036c:	f004 fe0e 	bl	14f8c <printk>
   10370:	f44f 714f 	mov.w	r1, #828	; 0x33c
   10374:	4808      	ldr	r0, [pc, #32]	; (10398 <nrfx_clock_stop+0x134>)
   10376:	e7eb      	b.n	10350 <nrfx_clock_stop+0xec>
   10378:	20000c28 	.word	0x20000c28
   1037c:	00018b82 	.word	0x00018b82
   10380:	00017e72 	.word	0x00017e72
   10384:	5000500c 	.word	0x5000500c
   10388:	50005100 	.word	0x50005100
   1038c:	50005004 	.word	0x50005004
   10390:	50005024 	.word	0x50005024
   10394:	5000501c 	.word	0x5000501c
   10398:	00018bbf 	.word	0x00018bbf

0001039c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1039c:	4b26      	ldr	r3, [pc, #152]	; (10438 <nrfx_power_clock_irq_handler+0x9c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1039e:	b510      	push	{r4, lr}
   103a0:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   103a2:	b152      	cbz	r2, 103ba <nrfx_power_clock_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   103a4:	2000      	movs	r0, #0
   103a6:	6018      	str	r0, [r3, #0]
   103a8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   103aa:	2201      	movs	r2, #1
   103ac:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   103b0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   103b4:	4b21      	ldr	r3, [pc, #132]	; (1043c <nrfx_power_clock_irq_handler+0xa0>)
   103b6:	681b      	ldr	r3, [r3, #0]
   103b8:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   103ba:	4b21      	ldr	r3, [pc, #132]	; (10440 <nrfx_power_clock_irq_handler+0xa4>)
   103bc:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   103be:	b18a      	cbz	r2, 103e4 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   103c0:	2200      	movs	r2, #0
   103c2:	601a      	str	r2, [r3, #0]
   103c4:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   103c6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   103ca:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   103ce:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   103d2:	f002 0203 	and.w	r2, r2, #3
   103d6:	2a01      	cmp	r2, #1
   103d8:	f04f 0102 	mov.w	r1, #2
   103dc:	d124      	bne.n	10428 <nrfx_power_clock_irq_handler+0x8c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   103de:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   103e2:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   103e4:	4b17      	ldr	r3, [pc, #92]	; (10444 <nrfx_power_clock_irq_handler+0xa8>)
   103e6:	681a      	ldr	r2, [r3, #0]
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   103e8:	b162      	cbz	r2, 10404 <nrfx_power_clock_irq_handler+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   103ea:	2200      	movs	r2, #0
   103ec:	601a      	str	r2, [r3, #0]
   103ee:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   103f0:	f44f 7280 	mov.w	r2, #256	; 0x100
   103f4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   103f8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   103fc:	4b0f      	ldr	r3, [pc, #60]	; (1043c <nrfx_power_clock_irq_handler+0xa0>)
   103fe:	2004      	movs	r0, #4
   10400:	681b      	ldr	r3, [r3, #0]
   10402:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   10404:	4b10      	ldr	r3, [pc, #64]	; (10448 <nrfx_power_clock_irq_handler+0xac>)
   10406:	681a      	ldr	r2, [r3, #0]
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   10408:	b1aa      	cbz	r2, 10436 <nrfx_power_clock_irq_handler+0x9a>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   1040a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1040e:	2200      	movs	r2, #0
   10410:	601a      	str	r2, [r3, #0]
   10412:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   10414:	f44f 7200 	mov.w	r2, #512	; 0x200
   10418:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1041c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   10420:	4b06      	ldr	r3, [pc, #24]	; (1043c <nrfx_power_clock_irq_handler+0xa0>)
   10422:	2005      	movs	r0, #5
   10424:	681b      	ldr	r3, [r3, #0]
   10426:	4718      	bx	r3
   10428:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1042c:	4b03      	ldr	r3, [pc, #12]	; (1043c <nrfx_power_clock_irq_handler+0xa0>)
   1042e:	2001      	movs	r0, #1
   10430:	681b      	ldr	r3, [r3, #0]
   10432:	4798      	blx	r3
   10434:	e7d6      	b.n	103e4 <nrfx_power_clock_irq_handler+0x48>
}
   10436:	bd10      	pop	{r4, pc}
   10438:	50005100 	.word	0x50005100
   1043c:	20000c28 	.word	0x20000c28
   10440:	50005104 	.word	0x50005104
   10444:	50005120 	.word	0x50005120
   10448:	50005124 	.word	0x50005124

0001044c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1044c:	4b0e      	ldr	r3, [pc, #56]	; (10488 <z_sys_init_run_level+0x3c>)
{
   1044e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   10450:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   10454:	3001      	adds	r0, #1
   10456:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1045a:	42a6      	cmp	r6, r4
   1045c:	d800      	bhi.n	10460 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1045e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   10460:	e9d4 3500 	ldrd	r3, r5, [r4]
   10464:	4628      	mov	r0, r5
   10466:	4798      	blx	r3
		if (dev != NULL) {
   10468:	b165      	cbz	r5, 10484 <z_sys_init_run_level+0x38>
			if (rc != 0) {
   1046a:	68eb      	ldr	r3, [r5, #12]
   1046c:	b130      	cbz	r0, 1047c <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1046e:	2800      	cmp	r0, #0
   10470:	bfb8      	it	lt
   10472:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   10474:	28ff      	cmp	r0, #255	; 0xff
   10476:	bfa8      	it	ge
   10478:	20ff      	movge	r0, #255	; 0xff
   1047a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1047c:	785a      	ldrb	r2, [r3, #1]
   1047e:	f042 0201 	orr.w	r2, r2, #1
   10482:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   10484:	3408      	adds	r4, #8
   10486:	e7e8      	b.n	1045a <z_sys_init_run_level+0xe>
   10488:	00017c84 	.word	0x00017c84

0001048c <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   1048c:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1048e:	4605      	mov	r5, r0
   10490:	b910      	cbnz	r0, 10498 <z_impl_device_get_binding+0xc>
		return NULL;
   10492:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   10494:	4620      	mov	r0, r4
   10496:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   10498:	7803      	ldrb	r3, [r0, #0]
   1049a:	2b00      	cmp	r3, #0
   1049c:	d0f9      	beq.n	10492 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   1049e:	4a0f      	ldr	r2, [pc, #60]	; (104dc <z_impl_device_get_binding+0x50>)
   104a0:	4c0f      	ldr	r4, [pc, #60]	; (104e0 <z_impl_device_get_binding+0x54>)
   104a2:	4616      	mov	r6, r2
   104a4:	4294      	cmp	r4, r2
   104a6:	d108      	bne.n	104ba <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   104a8:	4c0d      	ldr	r4, [pc, #52]	; (104e0 <z_impl_device_get_binding+0x54>)
   104aa:	42b4      	cmp	r4, r6
   104ac:	d0f1      	beq.n	10492 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   104ae:	4620      	mov	r0, r4
   104b0:	f005 f8c8 	bl	15644 <z_device_ready>
   104b4:	b950      	cbnz	r0, 104cc <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   104b6:	3418      	adds	r4, #24
   104b8:	e7f7      	b.n	104aa <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   104ba:	4620      	mov	r0, r4
   104bc:	f005 f8c2 	bl	15644 <z_device_ready>
   104c0:	b110      	cbz	r0, 104c8 <z_impl_device_get_binding+0x3c>
   104c2:	6823      	ldr	r3, [r4, #0]
   104c4:	42ab      	cmp	r3, r5
   104c6:	d0e5      	beq.n	10494 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   104c8:	3418      	adds	r4, #24
   104ca:	e7eb      	b.n	104a4 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   104cc:	4628      	mov	r0, r5
   104ce:	6821      	ldr	r1, [r4, #0]
   104d0:	f004 ff1d 	bl	1530e <strcmp>
   104d4:	2800      	cmp	r0, #0
   104d6:	d1ee      	bne.n	104b6 <z_impl_device_get_binding+0x2a>
   104d8:	e7dc      	b.n	10494 <z_impl_device_get_binding+0x8>
   104da:	bf00      	nop
   104dc:	2000011c 	.word	0x2000011c
   104e0:	200000bc 	.word	0x200000bc

000104e4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   104e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   104e6:	4604      	mov	r4, r0
   104e8:	460e      	mov	r6, r1
	__asm__ volatile(
   104ea:	f04f 0320 	mov.w	r3, #32
   104ee:	f3ef 8711 	mrs	r7, BASEPRI
   104f2:	f383 8811 	msr	BASEPRI, r3
   104f6:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   104fa:	f001 fbcd 	bl	11c98 <z_impl_k_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   104fe:	2200      	movs	r2, #0
   10500:	2c04      	cmp	r4, #4
   10502:	bf98      	it	ls
   10504:	4b1d      	ldrls	r3, [pc, #116]	; (1057c <z_fatal_error+0x98>)
   10506:	4605      	mov	r5, r0
	switch (reason) {
   10508:	bf94      	ite	ls
   1050a:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   1050e:	4b1c      	ldrhi	r3, [pc, #112]	; (10580 <z_fatal_error+0x9c>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   10510:	9200      	str	r2, [sp, #0]
   10512:	2145      	movs	r1, #69	; 0x45
   10514:	4622      	mov	r2, r4
   10516:	481b      	ldr	r0, [pc, #108]	; (10584 <z_fatal_error+0xa0>)
   10518:	f004 fe19 	bl	1514e <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1051c:	b13e      	cbz	r6, 1052e <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1051e:	69f3      	ldr	r3, [r6, #28]
   10520:	f3c3 0308 	ubfx	r3, r3, #0, #9
   10524:	b11b      	cbz	r3, 1052e <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
   10526:	2145      	movs	r1, #69	; 0x45
   10528:	4817      	ldr	r0, [pc, #92]	; (10588 <z_fatal_error+0xa4>)
   1052a:	f004 fe10 	bl	1514e <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1052e:	b135      	cbz	r5, 1053e <z_fatal_error+0x5a>
   10530:	4628      	mov	r0, r5
   10532:	f005 f8b2 	bl	1569a <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   10536:	4603      	mov	r3, r0
   10538:	b108      	cbz	r0, 1053e <z_fatal_error+0x5a>
   1053a:	7802      	ldrb	r2, [r0, #0]
   1053c:	b902      	cbnz	r2, 10540 <z_fatal_error+0x5c>
		thread_name = "unknown";
   1053e:	4b13      	ldr	r3, [pc, #76]	; (1058c <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   10540:	462a      	mov	r2, r5
   10542:	2145      	movs	r1, #69	; 0x45
   10544:	4812      	ldr	r0, [pc, #72]	; (10590 <z_fatal_error+0xac>)
   10546:	f004 fe02 	bl	1514e <z_log_minimal_printk>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1054a:	4631      	mov	r1, r6
   1054c:	4620      	mov	r0, r4
   1054e:	f7ff fcc1 	bl	fed4 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   10552:	2c04      	cmp	r4, #4
   10554:	d108      	bne.n	10568 <z_fatal_error+0x84>
   10556:	490f      	ldr	r1, [pc, #60]	; (10594 <z_fatal_error+0xb0>)
   10558:	480f      	ldr	r0, [pc, #60]	; (10598 <z_fatal_error+0xb4>)
   1055a:	228f      	movs	r2, #143	; 0x8f
   1055c:	f004 fd16 	bl	14f8c <printk>
   10560:	218f      	movs	r1, #143	; 0x8f
   10562:	480c      	ldr	r0, [pc, #48]	; (10594 <z_fatal_error+0xb0>)
   10564:	f004 fdde 	bl	15124 <assert_post_action>
	__asm__ volatile(
   10568:	f387 8811 	msr	BASEPRI, r7
   1056c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   10570:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   10572:	b003      	add	sp, #12
   10574:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   10578:	f7ff b886 	b.w	f688 <z_impl_k_thread_abort>
   1057c:	00017c9c 	.word	0x00017c9c
   10580:	00018bf3 	.word	0x00018bf3
   10584:	00018c09 	.word	0x00018c09
   10588:	00018c36 	.word	0x00018c36
   1058c:	00018c01 	.word	0x00018c01
   10590:	00018c5c 	.word	0x00018c5c
   10594:	00018c79 	.word	0x00018c79
   10598:	00017e72 	.word	0x00017e72

0001059c <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1059c:	4802      	ldr	r0, [pc, #8]	; (105a8 <z_bss_zero+0xc>)
   1059e:	4a03      	ldr	r2, [pc, #12]	; (105ac <z_bss_zero+0x10>)
   105a0:	2100      	movs	r1, #0
   105a2:	1a12      	subs	r2, r2, r0
   105a4:	f004 bf11 	b.w	153ca <memset>
   105a8:	20000170 	.word	0x20000170
   105ac:	200018a0 	.word	0x200018a0

000105b0 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   105b0:	2201      	movs	r2, #1
{
   105b2:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   105b4:	4b09      	ldr	r3, [pc, #36]	; (105dc <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   105b6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   105b8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   105ba:	f7ff ff47 	bl	1044c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   105be:	f001 fecb 	bl	12358 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   105c2:	2003      	movs	r0, #3
   105c4:	f7ff ff42 	bl	1044c <z_sys_init_run_level>

	z_init_static_threads();
   105c8:	f000 f9d6 	bl	10978 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
   105cc:	f004 fcc4 	bl	14f58 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   105d0:	4a03      	ldr	r2, [pc, #12]	; (105e0 <bg_thread_main+0x30>)
   105d2:	7b13      	ldrb	r3, [r2, #12]
   105d4:	f023 0301 	bic.w	r3, r3, #1
   105d8:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   105da:	bd08      	pop	{r3, pc}
   105dc:	2000189d 	.word	0x2000189d
   105e0:	200001f0 	.word	0x200001f0

000105e4 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   105e4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   105e8:	4b3f      	ldr	r3, [pc, #252]	; (106e8 <z_cstart+0x104>)
   105ea:	b0a7      	sub	sp, #156	; 0x9c
	uint32_t msp =
   105ec:	f503 6700 	add.w	r7, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   105f0:	f387 8808 	msr	MSP, r7
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   105f4:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   105f8:	2400      	movs	r4, #0
   105fa:	23e0      	movs	r3, #224	; 0xe0
   105fc:	4d3b      	ldr	r5, [pc, #236]	; (106ec <z_cstart+0x108>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   105fe:	f04f 0b01 	mov.w	fp, #1
   10602:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   10606:	77ec      	strb	r4, [r5, #31]
   10608:	762c      	strb	r4, [r5, #24]
   1060a:	766c      	strb	r4, [r5, #25]
   1060c:	76ac      	strb	r4, [r5, #26]
   1060e:	76ec      	strb	r4, [r5, #27]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   10610:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   10612:	4e37      	ldr	r6, [pc, #220]	; (106f0 <z_cstart+0x10c>)
   10614:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   10618:	626b      	str	r3, [r5, #36]	; 0x24
		      SCB_SHCSR_BUSFAULTENA_Msk;
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* Enable Secure Fault */
	SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
   1061a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1061c:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 10708 <z_cstart+0x124>
   10620:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   10624:	626b      	str	r3, [r5, #36]	; 0x24
	/* Clear BFAR before setting BusFaults to target Non-Secure state. */
	SCB->BFAR = 0;
   10626:	63ac      	str	r4, [r5, #56]	; 0x38
	/* Set NMI, Hard, and Bus Faults as Non-Secure.
	 * NMI and Bus Faults targeting the Secure state will
	 * escalate to a SecureFault or SecureHardFault.
	 */
	SCB->AIRCR =
		(SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk)))
   10628:	68eb      	ldr	r3, [r5, #12]
	z_setup_new_thread(thread, stack,
   1062a:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 1070c <z_cstart+0x128>
   1062e:	b29b      	uxth	r3, r3
		| SCB_AIRCR_BFHFNMINS_Msk
		| ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos) &
   10630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   10634:	f443 3308 	orr.w	r3, r3, #139264	; 0x22000
	SCB->AIRCR =
   10638:	60eb      	str	r3, [r5, #12]

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1063a:	f7fe ffb7 	bl	f5ac <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1063e:	f7fe fc99 	bl	ef74 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   10642:	f04f 33ff 	mov.w	r3, #4294967295
   10646:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   10648:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1064a:	f7ff fa4b 	bl	fae4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1064e:	f7ff f8a3 	bl	f798 <z_arm_configure_static_mpu_regions>
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   10652:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   10656:	4d27      	ldr	r5, [pc, #156]	; (106f4 <z_cstart+0x110>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   10658:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1065c:	ab06      	add	r3, sp, #24
   1065e:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
   10660:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   10664:	f004 ffed 	bl	15642 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   10668:	4620      	mov	r0, r4
   1066a:	f7ff feef 	bl	1044c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1066e:	2001      	movs	r0, #1
   10670:	f7ff feec 	bl	1044c <z_sys_init_run_level>
	z_sched_init();
   10674:	f001 f9c0 	bl	119f8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   10678:	4b1f      	ldr	r3, [pc, #124]	; (106f8 <z_cstart+0x114>)
	_kernel.ready_q.cache = &z_main_thread;
   1067a:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1067c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10680:	491e      	ldr	r1, [pc, #120]	; (106fc <z_cstart+0x118>)
   10682:	9305      	str	r3, [sp, #20]
   10684:	4630      	mov	r0, r6
   10686:	4653      	mov	r3, sl
   10688:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1068c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   10690:	9400      	str	r4, [sp, #0]
   10692:	f000 f91d 	bl	108d0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   10696:	7b73      	ldrb	r3, [r6, #13]
   10698:	4681      	mov	r9, r0
   1069a:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   1069e:	4630      	mov	r0, r6
   106a0:	7373      	strb	r3, [r6, #13]
   106a2:	f001 f821 	bl	116e8 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   106a6:	230f      	movs	r3, #15
   106a8:	f44f 72a0 	mov.w	r2, #320	; 0x140
   106ac:	e9cd 4302 	strd	r4, r3, [sp, #8]
   106b0:	4913      	ldr	r1, [pc, #76]	; (10700 <z_cstart+0x11c>)
   106b2:	4b14      	ldr	r3, [pc, #80]	; (10704 <z_cstart+0x120>)
   106b4:	4640      	mov	r0, r8
   106b6:	e9cd b404 	strd	fp, r4, [sp, #16]
   106ba:	e9cd 5400 	strd	r5, r4, [sp]
   106be:	f000 f907 	bl	108d0 <z_setup_new_thread>
   106c2:	f898 300d 	ldrb.w	r3, [r8, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   106c6:	4652      	mov	r2, sl
   106c8:	f023 0304 	bic.w	r3, r3, #4
   106cc:	f888 300d 	strb.w	r3, [r8, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   106d0:	f105 0318 	add.w	r3, r5, #24
   106d4:	4649      	mov	r1, r9
   106d6:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   106d8:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   106dc:	f8c5 800c 	str.w	r8, [r5, #12]
		_kernel.cpus[i].id = i;
   106e0:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   106e2:	606f      	str	r7, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   106e4:	f7fe fc32 	bl	ef4c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   106e8:	200029e0 	.word	0x200029e0
   106ec:	e000ed00 	.word	0xe000ed00
   106f0:	200001f0 	.word	0x200001f0
   106f4:	20000c30 	.word	0x20000c30
   106f8:	00018ce5 	.word	0x00018ce5
   106fc:	200018a0 	.word	0x200018a0
   10700:	200028a0 	.word	0x200028a0
   10704:	00010ac1 	.word	0x00010ac1
   10708:	000105b1 	.word	0x000105b1
   1070c:	20000170 	.word	0x20000170

00010710 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   10710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   10714:	4d14      	ldr	r5, [pc, #80]	; (10768 <init_mem_slab_module+0x58>)
   10716:	4c15      	ldr	r4, [pc, #84]	; (1076c <init_mem_slab_module+0x5c>)
   10718:	46a8      	mov	r8, r5
   1071a:	4e15      	ldr	r6, [pc, #84]	; (10770 <init_mem_slab_module+0x60>)
   1071c:	42ac      	cmp	r4, r5
   1071e:	d908      	bls.n	10732 <init_mem_slab_module+0x22>
   10720:	4631      	mov	r1, r6
   10722:	4814      	ldr	r0, [pc, #80]	; (10774 <init_mem_slab_module+0x64>)
   10724:	223c      	movs	r2, #60	; 0x3c
   10726:	f004 fc31 	bl	14f8c <printk>
   1072a:	213c      	movs	r1, #60	; 0x3c
   1072c:	4630      	mov	r0, r6
   1072e:	f004 fcf9 	bl	15124 <assert_post_action>
   10732:	4544      	cmp	r4, r8
   10734:	d302      	bcc.n	1073c <init_mem_slab_module+0x2c>
			goto out;
		}
		z_object_init(slab);
	}

out:
   10736:	2000      	movs	r0, #0
	return rc;
}
   10738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1073c:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   10740:	ea42 0301 	orr.w	r3, r2, r1
   10744:	f013 0303 	ands.w	r3, r3, #3
   10748:	d10b      	bne.n	10762 <init_mem_slab_module+0x52>
	for (j = 0U; j < slab->num_blocks; j++) {
   1074a:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
   1074c:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   1074e:	4283      	cmp	r3, r0
   10750:	d101      	bne.n	10756 <init_mem_slab_module+0x46>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   10752:	3420      	adds	r4, #32
   10754:	e7e2      	b.n	1071c <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   10756:	69a7      	ldr	r7, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   10758:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   1075a:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   1075c:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
   1075e:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   10760:	e7f5      	b.n	1074e <init_mem_slab_module+0x3e>
		return -EINVAL;
   10762:	f06f 0015 	mvn.w	r0, #21
	return rc;
   10766:	e7e7      	b.n	10738 <init_mem_slab_module+0x28>
   10768:	2000011c 	.word	0x2000011c
   1076c:	2000011c 	.word	0x2000011c
   10770:	00018ced 	.word	0x00018ced
   10774:	00017e72 	.word	0x00017e72

00010778 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   10778:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1077c:	4604      	mov	r4, r0
   1077e:	460d      	mov	r5, r1
   10780:	4690      	mov	r8, r2
   10782:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   10784:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   10788:	f04f 0320 	mov.w	r3, #32
   1078c:	f3ef 8711 	mrs	r7, BASEPRI
   10790:	f383 8811 	msr	BASEPRI, r3
   10794:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10798:	4630      	mov	r0, r6
   1079a:	f000 f96d 	bl	10a78 <z_spin_lock_valid>
   1079e:	b940      	cbnz	r0, 107b2 <k_mem_slab_alloc+0x3a>
   107a0:	491f      	ldr	r1, [pc, #124]	; (10820 <k_mem_slab_alloc+0xa8>)
   107a2:	4820      	ldr	r0, [pc, #128]	; (10824 <k_mem_slab_alloc+0xac>)
   107a4:	2281      	movs	r2, #129	; 0x81
   107a6:	f004 fbf1 	bl	14f8c <printk>
   107aa:	2181      	movs	r1, #129	; 0x81
   107ac:	481c      	ldr	r0, [pc, #112]	; (10820 <k_mem_slab_alloc+0xa8>)
   107ae:	f004 fcb9 	bl	15124 <assert_post_action>
	z_spin_lock_set_owner(l);
   107b2:	4630      	mov	r0, r6
   107b4:	f000 f97c 	bl	10ab0 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   107b8:	69a3      	ldr	r3, [r4, #24]
   107ba:	b1c3      	cbz	r3, 107ee <k_mem_slab_alloc+0x76>
		/* take a free block */
		*mem = slab->free_list;
   107bc:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   107be:	681b      	ldr	r3, [r3, #0]
   107c0:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   107c2:	69e3      	ldr	r3, [r4, #28]
   107c4:	3301      	adds	r3, #1
   107c6:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   107c8:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   107ca:	4630      	mov	r0, r6
   107cc:	f000 f962 	bl	10a94 <z_spin_unlock_valid>
   107d0:	b940      	cbnz	r0, 107e4 <k_mem_slab_alloc+0x6c>
   107d2:	4913      	ldr	r1, [pc, #76]	; (10820 <k_mem_slab_alloc+0xa8>)
   107d4:	4813      	ldr	r0, [pc, #76]	; (10824 <k_mem_slab_alloc+0xac>)
   107d6:	22ac      	movs	r2, #172	; 0xac
   107d8:	f004 fbd8 	bl	14f8c <printk>
   107dc:	21ac      	movs	r1, #172	; 0xac
   107de:	4810      	ldr	r0, [pc, #64]	; (10820 <k_mem_slab_alloc+0xa8>)
   107e0:	f004 fca0 	bl	15124 <assert_post_action>
	__asm__ volatile(
   107e4:	f387 8811 	msr	BASEPRI, r7
   107e8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   107ec:	e013      	b.n	10816 <k_mem_slab_alloc+0x9e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   107ee:	ea58 0209 	orrs.w	r2, r8, r9
   107f2:	d103      	bne.n	107fc <k_mem_slab_alloc+0x84>
		result = -ENOMEM;
   107f4:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   107f8:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   107fa:	e7e6      	b.n	107ca <k_mem_slab_alloc+0x52>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   107fc:	4622      	mov	r2, r4
   107fe:	4639      	mov	r1, r7
   10800:	4630      	mov	r0, r6
   10802:	e9cd 8900 	strd	r8, r9, [sp]
   10806:	f000 fd89 	bl	1131c <z_pend_curr>
		if (result == 0) {
   1080a:	4604      	mov	r4, r0
   1080c:	b918      	cbnz	r0, 10816 <k_mem_slab_alloc+0x9e>
			*mem = _current->base.swap_data;
   1080e:	4b06      	ldr	r3, [pc, #24]	; (10828 <k_mem_slab_alloc+0xb0>)
   10810:	689b      	ldr	r3, [r3, #8]
   10812:	695b      	ldr	r3, [r3, #20]
   10814:	602b      	str	r3, [r5, #0]
}
   10816:	4620      	mov	r0, r4
   10818:	b003      	add	sp, #12
   1081a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1081e:	bf00      	nop
   10820:	00017eac 	.word	0x00017eac
   10824:	00017e72 	.word	0x00017e72
   10828:	20000c30 	.word	0x20000c30

0001082c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1082c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10830:	4604      	mov	r4, r0
   10832:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   10834:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   10838:	f04f 0320 	mov.w	r3, #32
   1083c:	f3ef 8711 	mrs	r7, BASEPRI
   10840:	f383 8811 	msr	BASEPRI, r3
   10844:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10848:	4630      	mov	r0, r6
   1084a:	f000 f915 	bl	10a78 <z_spin_lock_valid>
   1084e:	b940      	cbnz	r0, 10862 <k_mem_slab_free+0x36>
   10850:	491d      	ldr	r1, [pc, #116]	; (108c8 <k_mem_slab_free+0x9c>)
   10852:	481e      	ldr	r0, [pc, #120]	; (108cc <k_mem_slab_free+0xa0>)
   10854:	2281      	movs	r2, #129	; 0x81
   10856:	f004 fb99 	bl	14f8c <printk>
   1085a:	2181      	movs	r1, #129	; 0x81
   1085c:	481a      	ldr	r0, [pc, #104]	; (108c8 <k_mem_slab_free+0x9c>)
   1085e:	f004 fc61 	bl	15124 <assert_post_action>
	z_spin_lock_set_owner(l);
   10862:	4630      	mov	r0, r6
   10864:	f000 f924 	bl	10ab0 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   10868:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1086c:	f1b8 0f00 	cmp.w	r8, #0
   10870:	d10f      	bne.n	10892 <k_mem_slab_free+0x66>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   10872:	4620      	mov	r0, r4
   10874:	f001 f882 	bl	1197c <z_unpend_first_thread>

		if (pending_thread != NULL) {
   10878:	b158      	cbz	r0, 10892 <k_mem_slab_free+0x66>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1087a:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1087c:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   10880:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   10882:	f000 ff31 	bl	116e8 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   10886:	4639      	mov	r1, r7
   10888:	4630      	mov	r0, r6
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1088a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   1088e:	f000 bba5 	b.w	10fdc <z_reschedule>
	**(char ***) mem = slab->free_list;
   10892:	682b      	ldr	r3, [r5, #0]
   10894:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10896:	4630      	mov	r0, r6
   10898:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1089a:	682b      	ldr	r3, [r5, #0]
   1089c:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   1089e:	69e3      	ldr	r3, [r4, #28]
   108a0:	3b01      	subs	r3, #1
   108a2:	61e3      	str	r3, [r4, #28]
   108a4:	f000 f8f6 	bl	10a94 <z_spin_unlock_valid>
   108a8:	b940      	cbnz	r0, 108bc <k_mem_slab_free+0x90>
   108aa:	4907      	ldr	r1, [pc, #28]	; (108c8 <k_mem_slab_free+0x9c>)
   108ac:	4807      	ldr	r0, [pc, #28]	; (108cc <k_mem_slab_free+0xa0>)
   108ae:	22ac      	movs	r2, #172	; 0xac
   108b0:	f004 fb6c 	bl	14f8c <printk>
   108b4:	21ac      	movs	r1, #172	; 0xac
   108b6:	4804      	ldr	r0, [pc, #16]	; (108c8 <k_mem_slab_free+0x9c>)
   108b8:	f004 fc34 	bl	15124 <assert_post_action>
	__asm__ volatile(
   108bc:	f387 8811 	msr	BASEPRI, r7
   108c0:	f3bf 8f6f 	isb	sy
}
   108c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   108c8:	00017eac 	.word	0x00017eac
   108cc:	00017e72 	.word	0x00017e72

000108d0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   108d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   108d4:	b085      	sub	sp, #20
   108d6:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   108da:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   108dc:	f1b9 0f0f 	cmp.w	r9, #15
{
   108e0:	460f      	mov	r7, r1
   108e2:	4615      	mov	r5, r2
   108e4:	4698      	mov	r8, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   108e6:	d12e      	bne.n	10946 <z_setup_new_thread+0x76>
   108e8:	4b1f      	ldr	r3, [pc, #124]	; (10968 <z_setup_new_thread+0x98>)
   108ea:	4598      	cmp	r8, r3
   108ec:	d12f      	bne.n	1094e <z_setup_new_thread+0x7e>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   108ee:	f104 0358 	add.w	r3, r4, #88	; 0x58
   108f2:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   108f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
	thread_base->pended_on = NULL;
   108f8:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
   108fa:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   108fc:	2304      	movs	r3, #4
   108fe:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   10900:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   10902:	1de8      	adds	r0, r5, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   10904:	9302      	str	r3, [sp, #8]
   10906:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   10908:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1090c:	9301      	str	r3, [sp, #4]
   1090e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	stack_ptr = (char *)stack + stack_obj_size;
   10910:	183d      	adds	r5, r7, r0
	new_thread->stack_info.size = stack_buf_size;
   10912:	e9c4 7019 	strd	r7, r0, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   10916:	9300      	str	r3, [sp, #0]
   10918:	462a      	mov	r2, r5
   1091a:	4643      	mov	r3, r8
   1091c:	4639      	mov	r1, r7
   1091e:	4620      	mov	r0, r4
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   10920:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   10924:	60a6      	str	r6, [r4, #8]

	thread_base->prio = priority;
   10926:	f884 900e 	strb.w	r9, [r4, #14]

	thread_base->sched_locked = 0U;
   1092a:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   1092c:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1092e:	f7fe faf1 	bl	ef14 <arch_new_thread>
	if (!_current) {
   10932:	4b0e      	ldr	r3, [pc, #56]	; (1096c <z_setup_new_thread+0x9c>)
	new_thread->init_data = NULL;
   10934:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   10936:	689b      	ldr	r3, [r3, #8]
   10938:	b103      	cbz	r3, 1093c <z_setup_new_thread+0x6c>
	new_thread->resource_pool = _current->resource_pool;
   1093a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
   1093c:	4628      	mov	r0, r5
   1093e:	6723      	str	r3, [r4, #112]	; 0x70
   10940:	b005      	add	sp, #20
   10942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   10946:	f109 0310 	add.w	r3, r9, #16
   1094a:	2b1e      	cmp	r3, #30
   1094c:	d9cf      	bls.n	108ee <z_setup_new_thread+0x1e>
   1094e:	f44f 7202 	mov.w	r2, #520	; 0x208
   10952:	4907      	ldr	r1, [pc, #28]	; (10970 <z_setup_new_thread+0xa0>)
   10954:	4807      	ldr	r0, [pc, #28]	; (10974 <z_setup_new_thread+0xa4>)
   10956:	f004 fb19 	bl	14f8c <printk>
   1095a:	f44f 7102 	mov.w	r1, #520	; 0x208
   1095e:	4804      	ldr	r0, [pc, #16]	; (10970 <z_setup_new_thread+0xa0>)
   10960:	f004 fbe0 	bl	15124 <assert_post_action>
   10964:	e7c3      	b.n	108ee <z_setup_new_thread+0x1e>
   10966:	bf00      	nop
   10968:	00010ac1 	.word	0x00010ac1
   1096c:	20000c30 	.word	0x20000c30
   10970:	00018d12 	.word	0x00018d12
   10974:	00017e72 	.word	0x00017e72

00010978 <z_init_static_threads>:
{
   10978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1097c:	4f39      	ldr	r7, [pc, #228]	; (10a64 <z_init_static_threads+0xec>)
   1097e:	4d3a      	ldr	r5, [pc, #232]	; (10a68 <z_init_static_threads+0xf0>)
   10980:	463e      	mov	r6, r7
   10982:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 10a70 <z_init_static_threads+0xf8>
{
   10986:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   10988:	42bd      	cmp	r5, r7
   1098a:	d90a      	bls.n	109a2 <z_init_static_threads+0x2a>
   1098c:	4641      	mov	r1, r8
   1098e:	4837      	ldr	r0, [pc, #220]	; (10a6c <z_init_static_threads+0xf4>)
   10990:	f44f 7236 	mov.w	r2, #728	; 0x2d8
   10994:	f004 fafa 	bl	14f8c <printk>
   10998:	f44f 7136 	mov.w	r1, #728	; 0x2d8
   1099c:	4640      	mov	r0, r8
   1099e:	f004 fbc1 	bl	15124 <assert_post_action>
   109a2:	42b5      	cmp	r5, r6
   109a4:	f105 0430 	add.w	r4, r5, #48	; 0x30
   109a8:	d31d      	bcc.n	109e6 <z_init_static_threads+0x6e>
	k_sched_lock();
   109aa:	f000 fb4d 	bl	11048 <k_sched_lock>
		} else {
			return (t * to_hz + off) / from_hz;
   109ae:	f240 38e7 	movw	r8, #999	; 0x3e7
   109b2:	f04f 0900 	mov.w	r9, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   109b6:	4c2c      	ldr	r4, [pc, #176]	; (10a68 <z_init_static_threads+0xf0>)
   109b8:	4d2d      	ldr	r5, [pc, #180]	; (10a70 <z_init_static_threads+0xf8>)
   109ba:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 10a6c <z_init_static_threads+0xf4>
   109be:	42b4      	cmp	r4, r6
   109c0:	d90a      	bls.n	109d8 <z_init_static_threads+0x60>
   109c2:	4629      	mov	r1, r5
   109c4:	4650      	mov	r0, sl
   109c6:	f240 22f7 	movw	r2, #759	; 0x2f7
   109ca:	f004 fadf 	bl	14f8c <printk>
   109ce:	f240 21f7 	movw	r1, #759	; 0x2f7
   109d2:	4628      	mov	r0, r5
   109d4:	f004 fba6 	bl	15124 <assert_post_action>
   109d8:	42b4      	cmp	r4, r6
   109da:	d321      	bcc.n	10a20 <z_init_static_threads+0xa8>
}
   109dc:	b006      	add	sp, #24
   109de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   109e2:	f000 bd19 	b.w	11418 <k_sched_unlock>
		z_setup_new_thread(
   109e6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   109ea:	9305      	str	r3, [sp, #20]
   109ec:	f854 3c10 	ldr.w	r3, [r4, #-16]
   109f0:	9304      	str	r3, [sp, #16]
   109f2:	f854 3c14 	ldr.w	r3, [r4, #-20]
   109f6:	9303      	str	r3, [sp, #12]
   109f8:	f854 3c18 	ldr.w	r3, [r4, #-24]
   109fc:	9302      	str	r3, [sp, #8]
   109fe:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   10a02:	9301      	str	r3, [sp, #4]
   10a04:	f854 3c20 	ldr.w	r3, [r4, #-32]
   10a08:	9300      	str	r3, [sp, #0]
   10a0a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   10a0e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   10a12:	f7ff ff5d 	bl	108d0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   10a16:	f854 3c30 	ldr.w	r3, [r4, #-48]
   10a1a:	655d      	str	r5, [r3, #84]	; 0x54
   10a1c:	4625      	mov	r5, r4
   10a1e:	e7b3      	b.n	10988 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   10a20:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10a22:	1c5a      	adds	r2, r3, #1
   10a24:	d00f      	beq.n	10a46 <z_init_static_threads+0xce>
   10a26:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   10a2a:	4640      	mov	r0, r8
   10a2c:	4649      	mov	r1, r9
					    K_MSEC(thread_data->init_delay));
   10a2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10a32:	fbc2 0103 	smlal	r0, r1, r2, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   10a36:	4549      	cmp	r1, r9
   10a38:	bf08      	it	eq
   10a3a:	4540      	cmpeq	r0, r8
			schedule_new_thread(thread_data->init_thread,
   10a3c:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   10a3e:	d104      	bne.n	10a4a <z_init_static_threads+0xd2>
	z_sched_start(thread);
   10a40:	4638      	mov	r0, r7
   10a42:	f000 fe87 	bl	11754 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   10a46:	3430      	adds	r4, #48	; 0x30
   10a48:	e7b9      	b.n	109be <z_init_static_threads+0x46>
   10a4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10a4e:	2300      	movs	r3, #0
   10a50:	f7ef fbf4 	bl	23c <__aeabi_uldivmod>
   10a54:	4602      	mov	r2, r0
   10a56:	460b      	mov	r3, r1

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   10a58:	f107 0018 	add.w	r0, r7, #24
   10a5c:	4905      	ldr	r1, [pc, #20]	; (10a74 <z_init_static_threads+0xfc>)
   10a5e:	f001 fa1f 	bl	11ea0 <z_add_timeout>
   10a62:	e7f0      	b.n	10a46 <z_init_static_threads+0xce>
   10a64:	2000011c 	.word	0x2000011c
   10a68:	2000011c 	.word	0x2000011c
   10a6c:	00017e72 	.word	0x00017e72
   10a70:	00018d12 	.word	0x00018d12
   10a74:	000117d9 	.word	0x000117d9

00010a78 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   10a78:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   10a7a:	b138      	cbz	r0, 10a8c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   10a7c:	4b04      	ldr	r3, [pc, #16]	; (10a90 <z_spin_lock_valid+0x18>)
   10a7e:	f000 0003 	and.w	r0, r0, #3
   10a82:	7d1b      	ldrb	r3, [r3, #20]
   10a84:	1ac0      	subs	r0, r0, r3
   10a86:	bf18      	it	ne
   10a88:	2001      	movne	r0, #1
   10a8a:	4770      	bx	lr
			return false;
		}
	}
	return true;
   10a8c:	2001      	movs	r0, #1
}
   10a8e:	4770      	bx	lr
   10a90:	20000c30 	.word	0x20000c30

00010a94 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   10a94:	4905      	ldr	r1, [pc, #20]	; (10aac <z_spin_unlock_valid+0x18>)
{
   10a96:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   10a98:	688a      	ldr	r2, [r1, #8]
   10a9a:	7d08      	ldrb	r0, [r1, #20]
   10a9c:	6819      	ldr	r1, [r3, #0]
   10a9e:	4302      	orrs	r2, r0
   10aa0:	2000      	movs	r0, #0
   10aa2:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   10aa4:	bf04      	itt	eq
   10aa6:	6018      	streq	r0, [r3, #0]
	return true;
   10aa8:	2001      	moveq	r0, #1
}
   10aaa:	4770      	bx	lr
   10aac:	20000c30 	.word	0x20000c30

00010ab0 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   10ab0:	4a02      	ldr	r2, [pc, #8]	; (10abc <z_spin_lock_set_owner+0xc>)
   10ab2:	7d11      	ldrb	r1, [r2, #20]
   10ab4:	6893      	ldr	r3, [r2, #8]
   10ab6:	430b      	orrs	r3, r1
   10ab8:	6003      	str	r3, [r0, #0]
}
   10aba:	4770      	bx	lr
   10abc:	20000c30 	.word	0x20000c30

00010ac0 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   10ac0:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   10ac2:	4c09      	ldr	r4, [pc, #36]	; (10ae8 <idle+0x28>)
	__asm__ volatile(
   10ac4:	f04f 0220 	mov.w	r2, #32
   10ac8:	f3ef 8311 	mrs	r3, BASEPRI
   10acc:	f382 8811 	msr	BASEPRI, r2
   10ad0:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   10ad4:	f001 fada 	bl	1208c <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   10ad8:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   10ada:	f7fd fb25 	bl	e128 <pm_system_suspend>
   10ade:	2800      	cmp	r0, #0
   10ae0:	d1f0      	bne.n	10ac4 <idle+0x4>
	arch_cpu_idle();
   10ae2:	f7fe fa4d 	bl	ef80 <arch_cpu_idle>
}
   10ae6:	e7ed      	b.n	10ac4 <idle+0x4>
   10ae8:	20000c30 	.word	0x20000c30

00010aec <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   10aec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   10af0:	4604      	mov	r4, r0
   10af2:	4616      	mov	r6, r2
   10af4:	461f      	mov	r7, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   10af6:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   10afa:	b143      	cbz	r3, 10b0e <z_impl_k_mutex_lock+0x22>
   10afc:	495f      	ldr	r1, [pc, #380]	; (10c7c <z_impl_k_mutex_lock+0x190>)
   10afe:	4860      	ldr	r0, [pc, #384]	; (10c80 <z_impl_k_mutex_lock+0x194>)
   10b00:	2265      	movs	r2, #101	; 0x65
   10b02:	f004 fa43 	bl	14f8c <printk>
   10b06:	2165      	movs	r1, #101	; 0x65
   10b08:	485c      	ldr	r0, [pc, #368]	; (10c7c <z_impl_k_mutex_lock+0x190>)
   10b0a:	f004 fb0b 	bl	15124 <assert_post_action>
   10b0e:	f04f 0320 	mov.w	r3, #32
   10b12:	f3ef 8811 	mrs	r8, BASEPRI
   10b16:	f383 8811 	msr	BASEPRI, r3
   10b1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10b1e:	4859      	ldr	r0, [pc, #356]	; (10c84 <z_impl_k_mutex_lock+0x198>)
   10b20:	f7ff ffaa 	bl	10a78 <z_spin_lock_valid>
   10b24:	b940      	cbnz	r0, 10b38 <z_impl_k_mutex_lock+0x4c>
   10b26:	4958      	ldr	r1, [pc, #352]	; (10c88 <z_impl_k_mutex_lock+0x19c>)
   10b28:	4855      	ldr	r0, [pc, #340]	; (10c80 <z_impl_k_mutex_lock+0x194>)
   10b2a:	2281      	movs	r2, #129	; 0x81
   10b2c:	f004 fa2e 	bl	14f8c <printk>
   10b30:	2181      	movs	r1, #129	; 0x81
   10b32:	4855      	ldr	r0, [pc, #340]	; (10c88 <z_impl_k_mutex_lock+0x19c>)
   10b34:	f004 faf6 	bl	15124 <assert_post_action>
	z_spin_lock_set_owner(l);
   10b38:	4852      	ldr	r0, [pc, #328]	; (10c84 <z_impl_k_mutex_lock+0x198>)
   10b3a:	f7ff ffb9 	bl	10ab0 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   10b3e:	68e3      	ldr	r3, [r4, #12]
   10b40:	4a52      	ldr	r2, [pc, #328]	; (10c8c <z_impl_k_mutex_lock+0x1a0>)
   10b42:	b1d3      	cbz	r3, 10b7a <z_impl_k_mutex_lock+0x8e>
   10b44:	68a0      	ldr	r0, [r4, #8]
   10b46:	6891      	ldr	r1, [r2, #8]
   10b48:	4288      	cmp	r0, r1
   10b4a:	d033      	beq.n	10bb4 <z_impl_k_mutex_lock+0xc8>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   10b4c:	ea56 0307 	orrs.w	r3, r6, r7
   10b50:	d132      	bne.n	10bb8 <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10b52:	484c      	ldr	r0, [pc, #304]	; (10c84 <z_impl_k_mutex_lock+0x198>)
   10b54:	f7ff ff9e 	bl	10a94 <z_spin_unlock_valid>
   10b58:	b940      	cbnz	r0, 10b6c <z_impl_k_mutex_lock+0x80>
   10b5a:	494b      	ldr	r1, [pc, #300]	; (10c88 <z_impl_k_mutex_lock+0x19c>)
   10b5c:	4848      	ldr	r0, [pc, #288]	; (10c80 <z_impl_k_mutex_lock+0x194>)
   10b5e:	22ac      	movs	r2, #172	; 0xac
   10b60:	f004 fa14 	bl	14f8c <printk>
   10b64:	21ac      	movs	r1, #172	; 0xac
   10b66:	4848      	ldr	r0, [pc, #288]	; (10c88 <z_impl_k_mutex_lock+0x19c>)
   10b68:	f004 fadc 	bl	15124 <assert_post_action>
	__asm__ volatile(
   10b6c:	f388 8811 	msr	BASEPRI, r8
   10b70:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   10b74:	f06f 000f 	mvn.w	r0, #15
   10b78:	e019      	b.n	10bae <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   10b7a:	6891      	ldr	r1, [r2, #8]
   10b7c:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   10b80:	3301      	adds	r3, #1
   10b82:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   10b84:	6893      	ldr	r3, [r2, #8]
   10b86:	483f      	ldr	r0, [pc, #252]	; (10c84 <z_impl_k_mutex_lock+0x198>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   10b88:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   10b8a:	60a3      	str	r3, [r4, #8]
   10b8c:	f7ff ff82 	bl	10a94 <z_spin_unlock_valid>
   10b90:	b940      	cbnz	r0, 10ba4 <z_impl_k_mutex_lock+0xb8>
   10b92:	493d      	ldr	r1, [pc, #244]	; (10c88 <z_impl_k_mutex_lock+0x19c>)
   10b94:	483a      	ldr	r0, [pc, #232]	; (10c80 <z_impl_k_mutex_lock+0x194>)
   10b96:	22ac      	movs	r2, #172	; 0xac
   10b98:	f004 f9f8 	bl	14f8c <printk>
   10b9c:	21ac      	movs	r1, #172	; 0xac
   10b9e:	483a      	ldr	r0, [pc, #232]	; (10c88 <z_impl_k_mutex_lock+0x19c>)
   10ba0:	f004 fac0 	bl	15124 <assert_post_action>
   10ba4:	f388 8811 	msr	BASEPRI, r8
   10ba8:	f3bf 8f6f 	isb	sy
		return 0;
   10bac:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   10bae:	b002      	add	sp, #8
   10bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   10bb4:	6921      	ldr	r1, [r4, #16]
   10bb6:	e7e3      	b.n	10b80 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   10bb8:	f990 300e 	ldrsb.w	r3, [r0, #14]
   10bbc:	f991 100e 	ldrsb.w	r1, [r1, #14]
   10bc0:	4299      	cmp	r1, r3
   10bc2:	bfa8      	it	ge
   10bc4:	4619      	movge	r1, r3
   10bc6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   10bca:	428b      	cmp	r3, r1
   10bcc:	dd3c      	ble.n	10c48 <z_impl_k_mutex_lock+0x15c>
		return z_set_prio(mutex->owner, new_prio);
   10bce:	f000 fe4b 	bl	11868 <z_set_prio>
   10bd2:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   10bd4:	4622      	mov	r2, r4
   10bd6:	4641      	mov	r1, r8
   10bd8:	e9cd 6700 	strd	r6, r7, [sp]
   10bdc:	4829      	ldr	r0, [pc, #164]	; (10c84 <z_impl_k_mutex_lock+0x198>)
   10bde:	f000 fb9d 	bl	1131c <z_pend_curr>
	if (got_mutex == 0) {
   10be2:	2800      	cmp	r0, #0
   10be4:	d0e3      	beq.n	10bae <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   10be6:	f04f 0320 	mov.w	r3, #32
   10bea:	f3ef 8611 	mrs	r6, BASEPRI
   10bee:	f383 8811 	msr	BASEPRI, r3
   10bf2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10bf6:	4823      	ldr	r0, [pc, #140]	; (10c84 <z_impl_k_mutex_lock+0x198>)
   10bf8:	f7ff ff3e 	bl	10a78 <z_spin_lock_valid>
   10bfc:	b940      	cbnz	r0, 10c10 <z_impl_k_mutex_lock+0x124>
   10bfe:	4922      	ldr	r1, [pc, #136]	; (10c88 <z_impl_k_mutex_lock+0x19c>)
   10c00:	481f      	ldr	r0, [pc, #124]	; (10c80 <z_impl_k_mutex_lock+0x194>)
   10c02:	2281      	movs	r2, #129	; 0x81
   10c04:	f004 f9c2 	bl	14f8c <printk>
   10c08:	2181      	movs	r1, #129	; 0x81
   10c0a:	481f      	ldr	r0, [pc, #124]	; (10c88 <z_impl_k_mutex_lock+0x19c>)
   10c0c:	f004 fa8a 	bl	15124 <assert_post_action>
	z_spin_lock_set_owner(l);
   10c10:	481c      	ldr	r0, [pc, #112]	; (10c84 <z_impl_k_mutex_lock+0x198>)
   10c12:	f7ff ff4d 	bl	10ab0 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   10c16:	6823      	ldr	r3, [r4, #0]
   10c18:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10c1a:	429c      	cmp	r4, r3
   10c1c:	d007      	beq.n	10c2e <z_impl_k_mutex_lock+0x142>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   10c1e:	b133      	cbz	r3, 10c2e <z_impl_k_mutex_lock+0x142>
   10c20:	f993 300e 	ldrsb.w	r3, [r3, #14]
   10c24:	4299      	cmp	r1, r3
   10c26:	bfa8      	it	ge
   10c28:	4619      	movge	r1, r3
   10c2a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   10c2e:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   10c30:	f990 300e 	ldrsb.w	r3, [r0, #14]
   10c34:	4299      	cmp	r1, r3
   10c36:	d109      	bne.n	10c4c <z_impl_k_mutex_lock+0x160>
	if (resched) {
   10c38:	b16d      	cbz	r5, 10c56 <z_impl_k_mutex_lock+0x16a>
		z_reschedule(&lock, key);
   10c3a:	4631      	mov	r1, r6
   10c3c:	4811      	ldr	r0, [pc, #68]	; (10c84 <z_impl_k_mutex_lock+0x198>)
   10c3e:	f000 f9cd 	bl	10fdc <z_reschedule>
	return -EAGAIN;
   10c42:	f06f 000a 	mvn.w	r0, #10
   10c46:	e7b2      	b.n	10bae <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   10c48:	2500      	movs	r5, #0
   10c4a:	e7c3      	b.n	10bd4 <z_impl_k_mutex_lock+0xe8>
		return z_set_prio(mutex->owner, new_prio);
   10c4c:	f000 fe0c 	bl	11868 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   10c50:	2800      	cmp	r0, #0
   10c52:	d1f2      	bne.n	10c3a <z_impl_k_mutex_lock+0x14e>
   10c54:	e7f0      	b.n	10c38 <z_impl_k_mutex_lock+0x14c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10c56:	480b      	ldr	r0, [pc, #44]	; (10c84 <z_impl_k_mutex_lock+0x198>)
   10c58:	f7ff ff1c 	bl	10a94 <z_spin_unlock_valid>
   10c5c:	b940      	cbnz	r0, 10c70 <z_impl_k_mutex_lock+0x184>
   10c5e:	490a      	ldr	r1, [pc, #40]	; (10c88 <z_impl_k_mutex_lock+0x19c>)
   10c60:	4807      	ldr	r0, [pc, #28]	; (10c80 <z_impl_k_mutex_lock+0x194>)
   10c62:	22ac      	movs	r2, #172	; 0xac
   10c64:	f004 f992 	bl	14f8c <printk>
   10c68:	21ac      	movs	r1, #172	; 0xac
   10c6a:	4807      	ldr	r0, [pc, #28]	; (10c88 <z_impl_k_mutex_lock+0x19c>)
   10c6c:	f004 fa5a 	bl	15124 <assert_post_action>
	__asm__ volatile(
   10c70:	f386 8811 	msr	BASEPRI, r6
   10c74:	f3bf 8f6f 	isb	sy
   10c78:	e7e3      	b.n	10c42 <z_impl_k_mutex_lock+0x156>
   10c7a:	bf00      	nop
   10c7c:	00018d35 	.word	0x00018d35
   10c80:	00017e72 	.word	0x00017e72
   10c84:	20000c60 	.word	0x20000c60
   10c88:	00017eac 	.word	0x00017eac
   10c8c:	20000c30 	.word	0x20000c30

00010c90 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   10c90:	b538      	push	{r3, r4, r5, lr}
   10c92:	4604      	mov	r4, r0
   10c94:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   10c98:	b143      	cbz	r3, 10cac <z_impl_k_mutex_unlock+0x1c>
   10c9a:	4945      	ldr	r1, [pc, #276]	; (10db0 <z_impl_k_mutex_unlock+0x120>)
   10c9c:	4845      	ldr	r0, [pc, #276]	; (10db4 <z_impl_k_mutex_unlock+0x124>)
   10c9e:	22c7      	movs	r2, #199	; 0xc7
   10ca0:	f004 f974 	bl	14f8c <printk>
   10ca4:	21c7      	movs	r1, #199	; 0xc7
   10ca6:	4842      	ldr	r0, [pc, #264]	; (10db0 <z_impl_k_mutex_unlock+0x120>)
   10ca8:	f004 fa3c 	bl	15124 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   10cac:	68a3      	ldr	r3, [r4, #8]
   10cae:	2b00      	cmp	r3, #0
   10cb0:	d078      	beq.n	10da4 <z_impl_k_mutex_unlock+0x114>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   10cb2:	4d41      	ldr	r5, [pc, #260]	; (10db8 <z_impl_k_mutex_unlock+0x128>)
   10cb4:	68aa      	ldr	r2, [r5, #8]
   10cb6:	4293      	cmp	r3, r2
   10cb8:	d177      	bne.n	10daa <z_impl_k_mutex_unlock+0x11a>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   10cba:	68e3      	ldr	r3, [r4, #12]
   10cbc:	b943      	cbnz	r3, 10cd0 <z_impl_k_mutex_unlock+0x40>
   10cbe:	493c      	ldr	r1, [pc, #240]	; (10db0 <z_impl_k_mutex_unlock+0x120>)
   10cc0:	483c      	ldr	r0, [pc, #240]	; (10db4 <z_impl_k_mutex_unlock+0x124>)
   10cc2:	22df      	movs	r2, #223	; 0xdf
   10cc4:	f004 f962 	bl	14f8c <printk>
   10cc8:	21df      	movs	r1, #223	; 0xdf
   10cca:	4839      	ldr	r0, [pc, #228]	; (10db0 <z_impl_k_mutex_unlock+0x120>)
   10ccc:	f004 fa2a 	bl	15124 <assert_post_action>
   10cd0:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   10cd4:	b143      	cbz	r3, 10ce8 <z_impl_k_mutex_unlock+0x58>
   10cd6:	4939      	ldr	r1, [pc, #228]	; (10dbc <z_impl_k_mutex_unlock+0x12c>)
   10cd8:	4836      	ldr	r0, [pc, #216]	; (10db4 <z_impl_k_mutex_unlock+0x124>)
   10cda:	22fe      	movs	r2, #254	; 0xfe
   10cdc:	f004 f956 	bl	14f8c <printk>
   10ce0:	21fe      	movs	r1, #254	; 0xfe
   10ce2:	4836      	ldr	r0, [pc, #216]	; (10dbc <z_impl_k_mutex_unlock+0x12c>)
   10ce4:	f004 fa1e 	bl	15124 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   10ce8:	68ab      	ldr	r3, [r5, #8]
   10cea:	7bdb      	ldrb	r3, [r3, #15]
   10cec:	2b01      	cmp	r3, #1
   10cee:	d108      	bne.n	10d02 <z_impl_k_mutex_unlock+0x72>
   10cf0:	4932      	ldr	r1, [pc, #200]	; (10dbc <z_impl_k_mutex_unlock+0x12c>)
   10cf2:	4830      	ldr	r0, [pc, #192]	; (10db4 <z_impl_k_mutex_unlock+0x124>)
   10cf4:	22ff      	movs	r2, #255	; 0xff
   10cf6:	f004 f949 	bl	14f8c <printk>
   10cfa:	21ff      	movs	r1, #255	; 0xff
   10cfc:	482f      	ldr	r0, [pc, #188]	; (10dbc <z_impl_k_mutex_unlock+0x12c>)
   10cfe:	f004 fa11 	bl	15124 <assert_post_action>

	--_current->base.sched_locked;
   10d02:	68aa      	ldr	r2, [r5, #8]
   10d04:	7bd3      	ldrb	r3, [r2, #15]
   10d06:	3b01      	subs	r3, #1
   10d08:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   10d0a:	68e3      	ldr	r3, [r4, #12]
   10d0c:	2b01      	cmp	r3, #1
   10d0e:	d005      	beq.n	10d1c <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count--;
   10d10:	3b01      	subs	r3, #1
   10d12:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   10d14:	f000 fb80 	bl	11418 <k_sched_unlock>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   10d18:	2000      	movs	r0, #0
}
   10d1a:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   10d1c:	f04f 0320 	mov.w	r3, #32
   10d20:	f3ef 8511 	mrs	r5, BASEPRI
   10d24:	f383 8811 	msr	BASEPRI, r3
   10d28:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10d2c:	4824      	ldr	r0, [pc, #144]	; (10dc0 <z_impl_k_mutex_unlock+0x130>)
   10d2e:	f7ff fea3 	bl	10a78 <z_spin_lock_valid>
   10d32:	b940      	cbnz	r0, 10d46 <z_impl_k_mutex_unlock+0xb6>
   10d34:	4923      	ldr	r1, [pc, #140]	; (10dc4 <z_impl_k_mutex_unlock+0x134>)
   10d36:	481f      	ldr	r0, [pc, #124]	; (10db4 <z_impl_k_mutex_unlock+0x124>)
   10d38:	2281      	movs	r2, #129	; 0x81
   10d3a:	f004 f927 	bl	14f8c <printk>
   10d3e:	2181      	movs	r1, #129	; 0x81
   10d40:	4820      	ldr	r0, [pc, #128]	; (10dc4 <z_impl_k_mutex_unlock+0x134>)
   10d42:	f004 f9ef 	bl	15124 <assert_post_action>
	z_spin_lock_set_owner(l);
   10d46:	481e      	ldr	r0, [pc, #120]	; (10dc0 <z_impl_k_mutex_unlock+0x130>)
   10d48:	f7ff feb2 	bl	10ab0 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   10d4c:	68a0      	ldr	r0, [r4, #8]
   10d4e:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   10d50:	f990 300e 	ldrsb.w	r3, [r0, #14]
   10d54:	4299      	cmp	r1, r3
   10d56:	d001      	beq.n	10d5c <z_impl_k_mutex_unlock+0xcc>
		return z_set_prio(mutex->owner, new_prio);
   10d58:	f000 fd86 	bl	11868 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   10d5c:	4620      	mov	r0, r4
   10d5e:	f000 fe0d 	bl	1197c <z_unpend_first_thread>
	mutex->owner = new_owner;
   10d62:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   10d64:	b158      	cbz	r0, 10d7e <z_impl_k_mutex_unlock+0xee>
		mutex->owner_orig_prio = new_owner->base.prio;
   10d66:	f990 200e 	ldrsb.w	r2, [r0, #14]
   10d6a:	6122      	str	r2, [r4, #16]
   10d6c:	2200      	movs	r2, #0
   10d6e:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
   10d70:	f000 fcba 	bl	116e8 <z_ready_thread>
		z_reschedule(&lock, key);
   10d74:	4629      	mov	r1, r5
   10d76:	4812      	ldr	r0, [pc, #72]	; (10dc0 <z_impl_k_mutex_unlock+0x130>)
   10d78:	f000 f930 	bl	10fdc <z_reschedule>
   10d7c:	e7ca      	b.n	10d14 <z_impl_k_mutex_unlock+0x84>
		mutex->lock_count = 0U;
   10d7e:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10d80:	480f      	ldr	r0, [pc, #60]	; (10dc0 <z_impl_k_mutex_unlock+0x130>)
   10d82:	f7ff fe87 	bl	10a94 <z_spin_unlock_valid>
   10d86:	b940      	cbnz	r0, 10d9a <z_impl_k_mutex_unlock+0x10a>
   10d88:	490e      	ldr	r1, [pc, #56]	; (10dc4 <z_impl_k_mutex_unlock+0x134>)
   10d8a:	480a      	ldr	r0, [pc, #40]	; (10db4 <z_impl_k_mutex_unlock+0x124>)
   10d8c:	22ac      	movs	r2, #172	; 0xac
   10d8e:	f004 f8fd 	bl	14f8c <printk>
   10d92:	21ac      	movs	r1, #172	; 0xac
   10d94:	480b      	ldr	r0, [pc, #44]	; (10dc4 <z_impl_k_mutex_unlock+0x134>)
   10d96:	f004 f9c5 	bl	15124 <assert_post_action>
	__asm__ volatile(
   10d9a:	f385 8811 	msr	BASEPRI, r5
   10d9e:	f3bf 8f6f 	isb	sy
   10da2:	e7b7      	b.n	10d14 <z_impl_k_mutex_unlock+0x84>
		return -EINVAL;
   10da4:	f06f 0015 	mvn.w	r0, #21
   10da8:	e7b7      	b.n	10d1a <z_impl_k_mutex_unlock+0x8a>
		return -EPERM;
   10daa:	f04f 30ff 	mov.w	r0, #4294967295
   10dae:	e7b4      	b.n	10d1a <z_impl_k_mutex_unlock+0x8a>
   10db0:	00018d35 	.word	0x00018d35
   10db4:	00017e72 	.word	0x00017e72
   10db8:	20000c30 	.word	0x20000c30
   10dbc:	00018d57 	.word	0x00018d57
   10dc0:	20000c60 	.word	0x20000c60
   10dc4:	00017eac 	.word	0x00017eac

00010dc8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   10dc8:	b538      	push	{r3, r4, r5, lr}
   10dca:	4604      	mov	r4, r0
	__asm__ volatile(
   10dcc:	f04f 0320 	mov.w	r3, #32
   10dd0:	f3ef 8511 	mrs	r5, BASEPRI
   10dd4:	f383 8811 	msr	BASEPRI, r3
   10dd8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10ddc:	4812      	ldr	r0, [pc, #72]	; (10e28 <z_impl_k_sem_give+0x60>)
   10dde:	f7ff fe4b 	bl	10a78 <z_spin_lock_valid>
   10de2:	b940      	cbnz	r0, 10df6 <z_impl_k_sem_give+0x2e>
   10de4:	4911      	ldr	r1, [pc, #68]	; (10e2c <z_impl_k_sem_give+0x64>)
   10de6:	4812      	ldr	r0, [pc, #72]	; (10e30 <z_impl_k_sem_give+0x68>)
   10de8:	2281      	movs	r2, #129	; 0x81
   10dea:	f004 f8cf 	bl	14f8c <printk>
   10dee:	2181      	movs	r1, #129	; 0x81
   10df0:	480e      	ldr	r0, [pc, #56]	; (10e2c <z_impl_k_sem_give+0x64>)
   10df2:	f004 f997 	bl	15124 <assert_post_action>
	z_spin_lock_set_owner(l);
   10df6:	480c      	ldr	r0, [pc, #48]	; (10e28 <z_impl_k_sem_give+0x60>)
   10df8:	f7ff fe5a 	bl	10ab0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   10dfc:	4620      	mov	r0, r4
   10dfe:	f000 fdbd 	bl	1197c <z_unpend_first_thread>

	if (thread != NULL) {
   10e02:	b148      	cbz	r0, 10e18 <z_impl_k_sem_give+0x50>
   10e04:	2200      	movs	r2, #0
   10e06:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   10e08:	f000 fc6e 	bl	116e8 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   10e0c:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   10e0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   10e12:	4805      	ldr	r0, [pc, #20]	; (10e28 <z_impl_k_sem_give+0x60>)
   10e14:	f000 b8e2 	b.w	10fdc <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   10e18:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   10e1c:	429a      	cmp	r2, r3
   10e1e:	bf18      	it	ne
   10e20:	3301      	addne	r3, #1
   10e22:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
   10e24:	e7f2      	b.n	10e0c <z_impl_k_sem_give+0x44>
   10e26:	bf00      	nop
   10e28:	20000c64 	.word	0x20000c64
   10e2c:	00017eac 	.word	0x00017eac
   10e30:	00017e72 	.word	0x00017e72

00010e34 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   10e34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10e36:	4604      	mov	r4, r0
   10e38:	4616      	mov	r6, r2
   10e3a:	461f      	mov	r7, r3
   10e3c:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   10e40:	b15b      	cbz	r3, 10e5a <z_impl_k_sem_take+0x26>
   10e42:	ea56 0307 	orrs.w	r3, r6, r7
   10e46:	d008      	beq.n	10e5a <z_impl_k_sem_take+0x26>
   10e48:	492b      	ldr	r1, [pc, #172]	; (10ef8 <z_impl_k_sem_take+0xc4>)
   10e4a:	482c      	ldr	r0, [pc, #176]	; (10efc <z_impl_k_sem_take+0xc8>)
   10e4c:	2279      	movs	r2, #121	; 0x79
   10e4e:	f004 f89d 	bl	14f8c <printk>
   10e52:	2179      	movs	r1, #121	; 0x79
   10e54:	4828      	ldr	r0, [pc, #160]	; (10ef8 <z_impl_k_sem_take+0xc4>)
   10e56:	f004 f965 	bl	15124 <assert_post_action>
   10e5a:	f04f 0320 	mov.w	r3, #32
   10e5e:	f3ef 8511 	mrs	r5, BASEPRI
   10e62:	f383 8811 	msr	BASEPRI, r3
   10e66:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10e6a:	4825      	ldr	r0, [pc, #148]	; (10f00 <z_impl_k_sem_take+0xcc>)
   10e6c:	f7ff fe04 	bl	10a78 <z_spin_lock_valid>
   10e70:	b940      	cbnz	r0, 10e84 <z_impl_k_sem_take+0x50>
   10e72:	4924      	ldr	r1, [pc, #144]	; (10f04 <z_impl_k_sem_take+0xd0>)
   10e74:	4821      	ldr	r0, [pc, #132]	; (10efc <z_impl_k_sem_take+0xc8>)
   10e76:	2281      	movs	r2, #129	; 0x81
   10e78:	f004 f888 	bl	14f8c <printk>
   10e7c:	2181      	movs	r1, #129	; 0x81
   10e7e:	4821      	ldr	r0, [pc, #132]	; (10f04 <z_impl_k_sem_take+0xd0>)
   10e80:	f004 f950 	bl	15124 <assert_post_action>
	z_spin_lock_set_owner(l);
   10e84:	481e      	ldr	r0, [pc, #120]	; (10f00 <z_impl_k_sem_take+0xcc>)
   10e86:	f7ff fe13 	bl	10ab0 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   10e8a:	68a3      	ldr	r3, [r4, #8]
   10e8c:	b1ab      	cbz	r3, 10eba <z_impl_k_sem_take+0x86>
		sem->count--;
   10e8e:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10e90:	481b      	ldr	r0, [pc, #108]	; (10f00 <z_impl_k_sem_take+0xcc>)
   10e92:	60a3      	str	r3, [r4, #8]
   10e94:	f7ff fdfe 	bl	10a94 <z_spin_unlock_valid>
   10e98:	b940      	cbnz	r0, 10eac <z_impl_k_sem_take+0x78>
   10e9a:	491a      	ldr	r1, [pc, #104]	; (10f04 <z_impl_k_sem_take+0xd0>)
   10e9c:	4817      	ldr	r0, [pc, #92]	; (10efc <z_impl_k_sem_take+0xc8>)
   10e9e:	22ac      	movs	r2, #172	; 0xac
   10ea0:	f004 f874 	bl	14f8c <printk>
   10ea4:	21ac      	movs	r1, #172	; 0xac
   10ea6:	4817      	ldr	r0, [pc, #92]	; (10f04 <z_impl_k_sem_take+0xd0>)
   10ea8:	f004 f93c 	bl	15124 <assert_post_action>
	__asm__ volatile(
   10eac:	f385 8811 	msr	BASEPRI, r5
   10eb0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   10eb4:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   10eb6:	b003      	add	sp, #12
   10eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   10eba:	ea56 0307 	orrs.w	r3, r6, r7
   10ebe:	d113      	bne.n	10ee8 <z_impl_k_sem_take+0xb4>
   10ec0:	480f      	ldr	r0, [pc, #60]	; (10f00 <z_impl_k_sem_take+0xcc>)
   10ec2:	f7ff fde7 	bl	10a94 <z_spin_unlock_valid>
   10ec6:	b940      	cbnz	r0, 10eda <z_impl_k_sem_take+0xa6>
   10ec8:	490e      	ldr	r1, [pc, #56]	; (10f04 <z_impl_k_sem_take+0xd0>)
   10eca:	480c      	ldr	r0, [pc, #48]	; (10efc <z_impl_k_sem_take+0xc8>)
   10ecc:	22ac      	movs	r2, #172	; 0xac
   10ece:	f004 f85d 	bl	14f8c <printk>
   10ed2:	21ac      	movs	r1, #172	; 0xac
   10ed4:	480b      	ldr	r0, [pc, #44]	; (10f04 <z_impl_k_sem_take+0xd0>)
   10ed6:	f004 f925 	bl	15124 <assert_post_action>
   10eda:	f385 8811 	msr	BASEPRI, r5
   10ede:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   10ee2:	f06f 000f 	mvn.w	r0, #15
   10ee6:	e7e6      	b.n	10eb6 <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   10ee8:	4622      	mov	r2, r4
   10eea:	4629      	mov	r1, r5
   10eec:	e9cd 6700 	strd	r6, r7, [sp]
   10ef0:	4803      	ldr	r0, [pc, #12]	; (10f00 <z_impl_k_sem_take+0xcc>)
   10ef2:	f000 fa13 	bl	1131c <z_pend_curr>
	return ret;
   10ef6:	e7de      	b.n	10eb6 <z_impl_k_sem_take+0x82>
   10ef8:	00018d82 	.word	0x00018d82
   10efc:	00017e72 	.word	0x00017e72
   10f00:	20000c64 	.word	0x20000c64
   10f04:	00017eac 	.word	0x00017eac

00010f08 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   10f08:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   10f0a:	4c08      	ldr	r4, [pc, #32]	; (10f2c <z_reset_time_slice+0x24>)
   10f0c:	6823      	ldr	r3, [r4, #0]
   10f0e:	b15b      	cbz	r3, 10f28 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   10f10:	f7fd fc88 	bl	e824 <sys_clock_elapsed>
   10f14:	4603      	mov	r3, r0
   10f16:	6820      	ldr	r0, [r4, #0]
   10f18:	4a05      	ldr	r2, [pc, #20]	; (10f30 <z_reset_time_slice+0x28>)
   10f1a:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
   10f1c:	2100      	movs	r1, #0
	}
}
   10f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   10f22:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   10f24:	f001 b8e8 	b.w	120f8 <z_set_timeout_expiry>
}
   10f28:	bd10      	pop	{r4, pc}
   10f2a:	bf00      	nop
   10f2c:	20000c74 	.word	0x20000c74
   10f30:	20000c30 	.word	0x20000c30

00010f34 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   10f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10f36:	4604      	mov	r4, r0
   10f38:	460d      	mov	r5, r1
	__asm__ volatile(
   10f3a:	f04f 0320 	mov.w	r3, #32
   10f3e:	f3ef 8611 	mrs	r6, BASEPRI
   10f42:	f383 8811 	msr	BASEPRI, r3
   10f46:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10f4a:	481e      	ldr	r0, [pc, #120]	; (10fc4 <k_sched_time_slice_set+0x90>)
   10f4c:	f7ff fd94 	bl	10a78 <z_spin_lock_valid>
   10f50:	b940      	cbnz	r0, 10f64 <k_sched_time_slice_set+0x30>
   10f52:	491d      	ldr	r1, [pc, #116]	; (10fc8 <k_sched_time_slice_set+0x94>)
   10f54:	481d      	ldr	r0, [pc, #116]	; (10fcc <k_sched_time_slice_set+0x98>)
   10f56:	2281      	movs	r2, #129	; 0x81
   10f58:	f004 f818 	bl	14f8c <printk>
   10f5c:	2181      	movs	r1, #129	; 0x81
   10f5e:	481a      	ldr	r0, [pc, #104]	; (10fc8 <k_sched_time_slice_set+0x94>)
   10f60:	f004 f8e0 	bl	15124 <assert_post_action>
	z_spin_lock_set_owner(l);
   10f64:	4817      	ldr	r0, [pc, #92]	; (10fc4 <k_sched_time_slice_set+0x90>)
   10f66:	f7ff fda3 	bl	10ab0 <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
   10f6a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   10f6e:	2200      	movs	r2, #0
   10f70:	f240 30e7 	movw	r0, #999	; 0x3e7
   10f74:	2100      	movs	r1, #0
   10f76:	4b16      	ldr	r3, [pc, #88]	; (10fd0 <k_sched_time_slice_set+0x9c>)
   10f78:	fbe7 0104 	umlal	r0, r1, r7, r4
   10f7c:	611a      	str	r2, [r3, #16]
   10f7e:	2300      	movs	r3, #0
   10f80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10f84:	f7ef f95a 	bl	23c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   10f88:	2c00      	cmp	r4, #0
   10f8a:	4b12      	ldr	r3, [pc, #72]	; (10fd4 <k_sched_time_slice_set+0xa0>)
   10f8c:	dc16      	bgt.n	10fbc <k_sched_time_slice_set+0x88>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   10f8e:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   10f90:	4b11      	ldr	r3, [pc, #68]	; (10fd8 <k_sched_time_slice_set+0xa4>)
   10f92:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   10f94:	f7ff ffb8 	bl	10f08 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10f98:	480a      	ldr	r0, [pc, #40]	; (10fc4 <k_sched_time_slice_set+0x90>)
   10f9a:	f7ff fd7b 	bl	10a94 <z_spin_unlock_valid>
   10f9e:	b940      	cbnz	r0, 10fb2 <k_sched_time_slice_set+0x7e>
   10fa0:	4909      	ldr	r1, [pc, #36]	; (10fc8 <k_sched_time_slice_set+0x94>)
   10fa2:	480a      	ldr	r0, [pc, #40]	; (10fcc <k_sched_time_slice_set+0x98>)
   10fa4:	22ac      	movs	r2, #172	; 0xac
   10fa6:	f003 fff1 	bl	14f8c <printk>
   10faa:	21ac      	movs	r1, #172	; 0xac
   10fac:	4806      	ldr	r0, [pc, #24]	; (10fc8 <k_sched_time_slice_set+0x94>)
   10fae:	f004 f8b9 	bl	15124 <assert_post_action>
	__asm__ volatile(
   10fb2:	f386 8811 	msr	BASEPRI, r6
   10fb6:	f3bf 8f6f 	isb	sy
	}
}
   10fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   10fbc:	2802      	cmp	r0, #2
   10fbe:	bfb8      	it	lt
   10fc0:	2002      	movlt	r0, #2
   10fc2:	e7e4      	b.n	10f8e <k_sched_time_slice_set+0x5a>
   10fc4:	20000c6c 	.word	0x20000c6c
   10fc8:	00017eac 	.word	0x00017eac
   10fcc:	00017e72 	.word	0x00017e72
   10fd0:	20000c30 	.word	0x20000c30
   10fd4:	20000c74 	.word	0x20000c74
   10fd8:	20000c70 	.word	0x20000c70

00010fdc <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   10fdc:	b510      	push	{r4, lr}
   10fde:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   10fe0:	460c      	mov	r4, r1
   10fe2:	b9c1      	cbnz	r1, 11016 <z_reschedule+0x3a>
   10fe4:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key.key) && need_swap()) {
   10fe8:	b9aa      	cbnz	r2, 11016 <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
   10fea:	4a14      	ldr	r2, [pc, #80]	; (1103c <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   10fec:	6a51      	ldr	r1, [r2, #36]	; 0x24
   10fee:	6892      	ldr	r2, [r2, #8]
   10ff0:	4291      	cmp	r1, r2
   10ff2:	d010      	beq.n	11016 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10ff4:	f7ff fd4e 	bl	10a94 <z_spin_unlock_valid>
   10ff8:	b940      	cbnz	r0, 1100c <z_reschedule+0x30>
   10ffa:	4911      	ldr	r1, [pc, #68]	; (11040 <z_reschedule+0x64>)
   10ffc:	4811      	ldr	r0, [pc, #68]	; (11044 <z_reschedule+0x68>)
   10ffe:	22c3      	movs	r2, #195	; 0xc3
   11000:	f003 ffc4 	bl	14f8c <printk>
   11004:	21c3      	movs	r1, #195	; 0xc3
   11006:	480e      	ldr	r0, [pc, #56]	; (11040 <z_reschedule+0x64>)
   11008:	f004 f88c 	bl	15124 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1100c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   11010:	2000      	movs	r0, #0
   11012:	f7fd bee5 	b.w	ede0 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11016:	4618      	mov	r0, r3
   11018:	f7ff fd3c 	bl	10a94 <z_spin_unlock_valid>
   1101c:	b940      	cbnz	r0, 11030 <z_reschedule+0x54>
   1101e:	4908      	ldr	r1, [pc, #32]	; (11040 <z_reschedule+0x64>)
   11020:	4808      	ldr	r0, [pc, #32]	; (11044 <z_reschedule+0x68>)
   11022:	22ac      	movs	r2, #172	; 0xac
   11024:	f003 ffb2 	bl	14f8c <printk>
   11028:	21ac      	movs	r1, #172	; 0xac
   1102a:	4805      	ldr	r0, [pc, #20]	; (11040 <z_reschedule+0x64>)
   1102c:	f004 f87a 	bl	15124 <assert_post_action>
   11030:	f384 8811 	msr	BASEPRI, r4
   11034:	f3bf 8f6f 	isb	sy
   11038:	bd10      	pop	{r4, pc}
   1103a:	bf00      	nop
   1103c:	20000c30 	.word	0x20000c30
   11040:	00017eac 	.word	0x00017eac
   11044:	00017e72 	.word	0x00017e72

00011048 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   11048:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1104a:	f04f 0320 	mov.w	r3, #32
   1104e:	f3ef 8511 	mrs	r5, BASEPRI
   11052:	f383 8811 	msr	BASEPRI, r3
   11056:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1105a:	4820      	ldr	r0, [pc, #128]	; (110dc <k_sched_lock+0x94>)
   1105c:	f7ff fd0c 	bl	10a78 <z_spin_lock_valid>
   11060:	b940      	cbnz	r0, 11074 <k_sched_lock+0x2c>
   11062:	491f      	ldr	r1, [pc, #124]	; (110e0 <k_sched_lock+0x98>)
   11064:	481f      	ldr	r0, [pc, #124]	; (110e4 <k_sched_lock+0x9c>)
   11066:	2281      	movs	r2, #129	; 0x81
   11068:	f003 ff90 	bl	14f8c <printk>
   1106c:	2181      	movs	r1, #129	; 0x81
   1106e:	481c      	ldr	r0, [pc, #112]	; (110e0 <k_sched_lock+0x98>)
   11070:	f004 f858 	bl	15124 <assert_post_action>
	z_spin_lock_set_owner(l);
   11074:	4819      	ldr	r0, [pc, #100]	; (110dc <k_sched_lock+0x94>)
   11076:	f7ff fd1b 	bl	10ab0 <z_spin_lock_set_owner>
   1107a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1107e:	b143      	cbz	r3, 11092 <k_sched_lock+0x4a>
   11080:	4919      	ldr	r1, [pc, #100]	; (110e8 <k_sched_lock+0xa0>)
   11082:	4818      	ldr	r0, [pc, #96]	; (110e4 <k_sched_lock+0x9c>)
   11084:	22fe      	movs	r2, #254	; 0xfe
   11086:	f003 ff81 	bl	14f8c <printk>
   1108a:	21fe      	movs	r1, #254	; 0xfe
   1108c:	4816      	ldr	r0, [pc, #88]	; (110e8 <k_sched_lock+0xa0>)
   1108e:	f004 f849 	bl	15124 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   11092:	4c16      	ldr	r4, [pc, #88]	; (110ec <k_sched_lock+0xa4>)
   11094:	68a2      	ldr	r2, [r4, #8]
   11096:	7bd2      	ldrb	r2, [r2, #15]
   11098:	2a01      	cmp	r2, #1
   1109a:	d108      	bne.n	110ae <k_sched_lock+0x66>
   1109c:	4912      	ldr	r1, [pc, #72]	; (110e8 <k_sched_lock+0xa0>)
   1109e:	4811      	ldr	r0, [pc, #68]	; (110e4 <k_sched_lock+0x9c>)
   110a0:	22ff      	movs	r2, #255	; 0xff
   110a2:	f003 ff73 	bl	14f8c <printk>
   110a6:	21ff      	movs	r1, #255	; 0xff
   110a8:	480f      	ldr	r0, [pc, #60]	; (110e8 <k_sched_lock+0xa0>)
   110aa:	f004 f83b 	bl	15124 <assert_post_action>
	--_current->base.sched_locked;
   110ae:	68a2      	ldr	r2, [r4, #8]
   110b0:	7bd3      	ldrb	r3, [r2, #15]
   110b2:	3b01      	subs	r3, #1
   110b4:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   110b6:	4809      	ldr	r0, [pc, #36]	; (110dc <k_sched_lock+0x94>)
   110b8:	f7ff fcec 	bl	10a94 <z_spin_unlock_valid>
   110bc:	b940      	cbnz	r0, 110d0 <k_sched_lock+0x88>
   110be:	4908      	ldr	r1, [pc, #32]	; (110e0 <k_sched_lock+0x98>)
   110c0:	4808      	ldr	r0, [pc, #32]	; (110e4 <k_sched_lock+0x9c>)
   110c2:	22ac      	movs	r2, #172	; 0xac
   110c4:	f003 ff62 	bl	14f8c <printk>
   110c8:	21ac      	movs	r1, #172	; 0xac
   110ca:	4805      	ldr	r0, [pc, #20]	; (110e0 <k_sched_lock+0x98>)
   110cc:	f004 f82a 	bl	15124 <assert_post_action>
	__asm__ volatile(
   110d0:	f385 8811 	msr	BASEPRI, r5
   110d4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   110d8:	bd38      	pop	{r3, r4, r5, pc}
   110da:	bf00      	nop
   110dc:	20000c6c 	.word	0x20000c6c
   110e0:	00017eac 	.word	0x00017eac
   110e4:	00017e72 	.word	0x00017e72
   110e8:	00018d57 	.word	0x00018d57
   110ec:	20000c30 	.word	0x20000c30

000110f0 <z_priq_dumb_remove>:
	sys_dlist_append(pq, &thread->base.qnode_dlist);
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   110f0:	4b0b      	ldr	r3, [pc, #44]	; (11120 <z_priq_dumb_remove+0x30>)
{
   110f2:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   110f4:	4299      	cmp	r1, r3
{
   110f6:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   110f8:	d10a      	bne.n	11110 <z_priq_dumb_remove+0x20>
   110fa:	490a      	ldr	r1, [pc, #40]	; (11124 <z_priq_dumb_remove+0x34>)
   110fc:	480a      	ldr	r0, [pc, #40]	; (11128 <z_priq_dumb_remove+0x38>)
   110fe:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   11102:	f003 ff43 	bl	14f8c <printk>
   11106:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   1110a:	4806      	ldr	r0, [pc, #24]	; (11124 <z_priq_dumb_remove+0x34>)
   1110c:	f004 f80a 	bl	15124 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   11110:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
   11114:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   11116:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   11118:	2300      	movs	r3, #0
	node->prev = NULL;
   1111a:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1111e:	bd10      	pop	{r4, pc}
   11120:	20000170 	.word	0x20000170
   11124:	00018da2 	.word	0x00018da2
   11128:	00017e72 	.word	0x00017e72

0001112c <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   1112c:	6883      	ldr	r3, [r0, #8]
{
   1112e:	b510      	push	{r4, lr}
   11130:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   11132:	b953      	cbnz	r3, 1114a <unpend_thread_no_timeout+0x1e>
   11134:	490a      	ldr	r1, [pc, #40]	; (11160 <unpend_thread_no_timeout+0x34>)
   11136:	480b      	ldr	r0, [pc, #44]	; (11164 <unpend_thread_no_timeout+0x38>)
   11138:	f240 224f 	movw	r2, #591	; 0x24f
   1113c:	f003 ff26 	bl	14f8c <printk>
   11140:	f240 214f 	movw	r1, #591	; 0x24f
   11144:	4806      	ldr	r0, [pc, #24]	; (11160 <unpend_thread_no_timeout+0x34>)
   11146:	f003 ffed 	bl	15124 <assert_post_action>
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1114a:	4621      	mov	r1, r4
   1114c:	68a0      	ldr	r0, [r4, #8]
   1114e:	f7ff ffcf 	bl	110f0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   11152:	7b63      	ldrb	r3, [r4, #13]
   11154:	f023 0302 	bic.w	r3, r3, #2
   11158:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1115a:	2300      	movs	r3, #0
   1115c:	60a3      	str	r3, [r4, #8]
}
   1115e:	bd10      	pop	{r4, pc}
   11160:	00018da2 	.word	0x00018da2
   11164:	00017e72 	.word	0x00017e72

00011168 <update_cache>:
{
   11168:	b538      	push	{r3, r4, r5, lr}
   1116a:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1116c:	4812      	ldr	r0, [pc, #72]	; (111b8 <update_cache+0x50>)
   1116e:	f004 faba 	bl	156e6 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   11172:	4d12      	ldr	r5, [pc, #72]	; (111bc <update_cache+0x54>)
   11174:	4604      	mov	r4, r0
   11176:	b900      	cbnz	r0, 1117a <update_cache+0x12>
   11178:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   1117a:	b9aa      	cbnz	r2, 111a8 <update_cache+0x40>
	__ASSERT(_current != NULL, "");
   1117c:	68ab      	ldr	r3, [r5, #8]
   1117e:	b943      	cbnz	r3, 11192 <update_cache+0x2a>
   11180:	490f      	ldr	r1, [pc, #60]	; (111c0 <update_cache+0x58>)
   11182:	4810      	ldr	r0, [pc, #64]	; (111c4 <update_cache+0x5c>)
   11184:	2285      	movs	r2, #133	; 0x85
   11186:	f003 ff01 	bl	14f8c <printk>
   1118a:	2185      	movs	r1, #133	; 0x85
   1118c:	480c      	ldr	r0, [pc, #48]	; (111c0 <update_cache+0x58>)
   1118e:	f003 ffc9 	bl	15124 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   11192:	68ab      	ldr	r3, [r5, #8]
   11194:	7b5a      	ldrb	r2, [r3, #13]
   11196:	06d2      	lsls	r2, r2, #27
   11198:	d106      	bne.n	111a8 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1119a:	69a2      	ldr	r2, [r4, #24]
   1119c:	b922      	cbnz	r2, 111a8 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   1119e:	89da      	ldrh	r2, [r3, #14]
   111a0:	2a7f      	cmp	r2, #127	; 0x7f
   111a2:	d901      	bls.n	111a8 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   111a4:	626b      	str	r3, [r5, #36]	; 0x24
}
   111a6:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   111a8:	68ab      	ldr	r3, [r5, #8]
   111aa:	42a3      	cmp	r3, r4
   111ac:	d001      	beq.n	111b2 <update_cache+0x4a>
			z_reset_time_slice();
   111ae:	f7ff feab 	bl	10f08 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   111b2:	626c      	str	r4, [r5, #36]	; 0x24
}
   111b4:	e7f7      	b.n	111a6 <update_cache+0x3e>
   111b6:	bf00      	nop
   111b8:	20000c58 	.word	0x20000c58
   111bc:	20000c30 	.word	0x20000c30
   111c0:	00018da2 	.word	0x00018da2
   111c4:	00017e72 	.word	0x00017e72

000111c8 <unready_thread>:
{
   111c8:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   111ca:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   111ce:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   111d0:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   111d2:	7b43      	ldrb	r3, [r0, #13]
   111d4:	da06      	bge.n	111e4 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   111d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
   111da:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   111dc:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   111de:	4806      	ldr	r0, [pc, #24]	; (111f8 <unready_thread+0x30>)
   111e0:	f7ff ff86 	bl	110f0 <z_priq_dumb_remove>
	update_cache(thread == _current);
   111e4:	4b05      	ldr	r3, [pc, #20]	; (111fc <unready_thread+0x34>)
   111e6:	6898      	ldr	r0, [r3, #8]
   111e8:	1b03      	subs	r3, r0, r4
   111ea:	4258      	negs	r0, r3
   111ec:	4158      	adcs	r0, r3
}
   111ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   111f2:	f7ff bfb9 	b.w	11168 <update_cache>
   111f6:	bf00      	nop
   111f8:	20000c58 	.word	0x20000c58
   111fc:	20000c30 	.word	0x20000c30

00011200 <add_to_waitq_locked>:
{
   11200:	b538      	push	{r3, r4, r5, lr}
   11202:	4604      	mov	r4, r0
   11204:	460d      	mov	r5, r1
	unready_thread(thread);
   11206:	f7ff ffdf 	bl	111c8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1120a:	7b63      	ldrb	r3, [r4, #13]
   1120c:	f043 0302 	orr.w	r3, r3, #2
   11210:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   11212:	b325      	cbz	r5, 1125e <add_to_waitq_locked+0x5e>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   11214:	4b18      	ldr	r3, [pc, #96]	; (11278 <add_to_waitq_locked+0x78>)
		thread->base.pended_on = wait_q;
   11216:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   11218:	429c      	cmp	r4, r3
   1121a:	d10a      	bne.n	11232 <add_to_waitq_locked+0x32>
   1121c:	4917      	ldr	r1, [pc, #92]	; (1127c <add_to_waitq_locked+0x7c>)
   1121e:	4818      	ldr	r0, [pc, #96]	; (11280 <add_to_waitq_locked+0x80>)
   11220:	f240 32b5 	movw	r2, #949	; 0x3b5
   11224:	f003 feb2 	bl	14f8c <printk>
   11228:	f240 31b5 	movw	r1, #949	; 0x3b5
   1122c:	4813      	ldr	r0, [pc, #76]	; (1127c <add_to_waitq_locked+0x7c>)
   1122e:	f003 ff79 	bl	15124 <assert_post_action>
	return list->head == list;
   11232:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11234:	429d      	cmp	r5, r3
   11236:	bf08      	it	eq
   11238:	2300      	moveq	r3, #0
   1123a:	2b00      	cmp	r3, #0
   1123c:	bf38      	it	cc
   1123e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11240:	b19b      	cbz	r3, 1126a <add_to_waitq_locked+0x6a>
	int32_t b1 = thread_1->base.prio;
   11242:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   11246:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   1124a:	4291      	cmp	r1, r2
   1124c:	d008      	beq.n	11260 <add_to_waitq_locked+0x60>
		return b2 - b1;
   1124e:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   11250:	2a00      	cmp	r2, #0
   11252:	dd05      	ble.n	11260 <add_to_waitq_locked+0x60>
	sys_dnode_t *const prev = successor->prev;
   11254:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   11256:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1125a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1125c:	605c      	str	r4, [r3, #4]
}
   1125e:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   11260:	686a      	ldr	r2, [r5, #4]
   11262:	4293      	cmp	r3, r2
   11264:	d001      	beq.n	1126a <add_to_waitq_locked+0x6a>
   11266:	681b      	ldr	r3, [r3, #0]
   11268:	e7ea      	b.n	11240 <add_to_waitq_locked+0x40>
	sys_dnode_t *const tail = list->tail;
   1126a:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   1126c:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   11270:	601c      	str	r4, [r3, #0]
	list->tail = node;
   11272:	606c      	str	r4, [r5, #4]
   11274:	e7f3      	b.n	1125e <add_to_waitq_locked+0x5e>
   11276:	bf00      	nop
   11278:	20000170 	.word	0x20000170
   1127c:	00018da2 	.word	0x00018da2
   11280:	00017e72 	.word	0x00017e72

00011284 <pend>:
{
   11284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11288:	4604      	mov	r4, r0
   1128a:	460d      	mov	r5, r1
   1128c:	4616      	mov	r6, r2
   1128e:	461f      	mov	r7, r3
	__asm__ volatile(
   11290:	f04f 0320 	mov.w	r3, #32
   11294:	f3ef 8811 	mrs	r8, BASEPRI
   11298:	f383 8811 	msr	BASEPRI, r3
   1129c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   112a0:	481a      	ldr	r0, [pc, #104]	; (1130c <pend+0x88>)
   112a2:	f7ff fbe9 	bl	10a78 <z_spin_lock_valid>
   112a6:	b940      	cbnz	r0, 112ba <pend+0x36>
   112a8:	4919      	ldr	r1, [pc, #100]	; (11310 <pend+0x8c>)
   112aa:	481a      	ldr	r0, [pc, #104]	; (11314 <pend+0x90>)
   112ac:	2281      	movs	r2, #129	; 0x81
   112ae:	f003 fe6d 	bl	14f8c <printk>
   112b2:	2181      	movs	r1, #129	; 0x81
   112b4:	4816      	ldr	r0, [pc, #88]	; (11310 <pend+0x8c>)
   112b6:	f003 ff35 	bl	15124 <assert_post_action>
	z_spin_lock_set_owner(l);
   112ba:	4814      	ldr	r0, [pc, #80]	; (1130c <pend+0x88>)
   112bc:	f7ff fbf8 	bl	10ab0 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   112c0:	4620      	mov	r0, r4
   112c2:	4629      	mov	r1, r5
   112c4:	f7ff ff9c 	bl	11200 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   112c8:	4810      	ldr	r0, [pc, #64]	; (1130c <pend+0x88>)
   112ca:	f7ff fbe3 	bl	10a94 <z_spin_unlock_valid>
   112ce:	b940      	cbnz	r0, 112e2 <pend+0x5e>
   112d0:	490f      	ldr	r1, [pc, #60]	; (11310 <pend+0x8c>)
   112d2:	4810      	ldr	r0, [pc, #64]	; (11314 <pend+0x90>)
   112d4:	22ac      	movs	r2, #172	; 0xac
   112d6:	f003 fe59 	bl	14f8c <printk>
   112da:	21ac      	movs	r1, #172	; 0xac
   112dc:	480c      	ldr	r0, [pc, #48]	; (11310 <pend+0x8c>)
   112de:	f003 ff21 	bl	15124 <assert_post_action>
	__asm__ volatile(
   112e2:	f388 8811 	msr	BASEPRI, r8
   112e6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   112ea:	1c7b      	adds	r3, r7, #1
   112ec:	bf08      	it	eq
   112ee:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   112f2:	d008      	beq.n	11306 <pend+0x82>
   112f4:	4632      	mov	r2, r6
   112f6:	463b      	mov	r3, r7
   112f8:	f104 0018 	add.w	r0, r4, #24
   112fc:	4906      	ldr	r1, [pc, #24]	; (11318 <pend+0x94>)
}
   112fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11302:	f000 bdcd 	b.w	11ea0 <z_add_timeout>
   11306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1130a:	bf00      	nop
   1130c:	20000c6c 	.word	0x20000c6c
   11310:	00017eac 	.word	0x00017eac
   11314:	00017e72 	.word	0x00017e72
   11318:	000117d9 	.word	0x000117d9

0001131c <z_pend_curr>:
{
   1131c:	b538      	push	{r3, r4, r5, lr}
   1131e:	4605      	mov	r5, r0
	pending_current = _current;
   11320:	4b0d      	ldr	r3, [pc, #52]	; (11358 <z_pend_curr+0x3c>)
{
   11322:	460c      	mov	r4, r1
	pending_current = _current;
   11324:	6898      	ldr	r0, [r3, #8]
   11326:	4b0d      	ldr	r3, [pc, #52]	; (1135c <z_pend_curr+0x40>)
{
   11328:	4611      	mov	r1, r2
	pending_current = _current;
   1132a:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   1132c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11330:	f7ff ffa8 	bl	11284 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11334:	4628      	mov	r0, r5
   11336:	f7ff fbad 	bl	10a94 <z_spin_unlock_valid>
   1133a:	b940      	cbnz	r0, 1134e <z_pend_curr+0x32>
   1133c:	4908      	ldr	r1, [pc, #32]	; (11360 <z_pend_curr+0x44>)
   1133e:	4809      	ldr	r0, [pc, #36]	; (11364 <z_pend_curr+0x48>)
   11340:	22c3      	movs	r2, #195	; 0xc3
   11342:	f003 fe23 	bl	14f8c <printk>
   11346:	21c3      	movs	r1, #195	; 0xc3
   11348:	4805      	ldr	r0, [pc, #20]	; (11360 <z_pend_curr+0x44>)
   1134a:	f003 feeb 	bl	15124 <assert_post_action>
   1134e:	4620      	mov	r0, r4
}
   11350:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   11354:	f7fd bd44 	b.w	ede0 <arch_swap>
   11358:	20000c30 	.word	0x20000c30
   1135c:	20000c68 	.word	0x20000c68
   11360:	00017eac 	.word	0x00017eac
   11364:	00017e72 	.word	0x00017e72

00011368 <z_impl_k_thread_suspend>:
{
   11368:	b570      	push	{r4, r5, r6, lr}
   1136a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1136c:	3018      	adds	r0, #24
   1136e:	f000 fe51 	bl	12014 <z_abort_timeout>
	__asm__ volatile(
   11372:	f04f 0320 	mov.w	r3, #32
   11376:	f3ef 8611 	mrs	r6, BASEPRI
   1137a:	f383 8811 	msr	BASEPRI, r3
   1137e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11382:	4820      	ldr	r0, [pc, #128]	; (11404 <z_impl_k_thread_suspend+0x9c>)
   11384:	f7ff fb78 	bl	10a78 <z_spin_lock_valid>
   11388:	b940      	cbnz	r0, 1139c <z_impl_k_thread_suspend+0x34>
   1138a:	491f      	ldr	r1, [pc, #124]	; (11408 <z_impl_k_thread_suspend+0xa0>)
   1138c:	481f      	ldr	r0, [pc, #124]	; (1140c <z_impl_k_thread_suspend+0xa4>)
   1138e:	2281      	movs	r2, #129	; 0x81
   11390:	f003 fdfc 	bl	14f8c <printk>
   11394:	2181      	movs	r1, #129	; 0x81
   11396:	481c      	ldr	r0, [pc, #112]	; (11408 <z_impl_k_thread_suspend+0xa0>)
   11398:	f003 fec4 	bl	15124 <assert_post_action>
	z_spin_lock_set_owner(l);
   1139c:	4819      	ldr	r0, [pc, #100]	; (11404 <z_impl_k_thread_suspend+0x9c>)
   1139e:	f7ff fb87 	bl	10ab0 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   113a2:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   113a6:	7b63      	ldrb	r3, [r4, #13]
   113a8:	2a00      	cmp	r2, #0
   113aa:	da06      	bge.n	113ba <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   113ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
   113b0:	4621      	mov	r1, r4
   113b2:	4817      	ldr	r0, [pc, #92]	; (11410 <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   113b4:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   113b6:	f7ff fe9b 	bl	110f0 <z_priq_dumb_remove>
		update_cache(thread == _current);
   113ba:	4d16      	ldr	r5, [pc, #88]	; (11414 <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   113bc:	7b63      	ldrb	r3, [r4, #13]
   113be:	68a8      	ldr	r0, [r5, #8]
   113c0:	f043 0310 	orr.w	r3, r3, #16
   113c4:	7363      	strb	r3, [r4, #13]
   113c6:	1b03      	subs	r3, r0, r4
   113c8:	4258      	negs	r0, r3
   113ca:	4158      	adcs	r0, r3
   113cc:	f7ff fecc 	bl	11168 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   113d0:	480c      	ldr	r0, [pc, #48]	; (11404 <z_impl_k_thread_suspend+0x9c>)
   113d2:	f7ff fb5f 	bl	10a94 <z_spin_unlock_valid>
   113d6:	b940      	cbnz	r0, 113ea <z_impl_k_thread_suspend+0x82>
   113d8:	490b      	ldr	r1, [pc, #44]	; (11408 <z_impl_k_thread_suspend+0xa0>)
   113da:	480c      	ldr	r0, [pc, #48]	; (1140c <z_impl_k_thread_suspend+0xa4>)
   113dc:	22ac      	movs	r2, #172	; 0xac
   113de:	f003 fdd5 	bl	14f8c <printk>
   113e2:	21ac      	movs	r1, #172	; 0xac
   113e4:	4808      	ldr	r0, [pc, #32]	; (11408 <z_impl_k_thread_suspend+0xa0>)
   113e6:	f003 fe9d 	bl	15124 <assert_post_action>
	__asm__ volatile(
   113ea:	f386 8811 	msr	BASEPRI, r6
   113ee:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   113f2:	68ab      	ldr	r3, [r5, #8]
   113f4:	42a3      	cmp	r3, r4
   113f6:	d103      	bne.n	11400 <z_impl_k_thread_suspend+0x98>
}
   113f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   113fc:	f004 b969 	b.w	156d2 <z_reschedule_unlocked>
}
   11400:	bd70      	pop	{r4, r5, r6, pc}
   11402:	bf00      	nop
   11404:	20000c6c 	.word	0x20000c6c
   11408:	00017eac 	.word	0x00017eac
   1140c:	00017e72 	.word	0x00017e72
   11410:	20000c58 	.word	0x20000c58
   11414:	20000c30 	.word	0x20000c30

00011418 <k_sched_unlock>:
{
   11418:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1141a:	f04f 0320 	mov.w	r3, #32
   1141e:	f3ef 8511 	mrs	r5, BASEPRI
   11422:	f383 8811 	msr	BASEPRI, r3
   11426:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1142a:	4824      	ldr	r0, [pc, #144]	; (114bc <k_sched_unlock+0xa4>)
   1142c:	f7ff fb24 	bl	10a78 <z_spin_lock_valid>
   11430:	b940      	cbnz	r0, 11444 <k_sched_unlock+0x2c>
   11432:	4923      	ldr	r1, [pc, #140]	; (114c0 <k_sched_unlock+0xa8>)
   11434:	4823      	ldr	r0, [pc, #140]	; (114c4 <k_sched_unlock+0xac>)
   11436:	2281      	movs	r2, #129	; 0x81
   11438:	f003 fda8 	bl	14f8c <printk>
   1143c:	2181      	movs	r1, #129	; 0x81
   1143e:	4820      	ldr	r0, [pc, #128]	; (114c0 <k_sched_unlock+0xa8>)
   11440:	f003 fe70 	bl	15124 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   11444:	4c20      	ldr	r4, [pc, #128]	; (114c8 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   11446:	481d      	ldr	r0, [pc, #116]	; (114bc <k_sched_unlock+0xa4>)
   11448:	f7ff fb32 	bl	10ab0 <z_spin_lock_set_owner>
   1144c:	68a2      	ldr	r2, [r4, #8]
   1144e:	7bd2      	ldrb	r2, [r2, #15]
   11450:	b952      	cbnz	r2, 11468 <k_sched_unlock+0x50>
   11452:	491e      	ldr	r1, [pc, #120]	; (114cc <k_sched_unlock+0xb4>)
   11454:	481b      	ldr	r0, [pc, #108]	; (114c4 <k_sched_unlock+0xac>)
   11456:	f240 3252 	movw	r2, #850	; 0x352
   1145a:	f003 fd97 	bl	14f8c <printk>
   1145e:	f240 3152 	movw	r1, #850	; 0x352
   11462:	481a      	ldr	r0, [pc, #104]	; (114cc <k_sched_unlock+0xb4>)
   11464:	f003 fe5e 	bl	15124 <assert_post_action>
   11468:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   1146c:	b153      	cbz	r3, 11484 <k_sched_unlock+0x6c>
   1146e:	4917      	ldr	r1, [pc, #92]	; (114cc <k_sched_unlock+0xb4>)
   11470:	4814      	ldr	r0, [pc, #80]	; (114c4 <k_sched_unlock+0xac>)
   11472:	f240 3253 	movw	r2, #851	; 0x353
   11476:	f003 fd89 	bl	14f8c <printk>
   1147a:	f240 3153 	movw	r1, #851	; 0x353
   1147e:	4813      	ldr	r0, [pc, #76]	; (114cc <k_sched_unlock+0xb4>)
   11480:	f003 fe50 	bl	15124 <assert_post_action>
		++_current->base.sched_locked;
   11484:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   11486:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   11488:	7bd3      	ldrb	r3, [r2, #15]
   1148a:	3301      	adds	r3, #1
   1148c:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1148e:	f7ff fe6b 	bl	11168 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11492:	480a      	ldr	r0, [pc, #40]	; (114bc <k_sched_unlock+0xa4>)
   11494:	f7ff fafe 	bl	10a94 <z_spin_unlock_valid>
   11498:	b940      	cbnz	r0, 114ac <k_sched_unlock+0x94>
   1149a:	4909      	ldr	r1, [pc, #36]	; (114c0 <k_sched_unlock+0xa8>)
   1149c:	4809      	ldr	r0, [pc, #36]	; (114c4 <k_sched_unlock+0xac>)
   1149e:	22ac      	movs	r2, #172	; 0xac
   114a0:	f003 fd74 	bl	14f8c <printk>
   114a4:	21ac      	movs	r1, #172	; 0xac
   114a6:	4806      	ldr	r0, [pc, #24]	; (114c0 <k_sched_unlock+0xa8>)
   114a8:	f003 fe3c 	bl	15124 <assert_post_action>
	__asm__ volatile(
   114ac:	f385 8811 	msr	BASEPRI, r5
   114b0:	f3bf 8f6f 	isb	sy
}
   114b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   114b8:	f004 b90b 	b.w	156d2 <z_reschedule_unlocked>
   114bc:	20000c6c 	.word	0x20000c6c
   114c0:	00017eac 	.word	0x00017eac
   114c4:	00017e72 	.word	0x00017e72
   114c8:	20000c30 	.word	0x20000c30
   114cc:	00018da2 	.word	0x00018da2

000114d0 <move_thread_to_end_of_prio_q>:
{
   114d0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   114d2:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   114d6:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   114d8:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   114da:	7b43      	ldrb	r3, [r0, #13]
   114dc:	da06      	bge.n	114ec <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   114de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
   114e2:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   114e4:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   114e6:	4820      	ldr	r0, [pc, #128]	; (11568 <move_thread_to_end_of_prio_q+0x98>)
   114e8:	f7ff fe02 	bl	110f0 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   114ec:	7b63      	ldrb	r3, [r4, #13]
   114ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
   114f2:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   114f4:	4b1d      	ldr	r3, [pc, #116]	; (1156c <move_thread_to_end_of_prio_q+0x9c>)
   114f6:	429c      	cmp	r4, r3
   114f8:	d10a      	bne.n	11510 <move_thread_to_end_of_prio_q+0x40>
   114fa:	491d      	ldr	r1, [pc, #116]	; (11570 <move_thread_to_end_of_prio_q+0xa0>)
   114fc:	481d      	ldr	r0, [pc, #116]	; (11574 <move_thread_to_end_of_prio_q+0xa4>)
   114fe:	f240 32b5 	movw	r2, #949	; 0x3b5
   11502:	f003 fd43 	bl	14f8c <printk>
   11506:	f240 31b5 	movw	r1, #949	; 0x3b5
   1150a:	4819      	ldr	r0, [pc, #100]	; (11570 <move_thread_to_end_of_prio_q+0xa0>)
   1150c:	f003 fe0a 	bl	15124 <assert_post_action>
	return list->head == list;
   11510:	4a19      	ldr	r2, [pc, #100]	; (11578 <move_thread_to_end_of_prio_q+0xa8>)
   11512:	4611      	mov	r1, r2
   11514:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   11518:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1151a:	428b      	cmp	r3, r1
   1151c:	bf08      	it	eq
   1151e:	2300      	moveq	r3, #0
   11520:	2b00      	cmp	r3, #0
   11522:	bf38      	it	cc
   11524:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11526:	b1cb      	cbz	r3, 1155c <move_thread_to_end_of_prio_q+0x8c>
	int32_t b1 = thread_1->base.prio;
   11528:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   1152c:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   11530:	4286      	cmp	r6, r0
   11532:	d00f      	beq.n	11554 <move_thread_to_end_of_prio_q+0x84>
		return b2 - b1;
   11534:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   11536:	2800      	cmp	r0, #0
   11538:	dd0c      	ble.n	11554 <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
   1153a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1153c:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   11540:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   11542:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   11544:	6890      	ldr	r0, [r2, #8]
   11546:	1b03      	subs	r3, r0, r4
   11548:	4258      	negs	r0, r3
   1154a:	4158      	adcs	r0, r3
}
   1154c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   11550:	f7ff be0a 	b.w	11168 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   11554:	42ab      	cmp	r3, r5
   11556:	d001      	beq.n	1155c <move_thread_to_end_of_prio_q+0x8c>
   11558:	681b      	ldr	r3, [r3, #0]
   1155a:	e7e4      	b.n	11526 <move_thread_to_end_of_prio_q+0x56>
	node->prev = tail;
   1155c:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
   11560:	602c      	str	r4, [r5, #0]
	list->tail = node;
   11562:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   11564:	e7ee      	b.n	11544 <move_thread_to_end_of_prio_q+0x74>
   11566:	bf00      	nop
   11568:	20000c58 	.word	0x20000c58
   1156c:	20000170 	.word	0x20000170
   11570:	00018da2 	.word	0x00018da2
   11574:	00017e72 	.word	0x00017e72
   11578:	20000c30 	.word	0x20000c30

0001157c <z_time_slice>:
{
   1157c:	b570      	push	{r4, r5, r6, lr}
   1157e:	4604      	mov	r4, r0
	__asm__ volatile(
   11580:	f04f 0320 	mov.w	r3, #32
   11584:	f3ef 8511 	mrs	r5, BASEPRI
   11588:	f383 8811 	msr	BASEPRI, r3
   1158c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11590:	4825      	ldr	r0, [pc, #148]	; (11628 <z_time_slice+0xac>)
   11592:	f7ff fa71 	bl	10a78 <z_spin_lock_valid>
   11596:	b940      	cbnz	r0, 115aa <z_time_slice+0x2e>
   11598:	4924      	ldr	r1, [pc, #144]	; (1162c <z_time_slice+0xb0>)
   1159a:	4825      	ldr	r0, [pc, #148]	; (11630 <z_time_slice+0xb4>)
   1159c:	2281      	movs	r2, #129	; 0x81
   1159e:	f003 fcf5 	bl	14f8c <printk>
   115a2:	2181      	movs	r1, #129	; 0x81
   115a4:	4821      	ldr	r0, [pc, #132]	; (1162c <z_time_slice+0xb0>)
   115a6:	f003 fdbd 	bl	15124 <assert_post_action>
	z_spin_lock_set_owner(l);
   115aa:	481f      	ldr	r0, [pc, #124]	; (11628 <z_time_slice+0xac>)
   115ac:	f7ff fa80 	bl	10ab0 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   115b0:	4b20      	ldr	r3, [pc, #128]	; (11634 <z_time_slice+0xb8>)
   115b2:	4a21      	ldr	r2, [pc, #132]	; (11638 <z_time_slice+0xbc>)
   115b4:	6898      	ldr	r0, [r3, #8]
   115b6:	6811      	ldr	r1, [r2, #0]
   115b8:	4288      	cmp	r0, r1
   115ba:	4619      	mov	r1, r3
   115bc:	d113      	bne.n	115e6 <z_time_slice+0x6a>
			z_reset_time_slice();
   115be:	f7ff fca3 	bl	10f08 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   115c2:	4819      	ldr	r0, [pc, #100]	; (11628 <z_time_slice+0xac>)
   115c4:	f7ff fa66 	bl	10a94 <z_spin_unlock_valid>
   115c8:	b940      	cbnz	r0, 115dc <z_time_slice+0x60>
   115ca:	4918      	ldr	r1, [pc, #96]	; (1162c <z_time_slice+0xb0>)
   115cc:	4818      	ldr	r0, [pc, #96]	; (11630 <z_time_slice+0xb4>)
   115ce:	22ac      	movs	r2, #172	; 0xac
   115d0:	f003 fcdc 	bl	14f8c <printk>
   115d4:	21ac      	movs	r1, #172	; 0xac
   115d6:	4815      	ldr	r0, [pc, #84]	; (1162c <z_time_slice+0xb0>)
   115d8:	f003 fda4 	bl	15124 <assert_post_action>
	__asm__ volatile(
   115dc:	f385 8811 	msr	BASEPRI, r5
   115e0:	f3bf 8f6f 	isb	sy
}
   115e4:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   115e6:	2600      	movs	r6, #0
   115e8:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   115ea:	4a14      	ldr	r2, [pc, #80]	; (1163c <z_time_slice+0xc0>)
   115ec:	6812      	ldr	r2, [r2, #0]
   115ee:	b1ba      	cbz	r2, 11620 <z_time_slice+0xa4>
		&& !z_is_idle_thread_object(thread);
   115f0:	89c2      	ldrh	r2, [r0, #14]
   115f2:	2a7f      	cmp	r2, #127	; 0x7f
   115f4:	d814      	bhi.n	11620 <z_time_slice+0xa4>
		&& !z_is_thread_prevented_from_running(thread)
   115f6:	7b42      	ldrb	r2, [r0, #13]
   115f8:	06d2      	lsls	r2, r2, #27
   115fa:	d111      	bne.n	11620 <z_time_slice+0xa4>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   115fc:	4a10      	ldr	r2, [pc, #64]	; (11640 <z_time_slice+0xc4>)
   115fe:	f990 600e 	ldrsb.w	r6, [r0, #14]
   11602:	6812      	ldr	r2, [r2, #0]
   11604:	4296      	cmp	r6, r2
   11606:	db0b      	blt.n	11620 <z_time_slice+0xa4>
		&& !z_is_idle_thread_object(thread);
   11608:	4a0e      	ldr	r2, [pc, #56]	; (11644 <z_time_slice+0xc8>)
   1160a:	4290      	cmp	r0, r2
   1160c:	d008      	beq.n	11620 <z_time_slice+0xa4>
		if (ticks >= _current_cpu->slice_ticks) {
   1160e:	691a      	ldr	r2, [r3, #16]
   11610:	42a2      	cmp	r2, r4
   11612:	dc02      	bgt.n	1161a <z_time_slice+0x9e>
			move_thread_to_end_of_prio_q(_current);
   11614:	f7ff ff5c 	bl	114d0 <move_thread_to_end_of_prio_q>
   11618:	e7d1      	b.n	115be <z_time_slice+0x42>
			_current_cpu->slice_ticks -= ticks;
   1161a:	1b12      	subs	r2, r2, r4
   1161c:	611a      	str	r2, [r3, #16]
   1161e:	e7d0      	b.n	115c2 <z_time_slice+0x46>
		_current_cpu->slice_ticks = 0;
   11620:	2300      	movs	r3, #0
   11622:	610b      	str	r3, [r1, #16]
   11624:	e7cd      	b.n	115c2 <z_time_slice+0x46>
   11626:	bf00      	nop
   11628:	20000c6c 	.word	0x20000c6c
   1162c:	00017eac 	.word	0x00017eac
   11630:	00017e72 	.word	0x00017e72
   11634:	20000c30 	.word	0x20000c30
   11638:	20000c68 	.word	0x20000c68
   1163c:	20000c74 	.word	0x20000c74
   11640:	20000c70 	.word	0x20000c70
   11644:	20000170 	.word	0x20000170

00011648 <ready_thread>:
{
   11648:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1164a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   1164e:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   11650:	2a00      	cmp	r2, #0
   11652:	7b43      	ldrb	r3, [r0, #13]
   11654:	db3f      	blt.n	116d6 <ready_thread+0x8e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   11656:	06da      	lsls	r2, r3, #27
   11658:	d13d      	bne.n	116d6 <ready_thread+0x8e>
	return !sys_dnode_is_linked(&to->node);
   1165a:	6985      	ldr	r5, [r0, #24]
   1165c:	2d00      	cmp	r5, #0
   1165e:	d13a      	bne.n	116d6 <ready_thread+0x8e>
	thread->base.thread_state |= _THREAD_QUEUED;
   11660:	f063 037f 	orn	r3, r3, #127	; 0x7f
   11664:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   11666:	4b1c      	ldr	r3, [pc, #112]	; (116d8 <ready_thread+0x90>)
   11668:	4298      	cmp	r0, r3
   1166a:	d10a      	bne.n	11682 <ready_thread+0x3a>
   1166c:	491b      	ldr	r1, [pc, #108]	; (116dc <ready_thread+0x94>)
   1166e:	481c      	ldr	r0, [pc, #112]	; (116e0 <ready_thread+0x98>)
   11670:	f240 32b5 	movw	r2, #949	; 0x3b5
   11674:	f003 fc8a 	bl	14f8c <printk>
   11678:	f240 31b5 	movw	r1, #949	; 0x3b5
   1167c:	4817      	ldr	r0, [pc, #92]	; (116dc <ready_thread+0x94>)
   1167e:	f003 fd51 	bl	15124 <assert_post_action>
	return list->head == list;
   11682:	4918      	ldr	r1, [pc, #96]	; (116e4 <ready_thread+0x9c>)
   11684:	460b      	mov	r3, r1
   11686:	f853 0f28 	ldr.w	r0, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1168a:	4298      	cmp	r0, r3
   1168c:	bf18      	it	ne
   1168e:	4605      	movne	r5, r0
   11690:	2d00      	cmp	r5, #0
   11692:	461a      	mov	r2, r3
   11694:	462b      	mov	r3, r5
   11696:	bf38      	it	cc
   11698:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1169a:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1169c:	b1b3      	cbz	r3, 116cc <ready_thread+0x84>
	int32_t b1 = thread_1->base.prio;
   1169e:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   116a2:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   116a6:	4286      	cmp	r6, r0
   116a8:	d00c      	beq.n	116c4 <ready_thread+0x7c>
		return b2 - b1;
   116aa:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   116ac:	2800      	cmp	r0, #0
   116ae:	dd09      	ble.n	116c4 <ready_thread+0x7c>
	sys_dnode_t *const prev = successor->prev;
   116b0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   116b2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   116b6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   116b8:	605c      	str	r4, [r3, #4]
		update_cache(0);
   116ba:	2000      	movs	r0, #0
}
   116bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   116c0:	f7ff bd52 	b.w	11168 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   116c4:	42ab      	cmp	r3, r5
   116c6:	d001      	beq.n	116cc <ready_thread+0x84>
   116c8:	681b      	ldr	r3, [r3, #0]
   116ca:	e7e7      	b.n	1169c <ready_thread+0x54>
	node->prev = tail;
   116cc:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   116d0:	602c      	str	r4, [r5, #0]
	list->tail = node;
   116d2:	62cc      	str	r4, [r1, #44]	; 0x2c
}
   116d4:	e7f1      	b.n	116ba <ready_thread+0x72>
}
   116d6:	bd70      	pop	{r4, r5, r6, pc}
   116d8:	20000170 	.word	0x20000170
   116dc:	00018da2 	.word	0x00018da2
   116e0:	00017e72 	.word	0x00017e72
   116e4:	20000c30 	.word	0x20000c30

000116e8 <z_ready_thread>:
{
   116e8:	b538      	push	{r3, r4, r5, lr}
   116ea:	4604      	mov	r4, r0
	__asm__ volatile(
   116ec:	f04f 0320 	mov.w	r3, #32
   116f0:	f3ef 8511 	mrs	r5, BASEPRI
   116f4:	f383 8811 	msr	BASEPRI, r3
   116f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   116fc:	4812      	ldr	r0, [pc, #72]	; (11748 <z_ready_thread+0x60>)
   116fe:	f7ff f9bb 	bl	10a78 <z_spin_lock_valid>
   11702:	b940      	cbnz	r0, 11716 <z_ready_thread+0x2e>
   11704:	4911      	ldr	r1, [pc, #68]	; (1174c <z_ready_thread+0x64>)
   11706:	4812      	ldr	r0, [pc, #72]	; (11750 <z_ready_thread+0x68>)
   11708:	2281      	movs	r2, #129	; 0x81
   1170a:	f003 fc3f 	bl	14f8c <printk>
   1170e:	2181      	movs	r1, #129	; 0x81
   11710:	480e      	ldr	r0, [pc, #56]	; (1174c <z_ready_thread+0x64>)
   11712:	f003 fd07 	bl	15124 <assert_post_action>
	z_spin_lock_set_owner(l);
   11716:	480c      	ldr	r0, [pc, #48]	; (11748 <z_ready_thread+0x60>)
   11718:	f7ff f9ca 	bl	10ab0 <z_spin_lock_set_owner>
			ready_thread(thread);
   1171c:	4620      	mov	r0, r4
   1171e:	f7ff ff93 	bl	11648 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11722:	4809      	ldr	r0, [pc, #36]	; (11748 <z_ready_thread+0x60>)
   11724:	f7ff f9b6 	bl	10a94 <z_spin_unlock_valid>
   11728:	b940      	cbnz	r0, 1173c <z_ready_thread+0x54>
   1172a:	4908      	ldr	r1, [pc, #32]	; (1174c <z_ready_thread+0x64>)
   1172c:	4808      	ldr	r0, [pc, #32]	; (11750 <z_ready_thread+0x68>)
   1172e:	22ac      	movs	r2, #172	; 0xac
   11730:	f003 fc2c 	bl	14f8c <printk>
   11734:	21ac      	movs	r1, #172	; 0xac
   11736:	4805      	ldr	r0, [pc, #20]	; (1174c <z_ready_thread+0x64>)
   11738:	f003 fcf4 	bl	15124 <assert_post_action>
	__asm__ volatile(
   1173c:	f385 8811 	msr	BASEPRI, r5
   11740:	f3bf 8f6f 	isb	sy
}
   11744:	bd38      	pop	{r3, r4, r5, pc}
   11746:	bf00      	nop
   11748:	20000c6c 	.word	0x20000c6c
   1174c:	00017eac 	.word	0x00017eac
   11750:	00017e72 	.word	0x00017e72

00011754 <z_sched_start>:
{
   11754:	b538      	push	{r3, r4, r5, lr}
   11756:	4604      	mov	r4, r0
	__asm__ volatile(
   11758:	f04f 0320 	mov.w	r3, #32
   1175c:	f3ef 8511 	mrs	r5, BASEPRI
   11760:	f383 8811 	msr	BASEPRI, r3
   11764:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11768:	4818      	ldr	r0, [pc, #96]	; (117cc <z_sched_start+0x78>)
   1176a:	f7ff f985 	bl	10a78 <z_spin_lock_valid>
   1176e:	b940      	cbnz	r0, 11782 <z_sched_start+0x2e>
   11770:	4917      	ldr	r1, [pc, #92]	; (117d0 <z_sched_start+0x7c>)
   11772:	4818      	ldr	r0, [pc, #96]	; (117d4 <z_sched_start+0x80>)
   11774:	2281      	movs	r2, #129	; 0x81
   11776:	f003 fc09 	bl	14f8c <printk>
   1177a:	2181      	movs	r1, #129	; 0x81
   1177c:	4814      	ldr	r0, [pc, #80]	; (117d0 <z_sched_start+0x7c>)
   1177e:	f003 fcd1 	bl	15124 <assert_post_action>
	z_spin_lock_set_owner(l);
   11782:	4812      	ldr	r0, [pc, #72]	; (117cc <z_sched_start+0x78>)
   11784:	f7ff f994 	bl	10ab0 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   11788:	7b63      	ldrb	r3, [r4, #13]
   1178a:	075a      	lsls	r2, r3, #29
   1178c:	d411      	bmi.n	117b2 <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1178e:	480f      	ldr	r0, [pc, #60]	; (117cc <z_sched_start+0x78>)
   11790:	f7ff f980 	bl	10a94 <z_spin_unlock_valid>
   11794:	b940      	cbnz	r0, 117a8 <z_sched_start+0x54>
   11796:	490e      	ldr	r1, [pc, #56]	; (117d0 <z_sched_start+0x7c>)
   11798:	480e      	ldr	r0, [pc, #56]	; (117d4 <z_sched_start+0x80>)
   1179a:	22ac      	movs	r2, #172	; 0xac
   1179c:	f003 fbf6 	bl	14f8c <printk>
   117a0:	21ac      	movs	r1, #172	; 0xac
   117a2:	480b      	ldr	r0, [pc, #44]	; (117d0 <z_sched_start+0x7c>)
   117a4:	f003 fcbe 	bl	15124 <assert_post_action>
	__asm__ volatile(
   117a8:	f385 8811 	msr	BASEPRI, r5
   117ac:	f3bf 8f6f 	isb	sy
}
   117b0:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   117b2:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   117b6:	4620      	mov	r0, r4
   117b8:	7363      	strb	r3, [r4, #13]
   117ba:	f7ff ff45 	bl	11648 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   117be:	4629      	mov	r1, r5
}
   117c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   117c4:	4801      	ldr	r0, [pc, #4]	; (117cc <z_sched_start+0x78>)
   117c6:	f7ff bc09 	b.w	10fdc <z_reschedule>
   117ca:	bf00      	nop
   117cc:	20000c6c 	.word	0x20000c6c
   117d0:	00017eac 	.word	0x00017eac
   117d4:	00017e72 	.word	0x00017e72

000117d8 <z_thread_timeout>:
{
   117d8:	b570      	push	{r4, r5, r6, lr}
   117da:	4604      	mov	r4, r0
	__asm__ volatile(
   117dc:	f04f 0320 	mov.w	r3, #32
   117e0:	f3ef 8611 	mrs	r6, BASEPRI
   117e4:	f383 8811 	msr	BASEPRI, r3
   117e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   117ec:	481b      	ldr	r0, [pc, #108]	; (1185c <z_thread_timeout+0x84>)
   117ee:	f7ff f943 	bl	10a78 <z_spin_lock_valid>
   117f2:	b940      	cbnz	r0, 11806 <z_thread_timeout+0x2e>
   117f4:	491a      	ldr	r1, [pc, #104]	; (11860 <z_thread_timeout+0x88>)
   117f6:	481b      	ldr	r0, [pc, #108]	; (11864 <z_thread_timeout+0x8c>)
   117f8:	2281      	movs	r2, #129	; 0x81
   117fa:	f003 fbc7 	bl	14f8c <printk>
   117fe:	2181      	movs	r1, #129	; 0x81
   11800:	4817      	ldr	r0, [pc, #92]	; (11860 <z_thread_timeout+0x88>)
   11802:	f003 fc8f 	bl	15124 <assert_post_action>
	z_spin_lock_set_owner(l);
   11806:	4815      	ldr	r0, [pc, #84]	; (1185c <z_thread_timeout+0x84>)
   11808:	f7ff f952 	bl	10ab0 <z_spin_lock_set_owner>
		if (!killed) {
   1180c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   11810:	f013 0f28 	tst.w	r3, #40	; 0x28
   11814:	d110      	bne.n	11838 <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
   11816:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   1181a:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   1181e:	b113      	cbz	r3, 11826 <z_thread_timeout+0x4e>
				unpend_thread_no_timeout(thread);
   11820:	4628      	mov	r0, r5
   11822:	f7ff fc83 	bl	1112c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   11826:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
   1182a:	4628      	mov	r0, r5
   1182c:	f023 0314 	bic.w	r3, r3, #20
   11830:	f804 3c0b 	strb.w	r3, [r4, #-11]
   11834:	f7ff ff08 	bl	11648 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11838:	4808      	ldr	r0, [pc, #32]	; (1185c <z_thread_timeout+0x84>)
   1183a:	f7ff f92b 	bl	10a94 <z_spin_unlock_valid>
   1183e:	b940      	cbnz	r0, 11852 <z_thread_timeout+0x7a>
   11840:	4907      	ldr	r1, [pc, #28]	; (11860 <z_thread_timeout+0x88>)
   11842:	4808      	ldr	r0, [pc, #32]	; (11864 <z_thread_timeout+0x8c>)
   11844:	22ac      	movs	r2, #172	; 0xac
   11846:	f003 fba1 	bl	14f8c <printk>
   1184a:	21ac      	movs	r1, #172	; 0xac
   1184c:	4804      	ldr	r0, [pc, #16]	; (11860 <z_thread_timeout+0x88>)
   1184e:	f003 fc69 	bl	15124 <assert_post_action>
	__asm__ volatile(
   11852:	f386 8811 	msr	BASEPRI, r6
   11856:	f3bf 8f6f 	isb	sy
}
   1185a:	bd70      	pop	{r4, r5, r6, pc}
   1185c:	20000c6c 	.word	0x20000c6c
   11860:	00017eac 	.word	0x00017eac
   11864:	00017e72 	.word	0x00017e72

00011868 <z_set_prio>:
{
   11868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1186a:	4604      	mov	r4, r0
   1186c:	460e      	mov	r6, r1
	__asm__ volatile(
   1186e:	f04f 0320 	mov.w	r3, #32
   11872:	f3ef 8711 	mrs	r7, BASEPRI
   11876:	f383 8811 	msr	BASEPRI, r3
   1187a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1187e:	4838      	ldr	r0, [pc, #224]	; (11960 <z_set_prio+0xf8>)
   11880:	f7ff f8fa 	bl	10a78 <z_spin_lock_valid>
   11884:	b940      	cbnz	r0, 11898 <z_set_prio+0x30>
   11886:	4937      	ldr	r1, [pc, #220]	; (11964 <z_set_prio+0xfc>)
   11888:	4837      	ldr	r0, [pc, #220]	; (11968 <z_set_prio+0x100>)
   1188a:	2281      	movs	r2, #129	; 0x81
   1188c:	f003 fb7e 	bl	14f8c <printk>
   11890:	2181      	movs	r1, #129	; 0x81
   11892:	4834      	ldr	r0, [pc, #208]	; (11964 <z_set_prio+0xfc>)
   11894:	f003 fc46 	bl	15124 <assert_post_action>
	z_spin_lock_set_owner(l);
   11898:	4831      	ldr	r0, [pc, #196]	; (11960 <z_set_prio+0xf8>)
   1189a:	f7ff f909 	bl	10ab0 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1189e:	7b63      	ldrb	r3, [r4, #13]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
   118a0:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   118a2:	06da      	lsls	r2, r3, #27
   118a4:	d158      	bne.n	11958 <z_set_prio+0xf0>
   118a6:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
   118a8:	2d00      	cmp	r5, #0
   118aa:	d155      	bne.n	11958 <z_set_prio+0xf0>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   118ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   118b0:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   118b2:	4621      	mov	r1, r4
   118b4:	482d      	ldr	r0, [pc, #180]	; (1196c <z_set_prio+0x104>)
   118b6:	f7ff fc1b 	bl	110f0 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   118ba:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   118bc:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   118be:	f063 037f 	orn	r3, r3, #127	; 0x7f
   118c2:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   118c4:	4b2a      	ldr	r3, [pc, #168]	; (11970 <z_set_prio+0x108>)
   118c6:	429c      	cmp	r4, r3
   118c8:	d10a      	bne.n	118e0 <z_set_prio+0x78>
   118ca:	492a      	ldr	r1, [pc, #168]	; (11974 <z_set_prio+0x10c>)
   118cc:	4826      	ldr	r0, [pc, #152]	; (11968 <z_set_prio+0x100>)
   118ce:	f240 32b5 	movw	r2, #949	; 0x3b5
   118d2:	f003 fb5b 	bl	14f8c <printk>
   118d6:	f240 31b5 	movw	r1, #949	; 0x3b5
   118da:	4826      	ldr	r0, [pc, #152]	; (11974 <z_set_prio+0x10c>)
   118dc:	f003 fc22 	bl	15124 <assert_post_action>
	return list->head == list;
   118e0:	4925      	ldr	r1, [pc, #148]	; (11978 <z_set_prio+0x110>)
   118e2:	460b      	mov	r3, r1
   118e4:	f853 0f28 	ldr.w	r0, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   118e8:	4298      	cmp	r0, r3
   118ea:	bf18      	it	ne
   118ec:	4605      	movne	r5, r0
   118ee:	2d00      	cmp	r5, #0
   118f0:	461a      	mov	r2, r3
   118f2:	462b      	mov	r3, r5
   118f4:	bf38      	it	cc
   118f6:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   118f8:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   118fa:	b343      	cbz	r3, 1194e <z_set_prio+0xe6>
	int32_t b1 = thread_1->base.prio;
   118fc:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   11900:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   11904:	4286      	cmp	r6, r0
   11906:	d01e      	beq.n	11946 <z_set_prio+0xde>
		return b2 - b1;
   11908:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1190a:	2800      	cmp	r0, #0
   1190c:	dd1b      	ble.n	11946 <z_set_prio+0xde>
	sys_dnode_t *const prev = successor->prev;
   1190e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   11910:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   11914:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   11916:	605c      	str	r4, [r3, #4]
			update_cache(1);
   11918:	2001      	movs	r0, #1
   1191a:	f7ff fc25 	bl	11168 <update_cache>
   1191e:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11920:	480f      	ldr	r0, [pc, #60]	; (11960 <z_set_prio+0xf8>)
   11922:	f7ff f8b7 	bl	10a94 <z_spin_unlock_valid>
   11926:	b940      	cbnz	r0, 1193a <z_set_prio+0xd2>
   11928:	490e      	ldr	r1, [pc, #56]	; (11964 <z_set_prio+0xfc>)
   1192a:	480f      	ldr	r0, [pc, #60]	; (11968 <z_set_prio+0x100>)
   1192c:	22ac      	movs	r2, #172	; 0xac
   1192e:	f003 fb2d 	bl	14f8c <printk>
   11932:	21ac      	movs	r1, #172	; 0xac
   11934:	480b      	ldr	r0, [pc, #44]	; (11964 <z_set_prio+0xfc>)
   11936:	f003 fbf5 	bl	15124 <assert_post_action>
	__asm__ volatile(
   1193a:	f387 8811 	msr	BASEPRI, r7
   1193e:	f3bf 8f6f 	isb	sy
}
   11942:	4620      	mov	r0, r4
   11944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   11946:	42ab      	cmp	r3, r5
   11948:	d001      	beq.n	1194e <z_set_prio+0xe6>
   1194a:	681b      	ldr	r3, [r3, #0]
   1194c:	e7d5      	b.n	118fa <z_set_prio+0x92>
	node->prev = tail;
   1194e:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   11952:	602c      	str	r4, [r5, #0]
	list->tail = node;
   11954:	62cc      	str	r4, [r1, #44]	; 0x2c
}
   11956:	e7df      	b.n	11918 <z_set_prio+0xb0>
			thread->base.prio = prio;
   11958:	73a6      	strb	r6, [r4, #14]
   1195a:	2400      	movs	r4, #0
   1195c:	e7e0      	b.n	11920 <z_set_prio+0xb8>
   1195e:	bf00      	nop
   11960:	20000c6c 	.word	0x20000c6c
   11964:	00017eac 	.word	0x00017eac
   11968:	00017e72 	.word	0x00017e72
   1196c:	20000c58 	.word	0x20000c58
   11970:	20000170 	.word	0x20000170
   11974:	00018da2 	.word	0x00018da2
   11978:	20000c30 	.word	0x20000c30

0001197c <z_unpend_first_thread>:
{
   1197c:	b538      	push	{r3, r4, r5, lr}
   1197e:	4604      	mov	r4, r0
	__asm__ volatile(
   11980:	f04f 0320 	mov.w	r3, #32
   11984:	f3ef 8511 	mrs	r5, BASEPRI
   11988:	f383 8811 	msr	BASEPRI, r3
   1198c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11990:	4816      	ldr	r0, [pc, #88]	; (119ec <z_unpend_first_thread+0x70>)
   11992:	f7ff f871 	bl	10a78 <z_spin_lock_valid>
   11996:	b940      	cbnz	r0, 119aa <z_unpend_first_thread+0x2e>
   11998:	4915      	ldr	r1, [pc, #84]	; (119f0 <z_unpend_first_thread+0x74>)
   1199a:	4816      	ldr	r0, [pc, #88]	; (119f4 <z_unpend_first_thread+0x78>)
   1199c:	2281      	movs	r2, #129	; 0x81
   1199e:	f003 faf5 	bl	14f8c <printk>
   119a2:	2181      	movs	r1, #129	; 0x81
   119a4:	4812      	ldr	r0, [pc, #72]	; (119f0 <z_unpend_first_thread+0x74>)
   119a6:	f003 fbbd 	bl	15124 <assert_post_action>
	z_spin_lock_set_owner(l);
   119aa:	4810      	ldr	r0, [pc, #64]	; (119ec <z_unpend_first_thread+0x70>)
   119ac:	f7ff f880 	bl	10ab0 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   119b0:	4620      	mov	r0, r4
   119b2:	f003 fe98 	bl	156e6 <z_priq_dumb_best>
		if (thread != NULL) {
   119b6:	4604      	mov	r4, r0
   119b8:	b128      	cbz	r0, 119c6 <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
   119ba:	f7ff fbb7 	bl	1112c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   119be:	f104 0018 	add.w	r0, r4, #24
   119c2:	f000 fb27 	bl	12014 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   119c6:	4809      	ldr	r0, [pc, #36]	; (119ec <z_unpend_first_thread+0x70>)
   119c8:	f7ff f864 	bl	10a94 <z_spin_unlock_valid>
   119cc:	b940      	cbnz	r0, 119e0 <z_unpend_first_thread+0x64>
   119ce:	4908      	ldr	r1, [pc, #32]	; (119f0 <z_unpend_first_thread+0x74>)
   119d0:	4808      	ldr	r0, [pc, #32]	; (119f4 <z_unpend_first_thread+0x78>)
   119d2:	22ac      	movs	r2, #172	; 0xac
   119d4:	f003 fada 	bl	14f8c <printk>
   119d8:	21ac      	movs	r1, #172	; 0xac
   119da:	4805      	ldr	r0, [pc, #20]	; (119f0 <z_unpend_first_thread+0x74>)
   119dc:	f003 fba2 	bl	15124 <assert_post_action>
	__asm__ volatile(
   119e0:	f385 8811 	msr	BASEPRI, r5
   119e4:	f3bf 8f6f 	isb	sy
}
   119e8:	4620      	mov	r0, r4
   119ea:	bd38      	pop	{r3, r4, r5, pc}
   119ec:	20000c6c 	.word	0x20000c6c
   119f0:	00017eac 	.word	0x00017eac
   119f4:	00017e72 	.word	0x00017e72

000119f8 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   119f8:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   119fa:	4b04      	ldr	r3, [pc, #16]	; (11a0c <z_sched_init+0x14>)
   119fc:	4608      	mov	r0, r1
   119fe:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   11a02:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   11a06:	f7ff ba95 	b.w	10f34 <k_sched_time_slice_set>
   11a0a:	bf00      	nop
   11a0c:	20000c30 	.word	0x20000c30

00011a10 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   11a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11a12:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   11a16:	b153      	cbz	r3, 11a2e <z_impl_k_yield+0x1e>
   11a18:	4940      	ldr	r1, [pc, #256]	; (11b1c <z_impl_k_yield+0x10c>)
   11a1a:	4841      	ldr	r0, [pc, #260]	; (11b20 <z_impl_k_yield+0x110>)
   11a1c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
   11a20:	f003 fab4 	bl	14f8c <printk>
   11a24:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
   11a28:	483c      	ldr	r0, [pc, #240]	; (11b1c <z_impl_k_yield+0x10c>)
   11a2a:	f003 fb7b 	bl	15124 <assert_post_action>

	SYS_PORT_TRACING_FUNC(k_thread, yield);

	if (!z_is_idle_thread_object(_current)) {
   11a2e:	4d3d      	ldr	r5, [pc, #244]	; (11b24 <z_impl_k_yield+0x114>)
   11a30:	4e3d      	ldr	r6, [pc, #244]	; (11b28 <z_impl_k_yield+0x118>)
   11a32:	68ab      	ldr	r3, [r5, #8]
   11a34:	42b3      	cmp	r3, r6
   11a36:	d067      	beq.n	11b08 <z_impl_k_yield+0xf8>
	__asm__ volatile(
   11a38:	f04f 0320 	mov.w	r3, #32
   11a3c:	f3ef 8711 	mrs	r7, BASEPRI
   11a40:	f383 8811 	msr	BASEPRI, r3
   11a44:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11a48:	4838      	ldr	r0, [pc, #224]	; (11b2c <z_impl_k_yield+0x11c>)
   11a4a:	f7ff f815 	bl	10a78 <z_spin_lock_valid>
   11a4e:	b940      	cbnz	r0, 11a62 <z_impl_k_yield+0x52>
   11a50:	4937      	ldr	r1, [pc, #220]	; (11b30 <z_impl_k_yield+0x120>)
   11a52:	4833      	ldr	r0, [pc, #204]	; (11b20 <z_impl_k_yield+0x110>)
   11a54:	2281      	movs	r2, #129	; 0x81
   11a56:	f003 fa99 	bl	14f8c <printk>
   11a5a:	2181      	movs	r1, #129	; 0x81
   11a5c:	4834      	ldr	r0, [pc, #208]	; (11b30 <z_impl_k_yield+0x120>)
   11a5e:	f003 fb61 	bl	15124 <assert_post_action>
	z_spin_lock_set_owner(l);
   11a62:	4832      	ldr	r0, [pc, #200]	; (11b2c <z_impl_k_yield+0x11c>)
   11a64:	f7ff f824 	bl	10ab0 <z_spin_lock_set_owner>
		k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

		if (!IS_ENABLED(CONFIG_SMP) ||
			z_is_thread_queued(_current)) {
			dequeue_thread(&_kernel.ready_q.runq,
   11a68:	68a9      	ldr	r1, [r5, #8]
		_priq_run_remove(pq, thread);
   11a6a:	4832      	ldr	r0, [pc, #200]	; (11b34 <z_impl_k_yield+0x124>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11a6c:	7b4b      	ldrb	r3, [r1, #13]
   11a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   11a72:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
   11a74:	f7ff fb3c 	bl	110f0 <z_priq_dumb_remove>
					_current);
		}
		queue_thread(&_kernel.ready_q.runq, _current);
   11a78:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   11a7a:	7b63      	ldrb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   11a7c:	42b4      	cmp	r4, r6
	thread->base.thread_state |= _THREAD_QUEUED;
   11a7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   11a82:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   11a84:	d10a      	bne.n	11a9c <z_impl_k_yield+0x8c>
   11a86:	4925      	ldr	r1, [pc, #148]	; (11b1c <z_impl_k_yield+0x10c>)
   11a88:	4825      	ldr	r0, [pc, #148]	; (11b20 <z_impl_k_yield+0x110>)
   11a8a:	f240 32b5 	movw	r2, #949	; 0x3b5
   11a8e:	f003 fa7d 	bl	14f8c <printk>
   11a92:	f240 31b5 	movw	r1, #949	; 0x3b5
   11a96:	4821      	ldr	r0, [pc, #132]	; (11b1c <z_impl_k_yield+0x10c>)
   11a98:	f003 fb44 	bl	15124 <assert_post_action>
	return list->head == list;
   11a9c:	6aab      	ldr	r3, [r5, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11a9e:	4825      	ldr	r0, [pc, #148]	; (11b34 <z_impl_k_yield+0x124>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   11aa0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11aa2:	4283      	cmp	r3, r0
   11aa4:	bf08      	it	eq
   11aa6:	2300      	moveq	r3, #0
   11aa8:	2b00      	cmp	r3, #0
   11aaa:	bf38      	it	cc
   11aac:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   11aae:	b333      	cbz	r3, 11afe <z_impl_k_yield+0xee>
	int32_t b1 = thread_1->base.prio;
   11ab0:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   11ab4:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   11ab8:	4296      	cmp	r6, r2
   11aba:	d01c      	beq.n	11af6 <z_impl_k_yield+0xe6>
		return b2 - b1;
   11abc:	1b92      	subs	r2, r2, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   11abe:	2a00      	cmp	r2, #0
   11ac0:	dd19      	ble.n	11af6 <z_impl_k_yield+0xe6>
	sys_dnode_t *const prev = successor->prev;
   11ac2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   11ac4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   11ac8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   11aca:	605c      	str	r4, [r3, #4]
		update_cache(1);
   11acc:	2001      	movs	r0, #1
   11ace:	f7ff fb4b 	bl	11168 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11ad2:	4816      	ldr	r0, [pc, #88]	; (11b2c <z_impl_k_yield+0x11c>)
   11ad4:	f7fe ffde 	bl	10a94 <z_spin_unlock_valid>
   11ad8:	b940      	cbnz	r0, 11aec <z_impl_k_yield+0xdc>
   11ada:	4915      	ldr	r1, [pc, #84]	; (11b30 <z_impl_k_yield+0x120>)
   11adc:	4810      	ldr	r0, [pc, #64]	; (11b20 <z_impl_k_yield+0x110>)
   11ade:	22c3      	movs	r2, #195	; 0xc3
   11ae0:	f003 fa54 	bl	14f8c <printk>
   11ae4:	21c3      	movs	r1, #195	; 0xc3
   11ae6:	4812      	ldr	r0, [pc, #72]	; (11b30 <z_impl_k_yield+0x120>)
   11ae8:	f003 fb1c 	bl	15124 <assert_post_action>
   11aec:	4638      	mov	r0, r7
		z_swap(&sched_spinlock, key);
	} else {
		z_swap_unlocked();
	}
}
   11aee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   11af2:	f7fd b975 	b.w	ede0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   11af6:	428b      	cmp	r3, r1
   11af8:	d001      	beq.n	11afe <z_impl_k_yield+0xee>
   11afa:	681b      	ldr	r3, [r3, #0]
   11afc:	e7d7      	b.n	11aae <z_impl_k_yield+0x9e>
	node->prev = tail;
   11afe:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   11b02:	600c      	str	r4, [r1, #0]
	list->tail = node;
   11b04:	62ec      	str	r4, [r5, #44]	; 0x2c
}
   11b06:	e7e1      	b.n	11acc <z_impl_k_yield+0xbc>
   11b08:	f04f 0320 	mov.w	r3, #32
   11b0c:	f3ef 8011 	mrs	r0, BASEPRI
   11b10:	f383 8811 	msr	BASEPRI, r3
   11b14:	f3bf 8f6f 	isb	sy
   11b18:	e7e9      	b.n	11aee <z_impl_k_yield+0xde>
   11b1a:	bf00      	nop
   11b1c:	00018da2 	.word	0x00018da2
   11b20:	00017e72 	.word	0x00017e72
   11b24:	20000c30 	.word	0x20000c30
   11b28:	20000170 	.word	0x20000170
   11b2c:	20000c6c 	.word	0x20000c6c
   11b30:	00017eac 	.word	0x00017eac
   11b34:	20000c58 	.word	0x20000c58

00011b38 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   11b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11b3c:	4606      	mov	r6, r0
   11b3e:	460f      	mov	r7, r1
   11b40:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   11b44:	b153      	cbz	r3, 11b5c <z_tick_sleep+0x24>
   11b46:	4935      	ldr	r1, [pc, #212]	; (11c1c <z_tick_sleep+0xe4>)
   11b48:	4835      	ldr	r0, [pc, #212]	; (11c20 <z_tick_sleep+0xe8>)
   11b4a:	f240 42d1 	movw	r2, #1233	; 0x4d1
   11b4e:	f003 fa1d 	bl	14f8c <printk>
   11b52:	f240 41d1 	movw	r1, #1233	; 0x4d1
   11b56:	4831      	ldr	r0, [pc, #196]	; (11c1c <z_tick_sleep+0xe4>)
   11b58:	f003 fae4 	bl	15124 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   11b5c:	ea56 0307 	orrs.w	r3, r6, r7
   11b60:	d104      	bne.n	11b6c <z_tick_sleep+0x34>
	z_impl_k_yield();
   11b62:	f7ff ff55 	bl	11a10 <z_impl_k_yield>
		k_yield();
		return 0;
   11b66:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   11b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   11b6c:	f003 fdc5 	bl	156fa <sys_clock_tick_get_32>
   11b70:	1984      	adds	r4, r0, r6
   11b72:	f04f 0320 	mov.w	r3, #32
   11b76:	f3ef 8811 	mrs	r8, BASEPRI
   11b7a:	f383 8811 	msr	BASEPRI, r3
   11b7e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11b82:	4828      	ldr	r0, [pc, #160]	; (11c24 <z_tick_sleep+0xec>)
   11b84:	f7fe ff78 	bl	10a78 <z_spin_lock_valid>
   11b88:	b940      	cbnz	r0, 11b9c <z_tick_sleep+0x64>
   11b8a:	4927      	ldr	r1, [pc, #156]	; (11c28 <z_tick_sleep+0xf0>)
   11b8c:	4824      	ldr	r0, [pc, #144]	; (11c20 <z_tick_sleep+0xe8>)
   11b8e:	2281      	movs	r2, #129	; 0x81
   11b90:	f003 f9fc 	bl	14f8c <printk>
   11b94:	2181      	movs	r1, #129	; 0x81
   11b96:	4824      	ldr	r0, [pc, #144]	; (11c28 <z_tick_sleep+0xf0>)
   11b98:	f003 fac4 	bl	15124 <assert_post_action>
	pending_current = _current;
   11b9c:	4d23      	ldr	r5, [pc, #140]	; (11c2c <z_tick_sleep+0xf4>)
	z_spin_lock_set_owner(l);
   11b9e:	4821      	ldr	r0, [pc, #132]	; (11c24 <z_tick_sleep+0xec>)
   11ba0:	f7fe ff86 	bl	10ab0 <z_spin_lock_set_owner>
   11ba4:	68a8      	ldr	r0, [r5, #8]
   11ba6:	4b22      	ldr	r3, [pc, #136]	; (11c30 <z_tick_sleep+0xf8>)
   11ba8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   11baa:	f7ff fb0d 	bl	111c8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   11bae:	68a8      	ldr	r0, [r5, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   11bb0:	4632      	mov	r2, r6
   11bb2:	463b      	mov	r3, r7
   11bb4:	3018      	adds	r0, #24
   11bb6:	491f      	ldr	r1, [pc, #124]	; (11c34 <z_tick_sleep+0xfc>)
   11bb8:	f000 f972 	bl	11ea0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   11bbc:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11bbe:	4819      	ldr	r0, [pc, #100]	; (11c24 <z_tick_sleep+0xec>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   11bc0:	7b53      	ldrb	r3, [r2, #13]
   11bc2:	f043 0310 	orr.w	r3, r3, #16
   11bc6:	7353      	strb	r3, [r2, #13]
   11bc8:	f7fe ff64 	bl	10a94 <z_spin_unlock_valid>
   11bcc:	b940      	cbnz	r0, 11be0 <z_tick_sleep+0xa8>
   11bce:	4916      	ldr	r1, [pc, #88]	; (11c28 <z_tick_sleep+0xf0>)
   11bd0:	4813      	ldr	r0, [pc, #76]	; (11c20 <z_tick_sleep+0xe8>)
   11bd2:	22c3      	movs	r2, #195	; 0xc3
   11bd4:	f003 f9da 	bl	14f8c <printk>
   11bd8:	21c3      	movs	r1, #195	; 0xc3
   11bda:	4813      	ldr	r0, [pc, #76]	; (11c28 <z_tick_sleep+0xf0>)
   11bdc:	f003 faa2 	bl	15124 <assert_post_action>
   11be0:	4640      	mov	r0, r8
   11be2:	f7fd f8fd 	bl	ede0 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   11be6:	68ab      	ldr	r3, [r5, #8]
   11be8:	7b5b      	ldrb	r3, [r3, #13]
   11bea:	06db      	lsls	r3, r3, #27
   11bec:	d50a      	bpl.n	11c04 <z_tick_sleep+0xcc>
   11bee:	490b      	ldr	r1, [pc, #44]	; (11c1c <z_tick_sleep+0xe4>)
   11bf0:	480b      	ldr	r0, [pc, #44]	; (11c20 <z_tick_sleep+0xe8>)
   11bf2:	f240 42ef 	movw	r2, #1263	; 0x4ef
   11bf6:	f003 f9c9 	bl	14f8c <printk>
   11bfa:	f240 41ef 	movw	r1, #1263	; 0x4ef
   11bfe:	4807      	ldr	r0, [pc, #28]	; (11c1c <z_tick_sleep+0xe4>)
   11c00:	f003 fa90 	bl	15124 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   11c04:	f003 fd79 	bl	156fa <sys_clock_tick_get_32>
   11c08:	1a20      	subs	r0, r4, r0
   11c0a:	eb64 0104 	sbc.w	r1, r4, r4
   11c0e:	2800      	cmp	r0, #0
   11c10:	f171 0300 	sbcs.w	r3, r1, #0
   11c14:	bfb8      	it	lt
   11c16:	2000      	movlt	r0, #0
   11c18:	e7a6      	b.n	11b68 <z_tick_sleep+0x30>
   11c1a:	bf00      	nop
   11c1c:	00018da2 	.word	0x00018da2
   11c20:	00017e72 	.word	0x00017e72
   11c24:	20000c6c 	.word	0x20000c6c
   11c28:	00017eac 	.word	0x00017eac
   11c2c:	20000c30 	.word	0x20000c30
   11c30:	20000c68 	.word	0x20000c68
   11c34:	000117d9 	.word	0x000117d9

00011c38 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   11c38:	b538      	push	{r3, r4, r5, lr}
   11c3a:	4604      	mov	r4, r0
   11c3c:	460d      	mov	r5, r1
   11c3e:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   11c42:	b153      	cbz	r3, 11c5a <z_impl_k_sleep+0x22>
   11c44:	4911      	ldr	r1, [pc, #68]	; (11c8c <z_impl_k_sleep+0x54>)
   11c46:	4812      	ldr	r0, [pc, #72]	; (11c90 <z_impl_k_sleep+0x58>)
   11c48:	f240 42fe 	movw	r2, #1278	; 0x4fe
   11c4c:	f003 f99e 	bl	14f8c <printk>
   11c50:	f240 41fe 	movw	r1, #1278	; 0x4fe
   11c54:	480d      	ldr	r0, [pc, #52]	; (11c8c <z_impl_k_sleep+0x54>)
   11c56:	f003 fa65 	bl	15124 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   11c5a:	1c6b      	adds	r3, r5, #1
   11c5c:	bf08      	it	eq
   11c5e:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   11c62:	d106      	bne.n	11c72 <z_impl_k_sleep+0x3a>
		k_thread_suspend(_current);
   11c64:	4b0b      	ldr	r3, [pc, #44]	; (11c94 <z_impl_k_sleep+0x5c>)
   11c66:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   11c68:	f7ff fb7e 	bl	11368 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   11c6c:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   11c70:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   11c72:	4620      	mov	r0, r4
   11c74:	4629      	mov	r1, r5
   11c76:	f7ff ff5f 	bl	11b38 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   11c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   11c7e:	fb80 3403 	smull	r3, r4, r0, r3
   11c82:	0bd8      	lsrs	r0, r3, #15
   11c84:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
   11c88:	e7f2      	b.n	11c70 <z_impl_k_sleep+0x38>
   11c8a:	bf00      	nop
   11c8c:	00018da2 	.word	0x00018da2
   11c90:	00017e72 	.word	0x00017e72
   11c94:	20000c30 	.word	0x20000c30

00011c98 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   11c98:	4b01      	ldr	r3, [pc, #4]	; (11ca0 <z_impl_k_current_get+0x8>)
   11c9a:	6898      	ldr	r0, [r3, #8]
   11c9c:	4770      	bx	lr
   11c9e:	bf00      	nop
   11ca0:	20000c30 	.word	0x20000c30

00011ca4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   11ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11ca8:	4604      	mov	r4, r0
   11caa:	f04f 0320 	mov.w	r3, #32
   11cae:	f3ef 8611 	mrs	r6, BASEPRI
   11cb2:	f383 8811 	msr	BASEPRI, r3
   11cb6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11cba:	483e      	ldr	r0, [pc, #248]	; (11db4 <z_thread_abort+0x110>)
   11cbc:	f7fe fedc 	bl	10a78 <z_spin_lock_valid>
   11cc0:	b940      	cbnz	r0, 11cd4 <z_thread_abort+0x30>
   11cc2:	493d      	ldr	r1, [pc, #244]	; (11db8 <z_thread_abort+0x114>)
   11cc4:	483d      	ldr	r0, [pc, #244]	; (11dbc <z_thread_abort+0x118>)
   11cc6:	2281      	movs	r2, #129	; 0x81
   11cc8:	f003 f960 	bl	14f8c <printk>
   11ccc:	2181      	movs	r1, #129	; 0x81
   11cce:	483a      	ldr	r0, [pc, #232]	; (11db8 <z_thread_abort+0x114>)
   11cd0:	f003 fa28 	bl	15124 <assert_post_action>
	z_spin_lock_set_owner(l);
   11cd4:	4837      	ldr	r0, [pc, #220]	; (11db4 <z_thread_abort+0x110>)
   11cd6:	f7fe feeb 	bl	10ab0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   11cda:	7b63      	ldrb	r3, [r4, #13]
   11cdc:	071a      	lsls	r2, r3, #28
   11cde:	d512      	bpl.n	11d06 <z_thread_abort+0x62>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11ce0:	4834      	ldr	r0, [pc, #208]	; (11db4 <z_thread_abort+0x110>)
   11ce2:	f7fe fed7 	bl	10a94 <z_spin_unlock_valid>
   11ce6:	b940      	cbnz	r0, 11cfa <z_thread_abort+0x56>
   11ce8:	4933      	ldr	r1, [pc, #204]	; (11db8 <z_thread_abort+0x114>)
   11cea:	4834      	ldr	r0, [pc, #208]	; (11dbc <z_thread_abort+0x118>)
   11cec:	22ac      	movs	r2, #172	; 0xac
   11cee:	f003 f94d 	bl	14f8c <printk>
   11cf2:	21ac      	movs	r1, #172	; 0xac
   11cf4:	4830      	ldr	r0, [pc, #192]	; (11db8 <z_thread_abort+0x114>)
   11cf6:	f003 fa15 	bl	15124 <assert_post_action>
	__asm__ volatile(
   11cfa:	f386 8811 	msr	BASEPRI, r6
   11cfe:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   11d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   11d06:	f023 0220 	bic.w	r2, r3, #32
   11d0a:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   11d0e:	09d2      	lsrs	r2, r2, #7
   11d10:	d138      	bne.n	11d84 <z_thread_abort+0xe0>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   11d12:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   11d14:	68a3      	ldr	r3, [r4, #8]
   11d16:	b113      	cbz	r3, 11d1e <z_thread_abort+0x7a>
			unpend_thread_no_timeout(thread);
   11d18:	4620      	mov	r0, r4
   11d1a:	f7ff fa07 	bl	1112c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   11d1e:	f104 0018 	add.w	r0, r4, #24
   11d22:	f000 f977 	bl	12014 <z_abort_timeout>
   11d26:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   11d2a:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   11d2e:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11d30:	42bd      	cmp	r5, r7
   11d32:	d000      	beq.n	11d36 <z_thread_abort+0x92>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   11d34:	bb85      	cbnz	r5, 11d98 <z_thread_abort+0xf4>
		update_cache(1);
   11d36:	2001      	movs	r0, #1
   11d38:	f7ff fa16 	bl	11168 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   11d3c:	4b20      	ldr	r3, [pc, #128]	; (11dc0 <z_thread_abort+0x11c>)
   11d3e:	689b      	ldr	r3, [r3, #8]
   11d40:	42a3      	cmp	r3, r4
   11d42:	d1cd      	bne.n	11ce0 <z_thread_abort+0x3c>
   11d44:	f3ef 8305 	mrs	r3, IPSR
   11d48:	2b00      	cmp	r3, #0
   11d4a:	d1c9      	bne.n	11ce0 <z_thread_abort+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11d4c:	4819      	ldr	r0, [pc, #100]	; (11db4 <z_thread_abort+0x110>)
   11d4e:	f7fe fea1 	bl	10a94 <z_spin_unlock_valid>
   11d52:	b940      	cbnz	r0, 11d66 <z_thread_abort+0xc2>
   11d54:	4918      	ldr	r1, [pc, #96]	; (11db8 <z_thread_abort+0x114>)
   11d56:	4819      	ldr	r0, [pc, #100]	; (11dbc <z_thread_abort+0x118>)
   11d58:	22c3      	movs	r2, #195	; 0xc3
   11d5a:	f003 f917 	bl	14f8c <printk>
   11d5e:	21c3      	movs	r1, #195	; 0xc3
   11d60:	4815      	ldr	r0, [pc, #84]	; (11db8 <z_thread_abort+0x114>)
   11d62:	f003 f9df 	bl	15124 <assert_post_action>
   11d66:	4630      	mov	r0, r6
   11d68:	f7fd f83a 	bl	ede0 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   11d6c:	f240 6211 	movw	r2, #1553	; 0x611
   11d70:	4914      	ldr	r1, [pc, #80]	; (11dc4 <z_thread_abort+0x120>)
   11d72:	4812      	ldr	r0, [pc, #72]	; (11dbc <z_thread_abort+0x118>)
   11d74:	f003 f90a 	bl	14f8c <printk>
   11d78:	f240 6111 	movw	r1, #1553	; 0x611
   11d7c:	4811      	ldr	r0, [pc, #68]	; (11dc4 <z_thread_abort+0x120>)
   11d7e:	f003 f9d1 	bl	15124 <assert_post_action>
   11d82:	e7ad      	b.n	11ce0 <z_thread_abort+0x3c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11d84:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   11d88:	f043 0308 	orr.w	r3, r3, #8
		_priq_run_remove(pq, thread);
   11d8c:	4621      	mov	r1, r4
   11d8e:	480e      	ldr	r0, [pc, #56]	; (11dc8 <z_thread_abort+0x124>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   11d90:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   11d92:	f7ff f9ad 	bl	110f0 <z_priq_dumb_remove>
}
   11d96:	e7bd      	b.n	11d14 <z_thread_abort+0x70>
		unpend_thread_no_timeout(thread);
   11d98:	4628      	mov	r0, r5
   11d9a:	f7ff f9c7 	bl	1112c <unpend_thread_no_timeout>
   11d9e:	f105 0018 	add.w	r0, r5, #24
   11da2:	f000 f937 	bl	12014 <z_abort_timeout>
		ready_thread(thread);
   11da6:	4628      	mov	r0, r5
   11da8:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
   11dac:	f7ff fc4c 	bl	11648 <ready_thread>
   11db0:	e7bd      	b.n	11d2e <z_thread_abort+0x8a>
   11db2:	bf00      	nop
   11db4:	20000c6c 	.word	0x20000c6c
   11db8:	00017eac 	.word	0x00017eac
   11dbc:	00017e72 	.word	0x00017e72
   11dc0:	20000c30 	.word	0x20000c30
   11dc4:	00018da2 	.word	0x00018da2
   11dc8:	20000c58 	.word	0x20000c58

00011dcc <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   11dcc:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   11dce:	4806      	ldr	r0, [pc, #24]	; (11de8 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   11dd0:	4a06      	ldr	r2, [pc, #24]	; (11dec <z_data_copy+0x20>)
   11dd2:	4907      	ldr	r1, [pc, #28]	; (11df0 <z_data_copy+0x24>)
   11dd4:	1a12      	subs	r2, r2, r0
   11dd6:	f003 facd 	bl	15374 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   11dda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   11dde:	4a05      	ldr	r2, [pc, #20]	; (11df4 <z_data_copy+0x28>)
   11de0:	4905      	ldr	r1, [pc, #20]	; (11df8 <z_data_copy+0x2c>)
   11de2:	4806      	ldr	r0, [pc, #24]	; (11dfc <z_data_copy+0x30>)
   11de4:	f003 bac6 	b.w	15374 <memcpy>
   11de8:	20000000 	.word	0x20000000
   11dec:	2000016c 	.word	0x2000016c
   11df0:	00018e24 	.word	0x00018e24
   11df4:	00000000 	.word	0x00000000
   11df8:	00018e24 	.word	0x00018e24
   11dfc:	20000000 	.word	0x20000000

00011e00 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   11e00:	4b03      	ldr	r3, [pc, #12]	; (11e10 <elapsed+0x10>)
   11e02:	681b      	ldr	r3, [r3, #0]
   11e04:	b90b      	cbnz	r3, 11e0a <elapsed+0xa>
   11e06:	f7fc bd0d 	b.w	e824 <sys_clock_elapsed>
}
   11e0a:	2000      	movs	r0, #0
   11e0c:	4770      	bx	lr
   11e0e:	bf00      	nop
   11e10:	20000c78 	.word	0x20000c78

00011e14 <remove_timeout>:
{
   11e14:	b530      	push	{r4, r5, lr}
   11e16:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   11e18:	b168      	cbz	r0, 11e36 <remove_timeout+0x22>
   11e1a:	4a0a      	ldr	r2, [pc, #40]	; (11e44 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   11e1c:	6852      	ldr	r2, [r2, #4]
   11e1e:	4290      	cmp	r0, r2
   11e20:	d009      	beq.n	11e36 <remove_timeout+0x22>
	if (next(t) != NULL) {
   11e22:	b143      	cbz	r3, 11e36 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   11e24:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   11e28:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   11e2c:	1912      	adds	r2, r2, r4
   11e2e:	eb45 0101 	adc.w	r1, r5, r1
   11e32:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   11e36:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   11e38:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   11e3a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   11e3c:	2300      	movs	r3, #0
	node->prev = NULL;
   11e3e:	e9c0 3300 	strd	r3, r3, [r0]
}
   11e42:	bd30      	pop	{r4, r5, pc}
   11e44:	20000044 	.word	0x20000044

00011e48 <next_timeout>:

static int32_t next_timeout(void)
{
   11e48:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   11e4a:	4b13      	ldr	r3, [pc, #76]	; (11e98 <next_timeout+0x50>)
   11e4c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11e4e:	429c      	cmp	r4, r3
   11e50:	bf08      	it	eq
   11e52:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   11e54:	f7ff ffd4 	bl	11e00 <elapsed>
   11e58:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   11e5a:	b1bc      	cbz	r4, 11e8c <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   11e5c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   11e60:	1b40      	subs	r0, r0, r5
   11e62:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   11e66:	2801      	cmp	r0, #1
   11e68:	f171 0300 	sbcs.w	r3, r1, #0
   11e6c:	db11      	blt.n	11e92 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   11e6e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   11e72:	2300      	movs	r3, #0
   11e74:	4282      	cmp	r2, r0
   11e76:	eb73 0401 	sbcs.w	r4, r3, r1
   11e7a:	da00      	bge.n	11e7e <next_timeout+0x36>
   11e7c:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   11e7e:	4b07      	ldr	r3, [pc, #28]	; (11e9c <next_timeout+0x54>)
   11e80:	691b      	ldr	r3, [r3, #16]
   11e82:	b113      	cbz	r3, 11e8a <next_timeout+0x42>
   11e84:	4298      	cmp	r0, r3
   11e86:	bfa8      	it	ge
   11e88:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   11e8a:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   11e8c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11e90:	e7f5      	b.n	11e7e <next_timeout+0x36>
   11e92:	2000      	movs	r0, #0
   11e94:	e7f3      	b.n	11e7e <next_timeout+0x36>
   11e96:	bf00      	nop
   11e98:	20000044 	.word	0x20000044
   11e9c:	20000c30 	.word	0x20000c30

00011ea0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   11ea0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ea4:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   11ea6:	1c6b      	adds	r3, r5, #1
   11ea8:	bf08      	it	eq
   11eaa:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   11eae:	4682      	mov	sl, r0
   11eb0:	468b      	mov	fp, r1
   11eb2:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   11eb4:	f000 809c 	beq.w	11ff0 <z_add_timeout+0x150>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   11eb8:	6803      	ldr	r3, [r0, #0]
   11eba:	b143      	cbz	r3, 11ece <z_add_timeout+0x2e>
   11ebc:	494e      	ldr	r1, [pc, #312]	; (11ff8 <z_add_timeout+0x158>)
   11ebe:	484f      	ldr	r0, [pc, #316]	; (11ffc <z_add_timeout+0x15c>)
   11ec0:	225d      	movs	r2, #93	; 0x5d
   11ec2:	f003 f863 	bl	14f8c <printk>
   11ec6:	215d      	movs	r1, #93	; 0x5d
   11ec8:	484b      	ldr	r0, [pc, #300]	; (11ff8 <z_add_timeout+0x158>)
   11eca:	f003 f92b 	bl	15124 <assert_post_action>
	to->fn = fn;
   11ece:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
   11ed2:	f04f 0320 	mov.w	r3, #32
   11ed6:	f3ef 8b11 	mrs	fp, BASEPRI
   11eda:	f383 8811 	msr	BASEPRI, r3
   11ede:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11ee2:	4847      	ldr	r0, [pc, #284]	; (12000 <z_add_timeout+0x160>)
   11ee4:	f7fe fdc8 	bl	10a78 <z_spin_lock_valid>
   11ee8:	b940      	cbnz	r0, 11efc <z_add_timeout+0x5c>
   11eea:	4946      	ldr	r1, [pc, #280]	; (12004 <z_add_timeout+0x164>)
   11eec:	4843      	ldr	r0, [pc, #268]	; (11ffc <z_add_timeout+0x15c>)
   11eee:	2281      	movs	r2, #129	; 0x81
   11ef0:	f003 f84c 	bl	14f8c <printk>
   11ef4:	2181      	movs	r1, #129	; 0x81
   11ef6:	4843      	ldr	r0, [pc, #268]	; (12004 <z_add_timeout+0x164>)
   11ef8:	f003 f914 	bl	15124 <assert_post_action>
	z_spin_lock_set_owner(l);
   11efc:	4840      	ldr	r0, [pc, #256]	; (12000 <z_add_timeout+0x160>)
   11efe:	f7fe fdd7 	bl	10ab0 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   11f02:	f06f 0301 	mvn.w	r3, #1
   11f06:	f04f 32ff 	mov.w	r2, #4294967295
   11f0a:	ebb3 0804 	subs.w	r8, r3, r4
   11f0e:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   11f12:	f1b8 0f00 	cmp.w	r8, #0
   11f16:	f179 0100 	sbcs.w	r1, r9, #0
   11f1a:	db1c      	blt.n	11f56 <z_add_timeout+0xb6>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   11f1c:	483a      	ldr	r0, [pc, #232]	; (12008 <z_add_timeout+0x168>)
   11f1e:	e9d0 1000 	ldrd	r1, r0, [r0]
   11f22:	1a5b      	subs	r3, r3, r1
   11f24:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
   11f28:	1b1e      	subs	r6, r3, r4
   11f2a:	eb62 0705 	sbc.w	r7, r2, r5
   11f2e:	2e01      	cmp	r6, #1
   11f30:	f177 0300 	sbcs.w	r3, r7, #0
   11f34:	bfbc      	itt	lt
   11f36:	2601      	movlt	r6, #1
   11f38:	2700      	movlt	r7, #0
   11f3a:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
   11f3e:	4a33      	ldr	r2, [pc, #204]	; (1200c <z_add_timeout+0x16c>)
   11f40:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11f44:	4293      	cmp	r3, r2
   11f46:	d11d      	bne.n	11f84 <z_add_timeout+0xe4>
	node->prev = tail;
   11f48:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
   11f4c:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
   11f50:	f8c2 a004 	str.w	sl, [r2, #4]
}
   11f54:	e02c      	b.n	11fb0 <z_add_timeout+0x110>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   11f56:	f7ff ff53 	bl	11e00 <elapsed>
   11f5a:	1c63      	adds	r3, r4, #1
   11f5c:	9300      	str	r3, [sp, #0]
   11f5e:	f145 0300 	adc.w	r3, r5, #0
   11f62:	9301      	str	r3, [sp, #4]
   11f64:	e9dd 2300 	ldrd	r2, r3, [sp]
   11f68:	1812      	adds	r2, r2, r0
   11f6a:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   11f6e:	e9ca 2304 	strd	r2, r3, [sl, #16]
   11f72:	e7e4      	b.n	11f3e <z_add_timeout+0x9e>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   11f74:	1be0      	subs	r0, r4, r7
   11f76:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
   11f7a:	42b3      	cmp	r3, r6
   11f7c:	e9ca 0104 	strd	r0, r1, [sl, #16]
   11f80:	d0e2      	beq.n	11f48 <z_add_timeout+0xa8>
   11f82:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   11f84:	2b00      	cmp	r3, #0
   11f86:	d0df      	beq.n	11f48 <z_add_timeout+0xa8>
			if (t->dticks > to->dticks) {
   11f88:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
   11f8c:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   11f90:	42bc      	cmp	r4, r7
   11f92:	eb75 0108 	sbcs.w	r1, r5, r8
   11f96:	daed      	bge.n	11f74 <z_add_timeout+0xd4>
				t->dticks -= to->dticks;
   11f98:	1b38      	subs	r0, r7, r4
   11f9a:	eb68 0105 	sbc.w	r1, r8, r5
   11f9e:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   11fa2:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   11fa4:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
   11fa8:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   11fac:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
   11fb0:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   11fb2:	4293      	cmp	r3, r2
   11fb4:	d00b      	beq.n	11fce <z_add_timeout+0x12e>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   11fb6:	459a      	cmp	sl, r3
   11fb8:	d109      	bne.n	11fce <z_add_timeout+0x12e>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   11fba:	f7ff ff45 	bl	11e48 <next_timeout>

			if (next_time == 0 ||
   11fbe:	b118      	cbz	r0, 11fc8 <z_add_timeout+0x128>
			    _current_cpu->slice_ticks != next_time) {
   11fc0:	4b13      	ldr	r3, [pc, #76]	; (12010 <z_add_timeout+0x170>)
			if (next_time == 0 ||
   11fc2:	691b      	ldr	r3, [r3, #16]
   11fc4:	4283      	cmp	r3, r0
   11fc6:	d002      	beq.n	11fce <z_add_timeout+0x12e>
				sys_clock_set_timeout(next_time, false);
   11fc8:	2100      	movs	r1, #0
   11fca:	f7fc fbf9 	bl	e7c0 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11fce:	480c      	ldr	r0, [pc, #48]	; (12000 <z_add_timeout+0x160>)
   11fd0:	f7fe fd60 	bl	10a94 <z_spin_unlock_valid>
   11fd4:	b940      	cbnz	r0, 11fe8 <z_add_timeout+0x148>
   11fd6:	490b      	ldr	r1, [pc, #44]	; (12004 <z_add_timeout+0x164>)
   11fd8:	4808      	ldr	r0, [pc, #32]	; (11ffc <z_add_timeout+0x15c>)
   11fda:	22ac      	movs	r2, #172	; 0xac
   11fdc:	f002 ffd6 	bl	14f8c <printk>
   11fe0:	21ac      	movs	r1, #172	; 0xac
   11fe2:	4808      	ldr	r0, [pc, #32]	; (12004 <z_add_timeout+0x164>)
   11fe4:	f003 f89e 	bl	15124 <assert_post_action>
	__asm__ volatile(
   11fe8:	f38b 8811 	msr	BASEPRI, fp
   11fec:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   11ff0:	b003      	add	sp, #12
   11ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ff6:	bf00      	nop
   11ff8:	00018dc4 	.word	0x00018dc4
   11ffc:	00017e72 	.word	0x00017e72
   12000:	20000c7c 	.word	0x20000c7c
   12004:	00017eac 	.word	0x00017eac
   12008:	20000270 	.word	0x20000270
   1200c:	20000044 	.word	0x20000044
   12010:	20000c30 	.word	0x20000c30

00012014 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   12014:	b538      	push	{r3, r4, r5, lr}
   12016:	4604      	mov	r4, r0
	__asm__ volatile(
   12018:	f04f 0320 	mov.w	r3, #32
   1201c:	f3ef 8511 	mrs	r5, BASEPRI
   12020:	f383 8811 	msr	BASEPRI, r3
   12024:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12028:	4815      	ldr	r0, [pc, #84]	; (12080 <z_abort_timeout+0x6c>)
   1202a:	f7fe fd25 	bl	10a78 <z_spin_lock_valid>
   1202e:	b940      	cbnz	r0, 12042 <z_abort_timeout+0x2e>
   12030:	4914      	ldr	r1, [pc, #80]	; (12084 <z_abort_timeout+0x70>)
   12032:	4815      	ldr	r0, [pc, #84]	; (12088 <z_abort_timeout+0x74>)
   12034:	2281      	movs	r2, #129	; 0x81
   12036:	f002 ffa9 	bl	14f8c <printk>
   1203a:	2181      	movs	r1, #129	; 0x81
   1203c:	4811      	ldr	r0, [pc, #68]	; (12084 <z_abort_timeout+0x70>)
   1203e:	f003 f871 	bl	15124 <assert_post_action>
	z_spin_lock_set_owner(l);
   12042:	480f      	ldr	r0, [pc, #60]	; (12080 <z_abort_timeout+0x6c>)
   12044:	f7fe fd34 	bl	10ab0 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   12048:	6823      	ldr	r3, [r4, #0]
   1204a:	b1b3      	cbz	r3, 1207a <z_abort_timeout+0x66>
			remove_timeout(to);
   1204c:	4620      	mov	r0, r4
   1204e:	f7ff fee1 	bl	11e14 <remove_timeout>
			ret = 0;
   12052:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12054:	480a      	ldr	r0, [pc, #40]	; (12080 <z_abort_timeout+0x6c>)
   12056:	f7fe fd1d 	bl	10a94 <z_spin_unlock_valid>
   1205a:	b940      	cbnz	r0, 1206e <z_abort_timeout+0x5a>
   1205c:	4909      	ldr	r1, [pc, #36]	; (12084 <z_abort_timeout+0x70>)
   1205e:	480a      	ldr	r0, [pc, #40]	; (12088 <z_abort_timeout+0x74>)
   12060:	22ac      	movs	r2, #172	; 0xac
   12062:	f002 ff93 	bl	14f8c <printk>
   12066:	21ac      	movs	r1, #172	; 0xac
   12068:	4806      	ldr	r0, [pc, #24]	; (12084 <z_abort_timeout+0x70>)
   1206a:	f003 f85b 	bl	15124 <assert_post_action>
	__asm__ volatile(
   1206e:	f385 8811 	msr	BASEPRI, r5
   12072:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   12076:	4620      	mov	r0, r4
   12078:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   1207a:	f06f 0415 	mvn.w	r4, #21
   1207e:	e7e9      	b.n	12054 <z_abort_timeout+0x40>
   12080:	20000c7c 	.word	0x20000c7c
   12084:	00017eac 	.word	0x00017eac
   12088:	00017e72 	.word	0x00017e72

0001208c <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   1208c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1208e:	f04f 0320 	mov.w	r3, #32
   12092:	f3ef 8511 	mrs	r5, BASEPRI
   12096:	f383 8811 	msr	BASEPRI, r3
   1209a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1209e:	4813      	ldr	r0, [pc, #76]	; (120ec <z_get_next_timeout_expiry+0x60>)
   120a0:	f7fe fcea 	bl	10a78 <z_spin_lock_valid>
   120a4:	b940      	cbnz	r0, 120b8 <z_get_next_timeout_expiry+0x2c>
   120a6:	4912      	ldr	r1, [pc, #72]	; (120f0 <z_get_next_timeout_expiry+0x64>)
   120a8:	4812      	ldr	r0, [pc, #72]	; (120f4 <z_get_next_timeout_expiry+0x68>)
   120aa:	2281      	movs	r2, #129	; 0x81
   120ac:	f002 ff6e 	bl	14f8c <printk>
   120b0:	2181      	movs	r1, #129	; 0x81
   120b2:	480f      	ldr	r0, [pc, #60]	; (120f0 <z_get_next_timeout_expiry+0x64>)
   120b4:	f003 f836 	bl	15124 <assert_post_action>
	z_spin_lock_set_owner(l);
   120b8:	480c      	ldr	r0, [pc, #48]	; (120ec <z_get_next_timeout_expiry+0x60>)
   120ba:	f7fe fcf9 	bl	10ab0 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   120be:	f7ff fec3 	bl	11e48 <next_timeout>
   120c2:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   120c4:	4809      	ldr	r0, [pc, #36]	; (120ec <z_get_next_timeout_expiry+0x60>)
   120c6:	f7fe fce5 	bl	10a94 <z_spin_unlock_valid>
   120ca:	b940      	cbnz	r0, 120de <z_get_next_timeout_expiry+0x52>
   120cc:	4908      	ldr	r1, [pc, #32]	; (120f0 <z_get_next_timeout_expiry+0x64>)
   120ce:	4809      	ldr	r0, [pc, #36]	; (120f4 <z_get_next_timeout_expiry+0x68>)
   120d0:	22ac      	movs	r2, #172	; 0xac
   120d2:	f002 ff5b 	bl	14f8c <printk>
   120d6:	21ac      	movs	r1, #172	; 0xac
   120d8:	4805      	ldr	r0, [pc, #20]	; (120f0 <z_get_next_timeout_expiry+0x64>)
   120da:	f003 f823 	bl	15124 <assert_post_action>
	__asm__ volatile(
   120de:	f385 8811 	msr	BASEPRI, r5
   120e2:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   120e6:	4620      	mov	r0, r4
   120e8:	bd38      	pop	{r3, r4, r5, pc}
   120ea:	bf00      	nop
   120ec:	20000c7c 	.word	0x20000c7c
   120f0:	00017eac 	.word	0x00017eac
   120f4:	00017e72 	.word	0x00017e72

000120f8 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   120f8:	b570      	push	{r4, r5, r6, lr}
   120fa:	4604      	mov	r4, r0
   120fc:	460d      	mov	r5, r1
	__asm__ volatile(
   120fe:	f04f 0320 	mov.w	r3, #32
   12102:	f3ef 8611 	mrs	r6, BASEPRI
   12106:	f383 8811 	msr	BASEPRI, r3
   1210a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1210e:	4816      	ldr	r0, [pc, #88]	; (12168 <z_set_timeout_expiry+0x70>)
   12110:	f7fe fcb2 	bl	10a78 <z_spin_lock_valid>
   12114:	b940      	cbnz	r0, 12128 <z_set_timeout_expiry+0x30>
   12116:	4915      	ldr	r1, [pc, #84]	; (1216c <z_set_timeout_expiry+0x74>)
   12118:	4815      	ldr	r0, [pc, #84]	; (12170 <z_set_timeout_expiry+0x78>)
   1211a:	2281      	movs	r2, #129	; 0x81
   1211c:	f002 ff36 	bl	14f8c <printk>
   12120:	2181      	movs	r1, #129	; 0x81
   12122:	4812      	ldr	r0, [pc, #72]	; (1216c <z_set_timeout_expiry+0x74>)
   12124:	f002 fffe 	bl	15124 <assert_post_action>
	z_spin_lock_set_owner(l);
   12128:	480f      	ldr	r0, [pc, #60]	; (12168 <z_set_timeout_expiry+0x70>)
   1212a:	f7fe fcc1 	bl	10ab0 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   1212e:	f7ff fe8b 	bl	11e48 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   12132:	2801      	cmp	r0, #1
   12134:	dd05      	ble.n	12142 <z_set_timeout_expiry+0x4a>
   12136:	42a0      	cmp	r0, r4
   12138:	db03      	blt.n	12142 <z_set_timeout_expiry+0x4a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1213a:	4629      	mov	r1, r5
   1213c:	4620      	mov	r0, r4
   1213e:	f7fc fb3f 	bl	e7c0 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12142:	4809      	ldr	r0, [pc, #36]	; (12168 <z_set_timeout_expiry+0x70>)
   12144:	f7fe fca6 	bl	10a94 <z_spin_unlock_valid>
   12148:	b940      	cbnz	r0, 1215c <z_set_timeout_expiry+0x64>
   1214a:	4908      	ldr	r1, [pc, #32]	; (1216c <z_set_timeout_expiry+0x74>)
   1214c:	4808      	ldr	r0, [pc, #32]	; (12170 <z_set_timeout_expiry+0x78>)
   1214e:	22ac      	movs	r2, #172	; 0xac
   12150:	f002 ff1c 	bl	14f8c <printk>
   12154:	21ac      	movs	r1, #172	; 0xac
   12156:	4805      	ldr	r0, [pc, #20]	; (1216c <z_set_timeout_expiry+0x74>)
   12158:	f002 ffe4 	bl	15124 <assert_post_action>
	__asm__ volatile(
   1215c:	f386 8811 	msr	BASEPRI, r6
   12160:	f3bf 8f6f 	isb	sy
		}
	}
}
   12164:	bd70      	pop	{r4, r5, r6, pc}
   12166:	bf00      	nop
   12168:	20000c7c 	.word	0x20000c7c
   1216c:	00017eac 	.word	0x00017eac
   12170:	00017e72 	.word	0x00017e72

00012174 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   12174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12178:	b085      	sub	sp, #20
   1217a:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1217c:	f7ff f9fe 	bl	1157c <z_time_slice>
	__asm__ volatile(
   12180:	f04f 0320 	mov.w	r3, #32
   12184:	f3ef 8911 	mrs	r9, BASEPRI
   12188:	f383 8811 	msr	BASEPRI, r3
   1218c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12190:	484c      	ldr	r0, [pc, #304]	; (122c4 <sys_clock_announce+0x150>)
   12192:	f7fe fc71 	bl	10a78 <z_spin_lock_valid>
   12196:	b940      	cbnz	r0, 121aa <sys_clock_announce+0x36>
   12198:	494b      	ldr	r1, [pc, #300]	; (122c8 <sys_clock_announce+0x154>)
   1219a:	484c      	ldr	r0, [pc, #304]	; (122cc <sys_clock_announce+0x158>)
   1219c:	2281      	movs	r2, #129	; 0x81
   1219e:	f002 fef5 	bl	14f8c <printk>
   121a2:	2181      	movs	r1, #129	; 0x81
   121a4:	4848      	ldr	r0, [pc, #288]	; (122c8 <sys_clock_announce+0x154>)
   121a6:	f002 ffbd 	bl	15124 <assert_post_action>
	z_spin_lock_set_owner(l);
   121aa:	4f49      	ldr	r7, [pc, #292]	; (122d0 <sys_clock_announce+0x15c>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   121ac:	4e49      	ldr	r6, [pc, #292]	; (122d4 <sys_clock_announce+0x160>)
   121ae:	46bb      	mov	fp, r7
   121b0:	4844      	ldr	r0, [pc, #272]	; (122c4 <sys_clock_announce+0x150>)
	return list->head == list;
   121b2:	f8df a124 	ldr.w	sl, [pc, #292]	; 122d8 <sys_clock_announce+0x164>
   121b6:	f7fe fc7b 	bl	10ab0 <z_spin_lock_set_owner>
   121ba:	6034      	str	r4, [r6, #0]
   121bc:	f8d6 c000 	ldr.w	ip, [r6]
   121c0:	f8da 8000 	ldr.w	r8, [sl]
   121c4:	4662      	mov	r2, ip
   121c6:	e9d7 3400 	ldrd	r3, r4, [r7]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   121ca:	45d0      	cmp	r8, sl
   121cc:	e9cd 3402 	strd	r3, r4, [sp, #8]
   121d0:	ea4f 73e2 	mov.w	r3, r2, asr #31
   121d4:	e9cd 2300 	strd	r2, r3, [sp]
   121d8:	d011      	beq.n	121fe <sys_clock_announce+0x8a>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   121da:	f1b8 0f00 	cmp.w	r8, #0
   121de:	d00e      	beq.n	121fe <sys_clock_announce+0x8a>
   121e0:	e9d8 1204 	ldrd	r1, r2, [r8, #16]
   121e4:	e9dd 3400 	ldrd	r3, r4, [sp]
   121e8:	428b      	cmp	r3, r1
   121ea:	eb74 0302 	sbcs.w	r3, r4, r2
   121ee:	da2a      	bge.n	12246 <sys_clock_announce+0xd2>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   121f0:	9b00      	ldr	r3, [sp, #0]
   121f2:	1ac8      	subs	r0, r1, r3
   121f4:	9b01      	ldr	r3, [sp, #4]
   121f6:	eb62 0103 	sbc.w	r1, r2, r3
   121fa:	e9c8 0104 	strd	r0, r1, [r8, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   121fe:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   12200:	9b00      	ldr	r3, [sp, #0]
   12202:	9a02      	ldr	r2, [sp, #8]
   12204:	9903      	ldr	r1, [sp, #12]
   12206:	189a      	adds	r2, r3, r2
   12208:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   1220a:	6034      	str	r4, [r6, #0]
	curr_tick += announce_remaining;
   1220c:	eb41 0303 	adc.w	r3, r1, r3
   12210:	e9cb 2300 	strd	r2, r3, [fp]

	sys_clock_set_timeout(next_timeout(), false);
   12214:	f7ff fe18 	bl	11e48 <next_timeout>
   12218:	4621      	mov	r1, r4
   1221a:	f7fc fad1 	bl	e7c0 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1221e:	4829      	ldr	r0, [pc, #164]	; (122c4 <sys_clock_announce+0x150>)
   12220:	f7fe fc38 	bl	10a94 <z_spin_unlock_valid>
   12224:	b940      	cbnz	r0, 12238 <sys_clock_announce+0xc4>
   12226:	4928      	ldr	r1, [pc, #160]	; (122c8 <sys_clock_announce+0x154>)
   12228:	4828      	ldr	r0, [pc, #160]	; (122cc <sys_clock_announce+0x158>)
   1222a:	22ac      	movs	r2, #172	; 0xac
   1222c:	f002 feae 	bl	14f8c <printk>
   12230:	21ac      	movs	r1, #172	; 0xac
   12232:	4825      	ldr	r0, [pc, #148]	; (122c8 <sys_clock_announce+0x154>)
   12234:	f002 ff76 	bl	15124 <assert_post_action>
	__asm__ volatile(
   12238:	f389 8811 	msr	BASEPRI, r9
   1223c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   12240:	b005      	add	sp, #20
   12242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   12246:	2200      	movs	r2, #0
		curr_tick += dt;
   12248:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
		t->dticks = 0;
   1224c:	2300      	movs	r3, #0
		curr_tick += dt;
   1224e:	1864      	adds	r4, r4, r1
		announce_remaining -= dt;
   12250:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   12254:	eb45 75e1 	adc.w	r5, r5, r1, asr #31
		announce_remaining -= dt;
   12258:	6030      	str	r0, [r6, #0]
		t->dticks = 0;
   1225a:	e9c8 2304 	strd	r2, r3, [r8, #16]
		remove_timeout(t);
   1225e:	4640      	mov	r0, r8
		curr_tick += dt;
   12260:	e9c7 4500 	strd	r4, r5, [r7]
		remove_timeout(t);
   12264:	f7ff fdd6 	bl	11e14 <remove_timeout>
   12268:	4816      	ldr	r0, [pc, #88]	; (122c4 <sys_clock_announce+0x150>)
   1226a:	f7fe fc13 	bl	10a94 <z_spin_unlock_valid>
   1226e:	b940      	cbnz	r0, 12282 <sys_clock_announce+0x10e>
   12270:	4915      	ldr	r1, [pc, #84]	; (122c8 <sys_clock_announce+0x154>)
   12272:	4816      	ldr	r0, [pc, #88]	; (122cc <sys_clock_announce+0x158>)
   12274:	22ac      	movs	r2, #172	; 0xac
   12276:	f002 fe89 	bl	14f8c <printk>
   1227a:	21ac      	movs	r1, #172	; 0xac
   1227c:	4812      	ldr	r0, [pc, #72]	; (122c8 <sys_clock_announce+0x154>)
   1227e:	f002 ff51 	bl	15124 <assert_post_action>
   12282:	f389 8811 	msr	BASEPRI, r9
   12286:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1228a:	4640      	mov	r0, r8
   1228c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   12290:	4798      	blx	r3
	__asm__ volatile(
   12292:	f04f 0320 	mov.w	r3, #32
   12296:	f3ef 8911 	mrs	r9, BASEPRI
   1229a:	f383 8811 	msr	BASEPRI, r3
   1229e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   122a2:	4808      	ldr	r0, [pc, #32]	; (122c4 <sys_clock_announce+0x150>)
   122a4:	f7fe fbe8 	bl	10a78 <z_spin_lock_valid>
   122a8:	b940      	cbnz	r0, 122bc <sys_clock_announce+0x148>
   122aa:	4907      	ldr	r1, [pc, #28]	; (122c8 <sys_clock_announce+0x154>)
   122ac:	4807      	ldr	r0, [pc, #28]	; (122cc <sys_clock_announce+0x158>)
   122ae:	2281      	movs	r2, #129	; 0x81
   122b0:	f002 fe6c 	bl	14f8c <printk>
   122b4:	2181      	movs	r1, #129	; 0x81
   122b6:	4804      	ldr	r0, [pc, #16]	; (122c8 <sys_clock_announce+0x154>)
   122b8:	f002 ff34 	bl	15124 <assert_post_action>
	z_spin_lock_set_owner(l);
   122bc:	4801      	ldr	r0, [pc, #4]	; (122c4 <sys_clock_announce+0x150>)
   122be:	f7fe fbf7 	bl	10ab0 <z_spin_lock_set_owner>
	return k;
   122c2:	e77b      	b.n	121bc <sys_clock_announce+0x48>
   122c4:	20000c7c 	.word	0x20000c7c
   122c8:	00017eac 	.word	0x00017eac
   122cc:	00017e72 	.word	0x00017e72
   122d0:	20000270 	.word	0x20000270
   122d4:	20000c78 	.word	0x20000c78
   122d8:	20000044 	.word	0x20000044

000122dc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   122dc:	b570      	push	{r4, r5, r6, lr}
   122de:	f04f 0320 	mov.w	r3, #32
   122e2:	f3ef 8611 	mrs	r6, BASEPRI
   122e6:	f383 8811 	msr	BASEPRI, r3
   122ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   122ee:	4816      	ldr	r0, [pc, #88]	; (12348 <sys_clock_tick_get+0x6c>)
   122f0:	f7fe fbc2 	bl	10a78 <z_spin_lock_valid>
   122f4:	b940      	cbnz	r0, 12308 <sys_clock_tick_get+0x2c>
   122f6:	4915      	ldr	r1, [pc, #84]	; (1234c <sys_clock_tick_get+0x70>)
   122f8:	4815      	ldr	r0, [pc, #84]	; (12350 <sys_clock_tick_get+0x74>)
   122fa:	2281      	movs	r2, #129	; 0x81
   122fc:	f002 fe46 	bl	14f8c <printk>
   12300:	2181      	movs	r1, #129	; 0x81
   12302:	4812      	ldr	r0, [pc, #72]	; (1234c <sys_clock_tick_get+0x70>)
   12304:	f002 ff0e 	bl	15124 <assert_post_action>
	z_spin_lock_set_owner(l);
   12308:	480f      	ldr	r0, [pc, #60]	; (12348 <sys_clock_tick_get+0x6c>)
   1230a:	f7fe fbd1 	bl	10ab0 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   1230e:	f7fc fa89 	bl	e824 <sys_clock_elapsed>
   12312:	4b10      	ldr	r3, [pc, #64]	; (12354 <sys_clock_tick_get+0x78>)
   12314:	e9d3 4500 	ldrd	r4, r5, [r3]
   12318:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1231a:	480b      	ldr	r0, [pc, #44]	; (12348 <sys_clock_tick_get+0x6c>)
   1231c:	f145 0500 	adc.w	r5, r5, #0
   12320:	f7fe fbb8 	bl	10a94 <z_spin_unlock_valid>
   12324:	b940      	cbnz	r0, 12338 <sys_clock_tick_get+0x5c>
   12326:	4909      	ldr	r1, [pc, #36]	; (1234c <sys_clock_tick_get+0x70>)
   12328:	4809      	ldr	r0, [pc, #36]	; (12350 <sys_clock_tick_get+0x74>)
   1232a:	22ac      	movs	r2, #172	; 0xac
   1232c:	f002 fe2e 	bl	14f8c <printk>
   12330:	21ac      	movs	r1, #172	; 0xac
   12332:	4806      	ldr	r0, [pc, #24]	; (1234c <sys_clock_tick_get+0x70>)
   12334:	f002 fef6 	bl	15124 <assert_post_action>
	__asm__ volatile(
   12338:	f386 8811 	msr	BASEPRI, r6
   1233c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   12340:	4620      	mov	r0, r4
   12342:	4629      	mov	r1, r5
   12344:	bd70      	pop	{r4, r5, r6, pc}
   12346:	bf00      	nop
   12348:	20000c7c 	.word	0x20000c7c
   1234c:	00017eac 	.word	0x00017eac
   12350:	00017e72 	.word	0x00017e72
   12354:	20000270 	.word	0x20000270

00012358 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   12358:	4a02      	ldr	r2, [pc, #8]	; (12364 <boot_banner+0xc>)
   1235a:	4903      	ldr	r1, [pc, #12]	; (12368 <boot_banner+0x10>)
   1235c:	4803      	ldr	r0, [pc, #12]	; (1236c <boot_banner+0x14>)
   1235e:	f002 be15 	b.w	14f8c <printk>
   12362:	bf00      	nop
   12364:	0001801a 	.word	0x0001801a
   12368:	00018de8 	.word	0x00018de8
   1236c:	00018df8 	.word	0x00018df8

00012370 <nrf_cc3xx_platform_init>:
   12370:	b510      	push	{r4, lr}
   12372:	4c0c      	ldr	r4, [pc, #48]	; (123a4 <nrf_cc3xx_platform_init+0x34>)
   12374:	6823      	ldr	r3, [r4, #0]
   12376:	b113      	cbz	r3, 1237e <nrf_cc3xx_platform_init+0xe>
   12378:	4b0b      	ldr	r3, [pc, #44]	; (123a8 <nrf_cc3xx_platform_init+0x38>)
   1237a:	681b      	ldr	r3, [r3, #0]
   1237c:	b92b      	cbnz	r3, 1238a <nrf_cc3xx_platform_init+0x1a>
   1237e:	f000 faa5 	bl	128cc <CC_LibInit>
   12382:	b930      	cbnz	r0, 12392 <nrf_cc3xx_platform_init+0x22>
   12384:	2201      	movs	r2, #1
   12386:	4b08      	ldr	r3, [pc, #32]	; (123a8 <nrf_cc3xx_platform_init+0x38>)
   12388:	601a      	str	r2, [r3, #0]
   1238a:	2301      	movs	r3, #1
   1238c:	2000      	movs	r0, #0
   1238e:	6023      	str	r3, [r4, #0]
   12390:	bd10      	pop	{r4, pc}
   12392:	3801      	subs	r0, #1
   12394:	2807      	cmp	r0, #7
   12396:	d901      	bls.n	1239c <nrf_cc3xx_platform_init+0x2c>
   12398:	4804      	ldr	r0, [pc, #16]	; (123ac <nrf_cc3xx_platform_init+0x3c>)
   1239a:	bd10      	pop	{r4, pc}
   1239c:	4b04      	ldr	r3, [pc, #16]	; (123b0 <nrf_cc3xx_platform_init+0x40>)
   1239e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   123a2:	bd10      	pop	{r4, pc}
   123a4:	20000c80 	.word	0x20000c80
   123a8:	20000c84 	.word	0x20000c84
   123ac:	ffff8ffe 	.word	0xffff8ffe
   123b0:	00017cc4 	.word	0x00017cc4

000123b4 <nrf_cc3xx_platform_abort>:
   123b4:	f3bf 8f4f 	dsb	sy
   123b8:	4905      	ldr	r1, [pc, #20]	; (123d0 <nrf_cc3xx_platform_abort+0x1c>)
   123ba:	4b06      	ldr	r3, [pc, #24]	; (123d4 <nrf_cc3xx_platform_abort+0x20>)
   123bc:	68ca      	ldr	r2, [r1, #12]
   123be:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   123c2:	4313      	orrs	r3, r2
   123c4:	60cb      	str	r3, [r1, #12]
   123c6:	f3bf 8f4f 	dsb	sy
   123ca:	bf00      	nop
   123cc:	e7fd      	b.n	123ca <nrf_cc3xx_platform_abort+0x16>
   123ce:	bf00      	nop
   123d0:	e000ed00 	.word	0xe000ed00
   123d4:	05fa0004 	.word	0x05fa0004

000123d8 <CC_PalAbort>:
   123d8:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   123dc:	2100      	movs	r1, #0
   123de:	b430      	push	{r4, r5}
   123e0:	4a08      	ldr	r2, [pc, #32]	; (12404 <CC_PalAbort+0x2c>)
   123e2:	4c09      	ldr	r4, [pc, #36]	; (12408 <CC_PalAbort+0x30>)
   123e4:	4d09      	ldr	r5, [pc, #36]	; (1240c <CC_PalAbort+0x34>)
   123e6:	6023      	str	r3, [r4, #0]
   123e8:	602b      	str	r3, [r5, #0]
   123ea:	6013      	str	r3, [r2, #0]
   123ec:	60e3      	str	r3, [r4, #12]
   123ee:	60eb      	str	r3, [r5, #12]
   123f0:	60d3      	str	r3, [r2, #12]
   123f2:	61a3      	str	r3, [r4, #24]
   123f4:	4a06      	ldr	r2, [pc, #24]	; (12410 <CC_PalAbort+0x38>)
   123f6:	4c07      	ldr	r4, [pc, #28]	; (12414 <CC_PalAbort+0x3c>)
   123f8:	61ab      	str	r3, [r5, #24]
   123fa:	6863      	ldr	r3, [r4, #4]
   123fc:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   12400:	bc30      	pop	{r4, r5}
   12402:	4718      	bx	r3
   12404:	50845408 	.word	0x50845408
   12408:	50845400 	.word	0x50845400
   1240c:	50845404 	.word	0x50845404
   12410:	50844000 	.word	0x50844000
   12414:	2000004c 	.word	0x2000004c

00012418 <nrf_cc3xx_platform_set_abort>:
   12418:	4b02      	ldr	r3, [pc, #8]	; (12424 <nrf_cc3xx_platform_set_abort+0xc>)
   1241a:	e9d0 1200 	ldrd	r1, r2, [r0]
   1241e:	e9c3 1200 	strd	r1, r2, [r3]
   12422:	4770      	bx	lr
   12424:	2000004c 	.word	0x2000004c

00012428 <nrf_cc3xx_platform_ctr_drbg_init>:
   12428:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1242c:	4c15      	ldr	r4, [pc, #84]	; (12484 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   1242e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1248c <nrf_cc3xx_platform_ctr_drbg_init+0x64>
   12432:	2800      	cmp	r0, #0
   12434:	bf18      	it	ne
   12436:	4604      	movne	r4, r0
   12438:	6820      	ldr	r0, [r4, #0]
   1243a:	b083      	sub	sp, #12
   1243c:	4540      	cmp	r0, r8
   1243e:	d01d      	beq.n	1247c <nrf_cc3xx_platform_ctr_drbg_init+0x54>
   12440:	4616      	mov	r6, r2
   12442:	460d      	mov	r5, r1
   12444:	4620      	mov	r0, r4
   12446:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   1244a:	f104 0904 	add.w	r9, r4, #4
   1244e:	f000 fe4f 	bl	130f0 <mbedtls_platform_zeroize>
   12452:	f504 778c 	add.w	r7, r4, #280	; 0x118
   12456:	4648      	mov	r0, r9
   12458:	f000 f91c 	bl	12694 <cc_mbedtls_entropy_init>
   1245c:	4638      	mov	r0, r7
   1245e:	f001 fa27 	bl	138b0 <cc_mbedtls_ctr_drbg_init>
   12462:	464a      	mov	r2, r9
   12464:	4638      	mov	r0, r7
   12466:	462b      	mov	r3, r5
   12468:	4907      	ldr	r1, [pc, #28]	; (12488 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   1246a:	9600      	str	r6, [sp, #0]
   1246c:	f001 fa32 	bl	138d4 <cc_mbedtls_ctr_drbg_seed>
   12470:	b908      	cbnz	r0, 12476 <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   12472:	f8c4 8000 	str.w	r8, [r4]
   12476:	b003      	add	sp, #12
   12478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1247c:	2000      	movs	r0, #0
   1247e:	b003      	add	sp, #12
   12480:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12484:	20000c88 	.word	0x20000c88
   12488:	00012715 	.word	0x00012715
   1248c:	5ac9bca5 	.word	0x5ac9bca5

00012490 <nrf_cc3xx_platform_ctr_drbg_get>:
   12490:	b5f0      	push	{r4, r5, r6, r7, lr}
   12492:	4c0d      	ldr	r4, [pc, #52]	; (124c8 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   12494:	4e0d      	ldr	r6, [pc, #52]	; (124cc <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   12496:	2800      	cmp	r0, #0
   12498:	bf08      	it	eq
   1249a:	4620      	moveq	r0, r4
   1249c:	6807      	ldr	r7, [r0, #0]
   1249e:	b083      	sub	sp, #12
   124a0:	42b7      	cmp	r7, r6
   124a2:	d10e      	bne.n	124c2 <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   124a4:	2600      	movs	r6, #0
   124a6:	461d      	mov	r5, r3
   124a8:	f500 708c 	add.w	r0, r0, #280	; 0x118
   124ac:	4633      	mov	r3, r6
   124ae:	9600      	str	r6, [sp, #0]
   124b0:	4614      	mov	r4, r2
   124b2:	f001 fa61 	bl	13978 <cc_mbedtls_ctr_drbg_random_with_add>
   124b6:	2800      	cmp	r0, #0
   124b8:	bf18      	it	ne
   124ba:	4634      	movne	r4, r6
   124bc:	602c      	str	r4, [r5, #0]
   124be:	b003      	add	sp, #12
   124c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   124c2:	4803      	ldr	r0, [pc, #12]	; (124d0 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   124c4:	e7fb      	b.n	124be <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   124c6:	bf00      	nop
   124c8:	20000c88 	.word	0x20000c88
   124cc:	5ac9bca5 	.word	0x5ac9bca5
   124d0:	ffff8fe8 	.word	0xffff8fe8

000124d4 <mutex_unlock>:
   124d4:	b148      	cbz	r0, 124ea <mutex_unlock+0x16>
   124d6:	6843      	ldr	r3, [r0, #4]
   124d8:	b12b      	cbz	r3, 124e6 <mutex_unlock+0x12>
   124da:	f3bf 8f5f 	dmb	sy
   124de:	2300      	movs	r3, #0
   124e0:	6003      	str	r3, [r0, #0]
   124e2:	4618      	mov	r0, r3
   124e4:	4770      	bx	lr
   124e6:	4802      	ldr	r0, [pc, #8]	; (124f0 <mutex_unlock+0x1c>)
   124e8:	4770      	bx	lr
   124ea:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   124ee:	4770      	bx	lr
   124f0:	ffff8fea 	.word	0xffff8fea

000124f4 <mutex_free>:
   124f4:	b510      	push	{r4, lr}
   124f6:	4604      	mov	r4, r0
   124f8:	b128      	cbz	r0, 12506 <mutex_free+0x12>
   124fa:	6863      	ldr	r3, [r4, #4]
   124fc:	b113      	cbz	r3, 12504 <mutex_free+0x10>
   124fe:	2300      	movs	r3, #0
   12500:	6023      	str	r3, [r4, #0]
   12502:	6063      	str	r3, [r4, #4]
   12504:	bd10      	pop	{r4, pc}
   12506:	4b02      	ldr	r3, [pc, #8]	; (12510 <mutex_free+0x1c>)
   12508:	4802      	ldr	r0, [pc, #8]	; (12514 <mutex_free+0x20>)
   1250a:	685b      	ldr	r3, [r3, #4]
   1250c:	4798      	blx	r3
   1250e:	e7f4      	b.n	124fa <mutex_free+0x6>
   12510:	2000004c 	.word	0x2000004c
   12514:	00017ce4 	.word	0x00017ce4

00012518 <mutex_init>:
   12518:	b510      	push	{r4, lr}
   1251a:	4604      	mov	r4, r0
   1251c:	b130      	cbz	r0, 1252c <mutex_init+0x14>
   1251e:	2200      	movs	r2, #0
   12520:	6863      	ldr	r3, [r4, #4]
   12522:	6022      	str	r2, [r4, #0]
   12524:	f043 0301 	orr.w	r3, r3, #1
   12528:	6063      	str	r3, [r4, #4]
   1252a:	bd10      	pop	{r4, pc}
   1252c:	4801      	ldr	r0, [pc, #4]	; (12534 <mutex_init+0x1c>)
   1252e:	f7ff ff53 	bl	123d8 <CC_PalAbort>
   12532:	e7f4      	b.n	1251e <mutex_init+0x6>
   12534:	00017d0c 	.word	0x00017d0c

00012538 <mutex_lock>:
   12538:	b180      	cbz	r0, 1255c <mutex_lock+0x24>
   1253a:	6843      	ldr	r3, [r0, #4]
   1253c:	b163      	cbz	r3, 12558 <mutex_lock+0x20>
   1253e:	2201      	movs	r2, #1
   12540:	e8d0 3fef 	ldaex	r3, [r0]
   12544:	e8c0 2fe1 	stlex	r1, r2, [r0]
   12548:	2900      	cmp	r1, #0
   1254a:	d1f9      	bne.n	12540 <mutex_lock+0x8>
   1254c:	2b01      	cmp	r3, #1
   1254e:	d0f7      	beq.n	12540 <mutex_lock+0x8>
   12550:	f3bf 8f5f 	dmb	sy
   12554:	2000      	movs	r0, #0
   12556:	4770      	bx	lr
   12558:	4802      	ldr	r0, [pc, #8]	; (12564 <mutex_lock+0x2c>)
   1255a:	4770      	bx	lr
   1255c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   12560:	4770      	bx	lr
   12562:	bf00      	nop
   12564:	ffff8fea 	.word	0xffff8fea

00012568 <nrf_cc3xx_platform_set_mutexes>:
   12568:	b470      	push	{r4, r5, r6}
   1256a:	4b0b      	ldr	r3, [pc, #44]	; (12598 <nrf_cc3xx_platform_set_mutexes+0x30>)
   1256c:	6806      	ldr	r6, [r0, #0]
   1256e:	68c2      	ldr	r2, [r0, #12]
   12570:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
   12574:	e9c3 4202 	strd	r4, r2, [r3, #8]
   12578:	e9c3 6500 	strd	r6, r5, [r3]
   1257c:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
   12580:	680e      	ldr	r6, [r1, #0]
   12582:	4b06      	ldr	r3, [pc, #24]	; (1259c <nrf_cc3xx_platform_set_mutexes+0x34>)
   12584:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
   12588:	e9c3 6500 	strd	r6, r5, [r3]
   1258c:	e9c3 4002 	strd	r4, r0, [r3, #8]
   12590:	611a      	str	r2, [r3, #16]
   12592:	bc70      	pop	{r4, r5, r6}
   12594:	4770      	bx	lr
   12596:	bf00      	nop
   12598:	2000005c 	.word	0x2000005c
   1259c:	2000006c 	.word	0x2000006c

000125a0 <entropy_update>:
   125a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   125a4:	2b20      	cmp	r3, #32
   125a6:	461d      	mov	r5, r3
   125a8:	4606      	mov	r6, r0
   125aa:	4689      	mov	r9, r1
   125ac:	4690      	mov	r8, r2
   125ae:	b08b      	sub	sp, #44	; 0x2c
   125b0:	d826      	bhi.n	12600 <entropy_update+0x60>
   125b2:	b2db      	uxtb	r3, r3
   125b4:	af02      	add	r7, sp, #8
   125b6:	6831      	ldr	r1, [r6, #0]
   125b8:	f88d 9004 	strb.w	r9, [sp, #4]
   125bc:	f88d 3005 	strb.w	r3, [sp, #5]
   125c0:	f106 0904 	add.w	r9, r6, #4
   125c4:	b921      	cbnz	r1, 125d0 <entropy_update+0x30>
   125c6:	4648      	mov	r0, r9
   125c8:	f000 fe3c 	bl	13244 <cc_mbedtls_sha256_starts_ret>
   125cc:	4604      	mov	r4, r0
   125ce:	b940      	cbnz	r0, 125e2 <entropy_update+0x42>
   125d0:	2301      	movs	r3, #1
   125d2:	2202      	movs	r2, #2
   125d4:	4648      	mov	r0, r9
   125d6:	6033      	str	r3, [r6, #0]
   125d8:	a901      	add	r1, sp, #4
   125da:	f000 fe47 	bl	1326c <cc_mbedtls_sha256_update_ret>
   125de:	4604      	mov	r4, r0
   125e0:	b138      	cbz	r0, 125f2 <entropy_update+0x52>
   125e2:	4638      	mov	r0, r7
   125e4:	2120      	movs	r1, #32
   125e6:	f000 fd83 	bl	130f0 <mbedtls_platform_zeroize>
   125ea:	4620      	mov	r0, r4
   125ec:	b00b      	add	sp, #44	; 0x2c
   125ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   125f2:	462a      	mov	r2, r5
   125f4:	4641      	mov	r1, r8
   125f6:	4648      	mov	r0, r9
   125f8:	f000 fe38 	bl	1326c <cc_mbedtls_sha256_update_ret>
   125fc:	4604      	mov	r4, r0
   125fe:	e7f0      	b.n	125e2 <entropy_update+0x42>
   12600:	af02      	add	r7, sp, #8
   12602:	4619      	mov	r1, r3
   12604:	4610      	mov	r0, r2
   12606:	2300      	movs	r3, #0
   12608:	463a      	mov	r2, r7
   1260a:	f001 fa8f 	bl	13b2c <cc_mbedtls_sha256_ret>
   1260e:	4604      	mov	r4, r0
   12610:	2800      	cmp	r0, #0
   12612:	d1e6      	bne.n	125e2 <entropy_update+0x42>
   12614:	2320      	movs	r3, #32
   12616:	46b8      	mov	r8, r7
   12618:	461d      	mov	r5, r3
   1261a:	e7cc      	b.n	125b6 <entropy_update+0x16>

0001261c <entropy_gather_internal.part.0>:
   1261c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1261e:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   12622:	b0a7      	sub	sp, #156	; 0x9c
   12624:	2b00      	cmp	r3, #0
   12626:	bfd8      	it	le
   12628:	ae02      	addle	r6, sp, #8
   1262a:	dd2c      	ble.n	12686 <entropy_gather_internal.part.0+0x6a>
   1262c:	4605      	mov	r5, r0
   1262e:	2300      	movs	r3, #0
   12630:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
   12634:	ae02      	add	r6, sp, #8
   12636:	9301      	str	r3, [sp, #4]
   12638:	f1a4 0701 	sub.w	r7, r4, #1
   1263c:	4631      	mov	r1, r6
   1263e:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
   12642:	2290      	movs	r2, #144	; 0x90
   12644:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   12648:	ab01      	add	r3, sp, #4
   1264a:	fab7 f787 	clz	r7, r7
   1264e:	47a0      	blx	r4
   12650:	097f      	lsrs	r7, r7, #5
   12652:	4604      	mov	r4, r0
   12654:	b910      	cbnz	r0, 1265c <entropy_gather_internal.part.0+0x40>
   12656:	9b01      	ldr	r3, [sp, #4]
   12658:	b93b      	cbnz	r3, 1266a <entropy_gather_internal.part.0+0x4e>
   1265a:	b1a7      	cbz	r7, 12686 <entropy_gather_internal.part.0+0x6a>
   1265c:	4630      	mov	r0, r6
   1265e:	2190      	movs	r1, #144	; 0x90
   12660:	f000 fd46 	bl	130f0 <mbedtls_platform_zeroize>
   12664:	4620      	mov	r0, r4
   12666:	b027      	add	sp, #156	; 0x9c
   12668:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1266a:	4601      	mov	r1, r0
   1266c:	4632      	mov	r2, r6
   1266e:	4628      	mov	r0, r5
   12670:	f7ff ff96 	bl	125a0 <entropy_update>
   12674:	b950      	cbnz	r0, 1268c <entropy_gather_internal.part.0+0x70>
   12676:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   1267a:	9a01      	ldr	r2, [sp, #4]
   1267c:	4413      	add	r3, r2
   1267e:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
   12682:	2f00      	cmp	r7, #0
   12684:	d1ea      	bne.n	1265c <entropy_gather_internal.part.0+0x40>
   12686:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   1268a:	e7e7      	b.n	1265c <entropy_gather_internal.part.0+0x40>
   1268c:	4604      	mov	r4, r0
   1268e:	4620      	mov	r0, r4
   12690:	b027      	add	sp, #156	; 0x9c
   12692:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012694 <cc_mbedtls_entropy_init>:
   12694:	b570      	push	{r4, r5, r6, lr}
   12696:	2500      	movs	r5, #0
   12698:	4604      	mov	r4, r0
   1269a:	4629      	mov	r1, r5
   1269c:	2214      	movs	r2, #20
   1269e:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
   126a2:	30f8      	adds	r0, #248	; 0xf8
   126a4:	f002 fe91 	bl	153ca <memset>
   126a8:	4b16      	ldr	r3, [pc, #88]	; (12704 <cc_mbedtls_entropy_init+0x70>)
   126aa:	f504 7686 	add.w	r6, r4, #268	; 0x10c
   126ae:	681b      	ldr	r3, [r3, #0]
   126b0:	4630      	mov	r0, r6
   126b2:	4798      	blx	r3
   126b4:	4620      	mov	r0, r4
   126b6:	f840 5b04 	str.w	r5, [r0], #4
   126ba:	f000 fda9 	bl	13210 <cc_mbedtls_sha256_init>
   126be:	4b12      	ldr	r3, [pc, #72]	; (12708 <cc_mbedtls_entropy_init+0x74>)
   126c0:	4630      	mov	r0, r6
   126c2:	681b      	ldr	r3, [r3, #0]
   126c4:	4798      	blx	r3
   126c6:	b9d8      	cbnz	r0, 12700 <cc_mbedtls_entropy_init+0x6c>
   126c8:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   126cc:	42ab      	cmp	r3, r5
   126ce:	dc11      	bgt.n	126f4 <cc_mbedtls_entropy_init+0x60>
   126d0:	2101      	movs	r1, #1
   126d2:	2520      	movs	r5, #32
   126d4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   126d8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   126dc:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   126e0:	480a      	ldr	r0, [pc, #40]	; (1270c <cc_mbedtls_entropy_init+0x78>)
   126e2:	440b      	add	r3, r1
   126e4:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
   126e8:	f8c2 00f8 	str.w	r0, [r2, #248]	; 0xf8
   126ec:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   126f0:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
   126f4:	4b06      	ldr	r3, [pc, #24]	; (12710 <cc_mbedtls_entropy_init+0x7c>)
   126f6:	4630      	mov	r0, r6
   126f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   126fc:	681b      	ldr	r3, [r3, #0]
   126fe:	4718      	bx	r3
   12700:	bd70      	pop	{r4, r5, r6, pc}
   12702:	bf00      	nop
   12704:	200000b0 	.word	0x200000b0
   12708:	200000b4 	.word	0x200000b4
   1270c:	00013105 	.word	0x00013105
   12710:	200000b8 	.word	0x200000b8

00012714 <cc_mbedtls_entropy_func>:
   12714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12718:	2a20      	cmp	r2, #32
   1271a:	b088      	sub	sp, #32
   1271c:	d878      	bhi.n	12810 <cc_mbedtls_entropy_func+0xfc>
   1271e:	4b3e      	ldr	r3, [pc, #248]	; (12818 <cc_mbedtls_entropy_func+0x104>)
   12720:	f500 7986 	add.w	r9, r0, #268	; 0x10c
   12724:	4604      	mov	r4, r0
   12726:	681b      	ldr	r3, [r3, #0]
   12728:	4648      	mov	r0, r9
   1272a:	4617      	mov	r7, r2
   1272c:	4688      	mov	r8, r1
   1272e:	4798      	blx	r3
   12730:	4605      	mov	r5, r0
   12732:	bb40      	cbnz	r0, 12786 <cc_mbedtls_entropy_func+0x72>
   12734:	f240 1601 	movw	r6, #257	; 0x101
   12738:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1273c:	2b00      	cmp	r3, #0
   1273e:	d063      	beq.n	12808 <cc_mbedtls_entropy_func+0xf4>
   12740:	4620      	mov	r0, r4
   12742:	f7ff ff6b 	bl	1261c <entropy_gather_internal.part.0>
   12746:	4605      	mov	r5, r0
   12748:	2800      	cmp	r0, #0
   1274a:	d15f      	bne.n	1280c <cc_mbedtls_entropy_func+0xf8>
   1274c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   12750:	2b00      	cmp	r3, #0
   12752:	dd07      	ble.n	12764 <cc_mbedtls_entropy_func+0x50>
   12754:	e9d4 0240 	ldrd	r0, r2, [r4, #256]	; 0x100
   12758:	4290      	cmp	r0, r2
   1275a:	d303      	bcc.n	12764 <cc_mbedtls_entropy_func+0x50>
   1275c:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   12760:	2a01      	cmp	r2, #1
   12762:	d014      	beq.n	1278e <cc_mbedtls_entropy_func+0x7a>
   12764:	3e01      	subs	r6, #1
   12766:	d1e9      	bne.n	1273c <cc_mbedtls_entropy_func+0x28>
   12768:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1276c:	466e      	mov	r6, sp
   1276e:	4630      	mov	r0, r6
   12770:	2120      	movs	r1, #32
   12772:	f000 fcbd 	bl	130f0 <mbedtls_platform_zeroize>
   12776:	4b29      	ldr	r3, [pc, #164]	; (1281c <cc_mbedtls_entropy_func+0x108>)
   12778:	4648      	mov	r0, r9
   1277a:	681b      	ldr	r3, [r3, #0]
   1277c:	4798      	blx	r3
   1277e:	2800      	cmp	r0, #0
   12780:	bf18      	it	ne
   12782:	f06f 051d 	mvnne.w	r5, #29
   12786:	4628      	mov	r0, r5
   12788:	b008      	add	sp, #32
   1278a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1278e:	281f      	cmp	r0, #31
   12790:	d9e8      	bls.n	12764 <cc_mbedtls_entropy_func+0x50>
   12792:	466e      	mov	r6, sp
   12794:	4629      	mov	r1, r5
   12796:	2220      	movs	r2, #32
   12798:	4630      	mov	r0, r6
   1279a:	f104 0a04 	add.w	sl, r4, #4
   1279e:	f002 fe14 	bl	153ca <memset>
   127a2:	4631      	mov	r1, r6
   127a4:	4650      	mov	r0, sl
   127a6:	f000 fd69 	bl	1327c <cc_mbedtls_sha256_finish_ret>
   127aa:	4605      	mov	r5, r0
   127ac:	2800      	cmp	r0, #0
   127ae:	d1de      	bne.n	1276e <cc_mbedtls_entropy_func+0x5a>
   127b0:	4650      	mov	r0, sl
   127b2:	f000 fd41 	bl	13238 <cc_mbedtls_sha256_free>
   127b6:	4650      	mov	r0, sl
   127b8:	f000 fd2a 	bl	13210 <cc_mbedtls_sha256_init>
   127bc:	4629      	mov	r1, r5
   127be:	4650      	mov	r0, sl
   127c0:	f000 fd40 	bl	13244 <cc_mbedtls_sha256_starts_ret>
   127c4:	4605      	mov	r5, r0
   127c6:	2800      	cmp	r0, #0
   127c8:	d1d1      	bne.n	1276e <cc_mbedtls_entropy_func+0x5a>
   127ca:	4650      	mov	r0, sl
   127cc:	2220      	movs	r2, #32
   127ce:	4631      	mov	r1, r6
   127d0:	f000 fd4c 	bl	1326c <cc_mbedtls_sha256_update_ret>
   127d4:	4605      	mov	r5, r0
   127d6:	2800      	cmp	r0, #0
   127d8:	d1c9      	bne.n	1276e <cc_mbedtls_entropy_func+0x5a>
   127da:	4603      	mov	r3, r0
   127dc:	4632      	mov	r2, r6
   127de:	2120      	movs	r1, #32
   127e0:	4630      	mov	r0, r6
   127e2:	f001 f9a3 	bl	13b2c <cc_mbedtls_sha256_ret>
   127e6:	4605      	mov	r5, r0
   127e8:	2800      	cmp	r0, #0
   127ea:	d1c0      	bne.n	1276e <cc_mbedtls_entropy_func+0x5a>
   127ec:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   127f0:	463a      	mov	r2, r7
   127f2:	2b00      	cmp	r3, #0
   127f4:	bfc8      	it	gt
   127f6:	2300      	movgt	r3, #0
   127f8:	4640      	mov	r0, r8
   127fa:	4631      	mov	r1, r6
   127fc:	bfc8      	it	gt
   127fe:	f8c4 3100 	strgt.w	r3, [r4, #256]	; 0x100
   12802:	f002 fdb7 	bl	15374 <memcpy>
   12806:	e7b2      	b.n	1276e <cc_mbedtls_entropy_func+0x5a>
   12808:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   1280c:	466e      	mov	r6, sp
   1280e:	e7ae      	b.n	1276e <cc_mbedtls_entropy_func+0x5a>
   12810:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   12814:	e7b7      	b.n	12786 <cc_mbedtls_entropy_func+0x72>
   12816:	bf00      	nop
   12818:	200000b4 	.word	0x200000b4
   1281c:	200000b8 	.word	0x200000b8

00012820 <RndStartupTest.constprop.0>:
   12820:	2100      	movs	r1, #0
   12822:	b530      	push	{r4, r5, lr}
   12824:	b08d      	sub	sp, #52	; 0x34
   12826:	2228      	movs	r2, #40	; 0x28
   12828:	a802      	add	r0, sp, #8
   1282a:	9101      	str	r1, [sp, #4]
   1282c:	f002 fdcd 	bl	153ca <memset>
   12830:	a802      	add	r0, sp, #8
   12832:	f001 f9a3 	bl	13b7c <RNG_PLAT_SetUserRngParameters>
   12836:	4604      	mov	r4, r0
   12838:	b110      	cbz	r0, 12840 <RndStartupTest.constprop.0+0x20>
   1283a:	4620      	mov	r0, r4
   1283c:	b00d      	add	sp, #52	; 0x34
   1283e:	bd30      	pop	{r4, r5, pc}
   12840:	4d1b      	ldr	r5, [pc, #108]	; (128b0 <RndStartupTest.constprop.0+0x90>)
   12842:	f04f 31ff 	mov.w	r1, #4294967295
   12846:	6828      	ldr	r0, [r5, #0]
   12848:	f000 f924 	bl	12a94 <CC_PalMutexLock>
   1284c:	bb58      	cbnz	r0, 128a6 <RndStartupTest.constprop.0+0x86>
   1284e:	4b19      	ldr	r3, [pc, #100]	; (128b4 <RndStartupTest.constprop.0+0x94>)
   12850:	6818      	ldr	r0, [r3, #0]
   12852:	f010 0001 	ands.w	r0, r0, #1
   12856:	d117      	bne.n	12888 <RndStartupTest.constprop.0+0x68>
   12858:	f000 f94c 	bl	12af4 <CC_PalPowerSaveModeSelect>
   1285c:	b9f8      	cbnz	r0, 1289e <RndStartupTest.constprop.0+0x7e>
   1285e:	4a16      	ldr	r2, [pc, #88]	; (128b8 <RndStartupTest.constprop.0+0x98>)
   12860:	a902      	add	r1, sp, #8
   12862:	a801      	add	r0, sp, #4
   12864:	f000 fc36 	bl	130d4 <LLF_RND_RunTrngStartupTest>
   12868:	4604      	mov	r4, r0
   1286a:	2001      	movs	r0, #1
   1286c:	f000 f942 	bl	12af4 <CC_PalPowerSaveModeSelect>
   12870:	b988      	cbnz	r0, 12896 <RndStartupTest.constprop.0+0x76>
   12872:	6828      	ldr	r0, [r5, #0]
   12874:	f000 f916 	bl	12aa4 <CC_PalMutexUnlock>
   12878:	2800      	cmp	r0, #0
   1287a:	d0de      	beq.n	1283a <RndStartupTest.constprop.0+0x1a>
   1287c:	480f      	ldr	r0, [pc, #60]	; (128bc <RndStartupTest.constprop.0+0x9c>)
   1287e:	f7ff fdab 	bl	123d8 <CC_PalAbort>
   12882:	4620      	mov	r0, r4
   12884:	b00d      	add	sp, #52	; 0x34
   12886:	bd30      	pop	{r4, r5, pc}
   12888:	6828      	ldr	r0, [r5, #0]
   1288a:	2405      	movs	r4, #5
   1288c:	f000 f90a 	bl	12aa4 <CC_PalMutexUnlock>
   12890:	2800      	cmp	r0, #0
   12892:	d0d2      	beq.n	1283a <RndStartupTest.constprop.0+0x1a>
   12894:	e7f2      	b.n	1287c <RndStartupTest.constprop.0+0x5c>
   12896:	480a      	ldr	r0, [pc, #40]	; (128c0 <RndStartupTest.constprop.0+0xa0>)
   12898:	f7ff fd9e 	bl	123d8 <CC_PalAbort>
   1289c:	e7e9      	b.n	12872 <RndStartupTest.constprop.0+0x52>
   1289e:	4809      	ldr	r0, [pc, #36]	; (128c4 <RndStartupTest.constprop.0+0xa4>)
   128a0:	f7ff fd9a 	bl	123d8 <CC_PalAbort>
   128a4:	e7db      	b.n	1285e <RndStartupTest.constprop.0+0x3e>
   128a6:	4808      	ldr	r0, [pc, #32]	; (128c8 <RndStartupTest.constprop.0+0xa8>)
   128a8:	f7ff fd96 	bl	123d8 <CC_PalAbort>
   128ac:	e7cf      	b.n	1284e <RndStartupTest.constprop.0+0x2e>
   128ae:	bf00      	nop
   128b0:	200000ac 	.word	0x200000ac
   128b4:	50846e34 	.word	0x50846e34
   128b8:	20000ebc 	.word	0x20000ebc
   128bc:	00017d88 	.word	0x00017d88
   128c0:	00017d68 	.word	0x00017d68
   128c4:	00017d48 	.word	0x00017d48
   128c8:	00017d30 	.word	0x00017d30

000128cc <CC_LibInit>:
   128cc:	b510      	push	{r4, lr}
   128ce:	b082      	sub	sp, #8
   128d0:	f000 f82a 	bl	12928 <CC_HalInit>
   128d4:	b9d0      	cbnz	r0, 1290c <CC_LibInit+0x40>
   128d6:	f000 f849 	bl	1296c <CC_PalInit>
   128da:	b9e8      	cbnz	r0, 12918 <CC_LibInit+0x4c>
   128dc:	4b10      	ldr	r3, [pc, #64]	; (12920 <CC_LibInit+0x54>)
   128de:	6018      	str	r0, [r3, #0]
   128e0:	f7ff ff9e 	bl	12820 <RndStartupTest.constprop.0>
   128e4:	4604      	mov	r4, r0
   128e6:	b968      	cbnz	r0, 12904 <CC_LibInit+0x38>
   128e8:	4602      	mov	r2, r0
   128ea:	4601      	mov	r1, r0
   128ec:	f7ff fd9c 	bl	12428 <nrf_cc3xx_platform_ctr_drbg_init>
   128f0:	b940      	cbnz	r0, 12904 <CC_LibInit+0x38>
   128f2:	2268      	movs	r2, #104	; 0x68
   128f4:	490b      	ldr	r1, [pc, #44]	; (12924 <CC_LibInit+0x58>)
   128f6:	ab01      	add	r3, sp, #4
   128f8:	f7ff fdca 	bl	12490 <nrf_cc3xx_platform_ctr_drbg_get>
   128fc:	b910      	cbnz	r0, 12904 <CC_LibInit+0x38>
   128fe:	4620      	mov	r0, r4
   12900:	b002      	add	sp, #8
   12902:	bd10      	pop	{r4, pc}
   12904:	2405      	movs	r4, #5
   12906:	4620      	mov	r0, r4
   12908:	b002      	add	sp, #8
   1290a:	bd10      	pop	{r4, pc}
   1290c:	2403      	movs	r4, #3
   1290e:	f000 f85b 	bl	129c8 <CC_PalTerminate>
   12912:	4620      	mov	r0, r4
   12914:	b002      	add	sp, #8
   12916:	bd10      	pop	{r4, pc}
   12918:	2404      	movs	r4, #4
   1291a:	4620      	mov	r0, r4
   1291c:	b002      	add	sp, #8
   1291e:	bd10      	pop	{r4, pc}
   12920:	50845a0c 	.word	0x50845a0c
   12924:	20000e54 	.word	0x20000e54

00012928 <CC_HalInit>:
   12928:	2000      	movs	r0, #0
   1292a:	4770      	bx	lr

0001292c <CC_HalClearInterruptBit>:
   1292c:	0543      	lsls	r3, r0, #21
   1292e:	d503      	bpl.n	12938 <CC_HalClearInterruptBit+0xc>
   12930:	f04f 32ff 	mov.w	r2, #4294967295
   12934:	4b02      	ldr	r3, [pc, #8]	; (12940 <CC_HalClearInterruptBit+0x14>)
   12936:	601a      	str	r2, [r3, #0]
   12938:	4b02      	ldr	r3, [pc, #8]	; (12944 <CC_HalClearInterruptBit+0x18>)
   1293a:	6018      	str	r0, [r3, #0]
   1293c:	4770      	bx	lr
   1293e:	bf00      	nop
   12940:	50845108 	.word	0x50845108
   12944:	50845a08 	.word	0x50845a08

00012948 <CC_HalMaskInterrupt>:
   12948:	4b01      	ldr	r3, [pc, #4]	; (12950 <CC_HalMaskInterrupt+0x8>)
   1294a:	6018      	str	r0, [r3, #0]
   1294c:	4770      	bx	lr
   1294e:	bf00      	nop
   12950:	50845a04 	.word	0x50845a04

00012954 <CC_HalWaitInterrupt>:
   12954:	b108      	cbz	r0, 1295a <CC_HalWaitInterrupt+0x6>
   12956:	f000 b875 	b.w	12a44 <CC_PalWaitInterrupt>
   1295a:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1295e:	4770      	bx	lr

00012960 <CC_HalWaitInterruptRND>:
   12960:	b108      	cbz	r0, 12966 <CC_HalWaitInterruptRND+0x6>
   12962:	f000 b84f 	b.w	12a04 <CC_PalWaitInterruptRND>
   12966:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1296a:	4770      	bx	lr

0001296c <CC_PalInit>:
   1296c:	b510      	push	{r4, lr}
   1296e:	4811      	ldr	r0, [pc, #68]	; (129b4 <CC_PalInit+0x48>)
   12970:	f000 f87c 	bl	12a6c <CC_PalMutexCreate>
   12974:	b100      	cbz	r0, 12978 <CC_PalInit+0xc>
   12976:	bd10      	pop	{r4, pc}
   12978:	480f      	ldr	r0, [pc, #60]	; (129b8 <CC_PalInit+0x4c>)
   1297a:	f000 f877 	bl	12a6c <CC_PalMutexCreate>
   1297e:	2800      	cmp	r0, #0
   12980:	d1f9      	bne.n	12976 <CC_PalInit+0xa>
   12982:	4c0e      	ldr	r4, [pc, #56]	; (129bc <CC_PalInit+0x50>)
   12984:	4620      	mov	r0, r4
   12986:	f000 f871 	bl	12a6c <CC_PalMutexCreate>
   1298a:	2800      	cmp	r0, #0
   1298c:	d1f3      	bne.n	12976 <CC_PalInit+0xa>
   1298e:	4b0c      	ldr	r3, [pc, #48]	; (129c0 <CC_PalInit+0x54>)
   12990:	480c      	ldr	r0, [pc, #48]	; (129c4 <CC_PalInit+0x58>)
   12992:	601c      	str	r4, [r3, #0]
   12994:	f000 f86a 	bl	12a6c <CC_PalMutexCreate>
   12998:	4601      	mov	r1, r0
   1299a:	2800      	cmp	r0, #0
   1299c:	d1eb      	bne.n	12976 <CC_PalInit+0xa>
   1299e:	f000 f82d 	bl	129fc <CC_PalDmaInit>
   129a2:	4604      	mov	r4, r0
   129a4:	b108      	cbz	r0, 129aa <CC_PalInit+0x3e>
   129a6:	4620      	mov	r0, r4
   129a8:	bd10      	pop	{r4, pc}
   129aa:	f000 f885 	bl	12ab8 <CC_PalPowerSaveModeInit>
   129ae:	4620      	mov	r0, r4
   129b0:	e7fa      	b.n	129a8 <CC_PalInit+0x3c>
   129b2:	bf00      	nop
   129b4:	200000a8 	.word	0x200000a8
   129b8:	2000009c 	.word	0x2000009c
   129bc:	200000a4 	.word	0x200000a4
   129c0:	200000ac 	.word	0x200000ac
   129c4:	200000a0 	.word	0x200000a0

000129c8 <CC_PalTerminate>:
   129c8:	b508      	push	{r3, lr}
   129ca:	4808      	ldr	r0, [pc, #32]	; (129ec <CC_PalTerminate+0x24>)
   129cc:	f000 f858 	bl	12a80 <CC_PalMutexDestroy>
   129d0:	4807      	ldr	r0, [pc, #28]	; (129f0 <CC_PalTerminate+0x28>)
   129d2:	f000 f855 	bl	12a80 <CC_PalMutexDestroy>
   129d6:	4807      	ldr	r0, [pc, #28]	; (129f4 <CC_PalTerminate+0x2c>)
   129d8:	f000 f852 	bl	12a80 <CC_PalMutexDestroy>
   129dc:	4806      	ldr	r0, [pc, #24]	; (129f8 <CC_PalTerminate+0x30>)
   129de:	f000 f84f 	bl	12a80 <CC_PalMutexDestroy>
   129e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   129e6:	f000 b80b 	b.w	12a00 <CC_PalDmaTerminate>
   129ea:	bf00      	nop
   129ec:	200000a8 	.word	0x200000a8
   129f0:	2000009c 	.word	0x2000009c
   129f4:	200000a4 	.word	0x200000a4
   129f8:	200000a0 	.word	0x200000a0

000129fc <CC_PalDmaInit>:
   129fc:	2000      	movs	r0, #0
   129fe:	4770      	bx	lr

00012a00 <CC_PalDmaTerminate>:
   12a00:	4770      	bx	lr
   12a02:	bf00      	nop

00012a04 <CC_PalWaitInterruptRND>:
   12a04:	b410      	push	{r4}
   12a06:	4602      	mov	r2, r0
   12a08:	4c0a      	ldr	r4, [pc, #40]	; (12a34 <CC_PalWaitInterruptRND+0x30>)
   12a0a:	e001      	b.n	12a10 <CC_PalWaitInterruptRND+0xc>
   12a0c:	4213      	tst	r3, r2
   12a0e:	d106      	bne.n	12a1e <CC_PalWaitInterruptRND+0x1a>
   12a10:	6823      	ldr	r3, [r4, #0]
   12a12:	f413 7080 	ands.w	r0, r3, #256	; 0x100
   12a16:	d0f9      	beq.n	12a0c <CC_PalWaitInterruptRND+0x8>
   12a18:	2001      	movs	r0, #1
   12a1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   12a1e:	b121      	cbz	r1, 12a2a <CC_PalWaitInterruptRND+0x26>
   12a20:	4b05      	ldr	r3, [pc, #20]	; (12a38 <CC_PalWaitInterruptRND+0x34>)
   12a22:	4c06      	ldr	r4, [pc, #24]	; (12a3c <CC_PalWaitInterruptRND+0x38>)
   12a24:	681b      	ldr	r3, [r3, #0]
   12a26:	600b      	str	r3, [r1, #0]
   12a28:	6023      	str	r3, [r4, #0]
   12a2a:	4b05      	ldr	r3, [pc, #20]	; (12a40 <CC_PalWaitInterruptRND+0x3c>)
   12a2c:	601a      	str	r2, [r3, #0]
   12a2e:	bc10      	pop	{r4}
   12a30:	4770      	bx	lr
   12a32:	bf00      	nop
   12a34:	50845a00 	.word	0x50845a00
   12a38:	50845104 	.word	0x50845104
   12a3c:	50845108 	.word	0x50845108
   12a40:	50845a08 	.word	0x50845a08

00012a44 <CC_PalWaitInterrupt>:
   12a44:	4602      	mov	r2, r0
   12a46:	4907      	ldr	r1, [pc, #28]	; (12a64 <CC_PalWaitInterrupt+0x20>)
   12a48:	e001      	b.n	12a4e <CC_PalWaitInterrupt+0xa>
   12a4a:	421a      	tst	r2, r3
   12a4c:	d106      	bne.n	12a5c <CC_PalWaitInterrupt+0x18>
   12a4e:	680b      	ldr	r3, [r1, #0]
   12a50:	f413 7080 	ands.w	r0, r3, #256	; 0x100
   12a54:	d0f9      	beq.n	12a4a <CC_PalWaitInterrupt+0x6>
   12a56:	2001      	movs	r0, #1
   12a58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   12a5c:	4b02      	ldr	r3, [pc, #8]	; (12a68 <CC_PalWaitInterrupt+0x24>)
   12a5e:	601a      	str	r2, [r3, #0]
   12a60:	4770      	bx	lr
   12a62:	bf00      	nop
   12a64:	50845a00 	.word	0x50845a00
   12a68:	50845a08 	.word	0x50845a08

00012a6c <CC_PalMutexCreate>:
   12a6c:	b508      	push	{r3, lr}
   12a6e:	4b03      	ldr	r3, [pc, #12]	; (12a7c <CC_PalMutexCreate+0x10>)
   12a70:	6802      	ldr	r2, [r0, #0]
   12a72:	681b      	ldr	r3, [r3, #0]
   12a74:	6810      	ldr	r0, [r2, #0]
   12a76:	4798      	blx	r3
   12a78:	2000      	movs	r0, #0
   12a7a:	bd08      	pop	{r3, pc}
   12a7c:	2000005c 	.word	0x2000005c

00012a80 <CC_PalMutexDestroy>:
   12a80:	b508      	push	{r3, lr}
   12a82:	4b03      	ldr	r3, [pc, #12]	; (12a90 <CC_PalMutexDestroy+0x10>)
   12a84:	6802      	ldr	r2, [r0, #0]
   12a86:	685b      	ldr	r3, [r3, #4]
   12a88:	6810      	ldr	r0, [r2, #0]
   12a8a:	4798      	blx	r3
   12a8c:	2000      	movs	r0, #0
   12a8e:	bd08      	pop	{r3, pc}
   12a90:	2000005c 	.word	0x2000005c

00012a94 <CC_PalMutexLock>:
   12a94:	4b02      	ldr	r3, [pc, #8]	; (12aa0 <CC_PalMutexLock+0xc>)
   12a96:	6802      	ldr	r2, [r0, #0]
   12a98:	689b      	ldr	r3, [r3, #8]
   12a9a:	6810      	ldr	r0, [r2, #0]
   12a9c:	4718      	bx	r3
   12a9e:	bf00      	nop
   12aa0:	2000005c 	.word	0x2000005c

00012aa4 <CC_PalMutexUnlock>:
   12aa4:	b508      	push	{r3, lr}
   12aa6:	4b03      	ldr	r3, [pc, #12]	; (12ab4 <CC_PalMutexUnlock+0x10>)
   12aa8:	6802      	ldr	r2, [r0, #0]
   12aaa:	68db      	ldr	r3, [r3, #12]
   12aac:	6810      	ldr	r0, [r2, #0]
   12aae:	4798      	blx	r3
   12ab0:	2000      	movs	r0, #0
   12ab2:	bd08      	pop	{r3, pc}
   12ab4:	2000005c 	.word	0x2000005c

00012ab8 <CC_PalPowerSaveModeInit>:
   12ab8:	b570      	push	{r4, r5, r6, lr}
   12aba:	4c09      	ldr	r4, [pc, #36]	; (12ae0 <CC_PalPowerSaveModeInit+0x28>)
   12abc:	4d09      	ldr	r5, [pc, #36]	; (12ae4 <CC_PalPowerSaveModeInit+0x2c>)
   12abe:	6920      	ldr	r0, [r4, #16]
   12ac0:	68ab      	ldr	r3, [r5, #8]
   12ac2:	4798      	blx	r3
   12ac4:	b118      	cbz	r0, 12ace <CC_PalPowerSaveModeInit+0x16>
   12ac6:	4b08      	ldr	r3, [pc, #32]	; (12ae8 <CC_PalPowerSaveModeInit+0x30>)
   12ac8:	4808      	ldr	r0, [pc, #32]	; (12aec <CC_PalPowerSaveModeInit+0x34>)
   12aca:	685b      	ldr	r3, [r3, #4]
   12acc:	4798      	blx	r3
   12ace:	2100      	movs	r1, #0
   12ad0:	4a07      	ldr	r2, [pc, #28]	; (12af0 <CC_PalPowerSaveModeInit+0x38>)
   12ad2:	68eb      	ldr	r3, [r5, #12]
   12ad4:	6011      	str	r1, [r2, #0]
   12ad6:	6920      	ldr	r0, [r4, #16]
   12ad8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12adc:	4718      	bx	r3
   12ade:	bf00      	nop
   12ae0:	2000006c 	.word	0x2000006c
   12ae4:	2000005c 	.word	0x2000005c
   12ae8:	2000004c 	.word	0x2000004c
   12aec:	00017da0 	.word	0x00017da0
   12af0:	200010dc 	.word	0x200010dc

00012af4 <CC_PalPowerSaveModeSelect>:
   12af4:	b570      	push	{r4, r5, r6, lr}
   12af6:	4d1a      	ldr	r5, [pc, #104]	; (12b60 <CC_PalPowerSaveModeSelect+0x6c>)
   12af8:	4e1a      	ldr	r6, [pc, #104]	; (12b64 <CC_PalPowerSaveModeSelect+0x70>)
   12afa:	4604      	mov	r4, r0
   12afc:	68b2      	ldr	r2, [r6, #8]
   12afe:	6928      	ldr	r0, [r5, #16]
   12b00:	4790      	blx	r2
   12b02:	b9f0      	cbnz	r0, 12b42 <CC_PalPowerSaveModeSelect+0x4e>
   12b04:	b15c      	cbz	r4, 12b1e <CC_PalPowerSaveModeSelect+0x2a>
   12b06:	4c18      	ldr	r4, [pc, #96]	; (12b68 <CC_PalPowerSaveModeSelect+0x74>)
   12b08:	6823      	ldr	r3, [r4, #0]
   12b0a:	b1ab      	cbz	r3, 12b38 <CC_PalPowerSaveModeSelect+0x44>
   12b0c:	2b01      	cmp	r3, #1
   12b0e:	d01a      	beq.n	12b46 <CC_PalPowerSaveModeSelect+0x52>
   12b10:	3b01      	subs	r3, #1
   12b12:	6023      	str	r3, [r4, #0]
   12b14:	6928      	ldr	r0, [r5, #16]
   12b16:	68f3      	ldr	r3, [r6, #12]
   12b18:	4798      	blx	r3
   12b1a:	2000      	movs	r0, #0
   12b1c:	bd70      	pop	{r4, r5, r6, pc}
   12b1e:	4c12      	ldr	r4, [pc, #72]	; (12b68 <CC_PalPowerSaveModeSelect+0x74>)
   12b20:	6821      	ldr	r1, [r4, #0]
   12b22:	b939      	cbnz	r1, 12b34 <CC_PalPowerSaveModeSelect+0x40>
   12b24:	2001      	movs	r0, #1
   12b26:	4b11      	ldr	r3, [pc, #68]	; (12b6c <CC_PalPowerSaveModeSelect+0x78>)
   12b28:	4a11      	ldr	r2, [pc, #68]	; (12b70 <CC_PalPowerSaveModeSelect+0x7c>)
   12b2a:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   12b2e:	6813      	ldr	r3, [r2, #0]
   12b30:	2b00      	cmp	r3, #0
   12b32:	d1fc      	bne.n	12b2e <CC_PalPowerSaveModeSelect+0x3a>
   12b34:	3101      	adds	r1, #1
   12b36:	6021      	str	r1, [r4, #0]
   12b38:	68f3      	ldr	r3, [r6, #12]
   12b3a:	6928      	ldr	r0, [r5, #16]
   12b3c:	4798      	blx	r3
   12b3e:	2000      	movs	r0, #0
   12b40:	bd70      	pop	{r4, r5, r6, pc}
   12b42:	480c      	ldr	r0, [pc, #48]	; (12b74 <CC_PalPowerSaveModeSelect+0x80>)
   12b44:	bd70      	pop	{r4, r5, r6, pc}
   12b46:	4a0a      	ldr	r2, [pc, #40]	; (12b70 <CC_PalPowerSaveModeSelect+0x7c>)
   12b48:	6813      	ldr	r3, [r2, #0]
   12b4a:	2b00      	cmp	r3, #0
   12b4c:	d1fc      	bne.n	12b48 <CC_PalPowerSaveModeSelect+0x54>
   12b4e:	4a07      	ldr	r2, [pc, #28]	; (12b6c <CC_PalPowerSaveModeSelect+0x78>)
   12b50:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   12b54:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   12b58:	f7ff fef6 	bl	12948 <CC_HalMaskInterrupt>
   12b5c:	6823      	ldr	r3, [r4, #0]
   12b5e:	e7d7      	b.n	12b10 <CC_PalPowerSaveModeSelect+0x1c>
   12b60:	2000006c 	.word	0x2000006c
   12b64:	2000005c 	.word	0x2000005c
   12b68:	200010dc 	.word	0x200010dc
   12b6c:	50844000 	.word	0x50844000
   12b70:	50845910 	.word	0x50845910
   12b74:	ffff8fe9 	.word	0xffff8fe9

00012b78 <mutex_init>:
   12b78:	4b01      	ldr	r3, [pc, #4]	; (12b80 <mutex_init+0x8>)
   12b7a:	681b      	ldr	r3, [r3, #0]
   12b7c:	4718      	bx	r3
   12b7e:	bf00      	nop
   12b80:	2000005c 	.word	0x2000005c

00012b84 <mutex_lock>:
   12b84:	4b01      	ldr	r3, [pc, #4]	; (12b8c <mutex_lock+0x8>)
   12b86:	689b      	ldr	r3, [r3, #8]
   12b88:	4718      	bx	r3
   12b8a:	bf00      	nop
   12b8c:	2000005c 	.word	0x2000005c

00012b90 <mutex_unlock>:
   12b90:	4b01      	ldr	r3, [pc, #4]	; (12b98 <mutex_unlock+0x8>)
   12b92:	68db      	ldr	r3, [r3, #12]
   12b94:	4718      	bx	r3
   12b96:	bf00      	nop
   12b98:	2000005c 	.word	0x2000005c

00012b9c <startTrngHW>:
   12b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12b9e:	2800      	cmp	r0, #0
   12ba0:	d070      	beq.n	12c84 <startTrngHW+0xe8>
   12ba2:	460c      	mov	r4, r1
   12ba4:	2900      	cmp	r1, #0
   12ba6:	d06d      	beq.n	12c84 <startTrngHW+0xe8>
   12ba8:	461d      	mov	r5, r3
   12baa:	2b00      	cmp	r3, #0
   12bac:	d06a      	beq.n	12c84 <startTrngHW+0xe8>
   12bae:	4606      	mov	r6, r0
   12bb0:	b11a      	cbz	r2, 12bba <startTrngHW+0x1e>
   12bb2:	2201      	movs	r2, #1
   12bb4:	2300      	movs	r3, #0
   12bb6:	602a      	str	r2, [r5, #0]
   12bb8:	6003      	str	r3, [r0, #0]
   12bba:	682b      	ldr	r3, [r5, #0]
   12bbc:	2b00      	cmp	r3, #0
   12bbe:	d05e      	beq.n	12c7e <startTrngHW+0xe2>
   12bc0:	4629      	mov	r1, r5
   12bc2:	4620      	mov	r0, r4
   12bc4:	f001 f8a2 	bl	13d0c <LLF_RND_GetFastestRosc>
   12bc8:	4607      	mov	r7, r0
   12bca:	2800      	cmp	r0, #0
   12bcc:	d158      	bne.n	12c80 <startTrngHW+0xe4>
   12bce:	4621      	mov	r1, r4
   12bd0:	6828      	ldr	r0, [r5, #0]
   12bd2:	f001 f87d 	bl	13cd0 <LLF_RND_GetRoscSampleCnt>
   12bd6:	4607      	mov	r7, r0
   12bd8:	2800      	cmp	r0, #0
   12bda:	d151      	bne.n	12c80 <startTrngHW+0xe4>
   12bdc:	682b      	ldr	r3, [r5, #0]
   12bde:	2b08      	cmp	r3, #8
   12be0:	d05e      	beq.n	12ca0 <startTrngHW+0x104>
   12be2:	2b04      	cmp	r3, #4
   12be4:	d05f      	beq.n	12ca6 <startTrngHW+0x10a>
   12be6:	f1a3 0e02 	sub.w	lr, r3, #2
   12bea:	fabe fe8e 	clz	lr, lr
   12bee:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   12bf2:	2301      	movs	r3, #1
   12bf4:	469c      	mov	ip, r3
   12bf6:	4a2d      	ldr	r2, [pc, #180]	; (12cac <startTrngHW+0x110>)
   12bf8:	492d      	ldr	r1, [pc, #180]	; (12cb0 <startTrngHW+0x114>)
   12bfa:	6013      	str	r3, [r2, #0]
   12bfc:	4610      	mov	r0, r2
   12bfe:	600b      	str	r3, [r1, #0]
   12c00:	3a94      	subs	r2, #148	; 0x94
   12c02:	f8c0 c000 	str.w	ip, [r0]
   12c06:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12c08:	6013      	str	r3, [r2, #0]
   12c0a:	6811      	ldr	r1, [r2, #0]
   12c0c:	428b      	cmp	r3, r1
   12c0e:	d1f8      	bne.n	12c02 <startTrngHW+0x66>
   12c10:	2200      	movs	r2, #0
   12c12:	f06f 011b 	mvn.w	r1, #27
   12c16:	f04f 30ff 	mov.w	r0, #4294967295
   12c1a:	4b26      	ldr	r3, [pc, #152]	; (12cb4 <startTrngHW+0x118>)
   12c1c:	601a      	str	r2, [r3, #0]
   12c1e:	4a26      	ldr	r2, [pc, #152]	; (12cb8 <startTrngHW+0x11c>)
   12c20:	6010      	str	r0, [r2, #0]
   12c22:	f843 1c2c 	str.w	r1, [r3, #-44]
   12c26:	f8c2 e004 	str.w	lr, [r2, #4]
   12c2a:	f8d3 08d8 	ldr.w	r0, [r3, #2264]	; 0x8d8
   12c2e:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   12c32:	f7ff fe89 	bl	12948 <CC_HalMaskInterrupt>
   12c36:	220a      	movs	r2, #10
   12c38:	4b20      	ldr	r3, [pc, #128]	; (12cbc <startTrngHW+0x120>)
   12c3a:	601a      	str	r2, [r3, #0]
   12c3c:	9a06      	ldr	r2, [sp, #24]
   12c3e:	6923      	ldr	r3, [r4, #16]
   12c40:	2a01      	cmp	r2, #1
   12c42:	6a61      	ldr	r1, [r4, #36]	; 0x24
   12c44:	d021      	beq.n	12c8a <startTrngHW+0xee>
   12c46:	4a1e      	ldr	r2, [pc, #120]	; (12cc0 <startTrngHW+0x124>)
   12c48:	fba2 2303 	umull	r2, r3, r2, r3
   12c4c:	091b      	lsrs	r3, r3, #4
   12c4e:	2201      	movs	r2, #1
   12c50:	fb03 f301 	mul.w	r3, r3, r1
   12c54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   12c58:	491a      	ldr	r1, [pc, #104]	; (12cc4 <startTrngHW+0x128>)
   12c5a:	03db      	lsls	r3, r3, #15
   12c5c:	099b      	lsrs	r3, r3, #6
   12c5e:	600b      	str	r3, [r1, #0]
   12c60:	4b14      	ldr	r3, [pc, #80]	; (12cb4 <startTrngHW+0x118>)
   12c62:	4638      	mov	r0, r7
   12c64:	601a      	str	r2, [r3, #0]
   12c66:	6833      	ldr	r3, [r6, #0]
   12c68:	682a      	ldr	r2, [r5, #0]
   12c6a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   12c6e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   12c72:	6033      	str	r3, [r6, #0]
   12c74:	682a      	ldr	r2, [r5, #0]
   12c76:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12c7a:	6033      	str	r3, [r6, #0]
   12c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12c7e:	4f12      	ldr	r7, [pc, #72]	; (12cc8 <startTrngHW+0x12c>)
   12c80:	4638      	mov	r0, r7
   12c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12c84:	4f11      	ldr	r7, [pc, #68]	; (12ccc <startTrngHW+0x130>)
   12c86:	4638      	mov	r0, r7
   12c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12c8a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   12c8e:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
   12c92:	3201      	adds	r2, #1
   12c94:	d002      	beq.n	12c9c <startTrngHW+0x100>
   12c96:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   12c9a:	e7d4      	b.n	12c46 <startTrngHW+0xaa>
   12c9c:	2316      	movs	r3, #22
   12c9e:	e7d6      	b.n	12c4e <startTrngHW+0xb2>
   12ca0:	f04f 0e03 	mov.w	lr, #3
   12ca4:	e7a5      	b.n	12bf2 <startTrngHW+0x56>
   12ca6:	f04f 0e02 	mov.w	lr, #2
   12caa:	e7a2      	b.n	12bf2 <startTrngHW+0x56>
   12cac:	508451c4 	.word	0x508451c4
   12cb0:	50845140 	.word	0x50845140
   12cb4:	5084512c 	.word	0x5084512c
   12cb8:	50845108 	.word	0x50845108
   12cbc:	50845138 	.word	0x50845138
   12cc0:	aaaaaaab 	.word	0xaaaaaaab
   12cc4:	508451d8 	.word	0x508451d8
   12cc8:	00f10c31 	.word	0x00f10c31
   12ccc:	00f10c35 	.word	0x00f10c35

00012cd0 <LLF_RND_RepetitionCounterTest.part.0>:
   12cd0:	b4f0      	push	{r4, r5, r6, r7}
   12cd2:	2400      	movs	r4, #0
   12cd4:	00c9      	lsls	r1, r1, #3
   12cd6:	4626      	mov	r6, r4
   12cd8:	4627      	mov	r7, r4
   12cda:	f101 3cff 	add.w	ip, r1, #4294967295
   12cde:	e006      	b.n	12cee <LLF_RND_RepetitionCounterTest.part.0+0x1e>
   12ce0:	429f      	cmp	r7, r3
   12ce2:	d015      	beq.n	12d10 <LLF_RND_RepetitionCounterTest.part.0+0x40>
   12ce4:	2601      	movs	r6, #1
   12ce6:	4565      	cmp	r5, ip
   12ce8:	d818      	bhi.n	12d1c <LLF_RND_RepetitionCounterTest.part.0+0x4c>
   12cea:	462c      	mov	r4, r5
   12cec:	461f      	mov	r7, r3
   12cee:	0963      	lsrs	r3, r4, #5
   12cf0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   12cf4:	f004 011f 	and.w	r1, r4, #31
   12cf8:	40cb      	lsrs	r3, r1
   12cfa:	291f      	cmp	r1, #31
   12cfc:	f104 0501 	add.w	r5, r4, #1
   12d00:	bf18      	it	ne
   12d02:	f003 0301 	andne.w	r3, r3, #1
   12d06:	2c00      	cmp	r4, #0
   12d08:	d1ea      	bne.n	12ce0 <LLF_RND_RepetitionCounterTest.part.0+0x10>
   12d0a:	2601      	movs	r6, #1
   12d0c:	4635      	mov	r5, r6
   12d0e:	e7ec      	b.n	12cea <LLF_RND_RepetitionCounterTest.part.0+0x1a>
   12d10:	3601      	adds	r6, #1
   12d12:	4296      	cmp	r6, r2
   12d14:	d1e7      	bne.n	12ce6 <LLF_RND_RepetitionCounterTest.part.0+0x16>
   12d16:	4803      	ldr	r0, [pc, #12]	; (12d24 <LLF_RND_RepetitionCounterTest.part.0+0x54>)
   12d18:	bcf0      	pop	{r4, r5, r6, r7}
   12d1a:	4770      	bx	lr
   12d1c:	2000      	movs	r0, #0
   12d1e:	bcf0      	pop	{r4, r5, r6, r7}
   12d20:	4770      	bx	lr
   12d22:	bf00      	nop
   12d24:	00f10c36 	.word	0x00f10c36

00012d28 <LLF_RND_AdaptiveProportionTest>:
   12d28:	2800      	cmp	r0, #0
   12d2a:	d05f      	beq.n	12dec <LLF_RND_AdaptiveProportionTest+0xc4>
   12d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12d30:	1e4c      	subs	r4, r1, #1
   12d32:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   12d36:	d226      	bcs.n	12d86 <LLF_RND_AdaptiveProportionTest+0x5e>
   12d38:	b32b      	cbz	r3, 12d86 <LLF_RND_AdaptiveProportionTest+0x5e>
   12d3a:	b322      	cbz	r2, 12d86 <LLF_RND_AdaptiveProportionTest+0x5e>
   12d3c:	00cc      	lsls	r4, r1, #3
   12d3e:	2b01      	cmp	r3, #1
   12d40:	f104 3eff 	add.w	lr, r4, #4294967295
   12d44:	d02f      	beq.n	12da6 <LLF_RND_AdaptiveProportionTest+0x7e>
   12d46:	2100      	movs	r1, #0
   12d48:	468c      	mov	ip, r1
   12d4a:	460f      	mov	r7, r1
   12d4c:	460d      	mov	r5, r1
   12d4e:	f103 38ff 	add.w	r8, r3, #4294967295
   12d52:	094c      	lsrs	r4, r1, #5
   12d54:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   12d58:	f001 061f 	and.w	r6, r1, #31
   12d5c:	40f4      	lsrs	r4, r6
   12d5e:	2e1f      	cmp	r6, #31
   12d60:	bf18      	it	ne
   12d62:	f004 0401 	andne.w	r4, r4, #1
   12d66:	b921      	cbnz	r1, 12d72 <LLF_RND_AdaptiveProportionTest+0x4a>
   12d68:	2501      	movs	r5, #1
   12d6a:	46ac      	mov	ip, r5
   12d6c:	4629      	mov	r1, r5
   12d6e:	4627      	mov	r7, r4
   12d70:	e7ef      	b.n	12d52 <LLF_RND_AdaptiveProportionTest+0x2a>
   12d72:	42ab      	cmp	r3, r5
   12d74:	d013      	beq.n	12d9e <LLF_RND_AdaptiveProportionTest+0x76>
   12d76:	42a7      	cmp	r7, r4
   12d78:	d101      	bne.n	12d7e <LLF_RND_AdaptiveProportionTest+0x56>
   12d7a:	f10c 0c01 	add.w	ip, ip, #1
   12d7e:	4545      	cmp	r5, r8
   12d80:	d104      	bne.n	12d8c <LLF_RND_AdaptiveProportionTest+0x64>
   12d82:	4562      	cmp	r2, ip
   12d84:	d202      	bcs.n	12d8c <LLF_RND_AdaptiveProportionTest+0x64>
   12d86:	481a      	ldr	r0, [pc, #104]	; (12df0 <LLF_RND_AdaptiveProportionTest+0xc8>)
   12d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12d8c:	463c      	mov	r4, r7
   12d8e:	3101      	adds	r1, #1
   12d90:	458e      	cmp	lr, r1
   12d92:	f105 0501 	add.w	r5, r5, #1
   12d96:	d2ea      	bcs.n	12d6e <LLF_RND_AdaptiveProportionTest+0x46>
   12d98:	2000      	movs	r0, #0
   12d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12d9e:	2500      	movs	r5, #0
   12da0:	f04f 0c01 	mov.w	ip, #1
   12da4:	e7f3      	b.n	12d8e <LLF_RND_AdaptiveProportionTest+0x66>
   12da6:	2600      	movs	r6, #0
   12da8:	46b4      	mov	ip, r6
   12daa:	4637      	mov	r7, r6
   12dac:	4631      	mov	r1, r6
   12dae:	094b      	lsrs	r3, r1, #5
   12db0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   12db4:	f001 051f 	and.w	r5, r1, #31
   12db8:	40eb      	lsrs	r3, r5
   12dba:	2d1f      	cmp	r5, #31
   12dbc:	bf18      	it	ne
   12dbe:	f003 0301 	andne.w	r3, r3, #1
   12dc2:	b139      	cbz	r1, 12dd4 <LLF_RND_AdaptiveProportionTest+0xac>
   12dc4:	b95f      	cbnz	r7, 12dde <LLF_RND_AdaptiveProportionTest+0xb6>
   12dc6:	459c      	cmp	ip, r3
   12dc8:	d001      	beq.n	12dce <LLF_RND_AdaptiveProportionTest+0xa6>
   12dca:	4663      	mov	r3, ip
   12dcc:	e008      	b.n	12de0 <LLF_RND_AdaptiveProportionTest+0xb8>
   12dce:	4663      	mov	r3, ip
   12dd0:	3601      	adds	r6, #1
   12dd2:	e005      	b.n	12de0 <LLF_RND_AdaptiveProportionTest+0xb8>
   12dd4:	2601      	movs	r6, #1
   12dd6:	4631      	mov	r1, r6
   12dd8:	469c      	mov	ip, r3
   12dda:	2701      	movs	r7, #1
   12ddc:	e7e7      	b.n	12dae <LLF_RND_AdaptiveProportionTest+0x86>
   12dde:	463e      	mov	r6, r7
   12de0:	42b2      	cmp	r2, r6
   12de2:	d3d0      	bcc.n	12d86 <LLF_RND_AdaptiveProportionTest+0x5e>
   12de4:	3101      	adds	r1, #1
   12de6:	42a1      	cmp	r1, r4
   12de8:	d1f6      	bne.n	12dd8 <LLF_RND_AdaptiveProportionTest+0xb0>
   12dea:	e7d5      	b.n	12d98 <LLF_RND_AdaptiveProportionTest+0x70>
   12dec:	4800      	ldr	r0, [pc, #0]	; (12df0 <LLF_RND_AdaptiveProportionTest+0xc8>)
   12dee:	4770      	bx	lr
   12df0:	00f10c37 	.word	0x00f10c37

00012df4 <getTrngSource>:
   12df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12df8:	b08d      	sub	sp, #52	; 0x34
   12dfa:	9e18      	ldr	r6, [sp, #96]	; 0x60
   12dfc:	4607      	mov	r7, r0
   12dfe:	460c      	mov	r4, r1
   12e00:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   12e02:	2e00      	cmp	r6, #0
   12e04:	d14c      	bne.n	12ea0 <getTrngSource+0xac>
   12e06:	f8d1 b010 	ldr.w	fp, [r1, #16]
   12e0a:	2100      	movs	r1, #0
   12e0c:	601d      	str	r5, [r3, #0]
   12e0e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   12e10:	6019      	str	r1, [r3, #0]
   12e12:	2a00      	cmp	r2, #0
   12e14:	f000 811e 	beq.w	13054 <getTrngSource+0x260>
   12e18:	4a9a      	ldr	r2, [pc, #616]	; (13084 <getTrngSource+0x290>)
   12e1a:	4b9b      	ldr	r3, [pc, #620]	; (13088 <getTrngSource+0x294>)
   12e1c:	6811      	ldr	r1, [r2, #0]
   12e1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   12e20:	681b      	ldr	r3, [r3, #0]
   12e22:	429a      	cmp	r2, r3
   12e24:	d147      	bne.n	12eb6 <getTrngSource+0xc2>
   12e26:	290a      	cmp	r1, #10
   12e28:	d145      	bne.n	12eb6 <getTrngSource+0xc2>
   12e2a:	78fb      	ldrb	r3, [r7, #3]
   12e2c:	9304      	str	r3, [sp, #16]
   12e2e:	2304      	movs	r3, #4
   12e30:	46b8      	mov	r8, r7
   12e32:	9302      	str	r3, [sp, #8]
   12e34:	4b95      	ldr	r3, [pc, #596]	; (1308c <getTrngSource+0x298>)
   12e36:	fba3 230b 	umull	r2, r3, r3, fp
   12e3a:	ea4f 0a93 	mov.w	sl, r3, lsr #2
   12e3e:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
   12e42:	f105 0208 	add.w	r2, r5, #8
   12e46:	9203      	str	r2, [sp, #12]
   12e48:	ebab 0a43 	sub.w	sl, fp, r3, lsl #1
   12e4c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   12e4e:	f8c3 b000 	str.w	fp, [r3]
   12e52:	f1bb 0f00 	cmp.w	fp, #0
   12e56:	f000 80c3 	beq.w	12fe0 <getTrngSource+0x1ec>
   12e5a:	465d      	mov	r5, fp
   12e5c:	f04f 0900 	mov.w	r9, #0
   12e60:	9e03      	ldr	r6, [sp, #12]
   12e62:	f000 ff63 	bl	13d2c <LLF_RND_TurnOffTrng>
   12e66:	2300      	movs	r3, #0
   12e68:	9305      	str	r3, [sp, #20]
   12e6a:	f1b8 0f00 	cmp.w	r8, #0
   12e6e:	f000 80e5 	beq.w	1303c <getTrngSource+0x248>
   12e72:	2c00      	cmp	r4, #0
   12e74:	f000 80e2 	beq.w	1303c <getTrngSource+0x248>
   12e78:	9b04      	ldr	r3, [sp, #16]
   12e7a:	2b00      	cmp	r3, #0
   12e7c:	f000 80dc 	beq.w	13038 <getTrngSource+0x244>
   12e80:	4620      	mov	r0, r4
   12e82:	a904      	add	r1, sp, #16
   12e84:	f000 ff42 	bl	13d0c <LLF_RND_GetFastestRosc>
   12e88:	b1b8      	cbz	r0, 12eba <getTrngSource+0xc6>
   12e8a:	4b81      	ldr	r3, [pc, #516]	; (13090 <getTrngSource+0x29c>)
   12e8c:	4298      	cmp	r0, r3
   12e8e:	f040 80a7 	bne.w	12fe0 <getTrngSource+0x1ec>
   12e92:	9002      	str	r0, [sp, #8]
   12e94:	f000 ff4a 	bl	13d2c <LLF_RND_TurnOffTrng>
   12e98:	9802      	ldr	r0, [sp, #8]
   12e9a:	b00d      	add	sp, #52	; 0x34
   12e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ea0:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
   12ea4:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   12ea8:	3001      	adds	r0, #1
   12eaa:	bf0c      	ite	eq
   12eac:	f44f 7b04 	moveq.w	fp, #528	; 0x210
   12eb0:	f8d1 bc0c 	ldrne.w	fp, [r1, #3084]	; 0xc0c
   12eb4:	e7a9      	b.n	12e0a <getTrngSource+0x16>
   12eb6:	4877      	ldr	r0, [pc, #476]	; (13094 <getTrngSource+0x2a0>)
   12eb8:	e7eb      	b.n	12e92 <getTrngSource+0x9e>
   12eba:	4621      	mov	r1, r4
   12ebc:	9804      	ldr	r0, [sp, #16]
   12ebe:	f000 ff07 	bl	13cd0 <LLF_RND_GetRoscSampleCnt>
   12ec2:	2800      	cmp	r0, #0
   12ec4:	d1e1      	bne.n	12e8a <getTrngSource+0x96>
   12ec6:	9904      	ldr	r1, [sp, #16]
   12ec8:	2908      	cmp	r1, #8
   12eca:	f000 80b9 	beq.w	13040 <getTrngSource+0x24c>
   12ece:	2904      	cmp	r1, #4
   12ed0:	f000 80b8 	beq.w	13044 <getTrngSource+0x250>
   12ed4:	f1a1 0102 	sub.w	r1, r1, #2
   12ed8:	fab1 f181 	clz	r1, r1
   12edc:	0949      	lsrs	r1, r1, #5
   12ede:	2301      	movs	r3, #1
   12ee0:	4618      	mov	r0, r3
   12ee2:	4f6d      	ldr	r7, [pc, #436]	; (13098 <getTrngSource+0x2a4>)
   12ee4:	603b      	str	r3, [r7, #0]
   12ee6:	f847 3c84 	str.w	r3, [r7, #-132]
   12eea:	4b6b      	ldr	r3, [pc, #428]	; (13098 <getTrngSource+0x2a4>)
   12eec:	4f66      	ldr	r7, [pc, #408]	; (13088 <getTrngSource+0x294>)
   12eee:	6018      	str	r0, [r3, #0]
   12ef0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12ef2:	603b      	str	r3, [r7, #0]
   12ef4:	683f      	ldr	r7, [r7, #0]
   12ef6:	42bb      	cmp	r3, r7
   12ef8:	d1f7      	bne.n	12eea <getTrngSource+0xf6>
   12efa:	2000      	movs	r0, #0
   12efc:	f04f 33ff 	mov.w	r3, #4294967295
   12f00:	f06f 071b 	mvn.w	r7, #27
   12f04:	4a65      	ldr	r2, [pc, #404]	; (1309c <getTrngSource+0x2a8>)
   12f06:	6010      	str	r0, [r2, #0]
   12f08:	4865      	ldr	r0, [pc, #404]	; (130a0 <getTrngSource+0x2ac>)
   12f0a:	f842 3c24 	str.w	r3, [r2, #-36]
   12f0e:	4b65      	ldr	r3, [pc, #404]	; (130a4 <getTrngSource+0x2b0>)
   12f10:	f842 7c2c 	str.w	r7, [r2, #-44]
   12f14:	6001      	str	r1, [r0, #0]
   12f16:	6818      	ldr	r0, [r3, #0]
   12f18:	4f5c      	ldr	r7, [pc, #368]	; (1308c <getTrngSource+0x298>)
   12f1a:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   12f1e:	f7ff fd13 	bl	12948 <CC_HalMaskInterrupt>
   12f22:	210a      	movs	r1, #10
   12f24:	2201      	movs	r2, #1
   12f26:	4b57      	ldr	r3, [pc, #348]	; (13084 <getTrngSource+0x290>)
   12f28:	485f      	ldr	r0, [pc, #380]	; (130a8 <getTrngSource+0x2b4>)
   12f2a:	6019      	str	r1, [r3, #0]
   12f2c:	6921      	ldr	r1, [r4, #16]
   12f2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12f30:	fba7 c101 	umull	ip, r1, r7, r1
   12f34:	0909      	lsrs	r1, r1, #4
   12f36:	fb03 f301 	mul.w	r3, r3, r1
   12f3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   12f3e:	03db      	lsls	r3, r3, #15
   12f40:	099b      	lsrs	r3, r3, #6
   12f42:	6003      	str	r3, [r0, #0]
   12f44:	4b55      	ldr	r3, [pc, #340]	; (1309c <getTrngSource+0x2a8>)
   12f46:	a805      	add	r0, sp, #20
   12f48:	601a      	str	r2, [r3, #0]
   12f4a:	9904      	ldr	r1, [sp, #16]
   12f4c:	f8d8 2000 	ldr.w	r2, [r8]
   12f50:	020b      	lsls	r3, r1, #8
   12f52:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   12f56:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   12f5a:	4313      	orrs	r3, r2
   12f5c:	f8c8 3000 	str.w	r3, [r8]
   12f60:	f000 fea6 	bl	13cb0 <LLF_RND_WaitRngInterrupt>
   12f64:	9b05      	ldr	r3, [sp, #20]
   12f66:	f003 031a 	and.w	r3, r3, #26
   12f6a:	4303      	orrs	r3, r0
   12f6c:	d138      	bne.n	12fe0 <getTrngSource+0x1ec>
   12f6e:	4b4f      	ldr	r3, [pc, #316]	; (130ac <getTrngSource+0x2b8>)
   12f70:	fba7 2705 	umull	r2, r7, r7, r5
   12f74:	681a      	ldr	r2, [r3, #0]
   12f76:	3314      	adds	r3, #20
   12f78:	9206      	str	r2, [sp, #24]
   12f7a:	f853 2c10 	ldr.w	r2, [r3, #-16]
   12f7e:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
   12f82:	9207      	str	r2, [sp, #28]
   12f84:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   12f88:	9208      	str	r2, [sp, #32]
   12f8a:	f853 2c08 	ldr.w	r2, [r3, #-8]
   12f8e:	9209      	str	r2, [sp, #36]	; 0x24
   12f90:	f853 2c04 	ldr.w	r2, [r3, #-4]
   12f94:	920a      	str	r2, [sp, #40]	; 0x28
   12f96:	681b      	ldr	r3, [r3, #0]
   12f98:	930b      	str	r3, [sp, #44]	; 0x2c
   12f9a:	d102      	bne.n	12fa2 <getTrngSource+0x1ae>
   12f9c:	f1ba 0f00 	cmp.w	sl, #0
   12fa0:	d141      	bne.n	13026 <getTrngSource+0x232>
   12fa2:	2218      	movs	r2, #24
   12fa4:	4630      	mov	r0, r6
   12fa6:	eb0d 0102 	add.w	r1, sp, r2
   12faa:	f000 fe25 	bl	13bf8 <CC_PalMemCopyPlat>
   12fae:	3d18      	subs	r5, #24
   12fb0:	3618      	adds	r6, #24
   12fb2:	f109 0901 	add.w	r9, r9, #1
   12fb6:	2d00      	cmp	r5, #0
   12fb8:	f47f af53 	bne.w	12e62 <getTrngSource+0x6e>
   12fbc:	f5bb 7f04 	cmp.w	fp, #528	; 0x210
   12fc0:	d85d      	bhi.n	1307e <getTrngSource+0x28a>
   12fc2:	9d03      	ldr	r5, [sp, #12]
   12fc4:	4659      	mov	r1, fp
   12fc6:	4628      	mov	r0, r5
   12fc8:	6962      	ldr	r2, [r4, #20]
   12fca:	f7ff fe81 	bl	12cd0 <LLF_RND_RepetitionCounterTest.part.0>
   12fce:	2800      	cmp	r0, #0
   12fd0:	d04b      	beq.n	1306a <getTrngSource+0x276>
   12fd2:	2300      	movs	r3, #0
   12fd4:	9a16      	ldr	r2, [sp, #88]	; 0x58
   12fd6:	6013      	str	r3, [r2, #0]
   12fd8:	4b2d      	ldr	r3, [pc, #180]	; (13090 <getTrngSource+0x29c>)
   12fda:	4298      	cmp	r0, r3
   12fdc:	f43f af59 	beq.w	12e92 <getTrngSource+0x9e>
   12fe0:	9d04      	ldr	r5, [sp, #16]
   12fe2:	2d08      	cmp	r5, #8
   12fe4:	d034      	beq.n	13050 <getTrngSource+0x25c>
   12fe6:	2200      	movs	r2, #0
   12fe8:	ab04      	add	r3, sp, #16
   12fea:	4621      	mov	r1, r4
   12fec:	4640      	mov	r0, r8
   12fee:	006d      	lsls	r5, r5, #1
   12ff0:	9200      	str	r2, [sp, #0]
   12ff2:	9504      	str	r5, [sp, #16]
   12ff4:	f7ff fdd2 	bl	12b9c <startTrngHW>
   12ff8:	4b2d      	ldr	r3, [pc, #180]	; (130b0 <getTrngSource+0x2bc>)
   12ffa:	4298      	cmp	r0, r3
   12ffc:	d024      	beq.n	13048 <getTrngSource+0x254>
   12ffe:	2800      	cmp	r0, #0
   13000:	f47f af47 	bne.w	12e92 <getTrngSource+0x9e>
   13004:	f8d8 2000 	ldr.w	r2, [r8]
   13008:	0a13      	lsrs	r3, r2, #8
   1300a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   1300e:	4313      	orrs	r3, r2
   13010:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   13014:	f8c8 3000 	str.w	r3, [r8]
   13018:	9b02      	ldr	r3, [sp, #8]
   1301a:	3b01      	subs	r3, #1
   1301c:	9302      	str	r3, [sp, #8]
   1301e:	f47f af15 	bne.w	12e4c <getTrngSource+0x58>
   13022:	2000      	movs	r0, #0
   13024:	e735      	b.n	12e92 <getTrngSource+0x9e>
   13026:	4630      	mov	r0, r6
   13028:	4652      	mov	r2, sl
   1302a:	a906      	add	r1, sp, #24
   1302c:	f000 fde4 	bl	13bf8 <CC_PalMemCopyPlat>
   13030:	eba5 050a 	sub.w	r5, r5, sl
   13034:	4456      	add	r6, sl
   13036:	e7bc      	b.n	12fb2 <getTrngSource+0x1be>
   13038:	481d      	ldr	r0, [pc, #116]	; (130b0 <getTrngSource+0x2bc>)
   1303a:	e726      	b.n	12e8a <getTrngSource+0x96>
   1303c:	481d      	ldr	r0, [pc, #116]	; (130b4 <getTrngSource+0x2c0>)
   1303e:	e724      	b.n	12e8a <getTrngSource+0x96>
   13040:	2103      	movs	r1, #3
   13042:	e74c      	b.n	12ede <getTrngSource+0xea>
   13044:	2102      	movs	r1, #2
   13046:	e74a      	b.n	12ede <getTrngSource+0xea>
   13048:	6a23      	ldr	r3, [r4, #32]
   1304a:	2b00      	cmp	r3, #0
   1304c:	f43f af21 	beq.w	12e92 <getTrngSource+0x9e>
   13050:	4819      	ldr	r0, [pc, #100]	; (130b8 <getTrngSource+0x2c4>)
   13052:	e71e      	b.n	12e92 <getTrngSource+0x9e>
   13054:	2201      	movs	r2, #1
   13056:	4621      	mov	r1, r4
   13058:	4638      	mov	r0, r7
   1305a:	9600      	str	r6, [sp, #0]
   1305c:	ab04      	add	r3, sp, #16
   1305e:	f7ff fd9d 	bl	12b9c <startTrngHW>
   13062:	2800      	cmp	r0, #0
   13064:	f43f aee3 	beq.w	12e2e <getTrngSource+0x3a>
   13068:	e713      	b.n	12e92 <getTrngSource+0x9e>
   1306a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1306e:	4659      	mov	r1, fp
   13070:	4628      	mov	r0, r5
   13072:	69a2      	ldr	r2, [r4, #24]
   13074:	f7ff fe58 	bl	12d28 <LLF_RND_AdaptiveProportionTest>
   13078:	2800      	cmp	r0, #0
   1307a:	d1aa      	bne.n	12fd2 <getTrngSource+0x1de>
   1307c:	e7d1      	b.n	13022 <getTrngSource+0x22e>
   1307e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13080:	601d      	str	r5, [r3, #0]
   13082:	e7ad      	b.n	12fe0 <getTrngSource+0x1ec>
   13084:	50845138 	.word	0x50845138
   13088:	50845130 	.word	0x50845130
   1308c:	aaaaaaab 	.word	0xaaaaaaab
   13090:	00f10c02 	.word	0x00f10c02
   13094:	00f10c30 	.word	0x00f10c30
   13098:	508451c4 	.word	0x508451c4
   1309c:	5084512c 	.word	0x5084512c
   130a0:	5084510c 	.word	0x5084510c
   130a4:	50845a04 	.word	0x50845a04
   130a8:	508451d8 	.word	0x508451d8
   130ac:	50845114 	.word	0x50845114
   130b0:	00f10c31 	.word	0x00f10c31
   130b4:	00f10c35 	.word	0x00f10c35
   130b8:	00f10c32 	.word	0x00f10c32

000130bc <LLF_RND_GetTrngSource>:
   130bc:	2300      	movs	r3, #0
   130be:	b430      	push	{r4, r5}
   130c0:	e9dd 4503 	ldrd	r4, r5, [sp, #12]
   130c4:	9304      	str	r3, [sp, #16]
   130c6:	9b02      	ldr	r3, [sp, #8]
   130c8:	e9cd 4502 	strd	r4, r5, [sp, #8]
   130cc:	bc30      	pop	{r4, r5}
   130ce:	f7ff be91 	b.w	12df4 <getTrngSource>
   130d2:	bf00      	nop

000130d4 <LLF_RND_RunTrngStartupTest>:
   130d4:	b510      	push	{r4, lr}
   130d6:	2401      	movs	r4, #1
   130d8:	b086      	sub	sp, #24
   130da:	ab05      	add	r3, sp, #20
   130dc:	e9cd 2401 	strd	r2, r4, [sp, #4]
   130e0:	9300      	str	r3, [sp, #0]
   130e2:	2200      	movs	r2, #0
   130e4:	ab04      	add	r3, sp, #16
   130e6:	f7ff fe85 	bl	12df4 <getTrngSource>
   130ea:	b006      	add	sp, #24
   130ec:	bd10      	pop	{r4, pc}
   130ee:	bf00      	nop

000130f0 <mbedtls_platform_zeroize>:
   130f0:	b138      	cbz	r0, 13102 <mbedtls_platform_zeroize+0x12>
   130f2:	b131      	cbz	r1, 13102 <mbedtls_platform_zeroize+0x12>
   130f4:	2200      	movs	r2, #0
   130f6:	4401      	add	r1, r0
   130f8:	4603      	mov	r3, r0
   130fa:	3001      	adds	r0, #1
   130fc:	4281      	cmp	r1, r0
   130fe:	701a      	strb	r2, [r3, #0]
   13100:	d1fa      	bne.n	130f8 <mbedtls_platform_zeroize+0x8>
   13102:	4770      	bx	lr

00013104 <mbedtls_hardware_poll>:
   13104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13108:	b088      	sub	sp, #32
   1310a:	9205      	str	r2, [sp, #20]
   1310c:	2900      	cmp	r1, #0
   1310e:	d069      	beq.n	131e4 <mbedtls_hardware_poll+0xe0>
   13110:	461c      	mov	r4, r3
   13112:	2b00      	cmp	r3, #0
   13114:	d066      	beq.n	131e4 <mbedtls_hardware_poll+0xe0>
   13116:	4615      	mov	r5, r2
   13118:	2a00      	cmp	r2, #0
   1311a:	d063      	beq.n	131e4 <mbedtls_hardware_poll+0xe0>
   1311c:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 1320c <mbedtls_hardware_poll+0x108>
   13120:	460e      	mov	r6, r1
   13122:	f8d8 0000 	ldr.w	r0, [r8]
   13126:	f04f 31ff 	mov.w	r1, #4294967295
   1312a:	f7ff fcb3 	bl	12a94 <CC_PalMutexLock>
   1312e:	2800      	cmp	r0, #0
   13130:	d149      	bne.n	131c6 <mbedtls_hardware_poll+0xc2>
   13132:	4b2e      	ldr	r3, [pc, #184]	; (131ec <mbedtls_hardware_poll+0xe8>)
   13134:	6818      	ldr	r0, [r3, #0]
   13136:	f010 0001 	ands.w	r0, r0, #1
   1313a:	d018      	beq.n	1316e <mbedtls_hardware_poll+0x6a>
   1313c:	f04f 37ff 	mov.w	r7, #4294967295
   13140:	f44f 7108 	mov.w	r1, #544	; 0x220
   13144:	482a      	ldr	r0, [pc, #168]	; (131f0 <mbedtls_hardware_poll+0xec>)
   13146:	f7ff ffd3 	bl	130f0 <mbedtls_platform_zeroize>
   1314a:	2104      	movs	r1, #4
   1314c:	4829      	ldr	r0, [pc, #164]	; (131f4 <mbedtls_hardware_poll+0xf0>)
   1314e:	f7ff ffcf 	bl	130f0 <mbedtls_platform_zeroize>
   13152:	4829      	ldr	r0, [pc, #164]	; (131f8 <mbedtls_hardware_poll+0xf4>)
   13154:	2128      	movs	r1, #40	; 0x28
   13156:	f7ff ffcb 	bl	130f0 <mbedtls_platform_zeroize>
   1315a:	f8d8 0000 	ldr.w	r0, [r8]
   1315e:	f7ff fca1 	bl	12aa4 <CC_PalMutexUnlock>
   13162:	2800      	cmp	r0, #0
   13164:	d133      	bne.n	131ce <mbedtls_hardware_poll+0xca>
   13166:	4638      	mov	r0, r7
   13168:	b008      	add	sp, #32
   1316a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1316e:	f7ff fcc1 	bl	12af4 <CC_PalPowerSaveModeSelect>
   13172:	2800      	cmp	r0, #0
   13174:	d132      	bne.n	131dc <mbedtls_hardware_poll+0xd8>
   13176:	4820      	ldr	r0, [pc, #128]	; (131f8 <mbedtls_hardware_poll+0xf4>)
   13178:	f000 fd00 	bl	13b7c <RNG_PLAT_SetUserRngParameters>
   1317c:	b9c0      	cbnz	r0, 131b0 <mbedtls_hardware_poll+0xac>
   1317e:	491c      	ldr	r1, [pc, #112]	; (131f0 <mbedtls_hardware_poll+0xec>)
   13180:	ab07      	add	r3, sp, #28
   13182:	4602      	mov	r2, r0
   13184:	9003      	str	r0, [sp, #12]
   13186:	9102      	str	r1, [sp, #8]
   13188:	9300      	str	r3, [sp, #0]
   1318a:	491b      	ldr	r1, [pc, #108]	; (131f8 <mbedtls_hardware_poll+0xf4>)
   1318c:	4819      	ldr	r0, [pc, #100]	; (131f4 <mbedtls_hardware_poll+0xf0>)
   1318e:	9401      	str	r4, [sp, #4]
   13190:	ab05      	add	r3, sp, #20
   13192:	f7ff ff93 	bl	130bc <LLF_RND_GetTrngSource>
   13196:	b958      	cbnz	r0, 131b0 <mbedtls_hardware_poll+0xac>
   13198:	6823      	ldr	r3, [r4, #0]
   1319a:	42ab      	cmp	r3, r5
   1319c:	d308      	bcc.n	131b0 <mbedtls_hardware_poll+0xac>
   1319e:	9907      	ldr	r1, [sp, #28]
   131a0:	4607      	mov	r7, r0
   131a2:	462a      	mov	r2, r5
   131a4:	4630      	mov	r0, r6
   131a6:	3108      	adds	r1, #8
   131a8:	f000 fd26 	bl	13bf8 <CC_PalMemCopyPlat>
   131ac:	6025      	str	r5, [r4, #0]
   131ae:	e001      	b.n	131b4 <mbedtls_hardware_poll+0xb0>
   131b0:	f04f 37ff 	mov.w	r7, #4294967295
   131b4:	2001      	movs	r0, #1
   131b6:	f7ff fc9d 	bl	12af4 <CC_PalPowerSaveModeSelect>
   131ba:	2800      	cmp	r0, #0
   131bc:	d0c0      	beq.n	13140 <mbedtls_hardware_poll+0x3c>
   131be:	480f      	ldr	r0, [pc, #60]	; (131fc <mbedtls_hardware_poll+0xf8>)
   131c0:	f7ff f90a 	bl	123d8 <CC_PalAbort>
   131c4:	e7bc      	b.n	13140 <mbedtls_hardware_poll+0x3c>
   131c6:	480e      	ldr	r0, [pc, #56]	; (13200 <mbedtls_hardware_poll+0xfc>)
   131c8:	f7ff f906 	bl	123d8 <CC_PalAbort>
   131cc:	e7b1      	b.n	13132 <mbedtls_hardware_poll+0x2e>
   131ce:	480d      	ldr	r0, [pc, #52]	; (13204 <mbedtls_hardware_poll+0x100>)
   131d0:	f7ff f902 	bl	123d8 <CC_PalAbort>
   131d4:	4638      	mov	r0, r7
   131d6:	b008      	add	sp, #32
   131d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   131dc:	480a      	ldr	r0, [pc, #40]	; (13208 <mbedtls_hardware_poll+0x104>)
   131de:	f7ff f8fb 	bl	123d8 <CC_PalAbort>
   131e2:	e7c8      	b.n	13176 <mbedtls_hardware_poll+0x72>
   131e4:	f04f 37ff 	mov.w	r7, #4294967295
   131e8:	e7bd      	b.n	13166 <mbedtls_hardware_poll+0x62>
   131ea:	bf00      	nop
   131ec:	50846e34 	.word	0x50846e34
   131f0:	200010e4 	.word	0x200010e4
   131f4:	200010e0 	.word	0x200010e0
   131f8:	20001304 	.word	0x20001304
   131fc:	00017d68 	.word	0x00017d68
   13200:	00017d30 	.word	0x00017d30
   13204:	00017dc0 	.word	0x00017dc0
   13208:	00017d48 	.word	0x00017d48
   1320c:	200000ac 	.word	0x200000ac

00013210 <cc_mbedtls_sha256_init>:
   13210:	b510      	push	{r4, lr}
   13212:	4604      	mov	r4, r0
   13214:	b128      	cbz	r0, 13222 <cc_mbedtls_sha256_init+0x12>
   13216:	4620      	mov	r0, r4
   13218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1321c:	21f0      	movs	r1, #240	; 0xf0
   1321e:	f000 bcef 	b.w	13c00 <CC_PalMemSetZeroPlat>
   13222:	4804      	ldr	r0, [pc, #16]	; (13234 <cc_mbedtls_sha256_init+0x24>)
   13224:	f7ff f8d8 	bl	123d8 <CC_PalAbort>
   13228:	4620      	mov	r0, r4
   1322a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1322e:	21f0      	movs	r1, #240	; 0xf0
   13230:	f000 bce6 	b.w	13c00 <CC_PalMemSetZeroPlat>
   13234:	00017dd8 	.word	0x00017dd8

00013238 <cc_mbedtls_sha256_free>:
   13238:	b110      	cbz	r0, 13240 <cc_mbedtls_sha256_free+0x8>
   1323a:	21f0      	movs	r1, #240	; 0xf0
   1323c:	f7ff bf58 	b.w	130f0 <mbedtls_platform_zeroize>
   13240:	4770      	bx	lr
   13242:	bf00      	nop

00013244 <cc_mbedtls_sha256_starts_ret>:
   13244:	b508      	push	{r3, lr}
   13246:	b161      	cbz	r1, 13262 <cc_mbedtls_sha256_starts_ret+0x1e>
   13248:	2901      	cmp	r1, #1
   1324a:	d107      	bne.n	1325c <cc_mbedtls_sha256_starts_ret+0x18>
   1324c:	2102      	movs	r1, #2
   1324e:	f000 f839 	bl	132c4 <mbedtls_sha_starts_internal>
   13252:	2800      	cmp	r0, #0
   13254:	bf18      	it	ne
   13256:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   1325a:	bd08      	pop	{r3, pc}
   1325c:	f06f 0036 	mvn.w	r0, #54	; 0x36
   13260:	bd08      	pop	{r3, pc}
   13262:	2101      	movs	r1, #1
   13264:	f000 f82e 	bl	132c4 <mbedtls_sha_starts_internal>
   13268:	e7f3      	b.n	13252 <cc_mbedtls_sha256_starts_ret+0xe>
   1326a:	bf00      	nop

0001326c <cc_mbedtls_sha256_update_ret>:
   1326c:	b508      	push	{r3, lr}
   1326e:	f000 f86b 	bl	13348 <mbedtls_sha_update_internal>
   13272:	2800      	cmp	r0, #0
   13274:	bf18      	it	ne
   13276:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   1327a:	bd08      	pop	{r3, pc}

0001327c <cc_mbedtls_sha256_finish_ret>:
   1327c:	b570      	push	{r4, r5, r6, lr}
   1327e:	b1e8      	cbz	r0, 132bc <cc_mbedtls_sha256_finish_ret+0x40>
   13280:	460e      	mov	r6, r1
   13282:	b1d9      	cbz	r1, 132bc <cc_mbedtls_sha256_finish_ret+0x40>
   13284:	4604      	mov	r4, r0
   13286:	f000 f831 	bl	132ec <mbedtls_sha_finish_internal>
   1328a:	4605      	mov	r5, r0
   1328c:	b9b0      	cbnz	r0, 132bc <cc_mbedtls_sha256_finish_ret+0x40>
   1328e:	6823      	ldr	r3, [r4, #0]
   13290:	2b01      	cmp	r3, #1
   13292:	d00b      	beq.n	132ac <cc_mbedtls_sha256_finish_ret+0x30>
   13294:	2b02      	cmp	r3, #2
   13296:	d001      	beq.n	1329c <cc_mbedtls_sha256_finish_ret+0x20>
   13298:	4628      	mov	r0, r5
   1329a:	bd70      	pop	{r4, r5, r6, pc}
   1329c:	4630      	mov	r0, r6
   1329e:	221c      	movs	r2, #28
   132a0:	f104 0108 	add.w	r1, r4, #8
   132a4:	f000 fca8 	bl	13bf8 <CC_PalMemCopyPlat>
   132a8:	4628      	mov	r0, r5
   132aa:	bd70      	pop	{r4, r5, r6, pc}
   132ac:	4630      	mov	r0, r6
   132ae:	2220      	movs	r2, #32
   132b0:	f104 0108 	add.w	r1, r4, #8
   132b4:	f000 fca0 	bl	13bf8 <CC_PalMemCopyPlat>
   132b8:	4628      	mov	r0, r5
   132ba:	bd70      	pop	{r4, r5, r6, pc}
   132bc:	f06f 0536 	mvn.w	r5, #54	; 0x36
   132c0:	e7ea      	b.n	13298 <cc_mbedtls_sha256_finish_ret+0x1c>
   132c2:	bf00      	nop

000132c4 <mbedtls_sha_starts_internal>:
   132c4:	b178      	cbz	r0, 132e6 <mbedtls_sha_starts_internal+0x22>
   132c6:	b538      	push	{r3, r4, r5, lr}
   132c8:	460d      	mov	r5, r1
   132ca:	21f0      	movs	r1, #240	; 0xf0
   132cc:	4604      	mov	r4, r0
   132ce:	f000 fc97 	bl	13c00 <CC_PalMemSetZeroPlat>
   132d2:	2340      	movs	r3, #64	; 0x40
   132d4:	4620      	mov	r0, r4
   132d6:	6025      	str	r5, [r4, #0]
   132d8:	65e3      	str	r3, [r4, #92]	; 0x5c
   132da:	f000 fd6f 	bl	13dbc <InitHashDrv>
   132de:	3800      	subs	r0, #0
   132e0:	bf18      	it	ne
   132e2:	2001      	movne	r0, #1
   132e4:	bd38      	pop	{r3, r4, r5, pc}
   132e6:	2001      	movs	r0, #1
   132e8:	4770      	bx	lr
   132ea:	bf00      	nop

000132ec <mbedtls_sha_finish_internal>:
   132ec:	b570      	push	{r4, r5, r6, lr}
   132ee:	6e05      	ldr	r5, [r0, #96]	; 0x60
   132f0:	b0a4      	sub	sp, #144	; 0x90
   132f2:	4604      	mov	r4, r0
   132f4:	ae04      	add	r6, sp, #16
   132f6:	b9e5      	cbnz	r5, 13332 <mbedtls_sha_finish_internal+0x46>
   132f8:	2201      	movs	r2, #1
   132fa:	2300      	movs	r3, #0
   132fc:	6062      	str	r2, [r4, #4]
   132fe:	4630      	mov	r0, r6
   13300:	4629      	mov	r1, r5
   13302:	e9cd 3300 	strd	r3, r3, [sp]
   13306:	aa02      	add	r2, sp, #8
   13308:	f000 fd26 	bl	13d58 <SetDataBuffersInfo>
   1330c:	b110      	cbz	r0, 13314 <mbedtls_sha_finish_internal+0x28>
   1330e:	2001      	movs	r0, #1
   13310:	b024      	add	sp, #144	; 0x90
   13312:	bd70      	pop	{r4, r5, r6, pc}
   13314:	462a      	mov	r2, r5
   13316:	4620      	mov	r0, r4
   13318:	a902      	add	r1, sp, #8
   1331a:	f000 fd79 	bl	13e10 <ProcessHashDrv>
   1331e:	2800      	cmp	r0, #0
   13320:	d1f5      	bne.n	1330e <mbedtls_sha_finish_internal+0x22>
   13322:	4620      	mov	r0, r4
   13324:	f000 fe92 	bl	1404c <FinishHashDrv>
   13328:	2800      	cmp	r0, #0
   1332a:	d1f0      	bne.n	1330e <mbedtls_sha_finish_internal+0x22>
   1332c:	6620      	str	r0, [r4, #96]	; 0x60
   1332e:	b024      	add	sp, #144	; 0x90
   13330:	bd70      	pop	{r4, r5, r6, pc}
   13332:	2d80      	cmp	r5, #128	; 0x80
   13334:	462a      	mov	r2, r5
   13336:	4630      	mov	r0, r6
   13338:	bf28      	it	cs
   1333a:	2280      	movcs	r2, #128	; 0x80
   1333c:	f104 0164 	add.w	r1, r4, #100	; 0x64
   13340:	f000 fc5a 	bl	13bf8 <CC_PalMemCopyPlat>
   13344:	6e25      	ldr	r5, [r4, #96]	; 0x60
   13346:	e7d7      	b.n	132f8 <mbedtls_sha_finish_internal+0xc>

00013348 <mbedtls_sha_update_internal>:
   13348:	2800      	cmp	r0, #0
   1334a:	d055      	beq.n	133f8 <mbedtls_sha_update_internal+0xb0>
   1334c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1334e:	4615      	mov	r5, r2
   13350:	b0a5      	sub	sp, #148	; 0x94
   13352:	b1b2      	cbz	r2, 13382 <mbedtls_sha_update_internal+0x3a>
   13354:	460e      	mov	r6, r1
   13356:	b351      	cbz	r1, 133ae <mbedtls_sha_update_internal+0x66>
   13358:	4604      	mov	r4, r0
   1335a:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	; 0x5c
   1335e:	1a1a      	subs	r2, r3, r0
   13360:	fbb2 f7f3 	udiv	r7, r2, r3
   13364:	fb03 2717 	mls	r7, r3, r7, r2
   13368:	42af      	cmp	r7, r5
   1336a:	bf28      	it	cs
   1336c:	462f      	movcs	r7, r5
   1336e:	2f00      	cmp	r7, #0
   13370:	d144      	bne.n	133fc <mbedtls_sha_update_internal+0xb4>
   13372:	4283      	cmp	r3, r0
   13374:	d008      	beq.n	13388 <mbedtls_sha_update_internal+0x40>
   13376:	fbb5 f7f3 	udiv	r7, r5, r3
   1337a:	fb03 f707 	mul.w	r7, r3, r7
   1337e:	b9cf      	cbnz	r7, 133b4 <mbedtls_sha_update_internal+0x6c>
   13380:	bb6d      	cbnz	r5, 133de <mbedtls_sha_update_internal+0x96>
   13382:	4628      	mov	r0, r5
   13384:	b025      	add	sp, #148	; 0x94
   13386:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13388:	2b80      	cmp	r3, #128	; 0x80
   1338a:	bf28      	it	cs
   1338c:	2380      	movcs	r3, #128	; 0x80
   1338e:	f104 0164 	add.w	r1, r4, #100	; 0x64
   13392:	461a      	mov	r2, r3
   13394:	a804      	add	r0, sp, #16
   13396:	f000 fc2f 	bl	13bf8 <CC_PalMemCopyPlat>
   1339a:	2300      	movs	r3, #0
   1339c:	e9cd 3300 	strd	r3, r3, [sp]
   133a0:	a804      	add	r0, sp, #16
   133a2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   133a4:	aa02      	add	r2, sp, #8
   133a6:	f000 fcd7 	bl	13d58 <SetDataBuffersInfo>
   133aa:	2800      	cmp	r0, #0
   133ac:	d033      	beq.n	13416 <mbedtls_sha_update_internal+0xce>
   133ae:	2001      	movs	r0, #1
   133b0:	b025      	add	sp, #148	; 0x94
   133b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   133b4:	2300      	movs	r3, #0
   133b6:	4639      	mov	r1, r7
   133b8:	4630      	mov	r0, r6
   133ba:	e9cd 3300 	strd	r3, r3, [sp]
   133be:	aa02      	add	r2, sp, #8
   133c0:	f000 fcca 	bl	13d58 <SetDataBuffersInfo>
   133c4:	2800      	cmp	r0, #0
   133c6:	d1f2      	bne.n	133ae <mbedtls_sha_update_internal+0x66>
   133c8:	463a      	mov	r2, r7
   133ca:	4620      	mov	r0, r4
   133cc:	a902      	add	r1, sp, #8
   133ce:	f000 fd1f 	bl	13e10 <ProcessHashDrv>
   133d2:	2800      	cmp	r0, #0
   133d4:	d1eb      	bne.n	133ae <mbedtls_sha_update_internal+0x66>
   133d6:	1bed      	subs	r5, r5, r7
   133d8:	443e      	add	r6, r7
   133da:	2d00      	cmp	r5, #0
   133dc:	d0d1      	beq.n	13382 <mbedtls_sha_update_internal+0x3a>
   133de:	6e20      	ldr	r0, [r4, #96]	; 0x60
   133e0:	462a      	mov	r2, r5
   133e2:	3019      	adds	r0, #25
   133e4:	4631      	mov	r1, r6
   133e6:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   133ea:	f000 fc05 	bl	13bf8 <CC_PalMemCopyPlat>
   133ee:	6e22      	ldr	r2, [r4, #96]	; 0x60
   133f0:	2000      	movs	r0, #0
   133f2:	442a      	add	r2, r5
   133f4:	6622      	str	r2, [r4, #96]	; 0x60
   133f6:	e7c5      	b.n	13384 <mbedtls_sha_update_internal+0x3c>
   133f8:	2001      	movs	r0, #1
   133fa:	4770      	bx	lr
   133fc:	f104 0364 	add.w	r3, r4, #100	; 0x64
   13400:	4418      	add	r0, r3
   13402:	463a      	mov	r2, r7
   13404:	f000 fbf8 	bl	13bf8 <CC_PalMemCopyPlat>
   13408:	e9d4 3017 	ldrd	r3, r0, [r4, #92]	; 0x5c
   1340c:	4438      	add	r0, r7
   1340e:	443e      	add	r6, r7
   13410:	1bed      	subs	r5, r5, r7
   13412:	6620      	str	r0, [r4, #96]	; 0x60
   13414:	e7ad      	b.n	13372 <mbedtls_sha_update_internal+0x2a>
   13416:	4620      	mov	r0, r4
   13418:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   1341a:	a902      	add	r1, sp, #8
   1341c:	f000 fcf8 	bl	13e10 <ProcessHashDrv>
   13420:	2800      	cmp	r0, #0
   13422:	d1c4      	bne.n	133ae <mbedtls_sha_update_internal+0x66>
   13424:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   13426:	6620      	str	r0, [r4, #96]	; 0x60
   13428:	e7a5      	b.n	13376 <mbedtls_sha_update_internal+0x2e>
   1342a:	bf00      	nop

0001342c <ctr_drbg_update_internal>:
   1342c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13430:	b08c      	sub	sp, #48	; 0x30
   13432:	4604      	mov	r4, r0
   13434:	460d      	mov	r5, r1
   13436:	4668      	mov	r0, sp
   13438:	2230      	movs	r2, #48	; 0x30
   1343a:	2100      	movs	r1, #0
   1343c:	f001 ffc5 	bl	153ca <memset>
   13440:	466f      	mov	r7, sp
   13442:	f104 0620 	add.w	r6, r4, #32
   13446:	7be2      	ldrb	r2, [r4, #15]
   13448:	3201      	adds	r2, #1
   1344a:	b2d2      	uxtb	r2, r2
   1344c:	73e2      	strb	r2, [r4, #15]
   1344e:	2a00      	cmp	r2, #0
   13450:	d14d      	bne.n	134ee <ctr_drbg_update_internal+0xc2>
   13452:	7ba2      	ldrb	r2, [r4, #14]
   13454:	3201      	adds	r2, #1
   13456:	b2d2      	uxtb	r2, r2
   13458:	73a2      	strb	r2, [r4, #14]
   1345a:	2a00      	cmp	r2, #0
   1345c:	d147      	bne.n	134ee <ctr_drbg_update_internal+0xc2>
   1345e:	7b63      	ldrb	r3, [r4, #13]
   13460:	3301      	adds	r3, #1
   13462:	b2db      	uxtb	r3, r3
   13464:	7363      	strb	r3, [r4, #13]
   13466:	2b00      	cmp	r3, #0
   13468:	d141      	bne.n	134ee <ctr_drbg_update_internal+0xc2>
   1346a:	7b23      	ldrb	r3, [r4, #12]
   1346c:	3301      	adds	r3, #1
   1346e:	b2db      	uxtb	r3, r3
   13470:	7323      	strb	r3, [r4, #12]
   13472:	2b00      	cmp	r3, #0
   13474:	d13b      	bne.n	134ee <ctr_drbg_update_internal+0xc2>
   13476:	7ae3      	ldrb	r3, [r4, #11]
   13478:	3301      	adds	r3, #1
   1347a:	b2db      	uxtb	r3, r3
   1347c:	72e3      	strb	r3, [r4, #11]
   1347e:	2b00      	cmp	r3, #0
   13480:	d135      	bne.n	134ee <ctr_drbg_update_internal+0xc2>
   13482:	7aa3      	ldrb	r3, [r4, #10]
   13484:	3301      	adds	r3, #1
   13486:	b2db      	uxtb	r3, r3
   13488:	72a3      	strb	r3, [r4, #10]
   1348a:	2b00      	cmp	r3, #0
   1348c:	d12f      	bne.n	134ee <ctr_drbg_update_internal+0xc2>
   1348e:	7a63      	ldrb	r3, [r4, #9]
   13490:	3301      	adds	r3, #1
   13492:	b2db      	uxtb	r3, r3
   13494:	7263      	strb	r3, [r4, #9]
   13496:	bb53      	cbnz	r3, 134ee <ctr_drbg_update_internal+0xc2>
   13498:	7a23      	ldrb	r3, [r4, #8]
   1349a:	3301      	adds	r3, #1
   1349c:	b2db      	uxtb	r3, r3
   1349e:	7223      	strb	r3, [r4, #8]
   134a0:	bb2b      	cbnz	r3, 134ee <ctr_drbg_update_internal+0xc2>
   134a2:	79e3      	ldrb	r3, [r4, #7]
   134a4:	3301      	adds	r3, #1
   134a6:	b2db      	uxtb	r3, r3
   134a8:	71e3      	strb	r3, [r4, #7]
   134aa:	bb03      	cbnz	r3, 134ee <ctr_drbg_update_internal+0xc2>
   134ac:	79a3      	ldrb	r3, [r4, #6]
   134ae:	3301      	adds	r3, #1
   134b0:	b2db      	uxtb	r3, r3
   134b2:	71a3      	strb	r3, [r4, #6]
   134b4:	b9db      	cbnz	r3, 134ee <ctr_drbg_update_internal+0xc2>
   134b6:	7963      	ldrb	r3, [r4, #5]
   134b8:	3301      	adds	r3, #1
   134ba:	b2db      	uxtb	r3, r3
   134bc:	7163      	strb	r3, [r4, #5]
   134be:	b9b3      	cbnz	r3, 134ee <ctr_drbg_update_internal+0xc2>
   134c0:	7923      	ldrb	r3, [r4, #4]
   134c2:	3301      	adds	r3, #1
   134c4:	b2db      	uxtb	r3, r3
   134c6:	7123      	strb	r3, [r4, #4]
   134c8:	b98b      	cbnz	r3, 134ee <ctr_drbg_update_internal+0xc2>
   134ca:	78e3      	ldrb	r3, [r4, #3]
   134cc:	3301      	adds	r3, #1
   134ce:	b2db      	uxtb	r3, r3
   134d0:	70e3      	strb	r3, [r4, #3]
   134d2:	b963      	cbnz	r3, 134ee <ctr_drbg_update_internal+0xc2>
   134d4:	78a3      	ldrb	r3, [r4, #2]
   134d6:	3301      	adds	r3, #1
   134d8:	b2db      	uxtb	r3, r3
   134da:	70a3      	strb	r3, [r4, #2]
   134dc:	b93b      	cbnz	r3, 134ee <ctr_drbg_update_internal+0xc2>
   134de:	7863      	ldrb	r3, [r4, #1]
   134e0:	3301      	adds	r3, #1
   134e2:	b2db      	uxtb	r3, r3
   134e4:	7063      	strb	r3, [r4, #1]
   134e6:	b913      	cbnz	r3, 134ee <ctr_drbg_update_internal+0xc2>
   134e8:	7823      	ldrb	r3, [r4, #0]
   134ea:	3301      	adds	r3, #1
   134ec:	7023      	strb	r3, [r4, #0]
   134ee:	463b      	mov	r3, r7
   134f0:	4622      	mov	r2, r4
   134f2:	2101      	movs	r1, #1
   134f4:	4630      	mov	r0, r6
   134f6:	f000 fe21 	bl	1413c <cc_mbedtls_aes_crypt_ecb>
   134fa:	4680      	mov	r8, r0
   134fc:	2800      	cmp	r0, #0
   134fe:	d13b      	bne.n	13578 <ctr_drbg_update_internal+0x14c>
   13500:	3710      	adds	r7, #16
   13502:	ab0c      	add	r3, sp, #48	; 0x30
   13504:	429f      	cmp	r7, r3
   13506:	d19e      	bne.n	13446 <ctr_drbg_update_internal+0x1a>
   13508:	9901      	ldr	r1, [sp, #4]
   1350a:	682b      	ldr	r3, [r5, #0]
   1350c:	9800      	ldr	r0, [sp, #0]
   1350e:	686a      	ldr	r2, [r5, #4]
   13510:	4058      	eors	r0, r3
   13512:	404a      	eors	r2, r1
   13514:	68ab      	ldr	r3, [r5, #8]
   13516:	9902      	ldr	r1, [sp, #8]
   13518:	9000      	str	r0, [sp, #0]
   1351a:	4059      	eors	r1, r3
   1351c:	9803      	ldr	r0, [sp, #12]
   1351e:	68eb      	ldr	r3, [r5, #12]
   13520:	9201      	str	r2, [sp, #4]
   13522:	4043      	eors	r3, r0
   13524:	692a      	ldr	r2, [r5, #16]
   13526:	9804      	ldr	r0, [sp, #16]
   13528:	9102      	str	r1, [sp, #8]
   1352a:	4050      	eors	r0, r2
   1352c:	9905      	ldr	r1, [sp, #20]
   1352e:	696a      	ldr	r2, [r5, #20]
   13530:	9303      	str	r3, [sp, #12]
   13532:	4051      	eors	r1, r2
   13534:	69ab      	ldr	r3, [r5, #24]
   13536:	9a06      	ldr	r2, [sp, #24]
   13538:	9004      	str	r0, [sp, #16]
   1353a:	405a      	eors	r2, r3
   1353c:	9807      	ldr	r0, [sp, #28]
   1353e:	69eb      	ldr	r3, [r5, #28]
   13540:	9105      	str	r1, [sp, #20]
   13542:	4058      	eors	r0, r3
   13544:	9908      	ldr	r1, [sp, #32]
   13546:	6a2b      	ldr	r3, [r5, #32]
   13548:	9206      	str	r2, [sp, #24]
   1354a:	4059      	eors	r1, r3
   1354c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1354e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13550:	9007      	str	r0, [sp, #28]
   13552:	405a      	eors	r2, r3
   13554:	980a      	ldr	r0, [sp, #40]	; 0x28
   13556:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13558:	9108      	str	r1, [sp, #32]
   1355a:	4043      	eors	r3, r0
   1355c:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
   13560:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13562:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   13564:	4630      	mov	r0, r6
   13566:	4053      	eors	r3, r2
   13568:	4669      	mov	r1, sp
   1356a:	f44f 7280 	mov.w	r2, #256	; 0x100
   1356e:	930b      	str	r3, [sp, #44]	; 0x2c
   13570:	f000 fdc2 	bl	140f8 <cc_mbedtls_aes_setkey_enc>
   13574:	4680      	mov	r8, r0
   13576:	b138      	cbz	r0, 13588 <ctr_drbg_update_internal+0x15c>
   13578:	4668      	mov	r0, sp
   1357a:	2130      	movs	r1, #48	; 0x30
   1357c:	f7ff fdb8 	bl	130f0 <mbedtls_platform_zeroize>
   13580:	4640      	mov	r0, r8
   13582:	b00c      	add	sp, #48	; 0x30
   13584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13588:	4620      	mov	r0, r4
   1358a:	2210      	movs	r2, #16
   1358c:	a908      	add	r1, sp, #32
   1358e:	f001 fef1 	bl	15374 <memcpy>
   13592:	e7f1      	b.n	13578 <ctr_drbg_update_internal+0x14c>

00013594 <mbedtls_ctr_drbg_reseed_internal>:
   13594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13598:	4605      	mov	r5, r0
   1359a:	6980      	ldr	r0, [r0, #24]
   1359c:	b0b9      	sub	sp, #228	; 0xe4
   1359e:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   135a2:	f200 8179 	bhi.w	13898 <mbedtls_ctr_drbg_reseed_internal+0x304>
   135a6:	4699      	mov	r9, r3
   135a8:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   135ac:	454b      	cmp	r3, r9
   135ae:	f0c0 8173 	bcc.w	13898 <mbedtls_ctr_drbg_reseed_internal+0x304>
   135b2:	f5c9 74c0 	rsb	r4, r9, #384	; 0x180
   135b6:	1a20      	subs	r0, r4, r0
   135b8:	4290      	cmp	r0, r2
   135ba:	4690      	mov	r8, r2
   135bc:	f0c0 816c 	bcc.w	13898 <mbedtls_ctr_drbg_reseed_internal+0x304>
   135c0:	4cb8      	ldr	r4, [pc, #736]	; (138a4 <mbedtls_ctr_drbg_reseed_internal+0x310>)
   135c2:	f44f 72c0 	mov.w	r2, #384	; 0x180
   135c6:	460f      	mov	r7, r1
   135c8:	4620      	mov	r0, r4
   135ca:	2100      	movs	r1, #0
   135cc:	f001 fefd 	bl	153ca <memset>
   135d0:	4621      	mov	r1, r4
   135d2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   135d6:	69aa      	ldr	r2, [r5, #24]
   135d8:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
   135dc:	4798      	blx	r3
   135de:	4682      	mov	sl, r0
   135e0:	2800      	cmp	r0, #0
   135e2:	f040 815c 	bne.w	1389e <mbedtls_ctr_drbg_reseed_internal+0x30a>
   135e6:	69ae      	ldr	r6, [r5, #24]
   135e8:	f1b9 0f00 	cmp.w	r9, #0
   135ec:	d00a      	beq.n	13604 <mbedtls_ctr_drbg_reseed_internal+0x70>
   135ee:	464a      	mov	r2, r9
   135f0:	4621      	mov	r1, r4
   135f2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   135f6:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
   135fa:	4798      	blx	r3
   135fc:	2800      	cmp	r0, #0
   135fe:	f040 814e 	bne.w	1389e <mbedtls_ctr_drbg_reseed_internal+0x30a>
   13602:	444e      	add	r6, r9
   13604:	b11f      	cbz	r7, 1360e <mbedtls_ctr_drbg_reseed_internal+0x7a>
   13606:	f1b8 0f00 	cmp.w	r8, #0
   1360a:	f040 8121 	bne.w	13850 <mbedtls_ctr_drbg_reseed_internal+0x2bc>
   1360e:	f5b6 7fc0 	cmp.w	r6, #384	; 0x180
   13612:	bf88      	it	hi
   13614:	f06f 0b37 	mvnhi.w	fp, #55	; 0x37
   13618:	f200 8111 	bhi.w	1383e <mbedtls_ctr_drbg_reseed_internal+0x2aa>
   1361c:	4fa2      	ldr	r7, [pc, #648]	; (138a8 <mbedtls_ctr_drbg_reseed_internal+0x314>)
   1361e:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   13622:	2100      	movs	r1, #0
   13624:	4638      	mov	r0, r7
   13626:	f001 fed0 	bl	153ca <memset>
   1362a:	a81b      	add	r0, sp, #108	; 0x6c
   1362c:	f000 fd4e 	bl	140cc <cc_mbedtls_aes_init>
   13630:	2330      	movs	r3, #48	; 0x30
   13632:	2200      	movs	r2, #0
   13634:	ba71      	rev16	r1, r6
   13636:	823a      	strh	r2, [r7, #16]
   13638:	8279      	strh	r1, [r7, #18]
   1363a:	4632      	mov	r2, r6
   1363c:	75fb      	strb	r3, [r7, #23]
   1363e:	4999      	ldr	r1, [pc, #612]	; (138a4 <mbedtls_ctr_drbg_reseed_internal+0x310>)
   13640:	f107 0018 	add.w	r0, r7, #24
   13644:	f001 fe96 	bl	15374 <memcpy>
   13648:	2280      	movs	r2, #128	; 0x80
   1364a:	19bb      	adds	r3, r7, r6
   1364c:	761a      	strb	r2, [r3, #24]
   1364e:	f10d 031b 	add.w	r3, sp, #27
   13652:	f803 af01 	strb.w	sl, [r3, #1]!
   13656:	f10a 0a01 	add.w	sl, sl, #1
   1365a:	f1ba 0f20 	cmp.w	sl, #32
   1365e:	d1f8      	bne.n	13652 <mbedtls_ctr_drbg_reseed_internal+0xbe>
   13660:	f44f 7280 	mov.w	r2, #256	; 0x100
   13664:	a907      	add	r1, sp, #28
   13666:	a81b      	add	r0, sp, #108	; 0x6c
   13668:	f000 fd46 	bl	140f8 <cc_mbedtls_aes_setkey_enc>
   1366c:	4683      	mov	fp, r0
   1366e:	2800      	cmp	r0, #0
   13670:	f040 80f5 	bne.w	1385e <mbedtls_ctr_drbg_reseed_internal+0x2ca>
   13674:	9001      	str	r0, [sp, #4]
   13676:	3619      	adds	r6, #25
   13678:	f10d 080c 	add.w	r8, sp, #12
   1367c:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   13680:	2210      	movs	r2, #16
   13682:	2100      	movs	r1, #0
   13684:	4640      	mov	r0, r8
   13686:	f001 fea0 	bl	153ca <memset>
   1368a:	46b1      	mov	r9, r6
   1368c:	4c87      	ldr	r4, [pc, #540]	; (138ac <mbedtls_ctr_drbg_reseed_internal+0x318>)
   1368e:	f89d 200c 	ldrb.w	r2, [sp, #12]
   13692:	f814 3c10 	ldrb.w	r3, [r4, #-16]
   13696:	f89d c00d 	ldrb.w	ip, [sp, #13]
   1369a:	f814 1c0f 	ldrb.w	r1, [r4, #-15]
   1369e:	f89d 000e 	ldrb.w	r0, [sp, #14]
   136a2:	4053      	eors	r3, r2
   136a4:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
   136a8:	ea8c 0c01 	eor.w	ip, ip, r1
   136ac:	4050      	eors	r0, r2
   136ae:	f89d 100f 	ldrb.w	r1, [sp, #15]
   136b2:	f814 2c0d 	ldrb.w	r2, [r4, #-13]
   136b6:	f89d e010 	ldrb.w	lr, [sp, #16]
   136ba:	4051      	eors	r1, r2
   136bc:	f814 2c0c 	ldrb.w	r2, [r4, #-12]
   136c0:	f88d 300c 	strb.w	r3, [sp, #12]
   136c4:	ea8e 0202 	eor.w	r2, lr, r2
   136c8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   136cc:	f89d e011 	ldrb.w	lr, [sp, #17]
   136d0:	f88d c00d 	strb.w	ip, [sp, #13]
   136d4:	ea8e 0303 	eor.w	r3, lr, r3
   136d8:	f814 cc0a 	ldrb.w	ip, [r4, #-10]
   136dc:	f89d e012 	ldrb.w	lr, [sp, #18]
   136e0:	f88d 000e 	strb.w	r0, [sp, #14]
   136e4:	ea8e 0c0c 	eor.w	ip, lr, ip
   136e8:	f814 0c09 	ldrb.w	r0, [r4, #-9]
   136ec:	f89d e013 	ldrb.w	lr, [sp, #19]
   136f0:	f88d 100f 	strb.w	r1, [sp, #15]
   136f4:	ea8e 0000 	eor.w	r0, lr, r0
   136f8:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   136fc:	f89d e014 	ldrb.w	lr, [sp, #20]
   13700:	f88d 2010 	strb.w	r2, [sp, #16]
   13704:	ea8e 0101 	eor.w	r1, lr, r1
   13708:	f814 2c07 	ldrb.w	r2, [r4, #-7]
   1370c:	f89d e015 	ldrb.w	lr, [sp, #21]
   13710:	f88d 3011 	strb.w	r3, [sp, #17]
   13714:	ea8e 0202 	eor.w	r2, lr, r2
   13718:	f89d 3016 	ldrb.w	r3, [sp, #22]
   1371c:	f814 ec06 	ldrb.w	lr, [r4, #-6]
   13720:	f88d c012 	strb.w	ip, [sp, #18]
   13724:	ea83 030e 	eor.w	r3, r3, lr
   13728:	f88d 0013 	strb.w	r0, [sp, #19]
   1372c:	f88d 1014 	strb.w	r1, [sp, #20]
   13730:	f88d 2015 	strb.w	r2, [sp, #21]
   13734:	f88d 3016 	strb.w	r3, [sp, #22]
   13738:	f89d 1017 	ldrb.w	r1, [sp, #23]
   1373c:	f814 3c05 	ldrb.w	r3, [r4, #-5]
   13740:	f89d c018 	ldrb.w	ip, [sp, #24]
   13744:	f89d 0019 	ldrb.w	r0, [sp, #25]
   13748:	404b      	eors	r3, r1
   1374a:	f814 2c04 	ldrb.w	r2, [r4, #-4]
   1374e:	f814 1c03 	ldrb.w	r1, [r4, #-3]
   13752:	ea8c 0202 	eor.w	r2, ip, r2
   13756:	4041      	eors	r1, r0
   13758:	f89d c01a 	ldrb.w	ip, [sp, #26]
   1375c:	f814 0c02 	ldrb.w	r0, [r4, #-2]
   13760:	f89d e01b 	ldrb.w	lr, [sp, #27]
   13764:	ea8c 0000 	eor.w	r0, ip, r0
   13768:	f814 cc01 	ldrb.w	ip, [r4, #-1]
   1376c:	f88d 3017 	strb.w	r3, [sp, #23]
   13770:	ea8e 0c0c 	eor.w	ip, lr, ip
   13774:	f88d 2018 	strb.w	r2, [sp, #24]
   13778:	f88d 1019 	strb.w	r1, [sp, #25]
   1377c:	f88d 001a 	strb.w	r0, [sp, #26]
   13780:	4643      	mov	r3, r8
   13782:	4642      	mov	r2, r8
   13784:	2101      	movs	r1, #1
   13786:	a81b      	add	r0, sp, #108	; 0x6c
   13788:	f88d c01b 	strb.w	ip, [sp, #27]
   1378c:	f000 fcd6 	bl	1413c <cc_mbedtls_aes_crypt_ecb>
   13790:	f1b9 0f10 	cmp.w	r9, #16
   13794:	4683      	mov	fp, r0
   13796:	bf94      	ite	ls
   13798:	eba9 0909 	subls.w	r9, r9, r9
   1379c:	f1a9 0910 	subhi.w	r9, r9, #16
   137a0:	2800      	cmp	r0, #0
   137a2:	d160      	bne.n	13866 <mbedtls_ctr_drbg_reseed_internal+0x2d2>
   137a4:	3410      	adds	r4, #16
   137a6:	f1b9 0f00 	cmp.w	r9, #0
   137aa:	f47f af70 	bne.w	1368e <mbedtls_ctr_drbg_reseed_internal+0xfa>
   137ae:	9c01      	ldr	r4, [sp, #4]
   137b0:	2210      	movs	r2, #16
   137b2:	4641      	mov	r1, r8
   137b4:	eb0a 0004 	add.w	r0, sl, r4
   137b8:	f001 fddc 	bl	15374 <memcpy>
   137bc:	78fb      	ldrb	r3, [r7, #3]
   137be:	f104 0210 	add.w	r2, r4, #16
   137c2:	3301      	adds	r3, #1
   137c4:	2a30      	cmp	r2, #48	; 0x30
   137c6:	9201      	str	r2, [sp, #4]
   137c8:	70fb      	strb	r3, [r7, #3]
   137ca:	f47f af59 	bne.w	13680 <mbedtls_ctr_drbg_reseed_internal+0xec>
   137ce:	f44f 7280 	mov.w	r2, #256	; 0x100
   137d2:	4651      	mov	r1, sl
   137d4:	a81b      	add	r0, sp, #108	; 0x6c
   137d6:	f000 fc8f 	bl	140f8 <cc_mbedtls_aes_setkey_enc>
   137da:	4683      	mov	fp, r0
   137dc:	2800      	cmp	r0, #0
   137de:	d142      	bne.n	13866 <mbedtls_ctr_drbg_reseed_internal+0x2d2>
   137e0:	4c30      	ldr	r4, [pc, #192]	; (138a4 <mbedtls_ctr_drbg_reseed_internal+0x310>)
   137e2:	f104 0630 	add.w	r6, r4, #48	; 0x30
   137e6:	ab17      	add	r3, sp, #92	; 0x5c
   137e8:	461a      	mov	r2, r3
   137ea:	2101      	movs	r1, #1
   137ec:	a81b      	add	r0, sp, #108	; 0x6c
   137ee:	f000 fca5 	bl	1413c <cc_mbedtls_aes_crypt_ecb>
   137f2:	4683      	mov	fp, r0
   137f4:	bbb8      	cbnz	r0, 13866 <mbedtls_ctr_drbg_reseed_internal+0x2d2>
   137f6:	2210      	movs	r2, #16
   137f8:	4620      	mov	r0, r4
   137fa:	a917      	add	r1, sp, #92	; 0x5c
   137fc:	4414      	add	r4, r2
   137fe:	f001 fdb9 	bl	15374 <memcpy>
   13802:	42b4      	cmp	r4, r6
   13804:	d1ef      	bne.n	137e6 <mbedtls_ctr_drbg_reseed_internal+0x252>
   13806:	a81b      	add	r0, sp, #108	; 0x6c
   13808:	f000 fc70 	bl	140ec <cc_mbedtls_aes_free>
   1380c:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   13810:	4825      	ldr	r0, [pc, #148]	; (138a8 <mbedtls_ctr_drbg_reseed_internal+0x314>)
   13812:	f7ff fc6d 	bl	130f0 <mbedtls_platform_zeroize>
   13816:	4650      	mov	r0, sl
   13818:	2130      	movs	r1, #48	; 0x30
   1381a:	f7ff fc69 	bl	130f0 <mbedtls_platform_zeroize>
   1381e:	2120      	movs	r1, #32
   13820:	a807      	add	r0, sp, #28
   13822:	f7ff fc65 	bl	130f0 <mbedtls_platform_zeroize>
   13826:	4640      	mov	r0, r8
   13828:	2110      	movs	r1, #16
   1382a:	f7ff fc61 	bl	130f0 <mbedtls_platform_zeroize>
   1382e:	4628      	mov	r0, r5
   13830:	491c      	ldr	r1, [pc, #112]	; (138a4 <mbedtls_ctr_drbg_reseed_internal+0x310>)
   13832:	f7ff fdfb 	bl	1342c <ctr_drbg_update_internal>
   13836:	4683      	mov	fp, r0
   13838:	b908      	cbnz	r0, 1383e <mbedtls_ctr_drbg_reseed_internal+0x2aa>
   1383a:	2201      	movs	r2, #1
   1383c:	612a      	str	r2, [r5, #16]
   1383e:	f44f 71c0 	mov.w	r1, #384	; 0x180
   13842:	4818      	ldr	r0, [pc, #96]	; (138a4 <mbedtls_ctr_drbg_reseed_internal+0x310>)
   13844:	f7ff fc54 	bl	130f0 <mbedtls_platform_zeroize>
   13848:	4658      	mov	r0, fp
   1384a:	b039      	add	sp, #228	; 0xe4
   1384c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13850:	19a0      	adds	r0, r4, r6
   13852:	4639      	mov	r1, r7
   13854:	4642      	mov	r2, r8
   13856:	f001 fd8d 	bl	15374 <memcpy>
   1385a:	4446      	add	r6, r8
   1385c:	e6d7      	b.n	1360e <mbedtls_ctr_drbg_reseed_internal+0x7a>
   1385e:	f10d 080c 	add.w	r8, sp, #12
   13862:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   13866:	a81b      	add	r0, sp, #108	; 0x6c
   13868:	f000 fc40 	bl	140ec <cc_mbedtls_aes_free>
   1386c:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   13870:	480d      	ldr	r0, [pc, #52]	; (138a8 <mbedtls_ctr_drbg_reseed_internal+0x314>)
   13872:	f7ff fc3d 	bl	130f0 <mbedtls_platform_zeroize>
   13876:	4650      	mov	r0, sl
   13878:	2130      	movs	r1, #48	; 0x30
   1387a:	f7ff fc39 	bl	130f0 <mbedtls_platform_zeroize>
   1387e:	a807      	add	r0, sp, #28
   13880:	2120      	movs	r1, #32
   13882:	f7ff fc35 	bl	130f0 <mbedtls_platform_zeroize>
   13886:	4640      	mov	r0, r8
   13888:	2110      	movs	r1, #16
   1388a:	f7ff fc31 	bl	130f0 <mbedtls_platform_zeroize>
   1388e:	2130      	movs	r1, #48	; 0x30
   13890:	4804      	ldr	r0, [pc, #16]	; (138a4 <mbedtls_ctr_drbg_reseed_internal+0x310>)
   13892:	f7ff fc2d 	bl	130f0 <mbedtls_platform_zeroize>
   13896:	e7d2      	b.n	1383e <mbedtls_ctr_drbg_reseed_internal+0x2aa>
   13898:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   1389c:	e7d4      	b.n	13848 <mbedtls_ctr_drbg_reseed_internal+0x2b4>
   1389e:	f06f 0b33 	mvn.w	fp, #51	; 0x33
   138a2:	e7d1      	b.n	13848 <mbedtls_ctr_drbg_reseed_internal+0x2b4>
   138a4:	200014cc 	.word	0x200014cc
   138a8:	2000132c 	.word	0x2000132c
   138ac:	2000133c 	.word	0x2000133c

000138b0 <cc_mbedtls_ctr_drbg_init>:
   138b0:	b510      	push	{r4, lr}
   138b2:	22a4      	movs	r2, #164	; 0xa4
   138b4:	2100      	movs	r1, #0
   138b6:	4604      	mov	r4, r0
   138b8:	f001 fd87 	bl	153ca <memset>
   138bc:	f04f 32ff 	mov.w	r2, #4294967295
   138c0:	4b03      	ldr	r3, [pc, #12]	; (138d0 <cc_mbedtls_ctr_drbg_init+0x20>)
   138c2:	6122      	str	r2, [r4, #16]
   138c4:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   138c8:	681b      	ldr	r3, [r3, #0]
   138ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   138ce:	4718      	bx	r3
   138d0:	200000b0 	.word	0x200000b0

000138d4 <cc_mbedtls_ctr_drbg_seed>:
   138d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   138d8:	4604      	mov	r4, r0
   138da:	460f      	mov	r7, r1
   138dc:	4615      	mov	r5, r2
   138de:	b088      	sub	sp, #32
   138e0:	2220      	movs	r2, #32
   138e2:	2100      	movs	r1, #0
   138e4:	f100 0820 	add.w	r8, r0, #32
   138e8:	4668      	mov	r0, sp
   138ea:	461e      	mov	r6, r3
   138ec:	f001 fd6d 	bl	153ca <memset>
   138f0:	4640      	mov	r0, r8
   138f2:	f000 fbeb 	bl	140cc <cc_mbedtls_aes_init>
   138f6:	69a0      	ldr	r0, [r4, #24]
   138f8:	e9c4 7525 	strd	r7, r5, [r4, #148]	; 0x94
   138fc:	b9d8      	cbnz	r0, 13936 <cc_mbedtls_ctr_drbg_seed+0x62>
   138fe:	2020      	movs	r0, #32
   13900:	6927      	ldr	r7, [r4, #16]
   13902:	61a0      	str	r0, [r4, #24]
   13904:	2f00      	cmp	r7, #0
   13906:	db1d      	blt.n	13944 <cc_mbedtls_ctr_drbg_seed+0x70>
   13908:	f64f 73f0 	movw	r3, #65520	; 0xfff0
   1390c:	4669      	mov	r1, sp
   1390e:	4640      	mov	r0, r8
   13910:	f44f 7280 	mov.w	r2, #256	; 0x100
   13914:	61e3      	str	r3, [r4, #28]
   13916:	f000 fbef 	bl	140f8 <cc_mbedtls_aes_setkey_enc>
   1391a:	4605      	mov	r5, r0
   1391c:	b938      	cbnz	r0, 1392e <cc_mbedtls_ctr_drbg_seed+0x5a>
   1391e:	4b14      	ldr	r3, [pc, #80]	; (13970 <cc_mbedtls_ctr_drbg_seed+0x9c>)
   13920:	f104 089c 	add.w	r8, r4, #156	; 0x9c
   13924:	4640      	mov	r0, r8
   13926:	681b      	ldr	r3, [r3, #0]
   13928:	4798      	blx	r3
   1392a:	4605      	mov	r5, r0
   1392c:	b168      	cbz	r0, 1394a <cc_mbedtls_ctr_drbg_seed+0x76>
   1392e:	4628      	mov	r0, r5
   13930:	b008      	add	sp, #32
   13932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13936:	6927      	ldr	r7, [r4, #16]
   13938:	2f00      	cmp	r7, #0
   1393a:	dae5      	bge.n	13908 <cc_mbedtls_ctr_drbg_seed+0x34>
   1393c:	282f      	cmp	r0, #47	; 0x2f
   1393e:	bf88      	it	hi
   13940:	2700      	movhi	r7, #0
   13942:	d8e1      	bhi.n	13908 <cc_mbedtls_ctr_drbg_seed+0x34>
   13944:	3001      	adds	r0, #1
   13946:	0847      	lsrs	r7, r0, #1
   13948:	e7de      	b.n	13908 <cc_mbedtls_ctr_drbg_seed+0x34>
   1394a:	463b      	mov	r3, r7
   1394c:	4631      	mov	r1, r6
   1394e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   13950:	4620      	mov	r0, r4
   13952:	f7ff fe1f 	bl	13594 <mbedtls_ctr_drbg_reseed_internal>
   13956:	4b07      	ldr	r3, [pc, #28]	; (13974 <cc_mbedtls_ctr_drbg_seed+0xa0>)
   13958:	4605      	mov	r5, r0
   1395a:	681b      	ldr	r3, [r3, #0]
   1395c:	4640      	mov	r0, r8
   1395e:	4798      	blx	r3
   13960:	2800      	cmp	r0, #0
   13962:	bf18      	it	ne
   13964:	4605      	movne	r5, r0
   13966:	4628      	mov	r0, r5
   13968:	b008      	add	sp, #32
   1396a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1396e:	bf00      	nop
   13970:	200000b4 	.word	0x200000b4
   13974:	200000b8 	.word	0x200000b8

00013978 <cc_mbedtls_ctr_drbg_random_with_add>:
   13978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1397c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   13980:	b090      	sub	sp, #64	; 0x40
   13982:	9f18      	ldr	r7, [sp, #96]	; 0x60
   13984:	f200 80cb 	bhi.w	13b1e <cc_mbedtls_ctr_drbg_random_with_add+0x1a6>
   13988:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   1398c:	f200 80c4 	bhi.w	13b18 <cc_mbedtls_ctr_drbg_random_with_add+0x1a0>
   13990:	4604      	mov	r4, r0
   13992:	4615      	mov	r5, r2
   13994:	460e      	mov	r6, r1
   13996:	2230      	movs	r2, #48	; 0x30
   13998:	2100      	movs	r1, #0
   1399a:	a804      	add	r0, sp, #16
   1399c:	4698      	mov	r8, r3
   1399e:	f001 fd14 	bl	153ca <memset>
   139a2:	6921      	ldr	r1, [r4, #16]
   139a4:	69e2      	ldr	r2, [r4, #28]
   139a6:	4291      	cmp	r1, r2
   139a8:	f300 8087 	bgt.w	13aba <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   139ac:	6963      	ldr	r3, [r4, #20]
   139ae:	2b00      	cmp	r3, #0
   139b0:	f040 8083 	bne.w	13aba <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   139b4:	2f00      	cmp	r7, #0
   139b6:	f040 80a7 	bne.w	13b08 <cc_mbedtls_ctr_drbg_random_with_add+0x190>
   139ba:	466f      	mov	r7, sp
   139bc:	2d00      	cmp	r5, #0
   139be:	f000 8098 	beq.w	13af2 <cc_mbedtls_ctr_drbg_random_with_add+0x17a>
   139c2:	466f      	mov	r7, sp
   139c4:	f104 0820 	add.w	r8, r4, #32
   139c8:	e00e      	b.n	139e8 <cc_mbedtls_ctr_drbg_random_with_add+0x70>
   139ca:	2d10      	cmp	r5, #16
   139cc:	46a9      	mov	r9, r5
   139ce:	bf28      	it	cs
   139d0:	f04f 0910 	movcs.w	r9, #16
   139d4:	4630      	mov	r0, r6
   139d6:	4639      	mov	r1, r7
   139d8:	464a      	mov	r2, r9
   139da:	f001 fccb 	bl	15374 <memcpy>
   139de:	ebb5 0509 	subs.w	r5, r5, r9
   139e2:	444e      	add	r6, r9
   139e4:	f000 8085 	beq.w	13af2 <cc_mbedtls_ctr_drbg_random_with_add+0x17a>
   139e8:	7be3      	ldrb	r3, [r4, #15]
   139ea:	3301      	adds	r3, #1
   139ec:	b2db      	uxtb	r3, r3
   139ee:	73e3      	strb	r3, [r4, #15]
   139f0:	2b00      	cmp	r3, #0
   139f2:	d14d      	bne.n	13a90 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
   139f4:	7ba3      	ldrb	r3, [r4, #14]
   139f6:	3301      	adds	r3, #1
   139f8:	b2db      	uxtb	r3, r3
   139fa:	73a3      	strb	r3, [r4, #14]
   139fc:	2b00      	cmp	r3, #0
   139fe:	d147      	bne.n	13a90 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
   13a00:	7b63      	ldrb	r3, [r4, #13]
   13a02:	3301      	adds	r3, #1
   13a04:	b2db      	uxtb	r3, r3
   13a06:	7363      	strb	r3, [r4, #13]
   13a08:	2b00      	cmp	r3, #0
   13a0a:	d141      	bne.n	13a90 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
   13a0c:	7b23      	ldrb	r3, [r4, #12]
   13a0e:	3301      	adds	r3, #1
   13a10:	b2db      	uxtb	r3, r3
   13a12:	7323      	strb	r3, [r4, #12]
   13a14:	2b00      	cmp	r3, #0
   13a16:	d13b      	bne.n	13a90 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
   13a18:	7ae3      	ldrb	r3, [r4, #11]
   13a1a:	3301      	adds	r3, #1
   13a1c:	b2db      	uxtb	r3, r3
   13a1e:	72e3      	strb	r3, [r4, #11]
   13a20:	2b00      	cmp	r3, #0
   13a22:	d135      	bne.n	13a90 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
   13a24:	7aa3      	ldrb	r3, [r4, #10]
   13a26:	3301      	adds	r3, #1
   13a28:	b2db      	uxtb	r3, r3
   13a2a:	72a3      	strb	r3, [r4, #10]
   13a2c:	2b00      	cmp	r3, #0
   13a2e:	d12f      	bne.n	13a90 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
   13a30:	7a63      	ldrb	r3, [r4, #9]
   13a32:	3301      	adds	r3, #1
   13a34:	b2db      	uxtb	r3, r3
   13a36:	7263      	strb	r3, [r4, #9]
   13a38:	bb53      	cbnz	r3, 13a90 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
   13a3a:	7a23      	ldrb	r3, [r4, #8]
   13a3c:	3301      	adds	r3, #1
   13a3e:	b2db      	uxtb	r3, r3
   13a40:	7223      	strb	r3, [r4, #8]
   13a42:	bb2b      	cbnz	r3, 13a90 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
   13a44:	79e3      	ldrb	r3, [r4, #7]
   13a46:	3301      	adds	r3, #1
   13a48:	b2db      	uxtb	r3, r3
   13a4a:	71e3      	strb	r3, [r4, #7]
   13a4c:	bb03      	cbnz	r3, 13a90 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
   13a4e:	79a3      	ldrb	r3, [r4, #6]
   13a50:	3301      	adds	r3, #1
   13a52:	b2db      	uxtb	r3, r3
   13a54:	71a3      	strb	r3, [r4, #6]
   13a56:	b9db      	cbnz	r3, 13a90 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
   13a58:	7963      	ldrb	r3, [r4, #5]
   13a5a:	3301      	adds	r3, #1
   13a5c:	b2db      	uxtb	r3, r3
   13a5e:	7163      	strb	r3, [r4, #5]
   13a60:	b9b3      	cbnz	r3, 13a90 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
   13a62:	7923      	ldrb	r3, [r4, #4]
   13a64:	3301      	adds	r3, #1
   13a66:	b2db      	uxtb	r3, r3
   13a68:	7123      	strb	r3, [r4, #4]
   13a6a:	b98b      	cbnz	r3, 13a90 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
   13a6c:	78e3      	ldrb	r3, [r4, #3]
   13a6e:	3301      	adds	r3, #1
   13a70:	b2db      	uxtb	r3, r3
   13a72:	70e3      	strb	r3, [r4, #3]
   13a74:	b963      	cbnz	r3, 13a90 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
   13a76:	78a3      	ldrb	r3, [r4, #2]
   13a78:	3301      	adds	r3, #1
   13a7a:	b2db      	uxtb	r3, r3
   13a7c:	70a3      	strb	r3, [r4, #2]
   13a7e:	b93b      	cbnz	r3, 13a90 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
   13a80:	7863      	ldrb	r3, [r4, #1]
   13a82:	3301      	adds	r3, #1
   13a84:	b2db      	uxtb	r3, r3
   13a86:	7063      	strb	r3, [r4, #1]
   13a88:	b913      	cbnz	r3, 13a90 <cc_mbedtls_ctr_drbg_random_with_add+0x118>
   13a8a:	7823      	ldrb	r3, [r4, #0]
   13a8c:	3301      	adds	r3, #1
   13a8e:	7023      	strb	r3, [r4, #0]
   13a90:	463b      	mov	r3, r7
   13a92:	4622      	mov	r2, r4
   13a94:	2101      	movs	r1, #1
   13a96:	4640      	mov	r0, r8
   13a98:	f000 fb50 	bl	1413c <cc_mbedtls_aes_crypt_ecb>
   13a9c:	4681      	mov	r9, r0
   13a9e:	2800      	cmp	r0, #0
   13aa0:	d093      	beq.n	139ca <cc_mbedtls_ctr_drbg_random_with_add+0x52>
   13aa2:	2130      	movs	r1, #48	; 0x30
   13aa4:	a804      	add	r0, sp, #16
   13aa6:	f7ff fb23 	bl	130f0 <mbedtls_platform_zeroize>
   13aaa:	4638      	mov	r0, r7
   13aac:	2110      	movs	r1, #16
   13aae:	f7ff fb1f 	bl	130f0 <mbedtls_platform_zeroize>
   13ab2:	4648      	mov	r0, r9
   13ab4:	b010      	add	sp, #64	; 0x40
   13ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13aba:	4b1a      	ldr	r3, [pc, #104]	; (13b24 <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>)
   13abc:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
   13ac0:	4650      	mov	r0, sl
   13ac2:	681b      	ldr	r3, [r3, #0]
   13ac4:	4798      	blx	r3
   13ac6:	4681      	mov	r9, r0
   13ac8:	2800      	cmp	r0, #0
   13aca:	d1f2      	bne.n	13ab2 <cc_mbedtls_ctr_drbg_random_with_add+0x13a>
   13acc:	4603      	mov	r3, r0
   13ace:	463a      	mov	r2, r7
   13ad0:	4641      	mov	r1, r8
   13ad2:	4620      	mov	r0, r4
   13ad4:	f7ff fd5e 	bl	13594 <mbedtls_ctr_drbg_reseed_internal>
   13ad8:	4b13      	ldr	r3, [pc, #76]	; (13b28 <cc_mbedtls_ctr_drbg_random_with_add+0x1b0>)
   13ada:	4607      	mov	r7, r0
   13adc:	681b      	ldr	r3, [r3, #0]
   13ade:	4650      	mov	r0, sl
   13ae0:	4798      	blx	r3
   13ae2:	4681      	mov	r9, r0
   13ae4:	2800      	cmp	r0, #0
   13ae6:	d1e4      	bne.n	13ab2 <cc_mbedtls_ctr_drbg_random_with_add+0x13a>
   13ae8:	2f00      	cmp	r7, #0
   13aea:	f43f af66 	beq.w	139ba <cc_mbedtls_ctr_drbg_random_with_add+0x42>
   13aee:	46b9      	mov	r9, r7
   13af0:	e7df      	b.n	13ab2 <cc_mbedtls_ctr_drbg_random_with_add+0x13a>
   13af2:	4620      	mov	r0, r4
   13af4:	a904      	add	r1, sp, #16
   13af6:	f7ff fc99 	bl	1342c <ctr_drbg_update_internal>
   13afa:	4681      	mov	r9, r0
   13afc:	2800      	cmp	r0, #0
   13afe:	d1d0      	bne.n	13aa2 <cc_mbedtls_ctr_drbg_random_with_add+0x12a>
   13b00:	6923      	ldr	r3, [r4, #16]
   13b02:	3301      	adds	r3, #1
   13b04:	6123      	str	r3, [r4, #16]
   13b06:	e7cc      	b.n	13aa2 <cc_mbedtls_ctr_drbg_random_with_add+0x12a>
   13b08:	4b06      	ldr	r3, [pc, #24]	; (13b24 <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>)
   13b0a:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   13b0e:	681b      	ldr	r3, [r3, #0]
   13b10:	4798      	blx	r3
   13b12:	466f      	mov	r7, sp
   13b14:	4681      	mov	r9, r0
   13b16:	e7c4      	b.n	13aa2 <cc_mbedtls_ctr_drbg_random_with_add+0x12a>
   13b18:	f06f 0937 	mvn.w	r9, #55	; 0x37
   13b1c:	e7c9      	b.n	13ab2 <cc_mbedtls_ctr_drbg_random_with_add+0x13a>
   13b1e:	f06f 0935 	mvn.w	r9, #53	; 0x35
   13b22:	e7c6      	b.n	13ab2 <cc_mbedtls_ctr_drbg_random_with_add+0x13a>
   13b24:	200000b4 	.word	0x200000b4
   13b28:	200000b8 	.word	0x200000b8

00013b2c <cc_mbedtls_sha256_ret>:
   13b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13b2e:	461c      	mov	r4, r3
   13b30:	4605      	mov	r5, r0
   13b32:	4811      	ldr	r0, [pc, #68]	; (13b78 <cc_mbedtls_sha256_ret+0x4c>)
   13b34:	460e      	mov	r6, r1
   13b36:	4617      	mov	r7, r2
   13b38:	f7ff fb6a 	bl	13210 <cc_mbedtls_sha256_init>
   13b3c:	4621      	mov	r1, r4
   13b3e:	480e      	ldr	r0, [pc, #56]	; (13b78 <cc_mbedtls_sha256_ret+0x4c>)
   13b40:	f7ff fb80 	bl	13244 <cc_mbedtls_sha256_starts_ret>
   13b44:	4604      	mov	r4, r0
   13b46:	b120      	cbz	r0, 13b52 <cc_mbedtls_sha256_ret+0x26>
   13b48:	480b      	ldr	r0, [pc, #44]	; (13b78 <cc_mbedtls_sha256_ret+0x4c>)
   13b4a:	f7ff fb75 	bl	13238 <cc_mbedtls_sha256_free>
   13b4e:	4620      	mov	r0, r4
   13b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13b52:	4632      	mov	r2, r6
   13b54:	4629      	mov	r1, r5
   13b56:	4808      	ldr	r0, [pc, #32]	; (13b78 <cc_mbedtls_sha256_ret+0x4c>)
   13b58:	f7ff fb88 	bl	1326c <cc_mbedtls_sha256_update_ret>
   13b5c:	4604      	mov	r4, r0
   13b5e:	2800      	cmp	r0, #0
   13b60:	d1f2      	bne.n	13b48 <cc_mbedtls_sha256_ret+0x1c>
   13b62:	4639      	mov	r1, r7
   13b64:	4804      	ldr	r0, [pc, #16]	; (13b78 <cc_mbedtls_sha256_ret+0x4c>)
   13b66:	f7ff fb89 	bl	1327c <cc_mbedtls_sha256_finish_ret>
   13b6a:	4604      	mov	r4, r0
   13b6c:	4802      	ldr	r0, [pc, #8]	; (13b78 <cc_mbedtls_sha256_ret+0x4c>)
   13b6e:	f7ff fb63 	bl	13238 <cc_mbedtls_sha256_free>
   13b72:	4620      	mov	r0, r4
   13b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13b76:	bf00      	nop
   13b78:	2000164c 	.word	0x2000164c

00013b7c <RNG_PLAT_SetUserRngParameters>:
   13b7c:	231c      	movs	r3, #28
   13b7e:	b530      	push	{r4, r5, lr}
   13b80:	b083      	sub	sp, #12
   13b82:	a901      	add	r1, sp, #4
   13b84:	4604      	mov	r4, r0
   13b86:	9301      	str	r3, [sp, #4]
   13b88:	f000 f83e 	bl	13c08 <CC_PalTrngParamGet>
   13b8c:	4605      	mov	r5, r0
   13b8e:	b938      	cbnz	r0, 13ba0 <RNG_PLAT_SetUserRngParameters+0x24>
   13b90:	9b01      	ldr	r3, [sp, #4]
   13b92:	2b1c      	cmp	r3, #28
   13b94:	d007      	beq.n	13ba6 <RNG_PLAT_SetUserRngParameters+0x2a>
   13b96:	4d16      	ldr	r5, [pc, #88]	; (13bf0 <RNG_PLAT_SetUserRngParameters+0x74>)
   13b98:	4620      	mov	r0, r4
   13b9a:	211c      	movs	r1, #28
   13b9c:	f000 f830 	bl	13c00 <CC_PalMemSetZeroPlat>
   13ba0:	4628      	mov	r0, r5
   13ba2:	b003      	add	sp, #12
   13ba4:	bd30      	pop	{r4, r5, pc}
   13ba6:	2101      	movs	r1, #1
   13ba8:	e9d4 3200 	ldrd	r3, r2, [r4]
   13bac:	3b00      	subs	r3, #0
   13bae:	bf18      	it	ne
   13bb0:	2301      	movne	r3, #1
   13bb2:	61e1      	str	r1, [r4, #28]
   13bb4:	b10a      	cbz	r2, 13bba <RNG_PLAT_SetUserRngParameters+0x3e>
   13bb6:	f043 0302 	orr.w	r3, r3, #2
   13bba:	68a2      	ldr	r2, [r4, #8]
   13bbc:	b932      	cbnz	r2, 13bcc <RNG_PLAT_SetUserRngParameters+0x50>
   13bbe:	68e2      	ldr	r2, [r4, #12]
   13bc0:	b942      	cbnz	r2, 13bd4 <RNG_PLAT_SetUserRngParameters+0x58>
   13bc2:	e9c4 3208 	strd	r3, r2, [r4, #32]
   13bc6:	b98b      	cbnz	r3, 13bec <RNG_PLAT_SetUserRngParameters+0x70>
   13bc8:	4d0a      	ldr	r5, [pc, #40]	; (13bf4 <RNG_PLAT_SetUserRngParameters+0x78>)
   13bca:	e7e5      	b.n	13b98 <RNG_PLAT_SetUserRngParameters+0x1c>
   13bcc:	68e2      	ldr	r2, [r4, #12]
   13bce:	f043 0304 	orr.w	r3, r3, #4
   13bd2:	b13a      	cbz	r2, 13be4 <RNG_PLAT_SetUserRngParameters+0x68>
   13bd4:	2200      	movs	r2, #0
   13bd6:	4628      	mov	r0, r5
   13bd8:	f043 0308 	orr.w	r3, r3, #8
   13bdc:	e9c4 3208 	strd	r3, r2, [r4, #32]
   13be0:	b003      	add	sp, #12
   13be2:	bd30      	pop	{r4, r5, pc}
   13be4:	4615      	mov	r5, r2
   13be6:	e9c4 3208 	strd	r3, r2, [r4, #32]
   13bea:	e7d9      	b.n	13ba0 <RNG_PLAT_SetUserRngParameters+0x24>
   13bec:	4615      	mov	r5, r2
   13bee:	e7d7      	b.n	13ba0 <RNG_PLAT_SetUserRngParameters+0x24>
   13bf0:	00f00c37 	.word	0x00f00c37
   13bf4:	00f00c0e 	.word	0x00f00c0e

00013bf8 <CC_PalMemCopyPlat>:
   13bf8:	f001 bba5 	b.w	15346 <memmove>

00013bfc <CC_PalMemSetPlat>:
   13bfc:	f001 bbe5 	b.w	153ca <memset>

00013c00 <CC_PalMemSetZeroPlat>:
   13c00:	460a      	mov	r2, r1
   13c02:	2100      	movs	r1, #0
   13c04:	f001 bbe1 	b.w	153ca <memset>

00013c08 <CC_PalTrngParamGet>:
   13c08:	b118      	cbz	r0, 13c12 <CC_PalTrngParamGet+0xa>
   13c0a:	b111      	cbz	r1, 13c12 <CC_PalTrngParamGet+0xa>
   13c0c:	680b      	ldr	r3, [r1, #0]
   13c0e:	2b1c      	cmp	r3, #28
   13c10:	d001      	beq.n	13c16 <CC_PalTrngParamGet+0xe>
   13c12:	2001      	movs	r0, #1
   13c14:	4770      	bx	lr
   13c16:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13c1a:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   13c1e:	3201      	adds	r2, #1
   13c20:	bf0c      	ite	eq
   13c22:	f240 52dc 	movweq	r2, #1500	; 0x5dc
   13c26:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   13c2a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13c2e:	6002      	str	r2, [r0, #0]
   13c30:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   13c34:	3201      	adds	r2, #1
   13c36:	bf0c      	ite	eq
   13c38:	f240 52dc 	movweq	r2, #1500	; 0x5dc
   13c3c:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   13c40:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13c44:	6042      	str	r2, [r0, #4]
   13c46:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   13c4a:	3201      	adds	r2, #1
   13c4c:	bf0c      	ite	eq
   13c4e:	f640 0234 	movweq	r2, #2100	; 0x834
   13c52:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   13c56:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13c5a:	6082      	str	r2, [r0, #8]
   13c5c:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   13c60:	3201      	adds	r2, #1
   13c62:	bf0c      	ite	eq
   13c64:	f640 0234 	movweq	r2, #2100	; 0x834
   13c68:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   13c6c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13c70:	60c2      	str	r2, [r0, #12]
   13c72:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   13c76:	3201      	adds	r2, #1
   13c78:	bf0c      	ite	eq
   13c7a:	2290      	moveq	r2, #144	; 0x90
   13c7c:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   13c80:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13c84:	6102      	str	r2, [r0, #16]
   13c86:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   13c8a:	3201      	adds	r2, #1
   13c8c:	bf0c      	ite	eq
   13c8e:	2251      	moveq	r2, #81	; 0x51
   13c90:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   13c94:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   13c98:	6142      	str	r2, [r0, #20]
   13c9a:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   13c9e:	3201      	adds	r2, #1
   13ca0:	bf0c      	ite	eq
   13ca2:	f240 3337 	movweq	r3, #823	; 0x337
   13ca6:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   13caa:	6183      	str	r3, [r0, #24]
   13cac:	2000      	movs	r0, #0
   13cae:	4770      	bx	lr

00013cb0 <LLF_RND_WaitRngInterrupt>:
   13cb0:	4601      	mov	r1, r0
   13cb2:	b508      	push	{r3, lr}
   13cb4:	f44f 6080 	mov.w	r0, #1024	; 0x400
   13cb8:	f7fe fe52 	bl	12960 <CC_HalWaitInterruptRND>
   13cbc:	2300      	movs	r3, #0
   13cbe:	4902      	ldr	r1, [pc, #8]	; (13cc8 <LLF_RND_WaitRngInterrupt+0x18>)
   13cc0:	4a02      	ldr	r2, [pc, #8]	; (13ccc <LLF_RND_WaitRngInterrupt+0x1c>)
   13cc2:	600b      	str	r3, [r1, #0]
   13cc4:	6013      	str	r3, [r2, #0]
   13cc6:	bd08      	pop	{r3, pc}
   13cc8:	508451c8 	.word	0x508451c8
   13ccc:	5084512c 	.word	0x5084512c

00013cd0 <LLF_RND_GetRoscSampleCnt>:
   13cd0:	3801      	subs	r0, #1
   13cd2:	2807      	cmp	r0, #7
   13cd4:	d805      	bhi.n	13ce2 <LLF_RND_GetRoscSampleCnt+0x12>
   13cd6:	e8df f000 	tbb	[pc, r0]
   13cda:	0e0a      	.short	0x0e0a
   13cdc:	04041204 	.word	0x04041204
   13ce0:	0604      	.short	0x0604
   13ce2:	4809      	ldr	r0, [pc, #36]	; (13d08 <LLF_RND_GetRoscSampleCnt+0x38>)
   13ce4:	4770      	bx	lr
   13ce6:	68cb      	ldr	r3, [r1, #12]
   13ce8:	2000      	movs	r0, #0
   13cea:	624b      	str	r3, [r1, #36]	; 0x24
   13cec:	4770      	bx	lr
   13cee:	680b      	ldr	r3, [r1, #0]
   13cf0:	2000      	movs	r0, #0
   13cf2:	624b      	str	r3, [r1, #36]	; 0x24
   13cf4:	4770      	bx	lr
   13cf6:	684b      	ldr	r3, [r1, #4]
   13cf8:	2000      	movs	r0, #0
   13cfa:	624b      	str	r3, [r1, #36]	; 0x24
   13cfc:	4770      	bx	lr
   13cfe:	688b      	ldr	r3, [r1, #8]
   13d00:	2000      	movs	r0, #0
   13d02:	624b      	str	r3, [r1, #36]	; 0x24
   13d04:	4770      	bx	lr
   13d06:	bf00      	nop
   13d08:	00f10c31 	.word	0x00f10c31

00013d0c <LLF_RND_GetFastestRosc>:
   13d0c:	680b      	ldr	r3, [r1, #0]
   13d0e:	e002      	b.n	13d16 <LLF_RND_GetFastestRosc+0xa>
   13d10:	2b08      	cmp	r3, #8
   13d12:	600b      	str	r3, [r1, #0]
   13d14:	d806      	bhi.n	13d24 <LLF_RND_GetFastestRosc+0x18>
   13d16:	6a02      	ldr	r2, [r0, #32]
   13d18:	4213      	tst	r3, r2
   13d1a:	ea4f 0343 	mov.w	r3, r3, lsl #1
   13d1e:	d0f7      	beq.n	13d10 <LLF_RND_GetFastestRosc+0x4>
   13d20:	2000      	movs	r0, #0
   13d22:	4770      	bx	lr
   13d24:	4800      	ldr	r0, [pc, #0]	; (13d28 <LLF_RND_GetFastestRosc+0x1c>)
   13d26:	4770      	bx	lr
   13d28:	00f10c31 	.word	0x00f10c31

00013d2c <LLF_RND_TurnOffTrng>:
   13d2c:	b508      	push	{r3, lr}
   13d2e:	2300      	movs	r3, #0
   13d30:	4a06      	ldr	r2, [pc, #24]	; (13d4c <LLF_RND_TurnOffTrng+0x20>)
   13d32:	4907      	ldr	r1, [pc, #28]	; (13d50 <LLF_RND_TurnOffTrng+0x24>)
   13d34:	f44f 6080 	mov.w	r0, #1024	; 0x400
   13d38:	600b      	str	r3, [r1, #0]
   13d3a:	6013      	str	r3, [r2, #0]
   13d3c:	f7fe fdf6 	bl	1292c <CC_HalClearInterruptBit>
   13d40:	f04f 32ff 	mov.w	r2, #4294967295
   13d44:	4b03      	ldr	r3, [pc, #12]	; (13d54 <LLF_RND_TurnOffTrng+0x28>)
   13d46:	601a      	str	r2, [r3, #0]
   13d48:	bd08      	pop	{r3, pc}
   13d4a:	bf00      	nop
   13d4c:	508451c4 	.word	0x508451c4
   13d50:	5084512c 	.word	0x5084512c
   13d54:	50845108 	.word	0x50845108

00013d58 <SetDataBuffersInfo>:
   13d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13d5c:	2400      	movs	r4, #0
   13d5e:	b082      	sub	sp, #8
   13d60:	4615      	mov	r5, r2
   13d62:	461e      	mov	r6, r3
   13d64:	2201      	movs	r2, #1
   13d66:	f10d 0307 	add.w	r3, sp, #7
   13d6a:	4607      	mov	r7, r0
   13d6c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   13d70:	f88d 4007 	strb.w	r4, [sp, #7]
   13d74:	f000 fa0c 	bl	14190 <CC_PalDataBufferAttrGet>
   13d78:	b9d0      	cbnz	r0, 13db0 <SetDataBuffersInfo+0x58>
   13d7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13d7e:	4604      	mov	r4, r0
   13d80:	602f      	str	r7, [r5, #0]
   13d82:	712b      	strb	r3, [r5, #4]
   13d84:	f1b8 0f00 	cmp.w	r8, #0
   13d88:	d00e      	beq.n	13da8 <SetDataBuffersInfo+0x50>
   13d8a:	b14e      	cbz	r6, 13da0 <SetDataBuffersInfo+0x48>
   13d8c:	4602      	mov	r2, r0
   13d8e:	9908      	ldr	r1, [sp, #32]
   13d90:	4630      	mov	r0, r6
   13d92:	f10d 0307 	add.w	r3, sp, #7
   13d96:	f000 f9fb 	bl	14190 <CC_PalDataBufferAttrGet>
   13d9a:	b948      	cbnz	r0, 13db0 <SetDataBuffersInfo+0x58>
   13d9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13da0:	f8c8 6000 	str.w	r6, [r8]
   13da4:	f888 3004 	strb.w	r3, [r8, #4]
   13da8:	4620      	mov	r0, r4
   13daa:	b002      	add	sp, #8
   13dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13db0:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
   13db4:	4620      	mov	r0, r4
   13db6:	b002      	add	sp, #8
   13db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00013dbc <InitHashDrv>:
   13dbc:	b1e8      	cbz	r0, 13dfa <InitHashDrv+0x3e>
   13dbe:	b510      	push	{r4, lr}
   13dc0:	6804      	ldr	r4, [r0, #0]
   13dc2:	2c01      	cmp	r4, #1
   13dc4:	d004      	beq.n	13dd0 <InitHashDrv+0x14>
   13dc6:	2c02      	cmp	r4, #2
   13dc8:	d010      	beq.n	13dec <InitHashDrv+0x30>
   13dca:	b144      	cbz	r4, 13dde <InitHashDrv+0x22>
   13dcc:	480c      	ldr	r0, [pc, #48]	; (13e00 <InitHashDrv+0x44>)
   13dce:	bd10      	pop	{r4, pc}
   13dd0:	2220      	movs	r2, #32
   13dd2:	490c      	ldr	r1, [pc, #48]	; (13e04 <InitHashDrv+0x48>)
   13dd4:	3008      	adds	r0, #8
   13dd6:	f7ff ff0f 	bl	13bf8 <CC_PalMemCopyPlat>
   13dda:	2000      	movs	r0, #0
   13ddc:	bd10      	pop	{r4, pc}
   13dde:	2214      	movs	r2, #20
   13de0:	4909      	ldr	r1, [pc, #36]	; (13e08 <InitHashDrv+0x4c>)
   13de2:	3008      	adds	r0, #8
   13de4:	f7ff ff08 	bl	13bf8 <CC_PalMemCopyPlat>
   13de8:	4620      	mov	r0, r4
   13dea:	bd10      	pop	{r4, pc}
   13dec:	2220      	movs	r2, #32
   13dee:	4907      	ldr	r1, [pc, #28]	; (13e0c <InitHashDrv+0x50>)
   13df0:	3008      	adds	r0, #8
   13df2:	f7ff ff01 	bl	13bf8 <CC_PalMemCopyPlat>
   13df6:	2000      	movs	r0, #0
   13df8:	bd10      	pop	{r4, pc}
   13dfa:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   13dfe:	4770      	bx	lr
   13e00:	00f30001 	.word	0x00f30001
   13e04:	00017e1c 	.word	0x00017e1c
   13e08:	00017de8 	.word	0x00017de8
   13e0c:	00017dfc 	.word	0x00017dfc

00013e10 <ProcessHashDrv>:
   13e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13e14:	2900      	cmp	r1, #0
   13e16:	f000 80e4 	beq.w	13fe2 <ProcessHashDrv+0x1d2>
   13e1a:	4604      	mov	r4, r0
   13e1c:	2800      	cmp	r0, #0
   13e1e:	f000 80e4 	beq.w	13fea <ProcessHashDrv+0x1da>
   13e22:	6803      	ldr	r3, [r0, #0]
   13e24:	4690      	mov	r8, r2
   13e26:	460f      	mov	r7, r1
   13e28:	2b00      	cmp	r3, #0
   13e2a:	f000 80ae 	beq.w	13f8a <ProcessHashDrv+0x17a>
   13e2e:	3b01      	subs	r3, #1
   13e30:	2b01      	cmp	r3, #1
   13e32:	f200 80c2 	bhi.w	13fba <ProcessHashDrv+0x1aa>
   13e36:	f04f 31ff 	mov.w	r1, #4294967295
   13e3a:	486d      	ldr	r0, [pc, #436]	; (13ff0 <ProcessHashDrv+0x1e0>)
   13e3c:	f04f 0902 	mov.w	r9, #2
   13e40:	f7fe fe28 	bl	12a94 <CC_PalMutexLock>
   13e44:	2800      	cmp	r0, #0
   13e46:	f040 80aa 	bne.w	13f9e <ProcessHashDrv+0x18e>
   13e4a:	2000      	movs	r0, #0
   13e4c:	f7fe fe52 	bl	12af4 <CC_PalPowerSaveModeSelect>
   13e50:	4606      	mov	r6, r0
   13e52:	2800      	cmp	r0, #0
   13e54:	f040 80ad 	bne.w	13fb2 <ProcessHashDrv+0x1a2>
   13e58:	4b66      	ldr	r3, [pc, #408]	; (13ff4 <ProcessHashDrv+0x1e4>)
   13e5a:	681d      	ldr	r5, [r3, #0]
   13e5c:	2d00      	cmp	r5, #0
   13e5e:	d1fc      	bne.n	13e5a <ProcessHashDrv+0x4a>
   13e60:	f04f 30ff 	mov.w	r0, #4294967295
   13e64:	f7fe fd62 	bl	1292c <CC_HalClearInterruptBit>
   13e68:	4b63      	ldr	r3, [pc, #396]	; (13ff8 <ProcessHashDrv+0x1e8>)
   13e6a:	6818      	ldr	r0, [r3, #0]
   13e6c:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
   13e70:	f7fe fd6a 	bl	12948 <CC_HalMaskInterrupt>
   13e74:	2301      	movs	r3, #1
   13e76:	2007      	movs	r0, #7
   13e78:	4a60      	ldr	r2, [pc, #384]	; (13ffc <ProcessHashDrv+0x1ec>)
   13e7a:	4961      	ldr	r1, [pc, #388]	; (14000 <ProcessHashDrv+0x1f0>)
   13e7c:	6013      	str	r3, [r2, #0]
   13e7e:	600b      	str	r3, [r1, #0]
   13e80:	f5a2 72ba 	sub.w	r2, r2, #372	; 0x174
   13e84:	f8c2 025c 	str.w	r0, [r2, #604]	; 0x25c
   13e88:	f841 3c5c 	str.w	r3, [r1, #-92]
   13e8c:	6015      	str	r5, [r2, #0]
   13e8e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   13e90:	4b5c      	ldr	r3, [pc, #368]	; (14004 <ProcessHashDrv+0x1f4>)
   13e92:	6019      	str	r1, [r3, #0]
   13e94:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   13e96:	f8c2 112c 	str.w	r1, [r2, #300]	; 0x12c
   13e9a:	f843 9c0c 	str.w	r9, [r3, #-12]
   13e9e:	6823      	ldr	r3, [r4, #0]
   13ea0:	f502 7296 	add.w	r2, r2, #300	; 0x12c
   13ea4:	b163      	cbz	r3, 13ec0 <ProcessHashDrv+0xb0>
   13ea6:	3b01      	subs	r3, #1
   13ea8:	2b01      	cmp	r3, #1
   13eaa:	d818      	bhi.n	13ede <ProcessHashDrv+0xce>
   13eac:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13eae:	4b56      	ldr	r3, [pc, #344]	; (14008 <ProcessHashDrv+0x1f8>)
   13eb0:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
   13eb4:	6019      	str	r1, [r3, #0]
   13eb6:	6a21      	ldr	r1, [r4, #32]
   13eb8:	6011      	str	r1, [r2, #0]
   13eba:	69e2      	ldr	r2, [r4, #28]
   13ebc:	f843 2c08 	str.w	r2, [r3, #-8]
   13ec0:	69a1      	ldr	r1, [r4, #24]
   13ec2:	4b52      	ldr	r3, [pc, #328]	; (1400c <ProcessHashDrv+0x1fc>)
   13ec4:	4a52      	ldr	r2, [pc, #328]	; (14010 <ProcessHashDrv+0x200>)
   13ec6:	6019      	str	r1, [r3, #0]
   13ec8:	6961      	ldr	r1, [r4, #20]
   13eca:	6011      	str	r1, [r2, #0]
   13ecc:	6921      	ldr	r1, [r4, #16]
   13ece:	f843 1c08 	str.w	r1, [r3, #-8]
   13ed2:	68e1      	ldr	r1, [r4, #12]
   13ed4:	f842 1c08 	str.w	r1, [r2, #-8]
   13ed8:	68a2      	ldr	r2, [r4, #8]
   13eda:	f843 2c10 	str.w	r2, [r3, #-16]
   13ede:	f1b8 0f00 	cmp.w	r8, #0
   13ee2:	d04e      	beq.n	13f82 <ProcessHashDrv+0x172>
   13ee4:	6863      	ldr	r3, [r4, #4]
   13ee6:	484b      	ldr	r0, [pc, #300]	; (14014 <ProcessHashDrv+0x204>)
   13ee8:	2b01      	cmp	r3, #1
   13eea:	bf04      	itt	eq
   13eec:	4a4a      	ldreq	r2, [pc, #296]	; (14018 <ProcessHashDrv+0x208>)
   13eee:	6013      	streq	r3, [r2, #0]
   13ef0:	793b      	ldrb	r3, [r7, #4]
   13ef2:	6839      	ldr	r1, [r7, #0]
   13ef4:	005b      	lsls	r3, r3, #1
   13ef6:	f003 0302 	and.w	r3, r3, #2
   13efa:	6003      	str	r3, [r0, #0]
   13efc:	4a47      	ldr	r2, [pc, #284]	; (1401c <ProcessHashDrv+0x20c>)
   13efe:	4b48      	ldr	r3, [pc, #288]	; (14020 <ProcessHashDrv+0x210>)
   13f00:	6011      	str	r1, [r2, #0]
   13f02:	f44f 6000 	mov.w	r0, #2048	; 0x800
   13f06:	f8c3 8000 	str.w	r8, [r3]
   13f0a:	f7fe fd23 	bl	12954 <CC_HalWaitInterrupt>
   13f0e:	4606      	mov	r6, r0
   13f10:	6823      	ldr	r3, [r4, #0]
   13f12:	b15b      	cbz	r3, 13f2c <ProcessHashDrv+0x11c>
   13f14:	3b01      	subs	r3, #1
   13f16:	2b01      	cmp	r3, #1
   13f18:	d816      	bhi.n	13f48 <ProcessHashDrv+0x138>
   13f1a:	4b3b      	ldr	r3, [pc, #236]	; (14008 <ProcessHashDrv+0x1f8>)
   13f1c:	4a41      	ldr	r2, [pc, #260]	; (14024 <ProcessHashDrv+0x214>)
   13f1e:	6819      	ldr	r1, [r3, #0]
   13f20:	3b08      	subs	r3, #8
   13f22:	6261      	str	r1, [r4, #36]	; 0x24
   13f24:	6812      	ldr	r2, [r2, #0]
   13f26:	6222      	str	r2, [r4, #32]
   13f28:	681b      	ldr	r3, [r3, #0]
   13f2a:	61e3      	str	r3, [r4, #28]
   13f2c:	4b37      	ldr	r3, [pc, #220]	; (1400c <ProcessHashDrv+0x1fc>)
   13f2e:	4a38      	ldr	r2, [pc, #224]	; (14010 <ProcessHashDrv+0x200>)
   13f30:	6819      	ldr	r1, [r3, #0]
   13f32:	3a08      	subs	r2, #8
   13f34:	61a1      	str	r1, [r4, #24]
   13f36:	6891      	ldr	r1, [r2, #8]
   13f38:	3b10      	subs	r3, #16
   13f3a:	6161      	str	r1, [r4, #20]
   13f3c:	6899      	ldr	r1, [r3, #8]
   13f3e:	6121      	str	r1, [r4, #16]
   13f40:	6812      	ldr	r2, [r2, #0]
   13f42:	60e2      	str	r2, [r4, #12]
   13f44:	681b      	ldr	r3, [r3, #0]
   13f46:	60a3      	str	r3, [r4, #8]
   13f48:	2001      	movs	r0, #1
   13f4a:	2300      	movs	r3, #0
   13f4c:	492d      	ldr	r1, [pc, #180]	; (14004 <ProcessHashDrv+0x1f4>)
   13f4e:	4a36      	ldr	r2, [pc, #216]	; (14028 <ProcessHashDrv+0x218>)
   13f50:	6809      	ldr	r1, [r1, #0]
   13f52:	64a1      	str	r1, [r4, #72]	; 0x48
   13f54:	6812      	ldr	r2, [r2, #0]
   13f56:	4935      	ldr	r1, [pc, #212]	; (1402c <ProcessHashDrv+0x21c>)
   13f58:	64e2      	str	r2, [r4, #76]	; 0x4c
   13f5a:	6008      	str	r0, [r1, #0]
   13f5c:	4a2e      	ldr	r2, [pc, #184]	; (14018 <ProcessHashDrv+0x208>)
   13f5e:	4834      	ldr	r0, [pc, #208]	; (14030 <ProcessHashDrv+0x220>)
   13f60:	6013      	str	r3, [r2, #0]
   13f62:	6003      	str	r3, [r0, #0]
   13f64:	654b      	str	r3, [r1, #84]	; 0x54
   13f66:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
   13f6a:	bba6      	cbnz	r6, 13fd6 <ProcessHashDrv+0x1c6>
   13f6c:	2001      	movs	r0, #1
   13f6e:	f7fe fdc1 	bl	12af4 <CC_PalPowerSaveModeSelect>
   13f72:	bb60      	cbnz	r0, 13fce <ProcessHashDrv+0x1be>
   13f74:	481e      	ldr	r0, [pc, #120]	; (13ff0 <ProcessHashDrv+0x1e0>)
   13f76:	f7fe fd95 	bl	12aa4 <CC_PalMutexUnlock>
   13f7a:	bb10      	cbnz	r0, 13fc2 <ProcessHashDrv+0x1b2>
   13f7c:	4630      	mov	r0, r6
   13f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13f82:	2204      	movs	r2, #4
   13f84:	4b2a      	ldr	r3, [pc, #168]	; (14030 <ProcessHashDrv+0x220>)
   13f86:	601a      	str	r2, [r3, #0]
   13f88:	e7c2      	b.n	13f10 <ProcessHashDrv+0x100>
   13f8a:	f04f 31ff 	mov.w	r1, #4294967295
   13f8e:	4818      	ldr	r0, [pc, #96]	; (13ff0 <ProcessHashDrv+0x1e0>)
   13f90:	f04f 0901 	mov.w	r9, #1
   13f94:	f7fe fd7e 	bl	12a94 <CC_PalMutexLock>
   13f98:	2800      	cmp	r0, #0
   13f9a:	f43f af56 	beq.w	13e4a <ProcessHashDrv+0x3a>
   13f9e:	4825      	ldr	r0, [pc, #148]	; (14034 <ProcessHashDrv+0x224>)
   13fa0:	f7fe fa1a 	bl	123d8 <CC_PalAbort>
   13fa4:	2000      	movs	r0, #0
   13fa6:	f7fe fda5 	bl	12af4 <CC_PalPowerSaveModeSelect>
   13faa:	4606      	mov	r6, r0
   13fac:	2800      	cmp	r0, #0
   13fae:	f43f af53 	beq.w	13e58 <ProcessHashDrv+0x48>
   13fb2:	4821      	ldr	r0, [pc, #132]	; (14038 <ProcessHashDrv+0x228>)
   13fb4:	f7fe fa10 	bl	123d8 <CC_PalAbort>
   13fb8:	e74e      	b.n	13e58 <ProcessHashDrv+0x48>
   13fba:	4e20      	ldr	r6, [pc, #128]	; (1403c <ProcessHashDrv+0x22c>)
   13fbc:	4630      	mov	r0, r6
   13fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13fc2:	481f      	ldr	r0, [pc, #124]	; (14040 <ProcessHashDrv+0x230>)
   13fc4:	f7fe fa08 	bl	123d8 <CC_PalAbort>
   13fc8:	4630      	mov	r0, r6
   13fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13fce:	481d      	ldr	r0, [pc, #116]	; (14044 <ProcessHashDrv+0x234>)
   13fd0:	f7fe fa02 	bl	123d8 <CC_PalAbort>
   13fd4:	e7ce      	b.n	13f74 <ProcessHashDrv+0x164>
   13fd6:	2110      	movs	r1, #16
   13fd8:	f104 0008 	add.w	r0, r4, #8
   13fdc:	f7ff fe10 	bl	13c00 <CC_PalMemSetZeroPlat>
   13fe0:	e7c4      	b.n	13f6c <ProcessHashDrv+0x15c>
   13fe2:	4e19      	ldr	r6, [pc, #100]	; (14048 <ProcessHashDrv+0x238>)
   13fe4:	4630      	mov	r0, r6
   13fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13fea:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   13fee:	e7c5      	b.n	13f7c <ProcessHashDrv+0x16c>
   13ff0:	200000a8 	.word	0x200000a8
   13ff4:	50845910 	.word	0x50845910
   13ff8:	50845a04 	.word	0x50845a04
   13ffc:	50845818 	.word	0x50845818
   14000:	50845820 	.word	0x50845820
   14004:	508457cc 	.word	0x508457cc
   14008:	5084565c 	.word	0x5084565c
   1400c:	50845650 	.word	0x50845650
   14010:	5084564c 	.word	0x5084564c
   14014:	50845b0c 	.word	0x50845b0c
   14018:	50845684 	.word	0x50845684
   1401c:	50845c28 	.word	0x50845c28
   14020:	50845c2c 	.word	0x50845c2c
   14024:	50845658 	.word	0x50845658
   14028:	508457d0 	.word	0x508457d0
   1402c:	508457c4 	.word	0x508457c4
   14030:	508457c8 	.word	0x508457c8
   14034:	00017d30 	.word	0x00017d30
   14038:	00017d48 	.word	0x00017d48
   1403c:	00f30001 	.word	0x00f30001
   14040:	00017d88 	.word	0x00017d88
   14044:	00017d68 	.word	0x00017d68
   14048:	00f30003 	.word	0x00f30003

0001404c <FinishHashDrv>:
   1404c:	2800      	cmp	r0, #0
   1404e:	d03a      	beq.n	140c6 <FinishHashDrv+0x7a>
   14050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14054:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   14058:	fa92 f882 	rev.w	r8, r2
   1405c:	fa93 fe83 	rev.w	lr, r3
   14060:	6a02      	ldr	r2, [r0, #32]
   14062:	6a43      	ldr	r3, [r0, #36]	; 0x24
   14064:	e9d0 4104 	ldrd	r4, r1, [r0, #16]
   14068:	ba12      	rev	r2, r2
   1406a:	ba24      	rev	r4, r4
   1406c:	ba1b      	rev	r3, r3
   1406e:	6104      	str	r4, [r0, #16]
   14070:	6202      	str	r2, [r0, #32]
   14072:	6a84      	ldr	r4, [r0, #40]	; 0x28
   14074:	6b82      	ldr	r2, [r0, #56]	; 0x38
   14076:	6243      	str	r3, [r0, #36]	; 0x24
   14078:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1407a:	e9d0 6502 	ldrd	r6, r5, [r0, #8]
   1407e:	ba09      	rev	r1, r1
   14080:	ba36      	rev	r6, r6
   14082:	ba2d      	rev	r5, r5
   14084:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   14086:	6086      	str	r6, [r0, #8]
   14088:	60c5      	str	r5, [r0, #12]
   1408a:	6b06      	ldr	r6, [r0, #48]	; 0x30
   1408c:	6b45      	ldr	r5, [r0, #52]	; 0x34
   1408e:	6141      	str	r1, [r0, #20]
   14090:	fa94 fc84 	rev.w	ip, r4
   14094:	ba19      	rev	r1, r3
   14096:	ba14      	rev	r4, r2
   14098:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1409a:	6c02      	ldr	r2, [r0, #64]	; 0x40
   1409c:	ba3f      	rev	r7, r7
   1409e:	ba36      	rev	r6, r6
   140a0:	ba2d      	rev	r5, r5
   140a2:	ba12      	rev	r2, r2
   140a4:	ba1b      	rev	r3, r3
   140a6:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
   140aa:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   140ae:	f8c0 8018 	str.w	r8, [r0, #24]
   140b2:	f8c0 e01c 	str.w	lr, [r0, #28]
   140b6:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
   140ba:	62c7      	str	r7, [r0, #44]	; 0x2c
   140bc:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   140c0:	2000      	movs	r0, #0
   140c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   140c6:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   140ca:	4770      	bx	lr

000140cc <cc_mbedtls_aes_init>:
   140cc:	b510      	push	{r4, lr}
   140ce:	4604      	mov	r4, r0
   140d0:	b130      	cbz	r0, 140e0 <cc_mbedtls_aes_init+0x14>
   140d2:	2200      	movs	r2, #0
   140d4:	2301      	movs	r3, #1
   140d6:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   140da:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   140de:	bd10      	pop	{r4, pc}
   140e0:	4801      	ldr	r0, [pc, #4]	; (140e8 <cc_mbedtls_aes_init+0x1c>)
   140e2:	f7fe f979 	bl	123d8 <CC_PalAbort>
   140e6:	e7f4      	b.n	140d2 <cc_mbedtls_aes_init+0x6>
   140e8:	00017e3c 	.word	0x00017e3c

000140ec <cc_mbedtls_aes_free>:
   140ec:	b118      	cbz	r0, 140f6 <cc_mbedtls_aes_free+0xa>
   140ee:	2274      	movs	r2, #116	; 0x74
   140f0:	2100      	movs	r1, #0
   140f2:	f7ff bd83 	b.w	13bfc <CC_PalMemSetPlat>
   140f6:	4770      	bx	lr

000140f8 <cc_mbedtls_aes_setkey_enc>:
   140f8:	b1e8      	cbz	r0, 14136 <cc_mbedtls_aes_setkey_enc+0x3e>
   140fa:	b1c9      	cbz	r1, 14130 <cc_mbedtls_aes_setkey_enc+0x38>
   140fc:	b508      	push	{r3, lr}
   140fe:	2300      	movs	r3, #0
   14100:	2ac0      	cmp	r2, #192	; 0xc0
   14102:	6383      	str	r3, [r0, #56]	; 0x38
   14104:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
   14108:	d00f      	beq.n	1412a <cc_mbedtls_aes_setkey_enc+0x32>
   1410a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   1410e:	d004      	beq.n	1411a <cc_mbedtls_aes_setkey_enc+0x22>
   14110:	2a80      	cmp	r2, #128	; 0x80
   14112:	d003      	beq.n	1411c <cc_mbedtls_aes_setkey_enc+0x24>
   14114:	f06f 001f 	mvn.w	r0, #31
   14118:	bd08      	pop	{r3, pc}
   1411a:	2302      	movs	r3, #2
   1411c:	6303      	str	r3, [r0, #48]	; 0x30
   1411e:	08d2      	lsrs	r2, r2, #3
   14120:	3010      	adds	r0, #16
   14122:	f7ff fd69 	bl	13bf8 <CC_PalMemCopyPlat>
   14126:	2000      	movs	r0, #0
   14128:	bd08      	pop	{r3, pc}
   1412a:	2301      	movs	r3, #1
   1412c:	6303      	str	r3, [r0, #48]	; 0x30
   1412e:	e7f6      	b.n	1411e <cc_mbedtls_aes_setkey_enc+0x26>
   14130:	f06f 001f 	mvn.w	r0, #31
   14134:	4770      	bx	lr
   14136:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1413a:	4770      	bx	lr

0001413c <cc_mbedtls_aes_crypt_ecb>:
   1413c:	b328      	cbz	r0, 1418a <cc_mbedtls_aes_crypt_ecb+0x4e>
   1413e:	b322      	cbz	r2, 1418a <cc_mbedtls_aes_crypt_ecb+0x4e>
   14140:	b31b      	cbz	r3, 1418a <cc_mbedtls_aes_crypt_ecb+0x4e>
   14142:	2901      	cmp	r1, #1
   14144:	d821      	bhi.n	1418a <cc_mbedtls_aes_crypt_ecb+0x4e>
   14146:	b570      	push	{r4, r5, r6, lr}
   14148:	4604      	mov	r4, r0
   1414a:	6b81      	ldr	r1, [r0, #56]	; 0x38
   1414c:	b086      	sub	sp, #24
   1414e:	d017      	beq.n	14180 <cc_mbedtls_aes_crypt_ecb+0x44>
   14150:	2901      	cmp	r1, #1
   14152:	d117      	bne.n	14184 <cc_mbedtls_aes_crypt_ecb+0x48>
   14154:	2510      	movs	r5, #16
   14156:	2100      	movs	r1, #0
   14158:	eb0d 0605 	add.w	r6, sp, r5
   1415c:	6361      	str	r1, [r4, #52]	; 0x34
   1415e:	4610      	mov	r0, r2
   14160:	4629      	mov	r1, r5
   14162:	9500      	str	r5, [sp, #0]
   14164:	aa02      	add	r2, sp, #8
   14166:	9601      	str	r6, [sp, #4]
   14168:	f7ff fdf6 	bl	13d58 <SetDataBuffersInfo>
   1416c:	b950      	cbnz	r0, 14184 <cc_mbedtls_aes_crypt_ecb+0x48>
   1416e:	462b      	mov	r3, r5
   14170:	4632      	mov	r2, r6
   14172:	4620      	mov	r0, r4
   14174:	a902      	add	r1, sp, #8
   14176:	f000 f897 	bl	142a8 <ProcessAesDrv>
   1417a:	b918      	cbnz	r0, 14184 <cc_mbedtls_aes_crypt_ecb+0x48>
   1417c:	b006      	add	sp, #24
   1417e:	bd70      	pop	{r4, r5, r6, pc}
   14180:	2900      	cmp	r1, #0
   14182:	d0e7      	beq.n	14154 <cc_mbedtls_aes_crypt_ecb+0x18>
   14184:	f06f 0021 	mvn.w	r0, #33	; 0x21
   14188:	e7f8      	b.n	1417c <cc_mbedtls_aes_crypt_ecb+0x40>
   1418a:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1418e:	4770      	bx	lr

00014190 <CC_PalDataBufferAttrGet>:
   14190:	2000      	movs	r0, #0
   14192:	7018      	strb	r0, [r3, #0]
   14194:	4770      	bx	lr
   14196:	bf00      	nop

00014198 <LoadAesKey>:
   14198:	2800      	cmp	r0, #0
   1419a:	d06e      	beq.n	1427a <LoadAesKey+0xe2>
   1419c:	b538      	push	{r3, r4, r5, lr}
   1419e:	4604      	mov	r4, r0
   141a0:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
   141a4:	2800      	cmp	r0, #0
   141a6:	d04a      	beq.n	1423e <LoadAesKey+0xa6>
   141a8:	2802      	cmp	r0, #2
   141aa:	d01e      	beq.n	141ea <LoadAesKey+0x52>
   141ac:	4834      	ldr	r0, [pc, #208]	; (14280 <LoadAesKey+0xe8>)
   141ae:	4d35      	ldr	r5, [pc, #212]	; (14284 <LoadAesKey+0xec>)
   141b0:	682b      	ldr	r3, [r5, #0]
   141b2:	4a35      	ldr	r2, [pc, #212]	; (14288 <LoadAesKey+0xf0>)
   141b4:	6819      	ldr	r1, [r3, #0]
   141b6:	4b35      	ldr	r3, [pc, #212]	; (1428c <LoadAesKey+0xf4>)
   141b8:	6011      	str	r1, [r2, #0]
   141ba:	682a      	ldr	r2, [r5, #0]
   141bc:	4934      	ldr	r1, [pc, #208]	; (14290 <LoadAesKey+0xf8>)
   141be:	6854      	ldr	r4, [r2, #4]
   141c0:	4a34      	ldr	r2, [pc, #208]	; (14294 <LoadAesKey+0xfc>)
   141c2:	601c      	str	r4, [r3, #0]
   141c4:	682c      	ldr	r4, [r5, #0]
   141c6:	68a4      	ldr	r4, [r4, #8]
   141c8:	600c      	str	r4, [r1, #0]
   141ca:	682c      	ldr	r4, [r5, #0]
   141cc:	68e4      	ldr	r4, [r4, #12]
   141ce:	6014      	str	r4, [r2, #0]
   141d0:	682c      	ldr	r4, [r5, #0]
   141d2:	6924      	ldr	r4, [r4, #16]
   141d4:	60dc      	str	r4, [r3, #12]
   141d6:	682c      	ldr	r4, [r5, #0]
   141d8:	6964      	ldr	r4, [r4, #20]
   141da:	60cc      	str	r4, [r1, #12]
   141dc:	6829      	ldr	r1, [r5, #0]
   141de:	6989      	ldr	r1, [r1, #24]
   141e0:	60d1      	str	r1, [r2, #12]
   141e2:	682a      	ldr	r2, [r5, #0]
   141e4:	69d2      	ldr	r2, [r2, #28]
   141e6:	619a      	str	r2, [r3, #24]
   141e8:	bd38      	pop	{r3, r4, r5, pc}
   141ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
   141ec:	6c20      	ldr	r0, [r4, #64]	; 0x40
   141ee:	f000 fbdf 	bl	149b0 <kmu_validate_slot_and_size_no_kdr>
   141f2:	4d24      	ldr	r5, [pc, #144]	; (14284 <LoadAesKey+0xec>)
   141f4:	2800      	cmp	r0, #0
   141f6:	d1db      	bne.n	141b0 <LoadAesKey+0x18>
   141f8:	6829      	ldr	r1, [r5, #0]
   141fa:	4a23      	ldr	r2, [pc, #140]	; (14288 <LoadAesKey+0xf0>)
   141fc:	6808      	ldr	r0, [r1, #0]
   141fe:	4b23      	ldr	r3, [pc, #140]	; (1428c <LoadAesKey+0xf4>)
   14200:	6010      	str	r0, [r2, #0]
   14202:	6828      	ldr	r0, [r5, #0]
   14204:	4922      	ldr	r1, [pc, #136]	; (14290 <LoadAesKey+0xf8>)
   14206:	6840      	ldr	r0, [r0, #4]
   14208:	6018      	str	r0, [r3, #0]
   1420a:	6828      	ldr	r0, [r5, #0]
   1420c:	6880      	ldr	r0, [r0, #8]
   1420e:	6008      	str	r0, [r1, #0]
   14210:	6828      	ldr	r0, [r5, #0]
   14212:	68c0      	ldr	r0, [r0, #12]
   14214:	60d0      	str	r0, [r2, #12]
   14216:	6828      	ldr	r0, [r5, #0]
   14218:	6900      	ldr	r0, [r0, #16]
   1421a:	60d8      	str	r0, [r3, #12]
   1421c:	6828      	ldr	r0, [r5, #0]
   1421e:	6940      	ldr	r0, [r0, #20]
   14220:	60c8      	str	r0, [r1, #12]
   14222:	6829      	ldr	r1, [r5, #0]
   14224:	6989      	ldr	r1, [r1, #24]
   14226:	6191      	str	r1, [r2, #24]
   14228:	682a      	ldr	r2, [r5, #0]
   1422a:	69d2      	ldr	r2, [r2, #28]
   1422c:	619a      	str	r2, [r3, #24]
   1422e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   14230:	6c20      	ldr	r0, [r4, #64]	; 0x40
   14232:	f000 fbd5 	bl	149e0 <kmu_load_key_aes>
   14236:	2800      	cmp	r0, #0
   14238:	d1ba      	bne.n	141b0 <LoadAesKey+0x18>
   1423a:	2000      	movs	r0, #0
   1423c:	bd38      	pop	{r3, r4, r5, pc}
   1423e:	6921      	ldr	r1, [r4, #16]
   14240:	4a11      	ldr	r2, [pc, #68]	; (14288 <LoadAesKey+0xf0>)
   14242:	4b12      	ldr	r3, [pc, #72]	; (1428c <LoadAesKey+0xf4>)
   14244:	6011      	str	r1, [r2, #0]
   14246:	6961      	ldr	r1, [r4, #20]
   14248:	6019      	str	r1, [r3, #0]
   1424a:	69a1      	ldr	r1, [r4, #24]
   1424c:	6091      	str	r1, [r2, #8]
   1424e:	69e2      	ldr	r2, [r4, #28]
   14250:	609a      	str	r2, [r3, #8]
   14252:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14254:	3b01      	subs	r3, #1
   14256:	2b01      	cmp	r3, #1
   14258:	d8ef      	bhi.n	1423a <LoadAesKey+0xa2>
   1425a:	6a21      	ldr	r1, [r4, #32]
   1425c:	4a0e      	ldr	r2, [pc, #56]	; (14298 <LoadAesKey+0x100>)
   1425e:	4b0f      	ldr	r3, [pc, #60]	; (1429c <LoadAesKey+0x104>)
   14260:	6011      	str	r1, [r2, #0]
   14262:	6a62      	ldr	r2, [r4, #36]	; 0x24
   14264:	601a      	str	r2, [r3, #0]
   14266:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14268:	2b02      	cmp	r3, #2
   1426a:	d1e6      	bne.n	1423a <LoadAesKey+0xa2>
   1426c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   1426e:	4a0c      	ldr	r2, [pc, #48]	; (142a0 <LoadAesKey+0x108>)
   14270:	4b0c      	ldr	r3, [pc, #48]	; (142a4 <LoadAesKey+0x10c>)
   14272:	6011      	str	r1, [r2, #0]
   14274:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   14276:	601a      	str	r2, [r3, #0]
   14278:	bd38      	pop	{r3, r4, r5, pc}
   1427a:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   1427e:	4770      	bx	lr
   14280:	00f10009 	.word	0x00f10009
   14284:	20000098 	.word	0x20000098
   14288:	50845400 	.word	0x50845400
   1428c:	50845404 	.word	0x50845404
   14290:	50845408 	.word	0x50845408
   14294:	5084540c 	.word	0x5084540c
   14298:	50845410 	.word	0x50845410
   1429c:	50845414 	.word	0x50845414
   142a0:	50845418 	.word	0x50845418
   142a4:	5084541c 	.word	0x5084541c

000142a8 <ProcessAesDrv>:
   142a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142ac:	b087      	sub	sp, #28
   142ae:	2900      	cmp	r1, #0
   142b0:	f000 80ae 	beq.w	14410 <ProcessAesDrv+0x168>
   142b4:	4616      	mov	r6, r2
   142b6:	2a00      	cmp	r2, #0
   142b8:	f000 80aa 	beq.w	14410 <ProcessAesDrv+0x168>
   142bc:	4604      	mov	r4, r0
   142be:	2800      	cmp	r0, #0
   142c0:	f000 814c 	beq.w	1455c <ProcessAesDrv+0x2b4>
   142c4:	461f      	mov	r7, r3
   142c6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   142c8:	460d      	mov	r5, r1
   142ca:	2b00      	cmp	r3, #0
   142cc:	d13c      	bne.n	14348 <ProcessAesDrv+0xa0>
   142ce:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   142d2:	d23e      	bcs.n	14352 <ProcessAesDrv+0xaa>
   142d4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   142d8:	2b04      	cmp	r3, #4
   142da:	f000 8105 	beq.w	144e8 <ProcessAesDrv+0x240>
   142de:	f04f 0900 	mov.w	r9, #0
   142e2:	f04f 31ff 	mov.w	r1, #4294967295
   142e6:	48ac      	ldr	r0, [pc, #688]	; (14598 <ProcessAesDrv+0x2f0>)
   142e8:	f7fe fbd4 	bl	12a94 <CC_PalMutexLock>
   142ec:	2800      	cmp	r0, #0
   142ee:	f040 80e3 	bne.w	144b8 <ProcessAesDrv+0x210>
   142f2:	2000      	movs	r0, #0
   142f4:	f7fe fbfe 	bl	12af4 <CC_PalPowerSaveModeSelect>
   142f8:	2800      	cmp	r0, #0
   142fa:	f040 80e6 	bne.w	144ca <ProcessAesDrv+0x222>
   142fe:	2301      	movs	r3, #1
   14300:	49a6      	ldr	r1, [pc, #664]	; (1459c <ProcessAesDrv+0x2f4>)
   14302:	4aa7      	ldr	r2, [pc, #668]	; (145a0 <ProcessAesDrv+0x2f8>)
   14304:	600b      	str	r3, [r1, #0]
   14306:	6013      	str	r3, [r2, #0]
   14308:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1430a:	2b03      	cmp	r3, #3
   1430c:	dc27      	bgt.n	1435e <ProcessAesDrv+0xb6>
   1430e:	2b00      	cmp	r3, #0
   14310:	da28      	bge.n	14364 <ProcessAesDrv+0xbc>
   14312:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 145fc <ProcessAesDrv+0x354>
   14316:	f1b9 0f00 	cmp.w	r9, #0
   1431a:	f040 8085 	bne.w	14428 <ProcessAesDrv+0x180>
   1431e:	2300      	movs	r3, #0
   14320:	499e      	ldr	r1, [pc, #632]	; (1459c <ProcessAesDrv+0x2f4>)
   14322:	4a9f      	ldr	r2, [pc, #636]	; (145a0 <ProcessAesDrv+0x2f8>)
   14324:	600b      	str	r3, [r1, #0]
   14326:	2001      	movs	r0, #1
   14328:	6013      	str	r3, [r2, #0]
   1432a:	f7fe fbe3 	bl	12af4 <CC_PalPowerSaveModeSelect>
   1432e:	2800      	cmp	r0, #0
   14330:	f040 80d6 	bne.w	144e0 <ProcessAesDrv+0x238>
   14334:	4898      	ldr	r0, [pc, #608]	; (14598 <ProcessAesDrv+0x2f0>)
   14336:	f7fe fbb5 	bl	12aa4 <CC_PalMutexUnlock>
   1433a:	2800      	cmp	r0, #0
   1433c:	f040 80c9 	bne.w	144d2 <ProcessAesDrv+0x22a>
   14340:	4640      	mov	r0, r8
   14342:	b007      	add	sp, #28
   14344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14348:	2b01      	cmp	r3, #1
   1434a:	d1c3      	bne.n	142d4 <ProcessAesDrv+0x2c>
   1434c:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   14350:	d3c0      	bcc.n	142d4 <ProcessAesDrv+0x2c>
   14352:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 14600 <ProcessAesDrv+0x358>
   14356:	4640      	mov	r0, r8
   14358:	b007      	add	sp, #28
   1435a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1435e:	3b06      	subs	r3, #6
   14360:	2b01      	cmp	r3, #1
   14362:	d8d6      	bhi.n	14312 <ProcessAesDrv+0x6a>
   14364:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   14366:	2b01      	cmp	r3, #1
   14368:	f200 80f5 	bhi.w	14556 <ProcessAesDrv+0x2ae>
   1436c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1436e:	2b01      	cmp	r3, #1
   14370:	d854      	bhi.n	1441c <ProcessAesDrv+0x174>
   14372:	6e23      	ldr	r3, [r4, #96]	; 0x60
   14374:	2b01      	cmp	r3, #1
   14376:	f200 816a 	bhi.w	1464e <ProcessAesDrv+0x3a6>
   1437a:	4a8a      	ldr	r2, [pc, #552]	; (145a4 <ProcessAesDrv+0x2fc>)
   1437c:	6813      	ldr	r3, [r2, #0]
   1437e:	2b00      	cmp	r3, #0
   14380:	d1fc      	bne.n	1437c <ProcessAesDrv+0xd4>
   14382:	f04f 30ff 	mov.w	r0, #4294967295
   14386:	9304      	str	r3, [sp, #16]
   14388:	f7fe fad0 	bl	1292c <CC_HalClearInterruptBit>
   1438c:	4a86      	ldr	r2, [pc, #536]	; (145a8 <ProcessAesDrv+0x300>)
   1438e:	6810      	ldr	r0, [r2, #0]
   14390:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
   14394:	f7fe fad8 	bl	12948 <CC_HalMaskInterrupt>
   14398:	2001      	movs	r0, #1
   1439a:	4984      	ldr	r1, [pc, #528]	; (145ac <ProcessAesDrv+0x304>)
   1439c:	4a84      	ldr	r2, [pc, #528]	; (145b0 <ProcessAesDrv+0x308>)
   1439e:	6008      	str	r0, [r1, #0]
   143a0:	9b04      	ldr	r3, [sp, #16]
   143a2:	6013      	str	r3, [r2, #0]
   143a4:	6b62      	ldr	r2, [r4, #52]	; 0x34
   143a6:	f022 0104 	bic.w	r1, r2, #4
   143aa:	2903      	cmp	r1, #3
   143ac:	bf18      	it	ne
   143ae:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   143b0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   143b2:	bf18      	it	ne
   143b4:	4003      	andne	r3, r0
   143b6:	2902      	cmp	r1, #2
   143b8:	f200 814c 	bhi.w	14654 <ProcessAesDrv+0x3ac>
   143bc:	0092      	lsls	r2, r2, #2
   143be:	f002 021c 	and.w	r2, r2, #28
   143c2:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
   143c6:	497b      	ldr	r1, [pc, #492]	; (145b4 <ProcessAesDrv+0x30c>)
   143c8:	4313      	orrs	r3, r2
   143ca:	600b      	str	r3, [r1, #0]
   143cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   143ce:	2b07      	cmp	r3, #7
   143d0:	d102      	bne.n	143d8 <ProcessAesDrv+0x130>
   143d2:	2201      	movs	r2, #1
   143d4:	4b78      	ldr	r3, [pc, #480]	; (145b8 <ProcessAesDrv+0x310>)
   143d6:	601a      	str	r2, [r3, #0]
   143d8:	4620      	mov	r0, r4
   143da:	f7ff fedd 	bl	14198 <LoadAesKey>
   143de:	4680      	mov	r8, r0
   143e0:	2800      	cmp	r0, #0
   143e2:	d198      	bne.n	14316 <ProcessAesDrv+0x6e>
   143e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   143e6:	2b07      	cmp	r3, #7
   143e8:	d893      	bhi.n	14312 <ProcessAesDrv+0x6a>
   143ea:	a201      	add	r2, pc, #4	; (adr r2, 143f0 <ProcessAesDrv+0x148>)
   143ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   143f0:	0001444f 	.word	0x0001444f
   143f4:	0001443b 	.word	0x0001443b
   143f8:	00014563 	.word	0x00014563
   143fc:	0001443b 	.word	0x0001443b
   14400:	00014313 	.word	0x00014313
   14404:	00014313 	.word	0x00014313
   14408:	00014563 	.word	0x00014563
   1440c:	0001443b 	.word	0x0001443b
   14410:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 14604 <ProcessAesDrv+0x35c>
   14414:	4640      	mov	r0, r8
   14416:	b007      	add	sp, #28
   14418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1441c:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 14608 <ProcessAesDrv+0x360>
   14420:	f1b9 0f00 	cmp.w	r9, #0
   14424:	f43f af7b 	beq.w	1431e <ProcessAesDrv+0x76>
   14428:	2304      	movs	r3, #4
   1442a:	2120      	movs	r1, #32
   1442c:	f104 0010 	add.w	r0, r4, #16
   14430:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   14434:	f7ff fbe4 	bl	13c00 <CC_PalMemSetZeroPlat>
   14438:	e771      	b.n	1431e <ProcessAesDrv+0x76>
   1443a:	6821      	ldr	r1, [r4, #0]
   1443c:	4a5f      	ldr	r2, [pc, #380]	; (145bc <ProcessAesDrv+0x314>)
   1443e:	4b60      	ldr	r3, [pc, #384]	; (145c0 <ProcessAesDrv+0x318>)
   14440:	6011      	str	r1, [r2, #0]
   14442:	6861      	ldr	r1, [r4, #4]
   14444:	6019      	str	r1, [r3, #0]
   14446:	68a1      	ldr	r1, [r4, #8]
   14448:	6091      	str	r1, [r2, #8]
   1444a:	68e2      	ldr	r2, [r4, #12]
   1444c:	609a      	str	r2, [r3, #8]
   1444e:	792b      	ldrb	r3, [r5, #4]
   14450:	7932      	ldrb	r2, [r6, #4]
   14452:	005b      	lsls	r3, r3, #1
   14454:	f002 0201 	and.w	r2, r2, #1
   14458:	495a      	ldr	r1, [pc, #360]	; (145c4 <ProcessAesDrv+0x31c>)
   1445a:	f003 0302 	and.w	r3, r3, #2
   1445e:	4313      	orrs	r3, r2
   14460:	6830      	ldr	r0, [r6, #0]
   14462:	682a      	ldr	r2, [r5, #0]
   14464:	600b      	str	r3, [r1, #0]
   14466:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14468:	f023 0304 	bic.w	r3, r3, #4
   1446c:	2b03      	cmp	r3, #3
   1446e:	d007      	beq.n	14480 <ProcessAesDrv+0x1d8>
   14470:	6e23      	ldr	r3, [r4, #96]	; 0x60
   14472:	2b01      	cmp	r3, #1
   14474:	f000 80e3 	beq.w	1463e <ProcessAesDrv+0x396>
   14478:	4953      	ldr	r1, [pc, #332]	; (145c8 <ProcessAesDrv+0x320>)
   1447a:	4b54      	ldr	r3, [pc, #336]	; (145cc <ProcessAesDrv+0x324>)
   1447c:	6008      	str	r0, [r1, #0]
   1447e:	601f      	str	r7, [r3, #0]
   14480:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   14482:	f44f 6000 	mov.w	r0, #2048	; 0x800
   14486:	2b01      	cmp	r3, #1
   14488:	bf07      	ittee	eq
   1448a:	4951      	ldreq	r1, [pc, #324]	; (145d0 <ProcessAesDrv+0x328>)
   1448c:	4b51      	ldreq	r3, [pc, #324]	; (145d4 <ProcessAesDrv+0x32c>)
   1448e:	4952      	ldrne	r1, [pc, #328]	; (145d8 <ProcessAesDrv+0x330>)
   14490:	4b52      	ldrne	r3, [pc, #328]	; (145dc <ProcessAesDrv+0x334>)
   14492:	600a      	str	r2, [r1, #0]
   14494:	601f      	str	r7, [r3, #0]
   14496:	f7fe fa5d 	bl	12954 <CC_HalWaitInterrupt>
   1449a:	4680      	mov	r8, r0
   1449c:	2800      	cmp	r0, #0
   1449e:	f47f af3a 	bne.w	14316 <ProcessAesDrv+0x6e>
   144a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   144a4:	3b01      	subs	r3, #1
   144a6:	2b06      	cmp	r3, #6
   144a8:	f200 80c6 	bhi.w	14638 <ProcessAesDrv+0x390>
   144ac:	e8df f003 	tbb	[pc, r3]
   144b0:	c4b8ccb8 	.word	0xc4b8ccb8
   144b4:	ccc4      	.short	0xccc4
   144b6:	b8          	.byte	0xb8
   144b7:	00          	.byte	0x00
   144b8:	4849      	ldr	r0, [pc, #292]	; (145e0 <ProcessAesDrv+0x338>)
   144ba:	f7fd ff8d 	bl	123d8 <CC_PalAbort>
   144be:	2000      	movs	r0, #0
   144c0:	f7fe fb18 	bl	12af4 <CC_PalPowerSaveModeSelect>
   144c4:	2800      	cmp	r0, #0
   144c6:	f43f af1a 	beq.w	142fe <ProcessAesDrv+0x56>
   144ca:	4846      	ldr	r0, [pc, #280]	; (145e4 <ProcessAesDrv+0x33c>)
   144cc:	f7fd ff84 	bl	123d8 <CC_PalAbort>
   144d0:	e715      	b.n	142fe <ProcessAesDrv+0x56>
   144d2:	4845      	ldr	r0, [pc, #276]	; (145e8 <ProcessAesDrv+0x340>)
   144d4:	f7fd ff80 	bl	123d8 <CC_PalAbort>
   144d8:	4640      	mov	r0, r8
   144da:	b007      	add	sp, #28
   144dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144e0:	4842      	ldr	r0, [pc, #264]	; (145ec <ProcessAesDrv+0x344>)
   144e2:	f7fd ff79 	bl	123d8 <CC_PalAbort>
   144e6:	e725      	b.n	14334 <ProcessAesDrv+0x8c>
   144e8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   144ea:	6c20      	ldr	r0, [r4, #64]	; 0x40
   144ec:	f000 fa4a 	bl	14984 <kmu_validate_slot_and_size>
   144f0:	bb70      	cbnz	r0, 14550 <ProcessAesDrv+0x2a8>
   144f2:	f8df 8118 	ldr.w	r8, [pc, #280]	; 1460c <ProcessAesDrv+0x364>
   144f6:	f8df b118 	ldr.w	fp, [pc, #280]	; 14610 <ProcessAesDrv+0x368>
   144fa:	f8d8 3000 	ldr.w	r3, [r8]
   144fe:	f8df a114 	ldr.w	sl, [pc, #276]	; 14614 <ProcessAesDrv+0x36c>
   14502:	681b      	ldr	r3, [r3, #0]
   14504:	f8df 9110 	ldr.w	r9, [pc, #272]	; 14618 <ProcessAesDrv+0x370>
   14508:	f8cb 3000 	str.w	r3, [fp]
   1450c:	f8d8 3000 	ldr.w	r3, [r8]
   14510:	4a37      	ldr	r2, [pc, #220]	; (145f0 <ProcessAesDrv+0x348>)
   14512:	685b      	ldr	r3, [r3, #4]
   14514:	f8ca 3000 	str.w	r3, [sl]
   14518:	f8d8 3000 	ldr.w	r3, [r8]
   1451c:	689b      	ldr	r3, [r3, #8]
   1451e:	f8c9 3000 	str.w	r3, [r9]
   14522:	f8d8 3000 	ldr.w	r3, [r8]
   14526:	68db      	ldr	r3, [r3, #12]
   14528:	6013      	str	r3, [r2, #0]
   1452a:	f8d8 3000 	ldr.w	r3, [r8]
   1452e:	691b      	ldr	r3, [r3, #16]
   14530:	6053      	str	r3, [r2, #4]
   14532:	f8d8 3000 	ldr.w	r3, [r8]
   14536:	695b      	ldr	r3, [r3, #20]
   14538:	6093      	str	r3, [r2, #8]
   1453a:	f8d8 3000 	ldr.w	r3, [r8]
   1453e:	699b      	ldr	r3, [r3, #24]
   14540:	60d3      	str	r3, [r2, #12]
   14542:	f8d8 3000 	ldr.w	r3, [r8]
   14546:	69db      	ldr	r3, [r3, #28]
   14548:	6113      	str	r3, [r2, #16]
   1454a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1454c:	2902      	cmp	r1, #2
   1454e:	d90c      	bls.n	1456a <ProcessAesDrv+0x2c2>
   14550:	f04f 0901 	mov.w	r9, #1
   14554:	e6c5      	b.n	142e2 <ProcessAesDrv+0x3a>
   14556:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 1461c <ProcessAesDrv+0x374>
   1455a:	e6dc      	b.n	14316 <ProcessAesDrv+0x6e>
   1455c:	f44f 0871 	mov.w	r8, #15794176	; 0xf10000
   14560:	e6ee      	b.n	14340 <ProcessAesDrv+0x98>
   14562:	6821      	ldr	r1, [r4, #0]
   14564:	4a23      	ldr	r2, [pc, #140]	; (145f4 <ProcessAesDrv+0x34c>)
   14566:	4b24      	ldr	r3, [pc, #144]	; (145f8 <ProcessAesDrv+0x350>)
   14568:	e76a      	b.n	14440 <ProcessAesDrv+0x198>
   1456a:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
   1456e:	9300      	str	r3, [sp, #0]
   14570:	f104 0310 	add.w	r3, r4, #16
   14574:	e9cd 2301 	strd	r2, r3, [sp, #4]
   14578:	00c8      	lsls	r0, r1, #3
   1457a:	3010      	adds	r0, #16
   1457c:	9003      	str	r0, [sp, #12]
   1457e:	9004      	str	r0, [sp, #16]
   14580:	9305      	str	r3, [sp, #20]
   14582:	6c20      	ldr	r0, [r4, #64]	; 0x40
   14584:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
   14588:	f000 fbfe 	bl	14d88 <kmu_derive_cmac>
   1458c:	2800      	cmp	r0, #0
   1458e:	d164      	bne.n	1465a <ProcessAesDrv+0x3b2>
   14590:	2300      	movs	r3, #0
   14592:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   14596:	e7db      	b.n	14550 <ProcessAesDrv+0x2a8>
   14598:	200000a8 	.word	0x200000a8
   1459c:	50845810 	.word	0x50845810
   145a0:	50845820 	.word	0x50845820
   145a4:	50845910 	.word	0x50845910
   145a8:	50845a04 	.word	0x50845a04
   145ac:	50845900 	.word	0x50845900
   145b0:	508454bc 	.word	0x508454bc
   145b4:	508454c0 	.word	0x508454c0
   145b8:	5084547c 	.word	0x5084547c
   145bc:	50845440 	.word	0x50845440
   145c0:	50845444 	.word	0x50845444
   145c4:	50845b0c 	.word	0x50845b0c
   145c8:	50845d30 	.word	0x50845d30
   145cc:	50845d34 	.word	0x50845d34
   145d0:	50845c28 	.word	0x50845c28
   145d4:	50845c2c 	.word	0x50845c2c
   145d8:	50845c30 	.word	0x50845c30
   145dc:	50845c34 	.word	0x50845c34
   145e0:	00017d30 	.word	0x00017d30
   145e4:	00017d48 	.word	0x00017d48
   145e8:	00017d88 	.word	0x00017d88
   145ec:	00017d68 	.word	0x00017d68
   145f0:	5084540c 	.word	0x5084540c
   145f4:	50845460 	.word	0x50845460
   145f8:	50845464 	.word	0x50845464
   145fc:	00f10001 	.word	0x00f10001
   14600:	00f10005 	.word	0x00f10005
   14604:	00f1000b 	.word	0x00f1000b
   14608:	00f10003 	.word	0x00f10003
   1460c:	20000098 	.word	0x20000098
   14610:	50845400 	.word	0x50845400
   14614:	50845404 	.word	0x50845404
   14618:	50845408 	.word	0x50845408
   1461c:	00f10002 	.word	0x00f10002
   14620:	4a22      	ldr	r2, [pc, #136]	; (146ac <ProcessAesDrv+0x404>)
   14622:	4b23      	ldr	r3, [pc, #140]	; (146b0 <ProcessAesDrv+0x408>)
   14624:	6811      	ldr	r1, [r2, #0]
   14626:	3208      	adds	r2, #8
   14628:	6021      	str	r1, [r4, #0]
   1462a:	6819      	ldr	r1, [r3, #0]
   1462c:	3308      	adds	r3, #8
   1462e:	6061      	str	r1, [r4, #4]
   14630:	6812      	ldr	r2, [r2, #0]
   14632:	60a2      	str	r2, [r4, #8]
   14634:	681b      	ldr	r3, [r3, #0]
   14636:	60e3      	str	r3, [r4, #12]
   14638:	2301      	movs	r3, #1
   1463a:	65a3      	str	r3, [r4, #88]	; 0x58
   1463c:	e66b      	b.n	14316 <ProcessAesDrv+0x6e>
   1463e:	4b1d      	ldr	r3, [pc, #116]	; (146b4 <ProcessAesDrv+0x40c>)
   14640:	f8c1 021c 	str.w	r0, [r1, #540]	; 0x21c
   14644:	601f      	str	r7, [r3, #0]
   14646:	e71b      	b.n	14480 <ProcessAesDrv+0x1d8>
   14648:	4a1b      	ldr	r2, [pc, #108]	; (146b8 <ProcessAesDrv+0x410>)
   1464a:	4b1c      	ldr	r3, [pc, #112]	; (146bc <ProcessAesDrv+0x414>)
   1464c:	e7ea      	b.n	14624 <ProcessAesDrv+0x37c>
   1464e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 146c4 <ProcessAesDrv+0x41c>
   14652:	e660      	b.n	14316 <ProcessAesDrv+0x6e>
   14654:	f8df 8070 	ldr.w	r8, [pc, #112]	; 146c8 <ProcessAesDrv+0x420>
   14658:	e65d      	b.n	14316 <ProcessAesDrv+0x6e>
   1465a:	f8d8 3000 	ldr.w	r3, [r8]
   1465e:	9904      	ldr	r1, [sp, #16]
   14660:	681b      	ldr	r3, [r3, #0]
   14662:	9805      	ldr	r0, [sp, #20]
   14664:	f8cb 3000 	str.w	r3, [fp]
   14668:	f8d8 3000 	ldr.w	r3, [r8]
   1466c:	4a14      	ldr	r2, [pc, #80]	; (146c0 <ProcessAesDrv+0x418>)
   1466e:	685b      	ldr	r3, [r3, #4]
   14670:	f8ca 3000 	str.w	r3, [sl]
   14674:	f8d8 3000 	ldr.w	r3, [r8]
   14678:	689b      	ldr	r3, [r3, #8]
   1467a:	f8c9 3000 	str.w	r3, [r9]
   1467e:	f8d8 3000 	ldr.w	r3, [r8]
   14682:	68db      	ldr	r3, [r3, #12]
   14684:	6013      	str	r3, [r2, #0]
   14686:	f8d8 3000 	ldr.w	r3, [r8]
   1468a:	691b      	ldr	r3, [r3, #16]
   1468c:	6053      	str	r3, [r2, #4]
   1468e:	f8d8 3000 	ldr.w	r3, [r8]
   14692:	695b      	ldr	r3, [r3, #20]
   14694:	6093      	str	r3, [r2, #8]
   14696:	f8d8 3000 	ldr.w	r3, [r8]
   1469a:	699b      	ldr	r3, [r3, #24]
   1469c:	60d3      	str	r3, [r2, #12]
   1469e:	f8d8 3000 	ldr.w	r3, [r8]
   146a2:	69db      	ldr	r3, [r3, #28]
   146a4:	6113      	str	r3, [r2, #16]
   146a6:	f7ff faab 	bl	13c00 <CC_PalMemSetZeroPlat>
   146aa:	e771      	b.n	14590 <ProcessAesDrv+0x2e8>
   146ac:	50845440 	.word	0x50845440
   146b0:	50845444 	.word	0x50845444
   146b4:	50845d2c 	.word	0x50845d2c
   146b8:	50845460 	.word	0x50845460
   146bc:	50845464 	.word	0x50845464
   146c0:	5084540c 	.word	0x5084540c
   146c4:	00f10004 	.word	0x00f10004
   146c8:	00f10006 	.word	0x00f10006

000146cc <FinishAesDrv>:
   146cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   146d0:	b309      	cbz	r1, 14716 <FinishAesDrv+0x4a>
   146d2:	b302      	cbz	r2, 14716 <FinishAesDrv+0x4a>
   146d4:	4604      	mov	r4, r0
   146d6:	2800      	cmp	r0, #0
   146d8:	f000 80a3 	beq.w	14822 <FinishAesDrv+0x156>
   146dc:	461d      	mov	r5, r3
   146de:	6b43      	ldr	r3, [r0, #52]	; 0x34
   146e0:	460e      	mov	r6, r1
   146e2:	2b07      	cmp	r3, #7
   146e4:	d01b      	beq.n	1471e <FinishAesDrv+0x52>
   146e6:	b95d      	cbnz	r5, 14700 <FinishAesDrv+0x34>
   146e8:	2b03      	cmp	r3, #3
   146ea:	d110      	bne.n	1470e <FinishAesDrv+0x42>
   146ec:	6d83      	ldr	r3, [r0, #88]	; 0x58
   146ee:	b973      	cbnz	r3, 1470e <FinishAesDrv+0x42>
   146f0:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   146f4:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   146f8:	2510      	movs	r5, #16
   146fa:	f100 0364 	add.w	r3, r0, #100	; 0x64
   146fe:	600b      	str	r3, [r1, #0]
   14700:	462b      	mov	r3, r5
   14702:	4631      	mov	r1, r6
   14704:	4620      	mov	r0, r4
   14706:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1470a:	f7ff bdcd 	b.w	142a8 <ProcessAesDrv>
   1470e:	462f      	mov	r7, r5
   14710:	4638      	mov	r0, r7
   14712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14716:	4f7e      	ldr	r7, [pc, #504]	; (14910 <FinishAesDrv+0x244>)
   14718:	4638      	mov	r0, r7
   1471a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1471e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   14720:	2b00      	cmp	r3, #0
   14722:	f040 8081 	bne.w	14828 <FinishAesDrv+0x15c>
   14726:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1472a:	f080 8083 	bcs.w	14834 <FinishAesDrv+0x168>
   1472e:	b915      	cbnz	r5, 14736 <FinishAesDrv+0x6a>
   14730:	6da3      	ldr	r3, [r4, #88]	; 0x58
   14732:	2b00      	cmp	r3, #0
   14734:	d17e      	bne.n	14834 <FinishAesDrv+0x168>
   14736:	f04f 31ff 	mov.w	r1, #4294967295
   1473a:	4876      	ldr	r0, [pc, #472]	; (14914 <FinishAesDrv+0x248>)
   1473c:	f7fe f9aa 	bl	12a94 <CC_PalMutexLock>
   14740:	2800      	cmp	r0, #0
   14742:	f040 80c1 	bne.w	148c8 <FinishAesDrv+0x1fc>
   14746:	2000      	movs	r0, #0
   14748:	f7fe f9d4 	bl	12af4 <CC_PalPowerSaveModeSelect>
   1474c:	2800      	cmp	r0, #0
   1474e:	f040 80c3 	bne.w	148d8 <FinishAesDrv+0x20c>
   14752:	2301      	movs	r3, #1
   14754:	4970      	ldr	r1, [pc, #448]	; (14918 <FinishAesDrv+0x24c>)
   14756:	4a71      	ldr	r2, [pc, #452]	; (1491c <FinishAesDrv+0x250>)
   14758:	600b      	str	r3, [r1, #0]
   1475a:	6013      	str	r3, [r2, #0]
   1475c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1475e:	2b03      	cmp	r3, #3
   14760:	dd48      	ble.n	147f4 <FinishAesDrv+0x128>
   14762:	3b06      	subs	r3, #6
   14764:	2b01      	cmp	r3, #1
   14766:	d847      	bhi.n	147f8 <FinishAesDrv+0x12c>
   14768:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1476a:	2b01      	cmp	r3, #1
   1476c:	d864      	bhi.n	14838 <FinishAesDrv+0x16c>
   1476e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   14770:	2b01      	cmp	r3, #1
   14772:	f200 80b5 	bhi.w	148e0 <FinishAesDrv+0x214>
   14776:	6e23      	ldr	r3, [r4, #96]	; 0x60
   14778:	2b01      	cmp	r3, #1
   1477a:	f200 80b3 	bhi.w	148e4 <FinishAesDrv+0x218>
   1477e:	4b68      	ldr	r3, [pc, #416]	; (14920 <FinishAesDrv+0x254>)
   14780:	681f      	ldr	r7, [r3, #0]
   14782:	2f00      	cmp	r7, #0
   14784:	d1fc      	bne.n	14780 <FinishAesDrv+0xb4>
   14786:	f04f 30ff 	mov.w	r0, #4294967295
   1478a:	f7fe f8cf 	bl	1292c <CC_HalClearInterruptBit>
   1478e:	4b65      	ldr	r3, [pc, #404]	; (14924 <FinishAesDrv+0x258>)
   14790:	6818      	ldr	r0, [r3, #0]
   14792:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
   14796:	f7fe f8d7 	bl	12948 <CC_HalMaskInterrupt>
   1479a:	2101      	movs	r1, #1
   1479c:	4a62      	ldr	r2, [pc, #392]	; (14928 <FinishAesDrv+0x25c>)
   1479e:	4b63      	ldr	r3, [pc, #396]	; (1492c <FinishAesDrv+0x260>)
   147a0:	6011      	str	r1, [r2, #0]
   147a2:	601f      	str	r7, [r3, #0]
   147a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   147a6:	f023 0204 	bic.w	r2, r3, #4
   147aa:	2a03      	cmp	r2, #3
   147ac:	bf18      	it	ne
   147ae:	6ba7      	ldrne	r7, [r4, #56]	; 0x38
   147b0:	6b22      	ldr	r2, [r4, #48]	; 0x30
   147b2:	bf18      	it	ne
   147b4:	400f      	andne	r7, r1
   147b6:	2a02      	cmp	r2, #2
   147b8:	f200 80a7 	bhi.w	1490a <FinishAesDrv+0x23e>
   147bc:	009b      	lsls	r3, r3, #2
   147be:	f003 031c 	and.w	r3, r3, #28
   147c2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
   147c6:	4a5a      	ldr	r2, [pc, #360]	; (14930 <FinishAesDrv+0x264>)
   147c8:	431f      	orrs	r7, r3
   147ca:	6017      	str	r7, [r2, #0]
   147cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   147ce:	2b07      	cmp	r3, #7
   147d0:	d102      	bne.n	147d8 <FinishAesDrv+0x10c>
   147d2:	2201      	movs	r2, #1
   147d4:	4b57      	ldr	r3, [pc, #348]	; (14934 <FinishAesDrv+0x268>)
   147d6:	601a      	str	r2, [r3, #0]
   147d8:	4620      	mov	r0, r4
   147da:	f7ff fcdd 	bl	14198 <LoadAesKey>
   147de:	4607      	mov	r7, r0
   147e0:	b958      	cbnz	r0, 147fa <FinishAesDrv+0x12e>
   147e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   147e4:	2b07      	cmp	r3, #7
   147e6:	d807      	bhi.n	147f8 <FinishAesDrv+0x12c>
   147e8:	e8df f003 	tbb	[pc, r3]
   147ec:	28672832 	.word	0x28672832
   147f0:	28670606 	.word	0x28670606
   147f4:	2b00      	cmp	r3, #0
   147f6:	dab7      	bge.n	14768 <FinishAesDrv+0x9c>
   147f8:	4f4f      	ldr	r7, [pc, #316]	; (14938 <FinishAesDrv+0x26c>)
   147fa:	2300      	movs	r3, #0
   147fc:	4946      	ldr	r1, [pc, #280]	; (14918 <FinishAesDrv+0x24c>)
   147fe:	4a47      	ldr	r2, [pc, #284]	; (1491c <FinishAesDrv+0x250>)
   14800:	600b      	str	r3, [r1, #0]
   14802:	2001      	movs	r0, #1
   14804:	6013      	str	r3, [r2, #0]
   14806:	f7fe f975 	bl	12af4 <CC_PalPowerSaveModeSelect>
   1480a:	2800      	cmp	r0, #0
   1480c:	d160      	bne.n	148d0 <FinishAesDrv+0x204>
   1480e:	4841      	ldr	r0, [pc, #260]	; (14914 <FinishAesDrv+0x248>)
   14810:	f7fe f948 	bl	12aa4 <CC_PalMutexUnlock>
   14814:	2800      	cmp	r0, #0
   14816:	f43f af7b 	beq.w	14710 <FinishAesDrv+0x44>
   1481a:	4848      	ldr	r0, [pc, #288]	; (1493c <FinishAesDrv+0x270>)
   1481c:	f7fd fddc 	bl	123d8 <CC_PalAbort>
   14820:	e776      	b.n	14710 <FinishAesDrv+0x44>
   14822:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   14826:	e773      	b.n	14710 <FinishAesDrv+0x44>
   14828:	2b01      	cmp	r3, #1
   1482a:	d180      	bne.n	1472e <FinishAesDrv+0x62>
   1482c:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   14830:	f4ff af7d 	bcc.w	1472e <FinishAesDrv+0x62>
   14834:	4f42      	ldr	r7, [pc, #264]	; (14940 <FinishAesDrv+0x274>)
   14836:	e76b      	b.n	14710 <FinishAesDrv+0x44>
   14838:	4f42      	ldr	r7, [pc, #264]	; (14944 <FinishAesDrv+0x278>)
   1483a:	e7de      	b.n	147fa <FinishAesDrv+0x12e>
   1483c:	6821      	ldr	r1, [r4, #0]
   1483e:	4a42      	ldr	r2, [pc, #264]	; (14948 <FinishAesDrv+0x27c>)
   14840:	4b42      	ldr	r3, [pc, #264]	; (1494c <FinishAesDrv+0x280>)
   14842:	6011      	str	r1, [r2, #0]
   14844:	6861      	ldr	r1, [r4, #4]
   14846:	6019      	str	r1, [r3, #0]
   14848:	68a1      	ldr	r1, [r4, #8]
   1484a:	6091      	str	r1, [r2, #8]
   1484c:	68e2      	ldr	r2, [r4, #12]
   1484e:	609a      	str	r2, [r3, #8]
   14850:	2201      	movs	r2, #1
   14852:	4938      	ldr	r1, [pc, #224]	; (14934 <FinishAesDrv+0x268>)
   14854:	4b35      	ldr	r3, [pc, #212]	; (1492c <FinishAesDrv+0x260>)
   14856:	600a      	str	r2, [r1, #0]
   14858:	601d      	str	r5, [r3, #0]
   1485a:	7933      	ldrb	r3, [r6, #4]
   1485c:	6830      	ldr	r0, [r6, #0]
   1485e:	4093      	lsls	r3, r2
   14860:	f003 0302 	and.w	r3, r3, #2
   14864:	f8c1 3690 	str.w	r3, [r1, #1680]	; 0x690
   14868:	2d00      	cmp	r5, #0
   1486a:	d13d      	bne.n	148e8 <FinishAesDrv+0x21c>
   1486c:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1486e:	b90b      	cbnz	r3, 14874 <FinishAesDrv+0x1a8>
   14870:	4b37      	ldr	r3, [pc, #220]	; (14950 <FinishAesDrv+0x284>)
   14872:	601a      	str	r2, [r3, #0]
   14874:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14876:	3b01      	subs	r3, #1
   14878:	2b06      	cmp	r3, #6
   1487a:	d8be      	bhi.n	147fa <FinishAesDrv+0x12e>
   1487c:	a201      	add	r2, pc, #4	; (adr r2, 14884 <FinishAesDrv+0x1b8>)
   1487e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14882:	bf00      	nop
   14884:	000148a1 	.word	0x000148a1
   14888:	000148c3 	.word	0x000148c3
   1488c:	000148a1 	.word	0x000148a1
   14890:	000147fb 	.word	0x000147fb
   14894:	000147fb 	.word	0x000147fb
   14898:	000148c3 	.word	0x000148c3
   1489c:	000148a1 	.word	0x000148a1
   148a0:	4a29      	ldr	r2, [pc, #164]	; (14948 <FinishAesDrv+0x27c>)
   148a2:	4b2a      	ldr	r3, [pc, #168]	; (1494c <FinishAesDrv+0x280>)
   148a4:	6811      	ldr	r1, [r2, #0]
   148a6:	3208      	adds	r2, #8
   148a8:	6021      	str	r1, [r4, #0]
   148aa:	6819      	ldr	r1, [r3, #0]
   148ac:	3308      	adds	r3, #8
   148ae:	6061      	str	r1, [r4, #4]
   148b0:	6812      	ldr	r2, [r2, #0]
   148b2:	60a2      	str	r2, [r4, #8]
   148b4:	681b      	ldr	r3, [r3, #0]
   148b6:	60e3      	str	r3, [r4, #12]
   148b8:	e79f      	b.n	147fa <FinishAesDrv+0x12e>
   148ba:	6821      	ldr	r1, [r4, #0]
   148bc:	4a25      	ldr	r2, [pc, #148]	; (14954 <FinishAesDrv+0x288>)
   148be:	4b26      	ldr	r3, [pc, #152]	; (14958 <FinishAesDrv+0x28c>)
   148c0:	e7bf      	b.n	14842 <FinishAesDrv+0x176>
   148c2:	4a24      	ldr	r2, [pc, #144]	; (14954 <FinishAesDrv+0x288>)
   148c4:	4b24      	ldr	r3, [pc, #144]	; (14958 <FinishAesDrv+0x28c>)
   148c6:	e7ed      	b.n	148a4 <FinishAesDrv+0x1d8>
   148c8:	4824      	ldr	r0, [pc, #144]	; (1495c <FinishAesDrv+0x290>)
   148ca:	f7fd fd85 	bl	123d8 <CC_PalAbort>
   148ce:	e73a      	b.n	14746 <FinishAesDrv+0x7a>
   148d0:	4823      	ldr	r0, [pc, #140]	; (14960 <FinishAesDrv+0x294>)
   148d2:	f7fd fd81 	bl	123d8 <CC_PalAbort>
   148d6:	e79a      	b.n	1480e <FinishAesDrv+0x142>
   148d8:	4822      	ldr	r0, [pc, #136]	; (14964 <FinishAesDrv+0x298>)
   148da:	f7fd fd7d 	bl	123d8 <CC_PalAbort>
   148de:	e738      	b.n	14752 <FinishAesDrv+0x86>
   148e0:	4f21      	ldr	r7, [pc, #132]	; (14968 <FinishAesDrv+0x29c>)
   148e2:	e78a      	b.n	147fa <FinishAesDrv+0x12e>
   148e4:	4f21      	ldr	r7, [pc, #132]	; (1496c <FinishAesDrv+0x2a0>)
   148e6:	e788      	b.n	147fa <FinishAesDrv+0x12e>
   148e8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   148ea:	2b01      	cmp	r3, #1
   148ec:	bf07      	ittee	eq
   148ee:	4a20      	ldreq	r2, [pc, #128]	; (14970 <FinishAesDrv+0x2a4>)
   148f0:	4b20      	ldreq	r3, [pc, #128]	; (14974 <FinishAesDrv+0x2a8>)
   148f2:	4a21      	ldrne	r2, [pc, #132]	; (14978 <FinishAesDrv+0x2ac>)
   148f4:	4b21      	ldrne	r3, [pc, #132]	; (1497c <FinishAesDrv+0x2b0>)
   148f6:	6010      	str	r0, [r2, #0]
   148f8:	f44f 6000 	mov.w	r0, #2048	; 0x800
   148fc:	601d      	str	r5, [r3, #0]
   148fe:	f7fe f829 	bl	12954 <CC_HalWaitInterrupt>
   14902:	2800      	cmp	r0, #0
   14904:	d0b6      	beq.n	14874 <FinishAesDrv+0x1a8>
   14906:	4607      	mov	r7, r0
   14908:	e777      	b.n	147fa <FinishAesDrv+0x12e>
   1490a:	4f1d      	ldr	r7, [pc, #116]	; (14980 <FinishAesDrv+0x2b4>)
   1490c:	e775      	b.n	147fa <FinishAesDrv+0x12e>
   1490e:	bf00      	nop
   14910:	00f1000b 	.word	0x00f1000b
   14914:	200000a8 	.word	0x200000a8
   14918:	50845810 	.word	0x50845810
   1491c:	50845820 	.word	0x50845820
   14920:	50845910 	.word	0x50845910
   14924:	50845a04 	.word	0x50845a04
   14928:	50845900 	.word	0x50845900
   1492c:	508454bc 	.word	0x508454bc
   14930:	508454c0 	.word	0x508454c0
   14934:	5084547c 	.word	0x5084547c
   14938:	00f10001 	.word	0x00f10001
   1493c:	00017d88 	.word	0x00017d88
   14940:	00f10005 	.word	0x00f10005
   14944:	00f10002 	.word	0x00f10002
   14948:	50845440 	.word	0x50845440
   1494c:	50845444 	.word	0x50845444
   14950:	50845524 	.word	0x50845524
   14954:	50845460 	.word	0x50845460
   14958:	50845464 	.word	0x50845464
   1495c:	00017d30 	.word	0x00017d30
   14960:	00017d68 	.word	0x00017d68
   14964:	00017d48 	.word	0x00017d48
   14968:	00f10003 	.word	0x00f10003
   1496c:	00f10004 	.word	0x00f10004
   14970:	50845c28 	.word	0x50845c28
   14974:	50845c2c 	.word	0x50845c2c
   14978:	50845c30 	.word	0x50845c30
   1497c:	50845c34 	.word	0x50845c34
   14980:	00f10006 	.word	0x00f10006

00014984 <kmu_validate_slot_and_size>:
   14984:	287f      	cmp	r0, #127	; 0x7f
   14986:	d809      	bhi.n	1499c <kmu_validate_slot_and_size+0x18>
   14988:	b151      	cbz	r1, 149a0 <kmu_validate_slot_and_size+0x1c>
   1498a:	3901      	subs	r1, #1
   1498c:	2902      	cmp	r1, #2
   1498e:	d809      	bhi.n	149a4 <kmu_validate_slot_and_size+0x20>
   14990:	4905      	ldr	r1, [pc, #20]	; (149a8 <kmu_validate_slot_and_size+0x24>)
   14992:	287f      	cmp	r0, #127	; 0x7f
   14994:	bf0c      	ite	eq
   14996:	4608      	moveq	r0, r1
   14998:	2000      	movne	r0, #0
   1499a:	4770      	bx	lr
   1499c:	4802      	ldr	r0, [pc, #8]	; (149a8 <kmu_validate_slot_and_size+0x24>)
   1499e:	4770      	bx	lr
   149a0:	4608      	mov	r0, r1
   149a2:	4770      	bx	lr
   149a4:	4801      	ldr	r0, [pc, #4]	; (149ac <kmu_validate_slot_and_size+0x28>)
   149a6:	4770      	bx	lr
   149a8:	00f70001 	.word	0x00f70001
   149ac:	00f70003 	.word	0x00f70003

000149b0 <kmu_validate_slot_and_size_no_kdr>:
   149b0:	1e83      	subs	r3, r0, #2
   149b2:	2b7d      	cmp	r3, #125	; 0x7d
   149b4:	d80b      	bhi.n	149ce <kmu_validate_slot_and_size_no_kdr+0x1e>
   149b6:	b141      	cbz	r1, 149ca <kmu_validate_slot_and_size_no_kdr+0x1a>
   149b8:	3901      	subs	r1, #1
   149ba:	2902      	cmp	r1, #2
   149bc:	d809      	bhi.n	149d2 <kmu_validate_slot_and_size_no_kdr+0x22>
   149be:	4906      	ldr	r1, [pc, #24]	; (149d8 <kmu_validate_slot_and_size_no_kdr+0x28>)
   149c0:	287f      	cmp	r0, #127	; 0x7f
   149c2:	bf0c      	ite	eq
   149c4:	4608      	moveq	r0, r1
   149c6:	2000      	movne	r0, #0
   149c8:	4770      	bx	lr
   149ca:	4608      	mov	r0, r1
   149cc:	4770      	bx	lr
   149ce:	4802      	ldr	r0, [pc, #8]	; (149d8 <kmu_validate_slot_and_size_no_kdr+0x28>)
   149d0:	4770      	bx	lr
   149d2:	4802      	ldr	r0, [pc, #8]	; (149dc <kmu_validate_slot_and_size_no_kdr+0x2c>)
   149d4:	4770      	bx	lr
   149d6:	bf00      	nop
   149d8:	00f70001 	.word	0x00f70001
   149dc:	00f70003 	.word	0x00f70003

000149e0 <kmu_load_key_aes>:
   149e0:	b470      	push	{r4, r5, r6}
   149e2:	2901      	cmp	r1, #1
   149e4:	b08f      	sub	sp, #60	; 0x3c
   149e6:	d009      	beq.n	149fc <kmu_load_key_aes+0x1c>
   149e8:	2902      	cmp	r1, #2
   149ea:	f000 80af 	beq.w	14b4c <kmu_load_key_aes+0x16c>
   149ee:	2900      	cmp	r1, #0
   149f0:	f000 80d7 	beq.w	14ba2 <kmu_load_key_aes+0x1c2>
   149f4:	4898      	ldr	r0, [pc, #608]	; (14c58 <kmu_load_key_aes+0x278>)
   149f6:	b00f      	add	sp, #60	; 0x3c
   149f8:	bc70      	pop	{r4, r5, r6}
   149fa:	4770      	bx	lr
   149fc:	2200      	movs	r2, #0
   149fe:	4b97      	ldr	r3, [pc, #604]	; (14c5c <kmu_load_key_aes+0x27c>)
   14a00:	4c97      	ldr	r4, [pc, #604]	; (14c60 <kmu_load_key_aes+0x280>)
   14a02:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
   14a06:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   14a0a:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108
   14a0e:	00c4      	lsls	r4, r0, #3
   14a10:	9506      	str	r5, [sp, #24]
   14a12:	9d06      	ldr	r5, [sp, #24]
   14a14:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   14a18:	f8d3 5100 	ldr.w	r5, [r3, #256]	; 0x100
   14a1c:	f504 047f 	add.w	r4, r4, #16711680	; 0xff0000
   14a20:	9506      	str	r5, [sp, #24]
   14a22:	9d06      	ldr	r5, [sp, #24]
   14a24:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   14a28:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
   14a2c:	1c42      	adds	r2, r0, #1
   14a2e:	9506      	str	r5, [sp, #24]
   14a30:	9d06      	ldr	r5, [sp, #24]
   14a32:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
   14a36:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   14a3a:	f8d4 5400 	ldr.w	r5, [r4, #1024]	; 0x400
   14a3e:	4a89      	ldr	r2, [pc, #548]	; (14c64 <kmu_load_key_aes+0x284>)
   14a40:	9507      	str	r5, [sp, #28]
   14a42:	9d07      	ldr	r5, [sp, #28]
   14a44:	4295      	cmp	r5, r2
   14a46:	f040 80a8 	bne.w	14b9a <kmu_load_key_aes+0x1ba>
   14a4a:	461a      	mov	r2, r3
   14a4c:	6019      	str	r1, [r3, #0]
   14a4e:	e005      	b.n	14a5c <kmu_load_key_aes+0x7c>
   14a50:	f89d 3005 	ldrb.w	r3, [sp, #5]
   14a54:	b9db      	cbnz	r3, 14a8e <kmu_load_key_aes+0xae>
   14a56:	f89d 3006 	ldrb.w	r3, [sp, #6]
   14a5a:	b9c3      	cbnz	r3, 14a8e <kmu_load_key_aes+0xae>
   14a5c:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   14a60:	3b00      	subs	r3, #0
   14a62:	bf18      	it	ne
   14a64:	2301      	movne	r3, #1
   14a66:	f88d 3004 	strb.w	r3, [sp, #4]
   14a6a:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
   14a6e:	3b00      	subs	r3, #0
   14a70:	bf18      	it	ne
   14a72:	2301      	movne	r3, #1
   14a74:	f88d 3005 	strb.w	r3, [sp, #5]
   14a78:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   14a7c:	3b00      	subs	r3, #0
   14a7e:	bf18      	it	ne
   14a80:	2301      	movne	r3, #1
   14a82:	f88d 3006 	strb.w	r3, [sp, #6]
   14a86:	f89d 3004 	ldrb.w	r3, [sp, #4]
   14a8a:	2b00      	cmp	r3, #0
   14a8c:	d0e0      	beq.n	14a50 <kmu_load_key_aes+0x70>
   14a8e:	f89d 3005 	ldrb.w	r3, [sp, #5]
   14a92:	2b00      	cmp	r3, #0
   14a94:	f040 816b 	bne.w	14d6e <kmu_load_key_aes+0x38e>
   14a98:	f89d 3006 	ldrb.w	r3, [sp, #6]
   14a9c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   14aa0:	2b00      	cmp	r3, #0
   14aa2:	d14f      	bne.n	14b44 <kmu_load_key_aes+0x164>
   14aa4:	2101      	movs	r1, #1
   14aa6:	4b6d      	ldr	r3, [pc, #436]	; (14c5c <kmu_load_key_aes+0x27c>)
   14aa8:	4d6d      	ldr	r5, [pc, #436]	; (14c60 <kmu_load_key_aes+0x280>)
   14aaa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   14aae:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
   14ab2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   14ab6:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108
   14aba:	3002      	adds	r0, #2
   14abc:	9508      	str	r5, [sp, #32]
   14abe:	9d08      	ldr	r5, [sp, #32]
   14ac0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   14ac4:	f8d3 6100 	ldr.w	r6, [r3, #256]	; 0x100
   14ac8:	4d67      	ldr	r5, [pc, #412]	; (14c68 <kmu_load_key_aes+0x288>)
   14aca:	9608      	str	r6, [sp, #32]
   14acc:	9e08      	ldr	r6, [sp, #32]
   14ace:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   14ad2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   14ad6:	9208      	str	r2, [sp, #32]
   14ad8:	9a08      	ldr	r2, [sp, #32]
   14ada:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   14ade:	f8d4 2408 	ldr.w	r2, [r4, #1032]	; 0x408
   14ae2:	9209      	str	r2, [sp, #36]	; 0x24
   14ae4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14ae6:	42aa      	cmp	r2, r5
   14ae8:	d157      	bne.n	14b9a <kmu_load_key_aes+0x1ba>
   14aea:	461a      	mov	r2, r3
   14aec:	6019      	str	r1, [r3, #0]
   14aee:	e005      	b.n	14afc <kmu_load_key_aes+0x11c>
   14af0:	f89d 3008 	ldrb.w	r3, [sp, #8]
   14af4:	b9db      	cbnz	r3, 14b2e <kmu_load_key_aes+0x14e>
   14af6:	f89d 3009 	ldrb.w	r3, [sp, #9]
   14afa:	b9c3      	cbnz	r3, 14b2e <kmu_load_key_aes+0x14e>
   14afc:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   14b00:	3b00      	subs	r3, #0
   14b02:	bf18      	it	ne
   14b04:	2301      	movne	r3, #1
   14b06:	f88d 3007 	strb.w	r3, [sp, #7]
   14b0a:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
   14b0e:	3b00      	subs	r3, #0
   14b10:	bf18      	it	ne
   14b12:	2301      	movne	r3, #1
   14b14:	f88d 3008 	strb.w	r3, [sp, #8]
   14b18:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   14b1c:	3b00      	subs	r3, #0
   14b1e:	bf18      	it	ne
   14b20:	2301      	movne	r3, #1
   14b22:	f88d 3009 	strb.w	r3, [sp, #9]
   14b26:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14b2a:	2b00      	cmp	r3, #0
   14b2c:	d0e0      	beq.n	14af0 <kmu_load_key_aes+0x110>
   14b2e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   14b32:	2b00      	cmp	r3, #0
   14b34:	f040 811b 	bne.w	14d6e <kmu_load_key_aes+0x38e>
   14b38:	f89d 3009 	ldrb.w	r3, [sp, #9]
   14b3c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   14b40:	2b00      	cmp	r3, #0
   14b42:	d07e      	beq.n	14c42 <kmu_load_key_aes+0x262>
   14b44:	4849      	ldr	r0, [pc, #292]	; (14c6c <kmu_load_key_aes+0x28c>)
   14b46:	b00f      	add	sp, #60	; 0x3c
   14b48:	bc70      	pop	{r4, r5, r6}
   14b4a:	4770      	bx	lr
   14b4c:	2200      	movs	r2, #0
   14b4e:	2401      	movs	r4, #1
   14b50:	4b42      	ldr	r3, [pc, #264]	; (14c5c <kmu_load_key_aes+0x27c>)
   14b52:	4943      	ldr	r1, [pc, #268]	; (14c60 <kmu_load_key_aes+0x280>)
   14b54:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
   14b58:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   14b5c:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108
   14b60:	00c1      	lsls	r1, r0, #3
   14b62:	950a      	str	r5, [sp, #40]	; 0x28
   14b64:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   14b66:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   14b6a:	f8d3 5100 	ldr.w	r5, [r3, #256]	; 0x100
   14b6e:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
   14b72:	950a      	str	r5, [sp, #40]	; 0x28
   14b74:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   14b76:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   14b7a:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
   14b7e:	1902      	adds	r2, r0, r4
   14b80:	950a      	str	r5, [sp, #40]	; 0x28
   14b82:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   14b84:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
   14b88:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   14b8c:	f8d1 5400 	ldr.w	r5, [r1, #1024]	; 0x400
   14b90:	4a34      	ldr	r2, [pc, #208]	; (14c64 <kmu_load_key_aes+0x284>)
   14b92:	950b      	str	r5, [sp, #44]	; 0x2c
   14b94:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   14b96:	4295      	cmp	r5, r2
   14b98:	d05a      	beq.n	14c50 <kmu_load_key_aes+0x270>
   14b9a:	4835      	ldr	r0, [pc, #212]	; (14c70 <kmu_load_key_aes+0x290>)
   14b9c:	b00f      	add	sp, #60	; 0x3c
   14b9e:	bc70      	pop	{r4, r5, r6}
   14ba0:	4770      	bx	lr
   14ba2:	2401      	movs	r4, #1
   14ba4:	4b2d      	ldr	r3, [pc, #180]	; (14c5c <kmu_load_key_aes+0x27c>)
   14ba6:	4a2e      	ldr	r2, [pc, #184]	; (14c60 <kmu_load_key_aes+0x280>)
   14ba8:	1905      	adds	r5, r0, r4
   14baa:	f8c2 4500 	str.w	r4, [r2, #1280]	; 0x500
   14bae:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   14bb2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   14bb6:	3080      	adds	r0, #128	; 0x80
   14bb8:	9204      	str	r2, [sp, #16]
   14bba:	9a04      	ldr	r2, [sp, #16]
   14bbc:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   14bc0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   14bc4:	9204      	str	r2, [sp, #16]
   14bc6:	9a04      	ldr	r2, [sp, #16]
   14bc8:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   14bcc:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
   14bd0:	4a28      	ldr	r2, [pc, #160]	; (14c74 <kmu_load_key_aes+0x294>)
   14bd2:	9104      	str	r1, [sp, #16]
   14bd4:	9904      	ldr	r1, [sp, #16]
   14bd6:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
   14bda:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
   14bde:	4a21      	ldr	r2, [pc, #132]	; (14c64 <kmu_load_key_aes+0x284>)
   14be0:	9105      	str	r1, [sp, #20]
   14be2:	9905      	ldr	r1, [sp, #20]
   14be4:	4291      	cmp	r1, r2
   14be6:	d1d8      	bne.n	14b9a <kmu_load_key_aes+0x1ba>
   14be8:	461a      	mov	r2, r3
   14bea:	601c      	str	r4, [r3, #0]
   14bec:	e005      	b.n	14bfa <kmu_load_key_aes+0x21a>
   14bee:	f89d 3002 	ldrb.w	r3, [sp, #2]
   14bf2:	b9db      	cbnz	r3, 14c2c <kmu_load_key_aes+0x24c>
   14bf4:	f89d 3003 	ldrb.w	r3, [sp, #3]
   14bf8:	b9c3      	cbnz	r3, 14c2c <kmu_load_key_aes+0x24c>
   14bfa:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   14bfe:	3b00      	subs	r3, #0
   14c00:	bf18      	it	ne
   14c02:	2301      	movne	r3, #1
   14c04:	f88d 3001 	strb.w	r3, [sp, #1]
   14c08:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
   14c0c:	3b00      	subs	r3, #0
   14c0e:	bf18      	it	ne
   14c10:	2301      	movne	r3, #1
   14c12:	f88d 3002 	strb.w	r3, [sp, #2]
   14c16:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   14c1a:	3b00      	subs	r3, #0
   14c1c:	bf18      	it	ne
   14c1e:	2301      	movne	r3, #1
   14c20:	f88d 3003 	strb.w	r3, [sp, #3]
   14c24:	f89d 3001 	ldrb.w	r3, [sp, #1]
   14c28:	2b00      	cmp	r3, #0
   14c2a:	d0e0      	beq.n	14bee <kmu_load_key_aes+0x20e>
   14c2c:	f89d 3002 	ldrb.w	r3, [sp, #2]
   14c30:	2b00      	cmp	r3, #0
   14c32:	f040 809c 	bne.w	14d6e <kmu_load_key_aes+0x38e>
   14c36:	f89d 3003 	ldrb.w	r3, [sp, #3]
   14c3a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   14c3e:	2b00      	cmp	r3, #0
   14c40:	d180      	bne.n	14b44 <kmu_load_key_aes+0x164>
   14c42:	4610      	mov	r0, r2
   14c44:	4b05      	ldr	r3, [pc, #20]	; (14c5c <kmu_load_key_aes+0x27c>)
   14c46:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   14c4a:	b00f      	add	sp, #60	; 0x3c
   14c4c:	bc70      	pop	{r4, r5, r6}
   14c4e:	4770      	bx	lr
   14c50:	461a      	mov	r2, r3
   14c52:	601c      	str	r4, [r3, #0]
   14c54:	e016      	b.n	14c84 <kmu_load_key_aes+0x2a4>
   14c56:	bf00      	nop
   14c58:	00f1000c 	.word	0x00f1000c
   14c5c:	50039000 	.word	0x50039000
   14c60:	50844000 	.word	0x50844000
   14c64:	50845400 	.word	0x50845400
   14c68:	50845410 	.word	0x50845410
   14c6c:	00f70002 	.word	0x00f70002
   14c70:	00f70006 	.word	0x00f70006
   14c74:	00ff8000 	.word	0x00ff8000
   14c78:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14c7c:	b9db      	cbnz	r3, 14cb6 <kmu_load_key_aes+0x2d6>
   14c7e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   14c82:	b9c3      	cbnz	r3, 14cb6 <kmu_load_key_aes+0x2d6>
   14c84:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   14c88:	3b00      	subs	r3, #0
   14c8a:	bf18      	it	ne
   14c8c:	2301      	movne	r3, #1
   14c8e:	f88d 300a 	strb.w	r3, [sp, #10]
   14c92:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
   14c96:	3b00      	subs	r3, #0
   14c98:	bf18      	it	ne
   14c9a:	2301      	movne	r3, #1
   14c9c:	f88d 300b 	strb.w	r3, [sp, #11]
   14ca0:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   14ca4:	3b00      	subs	r3, #0
   14ca6:	bf18      	it	ne
   14ca8:	2301      	movne	r3, #1
   14caa:	f88d 300c 	strb.w	r3, [sp, #12]
   14cae:	f89d 300a 	ldrb.w	r3, [sp, #10]
   14cb2:	2b00      	cmp	r3, #0
   14cb4:	d0e0      	beq.n	14c78 <kmu_load_key_aes+0x298>
   14cb6:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14cba:	2b00      	cmp	r3, #0
   14cbc:	d157      	bne.n	14d6e <kmu_load_key_aes+0x38e>
   14cbe:	f89d 300c 	ldrb.w	r3, [sp, #12]
   14cc2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   14cc6:	2b00      	cmp	r3, #0
   14cc8:	f47f af3c 	bne.w	14b44 <kmu_load_key_aes+0x164>
   14ccc:	2401      	movs	r4, #1
   14cce:	4b2a      	ldr	r3, [pc, #168]	; (14d78 <kmu_load_key_aes+0x398>)
   14cd0:	4d2a      	ldr	r5, [pc, #168]	; (14d7c <kmu_load_key_aes+0x39c>)
   14cd2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   14cd6:	f8c5 4500 	str.w	r4, [r5, #1280]	; 0x500
   14cda:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   14cde:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108
   14ce2:	3002      	adds	r0, #2
   14ce4:	950c      	str	r5, [sp, #48]	; 0x30
   14ce6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   14ce8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   14cec:	f8d3 6100 	ldr.w	r6, [r3, #256]	; 0x100
   14cf0:	4d23      	ldr	r5, [pc, #140]	; (14d80 <kmu_load_key_aes+0x3a0>)
   14cf2:	960c      	str	r6, [sp, #48]	; 0x30
   14cf4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   14cf6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   14cfa:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   14cfe:	920c      	str	r2, [sp, #48]	; 0x30
   14d00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14d02:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   14d06:	f8d1 2408 	ldr.w	r2, [r1, #1032]	; 0x408
   14d0a:	920d      	str	r2, [sp, #52]	; 0x34
   14d0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   14d0e:	42aa      	cmp	r2, r5
   14d10:	f47f af43 	bne.w	14b9a <kmu_load_key_aes+0x1ba>
   14d14:	461a      	mov	r2, r3
   14d16:	601c      	str	r4, [r3, #0]
   14d18:	e005      	b.n	14d26 <kmu_load_key_aes+0x346>
   14d1a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   14d1e:	b9db      	cbnz	r3, 14d58 <kmu_load_key_aes+0x378>
   14d20:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14d24:	b9c3      	cbnz	r3, 14d58 <kmu_load_key_aes+0x378>
   14d26:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   14d2a:	3b00      	subs	r3, #0
   14d2c:	bf18      	it	ne
   14d2e:	2301      	movne	r3, #1
   14d30:	f88d 300d 	strb.w	r3, [sp, #13]
   14d34:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
   14d38:	3b00      	subs	r3, #0
   14d3a:	bf18      	it	ne
   14d3c:	2301      	movne	r3, #1
   14d3e:	f88d 300e 	strb.w	r3, [sp, #14]
   14d42:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   14d46:	3b00      	subs	r3, #0
   14d48:	bf18      	it	ne
   14d4a:	2301      	movne	r3, #1
   14d4c:	f88d 300f 	strb.w	r3, [sp, #15]
   14d50:	f89d 300d 	ldrb.w	r3, [sp, #13]
   14d54:	2b00      	cmp	r3, #0
   14d56:	d0e0      	beq.n	14d1a <kmu_load_key_aes+0x33a>
   14d58:	f89d 300e 	ldrb.w	r3, [sp, #14]
   14d5c:	b93b      	cbnz	r3, 14d6e <kmu_load_key_aes+0x38e>
   14d5e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   14d62:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   14d66:	2b00      	cmp	r3, #0
   14d68:	f43f af6b 	beq.w	14c42 <kmu_load_key_aes+0x262>
   14d6c:	e6ea      	b.n	14b44 <kmu_load_key_aes+0x164>
   14d6e:	4805      	ldr	r0, [pc, #20]	; (14d84 <kmu_load_key_aes+0x3a4>)
   14d70:	b00f      	add	sp, #60	; 0x3c
   14d72:	bc70      	pop	{r4, r5, r6}
   14d74:	4770      	bx	lr
   14d76:	bf00      	nop
   14d78:	50039000 	.word	0x50039000
   14d7c:	50844000 	.word	0x50844000
   14d80:	50845410 	.word	0x50845410
   14d84:	00f70001 	.word	0x00f70001

00014d88 <kmu_derive_cmac>:
   14d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d8c:	2400      	movs	r4, #0
   14d8e:	b0cd      	sub	sp, #308	; 0x134
   14d90:	4605      	mov	r5, r0
   14d92:	e9dd 9658 	ldrd	r9, r6, [sp, #352]	; 0x160
   14d96:	4688      	mov	r8, r1
   14d98:	4617      	mov	r7, r2
   14d9a:	4621      	mov	r1, r4
   14d9c:	2274      	movs	r2, #116	; 0x74
   14d9e:	a80e      	add	r0, sp, #56	; 0x38
   14da0:	469b      	mov	fp, r3
   14da2:	f000 fb12 	bl	153ca <memset>
   14da6:	4621      	mov	r1, r4
   14da8:	2280      	movs	r2, #128	; 0x80
   14daa:	a82c      	add	r0, sp, #176	; 0xb0
   14dac:	942b      	str	r4, [sp, #172]	; 0xac
   14dae:	f000 fb0c 	bl	153ca <memset>
   14db2:	2384      	movs	r3, #132	; 0x84
   14db4:	f5b6 6f7f 	cmp.w	r6, #4080	; 0xff0
   14db8:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   14dbc:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   14dc0:	9305      	str	r3, [sp, #20]
   14dc2:	d85d      	bhi.n	14e80 <kmu_derive_cmac+0xf8>
   14dc4:	ab05      	add	r3, sp, #20
   14dc6:	f10d 0aac 	add.w	sl, sp, #172	; 0xac
   14dca:	9301      	str	r3, [sp, #4]
   14dcc:	4659      	mov	r1, fp
   14dce:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
   14dd2:	4638      	mov	r0, r7
   14dd4:	9602      	str	r6, [sp, #8]
   14dd6:	f8cd a000 	str.w	sl, [sp]
   14dda:	f000 f861 	bl	14ea0 <UtilCmacBuildDataForDerivation>
   14dde:	2800      	cmp	r0, #0
   14de0:	d155      	bne.n	14e8e <kmu_derive_cmac+0x106>
   14de2:	42a5      	cmp	r5, r4
   14de4:	bf0c      	ite	eq
   14de6:	f04f 0c03 	moveq.w	ip, #3
   14dea:	f04f 0c02 	movne.w	ip, #2
   14dee:	2200      	movs	r2, #0
   14df0:	2301      	movs	r3, #1
   14df2:	2707      	movs	r7, #7
   14df4:	2401      	movs	r4, #1
   14df6:	2110      	movs	r1, #16
   14df8:	901c      	str	r0, [sp, #112]	; 0x70
   14dfa:	a80e      	add	r0, sp, #56	; 0x38
   14dfc:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   14e00:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   14e04:	f88d c074 	strb.w	ip, [sp, #116]	; 0x74
   14e08:	971b      	str	r7, [sp, #108]	; 0x6c
   14e0a:	951e      	str	r5, [sp, #120]	; 0x78
   14e0c:	9426      	str	r4, [sp, #152]	; 0x98
   14e0e:	f7fe fef7 	bl	13c00 <CC_PalMemSetZeroPlat>
   14e12:	2210      	movs	r2, #16
   14e14:	f10d 0820 	add.w	r8, sp, #32
   14e18:	9200      	str	r2, [sp, #0]
   14e1a:	4650      	mov	r0, sl
   14e1c:	9905      	ldr	r1, [sp, #20]
   14e1e:	ab0a      	add	r3, sp, #40	; 0x28
   14e20:	aa06      	add	r2, sp, #24
   14e22:	f8cd 8004 	str.w	r8, [sp, #4]
   14e26:	f7fe ff97 	bl	13d58 <SetDataBuffersInfo>
   14e2a:	4607      	mov	r7, r0
   14e2c:	b1c8      	cbz	r0, 14e62 <kmu_derive_cmac+0xda>
   14e2e:	a80e      	add	r0, sp, #56	; 0x38
   14e30:	2274      	movs	r2, #116	; 0x74
   14e32:	2100      	movs	r1, #0
   14e34:	f7fe fee2 	bl	13bfc <CC_PalMemSetPlat>
   14e38:	4638      	mov	r0, r7
   14e3a:	b04d      	add	sp, #308	; 0x134
   14e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e40:	2e10      	cmp	r6, #16
   14e42:	4635      	mov	r5, r6
   14e44:	bf28      	it	cs
   14e46:	2510      	movcs	r5, #16
   14e48:	a90e      	add	r1, sp, #56	; 0x38
   14e4a:	462a      	mov	r2, r5
   14e4c:	f7fe fed4 	bl	13bf8 <CC_PalMemCopyPlat>
   14e50:	2110      	movs	r1, #16
   14e52:	a80e      	add	r0, sp, #56	; 0x38
   14e54:	f7fe fed4 	bl	13c00 <CC_PalMemSetZeroPlat>
   14e58:	3401      	adds	r4, #1
   14e5a:	1b76      	subs	r6, r6, r5
   14e5c:	442f      	add	r7, r5
   14e5e:	b2e4      	uxtb	r4, r4
   14e60:	d013      	beq.n	14e8a <kmu_derive_cmac+0x102>
   14e62:	9b05      	ldr	r3, [sp, #20]
   14e64:	4642      	mov	r2, r8
   14e66:	a906      	add	r1, sp, #24
   14e68:	a80e      	add	r0, sp, #56	; 0x38
   14e6a:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   14e6e:	f7ff fc2d 	bl	146cc <FinishAesDrv>
   14e72:	4603      	mov	r3, r0
   14e74:	eb09 0007 	add.w	r0, r9, r7
   14e78:	2b00      	cmp	r3, #0
   14e7a:	d0e1      	beq.n	14e40 <kmu_derive_cmac+0xb8>
   14e7c:	461f      	mov	r7, r3
   14e7e:	e7d6      	b.n	14e2e <kmu_derive_cmac+0xa6>
   14e80:	4f05      	ldr	r7, [pc, #20]	; (14e98 <kmu_derive_cmac+0x110>)
   14e82:	4638      	mov	r0, r7
   14e84:	b04d      	add	sp, #308	; 0x134
   14e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e8a:	4637      	mov	r7, r6
   14e8c:	e7cf      	b.n	14e2e <kmu_derive_cmac+0xa6>
   14e8e:	4f03      	ldr	r7, [pc, #12]	; (14e9c <kmu_derive_cmac+0x114>)
   14e90:	4638      	mov	r0, r7
   14e92:	b04d      	add	sp, #308	; 0x134
   14e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e98:	00f1000f 	.word	0x00f1000f
   14e9c:	00f1000e 	.word	0x00f1000e

00014ea0 <UtilCmacBuildDataForDerivation>:
   14ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14ea4:	2600      	movs	r6, #0
   14ea6:	b082      	sub	sp, #8
   14ea8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   14eaa:	9601      	str	r6, [sp, #4]
   14eac:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   14eb0:	d83b      	bhi.n	14f2a <UtilCmacBuildDataForDerivation+0x8a>
   14eb2:	00ee      	lsls	r6, r5, #3
   14eb4:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   14eb8:	461f      	mov	r7, r3
   14eba:	bf34      	ite	cc
   14ebc:	2303      	movcc	r3, #3
   14ebe:	2304      	movcs	r3, #4
   14ec0:	1e4d      	subs	r5, r1, #1
   14ec2:	2d3f      	cmp	r5, #63	; 0x3f
   14ec4:	460c      	mov	r4, r1
   14ec6:	9300      	str	r3, [sp, #0]
   14ec8:	d82f      	bhi.n	14f2a <UtilCmacBuildDataForDerivation+0x8a>
   14eca:	b370      	cbz	r0, 14f2a <UtilCmacBuildDataForDerivation+0x8a>
   14ecc:	4690      	mov	r8, r2
   14ece:	b117      	cbz	r7, 14ed6 <UtilCmacBuildDataForDerivation+0x36>
   14ed0:	b35a      	cbz	r2, 14f2a <UtilCmacBuildDataForDerivation+0x8a>
   14ed2:	2f40      	cmp	r7, #64	; 0x40
   14ed4:	d829      	bhi.n	14f2a <UtilCmacBuildDataForDerivation+0x8a>
   14ed6:	9a08      	ldr	r2, [sp, #32]
   14ed8:	b33a      	cbz	r2, 14f2a <UtilCmacBuildDataForDerivation+0x8a>
   14eda:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14edc:	6811      	ldr	r1, [r2, #0]
   14ede:	b321      	cbz	r1, 14f2a <UtilCmacBuildDataForDerivation+0x8a>
   14ee0:	19e2      	adds	r2, r4, r7
   14ee2:	4413      	add	r3, r2
   14ee4:	4299      	cmp	r1, r3
   14ee6:	d320      	bcc.n	14f2a <UtilCmacBuildDataForDerivation+0x8a>
   14ee8:	9b08      	ldr	r3, [sp, #32]
   14eea:	4622      	mov	r2, r4
   14eec:	4601      	mov	r1, r0
   14eee:	1c58      	adds	r0, r3, #1
   14ef0:	f7fe fe82 	bl	13bf8 <CC_PalMemCopyPlat>
   14ef4:	2200      	movs	r2, #0
   14ef6:	9b08      	ldr	r3, [sp, #32]
   14ef8:	4423      	add	r3, r4
   14efa:	705a      	strb	r2, [r3, #1]
   14efc:	3402      	adds	r4, #2
   14efe:	bb07      	cbnz	r7, 14f42 <UtilCmacBuildDataForDerivation+0xa2>
   14f00:	2eff      	cmp	r6, #255	; 0xff
   14f02:	9600      	str	r6, [sp, #0]
   14f04:	d915      	bls.n	14f32 <UtilCmacBuildDataForDerivation+0x92>
   14f06:	9b08      	ldr	r3, [sp, #32]
   14f08:	0235      	lsls	r5, r6, #8
   14f0a:	b2ad      	uxth	r5, r5
   14f0c:	1918      	adds	r0, r3, r4
   14f0e:	2202      	movs	r2, #2
   14f10:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
   14f14:	a901      	add	r1, sp, #4
   14f16:	9501      	str	r5, [sp, #4]
   14f18:	f7fe fe6e 	bl	13bf8 <CC_PalMemCopyPlat>
   14f1c:	3402      	adds	r4, #2
   14f1e:	2000      	movs	r0, #0
   14f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14f22:	601c      	str	r4, [r3, #0]
   14f24:	b002      	add	sp, #8
   14f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14f2a:	480a      	ldr	r0, [pc, #40]	; (14f54 <UtilCmacBuildDataForDerivation+0xb4>)
   14f2c:	b002      	add	sp, #8
   14f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14f32:	9b08      	ldr	r3, [sp, #32]
   14f34:	2201      	movs	r2, #1
   14f36:	1918      	adds	r0, r3, r4
   14f38:	4669      	mov	r1, sp
   14f3a:	f7fe fe5d 	bl	13bf8 <CC_PalMemCopyPlat>
   14f3e:	3401      	adds	r4, #1
   14f40:	e7ed      	b.n	14f1e <UtilCmacBuildDataForDerivation+0x7e>
   14f42:	9b08      	ldr	r3, [sp, #32]
   14f44:	4641      	mov	r1, r8
   14f46:	1918      	adds	r0, r3, r4
   14f48:	463a      	mov	r2, r7
   14f4a:	f7fe fe55 	bl	13bf8 <CC_PalMemCopyPlat>
   14f4e:	443c      	add	r4, r7
   14f50:	e7d6      	b.n	14f00 <UtilCmacBuildDataForDerivation+0x60>
   14f52:	bf00      	nop
   14f54:	80000006 	.word	0x80000006

00014f58 <main>:

void main(void)
{
   14f58:	b508      	push	{r3, lr}
	spm_config();
   14f5a:	f7f9 fd51 	bl	ea00 <spm_config>
	spm_jump();
   14f5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spm_jump();
   14f62:	f7f9 bced 	b.w	e940 <spm_jump>

00014f66 <sys_notify_validate>:
	if (notify == NULL) {
   14f66:	4603      	mov	r3, r0
   14f68:	b158      	cbz	r0, 14f82 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   14f6a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   14f6c:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   14f70:	2a01      	cmp	r2, #1
   14f72:	d003      	beq.n	14f7c <sys_notify_validate+0x16>
   14f74:	2a03      	cmp	r2, #3
   14f76:	d104      	bne.n	14f82 <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
   14f78:	6802      	ldr	r2, [r0, #0]
   14f7a:	b112      	cbz	r2, 14f82 <sys_notify_validate+0x1c>
		notify->result = 0;
   14f7c:	2000      	movs	r0, #0
   14f7e:	6098      	str	r0, [r3, #8]
   14f80:	4770      	bx	lr
		return -EINVAL;
   14f82:	f06f 0015 	mvn.w	r0, #21
}
   14f86:	4770      	bx	lr

00014f88 <arch_printk_char_out>:
}
   14f88:	2000      	movs	r0, #0
   14f8a:	4770      	bx	lr

00014f8c <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
   14f8c:	b40f      	push	{r0, r1, r2, r3}
   14f8e:	b507      	push	{r0, r1, r2, lr}
   14f90:	a904      	add	r1, sp, #16
   14f92:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   14f96:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
   14f98:	f7f8 f976 	bl	d288 <vprintk>
	}
	va_end(ap);
}
   14f9c:	b003      	add	sp, #12
   14f9e:	f85d eb04 	ldr.w	lr, [sp], #4
   14fa2:	b004      	add	sp, #16
   14fa4:	4770      	bx	lr

00014fa6 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   14fa6:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   14fa8:	f013 0307 	ands.w	r3, r3, #7
   14fac:	d105      	bne.n	14fba <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   14fae:	6803      	ldr	r3, [r0, #0]
   14fb0:	2b00      	cmp	r3, #0
		evt = EVT_START;
   14fb2:	bf0c      	ite	eq
   14fb4:	2000      	moveq	r0, #0
   14fb6:	2003      	movne	r0, #3
   14fb8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   14fba:	2b02      	cmp	r3, #2
   14fbc:	d105      	bne.n	14fca <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   14fbe:	8bc3      	ldrh	r3, [r0, #30]
   14fc0:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   14fc2:	bf14      	ite	ne
   14fc4:	2000      	movne	r0, #0
   14fc6:	2004      	moveq	r0, #4
   14fc8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   14fca:	2b01      	cmp	r3, #1
   14fcc:	d105      	bne.n	14fda <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   14fce:	6803      	ldr	r3, [r0, #0]
   14fd0:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   14fd2:	bf0c      	ite	eq
   14fd4:	2000      	moveq	r0, #0
   14fd6:	2005      	movne	r0, #5
   14fd8:	4770      	bx	lr
	int evt = EVT_NOP;
   14fda:	2000      	movs	r0, #0
}
   14fdc:	4770      	bx	lr

00014fde <notify_one>:
{
   14fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14fe2:	460d      	mov	r5, r1
   14fe4:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   14fe6:	4619      	mov	r1, r3
   14fe8:	1d28      	adds	r0, r5, #4
{
   14fea:	4690      	mov	r8, r2
   14fec:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   14fee:	f7f8 f91f 	bl	d230 <sys_notify_finalize>
	if (cb) {
   14ff2:	4604      	mov	r4, r0
   14ff4:	b138      	cbz	r0, 15006 <notify_one+0x28>
		cb(mgr, cli, state, res);
   14ff6:	4633      	mov	r3, r6
   14ff8:	4642      	mov	r2, r8
   14ffa:	4629      	mov	r1, r5
   14ffc:	4638      	mov	r0, r7
   14ffe:	46a4      	mov	ip, r4
}
   15000:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   15004:	4760      	bx	ip
}
   15006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001500a <validate_args>:
{
   1500a:	b510      	push	{r4, lr}
   1500c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1500e:	b140      	cbz	r0, 15022 <validate_args+0x18>
   15010:	b139      	cbz	r1, 15022 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   15012:	1d08      	adds	r0, r1, #4
   15014:	f7ff ffa7 	bl	14f66 <sys_notify_validate>
	if ((rv == 0)
   15018:	b928      	cbnz	r0, 15026 <validate_args+0x1c>
	    && ((cli->notify.flags
   1501a:	68a3      	ldr	r3, [r4, #8]
   1501c:	f033 0303 	bics.w	r3, r3, #3
   15020:	d001      	beq.n	15026 <validate_args+0x1c>
		rv = -EINVAL;
   15022:	f06f 0015 	mvn.w	r0, #21
}
   15026:	bd10      	pop	{r4, pc}

00015028 <onoff_manager_init>:
{
   15028:	b538      	push	{r3, r4, r5, lr}
   1502a:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1502c:	4605      	mov	r5, r0
   1502e:	b158      	cbz	r0, 15048 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   15030:	b151      	cbz	r1, 15048 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   15032:	680b      	ldr	r3, [r1, #0]
   15034:	b143      	cbz	r3, 15048 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   15036:	684b      	ldr	r3, [r1, #4]
   15038:	b133      	cbz	r3, 15048 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1503a:	2220      	movs	r2, #32
   1503c:	2100      	movs	r1, #0
   1503e:	f000 f9c4 	bl	153ca <memset>
	return 0;
   15042:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   15044:	612c      	str	r4, [r5, #16]
}
   15046:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   15048:	f06f 0015 	mvn.w	r0, #21
   1504c:	e7fb      	b.n	15046 <onoff_manager_init+0x1e>

0001504e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1504e:	4604      	mov	r4, r0
   15050:	b508      	push	{r3, lr}
   15052:	4608      	mov	r0, r1
   15054:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   15056:	461a      	mov	r2, r3
   15058:	47a0      	blx	r4
	return z_impl_k_current_get();
   1505a:	f7fc fe1d 	bl	11c98 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1505e:	f7fa fb13 	bl	f688 <z_impl_k_thread_abort>

00015062 <encode_uint>:
{
   15062:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15066:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   15068:	78d3      	ldrb	r3, [r2, #3]
{
   1506a:	4614      	mov	r4, r2
	switch (specifier) {
   1506c:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1506e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   15072:	4606      	mov	r6, r0
   15074:	460f      	mov	r7, r1
   15076:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   15078:	d02d      	beq.n	150d6 <encode_uint+0x74>
   1507a:	d828      	bhi.n	150ce <encode_uint+0x6c>
		return 16;
   1507c:	2b58      	cmp	r3, #88	; 0x58
   1507e:	bf14      	ite	ne
   15080:	250a      	movne	r5, #10
   15082:	2510      	moveq	r5, #16
		unsigned int lsv = (unsigned int)(value % radix);
   15084:	46aa      	mov	sl, r5
   15086:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
   1508a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   1508e:	4652      	mov	r2, sl
   15090:	465b      	mov	r3, fp
   15092:	4630      	mov	r0, r6
   15094:	4639      	mov	r1, r7
   15096:	f7eb f8d1 	bl	23c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1509a:	2a09      	cmp	r2, #9
   1509c:	b2d3      	uxtb	r3, r2
   1509e:	d81f      	bhi.n	150e0 <encode_uint+0x7e>
   150a0:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   150a2:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   150a4:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   150a6:	bf08      	it	eq
   150a8:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   150aa:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   150ae:	d301      	bcc.n	150b4 <encode_uint+0x52>
   150b0:	45c8      	cmp	r8, r9
   150b2:	d812      	bhi.n	150da <encode_uint+0x78>
	if (conv->flag_hash) {
   150b4:	7823      	ldrb	r3, [r4, #0]
   150b6:	069b      	lsls	r3, r3, #26
   150b8:	d505      	bpl.n	150c6 <encode_uint+0x64>
		if (radix == 8) {
   150ba:	2d08      	cmp	r5, #8
   150bc:	d116      	bne.n	150ec <encode_uint+0x8a>
			conv->altform_0 = true;
   150be:	78a3      	ldrb	r3, [r4, #2]
   150c0:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   150c4:	70a3      	strb	r3, [r4, #2]
}
   150c6:	4640      	mov	r0, r8
   150c8:	b003      	add	sp, #12
   150ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   150ce:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   150d2:	2b70      	cmp	r3, #112	; 0x70
   150d4:	e7d3      	b.n	1507e <encode_uint+0x1c>
	switch (specifier) {
   150d6:	2508      	movs	r5, #8
   150d8:	e7d4      	b.n	15084 <encode_uint+0x22>
		value /= radix;
   150da:	4606      	mov	r6, r0
   150dc:	460f      	mov	r7, r1
   150de:	e7d6      	b.n	1508e <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   150e0:	9a01      	ldr	r2, [sp, #4]
   150e2:	2a19      	cmp	r2, #25
   150e4:	bf94      	ite	ls
   150e6:	3337      	addls	r3, #55	; 0x37
   150e8:	3357      	addhi	r3, #87	; 0x57
   150ea:	e7da      	b.n	150a2 <encode_uint+0x40>
		} else if (radix == 16) {
   150ec:	2d10      	cmp	r5, #16
   150ee:	d1ea      	bne.n	150c6 <encode_uint+0x64>
			conv->altform_0c = true;
   150f0:	78a3      	ldrb	r3, [r4, #2]
   150f2:	f043 0310 	orr.w	r3, r3, #16
   150f6:	e7e5      	b.n	150c4 <encode_uint+0x62>

000150f8 <outs>:
{
   150f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   150fc:	4607      	mov	r7, r0
   150fe:	4688      	mov	r8, r1
   15100:	4615      	mov	r5, r2
   15102:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   15104:	4614      	mov	r4, r2
   15106:	42b4      	cmp	r4, r6
   15108:	eba4 0005 	sub.w	r0, r4, r5
   1510c:	d302      	bcc.n	15114 <outs+0x1c>
   1510e:	b93e      	cbnz	r6, 15120 <outs+0x28>
   15110:	7823      	ldrb	r3, [r4, #0]
   15112:	b12b      	cbz	r3, 15120 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   15114:	4641      	mov	r1, r8
   15116:	f814 0b01 	ldrb.w	r0, [r4], #1
   1511a:	47b8      	blx	r7
		if (rc < 0) {
   1511c:	2800      	cmp	r0, #0
   1511e:	daf2      	bge.n	15106 <outs+0xe>
}
   15120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015124 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   15124:	4040      	eors	r0, r0
   15126:	f380 8811 	msr	BASEPRI, r0
   1512a:	f04f 0004 	mov.w	r0, #4
   1512e:	df02      	svc	2
}
   15130:	4770      	bx	lr

00015132 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   15132:	4770      	bx	lr

00015134 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   15134:	f7fa bf4a 	b.w	ffcc <SystemInit>

00015138 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   15138:	b084      	sub	sp, #16
   1513a:	ab04      	add	r3, sp, #16
   1513c:	e903 0007 	stmdb	r3, {r0, r1, r2}
   15140:	2300      	movs	r3, #0
   15142:	f383 8811 	msr	BASEPRI, r3
   15146:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1514a:	b004      	add	sp, #16
   1514c:	4770      	bx	lr

0001514e <z_log_minimal_printk>:
#include <sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
   1514e:	b40f      	push	{r0, r1, r2, r3}
   15150:	b507      	push	{r0, r1, r2, lr}
   15152:	a904      	add	r1, sp, #16
   15154:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   15158:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   1515a:	f7f8 f895 	bl	d288 <vprintk>
	va_end(ap);
}
   1515e:	b003      	add	sp, #12
   15160:	f85d eb04 	ldr.w	lr, [sp], #4
   15164:	b004      	add	sp, #16
   15166:	4770      	bx	lr

00015168 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   15168:	2200      	movs	r2, #0
   1516a:	e9c0 2200 	strd	r2, r2, [r0]
   1516e:	6082      	str	r2, [r0, #8]
}
   15170:	4770      	bx	lr

00015172 <set_starting_state>:
{
   15172:	b510      	push	{r4, lr}
	__asm__ volatile(
   15174:	f04f 0320 	mov.w	r3, #32
   15178:	f3ef 8211 	mrs	r2, BASEPRI
   1517c:	f383 8811 	msr	BASEPRI, r3
   15180:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   15184:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   15186:	f003 0407 	and.w	r4, r3, #7
   1518a:	2c01      	cmp	r4, #1
   1518c:	d106      	bne.n	1519c <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1518e:	6001      	str	r1, [r0, #0]
	int err = 0;
   15190:	2000      	movs	r0, #0
	__asm__ volatile(
   15192:	f382 8811 	msr	BASEPRI, r2
   15196:	f3bf 8f6f 	isb	sy
}
   1519a:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1519c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   151a0:	428b      	cmp	r3, r1
		err = -EALREADY;
   151a2:	bf14      	ite	ne
   151a4:	f04f 30ff 	movne.w	r0, #4294967295
   151a8:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   151ac:	e7f1      	b.n	15192 <set_starting_state+0x20>

000151ae <set_on_state>:
	__asm__ volatile(
   151ae:	f04f 0320 	mov.w	r3, #32
   151b2:	f3ef 8211 	mrs	r2, BASEPRI
   151b6:	f383 8811 	msr	BASEPRI, r3
   151ba:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   151be:	6803      	ldr	r3, [r0, #0]
   151c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   151c4:	f043 0302 	orr.w	r3, r3, #2
   151c8:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   151ca:	f382 8811 	msr	BASEPRI, r2
   151ce:	f3bf 8f6f 	isb	sy
}
   151d2:	4770      	bx	lr

000151d4 <onoff_started_callback>:
	return &data->mgr[type];
   151d4:	6900      	ldr	r0, [r0, #16]
   151d6:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   151d8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   151dc:	2100      	movs	r1, #0
   151de:	4710      	bx	r2

000151e0 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   151e0:	2003      	movs	r0, #3
   151e2:	f7fa bfc9 	b.w	10178 <nrfx_clock_start>

000151e6 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   151e6:	2002      	movs	r0, #2
   151e8:	f7fa bfc6 	b.w	10178 <nrfx_clock_start>

000151ec <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   151ec:	2000      	movs	r0, #0
   151ee:	f7fa bfc3 	b.w	10178 <nrfx_clock_start>

000151f2 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   151f2:	2003      	movs	r0, #3
   151f4:	f7fb b836 	b.w	10264 <nrfx_clock_stop>

000151f8 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   151f8:	2002      	movs	r0, #2
   151fa:	f7fb b833 	b.w	10264 <nrfx_clock_stop>

000151fe <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   151fe:	2000      	movs	r0, #0
   15200:	f7fb b830 	b.w	10264 <nrfx_clock_stop>

00015204 <api_stop>:
	return stop(dev, subsys, CTX_API);
   15204:	2280      	movs	r2, #128	; 0x80
   15206:	f7f9 b845 	b.w	e294 <stop>

0001520a <blocking_start_callback>:
{
   1520a:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1520c:	f7fb bddc 	b.w	10dc8 <z_impl_k_sem_give>

00015210 <api_start>:
{
   15210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
   15214:	240c      	movs	r4, #12
   15216:	b2c9      	uxtb	r1, r1
   15218:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1521a:	6905      	ldr	r5, [r0, #16]
{
   1521c:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   1521e:	f104 0088 	add.w	r0, r4, #136	; 0x88
   15222:	2180      	movs	r1, #128	; 0x80
   15224:	4428      	add	r0, r5
{
   15226:	4690      	mov	r8, r2
   15228:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   1522a:	f7ff ffa2 	bl	15172 <set_starting_state>
	if (err < 0) {
   1522e:	2800      	cmp	r0, #0
   15230:	db06      	blt.n	15240 <api_start+0x30>
	subdata->cb = cb;
   15232:	4425      	add	r5, r4
	subdata->user_data = user_data;
   15234:	e9c5 8720 	strd	r8, r7, [r5, #128]	; 0x80
	 get_sub_config(dev, type)->start();
   15238:	6873      	ldr	r3, [r6, #4]
   1523a:	591b      	ldr	r3, [r3, r4]
   1523c:	4798      	blx	r3
	return 0;
   1523e:	2000      	movs	r0, #0
}
   15240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015244 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   15244:	4770      	bx	lr

00015246 <sys_clock_disable>:
   15246:	4770      	bx	lr

00015248 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
   15248:	2000      	movs	r0, #0
   1524a:	f7f8 be53 	b.w	def4 <sys_reboot>

0001524e <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1524e:	2100      	movs	r1, #0
   15250:	2001      	movs	r0, #1
   15252:	f7f9 bead 	b.w	efb0 <z_arm_fatal_error>

00015256 <irq_target_state_set>:
 *
 * @return The resulting target state of the given IRQ
 */
irq_target_state_t irq_target_state_set(unsigned int irq,
	irq_target_state_t irq_target_state)
{
   15256:	4602      	mov	r2, r0
   15258:	b243      	sxtb	r3, r0
	uint32_t result;

	if (irq_target_state == IRQ_TARGET_STATE_SECURE) {
   1525a:	4608      	mov	r0, r1
   1525c:	b9c1      	cbnz	r1, 15290 <irq_target_state_set+0x3a>
  if ((int32_t)(IRQn) >= 0)
   1525e:	2b00      	cmp	r3, #0
   15260:	db27      	blt.n	152b2 <irq_target_state_set+0x5c>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   15262:	2001      	movs	r0, #1
   15264:	095b      	lsrs	r3, r3, #5
   15266:	009b      	lsls	r3, r3, #2
   15268:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   1526c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   15270:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
   15274:	f002 021f 	and.w	r2, r2, #31
   15278:	4090      	lsls	r0, r2
   1527a:	ea21 0100 	bic.w	r1, r1, r0
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   1527e:	f8c3 1280 	str.w	r1, [r3, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
   15282:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
   15286:	40d0      	lsrs	r0, r2
   15288:	f000 0001 	and.w	r0, r0, #1
	} else {
		/* Set target to Non-Secure */
		result = NVIC_SetTargetState(irq);
	}

	if (result) {
   1528c:	b2c0      	uxtb	r0, r0
   1528e:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
   15290:	2b00      	cmp	r3, #0
   15292:	db0d      	blt.n	152b0 <irq_target_state_set+0x5a>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   15294:	2101      	movs	r1, #1
   15296:	095b      	lsrs	r3, r3, #5
   15298:	009b      	lsls	r3, r3, #2
   1529a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   1529e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   152a2:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
   152a6:	f002 021f 	and.w	r2, r2, #31
   152aa:	4091      	lsls	r1, r2
   152ac:	4301      	orrs	r1, r0
   152ae:	e7e6      	b.n	1527e <irq_target_state_set+0x28>
		return IRQ_TARGET_STATE_NON_SECURE;
	} else {
		return IRQ_TARGET_STATE_SECURE;
   152b0:	2000      	movs	r0, #0
	}
}
   152b2:	4770      	bx	lr

000152b4 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   152b4:	6e43      	ldr	r3, [r0, #100]	; 0x64
   152b6:	f383 880b 	msr	PSPLIM, r3
}
   152ba:	4770      	bx	lr

000152bc <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   152bc:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   152be:	6800      	ldr	r0, [r0, #0]
   152c0:	f7f9 be76 	b.w	efb0 <z_arm_fatal_error>

000152c4 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   152c4:	b508      	push	{r3, lr}
	handler();
   152c6:	f7f9 fea1 	bl	f00c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   152ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   152ce:	f7fa b979 	b.w	f5c4 <z_arm_exc_exit>

000152d2 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   152d2:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   152d6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   152da:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   152dc:	bf08      	it	eq
   152de:	f06f 0015 	mvneq.w	r0, #21
   152e2:	4770      	bx	lr

000152e4 <arm_cmse_addr_is_secure>:
   152e4:	e840 f000 	tt	r0, r0
int arm_cmse_addr_is_secure(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	return addr_info.flags.secure;
}
   152e8:	f3c0 5080 	ubfx	r0, r0, #22, #1
   152ec:	4770      	bx	lr

000152ee <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   152ee:	4603      	mov	r3, r0
	size_t n = 0;
   152f0:	2000      	movs	r0, #0

	while (*s != '\0') {
   152f2:	5c1a      	ldrb	r2, [r3, r0]
   152f4:	b902      	cbnz	r2, 152f8 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   152f6:	4770      	bx	lr
		n++;
   152f8:	3001      	adds	r0, #1
   152fa:	e7fa      	b.n	152f2 <strlen+0x4>

000152fc <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   152fc:	4603      	mov	r3, r0
	size_t n = 0;
   152fe:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   15300:	5c1a      	ldrb	r2, [r3, r0]
   15302:	b10a      	cbz	r2, 15308 <strnlen+0xc>
   15304:	4288      	cmp	r0, r1
   15306:	d100      	bne.n	1530a <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   15308:	4770      	bx	lr
		n++;
   1530a:	3001      	adds	r0, #1
   1530c:	e7f8      	b.n	15300 <strnlen+0x4>

0001530e <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1530e:	1e43      	subs	r3, r0, #1
   15310:	3901      	subs	r1, #1
   15312:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   15316:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1531a:	4282      	cmp	r2, r0
   1531c:	d101      	bne.n	15322 <strcmp+0x14>
   1531e:	2a00      	cmp	r2, #0
   15320:	d1f7      	bne.n	15312 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   15322:	1a10      	subs	r0, r2, r0
   15324:	4770      	bx	lr

00015326 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   15326:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   15328:	b15a      	cbz	r2, 15342 <memcmp+0x1c>
   1532a:	3901      	subs	r1, #1
   1532c:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1532e:	f810 2b01 	ldrb.w	r2, [r0], #1
   15332:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   15336:	42a0      	cmp	r0, r4
   15338:	d001      	beq.n	1533e <memcmp+0x18>
   1533a:	429a      	cmp	r2, r3
   1533c:	d0f7      	beq.n	1532e <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1533e:	1ad0      	subs	r0, r2, r3
}
   15340:	bd10      	pop	{r4, pc}
		return 0;
   15342:	4610      	mov	r0, r2
   15344:	e7fc      	b.n	15340 <memcmp+0x1a>

00015346 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   15346:	1a43      	subs	r3, r0, r1
   15348:	4293      	cmp	r3, r2
{
   1534a:	b510      	push	{r4, lr}
   1534c:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   15350:	d308      	bcc.n	15364 <memmove+0x1e>
	char *dest = d;
   15352:	4602      	mov	r2, r0
   15354:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   15356:	429a      	cmp	r2, r3
   15358:	d00b      	beq.n	15372 <memmove+0x2c>
			*dest = *src;
   1535a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1535e:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   15362:	e7f8      	b.n	15356 <memmove+0x10>
   15364:	440a      	add	r2, r1
			dest[n] = src[n];
   15366:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
   1536a:	428a      	cmp	r2, r1
			dest[n] = src[n];
   1536c:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   15370:	d1f9      	bne.n	15366 <memmove+0x20>
		}
	}

	return d;
}
   15372:	bd10      	pop	{r4, pc}

00015374 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   15374:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   15376:	ea81 0400 	eor.w	r4, r1, r0
   1537a:	07a5      	lsls	r5, r4, #30
   1537c:	4603      	mov	r3, r0
   1537e:	d00b      	beq.n	15398 <memcpy+0x24>
   15380:	3b01      	subs	r3, #1
   15382:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   15384:	4291      	cmp	r1, r2
   15386:	d11b      	bne.n	153c0 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   15388:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1538a:	2a00      	cmp	r2, #0
   1538c:	d0fc      	beq.n	15388 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1538e:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   15392:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   15394:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   15398:	079c      	lsls	r4, r3, #30
   1539a:	d1f6      	bne.n	1538a <memcpy+0x16>
   1539c:	f022 0403 	bic.w	r4, r2, #3
   153a0:	1f1d      	subs	r5, r3, #4
   153a2:	0896      	lsrs	r6, r2, #2
   153a4:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   153a6:	42b9      	cmp	r1, r7
   153a8:	d105      	bne.n	153b6 <memcpy+0x42>
   153aa:	f06f 0503 	mvn.w	r5, #3
   153ae:	4423      	add	r3, r4
   153b0:	fb05 2206 	mla	r2, r5, r6, r2
   153b4:	e7e4      	b.n	15380 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   153b6:	f851 cb04 	ldr.w	ip, [r1], #4
   153ba:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   153be:	e7f2      	b.n	153a6 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   153c0:	f811 4b01 	ldrb.w	r4, [r1], #1
   153c4:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   153c8:	e7dc      	b.n	15384 <memcpy+0x10>

000153ca <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   153ca:	4603      	mov	r3, r0
{
   153cc:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   153ce:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   153d0:	079c      	lsls	r4, r3, #30
   153d2:	d111      	bne.n	153f8 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   153d4:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   153d8:	f022 0603 	bic.w	r6, r2, #3
   153dc:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   153e0:	441e      	add	r6, r3
   153e2:	0894      	lsrs	r4, r2, #2
   153e4:	42b3      	cmp	r3, r6
   153e6:	d10d      	bne.n	15404 <memset+0x3a>
   153e8:	f06f 0503 	mvn.w	r5, #3
   153ec:	fb05 2204 	mla	r2, r5, r4, r2
   153f0:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   153f2:	4293      	cmp	r3, r2
   153f4:	d109      	bne.n	1540a <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   153f6:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   153f8:	2a00      	cmp	r2, #0
   153fa:	d0fc      	beq.n	153f6 <memset+0x2c>
		*(d_byte++) = c_byte;
   153fc:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   15400:	3a01      	subs	r2, #1
   15402:	e7e5      	b.n	153d0 <memset+0x6>
		*(d_word++) = c_word;
   15404:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   15408:	e7ec      	b.n	153e4 <memset+0x1a>
		*(d_byte++) = c_byte;
   1540a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1540e:	e7f0      	b.n	153f2 <memset+0x28>

00015410 <_stdout_hook_default>:
}
   15410:	f04f 30ff 	mov.w	r0, #4294967295
   15414:	4770      	bx	lr

00015416 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   15416:	6843      	ldr	r3, [r0, #4]
   15418:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   1541a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1541e:	05d1      	lsls	r1, r2, #23
   15420:	d518      	bpl.n	15454 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15422:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   15426:	b1aa      	cbz	r2, 15454 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   15428:	f04f 0120 	mov.w	r1, #32
   1542c:	f3ef 8211 	mrs	r2, BASEPRI
   15430:	f381 8811 	msr	BASEPRI, r1
   15434:	f3bf 8f6f 	isb	sy
   15438:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1543c:	b131      	cbz	r1, 1544c <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1543e:	2100      	movs	r1, #0
   15440:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   15444:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15448:	2101      	movs	r1, #1
   1544a:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1544c:	f382 8811 	msr	BASEPRI, r2
   15450:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   15454:	6842      	ldr	r2, [r0, #4]
   15456:	6852      	ldr	r2, [r2, #4]
   15458:	06d2      	lsls	r2, r2, #27
   1545a:	d515      	bpl.n	15488 <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
   1545c:	f04f 0120 	mov.w	r1, #32
   15460:	f3ef 8211 	mrs	r2, BASEPRI
   15464:	f381 8811 	msr	BASEPRI, r1
   15468:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1546c:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   15470:	b111      	cbz	r1, 15478 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   15472:	2100      	movs	r1, #0
   15474:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   15478:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1547c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   15480:	f382 8811 	msr	BASEPRI, r2
   15484:	f3bf 8f6f 	isb	sy
}
   15488:	4770      	bx	lr

0001548a <uarte_nrfx_config_get>:
{
   1548a:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1548c:	6902      	ldr	r2, [r0, #16]
   1548e:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   15492:	e883 0003 	stmia.w	r3, {r0, r1}
}
   15496:	2000      	movs	r0, #0
   15498:	4770      	bx	lr

0001549a <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1549a:	6843      	ldr	r3, [r0, #4]
   1549c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1549e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   154a2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   154a6:	4770      	bx	lr

000154a8 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   154a8:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   154aa:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   154ac:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   154b0:	b940      	cbnz	r0, 154c4 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   154b2:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   154b4:	0712      	lsls	r2, r2, #28
   154b6:	d406      	bmi.n	154c6 <is_tx_ready+0x1e>
   154b8:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   154bc:	3800      	subs	r0, #0
   154be:	bf18      	it	ne
   154c0:	2001      	movne	r0, #1
   154c2:	4770      	bx	lr
   154c4:	2001      	movs	r0, #1
}
   154c6:	4770      	bx	lr

000154c8 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   154c8:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   154ca:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   154cc:	681b      	ldr	r3, [r3, #0]
   154ce:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   154d2:	b148      	cbz	r0, 154e8 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   154d4:	2000      	movs	r0, #0
	*c = data->rx_data;
   154d6:	7c52      	ldrb	r2, [r2, #17]
   154d8:	700a      	strb	r2, [r1, #0]
   154da:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   154de:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   154e2:	2201      	movs	r2, #1
   154e4:	601a      	str	r2, [r3, #0]
	return 0;
   154e6:	4770      	bx	lr
		return -1;
   154e8:	f04f 30ff 	mov.w	r0, #4294967295
}
   154ec:	4770      	bx	lr

000154ee <nrf_gpio_cfg_output>:
{
   154ee:	b507      	push	{r0, r1, r2, lr}
   154f0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   154f2:	a801      	add	r0, sp, #4
   154f4:	f7fa fc02 	bl	fcfc <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   154f8:	9b01      	ldr	r3, [sp, #4]
   154fa:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   154fe:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   15502:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   15506:	f043 0303 	orr.w	r3, r3, #3
    reg->PIN_CNF[pin_number] = cnf;
   1550a:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   1550e:	b003      	add	sp, #12
   15510:	f85d fb04 	ldr.w	pc, [sp], #4

00015514 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   15514:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   15518:	4605      	mov	r5, r0
   1551a:	2101      	movs	r1, #1
   1551c:	2200      	movs	r2, #0
   1551e:	2008      	movs	r0, #8
   15520:	f7f9 fcd2 	bl	eec8 <z_arm_irq_priority_set>
   15524:	2008      	movs	r0, #8
   15526:	f7f9 fcb1 	bl	ee8c <arch_irq_enable>
	return config->uarte_regs;
   1552a:	686b      	ldr	r3, [r5, #4]
   1552c:	f04f 0814 	mov.w	r8, #20
   15530:	681c      	ldr	r4, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   15532:	2300      	movs	r3, #0
	struct uarte_nrfx_data *data = get_dev_data(dev);
   15534:	692e      	ldr	r6, [r5, #16]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15536:	2701      	movs	r7, #1
   15538:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1553c:	a801      	add	r0, sp, #4
	data->dev = dev;
   1553e:	6035      	str	r5, [r6, #0]
        nrf_gpio_pin_set(pin_number);
   15540:	f8cd 8004 	str.w	r8, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15544:	f7fa fbda 	bl	fcfc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15548:	f04f 0916 	mov.w	r9, #22
   1554c:	9b01      	ldr	r3, [sp, #4]
   1554e:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTSET = set_mask;
   15552:	6083      	str	r3, [r0, #8]
	nrf_gpio_cfg_output(config->pseltxd);
   15554:	4640      	mov	r0, r8
   15556:	f7ff ffca 	bl	154ee <nrf_gpio_cfg_output>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1555a:	a801      	add	r0, sp, #4
   1555c:	f8cd 9004 	str.w	r9, [sp, #4]
   15560:	f7fa fbcc 	bl	fcfc <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   15564:	9b01      	ldr	r3, [sp, #4]
   15566:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1556a:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   1556e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   15572:	f043 030c 	orr.w	r3, r3, #12
    reg->PIN_CNF[pin_number] = cnf;
   15576:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_reg->PSEL.TXD = pseltxd;
   1557a:	f8c4 850c 	str.w	r8, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1557e:	f8c4 9514 	str.w	r9, [r4, #1300]	; 0x514
    nrf_gpio_cfg(
   15582:	f04f 0915 	mov.w	r9, #21
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15586:	a801      	add	r0, sp, #4
   15588:	f8cd 9004 	str.w	r9, [sp, #4]
   1558c:	f7fa fbb6 	bl	fcfc <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   15590:	f04f 0813 	mov.w	r8, #19
   15594:	9b01      	ldr	r3, [sp, #4]
   15596:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1559a:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   1559e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   155a2:	f043 030c 	orr.w	r3, r3, #12
    reg->PIN_CNF[pin_number] = cnf;
   155a6:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   155aa:	a801      	add	r0, sp, #4
   155ac:	f8cd 8004 	str.w	r8, [sp, #4]
   155b0:	f7fa fba4 	bl	fcfc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   155b4:	9b01      	ldr	r3, [sp, #4]
   155b6:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTSET = set_mask;
   155ba:	6083      	str	r3, [r0, #8]
		nrf_gpio_cfg_output(config->pselrts);
   155bc:	4640      	mov	r0, r8
   155be:	f7ff ff96 	bl	154ee <nrf_gpio_cfg_output>
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   155c2:	6929      	ldr	r1, [r5, #16]
    p_reg->PSEL.RTS = pselrts;
   155c4:	f8c4 8508 	str.w	r8, [r4, #1288]	; 0x508
   155c8:	4628      	mov	r0, r5
    p_reg->PSEL.CTS = pselcts;
   155ca:	f8c4 9510 	str.w	r9, [r4, #1296]	; 0x510
   155ce:	3104      	adds	r1, #4
   155d0:	f7fa fad2 	bl	fb78 <uarte_nrfx_configure>
	if (err) {
   155d4:	bb20      	cbnz	r0, 15620 <uarte_0_init+0x10c>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   155d6:	2308      	movs	r3, #8
   155d8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   155dc:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
   155e0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   155e4:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   155e8:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   155ec:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.MAXCNT = length;
   155ee:	f8c4 7538 	str.w	r7, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   155f2:	6027      	str	r7, [r4, #0]
   155f4:	685b      	ldr	r3, [r3, #4]
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   155f6:	3610      	adds	r6, #16
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   155f8:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
   155fa:	bf5c      	itt	pl
   155fc:	f44f 7280 	movpl.w	r2, #256	; 0x100
   15600:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   15604:	06db      	lsls	r3, r3, #27
   15606:	bf44      	itt	mi
   15608:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1560c:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   15610:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   15612:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   15616:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1561a:	2301      	movs	r3, #1
   1561c:	60a3      	str	r3, [r4, #8]
   1561e:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   15620:	b003      	add	sp, #12
   15622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00015626 <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   15626:	f7fc bea3 	b.w	12370 <nrf_cc3xx_platform_init>

0001562a <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   1562a:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   1562c:	f7f9 fafc 	bl	ec28 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   15630:	f7f9 fbc0 	bl	edb4 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   15634:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   15638:	f7fc be9a 	b.w	12370 <nrf_cc3xx_platform_init>

0001563c <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1563c:	4700      	bx	r0

0001563e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1563e:	f000 b860 	b.w	15702 <z_impl_k_busy_wait>

00015642 <z_device_state_init>:
}
   15642:	4770      	bx	lr

00015644 <z_device_ready>:
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
	return dev->state->initialized && (dev->state->init_res == 0U);
   15644:	68c3      	ldr	r3, [r0, #12]
   15646:	8818      	ldrh	r0, [r3, #0]
   15648:	f3c0 0008 	ubfx	r0, r0, #0, #9
}
   1564c:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   15650:	4258      	negs	r0, r3
   15652:	4158      	adcs	r0, r3
   15654:	4770      	bx	lr

00015656 <k_mem_slab_init>:
{
   15656:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   15658:	2400      	movs	r4, #0
   1565a:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   1565c:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1565e:	ea41 0402 	orr.w	r4, r1, r2
   15662:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   15666:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
   1566a:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1566c:	d10c      	bne.n	15688 <k_mem_slab_init+0x32>
	slab->free_list = NULL;
   1566e:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   15670:	42a3      	cmp	r3, r4
   15672:	d103      	bne.n	1567c <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
   15674:	e9c0 0000 	strd	r0, r0, [r0]
}
   15678:	2000      	movs	r0, #0
}
   1567a:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   1567c:	6985      	ldr	r5, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   1567e:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   15680:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   15682:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
   15684:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   15686:	e7f3      	b.n	15670 <k_mem_slab_init+0x1a>
		return -EINVAL;
   15688:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1568c:	e7f5      	b.n	1567a <k_mem_slab_init+0x24>

0001568e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1568e:	f3ef 8005 	mrs	r0, IPSR
}
   15692:	3800      	subs	r0, #0
   15694:	bf18      	it	ne
   15696:	2001      	movne	r0, #1
   15698:	4770      	bx	lr

0001569a <k_thread_name_get>:
}
   1569a:	2000      	movs	r0, #0
   1569c:	4770      	bx	lr

0001569e <z_pm_save_idle_exit>:
{
   1569e:	b508      	push	{r3, lr}
	pm_system_resume();
   156a0:	f7f8 fd2c 	bl	e0fc <pm_system_resume>
}
   156a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   156a8:	f7ff bdcc 	b.w	15244 <sys_clock_idle_exit>

000156ac <z_impl_k_mutex_init>:
{
   156ac:	4603      	mov	r3, r0
	mutex->owner = NULL;
   156ae:	2000      	movs	r0, #0
   156b0:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   156b4:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   156b8:	4770      	bx	lr

000156ba <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   156ba:	4603      	mov	r3, r0
   156bc:	b920      	cbnz	r0, 156c8 <z_reschedule_irqlock+0xe>
   156be:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   156c2:	b90a      	cbnz	r2, 156c8 <z_reschedule_irqlock+0xe>
   156c4:	f7f9 bb8c 	b.w	ede0 <arch_swap>
   156c8:	f383 8811 	msr	BASEPRI, r3
   156cc:	f3bf 8f6f 	isb	sy
}
   156d0:	4770      	bx	lr

000156d2 <z_reschedule_unlocked>:
	__asm__ volatile(
   156d2:	f04f 0320 	mov.w	r3, #32
   156d6:	f3ef 8011 	mrs	r0, BASEPRI
   156da:	f383 8811 	msr	BASEPRI, r3
   156de:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   156e2:	f7ff bfea 	b.w	156ba <z_reschedule_irqlock>

000156e6 <z_priq_dumb_best>:
{
   156e6:	4603      	mov	r3, r0
	return list->head == list;
   156e8:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   156ea:	4283      	cmp	r3, r0
   156ec:	d003      	beq.n	156f6 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   156ee:	2800      	cmp	r0, #0
   156f0:	bf38      	it	cc
   156f2:	2000      	movcc	r0, #0
   156f4:	4770      	bx	lr
	struct k_thread *thread = NULL;
   156f6:	2000      	movs	r0, #0
}
   156f8:	4770      	bx	lr

000156fa <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   156fa:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   156fc:	f7fc fdee 	bl	122dc <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   15700:	bd08      	pop	{r3, pc}

00015702 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   15702:	b108      	cbz	r0, 15708 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   15704:	f7f8 bc8c 	b.w	e020 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   15708:	4770      	bx	lr

0001570a <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   1570a:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

00018fa0 <ikm_sk-0x3040>:
	...

0001bfe0 <ikm_sk>:
   1bfe0:	e97f e97f 	sg
   1bfe4:	f7f1 b8cc 	b.w	d180 <__acle_se_ikm_sk>

0001bfe8 <public_key_to_sk>:
   1bfe8:	e97f e97f 	sg
   1bfec:	f7f1 b884 	b.w	d0f8 <__acle_se_public_key_to_sk>

0001bff0 <spm_request_random_number_nse>:
   1bff0:	e97f e97f 	sg
   1bff4:	f7f2 bdf4 	b.w	ebe0 <__acle_se_spm_request_random_number_nse>

0001bff8 <sk_to_pk>:
   1bff8:	e97f e97f 	sg
   1bffc:	f7f1 b908 	b.w	d210 <__acle_se_sk_to_pk>
