
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00010000 <_vector_start>:
   10000:	20015de0 	.word	0x20015de0
   10004:	00021d91 	.word	0x00021d91
   10008:	00027451 	.word	0x00027451
   1000c:	00021dcd 	.word	0x00021dcd
   10010:	00021dcd 	.word	0x00021dcd
   10014:	00021dcd 	.word	0x00021dcd
   10018:	00021dcd 	.word	0x00021dcd
   1001c:	00021dcd 	.word	0x00021dcd
	...
   1002c:	00021ced 	.word	0x00021ced
   10030:	00021dcd 	.word	0x00021dcd
   10034:	00000000 	.word	0x00000000
   10038:	00021c91 	.word	0x00021c91
   1003c:	00027419 	.word	0x00027419

00010040 <_irq_vector_table>:
   10040:	00021d51 00021d51 00021d51 00021d51     Q...Q...Q...Q...
   10050:	00021d51 00021d51 00021d51 00021d51     Q...Q...Q...Q...
   10060:	00021d51 00021d51 00021d51 00021d51     Q...Q...Q...Q...
   10070:	00021d51 00021d51 00021d51 00021d51     Q...Q...Q...Q...
   10080:	00021d51 00021d51 00021d51 00021d51     Q...Q...Q...Q...
   10090:	00021d51 00021d51 00021d51 00021d51     Q...Q...Q...Q...
   100a0:	00021d51 00021d51 00021d51 00021d51     Q...Q...Q...Q...
   100b0:	00021d51 00021d51 00021d51 00021d51     Q...Q...Q...Q...
   100c0:	00021d51 00021d51 00021d51 00021d51     Q...Q...Q...Q...
   100d0:	00021d51 00021d51 00021d51 00021d51     Q...Q...Q...Q...
   100e0:	00021d51 00021d51 00021d51 00021d51     Q...Q...Q...Q...
   100f0:	00021d51 00021d51 00021d51 00021d51     Q...Q...Q...Q...
   10100:	00021d51 00021d51 00021d51 00021d51     Q...Q...Q...Q...
   10110:	00021d51 00021d51 00021d51 00021d51     Q...Q...Q...Q...
   10120:	00021d51 00021d51 00021d51 00021d51     Q...Q...Q...Q...
   10130:	00021d51 00021d51 00021d51 00021d51     Q...Q...Q...Q...
   10140:	00021d51 00021d51 00021d51 00021d51     Q...Q...Q...Q...
   10150:	00021d51                                Q...

00010154 <_vector_end>:
	...

00010200 <m_firmware_info>:
   10200:	281ee6de 8fcebb4c 00003502 0000003c     ...(L....5..<...
   10210:	0001cee8 00000001 00010000 00010000     ................
   10220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

00010240 <__aeabi_ldivmod>:
   10240:	b97b      	cbnz	r3, 10262 <__aeabi_ldivmod+0x22>
   10242:	b972      	cbnz	r2, 10262 <__aeabi_ldivmod+0x22>
   10244:	2900      	cmp	r1, #0
   10246:	bfbe      	ittt	lt
   10248:	2000      	movlt	r0, #0
   1024a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   1024e:	e006      	blt.n	1025e <__aeabi_ldivmod+0x1e>
   10250:	bf08      	it	eq
   10252:	2800      	cmpeq	r0, #0
   10254:	bf1c      	itt	ne
   10256:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   1025a:	f04f 30ff 	movne.w	r0, #4294967295
   1025e:	f000 b9bb 	b.w	105d8 <__aeabi_idiv0>
   10262:	f1ad 0c08 	sub.w	ip, sp, #8
   10266:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1026a:	2900      	cmp	r1, #0
   1026c:	db09      	blt.n	10282 <__aeabi_ldivmod+0x42>
   1026e:	2b00      	cmp	r3, #0
   10270:	db1a      	blt.n	102a8 <__aeabi_ldivmod+0x68>
   10272:	f000 f84d 	bl	10310 <__udivmoddi4>
   10276:	f8dd e004 	ldr.w	lr, [sp, #4]
   1027a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1027e:	b004      	add	sp, #16
   10280:	4770      	bx	lr
   10282:	4240      	negs	r0, r0
   10284:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   10288:	2b00      	cmp	r3, #0
   1028a:	db1b      	blt.n	102c4 <__aeabi_ldivmod+0x84>
   1028c:	f000 f840 	bl	10310 <__udivmoddi4>
   10290:	f8dd e004 	ldr.w	lr, [sp, #4]
   10294:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10298:	b004      	add	sp, #16
   1029a:	4240      	negs	r0, r0
   1029c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   102a0:	4252      	negs	r2, r2
   102a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   102a6:	4770      	bx	lr
   102a8:	4252      	negs	r2, r2
   102aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   102ae:	f000 f82f 	bl	10310 <__udivmoddi4>
   102b2:	f8dd e004 	ldr.w	lr, [sp, #4]
   102b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   102ba:	b004      	add	sp, #16
   102bc:	4240      	negs	r0, r0
   102be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   102c2:	4770      	bx	lr
   102c4:	4252      	negs	r2, r2
   102c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   102ca:	f000 f821 	bl	10310 <__udivmoddi4>
   102ce:	f8dd e004 	ldr.w	lr, [sp, #4]
   102d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   102d6:	b004      	add	sp, #16
   102d8:	4252      	negs	r2, r2
   102da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   102de:	4770      	bx	lr

000102e0 <__aeabi_uldivmod>:
   102e0:	b953      	cbnz	r3, 102f8 <__aeabi_uldivmod+0x18>
   102e2:	b94a      	cbnz	r2, 102f8 <__aeabi_uldivmod+0x18>
   102e4:	2900      	cmp	r1, #0
   102e6:	bf08      	it	eq
   102e8:	2800      	cmpeq	r0, #0
   102ea:	bf1c      	itt	ne
   102ec:	f04f 31ff 	movne.w	r1, #4294967295
   102f0:	f04f 30ff 	movne.w	r0, #4294967295
   102f4:	f000 b970 	b.w	105d8 <__aeabi_idiv0>
   102f8:	f1ad 0c08 	sub.w	ip, sp, #8
   102fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   10300:	f000 f806 	bl	10310 <__udivmoddi4>
   10304:	f8dd e004 	ldr.w	lr, [sp, #4]
   10308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1030c:	b004      	add	sp, #16
   1030e:	4770      	bx	lr

00010310 <__udivmoddi4>:
   10310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10314:	9e08      	ldr	r6, [sp, #32]
   10316:	460d      	mov	r5, r1
   10318:	4604      	mov	r4, r0
   1031a:	468a      	mov	sl, r1
   1031c:	2b00      	cmp	r3, #0
   1031e:	d17f      	bne.n	10420 <__udivmoddi4+0x110>
   10320:	428a      	cmp	r2, r1
   10322:	4617      	mov	r7, r2
   10324:	d941      	bls.n	103aa <__udivmoddi4+0x9a>
   10326:	fab2 f282 	clz	r2, r2
   1032a:	b14a      	cbz	r2, 10340 <__udivmoddi4+0x30>
   1032c:	f1c2 0120 	rsb	r1, r2, #32
   10330:	fa05 f302 	lsl.w	r3, r5, r2
   10334:	4097      	lsls	r7, r2
   10336:	4094      	lsls	r4, r2
   10338:	fa20 f101 	lsr.w	r1, r0, r1
   1033c:	ea41 0a03 	orr.w	sl, r1, r3
   10340:	ea4f 4817 	mov.w	r8, r7, lsr #16
   10344:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   10348:	fa1f f987 	uxth.w	r9, r7
   1034c:	fbba fef8 	udiv	lr, sl, r8
   10350:	fb08 a31e 	mls	r3, r8, lr, sl
   10354:	fb0e f109 	mul.w	r1, lr, r9
   10358:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
   1035c:	4299      	cmp	r1, r3
   1035e:	d906      	bls.n	1036e <__udivmoddi4+0x5e>
   10360:	18fb      	adds	r3, r7, r3
   10362:	d202      	bcs.n	1036a <__udivmoddi4+0x5a>
   10364:	4299      	cmp	r1, r3
   10366:	f200 8124 	bhi.w	105b2 <__udivmoddi4+0x2a2>
   1036a:	f10e 3eff 	add.w	lr, lr, #4294967295
   1036e:	1a59      	subs	r1, r3, r1
   10370:	b2a3      	uxth	r3, r4
   10372:	fbb1 f0f8 	udiv	r0, r1, r8
   10376:	fb08 1110 	mls	r1, r8, r0, r1
   1037a:	fb00 f909 	mul.w	r9, r0, r9
   1037e:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   10382:	45a1      	cmp	r9, r4
   10384:	d905      	bls.n	10392 <__udivmoddi4+0x82>
   10386:	193c      	adds	r4, r7, r4
   10388:	d202      	bcs.n	10390 <__udivmoddi4+0x80>
   1038a:	45a1      	cmp	r9, r4
   1038c:	f200 810e 	bhi.w	105ac <__udivmoddi4+0x29c>
   10390:	3801      	subs	r0, #1
   10392:	eba4 0409 	sub.w	r4, r4, r9
   10396:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
   1039a:	2100      	movs	r1, #0
   1039c:	b11e      	cbz	r6, 103a6 <__udivmoddi4+0x96>
   1039e:	40d4      	lsrs	r4, r2
   103a0:	2300      	movs	r3, #0
   103a2:	e9c6 4300 	strd	r4, r3, [r6]
   103a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   103aa:	b902      	cbnz	r2, 103ae <__udivmoddi4+0x9e>
   103ac:	deff      	udf	#255	; 0xff
   103ae:	fab2 f282 	clz	r2, r2
   103b2:	2a00      	cmp	r2, #0
   103b4:	d14f      	bne.n	10456 <__udivmoddi4+0x146>
   103b6:	1bcb      	subs	r3, r1, r7
   103b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   103bc:	fa1f f887 	uxth.w	r8, r7
   103c0:	2101      	movs	r1, #1
   103c2:	0c25      	lsrs	r5, r4, #16
   103c4:	fbb3 fcfe 	udiv	ip, r3, lr
   103c8:	fb0e 301c 	mls	r0, lr, ip, r3
   103cc:	462b      	mov	r3, r5
   103ce:	fb08 f90c 	mul.w	r9, r8, ip
   103d2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   103d6:	45a9      	cmp	r9, r5
   103d8:	d90a      	bls.n	103f0 <__udivmoddi4+0xe0>
   103da:	197d      	adds	r5, r7, r5
   103dc:	bf2c      	ite	cs
   103de:	2301      	movcs	r3, #1
   103e0:	2300      	movcc	r3, #0
   103e2:	45a9      	cmp	r9, r5
   103e4:	d902      	bls.n	103ec <__udivmoddi4+0xdc>
   103e6:	2b00      	cmp	r3, #0
   103e8:	f000 80d9 	beq.w	1059e <__udivmoddi4+0x28e>
   103ec:	f10c 3cff 	add.w	ip, ip, #4294967295
   103f0:	eba5 0509 	sub.w	r5, r5, r9
   103f4:	b2a3      	uxth	r3, r4
   103f6:	fbb5 f0fe 	udiv	r0, r5, lr
   103fa:	fb0e 5510 	mls	r5, lr, r0, r5
   103fe:	fb08 f800 	mul.w	r8, r8, r0
   10402:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   10406:	45a0      	cmp	r8, r4
   10408:	d905      	bls.n	10416 <__udivmoddi4+0x106>
   1040a:	193c      	adds	r4, r7, r4
   1040c:	d202      	bcs.n	10414 <__udivmoddi4+0x104>
   1040e:	45a0      	cmp	r8, r4
   10410:	f200 80c9 	bhi.w	105a6 <__udivmoddi4+0x296>
   10414:	3801      	subs	r0, #1
   10416:	eba4 0408 	sub.w	r4, r4, r8
   1041a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1041e:	e7bd      	b.n	1039c <__udivmoddi4+0x8c>
   10420:	428b      	cmp	r3, r1
   10422:	d908      	bls.n	10436 <__udivmoddi4+0x126>
   10424:	2e00      	cmp	r6, #0
   10426:	f000 80b1 	beq.w	1058c <__udivmoddi4+0x27c>
   1042a:	2100      	movs	r1, #0
   1042c:	e9c6 0500 	strd	r0, r5, [r6]
   10430:	4608      	mov	r0, r1
   10432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10436:	fab3 f183 	clz	r1, r3
   1043a:	2900      	cmp	r1, #0
   1043c:	d146      	bne.n	104cc <__udivmoddi4+0x1bc>
   1043e:	42ab      	cmp	r3, r5
   10440:	f0c0 80a7 	bcc.w	10592 <__udivmoddi4+0x282>
   10444:	4282      	cmp	r2, r0
   10446:	f240 80a4 	bls.w	10592 <__udivmoddi4+0x282>
   1044a:	4608      	mov	r0, r1
   1044c:	2e00      	cmp	r6, #0
   1044e:	d0aa      	beq.n	103a6 <__udivmoddi4+0x96>
   10450:	e9c6 4a00 	strd	r4, sl, [r6]
   10454:	e7a7      	b.n	103a6 <__udivmoddi4+0x96>
   10456:	f1c2 0020 	rsb	r0, r2, #32
   1045a:	4097      	lsls	r7, r2
   1045c:	fa01 f302 	lsl.w	r3, r1, r2
   10460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   10464:	40c1      	lsrs	r1, r0
   10466:	fa24 f500 	lsr.w	r5, r4, r0
   1046a:	fa1f f887 	uxth.w	r8, r7
   1046e:	4094      	lsls	r4, r2
   10470:	431d      	orrs	r5, r3
   10472:	fbb1 f0fe 	udiv	r0, r1, lr
   10476:	0c2b      	lsrs	r3, r5, #16
   10478:	fb0e 1110 	mls	r1, lr, r0, r1
   1047c:	fb00 fc08 	mul.w	ip, r0, r8
   10480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   10484:	459c      	cmp	ip, r3
   10486:	d909      	bls.n	1049c <__udivmoddi4+0x18c>
   10488:	18fb      	adds	r3, r7, r3
   1048a:	bf2c      	ite	cs
   1048c:	2101      	movcs	r1, #1
   1048e:	2100      	movcc	r1, #0
   10490:	459c      	cmp	ip, r3
   10492:	d902      	bls.n	1049a <__udivmoddi4+0x18a>
   10494:	2900      	cmp	r1, #0
   10496:	f000 8095 	beq.w	105c4 <__udivmoddi4+0x2b4>
   1049a:	3801      	subs	r0, #1
   1049c:	eba3 030c 	sub.w	r3, r3, ip
   104a0:	b2ad      	uxth	r5, r5
   104a2:	fbb3 f1fe 	udiv	r1, r3, lr
   104a6:	fb0e 3311 	mls	r3, lr, r1, r3
   104aa:	fb01 fc08 	mul.w	ip, r1, r8
   104ae:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   104b2:	45ac      	cmp	ip, r5
   104b4:	d905      	bls.n	104c2 <__udivmoddi4+0x1b2>
   104b6:	197d      	adds	r5, r7, r5
   104b8:	d202      	bcs.n	104c0 <__udivmoddi4+0x1b0>
   104ba:	45ac      	cmp	ip, r5
   104bc:	f200 8089 	bhi.w	105d2 <__udivmoddi4+0x2c2>
   104c0:	3901      	subs	r1, #1
   104c2:	eba5 030c 	sub.w	r3, r5, ip
   104c6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   104ca:	e77a      	b.n	103c2 <__udivmoddi4+0xb2>
   104cc:	f1c1 0420 	rsb	r4, r1, #32
   104d0:	408b      	lsls	r3, r1
   104d2:	fa02 f701 	lsl.w	r7, r2, r1
   104d6:	fa05 fc01 	lsl.w	ip, r5, r1
   104da:	40e2      	lsrs	r2, r4
   104dc:	fa20 f804 	lsr.w	r8, r0, r4
   104e0:	40e5      	lsrs	r5, r4
   104e2:	fa00 fe01 	lsl.w	lr, r0, r1
   104e6:	4313      	orrs	r3, r2
   104e8:	ea48 020c 	orr.w	r2, r8, ip
   104ec:	ea4f 4813 	mov.w	r8, r3, lsr #16
   104f0:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   104f4:	fa1f f983 	uxth.w	r9, r3
   104f8:	fbb5 faf8 	udiv	sl, r5, r8
   104fc:	fb08 551a 	mls	r5, r8, sl, r5
   10500:	fb0a f009 	mul.w	r0, sl, r9
   10504:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
   10508:	4560      	cmp	r0, ip
   1050a:	d90a      	bls.n	10522 <__udivmoddi4+0x212>
   1050c:	eb13 0c0c 	adds.w	ip, r3, ip
   10510:	bf2c      	ite	cs
   10512:	2501      	movcs	r5, #1
   10514:	2500      	movcc	r5, #0
   10516:	4560      	cmp	r0, ip
   10518:	d901      	bls.n	1051e <__udivmoddi4+0x20e>
   1051a:	2d00      	cmp	r5, #0
   1051c:	d055      	beq.n	105ca <__udivmoddi4+0x2ba>
   1051e:	f10a 3aff 	add.w	sl, sl, #4294967295
   10522:	ebac 0c00 	sub.w	ip, ip, r0
   10526:	b292      	uxth	r2, r2
   10528:	fbbc f0f8 	udiv	r0, ip, r8
   1052c:	fb08 cc10 	mls	ip, r8, r0, ip
   10530:	fb00 f909 	mul.w	r9, r0, r9
   10534:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
   10538:	45e1      	cmp	r9, ip
   1053a:	d905      	bls.n	10548 <__udivmoddi4+0x238>
   1053c:	eb13 0c0c 	adds.w	ip, r3, ip
   10540:	d201      	bcs.n	10546 <__udivmoddi4+0x236>
   10542:	45e1      	cmp	r9, ip
   10544:	d83b      	bhi.n	105be <__udivmoddi4+0x2ae>
   10546:	3801      	subs	r0, #1
   10548:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
   1054c:	ebac 0c09 	sub.w	ip, ip, r9
   10550:	fba0 8907 	umull	r8, r9, r0, r7
   10554:	45cc      	cmp	ip, r9
   10556:	4645      	mov	r5, r8
   10558:	464a      	mov	r2, r9
   1055a:	d302      	bcc.n	10562 <__udivmoddi4+0x252>
   1055c:	d106      	bne.n	1056c <__udivmoddi4+0x25c>
   1055e:	45c6      	cmp	lr, r8
   10560:	d204      	bcs.n	1056c <__udivmoddi4+0x25c>
   10562:	3801      	subs	r0, #1
   10564:	ebb8 0507 	subs.w	r5, r8, r7
   10568:	eb69 0203 	sbc.w	r2, r9, r3
   1056c:	b32e      	cbz	r6, 105ba <__udivmoddi4+0x2aa>
   1056e:	ebbe 0305 	subs.w	r3, lr, r5
   10572:	eb6c 0c02 	sbc.w	ip, ip, r2
   10576:	fa23 f201 	lsr.w	r2, r3, r1
   1057a:	fa0c f404 	lsl.w	r4, ip, r4
   1057e:	fa2c f301 	lsr.w	r3, ip, r1
   10582:	2100      	movs	r1, #0
   10584:	4314      	orrs	r4, r2
   10586:	e9c6 4300 	strd	r4, r3, [r6]
   1058a:	e70c      	b.n	103a6 <__udivmoddi4+0x96>
   1058c:	4631      	mov	r1, r6
   1058e:	4630      	mov	r0, r6
   10590:	e709      	b.n	103a6 <__udivmoddi4+0x96>
   10592:	1a84      	subs	r4, r0, r2
   10594:	eb65 0303 	sbc.w	r3, r5, r3
   10598:	2001      	movs	r0, #1
   1059a:	469a      	mov	sl, r3
   1059c:	e756      	b.n	1044c <__udivmoddi4+0x13c>
   1059e:	f1ac 0c02 	sub.w	ip, ip, #2
   105a2:	443d      	add	r5, r7
   105a4:	e724      	b.n	103f0 <__udivmoddi4+0xe0>
   105a6:	3802      	subs	r0, #2
   105a8:	443c      	add	r4, r7
   105aa:	e734      	b.n	10416 <__udivmoddi4+0x106>
   105ac:	3802      	subs	r0, #2
   105ae:	443c      	add	r4, r7
   105b0:	e6ef      	b.n	10392 <__udivmoddi4+0x82>
   105b2:	f1ae 0e02 	sub.w	lr, lr, #2
   105b6:	443b      	add	r3, r7
   105b8:	e6d9      	b.n	1036e <__udivmoddi4+0x5e>
   105ba:	4631      	mov	r1, r6
   105bc:	e6f3      	b.n	103a6 <__udivmoddi4+0x96>
   105be:	3802      	subs	r0, #2
   105c0:	449c      	add	ip, r3
   105c2:	e7c1      	b.n	10548 <__udivmoddi4+0x238>
   105c4:	3802      	subs	r0, #2
   105c6:	443b      	add	r3, r7
   105c8:	e768      	b.n	1049c <__udivmoddi4+0x18c>
   105ca:	f1aa 0a02 	sub.w	sl, sl, #2
   105ce:	449c      	add	ip, r3
   105d0:	e7a7      	b.n	10522 <__udivmoddi4+0x212>
   105d2:	3902      	subs	r1, #2
   105d4:	443d      	add	r5, r7
   105d6:	e774      	b.n	104c2 <__udivmoddi4+0x1b2>

000105d8 <__aeabi_idiv0>:
   105d8:	4770      	bx	lr
   105da:	bf00      	nop

000105dc <sha256_init>:
   105dc:	4b12      	ldr	r3, [pc, #72]	; (10628 <sha256_init+0x4c>)
   105de:	6003      	str	r3, [r0, #0]
   105e0:	4b12      	ldr	r3, [pc, #72]	; (1062c <sha256_init+0x50>)
   105e2:	6043      	str	r3, [r0, #4]
   105e4:	4b12      	ldr	r3, [pc, #72]	; (10630 <sha256_init+0x54>)
   105e6:	6083      	str	r3, [r0, #8]
   105e8:	4b12      	ldr	r3, [pc, #72]	; (10634 <sha256_init+0x58>)
   105ea:	60c3      	str	r3, [r0, #12]
   105ec:	4b12      	ldr	r3, [pc, #72]	; (10638 <sha256_init+0x5c>)
   105ee:	6103      	str	r3, [r0, #16]
   105f0:	4b12      	ldr	r3, [pc, #72]	; (1063c <sha256_init+0x60>)
   105f2:	6143      	str	r3, [r0, #20]
   105f4:	4b12      	ldr	r3, [pc, #72]	; (10640 <sha256_init+0x64>)
   105f6:	6183      	str	r3, [r0, #24]
   105f8:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   105fc:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   10600:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   10604:	61c3      	str	r3, [r0, #28]
   10606:	2200      	movs	r2, #0
   10608:	2300      	movs	r3, #0
   1060a:	e9c0 2308 	strd	r2, r3, [r0, #32]
   1060e:	f100 0c28 	add.w	ip, r0, #40	; 0x28
   10612:	4663      	mov	r3, ip
   10614:	f100 0168 	add.w	r1, r0, #104	; 0x68
   10618:	f843 2b04 	str.w	r2, [r3], #4
   1061c:	428b      	cmp	r3, r1
   1061e:	d1fb      	bne.n	10618 <sha256_init+0x3c>
   10620:	2300      	movs	r3, #0
   10622:	6683      	str	r3, [r0, #104]	; 0x68
   10624:	4770      	bx	lr
   10626:	bf00      	nop
   10628:	6a09e667 	.word	0x6a09e667
   1062c:	bb67ae85 	.word	0xbb67ae85
   10630:	3c6ef372 	.word	0x3c6ef372
   10634:	a54ff53a 	.word	0xa54ff53a
   10638:	510e527f 	.word	0x510e527f
   1063c:	9b05688c 	.word	0x9b05688c
   10640:	1f83d9ab 	.word	0x1f83d9ab

00010644 <get_wval>:
   10644:	3a01      	subs	r2, #1
   10646:	440a      	add	r2, r1
   10648:	08d2      	lsrs	r2, r2, #3
   1064a:	5c83      	ldrb	r3, [r0, r2]
   1064c:	08ca      	lsrs	r2, r1, #3
   1064e:	5c80      	ldrb	r0, [r0, r2]
   10650:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   10654:	f001 0107 	and.w	r1, r1, #7
   10658:	40c8      	lsrs	r0, r1
   1065a:	4770      	bx	lr

0001065c <booth_encode>:
   1065c:	fa20 f101 	lsr.w	r1, r0, r1
   10660:	3001      	adds	r0, #1
   10662:	0843      	lsrs	r3, r0, #1
   10664:	1e4a      	subs	r2, r1, #1
   10666:	ea02 0050 	and.w	r0, r2, r0, lsr #1
   1066a:	425b      	negs	r3, r3
   1066c:	4249      	negs	r1, r1
   1066e:	4019      	ands	r1, r3
   10670:	4308      	orrs	r0, r1
   10672:	4770      	bx	lr

00010674 <sub_mod_n>:
   10674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10678:	9f07      	ldr	r7, [sp, #28]
   1067a:	b397      	cbz	r7, 106e2 <sub_mod_n+0x6e>
   1067c:	4699      	mov	r9, r3
   1067e:	f1a1 0e04 	sub.w	lr, r1, #4
   10682:	1f14      	subs	r4, r2, #4
   10684:	f1a0 0c04 	sub.w	ip, r0, #4
   10688:	ea4f 0887 	mov.w	r8, r7, lsl #2
   1068c:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   10690:	4666      	mov	r6, ip
   10692:	2100      	movs	r1, #0
   10694:	460d      	mov	r5, r1
   10696:	f85e 2f04 	ldr.w	r2, [lr, #4]!
   1069a:	1a52      	subs	r2, r2, r1
   1069c:	eb65 0105 	sbc.w	r1, r5, r5
   106a0:	f854 3f04 	ldr.w	r3, [r4, #4]!
   106a4:	1ad2      	subs	r2, r2, r3
   106a6:	f161 0100 	sbc.w	r1, r1, #0
   106aa:	f846 2f04 	str.w	r2, [r6, #4]!
   106ae:	f001 0101 	and.w	r1, r1, #1
   106b2:	45be      	cmp	lr, r7
   106b4:	d1ef      	bne.n	10696 <sub_mod_n+0x22>
   106b6:	424a      	negs	r2, r1
   106b8:	f1a9 0604 	sub.w	r6, r9, #4
   106bc:	3804      	subs	r0, #4
   106be:	4480      	add	r8, r0
   106c0:	2400      	movs	r4, #0
   106c2:	4625      	mov	r5, r4
   106c4:	f856 3f04 	ldr.w	r3, [r6, #4]!
   106c8:	4013      	ands	r3, r2
   106ca:	f85c 1f04 	ldr.w	r1, [ip, #4]!
   106ce:	1909      	adds	r1, r1, r4
   106d0:	eb45 0405 	adc.w	r4, r5, r5
   106d4:	185b      	adds	r3, r3, r1
   106d6:	f8cc 3000 	str.w	r3, [ip]
   106da:	f144 0400 	adc.w	r4, r4, #0
   106de:	45c4      	cmp	ip, r8
   106e0:	d1f0      	bne.n	106c4 <sub_mod_n+0x50>
   106e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000106e6 <check_mod_n>:
   106e6:	b5f0      	push	{r4, r5, r6, r7, lr}
   106e8:	4604      	mov	r4, r0
   106ea:	4610      	mov	r0, r2
   106ec:	b302      	cbz	r2, 10730 <check_mod_n+0x4a>
   106ee:	f1a1 0e04 	sub.w	lr, r1, #4
   106f2:	eb0e 0782 	add.w	r7, lr, r2, lsl #2
   106f6:	2000      	movs	r0, #0
   106f8:	4605      	mov	r5, r0
   106fa:	4606      	mov	r6, r0
   106fc:	e00d      	b.n	1071a <check_mod_n+0x34>
   106fe:	3404      	adds	r4, #4
   10700:	430d      	orrs	r5, r1
   10702:	f85e 3f04 	ldr.w	r3, [lr, #4]!
   10706:	181b      	adds	r3, r3, r0
   10708:	eb46 0006 	adc.w	r0, r6, r6
   1070c:	1ac9      	subs	r1, r1, r3
   1070e:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   10712:	f000 0001 	and.w	r0, r0, #1
   10716:	45be      	cmp	lr, r7
   10718:	d00b      	beq.n	10732 <check_mod_n+0x4c>
   1071a:	46a4      	mov	ip, r4
   1071c:	2300      	movs	r3, #0
   1071e:	4619      	mov	r1, r3
   10720:	f81c 2b01 	ldrb.w	r2, [ip], #1
   10724:	409a      	lsls	r2, r3
   10726:	4311      	orrs	r1, r2
   10728:	3308      	adds	r3, #8
   1072a:	2b20      	cmp	r3, #32
   1072c:	d1f8      	bne.n	10720 <check_mod_n+0x3a>
   1072e:	e7e6      	b.n	106fe <check_mod_n+0x18>
   10730:	4615      	mov	r5, r2
   10732:	1e6b      	subs	r3, r5, #1
   10734:	ea23 0505 	bic.w	r5, r3, r5
   10738:	2d00      	cmp	r5, #0
   1073a:	bfb4      	ite	lt
   1073c:	2000      	movlt	r0, #0
   1073e:	f000 0001 	andge.w	r0, r0, #1
   10742:	bdf0      	pop	{r4, r5, r6, r7, pc}

00010744 <rshift_mod_n>:
   10744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10748:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   1074c:	2a00      	cmp	r2, #0
   1074e:	d049      	beq.n	107e4 <rshift_mod_n+0xa0>
   10750:	4606      	mov	r6, r0
   10752:	460c      	mov	r4, r1
   10754:	4699      	mov	r9, r3
   10756:	1e57      	subs	r7, r2, #1
   10758:	ea4f 0a88 	mov.w	sl, r8, lsl #2
   1075c:	f1aa 0a04 	sub.w	sl, sl, #4
   10760:	f04f 0e00 	mov.w	lr, #0
   10764:	e01c      	b.n	107a0 <rshift_mod_n+0x5c>
   10766:	6832      	ldr	r2, [r6, #0]
   10768:	46c3      	mov	fp, r8
   1076a:	f04f 34ff 	mov.w	r4, #4294967295
   1076e:	4630      	mov	r0, r6
   10770:	2100      	movs	r1, #0
   10772:	0853      	lsrs	r3, r2, #1
   10774:	3101      	adds	r1, #1
   10776:	6842      	ldr	r2, [r0, #4]
   10778:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   1077c:	f840 3b04 	str.w	r3, [r0], #4
   10780:	42a1      	cmp	r1, r4
   10782:	d3f6      	bcc.n	10772 <rshift_mod_n+0x2e>
   10784:	2c00      	cmp	r4, #0
   10786:	bf08      	it	eq
   10788:	2401      	moveq	r4, #1
   1078a:	ea4f 7bcb 	mov.w	fp, fp, lsl #31
   1078e:	ea4b 0252 	orr.w	r2, fp, r2, lsr #1
   10792:	f846 2024 	str.w	r2, [r6, r4, lsl #2]
   10796:	3f01      	subs	r7, #1
   10798:	f1b7 3fff 	cmp.w	r7, #4294967295
   1079c:	d022      	beq.n	107e4 <rshift_mod_n+0xa0>
   1079e:	4634      	mov	r4, r6
   107a0:	6825      	ldr	r5, [r4, #0]
   107a2:	f345 0500 	sbfx	r5, r5, #0, #1
   107a6:	f1b8 0f00 	cmp.w	r8, #0
   107aa:	d0dc      	beq.n	10766 <rshift_mod_n+0x22>
   107ac:	f1a4 0c04 	sub.w	ip, r4, #4
   107b0:	f1a9 0004 	sub.w	r0, r9, #4
   107b4:	1f33      	subs	r3, r6, #4
   107b6:	4454      	add	r4, sl
   107b8:	46f3      	mov	fp, lr
   107ba:	f850 2f04 	ldr.w	r2, [r0, #4]!
   107be:	402a      	ands	r2, r5
   107c0:	f85c 1f04 	ldr.w	r1, [ip, #4]!
   107c4:	eb11 010b 	adds.w	r1, r1, fp
   107c8:	eb4e 0b0e 	adc.w	fp, lr, lr
   107cc:	1851      	adds	r1, r2, r1
   107ce:	f843 1f04 	str.w	r1, [r3, #4]!
   107d2:	f14b 0b00 	adc.w	fp, fp, #0
   107d6:	45a4      	cmp	ip, r4
   107d8:	d1ef      	bne.n	107ba <rshift_mod_n+0x76>
   107da:	6832      	ldr	r2, [r6, #0]
   107dc:	f1b8 0401 	subs.w	r4, r8, #1
   107e0:	d1c5      	bne.n	1076e <rshift_mod_n+0x2a>
   107e2:	e7d2      	b.n	1078a <rshift_mod_n+0x46>
   107e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000107e8 <inner_loop_n>:
   107e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   107ec:	b083      	sub	sp, #12
   107ee:	9001      	str	r0, [sp, #4]
   107f0:	6808      	ldr	r0, [r1, #0]
   107f2:	684e      	ldr	r6, [r1, #4]
   107f4:	f8d2 8000 	ldr.w	r8, [r2]
   107f8:	f8d2 9004 	ldr.w	r9, [r2, #4]
   107fc:	1e5a      	subs	r2, r3, #1
   107fe:	9200      	str	r2, [sp, #0]
   10800:	2b00      	cmp	r3, #0
   10802:	d056      	beq.n	108b2 <inner_loop_n+0xca>
   10804:	2401      	movs	r4, #1
   10806:	2500      	movs	r5, #0
   10808:	462b      	mov	r3, r5
   1080a:	4627      	mov	r7, r4
   1080c:	46aa      	mov	sl, r5
   1080e:	f340 0e00 	sbfx	lr, r0, #0, #1
   10812:	ea0e 0108 	and.w	r1, lr, r8
   10816:	1a42      	subs	r2, r0, r1
   10818:	1a41      	subs	r1, r0, r1
   1081a:	eb6a 010a 	sbc.w	r1, sl, sl
   1081e:	f001 0b01 	and.w	fp, r1, #1
   10822:	ea0e 0109 	and.w	r1, lr, r9
   10826:	1a71      	subs	r1, r6, r1
   10828:	eb6a 0c0a 	sbc.w	ip, sl, sl
   1082c:	ebb1 010b 	subs.w	r1, r1, fp
   10830:	f16c 0c00 	sbc.w	ip, ip, #0
   10834:	ea81 010c 	eor.w	r1, r1, ip
   10838:	ea82 020c 	eor.w	r2, r2, ip
   1083c:	f00c 0b01 	and.w	fp, ip, #1
   10840:	eb12 020b 	adds.w	r2, r2, fp
   10844:	f141 0100 	adc.w	r1, r1, #0
   10848:	ea80 0008 	eor.w	r0, r0, r8
   1084c:	ea00 000c 	and.w	r0, r0, ip
   10850:	ea88 0800 	eor.w	r8, r8, r0
   10854:	ea86 0609 	eor.w	r6, r6, r9
   10858:	ea06 060c 	and.w	r6, r6, ip
   1085c:	ea89 0906 	eor.w	r9, r9, r6
   10860:	ea87 0005 	eor.w	r0, r7, r5
   10864:	ea00 000c 	and.w	r0, r0, ip
   10868:	4047      	eors	r7, r0
   1086a:	4045      	eors	r5, r0
   1086c:	ea83 0004 	eor.w	r0, r3, r4
   10870:	ea00 0c0c 	and.w	ip, r0, ip
   10874:	ea8c 0303 	eor.w	r3, ip, r3
   10878:	ea8c 0404 	eor.w	r4, ip, r4
   1087c:	ea0e 0005 	and.w	r0, lr, r5
   10880:	1a3f      	subs	r7, r7, r0
   10882:	ea0e 0e04 	and.w	lr, lr, r4
   10886:	eba3 030e 	sub.w	r3, r3, lr
   1088a:	006d      	lsls	r5, r5, #1
   1088c:	0064      	lsls	r4, r4, #1
   1088e:	07c8      	lsls	r0, r1, #31
   10890:	ea40 0052 	orr.w	r0, r0, r2, lsr #1
   10894:	084e      	lsrs	r6, r1, #1
   10896:	9a00      	ldr	r2, [sp, #0]
   10898:	3a01      	subs	r2, #1
   1089a:	9200      	str	r2, [sp, #0]
   1089c:	f1b2 3fff 	cmp.w	r2, #4294967295
   108a0:	d1b5      	bne.n	1080e <inner_loop_n+0x26>
   108a2:	9a01      	ldr	r2, [sp, #4]
   108a4:	6017      	str	r7, [r2, #0]
   108a6:	6053      	str	r3, [r2, #4]
   108a8:	6095      	str	r5, [r2, #8]
   108aa:	60d4      	str	r4, [r2, #12]
   108ac:	b003      	add	sp, #12
   108ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   108b2:	461d      	mov	r5, r3
   108b4:	2401      	movs	r4, #1
   108b6:	4627      	mov	r7, r4
   108b8:	e7f3      	b.n	108a2 <inner_loop_n+0xba>

000108ba <cneg_n>:
   108ba:	b1bb      	cbz	r3, 108ec <cneg_n+0x32>
   108bc:	b530      	push	{r4, r5, lr}
   108be:	f002 0c01 	and.w	ip, r2, #1
   108c2:	3904      	subs	r1, #4
   108c4:	3804      	subs	r0, #4
   108c6:	eb01 0583 	add.w	r5, r1, r3, lsl #2
   108ca:	f04f 0e00 	mov.w	lr, #0
   108ce:	f851 3f04 	ldr.w	r3, [r1, #4]!
   108d2:	4053      	eors	r3, r2
   108d4:	eb03 040c 	add.w	r4, r3, ip
   108d8:	f840 4f04 	str.w	r4, [r0, #4]!
   108dc:	eb13 030c 	adds.w	r3, r3, ip
   108e0:	eb4e 030e 	adc.w	r3, lr, lr
   108e4:	469c      	mov	ip, r3
   108e6:	42a9      	cmp	r1, r5
   108e8:	d1f1      	bne.n	108ce <cneg_n+0x14>
   108ea:	bd30      	pop	{r4, r5, pc}
   108ec:	4770      	bx	lr

000108ee <umul_n>:
   108ee:	b193      	cbz	r3, 10916 <umul_n+0x28>
   108f0:	b510      	push	{r4, lr}
   108f2:	3904      	subs	r1, #4
   108f4:	f1a0 0e04 	sub.w	lr, r0, #4
   108f8:	eb01 0483 	add.w	r4, r1, r3, lsl #2
   108fc:	2000      	movs	r0, #0
   108fe:	f851 3f04 	ldr.w	r3, [r1, #4]!
   10902:	fba3 3c02 	umull	r3, ip, r3, r2
   10906:	181b      	adds	r3, r3, r0
   10908:	f84e 3f04 	str.w	r3, [lr, #4]!
   1090c:	f14c 0000 	adc.w	r0, ip, #0
   10910:	42a1      	cmp	r1, r4
   10912:	d1f4      	bne.n	108fe <umul_n+0x10>
   10914:	bd10      	pop	{r4, pc}
   10916:	4618      	mov	r0, r3
   10918:	4770      	bx	lr

0001091a <nibble>:
   1091a:	4603      	mov	r3, r0
   1091c:	3830      	subs	r0, #48	; 0x30
   1091e:	b2c0      	uxtb	r0, r0
   10920:	2809      	cmp	r0, #9
   10922:	d910      	bls.n	10946 <nibble+0x2c>
   10924:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   10928:	b2d2      	uxtb	r2, r2
   1092a:	2a05      	cmp	r2, #5
   1092c:	d907      	bls.n	1093e <nibble+0x24>
   1092e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   10932:	b2d2      	uxtb	r2, r2
   10934:	2a05      	cmp	r2, #5
   10936:	d805      	bhi.n	10944 <nibble+0x2a>
   10938:	3b37      	subs	r3, #55	; 0x37
   1093a:	b2d8      	uxtb	r0, r3
   1093c:	4770      	bx	lr
   1093e:	3b57      	subs	r3, #87	; 0x57
   10940:	b2d8      	uxtb	r0, r3
   10942:	4770      	bx	lr
   10944:	2010      	movs	r0, #16
   10946:	4770      	bx	lr

00010948 <limbs_from_hexascii>:
   10948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1094c:	4607      	mov	r7, r0
   1094e:	4689      	mov	r9, r1
   10950:	4616      	mov	r6, r2
   10952:	7813      	ldrb	r3, [r2, #0]
   10954:	2b30      	cmp	r3, #48	; 0x30
   10956:	d00e      	beq.n	10976 <limbs_from_hexascii+0x2e>
   10958:	ea5f 0849 	movs.w	r8, r9, lsl #1
   1095c:	d013      	beq.n	10986 <limbs_from_hexascii+0x3e>
   1095e:	1e75      	subs	r5, r6, #1
   10960:	2400      	movs	r4, #0
   10962:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   10966:	f7ff ffd8 	bl	1091a <nibble>
   1096a:	280f      	cmp	r0, #15
   1096c:	d80a      	bhi.n	10984 <limbs_from_hexascii+0x3c>
   1096e:	3401      	adds	r4, #1
   10970:	4544      	cmp	r4, r8
   10972:	d1f6      	bne.n	10962 <limbs_from_hexascii+0x1a>
   10974:	e007      	b.n	10986 <limbs_from_hexascii+0x3e>
   10976:	7853      	ldrb	r3, [r2, #1]
   10978:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1097c:	2b58      	cmp	r3, #88	; 0x58
   1097e:	bf08      	it	eq
   10980:	3602      	addeq	r6, #2
   10982:	e7e9      	b.n	10958 <limbs_from_hexascii+0x10>
   10984:	46a0      	mov	r8, r4
   10986:	ea4f 0099 	mov.w	r0, r9, lsr #2
   1098a:	f1b9 0f03 	cmp.w	r9, #3
   1098e:	d907      	bls.n	109a0 <limbs_from_hexascii+0x58>
   10990:	463a      	mov	r2, r7
   10992:	2300      	movs	r3, #0
   10994:	4619      	mov	r1, r3
   10996:	f842 1b04 	str.w	r1, [r2], #4
   1099a:	3301      	adds	r3, #1
   1099c:	4298      	cmp	r0, r3
   1099e:	d8fa      	bhi.n	10996 <limbs_from_hexascii+0x4e>
   109a0:	f108 34ff 	add.w	r4, r8, #4294967295
   109a4:	f1b8 0f00 	cmp.w	r8, #0
   109a8:	d010      	beq.n	109cc <limbs_from_hexascii+0x84>
   109aa:	2500      	movs	r5, #0
   109ac:	012d      	lsls	r5, r5, #4
   109ae:	f816 0b01 	ldrb.w	r0, [r6], #1
   109b2:	f7ff ffb2 	bl	1091a <nibble>
   109b6:	4305      	orrs	r5, r0
   109b8:	f014 0f07 	tst.w	r4, #7
   109bc:	bf04      	itt	eq
   109be:	08e3      	lsreq	r3, r4, #3
   109c0:	f847 5023 	streq.w	r5, [r7, r3, lsl #2]
   109c4:	3c01      	subs	r4, #1
   109c6:	f1b4 3fff 	cmp.w	r4, #4294967295
   109ca:	d1ef      	bne.n	109ac <limbs_from_hexascii+0x64>
   109cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000109d0 <mul_mont_n>:
   109d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   109d4:	b087      	sub	sp, #28
   109d6:	af00      	add	r7, sp, #0
   109d8:	6038      	str	r0, [r7, #0]
   109da:	60b9      	str	r1, [r7, #8]
   109dc:	617b      	str	r3, [r7, #20]
   109de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   109e0:	3301      	adds	r3, #1
   109e2:	0098      	lsls	r0, r3, #2
   109e4:	6078      	str	r0, [r7, #4]
   109e6:	1dc3      	adds	r3, r0, #7
   109e8:	f023 0307 	bic.w	r3, r3, #7
   109ec:	ebad 0d03 	sub.w	sp, sp, r3
   109f0:	46e8      	mov	r8, sp
   109f2:	6815      	ldr	r5, [r2, #0]
   109f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   109f6:	b363      	cbz	r3, 10a52 <mul_mont_n+0x82>
   109f8:	1f0c      	subs	r4, r1, #4
   109fa:	f1a8 0604 	sub.w	r6, r8, #4
   109fe:	f1a0 0c04 	sub.w	ip, r0, #4
   10a02:	44a4      	add	ip, r4
   10a04:	2100      	movs	r1, #0
   10a06:	f854 3f04 	ldr.w	r3, [r4, #4]!
   10a0a:	fba3 3005 	umull	r3, r0, r3, r5
   10a0e:	185b      	adds	r3, r3, r1
   10a10:	f846 3f04 	str.w	r3, [r6, #4]!
   10a14:	f140 0100 	adc.w	r1, r0, #0
   10a18:	4564      	cmp	r4, ip
   10a1a:	d1f4      	bne.n	10a06 <mul_mont_n+0x36>
   10a1c:	6c78      	ldr	r0, [r7, #68]	; 0x44
   10a1e:	f8d8 3000 	ldr.w	r3, [r8]
   10a22:	6c3c      	ldr	r4, [r7, #64]	; 0x40
   10a24:	fb04 f303 	mul.w	r3, r4, r3
   10a28:	f848 1020 	str.w	r1, [r8, r0, lsl #2]
   10a2c:	697d      	ldr	r5, [r7, #20]
   10a2e:	f855 1904 	ldr.w	r1, [r5], #-4
   10a32:	60f9      	str	r1, [r7, #12]
   10a34:	4691      	mov	r9, r2
   10a36:	6879      	ldr	r1, [r7, #4]
   10a38:	1f0e      	subs	r6, r1, #4
   10a3a:	3a04      	subs	r2, #4
   10a3c:	4631      	mov	r1, r6
   10a3e:	4432      	add	r2, r6
   10a40:	613a      	str	r2, [r7, #16]
   10a42:	4435      	add	r5, r6
   10a44:	68ba      	ldr	r2, [r7, #8]
   10a46:	1f16      	subs	r6, r2, #4
   10a48:	440e      	add	r6, r1
   10a4a:	f04f 0c00 	mov.w	ip, #0
   10a4e:	4664      	mov	r4, ip
   10a50:	e056      	b.n	10b00 <mul_mont_n+0x130>
   10a52:	6c78      	ldr	r0, [r7, #68]	; 0x44
   10a54:	4601      	mov	r1, r0
   10a56:	e7e2      	b.n	10a1e <mul_mont_n+0x4e>
   10a58:	2301      	movs	r3, #1
   10a5a:	e072      	b.n	10b42 <mul_mont_n+0x172>
   10a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10a5e:	b37b      	cbz	r3, 10ac0 <mul_mont_n+0xf0>
   10a60:	f1a8 0404 	sub.w	r4, r8, #4
   10a64:	697b      	ldr	r3, [r7, #20]
   10a66:	f1a3 0c04 	sub.w	ip, r3, #4
   10a6a:	683b      	ldr	r3, [r7, #0]
   10a6c:	1f19      	subs	r1, r3, #4
   10a6e:	687b      	ldr	r3, [r7, #4]
   10a70:	3b08      	subs	r3, #8
   10a72:	4498      	add	r8, r3
   10a74:	460e      	mov	r6, r1
   10a76:	4620      	mov	r0, r4
   10a78:	2300      	movs	r3, #0
   10a7a:	461d      	mov	r5, r3
   10a7c:	f850 2f04 	ldr.w	r2, [r0, #4]!
   10a80:	1ad3      	subs	r3, r2, r3
   10a82:	eb65 0205 	sbc.w	r2, r5, r5
   10a86:	f85c 9f04 	ldr.w	r9, [ip, #4]!
   10a8a:	ebb3 0309 	subs.w	r3, r3, r9
   10a8e:	f162 0200 	sbc.w	r2, r2, #0
   10a92:	f846 3f04 	str.w	r3, [r6, #4]!
   10a96:	f002 0301 	and.w	r3, r2, #1
   10a9a:	4540      	cmp	r0, r8
   10a9c:	d1ee      	bne.n	10a7c <mul_mont_n+0xac>
   10a9e:	ebae 0e03 	sub.w	lr, lr, r3
   10aa2:	6838      	ldr	r0, [r7, #0]
   10aa4:	687b      	ldr	r3, [r7, #4]
   10aa6:	4418      	add	r0, r3
   10aa8:	3808      	subs	r0, #8
   10aaa:	f851 2f04 	ldr.w	r2, [r1, #4]!
   10aae:	f854 3f04 	ldr.w	r3, [r4, #4]!
   10ab2:	4053      	eors	r3, r2
   10ab4:	ea03 030e 	and.w	r3, r3, lr
   10ab8:	4053      	eors	r3, r2
   10aba:	600b      	str	r3, [r1, #0]
   10abc:	4281      	cmp	r1, r0
   10abe:	d1f4      	bne.n	10aaa <mul_mont_n+0xda>
   10ac0:	371c      	adds	r7, #28
   10ac2:	46bd      	mov	sp, r7
   10ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ac8:	f85e 1f04 	ldr.w	r1, [lr, #4]!
   10acc:	fba1 100b 	umull	r1, r0, r1, fp
   10ad0:	f85c 3f04 	ldr.w	r3, [ip, #4]!
   10ad4:	189b      	adds	r3, r3, r2
   10ad6:	eb44 0204 	adc.w	r2, r4, r4
   10ada:	18cb      	adds	r3, r1, r3
   10adc:	f8cc 3000 	str.w	r3, [ip]
   10ae0:	eb40 0202 	adc.w	r2, r0, r2
   10ae4:	45b6      	cmp	lr, r6
   10ae6:	d1ef      	bne.n	10ac8 <mul_mont_n+0xf8>
   10ae8:	6c79      	ldr	r1, [r7, #68]	; 0x44
   10aea:	f8d8 3000 	ldr.w	r3, [r8]
   10aee:	6c38      	ldr	r0, [r7, #64]	; 0x40
   10af0:	fb00 f303 	mul.w	r3, r0, r3
   10af4:	eb12 020a 	adds.w	r2, r2, sl
   10af8:	f144 0c00 	adc.w	ip, r4, #0
   10afc:	f848 2021 	str.w	r2, [r8, r1, lsl #2]
   10b00:	68fa      	ldr	r2, [r7, #12]
   10b02:	fba3 e102 	umull	lr, r1, r3, r2
   10b06:	f8d8 0000 	ldr.w	r0, [r8]
   10b0a:	eb1e 0000 	adds.w	r0, lr, r0
   10b0e:	f141 0200 	adc.w	r2, r1, #0
   10b12:	6c79      	ldr	r1, [r7, #68]	; 0x44
   10b14:	2901      	cmp	r1, #1
   10b16:	d99f      	bls.n	10a58 <mul_mont_n+0x88>
   10b18:	46c6      	mov	lr, r8
   10b1a:	6978      	ldr	r0, [r7, #20]
   10b1c:	46b3      	mov	fp, r6
   10b1e:	f850 1f04 	ldr.w	r1, [r0, #4]!
   10b22:	fba1 1a03 	umull	r1, sl, r1, r3
   10b26:	188a      	adds	r2, r1, r2
   10b28:	f14a 0100 	adc.w	r1, sl, #0
   10b2c:	f8de 6004 	ldr.w	r6, [lr, #4]
   10b30:	1992      	adds	r2, r2, r6
   10b32:	f84e 2b04 	str.w	r2, [lr], #4
   10b36:	f141 0200 	adc.w	r2, r1, #0
   10b3a:	42a8      	cmp	r0, r5
   10b3c:	d1ef      	bne.n	10b1e <mul_mont_n+0x14e>
   10b3e:	465e      	mov	r6, fp
   10b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10b42:	eb08 0083 	add.w	r0, r8, r3, lsl #2
   10b46:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   10b4a:	eb12 010c 	adds.w	r1, r2, ip
   10b4e:	eb44 0e04 	adc.w	lr, r4, r4
   10b52:	1859      	adds	r1, r3, r1
   10b54:	f14e 0e00 	adc.w	lr, lr, #0
   10b58:	f840 1c04 	str.w	r1, [r0, #-4]
   10b5c:	46f2      	mov	sl, lr
   10b5e:	693b      	ldr	r3, [r7, #16]
   10b60:	4599      	cmp	r9, r3
   10b62:	f43f af7b 	beq.w	10a5c <mul_mont_n+0x8c>
   10b66:	f859 bf04 	ldr.w	fp, [r9, #4]!
   10b6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10b6c:	b133      	cbz	r3, 10b7c <mul_mont_n+0x1ac>
   10b6e:	68bb      	ldr	r3, [r7, #8]
   10b70:	f1a3 0e04 	sub.w	lr, r3, #4
   10b74:	f1a8 0c04 	sub.w	ip, r8, #4
   10b78:	4622      	mov	r2, r4
   10b7a:	e7a5      	b.n	10ac8 <mul_mont_n+0xf8>
   10b7c:	6c79      	ldr	r1, [r7, #68]	; 0x44
   10b7e:	460a      	mov	r2, r1
   10b80:	e7b3      	b.n	10aea <mul_mont_n+0x11a>

00010b82 <sigma>:
   10b82:	b510      	push	{r4, lr}
   10b84:	b082      	sub	sp, #8
   10b86:	1f0b      	subs	r3, r1, #4
   10b88:	1f02      	subs	r2, r0, #4
   10b8a:	f101 0c5c 	add.w	ip, r1, #92	; 0x5c
   10b8e:	f853 4f04 	ldr.w	r4, [r3, #4]!
   10b92:	f842 4f04 	str.w	r4, [r2, #4]!
   10b96:	4563      	cmp	r3, ip
   10b98:	d1f9      	bne.n	10b8e <sigma+0xc>
   10b9a:	4b06      	ldr	r3, [pc, #24]	; (10bb4 <sigma+0x32>)
   10b9c:	220c      	movs	r2, #12
   10b9e:	9201      	str	r2, [sp, #4]
   10ba0:	4a05      	ldr	r2, [pc, #20]	; (10bb8 <sigma+0x36>)
   10ba2:	9200      	str	r2, [sp, #0]
   10ba4:	f103 0230 	add.w	r2, r3, #48	; 0x30
   10ba8:	3160      	adds	r1, #96	; 0x60
   10baa:	3060      	adds	r0, #96	; 0x60
   10bac:	f7ff ff10 	bl	109d0 <mul_mont_n>
   10bb0:	b002      	add	sp, #8
   10bb2:	bd10      	pop	{r4, pc}
   10bb4:	00028738 	.word	0x00028738
   10bb8:	fffcfffd 	.word	0xfffcfffd

00010bbc <map_fp_times_Zz>:
   10bbc:	b323      	cbz	r3, 10c08 <map_fp_times_Zz+0x4c>
   10bbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10bc2:	b082      	sub	sp, #8
   10bc4:	1e5f      	subs	r7, r3, #1
   10bc6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   10bca:	011c      	lsls	r4, r3, #4
   10bcc:	3c30      	subs	r4, #48	; 0x30
   10bce:	1906      	adds	r6, r0, r4
   10bd0:	190d      	adds	r5, r1, r4
   10bd2:	4414      	add	r4, r2
   10bd4:	f8df a034 	ldr.w	sl, [pc, #52]	; 10c0c <map_fp_times_Zz+0x50>
   10bd8:	f04f 090c 	mov.w	r9, #12
   10bdc:	f8df 8030 	ldr.w	r8, [pc, #48]	; 10c10 <map_fp_times_Zz+0x54>
   10be0:	f8cd 9004 	str.w	r9, [sp, #4]
   10be4:	f8cd 8000 	str.w	r8, [sp]
   10be8:	4653      	mov	r3, sl
   10bea:	4622      	mov	r2, r4
   10bec:	4629      	mov	r1, r5
   10bee:	4630      	mov	r0, r6
   10bf0:	f7ff feee 	bl	109d0 <mul_mont_n>
   10bf4:	3f01      	subs	r7, #1
   10bf6:	3e30      	subs	r6, #48	; 0x30
   10bf8:	3d30      	subs	r5, #48	; 0x30
   10bfa:	3c30      	subs	r4, #48	; 0x30
   10bfc:	f1b7 3fff 	cmp.w	r7, #4294967295
   10c00:	d1ee      	bne.n	10be0 <map_fp_times_Zz+0x24>
   10c02:	b002      	add	sp, #8
   10c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10c08:	4770      	bx	lr
   10c0a:	bf00      	nop
   10c0c:	00028738 	.word	0x00028738
   10c10:	fffcfffd 	.word	0xfffcfffd

00010c14 <line_by_Px2>:
   10c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10c18:	b082      	sub	sp, #8
   10c1a:	4604      	mov	r4, r0
   10c1c:	460d      	mov	r5, r1
   10c1e:	3060      	adds	r0, #96	; 0x60
   10c20:	4e16      	ldr	r6, [pc, #88]	; (10c7c <line_by_Px2+0x68>)
   10c22:	f04f 080c 	mov.w	r8, #12
   10c26:	f8cd 8004 	str.w	r8, [sp, #4]
   10c2a:	4f15      	ldr	r7, [pc, #84]	; (10c80 <line_by_Px2+0x6c>)
   10c2c:	9700      	str	r7, [sp, #0]
   10c2e:	4633      	mov	r3, r6
   10c30:	460a      	mov	r2, r1
   10c32:	4601      	mov	r1, r0
   10c34:	f7ff fecc 	bl	109d0 <mul_mont_n>
   10c38:	f104 0090 	add.w	r0, r4, #144	; 0x90
   10c3c:	f8cd 8004 	str.w	r8, [sp, #4]
   10c40:	9700      	str	r7, [sp, #0]
   10c42:	4633      	mov	r3, r6
   10c44:	462a      	mov	r2, r5
   10c46:	4601      	mov	r1, r0
   10c48:	f7ff fec2 	bl	109d0 <mul_mont_n>
   10c4c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   10c50:	3530      	adds	r5, #48	; 0x30
   10c52:	f8cd 8004 	str.w	r8, [sp, #4]
   10c56:	9700      	str	r7, [sp, #0]
   10c58:	4633      	mov	r3, r6
   10c5a:	462a      	mov	r2, r5
   10c5c:	4601      	mov	r1, r0
   10c5e:	f7ff feb7 	bl	109d0 <mul_mont_n>
   10c62:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   10c66:	f8cd 8004 	str.w	r8, [sp, #4]
   10c6a:	9700      	str	r7, [sp, #0]
   10c6c:	4633      	mov	r3, r6
   10c6e:	462a      	mov	r2, r5
   10c70:	4601      	mov	r1, r0
   10c72:	f7ff fead 	bl	109d0 <mul_mont_n>
   10c76:	b002      	add	sp, #8
   10c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10c7c:	00028738 	.word	0x00028738
   10c80:	fffcfffd 	.word	0xfffcfffd

00010c84 <post_line_by_Px2>:
   10c84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10c88:	b083      	sub	sp, #12
   10c8a:	4607      	mov	r7, r0
   10c8c:	460d      	mov	r5, r1
   10c8e:	4616      	mov	r6, r2
   10c90:	1f0b      	subs	r3, r1, #4
   10c92:	f1a0 0c04 	sub.w	ip, r0, #4
   10c96:	f101 0e5c 	add.w	lr, r1, #92	; 0x5c
   10c9a:	f853 4f04 	ldr.w	r4, [r3, #4]!
   10c9e:	f84c 4f04 	str.w	r4, [ip, #4]!
   10ca2:	4573      	cmp	r3, lr
   10ca4:	d1f9      	bne.n	10c9a <post_line_by_Px2+0x16>
   10ca6:	4c1c      	ldr	r4, [pc, #112]	; (10d18 <post_line_by_Px2+0x94>)
   10ca8:	f04f 090c 	mov.w	r9, #12
   10cac:	f8cd 9004 	str.w	r9, [sp, #4]
   10cb0:	f8df 8068 	ldr.w	r8, [pc, #104]	; 10d1c <post_line_by_Px2+0x98>
   10cb4:	f8cd 8000 	str.w	r8, [sp]
   10cb8:	4623      	mov	r3, r4
   10cba:	4632      	mov	r2, r6
   10cbc:	f105 0160 	add.w	r1, r5, #96	; 0x60
   10cc0:	f107 0060 	add.w	r0, r7, #96	; 0x60
   10cc4:	f7ff fe84 	bl	109d0 <mul_mont_n>
   10cc8:	f8cd 9004 	str.w	r9, [sp, #4]
   10ccc:	f8cd 8000 	str.w	r8, [sp]
   10cd0:	4623      	mov	r3, r4
   10cd2:	4632      	mov	r2, r6
   10cd4:	f105 0190 	add.w	r1, r5, #144	; 0x90
   10cd8:	f107 0090 	add.w	r0, r7, #144	; 0x90
   10cdc:	f7ff fe78 	bl	109d0 <mul_mont_n>
   10ce0:	3630      	adds	r6, #48	; 0x30
   10ce2:	f8cd 9004 	str.w	r9, [sp, #4]
   10ce6:	f8cd 8000 	str.w	r8, [sp]
   10cea:	4623      	mov	r3, r4
   10cec:	4632      	mov	r2, r6
   10cee:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
   10cf2:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
   10cf6:	f7ff fe6b 	bl	109d0 <mul_mont_n>
   10cfa:	f8cd 9004 	str.w	r9, [sp, #4]
   10cfe:	f8cd 8000 	str.w	r8, [sp]
   10d02:	4623      	mov	r3, r4
   10d04:	4632      	mov	r2, r6
   10d06:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   10d0a:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
   10d0e:	f7ff fe5f 	bl	109d0 <mul_mont_n>
   10d12:	b003      	add	sp, #12
   10d14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10d18:	00028738 	.word	0x00028738
   10d1c:	fffcfffd 	.word	0xfffcfffd

00010d20 <add_mod_n>:
   10d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d24:	b083      	sub	sp, #12
   10d26:	af00      	add	r7, sp, #0
   10d28:	607b      	str	r3, [r7, #4]
   10d2a:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   10d2c:	ea4f 0985 	mov.w	r9, r5, lsl #2
   10d30:	f109 0407 	add.w	r4, r9, #7
   10d34:	f024 0407 	bic.w	r4, r4, #7
   10d38:	ebad 0d04 	sub.w	sp, sp, r4
   10d3c:	2d00      	cmp	r5, #0
   10d3e:	d044      	beq.n	10dca <add_mod_n+0xaa>
   10d40:	46ea      	mov	sl, sp
   10d42:	f1a1 0c04 	sub.w	ip, r1, #4
   10d46:	f1a2 0e04 	sub.w	lr, r2, #4
   10d4a:	f1aa 0404 	sub.w	r4, sl, #4
   10d4e:	eb0c 0809 	add.w	r8, ip, r9
   10d52:	4626      	mov	r6, r4
   10d54:	2100      	movs	r1, #0
   10d56:	460d      	mov	r5, r1
   10d58:	f85c 2f04 	ldr.w	r2, [ip, #4]!
   10d5c:	f85e 3f04 	ldr.w	r3, [lr, #4]!
   10d60:	18d2      	adds	r2, r2, r3
   10d62:	eb45 0b05 	adc.w	fp, r5, r5
   10d66:	1852      	adds	r2, r2, r1
   10d68:	f846 2f04 	str.w	r2, [r6, #4]!
   10d6c:	f14b 0100 	adc.w	r1, fp, #0
   10d70:	45c4      	cmp	ip, r8
   10d72:	d1f1      	bne.n	10d58 <add_mod_n+0x38>
   10d74:	687b      	ldr	r3, [r7, #4]
   10d76:	3b04      	subs	r3, #4
   10d78:	1f05      	subs	r5, r0, #4
   10d7a:	f1a9 0204 	sub.w	r2, r9, #4
   10d7e:	4492      	add	sl, r2
   10d80:	46ae      	mov	lr, r5
   10d82:	4626      	mov	r6, r4
   10d84:	f04f 0800 	mov.w	r8, #0
   10d88:	46c4      	mov	ip, r8
   10d8a:	f856 2f04 	ldr.w	r2, [r6, #4]!
   10d8e:	ebb2 0208 	subs.w	r2, r2, r8
   10d92:	eb6c 080c 	sbc.w	r8, ip, ip
   10d96:	f853 bf04 	ldr.w	fp, [r3, #4]!
   10d9a:	ebb2 020b 	subs.w	r2, r2, fp
   10d9e:	f168 0800 	sbc.w	r8, r8, #0
   10da2:	f84e 2f04 	str.w	r2, [lr, #4]!
   10da6:	f008 0801 	and.w	r8, r8, #1
   10daa:	4556      	cmp	r6, sl
   10dac:	d1ed      	bne.n	10d8a <add_mod_n+0x6a>
   10dae:	eba1 0208 	sub.w	r2, r1, r8
   10db2:	3804      	subs	r0, #4
   10db4:	4481      	add	r9, r0
   10db6:	f855 1f04 	ldr.w	r1, [r5, #4]!
   10dba:	f854 3f04 	ldr.w	r3, [r4, #4]!
   10dbe:	404b      	eors	r3, r1
   10dc0:	4013      	ands	r3, r2
   10dc2:	404b      	eors	r3, r1
   10dc4:	602b      	str	r3, [r5, #0]
   10dc6:	454d      	cmp	r5, r9
   10dc8:	d1f5      	bne.n	10db6 <add_mod_n+0x96>
   10dca:	370c      	adds	r7, #12
   10dcc:	46bd      	mov	sp, r7
   10dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010dd2 <map_fp>:
   10dd2:	b343      	cbz	r3, 10e26 <map_fp+0x54>
   10dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10dd8:	b082      	sub	sp, #8
   10dda:	4604      	mov	r4, r0
   10ddc:	4688      	mov	r8, r1
   10dde:	1e5e      	subs	r6, r3, #1
   10de0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   10de4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   10de8:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
   10dec:	f8df 9038 	ldr.w	r9, [pc, #56]	; 10e28 <map_fp+0x56>
   10df0:	270c      	movs	r7, #12
   10df2:	f8df a038 	ldr.w	sl, [pc, #56]	; 10e2c <map_fp+0x5a>
   10df6:	9701      	str	r7, [sp, #4]
   10df8:	f8cd a000 	str.w	sl, [sp]
   10dfc:	464b      	mov	r3, r9
   10dfe:	4642      	mov	r2, r8
   10e00:	4621      	mov	r1, r4
   10e02:	4620      	mov	r0, r4
   10e04:	f7ff fde4 	bl	109d0 <mul_mont_n>
   10e08:	9700      	str	r7, [sp, #0]
   10e0a:	464b      	mov	r3, r9
   10e0c:	462a      	mov	r2, r5
   10e0e:	4621      	mov	r1, r4
   10e10:	4620      	mov	r0, r4
   10e12:	f7ff ff85 	bl	10d20 <add_mod_n>
   10e16:	3e01      	subs	r6, #1
   10e18:	3d30      	subs	r5, #48	; 0x30
   10e1a:	f1b6 3fff 	cmp.w	r6, #4294967295
   10e1e:	d1ea      	bne.n	10df6 <map_fp+0x24>
   10e20:	b002      	add	sp, #8
   10e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10e26:	4770      	bx	lr
   10e28:	00028738 	.word	0x00028738
   10e2c:	fffcfffd 	.word	0xfffcfffd

00010e30 <mul_by_3_mod_n>:
   10e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e34:	b087      	sub	sp, #28
   10e36:	af00      	add	r7, sp, #0
   10e38:	60f8      	str	r0, [r7, #12]
   10e3a:	4618      	mov	r0, r3
   10e3c:	60bb      	str	r3, [r7, #8]
   10e3e:	009e      	lsls	r6, r3, #2
   10e40:	617e      	str	r6, [r7, #20]
   10e42:	1df3      	adds	r3, r6, #7
   10e44:	f023 0307 	bic.w	r3, r3, #7
   10e48:	ebad 0d03 	sub.w	sp, sp, r3
   10e4c:	466c      	mov	r4, sp
   10e4e:	613c      	str	r4, [r7, #16]
   10e50:	ebad 0d03 	sub.w	sp, sp, r3
   10e54:	2800      	cmp	r0, #0
   10e56:	f000 8087 	beq.w	10f68 <mul_by_3_mod_n+0x138>
   10e5a:	466d      	mov	r5, sp
   10e5c:	1f08      	subs	r0, r1, #4
   10e5e:	3c04      	subs	r4, #4
   10e60:	6078      	str	r0, [r7, #4]
   10e62:	eb00 0e06 	add.w	lr, r0, r6
   10e66:	46a4      	mov	ip, r4
   10e68:	4603      	mov	r3, r0
   10e6a:	2100      	movs	r1, #0
   10e6c:	f853 6f04 	ldr.w	r6, [r3, #4]!
   10e70:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
   10e74:	f84c 1f04 	str.w	r1, [ip, #4]!
   10e78:	0ff1      	lsrs	r1, r6, #31
   10e7a:	4573      	cmp	r3, lr
   10e7c:	d1f6      	bne.n	10e6c <mul_by_3_mod_n+0x3c>
   10e7e:	f1a2 0e04 	sub.w	lr, r2, #4
   10e82:	3d04      	subs	r5, #4
   10e84:	697b      	ldr	r3, [r7, #20]
   10e86:	f1a3 0b04 	sub.w	fp, r3, #4
   10e8a:	693b      	ldr	r3, [r7, #16]
   10e8c:	449b      	add	fp, r3
   10e8e:	46a9      	mov	r9, r5
   10e90:	46f0      	mov	r8, lr
   10e92:	46a4      	mov	ip, r4
   10e94:	f04f 0a00 	mov.w	sl, #0
   10e98:	4656      	mov	r6, sl
   10e9a:	f85c 3f04 	ldr.w	r3, [ip, #4]!
   10e9e:	ebb3 0a0a 	subs.w	sl, r3, sl
   10ea2:	eb66 0206 	sbc.w	r2, r6, r6
   10ea6:	f858 3f04 	ldr.w	r3, [r8, #4]!
   10eaa:	ebba 0303 	subs.w	r3, sl, r3
   10eae:	f162 0a00 	sbc.w	sl, r2, #0
   10eb2:	f849 3f04 	str.w	r3, [r9, #4]!
   10eb6:	f00a 0a01 	and.w	sl, sl, #1
   10eba:	45dc      	cmp	ip, fp
   10ebc:	d1ed      	bne.n	10e9a <mul_by_3_mod_n+0x6a>
   10ebe:	eba1 0a0a 	sub.w	sl, r1, sl
   10ec2:	46a0      	mov	r8, r4
   10ec4:	46ac      	mov	ip, r5
   10ec6:	2600      	movs	r6, #0
   10ec8:	68ba      	ldr	r2, [r7, #8]
   10eca:	f85c 1f04 	ldr.w	r1, [ip, #4]!
   10ece:	f858 3f04 	ldr.w	r3, [r8, #4]!
   10ed2:	404b      	eors	r3, r1
   10ed4:	ea03 030a 	and.w	r3, r3, sl
   10ed8:	404b      	eors	r3, r1
   10eda:	f8cc 3000 	str.w	r3, [ip]
   10ede:	3601      	adds	r6, #1
   10ee0:	42b2      	cmp	r2, r6
   10ee2:	d1f2      	bne.n	10eca <mul_by_3_mod_n+0x9a>
   10ee4:	f8d7 c004 	ldr.w	ip, [r7, #4]
   10ee8:	697b      	ldr	r3, [r7, #20]
   10eea:	449c      	add	ip, r3
   10eec:	4626      	mov	r6, r4
   10eee:	2300      	movs	r3, #0
   10ef0:	4619      	mov	r1, r3
   10ef2:	46a8      	mov	r8, r5
   10ef4:	f850 2f04 	ldr.w	r2, [r0, #4]!
   10ef8:	f858 5f04 	ldr.w	r5, [r8, #4]!
   10efc:	1952      	adds	r2, r2, r5
   10efe:	eb41 0501 	adc.w	r5, r1, r1
   10f02:	18d2      	adds	r2, r2, r3
   10f04:	f846 2f04 	str.w	r2, [r6, #4]!
   10f08:	f145 0300 	adc.w	r3, r5, #0
   10f0c:	4560      	cmp	r0, ip
   10f0e:	d1f1      	bne.n	10ef4 <mul_by_3_mod_n+0xc4>
   10f10:	68fa      	ldr	r2, [r7, #12]
   10f12:	1f15      	subs	r5, r2, #4
   10f14:	697a      	ldr	r2, [r7, #20]
   10f16:	f1a2 0804 	sub.w	r8, r2, #4
   10f1a:	693a      	ldr	r2, [r7, #16]
   10f1c:	4442      	add	r2, r8
   10f1e:	4690      	mov	r8, r2
   10f20:	46ac      	mov	ip, r5
   10f22:	4620      	mov	r0, r4
   10f24:	2200      	movs	r2, #0
   10f26:	4616      	mov	r6, r2
   10f28:	f850 1f04 	ldr.w	r1, [r0, #4]!
   10f2c:	1a8a      	subs	r2, r1, r2
   10f2e:	eb66 0106 	sbc.w	r1, r6, r6
   10f32:	f85e 9f04 	ldr.w	r9, [lr, #4]!
   10f36:	ebb2 0209 	subs.w	r2, r2, r9
   10f3a:	f161 0100 	sbc.w	r1, r1, #0
   10f3e:	f84c 2f04 	str.w	r2, [ip, #4]!
   10f42:	f001 0201 	and.w	r2, r1, #1
   10f46:	4540      	cmp	r0, r8
   10f48:	d1ee      	bne.n	10f28 <mul_by_3_mod_n+0xf8>
   10f4a:	1a9b      	subs	r3, r3, r2
   10f4c:	68fa      	ldr	r2, [r7, #12]
   10f4e:	1f10      	subs	r0, r2, #4
   10f50:	697a      	ldr	r2, [r7, #20]
   10f52:	4410      	add	r0, r2
   10f54:	f855 1f04 	ldr.w	r1, [r5, #4]!
   10f58:	f854 2f04 	ldr.w	r2, [r4, #4]!
   10f5c:	404a      	eors	r2, r1
   10f5e:	401a      	ands	r2, r3
   10f60:	404a      	eors	r2, r1
   10f62:	602a      	str	r2, [r5, #0]
   10f64:	4285      	cmp	r5, r0
   10f66:	d1f5      	bne.n	10f54 <mul_by_3_mod_n+0x124>
   10f68:	371c      	adds	r7, #28
   10f6a:	46bd      	mov	sp, r7
   10f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010f70 <lshift_mod_n>:
   10f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f74:	b085      	sub	sp, #20
   10f76:	af00      	add	r7, sp, #0
   10f78:	60f8      	str	r0, [r7, #12]
   10f7a:	460d      	mov	r5, r1
   10f7c:	607b      	str	r3, [r7, #4]
   10f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10f80:	0099      	lsls	r1, r3, #2
   10f82:	1dcb      	adds	r3, r1, #7
   10f84:	f023 0307 	bic.w	r3, r3, #7
   10f88:	ebad 0d03 	sub.w	sp, sp, r3
   10f8c:	466b      	mov	r3, sp
   10f8e:	60bb      	str	r3, [r7, #8]
   10f90:	2a00      	cmp	r2, #0
   10f92:	d04b      	beq.n	1102c <lshift_mod_n+0xbc>
   10f94:	f102 3bff 	add.w	fp, r2, #4294967295
   10f98:	1f0a      	subs	r2, r1, #4
   10f9a:	603a      	str	r2, [r7, #0]
   10f9c:	eb03 0a02 	add.w	sl, r3, r2
   10fa0:	f1a0 0904 	sub.w	r9, r0, #4
   10fa4:	4489      	add	r9, r1
   10fa6:	2400      	movs	r4, #0
   10fa8:	e010      	b.n	10fcc <lshift_mod_n+0x5c>
   10faa:	f850 2f04 	ldr.w	r2, [r0, #4]!
   10fae:	f856 3f04 	ldr.w	r3, [r6, #4]!
   10fb2:	4053      	eors	r3, r2
   10fb4:	ea03 0308 	and.w	r3, r3, r8
   10fb8:	4053      	eors	r3, r2
   10fba:	6003      	str	r3, [r0, #0]
   10fbc:	4548      	cmp	r0, r9
   10fbe:	d1f4      	bne.n	10faa <lshift_mod_n+0x3a>
   10fc0:	f10b 3bff 	add.w	fp, fp, #4294967295
   10fc4:	f1bb 3fff 	cmp.w	fp, #4294967295
   10fc8:	d030      	beq.n	1102c <lshift_mod_n+0xbc>
   10fca:	68fd      	ldr	r5, [r7, #12]
   10fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10fce:	2b00      	cmp	r3, #0
   10fd0:	d0f6      	beq.n	10fc0 <lshift_mod_n+0x50>
   10fd2:	1f2b      	subs	r3, r5, #4
   10fd4:	68ba      	ldr	r2, [r7, #8]
   10fd6:	1f16      	subs	r6, r2, #4
   10fd8:	683a      	ldr	r2, [r7, #0]
   10fda:	4415      	add	r5, r2
   10fdc:	4630      	mov	r0, r6
   10fde:	4621      	mov	r1, r4
   10fe0:	f853 2f04 	ldr.w	r2, [r3, #4]!
   10fe4:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
   10fe8:	f840 1f04 	str.w	r1, [r0, #4]!
   10fec:	0fd1      	lsrs	r1, r2, #31
   10fee:	42ab      	cmp	r3, r5
   10ff0:	d1f6      	bne.n	10fe0 <lshift_mod_n+0x70>
   10ff2:	687b      	ldr	r3, [r7, #4]
   10ff4:	f1a3 0e04 	sub.w	lr, r3, #4
   10ff8:	68fb      	ldr	r3, [r7, #12]
   10ffa:	1f18      	subs	r0, r3, #4
   10ffc:	4684      	mov	ip, r0
   10ffe:	4635      	mov	r5, r6
   11000:	46a0      	mov	r8, r4
   11002:	f855 3f04 	ldr.w	r3, [r5, #4]!
   11006:	ebb3 0808 	subs.w	r8, r3, r8
   1100a:	eb64 0204 	sbc.w	r2, r4, r4
   1100e:	f85e 3f04 	ldr.w	r3, [lr, #4]!
   11012:	ebb8 0303 	subs.w	r3, r8, r3
   11016:	f162 0800 	sbc.w	r8, r2, #0
   1101a:	f84c 3f04 	str.w	r3, [ip, #4]!
   1101e:	f008 0801 	and.w	r8, r8, #1
   11022:	4555      	cmp	r5, sl
   11024:	d1ed      	bne.n	11002 <lshift_mod_n+0x92>
   11026:	eba1 0808 	sub.w	r8, r1, r8
   1102a:	e7be      	b.n	10faa <lshift_mod_n+0x3a>
   1102c:	3714      	adds	r7, #20
   1102e:	46bd      	mov	sp, r7
   11030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011034 <from_mont_n>:
   11034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11038:	b087      	sub	sp, #28
   1103a:	af00      	add	r7, sp, #0
   1103c:	6078      	str	r0, [r7, #4]
   1103e:	468c      	mov	ip, r1
   11040:	613a      	str	r2, [r7, #16]
   11042:	617b      	str	r3, [r7, #20]
   11044:	f8d7 8040 	ldr.w	r8, [r7, #64]	; 0x40
   11048:	ea4f 0188 	mov.w	r1, r8, lsl #2
   1104c:	60b9      	str	r1, [r7, #8]
   1104e:	1dcb      	adds	r3, r1, #7
   11050:	f023 0307 	bic.w	r3, r3, #7
   11054:	ebad 0d03 	sub.w	sp, sp, r3
   11058:	f1b8 0f00 	cmp.w	r8, #0
   1105c:	d063      	beq.n	11126 <from_mont_n+0xf2>
   1105e:	46ea      	mov	sl, sp
   11060:	4616      	mov	r6, r2
   11062:	f856 3904 	ldr.w	r3, [r6], #-4
   11066:	60fb      	str	r3, [r7, #12]
   11068:	440e      	add	r6, r1
   1106a:	f04f 0900 	mov.w	r9, #0
   1106e:	464d      	mov	r5, r9
   11070:	e000      	b.n	11074 <from_mont_n+0x40>
   11072:	46d4      	mov	ip, sl
   11074:	f8dc 1000 	ldr.w	r1, [ip]
   11078:	697b      	ldr	r3, [r7, #20]
   1107a:	fb03 f401 	mul.w	r4, r3, r1
   1107e:	68fb      	ldr	r3, [r7, #12]
   11080:	fba4 2303 	umull	r2, r3, r4, r3
   11084:	1852      	adds	r2, r2, r1
   11086:	f143 0b00 	adc.w	fp, r3, #0
   1108a:	f1b8 0f01 	cmp.w	r8, #1
   1108e:	d94e      	bls.n	1112e <from_mont_n+0xfa>
   11090:	f1aa 0e04 	sub.w	lr, sl, #4
   11094:	6938      	ldr	r0, [r7, #16]
   11096:	f850 2f04 	ldr.w	r2, [r0, #4]!
   1109a:	fba2 2104 	umull	r2, r1, r2, r4
   1109e:	f85c 3f04 	ldr.w	r3, [ip, #4]!
   110a2:	eb13 030b 	adds.w	r3, r3, fp
   110a6:	eb45 0b05 	adc.w	fp, r5, r5
   110aa:	18d3      	adds	r3, r2, r3
   110ac:	f84e 3f04 	str.w	r3, [lr, #4]!
   110b0:	eb41 0b0b 	adc.w	fp, r1, fp
   110b4:	42b0      	cmp	r0, r6
   110b6:	d1ee      	bne.n	11096 <from_mont_n+0x62>
   110b8:	4643      	mov	r3, r8
   110ba:	3b01      	subs	r3, #1
   110bc:	f84a b023 	str.w	fp, [sl, r3, lsl #2]
   110c0:	f109 0901 	add.w	r9, r9, #1
   110c4:	45c8      	cmp	r8, r9
   110c6:	d1d4      	bne.n	11072 <from_mont_n+0x3e>
   110c8:	f1aa 0104 	sub.w	r1, sl, #4
   110cc:	693b      	ldr	r3, [r7, #16]
   110ce:	f1a3 0c04 	sub.w	ip, r3, #4
   110d2:	687b      	ldr	r3, [r7, #4]
   110d4:	1f18      	subs	r0, r3, #4
   110d6:	68bb      	ldr	r3, [r7, #8]
   110d8:	3b04      	subs	r3, #4
   110da:	449a      	add	sl, r3
   110dc:	4606      	mov	r6, r0
   110de:	460c      	mov	r4, r1
   110e0:	2300      	movs	r3, #0
   110e2:	461d      	mov	r5, r3
   110e4:	f854 2f04 	ldr.w	r2, [r4, #4]!
   110e8:	1ad3      	subs	r3, r2, r3
   110ea:	eb65 0205 	sbc.w	r2, r5, r5
   110ee:	f85c ef04 	ldr.w	lr, [ip, #4]!
   110f2:	ebb3 030e 	subs.w	r3, r3, lr
   110f6:	f162 0200 	sbc.w	r2, r2, #0
   110fa:	f846 3f04 	str.w	r3, [r6, #4]!
   110fe:	f002 0301 	and.w	r3, r2, #1
   11102:	4554      	cmp	r4, sl
   11104:	d1ee      	bne.n	110e4 <from_mont_n+0xb0>
   11106:	425e      	negs	r6, r3
   11108:	687a      	ldr	r2, [r7, #4]
   1110a:	1f15      	subs	r5, r2, #4
   1110c:	68ba      	ldr	r2, [r7, #8]
   1110e:	4415      	add	r5, r2
   11110:	3b01      	subs	r3, #1
   11112:	f850 2f04 	ldr.w	r2, [r0, #4]!
   11116:	401a      	ands	r2, r3
   11118:	f851 4f04 	ldr.w	r4, [r1, #4]!
   1111c:	4034      	ands	r4, r6
   1111e:	4322      	orrs	r2, r4
   11120:	6002      	str	r2, [r0, #0]
   11122:	42a8      	cmp	r0, r5
   11124:	d1f5      	bne.n	11112 <from_mont_n+0xde>
   11126:	371c      	adds	r7, #28
   11128:	46bd      	mov	sp, r7
   1112a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1112e:	2301      	movs	r3, #1
   11130:	e7c3      	b.n	110ba <from_mont_n+0x86>

00011132 <redc_mont_n>:
   11132:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11136:	b087      	sub	sp, #28
   11138:	af00      	add	r7, sp, #0
   1113a:	6078      	str	r0, [r7, #4]
   1113c:	6039      	str	r1, [r7, #0]
   1113e:	613a      	str	r2, [r7, #16]
   11140:	617b      	str	r3, [r7, #20]
   11142:	f8d7 8040 	ldr.w	r8, [r7, #64]	; 0x40
   11146:	ea4f 0088 	mov.w	r0, r8, lsl #2
   1114a:	60b8      	str	r0, [r7, #8]
   1114c:	1dc3      	adds	r3, r0, #7
   1114e:	f023 0307 	bic.w	r3, r3, #7
   11152:	ebad 0d03 	sub.w	sp, sp, r3
   11156:	f1b8 0f00 	cmp.w	r8, #0
   1115a:	d07a      	beq.n	11252 <redc_mont_n+0x120>
   1115c:	46ea      	mov	sl, sp
   1115e:	4616      	mov	r6, r2
   11160:	f856 3904 	ldr.w	r3, [r6], #-4
   11164:	60fb      	str	r3, [r7, #12]
   11166:	4406      	add	r6, r0
   11168:	468c      	mov	ip, r1
   1116a:	f04f 0900 	mov.w	r9, #0
   1116e:	464d      	mov	r5, r9
   11170:	e000      	b.n	11174 <redc_mont_n+0x42>
   11172:	46d4      	mov	ip, sl
   11174:	f8dc 1000 	ldr.w	r1, [ip]
   11178:	697b      	ldr	r3, [r7, #20]
   1117a:	fb03 f401 	mul.w	r4, r3, r1
   1117e:	68fb      	ldr	r3, [r7, #12]
   11180:	fba4 2303 	umull	r2, r3, r4, r3
   11184:	1852      	adds	r2, r2, r1
   11186:	f143 0b00 	adc.w	fp, r3, #0
   1118a:	f1b8 0f01 	cmp.w	r8, #1
   1118e:	d964      	bls.n	1125a <redc_mont_n+0x128>
   11190:	f1aa 0e04 	sub.w	lr, sl, #4
   11194:	6938      	ldr	r0, [r7, #16]
   11196:	f850 2f04 	ldr.w	r2, [r0, #4]!
   1119a:	fba2 2104 	umull	r2, r1, r2, r4
   1119e:	f85c 3f04 	ldr.w	r3, [ip, #4]!
   111a2:	eb13 030b 	adds.w	r3, r3, fp
   111a6:	eb45 0b05 	adc.w	fp, r5, r5
   111aa:	18d3      	adds	r3, r2, r3
   111ac:	f84e 3f04 	str.w	r3, [lr, #4]!
   111b0:	eb41 0b0b 	adc.w	fp, r1, fp
   111b4:	42b0      	cmp	r0, r6
   111b6:	d1ee      	bne.n	11196 <redc_mont_n+0x64>
   111b8:	4643      	mov	r3, r8
   111ba:	3b01      	subs	r3, #1
   111bc:	f84a b023 	str.w	fp, [sl, r3, lsl #2]
   111c0:	f109 0901 	add.w	r9, r9, #1
   111c4:	45c8      	cmp	r8, r9
   111c6:	d1d4      	bne.n	11172 <redc_mont_n+0x40>
   111c8:	68bb      	ldr	r3, [r7, #8]
   111ca:	1f19      	subs	r1, r3, #4
   111cc:	683b      	ldr	r3, [r7, #0]
   111ce:	4419      	add	r1, r3
   111d0:	f1aa 0504 	sub.w	r5, sl, #4
   111d4:	3b04      	subs	r3, #4
   111d6:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   111da:	4628      	mov	r0, r5
   111dc:	2300      	movs	r3, #0
   111de:	461c      	mov	r4, r3
   111e0:	f851 2f04 	ldr.w	r2, [r1, #4]!
   111e4:	f850 6f04 	ldr.w	r6, [r0, #4]!
   111e8:	1992      	adds	r2, r2, r6
   111ea:	eb44 0604 	adc.w	r6, r4, r4
   111ee:	18d2      	adds	r2, r2, r3
   111f0:	6002      	str	r2, [r0, #0]
   111f2:	f146 0300 	adc.w	r3, r6, #0
   111f6:	4549      	cmp	r1, r9
   111f8:	d1f2      	bne.n	111e0 <redc_mont_n+0xae>
   111fa:	693a      	ldr	r2, [r7, #16]
   111fc:	f1a2 0e04 	sub.w	lr, r2, #4
   11200:	687a      	ldr	r2, [r7, #4]
   11202:	1f10      	subs	r0, r2, #4
   11204:	68ba      	ldr	r2, [r7, #8]
   11206:	3a04      	subs	r2, #4
   11208:	4492      	add	sl, r2
   1120a:	4684      	mov	ip, r0
   1120c:	462c      	mov	r4, r5
   1120e:	2200      	movs	r2, #0
   11210:	4616      	mov	r6, r2
   11212:	f854 1f04 	ldr.w	r1, [r4, #4]!
   11216:	1a8a      	subs	r2, r1, r2
   11218:	eb66 0106 	sbc.w	r1, r6, r6
   1121c:	f85e 8f04 	ldr.w	r8, [lr, #4]!
   11220:	ebb2 0208 	subs.w	r2, r2, r8
   11224:	f161 0100 	sbc.w	r1, r1, #0
   11228:	f84c 2f04 	str.w	r2, [ip, #4]!
   1122c:	f001 0201 	and.w	r2, r1, #1
   11230:	4554      	cmp	r4, sl
   11232:	d1ee      	bne.n	11212 <redc_mont_n+0xe0>
   11234:	1a9b      	subs	r3, r3, r2
   11236:	687a      	ldr	r2, [r7, #4]
   11238:	1f14      	subs	r4, r2, #4
   1123a:	68ba      	ldr	r2, [r7, #8]
   1123c:	4414      	add	r4, r2
   1123e:	f850 1f04 	ldr.w	r1, [r0, #4]!
   11242:	f855 2f04 	ldr.w	r2, [r5, #4]!
   11246:	404a      	eors	r2, r1
   11248:	401a      	ands	r2, r3
   1124a:	404a      	eors	r2, r1
   1124c:	6002      	str	r2, [r0, #0]
   1124e:	42a0      	cmp	r0, r4
   11250:	d1f5      	bne.n	1123e <redc_mont_n+0x10c>
   11252:	371c      	adds	r7, #28
   11254:	46bd      	mov	sp, r7
   11256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1125a:	2301      	movs	r3, #1
   1125c:	e7ad      	b.n	111ba <redc_mont_n+0x88>

0001125e <sgn0_pty_mod_n>:
   1125e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11262:	af00      	add	r7, sp, #0
   11264:	ea4f 0982 	mov.w	r9, r2, lsl #2
   11268:	f109 0307 	add.w	r3, r9, #7
   1126c:	f023 0307 	bic.w	r3, r3, #7
   11270:	ebad 0d03 	sub.w	sp, sp, r3
   11274:	6803      	ldr	r3, [r0, #0]
   11276:	f003 0e01 	and.w	lr, r3, #1
   1127a:	b382      	cbz	r2, 112de <sgn0_pty_mod_n+0x80>
   1127c:	46e8      	mov	r8, sp
   1127e:	1f03      	subs	r3, r0, #4
   11280:	f1a8 0004 	sub.w	r0, r8, #4
   11284:	eb03 0409 	add.w	r4, r3, r9
   11288:	4605      	mov	r5, r0
   1128a:	f04f 0c00 	mov.w	ip, #0
   1128e:	f853 2f04 	ldr.w	r2, [r3, #4]!
   11292:	ea4c 0642 	orr.w	r6, ip, r2, lsl #1
   11296:	f845 6f04 	str.w	r6, [r5, #4]!
   1129a:	ea4f 7cd2 	mov.w	ip, r2, lsr #31
   1129e:	42a3      	cmp	r3, r4
   112a0:	d1f5      	bne.n	1128e <sgn0_pty_mod_n+0x30>
   112a2:	1f0c      	subs	r4, r1, #4
   112a4:	f1a9 0604 	sub.w	r6, r9, #4
   112a8:	4446      	add	r6, r8
   112aa:	2200      	movs	r2, #0
   112ac:	4615      	mov	r5, r2
   112ae:	f850 3f04 	ldr.w	r3, [r0, #4]!
   112b2:	1a9a      	subs	r2, r3, r2
   112b4:	eb65 0305 	sbc.w	r3, r5, r5
   112b8:	f854 1f04 	ldr.w	r1, [r4, #4]!
   112bc:	1a52      	subs	r2, r2, r1
   112be:	f163 0200 	sbc.w	r2, r3, #0
   112c2:	f002 0201 	and.w	r2, r2, #1
   112c6:	42b0      	cmp	r0, r6
   112c8:	d1f1      	bne.n	112ae <sgn0_pty_mod_n+0x50>
   112ca:	ebac 0202 	sub.w	r2, ip, r2
   112ce:	43d2      	mvns	r2, r2
   112d0:	f002 0202 	and.w	r2, r2, #2
   112d4:	ea42 000e 	orr.w	r0, r2, lr
   112d8:	46bd      	mov	sp, r7
   112da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   112de:	4694      	mov	ip, r2
   112e0:	e7f3      	b.n	112ca <sgn0_pty_mod_n+0x6c>

000112e2 <mul_mont_nonred_n>:
   112e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112e6:	b087      	sub	sp, #28
   112e8:	af00      	add	r7, sp, #0
   112ea:	6038      	str	r0, [r7, #0]
   112ec:	6079      	str	r1, [r7, #4]
   112ee:	60fb      	str	r3, [r7, #12]
   112f0:	f8d7 8044 	ldr.w	r8, [r7, #68]	; 0x44
   112f4:	f108 0401 	add.w	r4, r8, #1
   112f8:	00a4      	lsls	r4, r4, #2
   112fa:	1de3      	adds	r3, r4, #7
   112fc:	f023 0307 	bic.w	r3, r3, #7
   11300:	ebad 0d03 	sub.w	sp, sp, r3
   11304:	46ea      	mov	sl, sp
   11306:	6816      	ldr	r6, [r2, #0]
   11308:	f1b8 0f00 	cmp.w	r8, #0
   1130c:	d029      	beq.n	11362 <mul_mont_nonred_n+0x80>
   1130e:	1f0d      	subs	r5, r1, #4
   11310:	f1aa 0c04 	sub.w	ip, sl, #4
   11314:	f1a4 0e04 	sub.w	lr, r4, #4
   11318:	44ae      	add	lr, r5
   1131a:	2100      	movs	r1, #0
   1131c:	f855 3f04 	ldr.w	r3, [r5, #4]!
   11320:	fba3 3006 	umull	r3, r0, r3, r6
   11324:	185b      	adds	r3, r3, r1
   11326:	f84c 3f04 	str.w	r3, [ip, #4]!
   1132a:	f140 0100 	adc.w	r1, r0, #0
   1132e:	4575      	cmp	r5, lr
   11330:	d1f4      	bne.n	1131c <mul_mont_nonred_n+0x3a>
   11332:	4640      	mov	r0, r8
   11334:	f8da 3000 	ldr.w	r3, [sl]
   11338:	6c3d      	ldr	r5, [r7, #64]	; 0x40
   1133a:	fb05 f303 	mul.w	r3, r5, r3
   1133e:	f84a 1020 	str.w	r1, [sl, r0, lsl #2]
   11342:	f8d7 900c 	ldr.w	r9, [r7, #12]
   11346:	f859 1904 	ldr.w	r1, [r9], #-4
   1134a:	6139      	str	r1, [r7, #16]
   1134c:	3204      	adds	r2, #4
   1134e:	617a      	str	r2, [r7, #20]
   11350:	3c04      	subs	r4, #4
   11352:	44a1      	add	r9, r4
   11354:	f04f 0b01 	mov.w	fp, #1
   11358:	2600      	movs	r6, #0
   1135a:	eb0a 0288 	add.w	r2, sl, r8, lsl #2
   1135e:	60ba      	str	r2, [r7, #8]
   11360:	e03e      	b.n	113e0 <mul_mont_nonred_n+0xfe>
   11362:	4641      	mov	r1, r8
   11364:	4640      	mov	r0, r8
   11366:	e7e5      	b.n	11334 <mul_mont_nonred_n+0x52>
   11368:	f8da 3004 	ldr.w	r3, [sl, #4]
   1136c:	440b      	add	r3, r1
   1136e:	f8ca 3000 	str.w	r3, [sl]
   11372:	45d8      	cmp	r8, fp
   11374:	d058      	beq.n	11428 <mul_mont_nonred_n+0x146>
   11376:	f1b8 0f00 	cmp.w	r8, #0
   1137a:	d102      	bne.n	11382 <mul_mont_nonred_n+0xa0>
   1137c:	4641      	mov	r1, r8
   1137e:	4642      	mov	r2, r8
   11380:	e022      	b.n	113c8 <mul_mont_nonred_n+0xe6>
   11382:	697b      	ldr	r3, [r7, #20]
   11384:	f8d3 c000 	ldr.w	ip, [r3]
   11388:	e002      	b.n	11390 <mul_mont_nonred_n+0xae>
   1138a:	697b      	ldr	r3, [r7, #20]
   1138c:	f8d3 c000 	ldr.w	ip, [r3]
   11390:	687b      	ldr	r3, [r7, #4]
   11392:	f1a3 0e04 	sub.w	lr, r3, #4
   11396:	f1aa 0504 	sub.w	r5, sl, #4
   1139a:	2400      	movs	r4, #0
   1139c:	4622      	mov	r2, r4
   1139e:	f85e 1f04 	ldr.w	r1, [lr, #4]!
   113a2:	fba1 100c 	umull	r1, r0, r1, ip
   113a6:	f855 3f04 	ldr.w	r3, [r5, #4]!
   113aa:	189b      	adds	r3, r3, r2
   113ac:	eb46 0206 	adc.w	r2, r6, r6
   113b0:	18cb      	adds	r3, r1, r3
   113b2:	602b      	str	r3, [r5, #0]
   113b4:	eb40 0202 	adc.w	r2, r0, r2
   113b8:	3401      	adds	r4, #1
   113ba:	45a0      	cmp	r8, r4
   113bc:	d8ef      	bhi.n	1139e <mul_mont_nonred_n+0xbc>
   113be:	f1b8 0f00 	cmp.w	r8, #0
   113c2:	bf14      	ite	ne
   113c4:	4641      	movne	r1, r8
   113c6:	2101      	moveq	r1, #1
   113c8:	f8da 3000 	ldr.w	r3, [sl]
   113cc:	6c38      	ldr	r0, [r7, #64]	; 0x40
   113ce:	fb00 f303 	mul.w	r3, r0, r3
   113d2:	f84a 2021 	str.w	r2, [sl, r1, lsl #2]
   113d6:	f10b 0b01 	add.w	fp, fp, #1
   113da:	697a      	ldr	r2, [r7, #20]
   113dc:	3204      	adds	r2, #4
   113de:	617a      	str	r2, [r7, #20]
   113e0:	693a      	ldr	r2, [r7, #16]
   113e2:	fba3 1002 	umull	r1, r0, r3, r2
   113e6:	f8da 2000 	ldr.w	r2, [sl]
   113ea:	188a      	adds	r2, r1, r2
   113ec:	f140 0100 	adc.w	r1, r0, #0
   113f0:	460a      	mov	r2, r1
   113f2:	f1b8 0f01 	cmp.w	r8, #1
   113f6:	d9b7      	bls.n	11368 <mul_mont_nonred_n+0x86>
   113f8:	4654      	mov	r4, sl
   113fa:	68f8      	ldr	r0, [r7, #12]
   113fc:	f850 1f04 	ldr.w	r1, [r0, #4]!
   11400:	fba1 1503 	umull	r1, r5, r1, r3
   11404:	188a      	adds	r2, r1, r2
   11406:	f145 0100 	adc.w	r1, r5, #0
   1140a:	6865      	ldr	r5, [r4, #4]
   1140c:	1952      	adds	r2, r2, r5
   1140e:	f844 2b04 	str.w	r2, [r4], #4
   11412:	f141 0200 	adc.w	r2, r1, #0
   11416:	4548      	cmp	r0, r9
   11418:	d1f0      	bne.n	113fc <mul_mont_nonred_n+0x11a>
   1141a:	68b9      	ldr	r1, [r7, #8]
   1141c:	680b      	ldr	r3, [r1, #0]
   1141e:	4413      	add	r3, r2
   11420:	f841 3c04 	str.w	r3, [r1, #-4]
   11424:	45d8      	cmp	r8, fp
   11426:	d1b0      	bne.n	1138a <mul_mont_nonred_n+0xa8>
   11428:	f03b 4140 	bics.w	r1, fp, #3221225472	; 0xc0000000
   1142c:	d00b      	beq.n	11446 <mul_mont_nonred_n+0x164>
   1142e:	f1aa 0a04 	sub.w	sl, sl, #4
   11432:	683b      	ldr	r3, [r7, #0]
   11434:	3b04      	subs	r3, #4
   11436:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
   1143a:	f85a 2f04 	ldr.w	r2, [sl, #4]!
   1143e:	f843 2f04 	str.w	r2, [r3, #4]!
   11442:	458a      	cmp	sl, r1
   11444:	d1f9      	bne.n	1143a <mul_mont_nonred_n+0x158>
   11446:	371c      	adds	r7, #28
   11448:	46bd      	mov	sp, r7
   1144a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001144e <smul_n_shift_n>:
   1144e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11452:	b085      	sub	sp, #20
   11454:	af00      	add	r7, sp, #0
   11456:	60f8      	str	r0, [r7, #12]
   11458:	4690      	mov	r8, r2
   1145a:	607b      	str	r3, [r7, #4]
   1145c:	f8d7 b038 	ldr.w	fp, [r7, #56]	; 0x38
   11460:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
   11462:	1c72      	adds	r2, r6, #1
   11464:	60ba      	str	r2, [r7, #8]
   11466:	0090      	lsls	r0, r2, #2
   11468:	6038      	str	r0, [r7, #0]
   1146a:	1dc3      	adds	r3, r0, #7
   1146c:	f023 0307 	bic.w	r3, r3, #7
   11470:	ebad 0d03 	sub.w	sp, sp, r3
   11474:	466c      	mov	r4, sp
   11476:	ebad 0d03 	sub.w	sp, sp, r3
   1147a:	466d      	mov	r5, sp
   1147c:	f8d8 3000 	ldr.w	r3, [r8]
   11480:	ea4f 79e3 	mov.w	r9, r3, asr #31
   11484:	ea83 7ae3 	eor.w	sl, r3, r3, asr #31
   11488:	ebaa 7ae3 	sub.w	sl, sl, r3, asr #31
   1148c:	4633      	mov	r3, r6
   1148e:	464a      	mov	r2, r9
   11490:	4620      	mov	r0, r4
   11492:	f7ff fa12 	bl	108ba <cneg_n>
   11496:	4633      	mov	r3, r6
   11498:	4652      	mov	r2, sl
   1149a:	4621      	mov	r1, r4
   1149c:	4620      	mov	r0, r4
   1149e:	f7ff fa26 	bl	108ee <umul_n>
   114a2:	ea09 090a 	and.w	r9, r9, sl
   114a6:	eba0 0009 	sub.w	r0, r0, r9
   114aa:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
   114ae:	f8db 3000 	ldr.w	r3, [fp]
   114b2:	ea4f 79e3 	mov.w	r9, r3, asr #31
   114b6:	ea83 7ae3 	eor.w	sl, r3, r3, asr #31
   114ba:	ebaa 7ae3 	sub.w	sl, sl, r3, asr #31
   114be:	4633      	mov	r3, r6
   114c0:	464a      	mov	r2, r9
   114c2:	6879      	ldr	r1, [r7, #4]
   114c4:	4628      	mov	r0, r5
   114c6:	f7ff f9f8 	bl	108ba <cneg_n>
   114ca:	4633      	mov	r3, r6
   114cc:	4652      	mov	r2, sl
   114ce:	4629      	mov	r1, r5
   114d0:	4628      	mov	r0, r5
   114d2:	f7ff fa0c 	bl	108ee <umul_n>
   114d6:	ea09 090a 	and.w	r9, r9, sl
   114da:	eba0 0009 	sub.w	r0, r0, r9
   114de:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
   114e2:	68ba      	ldr	r2, [r7, #8]
   114e4:	2a00      	cmp	r2, #0
   114e6:	d03e      	beq.n	11566 <smul_n_shift_n+0x118>
   114e8:	1f21      	subs	r1, r4, #4
   114ea:	3d04      	subs	r5, #4
   114ec:	6838      	ldr	r0, [r7, #0]
   114ee:	f1a0 0c04 	sub.w	ip, r0, #4
   114f2:	44a4      	add	ip, r4
   114f4:	2200      	movs	r2, #0
   114f6:	4610      	mov	r0, r2
   114f8:	46ae      	mov	lr, r5
   114fa:	f851 3f04 	ldr.w	r3, [r1, #4]!
   114fe:	f85e 5f04 	ldr.w	r5, [lr, #4]!
   11502:	195b      	adds	r3, r3, r5
   11504:	eb40 0500 	adc.w	r5, r0, r0
   11508:	189b      	adds	r3, r3, r2
   1150a:	600b      	str	r3, [r1, #0]
   1150c:	f145 0200 	adc.w	r2, r5, #0
   11510:	4561      	cmp	r1, ip
   11512:	d1f2      	bne.n	114fa <smul_n_shift_n+0xac>
   11514:	6822      	ldr	r2, [r4, #0]
   11516:	b166      	cbz	r6, 11532 <smul_n_shift_n+0xe4>
   11518:	68fb      	ldr	r3, [r7, #12]
   1151a:	1f18      	subs	r0, r3, #4
   1151c:	2100      	movs	r1, #0
   1151e:	0f93      	lsrs	r3, r2, #30
   11520:	3101      	adds	r1, #1
   11522:	f854 2f04 	ldr.w	r2, [r4, #4]!
   11526:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   1152a:	f840 3f04 	str.w	r3, [r0, #4]!
   1152e:	428e      	cmp	r6, r1
   11530:	d8f5      	bhi.n	1151e <smul_n_shift_n+0xd0>
   11532:	f8d8 3000 	ldr.w	r3, [r8]
   11536:	ea83 73e2 	eor.w	r3, r3, r2, asr #31
   1153a:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
   1153e:	f8c8 3000 	str.w	r3, [r8]
   11542:	f8db 3000 	ldr.w	r3, [fp]
   11546:	ea83 73e2 	eor.w	r3, r3, r2, asr #31
   1154a:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
   1154e:	f8cb 3000 	str.w	r3, [fp]
   11552:	4633      	mov	r3, r6
   11554:	17d2      	asrs	r2, r2, #31
   11556:	68f9      	ldr	r1, [r7, #12]
   11558:	4608      	mov	r0, r1
   1155a:	f7ff f9ae 	bl	108ba <cneg_n>
   1155e:	3714      	adds	r7, #20
   11560:	46bd      	mov	sp, r7
   11562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11566:	6822      	ldr	r2, [r4, #0]
   11568:	e7d6      	b.n	11518 <smul_n_shift_n+0xca>

0001156a <quot_rem_n>:
   1156a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1156e:	b083      	sub	sp, #12
   11570:	af00      	add	r7, sp, #0
   11572:	6078      	str	r0, [r7, #4]
   11574:	4608      	mov	r0, r1
   11576:	6039      	str	r1, [r7, #0]
   11578:	1c5e      	adds	r6, r3, #1
   1157a:	00b6      	lsls	r6, r6, #2
   1157c:	1df1      	adds	r1, r6, #7
   1157e:	f021 0107 	bic.w	r1, r1, #7
   11582:	ebad 0d01 	sub.w	sp, sp, r1
   11586:	46eb      	mov	fp, sp
   11588:	2b00      	cmp	r3, #0
   1158a:	d055      	beq.n	11638 <quot_rem_n+0xce>
   1158c:	1f04      	subs	r4, r0, #4
   1158e:	f1ab 0504 	sub.w	r5, fp, #4
   11592:	f1a6 0c04 	sub.w	ip, r6, #4
   11596:	44a4      	add	ip, r4
   11598:	2000      	movs	r0, #0
   1159a:	f854 1f04 	ldr.w	r1, [r4, #4]!
   1159e:	fba1 1e02 	umull	r1, lr, r1, r2
   115a2:	1809      	adds	r1, r1, r0
   115a4:	f845 1f04 	str.w	r1, [r5, #4]!
   115a8:	f14e 0000 	adc.w	r0, lr, #0
   115ac:	4564      	cmp	r4, ip
   115ae:	d1f4      	bne.n	1159a <quot_rem_n+0x30>
   115b0:	4619      	mov	r1, r3
   115b2:	f84b 0021 	str.w	r0, [fp, r1, lsl #2]
   115b6:	6879      	ldr	r1, [r7, #4]
   115b8:	1f0d      	subs	r5, r1, #4
   115ba:	f1ab 0c04 	sub.w	ip, fp, #4
   115be:	f1a6 0a04 	sub.w	sl, r6, #4
   115c2:	448a      	add	sl, r1
   115c4:	4664      	mov	r4, ip
   115c6:	46ae      	mov	lr, r5
   115c8:	f04f 0900 	mov.w	r9, #0
   115cc:	46c8      	mov	r8, r9
   115ce:	f85e 1f04 	ldr.w	r1, [lr, #4]!
   115d2:	ebb1 0909 	subs.w	r9, r1, r9
   115d6:	eb68 0008 	sbc.w	r0, r8, r8
   115da:	f854 1f04 	ldr.w	r1, [r4, #4]!
   115de:	ebb9 0101 	subs.w	r1, r9, r1
   115e2:	f160 0900 	sbc.w	r9, r0, #0
   115e6:	6021      	str	r1, [r4, #0]
   115e8:	f009 0901 	and.w	r9, r9, #1
   115ec:	45d6      	cmp	lr, sl
   115ee:	d1ee      	bne.n	115ce <quot_rem_n+0x64>
   115f0:	f1c9 0800 	rsb	r8, r9, #0
   115f4:	b1bb      	cbz	r3, 11626 <quot_rem_n+0xbc>
   115f6:	6839      	ldr	r1, [r7, #0]
   115f8:	3904      	subs	r1, #4
   115fa:	3e08      	subs	r6, #8
   115fc:	44b3      	add	fp, r6
   115fe:	2400      	movs	r4, #0
   11600:	46a2      	mov	sl, r4
   11602:	f851 0f04 	ldr.w	r0, [r1, #4]!
   11606:	ea08 0000 	and.w	r0, r8, r0
   1160a:	f85c 6f04 	ldr.w	r6, [ip, #4]!
   1160e:	1936      	adds	r6, r6, r4
   11610:	eb4a 040a 	adc.w	r4, sl, sl
   11614:	1986      	adds	r6, r0, r6
   11616:	f144 0400 	adc.w	r4, r4, #0
   1161a:	f845 6f04 	str.w	r6, [r5, #4]!
   1161e:	f004 0401 	and.w	r4, r4, #1
   11622:	45dc      	cmp	ip, fp
   11624:	d1ed      	bne.n	11602 <quot_rem_n+0x98>
   11626:	eba2 0009 	sub.w	r0, r2, r9
   1162a:	687a      	ldr	r2, [r7, #4]
   1162c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   11630:	370c      	adds	r7, #12
   11632:	46bd      	mov	sp, r7
   11634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11638:	4618      	mov	r0, r3
   1163a:	4619      	mov	r1, r3
   1163c:	e7b9      	b.n	115b2 <quot_rem_n+0x48>

0001163e <POINTonE1_affine_Compress_BE>:
   1163e:	b570      	push	{r4, r5, r6, lr}
   11640:	b09a      	sub	sp, #104	; 0x68
   11642:	4605      	mov	r5, r0
   11644:	460c      	mov	r4, r1
   11646:	230c      	movs	r3, #12
   11648:	9300      	str	r3, [sp, #0]
   1164a:	4b15      	ldr	r3, [pc, #84]	; (116a0 <POINTonE1_affine_Compress_BE+0x62>)
   1164c:	4a15      	ldr	r2, [pc, #84]	; (116a4 <POINTonE1_affine_Compress_BE+0x66>)
   1164e:	a80e      	add	r0, sp, #56	; 0x38
   11650:	f7ff fcf0 	bl	11034 <from_mont_n>
   11654:	f105 0c30 	add.w	ip, r5, #48	; 0x30
   11658:	462a      	mov	r2, r5
   1165a:	f105 012f 	add.w	r1, r5, #47	; 0x2f
   1165e:	1a8b      	subs	r3, r1, r2
   11660:	f023 0003 	bic.w	r0, r3, #3
   11664:	ad1a      	add	r5, sp, #104	; 0x68
   11666:	4428      	add	r0, r5
   11668:	f003 0303 	and.w	r3, r3, #3
   1166c:	00db      	lsls	r3, r3, #3
   1166e:	f850 0c30 	ldr.w	r0, [r0, #-48]
   11672:	fa20 f303 	lsr.w	r3, r0, r3
   11676:	f802 3b01 	strb.w	r3, [r2], #1
   1167a:	4594      	cmp	ip, r2
   1167c:	d1ef      	bne.n	1165e <POINTonE1_affine_Compress_BE+0x20>
   1167e:	4d09      	ldr	r5, [pc, #36]	; (116a4 <POINTonE1_affine_Compress_BE+0x66>)
   11680:	260c      	movs	r6, #12
   11682:	9600      	str	r6, [sp, #0]
   11684:	4b06      	ldr	r3, [pc, #24]	; (116a0 <POINTonE1_affine_Compress_BE+0x62>)
   11686:	462a      	mov	r2, r5
   11688:	f104 0130 	add.w	r1, r4, #48	; 0x30
   1168c:	a802      	add	r0, sp, #8
   1168e:	f7ff fcd1 	bl	11034 <from_mont_n>
   11692:	4632      	mov	r2, r6
   11694:	4629      	mov	r1, r5
   11696:	a802      	add	r0, sp, #8
   11698:	f7ff fde1 	bl	1125e <sgn0_pty_mod_n>
   1169c:	b01a      	add	sp, #104	; 0x68
   1169e:	bd70      	pop	{r4, r5, r6, pc}
   116a0:	fffcfffd 	.word	0xfffcfffd
   116a4:	00028738 	.word	0x00028738

000116a8 <POINTonE1_affine_Serialize_BE>:
   116a8:	b570      	push	{r4, r5, r6, lr}
   116aa:	b08e      	sub	sp, #56	; 0x38
   116ac:	4605      	mov	r5, r0
   116ae:	460e      	mov	r6, r1
   116b0:	230c      	movs	r3, #12
   116b2:	9300      	str	r3, [sp, #0]
   116b4:	4b1e      	ldr	r3, [pc, #120]	; (11730 <POINTonE1_affine_Serialize_BE+0x88>)
   116b6:	4a1f      	ldr	r2, [pc, #124]	; (11734 <POINTonE1_affine_Serialize_BE+0x8c>)
   116b8:	a802      	add	r0, sp, #8
   116ba:	f7ff fcbb 	bl	11034 <from_mont_n>
   116be:	f105 0430 	add.w	r4, r5, #48	; 0x30
   116c2:	462a      	mov	r2, r5
   116c4:	f105 002f 	add.w	r0, r5, #47	; 0x2f
   116c8:	1a83      	subs	r3, r0, r2
   116ca:	f023 0103 	bic.w	r1, r3, #3
   116ce:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
   116d2:	4461      	add	r1, ip
   116d4:	f003 0303 	and.w	r3, r3, #3
   116d8:	00db      	lsls	r3, r3, #3
   116da:	f851 1c30 	ldr.w	r1, [r1, #-48]
   116de:	fa21 f303 	lsr.w	r3, r1, r3
   116e2:	f802 3b01 	strb.w	r3, [r2], #1
   116e6:	42a2      	cmp	r2, r4
   116e8:	d1ee      	bne.n	116c8 <POINTonE1_affine_Serialize_BE+0x20>
   116ea:	230c      	movs	r3, #12
   116ec:	9300      	str	r3, [sp, #0]
   116ee:	4b10      	ldr	r3, [pc, #64]	; (11730 <POINTonE1_affine_Serialize_BE+0x88>)
   116f0:	4a10      	ldr	r2, [pc, #64]	; (11734 <POINTonE1_affine_Serialize_BE+0x8c>)
   116f2:	f106 0130 	add.w	r1, r6, #48	; 0x30
   116f6:	a802      	add	r0, sp, #8
   116f8:	f7ff fc9c 	bl	11034 <from_mont_n>
   116fc:	f105 0160 	add.w	r1, r5, #96	; 0x60
   11700:	355f      	adds	r5, #95	; 0x5f
   11702:	1b2b      	subs	r3, r5, r4
   11704:	f023 0203 	bic.w	r2, r3, #3
   11708:	a80e      	add	r0, sp, #56	; 0x38
   1170a:	4402      	add	r2, r0
   1170c:	f003 0303 	and.w	r3, r3, #3
   11710:	00db      	lsls	r3, r3, #3
   11712:	f852 2c30 	ldr.w	r2, [r2, #-48]
   11716:	fa22 f303 	lsr.w	r3, r2, r3
   1171a:	f804 3b01 	strb.w	r3, [r4], #1
   1171e:	428c      	cmp	r4, r1
   11720:	d1ef      	bne.n	11702 <POINTonE1_affine_Serialize_BE+0x5a>
   11722:	220c      	movs	r2, #12
   11724:	4903      	ldr	r1, [pc, #12]	; (11734 <POINTonE1_affine_Serialize_BE+0x8c>)
   11726:	a802      	add	r0, sp, #8
   11728:	f7ff fd99 	bl	1125e <sgn0_pty_mod_n>
   1172c:	b00e      	add	sp, #56	; 0x38
   1172e:	bd70      	pop	{r4, r5, r6, pc}
   11730:	fffcfffd 	.word	0xfffcfffd
   11734:	00028738 	.word	0x00028738

00011738 <POINTonE2_affine_Compress_BE>:
   11738:	b5f0      	push	{r4, r5, r6, r7, lr}
   1173a:	b0a7      	sub	sp, #156	; 0x9c
   1173c:	4606      	mov	r6, r0
   1173e:	460d      	mov	r5, r1
   11740:	230c      	movs	r3, #12
   11742:	9300      	str	r3, [sp, #0]
   11744:	4b3e      	ldr	r3, [pc, #248]	; (11840 <POINTonE2_affine_Compress_BE+0x108>)
   11746:	4a3f      	ldr	r2, [pc, #252]	; (11844 <POINTonE2_affine_Compress_BE+0x10c>)
   11748:	3130      	adds	r1, #48	; 0x30
   1174a:	a81a      	add	r0, sp, #104	; 0x68
   1174c:	f7ff fc72 	bl	11034 <from_mont_n>
   11750:	f106 0430 	add.w	r4, r6, #48	; 0x30
   11754:	4632      	mov	r2, r6
   11756:	f106 002f 	add.w	r0, r6, #47	; 0x2f
   1175a:	1a83      	subs	r3, r0, r2
   1175c:	f023 0103 	bic.w	r1, r3, #3
   11760:	af26      	add	r7, sp, #152	; 0x98
   11762:	4439      	add	r1, r7
   11764:	f003 0303 	and.w	r3, r3, #3
   11768:	00db      	lsls	r3, r3, #3
   1176a:	f851 1c30 	ldr.w	r1, [r1, #-48]
   1176e:	fa21 f303 	lsr.w	r3, r1, r3
   11772:	f802 3b01 	strb.w	r3, [r2], #1
   11776:	42a2      	cmp	r2, r4
   11778:	d1ef      	bne.n	1175a <POINTonE2_affine_Compress_BE+0x22>
   1177a:	230c      	movs	r3, #12
   1177c:	9300      	str	r3, [sp, #0]
   1177e:	4b30      	ldr	r3, [pc, #192]	; (11840 <POINTonE2_affine_Compress_BE+0x108>)
   11780:	4a30      	ldr	r2, [pc, #192]	; (11844 <POINTonE2_affine_Compress_BE+0x10c>)
   11782:	4629      	mov	r1, r5
   11784:	a81a      	add	r0, sp, #104	; 0x68
   11786:	f7ff fc55 	bl	11034 <from_mont_n>
   1178a:	f106 0160 	add.w	r1, r6, #96	; 0x60
   1178e:	365f      	adds	r6, #95	; 0x5f
   11790:	1b33      	subs	r3, r6, r4
   11792:	f023 0203 	bic.w	r2, r3, #3
   11796:	a826      	add	r0, sp, #152	; 0x98
   11798:	4402      	add	r2, r0
   1179a:	f003 0303 	and.w	r3, r3, #3
   1179e:	00db      	lsls	r3, r3, #3
   117a0:	f852 2c30 	ldr.w	r2, [r2, #-48]
   117a4:	fa22 f303 	lsr.w	r3, r2, r3
   117a8:	f804 3b01 	strb.w	r3, [r4], #1
   117ac:	428c      	cmp	r4, r1
   117ae:	d1ef      	bne.n	11790 <POINTonE2_affine_Compress_BE+0x58>
   117b0:	4f23      	ldr	r7, [pc, #140]	; (11840 <POINTonE2_affine_Compress_BE+0x108>)
   117b2:	4c24      	ldr	r4, [pc, #144]	; (11844 <POINTonE2_affine_Compress_BE+0x10c>)
   117b4:	260c      	movs	r6, #12
   117b6:	9600      	str	r6, [sp, #0]
   117b8:	463b      	mov	r3, r7
   117ba:	4622      	mov	r2, r4
   117bc:	f105 0160 	add.w	r1, r5, #96	; 0x60
   117c0:	a802      	add	r0, sp, #8
   117c2:	f7ff fc37 	bl	11034 <from_mont_n>
   117c6:	9600      	str	r6, [sp, #0]
   117c8:	463b      	mov	r3, r7
   117ca:	4622      	mov	r2, r4
   117cc:	f105 0190 	add.w	r1, r5, #144	; 0x90
   117d0:	a80e      	add	r0, sp, #56	; 0x38
   117d2:	f7ff fc2f 	bl	11034 <from_mont_n>
   117d6:	4632      	mov	r2, r6
   117d8:	4621      	mov	r1, r4
   117da:	a802      	add	r0, sp, #8
   117dc:	f7ff fd3f 	bl	1125e <sgn0_pty_mod_n>
   117e0:	4605      	mov	r5, r0
   117e2:	4632      	mov	r2, r6
   117e4:	4621      	mov	r1, r4
   117e6:	a80e      	add	r0, sp, #56	; 0x38
   117e8:	f7ff fd39 	bl	1125e <sgn0_pty_mod_n>
   117ec:	aa0d      	add	r2, sp, #52	; 0x34
   117ee:	ab02      	add	r3, sp, #8
   117f0:	ae19      	add	r6, sp, #100	; 0x64
   117f2:	2100      	movs	r1, #0
   117f4:	f852 4f04 	ldr.w	r4, [r2, #4]!
   117f8:	4321      	orrs	r1, r4
   117fa:	42b2      	cmp	r2, r6
   117fc:	d1fa      	bne.n	117f4 <POINTonE2_affine_Compress_BE+0xbc>
   117fe:	1e4c      	subs	r4, r1, #1
   11800:	ea24 0101 	bic.w	r1, r4, r1
   11804:	0fcc      	lsrs	r4, r1, #31
   11806:	ea05 71e1 	and.w	r1, r5, r1, asr #31
   1180a:	3c01      	subs	r4, #1
   1180c:	4004      	ands	r4, r0
   1180e:	430c      	orrs	r4, r1
   11810:	f103 0630 	add.w	r6, r3, #48	; 0x30
   11814:	2200      	movs	r2, #0
   11816:	f853 1b04 	ldr.w	r1, [r3], #4
   1181a:	430a      	orrs	r2, r1
   1181c:	429e      	cmp	r6, r3
   1181e:	d1fa      	bne.n	11816 <POINTonE2_affine_Compress_BE+0xde>
   11820:	1e53      	subs	r3, r2, #1
   11822:	ea23 0202 	bic.w	r2, r3, r2
   11826:	0fd3      	lsrs	r3, r2, #31
   11828:	ea00 70e2 	and.w	r0, r0, r2, asr #31
   1182c:	3b01      	subs	r3, #1
   1182e:	402b      	ands	r3, r5
   11830:	4303      	orrs	r3, r0
   11832:	f003 0301 	and.w	r3, r3, #1
   11836:	f004 0002 	and.w	r0, r4, #2
   1183a:	4318      	orrs	r0, r3
   1183c:	b027      	add	sp, #156	; 0x9c
   1183e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11840:	fffcfffd 	.word	0xfffcfffd
   11844:	00028738 	.word	0x00028738

00011848 <POINTonE2_affine_Serialize_BE>:
   11848:	b5f0      	push	{r4, r5, r6, r7, lr}
   1184a:	b09b      	sub	sp, #108	; 0x6c
   1184c:	4606      	mov	r6, r0
   1184e:	460f      	mov	r7, r1
   11850:	230c      	movs	r3, #12
   11852:	9300      	str	r3, [sp, #0]
   11854:	4b52      	ldr	r3, [pc, #328]	; (119a0 <POINTonE2_affine_Serialize_BE+0x158>)
   11856:	4a53      	ldr	r2, [pc, #332]	; (119a4 <POINTonE2_affine_Serialize_BE+0x15c>)
   11858:	3130      	adds	r1, #48	; 0x30
   1185a:	a80e      	add	r0, sp, #56	; 0x38
   1185c:	f7ff fbea 	bl	11034 <from_mont_n>
   11860:	f106 0430 	add.w	r4, r6, #48	; 0x30
   11864:	4632      	mov	r2, r6
   11866:	f106 002f 	add.w	r0, r6, #47	; 0x2f
   1186a:	1a83      	subs	r3, r0, r2
   1186c:	f023 0103 	bic.w	r1, r3, #3
   11870:	ad1a      	add	r5, sp, #104	; 0x68
   11872:	4429      	add	r1, r5
   11874:	f003 0303 	and.w	r3, r3, #3
   11878:	00db      	lsls	r3, r3, #3
   1187a:	f851 1c30 	ldr.w	r1, [r1, #-48]
   1187e:	fa21 f303 	lsr.w	r3, r1, r3
   11882:	f802 3b01 	strb.w	r3, [r2], #1
   11886:	42a2      	cmp	r2, r4
   11888:	d1ef      	bne.n	1186a <POINTonE2_affine_Serialize_BE+0x22>
   1188a:	230c      	movs	r3, #12
   1188c:	9300      	str	r3, [sp, #0]
   1188e:	4b44      	ldr	r3, [pc, #272]	; (119a0 <POINTonE2_affine_Serialize_BE+0x158>)
   11890:	4a44      	ldr	r2, [pc, #272]	; (119a4 <POINTonE2_affine_Serialize_BE+0x15c>)
   11892:	4639      	mov	r1, r7
   11894:	a802      	add	r0, sp, #8
   11896:	f7ff fbcd 	bl	11034 <from_mont_n>
   1189a:	f106 0560 	add.w	r5, r6, #96	; 0x60
   1189e:	f106 015f 	add.w	r1, r6, #95	; 0x5f
   118a2:	1b0b      	subs	r3, r1, r4
   118a4:	f023 0203 	bic.w	r2, r3, #3
   118a8:	a81a      	add	r0, sp, #104	; 0x68
   118aa:	4402      	add	r2, r0
   118ac:	f003 0303 	and.w	r3, r3, #3
   118b0:	00db      	lsls	r3, r3, #3
   118b2:	f852 2c60 	ldr.w	r2, [r2, #-96]
   118b6:	fa22 f303 	lsr.w	r3, r2, r3
   118ba:	f804 3b01 	strb.w	r3, [r4], #1
   118be:	42ac      	cmp	r4, r5
   118c0:	d1ef      	bne.n	118a2 <POINTonE2_affine_Serialize_BE+0x5a>
   118c2:	230c      	movs	r3, #12
   118c4:	9300      	str	r3, [sp, #0]
   118c6:	4b36      	ldr	r3, [pc, #216]	; (119a0 <POINTonE2_affine_Serialize_BE+0x158>)
   118c8:	4a36      	ldr	r2, [pc, #216]	; (119a4 <POINTonE2_affine_Serialize_BE+0x15c>)
   118ca:	f107 0190 	add.w	r1, r7, #144	; 0x90
   118ce:	a80e      	add	r0, sp, #56	; 0x38
   118d0:	f7ff fbb0 	bl	11034 <from_mont_n>
   118d4:	f106 0490 	add.w	r4, r6, #144	; 0x90
   118d8:	f106 018f 	add.w	r1, r6, #143	; 0x8f
   118dc:	1b4b      	subs	r3, r1, r5
   118de:	f023 0203 	bic.w	r2, r3, #3
   118e2:	a81a      	add	r0, sp, #104	; 0x68
   118e4:	4402      	add	r2, r0
   118e6:	f003 0303 	and.w	r3, r3, #3
   118ea:	00db      	lsls	r3, r3, #3
   118ec:	f852 2c30 	ldr.w	r2, [r2, #-48]
   118f0:	fa22 f303 	lsr.w	r3, r2, r3
   118f4:	f805 3b01 	strb.w	r3, [r5], #1
   118f8:	42ac      	cmp	r4, r5
   118fa:	d1ef      	bne.n	118dc <POINTonE2_affine_Serialize_BE+0x94>
   118fc:	230c      	movs	r3, #12
   118fe:	9300      	str	r3, [sp, #0]
   11900:	4b27      	ldr	r3, [pc, #156]	; (119a0 <POINTonE2_affine_Serialize_BE+0x158>)
   11902:	4a28      	ldr	r2, [pc, #160]	; (119a4 <POINTonE2_affine_Serialize_BE+0x15c>)
   11904:	f107 0160 	add.w	r1, r7, #96	; 0x60
   11908:	a802      	add	r0, sp, #8
   1190a:	f7ff fb93 	bl	11034 <from_mont_n>
   1190e:	f106 01c0 	add.w	r1, r6, #192	; 0xc0
   11912:	36bf      	adds	r6, #191	; 0xbf
   11914:	1b33      	subs	r3, r6, r4
   11916:	f023 0203 	bic.w	r2, r3, #3
   1191a:	a81a      	add	r0, sp, #104	; 0x68
   1191c:	4402      	add	r2, r0
   1191e:	f003 0303 	and.w	r3, r3, #3
   11922:	00db      	lsls	r3, r3, #3
   11924:	f852 2c60 	ldr.w	r2, [r2, #-96]
   11928:	fa22 f303 	lsr.w	r3, r2, r3
   1192c:	f804 3b01 	strb.w	r3, [r4], #1
   11930:	428c      	cmp	r4, r1
   11932:	d1ef      	bne.n	11914 <POINTonE2_affine_Serialize_BE+0xcc>
   11934:	4c1b      	ldr	r4, [pc, #108]	; (119a4 <POINTonE2_affine_Serialize_BE+0x15c>)
   11936:	220c      	movs	r2, #12
   11938:	4621      	mov	r1, r4
   1193a:	a802      	add	r0, sp, #8
   1193c:	f7ff fc8f 	bl	1125e <sgn0_pty_mod_n>
   11940:	4605      	mov	r5, r0
   11942:	220c      	movs	r2, #12
   11944:	4621      	mov	r1, r4
   11946:	a80e      	add	r0, sp, #56	; 0x38
   11948:	f7ff fc89 	bl	1125e <sgn0_pty_mod_n>
   1194c:	aa0d      	add	r2, sp, #52	; 0x34
   1194e:	ab02      	add	r3, sp, #8
   11950:	ae19      	add	r6, sp, #100	; 0x64
   11952:	2100      	movs	r1, #0
   11954:	f852 4f04 	ldr.w	r4, [r2, #4]!
   11958:	4321      	orrs	r1, r4
   1195a:	42b2      	cmp	r2, r6
   1195c:	d1fa      	bne.n	11954 <POINTonE2_affine_Serialize_BE+0x10c>
   1195e:	1e4c      	subs	r4, r1, #1
   11960:	ea24 0101 	bic.w	r1, r4, r1
   11964:	0fcc      	lsrs	r4, r1, #31
   11966:	ea05 71e1 	and.w	r1, r5, r1, asr #31
   1196a:	3c01      	subs	r4, #1
   1196c:	4004      	ands	r4, r0
   1196e:	430c      	orrs	r4, r1
   11970:	f103 0630 	add.w	r6, r3, #48	; 0x30
   11974:	2200      	movs	r2, #0
   11976:	f853 1b04 	ldr.w	r1, [r3], #4
   1197a:	430a      	orrs	r2, r1
   1197c:	429e      	cmp	r6, r3
   1197e:	d1fa      	bne.n	11976 <POINTonE2_affine_Serialize_BE+0x12e>
   11980:	1e53      	subs	r3, r2, #1
   11982:	ea23 0202 	bic.w	r2, r3, r2
   11986:	0fd3      	lsrs	r3, r2, #31
   11988:	ea00 70e2 	and.w	r0, r0, r2, asr #31
   1198c:	3b01      	subs	r3, #1
   1198e:	402b      	ands	r3, r5
   11990:	4303      	orrs	r3, r0
   11992:	f003 0301 	and.w	r3, r3, #1
   11996:	f004 0002 	and.w	r0, r4, #2
   1199a:	4318      	orrs	r0, r3
   1199c:	b01b      	add	sp, #108	; 0x6c
   1199e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   119a0:	fffcfffd 	.word	0xfffcfffd
   119a4:	00028738 	.word	0x00028738

000119a8 <POINTonE1_affine_on_curve>:
   119a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   119aa:	b09b      	sub	sp, #108	; 0x6c
   119ac:	4604      	mov	r4, r0
   119ae:	4d24      	ldr	r5, [pc, #144]	; (11a40 <POINTonE1_affine_on_curve+0x98>)
   119b0:	260c      	movs	r6, #12
   119b2:	9601      	str	r6, [sp, #4]
   119b4:	4f23      	ldr	r7, [pc, #140]	; (11a44 <POINTonE1_affine_on_curve+0x9c>)
   119b6:	9700      	str	r7, [sp, #0]
   119b8:	462b      	mov	r3, r5
   119ba:	4602      	mov	r2, r0
   119bc:	4601      	mov	r1, r0
   119be:	a80e      	add	r0, sp, #56	; 0x38
   119c0:	f7ff f806 	bl	109d0 <mul_mont_n>
   119c4:	9601      	str	r6, [sp, #4]
   119c6:	9700      	str	r7, [sp, #0]
   119c8:	462b      	mov	r3, r5
   119ca:	4622      	mov	r2, r4
   119cc:	a90e      	add	r1, sp, #56	; 0x38
   119ce:	4608      	mov	r0, r1
   119d0:	f7fe fffe 	bl	109d0 <mul_mont_n>
   119d4:	9600      	str	r6, [sp, #0]
   119d6:	462b      	mov	r3, r5
   119d8:	f105 0260 	add.w	r2, r5, #96	; 0x60
   119dc:	a90e      	add	r1, sp, #56	; 0x38
   119de:	4608      	mov	r0, r1
   119e0:	f7ff f99e 	bl	10d20 <add_mod_n>
   119e4:	f104 0130 	add.w	r1, r4, #48	; 0x30
   119e8:	9601      	str	r6, [sp, #4]
   119ea:	9700      	str	r7, [sp, #0]
   119ec:	462b      	mov	r3, r5
   119ee:	460a      	mov	r2, r1
   119f0:	a802      	add	r0, sp, #8
   119f2:	f7fe ffed 	bl	109d0 <mul_mont_n>
   119f6:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
   119fa:	f10d 0e08 	add.w	lr, sp, #8
   119fe:	a81a      	add	r0, sp, #104	; 0x68
   11a00:	2100      	movs	r1, #0
   11a02:	f85c 3b04 	ldr.w	r3, [ip], #4
   11a06:	f85e 2b04 	ldr.w	r2, [lr], #4
   11a0a:	4053      	eors	r3, r2
   11a0c:	4319      	orrs	r1, r3
   11a0e:	4584      	cmp	ip, r0
   11a10:	d1f7      	bne.n	11a02 <POINTonE1_affine_on_curve+0x5a>
   11a12:	f101 3eff 	add.w	lr, r1, #4294967295
   11a16:	ea2e 0101 	bic.w	r1, lr, r1
   11a1a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
   11a1e:	1f23      	subs	r3, r4, #4
   11a20:	f104 0c5c 	add.w	ip, r4, #92	; 0x5c
   11a24:	2100      	movs	r1, #0
   11a26:	f853 2f04 	ldr.w	r2, [r3, #4]!
   11a2a:	4311      	orrs	r1, r2
   11a2c:	4563      	cmp	r3, ip
   11a2e:	d1fa      	bne.n	11a26 <POINTonE1_affine_on_curve+0x7e>
   11a30:	1e48      	subs	r0, r1, #1
   11a32:	ea20 0001 	bic.w	r0, r0, r1
   11a36:	ea4e 70d0 	orr.w	r0, lr, r0, lsr #31
   11a3a:	b01b      	add	sp, #108	; 0x6c
   11a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11a3e:	bf00      	nop
   11a40:	00028738 	.word	0x00028738
   11a44:	fffcfffd 	.word	0xfffcfffd

00011a48 <cneg_mod_n>:
   11a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a4c:	b083      	sub	sp, #12
   11a4e:	af00      	add	r7, sp, #0
   11a50:	607a      	str	r2, [r7, #4]
   11a52:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
   11a56:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
   11a5a:	f10b 0207 	add.w	r2, fp, #7
   11a5e:	f022 0207 	bic.w	r2, r2, #7
   11a62:	ebad 0d02 	sub.w	sp, sp, r2
   11a66:	f1ba 0f00 	cmp.w	sl, #0
   11a6a:	d045      	beq.n	11af8 <cneg_mod_n+0xb0>
   11a6c:	466d      	mov	r5, sp
   11a6e:	f1a3 0e04 	sub.w	lr, r3, #4
   11a72:	1f0c      	subs	r4, r1, #4
   11a74:	f1a5 0904 	sub.w	r9, r5, #4
   11a78:	44f3      	add	fp, lr
   11a7a:	46a0      	mov	r8, r4
   11a7c:	2300      	movs	r3, #0
   11a7e:	461e      	mov	r6, r3
   11a80:	f85e 2f04 	ldr.w	r2, [lr, #4]!
   11a84:	1ad3      	subs	r3, r2, r3
   11a86:	eb66 0c06 	sbc.w	ip, r6, r6
   11a8a:	f858 2f04 	ldr.w	r2, [r8, #4]!
   11a8e:	1a9a      	subs	r2, r3, r2
   11a90:	f16c 0300 	sbc.w	r3, ip, #0
   11a94:	f849 2f04 	str.w	r2, [r9, #4]!
   11a98:	f003 0301 	and.w	r3, r3, #1
   11a9c:	45de      	cmp	lr, fp
   11a9e:	d1ef      	bne.n	11a80 <cneg_mod_n+0x38>
   11aa0:	f03a 4c40 	bics.w	ip, sl, #3221225472	; 0xc0000000
   11aa4:	d02c      	beq.n	11b00 <cneg_mod_n+0xb8>
   11aa6:	1f0e      	subs	r6, r1, #4
   11aa8:	eb06 068c 	add.w	r6, r6, ip, lsl #2
   11aac:	2300      	movs	r3, #0
   11aae:	f854 2f04 	ldr.w	r2, [r4, #4]!
   11ab2:	4313      	orrs	r3, r2
   11ab4:	42b4      	cmp	r4, r6
   11ab6:	d1fa      	bne.n	11aae <cneg_mod_n+0x66>
   11ab8:	1e5a      	subs	r2, r3, #1
   11aba:	ea22 0303 	bic.w	r3, r2, r3
   11abe:	f8d7 c004 	ldr.w	ip, [r7, #4]
   11ac2:	2b00      	cmp	r3, #0
   11ac4:	bfb4      	ite	lt
   11ac6:	f04f 0c00 	movlt.w	ip, #0
   11aca:	f00c 0c01 	andge.w	ip, ip, #1
   11ace:	f1cc 0600 	rsb	r6, ip, #0
   11ad2:	3904      	subs	r1, #4
   11ad4:	3d04      	subs	r5, #4
   11ad6:	3804      	subs	r0, #4
   11ad8:	2400      	movs	r4, #0
   11ada:	f10c 3cff 	add.w	ip, ip, #4294967295
   11ade:	f851 3f04 	ldr.w	r3, [r1, #4]!
   11ae2:	ea0c 0303 	and.w	r3, ip, r3
   11ae6:	f855 2f04 	ldr.w	r2, [r5, #4]!
   11aea:	4032      	ands	r2, r6
   11aec:	4313      	orrs	r3, r2
   11aee:	f840 3f04 	str.w	r3, [r0, #4]!
   11af2:	3401      	adds	r4, #1
   11af4:	45a2      	cmp	sl, r4
   11af6:	d8f2      	bhi.n	11ade <cneg_mod_n+0x96>
   11af8:	370c      	adds	r7, #12
   11afa:	46bd      	mov	sp, r7
   11afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b00:	4666      	mov	r6, ip
   11b02:	e7e6      	b.n	11ad2 <cneg_mod_n+0x8a>

00011b04 <POINTonE1_cneg>:
   11b04:	b500      	push	{lr}
   11b06:	b083      	sub	sp, #12
   11b08:	460a      	mov	r2, r1
   11b0a:	3030      	adds	r0, #48	; 0x30
   11b0c:	230c      	movs	r3, #12
   11b0e:	9300      	str	r3, [sp, #0]
   11b10:	4b03      	ldr	r3, [pc, #12]	; (11b20 <POINTonE1_cneg+0x1c>)
   11b12:	4601      	mov	r1, r0
   11b14:	f7ff ff98 	bl	11a48 <cneg_mod_n>
   11b18:	b003      	add	sp, #12
   11b1a:	f85d fb04 	ldr.w	pc, [sp], #4
   11b1e:	bf00      	nop
   11b20:	00028738 	.word	0x00028738

00011b24 <POINTonE1_gather_booth_w4>:
   11b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11b26:	460d      	mov	r5, r1
   11b28:	f3c2 1100 	ubfx	r1, r2, #4, #1
   11b2c:	f002 070f 	and.w	r7, r2, #15
   11b30:	4603      	mov	r3, r0
   11b32:	f100 0490 	add.w	r4, r0, #144	; 0x90
   11b36:	2200      	movs	r2, #0
   11b38:	f843 2b04 	str.w	r2, [r3], #4
   11b3c:	42a3      	cmp	r3, r4
   11b3e:	d1fb      	bne.n	11b38 <POINTonE1_gather_booth_w4+0x14>
   11b40:	358c      	adds	r5, #140	; 0x8c
   11b42:	2601      	movs	r6, #1
   11b44:	ea87 0e06 	eor.w	lr, r7, r6
   11b48:	fa5f fe8e 	uxtb.w	lr, lr
   11b4c:	f10e 3eff 	add.w	lr, lr, #4294967295
   11b50:	ea4f 7eee 	mov.w	lr, lr, asr #31
   11b54:	f1a5 0c90 	sub.w	ip, r5, #144	; 0x90
   11b58:	1f02      	subs	r2, r0, #4
   11b5a:	f852 4f04 	ldr.w	r4, [r2, #4]!
   11b5e:	f85c 3f04 	ldr.w	r3, [ip, #4]!
   11b62:	4063      	eors	r3, r4
   11b64:	ea03 030e 	and.w	r3, r3, lr
   11b68:	4063      	eors	r3, r4
   11b6a:	6013      	str	r3, [r2, #0]
   11b6c:	45ac      	cmp	ip, r5
   11b6e:	d1f4      	bne.n	11b5a <POINTonE1_gather_booth_w4+0x36>
   11b70:	3601      	adds	r6, #1
   11b72:	3590      	adds	r5, #144	; 0x90
   11b74:	2e09      	cmp	r6, #9
   11b76:	d1e5      	bne.n	11b44 <POINTonE1_gather_booth_w4+0x20>
   11b78:	f7ff ffc4 	bl	11b04 <POINTonE1_cneg>
   11b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011b7e <POINTonE1_gather_booth_w5>:
   11b7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11b80:	460d      	mov	r5, r1
   11b82:	f3c2 1140 	ubfx	r1, r2, #5, #1
   11b86:	f002 071f 	and.w	r7, r2, #31
   11b8a:	4603      	mov	r3, r0
   11b8c:	f100 0490 	add.w	r4, r0, #144	; 0x90
   11b90:	2200      	movs	r2, #0
   11b92:	f843 2b04 	str.w	r2, [r3], #4
   11b96:	42a3      	cmp	r3, r4
   11b98:	d1fb      	bne.n	11b92 <POINTonE1_gather_booth_w5+0x14>
   11b9a:	358c      	adds	r5, #140	; 0x8c
   11b9c:	2601      	movs	r6, #1
   11b9e:	e003      	b.n	11ba8 <POINTonE1_gather_booth_w5+0x2a>
   11ba0:	3601      	adds	r6, #1
   11ba2:	3590      	adds	r5, #144	; 0x90
   11ba4:	2e11      	cmp	r6, #17
   11ba6:	d016      	beq.n	11bd6 <POINTonE1_gather_booth_w5+0x58>
   11ba8:	ea87 0e06 	eor.w	lr, r7, r6
   11bac:	fa5f fe8e 	uxtb.w	lr, lr
   11bb0:	f10e 3eff 	add.w	lr, lr, #4294967295
   11bb4:	ea4f 7eee 	mov.w	lr, lr, asr #31
   11bb8:	f1a5 0c90 	sub.w	ip, r5, #144	; 0x90
   11bbc:	1f02      	subs	r2, r0, #4
   11bbe:	f852 4f04 	ldr.w	r4, [r2, #4]!
   11bc2:	f85c 3f04 	ldr.w	r3, [ip, #4]!
   11bc6:	4063      	eors	r3, r4
   11bc8:	ea03 030e 	and.w	r3, r3, lr
   11bcc:	4063      	eors	r3, r4
   11bce:	6013      	str	r3, [r2, #0]
   11bd0:	45ac      	cmp	ip, r5
   11bd2:	d1f4      	bne.n	11bbe <POINTonE1_gather_booth_w5+0x40>
   11bd4:	e7e4      	b.n	11ba0 <POINTonE1_gather_booth_w5+0x22>
   11bd6:	f7ff ff95 	bl	11b04 <POINTonE1_cneg>
   11bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011bdc <POINTonE2_cneg>:
   11bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
   11bde:	b083      	sub	sp, #12
   11be0:	4604      	mov	r4, r0
   11be2:	460d      	mov	r5, r1
   11be4:	3060      	adds	r0, #96	; 0x60
   11be6:	4e09      	ldr	r6, [pc, #36]	; (11c0c <POINTonE2_cneg+0x30>)
   11be8:	270c      	movs	r7, #12
   11bea:	9700      	str	r7, [sp, #0]
   11bec:	4633      	mov	r3, r6
   11bee:	460a      	mov	r2, r1
   11bf0:	4601      	mov	r1, r0
   11bf2:	f7ff ff29 	bl	11a48 <cneg_mod_n>
   11bf6:	f104 0090 	add.w	r0, r4, #144	; 0x90
   11bfa:	9700      	str	r7, [sp, #0]
   11bfc:	4633      	mov	r3, r6
   11bfe:	462a      	mov	r2, r5
   11c00:	4601      	mov	r1, r0
   11c02:	f7ff ff21 	bl	11a48 <cneg_mod_n>
   11c06:	b003      	add	sp, #12
   11c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11c0a:	bf00      	nop
   11c0c:	00028738 	.word	0x00028738

00011c10 <POINTonE2_gather_booth_w4>:
   11c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11c12:	460d      	mov	r5, r1
   11c14:	f3c2 1100 	ubfx	r1, r2, #4, #1
   11c18:	f002 070f 	and.w	r7, r2, #15
   11c1c:	4603      	mov	r3, r0
   11c1e:	f500 7490 	add.w	r4, r0, #288	; 0x120
   11c22:	2200      	movs	r2, #0
   11c24:	f843 2b04 	str.w	r2, [r3], #4
   11c28:	42a3      	cmp	r3, r4
   11c2a:	d1fb      	bne.n	11c24 <POINTonE2_gather_booth_w4+0x14>
   11c2c:	f505 758e 	add.w	r5, r5, #284	; 0x11c
   11c30:	2601      	movs	r6, #1
   11c32:	ea87 0e06 	eor.w	lr, r7, r6
   11c36:	fa5f fe8e 	uxtb.w	lr, lr
   11c3a:	f10e 3eff 	add.w	lr, lr, #4294967295
   11c3e:	ea4f 7eee 	mov.w	lr, lr, asr #31
   11c42:	f5a5 7c90 	sub.w	ip, r5, #288	; 0x120
   11c46:	1f02      	subs	r2, r0, #4
   11c48:	f852 4f04 	ldr.w	r4, [r2, #4]!
   11c4c:	f85c 3f04 	ldr.w	r3, [ip, #4]!
   11c50:	4063      	eors	r3, r4
   11c52:	ea03 030e 	and.w	r3, r3, lr
   11c56:	4063      	eors	r3, r4
   11c58:	6013      	str	r3, [r2, #0]
   11c5a:	45ac      	cmp	ip, r5
   11c5c:	d1f4      	bne.n	11c48 <POINTonE2_gather_booth_w4+0x38>
   11c5e:	3601      	adds	r6, #1
   11c60:	f505 7590 	add.w	r5, r5, #288	; 0x120
   11c64:	2e09      	cmp	r6, #9
   11c66:	d1e4      	bne.n	11c32 <POINTonE2_gather_booth_w4+0x22>
   11c68:	f7ff ffb8 	bl	11bdc <POINTonE2_cneg>
   11c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011c6e <POINTonE2_gather_booth_w5>:
   11c6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11c70:	460d      	mov	r5, r1
   11c72:	f3c2 1140 	ubfx	r1, r2, #5, #1
   11c76:	f002 071f 	and.w	r7, r2, #31
   11c7a:	4603      	mov	r3, r0
   11c7c:	f500 7490 	add.w	r4, r0, #288	; 0x120
   11c80:	2200      	movs	r2, #0
   11c82:	f843 2b04 	str.w	r2, [r3], #4
   11c86:	42a3      	cmp	r3, r4
   11c88:	d1fb      	bne.n	11c82 <POINTonE2_gather_booth_w5+0x14>
   11c8a:	f505 758e 	add.w	r5, r5, #284	; 0x11c
   11c8e:	2601      	movs	r6, #1
   11c90:	e004      	b.n	11c9c <POINTonE2_gather_booth_w5+0x2e>
   11c92:	3601      	adds	r6, #1
   11c94:	f505 7590 	add.w	r5, r5, #288	; 0x120
   11c98:	2e11      	cmp	r6, #17
   11c9a:	d016      	beq.n	11cca <POINTonE2_gather_booth_w5+0x5c>
   11c9c:	ea87 0e06 	eor.w	lr, r7, r6
   11ca0:	fa5f fe8e 	uxtb.w	lr, lr
   11ca4:	f10e 3eff 	add.w	lr, lr, #4294967295
   11ca8:	ea4f 7eee 	mov.w	lr, lr, asr #31
   11cac:	f5a5 7c90 	sub.w	ip, r5, #288	; 0x120
   11cb0:	1f02      	subs	r2, r0, #4
   11cb2:	f852 4f04 	ldr.w	r4, [r2, #4]!
   11cb6:	f85c 3f04 	ldr.w	r3, [ip, #4]!
   11cba:	4063      	eors	r3, r4
   11cbc:	ea03 030e 	and.w	r3, r3, lr
   11cc0:	4063      	eors	r3, r4
   11cc2:	6013      	str	r3, [r2, #0]
   11cc4:	45ac      	cmp	ip, r5
   11cc6:	d1f4      	bne.n	11cb2 <POINTonE2_gather_booth_w5+0x44>
   11cc8:	e7e3      	b.n	11c92 <POINTonE2_gather_booth_w5+0x24>
   11cca:	f7ff ff87 	bl	11bdc <POINTonE2_cneg>
   11cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011cd0 <neg_fp6>:
   11cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   11cd2:	b083      	sub	sp, #12
   11cd4:	4604      	mov	r4, r0
   11cd6:	460d      	mov	r5, r1
   11cd8:	4e1a      	ldr	r6, [pc, #104]	; (11d44 <neg_fp6+0x74>)
   11cda:	270c      	movs	r7, #12
   11cdc:	9700      	str	r7, [sp, #0]
   11cde:	4633      	mov	r3, r6
   11ce0:	2201      	movs	r2, #1
   11ce2:	f7ff feb1 	bl	11a48 <cneg_mod_n>
   11ce6:	9700      	str	r7, [sp, #0]
   11ce8:	4633      	mov	r3, r6
   11cea:	2201      	movs	r2, #1
   11cec:	f105 0130 	add.w	r1, r5, #48	; 0x30
   11cf0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   11cf4:	f7ff fea8 	bl	11a48 <cneg_mod_n>
   11cf8:	9700      	str	r7, [sp, #0]
   11cfa:	4633      	mov	r3, r6
   11cfc:	2201      	movs	r2, #1
   11cfe:	f105 0160 	add.w	r1, r5, #96	; 0x60
   11d02:	f104 0060 	add.w	r0, r4, #96	; 0x60
   11d06:	f7ff fe9f 	bl	11a48 <cneg_mod_n>
   11d0a:	9700      	str	r7, [sp, #0]
   11d0c:	4633      	mov	r3, r6
   11d0e:	2201      	movs	r2, #1
   11d10:	f105 0190 	add.w	r1, r5, #144	; 0x90
   11d14:	f104 0090 	add.w	r0, r4, #144	; 0x90
   11d18:	f7ff fe96 	bl	11a48 <cneg_mod_n>
   11d1c:	9700      	str	r7, [sp, #0]
   11d1e:	4633      	mov	r3, r6
   11d20:	2201      	movs	r2, #1
   11d22:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
   11d26:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   11d2a:	f7ff fe8d 	bl	11a48 <cneg_mod_n>
   11d2e:	9700      	str	r7, [sp, #0]
   11d30:	4633      	mov	r3, r6
   11d32:	2201      	movs	r2, #1
   11d34:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   11d38:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   11d3c:	f7ff fe84 	bl	11a48 <cneg_mod_n>
   11d40:	b003      	add	sp, #12
   11d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11d44:	00028738 	.word	0x00028738

00011d48 <conjugate_fp12>:
   11d48:	b508      	push	{r3, lr}
   11d4a:	f500 7090 	add.w	r0, r0, #288	; 0x120
   11d4e:	4601      	mov	r1, r0
   11d50:	f7ff ffbe 	bl	11cd0 <neg_fp6>
   11d54:	bd08      	pop	{r3, pc}

00011d56 <POINTonE1_is_equal>:
   11d56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d5a:	b0cd      	sub	sp, #308	; 0x134
   11d5c:	4681      	mov	r9, r0
   11d5e:	4688      	mov	r8, r1
   11d60:	f100 0a60 	add.w	sl, r0, #96	; 0x60
   11d64:	f100 035c 	add.w	r3, r0, #92	; 0x5c
   11d68:	308c      	adds	r0, #140	; 0x8c
   11d6a:	2200      	movs	r2, #0
   11d6c:	f853 1f04 	ldr.w	r1, [r3, #4]!
   11d70:	430a      	orrs	r2, r1
   11d72:	4283      	cmp	r3, r0
   11d74:	d1fa      	bne.n	11d6c <POINTonE1_is_equal+0x16>
   11d76:	1e53      	subs	r3, r2, #1
   11d78:	ea23 0202 	bic.w	r2, r3, r2
   11d7c:	0fd3      	lsrs	r3, r2, #31
   11d7e:	9303      	str	r3, [sp, #12]
   11d80:	f108 0b60 	add.w	fp, r8, #96	; 0x60
   11d84:	f108 035c 	add.w	r3, r8, #92	; 0x5c
   11d88:	f108 008c 	add.w	r0, r8, #140	; 0x8c
   11d8c:	2200      	movs	r2, #0
   11d8e:	f853 1f04 	ldr.w	r1, [r3, #4]!
   11d92:	430a      	orrs	r2, r1
   11d94:	4283      	cmp	r3, r0
   11d96:	d1fa      	bne.n	11d8e <POINTonE1_is_equal+0x38>
   11d98:	1e54      	subs	r4, r2, #1
   11d9a:	ea24 0402 	bic.w	r4, r4, r2
   11d9e:	0fe4      	lsrs	r4, r4, #31
   11da0:	4d2e      	ldr	r5, [pc, #184]	; (11e5c <POINTonE1_is_equal+0x106>)
   11da2:	270c      	movs	r7, #12
   11da4:	9701      	str	r7, [sp, #4]
   11da6:	4e2e      	ldr	r6, [pc, #184]	; (11e60 <POINTonE1_is_equal+0x10a>)
   11da8:	9600      	str	r6, [sp, #0]
   11daa:	462b      	mov	r3, r5
   11dac:	4652      	mov	r2, sl
   11dae:	4651      	mov	r1, sl
   11db0:	a840      	add	r0, sp, #256	; 0x100
   11db2:	f7fe fe0d 	bl	109d0 <mul_mont_n>
   11db6:	9701      	str	r7, [sp, #4]
   11db8:	9600      	str	r6, [sp, #0]
   11dba:	462b      	mov	r3, r5
   11dbc:	465a      	mov	r2, fp
   11dbe:	4659      	mov	r1, fp
   11dc0:	a834      	add	r0, sp, #208	; 0xd0
   11dc2:	f7fe fe05 	bl	109d0 <mul_mont_n>
   11dc6:	9701      	str	r7, [sp, #4]
   11dc8:	9600      	str	r6, [sp, #0]
   11dca:	462b      	mov	r3, r5
   11dcc:	aa34      	add	r2, sp, #208	; 0xd0
   11dce:	4649      	mov	r1, r9
   11dd0:	a81c      	add	r0, sp, #112	; 0x70
   11dd2:	f7fe fdfd 	bl	109d0 <mul_mont_n>
   11dd6:	9701      	str	r7, [sp, #4]
   11dd8:	9600      	str	r6, [sp, #0]
   11dda:	462b      	mov	r3, r5
   11ddc:	aa40      	add	r2, sp, #256	; 0x100
   11dde:	4641      	mov	r1, r8
   11de0:	a804      	add	r0, sp, #16
   11de2:	f7fe fdf5 	bl	109d0 <mul_mont_n>
   11de6:	9701      	str	r7, [sp, #4]
   11de8:	9600      	str	r6, [sp, #0]
   11dea:	462b      	mov	r3, r5
   11dec:	465a      	mov	r2, fp
   11dee:	f109 0130 	add.w	r1, r9, #48	; 0x30
   11df2:	a828      	add	r0, sp, #160	; 0xa0
   11df4:	f7fe fdec 	bl	109d0 <mul_mont_n>
   11df8:	9701      	str	r7, [sp, #4]
   11dfa:	9600      	str	r6, [sp, #0]
   11dfc:	462b      	mov	r3, r5
   11dfe:	4652      	mov	r2, sl
   11e00:	f108 0130 	add.w	r1, r8, #48	; 0x30
   11e04:	a810      	add	r0, sp, #64	; 0x40
   11e06:	f7fe fde3 	bl	109d0 <mul_mont_n>
   11e0a:	9701      	str	r7, [sp, #4]
   11e0c:	9600      	str	r6, [sp, #0]
   11e0e:	462b      	mov	r3, r5
   11e10:	aa34      	add	r2, sp, #208	; 0xd0
   11e12:	a928      	add	r1, sp, #160	; 0xa0
   11e14:	4608      	mov	r0, r1
   11e16:	f7fe fddb 	bl	109d0 <mul_mont_n>
   11e1a:	9701      	str	r7, [sp, #4]
   11e1c:	9600      	str	r6, [sp, #0]
   11e1e:	462b      	mov	r3, r5
   11e20:	aa40      	add	r2, sp, #256	; 0x100
   11e22:	a910      	add	r1, sp, #64	; 0x40
   11e24:	4608      	mov	r0, r1
   11e26:	f7fe fdd3 	bl	109d0 <mul_mont_n>
   11e2a:	aa1b      	add	r2, sp, #108	; 0x6c
   11e2c:	eb0d 0107 	add.w	r1, sp, r7
   11e30:	ae33      	add	r6, sp, #204	; 0xcc
   11e32:	2000      	movs	r0, #0
   11e34:	f852 3f04 	ldr.w	r3, [r2, #4]!
   11e38:	f851 5f04 	ldr.w	r5, [r1, #4]!
   11e3c:	406b      	eors	r3, r5
   11e3e:	4318      	orrs	r0, r3
   11e40:	42b2      	cmp	r2, r6
   11e42:	d1f7      	bne.n	11e34 <POINTonE1_is_equal+0xde>
   11e44:	1e43      	subs	r3, r0, #1
   11e46:	ea23 0000 	bic.w	r0, r3, r0
   11e4a:	9b03      	ldr	r3, [sp, #12]
   11e4c:	405c      	eors	r4, r3
   11e4e:	f084 0401 	eor.w	r4, r4, #1
   11e52:	ea04 70d0 	and.w	r0, r4, r0, lsr #31
   11e56:	b04d      	add	sp, #308	; 0x134
   11e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e5c:	00028738 	.word	0x00028738
   11e60:	fffcfffd 	.word	0xfffcfffd

00011e64 <POINTonE1_double>:
   11e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11e68:	b0a6      	sub	sp, #152	; 0x98
   11e6a:	4606      	mov	r6, r0
   11e6c:	460f      	mov	r7, r1
   11e6e:	4c4c      	ldr	r4, [pc, #304]	; (11fa0 <POINTonE1_double+0x13c>)
   11e70:	250c      	movs	r5, #12
   11e72:	9501      	str	r5, [sp, #4]
   11e74:	f8df 812c 	ldr.w	r8, [pc, #300]	; 11fa4 <POINTonE1_double+0x140>
   11e78:	f8cd 8000 	str.w	r8, [sp]
   11e7c:	4623      	mov	r3, r4
   11e7e:	460a      	mov	r2, r1
   11e80:	a81a      	add	r0, sp, #104	; 0x68
   11e82:	f7fe fda5 	bl	109d0 <mul_mont_n>
   11e86:	f107 0a30 	add.w	sl, r7, #48	; 0x30
   11e8a:	9501      	str	r5, [sp, #4]
   11e8c:	f8cd 8000 	str.w	r8, [sp]
   11e90:	4623      	mov	r3, r4
   11e92:	4652      	mov	r2, sl
   11e94:	4651      	mov	r1, sl
   11e96:	a80e      	add	r0, sp, #56	; 0x38
   11e98:	f7fe fd9a 	bl	109d0 <mul_mont_n>
   11e9c:	9501      	str	r5, [sp, #4]
   11e9e:	f8cd 8000 	str.w	r8, [sp]
   11ea2:	4623      	mov	r3, r4
   11ea4:	aa0e      	add	r2, sp, #56	; 0x38
   11ea6:	4611      	mov	r1, r2
   11ea8:	a802      	add	r0, sp, #8
   11eaa:	f7fe fd91 	bl	109d0 <mul_mont_n>
   11eae:	9500      	str	r5, [sp, #0]
   11eb0:	4623      	mov	r3, r4
   11eb2:	463a      	mov	r2, r7
   11eb4:	a90e      	add	r1, sp, #56	; 0x38
   11eb6:	4608      	mov	r0, r1
   11eb8:	f7fe ff32 	bl	10d20 <add_mod_n>
   11ebc:	9501      	str	r5, [sp, #4]
   11ebe:	f8cd 8000 	str.w	r8, [sp]
   11ec2:	4623      	mov	r3, r4
   11ec4:	aa0e      	add	r2, sp, #56	; 0x38
   11ec6:	4611      	mov	r1, r2
   11ec8:	4610      	mov	r0, r2
   11eca:	f7fe fd81 	bl	109d0 <mul_mont_n>
   11ece:	9500      	str	r5, [sp, #0]
   11ed0:	4623      	mov	r3, r4
   11ed2:	aa1a      	add	r2, sp, #104	; 0x68
   11ed4:	a90e      	add	r1, sp, #56	; 0x38
   11ed6:	4608      	mov	r0, r1
   11ed8:	f7fe fbcc 	bl	10674 <sub_mod_n>
   11edc:	9500      	str	r5, [sp, #0]
   11ede:	4623      	mov	r3, r4
   11ee0:	aa02      	add	r2, sp, #8
   11ee2:	a90e      	add	r1, sp, #56	; 0x38
   11ee4:	4608      	mov	r0, r1
   11ee6:	f7fe fbc5 	bl	10674 <sub_mod_n>
   11eea:	9500      	str	r5, [sp, #0]
   11eec:	4623      	mov	r3, r4
   11eee:	aa0e      	add	r2, sp, #56	; 0x38
   11ef0:	4611      	mov	r1, r2
   11ef2:	4610      	mov	r0, r2
   11ef4:	f7fe ff14 	bl	10d20 <add_mod_n>
   11ef8:	462b      	mov	r3, r5
   11efa:	4622      	mov	r2, r4
   11efc:	a91a      	add	r1, sp, #104	; 0x68
   11efe:	4608      	mov	r0, r1
   11f00:	f7fe ff96 	bl	10e30 <mul_by_3_mod_n>
   11f04:	9501      	str	r5, [sp, #4]
   11f06:	f8cd 8000 	str.w	r8, [sp]
   11f0a:	4623      	mov	r3, r4
   11f0c:	aa1a      	add	r2, sp, #104	; 0x68
   11f0e:	4611      	mov	r1, r2
   11f10:	4630      	mov	r0, r6
   11f12:	f7fe fd5d 	bl	109d0 <mul_mont_n>
   11f16:	9500      	str	r5, [sp, #0]
   11f18:	4623      	mov	r3, r4
   11f1a:	aa0e      	add	r2, sp, #56	; 0x38
   11f1c:	4631      	mov	r1, r6
   11f1e:	4630      	mov	r0, r6
   11f20:	f7fe fba8 	bl	10674 <sub_mod_n>
   11f24:	9500      	str	r5, [sp, #0]
   11f26:	4623      	mov	r3, r4
   11f28:	aa0e      	add	r2, sp, #56	; 0x38
   11f2a:	4631      	mov	r1, r6
   11f2c:	4630      	mov	r0, r6
   11f2e:	f7fe fba1 	bl	10674 <sub_mod_n>
   11f32:	f106 0960 	add.w	r9, r6, #96	; 0x60
   11f36:	f107 0160 	add.w	r1, r7, #96	; 0x60
   11f3a:	9500      	str	r5, [sp, #0]
   11f3c:	4623      	mov	r3, r4
   11f3e:	460a      	mov	r2, r1
   11f40:	4648      	mov	r0, r9
   11f42:	f7fe feed 	bl	10d20 <add_mod_n>
   11f46:	9501      	str	r5, [sp, #4]
   11f48:	f8cd 8000 	str.w	r8, [sp]
   11f4c:	4623      	mov	r3, r4
   11f4e:	4652      	mov	r2, sl
   11f50:	4649      	mov	r1, r9
   11f52:	4648      	mov	r0, r9
   11f54:	f7fe fd3c 	bl	109d0 <mul_mont_n>
   11f58:	9500      	str	r5, [sp, #0]
   11f5a:	4623      	mov	r3, r4
   11f5c:	2203      	movs	r2, #3
   11f5e:	a902      	add	r1, sp, #8
   11f60:	4608      	mov	r0, r1
   11f62:	f7ff f805 	bl	10f70 <lshift_mod_n>
   11f66:	f106 0730 	add.w	r7, r6, #48	; 0x30
   11f6a:	9500      	str	r5, [sp, #0]
   11f6c:	4623      	mov	r3, r4
   11f6e:	4632      	mov	r2, r6
   11f70:	a90e      	add	r1, sp, #56	; 0x38
   11f72:	4638      	mov	r0, r7
   11f74:	f7fe fb7e 	bl	10674 <sub_mod_n>
   11f78:	9501      	str	r5, [sp, #4]
   11f7a:	f8cd 8000 	str.w	r8, [sp]
   11f7e:	4623      	mov	r3, r4
   11f80:	aa1a      	add	r2, sp, #104	; 0x68
   11f82:	4639      	mov	r1, r7
   11f84:	4638      	mov	r0, r7
   11f86:	f7fe fd23 	bl	109d0 <mul_mont_n>
   11f8a:	9500      	str	r5, [sp, #0]
   11f8c:	4623      	mov	r3, r4
   11f8e:	aa02      	add	r2, sp, #8
   11f90:	4639      	mov	r1, r7
   11f92:	4638      	mov	r0, r7
   11f94:	f7fe fb6e 	bl	10674 <sub_mod_n>
   11f98:	b026      	add	sp, #152	; 0x98
   11f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11f9e:	bf00      	nop
   11fa0:	00028738 	.word	0x00028738
   11fa4:	fffcfffd 	.word	0xfffcfffd

00011fa8 <sub_fp6>:
   11fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11fac:	b082      	sub	sp, #8
   11fae:	4604      	mov	r4, r0
   11fb0:	460d      	mov	r5, r1
   11fb2:	4616      	mov	r6, r2
   11fb4:	4f20      	ldr	r7, [pc, #128]	; (12038 <sub_fp6+0x90>)
   11fb6:	f04f 080c 	mov.w	r8, #12
   11fba:	f8cd 8000 	str.w	r8, [sp]
   11fbe:	463b      	mov	r3, r7
   11fc0:	f7fe fb58 	bl	10674 <sub_mod_n>
   11fc4:	f8cd 8000 	str.w	r8, [sp]
   11fc8:	463b      	mov	r3, r7
   11fca:	f106 0230 	add.w	r2, r6, #48	; 0x30
   11fce:	f105 0130 	add.w	r1, r5, #48	; 0x30
   11fd2:	f104 0030 	add.w	r0, r4, #48	; 0x30
   11fd6:	f7fe fb4d 	bl	10674 <sub_mod_n>
   11fda:	f8cd 8000 	str.w	r8, [sp]
   11fde:	463b      	mov	r3, r7
   11fe0:	f106 0260 	add.w	r2, r6, #96	; 0x60
   11fe4:	f105 0160 	add.w	r1, r5, #96	; 0x60
   11fe8:	f104 0060 	add.w	r0, r4, #96	; 0x60
   11fec:	f7fe fb42 	bl	10674 <sub_mod_n>
   11ff0:	f8cd 8000 	str.w	r8, [sp]
   11ff4:	463b      	mov	r3, r7
   11ff6:	f106 0290 	add.w	r2, r6, #144	; 0x90
   11ffa:	f105 0190 	add.w	r1, r5, #144	; 0x90
   11ffe:	f104 0090 	add.w	r0, r4, #144	; 0x90
   12002:	f7fe fb37 	bl	10674 <sub_mod_n>
   12006:	f8cd 8000 	str.w	r8, [sp]
   1200a:	463b      	mov	r3, r7
   1200c:	f106 02c0 	add.w	r2, r6, #192	; 0xc0
   12010:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
   12014:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   12018:	f7fe fb2c 	bl	10674 <sub_mod_n>
   1201c:	f8cd 8000 	str.w	r8, [sp]
   12020:	463b      	mov	r3, r7
   12022:	f106 02f0 	add.w	r2, r6, #240	; 0xf0
   12026:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   1202a:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   1202e:	f7fe fb21 	bl	10674 <sub_mod_n>
   12032:	b002      	add	sp, #8
   12034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12038:	00028738 	.word	0x00028738

0001203c <add_fp6>:
   1203c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12040:	b082      	sub	sp, #8
   12042:	4604      	mov	r4, r0
   12044:	460d      	mov	r5, r1
   12046:	4616      	mov	r6, r2
   12048:	4f20      	ldr	r7, [pc, #128]	; (120cc <add_fp6+0x90>)
   1204a:	f04f 080c 	mov.w	r8, #12
   1204e:	f8cd 8000 	str.w	r8, [sp]
   12052:	463b      	mov	r3, r7
   12054:	f7fe fe64 	bl	10d20 <add_mod_n>
   12058:	f8cd 8000 	str.w	r8, [sp]
   1205c:	463b      	mov	r3, r7
   1205e:	f106 0230 	add.w	r2, r6, #48	; 0x30
   12062:	f105 0130 	add.w	r1, r5, #48	; 0x30
   12066:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1206a:	f7fe fe59 	bl	10d20 <add_mod_n>
   1206e:	f8cd 8000 	str.w	r8, [sp]
   12072:	463b      	mov	r3, r7
   12074:	f106 0260 	add.w	r2, r6, #96	; 0x60
   12078:	f105 0160 	add.w	r1, r5, #96	; 0x60
   1207c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   12080:	f7fe fe4e 	bl	10d20 <add_mod_n>
   12084:	f8cd 8000 	str.w	r8, [sp]
   12088:	463b      	mov	r3, r7
   1208a:	f106 0290 	add.w	r2, r6, #144	; 0x90
   1208e:	f105 0190 	add.w	r1, r5, #144	; 0x90
   12092:	f104 0090 	add.w	r0, r4, #144	; 0x90
   12096:	f7fe fe43 	bl	10d20 <add_mod_n>
   1209a:	f8cd 8000 	str.w	r8, [sp]
   1209e:	463b      	mov	r3, r7
   120a0:	f106 02c0 	add.w	r2, r6, #192	; 0xc0
   120a4:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
   120a8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   120ac:	f7fe fe38 	bl	10d20 <add_mod_n>
   120b0:	f8cd 8000 	str.w	r8, [sp]
   120b4:	463b      	mov	r3, r7
   120b6:	f106 02f0 	add.w	r2, r6, #240	; 0xf0
   120ba:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   120be:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   120c2:	f7fe fe2d 	bl	10d20 <add_mod_n>
   120c6:	b002      	add	sp, #8
   120c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   120cc:	00028738 	.word	0x00028738

000120d0 <POINTonE1_add_affine>:
   120d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120d4:	b0e5      	sub	sp, #404	; 0x194
   120d6:	9003      	str	r0, [sp, #12]
   120d8:	460d      	mov	r5, r1
   120da:	4692      	mov	sl, r2
   120dc:	f101 0b60 	add.w	fp, r1, #96	; 0x60
   120e0:	f101 035c 	add.w	r3, r1, #92	; 0x5c
   120e4:	f101 008c 	add.w	r0, r1, #140	; 0x8c
   120e8:	2200      	movs	r2, #0
   120ea:	f853 1f04 	ldr.w	r1, [r3, #4]!
   120ee:	430a      	orrs	r2, r1
   120f0:	4283      	cmp	r3, r0
   120f2:	d1fa      	bne.n	120ea <POINTonE1_add_affine+0x1a>
   120f4:	1e56      	subs	r6, r2, #1
   120f6:	ea26 0602 	bic.w	r6, r6, r2
   120fa:	0ff6      	lsrs	r6, r6, #31
   120fc:	4c88      	ldr	r4, [pc, #544]	; (12320 <POINTonE1_add_affine+0x250>)
   120fe:	f04f 080c 	mov.w	r8, #12
   12102:	f8cd 8004 	str.w	r8, [sp, #4]
   12106:	4f87      	ldr	r7, [pc, #540]	; (12324 <POINTonE1_add_affine+0x254>)
   12108:	9700      	str	r7, [sp, #0]
   1210a:	4623      	mov	r3, r4
   1210c:	465a      	mov	r2, fp
   1210e:	4659      	mov	r1, fp
   12110:	a834      	add	r0, sp, #208	; 0xd0
   12112:	f7fe fc5d 	bl	109d0 <mul_mont_n>
   12116:	f8cd 8004 	str.w	r8, [sp, #4]
   1211a:	9700      	str	r7, [sp, #0]
   1211c:	4623      	mov	r3, r4
   1211e:	465a      	mov	r2, fp
   12120:	a934      	add	r1, sp, #208	; 0xd0
   12122:	a858      	add	r0, sp, #352	; 0x160
   12124:	f7fe fc54 	bl	109d0 <mul_mont_n>
   12128:	f8cd 8004 	str.w	r8, [sp, #4]
   1212c:	9700      	str	r7, [sp, #0]
   1212e:	4623      	mov	r3, r4
   12130:	f10a 0230 	add.w	r2, sl, #48	; 0x30
   12134:	a958      	add	r1, sp, #352	; 0x160
   12136:	4608      	mov	r0, r1
   12138:	f7fe fc4a 	bl	109d0 <mul_mont_n>
   1213c:	f1aa 0804 	sub.w	r8, sl, #4
   12140:	f10a 005c 	add.w	r0, sl, #92	; 0x5c
   12144:	4643      	mov	r3, r8
   12146:	2200      	movs	r2, #0
   12148:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1214c:	430a      	orrs	r2, r1
   1214e:	4283      	cmp	r3, r0
   12150:	d1fa      	bne.n	12148 <POINTonE1_add_affine+0x78>
   12152:	1e53      	subs	r3, r2, #1
   12154:	ea23 0202 	bic.w	r2, r3, r2
   12158:	0fd3      	lsrs	r3, r2, #31
   1215a:	9302      	str	r3, [sp, #8]
   1215c:	4c70      	ldr	r4, [pc, #448]	; (12320 <POINTonE1_add_affine+0x250>)
   1215e:	270c      	movs	r7, #12
   12160:	9701      	str	r7, [sp, #4]
   12162:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 12324 <POINTonE1_add_affine+0x254>
   12166:	f8cd 9000 	str.w	r9, [sp]
   1216a:	4623      	mov	r3, r4
   1216c:	aa34      	add	r2, sp, #208	; 0xd0
   1216e:	4651      	mov	r1, sl
   12170:	a828      	add	r0, sp, #160	; 0xa0
   12172:	f7fe fc2d 	bl	109d0 <mul_mont_n>
   12176:	9700      	str	r7, [sp, #0]
   12178:	4623      	mov	r3, r4
   1217a:	462a      	mov	r2, r5
   1217c:	a928      	add	r1, sp, #160	; 0xa0
   1217e:	4608      	mov	r0, r1
   12180:	f7fe fa78 	bl	10674 <sub_mod_n>
   12184:	9701      	str	r7, [sp, #4]
   12186:	f8cd 9000 	str.w	r9, [sp]
   1218a:	4623      	mov	r3, r4
   1218c:	aa28      	add	r2, sp, #160	; 0xa0
   1218e:	4611      	mov	r1, r2
   12190:	a81c      	add	r0, sp, #112	; 0x70
   12192:	f7fe fc1d 	bl	109d0 <mul_mont_n>
   12196:	9700      	str	r7, [sp, #0]
   12198:	4623      	mov	r3, r4
   1219a:	aa1c      	add	r2, sp, #112	; 0x70
   1219c:	4611      	mov	r1, r2
   1219e:	a810      	add	r0, sp, #64	; 0x40
   121a0:	f7fe fdbe 	bl	10d20 <add_mod_n>
   121a4:	9700      	str	r7, [sp, #0]
   121a6:	4623      	mov	r3, r4
   121a8:	aa10      	add	r2, sp, #64	; 0x40
   121aa:	4611      	mov	r1, r2
   121ac:	4610      	mov	r0, r2
   121ae:	f7fe fdb7 	bl	10d20 <add_mod_n>
   121b2:	9701      	str	r7, [sp, #4]
   121b4:	f8cd 9000 	str.w	r9, [sp]
   121b8:	4623      	mov	r3, r4
   121ba:	aa10      	add	r2, sp, #64	; 0x40
   121bc:	4629      	mov	r1, r5
   121be:	a84c      	add	r0, sp, #304	; 0x130
   121c0:	f7fe fc06 	bl	109d0 <mul_mont_n>
   121c4:	9701      	str	r7, [sp, #4]
   121c6:	f8cd 9000 	str.w	r9, [sp]
   121ca:	4623      	mov	r3, r4
   121cc:	aa10      	add	r2, sp, #64	; 0x40
   121ce:	a928      	add	r1, sp, #160	; 0xa0
   121d0:	a804      	add	r0, sp, #16
   121d2:	f7fe fbfd 	bl	109d0 <mul_mont_n>
   121d6:	f105 0a30 	add.w	sl, r5, #48	; 0x30
   121da:	9701      	str	r7, [sp, #4]
   121dc:	f8cd 9000 	str.w	r9, [sp]
   121e0:	4623      	mov	r3, r4
   121e2:	4652      	mov	r2, sl
   121e4:	a904      	add	r1, sp, #16
   121e6:	a810      	add	r0, sp, #64	; 0x40
   121e8:	f7fe fbf2 	bl	109d0 <mul_mont_n>
   121ec:	9700      	str	r7, [sp, #0]
   121ee:	4623      	mov	r3, r4
   121f0:	4652      	mov	r2, sl
   121f2:	a958      	add	r1, sp, #352	; 0x160
   121f4:	4608      	mov	r0, r1
   121f6:	f7fe fa3d 	bl	10674 <sub_mod_n>
   121fa:	9700      	str	r7, [sp, #0]
   121fc:	4623      	mov	r3, r4
   121fe:	aa58      	add	r2, sp, #352	; 0x160
   12200:	4611      	mov	r1, r2
   12202:	4610      	mov	r0, r2
   12204:	f7fe fd8c 	bl	10d20 <add_mod_n>
   12208:	9701      	str	r7, [sp, #4]
   1220a:	f8cd 9000 	str.w	r9, [sp]
   1220e:	4623      	mov	r3, r4
   12210:	aa58      	add	r2, sp, #352	; 0x160
   12212:	4611      	mov	r1, r2
   12214:	a840      	add	r0, sp, #256	; 0x100
   12216:	f7fe fbdb 	bl	109d0 <mul_mont_n>
   1221a:	9700      	str	r7, [sp, #0]
   1221c:	4623      	mov	r3, r4
   1221e:	aa04      	add	r2, sp, #16
   12220:	a940      	add	r1, sp, #256	; 0x100
   12222:	4608      	mov	r0, r1
   12224:	f7fe fa26 	bl	10674 <sub_mod_n>
   12228:	9700      	str	r7, [sp, #0]
   1222a:	4623      	mov	r3, r4
   1222c:	aa4c      	add	r2, sp, #304	; 0x130
   1222e:	a940      	add	r1, sp, #256	; 0x100
   12230:	4608      	mov	r0, r1
   12232:	f7fe fa1f 	bl	10674 <sub_mod_n>
   12236:	9700      	str	r7, [sp, #0]
   12238:	4623      	mov	r3, r4
   1223a:	aa4c      	add	r2, sp, #304	; 0x130
   1223c:	a940      	add	r1, sp, #256	; 0x100
   1223e:	4608      	mov	r0, r1
   12240:	f7fe fa18 	bl	10674 <sub_mod_n>
   12244:	9700      	str	r7, [sp, #0]
   12246:	4623      	mov	r3, r4
   12248:	aa40      	add	r2, sp, #256	; 0x100
   1224a:	a94c      	add	r1, sp, #304	; 0x130
   1224c:	4608      	mov	r0, r1
   1224e:	f7fe fa11 	bl	10674 <sub_mod_n>
   12252:	9701      	str	r7, [sp, #4]
   12254:	f8cd 9000 	str.w	r9, [sp]
   12258:	4623      	mov	r3, r4
   1225a:	aa58      	add	r2, sp, #352	; 0x160
   1225c:	a94c      	add	r1, sp, #304	; 0x130
   1225e:	4608      	mov	r0, r1
   12260:	f7fe fbb6 	bl	109d0 <mul_mont_n>
   12264:	9700      	str	r7, [sp, #0]
   12266:	4623      	mov	r3, r4
   12268:	aa10      	add	r2, sp, #64	; 0x40
   1226a:	a94c      	add	r1, sp, #304	; 0x130
   1226c:	4608      	mov	r0, r1
   1226e:	f7fe fa01 	bl	10674 <sub_mod_n>
   12272:	9700      	str	r7, [sp, #0]
   12274:	4623      	mov	r3, r4
   12276:	aa10      	add	r2, sp, #64	; 0x40
   12278:	a94c      	add	r1, sp, #304	; 0x130
   1227a:	4608      	mov	r0, r1
   1227c:	f7fe f9fa 	bl	10674 <sub_mod_n>
   12280:	9700      	str	r7, [sp, #0]
   12282:	4623      	mov	r3, r4
   12284:	aa28      	add	r2, sp, #160	; 0xa0
   12286:	4659      	mov	r1, fp
   12288:	a858      	add	r0, sp, #352	; 0x160
   1228a:	f7fe fd49 	bl	10d20 <add_mod_n>
   1228e:	9701      	str	r7, [sp, #4]
   12290:	f8cd 9000 	str.w	r9, [sp]
   12294:	4623      	mov	r3, r4
   12296:	aa58      	add	r2, sp, #352	; 0x160
   12298:	4611      	mov	r1, r2
   1229a:	4610      	mov	r0, r2
   1229c:	f7fe fb98 	bl	109d0 <mul_mont_n>
   122a0:	9700      	str	r7, [sp, #0]
   122a2:	4623      	mov	r3, r4
   122a4:	aa34      	add	r2, sp, #208	; 0xd0
   122a6:	a958      	add	r1, sp, #352	; 0x160
   122a8:	4608      	mov	r0, r1
   122aa:	f7fe f9e3 	bl	10674 <sub_mod_n>
   122ae:	9700      	str	r7, [sp, #0]
   122b0:	4623      	mov	r3, r4
   122b2:	aa1c      	add	r2, sp, #112	; 0x70
   122b4:	a958      	add	r1, sp, #352	; 0x160
   122b6:	4608      	mov	r0, r1
   122b8:	f7fe f9dc 	bl	10674 <sub_mod_n>
   122bc:	4276      	negs	r6, r6
   122be:	f104 0190 	add.w	r1, r4, #144	; 0x90
   122c2:	aa57      	add	r2, sp, #348	; 0x15c
   122c4:	34c0      	adds	r4, #192	; 0xc0
   122c6:	f851 3b04 	ldr.w	r3, [r1], #4
   122ca:	f852 0f04 	ldr.w	r0, [r2, #4]!
   122ce:	4043      	eors	r3, r0
   122d0:	4033      	ands	r3, r6
   122d2:	4043      	eors	r3, r0
   122d4:	6013      	str	r3, [r2, #0]
   122d6:	42a1      	cmp	r1, r4
   122d8:	d1f5      	bne.n	122c6 <POINTonE1_add_affine+0x1f6>
   122da:	aa40      	add	r2, sp, #256	; 0x100
   122dc:	ac58      	add	r4, sp, #352	; 0x160
   122de:	4611      	mov	r1, r2
   122e0:	6808      	ldr	r0, [r1, #0]
   122e2:	f858 3f04 	ldr.w	r3, [r8, #4]!
   122e6:	4043      	eors	r3, r0
   122e8:	4033      	ands	r3, r6
   122ea:	4043      	eors	r3, r0
   122ec:	f841 3b04 	str.w	r3, [r1], #4
   122f0:	42a1      	cmp	r1, r4
   122f2:	d1f5      	bne.n	122e0 <POINTonE1_add_affine+0x210>
   122f4:	9b02      	ldr	r3, [sp, #8]
   122f6:	425c      	negs	r4, r3
   122f8:	3d04      	subs	r5, #4
   122fa:	9b03      	ldr	r3, [sp, #12]
   122fc:	1f18      	subs	r0, r3, #4
   122fe:	f102 0690 	add.w	r6, r2, #144	; 0x90
   12302:	f852 1b04 	ldr.w	r1, [r2], #4
   12306:	f855 3f04 	ldr.w	r3, [r5, #4]!
   1230a:	404b      	eors	r3, r1
   1230c:	4023      	ands	r3, r4
   1230e:	404b      	eors	r3, r1
   12310:	f840 3f04 	str.w	r3, [r0, #4]!
   12314:	42b2      	cmp	r2, r6
   12316:	d1f4      	bne.n	12302 <POINTonE1_add_affine+0x232>
   12318:	b065      	add	sp, #404	; 0x194
   1231a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1231e:	bf00      	nop
   12320:	00028738 	.word	0x00028738
   12324:	fffcfffd 	.word	0xfffcfffd

00012328 <POINTonE1_Deserialize_BE>:
   12328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1232c:	b0a6      	sub	sp, #152	; 0x98
   1232e:	4604      	mov	r4, r0
   12330:	f101 0230 	add.w	r2, r1, #48	; 0x30
   12334:	4608      	mov	r0, r1
   12336:	2500      	movs	r5, #0
   12338:	f101 072f 	add.w	r7, r1, #47	; 0x2f
   1233c:	1a3b      	subs	r3, r7, r0
   1233e:	f810 6b01 	ldrb.w	r6, [r0], #1
   12342:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
   12346:	f023 0303 	bic.w	r3, r3, #3
   1234a:	ae26      	add	r6, sp, #152	; 0x98
   1234c:	4433      	add	r3, r6
   1234e:	f843 5c60 	str.w	r5, [r3, #-96]
   12352:	4290      	cmp	r0, r2
   12354:	d1f2      	bne.n	1233c <POINTonE1_Deserialize_BE+0x14>
   12356:	f101 0660 	add.w	r6, r1, #96	; 0x60
   1235a:	2000      	movs	r0, #0
   1235c:	315f      	adds	r1, #95	; 0x5f
   1235e:	1a8b      	subs	r3, r1, r2
   12360:	f812 5b01 	ldrb.w	r5, [r2], #1
   12364:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
   12368:	f023 0303 	bic.w	r3, r3, #3
   1236c:	ad26      	add	r5, sp, #152	; 0x98
   1236e:	442b      	add	r3, r5
   12370:	f843 0c30 	str.w	r0, [r3, #-48]
   12374:	42b2      	cmp	r2, r6
   12376:	d1f2      	bne.n	1235e <POINTonE1_Deserialize_BE+0x36>
   12378:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1237a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   1237e:	9319      	str	r3, [sp, #100]	; 0x64
   12380:	4b38      	ldr	r3, [pc, #224]	; (12464 <POINTonE1_Deserialize_BE+0x13c>)
   12382:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   12386:	220c      	movs	r2, #12
   12388:	9200      	str	r2, [sp, #0]
   1238a:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
   1238e:	4641      	mov	r1, r8
   12390:	a802      	add	r0, sp, #8
   12392:	f7fe fcc5 	bl	10d20 <add_mod_n>
   12396:	ae02      	add	r6, sp, #8
   12398:	46c2      	mov	sl, r8
   1239a:	4645      	mov	r5, r8
   1239c:	4641      	mov	r1, r8
   1239e:	4632      	mov	r2, r6
   123a0:	2000      	movs	r0, #0
   123a2:	f852 3b04 	ldr.w	r3, [r2], #4
   123a6:	f851 7b04 	ldr.w	r7, [r1], #4
   123aa:	407b      	eors	r3, r7
   123ac:	4318      	orrs	r0, r3
   123ae:	42aa      	cmp	r2, r5
   123b0:	d1f7      	bne.n	123a2 <POINTonE1_Deserialize_BE+0x7a>
   123b2:	1e43      	subs	r3, r0, #1
   123b4:	4383      	bics	r3, r0
   123b6:	d403      	bmi.n	123c0 <POINTonE1_Deserialize_BE+0x98>
   123b8:	2001      	movs	r0, #1
   123ba:	b026      	add	sp, #152	; 0x98
   123bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   123c0:	4b28      	ldr	r3, [pc, #160]	; (12464 <POINTonE1_Deserialize_BE+0x13c>)
   123c2:	220c      	movs	r2, #12
   123c4:	9200      	str	r2, [sp, #0]
   123c6:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
   123ca:	a91a      	add	r1, sp, #104	; 0x68
   123cc:	a802      	add	r0, sp, #8
   123ce:	f7fe fca7 	bl	10d20 <add_mod_n>
   123d2:	a919      	add	r1, sp, #100	; 0x64
   123d4:	2200      	movs	r2, #0
   123d6:	f856 3b04 	ldr.w	r3, [r6], #4
   123da:	f851 0f04 	ldr.w	r0, [r1, #4]!
   123de:	4043      	eors	r3, r0
   123e0:	431a      	orrs	r2, r3
   123e2:	42ae      	cmp	r6, r5
   123e4:	d1f7      	bne.n	123d6 <POINTonE1_Deserialize_BE+0xae>
   123e6:	1e53      	subs	r3, r2, #1
   123e8:	4393      	bics	r3, r2
   123ea:	d401      	bmi.n	123f0 <POINTonE1_Deserialize_BE+0xc8>
   123ec:	2001      	movs	r0, #1
   123ee:	e7e4      	b.n	123ba <POINTonE1_Deserialize_BE+0x92>
   123f0:	4d1c      	ldr	r5, [pc, #112]	; (12464 <POINTonE1_Deserialize_BE+0x13c>)
   123f2:	f505 7634 	add.w	r6, r5, #720	; 0x2d0
   123f6:	f04f 090c 	mov.w	r9, #12
   123fa:	f8cd 9004 	str.w	r9, [sp, #4]
   123fe:	f8df 8068 	ldr.w	r8, [pc, #104]	; 12468 <POINTonE1_Deserialize_BE+0x140>
   12402:	f8cd 8000 	str.w	r8, [sp]
   12406:	462b      	mov	r3, r5
   12408:	4632      	mov	r2, r6
   1240a:	a90e      	add	r1, sp, #56	; 0x38
   1240c:	4608      	mov	r0, r1
   1240e:	f7fe fadf 	bl	109d0 <mul_mont_n>
   12412:	f8cd 9004 	str.w	r9, [sp, #4]
   12416:	f8cd 8000 	str.w	r8, [sp]
   1241a:	462b      	mov	r3, r5
   1241c:	4632      	mov	r2, r6
   1241e:	a91a      	add	r1, sp, #104	; 0x68
   12420:	4608      	mov	r0, r1
   12422:	f7fe fad5 	bl	109d0 <mul_mont_n>
   12426:	a80e      	add	r0, sp, #56	; 0x38
   12428:	f7ff fabe 	bl	119a8 <POINTonE1_affine_on_curve>
   1242c:	b1b8      	cbz	r0, 1245e <POINTonE1_Deserialize_BE+0x136>
   1242e:	aa0d      	add	r2, sp, #52	; 0x34
   12430:	1f23      	subs	r3, r4, #4
   12432:	f10a 075c 	add.w	r7, sl, #92	; 0x5c
   12436:	4619      	mov	r1, r3
   12438:	f852 0f04 	ldr.w	r0, [r2, #4]!
   1243c:	f841 0f04 	str.w	r0, [r1, #4]!
   12440:	42ba      	cmp	r2, r7
   12442:	d1f9      	bne.n	12438 <POINTonE1_Deserialize_BE+0x110>
   12444:	342c      	adds	r4, #44	; 0x2c
   12446:	2200      	movs	r2, #0
   12448:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1244c:	430a      	orrs	r2, r1
   1244e:	42a3      	cmp	r3, r4
   12450:	d1fa      	bne.n	12448 <POINTonE1_Deserialize_BE+0x120>
   12452:	1e53      	subs	r3, r2, #1
   12454:	4393      	bics	r3, r2
   12456:	bf4c      	ite	mi
   12458:	2003      	movmi	r0, #3
   1245a:	2000      	movpl	r0, #0
   1245c:	e7ad      	b.n	123ba <POINTonE1_Deserialize_BE+0x92>
   1245e:	2002      	movs	r0, #2
   12460:	e7ab      	b.n	123ba <POINTonE1_Deserialize_BE+0x92>
   12462:	bf00      	nop
   12464:	00028738 	.word	0x00028738
   12468:	fffcfffd 	.word	0xfffcfffd

0001246c <POINTonE1_add>:
   1246c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12470:	b0fd      	sub	sp, #500	; 0x1f4
   12472:	9003      	str	r0, [sp, #12]
   12474:	460f      	mov	r7, r1
   12476:	4616      	mov	r6, r2
   12478:	f101 0a60 	add.w	sl, r1, #96	; 0x60
   1247c:	f101 035c 	add.w	r3, r1, #92	; 0x5c
   12480:	f101 008c 	add.w	r0, r1, #140	; 0x8c
   12484:	2200      	movs	r2, #0
   12486:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1248a:	430a      	orrs	r2, r1
   1248c:	4283      	cmp	r3, r0
   1248e:	d1fa      	bne.n	12486 <POINTonE1_add+0x1a>
   12490:	1e53      	subs	r3, r2, #1
   12492:	ea23 0202 	bic.w	r2, r3, r2
   12496:	0fd3      	lsrs	r3, r2, #31
   12498:	9302      	str	r3, [sp, #8]
   1249a:	4c95      	ldr	r4, [pc, #596]	; (126f0 <POINTonE1_add+0x284>)
   1249c:	f04f 080c 	mov.w	r8, #12
   124a0:	f8cd 8004 	str.w	r8, [sp, #4]
   124a4:	4d93      	ldr	r5, [pc, #588]	; (126f4 <POINTonE1_add+0x288>)
   124a6:	9500      	str	r5, [sp, #0]
   124a8:	4623      	mov	r3, r4
   124aa:	4652      	mov	r2, sl
   124ac:	4651      	mov	r1, sl
   124ae:	a84c      	add	r0, sp, #304	; 0x130
   124b0:	f7fe fa8e 	bl	109d0 <mul_mont_n>
   124b4:	f8cd 8004 	str.w	r8, [sp, #4]
   124b8:	9500      	str	r5, [sp, #0]
   124ba:	4623      	mov	r3, r4
   124bc:	4652      	mov	r2, sl
   124be:	a94c      	add	r1, sp, #304	; 0x130
   124c0:	a870      	add	r0, sp, #448	; 0x1c0
   124c2:	f7fe fa85 	bl	109d0 <mul_mont_n>
   124c6:	f8cd 8004 	str.w	r8, [sp, #4]
   124ca:	9500      	str	r5, [sp, #0]
   124cc:	4623      	mov	r3, r4
   124ce:	f106 0230 	add.w	r2, r6, #48	; 0x30
   124d2:	a970      	add	r1, sp, #448	; 0x1c0
   124d4:	4608      	mov	r0, r1
   124d6:	f7fe fa7b 	bl	109d0 <mul_mont_n>
   124da:	f106 0b60 	add.w	fp, r6, #96	; 0x60
   124de:	f106 035c 	add.w	r3, r6, #92	; 0x5c
   124e2:	f106 018c 	add.w	r1, r6, #140	; 0x8c
   124e6:	f04f 0800 	mov.w	r8, #0
   124ea:	f853 2f04 	ldr.w	r2, [r3, #4]!
   124ee:	ea48 0802 	orr.w	r8, r8, r2
   124f2:	428b      	cmp	r3, r1
   124f4:	d1f9      	bne.n	124ea <POINTonE1_add+0x7e>
   124f6:	4c7e      	ldr	r4, [pc, #504]	; (126f0 <POINTonE1_add+0x284>)
   124f8:	250c      	movs	r5, #12
   124fa:	9501      	str	r5, [sp, #4]
   124fc:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 126f4 <POINTonE1_add+0x288>
   12500:	f8cd 9000 	str.w	r9, [sp]
   12504:	4623      	mov	r3, r4
   12506:	465a      	mov	r2, fp
   12508:	4659      	mov	r1, fp
   1250a:	a840      	add	r0, sp, #256	; 0x100
   1250c:	f7fe fa60 	bl	109d0 <mul_mont_n>
   12510:	9501      	str	r5, [sp, #4]
   12512:	f8cd 9000 	str.w	r9, [sp]
   12516:	4623      	mov	r3, r4
   12518:	465a      	mov	r2, fp
   1251a:	a940      	add	r1, sp, #256	; 0x100
   1251c:	a828      	add	r0, sp, #160	; 0xa0
   1251e:	f7fe fa57 	bl	109d0 <mul_mont_n>
   12522:	9501      	str	r5, [sp, #4]
   12524:	f8cd 9000 	str.w	r9, [sp]
   12528:	4623      	mov	r3, r4
   1252a:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1252e:	a928      	add	r1, sp, #160	; 0xa0
   12530:	4608      	mov	r0, r1
   12532:	f7fe fa4d 	bl	109d0 <mul_mont_n>
   12536:	9500      	str	r5, [sp, #0]
   12538:	4623      	mov	r3, r4
   1253a:	aa28      	add	r2, sp, #160	; 0xa0
   1253c:	a970      	add	r1, sp, #448	; 0x1c0
   1253e:	4608      	mov	r0, r1
   12540:	f7fe f898 	bl	10674 <sub_mod_n>
   12544:	9500      	str	r5, [sp, #0]
   12546:	4623      	mov	r3, r4
   12548:	aa70      	add	r2, sp, #448	; 0x1c0
   1254a:	4611      	mov	r1, r2
   1254c:	4610      	mov	r0, r2
   1254e:	f7fe fbe7 	bl	10d20 <add_mod_n>
   12552:	9501      	str	r5, [sp, #4]
   12554:	f8cd 9000 	str.w	r9, [sp]
   12558:	4623      	mov	r3, r4
   1255a:	aa40      	add	r2, sp, #256	; 0x100
   1255c:	4639      	mov	r1, r7
   1255e:	a834      	add	r0, sp, #208	; 0xd0
   12560:	f7fe fa36 	bl	109d0 <mul_mont_n>
   12564:	9501      	str	r5, [sp, #4]
   12566:	f8cd 9000 	str.w	r9, [sp]
   1256a:	4623      	mov	r3, r4
   1256c:	aa4c      	add	r2, sp, #304	; 0x130
   1256e:	4631      	mov	r1, r6
   12570:	a81c      	add	r0, sp, #112	; 0x70
   12572:	f7fe fa2d 	bl	109d0 <mul_mont_n>
   12576:	9500      	str	r5, [sp, #0]
   12578:	4623      	mov	r3, r4
   1257a:	aa34      	add	r2, sp, #208	; 0xd0
   1257c:	a91c      	add	r1, sp, #112	; 0x70
   1257e:	4608      	mov	r0, r1
   12580:	f7fe f878 	bl	10674 <sub_mod_n>
   12584:	9500      	str	r5, [sp, #0]
   12586:	4623      	mov	r3, r4
   12588:	aa1c      	add	r2, sp, #112	; 0x70
   1258a:	4611      	mov	r1, r2
   1258c:	a810      	add	r0, sp, #64	; 0x40
   1258e:	f7fe fbc7 	bl	10d20 <add_mod_n>
   12592:	9501      	str	r5, [sp, #4]
   12594:	f8cd 9000 	str.w	r9, [sp]
   12598:	4623      	mov	r3, r4
   1259a:	aa10      	add	r2, sp, #64	; 0x40
   1259c:	4611      	mov	r1, r2
   1259e:	4610      	mov	r0, r2
   125a0:	f7fe fa16 	bl	109d0 <mul_mont_n>
   125a4:	9501      	str	r5, [sp, #4]
   125a6:	f8cd 9000 	str.w	r9, [sp]
   125aa:	4623      	mov	r3, r4
   125ac:	aa10      	add	r2, sp, #64	; 0x40
   125ae:	a91c      	add	r1, sp, #112	; 0x70
   125b0:	a804      	add	r0, sp, #16
   125b2:	f7fe fa0d 	bl	109d0 <mul_mont_n>
   125b6:	9501      	str	r5, [sp, #4]
   125b8:	f8cd 9000 	str.w	r9, [sp]
   125bc:	4623      	mov	r3, r4
   125be:	aa04      	add	r2, sp, #16
   125c0:	a928      	add	r1, sp, #160	; 0xa0
   125c2:	4608      	mov	r0, r1
   125c4:	f7fe fa04 	bl	109d0 <mul_mont_n>
   125c8:	9501      	str	r5, [sp, #4]
   125ca:	f8cd 9000 	str.w	r9, [sp]
   125ce:	4623      	mov	r3, r4
   125d0:	aa10      	add	r2, sp, #64	; 0x40
   125d2:	a934      	add	r1, sp, #208	; 0xd0
   125d4:	a864      	add	r0, sp, #400	; 0x190
   125d6:	f7fe f9fb 	bl	109d0 <mul_mont_n>
   125da:	9501      	str	r5, [sp, #4]
   125dc:	f8cd 9000 	str.w	r9, [sp]
   125e0:	4623      	mov	r3, r4
   125e2:	aa70      	add	r2, sp, #448	; 0x1c0
   125e4:	4611      	mov	r1, r2
   125e6:	a858      	add	r0, sp, #352	; 0x160
   125e8:	f7fe f9f2 	bl	109d0 <mul_mont_n>
   125ec:	9500      	str	r5, [sp, #0]
   125ee:	4623      	mov	r3, r4
   125f0:	aa04      	add	r2, sp, #16
   125f2:	a958      	add	r1, sp, #352	; 0x160
   125f4:	4608      	mov	r0, r1
   125f6:	f7fe f83d 	bl	10674 <sub_mod_n>
   125fa:	9500      	str	r5, [sp, #0]
   125fc:	4623      	mov	r3, r4
   125fe:	aa64      	add	r2, sp, #400	; 0x190
   12600:	a958      	add	r1, sp, #352	; 0x160
   12602:	4608      	mov	r0, r1
   12604:	f7fe f836 	bl	10674 <sub_mod_n>
   12608:	9500      	str	r5, [sp, #0]
   1260a:	4623      	mov	r3, r4
   1260c:	aa64      	add	r2, sp, #400	; 0x190
   1260e:	a958      	add	r1, sp, #352	; 0x160
   12610:	4608      	mov	r0, r1
   12612:	f7fe f82f 	bl	10674 <sub_mod_n>
   12616:	9500      	str	r5, [sp, #0]
   12618:	4623      	mov	r3, r4
   1261a:	aa58      	add	r2, sp, #352	; 0x160
   1261c:	a964      	add	r1, sp, #400	; 0x190
   1261e:	4608      	mov	r0, r1
   12620:	f7fe f828 	bl	10674 <sub_mod_n>
   12624:	9501      	str	r5, [sp, #4]
   12626:	f8cd 9000 	str.w	r9, [sp]
   1262a:	4623      	mov	r3, r4
   1262c:	aa70      	add	r2, sp, #448	; 0x1c0
   1262e:	a964      	add	r1, sp, #400	; 0x190
   12630:	4608      	mov	r0, r1
   12632:	f7fe f9cd 	bl	109d0 <mul_mont_n>
   12636:	9500      	str	r5, [sp, #0]
   12638:	4623      	mov	r3, r4
   1263a:	aa28      	add	r2, sp, #160	; 0xa0
   1263c:	a964      	add	r1, sp, #400	; 0x190
   1263e:	4608      	mov	r0, r1
   12640:	f7fe f818 	bl	10674 <sub_mod_n>
   12644:	9500      	str	r5, [sp, #0]
   12646:	4623      	mov	r3, r4
   12648:	aa28      	add	r2, sp, #160	; 0xa0
   1264a:	a964      	add	r1, sp, #400	; 0x190
   1264c:	4608      	mov	r0, r1
   1264e:	f7fe f811 	bl	10674 <sub_mod_n>
   12652:	9500      	str	r5, [sp, #0]
   12654:	4623      	mov	r3, r4
   12656:	465a      	mov	r2, fp
   12658:	4651      	mov	r1, sl
   1265a:	a870      	add	r0, sp, #448	; 0x1c0
   1265c:	f7fe fb60 	bl	10d20 <add_mod_n>
   12660:	9501      	str	r5, [sp, #4]
   12662:	f8cd 9000 	str.w	r9, [sp]
   12666:	4623      	mov	r3, r4
   12668:	aa70      	add	r2, sp, #448	; 0x1c0
   1266a:	4611      	mov	r1, r2
   1266c:	4610      	mov	r0, r2
   1266e:	f7fe f9af 	bl	109d0 <mul_mont_n>
   12672:	9500      	str	r5, [sp, #0]
   12674:	4623      	mov	r3, r4
   12676:	aa4c      	add	r2, sp, #304	; 0x130
   12678:	a970      	add	r1, sp, #448	; 0x1c0
   1267a:	4608      	mov	r0, r1
   1267c:	f7fd fffa 	bl	10674 <sub_mod_n>
   12680:	9500      	str	r5, [sp, #0]
   12682:	4623      	mov	r3, r4
   12684:	aa40      	add	r2, sp, #256	; 0x100
   12686:	a970      	add	r1, sp, #448	; 0x1c0
   12688:	4608      	mov	r0, r1
   1268a:	f7fd fff3 	bl	10674 <sub_mod_n>
   1268e:	9501      	str	r5, [sp, #4]
   12690:	f8cd 9000 	str.w	r9, [sp]
   12694:	4623      	mov	r3, r4
   12696:	aa1c      	add	r2, sp, #112	; 0x70
   12698:	a970      	add	r1, sp, #448	; 0x1c0
   1269a:	4608      	mov	r0, r1
   1269c:	f7fe f998 	bl	109d0 <mul_mont_n>
   126a0:	f108 33ff 	add.w	r3, r8, #4294967295
   126a4:	ea23 0808 	bic.w	r8, r3, r8
   126a8:	ea4f 78e8 	mov.w	r8, r8, asr #31
   126ac:	3f04      	subs	r7, #4
   126ae:	ac58      	add	r4, sp, #352	; 0x160
   126b0:	ad7c      	add	r5, sp, #496	; 0x1f0
   126b2:	4622      	mov	r2, r4
   126b4:	6811      	ldr	r1, [r2, #0]
   126b6:	f857 3f04 	ldr.w	r3, [r7, #4]!
   126ba:	404b      	eors	r3, r1
   126bc:	ea03 0308 	and.w	r3, r3, r8
   126c0:	404b      	eors	r3, r1
   126c2:	f842 3b04 	str.w	r3, [r2], #4
   126c6:	42aa      	cmp	r2, r5
   126c8:	d1f4      	bne.n	126b4 <POINTonE1_add+0x248>
   126ca:	9b02      	ldr	r3, [sp, #8]
   126cc:	425a      	negs	r2, r3
   126ce:	3e04      	subs	r6, #4
   126d0:	9b03      	ldr	r3, [sp, #12]
   126d2:	1f18      	subs	r0, r3, #4
   126d4:	f854 1b04 	ldr.w	r1, [r4], #4
   126d8:	f856 3f04 	ldr.w	r3, [r6, #4]!
   126dc:	404b      	eors	r3, r1
   126de:	4013      	ands	r3, r2
   126e0:	404b      	eors	r3, r1
   126e2:	f840 3f04 	str.w	r3, [r0, #4]!
   126e6:	42ac      	cmp	r4, r5
   126e8:	d1f4      	bne.n	126d4 <POINTonE1_add+0x268>
   126ea:	b07d      	add	sp, #500	; 0x1f4
   126ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126f0:	00028738 	.word	0x00028738
   126f4:	fffcfffd 	.word	0xfffcfffd

000126f8 <POINTonE1_precompute_w4>:
   126f8:	b570      	push	{r4, r5, r6, lr}
   126fa:	4606      	mov	r6, r0
   126fc:	1f0b      	subs	r3, r1, #4
   126fe:	1f02      	subs	r2, r0, #4
   12700:	f101 008c 	add.w	r0, r1, #140	; 0x8c
   12704:	f853 4f04 	ldr.w	r4, [r3, #4]!
   12708:	f842 4f04 	str.w	r4, [r2, #4]!
   1270c:	4283      	cmp	r3, r0
   1270e:	d1f9      	bne.n	12704 <POINTonE1_precompute_w4+0xc>
   12710:	f106 0090 	add.w	r0, r6, #144	; 0x90
   12714:	f7ff fba6 	bl	11e64 <POINTonE1_double>
   12718:	f506 7590 	add.w	r5, r6, #288	; 0x120
   1271c:	4634      	mov	r4, r6
   1271e:	f506 76d8 	add.w	r6, r6, #432	; 0x1b0
   12722:	4622      	mov	r2, r4
   12724:	3490      	adds	r4, #144	; 0x90
   12726:	4621      	mov	r1, r4
   12728:	4628      	mov	r0, r5
   1272a:	f7ff fe9f 	bl	1246c <POINTonE1_add>
   1272e:	4621      	mov	r1, r4
   12730:	f105 0090 	add.w	r0, r5, #144	; 0x90
   12734:	f7ff fb96 	bl	11e64 <POINTonE1_double>
   12738:	f505 7590 	add.w	r5, r5, #288	; 0x120
   1273c:	42b4      	cmp	r4, r6
   1273e:	d1f0      	bne.n	12722 <POINTonE1_precompute_w4+0x2a>
   12740:	bd70      	pop	{r4, r5, r6, pc}

00012742 <isogeny_map_to_E1>:
   12742:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12746:	f2ad 6d6c 	subw	sp, sp, #1644	; 0x66c
   1274a:	4607      	mov	r7, r0
   1274c:	4688      	mov	r8, r1
   1274e:	f101 0960 	add.w	r9, r1, #96	; 0x60
   12752:	4cad      	ldr	r4, [pc, #692]	; (12a08 <isogeny_map_to_E1+0x2c6>)
   12754:	250c      	movs	r5, #12
   12756:	9501      	str	r5, [sp, #4]
   12758:	4eac      	ldr	r6, [pc, #688]	; (12a0c <isogeny_map_to_E1+0x2ca>)
   1275a:	9600      	str	r6, [sp, #0]
   1275c:	4623      	mov	r3, r4
   1275e:	464a      	mov	r2, r9
   12760:	4649      	mov	r1, r9
   12762:	f50d 60c7 	add.w	r0, sp, #1592	; 0x638
   12766:	f7fe f933 	bl	109d0 <mul_mont_n>
   1276a:	9501      	str	r5, [sp, #4]
   1276c:	9600      	str	r6, [sp, #0]
   1276e:	4623      	mov	r3, r4
   12770:	f50d 62c7 	add.w	r2, sp, #1592	; 0x638
   12774:	4611      	mov	r1, r2
   12776:	f50d 60c1 	add.w	r0, sp, #1544	; 0x608
   1277a:	f7fe f929 	bl	109d0 <mul_mont_n>
   1277e:	9501      	str	r5, [sp, #4]
   12780:	9600      	str	r6, [sp, #0]
   12782:	4623      	mov	r3, r4
   12784:	f50d 62c1 	add.w	r2, sp, #1544	; 0x608
   12788:	f50d 61c7 	add.w	r1, sp, #1592	; 0x638
   1278c:	f50d 60bb 	add.w	r0, sp, #1496	; 0x5d8
   12790:	f7fe f91e 	bl	109d0 <mul_mont_n>
   12794:	9501      	str	r5, [sp, #4]
   12796:	9600      	str	r6, [sp, #0]
   12798:	4623      	mov	r3, r4
   1279a:	f50d 62c1 	add.w	r2, sp, #1544	; 0x608
   1279e:	4611      	mov	r1, r2
   127a0:	f50d 60b5 	add.w	r0, sp, #1448	; 0x5a8
   127a4:	f7fe f914 	bl	109d0 <mul_mont_n>
   127a8:	9501      	str	r5, [sp, #4]
   127aa:	9600      	str	r6, [sp, #0]
   127ac:	4623      	mov	r3, r4
   127ae:	f50d 62bb 	add.w	r2, sp, #1496	; 0x5d8
   127b2:	f50d 61c1 	add.w	r1, sp, #1544	; 0x608
   127b6:	f50d 60af 	add.w	r0, sp, #1400	; 0x578
   127ba:	f7fe f909 	bl	109d0 <mul_mont_n>
   127be:	9501      	str	r5, [sp, #4]
   127c0:	9600      	str	r6, [sp, #0]
   127c2:	4623      	mov	r3, r4
   127c4:	f50d 62bb 	add.w	r2, sp, #1496	; 0x5d8
   127c8:	4611      	mov	r1, r2
   127ca:	f50d 60a9 	add.w	r0, sp, #1352	; 0x548
   127ce:	f7fe f8ff 	bl	109d0 <mul_mont_n>
   127d2:	9501      	str	r5, [sp, #4]
   127d4:	9600      	str	r6, [sp, #0]
   127d6:	4623      	mov	r3, r4
   127d8:	f50d 62b5 	add.w	r2, sp, #1448	; 0x5a8
   127dc:	f50d 61bb 	add.w	r1, sp, #1496	; 0x5d8
   127e0:	f50d 60a3 	add.w	r0, sp, #1304	; 0x518
   127e4:	f7fe f8f4 	bl	109d0 <mul_mont_n>
   127e8:	9501      	str	r5, [sp, #4]
   127ea:	9600      	str	r6, [sp, #0]
   127ec:	4623      	mov	r3, r4
   127ee:	f50d 62b5 	add.w	r2, sp, #1448	; 0x5a8
   127f2:	4611      	mov	r1, r2
   127f4:	f50d 609d 	add.w	r0, sp, #1256	; 0x4e8
   127f8:	f7fe f8ea 	bl	109d0 <mul_mont_n>
   127fc:	9501      	str	r5, [sp, #4]
   127fe:	9600      	str	r6, [sp, #0]
   12800:	4623      	mov	r3, r4
   12802:	f50d 62af 	add.w	r2, sp, #1400	; 0x578
   12806:	f50d 61b5 	add.w	r1, sp, #1448	; 0x5a8
   1280a:	f50d 6097 	add.w	r0, sp, #1208	; 0x4b8
   1280e:	f7fe f8df 	bl	109d0 <mul_mont_n>
   12812:	9501      	str	r5, [sp, #4]
   12814:	9600      	str	r6, [sp, #0]
   12816:	4623      	mov	r3, r4
   12818:	f50d 62af 	add.w	r2, sp, #1400	; 0x578
   1281c:	4611      	mov	r1, r2
   1281e:	f50d 6091 	add.w	r0, sp, #1160	; 0x488
   12822:	f7fe f8d5 	bl	109d0 <mul_mont_n>
   12826:	9501      	str	r5, [sp, #4]
   12828:	9600      	str	r6, [sp, #0]
   1282a:	4623      	mov	r3, r4
   1282c:	f50d 62a9 	add.w	r2, sp, #1352	; 0x548
   12830:	f50d 61af 	add.w	r1, sp, #1400	; 0x578
   12834:	f50d 608b 	add.w	r0, sp, #1112	; 0x458
   12838:	f7fe f8ca 	bl	109d0 <mul_mont_n>
   1283c:	9501      	str	r5, [sp, #4]
   1283e:	9600      	str	r6, [sp, #0]
   12840:	4623      	mov	r3, r4
   12842:	f50d 62a9 	add.w	r2, sp, #1352	; 0x548
   12846:	4611      	mov	r1, r2
   12848:	f50d 6085 	add.w	r0, sp, #1064	; 0x428
   1284c:	f7fe f8c0 	bl	109d0 <mul_mont_n>
   12850:	9501      	str	r5, [sp, #4]
   12852:	9600      	str	r6, [sp, #0]
   12854:	4623      	mov	r3, r4
   12856:	f50d 62a3 	add.w	r2, sp, #1304	; 0x518
   1285a:	f50d 61a9 	add.w	r1, sp, #1352	; 0x548
   1285e:	a8fe      	add	r0, sp, #1016	; 0x3f8
   12860:	f7fe f8b6 	bl	109d0 <mul_mont_n>
   12864:	9501      	str	r5, [sp, #4]
   12866:	9600      	str	r6, [sp, #0]
   12868:	4623      	mov	r3, r4
   1286a:	f50d 62a3 	add.w	r2, sp, #1304	; 0x518
   1286e:	4611      	mov	r1, r2
   12870:	a8f2      	add	r0, sp, #968	; 0x3c8
   12872:	f7fe f8ad 	bl	109d0 <mul_mont_n>
   12876:	9501      	str	r5, [sp, #4]
   12878:	9600      	str	r6, [sp, #0]
   1287a:	4623      	mov	r3, r4
   1287c:	f50d 629d 	add.w	r2, sp, #1256	; 0x4e8
   12880:	f50d 61a3 	add.w	r1, sp, #1304	; 0x518
   12884:	a8e6      	add	r0, sp, #920	; 0x398
   12886:	f7fe f8a3 	bl	109d0 <mul_mont_n>
   1288a:	230b      	movs	r3, #11
   1288c:	f50d 628b 	add.w	r2, sp, #1112	; 0x458
   12890:	f504 7140 	add.w	r1, r4, #768	; 0x300
   12894:	a832      	add	r0, sp, #200	; 0xc8
   12896:	f7fe f991 	bl	10bbc <map_fp_times_Zz>
   1289a:	9501      	str	r5, [sp, #4]
   1289c:	9600      	str	r6, [sp, #0]
   1289e:	4623      	mov	r3, r4
   128a0:	f504 62a2 	add.w	r2, r4, #1296	; 0x510
   128a4:	4641      	mov	r1, r8
   128a6:	a826      	add	r0, sp, #152	; 0x98
   128a8:	f7fe f892 	bl	109d0 <mul_mont_n>
   128ac:	9500      	str	r5, [sp, #0]
   128ae:	4623      	mov	r3, r4
   128b0:	aaaa      	add	r2, sp, #680	; 0x2a8
   128b2:	a926      	add	r1, sp, #152	; 0x98
   128b4:	4608      	mov	r0, r1
   128b6:	f7fe fa33 	bl	10d20 <add_mod_n>
   128ba:	230a      	movs	r3, #10
   128bc:	aa32      	add	r2, sp, #200	; 0xc8
   128be:	4641      	mov	r1, r8
   128c0:	a826      	add	r0, sp, #152	; 0x98
   128c2:	f7fe fa86 	bl	10dd2 <map_fp>
   128c6:	230a      	movs	r3, #10
   128c8:	f50d 6291 	add.w	r2, sp, #1160	; 0x488
   128cc:	f504 61a8 	add.w	r1, r4, #1344	; 0x540
   128d0:	a832      	add	r0, sp, #200	; 0xc8
   128d2:	f7fe f973 	bl	10bbc <map_fp_times_Zz>
   128d6:	9500      	str	r5, [sp, #0]
   128d8:	4623      	mov	r3, r4
   128da:	aa9e      	add	r2, sp, #632	; 0x278
   128dc:	4641      	mov	r1, r8
   128de:	a81a      	add	r0, sp, #104	; 0x68
   128e0:	f7fe fa1e 	bl	10d20 <add_mod_n>
   128e4:	2309      	movs	r3, #9
   128e6:	aa32      	add	r2, sp, #200	; 0xc8
   128e8:	4641      	mov	r1, r8
   128ea:	a81a      	add	r0, sp, #104	; 0x68
   128ec:	f7fe fa71 	bl	10dd2 <map_fp>
   128f0:	9501      	str	r5, [sp, #4]
   128f2:	9600      	str	r6, [sp, #0]
   128f4:	4623      	mov	r3, r4
   128f6:	f50d 62c7 	add.w	r2, sp, #1592	; 0x638
   128fa:	a91a      	add	r1, sp, #104	; 0x68
   128fc:	4608      	mov	r0, r1
   128fe:	f7fe f867 	bl	109d0 <mul_mont_n>
   12902:	230f      	movs	r3, #15
   12904:	aae6      	add	r2, sp, #920	; 0x398
   12906:	f504 61e4 	add.w	r1, r4, #1824	; 0x720
   1290a:	a832      	add	r0, sp, #200	; 0xc8
   1290c:	f7fe f956 	bl	10bbc <map_fp_times_Zz>
   12910:	9501      	str	r5, [sp, #4]
   12912:	9600      	str	r6, [sp, #0]
   12914:	4623      	mov	r3, r4
   12916:	f504 621f 	add.w	r2, r4, #2544	; 0x9f0
   1291a:	4641      	mov	r1, r8
   1291c:	a80e      	add	r0, sp, #56	; 0x38
   1291e:	f7fe f857 	bl	109d0 <mul_mont_n>
   12922:	9500      	str	r5, [sp, #0]
   12924:	4623      	mov	r3, r4
   12926:	aada      	add	r2, sp, #872	; 0x368
   12928:	a90e      	add	r1, sp, #56	; 0x38
   1292a:	4608      	mov	r0, r1
   1292c:	f7fe f9f8 	bl	10d20 <add_mod_n>
   12930:	230e      	movs	r3, #14
   12932:	aa32      	add	r2, sp, #200	; 0xc8
   12934:	4641      	mov	r1, r8
   12936:	a80e      	add	r0, sp, #56	; 0x38
   12938:	f7fe fa4b 	bl	10dd2 <map_fp>
   1293c:	9501      	str	r5, [sp, #4]
   1293e:	9600      	str	r6, [sp, #0]
   12940:	4623      	mov	r3, r4
   12942:	f108 0230 	add.w	r2, r8, #48	; 0x30
   12946:	a90e      	add	r1, sp, #56	; 0x38
   12948:	4608      	mov	r0, r1
   1294a:	f7fe f841 	bl	109d0 <mul_mont_n>
   1294e:	230f      	movs	r3, #15
   12950:	aae6      	add	r2, sp, #920	; 0x398
   12952:	f504 6122 	add.w	r1, r4, #2592	; 0xa20
   12956:	a832      	add	r0, sp, #200	; 0xc8
   12958:	f7fe f930 	bl	10bbc <map_fp_times_Zz>
   1295c:	9500      	str	r5, [sp, #0]
   1295e:	4623      	mov	r3, r4
   12960:	aada      	add	r2, sp, #872	; 0x368
   12962:	4641      	mov	r1, r8
   12964:	a802      	add	r0, sp, #8
   12966:	f7fe f9db 	bl	10d20 <add_mod_n>
   1296a:	230e      	movs	r3, #14
   1296c:	aa32      	add	r2, sp, #200	; 0xc8
   1296e:	4641      	mov	r1, r8
   12970:	a802      	add	r0, sp, #8
   12972:	f7fe fa2e 	bl	10dd2 <map_fp>
   12976:	9501      	str	r5, [sp, #4]
   12978:	9600      	str	r6, [sp, #0]
   1297a:	4623      	mov	r3, r4
   1297c:	464a      	mov	r2, r9
   1297e:	f50d 61c7 	add.w	r1, sp, #1592	; 0x638
   12982:	4608      	mov	r0, r1
   12984:	f7fe f824 	bl	109d0 <mul_mont_n>
   12988:	9501      	str	r5, [sp, #4]
   1298a:	9600      	str	r6, [sp, #0]
   1298c:	4623      	mov	r3, r4
   1298e:	f50d 62c7 	add.w	r2, sp, #1592	; 0x638
   12992:	a902      	add	r1, sp, #8
   12994:	4608      	mov	r0, r1
   12996:	f7fe f81b 	bl	109d0 <mul_mont_n>
   1299a:	f107 0860 	add.w	r8, r7, #96	; 0x60
   1299e:	9501      	str	r5, [sp, #4]
   129a0:	9600      	str	r6, [sp, #0]
   129a2:	4623      	mov	r3, r4
   129a4:	aa02      	add	r2, sp, #8
   129a6:	a91a      	add	r1, sp, #104	; 0x68
   129a8:	4640      	mov	r0, r8
   129aa:	f7fe f811 	bl	109d0 <mul_mont_n>
   129ae:	9501      	str	r5, [sp, #4]
   129b0:	9600      	str	r6, [sp, #0]
   129b2:	4623      	mov	r3, r4
   129b4:	aa02      	add	r2, sp, #8
   129b6:	a926      	add	r1, sp, #152	; 0x98
   129b8:	4638      	mov	r0, r7
   129ba:	f7fe f809 	bl	109d0 <mul_mont_n>
   129be:	9501      	str	r5, [sp, #4]
   129c0:	9600      	str	r6, [sp, #0]
   129c2:	4623      	mov	r3, r4
   129c4:	4642      	mov	r2, r8
   129c6:	4639      	mov	r1, r7
   129c8:	4638      	mov	r0, r7
   129ca:	f7fe f801 	bl	109d0 <mul_mont_n>
   129ce:	3730      	adds	r7, #48	; 0x30
   129d0:	9501      	str	r5, [sp, #4]
   129d2:	9600      	str	r6, [sp, #0]
   129d4:	4623      	mov	r3, r4
   129d6:	4642      	mov	r2, r8
   129d8:	4641      	mov	r1, r8
   129da:	4638      	mov	r0, r7
   129dc:	f7fd fff8 	bl	109d0 <mul_mont_n>
   129e0:	9501      	str	r5, [sp, #4]
   129e2:	9600      	str	r6, [sp, #0]
   129e4:	4623      	mov	r3, r4
   129e6:	aa1a      	add	r2, sp, #104	; 0x68
   129e8:	4639      	mov	r1, r7
   129ea:	4638      	mov	r0, r7
   129ec:	f7fd fff0 	bl	109d0 <mul_mont_n>
   129f0:	9501      	str	r5, [sp, #4]
   129f2:	9600      	str	r6, [sp, #0]
   129f4:	4623      	mov	r3, r4
   129f6:	aa0e      	add	r2, sp, #56	; 0x38
   129f8:	4639      	mov	r1, r7
   129fa:	4638      	mov	r0, r7
   129fc:	f7fd ffe8 	bl	109d0 <mul_mont_n>
   12a00:	f20d 6d6c 	addw	sp, sp, #1644	; 0x66c
   12a04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12a08:	00028738 	.word	0x00028738
   12a0c:	fffcfffd 	.word	0xfffcfffd

00012a10 <eucl_inverse_mod_n>:
   12a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a14:	b089      	sub	sp, #36	; 0x24
   12a16:	af02      	add	r7, sp, #8
   12a18:	6038      	str	r0, [r7, #0]
   12a1a:	460c      	mov	r4, r1
   12a1c:	469c      	mov	ip, r3
   12a1e:	6c3d      	ldr	r5, [r7, #64]	; 0x40
   12a20:	466b      	mov	r3, sp
   12a22:	eba3 03c5 	sub.w	r3, r3, r5, lsl #3
   12a26:	469d      	mov	sp, r3
   12a28:	ae02      	add	r6, sp, #8
   12a2a:	eba3 03c5 	sub.w	r3, r3, r5, lsl #3
   12a2e:	469d      	mov	sp, r3
   12a30:	ab02      	add	r3, sp, #8
   12a32:	613b      	str	r3, [r7, #16]
   12a34:	f035 4140 	bics.w	r1, r5, #3221225472	; 0xc0000000
   12a38:	d051      	beq.n	12ade <eucl_inverse_mod_n+0xce>
   12a3a:	4692      	mov	sl, r2
   12a3c:	1f22      	subs	r2, r4, #4
   12a3e:	008b      	lsls	r3, r1, #2
   12a40:	60bb      	str	r3, [r7, #8]
   12a42:	eb02 0181 	add.w	r1, r2, r1, lsl #2
   12a46:	4613      	mov	r3, r2
   12a48:	2400      	movs	r4, #0
   12a4a:	f853 0f04 	ldr.w	r0, [r3, #4]!
   12a4e:	4304      	orrs	r4, r0
   12a50:	428b      	cmp	r3, r1
   12a52:	d1fa      	bne.n	12a4a <eucl_inverse_mod_n+0x3a>
   12a54:	1e63      	subs	r3, r4, #1
   12a56:	ea23 0304 	bic.w	r3, r3, r4
   12a5a:	0fdb      	lsrs	r3, r3, #31
   12a5c:	60fb      	str	r3, [r7, #12]
   12a5e:	d135      	bne.n	12acc <eucl_inverse_mod_n+0xbc>
   12a60:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   12a64:	1f33      	subs	r3, r6, #4
   12a66:	f852 0f04 	ldr.w	r0, [r2, #4]!
   12a6a:	f843 0f04 	str.w	r0, [r3, #4]!
   12a6e:	428a      	cmp	r2, r1
   12a70:	d1f9      	bne.n	12a66 <eucl_inverse_mod_n+0x56>
   12a72:	f1bc 0f00 	cmp.w	ip, #0
   12a76:	d035      	beq.n	12ae4 <eucl_inverse_mod_n+0xd4>
   12a78:	f1ac 0004 	sub.w	r0, ip, #4
   12a7c:	f1ab 0304 	sub.w	r3, fp, #4
   12a80:	4433      	add	r3, r6
   12a82:	68ba      	ldr	r2, [r7, #8]
   12a84:	1881      	adds	r1, r0, r2
   12a86:	f850 2f04 	ldr.w	r2, [r0, #4]!
   12a8a:	f843 2f04 	str.w	r2, [r3, #4]!
   12a8e:	4288      	cmp	r0, r1
   12a90:	d1f9      	bne.n	12a86 <eucl_inverse_mod_n+0x76>
   12a92:	f1aa 0304 	sub.w	r3, sl, #4
   12a96:	693a      	ldr	r2, [r7, #16]
   12a98:	3a04      	subs	r2, #4
   12a9a:	68b9      	ldr	r1, [r7, #8]
   12a9c:	1858      	adds	r0, r3, r1
   12a9e:	f853 1f04 	ldr.w	r1, [r3, #4]!
   12aa2:	f842 1f04 	str.w	r1, [r2, #4]!
   12aa6:	4283      	cmp	r3, r0
   12aa8:	d1f9      	bne.n	12a9e <eucl_inverse_mod_n+0x8e>
   12aaa:	693b      	ldr	r3, [r7, #16]
   12aac:	eb03 000b 	add.w	r0, r3, fp
   12ab0:	4603      	mov	r3, r0
   12ab2:	68ba      	ldr	r2, [r7, #8]
   12ab4:	1881      	adds	r1, r0, r2
   12ab6:	2200      	movs	r2, #0
   12ab8:	f843 2b04 	str.w	r2, [r3], #4
   12abc:	428b      	cmp	r3, r1
   12abe:	d1fb      	bne.n	12ab8 <eucl_inverse_mod_n+0xa8>
   12ac0:	f1ab 0304 	sub.w	r3, fp, #4
   12ac4:	607b      	str	r3, [r7, #4]
   12ac6:	f105 39ff 	add.w	r9, r5, #4294967295
   12aca:	e094      	b.n	12bf6 <eucl_inverse_mod_n+0x1e6>
   12acc:	683a      	ldr	r2, [r7, #0]
   12ace:	4613      	mov	r3, r2
   12ad0:	68b9      	ldr	r1, [r7, #8]
   12ad2:	4411      	add	r1, r2
   12ad4:	2200      	movs	r2, #0
   12ad6:	f843 2b04 	str.w	r2, [r3], #4
   12ada:	428b      	cmp	r3, r1
   12adc:	d1fb      	bne.n	12ad6 <eucl_inverse_mod_n+0xc6>
   12ade:	683b      	ldr	r3, [r7, #0]
   12ae0:	2400      	movs	r4, #0
   12ae2:	e0a4      	b.n	12c2e <eucl_inverse_mod_n+0x21e>
   12ae4:	eb06 020b 	add.w	r2, r6, fp
   12ae8:	4613      	mov	r3, r2
   12aea:	68b9      	ldr	r1, [r7, #8]
   12aec:	1850      	adds	r0, r2, r1
   12aee:	2100      	movs	r1, #0
   12af0:	f843 1b04 	str.w	r1, [r3], #4
   12af4:	4283      	cmp	r3, r0
   12af6:	d1fb      	bne.n	12af0 <eucl_inverse_mod_n+0xe0>
   12af8:	2301      	movs	r3, #1
   12afa:	6013      	str	r3, [r2, #0]
   12afc:	e7c9      	b.n	12a92 <eucl_inverse_mod_n+0x82>
   12afe:	b175      	cbz	r5, 12b1e <eucl_inverse_mod_n+0x10e>
   12b00:	6979      	ldr	r1, [r7, #20]
   12b02:	f1c2 0c20 	rsb	ip, r2, #32
   12b06:	4696      	mov	lr, r2
   12b08:	684a      	ldr	r2, [r1, #4]
   12b0a:	fa02 f00c 	lsl.w	r0, r2, ip
   12b0e:	4303      	orrs	r3, r0
   12b10:	f841 3b04 	str.w	r3, [r1], #4
   12b14:	fa22 f30e 	lsr.w	r3, r2, lr
   12b18:	42a1      	cmp	r1, r4
   12b1a:	d1f5      	bne.n	12b08 <eucl_inverse_mod_n+0xf8>
   12b1c:	4672      	mov	r2, lr
   12b1e:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
   12b22:	f8cd 9000 	str.w	r9, [sp]
   12b26:	4653      	mov	r3, sl
   12b28:	4641      	mov	r1, r8
   12b2a:	4640      	mov	r0, r8
   12b2c:	f7fd fe0a 	bl	10744 <rshift_mod_n>
   12b30:	6831      	ldr	r1, [r6, #0]
   12b32:	f011 0f01 	tst.w	r1, #1
   12b36:	d10f      	bne.n	12b58 <eucl_inverse_mod_n+0x148>
   12b38:	084b      	lsrs	r3, r1, #1
   12b3a:	f3c1 0240 	ubfx	r2, r1, #1, #1
   12b3e:	f011 0f02 	tst.w	r1, #2
   12b42:	d1dc      	bne.n	12afe <eucl_inverse_mod_n+0xee>
   12b44:	088b      	lsrs	r3, r1, #2
   12b46:	2202      	movs	r2, #2
   12b48:	f013 0f01 	tst.w	r3, #1
   12b4c:	d1d7      	bne.n	12afe <eucl_inverse_mod_n+0xee>
   12b4e:	3201      	adds	r2, #1
   12b50:	085b      	lsrs	r3, r3, #1
   12b52:	2a1f      	cmp	r2, #31
   12b54:	d1f8      	bne.n	12b48 <eucl_inverse_mod_n+0x138>
   12b56:	e7d2      	b.n	12afe <eucl_inverse_mod_n+0xee>
   12b58:	462b      	mov	r3, r5
   12b5a:	464d      	mov	r5, r9
   12b5c:	4699      	mov	r9, r3
   12b5e:	f1a6 0e04 	sub.w	lr, r6, #4
   12b62:	693b      	ldr	r3, [r7, #16]
   12b64:	f1a3 0c04 	sub.w	ip, r3, #4
   12b68:	68f8      	ldr	r0, [r7, #12]
   12b6a:	4602      	mov	r2, r0
   12b6c:	2400      	movs	r4, #0
   12b6e:	f85e 3f04 	ldr.w	r3, [lr, #4]!
   12b72:	1a9b      	subs	r3, r3, r2
   12b74:	eb64 0204 	sbc.w	r2, r4, r4
   12b78:	f85c 1f04 	ldr.w	r1, [ip, #4]!
   12b7c:	1a5b      	subs	r3, r3, r1
   12b7e:	f162 0200 	sbc.w	r2, r2, #0
   12b82:	f002 0201 	and.w	r2, r2, #1
   12b86:	3001      	adds	r0, #1
   12b88:	4285      	cmp	r5, r0
   12b8a:	d1f0      	bne.n	12b6e <eucl_inverse_mod_n+0x15e>
   12b8c:	b112      	cbz	r2, 12b94 <eucl_inverse_mod_n+0x184>
   12b8e:	693b      	ldr	r3, [r7, #16]
   12b90:	613e      	str	r6, [r7, #16]
   12b92:	461e      	mov	r6, r3
   12b94:	1f31      	subs	r1, r6, #4
   12b96:	693b      	ldr	r3, [r7, #16]
   12b98:	f1a3 0e04 	sub.w	lr, r3, #4
   12b9c:	460c      	mov	r4, r1
   12b9e:	68f8      	ldr	r0, [r7, #12]
   12ba0:	4680      	mov	r8, r0
   12ba2:	f04f 0c00 	mov.w	ip, #0
   12ba6:	f854 3f04 	ldr.w	r3, [r4, #4]!
   12baa:	ebb3 0308 	subs.w	r3, r3, r8
   12bae:	eb6c 080c 	sbc.w	r8, ip, ip
   12bb2:	f85e 2f04 	ldr.w	r2, [lr, #4]!
   12bb6:	1a9b      	subs	r3, r3, r2
   12bb8:	f168 0800 	sbc.w	r8, r8, #0
   12bbc:	6023      	str	r3, [r4, #0]
   12bbe:	f008 0801 	and.w	r8, r8, #1
   12bc2:	3001      	adds	r0, #1
   12bc4:	4285      	cmp	r5, r0
   12bc6:	d8ee      	bhi.n	12ba6 <eucl_inverse_mod_n+0x196>
   12bc8:	68bb      	ldr	r3, [r7, #8]
   12bca:	1f18      	subs	r0, r3, #4
   12bcc:	4430      	add	r0, r6
   12bce:	68fb      	ldr	r3, [r7, #12]
   12bd0:	f851 2f04 	ldr.w	r2, [r1, #4]!
   12bd4:	4313      	orrs	r3, r2
   12bd6:	4281      	cmp	r1, r0
   12bd8:	d1fa      	bne.n	12bd0 <eucl_inverse_mod_n+0x1c0>
   12bda:	1e5c      	subs	r4, r3, #1
   12bdc:	ea24 0303 	bic.w	r3, r4, r3
   12be0:	0fdc      	lsrs	r4, r3, #31
   12be2:	eb06 000b 	add.w	r0, r6, fp
   12be6:	9500      	str	r5, [sp, #0]
   12be8:	4653      	mov	r3, sl
   12bea:	693a      	ldr	r2, [r7, #16]
   12bec:	445a      	add	r2, fp
   12bee:	4601      	mov	r1, r0
   12bf0:	f7fd fd40 	bl	10674 <sub_mod_n>
   12bf4:	b964      	cbnz	r4, 12c10 <eucl_inverse_mod_n+0x200>
   12bf6:	eb06 080b 	add.w	r8, r6, fp
   12bfa:	6831      	ldr	r1, [r6, #0]
   12bfc:	f011 0f01 	tst.w	r1, #1
   12c00:	d1ad      	bne.n	12b5e <eucl_inverse_mod_n+0x14e>
   12c02:	617e      	str	r6, [r7, #20]
   12c04:	687b      	ldr	r3, [r7, #4]
   12c06:	199c      	adds	r4, r3, r6
   12c08:	464b      	mov	r3, r9
   12c0a:	46a9      	mov	r9, r5
   12c0c:	461d      	mov	r5, r3
   12c0e:	e793      	b.n	12b38 <eucl_inverse_mod_n+0x128>
   12c10:	f1ab 0204 	sub.w	r2, fp, #4
   12c14:	693b      	ldr	r3, [r7, #16]
   12c16:	4413      	add	r3, r2
   12c18:	461a      	mov	r2, r3
   12c1a:	683b      	ldr	r3, [r7, #0]
   12c1c:	3b04      	subs	r3, #4
   12c1e:	68b8      	ldr	r0, [r7, #8]
   12c20:	4418      	add	r0, r3
   12c22:	f852 1f04 	ldr.w	r1, [r2, #4]!
   12c26:	f843 1f04 	str.w	r1, [r3, #4]!
   12c2a:	4298      	cmp	r0, r3
   12c2c:	d1f9      	bne.n	12c22 <eucl_inverse_mod_n+0x212>
   12c2e:	4620      	mov	r0, r4
   12c30:	371c      	adds	r7, #28
   12c32:	46bd      	mov	sp, r7
   12c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012c38 <POINTonE1_dadd_affine>:
   12c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c3c:	b0f3      	sub	sp, #460	; 0x1cc
   12c3e:	9005      	str	r0, [sp, #20]
   12c40:	460d      	mov	r5, r1
   12c42:	4614      	mov	r4, r2
   12c44:	1f17      	subs	r7, r2, #4
   12c46:	f102 005c 	add.w	r0, r2, #92	; 0x5c
   12c4a:	463b      	mov	r3, r7
   12c4c:	2200      	movs	r2, #0
   12c4e:	f853 1f04 	ldr.w	r1, [r3, #4]!
   12c52:	430a      	orrs	r2, r1
   12c54:	4283      	cmp	r3, r0
   12c56:	d1fa      	bne.n	12c4e <POINTonE1_dadd_affine+0x16>
   12c58:	1e53      	subs	r3, r2, #1
   12c5a:	ea23 0202 	bic.w	r2, r3, r2
   12c5e:	0fd3      	lsrs	r3, r2, #31
   12c60:	9304      	str	r3, [sp, #16]
   12c62:	4eac      	ldr	r6, [pc, #688]	; (12f14 <POINTonE1_dadd_affine+0x2dc>)
   12c64:	f04f 080c 	mov.w	r8, #12
   12c68:	f8cd 8000 	str.w	r8, [sp]
   12c6c:	4633      	mov	r3, r6
   12c6e:	4622      	mov	r2, r4
   12c70:	4621      	mov	r1, r4
   12c72:	a81e      	add	r0, sp, #120	; 0x78
   12c74:	f7fe f854 	bl	10d20 <add_mod_n>
   12c78:	f8cd 8004 	str.w	r8, [sp, #4]
   12c7c:	4ba6      	ldr	r3, [pc, #664]	; (12f18 <POINTonE1_dadd_affine+0x2e0>)
   12c7e:	9300      	str	r3, [sp, #0]
   12c80:	4633      	mov	r3, r6
   12c82:	4622      	mov	r2, r4
   12c84:	4621      	mov	r1, r4
   12c86:	a812      	add	r0, sp, #72	; 0x48
   12c88:	f7fd fea2 	bl	109d0 <mul_mont_n>
   12c8c:	4643      	mov	r3, r8
   12c8e:	4632      	mov	r2, r6
   12c90:	a912      	add	r1, sp, #72	; 0x48
   12c92:	4608      	mov	r0, r1
   12c94:	f7fe f8cc 	bl	10e30 <mul_by_3_mod_n>
   12c98:	f104 0b30 	add.w	fp, r4, #48	; 0x30
   12c9c:	f8cd 8000 	str.w	r8, [sp]
   12ca0:	4633      	mov	r3, r6
   12ca2:	465a      	mov	r2, fp
   12ca4:	4659      	mov	r1, fp
   12ca6:	a806      	add	r0, sp, #24
   12ca8:	f7fe f83a 	bl	10d20 <add_mod_n>
   12cac:	f105 0a60 	add.w	sl, r5, #96	; 0x60
   12cb0:	f105 035c 	add.w	r3, r5, #92	; 0x5c
   12cb4:	f105 008c 	add.w	r0, r5, #140	; 0x8c
   12cb8:	2200      	movs	r2, #0
   12cba:	f853 1f04 	ldr.w	r1, [r3, #4]!
   12cbe:	430a      	orrs	r2, r1
   12cc0:	4283      	cmp	r3, r0
   12cc2:	d1fa      	bne.n	12cba <POINTonE1_dadd_affine+0x82>
   12cc4:	1e53      	subs	r3, r2, #1
   12cc6:	ea23 0202 	bic.w	r2, r3, r2
   12cca:	0fd3      	lsrs	r3, r2, #31
   12ccc:	9303      	str	r3, [sp, #12]
   12cce:	4e91      	ldr	r6, [pc, #580]	; (12f14 <POINTonE1_dadd_affine+0x2dc>)
   12cd0:	f04f 080c 	mov.w	r8, #12
   12cd4:	f8cd 8004 	str.w	r8, [sp, #4]
   12cd8:	f8df 923c 	ldr.w	r9, [pc, #572]	; 12f18 <POINTonE1_dadd_affine+0x2e0>
   12cdc:	f8cd 9000 	str.w	r9, [sp]
   12ce0:	4633      	mov	r3, r6
   12ce2:	4652      	mov	r2, sl
   12ce4:	4651      	mov	r1, sl
   12ce6:	a82a      	add	r0, sp, #168	; 0xa8
   12ce8:	f7fd fe72 	bl	109d0 <mul_mont_n>
   12cec:	f8cd 8004 	str.w	r8, [sp, #4]
   12cf0:	f8cd 9000 	str.w	r9, [sp]
   12cf4:	4633      	mov	r3, r6
   12cf6:	4652      	mov	r2, sl
   12cf8:	a92a      	add	r1, sp, #168	; 0xa8
   12cfa:	a836      	add	r0, sp, #216	; 0xd8
   12cfc:	f7fd fe68 	bl	109d0 <mul_mont_n>
   12d00:	f8cd 8004 	str.w	r8, [sp, #4]
   12d04:	f8cd 9000 	str.w	r9, [sp]
   12d08:	4633      	mov	r3, r6
   12d0a:	465a      	mov	r2, fp
   12d0c:	a936      	add	r1, sp, #216	; 0xd8
   12d0e:	4608      	mov	r0, r1
   12d10:	f7fd fe5e 	bl	109d0 <mul_mont_n>
   12d14:	f8cd 8000 	str.w	r8, [sp]
   12d18:	4633      	mov	r3, r6
   12d1a:	f105 0230 	add.w	r2, r5, #48	; 0x30
   12d1e:	a936      	add	r1, sp, #216	; 0xd8
   12d20:	4608      	mov	r0, r1
   12d22:	f7fd fca7 	bl	10674 <sub_mod_n>
   12d26:	f8cd 8004 	str.w	r8, [sp, #4]
   12d2a:	f8cd 9000 	str.w	r9, [sp]
   12d2e:	4633      	mov	r3, r6
   12d30:	4622      	mov	r2, r4
   12d32:	a92a      	add	r1, sp, #168	; 0xa8
   12d34:	4608      	mov	r0, r1
   12d36:	f7fd fe4b 	bl	109d0 <mul_mont_n>
   12d3a:	f8cd 8000 	str.w	r8, [sp]
   12d3e:	4633      	mov	r3, r6
   12d40:	462a      	mov	r2, r5
   12d42:	a92a      	add	r1, sp, #168	; 0xa8
   12d44:	a842      	add	r0, sp, #264	; 0x108
   12d46:	f7fd ffeb 	bl	10d20 <add_mod_n>
   12d4a:	f8cd 8000 	str.w	r8, [sp]
   12d4e:	4633      	mov	r3, r6
   12d50:	462a      	mov	r2, r5
   12d52:	a92a      	add	r1, sp, #168	; 0xa8
   12d54:	4608      	mov	r0, r1
   12d56:	f7fd fc8d 	bl	10674 <sub_mod_n>
   12d5a:	f8cd 8004 	str.w	r8, [sp, #4]
   12d5e:	f8cd 9000 	str.w	r9, [sp]
   12d62:	4633      	mov	r3, r6
   12d64:	4652      	mov	r2, sl
   12d66:	a92a      	add	r1, sp, #168	; 0xa8
   12d68:	a866      	add	r0, sp, #408	; 0x198
   12d6a:	f7fd fe31 	bl	109d0 <mul_mont_n>
   12d6e:	a929      	add	r1, sp, #164	; 0xa4
   12d70:	ac41      	add	r4, sp, #260	; 0x104
   12d72:	460b      	mov	r3, r1
   12d74:	2200      	movs	r2, #0
   12d76:	f853 0f04 	ldr.w	r0, [r3, #4]!
   12d7a:	4302      	orrs	r2, r0
   12d7c:	42a3      	cmp	r3, r4
   12d7e:	d1fa      	bne.n	12d76 <POINTonE1_dadd_affine+0x13e>
   12d80:	1e53      	subs	r3, r2, #1
   12d82:	ea23 0202 	bic.w	r2, r3, r2
   12d86:	17d2      	asrs	r2, r2, #31
   12d88:	3d04      	subs	r5, #4
   12d8a:	ac4e      	add	r4, sp, #312	; 0x138
   12d8c:	f50d 78cc 	add.w	r8, sp, #408	; 0x198
   12d90:	4620      	mov	r0, r4
   12d92:	46ac      	mov	ip, r5
   12d94:	46be      	mov	lr, r7
   12d96:	f85c 6f04 	ldr.w	r6, [ip, #4]!
   12d9a:	f85e 3f04 	ldr.w	r3, [lr, #4]!
   12d9e:	4073      	eors	r3, r6
   12da0:	4013      	ands	r3, r2
   12da2:	4073      	eors	r3, r6
   12da4:	f840 3b04 	str.w	r3, [r0], #4
   12da8:	4540      	cmp	r0, r8
   12daa:	d1f4      	bne.n	12d96 <POINTonE1_dadd_affine+0x15e>
   12dac:	ae65      	add	r6, sp, #404	; 0x194
   12dae:	f10d 0948 	add.w	r9, sp, #72	; 0x48
   12db2:	46b4      	mov	ip, r6
   12db4:	a806      	add	r0, sp, #24
   12db6:	f850 3b04 	ldr.w	r3, [r0], #4
   12dba:	f85c ef04 	ldr.w	lr, [ip, #4]!
   12dbe:	ea83 030e 	eor.w	r3, r3, lr
   12dc2:	4013      	ands	r3, r2
   12dc4:	ea83 030e 	eor.w	r3, r3, lr
   12dc8:	f8cc 3000 	str.w	r3, [ip]
   12dcc:	4548      	cmp	r0, r9
   12dce:	d1f2      	bne.n	12db6 <POINTonE1_dadd_affine+0x17e>
   12dd0:	a805      	add	r0, sp, #20
   12dd2:	f10d 0ca4 	add.w	ip, sp, #164	; 0xa4
   12dd6:	4696      	mov	lr, r2
   12dd8:	f851 2f04 	ldr.w	r2, [r1, #4]!
   12ddc:	f850 3f04 	ldr.w	r3, [r0, #4]!
   12de0:	4053      	eors	r3, r2
   12de2:	ea03 030e 	and.w	r3, r3, lr
   12de6:	4053      	eors	r3, r2
   12de8:	600b      	str	r3, [r1, #0]
   12dea:	4560      	cmp	r0, ip
   12dec:	d1f4      	bne.n	12dd8 <POINTonE1_dadd_affine+0x1a0>
   12dee:	f8df 9124 	ldr.w	r9, [pc, #292]	; 12f14 <POINTonE1_dadd_affine+0x2dc>
   12df2:	f04f 0a0c 	mov.w	sl, #12
   12df6:	f8cd a004 	str.w	sl, [sp, #4]
   12dfa:	f8df b11c 	ldr.w	fp, [pc, #284]	; 12f18 <POINTonE1_dadd_affine+0x2e0>
   12dfe:	f8cd b000 	str.w	fp, [sp]
   12e02:	464b      	mov	r3, r9
   12e04:	aa2a      	add	r2, sp, #168	; 0xa8
   12e06:	4611      	mov	r1, r2
   12e08:	a806      	add	r0, sp, #24
   12e0a:	f7fd fde1 	bl	109d0 <mul_mont_n>
   12e0e:	f8cd a004 	str.w	sl, [sp, #4]
   12e12:	f8cd b000 	str.w	fp, [sp]
   12e16:	464b      	mov	r3, r9
   12e18:	aa2a      	add	r2, sp, #168	; 0xa8
   12e1a:	a906      	add	r1, sp, #24
   12e1c:	a812      	add	r0, sp, #72	; 0x48
   12e1e:	f7fd fdd7 	bl	109d0 <mul_mont_n>
   12e22:	f8cd a004 	str.w	sl, [sp, #4]
   12e26:	f8cd b000 	str.w	fp, [sp]
   12e2a:	464b      	mov	r3, r9
   12e2c:	aa5a      	add	r2, sp, #360	; 0x168
   12e2e:	a912      	add	r1, sp, #72	; 0x48
   12e30:	4608      	mov	r0, r1
   12e32:	f7fd fdcd 	bl	109d0 <mul_mont_n>
   12e36:	f8cd a004 	str.w	sl, [sp, #4]
   12e3a:	f8cd b000 	str.w	fp, [sp]
   12e3e:	464b      	mov	r3, r9
   12e40:	aa4e      	add	r2, sp, #312	; 0x138
   12e42:	a906      	add	r1, sp, #24
   12e44:	a85a      	add	r0, sp, #360	; 0x168
   12e46:	f7fd fdc3 	bl	109d0 <mul_mont_n>
   12e4a:	f8cd a004 	str.w	sl, [sp, #4]
   12e4e:	f8cd b000 	str.w	fp, [sp]
   12e52:	464b      	mov	r3, r9
   12e54:	aa42      	add	r2, sp, #264	; 0x108
   12e56:	a906      	add	r1, sp, #24
   12e58:	4608      	mov	r0, r1
   12e5a:	f7fd fdb9 	bl	109d0 <mul_mont_n>
   12e5e:	f8cd a004 	str.w	sl, [sp, #4]
   12e62:	f8cd b000 	str.w	fp, [sp]
   12e66:	464b      	mov	r3, r9
   12e68:	aa36      	add	r2, sp, #216	; 0xd8
   12e6a:	4611      	mov	r1, r2
   12e6c:	a84e      	add	r0, sp, #312	; 0x138
   12e6e:	f7fd fdaf 	bl	109d0 <mul_mont_n>
   12e72:	f8cd a000 	str.w	sl, [sp]
   12e76:	464b      	mov	r3, r9
   12e78:	aa06      	add	r2, sp, #24
   12e7a:	a94e      	add	r1, sp, #312	; 0x138
   12e7c:	4608      	mov	r0, r1
   12e7e:	f7fd fbf9 	bl	10674 <sub_mod_n>
   12e82:	f8cd a000 	str.w	sl, [sp]
   12e86:	464b      	mov	r3, r9
   12e88:	aa4e      	add	r2, sp, #312	; 0x138
   12e8a:	a95a      	add	r1, sp, #360	; 0x168
   12e8c:	4608      	mov	r0, r1
   12e8e:	f7fd fbf1 	bl	10674 <sub_mod_n>
   12e92:	f8cd a004 	str.w	sl, [sp, #4]
   12e96:	f8cd b000 	str.w	fp, [sp]
   12e9a:	464b      	mov	r3, r9
   12e9c:	aa36      	add	r2, sp, #216	; 0xd8
   12e9e:	a95a      	add	r1, sp, #360	; 0x168
   12ea0:	4608      	mov	r0, r1
   12ea2:	f7fd fd95 	bl	109d0 <mul_mont_n>
   12ea6:	f8cd a000 	str.w	sl, [sp]
   12eaa:	464b      	mov	r3, r9
   12eac:	aa12      	add	r2, sp, #72	; 0x48
   12eae:	a95a      	add	r1, sp, #360	; 0x168
   12eb0:	4608      	mov	r0, r1
   12eb2:	f7fd fbdf 	bl	10674 <sub_mod_n>
   12eb6:	9b03      	ldr	r3, [sp, #12]
   12eb8:	425a      	negs	r2, r3
   12eba:	4621      	mov	r1, r4
   12ebc:	6808      	ldr	r0, [r1, #0]
   12ebe:	f857 3f04 	ldr.w	r3, [r7, #4]!
   12ec2:	4043      	eors	r3, r0
   12ec4:	4013      	ands	r3, r2
   12ec6:	4043      	eors	r3, r0
   12ec8:	f841 3b04 	str.w	r3, [r1], #4
   12ecc:	4541      	cmp	r1, r8
   12ece:	d1f5      	bne.n	12ebc <POINTonE1_dadd_affine+0x284>
   12ed0:	4f10      	ldr	r7, [pc, #64]	; (12f14 <POINTonE1_dadd_affine+0x2dc>)
   12ed2:	f107 0190 	add.w	r1, r7, #144	; 0x90
   12ed6:	37c0      	adds	r7, #192	; 0xc0
   12ed8:	f851 3b04 	ldr.w	r3, [r1], #4
   12edc:	f856 0f04 	ldr.w	r0, [r6, #4]!
   12ee0:	4043      	eors	r3, r0
   12ee2:	4013      	ands	r3, r2
   12ee4:	4043      	eors	r3, r0
   12ee6:	6033      	str	r3, [r6, #0]
   12ee8:	42b9      	cmp	r1, r7
   12eea:	d1f5      	bne.n	12ed8 <POINTonE1_dadd_affine+0x2a0>
   12eec:	9b04      	ldr	r3, [sp, #16]
   12eee:	4259      	negs	r1, r3
   12ef0:	9b05      	ldr	r3, [sp, #20]
   12ef2:	1f18      	subs	r0, r3, #4
   12ef4:	f104 0690 	add.w	r6, r4, #144	; 0x90
   12ef8:	f854 2b04 	ldr.w	r2, [r4], #4
   12efc:	f855 3f04 	ldr.w	r3, [r5, #4]!
   12f00:	4053      	eors	r3, r2
   12f02:	400b      	ands	r3, r1
   12f04:	4053      	eors	r3, r2
   12f06:	f840 3f04 	str.w	r3, [r0, #4]!
   12f0a:	42a6      	cmp	r6, r4
   12f0c:	d1f4      	bne.n	12ef8 <POINTonE1_dadd_affine+0x2c0>
   12f0e:	b073      	add	sp, #460	; 0x1cc
   12f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f14:	00028738 	.word	0x00028738
   12f18:	fffcfffd 	.word	0xfffcfffd

00012f1c <POINTonE1_dadd>:
   12f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f20:	b0f3      	sub	sp, #460	; 0x1cc
   12f22:	9005      	str	r0, [sp, #20]
   12f24:	460c      	mov	r4, r1
   12f26:	4615      	mov	r5, r2
   12f28:	9302      	str	r3, [sp, #8]
   12f2a:	4ec9      	ldr	r6, [pc, #804]	; (13250 <POINTonE1_dadd+0x334>)
   12f2c:	270c      	movs	r7, #12
   12f2e:	9700      	str	r7, [sp, #0]
   12f30:	4633      	mov	r3, r6
   12f32:	460a      	mov	r2, r1
   12f34:	a81e      	add	r0, sp, #120	; 0x78
   12f36:	f7fd fef3 	bl	10d20 <add_mod_n>
   12f3a:	9701      	str	r7, [sp, #4]
   12f3c:	4bc5      	ldr	r3, [pc, #788]	; (13254 <POINTonE1_dadd+0x338>)
   12f3e:	9300      	str	r3, [sp, #0]
   12f40:	4633      	mov	r3, r6
   12f42:	4622      	mov	r2, r4
   12f44:	4621      	mov	r1, r4
   12f46:	a812      	add	r0, sp, #72	; 0x48
   12f48:	f7fd fd42 	bl	109d0 <mul_mont_n>
   12f4c:	463b      	mov	r3, r7
   12f4e:	4632      	mov	r2, r6
   12f50:	a912      	add	r1, sp, #72	; 0x48
   12f52:	4608      	mov	r0, r1
   12f54:	f7fd ff6c 	bl	10e30 <mul_by_3_mod_n>
   12f58:	f104 0830 	add.w	r8, r4, #48	; 0x30
   12f5c:	9700      	str	r7, [sp, #0]
   12f5e:	4633      	mov	r3, r6
   12f60:	4642      	mov	r2, r8
   12f62:	4641      	mov	r1, r8
   12f64:	a806      	add	r0, sp, #24
   12f66:	f7fd fedb 	bl	10d20 <add_mod_n>
   12f6a:	f105 0760 	add.w	r7, r5, #96	; 0x60
   12f6e:	f105 035c 	add.w	r3, r5, #92	; 0x5c
   12f72:	f105 008c 	add.w	r0, r5, #140	; 0x8c
   12f76:	2200      	movs	r2, #0
   12f78:	f853 1f04 	ldr.w	r1, [r3, #4]!
   12f7c:	430a      	orrs	r2, r1
   12f7e:	4283      	cmp	r3, r0
   12f80:	d1fa      	bne.n	12f78 <POINTonE1_dadd+0x5c>
   12f82:	1e53      	subs	r3, r2, #1
   12f84:	ea23 0202 	bic.w	r2, r3, r2
   12f88:	0fd3      	lsrs	r3, r2, #31
   12f8a:	9304      	str	r3, [sp, #16]
   12f8c:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 13250 <POINTonE1_dadd+0x334>
   12f90:	f04f 0b0c 	mov.w	fp, #12
   12f94:	f8cd b004 	str.w	fp, [sp, #4]
   12f98:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 13254 <POINTonE1_dadd+0x338>
   12f9c:	f8cd a000 	str.w	sl, [sp]
   12fa0:	464b      	mov	r3, r9
   12fa2:	463a      	mov	r2, r7
   12fa4:	4639      	mov	r1, r7
   12fa6:	a84e      	add	r0, sp, #312	; 0x138
   12fa8:	f7fd fd12 	bl	109d0 <mul_mont_n>
   12fac:	f104 0660 	add.w	r6, r4, #96	; 0x60
   12fb0:	f8cd b004 	str.w	fp, [sp, #4]
   12fb4:	f8cd a000 	str.w	sl, [sp]
   12fb8:	464b      	mov	r3, r9
   12fba:	463a      	mov	r2, r7
   12fbc:	4631      	mov	r1, r6
   12fbe:	a866      	add	r0, sp, #408	; 0x198
   12fc0:	f7fd fd06 	bl	109d0 <mul_mont_n>
   12fc4:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   12fc8:	f104 008c 	add.w	r0, r4, #140	; 0x8c
   12fcc:	2200      	movs	r2, #0
   12fce:	f853 1f04 	ldr.w	r1, [r3, #4]!
   12fd2:	430a      	orrs	r2, r1
   12fd4:	4283      	cmp	r3, r0
   12fd6:	d1fa      	bne.n	12fce <POINTonE1_dadd+0xb2>
   12fd8:	1e53      	subs	r3, r2, #1
   12fda:	ea23 0202 	bic.w	r2, r3, r2
   12fde:	0fd3      	lsrs	r3, r2, #31
   12fe0:	9303      	str	r3, [sp, #12]
   12fe2:	230c      	movs	r3, #12
   12fe4:	9301      	str	r3, [sp, #4]
   12fe6:	4b9b      	ldr	r3, [pc, #620]	; (13254 <POINTonE1_dadd+0x338>)
   12fe8:	9300      	str	r3, [sp, #0]
   12fea:	4b99      	ldr	r3, [pc, #612]	; (13250 <POINTonE1_dadd+0x334>)
   12fec:	4632      	mov	r2, r6
   12fee:	4631      	mov	r1, r6
   12ff0:	a82a      	add	r0, sp, #168	; 0xa8
   12ff2:	f7fd fced 	bl	109d0 <mul_mont_n>
   12ff6:	9b02      	ldr	r3, [sp, #8]
   12ff8:	b30b      	cbz	r3, 1303e <POINTonE1_dadd+0x122>
   12ffa:	f8df 9254 	ldr.w	r9, [pc, #596]	; 13250 <POINTonE1_dadd+0x334>
   12ffe:	f04f 0a0c 	mov.w	sl, #12
   13002:	f8cd a004 	str.w	sl, [sp, #4]
   13006:	f8df b24c 	ldr.w	fp, [pc, #588]	; 13254 <POINTonE1_dadd+0x338>
   1300a:	f8cd b000 	str.w	fp, [sp]
   1300e:	464b      	mov	r3, r9
   13010:	aa2a      	add	r2, sp, #168	; 0xa8
   13012:	4611      	mov	r1, r2
   13014:	a85a      	add	r0, sp, #360	; 0x168
   13016:	f7fd fcdb 	bl	109d0 <mul_mont_n>
   1301a:	f8cd a004 	str.w	sl, [sp, #4]
   1301e:	f8cd b000 	str.w	fp, [sp]
   13022:	464b      	mov	r3, r9
   13024:	9a02      	ldr	r2, [sp, #8]
   13026:	a95a      	add	r1, sp, #360	; 0x168
   13028:	4608      	mov	r0, r1
   1302a:	f7fd fcd1 	bl	109d0 <mul_mont_n>
   1302e:	f8cd a000 	str.w	sl, [sp]
   13032:	464b      	mov	r3, r9
   13034:	aa5a      	add	r2, sp, #360	; 0x168
   13036:	a912      	add	r1, sp, #72	; 0x48
   13038:	4608      	mov	r0, r1
   1303a:	f7fd fe71 	bl	10d20 <add_mod_n>
   1303e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 13250 <POINTonE1_dadd+0x334>
   13042:	f04f 0a0c 	mov.w	sl, #12
   13046:	f8cd a004 	str.w	sl, [sp, #4]
   1304a:	f8df b208 	ldr.w	fp, [pc, #520]	; 13254 <POINTonE1_dadd+0x338>
   1304e:	f8cd b000 	str.w	fp, [sp]
   13052:	464b      	mov	r3, r9
   13054:	463a      	mov	r2, r7
   13056:	4641      	mov	r1, r8
   13058:	a85a      	add	r0, sp, #360	; 0x168
   1305a:	f7fd fcb9 	bl	109d0 <mul_mont_n>
   1305e:	f8cd a004 	str.w	sl, [sp, #4]
   13062:	f8cd b000 	str.w	fp, [sp]
   13066:	464b      	mov	r3, r9
   13068:	aa4e      	add	r2, sp, #312	; 0x138
   1306a:	a95a      	add	r1, sp, #360	; 0x168
   1306c:	4608      	mov	r0, r1
   1306e:	f7fd fcaf 	bl	109d0 <mul_mont_n>
   13072:	f8cd a004 	str.w	sl, [sp, #4]
   13076:	f8cd b000 	str.w	fp, [sp]
   1307a:	464b      	mov	r3, r9
   1307c:	4632      	mov	r2, r6
   1307e:	f105 0130 	add.w	r1, r5, #48	; 0x30
   13082:	a836      	add	r0, sp, #216	; 0xd8
   13084:	f7fd fca4 	bl	109d0 <mul_mont_n>
   13088:	f8cd a004 	str.w	sl, [sp, #4]
   1308c:	f8cd b000 	str.w	fp, [sp]
   13090:	464b      	mov	r3, r9
   13092:	aa2a      	add	r2, sp, #168	; 0xa8
   13094:	a936      	add	r1, sp, #216	; 0xd8
   13096:	4608      	mov	r0, r1
   13098:	f7fd fc9a 	bl	109d0 <mul_mont_n>
   1309c:	f8cd a000 	str.w	sl, [sp]
   130a0:	464b      	mov	r3, r9
   130a2:	aa5a      	add	r2, sp, #360	; 0x168
   130a4:	a936      	add	r1, sp, #216	; 0xd8
   130a6:	4608      	mov	r0, r1
   130a8:	f7fd fae4 	bl	10674 <sub_mod_n>
   130ac:	f8cd a004 	str.w	sl, [sp, #4]
   130b0:	f8cd b000 	str.w	fp, [sp]
   130b4:	464b      	mov	r3, r9
   130b6:	4622      	mov	r2, r4
   130b8:	a94e      	add	r1, sp, #312	; 0x138
   130ba:	4608      	mov	r0, r1
   130bc:	f7fd fc88 	bl	109d0 <mul_mont_n>
   130c0:	f8cd a004 	str.w	sl, [sp, #4]
   130c4:	f8cd b000 	str.w	fp, [sp]
   130c8:	464b      	mov	r3, r9
   130ca:	462a      	mov	r2, r5
   130cc:	a92a      	add	r1, sp, #168	; 0xa8
   130ce:	4608      	mov	r0, r1
   130d0:	f7fd fc7e 	bl	109d0 <mul_mont_n>
   130d4:	f8cd a000 	str.w	sl, [sp]
   130d8:	464b      	mov	r3, r9
   130da:	aa4e      	add	r2, sp, #312	; 0x138
   130dc:	a92a      	add	r1, sp, #168	; 0xa8
   130de:	a842      	add	r0, sp, #264	; 0x108
   130e0:	f7fd fe1e 	bl	10d20 <add_mod_n>
   130e4:	f8cd a000 	str.w	sl, [sp]
   130e8:	464b      	mov	r3, r9
   130ea:	aa4e      	add	r2, sp, #312	; 0x138
   130ec:	a92a      	add	r1, sp, #168	; 0xa8
   130ee:	4608      	mov	r0, r1
   130f0:	f7fd fac0 	bl	10674 <sub_mod_n>
   130f4:	aa29      	add	r2, sp, #164	; 0xa4
   130f6:	ae41      	add	r6, sp, #260	; 0x104
   130f8:	4613      	mov	r3, r2
   130fa:	2100      	movs	r1, #0
   130fc:	f853 0f04 	ldr.w	r0, [r3, #4]!
   13100:	4301      	orrs	r1, r0
   13102:	42b3      	cmp	r3, r6
   13104:	d1fa      	bne.n	130fc <POINTonE1_dadd+0x1e0>
   13106:	1e48      	subs	r0, r1, #1
   13108:	ea20 0001 	bic.w	r0, r0, r1
   1310c:	17c0      	asrs	r0, r0, #31
   1310e:	3c04      	subs	r4, #4
   13110:	ae4e      	add	r6, sp, #312	; 0x138
   13112:	af72      	add	r7, sp, #456	; 0x1c8
   13114:	4631      	mov	r1, r6
   13116:	46a4      	mov	ip, r4
   13118:	4696      	mov	lr, r2
   1311a:	680a      	ldr	r2, [r1, #0]
   1311c:	f85c 3f04 	ldr.w	r3, [ip, #4]!
   13120:	4053      	eors	r3, r2
   13122:	4003      	ands	r3, r0
   13124:	4053      	eors	r3, r2
   13126:	f841 3b04 	str.w	r3, [r1], #4
   1312a:	42b9      	cmp	r1, r7
   1312c:	d1f5      	bne.n	1311a <POINTonE1_dadd+0x1fe>
   1312e:	4672      	mov	r2, lr
   13130:	a905      	add	r1, sp, #20
   13132:	f10d 0ca4 	add.w	ip, sp, #164	; 0xa4
   13136:	4686      	mov	lr, r0
   13138:	f852 0f04 	ldr.w	r0, [r2, #4]!
   1313c:	f851 3f04 	ldr.w	r3, [r1, #4]!
   13140:	4043      	eors	r3, r0
   13142:	ea03 030e 	and.w	r3, r3, lr
   13146:	4043      	eors	r3, r0
   13148:	6013      	str	r3, [r2, #0]
   1314a:	4561      	cmp	r1, ip
   1314c:	d1f4      	bne.n	13138 <POINTonE1_dadd+0x21c>
   1314e:	f8df 8100 	ldr.w	r8, [pc, #256]	; 13250 <POINTonE1_dadd+0x334>
   13152:	f04f 090c 	mov.w	r9, #12
   13156:	f8cd 9004 	str.w	r9, [sp, #4]
   1315a:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 13254 <POINTonE1_dadd+0x338>
   1315e:	f8cd a000 	str.w	sl, [sp]
   13162:	4643      	mov	r3, r8
   13164:	aa2a      	add	r2, sp, #168	; 0xa8
   13166:	a966      	add	r1, sp, #408	; 0x198
   13168:	4608      	mov	r0, r1
   1316a:	f7fd fc31 	bl	109d0 <mul_mont_n>
   1316e:	f8cd 9004 	str.w	r9, [sp, #4]
   13172:	f8cd a000 	str.w	sl, [sp]
   13176:	4643      	mov	r3, r8
   13178:	aa2a      	add	r2, sp, #168	; 0xa8
   1317a:	4611      	mov	r1, r2
   1317c:	a806      	add	r0, sp, #24
   1317e:	f7fd fc27 	bl	109d0 <mul_mont_n>
   13182:	f8cd 9004 	str.w	r9, [sp, #4]
   13186:	f8cd a000 	str.w	sl, [sp]
   1318a:	4643      	mov	r3, r8
   1318c:	aa2a      	add	r2, sp, #168	; 0xa8
   1318e:	a906      	add	r1, sp, #24
   13190:	a812      	add	r0, sp, #72	; 0x48
   13192:	f7fd fc1d 	bl	109d0 <mul_mont_n>
   13196:	f8cd 9004 	str.w	r9, [sp, #4]
   1319a:	f8cd a000 	str.w	sl, [sp]
   1319e:	4643      	mov	r3, r8
   131a0:	aa5a      	add	r2, sp, #360	; 0x168
   131a2:	a912      	add	r1, sp, #72	; 0x48
   131a4:	4608      	mov	r0, r1
   131a6:	f7fd fc13 	bl	109d0 <mul_mont_n>
   131aa:	f8cd 9004 	str.w	r9, [sp, #4]
   131ae:	f8cd a000 	str.w	sl, [sp]
   131b2:	4643      	mov	r3, r8
   131b4:	aa4e      	add	r2, sp, #312	; 0x138
   131b6:	a906      	add	r1, sp, #24
   131b8:	a85a      	add	r0, sp, #360	; 0x168
   131ba:	f7fd fc09 	bl	109d0 <mul_mont_n>
   131be:	f8cd 9004 	str.w	r9, [sp, #4]
   131c2:	f8cd a000 	str.w	sl, [sp]
   131c6:	4643      	mov	r3, r8
   131c8:	aa42      	add	r2, sp, #264	; 0x108
   131ca:	a906      	add	r1, sp, #24
   131cc:	4608      	mov	r0, r1
   131ce:	f7fd fbff 	bl	109d0 <mul_mont_n>
   131d2:	f8cd 9004 	str.w	r9, [sp, #4]
   131d6:	f8cd a000 	str.w	sl, [sp]
   131da:	4643      	mov	r3, r8
   131dc:	aa36      	add	r2, sp, #216	; 0xd8
   131de:	4611      	mov	r1, r2
   131e0:	a84e      	add	r0, sp, #312	; 0x138
   131e2:	f7fd fbf5 	bl	109d0 <mul_mont_n>
   131e6:	f8cd 9000 	str.w	r9, [sp]
   131ea:	4643      	mov	r3, r8
   131ec:	aa06      	add	r2, sp, #24
   131ee:	a94e      	add	r1, sp, #312	; 0x138
   131f0:	4608      	mov	r0, r1
   131f2:	f7fd fa3f 	bl	10674 <sub_mod_n>
   131f6:	f8cd 9000 	str.w	r9, [sp]
   131fa:	4643      	mov	r3, r8
   131fc:	aa4e      	add	r2, sp, #312	; 0x138
   131fe:	a95a      	add	r1, sp, #360	; 0x168
   13200:	4608      	mov	r0, r1
   13202:	f7fd fa37 	bl	10674 <sub_mod_n>
   13206:	f8cd 9004 	str.w	r9, [sp, #4]
   1320a:	f8cd a000 	str.w	sl, [sp]
   1320e:	4643      	mov	r3, r8
   13210:	aa36      	add	r2, sp, #216	; 0xd8
   13212:	a95a      	add	r1, sp, #360	; 0x168
   13214:	4608      	mov	r0, r1
   13216:	f7fd fbdb 	bl	109d0 <mul_mont_n>
   1321a:	f8cd 9000 	str.w	r9, [sp]
   1321e:	4643      	mov	r3, r8
   13220:	aa12      	add	r2, sp, #72	; 0x48
   13222:	a95a      	add	r1, sp, #360	; 0x168
   13224:	4608      	mov	r0, r1
   13226:	f7fd fa25 	bl	10674 <sub_mod_n>
   1322a:	9b04      	ldr	r3, [sp, #16]
   1322c:	4258      	negs	r0, r3
   1322e:	4632      	mov	r2, r6
   13230:	6811      	ldr	r1, [r2, #0]
   13232:	f854 3f04 	ldr.w	r3, [r4, #4]!
   13236:	404b      	eors	r3, r1
   13238:	4003      	ands	r3, r0
   1323a:	404b      	eors	r3, r1
   1323c:	f842 3b04 	str.w	r3, [r2], #4
   13240:	42ba      	cmp	r2, r7
   13242:	d1f5      	bne.n	13230 <POINTonE1_dadd+0x314>
   13244:	9b03      	ldr	r3, [sp, #12]
   13246:	425a      	negs	r2, r3
   13248:	3d04      	subs	r5, #4
   1324a:	9b05      	ldr	r3, [sp, #20]
   1324c:	1f18      	subs	r0, r3, #4
   1324e:	e003      	b.n	13258 <POINTonE1_dadd+0x33c>
   13250:	00028738 	.word	0x00028738
   13254:	fffcfffd 	.word	0xfffcfffd
   13258:	f856 1b04 	ldr.w	r1, [r6], #4
   1325c:	f855 3f04 	ldr.w	r3, [r5, #4]!
   13260:	404b      	eors	r3, r1
   13262:	4013      	ands	r3, r2
   13264:	404b      	eors	r3, r1
   13266:	f840 3f04 	str.w	r3, [r0, #4]!
   1326a:	42be      	cmp	r6, r7
   1326c:	d1f4      	bne.n	13258 <POINTonE1_dadd+0x33c>
   1326e:	b073      	add	sp, #460	; 0x1cc
   13270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00013274 <POINTonE1s_mult_w4>:
   13274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13278:	b0a7      	sub	sp, #156	; 0x9c
   1327a:	af00      	add	r7, sp, #0
   1327c:	4605      	mov	r5, r0
   1327e:	4616      	mov	r6, r2
   13280:	603b      	str	r3, [r7, #0]
   13282:	f8d7 80c0 	ldr.w	r8, [r7, #192]	; 0xc0
   13286:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   1328a:	b37b      	cbz	r3, 132ec <POINTonE1s_mult_w4+0x78>
   1328c:	b176      	cbz	r6, 132ac <POINTonE1s_mult_w4+0x38>
   1328e:	f1a1 0a04 	sub.w	sl, r1, #4
   13292:	f8d7 90c4 	ldr.w	r9, [r7, #196]	; 0xc4
   13296:	2400      	movs	r4, #0
   13298:	f85a 1f04 	ldr.w	r1, [sl, #4]!
   1329c:	4648      	mov	r0, r9
   1329e:	f7ff fa2b 	bl	126f8 <POINTonE1_precompute_w4>
   132a2:	3401      	adds	r4, #1
   132a4:	f509 6990 	add.w	r9, r9, #1152	; 0x480
   132a8:	42a6      	cmp	r6, r4
   132aa:	d1f5      	bne.n	13298 <POINTonE1s_mult_w4+0x24>
   132ac:	f008 0103 	and.w	r1, r8, #3
   132b0:	1c4a      	adds	r2, r1, #1
   132b2:	2301      	movs	r3, #1
   132b4:	4093      	lsls	r3, r2
   132b6:	f103 3aff 	add.w	sl, r3, #4294967295
   132ba:	4689      	mov	r9, r1
   132bc:	ebb8 0801 	subs.w	r8, r8, r1
   132c0:	d01d      	beq.n	132fe <POINTonE1s_mult_w4+0x8a>
   132c2:	f108 3bff 	add.w	fp, r8, #4294967295
   132c6:	4659      	mov	r1, fp
   132c8:	683b      	ldr	r3, [r7, #0]
   132ca:	6818      	ldr	r0, [r3, #0]
   132cc:	f7fd f9ba 	bl	10644 <get_wval>
   132d0:	2104      	movs	r1, #4
   132d2:	ea00 000a 	and.w	r0, r0, sl
   132d6:	f7fd f9c1 	bl	1065c <booth_encode>
   132da:	4602      	mov	r2, r0
   132dc:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
   132e0:	4628      	mov	r0, r5
   132e2:	f7fe fc1f 	bl	11b24 <POINTonE1_gather_booth_w4>
   132e6:	2401      	movs	r4, #1
   132e8:	464b      	mov	r3, r9
   132ea:	e021      	b.n	13330 <POINTonE1s_mult_w4+0xbc>
   132ec:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
   132f0:	466a      	mov	r2, sp
   132f2:	eba2 13c3 	sub.w	r3, r2, r3, lsl #7
   132f6:	469d      	mov	sp, r3
   132f8:	f8c7 d0c4 	str.w	sp, [r7, #196]	; 0xc4
   132fc:	e7c6      	b.n	1328c <POINTonE1s_mult_w4+0x18>
   132fe:	683b      	ldr	r3, [r7, #0]
   13300:	681b      	ldr	r3, [r3, #0]
   13302:	7818      	ldrb	r0, [r3, #0]
   13304:	2104      	movs	r1, #4
   13306:	ea0a 0040 	and.w	r0, sl, r0, lsl #1
   1330a:	f7fd f9a7 	bl	1065c <booth_encode>
   1330e:	4602      	mov	r2, r0
   13310:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
   13314:	4628      	mov	r0, r5
   13316:	f7fe fc05 	bl	11b24 <POINTonE1_gather_booth_w4>
   1331a:	2401      	movs	r4, #1
   1331c:	e040      	b.n	133a0 <POINTonE1s_mult_w4+0x12c>
   1331e:	f1ab 0204 	sub.w	r2, fp, #4
   13322:	f04f 0a1f 	mov.w	sl, #31
   13326:	2304      	movs	r3, #4
   13328:	f1bb 0f03 	cmp.w	fp, #3
   1332c:	d036      	beq.n	1339c <POINTonE1s_mult_w4+0x128>
   1332e:	4693      	mov	fp, r2
   13330:	42a6      	cmp	r6, r4
   13332:	d92b      	bls.n	1338c <POINTonE1s_mult_w4+0x118>
   13334:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
   13338:	f109 39ff 	add.w	r9, r9, #4294967295
   1333c:	683a      	ldr	r2, [r7, #0]
   1333e:	eb02 0989 	add.w	r9, r2, r9, lsl #2
   13342:	eb04 08c4 	add.w	r8, r4, r4, lsl #3
   13346:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
   1334a:	eb02 18c8 	add.w	r8, r2, r8, lsl #7
   1334e:	3301      	adds	r3, #1
   13350:	607b      	str	r3, [r7, #4]
   13352:	687a      	ldr	r2, [r7, #4]
   13354:	4659      	mov	r1, fp
   13356:	f859 0f04 	ldr.w	r0, [r9, #4]!
   1335a:	f7fd f973 	bl	10644 <get_wval>
   1335e:	2104      	movs	r1, #4
   13360:	ea00 000a 	and.w	r0, r0, sl
   13364:	f7fd f97a 	bl	1065c <booth_encode>
   13368:	4602      	mov	r2, r0
   1336a:	4641      	mov	r1, r8
   1336c:	f107 0008 	add.w	r0, r7, #8
   13370:	f7fe fbd8 	bl	11b24 <POINTonE1_gather_booth_w4>
   13374:	2300      	movs	r3, #0
   13376:	f107 0208 	add.w	r2, r7, #8
   1337a:	4629      	mov	r1, r5
   1337c:	4628      	mov	r0, r5
   1337e:	f7ff fdcd 	bl	12f1c <POINTonE1_dadd>
   13382:	3401      	adds	r4, #1
   13384:	f508 6890 	add.w	r8, r8, #1152	; 0x480
   13388:	42a6      	cmp	r6, r4
   1338a:	d1e2      	bne.n	13352 <POINTonE1s_mult_w4+0xde>
   1338c:	2404      	movs	r4, #4
   1338e:	4629      	mov	r1, r5
   13390:	4628      	mov	r0, r5
   13392:	f7fe fd67 	bl	11e64 <POINTonE1_double>
   13396:	3c01      	subs	r4, #1
   13398:	d1f9      	bne.n	1338e <POINTonE1s_mult_w4+0x11a>
   1339a:	e7c0      	b.n	1331e <POINTonE1s_mult_w4+0xaa>
   1339c:	f04f 0a1f 	mov.w	sl, #31
   133a0:	42a6      	cmp	r6, r4
   133a2:	d928      	bls.n	133f6 <POINTonE1s_mult_w4+0x182>
   133a4:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
   133a8:	f109 39ff 	add.w	r9, r9, #4294967295
   133ac:	683b      	ldr	r3, [r7, #0]
   133ae:	eb03 0989 	add.w	r9, r3, r9, lsl #2
   133b2:	eb04 08c4 	add.w	r8, r4, r4, lsl #3
   133b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   133ba:	eb03 18c8 	add.w	r8, r3, r8, lsl #7
   133be:	f04f 0b04 	mov.w	fp, #4
   133c2:	f859 3f04 	ldr.w	r3, [r9, #4]!
   133c6:	7818      	ldrb	r0, [r3, #0]
   133c8:	4659      	mov	r1, fp
   133ca:	ea0a 0040 	and.w	r0, sl, r0, lsl #1
   133ce:	f7fd f945 	bl	1065c <booth_encode>
   133d2:	4602      	mov	r2, r0
   133d4:	4641      	mov	r1, r8
   133d6:	f107 0008 	add.w	r0, r7, #8
   133da:	f7fe fba3 	bl	11b24 <POINTonE1_gather_booth_w4>
   133de:	2300      	movs	r3, #0
   133e0:	f107 0208 	add.w	r2, r7, #8
   133e4:	4629      	mov	r1, r5
   133e6:	4628      	mov	r0, r5
   133e8:	f7ff fd98 	bl	12f1c <POINTonE1_dadd>
   133ec:	3401      	adds	r4, #1
   133ee:	f508 6890 	add.w	r8, r8, #1152	; 0x480
   133f2:	42a6      	cmp	r6, r4
   133f4:	d1e5      	bne.n	133c2 <POINTonE1s_mult_w4+0x14e>
   133f6:	379c      	adds	r7, #156	; 0x9c
   133f8:	46bd      	mov	sp, r7
   133fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000133fe <POINTonE1_mult_w4>:
   133fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13402:	f2ad 5d14 	subw	sp, sp, #1300	; 0x514
   13406:	4605      	mov	r5, r0
   13408:	4617      	mov	r7, r2
   1340a:	461e      	mov	r6, r3
   1340c:	4668      	mov	r0, sp
   1340e:	f7ff f973 	bl	126f8 <POINTonE1_precompute_w4>
   13412:	f006 0303 	and.w	r3, r6, #3
   13416:	1c5c      	adds	r4, r3, #1
   13418:	1af6      	subs	r6, r6, r3
   1341a:	d036      	beq.n	1348a <POINTonE1_mult_w4+0x8c>
   1341c:	4622      	mov	r2, r4
   1341e:	1e71      	subs	r1, r6, #1
   13420:	4638      	mov	r0, r7
   13422:	f7fd f90f 	bl	10644 <get_wval>
   13426:	f04f 33ff 	mov.w	r3, #4294967295
   1342a:	40a3      	lsls	r3, r4
   1342c:	2104      	movs	r1, #4
   1342e:	ea20 0003 	bic.w	r0, r0, r3
   13432:	f7fd f913 	bl	1065c <booth_encode>
   13436:	4602      	mov	r2, r0
   13438:	4669      	mov	r1, sp
   1343a:	4628      	mov	r0, r5
   1343c:	f7fe fb72 	bl	11b24 <POINTonE1_gather_booth_w4>
   13440:	f04f 0905 	mov.w	r9, #5
   13444:	f04f 0804 	mov.w	r8, #4
   13448:	2404      	movs	r4, #4
   1344a:	4629      	mov	r1, r5
   1344c:	4628      	mov	r0, r5
   1344e:	f7fe fd09 	bl	11e64 <POINTonE1_double>
   13452:	3c01      	subs	r4, #1
   13454:	d1f9      	bne.n	1344a <POINTonE1_mult_w4+0x4c>
   13456:	1f34      	subs	r4, r6, #4
   13458:	d027      	beq.n	134aa <POINTonE1_mult_w4+0xac>
   1345a:	464a      	mov	r2, r9
   1345c:	1f71      	subs	r1, r6, #5
   1345e:	4638      	mov	r0, r7
   13460:	f7fd f8f0 	bl	10644 <get_wval>
   13464:	4641      	mov	r1, r8
   13466:	f000 001f 	and.w	r0, r0, #31
   1346a:	f7fd f8f7 	bl	1065c <booth_encode>
   1346e:	4602      	mov	r2, r0
   13470:	4669      	mov	r1, sp
   13472:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
   13476:	f7fe fb55 	bl	11b24 <POINTonE1_gather_booth_w4>
   1347a:	f50d 6290 	add.w	r2, sp, #1152	; 0x480
   1347e:	4629      	mov	r1, r5
   13480:	4628      	mov	r0, r5
   13482:	f7fe fff3 	bl	1246c <POINTonE1_add>
   13486:	4626      	mov	r6, r4
   13488:	e7de      	b.n	13448 <POINTonE1_mult_w4+0x4a>
   1348a:	7838      	ldrb	r0, [r7, #0]
   1348c:	f04f 33ff 	mov.w	r3, #4294967295
   13490:	40a3      	lsls	r3, r4
   13492:	43db      	mvns	r3, r3
   13494:	2104      	movs	r1, #4
   13496:	ea03 0040 	and.w	r0, r3, r0, lsl #1
   1349a:	f7fd f8df 	bl	1065c <booth_encode>
   1349e:	4602      	mov	r2, r0
   134a0:	4669      	mov	r1, sp
   134a2:	4628      	mov	r0, r5
   134a4:	f7fe fb3e 	bl	11b24 <POINTonE1_gather_booth_w4>
   134a8:	e013      	b.n	134d2 <POINTonE1_mult_w4+0xd4>
   134aa:	7838      	ldrb	r0, [r7, #0]
   134ac:	0040      	lsls	r0, r0, #1
   134ae:	2104      	movs	r1, #4
   134b0:	f000 001e 	and.w	r0, r0, #30
   134b4:	f7fd f8d2 	bl	1065c <booth_encode>
   134b8:	4602      	mov	r2, r0
   134ba:	4669      	mov	r1, sp
   134bc:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
   134c0:	f7fe fb30 	bl	11b24 <POINTonE1_gather_booth_w4>
   134c4:	2300      	movs	r3, #0
   134c6:	f50d 6290 	add.w	r2, sp, #1152	; 0x480
   134ca:	4629      	mov	r1, r5
   134cc:	4628      	mov	r0, r5
   134ce:	f7ff fd25 	bl	12f1c <POINTonE1_dadd>
   134d2:	f20d 5d14 	addw	sp, sp, #1300	; 0x514
   134d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000134da <POINTonE1_mult_w5>:
   134da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   134de:	f6ad 1d94 	subw	sp, sp, #2452	; 0x994
   134e2:	4605      	mov	r5, r0
   134e4:	4617      	mov	r7, r2
   134e6:	4698      	mov	r8, r3
   134e8:	f1a1 0e04 	sub.w	lr, r1, #4
   134ec:	466c      	mov	r4, sp
   134ee:	ab24      	add	r3, sp, #144	; 0x90
   134f0:	46a4      	mov	ip, r4
   134f2:	f85e 2f04 	ldr.w	r2, [lr, #4]!
   134f6:	f84c 2b04 	str.w	r2, [ip], #4
   134fa:	459c      	cmp	ip, r3
   134fc:	d1f9      	bne.n	134f2 <POINTonE1_mult_w5+0x18>
   134fe:	a824      	add	r0, sp, #144	; 0x90
   13500:	f7fe fcb0 	bl	11e64 <POINTonE1_double>
   13504:	ae48      	add	r6, sp, #288	; 0x120
   13506:	f504 797c 	add.w	r9, r4, #1008	; 0x3f0
   1350a:	4622      	mov	r2, r4
   1350c:	3490      	adds	r4, #144	; 0x90
   1350e:	4621      	mov	r1, r4
   13510:	4630      	mov	r0, r6
   13512:	f7fe ffab 	bl	1246c <POINTonE1_add>
   13516:	4621      	mov	r1, r4
   13518:	f106 0090 	add.w	r0, r6, #144	; 0x90
   1351c:	f7fe fca2 	bl	11e64 <POINTonE1_double>
   13520:	f506 7690 	add.w	r6, r6, #288	; 0x120
   13524:	45a1      	cmp	r9, r4
   13526:	d1f0      	bne.n	1350a <POINTonE1_mult_w5+0x30>
   13528:	4b35      	ldr	r3, [pc, #212]	; (13600 <POINTonE1_mult_w5+0x126>)
   1352a:	fba3 2308 	umull	r2, r3, r3, r8
   1352e:	f023 0603 	bic.w	r6, r3, #3
   13532:	eb06 0693 	add.w	r6, r6, r3, lsr #2
   13536:	eba8 0606 	sub.w	r6, r8, r6
   1353a:	1c74      	adds	r4, r6, #1
   1353c:	ebb8 0606 	subs.w	r6, r8, r6
   13540:	d036      	beq.n	135b0 <POINTonE1_mult_w5+0xd6>
   13542:	4622      	mov	r2, r4
   13544:	1e71      	subs	r1, r6, #1
   13546:	4638      	mov	r0, r7
   13548:	f7fd f87c 	bl	10644 <get_wval>
   1354c:	f04f 33ff 	mov.w	r3, #4294967295
   13550:	40a3      	lsls	r3, r4
   13552:	2105      	movs	r1, #5
   13554:	ea20 0003 	bic.w	r0, r0, r3
   13558:	f7fd f880 	bl	1065c <booth_encode>
   1355c:	4602      	mov	r2, r0
   1355e:	4669      	mov	r1, sp
   13560:	4628      	mov	r0, r5
   13562:	f7fe fb0c 	bl	11b7e <POINTonE1_gather_booth_w5>
   13566:	f04f 0906 	mov.w	r9, #6
   1356a:	f04f 0805 	mov.w	r8, #5
   1356e:	2405      	movs	r4, #5
   13570:	4629      	mov	r1, r5
   13572:	4628      	mov	r0, r5
   13574:	f7fe fc76 	bl	11e64 <POINTonE1_double>
   13578:	3c01      	subs	r4, #1
   1357a:	d1f9      	bne.n	13570 <POINTonE1_mult_w5+0x96>
   1357c:	1f74      	subs	r4, r6, #5
   1357e:	d027      	beq.n	135d0 <POINTonE1_mult_w5+0xf6>
   13580:	464a      	mov	r2, r9
   13582:	1fb1      	subs	r1, r6, #6
   13584:	4638      	mov	r0, r7
   13586:	f7fd f85d 	bl	10644 <get_wval>
   1358a:	4641      	mov	r1, r8
   1358c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   13590:	f7fd f864 	bl	1065c <booth_encode>
   13594:	4602      	mov	r2, r0
   13596:	4669      	mov	r1, sp
   13598:	f50d 6010 	add.w	r0, sp, #2304	; 0x900
   1359c:	f7fe faef 	bl	11b7e <POINTonE1_gather_booth_w5>
   135a0:	f50d 6210 	add.w	r2, sp, #2304	; 0x900
   135a4:	4629      	mov	r1, r5
   135a6:	4628      	mov	r0, r5
   135a8:	f7fe ff60 	bl	1246c <POINTonE1_add>
   135ac:	4626      	mov	r6, r4
   135ae:	e7de      	b.n	1356e <POINTonE1_mult_w5+0x94>
   135b0:	7838      	ldrb	r0, [r7, #0]
   135b2:	f04f 33ff 	mov.w	r3, #4294967295
   135b6:	40a3      	lsls	r3, r4
   135b8:	43db      	mvns	r3, r3
   135ba:	2105      	movs	r1, #5
   135bc:	ea03 0040 	and.w	r0, r3, r0, lsl #1
   135c0:	f7fd f84c 	bl	1065c <booth_encode>
   135c4:	4602      	mov	r2, r0
   135c6:	4669      	mov	r1, sp
   135c8:	4628      	mov	r0, r5
   135ca:	f7fe fad8 	bl	11b7e <POINTonE1_gather_booth_w5>
   135ce:	e013      	b.n	135f8 <POINTonE1_mult_w5+0x11e>
   135d0:	7838      	ldrb	r0, [r7, #0]
   135d2:	0040      	lsls	r0, r0, #1
   135d4:	2105      	movs	r1, #5
   135d6:	f000 003e 	and.w	r0, r0, #62	; 0x3e
   135da:	f7fd f83f 	bl	1065c <booth_encode>
   135de:	4602      	mov	r2, r0
   135e0:	4669      	mov	r1, sp
   135e2:	f50d 6010 	add.w	r0, sp, #2304	; 0x900
   135e6:	f7fe faca 	bl	11b7e <POINTonE1_gather_booth_w5>
   135ea:	2300      	movs	r3, #0
   135ec:	f50d 6210 	add.w	r2, sp, #2304	; 0x900
   135f0:	4629      	mov	r1, r5
   135f2:	4628      	mov	r0, r5
   135f4:	f7ff fc92 	bl	12f1c <POINTonE1_dadd>
   135f8:	f60d 1d94 	addw	sp, sp, #2452	; 0x994
   135fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13600:	cccccccd 	.word	0xcccccccd

00013604 <POINTonE1_dbl_n_add>:
   13604:	b570      	push	{r4, r5, r6, lr}
   13606:	4605      	mov	r5, r0
   13608:	4616      	mov	r6, r2
   1360a:	1e4c      	subs	r4, r1, #1
   1360c:	b139      	cbz	r1, 1361e <POINTonE1_dbl_n_add+0x1a>
   1360e:	4629      	mov	r1, r5
   13610:	4628      	mov	r0, r5
   13612:	f7fe fc27 	bl	11e64 <POINTonE1_double>
   13616:	3c01      	subs	r4, #1
   13618:	f1b4 3fff 	cmp.w	r4, #4294967295
   1361c:	d1f7      	bne.n	1360e <POINTonE1_dbl_n_add+0xa>
   1361e:	2300      	movs	r3, #0
   13620:	4632      	mov	r2, r6
   13622:	4629      	mov	r1, r5
   13624:	4628      	mov	r0, r5
   13626:	f7ff fc79 	bl	12f1c <POINTonE1_dadd>
   1362a:	bd70      	pop	{r4, r5, r6, pc}

0001362c <POINTonE1_in_G1>:
   1362c:	b510      	push	{r4, lr}
   1362e:	f5ad 6d90 	sub.w	sp, sp, #1152	; 0x480
   13632:	4604      	mov	r4, r0
   13634:	4601      	mov	r1, r0
   13636:	a8fc      	add	r0, sp, #1008	; 0x3f0
   13638:	f7fd faa3 	bl	10b82 <sigma>
   1363c:	a9fc      	add	r1, sp, #1008	; 0x3f0
   1363e:	a8d8      	add	r0, sp, #864	; 0x360
   13640:	f7fd fa9f 	bl	10b82 <sigma>
   13644:	a9fc      	add	r1, sp, #1008	; 0x3f0
   13646:	4608      	mov	r0, r1
   13648:	f7fe fc0c 	bl	11e64 <POINTonE1_double>
   1364c:	2300      	movs	r3, #0
   1364e:	4622      	mov	r2, r4
   13650:	a9d8      	add	r1, sp, #864	; 0x360
   13652:	a8b4      	add	r0, sp, #720	; 0x2d0
   13654:	f7ff fc62 	bl	12f1c <POINTonE1_dadd>
   13658:	2101      	movs	r1, #1
   1365a:	a8b4      	add	r0, sp, #720	; 0x2d0
   1365c:	f7fe fa52 	bl	11b04 <POINTonE1_cneg>
   13660:	2300      	movs	r3, #0
   13662:	aafc      	add	r2, sp, #1008	; 0x3f0
   13664:	a9b4      	add	r1, sp, #720	; 0x2d0
   13666:	4608      	mov	r0, r1
   13668:	f7ff fc58 	bl	12f1c <POINTonE1_dadd>
   1366c:	a9b4      	add	r1, sp, #720	; 0x2d0
   1366e:	a848      	add	r0, sp, #288	; 0x120
   13670:	f7fe fbf8 	bl	11e64 <POINTonE1_double>
   13674:	2300      	movs	r3, #0
   13676:	aab4      	add	r2, sp, #720	; 0x2d0
   13678:	a948      	add	r1, sp, #288	; 0x120
   1367a:	4668      	mov	r0, sp
   1367c:	f7ff fc4e 	bl	12f1c <POINTonE1_dadd>
   13680:	2300      	movs	r3, #0
   13682:	aa48      	add	r2, sp, #288	; 0x120
   13684:	4669      	mov	r1, sp
   13686:	a824      	add	r0, sp, #144	; 0x90
   13688:	f7ff fc48 	bl	12f1c <POINTonE1_dadd>
   1368c:	2300      	movs	r3, #0
   1368e:	aa48      	add	r2, sp, #288	; 0x120
   13690:	a924      	add	r1, sp, #144	; 0x90
   13692:	4610      	mov	r0, r2
   13694:	f7ff fc42 	bl	12f1c <POINTonE1_dadd>
   13698:	a924      	add	r1, sp, #144	; 0x90
   1369a:	a890      	add	r0, sp, #576	; 0x240
   1369c:	f7fe fbe2 	bl	11e64 <POINTonE1_double>
   136a0:	2300      	movs	r3, #0
   136a2:	aab4      	add	r2, sp, #720	; 0x2d0
   136a4:	a990      	add	r1, sp, #576	; 0x240
   136a6:	a86c      	add	r0, sp, #432	; 0x1b0
   136a8:	f7ff fc38 	bl	12f1c <POINTonE1_dadd>
   136ac:	aa24      	add	r2, sp, #144	; 0x90
   136ae:	2103      	movs	r1, #3
   136b0:	a890      	add	r0, sp, #576	; 0x240
   136b2:	f7ff ffa7 	bl	13604 <POINTonE1_dbl_n_add>
   136b6:	a948      	add	r1, sp, #288	; 0x120
   136b8:	a8fc      	add	r0, sp, #1008	; 0x3f0
   136ba:	f7fe fbd3 	bl	11e64 <POINTonE1_double>
   136be:	aa6c      	add	r2, sp, #432	; 0x1b0
   136c0:	2105      	movs	r1, #5
   136c2:	a8fc      	add	r0, sp, #1008	; 0x3f0
   136c4:	f7ff ff9e 	bl	13604 <POINTonE1_dbl_n_add>
   136c8:	466a      	mov	r2, sp
   136ca:	2103      	movs	r1, #3
   136cc:	a8fc      	add	r0, sp, #1008	; 0x3f0
   136ce:	f7ff ff99 	bl	13604 <POINTonE1_dbl_n_add>
   136d2:	aab4      	add	r2, sp, #720	; 0x2d0
   136d4:	2103      	movs	r1, #3
   136d6:	a8fc      	add	r0, sp, #1008	; 0x3f0
   136d8:	f7ff ff94 	bl	13604 <POINTonE1_dbl_n_add>
   136dc:	466a      	mov	r2, sp
   136de:	2105      	movs	r1, #5
   136e0:	a8fc      	add	r0, sp, #1008	; 0x3f0
   136e2:	f7ff ff8f 	bl	13604 <POINTonE1_dbl_n_add>
   136e6:	aa90      	add	r2, sp, #576	; 0x240
   136e8:	2112      	movs	r1, #18
   136ea:	a8fc      	add	r0, sp, #1008	; 0x3f0
   136ec:	f7ff ff8a 	bl	13604 <POINTonE1_dbl_n_add>
   136f0:	aa90      	add	r2, sp, #576	; 0x240
   136f2:	2108      	movs	r1, #8
   136f4:	a8fc      	add	r0, sp, #1008	; 0x3f0
   136f6:	f7ff ff85 	bl	13604 <POINTonE1_dbl_n_add>
   136fa:	aa48      	add	r2, sp, #288	; 0x120
   136fc:	2103      	movs	r1, #3
   136fe:	a8fc      	add	r0, sp, #1008	; 0x3f0
   13700:	f7ff ff80 	bl	13604 <POINTonE1_dbl_n_add>
   13704:	aa24      	add	r2, sp, #144	; 0x90
   13706:	2107      	movs	r1, #7
   13708:	a8fc      	add	r0, sp, #1008	; 0x3f0
   1370a:	f7ff ff7b 	bl	13604 <POINTonE1_dbl_n_add>
   1370e:	aa6c      	add	r2, sp, #432	; 0x1b0
   13710:	2105      	movs	r1, #5
   13712:	a8fc      	add	r0, sp, #1008	; 0x3f0
   13714:	f7ff ff76 	bl	13604 <POINTonE1_dbl_n_add>
   13718:	aa90      	add	r2, sp, #576	; 0x240
   1371a:	2129      	movs	r1, #41	; 0x29
   1371c:	a8fc      	add	r0, sp, #1008	; 0x3f0
   1371e:	f7ff ff71 	bl	13604 <POINTonE1_dbl_n_add>
   13722:	aa90      	add	r2, sp, #576	; 0x240
   13724:	2108      	movs	r1, #8
   13726:	a8fc      	add	r0, sp, #1008	; 0x3f0
   13728:	f7ff ff6c 	bl	13604 <POINTonE1_dbl_n_add>
   1372c:	aa90      	add	r2, sp, #576	; 0x240
   1372e:	2108      	movs	r1, #8
   13730:	a8fc      	add	r0, sp, #1008	; 0x3f0
   13732:	f7ff ff67 	bl	13604 <POINTonE1_dbl_n_add>
   13736:	aa90      	add	r2, sp, #576	; 0x240
   13738:	2108      	movs	r1, #8
   1373a:	a8fc      	add	r0, sp, #1008	; 0x3f0
   1373c:	f7ff ff62 	bl	13604 <POINTonE1_dbl_n_add>
   13740:	2101      	movs	r1, #1
   13742:	a8d8      	add	r0, sp, #864	; 0x360
   13744:	f7fe f9de 	bl	11b04 <POINTonE1_cneg>
   13748:	2300      	movs	r3, #0
   1374a:	aad8      	add	r2, sp, #864	; 0x360
   1374c:	a9fc      	add	r1, sp, #1008	; 0x3f0
   1374e:	4608      	mov	r0, r1
   13750:	f7ff fbe4 	bl	12f1c <POINTonE1_dadd>
   13754:	f20d 434c 	addw	r3, sp, #1100	; 0x44c
   13758:	f20d 417c 	addw	r1, sp, #1148	; 0x47c
   1375c:	2000      	movs	r0, #0
   1375e:	f853 2f04 	ldr.w	r2, [r3, #4]!
   13762:	4310      	orrs	r0, r2
   13764:	428b      	cmp	r3, r1
   13766:	d1fa      	bne.n	1375e <POINTonE1_in_G1+0x132>
   13768:	1e43      	subs	r3, r0, #1
   1376a:	ea23 0000 	bic.w	r0, r3, r0
   1376e:	0fc0      	lsrs	r0, r0, #31
   13770:	f50d 6d90 	add.w	sp, sp, #1152	; 0x480
   13774:	bd10      	pop	{r4, pc}

00013776 <smul_2n>:
   13776:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1377a:	b083      	sub	sp, #12
   1377c:	af00      	add	r7, sp, #0
   1377e:	4683      	mov	fp, r0
   13780:	607b      	str	r3, [r7, #4]
   13782:	f8d7 8030 	ldr.w	r8, [r7, #48]	; 0x30
   13786:	6b7e      	ldr	r6, [r7, #52]	; 0x34
   13788:	ea4f 0986 	mov.w	r9, r6, lsl #2
   1378c:	f109 0307 	add.w	r3, r9, #7
   13790:	f023 0307 	bic.w	r3, r3, #7
   13794:	ebad 0d03 	sub.w	sp, sp, r3
   13798:	466d      	mov	r5, sp
   1379a:	ebad 0d03 	sub.w	sp, sp, r3
   1379e:	466c      	mov	r4, sp
   137a0:	ea82 7ae2 	eor.w	sl, r2, r2, asr #31
   137a4:	ebaa 7ae2 	sub.w	sl, sl, r2, asr #31
   137a8:	4633      	mov	r3, r6
   137aa:	17d2      	asrs	r2, r2, #31
   137ac:	4628      	mov	r0, r5
   137ae:	f7fd f884 	bl	108ba <cneg_n>
   137b2:	4633      	mov	r3, r6
   137b4:	4652      	mov	r2, sl
   137b6:	4629      	mov	r1, r5
   137b8:	4628      	mov	r0, r5
   137ba:	f7fd f898 	bl	108ee <umul_n>
   137be:	ea88 7ae8 	eor.w	sl, r8, r8, asr #31
   137c2:	ebaa 7ae8 	sub.w	sl, sl, r8, asr #31
   137c6:	4633      	mov	r3, r6
   137c8:	ea4f 72e8 	mov.w	r2, r8, asr #31
   137cc:	6879      	ldr	r1, [r7, #4]
   137ce:	4620      	mov	r0, r4
   137d0:	f7fd f873 	bl	108ba <cneg_n>
   137d4:	4633      	mov	r3, r6
   137d6:	4652      	mov	r2, sl
   137d8:	4621      	mov	r1, r4
   137da:	4620      	mov	r0, r4
   137dc:	f7fd f887 	bl	108ee <umul_n>
   137e0:	b1b6      	cbz	r6, 13810 <smul_2n+0x9a>
   137e2:	1f29      	subs	r1, r5, #4
   137e4:	3c04      	subs	r4, #4
   137e6:	f1ab 0004 	sub.w	r0, fp, #4
   137ea:	f1a9 0904 	sub.w	r9, r9, #4
   137ee:	444d      	add	r5, r9
   137f0:	2200      	movs	r2, #0
   137f2:	4694      	mov	ip, r2
   137f4:	f851 3f04 	ldr.w	r3, [r1, #4]!
   137f8:	f854 6f04 	ldr.w	r6, [r4, #4]!
   137fc:	199b      	adds	r3, r3, r6
   137fe:	eb4c 060c 	adc.w	r6, ip, ip
   13802:	189b      	adds	r3, r3, r2
   13804:	f840 3f04 	str.w	r3, [r0, #4]!
   13808:	f146 0200 	adc.w	r2, r6, #0
   1380c:	42a9      	cmp	r1, r5
   1380e:	d1f1      	bne.n	137f4 <smul_2n+0x7e>
   13810:	370c      	adds	r7, #12
   13812:	46bd      	mov	sp, r7
   13814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00013818 <ct_inverse_mod_n>:
   13818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1381c:	b09f      	sub	sp, #124	; 0x7c
   1381e:	af02      	add	r7, sp, #8
   13820:	60b8      	str	r0, [r7, #8]
   13822:	607b      	str	r3, [r7, #4]
   13824:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   13828:	009b      	lsls	r3, r3, #2
   1382a:	3307      	adds	r3, #7
   1382c:	f023 0307 	bic.w	r3, r3, #7
   13830:	ebad 0d03 	sub.w	sp, sp, r3
   13834:	f10d 0808 	add.w	r8, sp, #8
   13838:	ebad 0d03 	sub.w	sp, sp, r3
   1383c:	ab02      	add	r3, sp, #8
   1383e:	63fb      	str	r3, [r7, #60]	; 0x3c
   13840:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   13844:	005b      	lsls	r3, r3, #1
   13846:	633b      	str	r3, [r7, #48]	; 0x30
   13848:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   1384c:	00db      	lsls	r3, r3, #3
   1384e:	643b      	str	r3, [r7, #64]	; 0x40
   13850:	466b      	mov	r3, sp
   13852:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
   13856:	eba3 03c0 	sub.w	r3, r3, r0, lsl #3
   1385a:	469d      	mov	sp, r3
   1385c:	ab02      	add	r3, sp, #8
   1385e:	63bb      	str	r3, [r7, #56]	; 0x38
   13860:	466b      	mov	r3, sp
   13862:	eba3 03c0 	sub.w	r3, r3, r0, lsl #3
   13866:	469d      	mov	sp, r3
   13868:	ab02      	add	r3, sp, #8
   1386a:	637b      	str	r3, [r7, #52]	; 0x34
   1386c:	466b      	mov	r3, sp
   1386e:	eba3 03c0 	sub.w	r3, r3, r0, lsl #3
   13872:	469d      	mov	sp, r3
   13874:	ab02      	add	r3, sp, #8
   13876:	64fb      	str	r3, [r7, #76]	; 0x4c
   13878:	f030 4440 	bics.w	r4, r0, #3221225472	; 0xc0000000
   1387c:	62fc      	str	r4, [r7, #44]	; 0x2c
   1387e:	d015      	beq.n	138ac <ct_inverse_mod_n+0x94>
   13880:	1f0b      	subs	r3, r1, #4
   13882:	f1a8 0104 	sub.w	r1, r8, #4
   13886:	00a0      	lsls	r0, r4, #2
   13888:	eb03 0584 	add.w	r5, r3, r4, lsl #2
   1388c:	f853 4f04 	ldr.w	r4, [r3, #4]!
   13890:	f841 4f04 	str.w	r4, [r1, #4]!
   13894:	42ab      	cmp	r3, r5
   13896:	d1f9      	bne.n	1388c <ct_inverse_mod_n+0x74>
   13898:	1f13      	subs	r3, r2, #4
   1389a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1389c:	3a04      	subs	r2, #4
   1389e:	4418      	add	r0, r3
   138a0:	f853 1f04 	ldr.w	r1, [r3, #4]!
   138a4:	f842 1f04 	str.w	r1, [r2, #4]!
   138a8:	4283      	cmp	r3, r0
   138aa:	d1f9      	bne.n	138a0 <ct_inverse_mod_n+0x88>
   138ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   138ae:	089c      	lsrs	r4, r3, #2
   138b0:	2b03      	cmp	r3, #3
   138b2:	d907      	bls.n	138c4 <ct_inverse_mod_n+0xac>
   138b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
   138b6:	2300      	movs	r3, #0
   138b8:	4619      	mov	r1, r3
   138ba:	f842 1b04 	str.w	r1, [r2], #4
   138be:	3301      	adds	r3, #1
   138c0:	429c      	cmp	r4, r3
   138c2:	d8fa      	bhi.n	138ba <ct_inverse_mod_n+0xa2>
   138c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
   138c6:	2301      	movs	r3, #1
   138c8:	6013      	str	r3, [r2, #0]
   138ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   138cc:	2b03      	cmp	r3, #3
   138ce:	d907      	bls.n	138e0 <ct_inverse_mod_n+0xc8>
   138d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   138d2:	2300      	movs	r3, #0
   138d4:	4619      	mov	r1, r3
   138d6:	f842 1b04 	str.w	r1, [r2], #4
   138da:	3301      	adds	r3, #1
   138dc:	42a3      	cmp	r3, r4
   138de:	d3fa      	bcc.n	138d6 <ct_inverse_mod_n+0xbe>
   138e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   138e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   138e6:	019b      	lsls	r3, r3, #6
   138e8:	3b02      	subs	r3, #2
   138ea:	461a      	mov	r2, r3
   138ec:	60fb      	str	r3, [r7, #12]
   138ee:	4bbd      	ldr	r3, [pc, #756]	; (13be4 <ct_inverse_mod_n+0x3cc>)
   138f0:	fba3 2302 	umull	r2, r3, r3, r2
   138f4:	091b      	lsrs	r3, r3, #4
   138f6:	61bb      	str	r3, [r7, #24]
   138f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   138fc:	1e5a      	subs	r2, r3, #1
   138fe:	eb08 0382 	add.w	r3, r8, r2, lsl #2
   13902:	62bb      	str	r3, [r7, #40]	; 0x28
   13904:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   13908:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1390c:	3b02      	subs	r3, #2
   1390e:	eb08 0183 	add.w	r1, r8, r3, lsl #2
   13912:	6279      	str	r1, [r7, #36]	; 0x24
   13914:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   13916:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   1391a:	623a      	str	r2, [r7, #32]
   1391c:	460a      	mov	r2, r1
   1391e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   13922:	61fb      	str	r3, [r7, #28]
   13924:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   13928:	3b02      	subs	r3, #2
   1392a:	eb08 0183 	add.w	r1, r8, r3, lsl #2
   1392e:	6179      	str	r1, [r7, #20]
   13930:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   13934:	613b      	str	r3, [r7, #16]
   13936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1393a:	eb03 0582 	add.w	r5, r3, r2, lsl #2
   1393e:	3d04      	subs	r5, #4
   13940:	2300      	movs	r3, #0
   13942:	647b      	str	r3, [r7, #68]	; 0x44
   13944:	f108 0604 	add.w	r6, r8, #4
   13948:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1394a:	6819      	ldr	r1, [r3, #0]
   1394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1394e:	f8d3 c000 	ldr.w	ip, [r3]
   13952:	f8c7 c048 	str.w	ip, [r7, #72]	; 0x48
   13956:	6a3b      	ldr	r3, [r7, #32]
   13958:	681a      	ldr	r2, [r3, #0]
   1395a:	69fb      	ldr	r3, [r7, #28]
   1395c:	6818      	ldr	r0, [r3, #0]
   1395e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   13962:	2b03      	cmp	r3, #3
   13964:	d029      	beq.n	139ba <ct_inverse_mod_n+0x1a2>
   13966:	f8d7 a010 	ldr.w	sl, [r7, #16]
   1396a:	f8d7 9014 	ldr.w	r9, [r7, #20]
   1396e:	4663      	mov	r3, ip
   13970:	ea41 0c02 	orr.w	ip, r1, r2
   13974:	f10c 3eff 	add.w	lr, ip, #4294967295
   13978:	ea2e 0c0c 	bic.w	ip, lr, ip
   1397c:	ea81 0e03 	eor.w	lr, r1, r3
   13980:	ea0e 7eec 	and.w	lr, lr, ip, asr #31
   13984:	ea81 010e 	eor.w	r1, r1, lr
   13988:	ea82 0e00 	eor.w	lr, r2, r0
   1398c:	ea0e 7eec 	and.w	lr, lr, ip, asr #31
   13990:	ea82 020e 	eor.w	r2, r2, lr
   13994:	f859 ed04 	ldr.w	lr, [r9, #-4]!
   13998:	ea83 0e0e 	eor.w	lr, r3, lr
   1399c:	ea0e 7eec 	and.w	lr, lr, ip, asr #31
   139a0:	ea83 030e 	eor.w	r3, r3, lr
   139a4:	f85a ed04 	ldr.w	lr, [sl, #-4]!
   139a8:	ea80 0e0e 	eor.w	lr, r0, lr
   139ac:	ea0e 7cec 	and.w	ip, lr, ip, asr #31
   139b0:	ea80 000c 	eor.w	r0, r0, ip
   139b4:	45b1      	cmp	r9, r6
   139b6:	d1db      	bne.n	13970 <ct_inverse_mod_n+0x158>
   139b8:	64bb      	str	r3, [r7, #72]	; 0x48
   139ba:	ea41 0a02 	orr.w	sl, r1, r2
   139be:	f10a 3cff 	add.w	ip, sl, #4294967295
   139c2:	ea2c 0c0a 	bic.w	ip, ip, sl
   139c6:	ea4f 4e1a 	mov.w	lr, sl, lsr #16
   139ca:	f1ce 0900 	rsb	r9, lr, #0
   139ce:	ea4f 79e9 	mov.w	r9, r9, asr #31
   139d2:	f009 0b10 	and.w	fp, r9, #16
   139d6:	f1bc 0f00 	cmp.w	ip, #0
   139da:	bfa8      	it	ge
   139dc:	f10b 0b01 	addge.w	fp, fp, #1
   139e0:	ea8a 0e0e 	eor.w	lr, sl, lr
   139e4:	ea0e 0909 	and.w	r9, lr, r9
   139e8:	ea89 0c0a 	eor.w	ip, r9, sl
   139ec:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
   139f0:	f1ce 0900 	rsb	r9, lr, #0
   139f4:	ea4f 79e9 	mov.w	r9, r9, asr #31
   139f8:	f009 0a08 	and.w	sl, r9, #8
   139fc:	44da      	add	sl, fp
   139fe:	ea8c 0e0e 	eor.w	lr, ip, lr
   13a02:	ea0e 0909 	and.w	r9, lr, r9
   13a06:	ea8c 0909 	eor.w	r9, ip, r9
   13a0a:	ea4f 1e19 	mov.w	lr, r9, lsr #4
   13a0e:	f1ce 0b00 	rsb	fp, lr, #0
   13a12:	ea4f 7beb 	mov.w	fp, fp, asr #31
   13a16:	f00b 0c04 	and.w	ip, fp, #4
   13a1a:	44e2      	add	sl, ip
   13a1c:	ea89 0e0e 	eor.w	lr, r9, lr
   13a20:	ea0e 0e0b 	and.w	lr, lr, fp
   13a24:	ea89 0c0e 	eor.w	ip, r9, lr
   13a28:	ea4f 0e9c 	mov.w	lr, ip, lsr #2
   13a2c:	f1ce 0900 	rsb	r9, lr, #0
   13a30:	ea4f 79e9 	mov.w	r9, r9, asr #31
   13a34:	f009 0b02 	and.w	fp, r9, #2
   13a38:	44da      	add	sl, fp
   13a3a:	ea8c 0e0e 	eor.w	lr, ip, lr
   13a3e:	ea0e 0e09 	and.w	lr, lr, r9
   13a42:	ea8c 0e0e 	eor.w	lr, ip, lr
   13a46:	eb0a 0a5e 	add.w	sl, sl, lr, lsr #1
   13a4a:	f1ca 0e20 	rsb	lr, sl, #32
   13a4e:	f8d8 3000 	ldr.w	r3, [r8]
   13a52:	66bb      	str	r3, [r7, #104]	; 0x68
   13a54:	f1ca 091f 	rsb	r9, sl, #31
   13a58:	ea29 090e 	bic.w	r9, r9, lr
   13a5c:	ea6f 0909 	mvn.w	r9, r9
   13a60:	ea4f 79d9 	mov.w	r9, r9, lsr #31
   13a64:	f1c9 0900 	rsb	r9, r9, #0
   13a68:	f00e 0e1f 	and.w	lr, lr, #31
   13a6c:	f00a 0a1f 	and.w	sl, sl, #31
   13a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   13a72:	ea09 0303 	and.w	r3, r9, r3
   13a76:	fa23 f30a 	lsr.w	r3, r3, sl
   13a7a:	fa01 f10e 	lsl.w	r1, r1, lr
   13a7e:	4319      	orrs	r1, r3
   13a80:	66f9      	str	r1, [r7, #108]	; 0x6c
   13a82:	f8d7 b03c 	ldr.w	fp, [r7, #60]	; 0x3c
   13a86:	f8db 3000 	ldr.w	r3, [fp]
   13a8a:	663b      	str	r3, [r7, #96]	; 0x60
   13a8c:	ea09 0000 	and.w	r0, r9, r0
   13a90:	fa20 fa0a 	lsr.w	sl, r0, sl
   13a94:	fa02 f20e 	lsl.w	r2, r2, lr
   13a98:	ea4a 0202 	orr.w	r2, sl, r2
   13a9c:	667a      	str	r2, [r7, #100]	; 0x64
   13a9e:	231e      	movs	r3, #30
   13aa0:	f107 0260 	add.w	r2, r7, #96	; 0x60
   13aa4:	f107 0168 	add.w	r1, r7, #104	; 0x68
   13aa8:	f107 0050 	add.w	r0, r7, #80	; 0x50
   13aac:	f7fc fe9c 	bl	107e8 <inner_loop_n>
   13ab0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   13ab4:	9301      	str	r3, [sp, #4]
   13ab6:	f107 0354 	add.w	r3, r7, #84	; 0x54
   13aba:	9300      	str	r3, [sp, #0]
   13abc:	465b      	mov	r3, fp
   13abe:	f107 0250 	add.w	r2, r7, #80	; 0x50
   13ac2:	4641      	mov	r1, r8
   13ac4:	f8d7 904c 	ldr.w	r9, [r7, #76]	; 0x4c
   13ac8:	4648      	mov	r0, r9
   13aca:	f7fd fcc0 	bl	1144e <smul_n_shift_n>
   13ace:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   13ad2:	9301      	str	r3, [sp, #4]
   13ad4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
   13ad8:	9300      	str	r3, [sp, #0]
   13ada:	465b      	mov	r3, fp
   13adc:	f107 0258 	add.w	r2, r7, #88	; 0x58
   13ae0:	4641      	mov	r1, r8
   13ae2:	4658      	mov	r0, fp
   13ae4:	f7fd fcb3 	bl	1144e <smul_n_shift_n>
   13ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13aea:	b14b      	cbz	r3, 13b00 <ct_inverse_mod_n+0x2e8>
   13aec:	f1a9 0304 	sub.w	r3, r9, #4
   13af0:	f1a8 0204 	sub.w	r2, r8, #4
   13af4:	f853 1f04 	ldr.w	r1, [r3, #4]!
   13af8:	f842 1f04 	str.w	r1, [r2, #4]!
   13afc:	42ab      	cmp	r3, r5
   13afe:	d1f9      	bne.n	13af4 <ct_inverse_mod_n+0x2dc>
   13b00:	f8d7 b030 	ldr.w	fp, [r7, #48]	; 0x30
   13b04:	f8cd b004 	str.w	fp, [sp, #4]
   13b08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   13b0a:	9300      	str	r3, [sp, #0]
   13b0c:	f8d7 9034 	ldr.w	r9, [r7, #52]	; 0x34
   13b10:	464b      	mov	r3, r9
   13b12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   13b14:	f8d7 a038 	ldr.w	sl, [r7, #56]	; 0x38
   13b18:	4651      	mov	r1, sl
   13b1a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   13b1c:	f7ff fe2b 	bl	13776 <smul_2n>
   13b20:	f8cd b004 	str.w	fp, [sp, #4]
   13b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   13b26:	9300      	str	r3, [sp, #0]
   13b28:	464b      	mov	r3, r9
   13b2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
   13b2c:	4651      	mov	r1, sl
   13b2e:	4648      	mov	r0, r9
   13b30:	f7ff fe21 	bl	13776 <smul_2n>
   13b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13b36:	2b03      	cmp	r3, #3
   13b38:	d90b      	bls.n	13b52 <ct_inverse_mod_n+0x33a>
   13b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13b3c:	1f19      	subs	r1, r3, #4
   13b3e:	f1aa 0204 	sub.w	r2, sl, #4
   13b42:	2300      	movs	r3, #0
   13b44:	f851 0f04 	ldr.w	r0, [r1, #4]!
   13b48:	f842 0f04 	str.w	r0, [r2, #4]!
   13b4c:	3301      	adds	r3, #1
   13b4e:	429c      	cmp	r4, r3
   13b50:	d8f8      	bhi.n	13b44 <ct_inverse_mod_n+0x32c>
   13b52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   13b54:	3301      	adds	r3, #1
   13b56:	647b      	str	r3, [r7, #68]	; 0x44
   13b58:	69ba      	ldr	r2, [r7, #24]
   13b5a:	4293      	cmp	r3, r2
   13b5c:	f4ff aef4 	bcc.w	13948 <ct_inverse_mod_n+0x130>
   13b60:	4b20      	ldr	r3, [pc, #128]	; (13be4 <ct_inverse_mod_n+0x3cc>)
   13b62:	68f9      	ldr	r1, [r7, #12]
   13b64:	fba3 2301 	umull	r2, r3, r3, r1
   13b68:	f023 020f 	bic.w	r2, r3, #15
   13b6c:	eba2 1313 	sub.w	r3, r2, r3, lsr #4
   13b70:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
   13b74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   13b76:	4641      	mov	r1, r8
   13b78:	f107 0050 	add.w	r0, r7, #80	; 0x50
   13b7c:	f7fc fe34 	bl	107e8 <inner_loop_n>
   13b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13b82:	9301      	str	r3, [sp, #4]
   13b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   13b86:	9300      	str	r3, [sp, #0]
   13b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13b8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
   13b8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   13b8e:	68bc      	ldr	r4, [r7, #8]
   13b90:	4620      	mov	r0, r4
   13b92:	f7ff fdf0 	bl	13776 <smul_2n>
   13b96:	4622      	mov	r2, r4
   13b98:	6c38      	ldr	r0, [r7, #64]	; 0x40
   13b9a:	1823      	adds	r3, r4, r0
   13b9c:	f853 4c04 	ldr.w	r4, [r3, #-4]
   13ba0:	17e4      	asrs	r4, r4, #31
   13ba2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   13ba6:	b1cb      	cbz	r3, 13bdc <ct_inverse_mod_n+0x3c4>
   13ba8:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
   13bac:	3901      	subs	r1, #1
   13bae:	eb02 0181 	add.w	r1, r2, r1, lsl #2
   13bb2:	687b      	ldr	r3, [r7, #4]
   13bb4:	1f1e      	subs	r6, r3, #4
   13bb6:	f1a2 0c04 	sub.w	ip, r2, #4
   13bba:	4484      	add	ip, r0
   13bbc:	2200      	movs	r2, #0
   13bbe:	4615      	mov	r5, r2
   13bc0:	f856 3f04 	ldr.w	r3, [r6, #4]!
   13bc4:	4023      	ands	r3, r4
   13bc6:	f851 0f04 	ldr.w	r0, [r1, #4]!
   13bca:	1880      	adds	r0, r0, r2
   13bcc:	eb45 0205 	adc.w	r2, r5, r5
   13bd0:	181b      	adds	r3, r3, r0
   13bd2:	600b      	str	r3, [r1, #0]
   13bd4:	f142 0200 	adc.w	r2, r2, #0
   13bd8:	4561      	cmp	r1, ip
   13bda:	d1f1      	bne.n	13bc0 <ct_inverse_mod_n+0x3a8>
   13bdc:	3774      	adds	r7, #116	; 0x74
   13bde:	46bd      	mov	sp, r7
   13be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13be4:	88888889 	.word	0x88888889

00013be8 <blst_p1_cneg>:
   13be8:	b508      	push	{r3, lr}
   13bea:	1e4b      	subs	r3, r1, #1
   13bec:	ea23 0101 	bic.w	r1, r3, r1
   13bf0:	43c9      	mvns	r1, r1
   13bf2:	0fc9      	lsrs	r1, r1, #31
   13bf4:	f7fd ff86 	bl	11b04 <POINTonE1_cneg>
   13bf8:	bd08      	pop	{r3, pc}

00013bfa <blst_p1_from_affine>:
   13bfa:	b430      	push	{r4, r5}
   13bfc:	1f0a      	subs	r2, r1, #4
   13bfe:	f1a0 0c04 	sub.w	ip, r0, #4
   13c02:	f101 045c 	add.w	r4, r1, #92	; 0x5c
   13c06:	4613      	mov	r3, r2
   13c08:	f853 5f04 	ldr.w	r5, [r3, #4]!
   13c0c:	f84c 5f04 	str.w	r5, [ip, #4]!
   13c10:	42a3      	cmp	r3, r4
   13c12:	d1f9      	bne.n	13c08 <blst_p1_from_affine+0xe>
   13c14:	4613      	mov	r3, r2
   13c16:	f04f 0c00 	mov.w	ip, #0
   13c1a:	f853 5f04 	ldr.w	r5, [r3, #4]!
   13c1e:	ea4c 0c05 	orr.w	ip, ip, r5
   13c22:	42a3      	cmp	r3, r4
   13c24:	d1f9      	bne.n	13c1a <blst_p1_from_affine+0x20>
   13c26:	f10c 33ff 	add.w	r3, ip, #4294967295
   13c2a:	ea23 0c0c 	bic.w	ip, r3, ip
   13c2e:	ea4f 7cec 	mov.w	ip, ip, asr #31
   13c32:	4c09      	ldr	r4, [pc, #36]	; (13c58 <blst_p1_from_affine+0x5e>)
   13c34:	305c      	adds	r0, #92	; 0x5c
   13c36:	f101 052c 	add.w	r5, r1, #44	; 0x2c
   13c3a:	f854 1b04 	ldr.w	r1, [r4], #4
   13c3e:	f852 3f04 	ldr.w	r3, [r2, #4]!
   13c42:	404b      	eors	r3, r1
   13c44:	ea03 030c 	and.w	r3, r3, ip
   13c48:	404b      	eors	r3, r1
   13c4a:	f840 3f04 	str.w	r3, [r0, #4]!
   13c4e:	42aa      	cmp	r2, r5
   13c50:	d1f3      	bne.n	13c3a <blst_p1_from_affine+0x40>
   13c52:	bc30      	pop	{r4, r5}
   13c54:	4770      	bx	lr
   13c56:	bf00      	nop
   13c58:	000287c8 	.word	0x000287c8

00013c5c <blst_p1_affine_on_curve>:
   13c5c:	b508      	push	{r3, lr}
   13c5e:	f7fd fea3 	bl	119a8 <POINTonE1_affine_on_curve>
   13c62:	bd08      	pop	{r3, pc}

00013c64 <blst_p1_on_curve>:
   13c64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13c68:	b0a7      	sub	sp, #156	; 0x9c
   13c6a:	4605      	mov	r5, r0
   13c6c:	f100 0760 	add.w	r7, r0, #96	; 0x60
   13c70:	f100 035c 	add.w	r3, r0, #92	; 0x5c
   13c74:	f100 028c 	add.w	r2, r0, #140	; 0x8c
   13c78:	f04f 0c00 	mov.w	ip, #0
   13c7c:	f853 4f04 	ldr.w	r4, [r3, #4]!
   13c80:	ea4c 0c04 	orr.w	ip, ip, r4
   13c84:	4293      	cmp	r3, r2
   13c86:	d1f9      	bne.n	13c7c <blst_p1_on_curve+0x18>
   13c88:	f10c 36ff 	add.w	r6, ip, #4294967295
   13c8c:	ea26 0c0c 	bic.w	ip, r6, ip
   13c90:	ea4f 76dc 	mov.w	r6, ip, lsr #31
   13c94:	4c32      	ldr	r4, [pc, #200]	; (13d60 <blst_p1_on_curve+0xfc>)
   13c96:	f04f 080c 	mov.w	r8, #12
   13c9a:	f8cd 8004 	str.w	r8, [sp, #4]
   13c9e:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 13d64 <blst_p1_on_curve+0x100>
   13ca2:	f8cd 9000 	str.w	r9, [sp]
   13ca6:	4623      	mov	r3, r4
   13ca8:	463a      	mov	r2, r7
   13caa:	4639      	mov	r1, r7
   13cac:	a81a      	add	r0, sp, #104	; 0x68
   13cae:	f7fc fe8f 	bl	109d0 <mul_mont_n>
   13cb2:	f8cd 8004 	str.w	r8, [sp, #4]
   13cb6:	f8cd 9000 	str.w	r9, [sp]
   13cba:	4623      	mov	r3, r4
   13cbc:	463a      	mov	r2, r7
   13cbe:	a91a      	add	r1, sp, #104	; 0x68
   13cc0:	4608      	mov	r0, r1
   13cc2:	f7fc fe85 	bl	109d0 <mul_mont_n>
   13cc6:	f8cd 8004 	str.w	r8, [sp, #4]
   13cca:	f8cd 9000 	str.w	r9, [sp]
   13cce:	4623      	mov	r3, r4
   13cd0:	aa1a      	add	r2, sp, #104	; 0x68
   13cd2:	4611      	mov	r1, r2
   13cd4:	4610      	mov	r0, r2
   13cd6:	f7fc fe7b 	bl	109d0 <mul_mont_n>
   13cda:	f8cd 8000 	str.w	r8, [sp]
   13cde:	4623      	mov	r3, r4
   13ce0:	2202      	movs	r2, #2
   13ce2:	a91a      	add	r1, sp, #104	; 0x68
   13ce4:	4608      	mov	r0, r1
   13ce6:	f7fd f943 	bl	10f70 <lshift_mod_n>
   13cea:	f8cd 8004 	str.w	r8, [sp, #4]
   13cee:	f8cd 9000 	str.w	r9, [sp]
   13cf2:	4623      	mov	r3, r4
   13cf4:	462a      	mov	r2, r5
   13cf6:	4629      	mov	r1, r5
   13cf8:	a802      	add	r0, sp, #8
   13cfa:	f7fc fe69 	bl	109d0 <mul_mont_n>
   13cfe:	f8cd 8004 	str.w	r8, [sp, #4]
   13d02:	f8cd 9000 	str.w	r9, [sp]
   13d06:	4623      	mov	r3, r4
   13d08:	462a      	mov	r2, r5
   13d0a:	a902      	add	r1, sp, #8
   13d0c:	4608      	mov	r0, r1
   13d0e:	f7fc fe5f 	bl	109d0 <mul_mont_n>
   13d12:	f8cd 8000 	str.w	r8, [sp]
   13d16:	4623      	mov	r3, r4
   13d18:	aa1a      	add	r2, sp, #104	; 0x68
   13d1a:	a902      	add	r1, sp, #8
   13d1c:	4608      	mov	r0, r1
   13d1e:	f7fc ffff 	bl	10d20 <add_mod_n>
   13d22:	f105 0130 	add.w	r1, r5, #48	; 0x30
   13d26:	f8cd 8004 	str.w	r8, [sp, #4]
   13d2a:	f8cd 9000 	str.w	r9, [sp]
   13d2e:	4623      	mov	r3, r4
   13d30:	460a      	mov	r2, r1
   13d32:	a80e      	add	r0, sp, #56	; 0x38
   13d34:	f7fc fe4c 	bl	109d0 <mul_mont_n>
   13d38:	aa02      	add	r2, sp, #8
   13d3a:	a90e      	add	r1, sp, #56	; 0x38
   13d3c:	460d      	mov	r5, r1
   13d3e:	2000      	movs	r0, #0
   13d40:	f852 3b04 	ldr.w	r3, [r2], #4
   13d44:	f851 4b04 	ldr.w	r4, [r1], #4
   13d48:	4063      	eors	r3, r4
   13d4a:	4318      	orrs	r0, r3
   13d4c:	42aa      	cmp	r2, r5
   13d4e:	d1f7      	bne.n	13d40 <blst_p1_on_curve+0xdc>
   13d50:	1e43      	subs	r3, r0, #1
   13d52:	ea23 0000 	bic.w	r0, r3, r0
   13d56:	ea46 70d0 	orr.w	r0, r6, r0, lsr #31
   13d5a:	b027      	add	sp, #156	; 0x9c
   13d5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13d60:	00028738 	.word	0x00028738
   13d64:	fffcfffd 	.word	0xfffcfffd

00013d68 <blst_p1_affine_serialize>:
   13d68:	b510      	push	{r4, lr}
   13d6a:	1f0b      	subs	r3, r1, #4
   13d6c:	f101 0c5c 	add.w	ip, r1, #92	; 0x5c
   13d70:	2200      	movs	r2, #0
   13d72:	f853 4f04 	ldr.w	r4, [r3, #4]!
   13d76:	4322      	orrs	r2, r4
   13d78:	4563      	cmp	r3, ip
   13d7a:	d1fa      	bne.n	13d72 <blst_p1_affine_serialize+0xa>
   13d7c:	1e53      	subs	r3, r2, #1
   13d7e:	4393      	bics	r3, r2
   13d80:	d50a      	bpl.n	13d98 <blst_p1_affine_serialize+0x30>
   13d82:	1e43      	subs	r3, r0, #1
   13d84:	f100 015f 	add.w	r1, r0, #95	; 0x5f
   13d88:	2200      	movs	r2, #0
   13d8a:	f803 2f01 	strb.w	r2, [r3, #1]!
   13d8e:	428b      	cmp	r3, r1
   13d90:	d1fb      	bne.n	13d8a <blst_p1_affine_serialize+0x22>
   13d92:	2340      	movs	r3, #64	; 0x40
   13d94:	7003      	strb	r3, [r0, #0]
   13d96:	bd10      	pop	{r4, pc}
   13d98:	f7fd fc86 	bl	116a8 <POINTonE1_affine_Serialize_BE>
   13d9c:	e7fb      	b.n	13d96 <blst_p1_affine_serialize+0x2e>

00013d9e <blst_p1_affine_compress>:
   13d9e:	b538      	push	{r3, r4, r5, lr}
   13da0:	4605      	mov	r5, r0
   13da2:	1f0b      	subs	r3, r1, #4
   13da4:	f101 0c5c 	add.w	ip, r1, #92	; 0x5c
   13da8:	2200      	movs	r2, #0
   13daa:	f853 4f04 	ldr.w	r4, [r3, #4]!
   13dae:	4322      	orrs	r2, r4
   13db0:	4563      	cmp	r3, ip
   13db2:	d1fa      	bne.n	13daa <blst_p1_affine_compress+0xc>
   13db4:	1e53      	subs	r3, r2, #1
   13db6:	4393      	bics	r3, r2
   13db8:	d50a      	bpl.n	13dd0 <blst_p1_affine_compress+0x32>
   13dba:	1e6b      	subs	r3, r5, #1
   13dbc:	f105 012f 	add.w	r1, r5, #47	; 0x2f
   13dc0:	2200      	movs	r2, #0
   13dc2:	f803 2f01 	strb.w	r2, [r3, #1]!
   13dc6:	428b      	cmp	r3, r1
   13dc8:	d1fb      	bne.n	13dc2 <blst_p1_affine_compress+0x24>
   13dca:	23c0      	movs	r3, #192	; 0xc0
   13dcc:	702b      	strb	r3, [r5, #0]
   13dce:	bd38      	pop	{r3, r4, r5, pc}
   13dd0:	4628      	mov	r0, r5
   13dd2:	f7fd fc34 	bl	1163e <POINTonE1_affine_Compress_BE>
   13dd6:	0103      	lsls	r3, r0, #4
   13dd8:	f003 0320 	and.w	r3, r3, #32
   13ddc:	782a      	ldrb	r2, [r5, #0]
   13dde:	4313      	orrs	r3, r2
   13de0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   13de4:	702b      	strb	r3, [r5, #0]
   13de6:	e7f2      	b.n	13dce <blst_p1_affine_compress+0x30>

00013de8 <blst_p1_is_equal>:
   13de8:	b508      	push	{r3, lr}
   13dea:	f7fd ffb4 	bl	11d56 <POINTonE1_is_equal>
   13dee:	bd08      	pop	{r3, pc}

00013df0 <blst_p1_is_inf>:
   13df0:	f100 035c 	add.w	r3, r0, #92	; 0x5c
   13df4:	f100 018c 	add.w	r1, r0, #140	; 0x8c
   13df8:	2000      	movs	r0, #0
   13dfa:	f853 2f04 	ldr.w	r2, [r3, #4]!
   13dfe:	4310      	orrs	r0, r2
   13e00:	428b      	cmp	r3, r1
   13e02:	d1fa      	bne.n	13dfa <blst_p1_is_inf+0xa>
   13e04:	1e43      	subs	r3, r0, #1
   13e06:	ea23 0000 	bic.w	r0, r3, r0
   13e0a:	0fc0      	lsrs	r0, r0, #31
   13e0c:	4770      	bx	lr

00013e0e <blst_p1_generator>:
   13e0e:	4801      	ldr	r0, [pc, #4]	; (13e14 <blst_p1_generator+0x6>)
   13e10:	4770      	bx	lr
   13e12:	bf00      	nop
   13e14:	00029428 	.word	0x00029428

00013e18 <blst_p1_affine_is_inf>:
   13e18:	1f03      	subs	r3, r0, #4
   13e1a:	f100 015c 	add.w	r1, r0, #92	; 0x5c
   13e1e:	2000      	movs	r0, #0
   13e20:	f853 2f04 	ldr.w	r2, [r3, #4]!
   13e24:	4310      	orrs	r0, r2
   13e26:	428b      	cmp	r3, r1
   13e28:	d1fa      	bne.n	13e20 <blst_p1_affine_is_inf+0x8>
   13e2a:	1e43      	subs	r3, r0, #1
   13e2c:	ea23 0000 	bic.w	r0, r3, r0
   13e30:	0fc0      	lsrs	r0, r0, #31
   13e32:	4770      	bx	lr

00013e34 <blst_p1_affine_generator>:
   13e34:	4800      	ldr	r0, [pc, #0]	; (13e38 <blst_p1_affine_generator+0x4>)
   13e36:	4770      	bx	lr
   13e38:	00029428 	.word	0x00029428

00013e3c <blst_p1_in_g1>:
   13e3c:	b508      	push	{r3, lr}
   13e3e:	f7ff fbf5 	bl	1362c <POINTonE1_in_G1>
   13e42:	bd08      	pop	{r3, pc}

00013e44 <blst_p1_affine_in_g1>:
   13e44:	b510      	push	{r4, lr}
   13e46:	b0a4      	sub	sp, #144	; 0x90
   13e48:	1f02      	subs	r2, r0, #4
   13e4a:	466b      	mov	r3, sp
   13e4c:	f10d 0c60 	add.w	ip, sp, #96	; 0x60
   13e50:	4611      	mov	r1, r2
   13e52:	f851 4f04 	ldr.w	r4, [r1, #4]!
   13e56:	f843 4b04 	str.w	r4, [r3], #4
   13e5a:	4563      	cmp	r3, ip
   13e5c:	d1f9      	bne.n	13e52 <blst_p1_affine_in_g1+0xe>
   13e5e:	f100 0c5c 	add.w	ip, r0, #92	; 0x5c
   13e62:	4613      	mov	r3, r2
   13e64:	2100      	movs	r1, #0
   13e66:	f853 4f04 	ldr.w	r4, [r3, #4]!
   13e6a:	4321      	orrs	r1, r4
   13e6c:	4563      	cmp	r3, ip
   13e6e:	d1fa      	bne.n	13e66 <blst_p1_affine_in_g1+0x22>
   13e70:	f101 3eff 	add.w	lr, r1, #4294967295
   13e74:	ea2e 0101 	bic.w	r1, lr, r1
   13e78:	ea4f 7ee1 	mov.w	lr, r1, asr #31
   13e7c:	4c0a      	ldr	r4, [pc, #40]	; (13ea8 <blst_p1_affine_in_g1+0x64>)
   13e7e:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   13e82:	302c      	adds	r0, #44	; 0x2c
   13e84:	f854 1b04 	ldr.w	r1, [r4], #4
   13e88:	f852 3f04 	ldr.w	r3, [r2, #4]!
   13e8c:	404b      	eors	r3, r1
   13e8e:	ea03 030e 	and.w	r3, r3, lr
   13e92:	404b      	eors	r3, r1
   13e94:	f84c 3f04 	str.w	r3, [ip, #4]!
   13e98:	4282      	cmp	r2, r0
   13e9a:	d1f3      	bne.n	13e84 <blst_p1_affine_in_g1+0x40>
   13e9c:	4668      	mov	r0, sp
   13e9e:	f7ff fbc5 	bl	1362c <POINTonE1_in_G1>
   13ea2:	b024      	add	sp, #144	; 0x90
   13ea4:	bd10      	pop	{r4, pc}
   13ea6:	bf00      	nop
   13ea8:	000287c8 	.word	0x000287c8

00013eac <blst_p2_cneg>:
   13eac:	b508      	push	{r3, lr}
   13eae:	1e4b      	subs	r3, r1, #1
   13eb0:	ea23 0101 	bic.w	r1, r3, r1
   13eb4:	43c9      	mvns	r1, r1
   13eb6:	0fc9      	lsrs	r1, r1, #31
   13eb8:	f7fd fe90 	bl	11bdc <POINTonE2_cneg>
   13ebc:	bd08      	pop	{r3, pc}

00013ebe <blst_p2_from_affine>:
   13ebe:	b510      	push	{r4, lr}
   13ec0:	f1a1 0c04 	sub.w	ip, r1, #4
   13ec4:	1f02      	subs	r2, r0, #4
   13ec6:	31bc      	adds	r1, #188	; 0xbc
   13ec8:	4663      	mov	r3, ip
   13eca:	f853 4f04 	ldr.w	r4, [r3, #4]!
   13ece:	f842 4f04 	str.w	r4, [r2, #4]!
   13ed2:	428b      	cmp	r3, r1
   13ed4:	d1f9      	bne.n	13eca <blst_p2_from_affine+0xc>
   13ed6:	4663      	mov	r3, ip
   13ed8:	2200      	movs	r2, #0
   13eda:	f853 4f04 	ldr.w	r4, [r3, #4]!
   13ede:	4322      	orrs	r2, r4
   13ee0:	428b      	cmp	r3, r1
   13ee2:	d1fa      	bne.n	13eda <blst_p2_from_affine+0x1c>
   13ee4:	1e54      	subs	r4, r2, #1
   13ee6:	ea24 0202 	bic.w	r2, r4, r2
   13eea:	17d4      	asrs	r4, r2, #31
   13eec:	4b08      	ldr	r3, [pc, #32]	; (13f10 <blst_p2_from_affine+0x52>)
   13eee:	f103 0290 	add.w	r2, r3, #144	; 0x90
   13ef2:	30bc      	adds	r0, #188	; 0xbc
   13ef4:	f103 0ef0 	add.w	lr, r3, #240	; 0xf0
   13ef8:	f852 1b04 	ldr.w	r1, [r2], #4
   13efc:	f85c 3f04 	ldr.w	r3, [ip, #4]!
   13f00:	404b      	eors	r3, r1
   13f02:	4023      	ands	r3, r4
   13f04:	404b      	eors	r3, r1
   13f06:	f840 3f04 	str.w	r3, [r0, #4]!
   13f0a:	4572      	cmp	r2, lr
   13f0c:	d1f4      	bne.n	13ef8 <blst_p2_from_affine+0x3a>
   13f0e:	bd10      	pop	{r4, pc}
   13f10:	00028738 	.word	0x00028738

00013f14 <blst_p2_affine_serialize>:
   13f14:	b510      	push	{r4, lr}
   13f16:	1f0b      	subs	r3, r1, #4
   13f18:	f101 0cbc 	add.w	ip, r1, #188	; 0xbc
   13f1c:	2200      	movs	r2, #0
   13f1e:	f853 4f04 	ldr.w	r4, [r3, #4]!
   13f22:	4322      	orrs	r2, r4
   13f24:	4563      	cmp	r3, ip
   13f26:	d1fa      	bne.n	13f1e <blst_p2_affine_serialize+0xa>
   13f28:	1e53      	subs	r3, r2, #1
   13f2a:	4393      	bics	r3, r2
   13f2c:	d50a      	bpl.n	13f44 <blst_p2_affine_serialize+0x30>
   13f2e:	1e43      	subs	r3, r0, #1
   13f30:	f100 01bf 	add.w	r1, r0, #191	; 0xbf
   13f34:	2200      	movs	r2, #0
   13f36:	f803 2f01 	strb.w	r2, [r3, #1]!
   13f3a:	428b      	cmp	r3, r1
   13f3c:	d1fb      	bne.n	13f36 <blst_p2_affine_serialize+0x22>
   13f3e:	2340      	movs	r3, #64	; 0x40
   13f40:	7003      	strb	r3, [r0, #0]
   13f42:	bd10      	pop	{r4, pc}
   13f44:	f7fd fc80 	bl	11848 <POINTonE2_affine_Serialize_BE>
   13f48:	e7fb      	b.n	13f42 <blst_p2_affine_serialize+0x2e>

00013f4a <blst_p2_affine_compress>:
   13f4a:	b538      	push	{r3, r4, r5, lr}
   13f4c:	4605      	mov	r5, r0
   13f4e:	1f0b      	subs	r3, r1, #4
   13f50:	f101 0cbc 	add.w	ip, r1, #188	; 0xbc
   13f54:	2200      	movs	r2, #0
   13f56:	f853 4f04 	ldr.w	r4, [r3, #4]!
   13f5a:	4322      	orrs	r2, r4
   13f5c:	4563      	cmp	r3, ip
   13f5e:	d1fa      	bne.n	13f56 <blst_p2_affine_compress+0xc>
   13f60:	1e53      	subs	r3, r2, #1
   13f62:	4393      	bics	r3, r2
   13f64:	d50a      	bpl.n	13f7c <blst_p2_affine_compress+0x32>
   13f66:	1e6b      	subs	r3, r5, #1
   13f68:	f105 015f 	add.w	r1, r5, #95	; 0x5f
   13f6c:	2200      	movs	r2, #0
   13f6e:	f803 2f01 	strb.w	r2, [r3, #1]!
   13f72:	428b      	cmp	r3, r1
   13f74:	d1fb      	bne.n	13f6e <blst_p2_affine_compress+0x24>
   13f76:	23c0      	movs	r3, #192	; 0xc0
   13f78:	702b      	strb	r3, [r5, #0]
   13f7a:	bd38      	pop	{r3, r4, r5, pc}
   13f7c:	4628      	mov	r0, r5
   13f7e:	f7fd fbdb 	bl	11738 <POINTonE2_affine_Compress_BE>
   13f82:	0103      	lsls	r3, r0, #4
   13f84:	f003 0320 	and.w	r3, r3, #32
   13f88:	782a      	ldrb	r2, [r5, #0]
   13f8a:	4313      	orrs	r3, r2
   13f8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   13f90:	702b      	strb	r3, [r5, #0]
   13f92:	e7f2      	b.n	13f7a <blst_p2_affine_compress+0x30>

00013f94 <blst_p2_is_inf>:
   13f94:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
   13f98:	f500 718e 	add.w	r1, r0, #284	; 0x11c
   13f9c:	2000      	movs	r0, #0
   13f9e:	f853 2f04 	ldr.w	r2, [r3, #4]!
   13fa2:	4310      	orrs	r0, r2
   13fa4:	428b      	cmp	r3, r1
   13fa6:	d1fa      	bne.n	13f9e <blst_p2_is_inf+0xa>
   13fa8:	1e43      	subs	r3, r0, #1
   13faa:	ea23 0000 	bic.w	r0, r3, r0
   13fae:	0fc0      	lsrs	r0, r0, #31
   13fb0:	4770      	bx	lr

00013fb2 <blst_p2_generator>:
   13fb2:	4801      	ldr	r0, [pc, #4]	; (13fb8 <blst_p2_generator+0x6>)
   13fb4:	4770      	bx	lr
   13fb6:	bf00      	nop
   13fb8:	000294b8 	.word	0x000294b8

00013fbc <blst_p2_affine_is_inf>:
   13fbc:	1f03      	subs	r3, r0, #4
   13fbe:	f100 01bc 	add.w	r1, r0, #188	; 0xbc
   13fc2:	2000      	movs	r0, #0
   13fc4:	f853 2f04 	ldr.w	r2, [r3, #4]!
   13fc8:	4310      	orrs	r0, r2
   13fca:	428b      	cmp	r3, r1
   13fcc:	d1fa      	bne.n	13fc4 <blst_p2_affine_is_inf+0x8>
   13fce:	1e43      	subs	r3, r0, #1
   13fd0:	ea23 0000 	bic.w	r0, r3, r0
   13fd4:	0fc0      	lsrs	r0, r0, #31
   13fd6:	4770      	bx	lr

00013fd8 <blst_p2_affine_generator>:
   13fd8:	4800      	ldr	r0, [pc, #0]	; (13fdc <blst_p2_affine_generator+0x4>)
   13fda:	4770      	bx	lr
   13fdc:	000294b8 	.word	0x000294b8

00013fe0 <blst_fp12_conjugate>:
   13fe0:	b508      	push	{r3, lr}
   13fe2:	f7fd feb1 	bl	11d48 <conjugate_fp12>
   13fe6:	bd08      	pop	{r3, pc}

00013fe8 <blst_fp12_is_equal>:
   13fe8:	b410      	push	{r4}
   13fea:	1f02      	subs	r2, r0, #4
   13fec:	3904      	subs	r1, #4
   13fee:	f500 7c0f 	add.w	ip, r0, #572	; 0x23c
   13ff2:	2000      	movs	r0, #0
   13ff4:	f852 3f04 	ldr.w	r3, [r2, #4]!
   13ff8:	f851 4f04 	ldr.w	r4, [r1, #4]!
   13ffc:	4063      	eors	r3, r4
   13ffe:	4318      	orrs	r0, r3
   14000:	4562      	cmp	r2, ip
   14002:	d1f7      	bne.n	13ff4 <blst_fp12_is_equal+0xc>
   14004:	1e43      	subs	r3, r0, #1
   14006:	ea23 0000 	bic.w	r0, r3, r0
   1400a:	0fc0      	lsrs	r0, r0, #31
   1400c:	bc10      	pop	{r4}
   1400e:	4770      	bx	lr

00014010 <blst_fp12_is_one>:
   14010:	b510      	push	{r4, lr}
   14012:	f1a0 0c04 	sub.w	ip, r0, #4
   14016:	4b12      	ldr	r3, [pc, #72]	; (14060 <blst_fp12_is_one+0x50>)
   14018:	f103 0290 	add.w	r2, r3, #144	; 0x90
   1401c:	f103 0ef0 	add.w	lr, r3, #240	; 0xf0
   14020:	2100      	movs	r1, #0
   14022:	f852 3b04 	ldr.w	r3, [r2], #4
   14026:	f85c 4f04 	ldr.w	r4, [ip, #4]!
   1402a:	4063      	eors	r3, r4
   1402c:	4319      	orrs	r1, r3
   1402e:	4572      	cmp	r2, lr
   14030:	d1f7      	bne.n	14022 <blst_fp12_is_one+0x12>
   14032:	f101 3cff 	add.w	ip, r1, #4294967295
   14036:	ea2c 0101 	bic.w	r1, ip, r1
   1403a:	ea4f 7cd1 	mov.w	ip, r1, lsr #31
   1403e:	f100 035c 	add.w	r3, r0, #92	; 0x5c
   14042:	f500 740f 	add.w	r4, r0, #572	; 0x23c
   14046:	2200      	movs	r2, #0
   14048:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1404c:	430a      	orrs	r2, r1
   1404e:	42a3      	cmp	r3, r4
   14050:	d1fa      	bne.n	14048 <blst_fp12_is_one+0x38>
   14052:	1e50      	subs	r0, r2, #1
   14054:	ea20 0002 	bic.w	r0, r0, r2
   14058:	ea0c 70d0 	and.w	r0, ip, r0, lsr #31
   1405c:	bd10      	pop	{r4, pc}
   1405e:	bf00      	nop
   14060:	00028738 	.word	0x00028738

00014064 <blst_fp12_one>:
   14064:	4800      	ldr	r0, [pc, #0]	; (14068 <blst_fp12_one+0x4>)
   14066:	4770      	bx	lr
   14068:	000287c8 	.word	0x000287c8

0001406c <blst_pairing_sizeof>:
   1406c:	f44f 6047 	mov.w	r0, #3184	; 0xc70
   14070:	4770      	bx	lr

00014072 <blst_pairing_init>:
   14072:	2900      	cmp	r1, #0
   14074:	bf14      	ite	ne
   14076:	2140      	movne	r1, #64	; 0x40
   14078:	2100      	moveq	r1, #0
   1407a:	6001      	str	r1, [r0, #0]
   1407c:	2100      	movs	r1, #0
   1407e:	6041      	str	r1, [r0, #4]
   14080:	f500 6147 	add.w	r1, r0, #3184	; 0xc70
   14084:	4291      	cmp	r1, r2
   14086:	bf08      	it	eq
   14088:	222a      	moveq	r2, #42	; 0x2a
   1408a:	6082      	str	r2, [r0, #8]
   1408c:	60c3      	str	r3, [r0, #12]
   1408e:	4770      	bx	lr

00014090 <blst_pairing_get_dst>:
   14090:	4603      	mov	r3, r0
   14092:	6880      	ldr	r0, [r0, #8]
   14094:	282a      	cmp	r0, #42	; 0x2a
   14096:	bf08      	it	eq
   14098:	f503 6047 	addeq.w	r0, r3, #3184	; 0xc70
   1409c:	4770      	bx	lr

0001409e <mul_mont_sparse_256>:
   1409e:	b510      	push	{r4, lr}
   140a0:	b082      	sub	sp, #8
   140a2:	2408      	movs	r4, #8
   140a4:	9401      	str	r4, [sp, #4]
   140a6:	9c04      	ldr	r4, [sp, #16]
   140a8:	9400      	str	r4, [sp, #0]
   140aa:	f7fc fc91 	bl	109d0 <mul_mont_n>
   140ae:	b002      	add	sp, #8
   140b0:	bd10      	pop	{r4, pc}

000140b2 <sqr_mont_sparse_256>:
   140b2:	b510      	push	{r4, lr}
   140b4:	b082      	sub	sp, #8
   140b6:	2408      	movs	r4, #8
   140b8:	9401      	str	r4, [sp, #4]
   140ba:	9300      	str	r3, [sp, #0]
   140bc:	4613      	mov	r3, r2
   140be:	460a      	mov	r2, r1
   140c0:	f7fc fc86 	bl	109d0 <mul_mont_n>
   140c4:	b002      	add	sp, #8
   140c6:	bd10      	pop	{r4, pc}

000140c8 <mul_mont_384>:
   140c8:	b510      	push	{r4, lr}
   140ca:	b082      	sub	sp, #8
   140cc:	240c      	movs	r4, #12
   140ce:	9401      	str	r4, [sp, #4]
   140d0:	9c04      	ldr	r4, [sp, #16]
   140d2:	9400      	str	r4, [sp, #0]
   140d4:	f7fc fc7c 	bl	109d0 <mul_mont_n>
   140d8:	b002      	add	sp, #8
   140da:	bd10      	pop	{r4, pc}

000140dc <sqr_mont_384>:
   140dc:	b510      	push	{r4, lr}
   140de:	b082      	sub	sp, #8
   140e0:	240c      	movs	r4, #12
   140e2:	9401      	str	r4, [sp, #4]
   140e4:	9300      	str	r3, [sp, #0]
   140e6:	4613      	mov	r3, r2
   140e8:	460a      	mov	r2, r1
   140ea:	f7fc fc71 	bl	109d0 <mul_mont_n>
   140ee:	b002      	add	sp, #8
   140f0:	bd10      	pop	{r4, pc}

000140f2 <add_mod_256>:
   140f2:	b510      	push	{r4, lr}
   140f4:	b082      	sub	sp, #8
   140f6:	2408      	movs	r4, #8
   140f8:	9400      	str	r4, [sp, #0]
   140fa:	f7fc fe11 	bl	10d20 <add_mod_n>
   140fe:	b002      	add	sp, #8
   14100:	bd10      	pop	{r4, pc}

00014102 <add_mod_384>:
   14102:	b510      	push	{r4, lr}
   14104:	b082      	sub	sp, #8
   14106:	240c      	movs	r4, #12
   14108:	9400      	str	r4, [sp, #0]
   1410a:	f7fc fe09 	bl	10d20 <add_mod_n>
   1410e:	b002      	add	sp, #8
   14110:	bd10      	pop	{r4, pc}

00014112 <sub_mod_256>:
   14112:	b510      	push	{r4, lr}
   14114:	b082      	sub	sp, #8
   14116:	2408      	movs	r4, #8
   14118:	9400      	str	r4, [sp, #0]
   1411a:	f7fc faab 	bl	10674 <sub_mod_n>
   1411e:	b002      	add	sp, #8
   14120:	bd10      	pop	{r4, pc}

00014122 <sub_mod_384>:
   14122:	b510      	push	{r4, lr}
   14124:	b082      	sub	sp, #8
   14126:	240c      	movs	r4, #12
   14128:	9400      	str	r4, [sp, #0]
   1412a:	f7fc faa3 	bl	10674 <sub_mod_n>
   1412e:	b002      	add	sp, #8
   14130:	bd10      	pop	{r4, pc}

00014132 <mul_by_3_mod_256>:
   14132:	b508      	push	{r3, lr}
   14134:	2308      	movs	r3, #8
   14136:	f7fc fe7b 	bl	10e30 <mul_by_3_mod_n>
   1413a:	bd08      	pop	{r3, pc}

0001413c <mul_by_3_mod_384>:
   1413c:	b508      	push	{r3, lr}
   1413e:	230c      	movs	r3, #12
   14140:	f7fc fe76 	bl	10e30 <mul_by_3_mod_n>
   14144:	bd08      	pop	{r3, pc}

00014146 <lshift_mod_256>:
   14146:	b510      	push	{r4, lr}
   14148:	b082      	sub	sp, #8
   1414a:	2408      	movs	r4, #8
   1414c:	9400      	str	r4, [sp, #0]
   1414e:	f7fc ff0f 	bl	10f70 <lshift_mod_n>
   14152:	b002      	add	sp, #8
   14154:	bd10      	pop	{r4, pc}

00014156 <lshift_mod_384>:
   14156:	b510      	push	{r4, lr}
   14158:	b082      	sub	sp, #8
   1415a:	240c      	movs	r4, #12
   1415c:	9400      	str	r4, [sp, #0]
   1415e:	f7fc ff07 	bl	10f70 <lshift_mod_n>
   14162:	b002      	add	sp, #8
   14164:	bd10      	pop	{r4, pc}

00014166 <cneg_mod_256>:
   14166:	b510      	push	{r4, lr}
   14168:	b082      	sub	sp, #8
   1416a:	2408      	movs	r4, #8
   1416c:	9400      	str	r4, [sp, #0]
   1416e:	f7fd fc6b 	bl	11a48 <cneg_mod_n>
   14172:	b002      	add	sp, #8
   14174:	bd10      	pop	{r4, pc}

00014176 <cneg_mod_384>:
   14176:	b510      	push	{r4, lr}
   14178:	b082      	sub	sp, #8
   1417a:	240c      	movs	r4, #12
   1417c:	9400      	str	r4, [sp, #0]
   1417e:	f7fd fc63 	bl	11a48 <cneg_mod_n>
   14182:	b002      	add	sp, #8
   14184:	bd10      	pop	{r4, pc}

00014186 <check_mod_256>:
   14186:	b508      	push	{r3, lr}
   14188:	2208      	movs	r2, #8
   1418a:	f7fc faac 	bl	106e6 <check_mod_n>
   1418e:	bd08      	pop	{r3, pc}

00014190 <from_mont_256>:
   14190:	b510      	push	{r4, lr}
   14192:	b082      	sub	sp, #8
   14194:	2408      	movs	r4, #8
   14196:	9400      	str	r4, [sp, #0]
   14198:	f7fc ff4c 	bl	11034 <from_mont_n>
   1419c:	b002      	add	sp, #8
   1419e:	bd10      	pop	{r4, pc}

000141a0 <from_mont_384>:
   141a0:	b510      	push	{r4, lr}
   141a2:	b082      	sub	sp, #8
   141a4:	240c      	movs	r4, #12
   141a6:	9400      	str	r4, [sp, #0]
   141a8:	f7fc ff44 	bl	11034 <from_mont_n>
   141ac:	b002      	add	sp, #8
   141ae:	bd10      	pop	{r4, pc}

000141b0 <redc_mont_256>:
   141b0:	b510      	push	{r4, lr}
   141b2:	b082      	sub	sp, #8
   141b4:	2408      	movs	r4, #8
   141b6:	9400      	str	r4, [sp, #0]
   141b8:	f7fc ffbb 	bl	11132 <redc_mont_n>
   141bc:	b002      	add	sp, #8
   141be:	bd10      	pop	{r4, pc}

000141c0 <redc_mont_384>:
   141c0:	b510      	push	{r4, lr}
   141c2:	b082      	sub	sp, #8
   141c4:	240c      	movs	r4, #12
   141c6:	9400      	str	r4, [sp, #0]
   141c8:	f7fc ffb3 	bl	11132 <redc_mont_n>
   141cc:	b002      	add	sp, #8
   141ce:	bd10      	pop	{r4, pc}

000141d0 <rshift_mod_256>:
   141d0:	b510      	push	{r4, lr}
   141d2:	b082      	sub	sp, #8
   141d4:	2408      	movs	r4, #8
   141d6:	9400      	str	r4, [sp, #0]
   141d8:	f7fc fab4 	bl	10744 <rshift_mod_n>
   141dc:	b002      	add	sp, #8
   141de:	bd10      	pop	{r4, pc}

000141e0 <rshift_mod_384>:
   141e0:	b510      	push	{r4, lr}
   141e2:	b082      	sub	sp, #8
   141e4:	240c      	movs	r4, #12
   141e6:	9400      	str	r4, [sp, #0]
   141e8:	f7fc faac 	bl	10744 <rshift_mod_n>
   141ec:	b002      	add	sp, #8
   141ee:	bd10      	pop	{r4, pc}

000141f0 <div_by_2_mod_384>:
   141f0:	b500      	push	{lr}
   141f2:	b083      	sub	sp, #12
   141f4:	4613      	mov	r3, r2
   141f6:	220c      	movs	r2, #12
   141f8:	9200      	str	r2, [sp, #0]
   141fa:	2201      	movs	r2, #1
   141fc:	f7fc faa2 	bl	10744 <rshift_mod_n>
   14200:	b003      	add	sp, #12
   14202:	f85d fb04 	ldr.w	pc, [sp], #4

00014206 <eucl_inverse_mod_256>:
   14206:	b510      	push	{r4, lr}
   14208:	b082      	sub	sp, #8
   1420a:	2408      	movs	r4, #8
   1420c:	9400      	str	r4, [sp, #0]
   1420e:	f7fe fbff 	bl	12a10 <eucl_inverse_mod_n>
   14212:	b002      	add	sp, #8
   14214:	bd10      	pop	{r4, pc}

00014216 <sgn0_pty_mod_384>:
   14216:	b508      	push	{r3, lr}
   14218:	220c      	movs	r2, #12
   1421a:	f7fd f820 	bl	1125e <sgn0_pty_mod_n>
   1421e:	bd08      	pop	{r3, pc}

00014220 <sgn0_pty_mont_384>:
   14220:	b530      	push	{r4, r5, lr}
   14222:	b08f      	sub	sp, #60	; 0x3c
   14224:	460c      	mov	r4, r1
   14226:	4613      	mov	r3, r2
   14228:	250c      	movs	r5, #12
   1422a:	9500      	str	r5, [sp, #0]
   1422c:	460a      	mov	r2, r1
   1422e:	4601      	mov	r1, r0
   14230:	a802      	add	r0, sp, #8
   14232:	f7fc feff 	bl	11034 <from_mont_n>
   14236:	462a      	mov	r2, r5
   14238:	4621      	mov	r1, r4
   1423a:	a802      	add	r0, sp, #8
   1423c:	f7fd f80f 	bl	1125e <sgn0_pty_mod_n>
   14240:	b00f      	add	sp, #60	; 0x3c
   14242:	bd30      	pop	{r4, r5, pc}

00014244 <sgn0_pty_mod_384x>:
   14244:	b570      	push	{r4, r5, r6, lr}
   14246:	4605      	mov	r5, r0
   14248:	460e      	mov	r6, r1
   1424a:	220c      	movs	r2, #12
   1424c:	f7fd f807 	bl	1125e <sgn0_pty_mod_n>
   14250:	4604      	mov	r4, r0
   14252:	220c      	movs	r2, #12
   14254:	4631      	mov	r1, r6
   14256:	f105 0030 	add.w	r0, r5, #48	; 0x30
   1425a:	f7fd f800 	bl	1125e <sgn0_pty_mod_n>
   1425e:	f105 032c 	add.w	r3, r5, #44	; 0x2c
   14262:	f105 0c5c 	add.w	ip, r5, #92	; 0x5c
   14266:	2200      	movs	r2, #0
   14268:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1426c:	430a      	orrs	r2, r1
   1426e:	4563      	cmp	r3, ip
   14270:	d1fa      	bne.n	14268 <sgn0_pty_mod_384x+0x24>
   14272:	f102 3eff 	add.w	lr, r2, #4294967295
   14276:	ea2e 0202 	bic.w	r2, lr, r2
   1427a:	ea4f 7ed2 	mov.w	lr, r2, lsr #31
   1427e:	ea04 72e2 	and.w	r2, r4, r2, asr #31
   14282:	f10e 3eff 	add.w	lr, lr, #4294967295
   14286:	ea0e 0e00 	and.w	lr, lr, r0
   1428a:	ea4e 0e02 	orr.w	lr, lr, r2
   1428e:	1f2b      	subs	r3, r5, #4
   14290:	f105 0c2c 	add.w	ip, r5, #44	; 0x2c
   14294:	2200      	movs	r2, #0
   14296:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1429a:	430a      	orrs	r2, r1
   1429c:	4563      	cmp	r3, ip
   1429e:	d1fa      	bne.n	14296 <sgn0_pty_mod_384x+0x52>
   142a0:	1e53      	subs	r3, r2, #1
   142a2:	ea23 0202 	bic.w	r2, r3, r2
   142a6:	0fd3      	lsrs	r3, r2, #31
   142a8:	ea00 72e2 	and.w	r2, r0, r2, asr #31
   142ac:	1e58      	subs	r0, r3, #1
   142ae:	4004      	ands	r4, r0
   142b0:	4314      	orrs	r4, r2
   142b2:	f004 0401 	and.w	r4, r4, #1
   142b6:	f00e 0002 	and.w	r0, lr, #2
   142ba:	4320      	orrs	r0, r4
   142bc:	bd70      	pop	{r4, r5, r6, pc}

000142be <sgn0_pty_mont_384x>:
   142be:	b5f0      	push	{r4, r5, r6, r7, lr}
   142c0:	b09b      	sub	sp, #108	; 0x6c
   142c2:	4605      	mov	r5, r0
   142c4:	460c      	mov	r4, r1
   142c6:	4617      	mov	r7, r2
   142c8:	260c      	movs	r6, #12
   142ca:	9600      	str	r6, [sp, #0]
   142cc:	4613      	mov	r3, r2
   142ce:	460a      	mov	r2, r1
   142d0:	4601      	mov	r1, r0
   142d2:	a802      	add	r0, sp, #8
   142d4:	f7fc feae 	bl	11034 <from_mont_n>
   142d8:	9600      	str	r6, [sp, #0]
   142da:	463b      	mov	r3, r7
   142dc:	4622      	mov	r2, r4
   142de:	f105 0130 	add.w	r1, r5, #48	; 0x30
   142e2:	a80e      	add	r0, sp, #56	; 0x38
   142e4:	f7fc fea6 	bl	11034 <from_mont_n>
   142e8:	4632      	mov	r2, r6
   142ea:	4621      	mov	r1, r4
   142ec:	a802      	add	r0, sp, #8
   142ee:	f7fc ffb6 	bl	1125e <sgn0_pty_mod_n>
   142f2:	4605      	mov	r5, r0
   142f4:	4632      	mov	r2, r6
   142f6:	4621      	mov	r1, r4
   142f8:	a80e      	add	r0, sp, #56	; 0x38
   142fa:	f7fc ffb0 	bl	1125e <sgn0_pty_mod_n>
   142fe:	aa0d      	add	r2, sp, #52	; 0x34
   14300:	ab02      	add	r3, sp, #8
   14302:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
   14306:	2100      	movs	r1, #0
   14308:	f852 4f04 	ldr.w	r4, [r2, #4]!
   1430c:	4321      	orrs	r1, r4
   1430e:	4562      	cmp	r2, ip
   14310:	d1fa      	bne.n	14308 <sgn0_pty_mont_384x+0x4a>
   14312:	1e4c      	subs	r4, r1, #1
   14314:	ea24 0101 	bic.w	r1, r4, r1
   14318:	0fcc      	lsrs	r4, r1, #31
   1431a:	ea05 71e1 	and.w	r1, r5, r1, asr #31
   1431e:	3c01      	subs	r4, #1
   14320:	4004      	ands	r4, r0
   14322:	430c      	orrs	r4, r1
   14324:	f103 0c30 	add.w	ip, r3, #48	; 0x30
   14328:	2200      	movs	r2, #0
   1432a:	f853 1b04 	ldr.w	r1, [r3], #4
   1432e:	430a      	orrs	r2, r1
   14330:	4563      	cmp	r3, ip
   14332:	d1fa      	bne.n	1432a <sgn0_pty_mont_384x+0x6c>
   14334:	1e53      	subs	r3, r2, #1
   14336:	ea23 0202 	bic.w	r2, r3, r2
   1433a:	0fd3      	lsrs	r3, r2, #31
   1433c:	ea00 70e2 	and.w	r0, r0, r2, asr #31
   14340:	3b01      	subs	r3, #1
   14342:	402b      	ands	r3, r5
   14344:	4303      	orrs	r3, r0
   14346:	f003 0301 	and.w	r3, r3, #1
   1434a:	f004 0002 	and.w	r0, r4, #2
   1434e:	4318      	orrs	r0, r3
   14350:	b01b      	add	sp, #108	; 0x6c
   14352:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014354 <mul_mont_384x>:
   14354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14358:	b0a7      	sub	sp, #156	; 0x9c
   1435a:	4605      	mov	r5, r0
   1435c:	4688      	mov	r8, r1
   1435e:	4617      	mov	r7, r2
   14360:	461c      	mov	r4, r3
   14362:	f8dd 90c0 	ldr.w	r9, [sp, #192]	; 0xc0
   14366:	f101 0a30 	add.w	sl, r1, #48	; 0x30
   1436a:	260c      	movs	r6, #12
   1436c:	9600      	str	r6, [sp, #0]
   1436e:	4652      	mov	r2, sl
   14370:	a81a      	add	r0, sp, #104	; 0x68
   14372:	f7fc fcd5 	bl	10d20 <add_mod_n>
   14376:	f107 0b30 	add.w	fp, r7, #48	; 0x30
   1437a:	9600      	str	r6, [sp, #0]
   1437c:	4623      	mov	r3, r4
   1437e:	465a      	mov	r2, fp
   14380:	4639      	mov	r1, r7
   14382:	a80e      	add	r0, sp, #56	; 0x38
   14384:	f7fc fccc 	bl	10d20 <add_mod_n>
   14388:	9601      	str	r6, [sp, #4]
   1438a:	f8cd 9000 	str.w	r9, [sp]
   1438e:	4623      	mov	r3, r4
   14390:	aa1a      	add	r2, sp, #104	; 0x68
   14392:	a90e      	add	r1, sp, #56	; 0x38
   14394:	4608      	mov	r0, r1
   14396:	f7fc fb1b 	bl	109d0 <mul_mont_n>
   1439a:	9601      	str	r6, [sp, #4]
   1439c:	f8cd 9000 	str.w	r9, [sp]
   143a0:	4623      	mov	r3, r4
   143a2:	463a      	mov	r2, r7
   143a4:	4641      	mov	r1, r8
   143a6:	a81a      	add	r0, sp, #104	; 0x68
   143a8:	f7fc fb12 	bl	109d0 <mul_mont_n>
   143ac:	9601      	str	r6, [sp, #4]
   143ae:	f8cd 9000 	str.w	r9, [sp]
   143b2:	4623      	mov	r3, r4
   143b4:	465a      	mov	r2, fp
   143b6:	4651      	mov	r1, sl
   143b8:	a802      	add	r0, sp, #8
   143ba:	f7fc fb09 	bl	109d0 <mul_mont_n>
   143be:	9600      	str	r6, [sp, #0]
   143c0:	4623      	mov	r3, r4
   143c2:	aa02      	add	r2, sp, #8
   143c4:	a91a      	add	r1, sp, #104	; 0x68
   143c6:	4628      	mov	r0, r5
   143c8:	f7fc f954 	bl	10674 <sub_mod_n>
   143cc:	3530      	adds	r5, #48	; 0x30
   143ce:	9600      	str	r6, [sp, #0]
   143d0:	4623      	mov	r3, r4
   143d2:	aa1a      	add	r2, sp, #104	; 0x68
   143d4:	a90e      	add	r1, sp, #56	; 0x38
   143d6:	4628      	mov	r0, r5
   143d8:	f7fc f94c 	bl	10674 <sub_mod_n>
   143dc:	9600      	str	r6, [sp, #0]
   143de:	4623      	mov	r3, r4
   143e0:	aa02      	add	r2, sp, #8
   143e2:	4629      	mov	r1, r5
   143e4:	4628      	mov	r0, r5
   143e6:	f7fc f945 	bl	10674 <sub_mod_n>
   143ea:	b027      	add	sp, #156	; 0x9c
   143ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000143f0 <psi>:
   143f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   143f2:	b083      	sub	sp, #12
   143f4:	4604      	mov	r4, r0
   143f6:	1f0b      	subs	r3, r1, #4
   143f8:	1f02      	subs	r2, r0, #4
   143fa:	f501 7c8e 	add.w	ip, r1, #284	; 0x11c
   143fe:	f853 1f04 	ldr.w	r1, [r3, #4]!
   14402:	f842 1f04 	str.w	r1, [r2, #4]!
   14406:	4563      	cmp	r3, ip
   14408:	d1f9      	bne.n	143fe <psi+0xe>
   1440a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1440e:	4d16      	ldr	r5, [pc, #88]	; (14468 <psi+0x78>)
   14410:	260c      	movs	r6, #12
   14412:	9600      	str	r6, [sp, #0]
   14414:	462b      	mov	r3, r5
   14416:	2201      	movs	r2, #1
   14418:	4601      	mov	r1, r0
   1441a:	f7fd fb15 	bl	11a48 <cneg_mod_n>
   1441e:	4f13      	ldr	r7, [pc, #76]	; (1446c <psi+0x7c>)
   14420:	9700      	str	r7, [sp, #0]
   14422:	462b      	mov	r3, r5
   14424:	f505 626a 	add.w	r2, r5, #3744	; 0xea0
   14428:	4621      	mov	r1, r4
   1442a:	4620      	mov	r0, r4
   1442c:	f7ff ff92 	bl	14354 <mul_mont_384x>
   14430:	f104 0090 	add.w	r0, r4, #144	; 0x90
   14434:	9600      	str	r6, [sp, #0]
   14436:	462b      	mov	r3, r5
   14438:	2201      	movs	r2, #1
   1443a:	4601      	mov	r1, r0
   1443c:	f7fd fb04 	bl	11a48 <cneg_mod_n>
   14440:	f104 0060 	add.w	r0, r4, #96	; 0x60
   14444:	9700      	str	r7, [sp, #0]
   14446:	462b      	mov	r3, r5
   14448:	f505 6270 	add.w	r2, r5, #3840	; 0xf00
   1444c:	4601      	mov	r1, r0
   1444e:	f7ff ff81 	bl	14354 <mul_mont_384x>
   14452:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   14456:	9600      	str	r6, [sp, #0]
   14458:	462b      	mov	r3, r5
   1445a:	2201      	movs	r2, #1
   1445c:	4601      	mov	r1, r0
   1445e:	f7fd faf3 	bl	11a48 <cneg_mod_n>
   14462:	b003      	add	sp, #12
   14464:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14466:	bf00      	nop
   14468:	00028738 	.word	0x00028738
   1446c:	fffcfffd 	.word	0xfffcfffd

00014470 <map_fp2_times_Zz>:
   14470:	b303      	cbz	r3, 144b4 <map_fp2_times_Zz+0x44>
   14472:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14476:	b083      	sub	sp, #12
   14478:	1e5f      	subs	r7, r3, #1
   1447a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1447e:	015c      	lsls	r4, r3, #5
   14480:	3c60      	subs	r4, #96	; 0x60
   14482:	1906      	adds	r6, r0, r4
   14484:	190d      	adds	r5, r1, r4
   14486:	4414      	add	r4, r2
   14488:	f8df 902c 	ldr.w	r9, [pc, #44]	; 144b8 <map_fp2_times_Zz+0x48>
   1448c:	f8df 802c 	ldr.w	r8, [pc, #44]	; 144bc <map_fp2_times_Zz+0x4c>
   14490:	f8cd 8000 	str.w	r8, [sp]
   14494:	464b      	mov	r3, r9
   14496:	4622      	mov	r2, r4
   14498:	4629      	mov	r1, r5
   1449a:	4630      	mov	r0, r6
   1449c:	f7ff ff5a 	bl	14354 <mul_mont_384x>
   144a0:	3f01      	subs	r7, #1
   144a2:	3e60      	subs	r6, #96	; 0x60
   144a4:	3d60      	subs	r5, #96	; 0x60
   144a6:	3c60      	subs	r4, #96	; 0x60
   144a8:	f1b7 3fff 	cmp.w	r7, #4294967295
   144ac:	d1f0      	bne.n	14490 <map_fp2_times_Zz+0x20>
   144ae:	b003      	add	sp, #12
   144b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   144b4:	4770      	bx	lr
   144b6:	bf00      	nop
   144b8:	00028738 	.word	0x00028738
   144bc:	fffcfffd 	.word	0xfffcfffd

000144c0 <frobenius_map_fp6>:
   144c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144c4:	b083      	sub	sp, #12
   144c6:	4604      	mov	r4, r0
   144c8:	460d      	mov	r5, r1
   144ca:	4616      	mov	r6, r2
   144cc:	1f0b      	subs	r3, r1, #4
   144ce:	1f02      	subs	r2, r0, #4
   144d0:	f101 002c 	add.w	r0, r1, #44	; 0x2c
   144d4:	f853 1f04 	ldr.w	r1, [r3, #4]!
   144d8:	f842 1f04 	str.w	r1, [r2, #4]!
   144dc:	4283      	cmp	r3, r0
   144de:	d1f9      	bne.n	144d4 <frobenius_map_fp6+0x14>
   144e0:	f006 0701 	and.w	r7, r6, #1
   144e4:	230c      	movs	r3, #12
   144e6:	9300      	str	r3, [sp, #0]
   144e8:	4b31      	ldr	r3, [pc, #196]	; (145b0 <frobenius_map_fp6+0xf0>)
   144ea:	463a      	mov	r2, r7
   144ec:	f105 0130 	add.w	r1, r5, #48	; 0x30
   144f0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   144f4:	f7fd faa8 	bl	11a48 <cneg_mod_n>
   144f8:	f104 0860 	add.w	r8, r4, #96	; 0x60
   144fc:	f105 035c 	add.w	r3, r5, #92	; 0x5c
   14500:	f104 025c 	add.w	r2, r4, #92	; 0x5c
   14504:	f105 008c 	add.w	r0, r5, #140	; 0x8c
   14508:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1450c:	f842 1f04 	str.w	r1, [r2, #4]!
   14510:	4283      	cmp	r3, r0
   14512:	d1f9      	bne.n	14508 <frobenius_map_fp6+0x48>
   14514:	230c      	movs	r3, #12
   14516:	9300      	str	r3, [sp, #0]
   14518:	4b25      	ldr	r3, [pc, #148]	; (145b0 <frobenius_map_fp6+0xf0>)
   1451a:	463a      	mov	r2, r7
   1451c:	f105 0190 	add.w	r1, r5, #144	; 0x90
   14520:	f104 0090 	add.w	r0, r4, #144	; 0x90
   14524:	f7fd fa90 	bl	11a48 <cneg_mod_n>
   14528:	f105 03bc 	add.w	r3, r5, #188	; 0xbc
   1452c:	f104 0cbc 	add.w	ip, r4, #188	; 0xbc
   14530:	f105 01ec 	add.w	r1, r5, #236	; 0xec
   14534:	f853 2f04 	ldr.w	r2, [r3, #4]!
   14538:	f84c 2f04 	str.w	r2, [ip, #4]!
   1453c:	428b      	cmp	r3, r1
   1453e:	d1f9      	bne.n	14534 <frobenius_map_fp6+0x74>
   14540:	f104 0af0 	add.w	sl, r4, #240	; 0xf0
   14544:	f8df 9068 	ldr.w	r9, [pc, #104]	; 145b0 <frobenius_map_fp6+0xf0>
   14548:	f04f 0b0c 	mov.w	fp, #12
   1454c:	f8cd b000 	str.w	fp, [sp]
   14550:	464b      	mov	r3, r9
   14552:	463a      	mov	r2, r7
   14554:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   14558:	4650      	mov	r0, sl
   1455a:	f7fd fa75 	bl	11a48 <cneg_mod_n>
   1455e:	3e01      	subs	r6, #1
   14560:	f509 6276 	add.w	r2, r9, #3936	; 0xf60
   14564:	0077      	lsls	r7, r6, #1
   14566:	eb06 0146 	add.w	r1, r6, r6, lsl #1
   1456a:	4d12      	ldr	r5, [pc, #72]	; (145b4 <frobenius_map_fp6+0xf4>)
   1456c:	9500      	str	r5, [sp, #0]
   1456e:	464b      	mov	r3, r9
   14570:	eb02 1241 	add.w	r2, r2, r1, lsl #5
   14574:	4641      	mov	r1, r8
   14576:	4640      	mov	r0, r8
   14578:	f7ff feec 	bl	14354 <mul_mont_384x>
   1457c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   14580:	4437      	add	r7, r6
   14582:	4e0d      	ldr	r6, [pc, #52]	; (145b8 <frobenius_map_fp6+0xf8>)
   14584:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   14588:	f8cd b004 	str.w	fp, [sp, #4]
   1458c:	9500      	str	r5, [sp, #0]
   1458e:	464b      	mov	r3, r9
   14590:	4632      	mov	r2, r6
   14592:	4601      	mov	r1, r0
   14594:	f7fc fa1c 	bl	109d0 <mul_mont_n>
   14598:	f8cd b004 	str.w	fp, [sp, #4]
   1459c:	9500      	str	r5, [sp, #0]
   1459e:	464b      	mov	r3, r9
   145a0:	4632      	mov	r2, r6
   145a2:	4651      	mov	r1, sl
   145a4:	4650      	mov	r0, sl
   145a6:	f7fc fa13 	bl	109d0 <mul_mont_n>
   145aa:	b003      	add	sp, #12
   145ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145b0:	00028738 	.word	0x00028738
   145b4:	fffcfffd 	.word	0xfffcfffd
   145b8:	000297b8 	.word	0x000297b8

000145bc <frobenius_map_fp12>:
   145bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   145c0:	b082      	sub	sp, #8
   145c2:	4605      	mov	r5, r0
   145c4:	460e      	mov	r6, r1
   145c6:	4614      	mov	r4, r2
   145c8:	f7ff ff7a 	bl	144c0 <frobenius_map_fp6>
   145cc:	f505 7790 	add.w	r7, r5, #288	; 0x120
   145d0:	4622      	mov	r2, r4
   145d2:	f506 7190 	add.w	r1, r6, #288	; 0x120
   145d6:	4638      	mov	r0, r7
   145d8:	f7ff ff72 	bl	144c0 <frobenius_map_fp6>
   145dc:	3c01      	subs	r4, #1
   145de:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   145e2:	4b11      	ldr	r3, [pc, #68]	; (14628 <frobenius_map_fp12+0x6c>)
   145e4:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   145e8:	4e10      	ldr	r6, [pc, #64]	; (1462c <frobenius_map_fp12+0x70>)
   145ea:	f8df 8044 	ldr.w	r8, [pc, #68]	; 14630 <frobenius_map_fp12+0x74>
   145ee:	f8cd 8000 	str.w	r8, [sp]
   145f2:	4633      	mov	r3, r6
   145f4:	4622      	mov	r2, r4
   145f6:	4639      	mov	r1, r7
   145f8:	4638      	mov	r0, r7
   145fa:	f7ff feab 	bl	14354 <mul_mont_384x>
   145fe:	f505 70c0 	add.w	r0, r5, #384	; 0x180
   14602:	f8cd 8000 	str.w	r8, [sp]
   14606:	4633      	mov	r3, r6
   14608:	4622      	mov	r2, r4
   1460a:	4601      	mov	r1, r0
   1460c:	f7ff fea2 	bl	14354 <mul_mont_384x>
   14610:	f505 70f0 	add.w	r0, r5, #480	; 0x1e0
   14614:	f8cd 8000 	str.w	r8, [sp]
   14618:	4633      	mov	r3, r6
   1461a:	4622      	mov	r2, r4
   1461c:	4601      	mov	r1, r0
   1461e:	f7ff fe99 	bl	14354 <mul_mont_384x>
   14622:	b002      	add	sp, #8
   14624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14628:	00029848 	.word	0x00029848
   1462c:	00028738 	.word	0x00028738
   14630:	fffcfffd 	.word	0xfffcfffd

00014634 <blst_fp12_frobenius_map>:
   14634:	b508      	push	{r3, lr}
   14636:	f7ff ffc1 	bl	145bc <frobenius_map_fp12>
   1463a:	bd08      	pop	{r3, pc}

0001463c <map_fp2>:
   1463c:	b393      	cbz	r3, 146a4 <map_fp2+0x68>
   1463e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14642:	b082      	sub	sp, #8
   14644:	4604      	mov	r4, r0
   14646:	4689      	mov	r9, r1
   14648:	1e5e      	subs	r6, r3, #1
   1464a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1464e:	eb02 1243 	add.w	r2, r2, r3, lsl #5
   14652:	f1a2 0560 	sub.w	r5, r2, #96	; 0x60
   14656:	4f14      	ldr	r7, [pc, #80]	; (146a8 <map_fp2+0x6c>)
   14658:	f8df a050 	ldr.w	sl, [pc, #80]	; 146ac <map_fp2+0x70>
   1465c:	f04f 080c 	mov.w	r8, #12
   14660:	f8cd a000 	str.w	sl, [sp]
   14664:	463b      	mov	r3, r7
   14666:	464a      	mov	r2, r9
   14668:	4621      	mov	r1, r4
   1466a:	4620      	mov	r0, r4
   1466c:	f7ff fe72 	bl	14354 <mul_mont_384x>
   14670:	f8cd 8000 	str.w	r8, [sp]
   14674:	463b      	mov	r3, r7
   14676:	462a      	mov	r2, r5
   14678:	4621      	mov	r1, r4
   1467a:	4620      	mov	r0, r4
   1467c:	f7fc fb50 	bl	10d20 <add_mod_n>
   14680:	f104 0030 	add.w	r0, r4, #48	; 0x30
   14684:	f8cd 8000 	str.w	r8, [sp]
   14688:	463b      	mov	r3, r7
   1468a:	f105 0230 	add.w	r2, r5, #48	; 0x30
   1468e:	4601      	mov	r1, r0
   14690:	f7fc fb46 	bl	10d20 <add_mod_n>
   14694:	3e01      	subs	r6, #1
   14696:	3d60      	subs	r5, #96	; 0x60
   14698:	f1b6 3fff 	cmp.w	r6, #4294967295
   1469c:	d1e0      	bne.n	14660 <map_fp2+0x24>
   1469e:	b002      	add	sp, #8
   146a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   146a4:	4770      	bx	lr
   146a6:	bf00      	nop
   146a8:	00028738 	.word	0x00028738
   146ac:	fffcfffd 	.word	0xfffcfffd

000146b0 <mul_fp6>:
   146b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146b4:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
   146b8:	4683      	mov	fp, r0
   146ba:	460f      	mov	r7, r1
   146bc:	4616      	mov	r6, r2
   146be:	4cad      	ldr	r4, [pc, #692]	; (14974 <mul_fp6+0x2c4>)
   146c0:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 14978 <mul_fp6+0x2c8>
   146c4:	f8cd a000 	str.w	sl, [sp]
   146c8:	4623      	mov	r3, r4
   146ca:	a88e      	add	r0, sp, #568	; 0x238
   146cc:	f7ff fe42 	bl	14354 <mul_mont_384x>
   146d0:	f107 0960 	add.w	r9, r7, #96	; 0x60
   146d4:	f106 0860 	add.w	r8, r6, #96	; 0x60
   146d8:	f8cd a000 	str.w	sl, [sp]
   146dc:	4623      	mov	r3, r4
   146de:	4642      	mov	r2, r8
   146e0:	4649      	mov	r1, r9
   146e2:	a876      	add	r0, sp, #472	; 0x1d8
   146e4:	f7ff fe36 	bl	14354 <mul_mont_384x>
   146e8:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
   146ec:	f106 03c0 	add.w	r3, r6, #192	; 0xc0
   146f0:	461a      	mov	r2, r3
   146f2:	f8cd a000 	str.w	sl, [sp]
   146f6:	4623      	mov	r3, r4
   146f8:	9204      	str	r2, [sp, #16]
   146fa:	9103      	str	r1, [sp, #12]
   146fc:	a85e      	add	r0, sp, #376	; 0x178
   146fe:	f7ff fe29 	bl	14354 <mul_mont_384x>
   14702:	250c      	movs	r5, #12
   14704:	9500      	str	r5, [sp, #0]
   14706:	4623      	mov	r3, r4
   14708:	9a03      	ldr	r2, [sp, #12]
   1470a:	4649      	mov	r1, r9
   1470c:	a82e      	add	r0, sp, #184	; 0xb8
   1470e:	f7fc fb07 	bl	10d20 <add_mod_n>
   14712:	f107 0190 	add.w	r1, r7, #144	; 0x90
   14716:	9108      	str	r1, [sp, #32]
   14718:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
   1471c:	9009      	str	r0, [sp, #36]	; 0x24
   1471e:	9500      	str	r5, [sp, #0]
   14720:	4623      	mov	r3, r4
   14722:	4602      	mov	r2, r0
   14724:	a83a      	add	r0, sp, #232	; 0xe8
   14726:	f7fc fafb 	bl	10d20 <add_mod_n>
   1472a:	9500      	str	r5, [sp, #0]
   1472c:	4623      	mov	r3, r4
   1472e:	9a04      	ldr	r2, [sp, #16]
   14730:	4641      	mov	r1, r8
   14732:	a816      	add	r0, sp, #88	; 0x58
   14734:	f7fc faf4 	bl	10d20 <add_mod_n>
   14738:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1473c:	9106      	str	r1, [sp, #24]
   1473e:	f106 03f0 	add.w	r3, r6, #240	; 0xf0
   14742:	461a      	mov	r2, r3
   14744:	9307      	str	r3, [sp, #28]
   14746:	9500      	str	r5, [sp, #0]
   14748:	4623      	mov	r3, r4
   1474a:	a822      	add	r0, sp, #136	; 0x88
   1474c:	f7fc fae8 	bl	10d20 <add_mod_n>
   14750:	f8cd a000 	str.w	sl, [sp]
   14754:	4623      	mov	r3, r4
   14756:	aa16      	add	r2, sp, #88	; 0x58
   14758:	a92e      	add	r1, sp, #184	; 0xb8
   1475a:	a846      	add	r0, sp, #280	; 0x118
   1475c:	f7ff fdfa 	bl	14354 <mul_mont_384x>
   14760:	9500      	str	r5, [sp, #0]
   14762:	4623      	mov	r3, r4
   14764:	aa76      	add	r2, sp, #472	; 0x1d8
   14766:	a946      	add	r1, sp, #280	; 0x118
   14768:	4608      	mov	r0, r1
   1476a:	f7fb ff83 	bl	10674 <sub_mod_n>
   1476e:	9500      	str	r5, [sp, #0]
   14770:	4623      	mov	r3, r4
   14772:	aa82      	add	r2, sp, #520	; 0x208
   14774:	a952      	add	r1, sp, #328	; 0x148
   14776:	4608      	mov	r0, r1
   14778:	f7fb ff7c 	bl	10674 <sub_mod_n>
   1477c:	9500      	str	r5, [sp, #0]
   1477e:	4623      	mov	r3, r4
   14780:	aa5e      	add	r2, sp, #376	; 0x178
   14782:	a946      	add	r1, sp, #280	; 0x118
   14784:	4608      	mov	r0, r1
   14786:	f7fb ff75 	bl	10674 <sub_mod_n>
   1478a:	9500      	str	r5, [sp, #0]
   1478c:	4623      	mov	r3, r4
   1478e:	aa6a      	add	r2, sp, #424	; 0x1a8
   14790:	a952      	add	r1, sp, #328	; 0x148
   14792:	4608      	mov	r0, r1
   14794:	f7fb ff6e 	bl	10674 <sub_mod_n>
   14798:	9500      	str	r5, [sp, #0]
   1479a:	4623      	mov	r3, r4
   1479c:	aa52      	add	r2, sp, #328	; 0x148
   1479e:	a946      	add	r1, sp, #280	; 0x118
   147a0:	a80a      	add	r0, sp, #40	; 0x28
   147a2:	f7fc fabd 	bl	10d20 <add_mod_n>
   147a6:	9500      	str	r5, [sp, #0]
   147a8:	4623      	mov	r3, r4
   147aa:	aa52      	add	r2, sp, #328	; 0x148
   147ac:	a946      	add	r1, sp, #280	; 0x118
   147ae:	4608      	mov	r0, r1
   147b0:	f7fb ff60 	bl	10674 <sub_mod_n>
   147b4:	ab0a      	add	r3, sp, #40	; 0x28
   147b6:	aa51      	add	r2, sp, #324	; 0x144
   147b8:	a816      	add	r0, sp, #88	; 0x58
   147ba:	f853 1b04 	ldr.w	r1, [r3], #4
   147be:	f842 1f04 	str.w	r1, [r2, #4]!
   147c2:	4298      	cmp	r0, r3
   147c4:	d1f9      	bne.n	147ba <mul_fp6+0x10a>
   147c6:	4c6b      	ldr	r4, [pc, #428]	; (14974 <mul_fp6+0x2c4>)
   147c8:	250c      	movs	r5, #12
   147ca:	9500      	str	r5, [sp, #0]
   147cc:	4623      	mov	r3, r4
   147ce:	464a      	mov	r2, r9
   147d0:	4639      	mov	r1, r7
   147d2:	a82e      	add	r0, sp, #184	; 0xb8
   147d4:	f7fc faa4 	bl	10d20 <add_mod_n>
   147d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
   147dc:	4619      	mov	r1, r3
   147de:	9305      	str	r3, [sp, #20]
   147e0:	9500      	str	r5, [sp, #0]
   147e2:	4623      	mov	r3, r4
   147e4:	9a08      	ldr	r2, [sp, #32]
   147e6:	a83a      	add	r0, sp, #232	; 0xe8
   147e8:	f7fc fa9a 	bl	10d20 <add_mod_n>
   147ec:	9500      	str	r5, [sp, #0]
   147ee:	4623      	mov	r3, r4
   147f0:	4642      	mov	r2, r8
   147f2:	4631      	mov	r1, r6
   147f4:	a816      	add	r0, sp, #88	; 0x58
   147f6:	f7fc fa93 	bl	10d20 <add_mod_n>
   147fa:	f106 0a30 	add.w	sl, r6, #48	; 0x30
   147fe:	9500      	str	r5, [sp, #0]
   14800:	4623      	mov	r3, r4
   14802:	9a06      	ldr	r2, [sp, #24]
   14804:	4651      	mov	r1, sl
   14806:	a822      	add	r0, sp, #136	; 0x88
   14808:	f7fc fa8a 	bl	10d20 <add_mod_n>
   1480c:	f10b 0860 	add.w	r8, fp, #96	; 0x60
   14810:	4b59      	ldr	r3, [pc, #356]	; (14978 <mul_fp6+0x2c8>)
   14812:	9300      	str	r3, [sp, #0]
   14814:	4623      	mov	r3, r4
   14816:	aa16      	add	r2, sp, #88	; 0x58
   14818:	a92e      	add	r1, sp, #184	; 0xb8
   1481a:	4640      	mov	r0, r8
   1481c:	f7ff fd9a 	bl	14354 <mul_mont_384x>
   14820:	9500      	str	r5, [sp, #0]
   14822:	4623      	mov	r3, r4
   14824:	aa8e      	add	r2, sp, #568	; 0x238
   14826:	4641      	mov	r1, r8
   14828:	4640      	mov	r0, r8
   1482a:	f7fb ff23 	bl	10674 <sub_mod_n>
   1482e:	f10b 0990 	add.w	r9, fp, #144	; 0x90
   14832:	9500      	str	r5, [sp, #0]
   14834:	4623      	mov	r3, r4
   14836:	aa9a      	add	r2, sp, #616	; 0x268
   14838:	4649      	mov	r1, r9
   1483a:	4648      	mov	r0, r9
   1483c:	f7fb ff1a 	bl	10674 <sub_mod_n>
   14840:	9500      	str	r5, [sp, #0]
   14842:	4623      	mov	r3, r4
   14844:	aa76      	add	r2, sp, #472	; 0x1d8
   14846:	4641      	mov	r1, r8
   14848:	4640      	mov	r0, r8
   1484a:	f7fb ff13 	bl	10674 <sub_mod_n>
   1484e:	9500      	str	r5, [sp, #0]
   14850:	4623      	mov	r3, r4
   14852:	aa82      	add	r2, sp, #520	; 0x208
   14854:	4649      	mov	r1, r9
   14856:	4648      	mov	r0, r9
   14858:	f7fb ff0c 	bl	10674 <sub_mod_n>
   1485c:	9500      	str	r5, [sp, #0]
   1485e:	4623      	mov	r3, r4
   14860:	aa6a      	add	r2, sp, #424	; 0x1a8
   14862:	a95e      	add	r1, sp, #376	; 0x178
   14864:	a80a      	add	r0, sp, #40	; 0x28
   14866:	f7fc fa5b 	bl	10d20 <add_mod_n>
   1486a:	9500      	str	r5, [sp, #0]
   1486c:	4623      	mov	r3, r4
   1486e:	aa6a      	add	r2, sp, #424	; 0x1a8
   14870:	a95e      	add	r1, sp, #376	; 0x178
   14872:	a82e      	add	r0, sp, #184	; 0xb8
   14874:	f7fb fefe 	bl	10674 <sub_mod_n>
   14878:	ab0a      	add	r3, sp, #40	; 0x28
   1487a:	aa39      	add	r2, sp, #228	; 0xe4
   1487c:	a816      	add	r0, sp, #88	; 0x58
   1487e:	f853 1b04 	ldr.w	r1, [r3], #4
   14882:	f842 1f04 	str.w	r1, [r2, #4]!
   14886:	4298      	cmp	r0, r3
   14888:	d1f9      	bne.n	1487e <mul_fp6+0x1ce>
   1488a:	4c3a      	ldr	r4, [pc, #232]	; (14974 <mul_fp6+0x2c4>)
   1488c:	250c      	movs	r5, #12
   1488e:	9500      	str	r5, [sp, #0]
   14890:	4623      	mov	r3, r4
   14892:	aa2e      	add	r2, sp, #184	; 0xb8
   14894:	4641      	mov	r1, r8
   14896:	4640      	mov	r0, r8
   14898:	f7fc fa42 	bl	10d20 <add_mod_n>
   1489c:	9500      	str	r5, [sp, #0]
   1489e:	4623      	mov	r3, r4
   148a0:	aa3a      	add	r2, sp, #232	; 0xe8
   148a2:	4649      	mov	r1, r9
   148a4:	4648      	mov	r0, r9
   148a6:	f7fc fa3b 	bl	10d20 <add_mod_n>
   148aa:	9500      	str	r5, [sp, #0]
   148ac:	4623      	mov	r3, r4
   148ae:	9a03      	ldr	r2, [sp, #12]
   148b0:	4639      	mov	r1, r7
   148b2:	a82e      	add	r0, sp, #184	; 0xb8
   148b4:	f7fc fa34 	bl	10d20 <add_mod_n>
   148b8:	9500      	str	r5, [sp, #0]
   148ba:	4623      	mov	r3, r4
   148bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   148be:	9905      	ldr	r1, [sp, #20]
   148c0:	a83a      	add	r0, sp, #232	; 0xe8
   148c2:	f7fc fa2d 	bl	10d20 <add_mod_n>
   148c6:	9500      	str	r5, [sp, #0]
   148c8:	4623      	mov	r3, r4
   148ca:	9a04      	ldr	r2, [sp, #16]
   148cc:	4631      	mov	r1, r6
   148ce:	a816      	add	r0, sp, #88	; 0x58
   148d0:	f7fc fa26 	bl	10d20 <add_mod_n>
   148d4:	9500      	str	r5, [sp, #0]
   148d6:	4623      	mov	r3, r4
   148d8:	9a07      	ldr	r2, [sp, #28]
   148da:	4651      	mov	r1, sl
   148dc:	a822      	add	r0, sp, #136	; 0x88
   148de:	f7fc fa1f 	bl	10d20 <add_mod_n>
   148e2:	f10b 06c0 	add.w	r6, fp, #192	; 0xc0
   148e6:	4b24      	ldr	r3, [pc, #144]	; (14978 <mul_fp6+0x2c8>)
   148e8:	9300      	str	r3, [sp, #0]
   148ea:	4623      	mov	r3, r4
   148ec:	aa16      	add	r2, sp, #88	; 0x58
   148ee:	a92e      	add	r1, sp, #184	; 0xb8
   148f0:	4630      	mov	r0, r6
   148f2:	f7ff fd2f 	bl	14354 <mul_mont_384x>
   148f6:	9500      	str	r5, [sp, #0]
   148f8:	4623      	mov	r3, r4
   148fa:	aa8e      	add	r2, sp, #568	; 0x238
   148fc:	4631      	mov	r1, r6
   148fe:	4630      	mov	r0, r6
   14900:	f7fb feb8 	bl	10674 <sub_mod_n>
   14904:	f10b 07f0 	add.w	r7, fp, #240	; 0xf0
   14908:	9500      	str	r5, [sp, #0]
   1490a:	4623      	mov	r3, r4
   1490c:	aa9a      	add	r2, sp, #616	; 0x268
   1490e:	4639      	mov	r1, r7
   14910:	4638      	mov	r0, r7
   14912:	f7fb feaf 	bl	10674 <sub_mod_n>
   14916:	9500      	str	r5, [sp, #0]
   14918:	4623      	mov	r3, r4
   1491a:	aa5e      	add	r2, sp, #376	; 0x178
   1491c:	4631      	mov	r1, r6
   1491e:	4630      	mov	r0, r6
   14920:	f7fb fea8 	bl	10674 <sub_mod_n>
   14924:	9500      	str	r5, [sp, #0]
   14926:	4623      	mov	r3, r4
   14928:	aa6a      	add	r2, sp, #424	; 0x1a8
   1492a:	4639      	mov	r1, r7
   1492c:	4638      	mov	r0, r7
   1492e:	f7fb fea1 	bl	10674 <sub_mod_n>
   14932:	9500      	str	r5, [sp, #0]
   14934:	4623      	mov	r3, r4
   14936:	aa76      	add	r2, sp, #472	; 0x1d8
   14938:	4631      	mov	r1, r6
   1493a:	4630      	mov	r0, r6
   1493c:	f7fc f9f0 	bl	10d20 <add_mod_n>
   14940:	9500      	str	r5, [sp, #0]
   14942:	4623      	mov	r3, r4
   14944:	aa82      	add	r2, sp, #520	; 0x208
   14946:	4639      	mov	r1, r7
   14948:	4638      	mov	r0, r7
   1494a:	f7fc f9e9 	bl	10d20 <add_mod_n>
   1494e:	9500      	str	r5, [sp, #0]
   14950:	4623      	mov	r3, r4
   14952:	aa8e      	add	r2, sp, #568	; 0x238
   14954:	a946      	add	r1, sp, #280	; 0x118
   14956:	4658      	mov	r0, fp
   14958:	f7fc f9e2 	bl	10d20 <add_mod_n>
   1495c:	9500      	str	r5, [sp, #0]
   1495e:	4623      	mov	r3, r4
   14960:	aa9a      	add	r2, sp, #616	; 0x268
   14962:	a952      	add	r1, sp, #328	; 0x148
   14964:	f10b 0030 	add.w	r0, fp, #48	; 0x30
   14968:	f7fc f9da 	bl	10d20 <add_mod_n>
   1496c:	f50d 7d27 	add.w	sp, sp, #668	; 0x29c
   14970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14974:	00028738 	.word	0x00028738
   14978:	fffcfffd 	.word	0xfffcfffd

0001497c <mul_fp12>:
   1497c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14980:	f5ad 7d66 	sub.w	sp, sp, #920	; 0x398
   14984:	4604      	mov	r4, r0
   14986:	460d      	mov	r5, r1
   14988:	4616      	mov	r6, r2
   1498a:	a89e      	add	r0, sp, #632	; 0x278
   1498c:	f7ff fe90 	bl	146b0 <mul_fp6>
   14990:	f505 7890 	add.w	r8, r5, #288	; 0x120
   14994:	f506 7790 	add.w	r7, r6, #288	; 0x120
   14998:	463a      	mov	r2, r7
   1499a:	4641      	mov	r1, r8
   1499c:	a856      	add	r0, sp, #344	; 0x158
   1499e:	f7ff fe87 	bl	146b0 <mul_fp6>
   149a2:	4642      	mov	r2, r8
   149a4:	4629      	mov	r1, r5
   149a6:	a80e      	add	r0, sp, #56	; 0x38
   149a8:	f7fd fb48 	bl	1203c <add_fp6>
   149ac:	f504 7590 	add.w	r5, r4, #288	; 0x120
   149b0:	463a      	mov	r2, r7
   149b2:	4631      	mov	r1, r6
   149b4:	4628      	mov	r0, r5
   149b6:	f7fd fb41 	bl	1203c <add_fp6>
   149ba:	aa0e      	add	r2, sp, #56	; 0x38
   149bc:	4629      	mov	r1, r5
   149be:	4628      	mov	r0, r5
   149c0:	f7ff fe76 	bl	146b0 <mul_fp6>
   149c4:	aa9e      	add	r2, sp, #632	; 0x278
   149c6:	4629      	mov	r1, r5
   149c8:	4628      	mov	r0, r5
   149ca:	f7fd faed 	bl	11fa8 <sub_fp6>
   149ce:	aa56      	add	r2, sp, #344	; 0x158
   149d0:	4629      	mov	r1, r5
   149d2:	4628      	mov	r0, r5
   149d4:	f7fd fae8 	bl	11fa8 <sub_fp6>
   149d8:	4d26      	ldr	r5, [pc, #152]	; (14a74 <mul_fp12+0xf8>)
   149da:	260c      	movs	r6, #12
   149dc:	9600      	str	r6, [sp, #0]
   149de:	462b      	mov	r3, r5
   149e0:	aa92      	add	r2, sp, #584	; 0x248
   149e2:	a986      	add	r1, sp, #536	; 0x218
   149e4:	a802      	add	r0, sp, #8
   149e6:	f7fc f99b 	bl	10d20 <add_mod_n>
   149ea:	9600      	str	r6, [sp, #0]
   149ec:	462b      	mov	r3, r5
   149ee:	aa92      	add	r2, sp, #584	; 0x248
   149f0:	a986      	add	r1, sp, #536	; 0x218
   149f2:	4608      	mov	r0, r1
   149f4:	f7fb fe3e 	bl	10674 <sub_mod_n>
   149f8:	ab02      	add	r3, sp, #8
   149fa:	aa91      	add	r2, sp, #580	; 0x244
   149fc:	a80e      	add	r0, sp, #56	; 0x38
   149fe:	f853 1b04 	ldr.w	r1, [r3], #4
   14a02:	f842 1f04 	str.w	r1, [r2, #4]!
   14a06:	4283      	cmp	r3, r0
   14a08:	d1f9      	bne.n	149fe <mul_fp12+0x82>
   14a0a:	4d1a      	ldr	r5, [pc, #104]	; (14a74 <mul_fp12+0xf8>)
   14a0c:	260c      	movs	r6, #12
   14a0e:	9600      	str	r6, [sp, #0]
   14a10:	462b      	mov	r3, r5
   14a12:	aa86      	add	r2, sp, #536	; 0x218
   14a14:	a99e      	add	r1, sp, #632	; 0x278
   14a16:	4620      	mov	r0, r4
   14a18:	f7fc f982 	bl	10d20 <add_mod_n>
   14a1c:	9600      	str	r6, [sp, #0]
   14a1e:	462b      	mov	r3, r5
   14a20:	aa92      	add	r2, sp, #584	; 0x248
   14a22:	a9aa      	add	r1, sp, #680	; 0x2a8
   14a24:	f104 0030 	add.w	r0, r4, #48	; 0x30
   14a28:	f7fc f97a 	bl	10d20 <add_mod_n>
   14a2c:	9600      	str	r6, [sp, #0]
   14a2e:	462b      	mov	r3, r5
   14a30:	aa56      	add	r2, sp, #344	; 0x158
   14a32:	a9b6      	add	r1, sp, #728	; 0x2d8
   14a34:	f104 0060 	add.w	r0, r4, #96	; 0x60
   14a38:	f7fc f972 	bl	10d20 <add_mod_n>
   14a3c:	9600      	str	r6, [sp, #0]
   14a3e:	462b      	mov	r3, r5
   14a40:	aa62      	add	r2, sp, #392	; 0x188
   14a42:	a9c2      	add	r1, sp, #776	; 0x308
   14a44:	f104 0090 	add.w	r0, r4, #144	; 0x90
   14a48:	f7fc f96a 	bl	10d20 <add_mod_n>
   14a4c:	9600      	str	r6, [sp, #0]
   14a4e:	462b      	mov	r3, r5
   14a50:	aa6e      	add	r2, sp, #440	; 0x1b8
   14a52:	a9ce      	add	r1, sp, #824	; 0x338
   14a54:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   14a58:	f7fc f962 	bl	10d20 <add_mod_n>
   14a5c:	9600      	str	r6, [sp, #0]
   14a5e:	462b      	mov	r3, r5
   14a60:	aa7a      	add	r2, sp, #488	; 0x1e8
   14a62:	a9da      	add	r1, sp, #872	; 0x368
   14a64:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   14a68:	f7fc f95a 	bl	10d20 <add_mod_n>
   14a6c:	f50d 7d66 	add.w	sp, sp, #920	; 0x398
   14a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14a74:	00028738 	.word	0x00028738

00014a78 <blst_fp12_mul>:
   14a78:	b508      	push	{r3, lr}
   14a7a:	f7ff ff7f 	bl	1497c <mul_fp12>
   14a7e:	bd08      	pop	{r3, pc}

00014a80 <sqr_fp12>:
   14a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14a84:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
   14a88:	4606      	mov	r6, r0
   14a8a:	460d      	mov	r5, r1
   14a8c:	f501 7790 	add.w	r7, r1, #288	; 0x120
   14a90:	463a      	mov	r2, r7
   14a92:	a856      	add	r0, sp, #344	; 0x158
   14a94:	f7fd fad2 	bl	1203c <add_fp6>
   14a98:	f505 74f0 	add.w	r4, r5, #480	; 0x1e0
   14a9c:	f505 7804 	add.w	r8, r5, #528	; 0x210
   14aa0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 14c1c <sqr_fp12+0x19c>
   14aa4:	f04f 0a0c 	mov.w	sl, #12
   14aa8:	f8cd a000 	str.w	sl, [sp]
   14aac:	464b      	mov	r3, r9
   14aae:	4642      	mov	r2, r8
   14ab0:	4621      	mov	r1, r4
   14ab2:	a802      	add	r0, sp, #8
   14ab4:	f7fc f934 	bl	10d20 <add_mod_n>
   14ab8:	f8cd a000 	str.w	sl, [sp]
   14abc:	464b      	mov	r3, r9
   14abe:	4642      	mov	r2, r8
   14ac0:	4621      	mov	r1, r4
   14ac2:	a83e      	add	r0, sp, #248	; 0xf8
   14ac4:	f7fb fdd6 	bl	10674 <sub_mod_n>
   14ac8:	ab02      	add	r3, sp, #8
   14aca:	ac49      	add	r4, sp, #292	; 0x124
   14acc:	a80e      	add	r0, sp, #56	; 0x38
   14ace:	4622      	mov	r2, r4
   14ad0:	f853 1b04 	ldr.w	r1, [r3], #4
   14ad4:	f842 1f04 	str.w	r1, [r2, #4]!
   14ad8:	4283      	cmp	r3, r0
   14ada:	d1f9      	bne.n	14ad0 <sqr_fp12+0x50>
   14adc:	f8df 813c 	ldr.w	r8, [pc, #316]	; 14c1c <sqr_fp12+0x19c>
   14ae0:	f04f 090c 	mov.w	r9, #12
   14ae4:	f8cd 9000 	str.w	r9, [sp]
   14ae8:	4643      	mov	r3, r8
   14aea:	aa3e      	add	r2, sp, #248	; 0xf8
   14aec:	4629      	mov	r1, r5
   14aee:	a80e      	add	r0, sp, #56	; 0x38
   14af0:	f7fc f916 	bl	10d20 <add_mod_n>
   14af4:	f8cd 9000 	str.w	r9, [sp]
   14af8:	4643      	mov	r3, r8
   14afa:	aa4a      	add	r2, sp, #296	; 0x128
   14afc:	f105 0130 	add.w	r1, r5, #48	; 0x30
   14b00:	a81a      	add	r0, sp, #104	; 0x68
   14b02:	f7fc f90d 	bl	10d20 <add_mod_n>
   14b06:	f8cd 9000 	str.w	r9, [sp]
   14b0a:	4643      	mov	r3, r8
   14b0c:	f505 7290 	add.w	r2, r5, #288	; 0x120
   14b10:	f105 0160 	add.w	r1, r5, #96	; 0x60
   14b14:	a826      	add	r0, sp, #152	; 0x98
   14b16:	f7fc f903 	bl	10d20 <add_mod_n>
   14b1a:	f8cd 9000 	str.w	r9, [sp]
   14b1e:	4643      	mov	r3, r8
   14b20:	f505 72a8 	add.w	r2, r5, #336	; 0x150
   14b24:	f105 0190 	add.w	r1, r5, #144	; 0x90
   14b28:	a832      	add	r0, sp, #200	; 0xc8
   14b2a:	f7fc f8f9 	bl	10d20 <add_mod_n>
   14b2e:	f8cd 9000 	str.w	r9, [sp]
   14b32:	4643      	mov	r3, r8
   14b34:	f505 72c0 	add.w	r2, r5, #384	; 0x180
   14b38:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
   14b3c:	a83e      	add	r0, sp, #248	; 0xf8
   14b3e:	f7fc f8ef 	bl	10d20 <add_mod_n>
   14b42:	f8cd 9000 	str.w	r9, [sp]
   14b46:	4643      	mov	r3, r8
   14b48:	f505 72d8 	add.w	r2, r5, #432	; 0x1b0
   14b4c:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   14b50:	a84a      	add	r0, sp, #296	; 0x128
   14b52:	f7fc f8e5 	bl	10d20 <add_mod_n>
   14b56:	aa0e      	add	r2, sp, #56	; 0x38
   14b58:	a956      	add	r1, sp, #344	; 0x158
   14b5a:	4608      	mov	r0, r1
   14b5c:	f7ff fda8 	bl	146b0 <mul_fp6>
   14b60:	463a      	mov	r2, r7
   14b62:	4629      	mov	r1, r5
   14b64:	a80e      	add	r0, sp, #56	; 0x38
   14b66:	f7ff fda3 	bl	146b0 <mul_fp6>
   14b6a:	aa0e      	add	r2, sp, #56	; 0x38
   14b6c:	4611      	mov	r1, r2
   14b6e:	f506 7090 	add.w	r0, r6, #288	; 0x120
   14b72:	f7fd fa63 	bl	1203c <add_fp6>
   14b76:	aa0e      	add	r2, sp, #56	; 0x38
   14b78:	a956      	add	r1, sp, #344	; 0x158
   14b7a:	4630      	mov	r0, r6
   14b7c:	f7fd fa14 	bl	11fa8 <sub_fp6>
   14b80:	f8cd 9000 	str.w	r9, [sp]
   14b84:	4643      	mov	r3, r8
   14b86:	aa4a      	add	r2, sp, #296	; 0x128
   14b88:	a93e      	add	r1, sp, #248	; 0xf8
   14b8a:	a802      	add	r0, sp, #8
   14b8c:	f7fc f8c8 	bl	10d20 <add_mod_n>
   14b90:	f8cd 9000 	str.w	r9, [sp]
   14b94:	4643      	mov	r3, r8
   14b96:	aa4a      	add	r2, sp, #296	; 0x128
   14b98:	a93e      	add	r1, sp, #248	; 0xf8
   14b9a:	4608      	mov	r0, r1
   14b9c:	f7fb fd6a 	bl	10674 <sub_mod_n>
   14ba0:	ab02      	add	r3, sp, #8
   14ba2:	a90e      	add	r1, sp, #56	; 0x38
   14ba4:	f853 2b04 	ldr.w	r2, [r3], #4
   14ba8:	f844 2f04 	str.w	r2, [r4, #4]!
   14bac:	4299      	cmp	r1, r3
   14bae:	d1f9      	bne.n	14ba4 <sqr_fp12+0x124>
   14bb0:	4c1a      	ldr	r4, [pc, #104]	; (14c1c <sqr_fp12+0x19c>)
   14bb2:	250c      	movs	r5, #12
   14bb4:	9500      	str	r5, [sp, #0]
   14bb6:	4623      	mov	r3, r4
   14bb8:	aa3e      	add	r2, sp, #248	; 0xf8
   14bba:	4631      	mov	r1, r6
   14bbc:	4630      	mov	r0, r6
   14bbe:	f7fb fd59 	bl	10674 <sub_mod_n>
   14bc2:	f106 0030 	add.w	r0, r6, #48	; 0x30
   14bc6:	9500      	str	r5, [sp, #0]
   14bc8:	4623      	mov	r3, r4
   14bca:	aa4a      	add	r2, sp, #296	; 0x128
   14bcc:	4601      	mov	r1, r0
   14bce:	f7fb fd51 	bl	10674 <sub_mod_n>
   14bd2:	f106 0060 	add.w	r0, r6, #96	; 0x60
   14bd6:	9500      	str	r5, [sp, #0]
   14bd8:	4623      	mov	r3, r4
   14bda:	aa0e      	add	r2, sp, #56	; 0x38
   14bdc:	4601      	mov	r1, r0
   14bde:	f7fb fd49 	bl	10674 <sub_mod_n>
   14be2:	f106 0090 	add.w	r0, r6, #144	; 0x90
   14be6:	9500      	str	r5, [sp, #0]
   14be8:	4623      	mov	r3, r4
   14bea:	aa1a      	add	r2, sp, #104	; 0x68
   14bec:	4601      	mov	r1, r0
   14bee:	f7fb fd41 	bl	10674 <sub_mod_n>
   14bf2:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   14bf6:	9500      	str	r5, [sp, #0]
   14bf8:	4623      	mov	r3, r4
   14bfa:	aa26      	add	r2, sp, #152	; 0x98
   14bfc:	4601      	mov	r1, r0
   14bfe:	f7fb fd39 	bl	10674 <sub_mod_n>
   14c02:	f106 00f0 	add.w	r0, r6, #240	; 0xf0
   14c06:	9500      	str	r5, [sp, #0]
   14c08:	4623      	mov	r3, r4
   14c0a:	aa32      	add	r2, sp, #200	; 0xc8
   14c0c:	4601      	mov	r1, r0
   14c0e:	f7fb fd31 	bl	10674 <sub_mod_n>
   14c12:	f50d 7d1e 	add.w	sp, sp, #632	; 0x278
   14c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14c1a:	bf00      	nop
   14c1c:	00028738 	.word	0x00028738

00014c20 <blst_fp12_sqr>:
   14c20:	b508      	push	{r3, lr}
   14c22:	f7ff ff2d 	bl	14a80 <sqr_fp12>
   14c26:	bd08      	pop	{r3, pc}

00014c28 <mul_by_xy0_fp6>:
   14c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c2c:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
   14c30:	4604      	mov	r4, r0
   14c32:	460e      	mov	r6, r1
   14c34:	4615      	mov	r5, r2
   14c36:	f8df a184 	ldr.w	sl, [pc, #388]	; 14dbc <mul_by_xy0_fp6+0x194>
   14c3a:	f8df b184 	ldr.w	fp, [pc, #388]	; 14dc0 <mul_by_xy0_fp6+0x198>
   14c3e:	f8cd b000 	str.w	fp, [sp]
   14c42:	4653      	mov	r3, sl
   14c44:	a86e      	add	r0, sp, #440	; 0x1b8
   14c46:	f7ff fb85 	bl	14354 <mul_mont_384x>
   14c4a:	f106 0960 	add.w	r9, r6, #96	; 0x60
   14c4e:	f105 0760 	add.w	r7, r5, #96	; 0x60
   14c52:	f8cd b000 	str.w	fp, [sp]
   14c56:	4653      	mov	r3, sl
   14c58:	463a      	mov	r2, r7
   14c5a:	4649      	mov	r1, r9
   14c5c:	a856      	add	r0, sp, #344	; 0x158
   14c5e:	f7ff fb79 	bl	14354 <mul_mont_384x>
   14c62:	f106 08c0 	add.w	r8, r6, #192	; 0xc0
   14c66:	f8cd b000 	str.w	fp, [sp]
   14c6a:	4653      	mov	r3, sl
   14c6c:	463a      	mov	r2, r7
   14c6e:	4641      	mov	r1, r8
   14c70:	a83e      	add	r0, sp, #248	; 0xf8
   14c72:	f7ff fb6f 	bl	14354 <mul_mont_384x>
   14c76:	f04f 0b0c 	mov.w	fp, #12
   14c7a:	f8cd b000 	str.w	fp, [sp]
   14c7e:	4653      	mov	r3, sl
   14c80:	aa4a      	add	r2, sp, #296	; 0x128
   14c82:	a93e      	add	r1, sp, #248	; 0xf8
   14c84:	a802      	add	r0, sp, #8
   14c86:	f7fc f84b 	bl	10d20 <add_mod_n>
   14c8a:	f8cd b000 	str.w	fp, [sp]
   14c8e:	4653      	mov	r3, sl
   14c90:	aa4a      	add	r2, sp, #296	; 0x128
   14c92:	a93e      	add	r1, sp, #248	; 0xf8
   14c94:	4608      	mov	r0, r1
   14c96:	f7fb fced 	bl	10674 <sub_mod_n>
   14c9a:	ab02      	add	r3, sp, #8
   14c9c:	f50d 7c92 	add.w	ip, sp, #292	; 0x124
   14ca0:	a90e      	add	r1, sp, #56	; 0x38
   14ca2:	f853 2b04 	ldr.w	r2, [r3], #4
   14ca6:	f84c 2f04 	str.w	r2, [ip, #4]!
   14caa:	4299      	cmp	r1, r3
   14cac:	d1f9      	bne.n	14ca2 <mul_by_xy0_fp6+0x7a>
   14cae:	f8df a10c 	ldr.w	sl, [pc, #268]	; 14dbc <mul_by_xy0_fp6+0x194>
   14cb2:	f04f 0b0c 	mov.w	fp, #12
   14cb6:	f8cd b000 	str.w	fp, [sp]
   14cba:	4653      	mov	r3, sl
   14cbc:	464a      	mov	r2, r9
   14cbe:	4631      	mov	r1, r6
   14cc0:	a826      	add	r0, sp, #152	; 0x98
   14cc2:	f7fc f82d 	bl	10d20 <add_mod_n>
   14cc6:	f8cd b000 	str.w	fp, [sp]
   14cca:	4653      	mov	r3, sl
   14ccc:	f106 0290 	add.w	r2, r6, #144	; 0x90
   14cd0:	f106 0130 	add.w	r1, r6, #48	; 0x30
   14cd4:	a832      	add	r0, sp, #200	; 0xc8
   14cd6:	f7fc f823 	bl	10d20 <add_mod_n>
   14cda:	f8cd b000 	str.w	fp, [sp]
   14cde:	4653      	mov	r3, sl
   14ce0:	463a      	mov	r2, r7
   14ce2:	4629      	mov	r1, r5
   14ce4:	a80e      	add	r0, sp, #56	; 0x38
   14ce6:	f7fc f81b 	bl	10d20 <add_mod_n>
   14cea:	f8cd b000 	str.w	fp, [sp]
   14cee:	4653      	mov	r3, sl
   14cf0:	f105 0290 	add.w	r2, r5, #144	; 0x90
   14cf4:	f105 0130 	add.w	r1, r5, #48	; 0x30
   14cf8:	a81a      	add	r0, sp, #104	; 0x68
   14cfa:	f7fc f811 	bl	10d20 <add_mod_n>
   14cfe:	f104 0660 	add.w	r6, r4, #96	; 0x60
   14d02:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 14dc0 <mul_by_xy0_fp6+0x198>
   14d06:	f8cd 9000 	str.w	r9, [sp]
   14d0a:	4653      	mov	r3, sl
   14d0c:	aa0e      	add	r2, sp, #56	; 0x38
   14d0e:	a926      	add	r1, sp, #152	; 0x98
   14d10:	4630      	mov	r0, r6
   14d12:	f7ff fb1f 	bl	14354 <mul_mont_384x>
   14d16:	f8cd b000 	str.w	fp, [sp]
   14d1a:	4653      	mov	r3, sl
   14d1c:	aa6e      	add	r2, sp, #440	; 0x1b8
   14d1e:	4631      	mov	r1, r6
   14d20:	4630      	mov	r0, r6
   14d22:	f7fb fca7 	bl	10674 <sub_mod_n>
   14d26:	f104 0790 	add.w	r7, r4, #144	; 0x90
   14d2a:	f8cd b000 	str.w	fp, [sp]
   14d2e:	4653      	mov	r3, sl
   14d30:	aa7a      	add	r2, sp, #488	; 0x1e8
   14d32:	4639      	mov	r1, r7
   14d34:	4638      	mov	r0, r7
   14d36:	f7fb fc9d 	bl	10674 <sub_mod_n>
   14d3a:	f8cd b000 	str.w	fp, [sp]
   14d3e:	4653      	mov	r3, sl
   14d40:	aa56      	add	r2, sp, #344	; 0x158
   14d42:	4631      	mov	r1, r6
   14d44:	4630      	mov	r0, r6
   14d46:	f7fb fc95 	bl	10674 <sub_mod_n>
   14d4a:	f8cd b000 	str.w	fp, [sp]
   14d4e:	4653      	mov	r3, sl
   14d50:	aa62      	add	r2, sp, #392	; 0x188
   14d52:	4639      	mov	r1, r7
   14d54:	4638      	mov	r0, r7
   14d56:	f7fb fc8d 	bl	10674 <sub_mod_n>
   14d5a:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
   14d5e:	f8cd 9000 	str.w	r9, [sp]
   14d62:	4653      	mov	r3, sl
   14d64:	462a      	mov	r2, r5
   14d66:	4641      	mov	r1, r8
   14d68:	4630      	mov	r0, r6
   14d6a:	f7ff faf3 	bl	14354 <mul_mont_384x>
   14d6e:	f8cd b000 	str.w	fp, [sp]
   14d72:	4653      	mov	r3, sl
   14d74:	aa56      	add	r2, sp, #344	; 0x158
   14d76:	4631      	mov	r1, r6
   14d78:	4630      	mov	r0, r6
   14d7a:	f7fb ffd1 	bl	10d20 <add_mod_n>
   14d7e:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   14d82:	f8cd b000 	str.w	fp, [sp]
   14d86:	4653      	mov	r3, sl
   14d88:	aa62      	add	r2, sp, #392	; 0x188
   14d8a:	4601      	mov	r1, r0
   14d8c:	f7fb ffc8 	bl	10d20 <add_mod_n>
   14d90:	f8cd b000 	str.w	fp, [sp]
   14d94:	4653      	mov	r3, sl
   14d96:	aa6e      	add	r2, sp, #440	; 0x1b8
   14d98:	a93e      	add	r1, sp, #248	; 0xf8
   14d9a:	4620      	mov	r0, r4
   14d9c:	f7fb ffc0 	bl	10d20 <add_mod_n>
   14da0:	f8cd b000 	str.w	fp, [sp]
   14da4:	4653      	mov	r3, sl
   14da6:	aa7a      	add	r2, sp, #488	; 0x1e8
   14da8:	a94a      	add	r1, sp, #296	; 0x128
   14daa:	f104 0030 	add.w	r0, r4, #48	; 0x30
   14dae:	f7fb ffb7 	bl	10d20 <add_mod_n>
   14db2:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
   14db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14dba:	bf00      	nop
   14dbc:	00028738 	.word	0x00028738
   14dc0:	fffcfffd 	.word	0xfffcfffd

00014dc4 <mul_by_xy00z0_fp12>:
   14dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14dc8:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
   14dcc:	4604      	mov	r4, r0
   14dce:	460e      	mov	r6, r1
   14dd0:	4615      	mov	r5, r2
   14dd2:	a8b6      	add	r0, sp, #728	; 0x2d8
   14dd4:	f7ff ff28 	bl	14c28 <mul_by_xy0_fp6>
   14dd8:	f506 7890 	add.w	r8, r6, #288	; 0x120
   14ddc:	f105 07c0 	add.w	r7, r5, #192	; 0xc0
   14de0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 14f5c <mul_by_xy00z0_fp12+0x198>
   14de4:	f8df a178 	ldr.w	sl, [pc, #376]	; 14f60 <mul_by_xy00z0_fp12+0x19c>
   14de8:	f8cd a000 	str.w	sl, [sp]
   14dec:	464b      	mov	r3, r9
   14dee:	463a      	mov	r2, r7
   14df0:	f506 71f0 	add.w	r1, r6, #480	; 0x1e0
   14df4:	a80e      	add	r0, sp, #56	; 0x38
   14df6:	f7ff faad 	bl	14354 <mul_mont_384x>
   14dfa:	f8cd a000 	str.w	sl, [sp]
   14dfe:	464b      	mov	r3, r9
   14e00:	463a      	mov	r2, r7
   14e02:	f506 71c0 	add.w	r1, r6, #384	; 0x180
   14e06:	a89e      	add	r0, sp, #632	; 0x278
   14e08:	f7ff faa4 	bl	14354 <mul_mont_384x>
   14e0c:	f8cd a000 	str.w	sl, [sp]
   14e10:	464b      	mov	r3, r9
   14e12:	463a      	mov	r2, r7
   14e14:	4641      	mov	r1, r8
   14e16:	a886      	add	r0, sp, #536	; 0x218
   14e18:	f7ff fa9c 	bl	14354 <mul_mont_384x>
   14e1c:	f04f 0a0c 	mov.w	sl, #12
   14e20:	f8cd a000 	str.w	sl, [sp]
   14e24:	464b      	mov	r3, r9
   14e26:	aa1a      	add	r2, sp, #104	; 0x68
   14e28:	a90e      	add	r1, sp, #56	; 0x38
   14e2a:	a802      	add	r0, sp, #8
   14e2c:	f7fb ff78 	bl	10d20 <add_mod_n>
   14e30:	f8cd a000 	str.w	sl, [sp]
   14e34:	464b      	mov	r3, r9
   14e36:	aa1a      	add	r2, sp, #104	; 0x68
   14e38:	a90e      	add	r1, sp, #56	; 0x38
   14e3a:	a86e      	add	r0, sp, #440	; 0x1b8
   14e3c:	f7fb fc1a 	bl	10674 <sub_mod_n>
   14e40:	ab02      	add	r3, sp, #8
   14e42:	aa79      	add	r2, sp, #484	; 0x1e4
   14e44:	a80e      	add	r0, sp, #56	; 0x38
   14e46:	f853 1b04 	ldr.w	r1, [r3], #4
   14e4a:	f842 1f04 	str.w	r1, [r2, #4]!
   14e4e:	4283      	cmp	r3, r0
   14e50:	d1f9      	bne.n	14e46 <mul_by_xy00z0_fp12+0x82>
   14e52:	f1a5 0c04 	sub.w	ip, r5, #4
   14e56:	ab26      	add	r3, sp, #152	; 0x98
   14e58:	a93e      	add	r1, sp, #248	; 0xf8
   14e5a:	f85c 2f04 	ldr.w	r2, [ip, #4]!
   14e5e:	f843 2b04 	str.w	r2, [r3], #4
   14e62:	428b      	cmp	r3, r1
   14e64:	d1f9      	bne.n	14e5a <mul_by_xy00z0_fp12+0x96>
   14e66:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 14f5c <mul_by_xy00z0_fp12+0x198>
   14e6a:	f04f 0a0c 	mov.w	sl, #12
   14e6e:	f8cd a000 	str.w	sl, [sp]
   14e72:	464b      	mov	r3, r9
   14e74:	463a      	mov	r2, r7
   14e76:	f105 0160 	add.w	r1, r5, #96	; 0x60
   14e7a:	a83e      	add	r0, sp, #248	; 0xf8
   14e7c:	f7fb ff50 	bl	10d20 <add_mod_n>
   14e80:	f8cd a000 	str.w	sl, [sp]
   14e84:	464b      	mov	r3, r9
   14e86:	f105 02f0 	add.w	r2, r5, #240	; 0xf0
   14e8a:	f105 0190 	add.w	r1, r5, #144	; 0x90
   14e8e:	a84a      	add	r0, sp, #296	; 0x128
   14e90:	f7fb ff46 	bl	10d20 <add_mod_n>
   14e94:	f504 7590 	add.w	r5, r4, #288	; 0x120
   14e98:	4642      	mov	r2, r8
   14e9a:	4631      	mov	r1, r6
   14e9c:	4628      	mov	r0, r5
   14e9e:	f7fd f8cd 	bl	1203c <add_fp6>
   14ea2:	aa26      	add	r2, sp, #152	; 0x98
   14ea4:	4629      	mov	r1, r5
   14ea6:	4628      	mov	r0, r5
   14ea8:	f7ff febe 	bl	14c28 <mul_by_xy0_fp6>
   14eac:	aab6      	add	r2, sp, #728	; 0x2d8
   14eae:	4629      	mov	r1, r5
   14eb0:	4628      	mov	r0, r5
   14eb2:	f7fd f879 	bl	11fa8 <sub_fp6>
   14eb6:	aa6e      	add	r2, sp, #440	; 0x1b8
   14eb8:	4629      	mov	r1, r5
   14eba:	4628      	mov	r0, r5
   14ebc:	f7fd f874 	bl	11fa8 <sub_fp6>
   14ec0:	f8cd a000 	str.w	sl, [sp]
   14ec4:	464b      	mov	r3, r9
   14ec6:	aaaa      	add	r2, sp, #680	; 0x2a8
   14ec8:	a99e      	add	r1, sp, #632	; 0x278
   14eca:	a80e      	add	r0, sp, #56	; 0x38
   14ecc:	f7fb ff28 	bl	10d20 <add_mod_n>
   14ed0:	f8cd a000 	str.w	sl, [sp]
   14ed4:	464b      	mov	r3, r9
   14ed6:	aaaa      	add	r2, sp, #680	; 0x2a8
   14ed8:	a99e      	add	r1, sp, #632	; 0x278
   14eda:	4608      	mov	r0, r1
   14edc:	f7fb fbca 	bl	10674 <sub_mod_n>
   14ee0:	ab0e      	add	r3, sp, #56	; 0x38
   14ee2:	aaa9      	add	r2, sp, #676	; 0x2a4
   14ee4:	a81a      	add	r0, sp, #104	; 0x68
   14ee6:	f853 1b04 	ldr.w	r1, [r3], #4
   14eea:	f842 1f04 	str.w	r1, [r2, #4]!
   14eee:	4283      	cmp	r3, r0
   14ef0:	d1f9      	bne.n	14ee6 <mul_by_xy00z0_fp12+0x122>
   14ef2:	4d1a      	ldr	r5, [pc, #104]	; (14f5c <mul_by_xy00z0_fp12+0x198>)
   14ef4:	260c      	movs	r6, #12
   14ef6:	9600      	str	r6, [sp, #0]
   14ef8:	462b      	mov	r3, r5
   14efa:	aa9e      	add	r2, sp, #632	; 0x278
   14efc:	a9b6      	add	r1, sp, #728	; 0x2d8
   14efe:	4620      	mov	r0, r4
   14f00:	f7fb ff0e 	bl	10d20 <add_mod_n>
   14f04:	9600      	str	r6, [sp, #0]
   14f06:	462b      	mov	r3, r5
   14f08:	aaaa      	add	r2, sp, #680	; 0x2a8
   14f0a:	a9c2      	add	r1, sp, #776	; 0x308
   14f0c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   14f10:	f7fb ff06 	bl	10d20 <add_mod_n>
   14f14:	9600      	str	r6, [sp, #0]
   14f16:	462b      	mov	r3, r5
   14f18:	aa6e      	add	r2, sp, #440	; 0x1b8
   14f1a:	a9ce      	add	r1, sp, #824	; 0x338
   14f1c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   14f20:	f7fb fefe 	bl	10d20 <add_mod_n>
   14f24:	9600      	str	r6, [sp, #0]
   14f26:	462b      	mov	r3, r5
   14f28:	aa7a      	add	r2, sp, #488	; 0x1e8
   14f2a:	a9da      	add	r1, sp, #872	; 0x368
   14f2c:	f104 0090 	add.w	r0, r4, #144	; 0x90
   14f30:	f7fb fef6 	bl	10d20 <add_mod_n>
   14f34:	9600      	str	r6, [sp, #0]
   14f36:	462b      	mov	r3, r5
   14f38:	aa86      	add	r2, sp, #536	; 0x218
   14f3a:	a9e6      	add	r1, sp, #920	; 0x398
   14f3c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   14f40:	f7fb feee 	bl	10d20 <add_mod_n>
   14f44:	9600      	str	r6, [sp, #0]
   14f46:	462b      	mov	r3, r5
   14f48:	aa92      	add	r2, sp, #584	; 0x248
   14f4a:	a9f2      	add	r1, sp, #968	; 0x3c8
   14f4c:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   14f50:	f7fb fee6 	bl	10d20 <add_mod_n>
   14f54:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
   14f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14f5c:	00028738 	.word	0x00028738
   14f60:	fffcfffd 	.word	0xfffcfffd

00014f64 <blst_fp12_mul_by_xy00z0>:
   14f64:	b508      	push	{r3, lr}
   14f66:	f7ff ff2d 	bl	14dc4 <mul_by_xy00z0_fp12>
   14f6a:	bd08      	pop	{r3, pc}

00014f6c <post_add_n_dbl>:
   14f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14f70:	b0c8      	sub	sp, #288	; 0x120
   14f72:	4604      	mov	r4, r0
   14f74:	4617      	mov	r7, r2
   14f76:	4698      	mov	r8, r3
   14f78:	f501 7590 	add.w	r5, r1, #288	; 0x120
   14f7c:	4668      	mov	r0, sp
   14f7e:	f7fb fe81 	bl	10c84 <post_line_by_Px2>
   14f82:	466a      	mov	r2, sp
   14f84:	4621      	mov	r1, r4
   14f86:	4620      	mov	r0, r4
   14f88:	f7ff ff1c 	bl	14dc4 <mul_by_xy00z0_fp12>
   14f8c:	f108 36ff 	add.w	r6, r8, #4294967295
   14f90:	f1b8 0f00 	cmp.w	r8, #0
   14f94:	d013      	beq.n	14fbe <post_add_n_dbl+0x52>
   14f96:	4621      	mov	r1, r4
   14f98:	4620      	mov	r0, r4
   14f9a:	f7ff fd71 	bl	14a80 <sqr_fp12>
   14f9e:	4629      	mov	r1, r5
   14fa0:	463a      	mov	r2, r7
   14fa2:	f505 7590 	add.w	r5, r5, #288	; 0x120
   14fa6:	4668      	mov	r0, sp
   14fa8:	f7fb fe6c 	bl	10c84 <post_line_by_Px2>
   14fac:	466a      	mov	r2, sp
   14fae:	4621      	mov	r1, r4
   14fb0:	4620      	mov	r0, r4
   14fb2:	f7ff ff07 	bl	14dc4 <mul_by_xy00z0_fp12>
   14fb6:	3e01      	subs	r6, #1
   14fb8:	f1b6 3fff 	cmp.w	r6, #4294967295
   14fbc:	d1eb      	bne.n	14f96 <post_add_n_dbl+0x2a>
   14fbe:	b048      	add	sp, #288	; 0x120
   14fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00014fc4 <miller_loop_lines>:
   14fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14fc8:	b0e2      	sub	sp, #392	; 0x188
   14fca:	4605      	mov	r5, r0
   14fcc:	460e      	mov	r6, r1
   14fce:	4614      	mov	r4, r2
   14fd0:	4f32      	ldr	r7, [pc, #200]	; (1509c <miller_loop_lines+0xd8>)
   14fd2:	f04f 080c 	mov.w	r8, #12
   14fd6:	f8cd 8000 	str.w	r8, [sp]
   14fda:	463b      	mov	r3, r7
   14fdc:	4611      	mov	r1, r2
   14fde:	a84a      	add	r0, sp, #296	; 0x128
   14fe0:	f7fb fe9e 	bl	10d20 <add_mod_n>
   14fe4:	f8cd 8000 	str.w	r8, [sp]
   14fe8:	463b      	mov	r3, r7
   14fea:	2201      	movs	r2, #1
   14fec:	a94a      	add	r1, sp, #296	; 0x128
   14fee:	4608      	mov	r0, r1
   14ff0:	f7fc fd2a 	bl	11a48 <cneg_mod_n>
   14ff4:	f104 0130 	add.w	r1, r4, #48	; 0x30
   14ff8:	f8cd 8000 	str.w	r8, [sp]
   14ffc:	463b      	mov	r3, r7
   14ffe:	460a      	mov	r2, r1
   15000:	a856      	add	r0, sp, #344	; 0x158
   15002:	f7fb fe8d 	bl	10d20 <add_mod_n>
   15006:	aa4a      	add	r2, sp, #296	; 0x128
   15008:	4631      	mov	r1, r6
   1500a:	a802      	add	r0, sp, #8
   1500c:	f7fb fe3a 	bl	10c84 <post_line_by_Px2>
   15010:	462b      	mov	r3, r5
   15012:	f505 7110 	add.w	r1, r5, #576	; 0x240
   15016:	2200      	movs	r2, #0
   15018:	f843 2b04 	str.w	r2, [r3], #4
   1501c:	428b      	cmp	r3, r1
   1501e:	d1fb      	bne.n	15018 <miller_loop_lines+0x54>
   15020:	ab01      	add	r3, sp, #4
   15022:	1f2a      	subs	r2, r5, #4
   15024:	a831      	add	r0, sp, #196	; 0xc4
   15026:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1502a:	f842 1f04 	str.w	r1, [r2, #4]!
   1502e:	4283      	cmp	r3, r0
   15030:	d1f9      	bne.n	15026 <miller_loop_lines+0x62>
   15032:	ab31      	add	r3, sp, #196	; 0xc4
   15034:	f505 72be 	add.w	r2, r5, #380	; 0x17c
   15038:	a949      	add	r1, sp, #292	; 0x124
   1503a:	f853 4f04 	ldr.w	r4, [r3, #4]!
   1503e:	f842 4f04 	str.w	r4, [r2, #4]!
   15042:	428b      	cmp	r3, r1
   15044:	d1f9      	bne.n	1503a <miller_loop_lines+0x76>
   15046:	2302      	movs	r3, #2
   15048:	aa4a      	add	r2, sp, #296	; 0x128
   1504a:	f506 7190 	add.w	r1, r6, #288	; 0x120
   1504e:	4628      	mov	r0, r5
   15050:	f7ff ff8c 	bl	14f6c <post_add_n_dbl>
   15054:	2303      	movs	r3, #3
   15056:	aa4a      	add	r2, sp, #296	; 0x128
   15058:	f506 6190 	add.w	r1, r6, #1152	; 0x480
   1505c:	4628      	mov	r0, r5
   1505e:	f7ff ff85 	bl	14f6c <post_add_n_dbl>
   15062:	2309      	movs	r3, #9
   15064:	aa4a      	add	r2, sp, #296	; 0x128
   15066:	f506 6110 	add.w	r1, r6, #2304	; 0x900
   1506a:	4628      	mov	r0, r5
   1506c:	f7ff ff7e 	bl	14f6c <post_add_n_dbl>
   15070:	2320      	movs	r3, #32
   15072:	aa4a      	add	r2, sp, #296	; 0x128
   15074:	f506 51a2 	add.w	r1, r6, #5184	; 0x1440
   15078:	4628      	mov	r0, r5
   1507a:	f7ff ff77 	bl	14f6c <post_add_n_dbl>
   1507e:	2310      	movs	r3, #16
   15080:	aa4a      	add	r2, sp, #296	; 0x128
   15082:	f506 5165 	add.w	r1, r6, #14656	; 0x3940
   15086:	3120      	adds	r1, #32
   15088:	4628      	mov	r0, r5
   1508a:	f7ff ff6f 	bl	14f6c <post_add_n_dbl>
   1508e:	4628      	mov	r0, r5
   15090:	f7fc fe5a 	bl	11d48 <conjugate_fp12>
   15094:	b062      	add	sp, #392	; 0x188
   15096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1509a:	bf00      	nop
   1509c:	00028738 	.word	0x00028738

000150a0 <blst_miller_loop_lines>:
   150a0:	b508      	push	{r3, lr}
   150a2:	f7ff ff8f 	bl	14fc4 <miller_loop_lines>
   150a6:	bd08      	pop	{r3, pc}

000150a8 <sqr_n_mul_mont_383>:
   150a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   150ac:	b082      	sub	sp, #8
   150ae:	4605      	mov	r5, r0
   150b0:	461e      	mov	r6, r3
   150b2:	9f08      	ldr	r7, [sp, #32]
   150b4:	b182      	cbz	r2, 150d8 <sqr_n_mul_mont_383+0x30>
   150b6:	1e54      	subs	r4, r2, #1
   150b8:	f04f 080c 	mov.w	r8, #12
   150bc:	e000      	b.n	150c0 <sqr_n_mul_mont_383+0x18>
   150be:	4629      	mov	r1, r5
   150c0:	f8cd 8004 	str.w	r8, [sp, #4]
   150c4:	9700      	str	r7, [sp, #0]
   150c6:	4633      	mov	r3, r6
   150c8:	460a      	mov	r2, r1
   150ca:	4628      	mov	r0, r5
   150cc:	f7fc f909 	bl	112e2 <mul_mont_nonred_n>
   150d0:	3c01      	subs	r4, #1
   150d2:	f1b4 3fff 	cmp.w	r4, #4294967295
   150d6:	d1f2      	bne.n	150be <sqr_n_mul_mont_383+0x16>
   150d8:	230c      	movs	r3, #12
   150da:	9301      	str	r3, [sp, #4]
   150dc:	9700      	str	r7, [sp, #0]
   150de:	4633      	mov	r3, r6
   150e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   150e2:	4629      	mov	r1, r5
   150e4:	4628      	mov	r0, r5
   150e6:	f7fb fc73 	bl	109d0 <mul_mont_n>
   150ea:	b002      	add	sp, #8
   150ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000150f0 <flt_reciprocal_fp>:
   150f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150f4:	f5ad 7d45 	sub.w	sp, sp, #788	; 0x314
   150f8:	9003      	str	r0, [sp, #12]
   150fa:	1f0b      	subs	r3, r1, #4
   150fc:	aa0f      	add	r2, sp, #60	; 0x3c
   150fe:	f101 002c 	add.w	r0, r1, #44	; 0x2c
   15102:	f853 1f04 	ldr.w	r1, [r3, #4]!
   15106:	f842 1f04 	str.w	r1, [r2, #4]!
   1510a:	4283      	cmp	r3, r0
   1510c:	d1f9      	bne.n	15102 <flt_reciprocal_fp+0x12>
   1510e:	f8df b2e4 	ldr.w	fp, [pc, #740]	; 153f4 <flt_reciprocal_fp+0x304>
   15112:	270c      	movs	r7, #12
   15114:	9701      	str	r7, [sp, #4]
   15116:	4eb8      	ldr	r6, [pc, #736]	; (153f8 <flt_reciprocal_fp+0x308>)
   15118:	9600      	str	r6, [sp, #0]
   1511a:	465b      	mov	r3, fp
   1511c:	aa10      	add	r2, sp, #64	; 0x40
   1511e:	4611      	mov	r1, r2
   15120:	a804      	add	r0, sp, #16
   15122:	f7fb fc55 	bl	109d0 <mul_mont_n>
   15126:	ad70      	add	r5, sp, #448	; 0x1c0
   15128:	9701      	str	r7, [sp, #4]
   1512a:	9600      	str	r6, [sp, #0]
   1512c:	465b      	mov	r3, fp
   1512e:	aa10      	add	r2, sp, #64	; 0x40
   15130:	a904      	add	r1, sp, #16
   15132:	4628      	mov	r0, r5
   15134:	f7fb fc4c 	bl	109d0 <mul_mont_n>
   15138:	ac40      	add	r4, sp, #256	; 0x100
   1513a:	9701      	str	r7, [sp, #4]
   1513c:	9600      	str	r6, [sp, #0]
   1513e:	465b      	mov	r3, fp
   15140:	aa04      	add	r2, sp, #16
   15142:	4611      	mov	r1, r2
   15144:	4620      	mov	r0, r4
   15146:	f7fb fc43 	bl	109d0 <mul_mont_n>
   1514a:	9701      	str	r7, [sp, #4]
   1514c:	9600      	str	r6, [sp, #0]
   1514e:	465b      	mov	r3, fp
   15150:	aa04      	add	r2, sp, #16
   15152:	4629      	mov	r1, r5
   15154:	a81c      	add	r0, sp, #112	; 0x70
   15156:	f7fb fc3b 	bl	109d0 <mul_mont_n>
   1515a:	9701      	str	r7, [sp, #4]
   1515c:	9600      	str	r6, [sp, #0]
   1515e:	465b      	mov	r3, fp
   15160:	462a      	mov	r2, r5
   15162:	4621      	mov	r1, r4
   15164:	a858      	add	r0, sp, #352	; 0x160
   15166:	f7fb fc33 	bl	109d0 <mul_mont_n>
   1516a:	9701      	str	r7, [sp, #4]
   1516c:	9600      	str	r6, [sp, #0]
   1516e:	465b      	mov	r3, fp
   15170:	4622      	mov	r2, r4
   15172:	a91c      	add	r1, sp, #112	; 0x70
   15174:	a87c      	add	r0, sp, #496	; 0x1f0
   15176:	f7fb fc2b 	bl	109d0 <mul_mont_n>
   1517a:	9701      	str	r7, [sp, #4]
   1517c:	9600      	str	r6, [sp, #0]
   1517e:	465b      	mov	r3, fp
   15180:	4622      	mov	r2, r4
   15182:	a958      	add	r1, sp, #352	; 0x160
   15184:	a8a0      	add	r0, sp, #640	; 0x280
   15186:	f7fb fc23 	bl	109d0 <mul_mont_n>
   1518a:	f10d 08d0 	add.w	r8, sp, #208	; 0xd0
   1518e:	9701      	str	r7, [sp, #4]
   15190:	9600      	str	r6, [sp, #0]
   15192:	465b      	mov	r3, fp
   15194:	4622      	mov	r2, r4
   15196:	a97c      	add	r1, sp, #496	; 0x1f0
   15198:	4640      	mov	r0, r8
   1519a:	f7fb fc19 	bl	109d0 <mul_mont_n>
   1519e:	f50d 79c8 	add.w	r9, sp, #400	; 0x190
   151a2:	9701      	str	r7, [sp, #4]
   151a4:	9600      	str	r6, [sp, #0]
   151a6:	465b      	mov	r3, fp
   151a8:	4622      	mov	r2, r4
   151aa:	a9a0      	add	r1, sp, #640	; 0x280
   151ac:	4648      	mov	r0, r9
   151ae:	f7fb fc0f 	bl	109d0 <mul_mont_n>
   151b2:	9701      	str	r7, [sp, #4]
   151b4:	9600      	str	r6, [sp, #0]
   151b6:	465b      	mov	r3, fp
   151b8:	4622      	mov	r2, r4
   151ba:	4641      	mov	r1, r8
   151bc:	a8b8      	add	r0, sp, #736	; 0x2e0
   151be:	f7fb fc07 	bl	109d0 <mul_mont_n>
   151c2:	9701      	str	r7, [sp, #4]
   151c4:	9600      	str	r6, [sp, #0]
   151c6:	465b      	mov	r3, fp
   151c8:	4622      	mov	r2, r4
   151ca:	4649      	mov	r1, r9
   151cc:	a888      	add	r0, sp, #544	; 0x220
   151ce:	f7fb fbff 	bl	109d0 <mul_mont_n>
   151d2:	9701      	str	r7, [sp, #4]
   151d4:	9600      	str	r6, [sp, #0]
   151d6:	465b      	mov	r3, fp
   151d8:	4622      	mov	r2, r4
   151da:	a9b8      	add	r1, sp, #736	; 0x2e0
   151dc:	a828      	add	r0, sp, #160	; 0xa0
   151de:	f7fb fbf7 	bl	109d0 <mul_mont_n>
   151e2:	9701      	str	r7, [sp, #4]
   151e4:	9600      	str	r6, [sp, #0]
   151e6:	465b      	mov	r3, fp
   151e8:	4622      	mov	r2, r4
   151ea:	a988      	add	r1, sp, #544	; 0x220
   151ec:	a894      	add	r0, sp, #592	; 0x250
   151ee:	f7fb fbef 	bl	109d0 <mul_mont_n>
   151f2:	9701      	str	r7, [sp, #4]
   151f4:	9600      	str	r6, [sp, #0]
   151f6:	465b      	mov	r3, fp
   151f8:	4642      	mov	r2, r8
   151fa:	4641      	mov	r1, r8
   151fc:	a804      	add	r0, sp, #16
   151fe:	f7fb fbe7 	bl	109d0 <mul_mont_n>
   15202:	9701      	str	r7, [sp, #4]
   15204:	9600      	str	r6, [sp, #0]
   15206:	465b      	mov	r3, fp
   15208:	4622      	mov	r2, r4
   1520a:	a994      	add	r1, sp, #592	; 0x250
   1520c:	a8ac      	add	r0, sp, #688	; 0x2b0
   1520e:	f7fb fbdf 	bl	109d0 <mul_mont_n>
   15212:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
   15216:	9701      	str	r7, [sp, #4]
   15218:	9600      	str	r6, [sp, #0]
   1521a:	465b      	mov	r3, fp
   1521c:	462a      	mov	r2, r5
   1521e:	a904      	add	r1, sp, #16
   15220:	4650      	mov	r0, sl
   15222:	f7fb fbd5 	bl	109d0 <mul_mont_n>
   15226:	9701      	str	r7, [sp, #4]
   15228:	9600      	str	r6, [sp, #0]
   1522a:	465b      	mov	r3, fp
   1522c:	aa1c      	add	r2, sp, #112	; 0x70
   1522e:	a904      	add	r1, sp, #16
   15230:	4620      	mov	r0, r4
   15232:	f7fb fbcd 	bl	109d0 <mul_mont_n>
   15236:	abb8      	add	r3, sp, #736	; 0x2e0
   15238:	9301      	str	r3, [sp, #4]
   1523a:	9600      	str	r6, [sp, #0]
   1523c:	465b      	mov	r3, fp
   1523e:	463a      	mov	r2, r7
   15240:	a904      	add	r1, sp, #16
   15242:	4608      	mov	r0, r1
   15244:	f7ff ff30 	bl	150a8 <sqr_n_mul_mont_383>
   15248:	f8cd 9004 	str.w	r9, [sp, #4]
   1524c:	9600      	str	r6, [sp, #0]
   1524e:	465b      	mov	r3, fp
   15250:	2207      	movs	r2, #7
   15252:	a904      	add	r1, sp, #16
   15254:	4608      	mov	r0, r1
   15256:	f7ff ff27 	bl	150a8 <sqr_n_mul_mont_383>
   1525a:	ab1c      	add	r3, sp, #112	; 0x70
   1525c:	9301      	str	r3, [sp, #4]
   1525e:	9600      	str	r6, [sp, #0]
   15260:	465b      	mov	r3, fp
   15262:	2204      	movs	r2, #4
   15264:	a904      	add	r1, sp, #16
   15266:	4608      	mov	r0, r1
   15268:	f7ff ff1e 	bl	150a8 <sqr_n_mul_mont_383>
   1526c:	ab58      	add	r3, sp, #352	; 0x160
   1526e:	9301      	str	r3, [sp, #4]
   15270:	9600      	str	r6, [sp, #0]
   15272:	465b      	mov	r3, fp
   15274:	2206      	movs	r2, #6
   15276:	a904      	add	r1, sp, #16
   15278:	4608      	mov	r0, r1
   1527a:	f7ff ff15 	bl	150a8 <sqr_n_mul_mont_383>
   1527e:	ab94      	add	r3, sp, #592	; 0x250
   15280:	9301      	str	r3, [sp, #4]
   15282:	9600      	str	r6, [sp, #0]
   15284:	465b      	mov	r3, fp
   15286:	2207      	movs	r2, #7
   15288:	a904      	add	r1, sp, #16
   1528a:	4608      	mov	r0, r1
   1528c:	f7ff ff0c 	bl	150a8 <sqr_n_mul_mont_383>
   15290:	9401      	str	r4, [sp, #4]
   15292:	9600      	str	r6, [sp, #0]
   15294:	465b      	mov	r3, fp
   15296:	2205      	movs	r2, #5
   15298:	a904      	add	r1, sp, #16
   1529a:	4608      	mov	r0, r1
   1529c:	f7ff ff04 	bl	150a8 <sqr_n_mul_mont_383>
   152a0:	9501      	str	r5, [sp, #4]
   152a2:	9600      	str	r6, [sp, #0]
   152a4:	465b      	mov	r3, fp
   152a6:	2202      	movs	r2, #2
   152a8:	a904      	add	r1, sp, #16
   152aa:	4608      	mov	r0, r1
   152ac:	f7ff fefc 	bl	150a8 <sqr_n_mul_mont_383>
   152b0:	f8cd 8004 	str.w	r8, [sp, #4]
   152b4:	9600      	str	r6, [sp, #0]
   152b6:	465b      	mov	r3, fp
   152b8:	2206      	movs	r2, #6
   152ba:	a904      	add	r1, sp, #16
   152bc:	4608      	mov	r0, r1
   152be:	f7ff fef3 	bl	150a8 <sqr_n_mul_mont_383>
   152c2:	f8cd 8004 	str.w	r8, [sp, #4]
   152c6:	9600      	str	r6, [sp, #0]
   152c8:	465b      	mov	r3, fp
   152ca:	2206      	movs	r2, #6
   152cc:	a904      	add	r1, sp, #16
   152ce:	4608      	mov	r0, r1
   152d0:	f7ff feea 	bl	150a8 <sqr_n_mul_mont_383>
   152d4:	ab7c      	add	r3, sp, #496	; 0x1f0
   152d6:	9301      	str	r3, [sp, #4]
   152d8:	9600      	str	r6, [sp, #0]
   152da:	465b      	mov	r3, fp
   152dc:	2206      	movs	r2, #6
   152de:	a904      	add	r1, sp, #16
   152e0:	4608      	mov	r0, r1
   152e2:	f7ff fee1 	bl	150a8 <sqr_n_mul_mont_383>
   152e6:	9501      	str	r5, [sp, #4]
   152e8:	9600      	str	r6, [sp, #0]
   152ea:	465b      	mov	r3, fp
   152ec:	2203      	movs	r2, #3
   152ee:	a904      	add	r1, sp, #16
   152f0:	4608      	mov	r0, r1
   152f2:	f7ff fed9 	bl	150a8 <sqr_n_mul_mont_383>
   152f6:	f8cd 8004 	str.w	r8, [sp, #4]
   152fa:	9600      	str	r6, [sp, #0]
   152fc:	465b      	mov	r3, fp
   152fe:	2207      	movs	r2, #7
   15300:	a904      	add	r1, sp, #16
   15302:	4608      	mov	r0, r1
   15304:	f7ff fed0 	bl	150a8 <sqr_n_mul_mont_383>
   15308:	f8cd 8004 	str.w	r8, [sp, #4]
   1530c:	9600      	str	r6, [sp, #0]
   1530e:	465b      	mov	r3, fp
   15310:	2204      	movs	r2, #4
   15312:	a904      	add	r1, sp, #16
   15314:	4608      	mov	r0, r1
   15316:	f7ff fec7 	bl	150a8 <sqr_n_mul_mont_383>
   1531a:	f8cd 9004 	str.w	r9, [sp, #4]
   1531e:	9600      	str	r6, [sp, #0]
   15320:	465b      	mov	r3, fp
   15322:	2206      	movs	r2, #6
   15324:	a904      	add	r1, sp, #16
   15326:	4608      	mov	r0, r1
   15328:	f7ff febe 	bl	150a8 <sqr_n_mul_mont_383>
   1532c:	abac      	add	r3, sp, #688	; 0x2b0
   1532e:	9301      	str	r3, [sp, #4]
   15330:	9600      	str	r6, [sp, #0]
   15332:	465b      	mov	r3, fp
   15334:	2206      	movs	r2, #6
   15336:	a904      	add	r1, sp, #16
   15338:	4608      	mov	r0, r1
   1533a:	f7ff feb5 	bl	150a8 <sqr_n_mul_mont_383>
   1533e:	ab10      	add	r3, sp, #64	; 0x40
   15340:	9301      	str	r3, [sp, #4]
   15342:	9600      	str	r6, [sp, #0]
   15344:	465b      	mov	r3, fp
   15346:	2203      	movs	r2, #3
   15348:	a904      	add	r1, sp, #16
   1534a:	4608      	mov	r0, r1
   1534c:	f7ff feac 	bl	150a8 <sqr_n_mul_mont_383>
   15350:	f8cd 8004 	str.w	r8, [sp, #4]
   15354:	9600      	str	r6, [sp, #0]
   15356:	465b      	mov	r3, fp
   15358:	2208      	movs	r2, #8
   1535a:	a904      	add	r1, sp, #16
   1535c:	4608      	mov	r0, r1
   1535e:	f7ff fea3 	bl	150a8 <sqr_n_mul_mont_383>
   15362:	ab94      	add	r3, sp, #592	; 0x250
   15364:	9301      	str	r3, [sp, #4]
   15366:	9600      	str	r6, [sp, #0]
   15368:	465b      	mov	r3, fp
   1536a:	2207      	movs	r2, #7
   1536c:	a904      	add	r1, sp, #16
   1536e:	4608      	mov	r0, r1
   15370:	f7ff fe9a 	bl	150a8 <sqr_n_mul_mont_383>
   15374:	aba0      	add	r3, sp, #640	; 0x280
   15376:	9301      	str	r3, [sp, #4]
   15378:	9600      	str	r6, [sp, #0]
   1537a:	465b      	mov	r3, fp
   1537c:	2205      	movs	r2, #5
   1537e:	a904      	add	r1, sp, #16
   15380:	4608      	mov	r0, r1
   15382:	f7ff fe91 	bl	150a8 <sqr_n_mul_mont_383>
   15386:	f8cd 8004 	str.w	r8, [sp, #4]
   1538a:	9600      	str	r6, [sp, #0]
   1538c:	465b      	mov	r3, fp
   1538e:	2206      	movs	r2, #6
   15390:	a904      	add	r1, sp, #16
   15392:	4608      	mov	r0, r1
   15394:	f7ff fe88 	bl	150a8 <sqr_n_mul_mont_383>
   15398:	f8cd a004 	str.w	sl, [sp, #4]
   1539c:	9600      	str	r6, [sp, #0]
   1539e:	465b      	mov	r3, fp
   153a0:	2206      	movs	r2, #6
   153a2:	a904      	add	r1, sp, #16
   153a4:	4608      	mov	r0, r1
   153a6:	f7ff fe7f 	bl	150a8 <sqr_n_mul_mont_383>
   153aa:	ab7c      	add	r3, sp, #496	; 0x1f0
   153ac:	9301      	str	r3, [sp, #4]
   153ae:	9600      	str	r6, [sp, #0]
   153b0:	465b      	mov	r3, fp
   153b2:	2204      	movs	r2, #4
   153b4:	a904      	add	r1, sp, #16
   153b6:	4608      	mov	r0, r1
   153b8:	f7ff fe76 	bl	150a8 <sqr_n_mul_mont_383>
   153bc:	f8cd a004 	str.w	sl, [sp, #4]
   153c0:	9600      	str	r6, [sp, #0]
   153c2:	465b      	mov	r3, fp
   153c4:	2208      	movs	r2, #8
   153c6:	a904      	add	r1, sp, #16
   153c8:	4608      	mov	r0, r1
   153ca:	f7ff fe6d 	bl	150a8 <sqr_n_mul_mont_383>
   153ce:	f8cd 8004 	str.w	r8, [sp, #4]
   153d2:	9600      	str	r6, [sp, #0]
   153d4:	465b      	mov	r3, fp
   153d6:	2204      	movs	r2, #4
   153d8:	a904      	add	r1, sp, #16
   153da:	4608      	mov	r0, r1
   153dc:	f7ff fe64 	bl	150a8 <sqr_n_mul_mont_383>
   153e0:	ab94      	add	r3, sp, #592	; 0x250
   153e2:	9301      	str	r3, [sp, #4]
   153e4:	9600      	str	r6, [sp, #0]
   153e6:	465b      	mov	r3, fp
   153e8:	2207      	movs	r2, #7
   153ea:	a904      	add	r1, sp, #16
   153ec:	4608      	mov	r0, r1
   153ee:	f7ff fe5b 	bl	150a8 <sqr_n_mul_mont_383>
   153f2:	e003      	b.n	153fc <flt_reciprocal_fp+0x30c>
   153f4:	00028738 	.word	0x00028738
   153f8:	fffcfffd 	.word	0xfffcfffd
   153fc:	ab88      	add	r3, sp, #544	; 0x220
   153fe:	9301      	str	r3, [sp, #4]
   15400:	9600      	str	r6, [sp, #0]
   15402:	465b      	mov	r3, fp
   15404:	2209      	movs	r2, #9
   15406:	a904      	add	r1, sp, #16
   15408:	4608      	mov	r0, r1
   1540a:	f7ff fe4d 	bl	150a8 <sqr_n_mul_mont_383>
   1540e:	9501      	str	r5, [sp, #4]
   15410:	9600      	str	r6, [sp, #0]
   15412:	465b      	mov	r3, fp
   15414:	2202      	movs	r2, #2
   15416:	a904      	add	r1, sp, #16
   15418:	4608      	mov	r0, r1
   1541a:	f7ff fe45 	bl	150a8 <sqr_n_mul_mont_383>
   1541e:	ab58      	add	r3, sp, #352	; 0x160
   15420:	9301      	str	r3, [sp, #4]
   15422:	9600      	str	r6, [sp, #0]
   15424:	465b      	mov	r3, fp
   15426:	2205      	movs	r2, #5
   15428:	a904      	add	r1, sp, #16
   1542a:	4608      	mov	r0, r1
   1542c:	f7ff fe3c 	bl	150a8 <sqr_n_mul_mont_383>
   15430:	ab1c      	add	r3, sp, #112	; 0x70
   15432:	9301      	str	r3, [sp, #4]
   15434:	9600      	str	r6, [sp, #0]
   15436:	465b      	mov	r3, fp
   15438:	2207      	movs	r2, #7
   1543a:	a904      	add	r1, sp, #16
   1543c:	4608      	mov	r0, r1
   1543e:	f7ff fe33 	bl	150a8 <sqr_n_mul_mont_383>
   15442:	ab7c      	add	r3, sp, #496	; 0x1f0
   15444:	9301      	str	r3, [sp, #4]
   15446:	9600      	str	r6, [sp, #0]
   15448:	465b      	mov	r3, fp
   1544a:	2207      	movs	r2, #7
   1544c:	a904      	add	r1, sp, #16
   1544e:	4608      	mov	r0, r1
   15450:	f7ff fe2a 	bl	150a8 <sqr_n_mul_mont_383>
   15454:	ab94      	add	r3, sp, #592	; 0x250
   15456:	9301      	str	r3, [sp, #4]
   15458:	9600      	str	r6, [sp, #0]
   1545a:	465b      	mov	r3, fp
   1545c:	2206      	movs	r2, #6
   1545e:	a904      	add	r1, sp, #16
   15460:	4608      	mov	r0, r1
   15462:	f7ff fe21 	bl	150a8 <sqr_n_mul_mont_383>
   15466:	f8cd a004 	str.w	sl, [sp, #4]
   1546a:	9600      	str	r6, [sp, #0]
   1546c:	465b      	mov	r3, fp
   1546e:	2205      	movs	r2, #5
   15470:	a904      	add	r1, sp, #16
   15472:	4608      	mov	r0, r1
   15474:	f7ff fe18 	bl	150a8 <sqr_n_mul_mont_383>
   15478:	ab88      	add	r3, sp, #544	; 0x220
   1547a:	9301      	str	r3, [sp, #4]
   1547c:	9600      	str	r6, [sp, #0]
   1547e:	465b      	mov	r3, fp
   15480:	2205      	movs	r2, #5
   15482:	a904      	add	r1, sp, #16
   15484:	4608      	mov	r0, r1
   15486:	f7ff fe0f 	bl	150a8 <sqr_n_mul_mont_383>
   1548a:	ab88      	add	r3, sp, #544	; 0x220
   1548c:	9301      	str	r3, [sp, #4]
   1548e:	9600      	str	r6, [sp, #0]
   15490:	465b      	mov	r3, fp
   15492:	2205      	movs	r2, #5
   15494:	a904      	add	r1, sp, #16
   15496:	4608      	mov	r0, r1
   15498:	f7ff fe06 	bl	150a8 <sqr_n_mul_mont_383>
   1549c:	f8cd 8004 	str.w	r8, [sp, #4]
   154a0:	9600      	str	r6, [sp, #0]
   154a2:	465b      	mov	r3, fp
   154a4:	2208      	movs	r2, #8
   154a6:	a904      	add	r1, sp, #16
   154a8:	4608      	mov	r0, r1
   154aa:	f7ff fdfd 	bl	150a8 <sqr_n_mul_mont_383>
   154ae:	ab28      	add	r3, sp, #160	; 0xa0
   154b0:	9301      	str	r3, [sp, #4]
   154b2:	9600      	str	r6, [sp, #0]
   154b4:	465b      	mov	r3, fp
   154b6:	2207      	movs	r2, #7
   154b8:	a904      	add	r1, sp, #16
   154ba:	4608      	mov	r0, r1
   154bc:	f7ff fdf4 	bl	150a8 <sqr_n_mul_mont_383>
   154c0:	f8cd 9004 	str.w	r9, [sp, #4]
   154c4:	9600      	str	r6, [sp, #0]
   154c6:	465b      	mov	r3, fp
   154c8:	2209      	movs	r2, #9
   154ca:	a904      	add	r1, sp, #16
   154cc:	4608      	mov	r0, r1
   154ce:	f7ff fdeb 	bl	150a8 <sqr_n_mul_mont_383>
   154d2:	f8cd 8004 	str.w	r8, [sp, #4]
   154d6:	9600      	str	r6, [sp, #0]
   154d8:	465b      	mov	r3, fp
   154da:	2205      	movs	r2, #5
   154dc:	a904      	add	r1, sp, #16
   154de:	4608      	mov	r0, r1
   154e0:	f7ff fde2 	bl	150a8 <sqr_n_mul_mont_383>
   154e4:	9501      	str	r5, [sp, #4]
   154e6:	9600      	str	r6, [sp, #0]
   154e8:	465b      	mov	r3, fp
   154ea:	2203      	movs	r2, #3
   154ec:	a904      	add	r1, sp, #16
   154ee:	4608      	mov	r0, r1
   154f0:	f7ff fdda 	bl	150a8 <sqr_n_mul_mont_383>
   154f4:	f8cd 9004 	str.w	r9, [sp, #4]
   154f8:	9600      	str	r6, [sp, #0]
   154fa:	465b      	mov	r3, fp
   154fc:	2208      	movs	r2, #8
   154fe:	a904      	add	r1, sp, #16
   15500:	4608      	mov	r0, r1
   15502:	f7ff fdd1 	bl	150a8 <sqr_n_mul_mont_383>
   15506:	9501      	str	r5, [sp, #4]
   15508:	9600      	str	r6, [sp, #0]
   1550a:	465b      	mov	r3, fp
   1550c:	2203      	movs	r2, #3
   1550e:	a904      	add	r1, sp, #16
   15510:	4608      	mov	r0, r1
   15512:	f7ff fdc9 	bl	150a8 <sqr_n_mul_mont_383>
   15516:	ab7c      	add	r3, sp, #496	; 0x1f0
   15518:	9301      	str	r3, [sp, #4]
   1551a:	9600      	str	r6, [sp, #0]
   1551c:	465b      	mov	r3, fp
   1551e:	2207      	movs	r2, #7
   15520:	a904      	add	r1, sp, #16
   15522:	4608      	mov	r0, r1
   15524:	f7ff fdc0 	bl	150a8 <sqr_n_mul_mont_383>
   15528:	f8cd 9004 	str.w	r9, [sp, #4]
   1552c:	9600      	str	r6, [sp, #0]
   1552e:	465b      	mov	r3, fp
   15530:	2209      	movs	r2, #9
   15532:	a904      	add	r1, sp, #16
   15534:	4608      	mov	r0, r1
   15536:	f7ff fdb7 	bl	150a8 <sqr_n_mul_mont_383>
   1553a:	ab28      	add	r3, sp, #160	; 0xa0
   1553c:	9301      	str	r3, [sp, #4]
   1553e:	9600      	str	r6, [sp, #0]
   15540:	465b      	mov	r3, fp
   15542:	2206      	movs	r2, #6
   15544:	a904      	add	r1, sp, #16
   15546:	4608      	mov	r0, r1
   15548:	f7ff fdae 	bl	150a8 <sqr_n_mul_mont_383>
   1554c:	9401      	str	r4, [sp, #4]
   1554e:	9600      	str	r6, [sp, #0]
   15550:	465b      	mov	r3, fp
   15552:	2206      	movs	r2, #6
   15554:	a904      	add	r1, sp, #16
   15556:	4608      	mov	r0, r1
   15558:	f7ff fda6 	bl	150a8 <sqr_n_mul_mont_383>
   1555c:	9401      	str	r4, [sp, #4]
   1555e:	9600      	str	r6, [sp, #0]
   15560:	465b      	mov	r3, fp
   15562:	2205      	movs	r2, #5
   15564:	a904      	add	r1, sp, #16
   15566:	4608      	mov	r0, r1
   15568:	f7ff fd9e 	bl	150a8 <sqr_n_mul_mont_383>
   1556c:	9401      	str	r4, [sp, #4]
   1556e:	9600      	str	r6, [sp, #0]
   15570:	465b      	mov	r3, fp
   15572:	2205      	movs	r2, #5
   15574:	a904      	add	r1, sp, #16
   15576:	4608      	mov	r0, r1
   15578:	f7ff fd96 	bl	150a8 <sqr_n_mul_mont_383>
   1557c:	f8cd 8004 	str.w	r8, [sp, #4]
   15580:	9600      	str	r6, [sp, #0]
   15582:	465b      	mov	r3, fp
   15584:	2204      	movs	r2, #4
   15586:	a904      	add	r1, sp, #16
   15588:	4608      	mov	r0, r1
   1558a:	f7ff fd8d 	bl	150a8 <sqr_n_mul_mont_383>
   1558e:	9501      	str	r5, [sp, #4]
   15590:	9600      	str	r6, [sp, #0]
   15592:	465b      	mov	r3, fp
   15594:	2203      	movs	r2, #3
   15596:	a904      	add	r1, sp, #16
   15598:	4608      	mov	r0, r1
   1559a:	f7ff fd85 	bl	150a8 <sqr_n_mul_mont_383>
   1559e:	ab28      	add	r3, sp, #160	; 0xa0
   155a0:	9301      	str	r3, [sp, #4]
   155a2:	9600      	str	r6, [sp, #0]
   155a4:	465b      	mov	r3, fp
   155a6:	2208      	movs	r2, #8
   155a8:	a904      	add	r1, sp, #16
   155aa:	4608      	mov	r0, r1
   155ac:	f7ff fd7c 	bl	150a8 <sqr_n_mul_mont_383>
   155b0:	9401      	str	r4, [sp, #4]
   155b2:	9600      	str	r6, [sp, #0]
   155b4:	465b      	mov	r3, fp
   155b6:	2207      	movs	r2, #7
   155b8:	a904      	add	r1, sp, #16
   155ba:	4608      	mov	r0, r1
   155bc:	f7ff fd74 	bl	150a8 <sqr_n_mul_mont_383>
   155c0:	9401      	str	r4, [sp, #4]
   155c2:	9600      	str	r6, [sp, #0]
   155c4:	465b      	mov	r3, fp
   155c6:	2205      	movs	r2, #5
   155c8:	a904      	add	r1, sp, #16
   155ca:	4608      	mov	r0, r1
   155cc:	f7ff fd6c 	bl	150a8 <sqr_n_mul_mont_383>
   155d0:	9401      	str	r4, [sp, #4]
   155d2:	9600      	str	r6, [sp, #0]
   155d4:	465b      	mov	r3, fp
   155d6:	2205      	movs	r2, #5
   155d8:	a904      	add	r1, sp, #16
   155da:	4608      	mov	r0, r1
   155dc:	f7ff fd64 	bl	150a8 <sqr_n_mul_mont_383>
   155e0:	f8cd 9004 	str.w	r9, [sp, #4]
   155e4:	9600      	str	r6, [sp, #0]
   155e6:	465b      	mov	r3, fp
   155e8:	2204      	movs	r2, #4
   155ea:	a904      	add	r1, sp, #16
   155ec:	4608      	mov	r0, r1
   155ee:	f7ff fd5b 	bl	150a8 <sqr_n_mul_mont_383>
   155f2:	ab58      	add	r3, sp, #352	; 0x160
   155f4:	9301      	str	r3, [sp, #4]
   155f6:	9600      	str	r6, [sp, #0]
   155f8:	465b      	mov	r3, fp
   155fa:	2204      	movs	r2, #4
   155fc:	a904      	add	r1, sp, #16
   155fe:	4608      	mov	r0, r1
   15600:	f7ff fd52 	bl	150a8 <sqr_n_mul_mont_383>
   15604:	9401      	str	r4, [sp, #4]
   15606:	9600      	str	r6, [sp, #0]
   15608:	465b      	mov	r3, fp
   1560a:	2207      	movs	r2, #7
   1560c:	a904      	add	r1, sp, #16
   1560e:	4608      	mov	r0, r1
   15610:	f7ff fd4a 	bl	150a8 <sqr_n_mul_mont_383>
   15614:	f8cd a004 	str.w	sl, [sp, #4]
   15618:	9600      	str	r6, [sp, #0]
   1561a:	465b      	mov	r3, fp
   1561c:	2205      	movs	r2, #5
   1561e:	a904      	add	r1, sp, #16
   15620:	4608      	mov	r0, r1
   15622:	f7ff fd41 	bl	150a8 <sqr_n_mul_mont_383>
   15626:	ae40      	add	r6, sp, #256	; 0x100
   15628:	9601      	str	r6, [sp, #4]
   1562a:	4d2c      	ldr	r5, [pc, #176]	; (156dc <flt_reciprocal_fp+0x5ec>)
   1562c:	9500      	str	r5, [sp, #0]
   1562e:	465b      	mov	r3, fp
   15630:	2205      	movs	r2, #5
   15632:	a904      	add	r1, sp, #16
   15634:	4608      	mov	r0, r1
   15636:	f7ff fd37 	bl	150a8 <sqr_n_mul_mont_383>
   1563a:	9601      	str	r6, [sp, #4]
   1563c:	9500      	str	r5, [sp, #0]
   1563e:	465b      	mov	r3, fp
   15640:	2205      	movs	r2, #5
   15642:	a904      	add	r1, sp, #16
   15644:	4608      	mov	r0, r1
   15646:	f7ff fd2f 	bl	150a8 <sqr_n_mul_mont_383>
   1564a:	9601      	str	r6, [sp, #4]
   1564c:	9500      	str	r5, [sp, #0]
   1564e:	465b      	mov	r3, fp
   15650:	2205      	movs	r2, #5
   15652:	a904      	add	r1, sp, #16
   15654:	4608      	mov	r0, r1
   15656:	f7ff fd27 	bl	150a8 <sqr_n_mul_mont_383>
   1565a:	9601      	str	r6, [sp, #4]
   1565c:	9500      	str	r5, [sp, #0]
   1565e:	465b      	mov	r3, fp
   15660:	2205      	movs	r2, #5
   15662:	a904      	add	r1, sp, #16
   15664:	4608      	mov	r0, r1
   15666:	f7ff fd1f 	bl	150a8 <sqr_n_mul_mont_383>
   1566a:	9601      	str	r6, [sp, #4]
   1566c:	9500      	str	r5, [sp, #0]
   1566e:	465b      	mov	r3, fp
   15670:	2205      	movs	r2, #5
   15672:	a904      	add	r1, sp, #16
   15674:	4608      	mov	r0, r1
   15676:	f7ff fd17 	bl	150a8 <sqr_n_mul_mont_383>
   1567a:	9601      	str	r6, [sp, #4]
   1567c:	9500      	str	r5, [sp, #0]
   1567e:	465b      	mov	r3, fp
   15680:	2205      	movs	r2, #5
   15682:	a904      	add	r1, sp, #16
   15684:	4608      	mov	r0, r1
   15686:	f7ff fd0f 	bl	150a8 <sqr_n_mul_mont_383>
   1568a:	f8cd 8004 	str.w	r8, [sp, #4]
   1568e:	9500      	str	r5, [sp, #0]
   15690:	465b      	mov	r3, fp
   15692:	2204      	movs	r2, #4
   15694:	a904      	add	r1, sp, #16
   15696:	4608      	mov	r0, r1
   15698:	f7ff fd06 	bl	150a8 <sqr_n_mul_mont_383>
   1569c:	ab28      	add	r3, sp, #160	; 0xa0
   1569e:	9301      	str	r3, [sp, #4]
   156a0:	9500      	str	r5, [sp, #0]
   156a2:	465b      	mov	r3, fp
   156a4:	2206      	movs	r2, #6
   156a6:	a904      	add	r1, sp, #16
   156a8:	4608      	mov	r0, r1
   156aa:	f7ff fcfd 	bl	150a8 <sqr_n_mul_mont_383>
   156ae:	ab1c      	add	r3, sp, #112	; 0x70
   156b0:	9301      	str	r3, [sp, #4]
   156b2:	9500      	str	r5, [sp, #0]
   156b4:	465b      	mov	r3, fp
   156b6:	2204      	movs	r2, #4
   156b8:	a904      	add	r1, sp, #16
   156ba:	4608      	mov	r0, r1
   156bc:	f7ff fcf4 	bl	150a8 <sqr_n_mul_mont_383>
   156c0:	ab10      	add	r3, sp, #64	; 0x40
   156c2:	9301      	str	r3, [sp, #4]
   156c4:	9500      	str	r5, [sp, #0]
   156c6:	465b      	mov	r3, fp
   156c8:	2203      	movs	r2, #3
   156ca:	a904      	add	r1, sp, #16
   156cc:	9803      	ldr	r0, [sp, #12]
   156ce:	f7ff fceb 	bl	150a8 <sqr_n_mul_mont_383>
   156d2:	f50d 7d45 	add.w	sp, sp, #788	; 0x314
   156d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156da:	bf00      	nop
   156dc:	fffcfffd 	.word	0xfffcfffd

000156e0 <reciprocal_fp>:
   156e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   156e4:	b09b      	sub	sp, #108	; 0x6c
   156e6:	4606      	mov	r6, r0
   156e8:	460f      	mov	r7, r1
   156ea:	f8df 9094 	ldr.w	r9, [pc, #148]	; 15780 <reciprocal_fp+0xa0>
   156ee:	4d25      	ldr	r5, [pc, #148]	; (15784 <reciprocal_fp+0xa4>)
   156f0:	240c      	movs	r4, #12
   156f2:	9400      	str	r4, [sp, #0]
   156f4:	f509 739c 	add.w	r3, r9, #312	; 0x138
   156f8:	462a      	mov	r2, r5
   156fa:	a802      	add	r0, sp, #8
   156fc:	f7fe f88c 	bl	13818 <ct_inverse_mod_n>
   15700:	f8df 8084 	ldr.w	r8, [pc, #132]	; 15788 <reciprocal_fp+0xa8>
   15704:	9400      	str	r4, [sp, #0]
   15706:	4643      	mov	r3, r8
   15708:	462a      	mov	r2, r5
   1570a:	a902      	add	r1, sp, #8
   1570c:	4608      	mov	r0, r1
   1570e:	f7fb fd10 	bl	11132 <redc_mont_n>
   15712:	9401      	str	r4, [sp, #4]
   15714:	f8cd 8000 	str.w	r8, [sp]
   15718:	462b      	mov	r3, r5
   1571a:	f509 72b4 	add.w	r2, r9, #360	; 0x168
   1571e:	a902      	add	r1, sp, #8
   15720:	4608      	mov	r0, r1
   15722:	f7fb f955 	bl	109d0 <mul_mont_n>
   15726:	9401      	str	r4, [sp, #4]
   15728:	f8cd 8000 	str.w	r8, [sp]
   1572c:	462b      	mov	r3, r5
   1572e:	463a      	mov	r2, r7
   15730:	a902      	add	r1, sp, #8
   15732:	a80e      	add	r0, sp, #56	; 0x38
   15734:	f7fb f94c 	bl	109d0 <mul_mont_n>
   15738:	ac0d      	add	r4, sp, #52	; 0x34
   1573a:	f105 0e90 	add.w	lr, r5, #144	; 0x90
   1573e:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
   15742:	2200      	movs	r2, #0
   15744:	f85e 3b04 	ldr.w	r3, [lr], #4
   15748:	f854 5f04 	ldr.w	r5, [r4, #4]!
   1574c:	ea83 0c05 	eor.w	ip, r3, r5
   15750:	ea42 020c 	orr.w	r2, r2, ip
   15754:	458e      	cmp	lr, r1
   15756:	d1f5      	bne.n	15744 <reciprocal_fp+0x64>
   15758:	1e53      	subs	r3, r2, #1
   1575a:	4393      	bics	r3, r2
   1575c:	d50b      	bpl.n	15776 <reciprocal_fp+0x96>
   1575e:	aa02      	add	r2, sp, #8
   15760:	1f33      	subs	r3, r6, #4
   15762:	362c      	adds	r6, #44	; 0x2c
   15764:	f852 1b04 	ldr.w	r1, [r2], #4
   15768:	f843 1f04 	str.w	r1, [r3, #4]!
   1576c:	42b3      	cmp	r3, r6
   1576e:	d1f9      	bne.n	15764 <reciprocal_fp+0x84>
   15770:	b01b      	add	sp, #108	; 0x6c
   15772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15776:	4639      	mov	r1, r7
   15778:	4630      	mov	r0, r6
   1577a:	f7ff fcb9 	bl	150f0 <flt_reciprocal_fp>
   1577e:	e7f7      	b.n	15770 <reciprocal_fp+0x90>
   15780:	00029830 	.word	0x00029830
   15784:	00028738 	.word	0x00028738
   15788:	fffcfffd 	.word	0xfffcfffd

0001578c <POINTonE1_from_Jacobian>:
   1578c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15790:	b09b      	sub	sp, #108	; 0x6c
   15792:	4607      	mov	r7, r0
   15794:	4689      	mov	r9, r1
   15796:	3160      	adds	r1, #96	; 0x60
   15798:	f109 045c 	add.w	r4, r9, #92	; 0x5c
   1579c:	f109 058c 	add.w	r5, r9, #140	; 0x8c
   157a0:	4623      	mov	r3, r4
   157a2:	f04f 0800 	mov.w	r8, #0
   157a6:	f853 2f04 	ldr.w	r2, [r3, #4]!
   157aa:	ea48 0802 	orr.w	r8, r8, r2
   157ae:	42ab      	cmp	r3, r5
   157b0:	d1f9      	bne.n	157a6 <POINTonE1_from_Jacobian+0x1a>
   157b2:	a80e      	add	r0, sp, #56	; 0x38
   157b4:	f7ff ff94 	bl	156e0 <reciprocal_fp>
   157b8:	4e23      	ldr	r6, [pc, #140]	; (15848 <POINTonE1_from_Jacobian+0xbc>)
   157ba:	f04f 0b0c 	mov.w	fp, #12
   157be:	f8cd b004 	str.w	fp, [sp, #4]
   157c2:	f8df a088 	ldr.w	sl, [pc, #136]	; 1584c <POINTonE1_from_Jacobian+0xc0>
   157c6:	f8cd a000 	str.w	sl, [sp]
   157ca:	4633      	mov	r3, r6
   157cc:	aa0e      	add	r2, sp, #56	; 0x38
   157ce:	4611      	mov	r1, r2
   157d0:	a802      	add	r0, sp, #8
   157d2:	f7fb f8fd 	bl	109d0 <mul_mont_n>
   157d6:	f8cd b004 	str.w	fp, [sp, #4]
   157da:	f8cd a000 	str.w	sl, [sp]
   157de:	4633      	mov	r3, r6
   157e0:	aa02      	add	r2, sp, #8
   157e2:	4649      	mov	r1, r9
   157e4:	4638      	mov	r0, r7
   157e6:	f7fb f8f3 	bl	109d0 <mul_mont_n>
   157ea:	f8cd b004 	str.w	fp, [sp, #4]
   157ee:	f8cd a000 	str.w	sl, [sp]
   157f2:	4633      	mov	r3, r6
   157f4:	aa0e      	add	r2, sp, #56	; 0x38
   157f6:	a902      	add	r1, sp, #8
   157f8:	4608      	mov	r0, r1
   157fa:	f7fb f8e9 	bl	109d0 <mul_mont_n>
   157fe:	f8cd b004 	str.w	fp, [sp, #4]
   15802:	f8cd a000 	str.w	sl, [sp]
   15806:	4633      	mov	r3, r6
   15808:	aa02      	add	r2, sp, #8
   1580a:	f109 0130 	add.w	r1, r9, #48	; 0x30
   1580e:	f107 0030 	add.w	r0, r7, #48	; 0x30
   15812:	f7fb f8dd 	bl	109d0 <mul_mont_n>
   15816:	f108 33ff 	add.w	r3, r8, #4294967295
   1581a:	ea23 0808 	bic.w	r8, r3, r8
   1581e:	ea4f 78e8 	mov.w	r8, r8, asr #31
   15822:	f606 534c 	addw	r3, r6, #3404	; 0xd4c
   15826:	f107 005c 	add.w	r0, r7, #92	; 0x5c
   1582a:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1582e:	f854 2f04 	ldr.w	r2, [r4, #4]!
   15832:	404a      	eors	r2, r1
   15834:	ea02 0208 	and.w	r2, r2, r8
   15838:	404a      	eors	r2, r1
   1583a:	f840 2f04 	str.w	r2, [r0, #4]!
   1583e:	42ac      	cmp	r4, r5
   15840:	d1f3      	bne.n	1582a <POINTonE1_from_Jacobian+0x9e>
   15842:	b01b      	add	sp, #108	; 0x6c
   15844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15848:	00028738 	.word	0x00028738
   1584c:	fffcfffd 	.word	0xfffcfffd

00015850 <blst_p1_from_jacobian>:
   15850:	b508      	push	{r3, lr}
   15852:	f7ff ff9b 	bl	1578c <POINTonE1_from_Jacobian>
   15856:	bd08      	pop	{r3, pc}

00015858 <blst_p1_to_affine>:
   15858:	b570      	push	{r4, r5, r6, lr}
   1585a:	b0a4      	sub	sp, #144	; 0x90
   1585c:	4604      	mov	r4, r0
   1585e:	f101 025c 	add.w	r2, r1, #92	; 0x5c
   15862:	4d0f      	ldr	r5, [pc, #60]	; (158a0 <blst_p1_to_affine+0x48>)
   15864:	f101 0c8c 	add.w	ip, r1, #140	; 0x8c
   15868:	2000      	movs	r0, #0
   1586a:	f855 3b04 	ldr.w	r3, [r5], #4
   1586e:	f852 6f04 	ldr.w	r6, [r2, #4]!
   15872:	4073      	eors	r3, r6
   15874:	4318      	orrs	r0, r3
   15876:	4562      	cmp	r2, ip
   15878:	d1f7      	bne.n	1586a <blst_p1_to_affine+0x12>
   1587a:	1e43      	subs	r3, r0, #1
   1587c:	4383      	bics	r3, r0
   1587e:	d50a      	bpl.n	15896 <blst_p1_to_affine+0x3e>
   15880:	1f0b      	subs	r3, r1, #4
   15882:	1f20      	subs	r0, r4, #4
   15884:	315c      	adds	r1, #92	; 0x5c
   15886:	f853 2f04 	ldr.w	r2, [r3, #4]!
   1588a:	f840 2f04 	str.w	r2, [r0, #4]!
   1588e:	428b      	cmp	r3, r1
   15890:	d1f9      	bne.n	15886 <blst_p1_to_affine+0x2e>
   15892:	b024      	add	sp, #144	; 0x90
   15894:	bd70      	pop	{r4, r5, r6, pc}
   15896:	4668      	mov	r0, sp
   15898:	f7ff ff78 	bl	1578c <POINTonE1_from_Jacobian>
   1589c:	4669      	mov	r1, sp
   1589e:	e7ef      	b.n	15880 <blst_p1_to_affine+0x28>
   158a0:	000287c8 	.word	0x000287c8

000158a4 <POINTonE1_Serialize_BE>:
   158a4:	b570      	push	{r4, r5, r6, lr}
   158a6:	b0a4      	sub	sp, #144	; 0x90
   158a8:	4606      	mov	r6, r0
   158aa:	f101 025c 	add.w	r2, r1, #92	; 0x5c
   158ae:	4c0e      	ldr	r4, [pc, #56]	; (158e8 <POINTonE1_Serialize_BE+0x44>)
   158b0:	f101 0e8c 	add.w	lr, r1, #140	; 0x8c
   158b4:	f04f 0c00 	mov.w	ip, #0
   158b8:	f854 3b04 	ldr.w	r3, [r4], #4
   158bc:	f852 5f04 	ldr.w	r5, [r2, #4]!
   158c0:	406b      	eors	r3, r5
   158c2:	ea4c 0c03 	orr.w	ip, ip, r3
   158c6:	4572      	cmp	r2, lr
   158c8:	d1f6      	bne.n	158b8 <POINTonE1_Serialize_BE+0x14>
   158ca:	f10c 33ff 	add.w	r3, ip, #4294967295
   158ce:	ea33 030c 	bics.w	r3, r3, ip
   158d2:	d504      	bpl.n	158de <POINTonE1_Serialize_BE+0x3a>
   158d4:	4630      	mov	r0, r6
   158d6:	f7fb fee7 	bl	116a8 <POINTonE1_affine_Serialize_BE>
   158da:	b024      	add	sp, #144	; 0x90
   158dc:	bd70      	pop	{r4, r5, r6, pc}
   158de:	4668      	mov	r0, sp
   158e0:	f7ff ff54 	bl	1578c <POINTonE1_from_Jacobian>
   158e4:	4669      	mov	r1, sp
   158e6:	e7f5      	b.n	158d4 <POINTonE1_Serialize_BE+0x30>
   158e8:	000287c8 	.word	0x000287c8

000158ec <blst_p1_serialize>:
   158ec:	b510      	push	{r4, lr}
   158ee:	f101 035c 	add.w	r3, r1, #92	; 0x5c
   158f2:	f101 0c8c 	add.w	ip, r1, #140	; 0x8c
   158f6:	2200      	movs	r2, #0
   158f8:	f853 4f04 	ldr.w	r4, [r3, #4]!
   158fc:	4322      	orrs	r2, r4
   158fe:	4563      	cmp	r3, ip
   15900:	d1fa      	bne.n	158f8 <blst_p1_serialize+0xc>
   15902:	1e53      	subs	r3, r2, #1
   15904:	4393      	bics	r3, r2
   15906:	d50a      	bpl.n	1591e <blst_p1_serialize+0x32>
   15908:	1e43      	subs	r3, r0, #1
   1590a:	f100 015f 	add.w	r1, r0, #95	; 0x5f
   1590e:	2200      	movs	r2, #0
   15910:	f803 2f01 	strb.w	r2, [r3, #1]!
   15914:	428b      	cmp	r3, r1
   15916:	d1fb      	bne.n	15910 <blst_p1_serialize+0x24>
   15918:	2340      	movs	r3, #64	; 0x40
   1591a:	7003      	strb	r3, [r0, #0]
   1591c:	bd10      	pop	{r4, pc}
   1591e:	f7ff ffc1 	bl	158a4 <POINTonE1_Serialize_BE>
   15922:	e7fb      	b.n	1591c <blst_p1_serialize+0x30>

00015924 <blst_p1_compress>:
   15924:	b570      	push	{r4, r5, r6, lr}
   15926:	b0a4      	sub	sp, #144	; 0x90
   15928:	4605      	mov	r5, r0
   1592a:	f101 0c5c 	add.w	ip, r1, #92	; 0x5c
   1592e:	f101 008c 	add.w	r0, r1, #140	; 0x8c
   15932:	4663      	mov	r3, ip
   15934:	2200      	movs	r2, #0
   15936:	f853 4f04 	ldr.w	r4, [r3, #4]!
   1593a:	4322      	orrs	r2, r4
   1593c:	4283      	cmp	r3, r0
   1593e:	d1fa      	bne.n	15936 <blst_p1_compress+0x12>
   15940:	1e53      	subs	r3, r2, #1
   15942:	ea23 0202 	bic.w	r2, r3, r2
   15946:	0fd2      	lsrs	r2, r2, #31
   15948:	d00b      	beq.n	15962 <blst_p1_compress+0x3e>
   1594a:	1e6b      	subs	r3, r5, #1
   1594c:	f105 012f 	add.w	r1, r5, #47	; 0x2f
   15950:	2200      	movs	r2, #0
   15952:	f803 2f01 	strb.w	r2, [r3, #1]!
   15956:	428b      	cmp	r3, r1
   15958:	d1fb      	bne.n	15952 <blst_p1_compress+0x2e>
   1595a:	23c0      	movs	r3, #192	; 0xc0
   1595c:	702b      	strb	r3, [r5, #0]
   1595e:	b024      	add	sp, #144	; 0x90
   15960:	bd70      	pop	{r4, r5, r6, pc}
   15962:	4c0e      	ldr	r4, [pc, #56]	; (1599c <blst_p1_compress+0x78>)
   15964:	f854 3b04 	ldr.w	r3, [r4], #4
   15968:	f85c 6f04 	ldr.w	r6, [ip, #4]!
   1596c:	4073      	eors	r3, r6
   1596e:	431a      	orrs	r2, r3
   15970:	4584      	cmp	ip, r0
   15972:	d1f7      	bne.n	15964 <blst_p1_compress+0x40>
   15974:	1e53      	subs	r3, r2, #1
   15976:	4393      	bics	r3, r2
   15978:	d50b      	bpl.n	15992 <blst_p1_compress+0x6e>
   1597a:	4628      	mov	r0, r5
   1597c:	f7fb fe5f 	bl	1163e <POINTonE1_affine_Compress_BE>
   15980:	0103      	lsls	r3, r0, #4
   15982:	f003 0320 	and.w	r3, r3, #32
   15986:	782a      	ldrb	r2, [r5, #0]
   15988:	4313      	orrs	r3, r2
   1598a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1598e:	702b      	strb	r3, [r5, #0]
   15990:	e7e5      	b.n	1595e <blst_p1_compress+0x3a>
   15992:	4668      	mov	r0, sp
   15994:	f7ff fefa 	bl	1578c <POINTonE1_from_Jacobian>
   15998:	4669      	mov	r1, sp
   1599a:	e7ee      	b.n	1597a <blst_p1_compress+0x56>
   1599c:	000287c8 	.word	0x000287c8

000159a0 <reciprocal_fp2>:
   159a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   159a4:	b09b      	sub	sp, #108	; 0x6c
   159a6:	4604      	mov	r4, r0
   159a8:	460f      	mov	r7, r1
   159aa:	4d1f      	ldr	r5, [pc, #124]	; (15a28 <reciprocal_fp2+0x88>)
   159ac:	260c      	movs	r6, #12
   159ae:	9601      	str	r6, [sp, #4]
   159b0:	f8df 8078 	ldr.w	r8, [pc, #120]	; 15a2c <reciprocal_fp2+0x8c>
   159b4:	f8cd 8000 	str.w	r8, [sp]
   159b8:	462b      	mov	r3, r5
   159ba:	460a      	mov	r2, r1
   159bc:	a80e      	add	r0, sp, #56	; 0x38
   159be:	f7fb f807 	bl	109d0 <mul_mont_n>
   159c2:	f107 0930 	add.w	r9, r7, #48	; 0x30
   159c6:	9601      	str	r6, [sp, #4]
   159c8:	f8cd 8000 	str.w	r8, [sp]
   159cc:	462b      	mov	r3, r5
   159ce:	464a      	mov	r2, r9
   159d0:	4649      	mov	r1, r9
   159d2:	a802      	add	r0, sp, #8
   159d4:	f7fa fffc 	bl	109d0 <mul_mont_n>
   159d8:	9600      	str	r6, [sp, #0]
   159da:	462b      	mov	r3, r5
   159dc:	aa02      	add	r2, sp, #8
   159de:	a90e      	add	r1, sp, #56	; 0x38
   159e0:	4608      	mov	r0, r1
   159e2:	f7fb f99d 	bl	10d20 <add_mod_n>
   159e6:	a90e      	add	r1, sp, #56	; 0x38
   159e8:	a802      	add	r0, sp, #8
   159ea:	f7ff fe79 	bl	156e0 <reciprocal_fp>
   159ee:	9601      	str	r6, [sp, #4]
   159f0:	f8cd 8000 	str.w	r8, [sp]
   159f4:	462b      	mov	r3, r5
   159f6:	aa02      	add	r2, sp, #8
   159f8:	4639      	mov	r1, r7
   159fa:	4620      	mov	r0, r4
   159fc:	f7fa ffe8 	bl	109d0 <mul_mont_n>
   15a00:	3430      	adds	r4, #48	; 0x30
   15a02:	9601      	str	r6, [sp, #4]
   15a04:	f8cd 8000 	str.w	r8, [sp]
   15a08:	462b      	mov	r3, r5
   15a0a:	aa02      	add	r2, sp, #8
   15a0c:	4649      	mov	r1, r9
   15a0e:	4620      	mov	r0, r4
   15a10:	f7fa ffde 	bl	109d0 <mul_mont_n>
   15a14:	9600      	str	r6, [sp, #0]
   15a16:	462b      	mov	r3, r5
   15a18:	2201      	movs	r2, #1
   15a1a:	4621      	mov	r1, r4
   15a1c:	4620      	mov	r0, r4
   15a1e:	f7fc f813 	bl	11a48 <cneg_mod_n>
   15a22:	b01b      	add	sp, #108	; 0x6c
   15a24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15a28:	00028738 	.word	0x00028738
   15a2c:	fffcfffd 	.word	0xfffcfffd

00015a30 <blst_fp2_inverse>:
   15a30:	b508      	push	{r3, lr}
   15a32:	f7ff ffb5 	bl	159a0 <reciprocal_fp2>
   15a36:	bd08      	pop	{r3, pc}

00015a38 <blst_fp2_eucl_inverse>:
   15a38:	b508      	push	{r3, lr}
   15a3a:	f7ff ffb1 	bl	159a0 <reciprocal_fp2>
   15a3e:	bd08      	pop	{r3, pc}

00015a40 <blst_fp_inverse>:
   15a40:	b508      	push	{r3, lr}
   15a42:	f7ff fe4d 	bl	156e0 <reciprocal_fp>
   15a46:	bd08      	pop	{r3, pc}

00015a48 <blst_fp_eucl_inverse>:
   15a48:	b508      	push	{r3, lr}
   15a4a:	f7ff fe49 	bl	156e0 <reciprocal_fp>
   15a4e:	bd08      	pop	{r3, pc}

00015a50 <recip_sqrt_fp_3mod4>:
   15a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a54:	f5ad 7d45 	sub.w	sp, sp, #788	; 0x314
   15a58:	9003      	str	r0, [sp, #12]
   15a5a:	1f0b      	subs	r3, r1, #4
   15a5c:	aa9f      	add	r2, sp, #636	; 0x27c
   15a5e:	f101 002c 	add.w	r0, r1, #44	; 0x2c
   15a62:	f853 1f04 	ldr.w	r1, [r3, #4]!
   15a66:	f842 1f04 	str.w	r1, [r2, #4]!
   15a6a:	4283      	cmp	r3, r0
   15a6c:	d1f9      	bne.n	15a62 <recip_sqrt_fp_3mod4+0x12>
   15a6e:	f8df b2e4 	ldr.w	fp, [pc, #740]	; 15d54 <recip_sqrt_fp_3mod4+0x304>
   15a72:	270c      	movs	r7, #12
   15a74:	9701      	str	r7, [sp, #4]
   15a76:	4eb8      	ldr	r6, [pc, #736]	; (15d58 <recip_sqrt_fp_3mod4+0x308>)
   15a78:	9600      	str	r6, [sp, #0]
   15a7a:	465b      	mov	r3, fp
   15a7c:	aaa0      	add	r2, sp, #640	; 0x280
   15a7e:	4611      	mov	r1, r2
   15a80:	a804      	add	r0, sp, #16
   15a82:	f7fa ffa5 	bl	109d0 <mul_mont_n>
   15a86:	ad64      	add	r5, sp, #400	; 0x190
   15a88:	9701      	str	r7, [sp, #4]
   15a8a:	9600      	str	r6, [sp, #0]
   15a8c:	465b      	mov	r3, fp
   15a8e:	aaa0      	add	r2, sp, #640	; 0x280
   15a90:	a904      	add	r1, sp, #16
   15a92:	4628      	mov	r0, r5
   15a94:	f7fa ff9c 	bl	109d0 <mul_mont_n>
   15a98:	ac34      	add	r4, sp, #208	; 0xd0
   15a9a:	9701      	str	r7, [sp, #4]
   15a9c:	9600      	str	r6, [sp, #0]
   15a9e:	465b      	mov	r3, fp
   15aa0:	aa04      	add	r2, sp, #16
   15aa2:	4611      	mov	r1, r2
   15aa4:	4620      	mov	r0, r4
   15aa6:	f7fa ff93 	bl	109d0 <mul_mont_n>
   15aaa:	9701      	str	r7, [sp, #4]
   15aac:	9600      	str	r6, [sp, #0]
   15aae:	465b      	mov	r3, fp
   15ab0:	aa04      	add	r2, sp, #16
   15ab2:	4629      	mov	r1, r5
   15ab4:	a810      	add	r0, sp, #64	; 0x40
   15ab6:	f7fa ff8b 	bl	109d0 <mul_mont_n>
   15aba:	9701      	str	r7, [sp, #4]
   15abc:	9600      	str	r6, [sp, #0]
   15abe:	465b      	mov	r3, fp
   15ac0:	462a      	mov	r2, r5
   15ac2:	4621      	mov	r1, r4
   15ac4:	a84c      	add	r0, sp, #304	; 0x130
   15ac6:	f7fa ff83 	bl	109d0 <mul_mont_n>
   15aca:	9701      	str	r7, [sp, #4]
   15acc:	9600      	str	r6, [sp, #0]
   15ace:	465b      	mov	r3, fp
   15ad0:	4622      	mov	r2, r4
   15ad2:	a910      	add	r1, sp, #64	; 0x40
   15ad4:	a870      	add	r0, sp, #448	; 0x1c0
   15ad6:	f7fa ff7b 	bl	109d0 <mul_mont_n>
   15ada:	9701      	str	r7, [sp, #4]
   15adc:	9600      	str	r6, [sp, #0]
   15ade:	465b      	mov	r3, fp
   15ae0:	4622      	mov	r2, r4
   15ae2:	a94c      	add	r1, sp, #304	; 0x130
   15ae4:	a894      	add	r0, sp, #592	; 0x250
   15ae6:	f7fa ff73 	bl	109d0 <mul_mont_n>
   15aea:	f10d 08a0 	add.w	r8, sp, #160	; 0xa0
   15aee:	9701      	str	r7, [sp, #4]
   15af0:	9600      	str	r6, [sp, #0]
   15af2:	465b      	mov	r3, fp
   15af4:	4622      	mov	r2, r4
   15af6:	a970      	add	r1, sp, #448	; 0x1c0
   15af8:	4640      	mov	r0, r8
   15afa:	f7fa ff69 	bl	109d0 <mul_mont_n>
   15afe:	f50d 79b0 	add.w	r9, sp, #352	; 0x160
   15b02:	9701      	str	r7, [sp, #4]
   15b04:	9600      	str	r6, [sp, #0]
   15b06:	465b      	mov	r3, fp
   15b08:	4622      	mov	r2, r4
   15b0a:	a994      	add	r1, sp, #592	; 0x250
   15b0c:	4648      	mov	r0, r9
   15b0e:	f7fa ff5f 	bl	109d0 <mul_mont_n>
   15b12:	9701      	str	r7, [sp, #4]
   15b14:	9600      	str	r6, [sp, #0]
   15b16:	465b      	mov	r3, fp
   15b18:	4622      	mov	r2, r4
   15b1a:	4641      	mov	r1, r8
   15b1c:	a8b8      	add	r0, sp, #736	; 0x2e0
   15b1e:	f7fa ff57 	bl	109d0 <mul_mont_n>
   15b22:	9701      	str	r7, [sp, #4]
   15b24:	9600      	str	r6, [sp, #0]
   15b26:	465b      	mov	r3, fp
   15b28:	4622      	mov	r2, r4
   15b2a:	4649      	mov	r1, r9
   15b2c:	a87c      	add	r0, sp, #496	; 0x1f0
   15b2e:	f7fa ff4f 	bl	109d0 <mul_mont_n>
   15b32:	9701      	str	r7, [sp, #4]
   15b34:	9600      	str	r6, [sp, #0]
   15b36:	465b      	mov	r3, fp
   15b38:	4622      	mov	r2, r4
   15b3a:	a9b8      	add	r1, sp, #736	; 0x2e0
   15b3c:	a81c      	add	r0, sp, #112	; 0x70
   15b3e:	f7fa ff47 	bl	109d0 <mul_mont_n>
   15b42:	9701      	str	r7, [sp, #4]
   15b44:	9600      	str	r6, [sp, #0]
   15b46:	465b      	mov	r3, fp
   15b48:	4622      	mov	r2, r4
   15b4a:	a97c      	add	r1, sp, #496	; 0x1f0
   15b4c:	a888      	add	r0, sp, #544	; 0x220
   15b4e:	f7fa ff3f 	bl	109d0 <mul_mont_n>
   15b52:	9701      	str	r7, [sp, #4]
   15b54:	9600      	str	r6, [sp, #0]
   15b56:	465b      	mov	r3, fp
   15b58:	4642      	mov	r2, r8
   15b5a:	4641      	mov	r1, r8
   15b5c:	a804      	add	r0, sp, #16
   15b5e:	f7fa ff37 	bl	109d0 <mul_mont_n>
   15b62:	9701      	str	r7, [sp, #4]
   15b64:	9600      	str	r6, [sp, #0]
   15b66:	465b      	mov	r3, fp
   15b68:	4622      	mov	r2, r4
   15b6a:	a988      	add	r1, sp, #544	; 0x220
   15b6c:	a8ac      	add	r0, sp, #688	; 0x2b0
   15b6e:	f7fa ff2f 	bl	109d0 <mul_mont_n>
   15b72:	f50d 7a80 	add.w	sl, sp, #256	; 0x100
   15b76:	9701      	str	r7, [sp, #4]
   15b78:	9600      	str	r6, [sp, #0]
   15b7a:	465b      	mov	r3, fp
   15b7c:	462a      	mov	r2, r5
   15b7e:	a904      	add	r1, sp, #16
   15b80:	4650      	mov	r0, sl
   15b82:	f7fa ff25 	bl	109d0 <mul_mont_n>
   15b86:	9701      	str	r7, [sp, #4]
   15b88:	9600      	str	r6, [sp, #0]
   15b8a:	465b      	mov	r3, fp
   15b8c:	aa10      	add	r2, sp, #64	; 0x40
   15b8e:	a904      	add	r1, sp, #16
   15b90:	4620      	mov	r0, r4
   15b92:	f7fa ff1d 	bl	109d0 <mul_mont_n>
   15b96:	abb8      	add	r3, sp, #736	; 0x2e0
   15b98:	9301      	str	r3, [sp, #4]
   15b9a:	9600      	str	r6, [sp, #0]
   15b9c:	465b      	mov	r3, fp
   15b9e:	463a      	mov	r2, r7
   15ba0:	a904      	add	r1, sp, #16
   15ba2:	4608      	mov	r0, r1
   15ba4:	f7ff fa80 	bl	150a8 <sqr_n_mul_mont_383>
   15ba8:	f8cd 9004 	str.w	r9, [sp, #4]
   15bac:	9600      	str	r6, [sp, #0]
   15bae:	465b      	mov	r3, fp
   15bb0:	2207      	movs	r2, #7
   15bb2:	a904      	add	r1, sp, #16
   15bb4:	4608      	mov	r0, r1
   15bb6:	f7ff fa77 	bl	150a8 <sqr_n_mul_mont_383>
   15bba:	ab10      	add	r3, sp, #64	; 0x40
   15bbc:	9301      	str	r3, [sp, #4]
   15bbe:	9600      	str	r6, [sp, #0]
   15bc0:	465b      	mov	r3, fp
   15bc2:	2204      	movs	r2, #4
   15bc4:	a904      	add	r1, sp, #16
   15bc6:	4608      	mov	r0, r1
   15bc8:	f7ff fa6e 	bl	150a8 <sqr_n_mul_mont_383>
   15bcc:	ab4c      	add	r3, sp, #304	; 0x130
   15bce:	9301      	str	r3, [sp, #4]
   15bd0:	9600      	str	r6, [sp, #0]
   15bd2:	465b      	mov	r3, fp
   15bd4:	2206      	movs	r2, #6
   15bd6:	a904      	add	r1, sp, #16
   15bd8:	4608      	mov	r0, r1
   15bda:	f7ff fa65 	bl	150a8 <sqr_n_mul_mont_383>
   15bde:	ab88      	add	r3, sp, #544	; 0x220
   15be0:	9301      	str	r3, [sp, #4]
   15be2:	9600      	str	r6, [sp, #0]
   15be4:	465b      	mov	r3, fp
   15be6:	2207      	movs	r2, #7
   15be8:	a904      	add	r1, sp, #16
   15bea:	4608      	mov	r0, r1
   15bec:	f7ff fa5c 	bl	150a8 <sqr_n_mul_mont_383>
   15bf0:	9401      	str	r4, [sp, #4]
   15bf2:	9600      	str	r6, [sp, #0]
   15bf4:	465b      	mov	r3, fp
   15bf6:	2205      	movs	r2, #5
   15bf8:	a904      	add	r1, sp, #16
   15bfa:	4608      	mov	r0, r1
   15bfc:	f7ff fa54 	bl	150a8 <sqr_n_mul_mont_383>
   15c00:	9501      	str	r5, [sp, #4]
   15c02:	9600      	str	r6, [sp, #0]
   15c04:	465b      	mov	r3, fp
   15c06:	2202      	movs	r2, #2
   15c08:	a904      	add	r1, sp, #16
   15c0a:	4608      	mov	r0, r1
   15c0c:	f7ff fa4c 	bl	150a8 <sqr_n_mul_mont_383>
   15c10:	f8cd 8004 	str.w	r8, [sp, #4]
   15c14:	9600      	str	r6, [sp, #0]
   15c16:	465b      	mov	r3, fp
   15c18:	2206      	movs	r2, #6
   15c1a:	a904      	add	r1, sp, #16
   15c1c:	4608      	mov	r0, r1
   15c1e:	f7ff fa43 	bl	150a8 <sqr_n_mul_mont_383>
   15c22:	f8cd 8004 	str.w	r8, [sp, #4]
   15c26:	9600      	str	r6, [sp, #0]
   15c28:	465b      	mov	r3, fp
   15c2a:	2206      	movs	r2, #6
   15c2c:	a904      	add	r1, sp, #16
   15c2e:	4608      	mov	r0, r1
   15c30:	f7ff fa3a 	bl	150a8 <sqr_n_mul_mont_383>
   15c34:	ab70      	add	r3, sp, #448	; 0x1c0
   15c36:	9301      	str	r3, [sp, #4]
   15c38:	9600      	str	r6, [sp, #0]
   15c3a:	465b      	mov	r3, fp
   15c3c:	2206      	movs	r2, #6
   15c3e:	a904      	add	r1, sp, #16
   15c40:	4608      	mov	r0, r1
   15c42:	f7ff fa31 	bl	150a8 <sqr_n_mul_mont_383>
   15c46:	9501      	str	r5, [sp, #4]
   15c48:	9600      	str	r6, [sp, #0]
   15c4a:	465b      	mov	r3, fp
   15c4c:	2203      	movs	r2, #3
   15c4e:	a904      	add	r1, sp, #16
   15c50:	4608      	mov	r0, r1
   15c52:	f7ff fa29 	bl	150a8 <sqr_n_mul_mont_383>
   15c56:	f8cd 8004 	str.w	r8, [sp, #4]
   15c5a:	9600      	str	r6, [sp, #0]
   15c5c:	465b      	mov	r3, fp
   15c5e:	2207      	movs	r2, #7
   15c60:	a904      	add	r1, sp, #16
   15c62:	4608      	mov	r0, r1
   15c64:	f7ff fa20 	bl	150a8 <sqr_n_mul_mont_383>
   15c68:	f8cd 8004 	str.w	r8, [sp, #4]
   15c6c:	9600      	str	r6, [sp, #0]
   15c6e:	465b      	mov	r3, fp
   15c70:	2204      	movs	r2, #4
   15c72:	a904      	add	r1, sp, #16
   15c74:	4608      	mov	r0, r1
   15c76:	f7ff fa17 	bl	150a8 <sqr_n_mul_mont_383>
   15c7a:	f8cd 9004 	str.w	r9, [sp, #4]
   15c7e:	9600      	str	r6, [sp, #0]
   15c80:	465b      	mov	r3, fp
   15c82:	2206      	movs	r2, #6
   15c84:	a904      	add	r1, sp, #16
   15c86:	4608      	mov	r0, r1
   15c88:	f7ff fa0e 	bl	150a8 <sqr_n_mul_mont_383>
   15c8c:	abac      	add	r3, sp, #688	; 0x2b0
   15c8e:	9301      	str	r3, [sp, #4]
   15c90:	9600      	str	r6, [sp, #0]
   15c92:	465b      	mov	r3, fp
   15c94:	2206      	movs	r2, #6
   15c96:	a904      	add	r1, sp, #16
   15c98:	4608      	mov	r0, r1
   15c9a:	f7ff fa05 	bl	150a8 <sqr_n_mul_mont_383>
   15c9e:	aba0      	add	r3, sp, #640	; 0x280
   15ca0:	9301      	str	r3, [sp, #4]
   15ca2:	9600      	str	r6, [sp, #0]
   15ca4:	465b      	mov	r3, fp
   15ca6:	2203      	movs	r2, #3
   15ca8:	a904      	add	r1, sp, #16
   15caa:	4608      	mov	r0, r1
   15cac:	f7ff f9fc 	bl	150a8 <sqr_n_mul_mont_383>
   15cb0:	f8cd 8004 	str.w	r8, [sp, #4]
   15cb4:	9600      	str	r6, [sp, #0]
   15cb6:	465b      	mov	r3, fp
   15cb8:	2208      	movs	r2, #8
   15cba:	a904      	add	r1, sp, #16
   15cbc:	4608      	mov	r0, r1
   15cbe:	f7ff f9f3 	bl	150a8 <sqr_n_mul_mont_383>
   15cc2:	ab88      	add	r3, sp, #544	; 0x220
   15cc4:	9301      	str	r3, [sp, #4]
   15cc6:	9600      	str	r6, [sp, #0]
   15cc8:	465b      	mov	r3, fp
   15cca:	2207      	movs	r2, #7
   15ccc:	a904      	add	r1, sp, #16
   15cce:	4608      	mov	r0, r1
   15cd0:	f7ff f9ea 	bl	150a8 <sqr_n_mul_mont_383>
   15cd4:	ab94      	add	r3, sp, #592	; 0x250
   15cd6:	9301      	str	r3, [sp, #4]
   15cd8:	9600      	str	r6, [sp, #0]
   15cda:	465b      	mov	r3, fp
   15cdc:	2205      	movs	r2, #5
   15cde:	a904      	add	r1, sp, #16
   15ce0:	4608      	mov	r0, r1
   15ce2:	f7ff f9e1 	bl	150a8 <sqr_n_mul_mont_383>
   15ce6:	f8cd 8004 	str.w	r8, [sp, #4]
   15cea:	9600      	str	r6, [sp, #0]
   15cec:	465b      	mov	r3, fp
   15cee:	2206      	movs	r2, #6
   15cf0:	a904      	add	r1, sp, #16
   15cf2:	4608      	mov	r0, r1
   15cf4:	f7ff f9d8 	bl	150a8 <sqr_n_mul_mont_383>
   15cf8:	f8cd a004 	str.w	sl, [sp, #4]
   15cfc:	9600      	str	r6, [sp, #0]
   15cfe:	465b      	mov	r3, fp
   15d00:	2206      	movs	r2, #6
   15d02:	a904      	add	r1, sp, #16
   15d04:	4608      	mov	r0, r1
   15d06:	f7ff f9cf 	bl	150a8 <sqr_n_mul_mont_383>
   15d0a:	ab70      	add	r3, sp, #448	; 0x1c0
   15d0c:	9301      	str	r3, [sp, #4]
   15d0e:	9600      	str	r6, [sp, #0]
   15d10:	465b      	mov	r3, fp
   15d12:	2204      	movs	r2, #4
   15d14:	a904      	add	r1, sp, #16
   15d16:	4608      	mov	r0, r1
   15d18:	f7ff f9c6 	bl	150a8 <sqr_n_mul_mont_383>
   15d1c:	f8cd a004 	str.w	sl, [sp, #4]
   15d20:	9600      	str	r6, [sp, #0]
   15d22:	465b      	mov	r3, fp
   15d24:	2208      	movs	r2, #8
   15d26:	a904      	add	r1, sp, #16
   15d28:	4608      	mov	r0, r1
   15d2a:	f7ff f9bd 	bl	150a8 <sqr_n_mul_mont_383>
   15d2e:	f8cd 8004 	str.w	r8, [sp, #4]
   15d32:	9600      	str	r6, [sp, #0]
   15d34:	465b      	mov	r3, fp
   15d36:	2204      	movs	r2, #4
   15d38:	a904      	add	r1, sp, #16
   15d3a:	4608      	mov	r0, r1
   15d3c:	f7ff f9b4 	bl	150a8 <sqr_n_mul_mont_383>
   15d40:	ab88      	add	r3, sp, #544	; 0x220
   15d42:	9301      	str	r3, [sp, #4]
   15d44:	9600      	str	r6, [sp, #0]
   15d46:	465b      	mov	r3, fp
   15d48:	2207      	movs	r2, #7
   15d4a:	a904      	add	r1, sp, #16
   15d4c:	4608      	mov	r0, r1
   15d4e:	f7ff f9ab 	bl	150a8 <sqr_n_mul_mont_383>
   15d52:	e003      	b.n	15d5c <recip_sqrt_fp_3mod4+0x30c>
   15d54:	00028738 	.word	0x00028738
   15d58:	fffcfffd 	.word	0xfffcfffd
   15d5c:	ab7c      	add	r3, sp, #496	; 0x1f0
   15d5e:	9301      	str	r3, [sp, #4]
   15d60:	9600      	str	r6, [sp, #0]
   15d62:	465b      	mov	r3, fp
   15d64:	2209      	movs	r2, #9
   15d66:	a904      	add	r1, sp, #16
   15d68:	4608      	mov	r0, r1
   15d6a:	f7ff f99d 	bl	150a8 <sqr_n_mul_mont_383>
   15d6e:	9501      	str	r5, [sp, #4]
   15d70:	9600      	str	r6, [sp, #0]
   15d72:	465b      	mov	r3, fp
   15d74:	2202      	movs	r2, #2
   15d76:	a904      	add	r1, sp, #16
   15d78:	4608      	mov	r0, r1
   15d7a:	f7ff f995 	bl	150a8 <sqr_n_mul_mont_383>
   15d7e:	ab4c      	add	r3, sp, #304	; 0x130
   15d80:	9301      	str	r3, [sp, #4]
   15d82:	9600      	str	r6, [sp, #0]
   15d84:	465b      	mov	r3, fp
   15d86:	2205      	movs	r2, #5
   15d88:	a904      	add	r1, sp, #16
   15d8a:	4608      	mov	r0, r1
   15d8c:	f7ff f98c 	bl	150a8 <sqr_n_mul_mont_383>
   15d90:	ab10      	add	r3, sp, #64	; 0x40
   15d92:	9301      	str	r3, [sp, #4]
   15d94:	9600      	str	r6, [sp, #0]
   15d96:	465b      	mov	r3, fp
   15d98:	2207      	movs	r2, #7
   15d9a:	a904      	add	r1, sp, #16
   15d9c:	4608      	mov	r0, r1
   15d9e:	f7ff f983 	bl	150a8 <sqr_n_mul_mont_383>
   15da2:	ab70      	add	r3, sp, #448	; 0x1c0
   15da4:	9301      	str	r3, [sp, #4]
   15da6:	9600      	str	r6, [sp, #0]
   15da8:	465b      	mov	r3, fp
   15daa:	2207      	movs	r2, #7
   15dac:	a904      	add	r1, sp, #16
   15dae:	4608      	mov	r0, r1
   15db0:	f7ff f97a 	bl	150a8 <sqr_n_mul_mont_383>
   15db4:	ab88      	add	r3, sp, #544	; 0x220
   15db6:	9301      	str	r3, [sp, #4]
   15db8:	9600      	str	r6, [sp, #0]
   15dba:	465b      	mov	r3, fp
   15dbc:	2206      	movs	r2, #6
   15dbe:	a904      	add	r1, sp, #16
   15dc0:	4608      	mov	r0, r1
   15dc2:	f7ff f971 	bl	150a8 <sqr_n_mul_mont_383>
   15dc6:	f8cd a004 	str.w	sl, [sp, #4]
   15dca:	9600      	str	r6, [sp, #0]
   15dcc:	465b      	mov	r3, fp
   15dce:	2205      	movs	r2, #5
   15dd0:	a904      	add	r1, sp, #16
   15dd2:	4608      	mov	r0, r1
   15dd4:	f7ff f968 	bl	150a8 <sqr_n_mul_mont_383>
   15dd8:	ab7c      	add	r3, sp, #496	; 0x1f0
   15dda:	9301      	str	r3, [sp, #4]
   15ddc:	9600      	str	r6, [sp, #0]
   15dde:	465b      	mov	r3, fp
   15de0:	2205      	movs	r2, #5
   15de2:	a904      	add	r1, sp, #16
   15de4:	4608      	mov	r0, r1
   15de6:	f7ff f95f 	bl	150a8 <sqr_n_mul_mont_383>
   15dea:	ab7c      	add	r3, sp, #496	; 0x1f0
   15dec:	9301      	str	r3, [sp, #4]
   15dee:	9600      	str	r6, [sp, #0]
   15df0:	465b      	mov	r3, fp
   15df2:	2205      	movs	r2, #5
   15df4:	a904      	add	r1, sp, #16
   15df6:	4608      	mov	r0, r1
   15df8:	f7ff f956 	bl	150a8 <sqr_n_mul_mont_383>
   15dfc:	f8cd 8004 	str.w	r8, [sp, #4]
   15e00:	9600      	str	r6, [sp, #0]
   15e02:	465b      	mov	r3, fp
   15e04:	2208      	movs	r2, #8
   15e06:	a904      	add	r1, sp, #16
   15e08:	4608      	mov	r0, r1
   15e0a:	f7ff f94d 	bl	150a8 <sqr_n_mul_mont_383>
   15e0e:	ab1c      	add	r3, sp, #112	; 0x70
   15e10:	9301      	str	r3, [sp, #4]
   15e12:	9600      	str	r6, [sp, #0]
   15e14:	465b      	mov	r3, fp
   15e16:	2207      	movs	r2, #7
   15e18:	a904      	add	r1, sp, #16
   15e1a:	4608      	mov	r0, r1
   15e1c:	f7ff f944 	bl	150a8 <sqr_n_mul_mont_383>
   15e20:	f8cd 9004 	str.w	r9, [sp, #4]
   15e24:	9600      	str	r6, [sp, #0]
   15e26:	465b      	mov	r3, fp
   15e28:	2209      	movs	r2, #9
   15e2a:	a904      	add	r1, sp, #16
   15e2c:	4608      	mov	r0, r1
   15e2e:	f7ff f93b 	bl	150a8 <sqr_n_mul_mont_383>
   15e32:	f8cd 8004 	str.w	r8, [sp, #4]
   15e36:	9600      	str	r6, [sp, #0]
   15e38:	465b      	mov	r3, fp
   15e3a:	2205      	movs	r2, #5
   15e3c:	a904      	add	r1, sp, #16
   15e3e:	4608      	mov	r0, r1
   15e40:	f7ff f932 	bl	150a8 <sqr_n_mul_mont_383>
   15e44:	9501      	str	r5, [sp, #4]
   15e46:	9600      	str	r6, [sp, #0]
   15e48:	465b      	mov	r3, fp
   15e4a:	2203      	movs	r2, #3
   15e4c:	a904      	add	r1, sp, #16
   15e4e:	4608      	mov	r0, r1
   15e50:	f7ff f92a 	bl	150a8 <sqr_n_mul_mont_383>
   15e54:	f8cd 9004 	str.w	r9, [sp, #4]
   15e58:	9600      	str	r6, [sp, #0]
   15e5a:	465b      	mov	r3, fp
   15e5c:	2208      	movs	r2, #8
   15e5e:	a904      	add	r1, sp, #16
   15e60:	4608      	mov	r0, r1
   15e62:	f7ff f921 	bl	150a8 <sqr_n_mul_mont_383>
   15e66:	9501      	str	r5, [sp, #4]
   15e68:	9600      	str	r6, [sp, #0]
   15e6a:	465b      	mov	r3, fp
   15e6c:	2203      	movs	r2, #3
   15e6e:	a904      	add	r1, sp, #16
   15e70:	4608      	mov	r0, r1
   15e72:	f7ff f919 	bl	150a8 <sqr_n_mul_mont_383>
   15e76:	ab70      	add	r3, sp, #448	; 0x1c0
   15e78:	9301      	str	r3, [sp, #4]
   15e7a:	9600      	str	r6, [sp, #0]
   15e7c:	465b      	mov	r3, fp
   15e7e:	2207      	movs	r2, #7
   15e80:	a904      	add	r1, sp, #16
   15e82:	4608      	mov	r0, r1
   15e84:	f7ff f910 	bl	150a8 <sqr_n_mul_mont_383>
   15e88:	f8cd 9004 	str.w	r9, [sp, #4]
   15e8c:	9600      	str	r6, [sp, #0]
   15e8e:	465b      	mov	r3, fp
   15e90:	2209      	movs	r2, #9
   15e92:	a904      	add	r1, sp, #16
   15e94:	4608      	mov	r0, r1
   15e96:	f7ff f907 	bl	150a8 <sqr_n_mul_mont_383>
   15e9a:	ab1c      	add	r3, sp, #112	; 0x70
   15e9c:	9301      	str	r3, [sp, #4]
   15e9e:	9600      	str	r6, [sp, #0]
   15ea0:	465b      	mov	r3, fp
   15ea2:	2206      	movs	r2, #6
   15ea4:	a904      	add	r1, sp, #16
   15ea6:	4608      	mov	r0, r1
   15ea8:	f7ff f8fe 	bl	150a8 <sqr_n_mul_mont_383>
   15eac:	9401      	str	r4, [sp, #4]
   15eae:	9600      	str	r6, [sp, #0]
   15eb0:	465b      	mov	r3, fp
   15eb2:	2206      	movs	r2, #6
   15eb4:	a904      	add	r1, sp, #16
   15eb6:	4608      	mov	r0, r1
   15eb8:	f7ff f8f6 	bl	150a8 <sqr_n_mul_mont_383>
   15ebc:	9401      	str	r4, [sp, #4]
   15ebe:	9600      	str	r6, [sp, #0]
   15ec0:	465b      	mov	r3, fp
   15ec2:	2205      	movs	r2, #5
   15ec4:	a904      	add	r1, sp, #16
   15ec6:	4608      	mov	r0, r1
   15ec8:	f7ff f8ee 	bl	150a8 <sqr_n_mul_mont_383>
   15ecc:	9401      	str	r4, [sp, #4]
   15ece:	9600      	str	r6, [sp, #0]
   15ed0:	465b      	mov	r3, fp
   15ed2:	2205      	movs	r2, #5
   15ed4:	a904      	add	r1, sp, #16
   15ed6:	4608      	mov	r0, r1
   15ed8:	f7ff f8e6 	bl	150a8 <sqr_n_mul_mont_383>
   15edc:	f8cd 8004 	str.w	r8, [sp, #4]
   15ee0:	9600      	str	r6, [sp, #0]
   15ee2:	465b      	mov	r3, fp
   15ee4:	2204      	movs	r2, #4
   15ee6:	a904      	add	r1, sp, #16
   15ee8:	4608      	mov	r0, r1
   15eea:	f7ff f8dd 	bl	150a8 <sqr_n_mul_mont_383>
   15eee:	9501      	str	r5, [sp, #4]
   15ef0:	9600      	str	r6, [sp, #0]
   15ef2:	465b      	mov	r3, fp
   15ef4:	2203      	movs	r2, #3
   15ef6:	a904      	add	r1, sp, #16
   15ef8:	4608      	mov	r0, r1
   15efa:	f7ff f8d5 	bl	150a8 <sqr_n_mul_mont_383>
   15efe:	ab1c      	add	r3, sp, #112	; 0x70
   15f00:	9301      	str	r3, [sp, #4]
   15f02:	9600      	str	r6, [sp, #0]
   15f04:	465b      	mov	r3, fp
   15f06:	2208      	movs	r2, #8
   15f08:	a904      	add	r1, sp, #16
   15f0a:	4608      	mov	r0, r1
   15f0c:	f7ff f8cc 	bl	150a8 <sqr_n_mul_mont_383>
   15f10:	9401      	str	r4, [sp, #4]
   15f12:	9600      	str	r6, [sp, #0]
   15f14:	465b      	mov	r3, fp
   15f16:	2207      	movs	r2, #7
   15f18:	a904      	add	r1, sp, #16
   15f1a:	4608      	mov	r0, r1
   15f1c:	f7ff f8c4 	bl	150a8 <sqr_n_mul_mont_383>
   15f20:	9401      	str	r4, [sp, #4]
   15f22:	9600      	str	r6, [sp, #0]
   15f24:	465b      	mov	r3, fp
   15f26:	2205      	movs	r2, #5
   15f28:	a904      	add	r1, sp, #16
   15f2a:	4608      	mov	r0, r1
   15f2c:	f7ff f8bc 	bl	150a8 <sqr_n_mul_mont_383>
   15f30:	9401      	str	r4, [sp, #4]
   15f32:	9600      	str	r6, [sp, #0]
   15f34:	465b      	mov	r3, fp
   15f36:	2205      	movs	r2, #5
   15f38:	a904      	add	r1, sp, #16
   15f3a:	4608      	mov	r0, r1
   15f3c:	f7ff f8b4 	bl	150a8 <sqr_n_mul_mont_383>
   15f40:	f8cd 9004 	str.w	r9, [sp, #4]
   15f44:	9600      	str	r6, [sp, #0]
   15f46:	465b      	mov	r3, fp
   15f48:	2204      	movs	r2, #4
   15f4a:	a904      	add	r1, sp, #16
   15f4c:	4608      	mov	r0, r1
   15f4e:	f7ff f8ab 	bl	150a8 <sqr_n_mul_mont_383>
   15f52:	ab4c      	add	r3, sp, #304	; 0x130
   15f54:	9301      	str	r3, [sp, #4]
   15f56:	9600      	str	r6, [sp, #0]
   15f58:	465b      	mov	r3, fp
   15f5a:	2204      	movs	r2, #4
   15f5c:	a904      	add	r1, sp, #16
   15f5e:	4608      	mov	r0, r1
   15f60:	f7ff f8a2 	bl	150a8 <sqr_n_mul_mont_383>
   15f64:	9401      	str	r4, [sp, #4]
   15f66:	9600      	str	r6, [sp, #0]
   15f68:	465b      	mov	r3, fp
   15f6a:	2207      	movs	r2, #7
   15f6c:	a904      	add	r1, sp, #16
   15f6e:	4608      	mov	r0, r1
   15f70:	f7ff f89a 	bl	150a8 <sqr_n_mul_mont_383>
   15f74:	f8cd a004 	str.w	sl, [sp, #4]
   15f78:	9600      	str	r6, [sp, #0]
   15f7a:	465b      	mov	r3, fp
   15f7c:	2205      	movs	r2, #5
   15f7e:	a904      	add	r1, sp, #16
   15f80:	4608      	mov	r0, r1
   15f82:	f7ff f891 	bl	150a8 <sqr_n_mul_mont_383>
   15f86:	ae34      	add	r6, sp, #208	; 0xd0
   15f88:	9601      	str	r6, [sp, #4]
   15f8a:	4d2b      	ldr	r5, [pc, #172]	; (16038 <recip_sqrt_fp_3mod4+0x5e8>)
   15f8c:	9500      	str	r5, [sp, #0]
   15f8e:	465b      	mov	r3, fp
   15f90:	2205      	movs	r2, #5
   15f92:	a904      	add	r1, sp, #16
   15f94:	4608      	mov	r0, r1
   15f96:	f7ff f887 	bl	150a8 <sqr_n_mul_mont_383>
   15f9a:	9601      	str	r6, [sp, #4]
   15f9c:	9500      	str	r5, [sp, #0]
   15f9e:	465b      	mov	r3, fp
   15fa0:	2205      	movs	r2, #5
   15fa2:	a904      	add	r1, sp, #16
   15fa4:	4608      	mov	r0, r1
   15fa6:	f7ff f87f 	bl	150a8 <sqr_n_mul_mont_383>
   15faa:	9601      	str	r6, [sp, #4]
   15fac:	9500      	str	r5, [sp, #0]
   15fae:	465b      	mov	r3, fp
   15fb0:	2205      	movs	r2, #5
   15fb2:	a904      	add	r1, sp, #16
   15fb4:	4608      	mov	r0, r1
   15fb6:	f7ff f877 	bl	150a8 <sqr_n_mul_mont_383>
   15fba:	9601      	str	r6, [sp, #4]
   15fbc:	9500      	str	r5, [sp, #0]
   15fbe:	465b      	mov	r3, fp
   15fc0:	2205      	movs	r2, #5
   15fc2:	a904      	add	r1, sp, #16
   15fc4:	4608      	mov	r0, r1
   15fc6:	f7ff f86f 	bl	150a8 <sqr_n_mul_mont_383>
   15fca:	9601      	str	r6, [sp, #4]
   15fcc:	9500      	str	r5, [sp, #0]
   15fce:	465b      	mov	r3, fp
   15fd0:	2205      	movs	r2, #5
   15fd2:	a904      	add	r1, sp, #16
   15fd4:	4608      	mov	r0, r1
   15fd6:	f7ff f867 	bl	150a8 <sqr_n_mul_mont_383>
   15fda:	9601      	str	r6, [sp, #4]
   15fdc:	9500      	str	r5, [sp, #0]
   15fde:	465b      	mov	r3, fp
   15fe0:	2205      	movs	r2, #5
   15fe2:	a904      	add	r1, sp, #16
   15fe4:	4608      	mov	r0, r1
   15fe6:	f7ff f85f 	bl	150a8 <sqr_n_mul_mont_383>
   15fea:	f8cd 8004 	str.w	r8, [sp, #4]
   15fee:	9500      	str	r5, [sp, #0]
   15ff0:	465b      	mov	r3, fp
   15ff2:	2204      	movs	r2, #4
   15ff4:	a904      	add	r1, sp, #16
   15ff6:	4608      	mov	r0, r1
   15ff8:	f7ff f856 	bl	150a8 <sqr_n_mul_mont_383>
   15ffc:	ab1c      	add	r3, sp, #112	; 0x70
   15ffe:	9301      	str	r3, [sp, #4]
   16000:	9500      	str	r5, [sp, #0]
   16002:	465b      	mov	r3, fp
   16004:	2206      	movs	r2, #6
   16006:	a904      	add	r1, sp, #16
   16008:	4608      	mov	r0, r1
   1600a:	f7ff f84d 	bl	150a8 <sqr_n_mul_mont_383>
   1600e:	ab10      	add	r3, sp, #64	; 0x40
   16010:	9301      	str	r3, [sp, #4]
   16012:	9500      	str	r5, [sp, #0]
   16014:	465b      	mov	r3, fp
   16016:	2204      	movs	r2, #4
   16018:	a904      	add	r1, sp, #16
   1601a:	4608      	mov	r0, r1
   1601c:	f7ff f844 	bl	150a8 <sqr_n_mul_mont_383>
   16020:	9701      	str	r7, [sp, #4]
   16022:	9500      	str	r5, [sp, #0]
   16024:	465b      	mov	r3, fp
   16026:	aa04      	add	r2, sp, #16
   16028:	4611      	mov	r1, r2
   1602a:	9803      	ldr	r0, [sp, #12]
   1602c:	f7fa fcd0 	bl	109d0 <mul_mont_n>
   16030:	f50d 7d45 	add.w	sp, sp, #788	; 0x314
   16034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16038:	fffcfffd 	.word	0xfffcfffd

0001603c <sqrt_fp>:
   1603c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16040:	b09a      	sub	sp, #104	; 0x68
   16042:	4604      	mov	r4, r0
   16044:	460d      	mov	r5, r1
   16046:	a80e      	add	r0, sp, #56	; 0x38
   16048:	f7ff fd02 	bl	15a50 <recip_sqrt_fp_3mod4>
   1604c:	4e1a      	ldr	r6, [pc, #104]	; (160b8 <sqrt_fp+0x7c>)
   1604e:	f04f 080c 	mov.w	r8, #12
   16052:	f8cd 8004 	str.w	r8, [sp, #4]
   16056:	4f19      	ldr	r7, [pc, #100]	; (160bc <sqrt_fp+0x80>)
   16058:	9700      	str	r7, [sp, #0]
   1605a:	4633      	mov	r3, r6
   1605c:	462a      	mov	r2, r5
   1605e:	a90e      	add	r1, sp, #56	; 0x38
   16060:	4608      	mov	r0, r1
   16062:	f7fa fcb5 	bl	109d0 <mul_mont_n>
   16066:	f8cd 8004 	str.w	r8, [sp, #4]
   1606a:	9700      	str	r7, [sp, #0]
   1606c:	4633      	mov	r3, r6
   1606e:	aa0e      	add	r2, sp, #56	; 0x38
   16070:	4611      	mov	r1, r2
   16072:	a802      	add	r0, sp, #8
   16074:	f7fa fcac 	bl	109d0 <mul_mont_n>
   16078:	f10d 0e08 	add.w	lr, sp, #8
   1607c:	f1a5 0c04 	sub.w	ip, r5, #4
   16080:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   16084:	2200      	movs	r2, #0
   16086:	f85e 3b04 	ldr.w	r3, [lr], #4
   1608a:	f85c 0f04 	ldr.w	r0, [ip, #4]!
   1608e:	4043      	eors	r3, r0
   16090:	431a      	orrs	r2, r3
   16092:	458c      	cmp	ip, r1
   16094:	d1f7      	bne.n	16086 <sqrt_fp+0x4a>
   16096:	1e50      	subs	r0, r2, #1
   16098:	ea20 0002 	bic.w	r0, r0, r2
   1609c:	0fc0      	lsrs	r0, r0, #31
   1609e:	a90e      	add	r1, sp, #56	; 0x38
   160a0:	1f23      	subs	r3, r4, #4
   160a2:	342c      	adds	r4, #44	; 0x2c
   160a4:	f851 2b04 	ldr.w	r2, [r1], #4
   160a8:	f843 2f04 	str.w	r2, [r3, #4]!
   160ac:	42a3      	cmp	r3, r4
   160ae:	d1f9      	bne.n	160a4 <sqrt_fp+0x68>
   160b0:	b01a      	add	sp, #104	; 0x68
   160b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   160b6:	bf00      	nop
   160b8:	00028738 	.word	0x00028738
   160bc:	fffcfffd 	.word	0xfffcfffd

000160c0 <POINTonE1_Uncompress>:
   160c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160c4:	b0b3      	sub	sp, #204	; 0xcc
   160c6:	780d      	ldrb	r5, [r1, #0]
   160c8:	f991 3000 	ldrsb.w	r3, [r1]
   160cc:	2b00      	cmp	r3, #0
   160ce:	f280 80be 	bge.w	1624e <POINTonE1_Uncompress+0x18e>
   160d2:	4604      	mov	r4, r0
   160d4:	f015 0640 	ands.w	r6, r5, #64	; 0x40
   160d8:	d01a      	beq.n	16110 <POINTonE1_Uncompress+0x50>
   160da:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   160de:	3d01      	subs	r5, #1
   160e0:	0fed      	lsrs	r5, r5, #31
   160e2:	460b      	mov	r3, r1
   160e4:	312f      	adds	r1, #47	; 0x2f
   160e6:	2200      	movs	r2, #0
   160e8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   160ec:	4302      	orrs	r2, r0
   160ee:	4299      	cmp	r1, r3
   160f0:	d1fa      	bne.n	160e8 <POINTonE1_Uncompress+0x28>
   160f2:	3a01      	subs	r2, #1
   160f4:	ea15 73d2 	ands.w	r3, r5, r2, lsr #31
   160f8:	f000 80ae 	beq.w	16258 <POINTonE1_Uncompress+0x198>
   160fc:	4623      	mov	r3, r4
   160fe:	f104 0160 	add.w	r1, r4, #96	; 0x60
   16102:	2200      	movs	r2, #0
   16104:	f843 2b04 	str.w	r2, [r3], #4
   16108:	4299      	cmp	r1, r3
   1610a:	d1fb      	bne.n	16104 <POINTonE1_Uncompress+0x44>
   1610c:	2600      	movs	r6, #0
   1610e:	e09f      	b.n	16250 <POINTonE1_Uncompress+0x190>
   16110:	f101 0c30 	add.w	ip, r1, #48	; 0x30
   16114:	460a      	mov	r2, r1
   16116:	2000      	movs	r0, #0
   16118:	312f      	adds	r1, #47	; 0x2f
   1611a:	1a8b      	subs	r3, r1, r2
   1611c:	f812 7b01 	ldrb.w	r7, [r2], #1
   16120:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
   16124:	f023 0303 	bic.w	r3, r3, #3
   16128:	af32      	add	r7, sp, #200	; 0xc8
   1612a:	443b      	add	r3, r7
   1612c:	f843 0c60 	str.w	r0, [r3, #-96]
   16130:	4562      	cmp	r2, ip
   16132:	d1f2      	bne.n	1611a <POINTonE1_Uncompress+0x5a>
   16134:	9b25      	ldr	r3, [sp, #148]	; 0x94
   16136:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   1613a:	9325      	str	r3, [sp, #148]	; 0x94
   1613c:	4b4b      	ldr	r3, [pc, #300]	; (1626c <POINTonE1_Uncompress+0x1ac>)
   1613e:	f10d 0868 	add.w	r8, sp, #104	; 0x68
   16142:	220c      	movs	r2, #12
   16144:	9200      	str	r2, [sp, #0]
   16146:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
   1614a:	4641      	mov	r1, r8
   1614c:	a802      	add	r0, sp, #8
   1614e:	f7fa fde7 	bl	10d20 <add_mod_n>
   16152:	aa02      	add	r2, sp, #8
   16154:	46c3      	mov	fp, r8
   16156:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
   1615a:	4641      	mov	r1, r8
   1615c:	2000      	movs	r0, #0
   1615e:	f852 3b04 	ldr.w	r3, [r2], #4
   16162:	f851 7b04 	ldr.w	r7, [r1], #4
   16166:	407b      	eors	r3, r7
   16168:	4318      	orrs	r0, r3
   1616a:	4572      	cmp	r2, lr
   1616c:	d1f7      	bne.n	1615e <POINTonE1_Uncompress+0x9e>
   1616e:	1e43      	subs	r3, r0, #1
   16170:	4383      	bics	r3, r0
   16172:	d573      	bpl.n	1625c <POINTonE1_Uncompress+0x19c>
   16174:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1626c <POINTonE1_Uncompress+0x1ac>
   16178:	f04f 090c 	mov.w	r9, #12
   1617c:	f8cd 9004 	str.w	r9, [sp, #4]
   16180:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 16270 <POINTonE1_Uncompress+0x1b0>
   16184:	f8cd a000 	str.w	sl, [sp]
   16188:	4643      	mov	r3, r8
   1618a:	f508 7234 	add.w	r2, r8, #720	; 0x2d0
   1618e:	a91a      	add	r1, sp, #104	; 0x68
   16190:	4608      	mov	r0, r1
   16192:	f7fa fc1d 	bl	109d0 <mul_mont_n>
   16196:	f8cd 9004 	str.w	r9, [sp, #4]
   1619a:	f8cd a000 	str.w	sl, [sp]
   1619e:	4643      	mov	r3, r8
   161a0:	aa1a      	add	r2, sp, #104	; 0x68
   161a2:	4611      	mov	r1, r2
   161a4:	a826      	add	r0, sp, #152	; 0x98
   161a6:	f7fa fc13 	bl	109d0 <mul_mont_n>
   161aa:	f8cd 9004 	str.w	r9, [sp, #4]
   161ae:	f8cd a000 	str.w	sl, [sp]
   161b2:	4643      	mov	r3, r8
   161b4:	aa1a      	add	r2, sp, #104	; 0x68
   161b6:	a926      	add	r1, sp, #152	; 0x98
   161b8:	4608      	mov	r0, r1
   161ba:	f7fa fc09 	bl	109d0 <mul_mont_n>
   161be:	f8cd 9000 	str.w	r9, [sp]
   161c2:	4643      	mov	r3, r8
   161c4:	f108 0260 	add.w	r2, r8, #96	; 0x60
   161c8:	a926      	add	r1, sp, #152	; 0x98
   161ca:	4608      	mov	r0, r1
   161cc:	f7fa fda8 	bl	10d20 <add_mod_n>
   161d0:	a926      	add	r1, sp, #152	; 0x98
   161d2:	4608      	mov	r0, r1
   161d4:	f7ff ff32 	bl	1603c <sqrt_fp>
   161d8:	2800      	cmp	r0, #0
   161da:	d044      	beq.n	16266 <POINTonE1_Uncompress+0x1a6>
   161dc:	ab19      	add	r3, sp, #100	; 0x64
   161de:	f1a4 0804 	sub.w	r8, r4, #4
   161e2:	f10b 075c 	add.w	r7, fp, #92	; 0x5c
   161e6:	4642      	mov	r2, r8
   161e8:	f853 1f04 	ldr.w	r1, [r3, #4]!
   161ec:	f842 1f04 	str.w	r1, [r2, #4]!
   161f0:	42bb      	cmp	r3, r7
   161f2:	d1f9      	bne.n	161e8 <POINTonE1_Uncompress+0x128>
   161f4:	f104 0730 	add.w	r7, r4, #48	; 0x30
   161f8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 1626c <POINTonE1_Uncompress+0x1ac>
   161fc:	f04f 0a0c 	mov.w	sl, #12
   16200:	f8cd a000 	str.w	sl, [sp]
   16204:	4b1a      	ldr	r3, [pc, #104]	; (16270 <POINTonE1_Uncompress+0x1b0>)
   16206:	464a      	mov	r2, r9
   16208:	4639      	mov	r1, r7
   1620a:	a80e      	add	r0, sp, #56	; 0x38
   1620c:	f7fa ff12 	bl	11034 <from_mont_n>
   16210:	4652      	mov	r2, sl
   16212:	4649      	mov	r1, r9
   16214:	a80e      	add	r0, sp, #56	; 0x38
   16216:	f7fb f822 	bl	1125e <sgn0_pty_mod_n>
   1621a:	2803      	cmp	r0, #3
   1621c:	d820      	bhi.n	16260 <POINTonE1_Uncompress+0x1a0>
   1621e:	f3c5 1540 	ubfx	r5, r5, #5, #1
   16222:	230c      	movs	r3, #12
   16224:	9300      	str	r3, [sp, #0]
   16226:	4b11      	ldr	r3, [pc, #68]	; (1626c <POINTonE1_Uncompress+0x1ac>)
   16228:	ea85 0250 	eor.w	r2, r5, r0, lsr #1
   1622c:	4639      	mov	r1, r7
   1622e:	4638      	mov	r0, r7
   16230:	f7fb fc0a 	bl	11a48 <cneg_mod_n>
   16234:	342c      	adds	r4, #44	; 0x2c
   16236:	2300      	movs	r3, #0
   16238:	f858 2f04 	ldr.w	r2, [r8, #4]!
   1623c:	4313      	orrs	r3, r2
   1623e:	45a0      	cmp	r8, r4
   16240:	d1fa      	bne.n	16238 <POINTonE1_Uncompress+0x178>
   16242:	1e5a      	subs	r2, r3, #1
   16244:	ea32 0303 	bics.w	r3, r2, r3
   16248:	bf48      	it	mi
   1624a:	2603      	movmi	r6, #3
   1624c:	e000      	b.n	16250 <POINTonE1_Uncompress+0x190>
   1624e:	2601      	movs	r6, #1
   16250:	4630      	mov	r0, r6
   16252:	b033      	add	sp, #204	; 0xcc
   16254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16258:	2601      	movs	r6, #1
   1625a:	e7f9      	b.n	16250 <POINTonE1_Uncompress+0x190>
   1625c:	f04f 30ff 	mov.w	r0, #4294967295
   16260:	4240      	negs	r0, r0
   16262:	b2c6      	uxtb	r6, r0
   16264:	e7f4      	b.n	16250 <POINTonE1_Uncompress+0x190>
   16266:	f06f 0001 	mvn.w	r0, #1
   1626a:	e7f9      	b.n	16260 <POINTonE1_Uncompress+0x1a0>
   1626c:	00028738 	.word	0x00028738
   16270:	fffcfffd 	.word	0xfffcfffd

00016274 <blst_p1_uncompress>:
   16274:	b508      	push	{r3, lr}
   16276:	f7ff ff23 	bl	160c0 <POINTonE1_Uncompress>
   1627a:	bd08      	pop	{r3, pc}

0001627c <blst_p1_deserialize>:
   1627c:	b508      	push	{r3, lr}
   1627e:	780b      	ldrb	r3, [r1, #0]
   16280:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   16284:	d01a      	beq.n	162bc <blst_p1_deserialize+0x40>
   16286:	f013 0f80 	tst.w	r3, #128	; 0x80
   1628a:	d11a      	bne.n	162c2 <blst_p1_deserialize+0x46>
   1628c:	f013 0f40 	tst.w	r3, #64	; 0x40
   16290:	d024      	beq.n	162dc <blst_p1_deserialize+0x60>
   16292:	f003 0c3f 	and.w	ip, r3, #63	; 0x3f
   16296:	f10c 3cff 	add.w	ip, ip, #4294967295
   1629a:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
   1629e:	460b      	mov	r3, r1
   162a0:	315f      	adds	r1, #95	; 0x5f
   162a2:	2200      	movs	r2, #0
   162a4:	f813 ef01 	ldrb.w	lr, [r3, #1]!
   162a8:	ea42 020e 	orr.w	r2, r2, lr
   162ac:	428b      	cmp	r3, r1
   162ae:	d1f9      	bne.n	162a4 <blst_p1_deserialize+0x28>
   162b0:	3a01      	subs	r2, #1
   162b2:	ea1c 73d2 	ands.w	r3, ip, r2, lsr #31
   162b6:	d107      	bne.n	162c8 <blst_p1_deserialize+0x4c>
   162b8:	2001      	movs	r0, #1
   162ba:	e010      	b.n	162de <blst_p1_deserialize+0x62>
   162bc:	f7fc f834 	bl	12328 <POINTonE1_Deserialize_BE>
   162c0:	e00d      	b.n	162de <blst_p1_deserialize+0x62>
   162c2:	f7ff fefd 	bl	160c0 <POINTonE1_Uncompress>
   162c6:	e00a      	b.n	162de <blst_p1_deserialize+0x62>
   162c8:	4603      	mov	r3, r0
   162ca:	f100 0160 	add.w	r1, r0, #96	; 0x60
   162ce:	2200      	movs	r2, #0
   162d0:	f843 2b04 	str.w	r2, [r3], #4
   162d4:	428b      	cmp	r3, r1
   162d6:	d1fb      	bne.n	162d0 <blst_p1_deserialize+0x54>
   162d8:	2000      	movs	r0, #0
   162da:	e000      	b.n	162de <blst_p1_deserialize+0x62>
   162dc:	2001      	movs	r0, #1
   162de:	bd08      	pop	{r3, pc}

000162e0 <blst_aggregate_in_g1>:
   162e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   162e2:	b0a5      	sub	sp, #148	; 0x94
   162e4:	4605      	mov	r5, r0
   162e6:	460e      	mov	r6, r1
   162e8:	7813      	ldrb	r3, [r2, #0]
   162ea:	f013 0740 	ands.w	r7, r3, #64	; 0x40
   162ee:	d120      	bne.n	16332 <blst_aggregate_in_g1+0x52>
   162f0:	4611      	mov	r1, r2
   162f2:	f013 0f80 	tst.w	r3, #128	; 0x80
   162f6:	d12b      	bne.n	16350 <blst_aggregate_in_g1+0x70>
   162f8:	4668      	mov	r0, sp
   162fa:	f7fc f815 	bl	12328 <POINTonE1_Deserialize_BE>
   162fe:	4668      	mov	r0, sp
   16300:	f7fb fb52 	bl	119a8 <POINTonE1_affine_on_curve>
   16304:	b3b0      	cbz	r0, 16374 <blst_aggregate_in_g1+0x94>
   16306:	481d      	ldr	r0, [pc, #116]	; (1637c <blst_aggregate_in_g1+0x9c>)
   16308:	f100 0390 	add.w	r3, r0, #144	; 0x90
   1630c:	aa17      	add	r2, sp, #92	; 0x5c
   1630e:	30c0      	adds	r0, #192	; 0xc0
   16310:	f853 4b04 	ldr.w	r4, [r3], #4
   16314:	f842 4f04 	str.w	r4, [r2, #4]!
   16318:	4283      	cmp	r3, r0
   1631a:	d1f9      	bne.n	16310 <blst_aggregate_in_g1+0x30>
   1631c:	4668      	mov	r0, sp
   1631e:	f7fd f985 	bl	1362c <POINTonE1_in_G1>
   16322:	b348      	cbz	r0, 16378 <blst_aggregate_in_g1+0x98>
   16324:	b1de      	cbz	r6, 1635e <blst_aggregate_in_g1+0x7e>
   16326:	466a      	mov	r2, sp
   16328:	4631      	mov	r1, r6
   1632a:	4628      	mov	r0, r5
   1632c:	f7fc fc84 	bl	12c38 <POINTonE1_dadd_affine>
   16330:	e001      	b.n	16336 <blst_aggregate_in_g1+0x56>
   16332:	b119      	cbz	r1, 1633c <blst_aggregate_in_g1+0x5c>
   16334:	2700      	movs	r7, #0
   16336:	4638      	mov	r0, r7
   16338:	b025      	add	sp, #148	; 0x94
   1633a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1633c:	4603      	mov	r3, r0
   1633e:	f100 0190 	add.w	r1, r0, #144	; 0x90
   16342:	2200      	movs	r2, #0
   16344:	f843 2b04 	str.w	r2, [r3], #4
   16348:	4299      	cmp	r1, r3
   1634a:	d1fb      	bne.n	16344 <blst_aggregate_in_g1+0x64>
   1634c:	2700      	movs	r7, #0
   1634e:	e7f2      	b.n	16336 <blst_aggregate_in_g1+0x56>
   16350:	4668      	mov	r0, sp
   16352:	f7ff feb5 	bl	160c0 <POINTonE1_Uncompress>
   16356:	2800      	cmp	r0, #0
   16358:	d0d5      	beq.n	16306 <blst_aggregate_in_g1+0x26>
   1635a:	4607      	mov	r7, r0
   1635c:	e7eb      	b.n	16336 <blst_aggregate_in_g1+0x56>
   1635e:	f1ad 0304 	sub.w	r3, sp, #4
   16362:	3d04      	subs	r5, #4
   16364:	a923      	add	r1, sp, #140	; 0x8c
   16366:	f853 2f04 	ldr.w	r2, [r3, #4]!
   1636a:	f845 2f04 	str.w	r2, [r5, #4]!
   1636e:	428b      	cmp	r3, r1
   16370:	d1f9      	bne.n	16366 <blst_aggregate_in_g1+0x86>
   16372:	e7e0      	b.n	16336 <blst_aggregate_in_g1+0x56>
   16374:	2702      	movs	r7, #2
   16376:	e7de      	b.n	16336 <blst_aggregate_in_g1+0x56>
   16378:	2703      	movs	r7, #3
   1637a:	e7dc      	b.n	16336 <blst_aggregate_in_g1+0x56>
   1637c:	00028738 	.word	0x00028738

00016380 <blst_fp_sqrt>:
   16380:	b508      	push	{r3, lr}
   16382:	f7ff fe5b 	bl	1603c <sqrt_fp>
   16386:	bd08      	pop	{r3, pc}

00016388 <recip_sqrt_fp>:
   16388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1638c:	b09a      	sub	sp, #104	; 0x68
   1638e:	4604      	mov	r4, r0
   16390:	460d      	mov	r5, r1
   16392:	a80e      	add	r0, sp, #56	; 0x38
   16394:	f7ff fb5c 	bl	15a50 <recip_sqrt_fp_3mod4>
   16398:	4e1a      	ldr	r6, [pc, #104]	; (16404 <recip_sqrt_fp+0x7c>)
   1639a:	f04f 080c 	mov.w	r8, #12
   1639e:	f8cd 8004 	str.w	r8, [sp, #4]
   163a2:	4f19      	ldr	r7, [pc, #100]	; (16408 <recip_sqrt_fp+0x80>)
   163a4:	9700      	str	r7, [sp, #0]
   163a6:	4633      	mov	r3, r6
   163a8:	462a      	mov	r2, r5
   163aa:	a90e      	add	r1, sp, #56	; 0x38
   163ac:	a802      	add	r0, sp, #8
   163ae:	f7fa fb0f 	bl	109d0 <mul_mont_n>
   163b2:	f8cd 8004 	str.w	r8, [sp, #4]
   163b6:	9700      	str	r7, [sp, #0]
   163b8:	4633      	mov	r3, r6
   163ba:	aa02      	add	r2, sp, #8
   163bc:	4611      	mov	r1, r2
   163be:	4610      	mov	r0, r2
   163c0:	f7fa fb06 	bl	109d0 <mul_mont_n>
   163c4:	f10d 0e08 	add.w	lr, sp, #8
   163c8:	f1a5 0c04 	sub.w	ip, r5, #4
   163cc:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   163d0:	2200      	movs	r2, #0
   163d2:	f85e 3b04 	ldr.w	r3, [lr], #4
   163d6:	f85c 0f04 	ldr.w	r0, [ip, #4]!
   163da:	4043      	eors	r3, r0
   163dc:	431a      	orrs	r2, r3
   163de:	458c      	cmp	ip, r1
   163e0:	d1f7      	bne.n	163d2 <recip_sqrt_fp+0x4a>
   163e2:	1e50      	subs	r0, r2, #1
   163e4:	ea20 0002 	bic.w	r0, r0, r2
   163e8:	0fc0      	lsrs	r0, r0, #31
   163ea:	a90e      	add	r1, sp, #56	; 0x38
   163ec:	1f23      	subs	r3, r4, #4
   163ee:	342c      	adds	r4, #44	; 0x2c
   163f0:	f851 2b04 	ldr.w	r2, [r1], #4
   163f4:	f843 2f04 	str.w	r2, [r3, #4]!
   163f8:	42a3      	cmp	r3, r4
   163fa:	d1f9      	bne.n	163f0 <recip_sqrt_fp+0x68>
   163fc:	b01a      	add	sp, #104	; 0x68
   163fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16402:	bf00      	nop
   16404:	00028738 	.word	0x00028738
   16408:	fffcfffd 	.word	0xfffcfffd

0001640c <map_to_isogenous_E1>:
   1640c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16410:	b0d9      	sub	sp, #356	; 0x164
   16412:	4605      	mov	r5, r0
   16414:	460a      	mov	r2, r1
   16416:	9103      	str	r1, [sp, #12]
   16418:	4c9e      	ldr	r4, [pc, #632]	; (16694 <map_to_isogenous_E1+0x288>)
   1641a:	260c      	movs	r6, #12
   1641c:	9601      	str	r6, [sp, #4]
   1641e:	4f9e      	ldr	r7, [pc, #632]	; (16698 <map_to_isogenous_E1+0x28c>)
   16420:	9700      	str	r7, [sp, #0]
   16422:	4623      	mov	r3, r4
   16424:	a84c      	add	r0, sp, #304	; 0x130
   16426:	f7fa fad3 	bl	109d0 <mul_mont_n>
   1642a:	f8df 8270 	ldr.w	r8, [pc, #624]	; 1669c <map_to_isogenous_E1+0x290>
   1642e:	9601      	str	r6, [sp, #4]
   16430:	9700      	str	r7, [sp, #0]
   16432:	4623      	mov	r3, r4
   16434:	aa4c      	add	r2, sp, #304	; 0x130
   16436:	f508 71cc 	add.w	r1, r8, #408	; 0x198
   1643a:	a834      	add	r0, sp, #208	; 0xd0
   1643c:	f7fa fac8 	bl	109d0 <mul_mont_n>
   16440:	9601      	str	r6, [sp, #4]
   16442:	9700      	str	r7, [sp, #0]
   16444:	4623      	mov	r3, r4
   16446:	aa34      	add	r2, sp, #208	; 0xd0
   16448:	4611      	mov	r1, r2
   1644a:	a840      	add	r0, sp, #256	; 0x100
   1644c:	f7fa fac0 	bl	109d0 <mul_mont_n>
   16450:	9600      	str	r6, [sp, #0]
   16452:	4623      	mov	r3, r4
   16454:	aa34      	add	r2, sp, #208	; 0xd0
   16456:	a940      	add	r1, sp, #256	; 0x100
   16458:	4608      	mov	r0, r1
   1645a:	f7fa fc61 	bl	10d20 <add_mod_n>
   1645e:	9600      	str	r6, [sp, #0]
   16460:	4623      	mov	r3, r4
   16462:	f104 0290 	add.w	r2, r4, #144	; 0x90
   16466:	a940      	add	r1, sp, #256	; 0x100
   16468:	4628      	mov	r0, r5
   1646a:	f7fa fc59 	bl	10d20 <add_mod_n>
   1646e:	9601      	str	r6, [sp, #4]
   16470:	9700      	str	r7, [sp, #0]
   16472:	4623      	mov	r3, r4
   16474:	f508 72e4 	add.w	r2, r8, #456	; 0x1c8
   16478:	4629      	mov	r1, r5
   1647a:	4628      	mov	r0, r5
   1647c:	f7fa faa8 	bl	109d0 <mul_mont_n>
   16480:	9601      	str	r6, [sp, #4]
   16482:	9700      	str	r7, [sp, #0]
   16484:	4623      	mov	r3, r4
   16486:	462a      	mov	r2, r5
   16488:	a934      	add	r1, sp, #208	; 0xd0
   1648a:	4608      	mov	r0, r1
   1648c:	f7fa faa0 	bl	109d0 <mul_mont_n>
   16490:	f105 0a60 	add.w	sl, r5, #96	; 0x60
   16494:	9601      	str	r6, [sp, #4]
   16496:	9700      	str	r7, [sp, #0]
   16498:	4623      	mov	r3, r4
   1649a:	aa40      	add	r2, sp, #256	; 0x100
   1649c:	f508 71fc 	add.w	r1, r8, #504	; 0x1f8
   164a0:	4650      	mov	r0, sl
   164a2:	f7fa fa95 	bl	109d0 <mul_mont_n>
   164a6:	f105 025c 	add.w	r2, r5, #92	; 0x5c
   164aa:	f105 048c 	add.w	r4, r5, #140	; 0x8c
   164ae:	4613      	mov	r3, r2
   164b0:	2100      	movs	r1, #0
   164b2:	f853 0f04 	ldr.w	r0, [r3, #4]!
   164b6:	4301      	orrs	r1, r0
   164b8:	42a3      	cmp	r3, r4
   164ba:	d1fa      	bne.n	164b2 <map_to_isogenous_E1+0xa6>
   164bc:	1e4e      	subs	r6, r1, #1
   164be:	ea26 0101 	bic.w	r1, r6, r1
   164c2:	17ce      	asrs	r6, r1, #31
   164c4:	4876      	ldr	r0, [pc, #472]	; (166a0 <map_to_isogenous_E1+0x294>)
   164c6:	f850 3b04 	ldr.w	r3, [r0], #4
   164ca:	f852 1f04 	ldr.w	r1, [r2, #4]!
   164ce:	404b      	eors	r3, r1
   164d0:	4033      	ands	r3, r6
   164d2:	404b      	eors	r3, r1
   164d4:	6013      	str	r3, [r2, #0]
   164d6:	42a2      	cmp	r2, r4
   164d8:	d1f5      	bne.n	164c6 <map_to_isogenous_E1+0xba>
   164da:	4e6e      	ldr	r6, [pc, #440]	; (16694 <map_to_isogenous_E1+0x288>)
   164dc:	270c      	movs	r7, #12
   164de:	9701      	str	r7, [sp, #4]
   164e0:	4c6d      	ldr	r4, [pc, #436]	; (16698 <map_to_isogenous_E1+0x28c>)
   164e2:	9400      	str	r4, [sp, #0]
   164e4:	4633      	mov	r3, r6
   164e6:	4652      	mov	r2, sl
   164e8:	4651      	mov	r1, sl
   164ea:	a840      	add	r0, sp, #256	; 0x100
   164ec:	f7fa fa70 	bl	109d0 <mul_mont_n>
   164f0:	9701      	str	r7, [sp, #4]
   164f2:	9400      	str	r4, [sp, #0]
   164f4:	4633      	mov	r3, r6
   164f6:	aa40      	add	r2, sp, #256	; 0x100
   164f8:	4651      	mov	r1, sl
   164fa:	a81c      	add	r0, sp, #112	; 0x70
   164fc:	f7fa fa68 	bl	109d0 <mul_mont_n>
   16500:	f8df b198 	ldr.w	fp, [pc, #408]	; 1669c <map_to_isogenous_E1+0x290>
   16504:	9701      	str	r7, [sp, #4]
   16506:	9400      	str	r4, [sp, #0]
   16508:	4633      	mov	r3, r6
   1650a:	aa40      	add	r2, sp, #256	; 0x100
   1650c:	f50b 7116 	add.w	r1, fp, #600	; 0x258
   16510:	4610      	mov	r0, r2
   16512:	f7fa fa5d 	bl	109d0 <mul_mont_n>
   16516:	9701      	str	r7, [sp, #4]
   16518:	9400      	str	r4, [sp, #0]
   1651a:	4633      	mov	r3, r6
   1651c:	462a      	mov	r2, r5
   1651e:	4629      	mov	r1, r5
   16520:	a828      	add	r0, sp, #160	; 0xa0
   16522:	f7fa fa55 	bl	109d0 <mul_mont_n>
   16526:	9700      	str	r7, [sp, #0]
   16528:	4633      	mov	r3, r6
   1652a:	aa40      	add	r2, sp, #256	; 0x100
   1652c:	a928      	add	r1, sp, #160	; 0xa0
   1652e:	4608      	mov	r0, r1
   16530:	f7fa fbf6 	bl	10d20 <add_mod_n>
   16534:	9701      	str	r7, [sp, #4]
   16536:	9400      	str	r4, [sp, #0]
   16538:	4633      	mov	r3, r6
   1653a:	462a      	mov	r2, r5
   1653c:	a928      	add	r1, sp, #160	; 0xa0
   1653e:	4608      	mov	r0, r1
   16540:	f7fa fa46 	bl	109d0 <mul_mont_n>
   16544:	9701      	str	r7, [sp, #4]
   16546:	9400      	str	r4, [sp, #0]
   16548:	4633      	mov	r3, r6
   1654a:	aa1c      	add	r2, sp, #112	; 0x70
   1654c:	f50b 71e4 	add.w	r1, fp, #456	; 0x1c8
   16550:	a840      	add	r0, sp, #256	; 0x100
   16552:	f7fa fa3d 	bl	109d0 <mul_mont_n>
   16556:	9700      	str	r7, [sp, #0]
   16558:	4633      	mov	r3, r6
   1655a:	aa40      	add	r2, sp, #256	; 0x100
   1655c:	a928      	add	r1, sp, #160	; 0xa0
   1655e:	4608      	mov	r0, r1
   16560:	f7fa fbde 	bl	10d20 <add_mod_n>
   16564:	f105 0830 	add.w	r8, r5, #48	; 0x30
   16568:	9701      	str	r7, [sp, #4]
   1656a:	9400      	str	r4, [sp, #0]
   1656c:	4633      	mov	r3, r6
   1656e:	aa1c      	add	r2, sp, #112	; 0x70
   16570:	4611      	mov	r1, r2
   16572:	4640      	mov	r0, r8
   16574:	f7fa fa2c 	bl	109d0 <mul_mont_n>
   16578:	9701      	str	r7, [sp, #4]
   1657a:	9400      	str	r4, [sp, #0]
   1657c:	4633      	mov	r3, r6
   1657e:	aa1c      	add	r2, sp, #112	; 0x70
   16580:	a928      	add	r1, sp, #160	; 0xa0
   16582:	a840      	add	r0, sp, #256	; 0x100
   16584:	f7fa fa24 	bl	109d0 <mul_mont_n>
   16588:	9701      	str	r7, [sp, #4]
   1658a:	9400      	str	r4, [sp, #0]
   1658c:	4633      	mov	r3, r6
   1658e:	aa40      	add	r2, sp, #256	; 0x100
   16590:	4641      	mov	r1, r8
   16592:	4640      	mov	r0, r8
   16594:	f7fa fa1c 	bl	109d0 <mul_mont_n>
   16598:	4641      	mov	r1, r8
   1659a:	4640      	mov	r0, r8
   1659c:	f7ff fef4 	bl	16388 <recip_sqrt_fp>
   165a0:	4681      	mov	r9, r0
   165a2:	9701      	str	r7, [sp, #4]
   165a4:	9400      	str	r4, [sp, #0]
   165a6:	4633      	mov	r3, r6
   165a8:	aa40      	add	r2, sp, #256	; 0x100
   165aa:	4641      	mov	r1, r8
   165ac:	4640      	mov	r0, r8
   165ae:	f7fa fa0f 	bl	109d0 <mul_mont_n>
   165b2:	9701      	str	r7, [sp, #4]
   165b4:	9400      	str	r4, [sp, #0]
   165b6:	4633      	mov	r3, r6
   165b8:	f50b 7222 	add.w	r2, fp, #648	; 0x288
   165bc:	4641      	mov	r1, r8
   165be:	a810      	add	r0, sp, #64	; 0x40
   165c0:	f7fa fa06 	bl	109d0 <mul_mont_n>
   165c4:	9701      	str	r7, [sp, #4]
   165c6:	9400      	str	r4, [sp, #0]
   165c8:	4633      	mov	r3, r6
   165ca:	aa4c      	add	r2, sp, #304	; 0x130
   165cc:	a910      	add	r1, sp, #64	; 0x40
   165ce:	4608      	mov	r0, r1
   165d0:	f7fa f9fe 	bl	109d0 <mul_mont_n>
   165d4:	9701      	str	r7, [sp, #4]
   165d6:	9400      	str	r4, [sp, #0]
   165d8:	4633      	mov	r3, r6
   165da:	9a03      	ldr	r2, [sp, #12]
   165dc:	a910      	add	r1, sp, #64	; 0x40
   165de:	4608      	mov	r0, r1
   165e0:	f7fa f9f6 	bl	109d0 <mul_mont_n>
   165e4:	f1c9 0400 	rsb	r4, r9, #0
   165e8:	1f2a      	subs	r2, r5, #4
   165ea:	a834      	add	r0, sp, #208	; 0xd0
   165ec:	f105 062c 	add.w	r6, r5, #44	; 0x2c
   165f0:	f850 1b04 	ldr.w	r1, [r0], #4
   165f4:	f852 3f04 	ldr.w	r3, [r2, #4]!
   165f8:	404b      	eors	r3, r1
   165fa:	4023      	ands	r3, r4
   165fc:	404b      	eors	r3, r1
   165fe:	6013      	str	r3, [r2, #0]
   16600:	42b2      	cmp	r2, r6
   16602:	d1f5      	bne.n	165f0 <map_to_isogenous_E1+0x1e4>
   16604:	f105 022c 	add.w	r2, r5, #44	; 0x2c
   16608:	a810      	add	r0, sp, #64	; 0x40
   1660a:	f105 065c 	add.w	r6, r5, #92	; 0x5c
   1660e:	f850 1b04 	ldr.w	r1, [r0], #4
   16612:	f852 3f04 	ldr.w	r3, [r2, #4]!
   16616:	404b      	eors	r3, r1
   16618:	4023      	ands	r3, r4
   1661a:	404b      	eors	r3, r1
   1661c:	6013      	str	r3, [r2, #0]
   1661e:	4296      	cmp	r6, r2
   16620:	d1f5      	bne.n	1660e <map_to_isogenous_E1+0x202>
   16622:	4f1d      	ldr	r7, [pc, #116]	; (16698 <map_to_isogenous_E1+0x28c>)
   16624:	4c1b      	ldr	r4, [pc, #108]	; (16694 <map_to_isogenous_E1+0x288>)
   16626:	260c      	movs	r6, #12
   16628:	9600      	str	r6, [sp, #0]
   1662a:	463b      	mov	r3, r7
   1662c:	4622      	mov	r2, r4
   1662e:	9903      	ldr	r1, [sp, #12]
   16630:	a804      	add	r0, sp, #16
   16632:	f7fa fcff 	bl	11034 <from_mont_n>
   16636:	4632      	mov	r2, r6
   16638:	4621      	mov	r1, r4
   1663a:	a804      	add	r0, sp, #16
   1663c:	f7fa fe0f 	bl	1125e <sgn0_pty_mod_n>
   16640:	4681      	mov	r9, r0
   16642:	9600      	str	r6, [sp, #0]
   16644:	463b      	mov	r3, r7
   16646:	4622      	mov	r2, r4
   16648:	4641      	mov	r1, r8
   1664a:	a804      	add	r0, sp, #16
   1664c:	f7fa fcf2 	bl	11034 <from_mont_n>
   16650:	4632      	mov	r2, r6
   16652:	4621      	mov	r1, r4
   16654:	a804      	add	r0, sp, #16
   16656:	f7fa fe02 	bl	1125e <sgn0_pty_mod_n>
   1665a:	ea80 0209 	eor.w	r2, r0, r9
   1665e:	9600      	str	r6, [sp, #0]
   16660:	4623      	mov	r3, r4
   16662:	f002 0201 	and.w	r2, r2, #1
   16666:	4641      	mov	r1, r8
   16668:	4640      	mov	r0, r8
   1666a:	f7fb f9ed 	bl	11a48 <cneg_mod_n>
   1666e:	9601      	str	r6, [sp, #4]
   16670:	9700      	str	r7, [sp, #0]
   16672:	4623      	mov	r3, r4
   16674:	4652      	mov	r2, sl
   16676:	4629      	mov	r1, r5
   16678:	4628      	mov	r0, r5
   1667a:	f7fa f9a9 	bl	109d0 <mul_mont_n>
   1667e:	9601      	str	r6, [sp, #4]
   16680:	9700      	str	r7, [sp, #0]
   16682:	4623      	mov	r3, r4
   16684:	aa1c      	add	r2, sp, #112	; 0x70
   16686:	4641      	mov	r1, r8
   16688:	4640      	mov	r0, r8
   1668a:	f7fa f9a1 	bl	109d0 <mul_mont_n>
   1668e:	b059      	add	sp, #356	; 0x164
   16690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16694:	00028738 	.word	0x00028738
   16698:	fffcfffd 	.word	0xfffcfffd
   1669c:	00029830 	.word	0x00029830
   166a0:	00029a58 	.word	0x00029a58

000166a4 <map_to_g1>:
   166a4:	b530      	push	{r4, r5, lr}
   166a6:	b0a5      	sub	sp, #148	; 0x94
   166a8:	4604      	mov	r4, r0
   166aa:	4615      	mov	r5, r2
   166ac:	4668      	mov	r0, sp
   166ae:	f7ff fead 	bl	1640c <map_to_isogenous_E1>
   166b2:	b14d      	cbz	r5, 166c8 <map_to_g1+0x24>
   166b4:	4629      	mov	r1, r5
   166b6:	4620      	mov	r0, r4
   166b8:	f7ff fea8 	bl	1640c <map_to_isogenous_E1>
   166bc:	4b16      	ldr	r3, [pc, #88]	; (16718 <map_to_g1+0x74>)
   166be:	4622      	mov	r2, r4
   166c0:	4669      	mov	r1, sp
   166c2:	4668      	mov	r0, sp
   166c4:	f7fc fc2a 	bl	12f1c <POINTonE1_dadd>
   166c8:	4669      	mov	r1, sp
   166ca:	4668      	mov	r0, sp
   166cc:	f7fc f839 	bl	12742 <isogeny_map_to_E1>
   166d0:	4669      	mov	r1, sp
   166d2:	4620      	mov	r0, r4
   166d4:	f7fb fbc6 	bl	11e64 <POINTonE1_double>
   166d8:	466a      	mov	r2, sp
   166da:	4621      	mov	r1, r4
   166dc:	4620      	mov	r0, r4
   166de:	f7fb fec5 	bl	1246c <POINTonE1_add>
   166e2:	466a      	mov	r2, sp
   166e4:	2102      	movs	r1, #2
   166e6:	4620      	mov	r0, r4
   166e8:	f7fc ff8c 	bl	13604 <POINTonE1_dbl_n_add>
   166ec:	466a      	mov	r2, sp
   166ee:	2103      	movs	r1, #3
   166f0:	4620      	mov	r0, r4
   166f2:	f7fc ff87 	bl	13604 <POINTonE1_dbl_n_add>
   166f6:	466a      	mov	r2, sp
   166f8:	2109      	movs	r1, #9
   166fa:	4620      	mov	r0, r4
   166fc:	f7fc ff82 	bl	13604 <POINTonE1_dbl_n_add>
   16700:	466a      	mov	r2, sp
   16702:	2120      	movs	r1, #32
   16704:	4620      	mov	r0, r4
   16706:	f7fc ff7d 	bl	13604 <POINTonE1_dbl_n_add>
   1670a:	466a      	mov	r2, sp
   1670c:	2110      	movs	r1, #16
   1670e:	4620      	mov	r0, r4
   16710:	f7fc ff78 	bl	13604 <POINTonE1_dbl_n_add>
   16714:	b025      	add	sp, #148	; 0x94
   16716:	bd30      	pop	{r4, r5, pc}
   16718:	00029a88 	.word	0x00029a88

0001671c <blst_map_to_g1>:
   1671c:	b508      	push	{r3, lr}
   1671e:	f7ff ffc1 	bl	166a4 <map_to_g1>
   16722:	bd08      	pop	{r3, pc}

00016724 <sqr_mont_382x>:
   16724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16728:	b09b      	sub	sp, #108	; 0x6c
   1672a:	4607      	mov	r7, r0
   1672c:	4615      	mov	r5, r2
   1672e:	4698      	mov	r8, r3
   16730:	1f0b      	subs	r3, r1, #4
   16732:	ae0e      	add	r6, sp, #56	; 0x38
   16734:	f101 002c 	add.w	r0, r1, #44	; 0x2c
   16738:	46b2      	mov	sl, r6
   1673a:	469e      	mov	lr, r3
   1673c:	f04f 0b00 	mov.w	fp, #0
   16740:	46d9      	mov	r9, fp
   16742:	f85e 4f04 	ldr.w	r4, [lr, #4]!
   16746:	f8de 2030 	ldr.w	r2, [lr, #48]	; 0x30
   1674a:	eb14 0c02 	adds.w	ip, r4, r2
   1674e:	eb49 0209 	adc.w	r2, r9, r9
   16752:	eb1c 040b 	adds.w	r4, ip, fp
   16756:	f84a 4b04 	str.w	r4, [sl], #4
   1675a:	f142 0b00 	adc.w	fp, r2, #0
   1675e:	4586      	cmp	lr, r0
   16760:	d1ef      	bne.n	16742 <sqr_mont_382x+0x1e>
   16762:	f10d 0e08 	add.w	lr, sp, #8
   16766:	2200      	movs	r2, #0
   16768:	4694      	mov	ip, r2
   1676a:	f853 4f04 	ldr.w	r4, [r3, #4]!
   1676e:	1aa4      	subs	r4, r4, r2
   16770:	eb6c 090c 	sbc.w	r9, ip, ip
   16774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   16776:	1aa2      	subs	r2, r4, r2
   16778:	f169 0400 	sbc.w	r4, r9, #0
   1677c:	f84e 2b04 	str.w	r2, [lr], #4
   16780:	f004 0201 	and.w	r2, r4, #1
   16784:	4283      	cmp	r3, r0
   16786:	d1f0      	bne.n	1676a <sqr_mont_382x+0x46>
   16788:	4254      	negs	r4, r2
   1678a:	230c      	movs	r3, #12
   1678c:	9301      	str	r3, [sp, #4]
   1678e:	f8cd 8000 	str.w	r8, [sp]
   16792:	462b      	mov	r3, r5
   16794:	f101 0230 	add.w	r2, r1, #48	; 0x30
   16798:	f107 0030 	add.w	r0, r7, #48	; 0x30
   1679c:	f7fa fda1 	bl	112e2 <mul_mont_nonred_n>
   167a0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   167a4:	f107 005c 	add.w	r0, r7, #92	; 0x5c
   167a8:	2300      	movs	r3, #0
   167aa:	f852 1f04 	ldr.w	r1, [r2, #4]!
   167ae:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
   167b2:	6013      	str	r3, [r2, #0]
   167b4:	0fcb      	lsrs	r3, r1, #31
   167b6:	4282      	cmp	r2, r0
   167b8:	d1f7      	bne.n	167aa <sqr_mont_382x+0x86>
   167ba:	230c      	movs	r3, #12
   167bc:	9301      	str	r3, [sp, #4]
   167be:	f8cd 8000 	str.w	r8, [sp]
   167c2:	462b      	mov	r3, r5
   167c4:	aa02      	add	r2, sp, #8
   167c6:	a90e      	add	r1, sp, #56	; 0x38
   167c8:	4638      	mov	r0, r7
   167ca:	f7fa fd8a 	bl	112e2 <mul_mont_nonred_n>
   167ce:	f1a7 0c04 	sub.w	ip, r7, #4
   167d2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   167d6:	4667      	mov	r7, ip
   167d8:	2100      	movs	r1, #0
   167da:	468e      	mov	lr, r1
   167dc:	f856 2b04 	ldr.w	r2, [r6], #4
   167e0:	f857 3f04 	ldr.w	r3, [r7, #4]!
   167e4:	1a5b      	subs	r3, r3, r1
   167e6:	eb6e 010e 	sbc.w	r1, lr, lr
   167ea:	4022      	ands	r2, r4
   167ec:	1a9b      	subs	r3, r3, r2
   167ee:	f161 0100 	sbc.w	r1, r1, #0
   167f2:	603b      	str	r3, [r7, #0]
   167f4:	f001 0101 	and.w	r1, r1, #1
   167f8:	42b8      	cmp	r0, r7
   167fa:	d1ef      	bne.n	167dc <sqr_mont_382x+0xb8>
   167fc:	4249      	negs	r1, r1
   167fe:	3d04      	subs	r5, #4
   16800:	2600      	movs	r6, #0
   16802:	4632      	mov	r2, r6
   16804:	f855 3f04 	ldr.w	r3, [r5, #4]!
   16808:	400b      	ands	r3, r1
   1680a:	f85c 4f04 	ldr.w	r4, [ip, #4]!
   1680e:	19a4      	adds	r4, r4, r6
   16810:	eb42 0602 	adc.w	r6, r2, r2
   16814:	191b      	adds	r3, r3, r4
   16816:	f8cc 3000 	str.w	r3, [ip]
   1681a:	f146 0600 	adc.w	r6, r6, #0
   1681e:	4584      	cmp	ip, r0
   16820:	d1f0      	bne.n	16804 <sqr_mont_382x+0xe0>
   16822:	b01b      	add	sp, #108	; 0x6c
   16824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016828 <ct_inverse_mod_383>:
   16828:	b510      	push	{r4, lr}
   1682a:	b082      	sub	sp, #8
   1682c:	240c      	movs	r4, #12
   1682e:	9400      	str	r4, [sp, #0]
   16830:	f7fc fff2 	bl	13818 <ct_inverse_mod_n>
   16834:	b002      	add	sp, #8
   16836:	bd10      	pop	{r4, pc}

00016838 <div_3_limbs>:
   16838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1683c:	4696      	mov	lr, r2
   1683e:	6802      	ldr	r2, [r0, #0]
   16840:	6840      	ldr	r0, [r0, #4]
   16842:	2620      	movs	r6, #32
   16844:	2400      	movs	r4, #0
   16846:	4625      	mov	r5, r4
   16848:	1a57      	subs	r7, r2, r1
   1684a:	1a53      	subs	r3, r2, r1
   1684c:	eb65 0c05 	sbc.w	ip, r5, r5
   16850:	f00c 0c01 	and.w	ip, ip, #1
   16854:	ebb0 080e 	subs.w	r8, r0, lr
   16858:	eb65 0305 	sbc.w	r3, r5, r5
   1685c:	ebb8 0c0c 	subs.w	ip, r8, ip
   16860:	f163 0300 	sbc.w	r3, r3, #0
   16864:	407a      	eors	r2, r7
   16866:	401a      	ands	r2, r3
   16868:	407a      	eors	r2, r7
   1686a:	ea8c 0000 	eor.w	r0, ip, r0
   1686e:	4018      	ands	r0, r3
   16870:	ea80 000c 	eor.w	r0, r0, ip
   16874:	f083 0301 	eor.w	r3, r3, #1
   16878:	f003 0301 	and.w	r3, r3, #1
   1687c:	ea43 0444 	orr.w	r4, r3, r4, lsl #1
   16880:	ea4f 73ce 	mov.w	r3, lr, lsl #31
   16884:	ea43 0151 	orr.w	r1, r3, r1, lsr #1
   16888:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
   1688c:	3e01      	subs	r6, #1
   1688e:	d1db      	bne.n	16848 <div_3_limbs+0x10>
   16890:	2300      	movs	r3, #0
   16892:	1a51      	subs	r1, r2, r1
   16894:	eb63 0203 	sbc.w	r2, r3, r3
   16898:	f002 0201 	and.w	r2, r2, #1
   1689c:	ebb0 000e 	subs.w	r0, r0, lr
   168a0:	eb63 0303 	sbc.w	r3, r3, r3
   168a4:	1a80      	subs	r0, r0, r2
   168a6:	f163 0300 	sbc.w	r3, r3, #0
   168aa:	43db      	mvns	r3, r3
   168ac:	f003 0301 	and.w	r3, r3, #1
   168b0:	0060      	lsls	r0, r4, #1
   168b2:	ea40 70e4 	orr.w	r0, r0, r4, asr #31
   168b6:	4318      	orrs	r0, r3
   168b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000168bc <div_by_zz>:
   168bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   168c0:	f100 0418 	add.w	r4, r0, #24
   168c4:	f100 0508 	add.w	r5, r0, #8
   168c8:	f8df 8028 	ldr.w	r8, [pc, #40]	; 168f4 <div_by_zz+0x38>
   168cc:	4f0a      	ldr	r7, [pc, #40]	; (168f8 <div_by_zz+0x3c>)
   168ce:	4e0b      	ldr	r6, [pc, #44]	; (168fc <div_by_zz+0x40>)
   168d0:	4642      	mov	r2, r8
   168d2:	4639      	mov	r1, r7
   168d4:	4620      	mov	r0, r4
   168d6:	f7ff ffaf 	bl	16838 <div_3_limbs>
   168da:	4602      	mov	r2, r0
   168dc:	2304      	movs	r3, #4
   168de:	4631      	mov	r1, r6
   168e0:	f1a4 000c 	sub.w	r0, r4, #12
   168e4:	f7fa fe41 	bl	1156a <quot_rem_n>
   168e8:	3c04      	subs	r4, #4
   168ea:	42ac      	cmp	r4, r5
   168ec:	d1f0      	bne.n	168d0 <div_by_zz+0x14>
   168ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   168f2:	bf00      	nop
   168f4:	ac45a401 	.word	0xac45a401
   168f8:	0001a402 	.word	0x0001a402
   168fc:	00029ae8 	.word	0x00029ae8

00016900 <POINTonE1_mult_glv>:
   16900:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16904:	b0b3      	sub	sp, #204	; 0xcc
   16906:	4605      	mov	r5, r0
   16908:	460e      	mov	r6, r1
   1690a:	f102 0c20 	add.w	ip, r2, #32
   1690e:	2400      	movs	r4, #0
   16910:	43d0      	mvns	r0, r2
   16912:	eb00 030c 	add.w	r3, r0, ip
   16916:	f81c 1d01 	ldrb.w	r1, [ip, #-1]!
   1691a:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
   1691e:	f023 0303 	bic.w	r3, r3, #3
   16922:	a932      	add	r1, sp, #200	; 0xc8
   16924:	440b      	add	r3, r1
   16926:	f843 4c20 	str.w	r4, [r3, #-32]
   1692a:	4562      	cmp	r2, ip
   1692c:	d1f1      	bne.n	16912 <POINTonE1_mult_glv+0x12>
   1692e:	ac2a      	add	r4, sp, #168	; 0xa8
   16930:	4620      	mov	r0, r4
   16932:	f7ff ffc3 	bl	168bc <div_by_zz>
   16936:	af06      	add	r7, sp, #24
   16938:	4631      	mov	r1, r6
   1693a:	4638      	mov	r0, r7
   1693c:	f7fa f921 	bl	10b82 <sigma>
   16940:	2101      	movs	r1, #1
   16942:	4638      	mov	r0, r7
   16944:	f7fb f8de 	bl	11b04 <POINTonE1_cneg>
   16948:	9602      	str	r6, [sp, #8]
   1694a:	ab2e      	add	r3, sp, #184	; 0xb8
   1694c:	9304      	str	r3, [sp, #16]
   1694e:	9703      	str	r7, [sp, #12]
   16950:	9405      	str	r4, [sp, #20]
   16952:	2300      	movs	r3, #0
   16954:	9301      	str	r3, [sp, #4]
   16956:	2380      	movs	r3, #128	; 0x80
   16958:	9300      	str	r3, [sp, #0]
   1695a:	ab04      	add	r3, sp, #16
   1695c:	2202      	movs	r2, #2
   1695e:	a902      	add	r1, sp, #8
   16960:	4628      	mov	r0, r5
   16962:	f7fc fc87 	bl	13274 <POINTonE1s_mult_w4>
   16966:	2101      	movs	r1, #1
   16968:	4628      	mov	r0, r5
   1696a:	f7fb f8cb 	bl	11b04 <POINTonE1_cneg>
   1696e:	3560      	adds	r5, #96	; 0x60
   16970:	4e12      	ldr	r6, [pc, #72]	; (169bc <POINTonE1_mult_glv+0xbc>)
   16972:	f106 0730 	add.w	r7, r6, #48	; 0x30
   16976:	f04f 090c 	mov.w	r9, #12
   1697a:	f8cd 9004 	str.w	r9, [sp, #4]
   1697e:	f8df 8040 	ldr.w	r8, [pc, #64]	; 169c0 <POINTonE1_mult_glv+0xc0>
   16982:	f8cd 8000 	str.w	r8, [sp]
   16986:	4633      	mov	r3, r6
   16988:	463a      	mov	r2, r7
   1698a:	4629      	mov	r1, r5
   1698c:	4628      	mov	r0, r5
   1698e:	f7fa f81f 	bl	109d0 <mul_mont_n>
   16992:	f8cd 9004 	str.w	r9, [sp, #4]
   16996:	f8cd 8000 	str.w	r8, [sp]
   1699a:	4633      	mov	r3, r6
   1699c:	463a      	mov	r2, r7
   1699e:	4629      	mov	r1, r5
   169a0:	4628      	mov	r0, r5
   169a2:	f7fa f815 	bl	109d0 <mul_mont_n>
   169a6:	4620      	mov	r0, r4
   169a8:	aa32      	add	r2, sp, #200	; 0xc8
   169aa:	2300      	movs	r3, #0
   169ac:	f840 3b04 	str.w	r3, [r0], #4
   169b0:	4290      	cmp	r0, r2
   169b2:	d1fb      	bne.n	169ac <POINTonE1_mult_glv+0xac>
   169b4:	ab2a      	add	r3, sp, #168	; 0xa8
   169b6:	b033      	add	sp, #204	; 0xcc
   169b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   169bc:	00028738 	.word	0x00028738
   169c0:	fffcfffd 	.word	0xfffcfffd

000169c4 <POINTonE1_sign>:
   169c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   169c8:	b09a      	sub	sp, #104	; 0x68
   169ca:	4680      	mov	r8, r0
   169cc:	f7ff ff98 	bl	16900 <POINTonE1_mult_glv>
   169d0:	f108 0160 	add.w	r1, r8, #96	; 0x60
   169d4:	f108 045c 	add.w	r4, r8, #92	; 0x5c
   169d8:	f108 058c 	add.w	r5, r8, #140	; 0x8c
   169dc:	4623      	mov	r3, r4
   169de:	2700      	movs	r7, #0
   169e0:	f853 2f04 	ldr.w	r2, [r3, #4]!
   169e4:	4317      	orrs	r7, r2
   169e6:	42ab      	cmp	r3, r5
   169e8:	d1fa      	bne.n	169e0 <POINTonE1_sign+0x1c>
   169ea:	a80e      	add	r0, sp, #56	; 0x38
   169ec:	f7fe fb80 	bl	150f0 <flt_reciprocal_fp>
   169f0:	4e20      	ldr	r6, [pc, #128]	; (16a74 <POINTonE1_sign+0xb0>)
   169f2:	f04f 0a0c 	mov.w	sl, #12
   169f6:	f8cd a004 	str.w	sl, [sp, #4]
   169fa:	f8df 907c 	ldr.w	r9, [pc, #124]	; 16a78 <POINTonE1_sign+0xb4>
   169fe:	f8cd 9000 	str.w	r9, [sp]
   16a02:	4633      	mov	r3, r6
   16a04:	aa0e      	add	r2, sp, #56	; 0x38
   16a06:	4611      	mov	r1, r2
   16a08:	a802      	add	r0, sp, #8
   16a0a:	f7f9 ffe1 	bl	109d0 <mul_mont_n>
   16a0e:	f8cd a004 	str.w	sl, [sp, #4]
   16a12:	f8cd 9000 	str.w	r9, [sp]
   16a16:	4633      	mov	r3, r6
   16a18:	aa02      	add	r2, sp, #8
   16a1a:	4641      	mov	r1, r8
   16a1c:	4640      	mov	r0, r8
   16a1e:	f7f9 ffd7 	bl	109d0 <mul_mont_n>
   16a22:	f8cd a004 	str.w	sl, [sp, #4]
   16a26:	f8cd 9000 	str.w	r9, [sp]
   16a2a:	4633      	mov	r3, r6
   16a2c:	aa0e      	add	r2, sp, #56	; 0x38
   16a2e:	a902      	add	r1, sp, #8
   16a30:	4608      	mov	r0, r1
   16a32:	f7f9 ffcd 	bl	109d0 <mul_mont_n>
   16a36:	f108 0030 	add.w	r0, r8, #48	; 0x30
   16a3a:	f8cd a004 	str.w	sl, [sp, #4]
   16a3e:	f8cd 9000 	str.w	r9, [sp]
   16a42:	4633      	mov	r3, r6
   16a44:	aa02      	add	r2, sp, #8
   16a46:	4601      	mov	r1, r0
   16a48:	f7f9 ffc2 	bl	109d0 <mul_mont_n>
   16a4c:	1e7b      	subs	r3, r7, #1
   16a4e:	ea23 0707 	bic.w	r7, r3, r7
   16a52:	17ff      	asrs	r7, r7, #31
   16a54:	f606 534c 	addw	r3, r6, #3404	; 0xd4c
   16a58:	f853 1f04 	ldr.w	r1, [r3, #4]!
   16a5c:	f854 2f04 	ldr.w	r2, [r4, #4]!
   16a60:	404a      	eors	r2, r1
   16a62:	403a      	ands	r2, r7
   16a64:	404a      	eors	r2, r1
   16a66:	6022      	str	r2, [r4, #0]
   16a68:	42ac      	cmp	r4, r5
   16a6a:	d1f5      	bne.n	16a58 <POINTonE1_sign+0x94>
   16a6c:	b01a      	add	sp, #104	; 0x68
   16a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16a72:	bf00      	nop
   16a74:	00028738 	.word	0x00028738
   16a78:	fffcfffd 	.word	0xfffcfffd

00016a7c <blst_sk_to_pk_in_g1>:
   16a7c:	b508      	push	{r3, lr}
   16a7e:	460a      	mov	r2, r1
   16a80:	4901      	ldr	r1, [pc, #4]	; (16a88 <blst_sk_to_pk_in_g1+0xc>)
   16a82:	f7ff ff9f 	bl	169c4 <POINTonE1_sign>
   16a86:	bd08      	pop	{r3, pc}
   16a88:	00029428 	.word	0x00029428

00016a8c <blst_sign_pk_in_g2>:
   16a8c:	b508      	push	{r3, lr}
   16a8e:	f7ff ff99 	bl	169c4 <POINTonE1_sign>
   16a92:	bd08      	pop	{r3, pc}

00016a94 <blst_sk_to_pk2_in_g1>:
   16a94:	b530      	push	{r4, r5, lr}
   16a96:	b0a5      	sub	sp, #148	; 0x94
   16a98:	4605      	mov	r5, r0
   16a9a:	460c      	mov	r4, r1
   16a9c:	4914      	ldr	r1, [pc, #80]	; (16af0 <blst_sk_to_pk2_in_g1+0x5c>)
   16a9e:	4668      	mov	r0, sp
   16aa0:	f7ff ff90 	bl	169c4 <POINTonE1_sign>
   16aa4:	b14c      	cbz	r4, 16aba <blst_sk_to_pk2_in_g1+0x26>
   16aa6:	f1ad 0304 	sub.w	r3, sp, #4
   16aaa:	1f21      	subs	r1, r4, #4
   16aac:	a817      	add	r0, sp, #92	; 0x5c
   16aae:	f853 2f04 	ldr.w	r2, [r3, #4]!
   16ab2:	f841 2f04 	str.w	r2, [r1, #4]!
   16ab6:	4283      	cmp	r3, r0
   16ab8:	d1f9      	bne.n	16aae <blst_sk_to_pk2_in_g1+0x1a>
   16aba:	b1bd      	cbz	r5, 16aec <blst_sk_to_pk2_in_g1+0x58>
   16abc:	4669      	mov	r1, sp
   16abe:	4628      	mov	r0, r5
   16ac0:	f7fe fef0 	bl	158a4 <POINTonE1_Serialize_BE>
   16ac4:	0100      	lsls	r0, r0, #4
   16ac6:	f000 0220 	and.w	r2, r0, #32
   16aca:	7828      	ldrb	r0, [r5, #0]
   16acc:	4310      	orrs	r0, r2
   16ace:	ab17      	add	r3, sp, #92	; 0x5c
   16ad0:	ac23      	add	r4, sp, #140	; 0x8c
   16ad2:	2200      	movs	r2, #0
   16ad4:	f853 1f04 	ldr.w	r1, [r3, #4]!
   16ad8:	430a      	orrs	r2, r1
   16ada:	42a3      	cmp	r3, r4
   16adc:	d1fa      	bne.n	16ad4 <blst_sk_to_pk2_in_g1+0x40>
   16ade:	1e53      	subs	r3, r2, #1
   16ae0:	ea23 0202 	bic.w	r2, r3, r2
   16ae4:	0fd2      	lsrs	r2, r2, #31
   16ae6:	ea40 1282 	orr.w	r2, r0, r2, lsl #6
   16aea:	702a      	strb	r2, [r5, #0]
   16aec:	b025      	add	sp, #148	; 0x94
   16aee:	bd30      	pop	{r4, r5, pc}
   16af0:	00029428 	.word	0x00029428

00016af4 <blst_sign_pk2_in_g2>:
   16af4:	b530      	push	{r4, r5, lr}
   16af6:	b0a5      	sub	sp, #148	; 0x94
   16af8:	4605      	mov	r5, r0
   16afa:	460c      	mov	r4, r1
   16afc:	4611      	mov	r1, r2
   16afe:	461a      	mov	r2, r3
   16b00:	4668      	mov	r0, sp
   16b02:	f7ff ff5f 	bl	169c4 <POINTonE1_sign>
   16b06:	b14c      	cbz	r4, 16b1c <blst_sign_pk2_in_g2+0x28>
   16b08:	f1ad 0304 	sub.w	r3, sp, #4
   16b0c:	1f21      	subs	r1, r4, #4
   16b0e:	a817      	add	r0, sp, #92	; 0x5c
   16b10:	f853 2f04 	ldr.w	r2, [r3, #4]!
   16b14:	f841 2f04 	str.w	r2, [r1, #4]!
   16b18:	4283      	cmp	r3, r0
   16b1a:	d1f9      	bne.n	16b10 <blst_sign_pk2_in_g2+0x1c>
   16b1c:	b1bd      	cbz	r5, 16b4e <blst_sign_pk2_in_g2+0x5a>
   16b1e:	4669      	mov	r1, sp
   16b20:	4628      	mov	r0, r5
   16b22:	f7fe febf 	bl	158a4 <POINTonE1_Serialize_BE>
   16b26:	0100      	lsls	r0, r0, #4
   16b28:	f000 0220 	and.w	r2, r0, #32
   16b2c:	7828      	ldrb	r0, [r5, #0]
   16b2e:	4310      	orrs	r0, r2
   16b30:	ab17      	add	r3, sp, #92	; 0x5c
   16b32:	ac23      	add	r4, sp, #140	; 0x8c
   16b34:	2200      	movs	r2, #0
   16b36:	f853 1f04 	ldr.w	r1, [r3, #4]!
   16b3a:	430a      	orrs	r2, r1
   16b3c:	42a3      	cmp	r3, r4
   16b3e:	d1fa      	bne.n	16b36 <blst_sign_pk2_in_g2+0x42>
   16b40:	1e53      	subs	r3, r2, #1
   16b42:	ea23 0202 	bic.w	r2, r3, r2
   16b46:	0fd2      	lsrs	r2, r2, #31
   16b48:	ea40 1282 	orr.w	r2, r0, r2, lsl #6
   16b4c:	702a      	strb	r2, [r5, #0]
   16b4e:	b025      	add	sp, #148	; 0x94
   16b50:	bd30      	pop	{r4, r5, pc}

00016b52 <blst_p1_mult>:
   16b52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16b56:	b089      	sub	sp, #36	; 0x24
   16b58:	4607      	mov	r7, r0
   16b5a:	4688      	mov	r8, r1
   16b5c:	4615      	mov	r5, r2
   16b5e:	461e      	mov	r6, r3
   16b60:	2bbf      	cmp	r3, #191	; 0xbf
   16b62:	d934      	bls.n	16bce <blst_p1_mult+0x7c>
   16b64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   16b68:	d83b      	bhi.n	16be2 <blst_p1_mult+0x90>
   16b6a:	1dd8      	adds	r0, r3, #7
   16b6c:	08c0      	lsrs	r0, r0, #3
   16b6e:	f10d 33ff 	add.w	r3, sp, #4294967295
   16b72:	466c      	mov	r4, sp
   16b74:	f10d 0e1f 	add.w	lr, sp, #31
   16b78:	f04f 39ff 	mov.w	r9, #4294967295
   16b7c:	2100      	movs	r1, #0
   16b7e:	469c      	mov	ip, r3
   16b80:	5c6a      	ldrb	r2, [r5, r1]
   16b82:	ea02 0209 	and.w	r2, r2, r9
   16b86:	f803 2f01 	strb.w	r2, [r3, #1]!
   16b8a:	f10c 0c02 	add.w	ip, ip, #2
   16b8e:	ebac 0c04 	sub.w	ip, ip, r4
   16b92:	ebac 0c00 	sub.w	ip, ip, r0
   16b96:	ea4f 79ec 	mov.w	r9, ip, asr #31
   16b9a:	eb01 71dc 	add.w	r1, r1, ip, lsr #31
   16b9e:	4573      	cmp	r3, lr
   16ba0:	d1ed      	bne.n	16b7e <blst_p1_mult+0x2c>
   16ba2:	2208      	movs	r2, #8
   16ba4:	4910      	ldr	r1, [pc, #64]	; (16be8 <blst_p1_mult+0x96>)
   16ba6:	4668      	mov	r0, sp
   16ba8:	f7f9 fd9d 	bl	106e6 <check_mod_n>
   16bac:	b190      	cbz	r0, 16bd4 <blst_p1_mult+0x82>
   16bae:	466a      	mov	r2, sp
   16bb0:	4641      	mov	r1, r8
   16bb2:	4638      	mov	r0, r7
   16bb4:	f7ff fea4 	bl	16900 <POINTonE1_mult_glv>
   16bb8:	f104 0220 	add.w	r2, r4, #32
   16bbc:	2300      	movs	r3, #0
   16bbe:	f844 3b04 	str.w	r3, [r4], #4
   16bc2:	42a2      	cmp	r2, r4
   16bc4:	d1fb      	bne.n	16bbe <blst_p1_mult+0x6c>
   16bc6:	466b      	mov	r3, sp
   16bc8:	b009      	add	sp, #36	; 0x24
   16bca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   16bce:	f7fc fc16 	bl	133fe <POINTonE1_mult_w4>
   16bd2:	e7f9      	b.n	16bc8 <blst_p1_mult+0x76>
   16bd4:	4633      	mov	r3, r6
   16bd6:	462a      	mov	r2, r5
   16bd8:	4641      	mov	r1, r8
   16bda:	4638      	mov	r0, r7
   16bdc:	f7fc fc7d 	bl	134da <POINTonE1_mult_w5>
   16be0:	e7ea      	b.n	16bb8 <blst_p1_mult+0x66>
   16be2:	f7fc fc7a 	bl	134da <POINTonE1_mult_w5>
   16be6:	e7ef      	b.n	16bc8 <blst_p1_mult+0x76>
   16be8:	00029af8 	.word	0x00029af8

00016bec <div_by_z>:
   16bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16bee:	4604      	mov	r4, r0
   16bf0:	4f0d      	ldr	r7, [pc, #52]	; (16c28 <div_by_z+0x3c>)
   16bf2:	463a      	mov	r2, r7
   16bf4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   16bf8:	3008      	adds	r0, #8
   16bfa:	f7ff fe1d 	bl	16838 <div_3_limbs>
   16bfe:	4602      	mov	r2, r0
   16c00:	1d26      	adds	r6, r4, #4
   16c02:	4d0a      	ldr	r5, [pc, #40]	; (16c2c <div_by_z+0x40>)
   16c04:	2302      	movs	r3, #2
   16c06:	4629      	mov	r1, r5
   16c08:	4630      	mov	r0, r6
   16c0a:	f7fa fcae 	bl	1156a <quot_rem_n>
   16c0e:	463a      	mov	r2, r7
   16c10:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   16c14:	4630      	mov	r0, r6
   16c16:	f7ff fe0f 	bl	16838 <div_3_limbs>
   16c1a:	4602      	mov	r2, r0
   16c1c:	2302      	movs	r3, #2
   16c1e:	4629      	mov	r1, r5
   16c20:	4620      	mov	r0, r4
   16c22:	f7fa fca2 	bl	1156a <quot_rem_n>
   16c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16c28:	d2010000 	.word	0xd2010000
   16c2c:	00029b18 	.word	0x00029b18

00016c30 <quot_rem_128>:
   16c30:	b508      	push	{r3, lr}
   16c32:	2304      	movs	r3, #4
   16c34:	f7fa fc99 	bl	1156a <quot_rem_n>
   16c38:	bd08      	pop	{r3, pc}

00016c3a <quot_rem_64>:
   16c3a:	b508      	push	{r3, lr}
   16c3c:	2302      	movs	r3, #2
   16c3e:	f7fa fc94 	bl	1156a <quot_rem_n>
   16c42:	bd08      	pop	{r3, pc}

00016c44 <blst_sha256_block_data_order>:
   16c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c48:	b099      	sub	sp, #100	; 0x64
   16c4a:	4603      	mov	r3, r0
   16c4c:	9007      	str	r0, [sp, #28]
   16c4e:	9105      	str	r1, [sp, #20]
   16c50:	6800      	ldr	r0, [r0, #0]
   16c52:	685f      	ldr	r7, [r3, #4]
   16c54:	f8d3 b008 	ldr.w	fp, [r3, #8]
   16c58:	68dd      	ldr	r5, [r3, #12]
   16c5a:	691c      	ldr	r4, [r3, #16]
   16c5c:	695e      	ldr	r6, [r3, #20]
   16c5e:	6999      	ldr	r1, [r3, #24]
   16c60:	9101      	str	r1, [sp, #4]
   16c62:	69d9      	ldr	r1, [r3, #28]
   16c64:	1e53      	subs	r3, r2, #1
   16c66:	9306      	str	r3, [sp, #24]
   16c68:	2a00      	cmp	r2, #0
   16c6a:	f000 80f0 	beq.w	16e4e <blst_sha256_block_data_order+0x20a>
   16c6e:	46b0      	mov	r8, r6
   16c70:	462e      	mov	r6, r5
   16c72:	465d      	mov	r5, fp
   16c74:	e0e2      	b.n	16e3c <blst_sha256_block_data_order+0x1f8>
   16c76:	f8cd 8004 	str.w	r8, [sp, #4]
   16c7a:	46a0      	mov	r8, r4
   16c7c:	4674      	mov	r4, lr
   16c7e:	463d      	mov	r5, r7
   16c80:	4607      	mov	r7, r0
   16c82:	4610      	mov	r0, r2
   16c84:	f81c 3c03 	ldrb.w	r3, [ip, #-3]
   16c88:	f81c 2c04 	ldrb.w	r2, [ip, #-4]
   16c8c:	0612      	lsls	r2, r2, #24
   16c8e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   16c92:	f81c 3c01 	ldrb.w	r3, [ip, #-1]
   16c96:	431a      	orrs	r2, r3
   16c98:	f81c 3c02 	ldrb.w	r3, [ip, #-2]
   16c9c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   16ca0:	f849 2b04 	str.w	r2, [r9], #4
   16ca4:	ea4f 23f4 	mov.w	r3, r4, ror #11
   16ca8:	ea83 13b4 	eor.w	r3, r3, r4, ror #6
   16cac:	ea83 6374 	eor.w	r3, r3, r4, ror #25
   16cb0:	f8dd e004 	ldr.w	lr, [sp, #4]
   16cb4:	ea2e 0e04 	bic.w	lr, lr, r4
   16cb8:	ea04 0b08 	and.w	fp, r4, r8
   16cbc:	ea8e 0e0b 	eor.w	lr, lr, fp
   16cc0:	4473      	add	r3, lr
   16cc2:	f85a ef04 	ldr.w	lr, [sl, #4]!
   16cc6:	4473      	add	r3, lr
   16cc8:	441a      	add	r2, r3
   16cca:	4411      	add	r1, r2
   16ccc:	ea4f 3370 	mov.w	r3, r0, ror #13
   16cd0:	ea83 03b0 	eor.w	r3, r3, r0, ror #2
   16cd4:	ea83 53b0 	eor.w	r3, r3, r0, ror #22
   16cd8:	ea87 0205 	eor.w	r2, r7, r5
   16cdc:	4002      	ands	r2, r0
   16cde:	ea07 0e05 	and.w	lr, r7, r5
   16ce2:	ea82 020e 	eor.w	r2, r2, lr
   16ce6:	441a      	add	r2, r3
   16ce8:	eb01 0e06 	add.w	lr, r1, r6
   16cec:	440a      	add	r2, r1
   16cee:	f10c 0c04 	add.w	ip, ip, #4
   16cf2:	462e      	mov	r6, r5
   16cf4:	9901      	ldr	r1, [sp, #4]
   16cf6:	ab18      	add	r3, sp, #96	; 0x60
   16cf8:	454b      	cmp	r3, r9
   16cfa:	d1bc      	bne.n	16c76 <blst_sha256_block_data_order+0x32>
   16cfc:	4673      	mov	r3, lr
   16cfe:	9905      	ldr	r1, [sp, #20]
   16d00:	3140      	adds	r1, #64	; 0x40
   16d02:	9105      	str	r1, [sp, #20]
   16d04:	4953      	ldr	r1, [pc, #332]	; (16e54 <blst_sha256_block_data_order+0x210>)
   16d06:	f501 7b4b 	add.w	fp, r1, #812	; 0x32c
   16d0a:	f8cd 800c 	str.w	r8, [sp, #12]
   16d0e:	9402      	str	r4, [sp, #8]
   16d10:	4680      	mov	r8, r0
   16d12:	f04f 0c10 	mov.w	ip, #16
   16d16:	f8cd b010 	str.w	fp, [sp, #16]
   16d1a:	46a9      	mov	r9, r5
   16d1c:	f8dd a004 	ldr.w	sl, [sp, #4]
   16d20:	46be      	mov	lr, r7
   16d22:	e006      	b.n	16d32 <blst_sha256_block_data_order+0xee>
   16d24:	9802      	ldr	r0, [sp, #8]
   16d26:	9003      	str	r0, [sp, #12]
   16d28:	9302      	str	r3, [sp, #8]
   16d2a:	4623      	mov	r3, r4
   16d2c:	46c6      	mov	lr, r8
   16d2e:	4690      	mov	r8, r2
   16d30:	460a      	mov	r2, r1
   16d32:	4665      	mov	r5, ip
   16d34:	f10c 0c01 	add.w	ip, ip, #1
   16d38:	f00c 010f 	and.w	r1, ip, #15
   16d3c:	a818      	add	r0, sp, #96	; 0x60
   16d3e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   16d42:	f851 6c40 	ldr.w	r6, [r1, #-64]
   16d46:	ea4f 41b6 	mov.w	r1, r6, ror #18
   16d4a:	ea81 11f6 	eor.w	r1, r1, r6, ror #7
   16d4e:	f105 000e 	add.w	r0, r5, #14
   16d52:	f000 000f 	and.w	r0, r0, #15
   16d56:	ac18      	add	r4, sp, #96	; 0x60
   16d58:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   16d5c:	f850 7c40 	ldr.w	r7, [r0, #-64]
   16d60:	ea4f 40f7 	mov.w	r0, r7, ror #19
   16d64:	ea80 4077 	eor.w	r0, r0, r7, ror #17
   16d68:	f005 040f 	and.w	r4, r5, #15
   16d6c:	3509      	adds	r5, #9
   16d6e:	f005 050f 	and.w	r5, r5, #15
   16d72:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
   16d76:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
   16d7a:	eb0b 0484 	add.w	r4, fp, r4, lsl #2
   16d7e:	f855 5c40 	ldr.w	r5, [r5, #-64]
   16d82:	f854 bc40 	ldr.w	fp, [r4, #-64]
   16d86:	445d      	add	r5, fp
   16d88:	ea81 01d6 	eor.w	r1, r1, r6, lsr #3
   16d8c:	440d      	add	r5, r1
   16d8e:	ea80 2197 	eor.w	r1, r0, r7, lsr #10
   16d92:	4429      	add	r1, r5
   16d94:	f844 1c40 	str.w	r1, [r4, #-64]
   16d98:	ea4f 25f3 	mov.w	r5, r3, ror #11
   16d9c:	ea85 15b3 	eor.w	r5, r5, r3, ror #6
   16da0:	ea85 6073 	eor.w	r0, r5, r3, ror #25
   16da4:	9e03      	ldr	r6, [sp, #12]
   16da6:	ea26 0503 	bic.w	r5, r6, r3
   16daa:	9c02      	ldr	r4, [sp, #8]
   16dac:	401c      	ands	r4, r3
   16dae:	4065      	eors	r5, r4
   16db0:	4405      	add	r5, r0
   16db2:	9c04      	ldr	r4, [sp, #16]
   16db4:	f854 0f04 	ldr.w	r0, [r4, #4]!
   16db8:	9404      	str	r4, [sp, #16]
   16dba:	4405      	add	r5, r0
   16dbc:	440d      	add	r5, r1
   16dbe:	44aa      	add	sl, r5
   16dc0:	ea4f 3172 	mov.w	r1, r2, ror #13
   16dc4:	ea81 01b2 	eor.w	r1, r1, r2, ror #2
   16dc8:	ea81 50b2 	eor.w	r0, r1, r2, ror #22
   16dcc:	ea88 010e 	eor.w	r1, r8, lr
   16dd0:	4011      	ands	r1, r2
   16dd2:	ea08 040e 	and.w	r4, r8, lr
   16dd6:	4061      	eors	r1, r4
   16dd8:	4401      	add	r1, r0
   16dda:	eb0a 0409 	add.w	r4, sl, r9
   16dde:	4451      	add	r1, sl
   16de0:	46f1      	mov	r9, lr
   16de2:	46b2      	mov	sl, r6
   16de4:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
   16de8:	d19c      	bne.n	16d24 <blst_sha256_block_data_order+0xe0>
   16dea:	4676      	mov	r6, lr
   16dec:	9d07      	ldr	r5, [sp, #28]
   16dee:	6828      	ldr	r0, [r5, #0]
   16df0:	4408      	add	r0, r1
   16df2:	4629      	mov	r1, r5
   16df4:	6028      	str	r0, [r5, #0]
   16df6:	686f      	ldr	r7, [r5, #4]
   16df8:	4417      	add	r7, r2
   16dfa:	606f      	str	r7, [r5, #4]
   16dfc:	68ad      	ldr	r5, [r5, #8]
   16dfe:	4445      	add	r5, r8
   16e00:	608d      	str	r5, [r1, #8]
   16e02:	68ca      	ldr	r2, [r1, #12]
   16e04:	4416      	add	r6, r2
   16e06:	60ce      	str	r6, [r1, #12]
   16e08:	690a      	ldr	r2, [r1, #16]
   16e0a:	4414      	add	r4, r2
   16e0c:	610c      	str	r4, [r1, #16]
   16e0e:	694a      	ldr	r2, [r1, #20]
   16e10:	eb03 0802 	add.w	r8, r3, r2
   16e14:	460a      	mov	r2, r1
   16e16:	f8c1 8014 	str.w	r8, [r1, #20]
   16e1a:	698b      	ldr	r3, [r1, #24]
   16e1c:	9902      	ldr	r1, [sp, #8]
   16e1e:	4419      	add	r1, r3
   16e20:	9101      	str	r1, [sp, #4]
   16e22:	4613      	mov	r3, r2
   16e24:	6191      	str	r1, [r2, #24]
   16e26:	69d1      	ldr	r1, [r2, #28]
   16e28:	4652      	mov	r2, sl
   16e2a:	440a      	add	r2, r1
   16e2c:	4611      	mov	r1, r2
   16e2e:	61da      	str	r2, [r3, #28]
   16e30:	9b06      	ldr	r3, [sp, #24]
   16e32:	3b01      	subs	r3, #1
   16e34:	9306      	str	r3, [sp, #24]
   16e36:	f1b3 3fff 	cmp.w	r3, #4294967295
   16e3a:	d008      	beq.n	16e4e <blst_sha256_block_data_order+0x20a>
   16e3c:	9b05      	ldr	r3, [sp, #20]
   16e3e:	f103 0c04 	add.w	ip, r3, #4
   16e42:	f10d 0920 	add.w	r9, sp, #32
   16e46:	4b03      	ldr	r3, [pc, #12]	; (16e54 <blst_sha256_block_data_order+0x210>)
   16e48:	f503 7a3b 	add.w	sl, r3, #748	; 0x2ec
   16e4c:	e71a      	b.n	16c84 <blst_sha256_block_data_order+0x40>
   16e4e:	b019      	add	sp, #100	; 0x64
   16e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e54:	00029830 	.word	0x00029830

00016e58 <blst_sha256_hcopy>:
   16e58:	1f0b      	subs	r3, r1, #4
   16e5a:	3804      	subs	r0, #4
   16e5c:	311c      	adds	r1, #28
   16e5e:	f853 2f04 	ldr.w	r2, [r3, #4]!
   16e62:	f840 2f04 	str.w	r2, [r0, #4]!
   16e66:	428b      	cmp	r3, r1
   16e68:	d1f9      	bne.n	16e5e <blst_sha256_hcopy+0x6>
   16e6a:	4770      	bx	lr

00016e6c <blst_sha256_emit>:
   16e6c:	1d03      	adds	r3, r0, #4
   16e6e:	3904      	subs	r1, #4
   16e70:	f100 0c24 	add.w	ip, r0, #36	; 0x24
   16e74:	f851 2f04 	ldr.w	r2, [r1, #4]!
   16e78:	0e10      	lsrs	r0, r2, #24
   16e7a:	f803 0c04 	strb.w	r0, [r3, #-4]
   16e7e:	0c10      	lsrs	r0, r2, #16
   16e80:	f803 0c03 	strb.w	r0, [r3, #-3]
   16e84:	0a10      	lsrs	r0, r2, #8
   16e86:	f803 0c02 	strb.w	r0, [r3, #-2]
   16e8a:	f803 2c01 	strb.w	r2, [r3, #-1]
   16e8e:	3304      	adds	r3, #4
   16e90:	4563      	cmp	r3, ip
   16e92:	d1ef      	bne.n	16e74 <blst_sha256_emit+0x8>
   16e94:	4770      	bx	lr

00016e96 <sha256_final>:
   16e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16e9a:	4607      	mov	r7, r0
   16e9c:	460c      	mov	r4, r1
   16e9e:	6a0e      	ldr	r6, [r1, #32]
   16ea0:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   16ea2:	00ed      	lsls	r5, r5, #3
   16ea4:	ea45 7556 	orr.w	r5, r5, r6, lsr #29
   16ea8:	00f6      	lsls	r6, r6, #3
   16eaa:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   16eac:	18ca      	adds	r2, r1, r3
   16eae:	2180      	movs	r1, #128	; 0x80
   16eb0:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
   16eb4:	3301      	adds	r3, #1
   16eb6:	2b38      	cmp	r3, #56	; 0x38
   16eb8:	d821      	bhi.n	16efe <sha256_final+0x68>
   16eba:	0e2b      	lsrs	r3, r5, #24
   16ebc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
   16ec0:	0c2b      	lsrs	r3, r5, #16
   16ec2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
   16ec6:	0a2b      	lsrs	r3, r5, #8
   16ec8:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
   16ecc:	f884 5063 	strb.w	r5, [r4, #99]	; 0x63
   16ed0:	0e33      	lsrs	r3, r6, #24
   16ed2:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
   16ed6:	0c33      	lsrs	r3, r6, #16
   16ed8:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
   16edc:	0a33      	lsrs	r3, r6, #8
   16ede:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
   16ee2:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
   16ee6:	2201      	movs	r2, #1
   16ee8:	f104 0128 	add.w	r1, r4, #40	; 0x28
   16eec:	4620      	mov	r0, r4
   16eee:	f7ff fea9 	bl	16c44 <blst_sha256_block_data_order>
   16ef2:	4621      	mov	r1, r4
   16ef4:	4638      	mov	r0, r7
   16ef6:	f7ff ffb9 	bl	16e6c <blst_sha256_emit>
   16efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16efe:	f104 0828 	add.w	r8, r4, #40	; 0x28
   16f02:	2201      	movs	r2, #1
   16f04:	4641      	mov	r1, r8
   16f06:	4620      	mov	r0, r4
   16f08:	f7ff fe9c 	bl	16c44 <blst_sha256_block_data_order>
   16f0c:	4643      	mov	r3, r8
   16f0e:	f104 0168 	add.w	r1, r4, #104	; 0x68
   16f12:	2200      	movs	r2, #0
   16f14:	f843 2b04 	str.w	r2, [r3], #4
   16f18:	428b      	cmp	r3, r1
   16f1a:	d1fb      	bne.n	16f14 <sha256_final+0x7e>
   16f1c:	e7cd      	b.n	16eba <sha256_final+0x24>

00016f1e <HMAC_final>:
   16f1e:	b570      	push	{r4, r5, r6, lr}
   16f20:	4605      	mov	r5, r0
   16f22:	460c      	mov	r4, r1
   16f24:	f101 06b0 	add.w	r6, r1, #176	; 0xb0
   16f28:	4630      	mov	r0, r6
   16f2a:	f7ff ffb4 	bl	16e96 <sha256_final>
   16f2e:	f104 0190 	add.w	r1, r4, #144	; 0x90
   16f32:	4620      	mov	r0, r4
   16f34:	f7ff ff90 	bl	16e58 <blst_sha256_hcopy>
   16f38:	2201      	movs	r2, #1
   16f3a:	4631      	mov	r1, r6
   16f3c:	4620      	mov	r0, r4
   16f3e:	f7ff fe81 	bl	16c44 <blst_sha256_block_data_order>
   16f42:	4621      	mov	r1, r4
   16f44:	4628      	mov	r0, r5
   16f46:	f7ff ff91 	bl	16e6c <blst_sha256_emit>
   16f4a:	bd70      	pop	{r4, r5, r6, pc}

00016f4c <blst_sha256_bcopy>:
   16f4c:	b152      	cbz	r2, 16f64 <blst_sha256_bcopy+0x18>
   16f4e:	1e4b      	subs	r3, r1, #1
   16f50:	3801      	subs	r0, #1
   16f52:	f102 3cff 	add.w	ip, r2, #4294967295
   16f56:	4461      	add	r1, ip
   16f58:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   16f5c:	f800 2f01 	strb.w	r2, [r0, #1]!
   16f60:	428b      	cmp	r3, r1
   16f62:	d1f9      	bne.n	16f58 <blst_sha256_bcopy+0xc>
   16f64:	4770      	bx	lr

00016f66 <sha256_update>:
   16f66:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16f6a:	4605      	mov	r5, r0
   16f6c:	460e      	mov	r6, r1
   16f6e:	4614      	mov	r4, r2
   16f70:	6a03      	ldr	r3, [r0, #32]
   16f72:	6a42      	ldr	r2, [r0, #36]	; 0x24
   16f74:	191b      	adds	r3, r3, r4
   16f76:	f142 0200 	adc.w	r2, r2, #0
   16f7a:	6203      	str	r3, [r0, #32]
   16f7c:	6242      	str	r2, [r0, #36]	; 0x24
   16f7e:	6e87      	ldr	r7, [r0, #104]	; 0x68
   16f80:	b1ec      	cbz	r4, 16fbe <sha256_update+0x58>
   16f82:	b1e7      	cbz	r7, 16fbe <sha256_update+0x58>
   16f84:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
   16f88:	454c      	cmp	r4, r9
   16f8a:	d31d      	bcc.n	16fc8 <sha256_update+0x62>
   16f8c:	f100 0828 	add.w	r8, r0, #40	; 0x28
   16f90:	464a      	mov	r2, r9
   16f92:	eb08 0007 	add.w	r0, r8, r7
   16f96:	f7ff ffd9 	bl	16f4c <blst_sha256_bcopy>
   16f9a:	444e      	add	r6, r9
   16f9c:	3c40      	subs	r4, #64	; 0x40
   16f9e:	443c      	add	r4, r7
   16fa0:	2201      	movs	r2, #1
   16fa2:	4641      	mov	r1, r8
   16fa4:	4628      	mov	r0, r5
   16fa6:	f7ff fe4d 	bl	16c44 <blst_sha256_block_data_order>
   16faa:	4643      	mov	r3, r8
   16fac:	f105 0168 	add.w	r1, r5, #104	; 0x68
   16fb0:	2200      	movs	r2, #0
   16fb2:	f843 2b04 	str.w	r2, [r3], #4
   16fb6:	428b      	cmp	r3, r1
   16fb8:	d1fb      	bne.n	16fb2 <sha256_update+0x4c>
   16fba:	2300      	movs	r3, #0
   16fbc:	66ab      	str	r3, [r5, #104]	; 0x68
   16fbe:	2c3f      	cmp	r4, #63	; 0x3f
   16fc0:	d80b      	bhi.n	16fda <sha256_update+0x74>
   16fc2:	b9a4      	cbnz	r4, 16fee <sha256_update+0x88>
   16fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   16fc8:	3028      	adds	r0, #40	; 0x28
   16fca:	4622      	mov	r2, r4
   16fcc:	4438      	add	r0, r7
   16fce:	f7ff ffbd 	bl	16f4c <blst_sha256_bcopy>
   16fd2:	6eab      	ldr	r3, [r5, #104]	; 0x68
   16fd4:	4423      	add	r3, r4
   16fd6:	66ab      	str	r3, [r5, #104]	; 0x68
   16fd8:	e7f4      	b.n	16fc4 <sha256_update+0x5e>
   16fda:	09a2      	lsrs	r2, r4, #6
   16fdc:	4631      	mov	r1, r6
   16fde:	4628      	mov	r0, r5
   16fe0:	f7ff fe30 	bl	16c44 <blst_sha256_block_data_order>
   16fe4:	f024 033f 	bic.w	r3, r4, #63	; 0x3f
   16fe8:	441e      	add	r6, r3
   16fea:	1ae4      	subs	r4, r4, r3
   16fec:	e7e9      	b.n	16fc2 <sha256_update+0x5c>
   16fee:	66ac      	str	r4, [r5, #104]	; 0x68
   16ff0:	4622      	mov	r2, r4
   16ff2:	4631      	mov	r1, r6
   16ff4:	f105 0028 	add.w	r0, r5, #40	; 0x28
   16ff8:	f7ff ffa8 	bl	16f4c <blst_sha256_bcopy>
   16ffc:	e7e2      	b.n	16fc4 <sha256_update+0x5e>

00016ffe <hash_to_field>:
   16ffe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17002:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
   17006:	af02      	add	r7, sp, #8
   17008:	4605      	mov	r5, r0
   1700a:	6079      	str	r1, [r7, #4]
   1700c:	f8d7 6268 	ldr.w	r6, [r7, #616]	; 0x268
   17010:	f8d7 826c 	ldr.w	r8, [r7, #620]	; 0x26c
   17014:	018c      	lsls	r4, r1, #6
   17016:	4668      	mov	r0, sp
   17018:	eba0 1181 	sub.w	r1, r0, r1, lsl #6
   1701c:	468d      	mov	sp, r1
   1701e:	f10d 0b08 	add.w	fp, sp, #8
   17022:	f1b2 0900 	subs.w	r9, r2, #0
   17026:	bf08      	it	eq
   17028:	2300      	moveq	r3, #0
   1702a:	603b      	str	r3, [r7, #0]
   1702c:	2e00      	cmp	r6, #0
   1702e:	f000 817a 	beq.w	17326 <hash_to_field+0x328>
   17032:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   17036:	f200 815b 	bhi.w	172f0 <hash_to_field+0x2f2>
   1703a:	f108 0a6a 	add.w	sl, r8, #106	; 0x6a
   1703e:	f02a 003f 	bic.w	r0, sl, #63	; 0x3f
   17042:	f507 730e 	add.w	r3, r7, #568	; 0x238
   17046:	eb03 0c00 	add.w	ip, r3, r0
   1704a:	f5ac 7cf0 	sub.w	ip, ip, #480	; 0x1e0
   1704e:	4663      	mov	r3, ip
   17050:	f10c 0140 	add.w	r1, ip, #64	; 0x40
   17054:	2200      	movs	r2, #0
   17056:	f843 2b04 	str.w	r2, [r3], #4
   1705a:	428b      	cmp	r3, r1
   1705c:	d1fb      	bne.n	17056 <hash_to_field+0x58>
   1705e:	f1b8 0f00 	cmp.w	r8, #0
   17062:	f000 8163 	beq.w	1732c <hash_to_field+0x32e>
   17066:	1e73      	subs	r3, r6, #1
   17068:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
   1706c:	f108 31ff 	add.w	r1, r8, #4294967295
   17070:	440e      	add	r6, r1
   17072:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   17076:	f802 1f01 	strb.w	r1, [r2, #1]!
   1707a:	42b3      	cmp	r3, r6
   1707c:	d1f9      	bne.n	17072 <hash_to_field+0x74>
   1707e:	4643      	mov	r3, r8
   17080:	f107 02b9 	add.w	r2, r7, #185	; 0xb9
   17084:	f802 8003 	strb.w	r8, [r2, r3]
   17088:	f107 02ba 	add.w	r2, r7, #186	; 0xba
   1708c:	2180      	movs	r1, #128	; 0x80
   1708e:	54d1      	strb	r1, [r2, r3]
   17090:	2200      	movs	r2, #0
   17092:	f107 01bb 	add.w	r1, r7, #187	; 0xbb
   17096:	54ca      	strb	r2, [r1, r3]
   17098:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
   1709c:	54ca      	strb	r2, [r1, r3]
   1709e:	f107 01bd 	add.w	r1, r7, #189	; 0xbd
   170a2:	54ca      	strb	r2, [r1, r3]
   170a4:	f107 01be 	add.w	r1, r7, #190	; 0xbe
   170a8:	54ca      	strb	r2, [r1, r3]
   170aa:	f107 01bf 	add.w	r1, r7, #191	; 0xbf
   170ae:	54ca      	strb	r2, [r1, r3]
   170b0:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
   170b4:	54ca      	strb	r2, [r1, r3]
   170b6:	f107 01c1 	add.w	r1, r7, #193	; 0xc1
   170ba:	54ca      	strb	r2, [r1, r3]
   170bc:	f108 0322 	add.w	r3, r8, #34	; 0x22
   170c0:	00da      	lsls	r2, r3, #3
   170c2:	f107 0198 	add.w	r1, r7, #152	; 0x98
   170c6:	4408      	add	r0, r1
   170c8:	f3c3 1357 	ubfx	r3, r3, #5, #24
   170cc:	f800 3c02 	strb.w	r3, [r0, #-2]
   170d0:	f800 2c01 	strb.w	r2, [r0, #-1]
   170d4:	4b96      	ldr	r3, [pc, #600]	; (17330 <hash_to_field+0x332>)
   170d6:	62bb      	str	r3, [r7, #40]	; 0x28
   170d8:	4b96      	ldr	r3, [pc, #600]	; (17334 <hash_to_field+0x336>)
   170da:	62fb      	str	r3, [r7, #44]	; 0x2c
   170dc:	4b96      	ldr	r3, [pc, #600]	; (17338 <hash_to_field+0x33a>)
   170de:	633b      	str	r3, [r7, #48]	; 0x30
   170e0:	f103 53ab 	add.w	r3, r3, #358612992	; 0x15600000
   170e4:	f503 2346 	add.w	r3, r3, #811008	; 0xc6000
   170e8:	f203 7331 	addw	r3, r3, #1841	; 0x731
   170ec:	637b      	str	r3, [r7, #52]	; 0x34
   170ee:	4b93      	ldr	r3, [pc, #588]	; (1733c <hash_to_field+0x33e>)
   170f0:	63bb      	str	r3, [r7, #56]	; 0x38
   170f2:	f103 534f 	add.w	r3, r3, #868220928	; 0x33c00000
   170f6:	f503 1332 	add.w	r3, r3, #2916352	; 0x2c8000
   170fa:	f603 53b2 	addw	r3, r3, #3506	; 0xdb2
   170fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   17100:	4b8f      	ldr	r3, [pc, #572]	; (17340 <hash_to_field+0x342>)
   17102:	643b      	str	r3, [r7, #64]	; 0x40
   17104:	4b8f      	ldr	r3, [pc, #572]	; (17344 <hash_to_field+0x346>)
   17106:	647b      	str	r3, [r7, #68]	; 0x44
   17108:	2240      	movs	r2, #64	; 0x40
   1710a:	2300      	movs	r3, #0
   1710c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
   17110:	f107 0350 	add.w	r3, r7, #80	; 0x50
   17114:	f107 0190 	add.w	r1, r7, #144	; 0x90
   17118:	2200      	movs	r2, #0
   1711a:	f843 2b04 	str.w	r2, [r3], #4
   1711e:	428b      	cmp	r3, r1
   17120:	d1fb      	bne.n	1711a <hash_to_field+0x11c>
   17122:	f107 0350 	add.w	r3, r7, #80	; 0x50
   17126:	2600      	movs	r6, #0
   17128:	f8c7 6090 	str.w	r6, [r7, #144]	; 0x90
   1712c:	683a      	ldr	r2, [r7, #0]
   1712e:	4649      	mov	r1, r9
   17130:	f107 0028 	add.w	r0, r7, #40	; 0x28
   17134:	f7ff ff17 	bl	16f66 <sha256_update>
   17138:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
   1713c:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
   17140:	f107 0028 	add.w	r0, r7, #40	; 0x28
   17144:	f7ff ff0f 	bl	16f66 <sha256_update>
   17148:	0a23      	lsrs	r3, r4, #8
   1714a:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
   1714e:	f887 40b7 	strb.w	r4, [r7, #183]	; 0xb7
   17152:	f887 60b8 	strb.w	r6, [r7, #184]	; 0xb8
   17156:	f108 0204 	add.w	r2, r8, #4
   1715a:	f107 01b6 	add.w	r1, r7, #182	; 0xb6
   1715e:	f107 0028 	add.w	r0, r7, #40	; 0x28
   17162:	f7ff ff00 	bl	16f66 <sha256_update>
   17166:	f107 0128 	add.w	r1, r7, #40	; 0x28
   1716a:	f107 0008 	add.w	r0, r7, #8
   1716e:	f7ff fe92 	bl	16e96 <sha256_final>
   17172:	4b75      	ldr	r3, [pc, #468]	; (17348 <hash_to_field+0x34a>)
   17174:	62bb      	str	r3, [r7, #40]	; 0x28
   17176:	4b75      	ldr	r3, [pc, #468]	; (1734c <hash_to_field+0x34e>)
   17178:	62fb      	str	r3, [r7, #44]	; 0x2c
   1717a:	4b75      	ldr	r3, [pc, #468]	; (17350 <hash_to_field+0x352>)
   1717c:	633b      	str	r3, [r7, #48]	; 0x30
   1717e:	4b75      	ldr	r3, [pc, #468]	; (17354 <hash_to_field+0x356>)
   17180:	637b      	str	r3, [r7, #52]	; 0x34
   17182:	4b75      	ldr	r3, [pc, #468]	; (17358 <hash_to_field+0x35a>)
   17184:	63bb      	str	r3, [r7, #56]	; 0x38
   17186:	4b75      	ldr	r3, [pc, #468]	; (1735c <hash_to_field+0x35e>)
   17188:	63fb      	str	r3, [r7, #60]	; 0x3c
   1718a:	4b75      	ldr	r3, [pc, #468]	; (17360 <hash_to_field+0x362>)
   1718c:	643b      	str	r3, [r7, #64]	; 0x40
   1718e:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   17192:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   17196:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   1719a:	647b      	str	r3, [r7, #68]	; 0x44
   1719c:	f107 0024 	add.w	r0, r7, #36	; 0x24
   171a0:	f107 0294 	add.w	r2, r7, #148	; 0x94
   171a4:	1d3b      	adds	r3, r7, #4
   171a6:	f853 1f04 	ldr.w	r1, [r3, #4]!
   171aa:	f842 1f04 	str.w	r1, [r2, #4]!
   171ae:	4283      	cmp	r3, r0
   171b0:	d1f9      	bne.n	171a6 <hash_to_field+0x1a8>
   171b2:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
   171b6:	3301      	adds	r3, #1
   171b8:	f887 30b8 	strb.w	r3, [r7, #184]	; 0xb8
   171bc:	ea4f 1a9a 	mov.w	sl, sl, lsr #6
   171c0:	4652      	mov	r2, sl
   171c2:	f107 0198 	add.w	r1, r7, #152	; 0x98
   171c6:	f107 0028 	add.w	r0, r7, #40	; 0x28
   171ca:	f7ff fd3b 	bl	16c44 <blst_sha256_block_data_order>
   171ce:	f107 0128 	add.w	r1, r7, #40	; 0x28
   171d2:	4658      	mov	r0, fp
   171d4:	f7ff fe4a 	bl	16e6c <blst_sha256_emit>
   171d8:	0964      	lsrs	r4, r4, #5
   171da:	f1b4 0801 	subs.w	r8, r4, #1
   171de:	d03e      	beq.n	1725e <hash_to_field+0x260>
   171e0:	f10b 041c 	add.w	r4, fp, #28
   171e4:	465e      	mov	r6, fp
   171e6:	f8df 9164 	ldr.w	r9, [pc, #356]	; 1734c <hash_to_field+0x34e>
   171ea:	603d      	str	r5, [r7, #0]
   171ec:	4b56      	ldr	r3, [pc, #344]	; (17348 <hash_to_field+0x34a>)
   171ee:	62bb      	str	r3, [r7, #40]	; 0x28
   171f0:	f8c7 902c 	str.w	r9, [r7, #44]	; 0x2c
   171f4:	4b56      	ldr	r3, [pc, #344]	; (17350 <hash_to_field+0x352>)
   171f6:	633b      	str	r3, [r7, #48]	; 0x30
   171f8:	4b56      	ldr	r3, [pc, #344]	; (17354 <hash_to_field+0x356>)
   171fa:	637b      	str	r3, [r7, #52]	; 0x34
   171fc:	4b56      	ldr	r3, [pc, #344]	; (17358 <hash_to_field+0x35a>)
   171fe:	63bb      	str	r3, [r7, #56]	; 0x38
   17200:	4b56      	ldr	r3, [pc, #344]	; (1735c <hash_to_field+0x35e>)
   17202:	63fb      	str	r3, [r7, #60]	; 0x3c
   17204:	4b56      	ldr	r3, [pc, #344]	; (17360 <hash_to_field+0x362>)
   17206:	643b      	str	r3, [r7, #64]	; 0x40
   17208:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   1720c:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   17210:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   17214:	647b      	str	r3, [r7, #68]	; 0x44
   17216:	1f32      	subs	r2, r6, #4
   17218:	f107 0094 	add.w	r0, r7, #148	; 0x94
   1721c:	1d39      	adds	r1, r7, #4
   1721e:	f851 3f04 	ldr.w	r3, [r1, #4]!
   17222:	f852 5f04 	ldr.w	r5, [r2, #4]!
   17226:	406b      	eors	r3, r5
   17228:	f840 3f04 	str.w	r3, [r0, #4]!
   1722c:	42a2      	cmp	r2, r4
   1722e:	d1f6      	bne.n	1721e <hash_to_field+0x220>
   17230:	3620      	adds	r6, #32
   17232:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
   17236:	3301      	adds	r3, #1
   17238:	f887 30b8 	strb.w	r3, [r7, #184]	; 0xb8
   1723c:	4652      	mov	r2, sl
   1723e:	f107 0198 	add.w	r1, r7, #152	; 0x98
   17242:	f107 0028 	add.w	r0, r7, #40	; 0x28
   17246:	f7ff fcfd 	bl	16c44 <blst_sha256_block_data_order>
   1724a:	f107 0128 	add.w	r1, r7, #40	; 0x28
   1724e:	4630      	mov	r0, r6
   17250:	f7ff fe0c 	bl	16e6c <blst_sha256_emit>
   17254:	3420      	adds	r4, #32
   17256:	f1b8 0801 	subs.w	r8, r8, #1
   1725a:	d1c7      	bne.n	171ec <hash_to_field+0x1ee>
   1725c:	683d      	ldr	r5, [r7, #0]
   1725e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
   17262:	f507 710e 	add.w	r1, r7, #568	; 0x238
   17266:	2200      	movs	r2, #0
   17268:	f843 2b04 	str.w	r2, [r3], #4
   1726c:	428b      	cmp	r3, r1
   1726e:	d1fb      	bne.n	17268 <hash_to_field+0x26a>
   17270:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
   17274:	687b      	ldr	r3, [r7, #4]
   17276:	1e5e      	subs	r6, r3, #1
   17278:	b3ab      	cbz	r3, 172e6 <hash_to_field+0x2e8>
   1727a:	f10b 0440 	add.w	r4, fp, #64	; 0x40
   1727e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 17364 <hash_to_field+0x366>
   17282:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 17368 <hash_to_field+0x36a>
   17286:	465a      	mov	r2, fp
   17288:	2100      	movs	r1, #0
   1728a:	f10b 0c3f 	add.w	ip, fp, #63	; 0x3f
   1728e:	ebac 0302 	sub.w	r3, ip, r2
   17292:	f812 0b01 	ldrb.w	r0, [r2], #1
   17296:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
   1729a:	f023 0303 	bic.w	r3, r3, #3
   1729e:	f507 700e 	add.w	r0, r7, #568	; 0x238
   172a2:	4403      	add	r3, r0
   172a4:	f843 1c60 	str.w	r1, [r3, #-96]
   172a8:	42a2      	cmp	r2, r4
   172aa:	d1f0      	bne.n	1728e <hash_to_field+0x290>
   172ac:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
   172b0:	f04f 080c 	mov.w	r8, #12
   172b4:	f8cd 8000 	str.w	r8, [sp]
   172b8:	4653      	mov	r3, sl
   172ba:	464a      	mov	r2, r9
   172bc:	f507 71ec 	add.w	r1, r7, #472	; 0x1d8
   172c0:	4628      	mov	r0, r5
   172c2:	f7f9 ff36 	bl	11132 <redc_mont_n>
   172c6:	f8cd 8004 	str.w	r8, [sp, #4]
   172ca:	f8cd a000 	str.w	sl, [sp]
   172ce:	464b      	mov	r3, r9
   172d0:	4a26      	ldr	r2, [pc, #152]	; (1736c <hash_to_field+0x36e>)
   172d2:	4629      	mov	r1, r5
   172d4:	4628      	mov	r0, r5
   172d6:	f7f9 fb7b 	bl	109d0 <mul_mont_n>
   172da:	3530      	adds	r5, #48	; 0x30
   172dc:	3e01      	subs	r6, #1
   172de:	3440      	adds	r4, #64	; 0x40
   172e0:	f1b6 3fff 	cmp.w	r6, #4294967295
   172e4:	d1cf      	bne.n	17286 <hash_to_field+0x288>
   172e6:	f507 770f 	add.w	r7, r7, #572	; 0x23c
   172ea:	46bd      	mov	sp, r7
   172ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172f0:	f107 0028 	add.w	r0, r7, #40	; 0x28
   172f4:	f7f9 f972 	bl	105dc <sha256_init>
   172f8:	2211      	movs	r2, #17
   172fa:	491d      	ldr	r1, [pc, #116]	; (17370 <hash_to_field+0x372>)
   172fc:	f107 0028 	add.w	r0, r7, #40	; 0x28
   17300:	f7ff fe31 	bl	16f66 <sha256_update>
   17304:	4642      	mov	r2, r8
   17306:	4631      	mov	r1, r6
   17308:	f107 0028 	add.w	r0, r7, #40	; 0x28
   1730c:	f7ff fe2b 	bl	16f66 <sha256_update>
   17310:	f107 0128 	add.w	r1, r7, #40	; 0x28
   17314:	f107 0008 	add.w	r0, r7, #8
   17318:	f7ff fdbd 	bl	16e96 <sha256_final>
   1731c:	f04f 0820 	mov.w	r8, #32
   17320:	f107 0608 	add.w	r6, r7, #8
   17324:	e689      	b.n	1703a <hash_to_field+0x3c>
   17326:	f04f 0800 	mov.w	r8, #0
   1732a:	e686      	b.n	1703a <hash_to_field+0x3c>
   1732c:	4643      	mov	r3, r8
   1732e:	e6a7      	b.n	17080 <hash_to_field+0x82>
   17330:	da5698be 	.word	0xda5698be
   17334:	17b9b469 	.word	0x17b9b469
   17338:	62335799 	.word	0x62335799
   1733c:	8ce5d491 	.word	0x8ce5d491
   17340:	bafef9ea 	.word	0xbafef9ea
   17344:	1837a9d8 	.word	0x1837a9d8
   17348:	6a09e667 	.word	0x6a09e667
   1734c:	bb67ae85 	.word	0xbb67ae85
   17350:	3c6ef372 	.word	0x3c6ef372
   17354:	a54ff53a 	.word	0xa54ff53a
   17358:	510e527f 	.word	0x510e527f
   1735c:	9b05688c 	.word	0x9b05688c
   17360:	1f83d9ab 	.word	0x1f83d9ab
   17364:	fffcfffd 	.word	0xfffcfffd
   17368:	00028738 	.word	0x00028738
   1736c:	00029c20 	.word	0x00029c20
   17370:	0002b000 	.word	0x0002b000

00017374 <blst_encode_to_g1>:
   17374:	b510      	push	{r4, lr}
   17376:	b090      	sub	sp, #64	; 0x40
   17378:	4604      	mov	r4, r0
   1737a:	9812      	ldr	r0, [sp, #72]	; 0x48
   1737c:	9003      	str	r0, [sp, #12]
   1737e:	9302      	str	r3, [sp, #8]
   17380:	9201      	str	r2, [sp, #4]
   17382:	9100      	str	r1, [sp, #0]
   17384:	9b14      	ldr	r3, [sp, #80]	; 0x50
   17386:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   17388:	2101      	movs	r1, #1
   1738a:	a804      	add	r0, sp, #16
   1738c:	f7ff fe37 	bl	16ffe <hash_to_field>
   17390:	2200      	movs	r2, #0
   17392:	a904      	add	r1, sp, #16
   17394:	4620      	mov	r0, r4
   17396:	f7ff f985 	bl	166a4 <map_to_g1>
   1739a:	b010      	add	sp, #64	; 0x40
   1739c:	bd10      	pop	{r4, pc}

0001739e <blst_hash_to_g1>:
   1739e:	b510      	push	{r4, lr}
   173a0:	b09c      	sub	sp, #112	; 0x70
   173a2:	4604      	mov	r4, r0
   173a4:	981e      	ldr	r0, [sp, #120]	; 0x78
   173a6:	9003      	str	r0, [sp, #12]
   173a8:	9302      	str	r3, [sp, #8]
   173aa:	9201      	str	r2, [sp, #4]
   173ac:	9100      	str	r1, [sp, #0]
   173ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
   173b0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   173b2:	2102      	movs	r1, #2
   173b4:	a804      	add	r0, sp, #16
   173b6:	f7ff fe22 	bl	16ffe <hash_to_field>
   173ba:	aa10      	add	r2, sp, #64	; 0x40
   173bc:	a904      	add	r1, sp, #16
   173be:	4620      	mov	r0, r4
   173c0:	f7ff f970 	bl	166a4 <map_to_g1>
   173c4:	b01c      	add	sp, #112	; 0x70
   173c6:	bd10      	pop	{r4, pc}

000173c8 <HMAC_init>:
   173c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   173cc:	4607      	mov	r7, r0
   173ce:	2900      	cmp	r1, #0
   173d0:	d06d      	beq.n	174ae <HMAC_init+0xe6>
   173d2:	4614      	mov	r4, r2
   173d4:	460d      	mov	r5, r1
   173d6:	f100 09b0 	add.w	r9, r0, #176	; 0xb0
   173da:	464e      	mov	r6, r9
   173dc:	f100 08f0 	add.w	r8, r0, #240	; 0xf0
   173e0:	464b      	mov	r3, r9
   173e2:	2100      	movs	r1, #0
   173e4:	f843 1b04 	str.w	r1, [r3], #4
   173e8:	4543      	cmp	r3, r8
   173ea:	d1fb      	bne.n	173e4 <HMAC_init+0x1c>
   173ec:	2c40      	cmp	r4, #64	; 0x40
   173ee:	d973      	bls.n	174d8 <HMAC_init+0x110>
   173f0:	4638      	mov	r0, r7
   173f2:	f7f9 f8f3 	bl	105dc <sha256_init>
   173f6:	4622      	mov	r2, r4
   173f8:	4629      	mov	r1, r5
   173fa:	4638      	mov	r0, r7
   173fc:	f7ff fdb3 	bl	16f66 <sha256_update>
   17400:	4639      	mov	r1, r7
   17402:	4648      	mov	r0, r9
   17404:	f7ff fd47 	bl	16e96 <sha256_final>
   17408:	f107 04ac 	add.w	r4, r7, #172	; 0xac
   1740c:	f107 05ec 	add.w	r5, r7, #236	; 0xec
   17410:	4623      	mov	r3, r4
   17412:	f853 2f04 	ldr.w	r2, [r3, #4]!
   17416:	f082 3236 	eor.w	r2, r2, #909522486	; 0x36363636
   1741a:	601a      	str	r2, [r3, #0]
   1741c:	42ab      	cmp	r3, r5
   1741e:	d1f8      	bne.n	17412 <HMAC_init+0x4a>
   17420:	4638      	mov	r0, r7
   17422:	f7f9 f8db 	bl	105dc <sha256_init>
   17426:	2240      	movs	r2, #64	; 0x40
   17428:	4649      	mov	r1, r9
   1742a:	4638      	mov	r0, r7
   1742c:	f7ff fd9b 	bl	16f66 <sha256_update>
   17430:	4639      	mov	r1, r7
   17432:	f107 0070 	add.w	r0, r7, #112	; 0x70
   17436:	f7ff fd0f 	bl	16e58 <blst_sha256_hcopy>
   1743a:	f854 3f04 	ldr.w	r3, [r4, #4]!
   1743e:	f083 336a 	eor.w	r3, r3, #1785358954	; 0x6a6a6a6a
   17442:	6023      	str	r3, [r4, #0]
   17444:	42ac      	cmp	r4, r5
   17446:	d1f8      	bne.n	1743a <HMAC_init+0x72>
   17448:	4b26      	ldr	r3, [pc, #152]	; (174e4 <HMAC_init+0x11c>)
   1744a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   1744e:	4b26      	ldr	r3, [pc, #152]	; (174e8 <HMAC_init+0x120>)
   17450:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   17454:	4b25      	ldr	r3, [pc, #148]	; (174ec <HMAC_init+0x124>)
   17456:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   1745a:	4b25      	ldr	r3, [pc, #148]	; (174f0 <HMAC_init+0x128>)
   1745c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   17460:	4b24      	ldr	r3, [pc, #144]	; (174f4 <HMAC_init+0x12c>)
   17462:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   17466:	4b24      	ldr	r3, [pc, #144]	; (174f8 <HMAC_init+0x130>)
   17468:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   1746c:	4b23      	ldr	r3, [pc, #140]	; (174fc <HMAC_init+0x134>)
   1746e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
   17472:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   17476:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   1747a:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   1747e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   17482:	2201      	movs	r2, #1
   17484:	4649      	mov	r1, r9
   17486:	f107 0090 	add.w	r0, r7, #144	; 0x90
   1748a:	f7ff fbdb 	bl	16c44 <blst_sha256_block_data_order>
   1748e:	2300      	movs	r3, #0
   17490:	f846 3b04 	str.w	r3, [r6], #4
   17494:	4546      	cmp	r6, r8
   17496:	d1fb      	bne.n	17490 <HMAC_init+0xc8>
   17498:	2380      	movs	r3, #128	; 0x80
   1749a:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0
   1749e:	2303      	movs	r3, #3
   174a0:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
   174a4:	2300      	movs	r3, #0
   174a6:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
   174aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   174ae:	f100 0170 	add.w	r1, r0, #112	; 0x70
   174b2:	f7ff fcd1 	bl	16e58 <blst_sha256_hcopy>
   174b6:	2240      	movs	r2, #64	; 0x40
   174b8:	2300      	movs	r3, #0
   174ba:	e9c7 2308 	strd	r2, r3, [r7, #32]
   174be:	f107 0028 	add.w	r0, r7, #40	; 0x28
   174c2:	4603      	mov	r3, r0
   174c4:	f107 0168 	add.w	r1, r7, #104	; 0x68
   174c8:	2200      	movs	r2, #0
   174ca:	f843 2b04 	str.w	r2, [r3], #4
   174ce:	4299      	cmp	r1, r3
   174d0:	d1fb      	bne.n	174ca <HMAC_init+0x102>
   174d2:	2300      	movs	r3, #0
   174d4:	66bb      	str	r3, [r7, #104]	; 0x68
   174d6:	e7e8      	b.n	174aa <HMAC_init+0xe2>
   174d8:	4622      	mov	r2, r4
   174da:	4629      	mov	r1, r5
   174dc:	4648      	mov	r0, r9
   174de:	f7ff fd35 	bl	16f4c <blst_sha256_bcopy>
   174e2:	e791      	b.n	17408 <HMAC_init+0x40>
   174e4:	6a09e667 	.word	0x6a09e667
   174e8:	bb67ae85 	.word	0xbb67ae85
   174ec:	3c6ef372 	.word	0x3c6ef372
   174f0:	a54ff53a 	.word	0xa54ff53a
   174f4:	510e527f 	.word	0x510e527f
   174f8:	9b05688c 	.word	0x9b05688c
   174fc:	1f83d9ab 	.word	0x1f83d9ab

00017500 <blst_keygen>:
   17500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17504:	b0f3      	sub	sp, #460	; 0x1cc
   17506:	af02      	add	r7, sp, #8
   17508:	6038      	str	r0, [r7, #0]
   1750a:	6139      	str	r1, [r7, #16]
   1750c:	4616      	mov	r6, r2
   1750e:	60fa      	str	r2, [r7, #12]
   17510:	607b      	str	r3, [r7, #4]
   17512:	f8d7 b1e8 	ldr.w	fp, [r7, #488]	; 0x1e8
   17516:	f107 0420 	add.w	r4, r7, #32
   1751a:	4d8c      	ldr	r5, [pc, #560]	; (1774c <blst_keygen+0x24c>)
   1751c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1751e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   17520:	e895 0003 	ldmia.w	r5, {r0, r1}
   17524:	f844 0b04 	str.w	r0, [r4], #4
   17528:	7021      	strb	r1, [r4, #0]
   1752a:	2300      	movs	r3, #0
   1752c:	f8c7 3035 	str.w	r3, [r7, #53]	; 0x35
   17530:	f8c7 3039 	str.w	r3, [r7, #57]	; 0x39
   17534:	63fb      	str	r3, [r7, #60]	; 0x3c
   17536:	2e1f      	cmp	r6, #31
   17538:	d90f      	bls.n	1755a <blst_keygen+0x5a>
   1753a:	687b      	ldr	r3, [r7, #4]
   1753c:	2b00      	cmp	r3, #0
   1753e:	bf08      	it	eq
   17540:	f04f 0b00 	moveq.w	fp, #0
   17544:	f04f 0914 	mov.w	r9, #20
   17548:	2500      	movs	r5, #0
   1754a:	f10b 030a 	add.w	r3, fp, #10
   1754e:	f023 0307 	bic.w	r3, r3, #7
   17552:	60bb      	str	r3, [r7, #8]
   17554:	f507 74c0 	add.w	r4, r7, #384	; 0x180
   17558:	e090      	b.n	1767c <blst_keygen+0x17c>
   1755a:	683a      	ldr	r2, [r7, #0]
   1755c:	4613      	mov	r3, r2
   1755e:	f102 0120 	add.w	r1, r2, #32
   17562:	2200      	movs	r2, #0
   17564:	f843 2b04 	str.w	r2, [r3], #4
   17568:	4299      	cmp	r1, r3
   1756a:	d1fb      	bne.n	17564 <blst_keygen+0x64>
   1756c:	683b      	ldr	r3, [r7, #0]
   1756e:	e0db      	b.n	17728 <blst_keygen+0x228>
   17570:	f806 500b 	strb.w	r5, [r6, fp]
   17574:	eb06 030b 	add.w	r3, r6, fp
   17578:	2230      	movs	r2, #48	; 0x30
   1757a:	705a      	strb	r2, [r3, #1]
   1757c:	2301      	movs	r3, #1
   1757e:	f806 3008 	strb.w	r3, [r6, r8]
   17582:	464a      	mov	r2, r9
   17584:	4631      	mov	r1, r6
   17586:	f107 0040 	add.w	r0, r7, #64	; 0x40
   1758a:	f7ff fcec 	bl	16f66 <sha256_update>
   1758e:	f107 0140 	add.w	r1, r7, #64	; 0x40
   17592:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
   17596:	f7ff fcc2 	bl	16f1e <HMAC_final>
   1759a:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
   1759e:	f507 70a8 	add.w	r0, r7, #336	; 0x150
   175a2:	f7ff fc59 	bl	16e58 <blst_sha256_hcopy>
   175a6:	f816 3008 	ldrb.w	r3, [r6, r8]
   175aa:	3301      	adds	r3, #1
   175ac:	f806 3008 	strb.w	r3, [r6, r8]
   175b0:	462a      	mov	r2, r5
   175b2:	4629      	mov	r1, r5
   175b4:	f107 0040 	add.w	r0, r7, #64	; 0x40
   175b8:	f7ff ff06 	bl	173c8 <HMAC_init>
   175bc:	2220      	movs	r2, #32
   175be:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
   175c2:	f107 0040 	add.w	r0, r7, #64	; 0x40
   175c6:	f7ff fcce 	bl	16f66 <sha256_update>
   175ca:	464a      	mov	r2, r9
   175cc:	4631      	mov	r1, r6
   175ce:	f107 0040 	add.w	r0, r7, #64	; 0x40
   175d2:	f7ff fcc8 	bl	16f66 <sha256_update>
   175d6:	f107 0140 	add.w	r1, r7, #64	; 0x40
   175da:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
   175de:	f7ff fc9e 	bl	16f1e <HMAC_final>
   175e2:	2210      	movs	r2, #16
   175e4:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
   175e8:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   175ec:	f7ff fcae 	bl	16f4c <blst_sha256_bcopy>
   175f0:	46d5      	mov	sp, sl
   175f2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
   175f6:	617b      	str	r3, [r7, #20]
   175f8:	f107 0a40 	add.w	sl, r7, #64	; 0x40
   175fc:	f507 76e0 	add.w	r6, r7, #448	; 0x1c0
   17600:	f843 5b04 	str.w	r5, [r3], #4
   17604:	42b3      	cmp	r3, r6
   17606:	d1fb      	bne.n	17600 <blst_keygen+0x100>
   17608:	f507 72a8 	add.w	r2, r7, #336	; 0x150
   1760c:	4629      	mov	r1, r5
   1760e:	f20a 103f 	addw	r0, sl, #319	; 0x13f
   17612:	1a83      	subs	r3, r0, r2
   17614:	f812 cb01 	ldrb.w	ip, [r2], #1
   17618:	ea4c 2101 	orr.w	r1, ip, r1, lsl #8
   1761c:	f023 0303 	bic.w	r3, r3, #3
   17620:	f507 7ce0 	add.w	ip, r7, #448	; 0x1c0
   17624:	4463      	add	r3, ip
   17626:	f843 1c40 	str.w	r1, [r3, #-64]
   1762a:	42a2      	cmp	r2, r4
   1762c:	d1f1      	bne.n	17612 <blst_keygen+0x112>
   1762e:	f8df 8120 	ldr.w	r8, [pc, #288]	; 17750 <blst_keygen+0x250>
   17632:	f508 7932 	add.w	r9, r8, #712	; 0x2c8
   17636:	2308      	movs	r3, #8
   17638:	9300      	str	r3, [sp, #0]
   1763a:	f04f 33ff 	mov.w	r3, #4294967295
   1763e:	464a      	mov	r2, r9
   17640:	4621      	mov	r1, r4
   17642:	4620      	mov	r0, r4
   17644:	f7f9 fd75 	bl	11132 <redc_mont_n>
   17648:	2308      	movs	r3, #8
   1764a:	9301      	str	r3, [sp, #4]
   1764c:	f04f 33ff 	mov.w	r3, #4294967295
   17650:	9300      	str	r3, [sp, #0]
   17652:	464b      	mov	r3, r9
   17654:	f508 6288 	add.w	r2, r8, #1088	; 0x440
   17658:	4621      	mov	r1, r4
   1765a:	4620      	mov	r0, r4
   1765c:	f7f9 f9b8 	bl	109d0 <mul_mont_n>
   17660:	f50a 70b0 	add.w	r0, sl, #352	; 0x160
   17664:	697b      	ldr	r3, [r7, #20]
   17666:	2200      	movs	r2, #0
   17668:	f853 1b04 	ldr.w	r1, [r3], #4
   1766c:	430a      	orrs	r2, r1
   1766e:	4298      	cmp	r0, r3
   17670:	d1fa      	bne.n	17668 <blst_keygen+0x168>
   17672:	f04f 0920 	mov.w	r9, #32
   17676:	1e53      	subs	r3, r2, #1
   17678:	4393      	bics	r3, r2
   1767a:	d544      	bpl.n	17706 <blst_keygen+0x206>
   1767c:	f107 0040 	add.w	r0, r7, #64	; 0x40
   17680:	f7f8 ffac 	bl	105dc <sha256_init>
   17684:	464a      	mov	r2, r9
   17686:	f107 0120 	add.w	r1, r7, #32
   1768a:	f107 0040 	add.w	r0, r7, #64	; 0x40
   1768e:	f7ff fc6a 	bl	16f66 <sha256_update>
   17692:	f107 0140 	add.w	r1, r7, #64	; 0x40
   17696:	f107 0020 	add.w	r0, r7, #32
   1769a:	f7ff fbfc 	bl	16e96 <sha256_final>
   1769e:	773d      	strb	r5, [r7, #28]
   176a0:	2220      	movs	r2, #32
   176a2:	18b9      	adds	r1, r7, r2
   176a4:	f107 0040 	add.w	r0, r7, #64	; 0x40
   176a8:	f7ff fe8e 	bl	173c8 <HMAC_init>
   176ac:	68fa      	ldr	r2, [r7, #12]
   176ae:	6939      	ldr	r1, [r7, #16]
   176b0:	f107 0040 	add.w	r0, r7, #64	; 0x40
   176b4:	f7ff fc57 	bl	16f66 <sha256_update>
   176b8:	2201      	movs	r2, #1
   176ba:	f107 011c 	add.w	r1, r7, #28
   176be:	f107 0040 	add.w	r0, r7, #64	; 0x40
   176c2:	f7ff fc50 	bl	16f66 <sha256_update>
   176c6:	f107 0140 	add.w	r1, r7, #64	; 0x40
   176ca:	f507 7098 	add.w	r0, r7, #304	; 0x130
   176ce:	f7ff fc26 	bl	16f1e <HMAC_final>
   176d2:	46ea      	mov	sl, sp
   176d4:	f10b 0903 	add.w	r9, fp, #3
   176d8:	f10b 0802 	add.w	r8, fp, #2
   176dc:	68bb      	ldr	r3, [r7, #8]
   176de:	ebad 0d03 	sub.w	sp, sp, r3
   176e2:	ae02      	add	r6, sp, #8
   176e4:	2220      	movs	r2, #32
   176e6:	f507 7198 	add.w	r1, r7, #304	; 0x130
   176ea:	f107 0040 	add.w	r0, r7, #64	; 0x40
   176ee:	f7ff fe6b 	bl	173c8 <HMAC_init>
   176f2:	f1bb 0f00 	cmp.w	fp, #0
   176f6:	f43f af3b 	beq.w	17570 <blst_keygen+0x70>
   176fa:	465a      	mov	r2, fp
   176fc:	6879      	ldr	r1, [r7, #4]
   176fe:	4630      	mov	r0, r6
   17700:	f7ff fc24 	bl	16f4c <blst_sha256_bcopy>
   17704:	e734      	b.n	17570 <blst_keygen+0x70>
   17706:	46d0      	mov	r8, sl
   17708:	f507 73c0 	add.w	r3, r7, #384	; 0x180
   1770c:	683a      	ldr	r2, [r7, #0]
   1770e:	429a      	cmp	r2, r3
   17710:	d003      	beq.n	1771a <blst_keygen+0x21a>
   17712:	6839      	ldr	r1, [r7, #0]
   17714:	3104      	adds	r1, #4
   17716:	697c      	ldr	r4, [r7, #20]
   17718:	e00e      	b.n	17738 <blst_keygen+0x238>
   1771a:	2300      	movs	r3, #0
   1771c:	f848 3b04 	str.w	r3, [r8], #4
   17720:	45b0      	cmp	r8, r6
   17722:	d1fb      	bne.n	1771c <blst_keygen+0x21c>
   17724:	f107 0340 	add.w	r3, r7, #64	; 0x40
   17728:	f507 77e2 	add.w	r7, r7, #452	; 0x1c4
   1772c:	46bd      	mov	sp, r7
   1772e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17732:	3104      	adds	r1, #4
   17734:	42a0      	cmp	r0, r4
   17736:	d0f0      	beq.n	1771a <blst_keygen+0x21a>
   17738:	1f0a      	subs	r2, r1, #4
   1773a:	f854 3b04 	ldr.w	r3, [r4], #4
   1773e:	f802 3b01 	strb.w	r3, [r2], #1
   17742:	0a1b      	lsrs	r3, r3, #8
   17744:	428a      	cmp	r2, r1
   17746:	d1fa      	bne.n	1773e <blst_keygen+0x23e>
   17748:	e7f3      	b.n	17732 <blst_keygen+0x232>
   1774a:	bf00      	nop
   1774c:	00029c50 	.word	0x00029c50
   17750:	00029830 	.word	0x00029830

00017754 <mul_by_8_mod_384>:
   17754:	b500      	push	{lr}
   17756:	b083      	sub	sp, #12
   17758:	4613      	mov	r3, r2
   1775a:	220c      	movs	r2, #12
   1775c:	9200      	str	r2, [sp, #0]
   1775e:	2203      	movs	r2, #3
   17760:	f7f9 fc06 	bl	10f70 <lshift_mod_n>
   17764:	b003      	add	sp, #12
   17766:	f85d fb04 	ldr.w	pc, [sp], #4

0001776a <mul_by_3_mod_384x>:
   1776a:	b570      	push	{r4, r5, r6, lr}
   1776c:	4604      	mov	r4, r0
   1776e:	460d      	mov	r5, r1
   17770:	4616      	mov	r6, r2
   17772:	230c      	movs	r3, #12
   17774:	f7f9 fb5c 	bl	10e30 <mul_by_3_mod_n>
   17778:	230c      	movs	r3, #12
   1777a:	4632      	mov	r2, r6
   1777c:	f105 0130 	add.w	r1, r5, #48	; 0x30
   17780:	f104 0030 	add.w	r0, r4, #48	; 0x30
   17784:	f7f9 fb54 	bl	10e30 <mul_by_3_mod_n>
   17788:	bd70      	pop	{r4, r5, r6, pc}

0001778a <mul_by_8_mod_384x>:
   1778a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1778c:	b083      	sub	sp, #12
   1778e:	4605      	mov	r5, r0
   17790:	460e      	mov	r6, r1
   17792:	4614      	mov	r4, r2
   17794:	270c      	movs	r7, #12
   17796:	9700      	str	r7, [sp, #0]
   17798:	4613      	mov	r3, r2
   1779a:	2203      	movs	r2, #3
   1779c:	f7f9 fbe8 	bl	10f70 <lshift_mod_n>
   177a0:	9700      	str	r7, [sp, #0]
   177a2:	4623      	mov	r3, r4
   177a4:	2203      	movs	r2, #3
   177a6:	f106 0130 	add.w	r1, r6, #48	; 0x30
   177aa:	f105 0030 	add.w	r0, r5, #48	; 0x30
   177ae:	f7f9 fbdf 	bl	10f70 <lshift_mod_n>
   177b2:	b003      	add	sp, #12
   177b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000177b6 <mul_by_1_plus_i_mod_384x>:
   177b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   177ba:	b08e      	sub	sp, #56	; 0x38
   177bc:	4604      	mov	r4, r0
   177be:	460d      	mov	r5, r1
   177c0:	4616      	mov	r6, r2
   177c2:	f101 0730 	add.w	r7, r1, #48	; 0x30
   177c6:	f04f 080c 	mov.w	r8, #12
   177ca:	f8cd 8000 	str.w	r8, [sp]
   177ce:	4613      	mov	r3, r2
   177d0:	463a      	mov	r2, r7
   177d2:	a802      	add	r0, sp, #8
   177d4:	f7f9 faa4 	bl	10d20 <add_mod_n>
   177d8:	f8cd 8000 	str.w	r8, [sp]
   177dc:	4633      	mov	r3, r6
   177de:	463a      	mov	r2, r7
   177e0:	4629      	mov	r1, r5
   177e2:	4620      	mov	r0, r4
   177e4:	f7f8 ff46 	bl	10674 <sub_mod_n>
   177e8:	aa02      	add	r2, sp, #8
   177ea:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   177ee:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   177f2:	f852 1b04 	ldr.w	r1, [r2], #4
   177f6:	f843 1f04 	str.w	r1, [r3, #4]!
   177fa:	4283      	cmp	r3, r0
   177fc:	d1f9      	bne.n	177f2 <mul_by_1_plus_i_mod_384x+0x3c>
   177fe:	b00e      	add	sp, #56	; 0x38
   17800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017804 <add_mod_384x>:
   17804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17808:	b082      	sub	sp, #8
   1780a:	4604      	mov	r4, r0
   1780c:	460d      	mov	r5, r1
   1780e:	4616      	mov	r6, r2
   17810:	461f      	mov	r7, r3
   17812:	f04f 080c 	mov.w	r8, #12
   17816:	f8cd 8000 	str.w	r8, [sp]
   1781a:	f7f9 fa81 	bl	10d20 <add_mod_n>
   1781e:	f8cd 8000 	str.w	r8, [sp]
   17822:	463b      	mov	r3, r7
   17824:	f106 0230 	add.w	r2, r6, #48	; 0x30
   17828:	f105 0130 	add.w	r1, r5, #48	; 0x30
   1782c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   17830:	f7f9 fa76 	bl	10d20 <add_mod_n>
   17834:	b002      	add	sp, #8
   17836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001783a <sub_mod_384x>:
   1783a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1783e:	b082      	sub	sp, #8
   17840:	4604      	mov	r4, r0
   17842:	460d      	mov	r5, r1
   17844:	4616      	mov	r6, r2
   17846:	461f      	mov	r7, r3
   17848:	f04f 080c 	mov.w	r8, #12
   1784c:	f8cd 8000 	str.w	r8, [sp]
   17850:	f7f8 ff10 	bl	10674 <sub_mod_n>
   17854:	f8cd 8000 	str.w	r8, [sp]
   17858:	463b      	mov	r3, r7
   1785a:	f106 0230 	add.w	r2, r6, #48	; 0x30
   1785e:	f105 0130 	add.w	r1, r5, #48	; 0x30
   17862:	f104 0030 	add.w	r0, r4, #48	; 0x30
   17866:	f7f8 ff05 	bl	10674 <sub_mod_n>
   1786a:	b002      	add	sp, #8
   1786c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017870 <sqr_mont_384x>:
   17870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17874:	b09a      	sub	sp, #104	; 0x68
   17876:	4607      	mov	r7, r0
   17878:	460e      	mov	r6, r1
   1787a:	4614      	mov	r4, r2
   1787c:	4698      	mov	r8, r3
   1787e:	f101 0a30 	add.w	sl, r1, #48	; 0x30
   17882:	250c      	movs	r5, #12
   17884:	9500      	str	r5, [sp, #0]
   17886:	4613      	mov	r3, r2
   17888:	4652      	mov	r2, sl
   1788a:	a80e      	add	r0, sp, #56	; 0x38
   1788c:	f7f9 fa48 	bl	10d20 <add_mod_n>
   17890:	9500      	str	r5, [sp, #0]
   17892:	4623      	mov	r3, r4
   17894:	4652      	mov	r2, sl
   17896:	4631      	mov	r1, r6
   17898:	a802      	add	r0, sp, #8
   1789a:	f7f8 feeb 	bl	10674 <sub_mod_n>
   1789e:	f107 0930 	add.w	r9, r7, #48	; 0x30
   178a2:	9501      	str	r5, [sp, #4]
   178a4:	f8cd 8000 	str.w	r8, [sp]
   178a8:	4623      	mov	r3, r4
   178aa:	4652      	mov	r2, sl
   178ac:	4631      	mov	r1, r6
   178ae:	4648      	mov	r0, r9
   178b0:	f7f9 f88e 	bl	109d0 <mul_mont_n>
   178b4:	9500      	str	r5, [sp, #0]
   178b6:	4623      	mov	r3, r4
   178b8:	464a      	mov	r2, r9
   178ba:	4649      	mov	r1, r9
   178bc:	4648      	mov	r0, r9
   178be:	f7f9 fa2f 	bl	10d20 <add_mod_n>
   178c2:	9501      	str	r5, [sp, #4]
   178c4:	f8cd 8000 	str.w	r8, [sp]
   178c8:	4623      	mov	r3, r4
   178ca:	aa02      	add	r2, sp, #8
   178cc:	a90e      	add	r1, sp, #56	; 0x38
   178ce:	4638      	mov	r0, r7
   178d0:	f7f9 f87e 	bl	109d0 <mul_mont_n>
   178d4:	b01a      	add	sp, #104	; 0x68
   178d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000178da <POINTonE2_from_Jacobian>:
   178da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   178de:	b0b3      	sub	sp, #204	; 0xcc
   178e0:	4605      	mov	r5, r0
   178e2:	4688      	mov	r8, r1
   178e4:	31c0      	adds	r1, #192	; 0xc0
   178e6:	f108 04bc 	add.w	r4, r8, #188	; 0xbc
   178ea:	f508 708e 	add.w	r0, r8, #284	; 0x11c
   178ee:	4623      	mov	r3, r4
   178f0:	2600      	movs	r6, #0
   178f2:	f853 2f04 	ldr.w	r2, [r3, #4]!
   178f6:	4316      	orrs	r6, r2
   178f8:	4283      	cmp	r3, r0
   178fa:	d1fa      	bne.n	178f2 <POINTonE2_from_Jacobian+0x18>
   178fc:	a81a      	add	r0, sp, #104	; 0x68
   178fe:	f7fe f84f 	bl	159a0 <reciprocal_fp2>
   17902:	f8df 9074 	ldr.w	r9, [pc, #116]	; 17978 <POINTonE2_from_Jacobian+0x9e>
   17906:	4f1d      	ldr	r7, [pc, #116]	; (1797c <POINTonE2_from_Jacobian+0xa2>)
   17908:	464b      	mov	r3, r9
   1790a:	463a      	mov	r2, r7
   1790c:	a91a      	add	r1, sp, #104	; 0x68
   1790e:	a802      	add	r0, sp, #8
   17910:	f7ff ffae 	bl	17870 <sqr_mont_384x>
   17914:	f8cd 9000 	str.w	r9, [sp]
   17918:	463b      	mov	r3, r7
   1791a:	aa02      	add	r2, sp, #8
   1791c:	4641      	mov	r1, r8
   1791e:	4628      	mov	r0, r5
   17920:	f7fc fd18 	bl	14354 <mul_mont_384x>
   17924:	f8cd 9000 	str.w	r9, [sp]
   17928:	463b      	mov	r3, r7
   1792a:	aa1a      	add	r2, sp, #104	; 0x68
   1792c:	a902      	add	r1, sp, #8
   1792e:	4608      	mov	r0, r1
   17930:	f7fc fd10 	bl	14354 <mul_mont_384x>
   17934:	f8cd 9000 	str.w	r9, [sp]
   17938:	463b      	mov	r3, r7
   1793a:	aa02      	add	r2, sp, #8
   1793c:	f108 0160 	add.w	r1, r8, #96	; 0x60
   17940:	f105 0060 	add.w	r0, r5, #96	; 0x60
   17944:	f7fc fd06 	bl	14354 <mul_mont_384x>
   17948:	1e73      	subs	r3, r6, #1
   1794a:	ea23 0606 	bic.w	r6, r3, r6
   1794e:	17f6      	asrs	r6, r6, #31
   17950:	f507 6164 	add.w	r1, r7, #3648	; 0xe40
   17954:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   17958:	f507 656a 	add.w	r5, r7, #3744	; 0xea0
   1795c:	f851 3b04 	ldr.w	r3, [r1], #4
   17960:	f854 2f04 	ldr.w	r2, [r4, #4]!
   17964:	405a      	eors	r2, r3
   17966:	4032      	ands	r2, r6
   17968:	405a      	eors	r2, r3
   1796a:	f840 2f04 	str.w	r2, [r0, #4]!
   1796e:	42a9      	cmp	r1, r5
   17970:	d1f4      	bne.n	1795c <POINTonE2_from_Jacobian+0x82>
   17972:	b033      	add	sp, #204	; 0xcc
   17974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17978:	fffcfffd 	.word	0xfffcfffd
   1797c:	00028738 	.word	0x00028738

00017980 <blst_p2_from_jacobian>:
   17980:	b508      	push	{r3, lr}
   17982:	f7ff ffaa 	bl	178da <POINTonE2_from_Jacobian>
   17986:	bd08      	pop	{r3, pc}

00017988 <POINTonE2_to_affine>:
   17988:	b530      	push	{r4, r5, lr}
   1798a:	b0c9      	sub	sp, #292	; 0x124
   1798c:	4604      	mov	r4, r0
   1798e:	f101 0cbc 	add.w	ip, r1, #188	; 0xbc
   17992:	4b10      	ldr	r3, [pc, #64]	; (179d4 <POINTonE2_to_affine+0x4c>)
   17994:	f103 0290 	add.w	r2, r3, #144	; 0x90
   17998:	f103 0ef0 	add.w	lr, r3, #240	; 0xf0
   1799c:	2000      	movs	r0, #0
   1799e:	f852 3b04 	ldr.w	r3, [r2], #4
   179a2:	f85c 5f04 	ldr.w	r5, [ip, #4]!
   179a6:	406b      	eors	r3, r5
   179a8:	4318      	orrs	r0, r3
   179aa:	4572      	cmp	r2, lr
   179ac:	d1f7      	bne.n	1799e <POINTonE2_to_affine+0x16>
   179ae:	1e43      	subs	r3, r0, #1
   179b0:	4383      	bics	r3, r0
   179b2:	d50a      	bpl.n	179ca <POINTonE2_to_affine+0x42>
   179b4:	1f0b      	subs	r3, r1, #4
   179b6:	1f20      	subs	r0, r4, #4
   179b8:	31bc      	adds	r1, #188	; 0xbc
   179ba:	f853 2f04 	ldr.w	r2, [r3, #4]!
   179be:	f840 2f04 	str.w	r2, [r0, #4]!
   179c2:	428b      	cmp	r3, r1
   179c4:	d1f9      	bne.n	179ba <POINTonE2_to_affine+0x32>
   179c6:	b049      	add	sp, #292	; 0x124
   179c8:	bd30      	pop	{r4, r5, pc}
   179ca:	4668      	mov	r0, sp
   179cc:	f7ff ff85 	bl	178da <POINTonE2_from_Jacobian>
   179d0:	4669      	mov	r1, sp
   179d2:	e7ef      	b.n	179b4 <POINTonE2_to_affine+0x2c>
   179d4:	00028738 	.word	0x00028738

000179d8 <blst_p2_to_affine>:
   179d8:	b508      	push	{r3, lr}
   179da:	f7ff ffd5 	bl	17988 <POINTonE2_to_affine>
   179de:	bd08      	pop	{r3, pc}

000179e0 <POINTonE2_Serialize_BE>:
   179e0:	b570      	push	{r4, r5, r6, lr}
   179e2:	b0c8      	sub	sp, #288	; 0x120
   179e4:	4606      	mov	r6, r0
   179e6:	f101 0ebc 	add.w	lr, r1, #188	; 0xbc
   179ea:	4d0f      	ldr	r5, [pc, #60]	; (17a28 <POINTonE2_Serialize_BE+0x48>)
   179ec:	f105 0290 	add.w	r2, r5, #144	; 0x90
   179f0:	35f0      	adds	r5, #240	; 0xf0
   179f2:	f04f 0c00 	mov.w	ip, #0
   179f6:	f852 3b04 	ldr.w	r3, [r2], #4
   179fa:	f85e 4f04 	ldr.w	r4, [lr, #4]!
   179fe:	4063      	eors	r3, r4
   17a00:	ea4c 0c03 	orr.w	ip, ip, r3
   17a04:	42aa      	cmp	r2, r5
   17a06:	d1f6      	bne.n	179f6 <POINTonE2_Serialize_BE+0x16>
   17a08:	f10c 33ff 	add.w	r3, ip, #4294967295
   17a0c:	ea33 030c 	bics.w	r3, r3, ip
   17a10:	d504      	bpl.n	17a1c <POINTonE2_Serialize_BE+0x3c>
   17a12:	4630      	mov	r0, r6
   17a14:	f7f9 ff18 	bl	11848 <POINTonE2_affine_Serialize_BE>
   17a18:	b048      	add	sp, #288	; 0x120
   17a1a:	bd70      	pop	{r4, r5, r6, pc}
   17a1c:	4668      	mov	r0, sp
   17a1e:	f7ff ff5c 	bl	178da <POINTonE2_from_Jacobian>
   17a22:	4669      	mov	r1, sp
   17a24:	e7f5      	b.n	17a12 <POINTonE2_Serialize_BE+0x32>
   17a26:	bf00      	nop
   17a28:	00028738 	.word	0x00028738

00017a2c <blst_p2_serialize>:
   17a2c:	b510      	push	{r4, lr}
   17a2e:	f101 03bc 	add.w	r3, r1, #188	; 0xbc
   17a32:	f501 7c8e 	add.w	ip, r1, #284	; 0x11c
   17a36:	2200      	movs	r2, #0
   17a38:	f853 4f04 	ldr.w	r4, [r3, #4]!
   17a3c:	4322      	orrs	r2, r4
   17a3e:	4563      	cmp	r3, ip
   17a40:	d1fa      	bne.n	17a38 <blst_p2_serialize+0xc>
   17a42:	1e53      	subs	r3, r2, #1
   17a44:	4393      	bics	r3, r2
   17a46:	d50a      	bpl.n	17a5e <blst_p2_serialize+0x32>
   17a48:	1e43      	subs	r3, r0, #1
   17a4a:	f100 01bf 	add.w	r1, r0, #191	; 0xbf
   17a4e:	2200      	movs	r2, #0
   17a50:	f803 2f01 	strb.w	r2, [r3, #1]!
   17a54:	428b      	cmp	r3, r1
   17a56:	d1fb      	bne.n	17a50 <blst_p2_serialize+0x24>
   17a58:	2340      	movs	r3, #64	; 0x40
   17a5a:	7003      	strb	r3, [r0, #0]
   17a5c:	bd10      	pop	{r4, pc}
   17a5e:	f7ff ffbf 	bl	179e0 <POINTonE2_Serialize_BE>
   17a62:	e7fb      	b.n	17a5c <blst_p2_serialize+0x30>

00017a64 <POINTonE2_Compress_BE>:
   17a64:	b570      	push	{r4, r5, r6, lr}
   17a66:	b0c8      	sub	sp, #288	; 0x120
   17a68:	4606      	mov	r6, r0
   17a6a:	f101 0ebc 	add.w	lr, r1, #188	; 0xbc
   17a6e:	4d0f      	ldr	r5, [pc, #60]	; (17aac <POINTonE2_Compress_BE+0x48>)
   17a70:	f105 0290 	add.w	r2, r5, #144	; 0x90
   17a74:	35f0      	adds	r5, #240	; 0xf0
   17a76:	f04f 0c00 	mov.w	ip, #0
   17a7a:	f852 3b04 	ldr.w	r3, [r2], #4
   17a7e:	f85e 4f04 	ldr.w	r4, [lr, #4]!
   17a82:	4063      	eors	r3, r4
   17a84:	ea4c 0c03 	orr.w	ip, ip, r3
   17a88:	42aa      	cmp	r2, r5
   17a8a:	d1f6      	bne.n	17a7a <POINTonE2_Compress_BE+0x16>
   17a8c:	f10c 33ff 	add.w	r3, ip, #4294967295
   17a90:	ea33 030c 	bics.w	r3, r3, ip
   17a94:	d504      	bpl.n	17aa0 <POINTonE2_Compress_BE+0x3c>
   17a96:	4630      	mov	r0, r6
   17a98:	f7f9 fe4e 	bl	11738 <POINTonE2_affine_Compress_BE>
   17a9c:	b048      	add	sp, #288	; 0x120
   17a9e:	bd70      	pop	{r4, r5, r6, pc}
   17aa0:	4668      	mov	r0, sp
   17aa2:	f7ff ff1a 	bl	178da <POINTonE2_from_Jacobian>
   17aa6:	4669      	mov	r1, sp
   17aa8:	e7f5      	b.n	17a96 <POINTonE2_Compress_BE+0x32>
   17aaa:	bf00      	nop
   17aac:	00028738 	.word	0x00028738

00017ab0 <blst_p2_compress>:
   17ab0:	b538      	push	{r3, r4, r5, lr}
   17ab2:	4605      	mov	r5, r0
   17ab4:	f101 03bc 	add.w	r3, r1, #188	; 0xbc
   17ab8:	f501 7c8e 	add.w	ip, r1, #284	; 0x11c
   17abc:	2200      	movs	r2, #0
   17abe:	f853 4f04 	ldr.w	r4, [r3, #4]!
   17ac2:	4322      	orrs	r2, r4
   17ac4:	4563      	cmp	r3, ip
   17ac6:	d1fa      	bne.n	17abe <blst_p2_compress+0xe>
   17ac8:	1e53      	subs	r3, r2, #1
   17aca:	4393      	bics	r3, r2
   17acc:	d50a      	bpl.n	17ae4 <blst_p2_compress+0x34>
   17ace:	1e6b      	subs	r3, r5, #1
   17ad0:	f105 015f 	add.w	r1, r5, #95	; 0x5f
   17ad4:	2200      	movs	r2, #0
   17ad6:	f803 2f01 	strb.w	r2, [r3, #1]!
   17ada:	428b      	cmp	r3, r1
   17adc:	d1fb      	bne.n	17ad6 <blst_p2_compress+0x26>
   17ade:	23c0      	movs	r3, #192	; 0xc0
   17ae0:	702b      	strb	r3, [r5, #0]
   17ae2:	bd38      	pop	{r3, r4, r5, pc}
   17ae4:	4628      	mov	r0, r5
   17ae6:	f7ff ffbd 	bl	17a64 <POINTonE2_Compress_BE>
   17aea:	0103      	lsls	r3, r0, #4
   17aec:	f003 0320 	and.w	r3, r3, #32
   17af0:	782a      	ldrb	r2, [r5, #0]
   17af2:	4313      	orrs	r3, r2
   17af4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   17af8:	702b      	strb	r3, [r5, #0]
   17afa:	e7f2      	b.n	17ae2 <blst_p2_compress+0x32>

00017afc <POINTonE2_affine_on_curve>:
   17afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17b00:	b0b2      	sub	sp, #200	; 0xc8
   17b02:	4604      	mov	r4, r0
   17b04:	4e29      	ldr	r6, [pc, #164]	; (17bac <POINTonE2_affine_on_curve+0xb0>)
   17b06:	4d2a      	ldr	r5, [pc, #168]	; (17bb0 <POINTonE2_affine_on_curve+0xb4>)
   17b08:	4633      	mov	r3, r6
   17b0a:	462a      	mov	r2, r5
   17b0c:	4601      	mov	r1, r0
   17b0e:	a81a      	add	r0, sp, #104	; 0x68
   17b10:	f7ff feae 	bl	17870 <sqr_mont_384x>
   17b14:	9600      	str	r6, [sp, #0]
   17b16:	462b      	mov	r3, r5
   17b18:	4622      	mov	r2, r4
   17b1a:	a91a      	add	r1, sp, #104	; 0x68
   17b1c:	4608      	mov	r0, r1
   17b1e:	f7fc fc19 	bl	14354 <mul_mont_384x>
   17b22:	4f24      	ldr	r7, [pc, #144]	; (17bb4 <POINTonE2_affine_on_curve+0xb8>)
   17b24:	f04f 080c 	mov.w	r8, #12
   17b28:	f8cd 8000 	str.w	r8, [sp]
   17b2c:	462b      	mov	r3, r5
   17b2e:	f507 628c 	add.w	r2, r7, #1120	; 0x460
   17b32:	a91a      	add	r1, sp, #104	; 0x68
   17b34:	4608      	mov	r0, r1
   17b36:	f7f9 f8f3 	bl	10d20 <add_mod_n>
   17b3a:	f8cd 8000 	str.w	r8, [sp]
   17b3e:	462b      	mov	r3, r5
   17b40:	f507 6292 	add.w	r2, r7, #1168	; 0x490
   17b44:	a926      	add	r1, sp, #152	; 0x98
   17b46:	4608      	mov	r0, r1
   17b48:	f7f9 f8ea 	bl	10d20 <add_mod_n>
   17b4c:	4633      	mov	r3, r6
   17b4e:	462a      	mov	r2, r5
   17b50:	f104 0160 	add.w	r1, r4, #96	; 0x60
   17b54:	a802      	add	r0, sp, #8
   17b56:	f7ff fe8b 	bl	17870 <sqr_mont_384x>
   17b5a:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
   17b5e:	aa01      	add	r2, sp, #4
   17b60:	a831      	add	r0, sp, #196	; 0xc4
   17b62:	f04f 0e00 	mov.w	lr, #0
   17b66:	f85c 3f04 	ldr.w	r3, [ip, #4]!
   17b6a:	f852 1f04 	ldr.w	r1, [r2, #4]!
   17b6e:	404b      	eors	r3, r1
   17b70:	ea4e 0e03 	orr.w	lr, lr, r3
   17b74:	4584      	cmp	ip, r0
   17b76:	d1f6      	bne.n	17b66 <POINTonE2_affine_on_curve+0x6a>
   17b78:	f10e 30ff 	add.w	r0, lr, #4294967295
   17b7c:	ea20 0e0e 	bic.w	lr, r0, lr
   17b80:	ea4f 7ede 	mov.w	lr, lr, lsr #31
   17b84:	1f23      	subs	r3, r4, #4
   17b86:	f104 01bc 	add.w	r1, r4, #188	; 0xbc
   17b8a:	f04f 0c00 	mov.w	ip, #0
   17b8e:	f853 2f04 	ldr.w	r2, [r3, #4]!
   17b92:	ea4c 0c02 	orr.w	ip, ip, r2
   17b96:	428b      	cmp	r3, r1
   17b98:	d1f9      	bne.n	17b8e <POINTonE2_affine_on_curve+0x92>
   17b9a:	f10c 30ff 	add.w	r0, ip, #4294967295
   17b9e:	ea20 000c 	bic.w	r0, r0, ip
   17ba2:	ea4e 70d0 	orr.w	r0, lr, r0, lsr #31
   17ba6:	b032      	add	sp, #200	; 0xc8
   17ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17bac:	fffcfffd 	.word	0xfffcfffd
   17bb0:	00028738 	.word	0x00028738
   17bb4:	00029830 	.word	0x00029830

00017bb8 <blst_p2_affine_on_curve>:
   17bb8:	b508      	push	{r3, lr}
   17bba:	f7ff ff9f 	bl	17afc <POINTonE2_affine_on_curve>
   17bbe:	bd08      	pop	{r3, pc}

00017bc0 <POINTonE2_Deserialize_BE>:
   17bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17bc4:	b0be      	sub	sp, #248	; 0xf8
   17bc6:	4604      	mov	r4, r0
   17bc8:	f101 0230 	add.w	r2, r1, #48	; 0x30
   17bcc:	4608      	mov	r0, r1
   17bce:	2500      	movs	r5, #0
   17bd0:	f101 072f 	add.w	r7, r1, #47	; 0x2f
   17bd4:	1a3b      	subs	r3, r7, r0
   17bd6:	f810 6b01 	ldrb.w	r6, [r0], #1
   17bda:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
   17bde:	f023 0303 	bic.w	r3, r3, #3
   17be2:	ae3e      	add	r6, sp, #248	; 0xf8
   17be4:	4433      	add	r3, r6
   17be6:	f843 5c90 	str.w	r5, [r3, #-144]
   17bea:	4290      	cmp	r0, r2
   17bec:	d1f2      	bne.n	17bd4 <POINTonE2_Deserialize_BE+0x14>
   17bee:	f101 0060 	add.w	r0, r1, #96	; 0x60
   17bf2:	2500      	movs	r5, #0
   17bf4:	f101 075f 	add.w	r7, r1, #95	; 0x5f
   17bf8:	1abb      	subs	r3, r7, r2
   17bfa:	f812 6b01 	ldrb.w	r6, [r2], #1
   17bfe:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
   17c02:	f023 0303 	bic.w	r3, r3, #3
   17c06:	ae3e      	add	r6, sp, #248	; 0xf8
   17c08:	4433      	add	r3, r6
   17c0a:	f843 5cc0 	str.w	r5, [r3, #-192]
   17c0e:	4282      	cmp	r2, r0
   17c10:	d1f2      	bne.n	17bf8 <POINTonE2_Deserialize_BE+0x38>
   17c12:	f101 0290 	add.w	r2, r1, #144	; 0x90
   17c16:	2500      	movs	r5, #0
   17c18:	f101 078f 	add.w	r7, r1, #143	; 0x8f
   17c1c:	1a3b      	subs	r3, r7, r0
   17c1e:	f810 6b01 	ldrb.w	r6, [r0], #1
   17c22:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
   17c26:	f023 0303 	bic.w	r3, r3, #3
   17c2a:	ae3e      	add	r6, sp, #248	; 0xf8
   17c2c:	4433      	add	r3, r6
   17c2e:	f843 5c30 	str.w	r5, [r3, #-48]
   17c32:	4290      	cmp	r0, r2
   17c34:	d1f2      	bne.n	17c1c <POINTonE2_Deserialize_BE+0x5c>
   17c36:	f101 06c0 	add.w	r6, r1, #192	; 0xc0
   17c3a:	2000      	movs	r0, #0
   17c3c:	31bf      	adds	r1, #191	; 0xbf
   17c3e:	1a8b      	subs	r3, r1, r2
   17c40:	f812 5b01 	ldrb.w	r5, [r2], #1
   17c44:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
   17c48:	f023 0303 	bic.w	r3, r3, #3
   17c4c:	ad3e      	add	r5, sp, #248	; 0xf8
   17c4e:	442b      	add	r3, r5
   17c50:	f843 0c60 	str.w	r0, [r3, #-96]
   17c54:	42b2      	cmp	r2, r6
   17c56:	d1f2      	bne.n	17c3e <POINTonE2_Deserialize_BE+0x7e>
   17c58:	9b25      	ldr	r3, [sp, #148]	; 0x94
   17c5a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   17c5e:	9325      	str	r3, [sp, #148]	; 0x94
   17c60:	4b55      	ldr	r3, [pc, #340]	; (17db8 <POINTonE2_Deserialize_BE+0x1f8>)
   17c62:	220c      	movs	r2, #12
   17c64:	9200      	str	r2, [sp, #0]
   17c66:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
   17c6a:	a91a      	add	r1, sp, #104	; 0x68
   17c6c:	a802      	add	r0, sp, #8
   17c6e:	f7f9 f857 	bl	10d20 <add_mod_n>
   17c72:	ae02      	add	r6, sp, #8
   17c74:	a819      	add	r0, sp, #100	; 0x64
   17c76:	ad0e      	add	r5, sp, #56	; 0x38
   17c78:	4632      	mov	r2, r6
   17c7a:	2100      	movs	r1, #0
   17c7c:	f852 3b04 	ldr.w	r3, [r2], #4
   17c80:	f850 7f04 	ldr.w	r7, [r0, #4]!
   17c84:	407b      	eors	r3, r7
   17c86:	4319      	orrs	r1, r3
   17c88:	42aa      	cmp	r2, r5
   17c8a:	d1f7      	bne.n	17c7c <POINTonE2_Deserialize_BE+0xbc>
   17c8c:	1e4b      	subs	r3, r1, #1
   17c8e:	438b      	bics	r3, r1
   17c90:	d403      	bmi.n	17c9a <POINTonE2_Deserialize_BE+0xda>
   17c92:	2001      	movs	r0, #1
   17c94:	b03e      	add	sp, #248	; 0xf8
   17c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17c9a:	4b47      	ldr	r3, [pc, #284]	; (17db8 <POINTonE2_Deserialize_BE+0x1f8>)
   17c9c:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   17ca0:	220c      	movs	r2, #12
   17ca2:	9200      	str	r2, [sp, #0]
   17ca4:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
   17ca8:	4641      	mov	r1, r8
   17caa:	a802      	add	r0, sp, #8
   17cac:	f7f9 f838 	bl	10d20 <add_mod_n>
   17cb0:	46c2      	mov	sl, r8
   17cb2:	4641      	mov	r1, r8
   17cb4:	4632      	mov	r2, r6
   17cb6:	2000      	movs	r0, #0
   17cb8:	f852 3b04 	ldr.w	r3, [r2], #4
   17cbc:	f851 7b04 	ldr.w	r7, [r1], #4
   17cc0:	407b      	eors	r3, r7
   17cc2:	4318      	orrs	r0, r3
   17cc4:	42aa      	cmp	r2, r5
   17cc6:	d1f7      	bne.n	17cb8 <POINTonE2_Deserialize_BE+0xf8>
   17cc8:	1e43      	subs	r3, r0, #1
   17cca:	4383      	bics	r3, r0
   17ccc:	d401      	bmi.n	17cd2 <POINTonE2_Deserialize_BE+0x112>
   17cce:	2001      	movs	r0, #1
   17cd0:	e7e0      	b.n	17c94 <POINTonE2_Deserialize_BE+0xd4>
   17cd2:	4b39      	ldr	r3, [pc, #228]	; (17db8 <POINTonE2_Deserialize_BE+0x1f8>)
   17cd4:	220c      	movs	r2, #12
   17cd6:	9200      	str	r2, [sp, #0]
   17cd8:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
   17cdc:	a932      	add	r1, sp, #200	; 0xc8
   17cde:	a802      	add	r0, sp, #8
   17ce0:	f7f9 f81e 	bl	10d20 <add_mod_n>
   17ce4:	a831      	add	r0, sp, #196	; 0xc4
   17ce6:	4632      	mov	r2, r6
   17ce8:	2100      	movs	r1, #0
   17cea:	f852 3b04 	ldr.w	r3, [r2], #4
   17cee:	f850 7f04 	ldr.w	r7, [r0, #4]!
   17cf2:	407b      	eors	r3, r7
   17cf4:	4319      	orrs	r1, r3
   17cf6:	42aa      	cmp	r2, r5
   17cf8:	d1f7      	bne.n	17cea <POINTonE2_Deserialize_BE+0x12a>
   17cfa:	1e4b      	subs	r3, r1, #1
   17cfc:	438b      	bics	r3, r1
   17cfe:	d401      	bmi.n	17d04 <POINTonE2_Deserialize_BE+0x144>
   17d00:	2001      	movs	r0, #1
   17d02:	e7c7      	b.n	17c94 <POINTonE2_Deserialize_BE+0xd4>
   17d04:	4b2c      	ldr	r3, [pc, #176]	; (17db8 <POINTonE2_Deserialize_BE+0x1f8>)
   17d06:	220c      	movs	r2, #12
   17d08:	9200      	str	r2, [sp, #0]
   17d0a:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
   17d0e:	a926      	add	r1, sp, #152	; 0x98
   17d10:	a802      	add	r0, sp, #8
   17d12:	f7f9 f805 	bl	10d20 <add_mod_n>
   17d16:	a925      	add	r1, sp, #148	; 0x94
   17d18:	2200      	movs	r2, #0
   17d1a:	f856 3b04 	ldr.w	r3, [r6], #4
   17d1e:	f851 0f04 	ldr.w	r0, [r1, #4]!
   17d22:	4043      	eors	r3, r0
   17d24:	431a      	orrs	r2, r3
   17d26:	42ae      	cmp	r6, r5
   17d28:	d1f7      	bne.n	17d1a <POINTonE2_Deserialize_BE+0x15a>
   17d2a:	1e53      	subs	r3, r2, #1
   17d2c:	4393      	bics	r3, r2
   17d2e:	d401      	bmi.n	17d34 <POINTonE2_Deserialize_BE+0x174>
   17d30:	2001      	movs	r0, #1
   17d32:	e7af      	b.n	17c94 <POINTonE2_Deserialize_BE+0xd4>
   17d34:	4d20      	ldr	r5, [pc, #128]	; (17db8 <POINTonE2_Deserialize_BE+0x1f8>)
   17d36:	f505 7634 	add.w	r6, r5, #720	; 0x2d0
   17d3a:	f04f 090c 	mov.w	r9, #12
   17d3e:	f8cd 9004 	str.w	r9, [sp, #4]
   17d42:	f8df 8078 	ldr.w	r8, [pc, #120]	; 17dbc <POINTonE2_Deserialize_BE+0x1fc>
   17d46:	f8cd 8000 	str.w	r8, [sp]
   17d4a:	462b      	mov	r3, r5
   17d4c:	4632      	mov	r2, r6
   17d4e:	a90e      	add	r1, sp, #56	; 0x38
   17d50:	4608      	mov	r0, r1
   17d52:	f7f8 fe3d 	bl	109d0 <mul_mont_n>
   17d56:	f8cd 9004 	str.w	r9, [sp, #4]
   17d5a:	f8cd 8000 	str.w	r8, [sp]
   17d5e:	462b      	mov	r3, r5
   17d60:	4632      	mov	r2, r6
   17d62:	a91a      	add	r1, sp, #104	; 0x68
   17d64:	4608      	mov	r0, r1
   17d66:	f7f8 fe33 	bl	109d0 <mul_mont_n>
   17d6a:	f8cd 9004 	str.w	r9, [sp, #4]
   17d6e:	f8cd 8000 	str.w	r8, [sp]
   17d72:	462b      	mov	r3, r5
   17d74:	4632      	mov	r2, r6
   17d76:	a926      	add	r1, sp, #152	; 0x98
   17d78:	4608      	mov	r0, r1
   17d7a:	f7f8 fe29 	bl	109d0 <mul_mont_n>
   17d7e:	f8cd 9004 	str.w	r9, [sp, #4]
   17d82:	f8cd 8000 	str.w	r8, [sp]
   17d86:	462b      	mov	r3, r5
   17d88:	4632      	mov	r2, r6
   17d8a:	a932      	add	r1, sp, #200	; 0xc8
   17d8c:	4608      	mov	r0, r1
   17d8e:	f7f8 fe1f 	bl	109d0 <mul_mont_n>
   17d92:	a80e      	add	r0, sp, #56	; 0x38
   17d94:	f7ff feb2 	bl	17afc <POINTonE2_affine_on_curve>
   17d98:	b158      	cbz	r0, 17db2 <POINTonE2_Deserialize_BE+0x1f2>
   17d9a:	ab0d      	add	r3, sp, #52	; 0x34
   17d9c:	3c04      	subs	r4, #4
   17d9e:	f10a 07bc 	add.w	r7, sl, #188	; 0xbc
   17da2:	f853 2f04 	ldr.w	r2, [r3, #4]!
   17da6:	f844 2f04 	str.w	r2, [r4, #4]!
   17daa:	429f      	cmp	r7, r3
   17dac:	d1f9      	bne.n	17da2 <POINTonE2_Deserialize_BE+0x1e2>
   17dae:	2000      	movs	r0, #0
   17db0:	e770      	b.n	17c94 <POINTonE2_Deserialize_BE+0xd4>
   17db2:	2002      	movs	r0, #2
   17db4:	e76e      	b.n	17c94 <POINTonE2_Deserialize_BE+0xd4>
   17db6:	bf00      	nop
   17db8:	00028738 	.word	0x00028738
   17dbc:	fffcfffd 	.word	0xfffcfffd

00017dc0 <POINTonE2_on_curve>:
   17dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17dc4:	b0ca      	sub	sp, #296	; 0x128
   17dc6:	4606      	mov	r6, r0
   17dc8:	f100 07c0 	add.w	r7, r0, #192	; 0xc0
   17dcc:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
   17dd0:	f500 758e 	add.w	r5, r0, #284	; 0x11c
   17dd4:	f04f 0c00 	mov.w	ip, #0
   17dd8:	f853 4f04 	ldr.w	r4, [r3, #4]!
   17ddc:	ea4c 0c04 	orr.w	ip, ip, r4
   17de0:	42ab      	cmp	r3, r5
   17de2:	d1f9      	bne.n	17dd8 <POINTonE2_on_curve+0x18>
   17de4:	f10c 35ff 	add.w	r5, ip, #4294967295
   17de8:	ea25 0c0c 	bic.w	ip, r5, ip
   17dec:	ea4f 75dc 	mov.w	r5, ip, lsr #31
   17df0:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 17ec8 <POINTonE2_on_curve+0x108>
   17df4:	4c35      	ldr	r4, [pc, #212]	; (17ecc <POINTonE2_on_curve+0x10c>)
   17df6:	4643      	mov	r3, r8
   17df8:	4622      	mov	r2, r4
   17dfa:	4639      	mov	r1, r7
   17dfc:	a802      	add	r0, sp, #8
   17dfe:	f7ff fd37 	bl	17870 <sqr_mont_384x>
   17e02:	f8cd 8000 	str.w	r8, [sp]
   17e06:	4623      	mov	r3, r4
   17e08:	463a      	mov	r2, r7
   17e0a:	a902      	add	r1, sp, #8
   17e0c:	4608      	mov	r0, r1
   17e0e:	f7fc faa1 	bl	14354 <mul_mont_384x>
   17e12:	4643      	mov	r3, r8
   17e14:	4622      	mov	r2, r4
   17e16:	a902      	add	r1, sp, #8
   17e18:	a832      	add	r0, sp, #200	; 0xc8
   17e1a:	f7ff fd29 	bl	17870 <sqr_mont_384x>
   17e1e:	270c      	movs	r7, #12
   17e20:	9700      	str	r7, [sp, #0]
   17e22:	4623      	mov	r3, r4
   17e24:	aa3e      	add	r2, sp, #248	; 0xf8
   17e26:	a932      	add	r1, sp, #200	; 0xc8
   17e28:	a802      	add	r0, sp, #8
   17e2a:	f7f8 fc23 	bl	10674 <sub_mod_n>
   17e2e:	9700      	str	r7, [sp, #0]
   17e30:	4623      	mov	r3, r4
   17e32:	aa3e      	add	r2, sp, #248	; 0xf8
   17e34:	a932      	add	r1, sp, #200	; 0xc8
   17e36:	a80e      	add	r0, sp, #56	; 0x38
   17e38:	f7f8 ff72 	bl	10d20 <add_mod_n>
   17e3c:	9700      	str	r7, [sp, #0]
   17e3e:	4623      	mov	r3, r4
   17e40:	2202      	movs	r2, #2
   17e42:	a902      	add	r1, sp, #8
   17e44:	4608      	mov	r0, r1
   17e46:	f7f9 f893 	bl	10f70 <lshift_mod_n>
   17e4a:	9700      	str	r7, [sp, #0]
   17e4c:	4623      	mov	r3, r4
   17e4e:	2202      	movs	r2, #2
   17e50:	a90e      	add	r1, sp, #56	; 0x38
   17e52:	4608      	mov	r0, r1
   17e54:	f7f9 f88c 	bl	10f70 <lshift_mod_n>
   17e58:	4643      	mov	r3, r8
   17e5a:	4622      	mov	r2, r4
   17e5c:	4631      	mov	r1, r6
   17e5e:	a832      	add	r0, sp, #200	; 0xc8
   17e60:	f7ff fd06 	bl	17870 <sqr_mont_384x>
   17e64:	f8cd 8000 	str.w	r8, [sp]
   17e68:	4623      	mov	r3, r4
   17e6a:	4632      	mov	r2, r6
   17e6c:	a932      	add	r1, sp, #200	; 0xc8
   17e6e:	4608      	mov	r0, r1
   17e70:	f7fc fa70 	bl	14354 <mul_mont_384x>
   17e74:	9700      	str	r7, [sp, #0]
   17e76:	4623      	mov	r3, r4
   17e78:	aa02      	add	r2, sp, #8
   17e7a:	a932      	add	r1, sp, #200	; 0xc8
   17e7c:	4608      	mov	r0, r1
   17e7e:	f7f8 ff4f 	bl	10d20 <add_mod_n>
   17e82:	9700      	str	r7, [sp, #0]
   17e84:	4623      	mov	r3, r4
   17e86:	aa0e      	add	r2, sp, #56	; 0x38
   17e88:	a93e      	add	r1, sp, #248	; 0xf8
   17e8a:	4608      	mov	r0, r1
   17e8c:	f7f8 ff48 	bl	10d20 <add_mod_n>
   17e90:	4643      	mov	r3, r8
   17e92:	4622      	mov	r2, r4
   17e94:	f106 0160 	add.w	r1, r6, #96	; 0x60
   17e98:	a81a      	add	r0, sp, #104	; 0x68
   17e9a:	f7ff fce9 	bl	17870 <sqr_mont_384x>
   17e9e:	aa31      	add	r2, sp, #196	; 0xc4
   17ea0:	a919      	add	r1, sp, #100	; 0x64
   17ea2:	f50d 7c92 	add.w	ip, sp, #292	; 0x124
   17ea6:	2000      	movs	r0, #0
   17ea8:	f852 3f04 	ldr.w	r3, [r2, #4]!
   17eac:	f851 4f04 	ldr.w	r4, [r1, #4]!
   17eb0:	4063      	eors	r3, r4
   17eb2:	4318      	orrs	r0, r3
   17eb4:	4562      	cmp	r2, ip
   17eb6:	d1f7      	bne.n	17ea8 <POINTonE2_on_curve+0xe8>
   17eb8:	1e43      	subs	r3, r0, #1
   17eba:	ea23 0000 	bic.w	r0, r3, r0
   17ebe:	ea45 70d0 	orr.w	r0, r5, r0, lsr #31
   17ec2:	b04a      	add	sp, #296	; 0x128
   17ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17ec8:	fffcfffd 	.word	0xfffcfffd
   17ecc:	00028738 	.word	0x00028738

00017ed0 <blst_p2_on_curve>:
   17ed0:	b508      	push	{r3, lr}
   17ed2:	f7ff ff75 	bl	17dc0 <POINTonE2_on_curve>
   17ed6:	bd08      	pop	{r3, pc}

00017ed8 <sqrt_align_fp2>:
   17ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17edc:	b0cd      	sub	sp, #308	; 0x134
   17ede:	9002      	str	r0, [sp, #8]
   17ee0:	9103      	str	r1, [sp, #12]
   17ee2:	4611      	mov	r1, r2
   17ee4:	461f      	mov	r7, r3
   17ee6:	4c6d      	ldr	r4, [pc, #436]	; (1809c <sqrt_align_fp2+0x1c4>)
   17ee8:	4b6d      	ldr	r3, [pc, #436]	; (180a0 <sqrt_align_fp2+0x1c8>)
   17eea:	4622      	mov	r2, r4
   17eec:	a81c      	add	r0, sp, #112	; 0x70
   17eee:	f7ff fcbf 	bl	17870 <sqr_mont_384x>
   17ef2:	250c      	movs	r5, #12
   17ef4:	9500      	str	r5, [sp, #0]
   17ef6:	4623      	mov	r3, r4
   17ef8:	463a      	mov	r2, r7
   17efa:	a91c      	add	r1, sp, #112	; 0x70
   17efc:	a804      	add	r0, sp, #16
   17efe:	f7f8 fbb9 	bl	10674 <sub_mod_n>
   17f02:	f107 0930 	add.w	r9, r7, #48	; 0x30
   17f06:	9500      	str	r5, [sp, #0]
   17f08:	4623      	mov	r3, r4
   17f0a:	464a      	mov	r2, r9
   17f0c:	a928      	add	r1, sp, #160	; 0xa0
   17f0e:	a810      	add	r0, sp, #64	; 0x40
   17f10:	f7f8 fbb0 	bl	10674 <sub_mod_n>
   17f14:	eb0d 0605 	add.w	r6, sp, r5
   17f18:	ac1b      	add	r4, sp, #108	; 0x6c
   17f1a:	4633      	mov	r3, r6
   17f1c:	2200      	movs	r2, #0
   17f1e:	f853 1f04 	ldr.w	r1, [r3, #4]!
   17f22:	430a      	orrs	r2, r1
   17f24:	42a3      	cmp	r3, r4
   17f26:	d1fa      	bne.n	17f1e <sqrt_align_fp2+0x46>
   17f28:	f102 38ff 	add.w	r8, r2, #4294967295
   17f2c:	ea28 0802 	bic.w	r8, r8, r2
   17f30:	ea4f 78d8 	mov.w	r8, r8, lsr #31
   17f34:	4859      	ldr	r0, [pc, #356]	; (1809c <sqrt_align_fp2+0x1c4>)
   17f36:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   17f3a:	ad33      	add	r5, sp, #204	; 0xcc
   17f3c:	30ec      	adds	r0, #236	; 0xec
   17f3e:	462a      	mov	r2, r5
   17f40:	f853 1f04 	ldr.w	r1, [r3, #4]!
   17f44:	f842 1f04 	str.w	r1, [r2, #4]!
   17f48:	4283      	cmp	r3, r0
   17f4a:	d1f9      	bne.n	17f40 <sqrt_align_fp2+0x68>
   17f4c:	f8df a14c 	ldr.w	sl, [pc, #332]	; 1809c <sqrt_align_fp2+0x1c4>
   17f50:	f04f 0b0c 	mov.w	fp, #12
   17f54:	f8cd b000 	str.w	fp, [sp]
   17f58:	4653      	mov	r3, sl
   17f5a:	463a      	mov	r2, r7
   17f5c:	a91c      	add	r1, sp, #112	; 0x70
   17f5e:	a804      	add	r0, sp, #16
   17f60:	f7f8 fede 	bl	10d20 <add_mod_n>
   17f64:	f8cd b000 	str.w	fp, [sp]
   17f68:	4653      	mov	r3, sl
   17f6a:	464a      	mov	r2, r9
   17f6c:	a928      	add	r1, sp, #160	; 0xa0
   17f6e:	a810      	add	r0, sp, #64	; 0x40
   17f70:	f7f8 fed6 	bl	10d20 <add_mod_n>
   17f74:	4633      	mov	r3, r6
   17f76:	2200      	movs	r2, #0
   17f78:	f853 1f04 	ldr.w	r1, [r3, #4]!
   17f7c:	430a      	orrs	r2, r1
   17f7e:	42a3      	cmp	r3, r4
   17f80:	d1fa      	bne.n	17f78 <sqrt_align_fp2+0xa0>
   17f82:	f102 3cff 	add.w	ip, r2, #4294967295
   17f86:	ea2c 0c02 	bic.w	ip, ip, r2
   17f8a:	ea4f 7adc 	mov.w	sl, ip, lsr #31
   17f8e:	ea4f 7cec 	mov.w	ip, ip, asr #31
   17f92:	4b44      	ldr	r3, [pc, #272]	; (180a4 <sqrt_align_fp2+0x1cc>)
   17f94:	f203 41bc 	addw	r1, r3, #1212	; 0x4bc
   17f98:	f203 5e1c 	addw	lr, r3, #1308	; 0x51c
   17f9c:	462a      	mov	r2, r5
   17f9e:	f852 0f04 	ldr.w	r0, [r2, #4]!
   17fa2:	f851 3f04 	ldr.w	r3, [r1, #4]!
   17fa6:	4043      	eors	r3, r0
   17fa8:	ea03 030c 	and.w	r3, r3, ip
   17fac:	4043      	eors	r3, r0
   17fae:	6013      	str	r3, [r2, #0]
   17fb0:	4571      	cmp	r1, lr
   17fb2:	d1f4      	bne.n	17f9e <sqrt_align_fp2+0xc6>
   17fb4:	ea48 080a 	orr.w	r8, r8, sl
   17fb8:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 1809c <sqrt_align_fp2+0x1c4>
   17fbc:	f04f 0b0c 	mov.w	fp, #12
   17fc0:	f8cd b000 	str.w	fp, [sp]
   17fc4:	4653      	mov	r3, sl
   17fc6:	464a      	mov	r2, r9
   17fc8:	a91c      	add	r1, sp, #112	; 0x70
   17fca:	a804      	add	r0, sp, #16
   17fcc:	f7f8 fb52 	bl	10674 <sub_mod_n>
   17fd0:	f8cd b000 	str.w	fp, [sp]
   17fd4:	4653      	mov	r3, sl
   17fd6:	463a      	mov	r2, r7
   17fd8:	a928      	add	r1, sp, #160	; 0xa0
   17fda:	a810      	add	r0, sp, #64	; 0x40
   17fdc:	f7f8 fea0 	bl	10d20 <add_mod_n>
   17fe0:	4633      	mov	r3, r6
   17fe2:	2200      	movs	r2, #0
   17fe4:	f853 1f04 	ldr.w	r1, [r3, #4]!
   17fe8:	430a      	orrs	r2, r1
   17fea:	42a3      	cmp	r3, r4
   17fec:	d1fa      	bne.n	17fe4 <sqrt_align_fp2+0x10c>
   17fee:	f102 3cff 	add.w	ip, r2, #4294967295
   17ff2:	ea2c 0c02 	bic.w	ip, ip, r2
   17ff6:	ea4f 7adc 	mov.w	sl, ip, lsr #31
   17ffa:	ea4f 7cec 	mov.w	ip, ip, asr #31
   17ffe:	4b29      	ldr	r3, [pc, #164]	; (180a4 <sqrt_align_fp2+0x1cc>)
   18000:	f203 511c 	addw	r1, r3, #1308	; 0x51c
   18004:	f203 5e7c 	addw	lr, r3, #1404	; 0x57c
   18008:	462a      	mov	r2, r5
   1800a:	f852 0f04 	ldr.w	r0, [r2, #4]!
   1800e:	f851 3f04 	ldr.w	r3, [r1, #4]!
   18012:	4043      	eors	r3, r0
   18014:	ea03 030c 	and.w	r3, r3, ip
   18018:	4043      	eors	r3, r0
   1801a:	6013      	str	r3, [r2, #0]
   1801c:	4571      	cmp	r1, lr
   1801e:	d1f4      	bne.n	1800a <sqrt_align_fp2+0x132>
   18020:	ea48 080a 	orr.w	r8, r8, sl
   18024:	f8df a074 	ldr.w	sl, [pc, #116]	; 1809c <sqrt_align_fp2+0x1c4>
   18028:	f04f 0b0c 	mov.w	fp, #12
   1802c:	f8cd b000 	str.w	fp, [sp]
   18030:	4653      	mov	r3, sl
   18032:	464a      	mov	r2, r9
   18034:	a91c      	add	r1, sp, #112	; 0x70
   18036:	a804      	add	r0, sp, #16
   18038:	f7f8 fe72 	bl	10d20 <add_mod_n>
   1803c:	f8cd b000 	str.w	fp, [sp]
   18040:	4653      	mov	r3, sl
   18042:	463a      	mov	r2, r7
   18044:	a928      	add	r1, sp, #160	; 0xa0
   18046:	a810      	add	r0, sp, #64	; 0x40
   18048:	f7f8 fb14 	bl	10674 <sub_mod_n>
   1804c:	2300      	movs	r3, #0
   1804e:	f856 2f04 	ldr.w	r2, [r6, #4]!
   18052:	4313      	orrs	r3, r2
   18054:	42a6      	cmp	r6, r4
   18056:	d1fa      	bne.n	1804e <sqrt_align_fp2+0x176>
   18058:	1e5c      	subs	r4, r3, #1
   1805a:	ea24 0303 	bic.w	r3, r4, r3
   1805e:	0fd8      	lsrs	r0, r3, #31
   18060:	17dc      	asrs	r4, r3, #31
   18062:	4e10      	ldr	r6, [pc, #64]	; (180a4 <sqrt_align_fp2+0x1cc>)
   18064:	f206 527c 	addw	r2, r6, #1404	; 0x57c
   18068:	f206 56dc 	addw	r6, r6, #1500	; 0x5dc
   1806c:	f855 1f04 	ldr.w	r1, [r5, #4]!
   18070:	f852 3f04 	ldr.w	r3, [r2, #4]!
   18074:	404b      	eors	r3, r1
   18076:	4023      	ands	r3, r4
   18078:	404b      	eors	r3, r1
   1807a:	602b      	str	r3, [r5, #0]
   1807c:	42b2      	cmp	r2, r6
   1807e:	d1f5      	bne.n	1806c <sqrt_align_fp2+0x194>
   18080:	ea48 0800 	orr.w	r8, r8, r0
   18084:	4b06      	ldr	r3, [pc, #24]	; (180a0 <sqrt_align_fp2+0x1c8>)
   18086:	9300      	str	r3, [sp, #0]
   18088:	4b04      	ldr	r3, [pc, #16]	; (1809c <sqrt_align_fp2+0x1c4>)
   1808a:	aa34      	add	r2, sp, #208	; 0xd0
   1808c:	9903      	ldr	r1, [sp, #12]
   1808e:	9802      	ldr	r0, [sp, #8]
   18090:	f7fc f960 	bl	14354 <mul_mont_384x>
   18094:	4640      	mov	r0, r8
   18096:	b04d      	add	sp, #308	; 0x134
   18098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1809c:	00028738 	.word	0x00028738
   180a0:	fffcfffd 	.word	0xfffcfffd
   180a4:	00029830 	.word	0x00029830

000180a8 <sqrt_fp2>:
   180a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   180ac:	b0b2      	sub	sp, #200	; 0xc8
   180ae:	4682      	mov	sl, r0
   180b0:	460c      	mov	r4, r1
   180b2:	4f40      	ldr	r7, [pc, #256]	; (181b4 <sqrt_fp2+0x10c>)
   180b4:	250c      	movs	r5, #12
   180b6:	9501      	str	r5, [sp, #4]
   180b8:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 181b8 <sqrt_fp2+0x110>
   180bc:	f8cd 9000 	str.w	r9, [sp]
   180c0:	463b      	mov	r3, r7
   180c2:	460a      	mov	r2, r1
   180c4:	a80e      	add	r0, sp, #56	; 0x38
   180c6:	f7f8 fc83 	bl	109d0 <mul_mont_n>
   180ca:	f104 0630 	add.w	r6, r4, #48	; 0x30
   180ce:	9501      	str	r5, [sp, #4]
   180d0:	f8cd 9000 	str.w	r9, [sp]
   180d4:	463b      	mov	r3, r7
   180d6:	4632      	mov	r2, r6
   180d8:	4631      	mov	r1, r6
   180da:	a802      	add	r0, sp, #8
   180dc:	f7f8 fc78 	bl	109d0 <mul_mont_n>
   180e0:	9500      	str	r5, [sp, #0]
   180e2:	463b      	mov	r3, r7
   180e4:	aa02      	add	r2, sp, #8
   180e6:	a90e      	add	r1, sp, #56	; 0x38
   180e8:	4608      	mov	r0, r1
   180ea:	f7f8 fe19 	bl	10d20 <add_mod_n>
   180ee:	a90e      	add	r1, sp, #56	; 0x38
   180f0:	4608      	mov	r0, r1
   180f2:	f7fd ffa3 	bl	1603c <sqrt_fp>
   180f6:	9500      	str	r5, [sp, #0]
   180f8:	463b      	mov	r3, r7
   180fa:	aa0e      	add	r2, sp, #56	; 0x38
   180fc:	4621      	mov	r1, r4
   180fe:	a802      	add	r0, sp, #8
   18100:	f7f8 fab8 	bl	10674 <sub_mod_n>
   18104:	9500      	str	r5, [sp, #0]
   18106:	463b      	mov	r3, r7
   18108:	aa0e      	add	r2, sp, #56	; 0x38
   1810a:	4621      	mov	r1, r4
   1810c:	4610      	mov	r0, r2
   1810e:	f7f8 fe07 	bl	10d20 <add_mod_n>
   18112:	a90e      	add	r1, sp, #56	; 0x38
   18114:	a81a      	add	r0, sp, #104	; 0x68
   18116:	468c      	mov	ip, r1
   18118:	2300      	movs	r3, #0
   1811a:	f85c 2b04 	ldr.w	r2, [ip], #4
   1811e:	4313      	orrs	r3, r2
   18120:	4584      	cmp	ip, r0
   18122:	d1fa      	bne.n	1811a <sqrt_fp2+0x72>
   18124:	f103 3cff 	add.w	ip, r3, #4294967295
   18128:	ea2c 0303 	bic.w	r3, ip, r3
   1812c:	ea4f 7ce3 	mov.w	ip, r3, asr #31
   18130:	ab02      	add	r3, sp, #8
   18132:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
   18136:	f853 2b04 	ldr.w	r2, [r3], #4
   1813a:	6808      	ldr	r0, [r1, #0]
   1813c:	4042      	eors	r2, r0
   1813e:	ea02 020c 	and.w	r2, r2, ip
   18142:	4042      	eors	r2, r0
   18144:	f841 2b04 	str.w	r2, [r1], #4
   18148:	4573      	cmp	r3, lr
   1814a:	d1f4      	bne.n	18136 <sqrt_fp2+0x8e>
   1814c:	4f19      	ldr	r7, [pc, #100]	; (181b4 <sqrt_fp2+0x10c>)
   1814e:	f04f 080c 	mov.w	r8, #12
   18152:	f8cd 8000 	str.w	r8, [sp]
   18156:	463b      	mov	r3, r7
   18158:	2201      	movs	r2, #1
   1815a:	a90e      	add	r1, sp, #56	; 0x38
   1815c:	4608      	mov	r0, r1
   1815e:	f7f8 faf1 	bl	10744 <rshift_mod_n>
   18162:	a90e      	add	r1, sp, #56	; 0x38
   18164:	a81a      	add	r0, sp, #104	; 0x68
   18166:	f7fe f90f 	bl	16388 <recip_sqrt_fp>
   1816a:	f8cd 8000 	str.w	r8, [sp]
   1816e:	463b      	mov	r3, r7
   18170:	2201      	movs	r2, #1
   18172:	4631      	mov	r1, r6
   18174:	a826      	add	r0, sp, #152	; 0x98
   18176:	f7f8 fae5 	bl	10744 <rshift_mod_n>
   1817a:	f8cd 8004 	str.w	r8, [sp, #4]
   1817e:	4e0e      	ldr	r6, [pc, #56]	; (181b8 <sqrt_fp2+0x110>)
   18180:	9600      	str	r6, [sp, #0]
   18182:	463b      	mov	r3, r7
   18184:	aa1a      	add	r2, sp, #104	; 0x68
   18186:	a926      	add	r1, sp, #152	; 0x98
   18188:	4608      	mov	r0, r1
   1818a:	f7f8 fc21 	bl	109d0 <mul_mont_n>
   1818e:	f8cd 8004 	str.w	r8, [sp, #4]
   18192:	9600      	str	r6, [sp, #0]
   18194:	463b      	mov	r3, r7
   18196:	aa0e      	add	r2, sp, #56	; 0x38
   18198:	a91a      	add	r1, sp, #104	; 0x68
   1819a:	4608      	mov	r0, r1
   1819c:	f7f8 fc18 	bl	109d0 <mul_mont_n>
   181a0:	4623      	mov	r3, r4
   181a2:	aa1a      	add	r2, sp, #104	; 0x68
   181a4:	4611      	mov	r1, r2
   181a6:	4650      	mov	r0, sl
   181a8:	f7ff fe96 	bl	17ed8 <sqrt_align_fp2>
   181ac:	b032      	add	sp, #200	; 0xc8
   181ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   181b2:	bf00      	nop
   181b4:	00028738 	.word	0x00028738
   181b8:	fffcfffd 	.word	0xfffcfffd

000181bc <blst_fp2_sqrt>:
   181bc:	b508      	push	{r3, lr}
   181be:	f7ff ff73 	bl	180a8 <sqrt_fp2>
   181c2:	bd08      	pop	{r3, pc}

000181c4 <POINTonE2_Uncompress_BE>:
   181c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   181c8:	b0d7      	sub	sp, #348	; 0x15c
   181ca:	4604      	mov	r4, r0
   181cc:	f101 0230 	add.w	r2, r1, #48	; 0x30
   181d0:	4608      	mov	r0, r1
   181d2:	2500      	movs	r5, #0
   181d4:	f101 072f 	add.w	r7, r1, #47	; 0x2f
   181d8:	1a3b      	subs	r3, r7, r0
   181da:	f810 6b01 	ldrb.w	r6, [r0], #1
   181de:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
   181e2:	f023 0303 	bic.w	r3, r3, #3
   181e6:	ae56      	add	r6, sp, #344	; 0x158
   181e8:	4433      	add	r3, r6
   181ea:	f843 5c90 	str.w	r5, [r3, #-144]
   181ee:	4290      	cmp	r0, r2
   181f0:	d1f2      	bne.n	181d8 <POINTonE2_Uncompress_BE+0x14>
   181f2:	f101 0660 	add.w	r6, r1, #96	; 0x60
   181f6:	2000      	movs	r0, #0
   181f8:	315f      	adds	r1, #95	; 0x5f
   181fa:	1a8b      	subs	r3, r1, r2
   181fc:	f812 5b01 	ldrb.w	r5, [r2], #1
   18200:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
   18204:	f023 0303 	bic.w	r3, r3, #3
   18208:	ad56      	add	r5, sp, #344	; 0x158
   1820a:	442b      	add	r3, r5
   1820c:	f843 0cc0 	str.w	r0, [r3, #-192]
   18210:	42b2      	cmp	r2, r6
   18212:	d1f2      	bne.n	181fa <POINTonE2_Uncompress_BE+0x36>
   18214:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
   18216:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   1821a:	933d      	str	r3, [sp, #244]	; 0xf4
   1821c:	4b64      	ldr	r3, [pc, #400]	; (183b0 <POINTonE2_Uncompress_BE+0x1ec>)
   1821e:	220c      	movs	r2, #12
   18220:	9200      	str	r2, [sp, #0]
   18222:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
   18226:	a932      	add	r1, sp, #200	; 0xc8
   18228:	a81a      	add	r0, sp, #104	; 0x68
   1822a:	f7f8 fd79 	bl	10d20 <add_mod_n>
   1822e:	ad1a      	add	r5, sp, #104	; 0x68
   18230:	a831      	add	r0, sp, #196	; 0xc4
   18232:	ae26      	add	r6, sp, #152	; 0x98
   18234:	462a      	mov	r2, r5
   18236:	2100      	movs	r1, #0
   18238:	f852 3b04 	ldr.w	r3, [r2], #4
   1823c:	f850 7f04 	ldr.w	r7, [r0, #4]!
   18240:	407b      	eors	r3, r7
   18242:	4319      	orrs	r1, r3
   18244:	42b2      	cmp	r2, r6
   18246:	d1f7      	bne.n	18238 <POINTonE2_Uncompress_BE+0x74>
   18248:	1e4b      	subs	r3, r1, #1
   1824a:	438b      	bics	r3, r1
   1824c:	f140 80a4 	bpl.w	18398 <POINTonE2_Uncompress_BE+0x1d4>
   18250:	4b57      	ldr	r3, [pc, #348]	; (183b0 <POINTonE2_Uncompress_BE+0x1ec>)
   18252:	af26      	add	r7, sp, #152	; 0x98
   18254:	220c      	movs	r2, #12
   18256:	9200      	str	r2, [sp, #0]
   18258:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
   1825c:	4639      	mov	r1, r7
   1825e:	a81a      	add	r0, sp, #104	; 0x68
   18260:	f7f8 fd5e 	bl	10d20 <add_mod_n>
   18264:	46b8      	mov	r8, r7
   18266:	4639      	mov	r1, r7
   18268:	2200      	movs	r2, #0
   1826a:	f855 3b04 	ldr.w	r3, [r5], #4
   1826e:	f851 0b04 	ldr.w	r0, [r1], #4
   18272:	4043      	eors	r3, r0
   18274:	431a      	orrs	r2, r3
   18276:	42b5      	cmp	r5, r6
   18278:	d1f7      	bne.n	1826a <POINTonE2_Uncompress_BE+0xa6>
   1827a:	1e53      	subs	r3, r2, #1
   1827c:	4393      	bics	r3, r2
   1827e:	f140 8090 	bpl.w	183a2 <POINTonE2_Uncompress_BE+0x1de>
   18282:	4d4b      	ldr	r5, [pc, #300]	; (183b0 <POINTonE2_Uncompress_BE+0x1ec>)
   18284:	f505 7934 	add.w	r9, r5, #720	; 0x2d0
   18288:	260c      	movs	r6, #12
   1828a:	9601      	str	r6, [sp, #4]
   1828c:	4f49      	ldr	r7, [pc, #292]	; (183b4 <POINTonE2_Uncompress_BE+0x1f0>)
   1828e:	9700      	str	r7, [sp, #0]
   18290:	462b      	mov	r3, r5
   18292:	464a      	mov	r2, r9
   18294:	a926      	add	r1, sp, #152	; 0x98
   18296:	4608      	mov	r0, r1
   18298:	f7f8 fb9a 	bl	109d0 <mul_mont_n>
   1829c:	9601      	str	r6, [sp, #4]
   1829e:	9700      	str	r7, [sp, #0]
   182a0:	462b      	mov	r3, r5
   182a2:	464a      	mov	r2, r9
   182a4:	a932      	add	r1, sp, #200	; 0xc8
   182a6:	4608      	mov	r0, r1
   182a8:	f7f8 fb92 	bl	109d0 <mul_mont_n>
   182ac:	463b      	mov	r3, r7
   182ae:	462a      	mov	r2, r5
   182b0:	a926      	add	r1, sp, #152	; 0x98
   182b2:	a83e      	add	r0, sp, #248	; 0xf8
   182b4:	f7ff fadc 	bl	17870 <sqr_mont_384x>
   182b8:	9700      	str	r7, [sp, #0]
   182ba:	462b      	mov	r3, r5
   182bc:	aa26      	add	r2, sp, #152	; 0x98
   182be:	a93e      	add	r1, sp, #248	; 0xf8
   182c0:	4608      	mov	r0, r1
   182c2:	f7fc f847 	bl	14354 <mul_mont_384x>
   182c6:	4f3c      	ldr	r7, [pc, #240]	; (183b8 <POINTonE2_Uncompress_BE+0x1f4>)
   182c8:	9600      	str	r6, [sp, #0]
   182ca:	462b      	mov	r3, r5
   182cc:	f507 628c 	add.w	r2, r7, #1120	; 0x460
   182d0:	a93e      	add	r1, sp, #248	; 0xf8
   182d2:	4608      	mov	r0, r1
   182d4:	f7f8 fd24 	bl	10d20 <add_mod_n>
   182d8:	9600      	str	r6, [sp, #0]
   182da:	462b      	mov	r3, r5
   182dc:	f507 6292 	add.w	r2, r7, #1168	; 0x490
   182e0:	a94a      	add	r1, sp, #296	; 0x128
   182e2:	4608      	mov	r0, r1
   182e4:	f7f8 fd1c 	bl	10d20 <add_mod_n>
   182e8:	a93e      	add	r1, sp, #248	; 0xf8
   182ea:	4608      	mov	r0, r1
   182ec:	f7ff fedc 	bl	180a8 <sqrt_fp2>
   182f0:	2800      	cmp	r0, #0
   182f2:	d059      	beq.n	183a8 <POINTonE2_Uncompress_BE+0x1e4>
   182f4:	ab25      	add	r3, sp, #148	; 0x94
   182f6:	1f22      	subs	r2, r4, #4
   182f8:	f108 08bc 	add.w	r8, r8, #188	; 0xbc
   182fc:	f853 1f04 	ldr.w	r1, [r3, #4]!
   18300:	f842 1f04 	str.w	r1, [r2, #4]!
   18304:	4543      	cmp	r3, r8
   18306:	d1f9      	bne.n	182fc <POINTonE2_Uncompress_BE+0x138>
   18308:	4d2a      	ldr	r5, [pc, #168]	; (183b4 <POINTonE2_Uncompress_BE+0x1f0>)
   1830a:	4e29      	ldr	r6, [pc, #164]	; (183b0 <POINTonE2_Uncompress_BE+0x1ec>)
   1830c:	270c      	movs	r7, #12
   1830e:	9700      	str	r7, [sp, #0]
   18310:	462b      	mov	r3, r5
   18312:	4632      	mov	r2, r6
   18314:	f104 0160 	add.w	r1, r4, #96	; 0x60
   18318:	a802      	add	r0, sp, #8
   1831a:	f7f8 fe8b 	bl	11034 <from_mont_n>
   1831e:	9700      	str	r7, [sp, #0]
   18320:	462b      	mov	r3, r5
   18322:	4632      	mov	r2, r6
   18324:	f104 0190 	add.w	r1, r4, #144	; 0x90
   18328:	a80e      	add	r0, sp, #56	; 0x38
   1832a:	f7f8 fe83 	bl	11034 <from_mont_n>
   1832e:	463a      	mov	r2, r7
   18330:	4631      	mov	r1, r6
   18332:	a802      	add	r0, sp, #8
   18334:	f7f8 ff93 	bl	1125e <sgn0_pty_mod_n>
   18338:	4605      	mov	r5, r0
   1833a:	463a      	mov	r2, r7
   1833c:	4631      	mov	r1, r6
   1833e:	a80e      	add	r0, sp, #56	; 0x38
   18340:	f7f8 ff8d 	bl	1125e <sgn0_pty_mod_n>
   18344:	aa0d      	add	r2, sp, #52	; 0x34
   18346:	ab02      	add	r3, sp, #8
   18348:	ae19      	add	r6, sp, #100	; 0x64
   1834a:	2100      	movs	r1, #0
   1834c:	f852 4f04 	ldr.w	r4, [r2, #4]!
   18350:	4321      	orrs	r1, r4
   18352:	42b2      	cmp	r2, r6
   18354:	d1fa      	bne.n	1834c <POINTonE2_Uncompress_BE+0x188>
   18356:	1e4c      	subs	r4, r1, #1
   18358:	ea24 0101 	bic.w	r1, r4, r1
   1835c:	0fcc      	lsrs	r4, r1, #31
   1835e:	ea05 71e1 	and.w	r1, r5, r1, asr #31
   18362:	3c01      	subs	r4, #1
   18364:	4004      	ands	r4, r0
   18366:	430c      	orrs	r4, r1
   18368:	f103 0630 	add.w	r6, r3, #48	; 0x30
   1836c:	2200      	movs	r2, #0
   1836e:	f853 1b04 	ldr.w	r1, [r3], #4
   18372:	430a      	orrs	r2, r1
   18374:	42b3      	cmp	r3, r6
   18376:	d1fa      	bne.n	1836e <POINTonE2_Uncompress_BE+0x1aa>
   18378:	1e53      	subs	r3, r2, #1
   1837a:	ea23 0202 	bic.w	r2, r3, r2
   1837e:	0fd3      	lsrs	r3, r2, #31
   18380:	ea00 72e2 	and.w	r2, r0, r2, asr #31
   18384:	3b01      	subs	r3, #1
   18386:	ea03 0005 	and.w	r0, r3, r5
   1838a:	4310      	orrs	r0, r2
   1838c:	f000 0001 	and.w	r0, r0, #1
   18390:	f004 0402 	and.w	r4, r4, #2
   18394:	4320      	orrs	r0, r4
   18396:	e001      	b.n	1839c <POINTonE2_Uncompress_BE+0x1d8>
   18398:	f04f 30ff 	mov.w	r0, #4294967295
   1839c:	b057      	add	sp, #348	; 0x15c
   1839e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   183a2:	f04f 30ff 	mov.w	r0, #4294967295
   183a6:	e7f9      	b.n	1839c <POINTonE2_Uncompress_BE+0x1d8>
   183a8:	f06f 0001 	mvn.w	r0, #1
   183ac:	e7f6      	b.n	1839c <POINTonE2_Uncompress_BE+0x1d8>
   183ae:	bf00      	nop
   183b0:	00028738 	.word	0x00028738
   183b4:	fffcfffd 	.word	0xfffcfffd
   183b8:	00029830 	.word	0x00029830

000183bc <POINTonE2_Uncompress>:
   183bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   183c0:	b082      	sub	sp, #8
   183c2:	780d      	ldrb	r5, [r1, #0]
   183c4:	f991 3000 	ldrsb.w	r3, [r1]
   183c8:	2b00      	cmp	r3, #0
   183ca:	da3f      	bge.n	1844c <POINTonE2_Uncompress+0x90>
   183cc:	4604      	mov	r4, r0
   183ce:	f015 0640 	ands.w	r6, r5, #64	; 0x40
   183d2:	d01a      	beq.n	1840a <POINTonE2_Uncompress+0x4e>
   183d4:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   183d8:	3d01      	subs	r5, #1
   183da:	0fed      	lsrs	r5, r5, #31
   183dc:	460b      	mov	r3, r1
   183de:	315f      	adds	r1, #95	; 0x5f
   183e0:	2200      	movs	r2, #0
   183e2:	f813 cf01 	ldrb.w	ip, [r3, #1]!
   183e6:	ea42 020c 	orr.w	r2, r2, ip
   183ea:	428b      	cmp	r3, r1
   183ec:	d1f9      	bne.n	183e2 <POINTonE2_Uncompress+0x26>
   183ee:	3a01      	subs	r2, #1
   183f0:	ea15 73d2 	ands.w	r3, r5, r2, lsr #31
   183f4:	d02f      	beq.n	18456 <POINTonE2_Uncompress+0x9a>
   183f6:	4623      	mov	r3, r4
   183f8:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
   183fc:	2200      	movs	r2, #0
   183fe:	f843 2b04 	str.w	r2, [r3], #4
   18402:	428b      	cmp	r3, r1
   18404:	d1fb      	bne.n	183fe <POINTonE2_Uncompress+0x42>
   18406:	2600      	movs	r6, #0
   18408:	e021      	b.n	1844e <POINTonE2_Uncompress+0x92>
   1840a:	f7ff fedb 	bl	181c4 <POINTonE2_Uncompress_BE>
   1840e:	2803      	cmp	r0, #3
   18410:	d902      	bls.n	18418 <POINTonE2_Uncompress+0x5c>
   18412:	4240      	negs	r0, r0
   18414:	b2c6      	uxtb	r6, r0
   18416:	e01a      	b.n	1844e <POINTonE2_Uncompress+0x92>
   18418:	f3c5 1540 	ubfx	r5, r5, #5, #1
   1841c:	ea85 0550 	eor.w	r5, r5, r0, lsr #1
   18420:	f104 0060 	add.w	r0, r4, #96	; 0x60
   18424:	4f0d      	ldr	r7, [pc, #52]	; (1845c <POINTonE2_Uncompress+0xa0>)
   18426:	f04f 080c 	mov.w	r8, #12
   1842a:	f8cd 8000 	str.w	r8, [sp]
   1842e:	463b      	mov	r3, r7
   18430:	462a      	mov	r2, r5
   18432:	4601      	mov	r1, r0
   18434:	f7f9 fb08 	bl	11a48 <cneg_mod_n>
   18438:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1843c:	f8cd 8000 	str.w	r8, [sp]
   18440:	463b      	mov	r3, r7
   18442:	462a      	mov	r2, r5
   18444:	4601      	mov	r1, r0
   18446:	f7f9 faff 	bl	11a48 <cneg_mod_n>
   1844a:	e000      	b.n	1844e <POINTonE2_Uncompress+0x92>
   1844c:	2601      	movs	r6, #1
   1844e:	4630      	mov	r0, r6
   18450:	b002      	add	sp, #8
   18452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18456:	2601      	movs	r6, #1
   18458:	e7f9      	b.n	1844e <POINTonE2_Uncompress+0x92>
   1845a:	bf00      	nop
   1845c:	00028738 	.word	0x00028738

00018460 <blst_p2_uncompress>:
   18460:	b508      	push	{r3, lr}
   18462:	f7ff ffab 	bl	183bc <POINTonE2_Uncompress>
   18466:	bd08      	pop	{r3, pc}

00018468 <blst_p2_deserialize>:
   18468:	b508      	push	{r3, lr}
   1846a:	780b      	ldrb	r3, [r1, #0]
   1846c:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   18470:	d01a      	beq.n	184a8 <blst_p2_deserialize+0x40>
   18472:	f013 0f80 	tst.w	r3, #128	; 0x80
   18476:	d11a      	bne.n	184ae <blst_p2_deserialize+0x46>
   18478:	f013 0f40 	tst.w	r3, #64	; 0x40
   1847c:	d024      	beq.n	184c8 <blst_p2_deserialize+0x60>
   1847e:	f003 0c3f 	and.w	ip, r3, #63	; 0x3f
   18482:	f10c 3cff 	add.w	ip, ip, #4294967295
   18486:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
   1848a:	460b      	mov	r3, r1
   1848c:	31bf      	adds	r1, #191	; 0xbf
   1848e:	2200      	movs	r2, #0
   18490:	f813 ef01 	ldrb.w	lr, [r3, #1]!
   18494:	ea42 020e 	orr.w	r2, r2, lr
   18498:	428b      	cmp	r3, r1
   1849a:	d1f9      	bne.n	18490 <blst_p2_deserialize+0x28>
   1849c:	3a01      	subs	r2, #1
   1849e:	ea1c 73d2 	ands.w	r3, ip, r2, lsr #31
   184a2:	d107      	bne.n	184b4 <blst_p2_deserialize+0x4c>
   184a4:	2001      	movs	r0, #1
   184a6:	e010      	b.n	184ca <blst_p2_deserialize+0x62>
   184a8:	f7ff fb8a 	bl	17bc0 <POINTonE2_Deserialize_BE>
   184ac:	e00d      	b.n	184ca <blst_p2_deserialize+0x62>
   184ae:	f7ff ff85 	bl	183bc <POINTonE2_Uncompress>
   184b2:	e00a      	b.n	184ca <blst_p2_deserialize+0x62>
   184b4:	4603      	mov	r3, r0
   184b6:	f100 01c0 	add.w	r1, r0, #192	; 0xc0
   184ba:	2200      	movs	r2, #0
   184bc:	f843 2b04 	str.w	r2, [r3], #4
   184c0:	428b      	cmp	r3, r1
   184c2:	d1fb      	bne.n	184bc <blst_p2_deserialize+0x54>
   184c4:	2000      	movs	r0, #0
   184c6:	e000      	b.n	184ca <blst_p2_deserialize+0x62>
   184c8:	2001      	movs	r0, #1
   184ca:	bd08      	pop	{r3, pc}

000184cc <POINTonE2_is_equal>:
   184cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184d0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
   184d4:	4607      	mov	r7, r0
   184d6:	460e      	mov	r6, r1
   184d8:	f100 08c0 	add.w	r8, r0, #192	; 0xc0
   184dc:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
   184e0:	f500 708e 	add.w	r0, r0, #284	; 0x11c
   184e4:	2200      	movs	r2, #0
   184e6:	f853 1f04 	ldr.w	r1, [r3, #4]!
   184ea:	430a      	orrs	r2, r1
   184ec:	4283      	cmp	r3, r0
   184ee:	d1fa      	bne.n	184e6 <POINTonE2_is_equal+0x1a>
   184f0:	1e55      	subs	r5, r2, #1
   184f2:	ea25 0502 	bic.w	r5, r5, r2
   184f6:	0fed      	lsrs	r5, r5, #31
   184f8:	f106 09c0 	add.w	r9, r6, #192	; 0xc0
   184fc:	f106 03bc 	add.w	r3, r6, #188	; 0xbc
   18500:	f506 708e 	add.w	r0, r6, #284	; 0x11c
   18504:	2200      	movs	r2, #0
   18506:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1850a:	430a      	orrs	r2, r1
   1850c:	4283      	cmp	r3, r0
   1850e:	d1fa      	bne.n	18506 <POINTonE2_is_equal+0x3a>
   18510:	1e54      	subs	r4, r2, #1
   18512:	ea24 0202 	bic.w	r2, r4, r2
   18516:	0fd4      	lsrs	r4, r2, #31
   18518:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 185cc <POINTonE2_is_equal+0x100>
   1851c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 185d0 <POINTonE2_is_equal+0x104>
   18520:	465b      	mov	r3, fp
   18522:	4652      	mov	r2, sl
   18524:	4641      	mov	r1, r8
   18526:	a87a      	add	r0, sp, #488	; 0x1e8
   18528:	f7ff f9a2 	bl	17870 <sqr_mont_384x>
   1852c:	465b      	mov	r3, fp
   1852e:	4652      	mov	r2, sl
   18530:	4649      	mov	r1, r9
   18532:	a862      	add	r0, sp, #392	; 0x188
   18534:	f7ff f99c 	bl	17870 <sqr_mont_384x>
   18538:	f8cd b000 	str.w	fp, [sp]
   1853c:	4653      	mov	r3, sl
   1853e:	aa62      	add	r2, sp, #392	; 0x188
   18540:	4639      	mov	r1, r7
   18542:	a832      	add	r0, sp, #200	; 0xc8
   18544:	f7fb ff06 	bl	14354 <mul_mont_384x>
   18548:	f8cd b000 	str.w	fp, [sp]
   1854c:	4653      	mov	r3, sl
   1854e:	aa7a      	add	r2, sp, #488	; 0x1e8
   18550:	4631      	mov	r1, r6
   18552:	a802      	add	r0, sp, #8
   18554:	f7fb fefe 	bl	14354 <mul_mont_384x>
   18558:	f8cd b000 	str.w	fp, [sp]
   1855c:	4653      	mov	r3, sl
   1855e:	464a      	mov	r2, r9
   18560:	f107 0160 	add.w	r1, r7, #96	; 0x60
   18564:	a84a      	add	r0, sp, #296	; 0x128
   18566:	f7fb fef5 	bl	14354 <mul_mont_384x>
   1856a:	f8cd b000 	str.w	fp, [sp]
   1856e:	4653      	mov	r3, sl
   18570:	4642      	mov	r2, r8
   18572:	f106 0160 	add.w	r1, r6, #96	; 0x60
   18576:	a81a      	add	r0, sp, #104	; 0x68
   18578:	f7fb feec 	bl	14354 <mul_mont_384x>
   1857c:	f8cd b000 	str.w	fp, [sp]
   18580:	4653      	mov	r3, sl
   18582:	aa62      	add	r2, sp, #392	; 0x188
   18584:	a94a      	add	r1, sp, #296	; 0x128
   18586:	4608      	mov	r0, r1
   18588:	f7fb fee4 	bl	14354 <mul_mont_384x>
   1858c:	f8cd b000 	str.w	fp, [sp]
   18590:	4653      	mov	r3, sl
   18592:	aa7a      	add	r2, sp, #488	; 0x1e8
   18594:	a91a      	add	r1, sp, #104	; 0x68
   18596:	4608      	mov	r0, r1
   18598:	f7fb fedc 	bl	14354 <mul_mont_384x>
   1859c:	aa31      	add	r2, sp, #196	; 0xc4
   1859e:	a901      	add	r1, sp, #4
   185a0:	af61      	add	r7, sp, #388	; 0x184
   185a2:	2000      	movs	r0, #0
   185a4:	f852 3f04 	ldr.w	r3, [r2, #4]!
   185a8:	f851 6f04 	ldr.w	r6, [r1, #4]!
   185ac:	4073      	eors	r3, r6
   185ae:	4318      	orrs	r0, r3
   185b0:	42ba      	cmp	r2, r7
   185b2:	d1f7      	bne.n	185a4 <POINTonE2_is_equal+0xd8>
   185b4:	1e43      	subs	r3, r0, #1
   185b6:	ea23 0000 	bic.w	r0, r3, r0
   185ba:	406c      	eors	r4, r5
   185bc:	f084 0401 	eor.w	r4, r4, #1
   185c0:	ea04 70d0 	and.w	r0, r4, r0, lsr #31
   185c4:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
   185c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185cc:	fffcfffd 	.word	0xfffcfffd
   185d0:	00028738 	.word	0x00028738

000185d4 <blst_p2_is_equal>:
   185d4:	b508      	push	{r3, lr}
   185d6:	f7ff ff79 	bl	184cc <POINTonE2_is_equal>
   185da:	bd08      	pop	{r3, pc}

000185dc <POINTonE2_add>:
   185dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   185e0:	f5ad 7d75 	sub.w	sp, sp, #980	; 0x3d4
   185e4:	9003      	str	r0, [sp, #12]
   185e6:	460e      	mov	r6, r1
   185e8:	4615      	mov	r5, r2
   185ea:	f101 0ac0 	add.w	sl, r1, #192	; 0xc0
   185ee:	f101 03bc 	add.w	r3, r1, #188	; 0xbc
   185f2:	f501 708e 	add.w	r0, r1, #284	; 0x11c
   185f6:	2200      	movs	r2, #0
   185f8:	f853 1f04 	ldr.w	r1, [r3, #4]!
   185fc:	430a      	orrs	r2, r1
   185fe:	4283      	cmp	r3, r0
   18600:	d1fa      	bne.n	185f8 <POINTonE2_add+0x1c>
   18602:	1e53      	subs	r3, r2, #1
   18604:	ea23 0202 	bic.w	r2, r3, r2
   18608:	0fd3      	lsrs	r3, r2, #31
   1860a:	9302      	str	r3, [sp, #8]
   1860c:	4fb5      	ldr	r7, [pc, #724]	; (188e4 <POINTonE2_add+0x308>)
   1860e:	4cb6      	ldr	r4, [pc, #728]	; (188e8 <POINTonE2_add+0x30c>)
   18610:	463b      	mov	r3, r7
   18612:	4622      	mov	r2, r4
   18614:	4651      	mov	r1, sl
   18616:	a894      	add	r0, sp, #592	; 0x250
   18618:	f7ff f92a 	bl	17870 <sqr_mont_384x>
   1861c:	9700      	str	r7, [sp, #0]
   1861e:	4623      	mov	r3, r4
   18620:	4652      	mov	r2, sl
   18622:	a994      	add	r1, sp, #592	; 0x250
   18624:	a8dc      	add	r0, sp, #880	; 0x370
   18626:	f7fb fe95 	bl	14354 <mul_mont_384x>
   1862a:	9700      	str	r7, [sp, #0]
   1862c:	4623      	mov	r3, r4
   1862e:	f105 0260 	add.w	r2, r5, #96	; 0x60
   18632:	a9dc      	add	r1, sp, #880	; 0x370
   18634:	4608      	mov	r0, r1
   18636:	f7fb fe8d 	bl	14354 <mul_mont_384x>
   1863a:	f105 0bc0 	add.w	fp, r5, #192	; 0xc0
   1863e:	f105 03bc 	add.w	r3, r5, #188	; 0xbc
   18642:	f505 718e 	add.w	r1, r5, #284	; 0x11c
   18646:	f04f 0800 	mov.w	r8, #0
   1864a:	f853 2f04 	ldr.w	r2, [r3, #4]!
   1864e:	ea48 0802 	orr.w	r8, r8, r2
   18652:	4299      	cmp	r1, r3
   18654:	d1f9      	bne.n	1864a <POINTonE2_add+0x6e>
   18656:	f8df 928c 	ldr.w	r9, [pc, #652]	; 188e4 <POINTonE2_add+0x308>
   1865a:	4ca3      	ldr	r4, [pc, #652]	; (188e8 <POINTonE2_add+0x30c>)
   1865c:	464b      	mov	r3, r9
   1865e:	4622      	mov	r2, r4
   18660:	4659      	mov	r1, fp
   18662:	a87c      	add	r0, sp, #496	; 0x1f0
   18664:	f7ff f904 	bl	17870 <sqr_mont_384x>
   18668:	f8cd 9000 	str.w	r9, [sp]
   1866c:	4623      	mov	r3, r4
   1866e:	465a      	mov	r2, fp
   18670:	a97c      	add	r1, sp, #496	; 0x1f0
   18672:	a84c      	add	r0, sp, #304	; 0x130
   18674:	f7fb fe6e 	bl	14354 <mul_mont_384x>
   18678:	f8cd 9000 	str.w	r9, [sp]
   1867c:	4623      	mov	r3, r4
   1867e:	f106 0260 	add.w	r2, r6, #96	; 0x60
   18682:	a94c      	add	r1, sp, #304	; 0x130
   18684:	4608      	mov	r0, r1
   18686:	f7fb fe65 	bl	14354 <mul_mont_384x>
   1868a:	270c      	movs	r7, #12
   1868c:	9700      	str	r7, [sp, #0]
   1868e:	4623      	mov	r3, r4
   18690:	aa4c      	add	r2, sp, #304	; 0x130
   18692:	a9dc      	add	r1, sp, #880	; 0x370
   18694:	4608      	mov	r0, r1
   18696:	f7f7 ffed 	bl	10674 <sub_mod_n>
   1869a:	9700      	str	r7, [sp, #0]
   1869c:	4623      	mov	r3, r4
   1869e:	aa58      	add	r2, sp, #352	; 0x160
   186a0:	a9e8      	add	r1, sp, #928	; 0x3a0
   186a2:	4608      	mov	r0, r1
   186a4:	f7f7 ffe6 	bl	10674 <sub_mod_n>
   186a8:	9700      	str	r7, [sp, #0]
   186aa:	4623      	mov	r3, r4
   186ac:	aadc      	add	r2, sp, #880	; 0x370
   186ae:	4611      	mov	r1, r2
   186b0:	4610      	mov	r0, r2
   186b2:	f7f8 fb35 	bl	10d20 <add_mod_n>
   186b6:	9700      	str	r7, [sp, #0]
   186b8:	4623      	mov	r3, r4
   186ba:	aae8      	add	r2, sp, #928	; 0x3a0
   186bc:	4611      	mov	r1, r2
   186be:	4610      	mov	r0, r2
   186c0:	f7f8 fb2e 	bl	10d20 <add_mod_n>
   186c4:	f8cd 9000 	str.w	r9, [sp]
   186c8:	4623      	mov	r3, r4
   186ca:	aa7c      	add	r2, sp, #496	; 0x1f0
   186cc:	4631      	mov	r1, r6
   186ce:	a864      	add	r0, sp, #400	; 0x190
   186d0:	f7fb fe40 	bl	14354 <mul_mont_384x>
   186d4:	f8cd 9000 	str.w	r9, [sp]
   186d8:	4623      	mov	r3, r4
   186da:	aa94      	add	r2, sp, #592	; 0x250
   186dc:	4629      	mov	r1, r5
   186de:	a834      	add	r0, sp, #208	; 0xd0
   186e0:	f7fb fe38 	bl	14354 <mul_mont_384x>
   186e4:	9700      	str	r7, [sp, #0]
   186e6:	4623      	mov	r3, r4
   186e8:	aa64      	add	r2, sp, #400	; 0x190
   186ea:	a934      	add	r1, sp, #208	; 0xd0
   186ec:	4608      	mov	r0, r1
   186ee:	f7f7 ffc1 	bl	10674 <sub_mod_n>
   186f2:	9700      	str	r7, [sp, #0]
   186f4:	4623      	mov	r3, r4
   186f6:	aa70      	add	r2, sp, #448	; 0x1c0
   186f8:	a940      	add	r1, sp, #256	; 0x100
   186fa:	4608      	mov	r0, r1
   186fc:	f7f7 ffba 	bl	10674 <sub_mod_n>
   18700:	9700      	str	r7, [sp, #0]
   18702:	4623      	mov	r3, r4
   18704:	aa34      	add	r2, sp, #208	; 0xd0
   18706:	4611      	mov	r1, r2
   18708:	a81c      	add	r0, sp, #112	; 0x70
   1870a:	f7f8 fb09 	bl	10d20 <add_mod_n>
   1870e:	9700      	str	r7, [sp, #0]
   18710:	4623      	mov	r3, r4
   18712:	aa40      	add	r2, sp, #256	; 0x100
   18714:	4611      	mov	r1, r2
   18716:	a828      	add	r0, sp, #160	; 0xa0
   18718:	f7f8 fb02 	bl	10d20 <add_mod_n>
   1871c:	464b      	mov	r3, r9
   1871e:	4622      	mov	r2, r4
   18720:	a91c      	add	r1, sp, #112	; 0x70
   18722:	4608      	mov	r0, r1
   18724:	f7ff f8a4 	bl	17870 <sqr_mont_384x>
   18728:	f8cd 9000 	str.w	r9, [sp]
   1872c:	4623      	mov	r3, r4
   1872e:	aa1c      	add	r2, sp, #112	; 0x70
   18730:	a934      	add	r1, sp, #208	; 0xd0
   18732:	a804      	add	r0, sp, #16
   18734:	f7fb fe0e 	bl	14354 <mul_mont_384x>
   18738:	f8cd 9000 	str.w	r9, [sp]
   1873c:	4623      	mov	r3, r4
   1873e:	aa04      	add	r2, sp, #16
   18740:	a94c      	add	r1, sp, #304	; 0x130
   18742:	4608      	mov	r0, r1
   18744:	f7fb fe06 	bl	14354 <mul_mont_384x>
   18748:	f8cd 9000 	str.w	r9, [sp]
   1874c:	4623      	mov	r3, r4
   1874e:	aa1c      	add	r2, sp, #112	; 0x70
   18750:	a964      	add	r1, sp, #400	; 0x190
   18752:	a8c4      	add	r0, sp, #784	; 0x310
   18754:	f7fb fdfe 	bl	14354 <mul_mont_384x>
   18758:	464b      	mov	r3, r9
   1875a:	4622      	mov	r2, r4
   1875c:	a9dc      	add	r1, sp, #880	; 0x370
   1875e:	a8ac      	add	r0, sp, #688	; 0x2b0
   18760:	f7ff f886 	bl	17870 <sqr_mont_384x>
   18764:	9700      	str	r7, [sp, #0]
   18766:	4623      	mov	r3, r4
   18768:	aa04      	add	r2, sp, #16
   1876a:	a9ac      	add	r1, sp, #688	; 0x2b0
   1876c:	4608      	mov	r0, r1
   1876e:	f7f7 ff81 	bl	10674 <sub_mod_n>
   18772:	9700      	str	r7, [sp, #0]
   18774:	4623      	mov	r3, r4
   18776:	aa10      	add	r2, sp, #64	; 0x40
   18778:	a9b8      	add	r1, sp, #736	; 0x2e0
   1877a:	4608      	mov	r0, r1
   1877c:	f7f7 ff7a 	bl	10674 <sub_mod_n>
   18780:	9700      	str	r7, [sp, #0]
   18782:	4623      	mov	r3, r4
   18784:	aac4      	add	r2, sp, #784	; 0x310
   18786:	a9ac      	add	r1, sp, #688	; 0x2b0
   18788:	4608      	mov	r0, r1
   1878a:	f7f7 ff73 	bl	10674 <sub_mod_n>
   1878e:	9700      	str	r7, [sp, #0]
   18790:	4623      	mov	r3, r4
   18792:	aad0      	add	r2, sp, #832	; 0x340
   18794:	a9b8      	add	r1, sp, #736	; 0x2e0
   18796:	4608      	mov	r0, r1
   18798:	f7f7 ff6c 	bl	10674 <sub_mod_n>
   1879c:	9700      	str	r7, [sp, #0]
   1879e:	4623      	mov	r3, r4
   187a0:	aac4      	add	r2, sp, #784	; 0x310
   187a2:	a9ac      	add	r1, sp, #688	; 0x2b0
   187a4:	4608      	mov	r0, r1
   187a6:	f7f7 ff65 	bl	10674 <sub_mod_n>
   187aa:	9700      	str	r7, [sp, #0]
   187ac:	4623      	mov	r3, r4
   187ae:	aad0      	add	r2, sp, #832	; 0x340
   187b0:	a9b8      	add	r1, sp, #736	; 0x2e0
   187b2:	4608      	mov	r0, r1
   187b4:	f7f7 ff5e 	bl	10674 <sub_mod_n>
   187b8:	9700      	str	r7, [sp, #0]
   187ba:	4623      	mov	r3, r4
   187bc:	aaac      	add	r2, sp, #688	; 0x2b0
   187be:	a9c4      	add	r1, sp, #784	; 0x310
   187c0:	4608      	mov	r0, r1
   187c2:	f7f7 ff57 	bl	10674 <sub_mod_n>
   187c6:	9700      	str	r7, [sp, #0]
   187c8:	4623      	mov	r3, r4
   187ca:	aab8      	add	r2, sp, #736	; 0x2e0
   187cc:	a9d0      	add	r1, sp, #832	; 0x340
   187ce:	4608      	mov	r0, r1
   187d0:	f7f7 ff50 	bl	10674 <sub_mod_n>
   187d4:	f8cd 9000 	str.w	r9, [sp]
   187d8:	4623      	mov	r3, r4
   187da:	aadc      	add	r2, sp, #880	; 0x370
   187dc:	a9c4      	add	r1, sp, #784	; 0x310
   187de:	4608      	mov	r0, r1
   187e0:	f7fb fdb8 	bl	14354 <mul_mont_384x>
   187e4:	9700      	str	r7, [sp, #0]
   187e6:	4623      	mov	r3, r4
   187e8:	aa4c      	add	r2, sp, #304	; 0x130
   187ea:	a9c4      	add	r1, sp, #784	; 0x310
   187ec:	4608      	mov	r0, r1
   187ee:	f7f7 ff41 	bl	10674 <sub_mod_n>
   187f2:	9700      	str	r7, [sp, #0]
   187f4:	4623      	mov	r3, r4
   187f6:	aa58      	add	r2, sp, #352	; 0x160
   187f8:	a9d0      	add	r1, sp, #832	; 0x340
   187fa:	4608      	mov	r0, r1
   187fc:	f7f7 ff3a 	bl	10674 <sub_mod_n>
   18800:	9700      	str	r7, [sp, #0]
   18802:	4623      	mov	r3, r4
   18804:	aa4c      	add	r2, sp, #304	; 0x130
   18806:	a9c4      	add	r1, sp, #784	; 0x310
   18808:	4608      	mov	r0, r1
   1880a:	f7f7 ff33 	bl	10674 <sub_mod_n>
   1880e:	9700      	str	r7, [sp, #0]
   18810:	4623      	mov	r3, r4
   18812:	aa58      	add	r2, sp, #352	; 0x160
   18814:	a9d0      	add	r1, sp, #832	; 0x340
   18816:	4608      	mov	r0, r1
   18818:	f7f7 ff2c 	bl	10674 <sub_mod_n>
   1881c:	9700      	str	r7, [sp, #0]
   1881e:	4623      	mov	r3, r4
   18820:	465a      	mov	r2, fp
   18822:	4651      	mov	r1, sl
   18824:	a8dc      	add	r0, sp, #880	; 0x370
   18826:	f7f8 fa7b 	bl	10d20 <add_mod_n>
   1882a:	9700      	str	r7, [sp, #0]
   1882c:	4623      	mov	r3, r4
   1882e:	f105 02f0 	add.w	r2, r5, #240	; 0xf0
   18832:	f106 01f0 	add.w	r1, r6, #240	; 0xf0
   18836:	a8e8      	add	r0, sp, #928	; 0x3a0
   18838:	f7f8 fa72 	bl	10d20 <add_mod_n>
   1883c:	464b      	mov	r3, r9
   1883e:	4622      	mov	r2, r4
   18840:	a9dc      	add	r1, sp, #880	; 0x370
   18842:	4608      	mov	r0, r1
   18844:	f7ff f814 	bl	17870 <sqr_mont_384x>
   18848:	9700      	str	r7, [sp, #0]
   1884a:	4623      	mov	r3, r4
   1884c:	aa94      	add	r2, sp, #592	; 0x250
   1884e:	a9dc      	add	r1, sp, #880	; 0x370
   18850:	4608      	mov	r0, r1
   18852:	f7f7 ff0f 	bl	10674 <sub_mod_n>
   18856:	9700      	str	r7, [sp, #0]
   18858:	4623      	mov	r3, r4
   1885a:	aaa0      	add	r2, sp, #640	; 0x280
   1885c:	a9e8      	add	r1, sp, #928	; 0x3a0
   1885e:	4608      	mov	r0, r1
   18860:	f7f7 ff08 	bl	10674 <sub_mod_n>
   18864:	9700      	str	r7, [sp, #0]
   18866:	4623      	mov	r3, r4
   18868:	aa7c      	add	r2, sp, #496	; 0x1f0
   1886a:	a9dc      	add	r1, sp, #880	; 0x370
   1886c:	4608      	mov	r0, r1
   1886e:	f7f7 ff01 	bl	10674 <sub_mod_n>
   18872:	9700      	str	r7, [sp, #0]
   18874:	4623      	mov	r3, r4
   18876:	aa88      	add	r2, sp, #544	; 0x220
   18878:	a9e8      	add	r1, sp, #928	; 0x3a0
   1887a:	4608      	mov	r0, r1
   1887c:	f7f7 fefa 	bl	10674 <sub_mod_n>
   18880:	f8cd 9000 	str.w	r9, [sp]
   18884:	4623      	mov	r3, r4
   18886:	aa34      	add	r2, sp, #208	; 0xd0
   18888:	a9dc      	add	r1, sp, #880	; 0x370
   1888a:	4608      	mov	r0, r1
   1888c:	f7fb fd62 	bl	14354 <mul_mont_384x>
   18890:	f108 33ff 	add.w	r3, r8, #4294967295
   18894:	ea23 0808 	bic.w	r8, r3, r8
   18898:	ea4f 78e8 	mov.w	r8, r8, asr #31
   1889c:	3e04      	subs	r6, #4
   1889e:	acac      	add	r4, sp, #688	; 0x2b0
   188a0:	aff4      	add	r7, sp, #976	; 0x3d0
   188a2:	4622      	mov	r2, r4
   188a4:	6811      	ldr	r1, [r2, #0]
   188a6:	f856 3f04 	ldr.w	r3, [r6, #4]!
   188aa:	404b      	eors	r3, r1
   188ac:	ea03 0308 	and.w	r3, r3, r8
   188b0:	404b      	eors	r3, r1
   188b2:	f842 3b04 	str.w	r3, [r2], #4
   188b6:	4297      	cmp	r7, r2
   188b8:	d1f4      	bne.n	188a4 <POINTonE2_add+0x2c8>
   188ba:	9b02      	ldr	r3, [sp, #8]
   188bc:	4259      	negs	r1, r3
   188be:	3d04      	subs	r5, #4
   188c0:	9b03      	ldr	r3, [sp, #12]
   188c2:	1f18      	subs	r0, r3, #4
   188c4:	f854 2b04 	ldr.w	r2, [r4], #4
   188c8:	f855 3f04 	ldr.w	r3, [r5, #4]!
   188cc:	4053      	eors	r3, r2
   188ce:	400b      	ands	r3, r1
   188d0:	4053      	eors	r3, r2
   188d2:	f840 3f04 	str.w	r3, [r0, #4]!
   188d6:	42a7      	cmp	r7, r4
   188d8:	d1f4      	bne.n	188c4 <POINTonE2_add+0x2e8>
   188da:	f50d 7d75 	add.w	sp, sp, #980	; 0x3d4
   188de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   188e2:	bf00      	nop
   188e4:	fffcfffd 	.word	0xfffcfffd
   188e8:	00028738 	.word	0x00028738

000188ec <POINTonE2_double>:
   188ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   188f0:	b0cb      	sub	sp, #300	; 0x12c
   188f2:	4606      	mov	r6, r0
   188f4:	460f      	mov	r7, r1
   188f6:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 18aa8 <POINTonE2_double+0x1bc>
   188fa:	4c6c      	ldr	r4, [pc, #432]	; (18aac <POINTonE2_double+0x1c0>)
   188fc:	4643      	mov	r3, r8
   188fe:	4622      	mov	r2, r4
   18900:	a832      	add	r0, sp, #200	; 0xc8
   18902:	f7fe ffb5 	bl	17870 <sqr_mont_384x>
   18906:	f107 0b60 	add.w	fp, r7, #96	; 0x60
   1890a:	4643      	mov	r3, r8
   1890c:	4622      	mov	r2, r4
   1890e:	4659      	mov	r1, fp
   18910:	a81a      	add	r0, sp, #104	; 0x68
   18912:	f7fe ffad 	bl	17870 <sqr_mont_384x>
   18916:	4643      	mov	r3, r8
   18918:	4622      	mov	r2, r4
   1891a:	a91a      	add	r1, sp, #104	; 0x68
   1891c:	a802      	add	r0, sp, #8
   1891e:	f7fe ffa7 	bl	17870 <sqr_mont_384x>
   18922:	250c      	movs	r5, #12
   18924:	9500      	str	r5, [sp, #0]
   18926:	4623      	mov	r3, r4
   18928:	463a      	mov	r2, r7
   1892a:	a91a      	add	r1, sp, #104	; 0x68
   1892c:	4608      	mov	r0, r1
   1892e:	f7f8 f9f7 	bl	10d20 <add_mod_n>
   18932:	9500      	str	r5, [sp, #0]
   18934:	4623      	mov	r3, r4
   18936:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1893a:	a926      	add	r1, sp, #152	; 0x98
   1893c:	4608      	mov	r0, r1
   1893e:	f7f8 f9ef 	bl	10d20 <add_mod_n>
   18942:	4643      	mov	r3, r8
   18944:	4622      	mov	r2, r4
   18946:	a91a      	add	r1, sp, #104	; 0x68
   18948:	4608      	mov	r0, r1
   1894a:	f7fe ff91 	bl	17870 <sqr_mont_384x>
   1894e:	9500      	str	r5, [sp, #0]
   18950:	4623      	mov	r3, r4
   18952:	aa32      	add	r2, sp, #200	; 0xc8
   18954:	a91a      	add	r1, sp, #104	; 0x68
   18956:	4608      	mov	r0, r1
   18958:	f7f7 fe8c 	bl	10674 <sub_mod_n>
   1895c:	9500      	str	r5, [sp, #0]
   1895e:	4623      	mov	r3, r4
   18960:	aa3e      	add	r2, sp, #248	; 0xf8
   18962:	a926      	add	r1, sp, #152	; 0x98
   18964:	4608      	mov	r0, r1
   18966:	f7f7 fe85 	bl	10674 <sub_mod_n>
   1896a:	9500      	str	r5, [sp, #0]
   1896c:	4623      	mov	r3, r4
   1896e:	aa02      	add	r2, sp, #8
   18970:	a91a      	add	r1, sp, #104	; 0x68
   18972:	4608      	mov	r0, r1
   18974:	f7f7 fe7e 	bl	10674 <sub_mod_n>
   18978:	9500      	str	r5, [sp, #0]
   1897a:	4623      	mov	r3, r4
   1897c:	aa0e      	add	r2, sp, #56	; 0x38
   1897e:	a926      	add	r1, sp, #152	; 0x98
   18980:	4608      	mov	r0, r1
   18982:	f7f7 fe77 	bl	10674 <sub_mod_n>
   18986:	9500      	str	r5, [sp, #0]
   18988:	4623      	mov	r3, r4
   1898a:	aa1a      	add	r2, sp, #104	; 0x68
   1898c:	4611      	mov	r1, r2
   1898e:	4610      	mov	r0, r2
   18990:	f7f8 f9c6 	bl	10d20 <add_mod_n>
   18994:	9500      	str	r5, [sp, #0]
   18996:	4623      	mov	r3, r4
   18998:	aa26      	add	r2, sp, #152	; 0x98
   1899a:	4611      	mov	r1, r2
   1899c:	4610      	mov	r0, r2
   1899e:	f7f8 f9bf 	bl	10d20 <add_mod_n>
   189a2:	462b      	mov	r3, r5
   189a4:	4622      	mov	r2, r4
   189a6:	a932      	add	r1, sp, #200	; 0xc8
   189a8:	4608      	mov	r0, r1
   189aa:	f7f8 fa41 	bl	10e30 <mul_by_3_mod_n>
   189ae:	462b      	mov	r3, r5
   189b0:	4622      	mov	r2, r4
   189b2:	a93e      	add	r1, sp, #248	; 0xf8
   189b4:	4608      	mov	r0, r1
   189b6:	f7f8 fa3b 	bl	10e30 <mul_by_3_mod_n>
   189ba:	4643      	mov	r3, r8
   189bc:	4622      	mov	r2, r4
   189be:	a932      	add	r1, sp, #200	; 0xc8
   189c0:	4630      	mov	r0, r6
   189c2:	f7fe ff55 	bl	17870 <sqr_mont_384x>
   189c6:	9500      	str	r5, [sp, #0]
   189c8:	4623      	mov	r3, r4
   189ca:	aa1a      	add	r2, sp, #104	; 0x68
   189cc:	4631      	mov	r1, r6
   189ce:	4630      	mov	r0, r6
   189d0:	f7f7 fe50 	bl	10674 <sub_mod_n>
   189d4:	f106 0930 	add.w	r9, r6, #48	; 0x30
   189d8:	9500      	str	r5, [sp, #0]
   189da:	4623      	mov	r3, r4
   189dc:	aa26      	add	r2, sp, #152	; 0x98
   189de:	4649      	mov	r1, r9
   189e0:	4648      	mov	r0, r9
   189e2:	f7f7 fe47 	bl	10674 <sub_mod_n>
   189e6:	9500      	str	r5, [sp, #0]
   189e8:	4623      	mov	r3, r4
   189ea:	aa1a      	add	r2, sp, #104	; 0x68
   189ec:	4631      	mov	r1, r6
   189ee:	4630      	mov	r0, r6
   189f0:	f7f7 fe40 	bl	10674 <sub_mod_n>
   189f4:	9500      	str	r5, [sp, #0]
   189f6:	4623      	mov	r3, r4
   189f8:	aa26      	add	r2, sp, #152	; 0x98
   189fa:	4649      	mov	r1, r9
   189fc:	4648      	mov	r0, r9
   189fe:	f7f7 fe39 	bl	10674 <sub_mod_n>
   18a02:	f106 0ac0 	add.w	sl, r6, #192	; 0xc0
   18a06:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
   18a0a:	9500      	str	r5, [sp, #0]
   18a0c:	4623      	mov	r3, r4
   18a0e:	460a      	mov	r2, r1
   18a10:	4650      	mov	r0, sl
   18a12:	f7f8 f985 	bl	10d20 <add_mod_n>
   18a16:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
   18a1a:	9500      	str	r5, [sp, #0]
   18a1c:	4623      	mov	r3, r4
   18a1e:	460a      	mov	r2, r1
   18a20:	f106 00f0 	add.w	r0, r6, #240	; 0xf0
   18a24:	f7f8 f97c 	bl	10d20 <add_mod_n>
   18a28:	f8cd 8000 	str.w	r8, [sp]
   18a2c:	4623      	mov	r3, r4
   18a2e:	465a      	mov	r2, fp
   18a30:	4651      	mov	r1, sl
   18a32:	4650      	mov	r0, sl
   18a34:	f7fb fc8e 	bl	14354 <mul_mont_384x>
   18a38:	9500      	str	r5, [sp, #0]
   18a3a:	4623      	mov	r3, r4
   18a3c:	2203      	movs	r2, #3
   18a3e:	a902      	add	r1, sp, #8
   18a40:	4608      	mov	r0, r1
   18a42:	f7f8 fa95 	bl	10f70 <lshift_mod_n>
   18a46:	9500      	str	r5, [sp, #0]
   18a48:	4623      	mov	r3, r4
   18a4a:	2203      	movs	r2, #3
   18a4c:	a90e      	add	r1, sp, #56	; 0x38
   18a4e:	4608      	mov	r0, r1
   18a50:	f7f8 fa8e 	bl	10f70 <lshift_mod_n>
   18a54:	f106 0760 	add.w	r7, r6, #96	; 0x60
   18a58:	9500      	str	r5, [sp, #0]
   18a5a:	4623      	mov	r3, r4
   18a5c:	4632      	mov	r2, r6
   18a5e:	a91a      	add	r1, sp, #104	; 0x68
   18a60:	4638      	mov	r0, r7
   18a62:	f7f7 fe07 	bl	10674 <sub_mod_n>
   18a66:	3690      	adds	r6, #144	; 0x90
   18a68:	9500      	str	r5, [sp, #0]
   18a6a:	4623      	mov	r3, r4
   18a6c:	464a      	mov	r2, r9
   18a6e:	a926      	add	r1, sp, #152	; 0x98
   18a70:	4630      	mov	r0, r6
   18a72:	f7f7 fdff 	bl	10674 <sub_mod_n>
   18a76:	f8cd 8000 	str.w	r8, [sp]
   18a7a:	4623      	mov	r3, r4
   18a7c:	aa32      	add	r2, sp, #200	; 0xc8
   18a7e:	4639      	mov	r1, r7
   18a80:	4638      	mov	r0, r7
   18a82:	f7fb fc67 	bl	14354 <mul_mont_384x>
   18a86:	9500      	str	r5, [sp, #0]
   18a88:	4623      	mov	r3, r4
   18a8a:	aa02      	add	r2, sp, #8
   18a8c:	4639      	mov	r1, r7
   18a8e:	4638      	mov	r0, r7
   18a90:	f7f7 fdf0 	bl	10674 <sub_mod_n>
   18a94:	9500      	str	r5, [sp, #0]
   18a96:	4623      	mov	r3, r4
   18a98:	aa0e      	add	r2, sp, #56	; 0x38
   18a9a:	4631      	mov	r1, r6
   18a9c:	4630      	mov	r0, r6
   18a9e:	f7f7 fde9 	bl	10674 <sub_mod_n>
   18aa2:	b04b      	add	sp, #300	; 0x12c
   18aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18aa8:	fffcfffd 	.word	0xfffcfffd
   18aac:	00028738 	.word	0x00028738

00018ab0 <POINTonE2_precompute_w4>:
   18ab0:	b570      	push	{r4, r5, r6, lr}
   18ab2:	4606      	mov	r6, r0
   18ab4:	1f0b      	subs	r3, r1, #4
   18ab6:	1f02      	subs	r2, r0, #4
   18ab8:	f501 708e 	add.w	r0, r1, #284	; 0x11c
   18abc:	f853 4f04 	ldr.w	r4, [r3, #4]!
   18ac0:	f842 4f04 	str.w	r4, [r2, #4]!
   18ac4:	4283      	cmp	r3, r0
   18ac6:	d1f9      	bne.n	18abc <POINTonE2_precompute_w4+0xc>
   18ac8:	f506 7090 	add.w	r0, r6, #288	; 0x120
   18acc:	f7ff ff0e 	bl	188ec <POINTonE2_double>
   18ad0:	f506 7510 	add.w	r5, r6, #576	; 0x240
   18ad4:	4634      	mov	r4, r6
   18ad6:	f506 7658 	add.w	r6, r6, #864	; 0x360
   18ada:	4622      	mov	r2, r4
   18adc:	f504 7490 	add.w	r4, r4, #288	; 0x120
   18ae0:	4621      	mov	r1, r4
   18ae2:	4628      	mov	r0, r5
   18ae4:	f7ff fd7a 	bl	185dc <POINTonE2_add>
   18ae8:	4621      	mov	r1, r4
   18aea:	f505 7090 	add.w	r0, r5, #288	; 0x120
   18aee:	f7ff fefd 	bl	188ec <POINTonE2_double>
   18af2:	f505 7510 	add.w	r5, r5, #576	; 0x240
   18af6:	42b4      	cmp	r4, r6
   18af8:	d1ef      	bne.n	18ada <POINTonE2_precompute_w4+0x2a>
   18afa:	bd70      	pop	{r4, r5, r6, pc}

00018afc <POINTonE2_dadd>:
   18afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b00:	f5ad 7d5d 	sub.w	sp, sp, #884	; 0x374
   18b04:	9003      	str	r0, [sp, #12]
   18b06:	460c      	mov	r4, r1
   18b08:	4615      	mov	r5, r2
   18b0a:	461e      	mov	r6, r3
   18b0c:	4fc8      	ldr	r7, [pc, #800]	; (18e30 <POINTonE2_dadd+0x334>)
   18b0e:	f04f 090c 	mov.w	r9, #12
   18b12:	f8cd 9000 	str.w	r9, [sp]
   18b16:	463b      	mov	r3, r7
   18b18:	460a      	mov	r2, r1
   18b1a:	a834      	add	r0, sp, #208	; 0xd0
   18b1c:	f7f8 f900 	bl	10d20 <add_mod_n>
   18b20:	f104 0130 	add.w	r1, r4, #48	; 0x30
   18b24:	f8cd 9000 	str.w	r9, [sp]
   18b28:	463b      	mov	r3, r7
   18b2a:	460a      	mov	r2, r1
   18b2c:	a840      	add	r0, sp, #256	; 0x100
   18b2e:	f7f8 f8f7 	bl	10d20 <add_mod_n>
   18b32:	4bc0      	ldr	r3, [pc, #768]	; (18e34 <POINTonE2_dadd+0x338>)
   18b34:	463a      	mov	r2, r7
   18b36:	4621      	mov	r1, r4
   18b38:	a81c      	add	r0, sp, #112	; 0x70
   18b3a:	f7fe fe99 	bl	17870 <sqr_mont_384x>
   18b3e:	464b      	mov	r3, r9
   18b40:	463a      	mov	r2, r7
   18b42:	a91c      	add	r1, sp, #112	; 0x70
   18b44:	4608      	mov	r0, r1
   18b46:	f7f8 f973 	bl	10e30 <mul_by_3_mod_n>
   18b4a:	464b      	mov	r3, r9
   18b4c:	463a      	mov	r2, r7
   18b4e:	a928      	add	r1, sp, #160	; 0xa0
   18b50:	4608      	mov	r0, r1
   18b52:	f7f8 f96d 	bl	10e30 <mul_by_3_mod_n>
   18b56:	f104 0860 	add.w	r8, r4, #96	; 0x60
   18b5a:	f8cd 9000 	str.w	r9, [sp]
   18b5e:	463b      	mov	r3, r7
   18b60:	4642      	mov	r2, r8
   18b62:	4641      	mov	r1, r8
   18b64:	a804      	add	r0, sp, #16
   18b66:	f7f8 f8db 	bl	10d20 <add_mod_n>
   18b6a:	f104 0190 	add.w	r1, r4, #144	; 0x90
   18b6e:	f8cd 9000 	str.w	r9, [sp]
   18b72:	463b      	mov	r3, r7
   18b74:	460a      	mov	r2, r1
   18b76:	a810      	add	r0, sp, #64	; 0x40
   18b78:	f7f8 f8d2 	bl	10d20 <add_mod_n>
   18b7c:	f105 09c0 	add.w	r9, r5, #192	; 0xc0
   18b80:	f105 03bc 	add.w	r3, r5, #188	; 0xbc
   18b84:	f505 708e 	add.w	r0, r5, #284	; 0x11c
   18b88:	2200      	movs	r2, #0
   18b8a:	f853 1f04 	ldr.w	r1, [r3, #4]!
   18b8e:	430a      	orrs	r2, r1
   18b90:	4283      	cmp	r3, r0
   18b92:	d1fa      	bne.n	18b8a <POINTonE2_dadd+0x8e>
   18b94:	1e53      	subs	r3, r2, #1
   18b96:	ea23 0202 	bic.w	r2, r3, r2
   18b9a:	0fd3      	lsrs	r3, r2, #31
   18b9c:	9302      	str	r3, [sp, #8]
   18b9e:	f8df b294 	ldr.w	fp, [pc, #660]	; 18e34 <POINTonE2_dadd+0x338>
   18ba2:	f8df a28c 	ldr.w	sl, [pc, #652]	; 18e30 <POINTonE2_dadd+0x334>
   18ba6:	465b      	mov	r3, fp
   18ba8:	4652      	mov	r2, sl
   18baa:	4649      	mov	r1, r9
   18bac:	a894      	add	r0, sp, #592	; 0x250
   18bae:	f7fe fe5f 	bl	17870 <sqr_mont_384x>
   18bb2:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
   18bb6:	f8cd b000 	str.w	fp, [sp]
   18bba:	4653      	mov	r3, sl
   18bbc:	464a      	mov	r2, r9
   18bbe:	4639      	mov	r1, r7
   18bc0:	a8c4      	add	r0, sp, #784	; 0x310
   18bc2:	f7fb fbc7 	bl	14354 <mul_mont_384x>
   18bc6:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
   18bca:	f504 708e 	add.w	r0, r4, #284	; 0x11c
   18bce:	2200      	movs	r2, #0
   18bd0:	f853 1f04 	ldr.w	r1, [r3, #4]!
   18bd4:	430a      	orrs	r2, r1
   18bd6:	4283      	cmp	r3, r0
   18bd8:	d1fa      	bne.n	18bd0 <POINTonE2_dadd+0xd4>
   18bda:	1e53      	subs	r3, r2, #1
   18bdc:	ea23 0202 	bic.w	r2, r3, r2
   18be0:	ea4f 7bd2 	mov.w	fp, r2, lsr #31
   18be4:	4b93      	ldr	r3, [pc, #588]	; (18e34 <POINTonE2_dadd+0x338>)
   18be6:	4a92      	ldr	r2, [pc, #584]	; (18e30 <POINTonE2_dadd+0x334>)
   18be8:	4639      	mov	r1, r7
   18bea:	a84c      	add	r0, sp, #304	; 0x130
   18bec:	f7fe fe40 	bl	17870 <sqr_mont_384x>
   18bf0:	b1f6      	cbz	r6, 18c30 <POINTonE2_dadd+0x134>
   18bf2:	f8df a23c 	ldr.w	sl, [pc, #572]	; 18e30 <POINTonE2_dadd+0x334>
   18bf6:	4b8f      	ldr	r3, [pc, #572]	; (18e34 <POINTonE2_dadd+0x338>)
   18bf8:	4652      	mov	r2, sl
   18bfa:	a94c      	add	r1, sp, #304	; 0x130
   18bfc:	a8ac      	add	r0, sp, #688	; 0x2b0
   18bfe:	f7fe fe37 	bl	17870 <sqr_mont_384x>
   18c02:	4b8c      	ldr	r3, [pc, #560]	; (18e34 <POINTonE2_dadd+0x338>)
   18c04:	9300      	str	r3, [sp, #0]
   18c06:	4653      	mov	r3, sl
   18c08:	4632      	mov	r2, r6
   18c0a:	a9ac      	add	r1, sp, #688	; 0x2b0
   18c0c:	4608      	mov	r0, r1
   18c0e:	f7fb fba1 	bl	14354 <mul_mont_384x>
   18c12:	260c      	movs	r6, #12
   18c14:	9600      	str	r6, [sp, #0]
   18c16:	4653      	mov	r3, sl
   18c18:	aaac      	add	r2, sp, #688	; 0x2b0
   18c1a:	a91c      	add	r1, sp, #112	; 0x70
   18c1c:	4608      	mov	r0, r1
   18c1e:	f7f8 f87f 	bl	10d20 <add_mod_n>
   18c22:	9600      	str	r6, [sp, #0]
   18c24:	4653      	mov	r3, sl
   18c26:	aab8      	add	r2, sp, #736	; 0x2e0
   18c28:	a928      	add	r1, sp, #160	; 0xa0
   18c2a:	4608      	mov	r0, r1
   18c2c:	f7f8 f878 	bl	10d20 <add_mod_n>
   18c30:	4e7f      	ldr	r6, [pc, #508]	; (18e30 <POINTonE2_dadd+0x334>)
   18c32:	f8df a200 	ldr.w	sl, [pc, #512]	; 18e34 <POINTonE2_dadd+0x338>
   18c36:	f8cd a000 	str.w	sl, [sp]
   18c3a:	4633      	mov	r3, r6
   18c3c:	464a      	mov	r2, r9
   18c3e:	4641      	mov	r1, r8
   18c40:	a8ac      	add	r0, sp, #688	; 0x2b0
   18c42:	f7fb fb87 	bl	14354 <mul_mont_384x>
   18c46:	f8cd a000 	str.w	sl, [sp]
   18c4a:	4633      	mov	r3, r6
   18c4c:	aa94      	add	r2, sp, #592	; 0x250
   18c4e:	a9ac      	add	r1, sp, #688	; 0x2b0
   18c50:	4608      	mov	r0, r1
   18c52:	f7fb fb7f 	bl	14354 <mul_mont_384x>
   18c56:	f8cd a000 	str.w	sl, [sp]
   18c5a:	4633      	mov	r3, r6
   18c5c:	463a      	mov	r2, r7
   18c5e:	f105 0160 	add.w	r1, r5, #96	; 0x60
   18c62:	a864      	add	r0, sp, #400	; 0x190
   18c64:	f7fb fb76 	bl	14354 <mul_mont_384x>
   18c68:	f8cd a000 	str.w	sl, [sp]
   18c6c:	4633      	mov	r3, r6
   18c6e:	aa4c      	add	r2, sp, #304	; 0x130
   18c70:	a964      	add	r1, sp, #400	; 0x190
   18c72:	4608      	mov	r0, r1
   18c74:	f7fb fb6e 	bl	14354 <mul_mont_384x>
   18c78:	270c      	movs	r7, #12
   18c7a:	9700      	str	r7, [sp, #0]
   18c7c:	4633      	mov	r3, r6
   18c7e:	aaac      	add	r2, sp, #688	; 0x2b0
   18c80:	a964      	add	r1, sp, #400	; 0x190
   18c82:	4608      	mov	r0, r1
   18c84:	f7f7 fcf6 	bl	10674 <sub_mod_n>
   18c88:	9700      	str	r7, [sp, #0]
   18c8a:	4633      	mov	r3, r6
   18c8c:	aab8      	add	r2, sp, #736	; 0x2e0
   18c8e:	a970      	add	r1, sp, #448	; 0x1c0
   18c90:	4608      	mov	r0, r1
   18c92:	f7f7 fcef 	bl	10674 <sub_mod_n>
   18c96:	f8cd a000 	str.w	sl, [sp]
   18c9a:	4633      	mov	r3, r6
   18c9c:	4622      	mov	r2, r4
   18c9e:	a994      	add	r1, sp, #592	; 0x250
   18ca0:	4608      	mov	r0, r1
   18ca2:	f7fb fb57 	bl	14354 <mul_mont_384x>
   18ca6:	f8cd a000 	str.w	sl, [sp]
   18caa:	4633      	mov	r3, r6
   18cac:	462a      	mov	r2, r5
   18cae:	a94c      	add	r1, sp, #304	; 0x130
   18cb0:	4608      	mov	r0, r1
   18cb2:	f7fb fb4f 	bl	14354 <mul_mont_384x>
   18cb6:	9700      	str	r7, [sp, #0]
   18cb8:	4633      	mov	r3, r6
   18cba:	aa94      	add	r2, sp, #592	; 0x250
   18cbc:	a94c      	add	r1, sp, #304	; 0x130
   18cbe:	a87c      	add	r0, sp, #496	; 0x1f0
   18cc0:	f7f8 f82e 	bl	10d20 <add_mod_n>
   18cc4:	9700      	str	r7, [sp, #0]
   18cc6:	4633      	mov	r3, r6
   18cc8:	aaa0      	add	r2, sp, #640	; 0x280
   18cca:	a958      	add	r1, sp, #352	; 0x160
   18ccc:	a888      	add	r0, sp, #544	; 0x220
   18cce:	f7f8 f827 	bl	10d20 <add_mod_n>
   18cd2:	9700      	str	r7, [sp, #0]
   18cd4:	4633      	mov	r3, r6
   18cd6:	aa94      	add	r2, sp, #592	; 0x250
   18cd8:	a94c      	add	r1, sp, #304	; 0x130
   18cda:	4608      	mov	r0, r1
   18cdc:	f7f7 fcca 	bl	10674 <sub_mod_n>
   18ce0:	9700      	str	r7, [sp, #0]
   18ce2:	4633      	mov	r3, r6
   18ce4:	aaa0      	add	r2, sp, #640	; 0x280
   18ce6:	a958      	add	r1, sp, #352	; 0x160
   18ce8:	4608      	mov	r0, r1
   18cea:	f7f7 fcc3 	bl	10674 <sub_mod_n>
   18cee:	aa4b      	add	r2, sp, #300	; 0x12c
   18cf0:	ae7b      	add	r6, sp, #492	; 0x1ec
   18cf2:	4613      	mov	r3, r2
   18cf4:	2100      	movs	r1, #0
   18cf6:	f853 0f04 	ldr.w	r0, [r3, #4]!
   18cfa:	4301      	orrs	r1, r0
   18cfc:	42b3      	cmp	r3, r6
   18cfe:	d1fa      	bne.n	18cf6 <POINTonE2_dadd+0x1fa>
   18d00:	1e48      	subs	r0, r1, #1
   18d02:	ea20 0001 	bic.w	r0, r0, r1
   18d06:	17c0      	asrs	r0, r0, #31
   18d08:	3c04      	subs	r4, #4
   18d0a:	ae94      	add	r6, sp, #592	; 0x250
   18d0c:	afdc      	add	r7, sp, #880	; 0x370
   18d0e:	4631      	mov	r1, r6
   18d10:	46a4      	mov	ip, r4
   18d12:	4696      	mov	lr, r2
   18d14:	680a      	ldr	r2, [r1, #0]
   18d16:	f85c 3f04 	ldr.w	r3, [ip, #4]!
   18d1a:	4053      	eors	r3, r2
   18d1c:	4003      	ands	r3, r0
   18d1e:	4053      	eors	r3, r2
   18d20:	f841 3b04 	str.w	r3, [r1], #4
   18d24:	42b9      	cmp	r1, r7
   18d26:	d1f5      	bne.n	18d14 <POINTonE2_dadd+0x218>
   18d28:	4672      	mov	r2, lr
   18d2a:	a903      	add	r1, sp, #12
   18d2c:	f50d 7c96 	add.w	ip, sp, #300	; 0x12c
   18d30:	4686      	mov	lr, r0
   18d32:	f852 0f04 	ldr.w	r0, [r2, #4]!
   18d36:	f851 3f04 	ldr.w	r3, [r1, #4]!
   18d3a:	4043      	eors	r3, r0
   18d3c:	ea03 030e 	and.w	r3, r3, lr
   18d40:	4043      	eors	r3, r0
   18d42:	6013      	str	r3, [r2, #0]
   18d44:	458c      	cmp	ip, r1
   18d46:	d1f4      	bne.n	18d32 <POINTonE2_dadd+0x236>
   18d48:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 18e30 <POINTonE2_dadd+0x334>
   18d4c:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 18e34 <POINTonE2_dadd+0x338>
   18d50:	f8cd 9000 	str.w	r9, [sp]
   18d54:	4643      	mov	r3, r8
   18d56:	aa4c      	add	r2, sp, #304	; 0x130
   18d58:	a9c4      	add	r1, sp, #784	; 0x310
   18d5a:	4608      	mov	r0, r1
   18d5c:	f7fb fafa 	bl	14354 <mul_mont_384x>
   18d60:	464b      	mov	r3, r9
   18d62:	4642      	mov	r2, r8
   18d64:	a94c      	add	r1, sp, #304	; 0x130
   18d66:	a804      	add	r0, sp, #16
   18d68:	f7fe fd82 	bl	17870 <sqr_mont_384x>
   18d6c:	f8cd 9000 	str.w	r9, [sp]
   18d70:	4643      	mov	r3, r8
   18d72:	aa4c      	add	r2, sp, #304	; 0x130
   18d74:	a904      	add	r1, sp, #16
   18d76:	a81c      	add	r0, sp, #112	; 0x70
   18d78:	f7fb faec 	bl	14354 <mul_mont_384x>
   18d7c:	f8cd 9000 	str.w	r9, [sp]
   18d80:	4643      	mov	r3, r8
   18d82:	aaac      	add	r2, sp, #688	; 0x2b0
   18d84:	a91c      	add	r1, sp, #112	; 0x70
   18d86:	4608      	mov	r0, r1
   18d88:	f7fb fae4 	bl	14354 <mul_mont_384x>
   18d8c:	f8cd 9000 	str.w	r9, [sp]
   18d90:	4643      	mov	r3, r8
   18d92:	aa94      	add	r2, sp, #592	; 0x250
   18d94:	a904      	add	r1, sp, #16
   18d96:	a8ac      	add	r0, sp, #688	; 0x2b0
   18d98:	f7fb fadc 	bl	14354 <mul_mont_384x>
   18d9c:	f8cd 9000 	str.w	r9, [sp]
   18da0:	4643      	mov	r3, r8
   18da2:	aa7c      	add	r2, sp, #496	; 0x1f0
   18da4:	a904      	add	r1, sp, #16
   18da6:	4608      	mov	r0, r1
   18da8:	f7fb fad4 	bl	14354 <mul_mont_384x>
   18dac:	464b      	mov	r3, r9
   18dae:	4642      	mov	r2, r8
   18db0:	a964      	add	r1, sp, #400	; 0x190
   18db2:	a894      	add	r0, sp, #592	; 0x250
   18db4:	f7fe fd5c 	bl	17870 <sqr_mont_384x>
   18db8:	f04f 0a0c 	mov.w	sl, #12
   18dbc:	f8cd a000 	str.w	sl, [sp]
   18dc0:	4643      	mov	r3, r8
   18dc2:	aa04      	add	r2, sp, #16
   18dc4:	a994      	add	r1, sp, #592	; 0x250
   18dc6:	4608      	mov	r0, r1
   18dc8:	f7f7 fc54 	bl	10674 <sub_mod_n>
   18dcc:	f8cd a000 	str.w	sl, [sp]
   18dd0:	4643      	mov	r3, r8
   18dd2:	aa10      	add	r2, sp, #64	; 0x40
   18dd4:	a9a0      	add	r1, sp, #640	; 0x280
   18dd6:	4608      	mov	r0, r1
   18dd8:	f7f7 fc4c 	bl	10674 <sub_mod_n>
   18ddc:	f8cd a000 	str.w	sl, [sp]
   18de0:	4643      	mov	r3, r8
   18de2:	aa94      	add	r2, sp, #592	; 0x250
   18de4:	a9ac      	add	r1, sp, #688	; 0x2b0
   18de6:	4608      	mov	r0, r1
   18de8:	f7f7 fc44 	bl	10674 <sub_mod_n>
   18dec:	f8cd a000 	str.w	sl, [sp]
   18df0:	4643      	mov	r3, r8
   18df2:	aaa0      	add	r2, sp, #640	; 0x280
   18df4:	a9b8      	add	r1, sp, #736	; 0x2e0
   18df6:	4608      	mov	r0, r1
   18df8:	f7f7 fc3c 	bl	10674 <sub_mod_n>
   18dfc:	f8cd 9000 	str.w	r9, [sp]
   18e00:	4643      	mov	r3, r8
   18e02:	aa64      	add	r2, sp, #400	; 0x190
   18e04:	a9ac      	add	r1, sp, #688	; 0x2b0
   18e06:	4608      	mov	r0, r1
   18e08:	f7fb faa4 	bl	14354 <mul_mont_384x>
   18e0c:	f8cd a000 	str.w	sl, [sp]
   18e10:	4643      	mov	r3, r8
   18e12:	aa1c      	add	r2, sp, #112	; 0x70
   18e14:	a9ac      	add	r1, sp, #688	; 0x2b0
   18e16:	4608      	mov	r0, r1
   18e18:	f7f7 fc2c 	bl	10674 <sub_mod_n>
   18e1c:	f8cd a000 	str.w	sl, [sp]
   18e20:	4643      	mov	r3, r8
   18e22:	aa28      	add	r2, sp, #160	; 0xa0
   18e24:	a9b8      	add	r1, sp, #736	; 0x2e0
   18e26:	4608      	mov	r0, r1
   18e28:	f7f7 fc24 	bl	10674 <sub_mod_n>
   18e2c:	9b02      	ldr	r3, [sp, #8]
   18e2e:	e003      	b.n	18e38 <POINTonE2_dadd+0x33c>
   18e30:	00028738 	.word	0x00028738
   18e34:	fffcfffd 	.word	0xfffcfffd
   18e38:	4258      	negs	r0, r3
   18e3a:	4632      	mov	r2, r6
   18e3c:	6811      	ldr	r1, [r2, #0]
   18e3e:	f854 3f04 	ldr.w	r3, [r4, #4]!
   18e42:	404b      	eors	r3, r1
   18e44:	4003      	ands	r3, r0
   18e46:	404b      	eors	r3, r1
   18e48:	f842 3b04 	str.w	r3, [r2], #4
   18e4c:	42ba      	cmp	r2, r7
   18e4e:	d1f5      	bne.n	18e3c <POINTonE2_dadd+0x340>
   18e50:	f1cb 0200 	rsb	r2, fp, #0
   18e54:	3d04      	subs	r5, #4
   18e56:	9b03      	ldr	r3, [sp, #12]
   18e58:	1f18      	subs	r0, r3, #4
   18e5a:	f856 1b04 	ldr.w	r1, [r6], #4
   18e5e:	f855 3f04 	ldr.w	r3, [r5, #4]!
   18e62:	404b      	eors	r3, r1
   18e64:	4013      	ands	r3, r2
   18e66:	404b      	eors	r3, r1
   18e68:	f840 3f04 	str.w	r3, [r0, #4]!
   18e6c:	42be      	cmp	r6, r7
   18e6e:	d1f4      	bne.n	18e5a <POINTonE2_dadd+0x35e>
   18e70:	f50d 7d5d 	add.w	sp, sp, #884	; 0x374
   18e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018e78 <POINTonE2s_mult_w4>:
   18e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e7c:	b0cb      	sub	sp, #300	; 0x12c
   18e7e:	af00      	add	r7, sp, #0
   18e80:	4605      	mov	r5, r0
   18e82:	4616      	mov	r6, r2
   18e84:	603b      	str	r3, [r7, #0]
   18e86:	f8d7 8150 	ldr.w	r8, [r7, #336]	; 0x150
   18e8a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
   18e8e:	b37b      	cbz	r3, 18ef0 <POINTonE2s_mult_w4+0x78>
   18e90:	b176      	cbz	r6, 18eb0 <POINTonE2s_mult_w4+0x38>
   18e92:	f1a1 0a04 	sub.w	sl, r1, #4
   18e96:	f8d7 9154 	ldr.w	r9, [r7, #340]	; 0x154
   18e9a:	2400      	movs	r4, #0
   18e9c:	f85a 1f04 	ldr.w	r1, [sl, #4]!
   18ea0:	4648      	mov	r0, r9
   18ea2:	f7ff fe05 	bl	18ab0 <POINTonE2_precompute_w4>
   18ea6:	3401      	adds	r4, #1
   18ea8:	f509 6910 	add.w	r9, r9, #2304	; 0x900
   18eac:	42a6      	cmp	r6, r4
   18eae:	d1f5      	bne.n	18e9c <POINTonE2s_mult_w4+0x24>
   18eb0:	f008 0103 	and.w	r1, r8, #3
   18eb4:	1c4a      	adds	r2, r1, #1
   18eb6:	2301      	movs	r3, #1
   18eb8:	4093      	lsls	r3, r2
   18eba:	f103 3aff 	add.w	sl, r3, #4294967295
   18ebe:	4689      	mov	r9, r1
   18ec0:	ebb8 0801 	subs.w	r8, r8, r1
   18ec4:	d01d      	beq.n	18f02 <POINTonE2s_mult_w4+0x8a>
   18ec6:	f108 3bff 	add.w	fp, r8, #4294967295
   18eca:	4659      	mov	r1, fp
   18ecc:	683b      	ldr	r3, [r7, #0]
   18ece:	6818      	ldr	r0, [r3, #0]
   18ed0:	f7f7 fbb8 	bl	10644 <get_wval>
   18ed4:	2104      	movs	r1, #4
   18ed6:	ea00 000a 	and.w	r0, r0, sl
   18eda:	f7f7 fbbf 	bl	1065c <booth_encode>
   18ede:	4602      	mov	r2, r0
   18ee0:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
   18ee4:	4628      	mov	r0, r5
   18ee6:	f7f8 fe93 	bl	11c10 <POINTonE2_gather_booth_w4>
   18eea:	2401      	movs	r4, #1
   18eec:	464b      	mov	r3, r9
   18eee:	e021      	b.n	18f34 <POINTonE2s_mult_w4+0xbc>
   18ef0:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
   18ef4:	466a      	mov	r2, sp
   18ef6:	eba2 2303 	sub.w	r3, r2, r3, lsl #8
   18efa:	469d      	mov	sp, r3
   18efc:	f8c7 d154 	str.w	sp, [r7, #340]	; 0x154
   18f00:	e7c6      	b.n	18e90 <POINTonE2s_mult_w4+0x18>
   18f02:	683b      	ldr	r3, [r7, #0]
   18f04:	681b      	ldr	r3, [r3, #0]
   18f06:	7818      	ldrb	r0, [r3, #0]
   18f08:	2104      	movs	r1, #4
   18f0a:	ea0a 0040 	and.w	r0, sl, r0, lsl #1
   18f0e:	f7f7 fba5 	bl	1065c <booth_encode>
   18f12:	4602      	mov	r2, r0
   18f14:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
   18f18:	4628      	mov	r0, r5
   18f1a:	f7f8 fe79 	bl	11c10 <POINTonE2_gather_booth_w4>
   18f1e:	2401      	movs	r4, #1
   18f20:	e040      	b.n	18fa4 <POINTonE2s_mult_w4+0x12c>
   18f22:	f1ab 0204 	sub.w	r2, fp, #4
   18f26:	f04f 0a1f 	mov.w	sl, #31
   18f2a:	2304      	movs	r3, #4
   18f2c:	f1bb 0f03 	cmp.w	fp, #3
   18f30:	d036      	beq.n	18fa0 <POINTonE2s_mult_w4+0x128>
   18f32:	4693      	mov	fp, r2
   18f34:	42a6      	cmp	r6, r4
   18f36:	d92b      	bls.n	18f90 <POINTonE2s_mult_w4+0x118>
   18f38:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
   18f3c:	f109 39ff 	add.w	r9, r9, #4294967295
   18f40:	683a      	ldr	r2, [r7, #0]
   18f42:	eb02 0989 	add.w	r9, r2, r9, lsl #2
   18f46:	eb04 08c4 	add.w	r8, r4, r4, lsl #3
   18f4a:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
   18f4e:	eb02 2808 	add.w	r8, r2, r8, lsl #8
   18f52:	3301      	adds	r3, #1
   18f54:	607b      	str	r3, [r7, #4]
   18f56:	687a      	ldr	r2, [r7, #4]
   18f58:	4659      	mov	r1, fp
   18f5a:	f859 0f04 	ldr.w	r0, [r9, #4]!
   18f5e:	f7f7 fb71 	bl	10644 <get_wval>
   18f62:	2104      	movs	r1, #4
   18f64:	ea00 000a 	and.w	r0, r0, sl
   18f68:	f7f7 fb78 	bl	1065c <booth_encode>
   18f6c:	4602      	mov	r2, r0
   18f6e:	4641      	mov	r1, r8
   18f70:	f107 0008 	add.w	r0, r7, #8
   18f74:	f7f8 fe4c 	bl	11c10 <POINTonE2_gather_booth_w4>
   18f78:	2300      	movs	r3, #0
   18f7a:	f107 0208 	add.w	r2, r7, #8
   18f7e:	4629      	mov	r1, r5
   18f80:	4628      	mov	r0, r5
   18f82:	f7ff fdbb 	bl	18afc <POINTonE2_dadd>
   18f86:	3401      	adds	r4, #1
   18f88:	f508 6810 	add.w	r8, r8, #2304	; 0x900
   18f8c:	42a6      	cmp	r6, r4
   18f8e:	d1e2      	bne.n	18f56 <POINTonE2s_mult_w4+0xde>
   18f90:	2404      	movs	r4, #4
   18f92:	4629      	mov	r1, r5
   18f94:	4628      	mov	r0, r5
   18f96:	f7ff fca9 	bl	188ec <POINTonE2_double>
   18f9a:	3c01      	subs	r4, #1
   18f9c:	d1f9      	bne.n	18f92 <POINTonE2s_mult_w4+0x11a>
   18f9e:	e7c0      	b.n	18f22 <POINTonE2s_mult_w4+0xaa>
   18fa0:	f04f 0a1f 	mov.w	sl, #31
   18fa4:	42a6      	cmp	r6, r4
   18fa6:	d928      	bls.n	18ffa <POINTonE2s_mult_w4+0x182>
   18fa8:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
   18fac:	f109 39ff 	add.w	r9, r9, #4294967295
   18fb0:	683b      	ldr	r3, [r7, #0]
   18fb2:	eb03 0989 	add.w	r9, r3, r9, lsl #2
   18fb6:	eb04 08c4 	add.w	r8, r4, r4, lsl #3
   18fba:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
   18fbe:	eb03 2808 	add.w	r8, r3, r8, lsl #8
   18fc2:	f04f 0b04 	mov.w	fp, #4
   18fc6:	f859 3f04 	ldr.w	r3, [r9, #4]!
   18fca:	7818      	ldrb	r0, [r3, #0]
   18fcc:	4659      	mov	r1, fp
   18fce:	ea0a 0040 	and.w	r0, sl, r0, lsl #1
   18fd2:	f7f7 fb43 	bl	1065c <booth_encode>
   18fd6:	4602      	mov	r2, r0
   18fd8:	4641      	mov	r1, r8
   18fda:	f107 0008 	add.w	r0, r7, #8
   18fde:	f7f8 fe17 	bl	11c10 <POINTonE2_gather_booth_w4>
   18fe2:	2300      	movs	r3, #0
   18fe4:	f107 0208 	add.w	r2, r7, #8
   18fe8:	4629      	mov	r1, r5
   18fea:	4628      	mov	r0, r5
   18fec:	f7ff fd86 	bl	18afc <POINTonE2_dadd>
   18ff0:	3401      	adds	r4, #1
   18ff2:	f508 6810 	add.w	r8, r8, #2304	; 0x900
   18ff6:	42a6      	cmp	r6, r4
   18ff8:	d1e5      	bne.n	18fc6 <POINTonE2s_mult_w4+0x14e>
   18ffa:	f507 7796 	add.w	r7, r7, #300	; 0x12c
   18ffe:	46bd      	mov	sp, r7
   19000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00019004 <POINTonE2_mult_gls>:
   19004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19008:	f5ad 7d6a 	sub.w	sp, sp, #936	; 0x3a8
   1900c:	4606      	mov	r6, r0
   1900e:	460d      	mov	r5, r1
   19010:	f102 0c20 	add.w	ip, r2, #32
   19014:	2400      	movs	r4, #0
   19016:	43d0      	mvns	r0, r2
   19018:	eb00 030c 	add.w	r3, r0, ip
   1901c:	f81c 1d01 	ldrb.w	r1, [ip, #-1]!
   19020:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
   19024:	f023 0303 	bic.w	r3, r3, #3
   19028:	a9ea      	add	r1, sp, #936	; 0x3a8
   1902a:	440b      	add	r3, r1
   1902c:	f843 4c20 	str.w	r4, [r3, #-32]
   19030:	4562      	cmp	r2, ip
   19032:	d1f1      	bne.n	19018 <POINTonE2_mult_gls+0x14>
   19034:	ace2      	add	r4, sp, #904	; 0x388
   19036:	4620      	mov	r0, r4
   19038:	f7fd fc40 	bl	168bc <div_by_zz>
   1903c:	4620      	mov	r0, r4
   1903e:	f7fd fdd5 	bl	16bec <div_by_z>
   19042:	f50d 7a66 	add.w	sl, sp, #920	; 0x398
   19046:	4650      	mov	r0, sl
   19048:	f7fd fdd0 	bl	16bec <div_by_z>
   1904c:	af0a      	add	r7, sp, #40	; 0x28
   1904e:	4629      	mov	r1, r5
   19050:	4638      	mov	r0, r7
   19052:	f7fb f9cd 	bl	143f0 <psi>
   19056:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
   1905a:	4639      	mov	r1, r7
   1905c:	4648      	mov	r0, r9
   1905e:	f7fb f9c7 	bl	143f0 <psi>
   19062:	f50d 781a 	add.w	r8, sp, #616	; 0x268
   19066:	4649      	mov	r1, r9
   19068:	4640      	mov	r0, r8
   1906a:	f7fb f9c1 	bl	143f0 <psi>
   1906e:	2101      	movs	r1, #1
   19070:	4638      	mov	r0, r7
   19072:	f7f8 fdb3 	bl	11bdc <POINTonE2_cneg>
   19076:	2101      	movs	r1, #1
   19078:	4640      	mov	r0, r8
   1907a:	f7f8 fdaf 	bl	11bdc <POINTonE2_cneg>
   1907e:	9502      	str	r5, [sp, #8]
   19080:	9406      	str	r4, [sp, #24]
   19082:	9703      	str	r7, [sp, #12]
   19084:	abe4      	add	r3, sp, #912	; 0x390
   19086:	9307      	str	r3, [sp, #28]
   19088:	f8cd 9010 	str.w	r9, [sp, #16]
   1908c:	f8cd a020 	str.w	sl, [sp, #32]
   19090:	f8cd 8014 	str.w	r8, [sp, #20]
   19094:	abe8      	add	r3, sp, #928	; 0x3a0
   19096:	9309      	str	r3, [sp, #36]	; 0x24
   19098:	2300      	movs	r3, #0
   1909a:	9301      	str	r3, [sp, #4]
   1909c:	2340      	movs	r3, #64	; 0x40
   1909e:	9300      	str	r3, [sp, #0]
   190a0:	ab06      	add	r3, sp, #24
   190a2:	2204      	movs	r2, #4
   190a4:	a902      	add	r1, sp, #8
   190a6:	4630      	mov	r0, r6
   190a8:	f7ff fee6 	bl	18e78 <POINTonE2s_mult_w4>
   190ac:	4620      	mov	r0, r4
   190ae:	aaea      	add	r2, sp, #936	; 0x3a8
   190b0:	2300      	movs	r3, #0
   190b2:	f840 3b04 	str.w	r3, [r0], #4
   190b6:	4290      	cmp	r0, r2
   190b8:	d1fb      	bne.n	190b2 <POINTonE2_mult_gls+0xae>
   190ba:	abe2      	add	r3, sp, #904	; 0x388
   190bc:	f50d 7d6a 	add.w	sp, sp, #936	; 0x3a8
   190c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000190c4 <POINTonE2_mult_w4>:
   190c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   190c8:	f6ad 2d24 	subw	sp, sp, #2596	; 0xa24
   190cc:	4605      	mov	r5, r0
   190ce:	4617      	mov	r7, r2
   190d0:	461e      	mov	r6, r3
   190d2:	4668      	mov	r0, sp
   190d4:	f7ff fcec 	bl	18ab0 <POINTonE2_precompute_w4>
   190d8:	f006 0303 	and.w	r3, r6, #3
   190dc:	1c5c      	adds	r4, r3, #1
   190de:	1af6      	subs	r6, r6, r3
   190e0:	d036      	beq.n	19150 <POINTonE2_mult_w4+0x8c>
   190e2:	4622      	mov	r2, r4
   190e4:	1e71      	subs	r1, r6, #1
   190e6:	4638      	mov	r0, r7
   190e8:	f7f7 faac 	bl	10644 <get_wval>
   190ec:	f04f 33ff 	mov.w	r3, #4294967295
   190f0:	40a3      	lsls	r3, r4
   190f2:	2104      	movs	r1, #4
   190f4:	ea20 0003 	bic.w	r0, r0, r3
   190f8:	f7f7 fab0 	bl	1065c <booth_encode>
   190fc:	4602      	mov	r2, r0
   190fe:	4669      	mov	r1, sp
   19100:	4628      	mov	r0, r5
   19102:	f7f8 fd85 	bl	11c10 <POINTonE2_gather_booth_w4>
   19106:	f04f 0905 	mov.w	r9, #5
   1910a:	f04f 0804 	mov.w	r8, #4
   1910e:	2404      	movs	r4, #4
   19110:	4629      	mov	r1, r5
   19112:	4628      	mov	r0, r5
   19114:	f7ff fbea 	bl	188ec <POINTonE2_double>
   19118:	3c01      	subs	r4, #1
   1911a:	d1f9      	bne.n	19110 <POINTonE2_mult_w4+0x4c>
   1911c:	1f34      	subs	r4, r6, #4
   1911e:	d027      	beq.n	19170 <POINTonE2_mult_w4+0xac>
   19120:	464a      	mov	r2, r9
   19122:	1f71      	subs	r1, r6, #5
   19124:	4638      	mov	r0, r7
   19126:	f7f7 fa8d 	bl	10644 <get_wval>
   1912a:	4641      	mov	r1, r8
   1912c:	f000 001f 	and.w	r0, r0, #31
   19130:	f7f7 fa94 	bl	1065c <booth_encode>
   19134:	4602      	mov	r2, r0
   19136:	4669      	mov	r1, sp
   19138:	f50d 6010 	add.w	r0, sp, #2304	; 0x900
   1913c:	f7f8 fd68 	bl	11c10 <POINTonE2_gather_booth_w4>
   19140:	f50d 6210 	add.w	r2, sp, #2304	; 0x900
   19144:	4629      	mov	r1, r5
   19146:	4628      	mov	r0, r5
   19148:	f7ff fa48 	bl	185dc <POINTonE2_add>
   1914c:	4626      	mov	r6, r4
   1914e:	e7de      	b.n	1910e <POINTonE2_mult_w4+0x4a>
   19150:	7838      	ldrb	r0, [r7, #0]
   19152:	f04f 33ff 	mov.w	r3, #4294967295
   19156:	40a3      	lsls	r3, r4
   19158:	43db      	mvns	r3, r3
   1915a:	2104      	movs	r1, #4
   1915c:	ea03 0040 	and.w	r0, r3, r0, lsl #1
   19160:	f7f7 fa7c 	bl	1065c <booth_encode>
   19164:	4602      	mov	r2, r0
   19166:	4669      	mov	r1, sp
   19168:	4628      	mov	r0, r5
   1916a:	f7f8 fd51 	bl	11c10 <POINTonE2_gather_booth_w4>
   1916e:	e013      	b.n	19198 <POINTonE2_mult_w4+0xd4>
   19170:	7838      	ldrb	r0, [r7, #0]
   19172:	0040      	lsls	r0, r0, #1
   19174:	2104      	movs	r1, #4
   19176:	f000 001e 	and.w	r0, r0, #30
   1917a:	f7f7 fa6f 	bl	1065c <booth_encode>
   1917e:	4602      	mov	r2, r0
   19180:	4669      	mov	r1, sp
   19182:	f50d 6010 	add.w	r0, sp, #2304	; 0x900
   19186:	f7f8 fd43 	bl	11c10 <POINTonE2_gather_booth_w4>
   1918a:	2300      	movs	r3, #0
   1918c:	f50d 6210 	add.w	r2, sp, #2304	; 0x900
   19190:	4629      	mov	r1, r5
   19192:	4628      	mov	r0, r5
   19194:	f7ff fcb2 	bl	18afc <POINTonE2_dadd>
   19198:	f60d 2d24 	addw	sp, sp, #2596	; 0xa24
   1919c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000191a0 <POINTonE2_mult_w5>:
   191a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   191a4:	f5ad 5d99 	sub.w	sp, sp, #4896	; 0x1320
   191a8:	b081      	sub	sp, #4
   191aa:	4605      	mov	r5, r0
   191ac:	4617      	mov	r7, r2
   191ae:	4698      	mov	r8, r3
   191b0:	f1a1 0e04 	sub.w	lr, r1, #4
   191b4:	466c      	mov	r4, sp
   191b6:	ab48      	add	r3, sp, #288	; 0x120
   191b8:	46a4      	mov	ip, r4
   191ba:	f85e 2f04 	ldr.w	r2, [lr, #4]!
   191be:	f84c 2b04 	str.w	r2, [ip], #4
   191c2:	459c      	cmp	ip, r3
   191c4:	d1f9      	bne.n	191ba <POINTonE2_mult_w5+0x1a>
   191c6:	a848      	add	r0, sp, #288	; 0x120
   191c8:	f7ff fb90 	bl	188ec <POINTonE2_double>
   191cc:	ae90      	add	r6, sp, #576	; 0x240
   191ce:	f504 69fc 	add.w	r9, r4, #2016	; 0x7e0
   191d2:	4622      	mov	r2, r4
   191d4:	f504 7490 	add.w	r4, r4, #288	; 0x120
   191d8:	4621      	mov	r1, r4
   191da:	4630      	mov	r0, r6
   191dc:	f7ff f9fe 	bl	185dc <POINTonE2_add>
   191e0:	4621      	mov	r1, r4
   191e2:	f506 7090 	add.w	r0, r6, #288	; 0x120
   191e6:	f7ff fb81 	bl	188ec <POINTonE2_double>
   191ea:	f506 7610 	add.w	r6, r6, #576	; 0x240
   191ee:	45a1      	cmp	r9, r4
   191f0:	d1ef      	bne.n	191d2 <POINTonE2_mult_w5+0x32>
   191f2:	4b36      	ldr	r3, [pc, #216]	; (192cc <POINTonE2_mult_w5+0x12c>)
   191f4:	fba3 2308 	umull	r2, r3, r3, r8
   191f8:	f023 0603 	bic.w	r6, r3, #3
   191fc:	eb06 0693 	add.w	r6, r6, r3, lsr #2
   19200:	eba8 0606 	sub.w	r6, r8, r6
   19204:	1c74      	adds	r4, r6, #1
   19206:	ebb8 0606 	subs.w	r6, r8, r6
   1920a:	d036      	beq.n	1927a <POINTonE2_mult_w5+0xda>
   1920c:	4622      	mov	r2, r4
   1920e:	1e71      	subs	r1, r6, #1
   19210:	4638      	mov	r0, r7
   19212:	f7f7 fa17 	bl	10644 <get_wval>
   19216:	f04f 33ff 	mov.w	r3, #4294967295
   1921a:	40a3      	lsls	r3, r4
   1921c:	2105      	movs	r1, #5
   1921e:	ea20 0003 	bic.w	r0, r0, r3
   19222:	f7f7 fa1b 	bl	1065c <booth_encode>
   19226:	4602      	mov	r2, r0
   19228:	4669      	mov	r1, sp
   1922a:	4628      	mov	r0, r5
   1922c:	f7f8 fd1f 	bl	11c6e <POINTonE2_gather_booth_w5>
   19230:	f04f 0906 	mov.w	r9, #6
   19234:	f04f 0805 	mov.w	r8, #5
   19238:	2405      	movs	r4, #5
   1923a:	4629      	mov	r1, r5
   1923c:	4628      	mov	r0, r5
   1923e:	f7ff fb55 	bl	188ec <POINTonE2_double>
   19242:	3c01      	subs	r4, #1
   19244:	d1f9      	bne.n	1923a <POINTonE2_mult_w5+0x9a>
   19246:	1f74      	subs	r4, r6, #5
   19248:	d027      	beq.n	1929a <POINTonE2_mult_w5+0xfa>
   1924a:	464a      	mov	r2, r9
   1924c:	1fb1      	subs	r1, r6, #6
   1924e:	4638      	mov	r0, r7
   19250:	f7f7 f9f8 	bl	10644 <get_wval>
   19254:	4641      	mov	r1, r8
   19256:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1925a:	f7f7 f9ff 	bl	1065c <booth_encode>
   1925e:	4602      	mov	r2, r0
   19260:	4669      	mov	r1, sp
   19262:	f50d 5090 	add.w	r0, sp, #4608	; 0x1200
   19266:	f7f8 fd02 	bl	11c6e <POINTonE2_gather_booth_w5>
   1926a:	f50d 5290 	add.w	r2, sp, #4608	; 0x1200
   1926e:	4629      	mov	r1, r5
   19270:	4628      	mov	r0, r5
   19272:	f7ff f9b3 	bl	185dc <POINTonE2_add>
   19276:	4626      	mov	r6, r4
   19278:	e7de      	b.n	19238 <POINTonE2_mult_w5+0x98>
   1927a:	7838      	ldrb	r0, [r7, #0]
   1927c:	f04f 33ff 	mov.w	r3, #4294967295
   19280:	40a3      	lsls	r3, r4
   19282:	43db      	mvns	r3, r3
   19284:	2105      	movs	r1, #5
   19286:	ea03 0040 	and.w	r0, r3, r0, lsl #1
   1928a:	f7f7 f9e7 	bl	1065c <booth_encode>
   1928e:	4602      	mov	r2, r0
   19290:	4669      	mov	r1, sp
   19292:	4628      	mov	r0, r5
   19294:	f7f8 fceb 	bl	11c6e <POINTonE2_gather_booth_w5>
   19298:	e013      	b.n	192c2 <POINTonE2_mult_w5+0x122>
   1929a:	7838      	ldrb	r0, [r7, #0]
   1929c:	0040      	lsls	r0, r0, #1
   1929e:	2105      	movs	r1, #5
   192a0:	f000 003e 	and.w	r0, r0, #62	; 0x3e
   192a4:	f7f7 f9da 	bl	1065c <booth_encode>
   192a8:	4602      	mov	r2, r0
   192aa:	4669      	mov	r1, sp
   192ac:	f50d 5090 	add.w	r0, sp, #4608	; 0x1200
   192b0:	f7f8 fcdd 	bl	11c6e <POINTonE2_gather_booth_w5>
   192b4:	2300      	movs	r3, #0
   192b6:	f50d 5290 	add.w	r2, sp, #4608	; 0x1200
   192ba:	4629      	mov	r1, r5
   192bc:	4628      	mov	r0, r5
   192be:	f7ff fc1d 	bl	18afc <POINTonE2_dadd>
   192c2:	f50d 5d99 	add.w	sp, sp, #4896	; 0x1320
   192c6:	b001      	add	sp, #4
   192c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   192cc:	cccccccd 	.word	0xcccccccd

000192d0 <blst_p2_mult>:
   192d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   192d4:	b089      	sub	sp, #36	; 0x24
   192d6:	4607      	mov	r7, r0
   192d8:	4688      	mov	r8, r1
   192da:	4615      	mov	r5, r2
   192dc:	461e      	mov	r6, r3
   192de:	2b9f      	cmp	r3, #159	; 0x9f
   192e0:	d934      	bls.n	1934c <blst_p2_mult+0x7c>
   192e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   192e6:	d83b      	bhi.n	19360 <blst_p2_mult+0x90>
   192e8:	1dd8      	adds	r0, r3, #7
   192ea:	08c0      	lsrs	r0, r0, #3
   192ec:	f10d 33ff 	add.w	r3, sp, #4294967295
   192f0:	466c      	mov	r4, sp
   192f2:	f10d 0e1f 	add.w	lr, sp, #31
   192f6:	f04f 39ff 	mov.w	r9, #4294967295
   192fa:	2100      	movs	r1, #0
   192fc:	469c      	mov	ip, r3
   192fe:	5c6a      	ldrb	r2, [r5, r1]
   19300:	ea02 0209 	and.w	r2, r2, r9
   19304:	f803 2f01 	strb.w	r2, [r3, #1]!
   19308:	f10c 0c02 	add.w	ip, ip, #2
   1930c:	ebac 0c04 	sub.w	ip, ip, r4
   19310:	ebac 0c00 	sub.w	ip, ip, r0
   19314:	ea4f 79ec 	mov.w	r9, ip, asr #31
   19318:	eb01 71dc 	add.w	r1, r1, ip, lsr #31
   1931c:	4573      	cmp	r3, lr
   1931e:	d1ed      	bne.n	192fc <blst_p2_mult+0x2c>
   19320:	2208      	movs	r2, #8
   19322:	4911      	ldr	r1, [pc, #68]	; (19368 <blst_p2_mult+0x98>)
   19324:	4668      	mov	r0, sp
   19326:	f7f7 f9de 	bl	106e6 <check_mod_n>
   1932a:	b190      	cbz	r0, 19352 <blst_p2_mult+0x82>
   1932c:	466a      	mov	r2, sp
   1932e:	4641      	mov	r1, r8
   19330:	4638      	mov	r0, r7
   19332:	f7ff fe67 	bl	19004 <POINTonE2_mult_gls>
   19336:	f104 0220 	add.w	r2, r4, #32
   1933a:	2300      	movs	r3, #0
   1933c:	f844 3b04 	str.w	r3, [r4], #4
   19340:	42a2      	cmp	r2, r4
   19342:	d1fb      	bne.n	1933c <blst_p2_mult+0x6c>
   19344:	466b      	mov	r3, sp
   19346:	b009      	add	sp, #36	; 0x24
   19348:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1934c:	f7ff feba 	bl	190c4 <POINTonE2_mult_w4>
   19350:	e7f9      	b.n	19346 <blst_p2_mult+0x76>
   19352:	4633      	mov	r3, r6
   19354:	462a      	mov	r2, r5
   19356:	4641      	mov	r1, r8
   19358:	4638      	mov	r0, r7
   1935a:	f7ff ff21 	bl	191a0 <POINTonE2_mult_w5>
   1935e:	e7ea      	b.n	19336 <blst_p2_mult+0x66>
   19360:	f7ff ff1e 	bl	191a0 <POINTonE2_mult_w5>
   19364:	e7ef      	b.n	19346 <blst_p2_mult+0x76>
   19366:	bf00      	nop
   19368:	00029af8 	.word	0x00029af8

0001936c <POINTonE2_add_n_dbl>:
   1936c:	b570      	push	{r4, r5, r6, lr}
   1936e:	4605      	mov	r5, r0
   19370:	4616      	mov	r6, r2
   19372:	2300      	movs	r3, #0
   19374:	460a      	mov	r2, r1
   19376:	4601      	mov	r1, r0
   19378:	f7ff fbc0 	bl	18afc <POINTonE2_dadd>
   1937c:	1e74      	subs	r4, r6, #1
   1937e:	b13e      	cbz	r6, 19390 <POINTonE2_add_n_dbl+0x24>
   19380:	4629      	mov	r1, r5
   19382:	4628      	mov	r0, r5
   19384:	f7ff fab2 	bl	188ec <POINTonE2_double>
   19388:	3c01      	subs	r4, #1
   1938a:	f1b4 3fff 	cmp.w	r4, #4294967295
   1938e:	d1f7      	bne.n	19380 <POINTonE2_add_n_dbl+0x14>
   19390:	bd70      	pop	{r4, r5, r6, pc}

00019392 <POINTonE2_times_minus_z>:
   19392:	b538      	push	{r3, r4, r5, lr}
   19394:	4604      	mov	r4, r0
   19396:	460d      	mov	r5, r1
   19398:	f7ff faa8 	bl	188ec <POINTonE2_double>
   1939c:	2202      	movs	r2, #2
   1939e:	4629      	mov	r1, r5
   193a0:	4620      	mov	r0, r4
   193a2:	f7ff ffe3 	bl	1936c <POINTonE2_add_n_dbl>
   193a6:	2203      	movs	r2, #3
   193a8:	4629      	mov	r1, r5
   193aa:	4620      	mov	r0, r4
   193ac:	f7ff ffde 	bl	1936c <POINTonE2_add_n_dbl>
   193b0:	2209      	movs	r2, #9
   193b2:	4629      	mov	r1, r5
   193b4:	4620      	mov	r0, r4
   193b6:	f7ff ffd9 	bl	1936c <POINTonE2_add_n_dbl>
   193ba:	2220      	movs	r2, #32
   193bc:	4629      	mov	r1, r5
   193be:	4620      	mov	r0, r4
   193c0:	f7ff ffd4 	bl	1936c <POINTonE2_add_n_dbl>
   193c4:	2210      	movs	r2, #16
   193c6:	4629      	mov	r1, r5
   193c8:	4620      	mov	r0, r4
   193ca:	f7ff ffcf 	bl	1936c <POINTonE2_add_n_dbl>
   193ce:	bd38      	pop	{r3, r4, r5, pc}

000193d0 <POINTonE2_in_G2>:
   193d0:	b510      	push	{r4, lr}
   193d2:	f5ad 7d58 	sub.w	sp, sp, #864	; 0x360
   193d6:	4604      	mov	r4, r0
   193d8:	4601      	mov	r1, r0
   193da:	a890      	add	r0, sp, #576	; 0x240
   193dc:	f7fb f808 	bl	143f0 <psi>
   193e0:	a990      	add	r1, sp, #576	; 0x240
   193e2:	4608      	mov	r0, r1
   193e4:	f7fb f804 	bl	143f0 <psi>
   193e8:	a990      	add	r1, sp, #576	; 0x240
   193ea:	a848      	add	r0, sp, #288	; 0x120
   193ec:	f7fb f800 	bl	143f0 <psi>
   193f0:	a948      	add	r1, sp, #288	; 0x120
   193f2:	4668      	mov	r0, sp
   193f4:	f7ff ffcd 	bl	19392 <POINTonE2_times_minus_z>
   193f8:	2300      	movs	r3, #0
   193fa:	466a      	mov	r2, sp
   193fc:	a990      	add	r1, sp, #576	; 0x240
   193fe:	4608      	mov	r0, r1
   19400:	f7ff fb7c 	bl	18afc <POINTonE2_dadd>
   19404:	2101      	movs	r1, #1
   19406:	a890      	add	r0, sp, #576	; 0x240
   19408:	f7f8 fbe8 	bl	11bdc <POINTonE2_cneg>
   1940c:	2300      	movs	r3, #0
   1940e:	4622      	mov	r2, r4
   19410:	a990      	add	r1, sp, #576	; 0x240
   19412:	4608      	mov	r0, r1
   19414:	f7ff fb72 	bl	18afc <POINTonE2_dadd>
   19418:	abbf      	add	r3, sp, #764	; 0x2fc
   1941a:	a9d7      	add	r1, sp, #860	; 0x35c
   1941c:	2000      	movs	r0, #0
   1941e:	f853 2f04 	ldr.w	r2, [r3, #4]!
   19422:	4310      	orrs	r0, r2
   19424:	428b      	cmp	r3, r1
   19426:	d1fa      	bne.n	1941e <POINTonE2_in_G2+0x4e>
   19428:	1e43      	subs	r3, r0, #1
   1942a:	ea23 0000 	bic.w	r0, r3, r0
   1942e:	0fc0      	lsrs	r0, r0, #31
   19430:	f50d 7d58 	add.w	sp, sp, #864	; 0x360
   19434:	bd10      	pop	{r4, pc}

00019436 <blst_p2_in_g2>:
   19436:	b508      	push	{r3, lr}
   19438:	f7ff ffca 	bl	193d0 <POINTonE2_in_G2>
   1943c:	bd08      	pop	{r3, pc}

0001943e <blst_p2_affine_in_g2>:
   1943e:	b510      	push	{r4, lr}
   19440:	b0c8      	sub	sp, #288	; 0x120
   19442:	f1a0 0c04 	sub.w	ip, r0, #4
   19446:	466b      	mov	r3, sp
   19448:	ac30      	add	r4, sp, #192	; 0xc0
   1944a:	4662      	mov	r2, ip
   1944c:	f852 1f04 	ldr.w	r1, [r2, #4]!
   19450:	f843 1b04 	str.w	r1, [r3], #4
   19454:	42a3      	cmp	r3, r4
   19456:	d1f9      	bne.n	1944c <blst_p2_affine_in_g2+0xe>
   19458:	30bc      	adds	r0, #188	; 0xbc
   1945a:	4663      	mov	r3, ip
   1945c:	2200      	movs	r2, #0
   1945e:	f853 1f04 	ldr.w	r1, [r3, #4]!
   19462:	430a      	orrs	r2, r1
   19464:	4283      	cmp	r3, r0
   19466:	d1fa      	bne.n	1945e <blst_p2_affine_in_g2+0x20>
   19468:	f102 3eff 	add.w	lr, r2, #4294967295
   1946c:	ea2e 0202 	bic.w	r2, lr, r2
   19470:	ea4f 7ee2 	mov.w	lr, r2, asr #31
   19474:	4c0a      	ldr	r4, [pc, #40]	; (194a0 <blst_p2_affine_in_g2+0x62>)
   19476:	f104 0290 	add.w	r2, r4, #144	; 0x90
   1947a:	a82f      	add	r0, sp, #188	; 0xbc
   1947c:	34f0      	adds	r4, #240	; 0xf0
   1947e:	f852 1b04 	ldr.w	r1, [r2], #4
   19482:	f85c 3f04 	ldr.w	r3, [ip, #4]!
   19486:	404b      	eors	r3, r1
   19488:	ea03 030e 	and.w	r3, r3, lr
   1948c:	404b      	eors	r3, r1
   1948e:	f840 3f04 	str.w	r3, [r0, #4]!
   19492:	42a2      	cmp	r2, r4
   19494:	d1f3      	bne.n	1947e <blst_p2_affine_in_g2+0x40>
   19496:	4668      	mov	r0, sp
   19498:	f7ff ff9a 	bl	193d0 <POINTonE2_in_G2>
   1949c:	b048      	add	sp, #288	; 0x120
   1949e:	bd10      	pop	{r4, pc}
   194a0:	00028738 	.word	0x00028738

000194a4 <blst_pairing_merge>:
   194a4:	b538      	push	{r3, r4, r5, lr}
   194a6:	4604      	mov	r4, r0
   194a8:	460d      	mov	r5, r1
   194aa:	6803      	ldr	r3, [r0, #0]
   194ac:	f013 0203 	ands.w	r2, r3, #3
   194b0:	d007      	beq.n	194c2 <blst_pairing_merge+0x1e>
   194b2:	6809      	ldr	r1, [r1, #0]
   194b4:	f011 0f03 	tst.w	r1, #3
   194b8:	d003      	beq.n	194c2 <blst_pairing_merge+0x1e>
   194ba:	4019      	ands	r1, r3
   194bc:	f011 0f03 	tst.w	r1, #3
   194c0:	d07f      	beq.n	195c2 <blst_pairing_merge+0x11e>
   194c2:	6861      	ldr	r1, [r4, #4]
   194c4:	2900      	cmp	r1, #0
   194c6:	d17e      	bne.n	195c6 <blst_pairing_merge+0x122>
   194c8:	6869      	ldr	r1, [r5, #4]
   194ca:	2900      	cmp	r1, #0
   194cc:	d17d      	bne.n	195ca <blst_pairing_merge+0x126>
   194ce:	2a01      	cmp	r2, #1
   194d0:	d005      	beq.n	194de <blst_pairing_merge+0x3a>
   194d2:	2a02      	cmp	r2, #2
   194d4:	d03e      	beq.n	19554 <blst_pairing_merge+0xb0>
   194d6:	2a00      	cmp	r2, #0
   194d8:	d05e      	beq.n	19598 <blst_pairing_merge+0xf4>
   194da:	2004      	movs	r0, #4
   194dc:	bd38      	pop	{r3, r4, r5, pc}
   194de:	682a      	ldr	r2, [r5, #0]
   194e0:	ea03 0102 	and.w	r1, r3, r2
   194e4:	f011 0f10 	tst.w	r1, #16
   194e8:	d112      	bne.n	19510 <blst_pairing_merge+0x6c>
   194ea:	f012 0f10 	tst.w	r2, #16
   194ee:	d017      	beq.n	19520 <blst_pairing_merge+0x7c>
   194f0:	f043 0310 	orr.w	r3, r3, #16
   194f4:	6023      	str	r3, [r4, #0]
   194f6:	f505 7313 	add.w	r3, r5, #588	; 0x24c
   194fa:	f504 7213 	add.w	r2, r4, #588	; 0x24c
   194fe:	f505 7037 	add.w	r0, r5, #732	; 0x2dc
   19502:	f853 1f04 	ldr.w	r1, [r3, #4]!
   19506:	f842 1f04 	str.w	r1, [r2, #4]!
   1950a:	4283      	cmp	r3, r0
   1950c:	d1f9      	bne.n	19502 <blst_pairing_merge+0x5e>
   1950e:	e007      	b.n	19520 <blst_pairing_merge+0x7c>
   19510:	f504 7014 	add.w	r0, r4, #592	; 0x250
   19514:	2300      	movs	r3, #0
   19516:	f505 7214 	add.w	r2, r5, #592	; 0x250
   1951a:	4601      	mov	r1, r0
   1951c:	f7f9 fcfe 	bl	12f1c <POINTonE1_dadd>
   19520:	6823      	ldr	r3, [r4, #0]
   19522:	682a      	ldr	r2, [r5, #0]
   19524:	ea03 0102 	and.w	r1, r3, r2
   19528:	f011 0f20 	tst.w	r1, #32
   1952c:	d140      	bne.n	195b0 <blst_pairing_merge+0x10c>
   1952e:	f012 0f20 	tst.w	r2, #32
   19532:	d04c      	beq.n	195ce <blst_pairing_merge+0x12a>
   19534:	f043 0320 	orr.w	r3, r3, #32
   19538:	f844 3b0c 	str.w	r3, [r4], #12
   1953c:	f105 030c 	add.w	r3, r5, #12
   19540:	f505 7513 	add.w	r5, r5, #588	; 0x24c
   19544:	f853 2f04 	ldr.w	r2, [r3, #4]!
   19548:	f844 2f04 	str.w	r2, [r4, #4]!
   1954c:	42ab      	cmp	r3, r5
   1954e:	d1f9      	bne.n	19544 <blst_pairing_merge+0xa0>
   19550:	2000      	movs	r0, #0
   19552:	e7c3      	b.n	194dc <blst_pairing_merge+0x38>
   19554:	682a      	ldr	r2, [r5, #0]
   19556:	ea03 0102 	and.w	r1, r3, r2
   1955a:	f011 0f10 	tst.w	r1, #16
   1955e:	d112      	bne.n	19586 <blst_pairing_merge+0xe2>
   19560:	f012 0f10 	tst.w	r2, #16
   19564:	d0dc      	beq.n	19520 <blst_pairing_merge+0x7c>
   19566:	f043 0310 	orr.w	r3, r3, #16
   1956a:	6023      	str	r3, [r4, #0]
   1956c:	f505 7313 	add.w	r3, r5, #588	; 0x24c
   19570:	f504 7213 	add.w	r2, r4, #588	; 0x24c
   19574:	f505 705b 	add.w	r0, r5, #876	; 0x36c
   19578:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1957c:	f842 1f04 	str.w	r1, [r2, #4]!
   19580:	4283      	cmp	r3, r0
   19582:	d1f9      	bne.n	19578 <blst_pairing_merge+0xd4>
   19584:	e7cc      	b.n	19520 <blst_pairing_merge+0x7c>
   19586:	f504 7014 	add.w	r0, r4, #592	; 0x250
   1958a:	2300      	movs	r3, #0
   1958c:	f505 7214 	add.w	r2, r5, #592	; 0x250
   19590:	4601      	mov	r1, r0
   19592:	f7ff fab3 	bl	18afc <POINTonE2_dadd>
   19596:	e7c3      	b.n	19520 <blst_pairing_merge+0x7c>
   19598:	1f2b      	subs	r3, r5, #4
   1959a:	3c04      	subs	r4, #4
   1959c:	f605 456c 	addw	r5, r5, #3180	; 0xc6c
   195a0:	f853 2f04 	ldr.w	r2, [r3, #4]!
   195a4:	f844 2f04 	str.w	r2, [r4, #4]!
   195a8:	42ab      	cmp	r3, r5
   195aa:	d1f9      	bne.n	195a0 <blst_pairing_merge+0xfc>
   195ac:	2000      	movs	r0, #0
   195ae:	e795      	b.n	194dc <blst_pairing_merge+0x38>
   195b0:	f104 0010 	add.w	r0, r4, #16
   195b4:	f105 0210 	add.w	r2, r5, #16
   195b8:	4601      	mov	r1, r0
   195ba:	f7fb f9df 	bl	1497c <mul_fp12>
   195be:	2000      	movs	r0, #0
   195c0:	e78c      	b.n	194dc <blst_pairing_merge+0x38>
   195c2:	2004      	movs	r0, #4
   195c4:	e78a      	b.n	194dc <blst_pairing_merge+0x38>
   195c6:	2004      	movs	r0, #4
   195c8:	e788      	b.n	194dc <blst_pairing_merge+0x38>
   195ca:	2004      	movs	r0, #4
   195cc:	e786      	b.n	194dc <blst_pairing_merge+0x38>
   195ce:	2000      	movs	r0, #0
   195d0:	e784      	b.n	194dc <blst_pairing_merge+0x38>

000195d2 <POINTonE2_sign>:
   195d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   195d6:	b0cb      	sub	sp, #300	; 0x12c
   195d8:	4607      	mov	r7, r0
   195da:	f7ff fd13 	bl	19004 <POINTonE2_mult_gls>
   195de:	f107 08c0 	add.w	r8, r7, #192	; 0xc0
   195e2:	f107 04bc 	add.w	r4, r7, #188	; 0xbc
   195e6:	f507 718e 	add.w	r1, r7, #284	; 0x11c
   195ea:	4623      	mov	r3, r4
   195ec:	2600      	movs	r6, #0
   195ee:	f853 2f04 	ldr.w	r2, [r3, #4]!
   195f2:	4316      	orrs	r6, r2
   195f4:	428b      	cmp	r3, r1
   195f6:	d1fa      	bne.n	195ee <POINTonE2_sign+0x1c>
   195f8:	4d3b      	ldr	r5, [pc, #236]	; (196e8 <POINTonE2_sign+0x116>)
   195fa:	f04f 0a0c 	mov.w	sl, #12
   195fe:	f8cd a004 	str.w	sl, [sp, #4]
   19602:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 196ec <POINTonE2_sign+0x11a>
   19606:	f8cd 9000 	str.w	r9, [sp]
   1960a:	462b      	mov	r3, r5
   1960c:	4642      	mov	r2, r8
   1960e:	4641      	mov	r1, r8
   19610:	a802      	add	r0, sp, #8
   19612:	f7f7 f9dd 	bl	109d0 <mul_mont_n>
   19616:	f107 0bf0 	add.w	fp, r7, #240	; 0xf0
   1961a:	f8cd a004 	str.w	sl, [sp, #4]
   1961e:	f8cd 9000 	str.w	r9, [sp]
   19622:	462b      	mov	r3, r5
   19624:	465a      	mov	r2, fp
   19626:	4659      	mov	r1, fp
   19628:	a80e      	add	r0, sp, #56	; 0x38
   1962a:	f7f7 f9d1 	bl	109d0 <mul_mont_n>
   1962e:	f8cd a000 	str.w	sl, [sp]
   19632:	462b      	mov	r3, r5
   19634:	aa0e      	add	r2, sp, #56	; 0x38
   19636:	a902      	add	r1, sp, #8
   19638:	4608      	mov	r0, r1
   1963a:	f7f7 fb71 	bl	10d20 <add_mod_n>
   1963e:	a902      	add	r1, sp, #8
   19640:	a80e      	add	r0, sp, #56	; 0x38
   19642:	f7fb fd55 	bl	150f0 <flt_reciprocal_fp>
   19646:	f8cd a004 	str.w	sl, [sp, #4]
   1964a:	f8cd 9000 	str.w	r9, [sp]
   1964e:	462b      	mov	r3, r5
   19650:	aa0e      	add	r2, sp, #56	; 0x38
   19652:	4641      	mov	r1, r8
   19654:	a832      	add	r0, sp, #200	; 0xc8
   19656:	f7f7 f9bb 	bl	109d0 <mul_mont_n>
   1965a:	f8cd a004 	str.w	sl, [sp, #4]
   1965e:	f8cd 9000 	str.w	r9, [sp]
   19662:	462b      	mov	r3, r5
   19664:	aa0e      	add	r2, sp, #56	; 0x38
   19666:	4659      	mov	r1, fp
   19668:	a83e      	add	r0, sp, #248	; 0xf8
   1966a:	f7f7 f9b1 	bl	109d0 <mul_mont_n>
   1966e:	f8cd a000 	str.w	sl, [sp]
   19672:	462b      	mov	r3, r5
   19674:	2201      	movs	r2, #1
   19676:	a93e      	add	r1, sp, #248	; 0xf8
   19678:	4608      	mov	r0, r1
   1967a:	f7f8 f9e5 	bl	11a48 <cneg_mod_n>
   1967e:	464b      	mov	r3, r9
   19680:	462a      	mov	r2, r5
   19682:	a932      	add	r1, sp, #200	; 0xc8
   19684:	a81a      	add	r0, sp, #104	; 0x68
   19686:	f7fe f8f3 	bl	17870 <sqr_mont_384x>
   1968a:	f8cd 9000 	str.w	r9, [sp]
   1968e:	462b      	mov	r3, r5
   19690:	aa1a      	add	r2, sp, #104	; 0x68
   19692:	4639      	mov	r1, r7
   19694:	4638      	mov	r0, r7
   19696:	f7fa fe5d 	bl	14354 <mul_mont_384x>
   1969a:	f8cd 9000 	str.w	r9, [sp]
   1969e:	462b      	mov	r3, r5
   196a0:	aa32      	add	r2, sp, #200	; 0xc8
   196a2:	a91a      	add	r1, sp, #104	; 0x68
   196a4:	4608      	mov	r0, r1
   196a6:	f7fa fe55 	bl	14354 <mul_mont_384x>
   196aa:	f107 0060 	add.w	r0, r7, #96	; 0x60
   196ae:	f8cd 9000 	str.w	r9, [sp]
   196b2:	462b      	mov	r3, r5
   196b4:	aa1a      	add	r2, sp, #104	; 0x68
   196b6:	4601      	mov	r1, r0
   196b8:	f7fa fe4c 	bl	14354 <mul_mont_384x>
   196bc:	1e73      	subs	r3, r6, #1
   196be:	ea23 0606 	bic.w	r6, r3, r6
   196c2:	17f6      	asrs	r6, r6, #31
   196c4:	f505 6164 	add.w	r1, r5, #3648	; 0xe40
   196c8:	f505 656a 	add.w	r5, r5, #3744	; 0xea0
   196cc:	f851 0b04 	ldr.w	r0, [r1], #4
   196d0:	f854 2f04 	ldr.w	r2, [r4, #4]!
   196d4:	4042      	eors	r2, r0
   196d6:	4032      	ands	r2, r6
   196d8:	4042      	eors	r2, r0
   196da:	6022      	str	r2, [r4, #0]
   196dc:	42a9      	cmp	r1, r5
   196de:	d1f5      	bne.n	196cc <POINTonE2_sign+0xfa>
   196e0:	b04b      	add	sp, #300	; 0x12c
   196e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   196e6:	bf00      	nop
   196e8:	00028738 	.word	0x00028738
   196ec:	fffcfffd 	.word	0xfffcfffd

000196f0 <blst_sk_to_pk_in_g2>:
   196f0:	b508      	push	{r3, lr}
   196f2:	460a      	mov	r2, r1
   196f4:	4901      	ldr	r1, [pc, #4]	; (196fc <blst_sk_to_pk_in_g2+0xc>)
   196f6:	f7ff ff6c 	bl	195d2 <POINTonE2_sign>
   196fa:	bd08      	pop	{r3, pc}
   196fc:	000294b8 	.word	0x000294b8

00019700 <blst_sign_pk_in_g1>:
   19700:	b508      	push	{r3, lr}
   19702:	f7ff ff66 	bl	195d2 <POINTonE2_sign>
   19706:	bd08      	pop	{r3, pc}

00019708 <blst_sk_to_pk2_in_g2>:
   19708:	b530      	push	{r4, r5, lr}
   1970a:	b0c9      	sub	sp, #292	; 0x124
   1970c:	4605      	mov	r5, r0
   1970e:	460c      	mov	r4, r1
   19710:	4914      	ldr	r1, [pc, #80]	; (19764 <blst_sk_to_pk2_in_g2+0x5c>)
   19712:	4668      	mov	r0, sp
   19714:	f7ff ff5d 	bl	195d2 <POINTonE2_sign>
   19718:	b14c      	cbz	r4, 1972e <blst_sk_to_pk2_in_g2+0x26>
   1971a:	f1ad 0304 	sub.w	r3, sp, #4
   1971e:	1f21      	subs	r1, r4, #4
   19720:	a82f      	add	r0, sp, #188	; 0xbc
   19722:	f853 2f04 	ldr.w	r2, [r3, #4]!
   19726:	f841 2f04 	str.w	r2, [r1, #4]!
   1972a:	4283      	cmp	r3, r0
   1972c:	d1f9      	bne.n	19722 <blst_sk_to_pk2_in_g2+0x1a>
   1972e:	b1bd      	cbz	r5, 19760 <blst_sk_to_pk2_in_g2+0x58>
   19730:	4669      	mov	r1, sp
   19732:	4628      	mov	r0, r5
   19734:	f7fe f954 	bl	179e0 <POINTonE2_Serialize_BE>
   19738:	0100      	lsls	r0, r0, #4
   1973a:	f000 0220 	and.w	r2, r0, #32
   1973e:	7828      	ldrb	r0, [r5, #0]
   19740:	4310      	orrs	r0, r2
   19742:	ab2f      	add	r3, sp, #188	; 0xbc
   19744:	ac47      	add	r4, sp, #284	; 0x11c
   19746:	2200      	movs	r2, #0
   19748:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1974c:	430a      	orrs	r2, r1
   1974e:	42a3      	cmp	r3, r4
   19750:	d1fa      	bne.n	19748 <blst_sk_to_pk2_in_g2+0x40>
   19752:	1e53      	subs	r3, r2, #1
   19754:	ea23 0202 	bic.w	r2, r3, r2
   19758:	0fd2      	lsrs	r2, r2, #31
   1975a:	ea40 1282 	orr.w	r2, r0, r2, lsl #6
   1975e:	702a      	strb	r2, [r5, #0]
   19760:	b049      	add	sp, #292	; 0x124
   19762:	bd30      	pop	{r4, r5, pc}
   19764:	000294b8 	.word	0x000294b8

00019768 <blst_sign_pk2_in_g1>:
   19768:	b530      	push	{r4, r5, lr}
   1976a:	b0c9      	sub	sp, #292	; 0x124
   1976c:	4605      	mov	r5, r0
   1976e:	460c      	mov	r4, r1
   19770:	4611      	mov	r1, r2
   19772:	461a      	mov	r2, r3
   19774:	4668      	mov	r0, sp
   19776:	f7ff ff2c 	bl	195d2 <POINTonE2_sign>
   1977a:	b14c      	cbz	r4, 19790 <blst_sign_pk2_in_g1+0x28>
   1977c:	f1ad 0304 	sub.w	r3, sp, #4
   19780:	1f21      	subs	r1, r4, #4
   19782:	a82f      	add	r0, sp, #188	; 0xbc
   19784:	f853 2f04 	ldr.w	r2, [r3, #4]!
   19788:	f841 2f04 	str.w	r2, [r1, #4]!
   1978c:	4283      	cmp	r3, r0
   1978e:	d1f9      	bne.n	19784 <blst_sign_pk2_in_g1+0x1c>
   19790:	b1bd      	cbz	r5, 197c2 <blst_sign_pk2_in_g1+0x5a>
   19792:	4669      	mov	r1, sp
   19794:	4628      	mov	r0, r5
   19796:	f7fe f923 	bl	179e0 <POINTonE2_Serialize_BE>
   1979a:	0100      	lsls	r0, r0, #4
   1979c:	f000 0220 	and.w	r2, r0, #32
   197a0:	7828      	ldrb	r0, [r5, #0]
   197a2:	4310      	orrs	r0, r2
   197a4:	ab2f      	add	r3, sp, #188	; 0xbc
   197a6:	ac47      	add	r4, sp, #284	; 0x11c
   197a8:	2200      	movs	r2, #0
   197aa:	f853 1f04 	ldr.w	r1, [r3, #4]!
   197ae:	430a      	orrs	r2, r1
   197b0:	42a3      	cmp	r3, r4
   197b2:	d1fa      	bne.n	197aa <blst_sign_pk2_in_g1+0x42>
   197b4:	1e53      	subs	r3, r2, #1
   197b6:	ea23 0202 	bic.w	r2, r3, r2
   197ba:	0fd2      	lsrs	r2, r2, #31
   197bc:	ea40 1282 	orr.w	r2, r0, r2, lsl #6
   197c0:	702a      	strb	r2, [r5, #0]
   197c2:	b049      	add	sp, #292	; 0x124
   197c4:	bd30      	pop	{r4, r5, pc}

000197c6 <map_to_isogenous_E2>:
   197c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   197ca:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
   197ce:	4606      	mov	r6, r0
   197d0:	9103      	str	r1, [sp, #12]
   197d2:	4dc5      	ldr	r5, [pc, #788]	; (19ae8 <map_to_isogenous_E2+0x322>)
   197d4:	4cc5      	ldr	r4, [pc, #788]	; (19aec <map_to_isogenous_E2+0x326>)
   197d6:	462b      	mov	r3, r5
   197d8:	4622      	mov	r2, r4
   197da:	a8e8      	add	r0, sp, #928	; 0x3a0
   197dc:	f7fe f848 	bl	17870 <sqr_mont_384x>
   197e0:	f8df 830c 	ldr.w	r8, [pc, #780]	; 19af0 <map_to_isogenous_E2+0x32a>
   197e4:	9500      	str	r5, [sp, #0]
   197e6:	4623      	mov	r3, r4
   197e8:	aae8      	add	r2, sp, #928	; 0x3a0
   197ea:	f508 61bc 	add.w	r1, r8, #1504	; 0x5e0
   197ee:	a8a0      	add	r0, sp, #640	; 0x280
   197f0:	f7fa fdb0 	bl	14354 <mul_mont_384x>
   197f4:	462b      	mov	r3, r5
   197f6:	4622      	mov	r2, r4
   197f8:	a9a0      	add	r1, sp, #640	; 0x280
   197fa:	a8d0      	add	r0, sp, #832	; 0x340
   197fc:	f7fe f838 	bl	17870 <sqr_mont_384x>
   19800:	270c      	movs	r7, #12
   19802:	9700      	str	r7, [sp, #0]
   19804:	4623      	mov	r3, r4
   19806:	aaa0      	add	r2, sp, #640	; 0x280
   19808:	a9d0      	add	r1, sp, #832	; 0x340
   1980a:	4608      	mov	r0, r1
   1980c:	f7f7 fa88 	bl	10d20 <add_mod_n>
   19810:	9700      	str	r7, [sp, #0]
   19812:	4623      	mov	r3, r4
   19814:	aaac      	add	r2, sp, #688	; 0x2b0
   19816:	a9dc      	add	r1, sp, #880	; 0x370
   19818:	4608      	mov	r0, r1
   1981a:	f7f7 fa81 	bl	10d20 <add_mod_n>
   1981e:	9700      	str	r7, [sp, #0]
   19820:	4623      	mov	r3, r4
   19822:	f104 0290 	add.w	r2, r4, #144	; 0x90
   19826:	a9d0      	add	r1, sp, #832	; 0x340
   19828:	4630      	mov	r0, r6
   1982a:	f7f7 fa79 	bl	10d20 <add_mod_n>
   1982e:	9700      	str	r7, [sp, #0]
   19830:	4623      	mov	r3, r4
   19832:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
   19836:	a9dc      	add	r1, sp, #880	; 0x370
   19838:	f106 0030 	add.w	r0, r6, #48	; 0x30
   1983c:	f7f7 fa70 	bl	10d20 <add_mod_n>
   19840:	9500      	str	r5, [sp, #0]
   19842:	4623      	mov	r3, r4
   19844:	f508 62c8 	add.w	r2, r8, #1600	; 0x640
   19848:	4631      	mov	r1, r6
   1984a:	4630      	mov	r0, r6
   1984c:	f7fa fd82 	bl	14354 <mul_mont_384x>
   19850:	9500      	str	r5, [sp, #0]
   19852:	4623      	mov	r3, r4
   19854:	4632      	mov	r2, r6
   19856:	a9a0      	add	r1, sp, #640	; 0x280
   19858:	4608      	mov	r0, r1
   1985a:	f7fa fd7b 	bl	14354 <mul_mont_384x>
   1985e:	f106 09c0 	add.w	r9, r6, #192	; 0xc0
   19862:	9500      	str	r5, [sp, #0]
   19864:	4623      	mov	r3, r4
   19866:	aad0      	add	r2, sp, #832	; 0x340
   19868:	f508 61d4 	add.w	r1, r8, #1696	; 0x6a0
   1986c:	4648      	mov	r0, r9
   1986e:	f7fa fd71 	bl	14354 <mul_mont_384x>
   19872:	f106 02bc 	add.w	r2, r6, #188	; 0xbc
   19876:	f506 748e 	add.w	r4, r6, #284	; 0x11c
   1987a:	4613      	mov	r3, r2
   1987c:	2100      	movs	r1, #0
   1987e:	f853 0f04 	ldr.w	r0, [r3, #4]!
   19882:	4301      	orrs	r1, r0
   19884:	42a3      	cmp	r3, r4
   19886:	d1fa      	bne.n	1987e <map_to_isogenous_E2+0xb8>
   19888:	1e4c      	subs	r4, r1, #1
   1988a:	ea24 0101 	bic.w	r1, r4, r1
   1988e:	17cc      	asrs	r4, r1, #31
   19890:	4d97      	ldr	r5, [pc, #604]	; (19af0 <map_to_isogenous_E2+0x32a>)
   19892:	f205 61fc 	addw	r1, r5, #1788	; 0x6fc
   19896:	f205 755c 	addw	r5, r5, #1884	; 0x75c
   1989a:	f852 0f04 	ldr.w	r0, [r2, #4]!
   1989e:	f851 3f04 	ldr.w	r3, [r1, #4]!
   198a2:	4043      	eors	r3, r0
   198a4:	4023      	ands	r3, r4
   198a6:	4043      	eors	r3, r0
   198a8:	6013      	str	r3, [r2, #0]
   198aa:	42a9      	cmp	r1, r5
   198ac:	d1f5      	bne.n	1989a <map_to_isogenous_E2+0xd4>
   198ae:	4c8e      	ldr	r4, [pc, #568]	; (19ae8 <map_to_isogenous_E2+0x322>)
   198b0:	4d8e      	ldr	r5, [pc, #568]	; (19aec <map_to_isogenous_E2+0x326>)
   198b2:	4623      	mov	r3, r4
   198b4:	462a      	mov	r2, r5
   198b6:	4649      	mov	r1, r9
   198b8:	a8d0      	add	r0, sp, #832	; 0x340
   198ba:	f7fd ffd9 	bl	17870 <sqr_mont_384x>
   198be:	9400      	str	r4, [sp, #0]
   198c0:	462b      	mov	r3, r5
   198c2:	aad0      	add	r2, sp, #832	; 0x340
   198c4:	4649      	mov	r1, r9
   198c6:	a870      	add	r0, sp, #448	; 0x1c0
   198c8:	f7fa fd44 	bl	14354 <mul_mont_384x>
   198cc:	f8df a220 	ldr.w	sl, [pc, #544]	; 19af0 <map_to_isogenous_E2+0x32a>
   198d0:	9400      	str	r4, [sp, #0]
   198d2:	462b      	mov	r3, r5
   198d4:	aad0      	add	r2, sp, #832	; 0x340
   198d6:	f50a 61ec 	add.w	r1, sl, #1888	; 0x760
   198da:	4610      	mov	r0, r2
   198dc:	f7fa fd3a 	bl	14354 <mul_mont_384x>
   198e0:	4623      	mov	r3, r4
   198e2:	462a      	mov	r2, r5
   198e4:	4631      	mov	r1, r6
   198e6:	a888      	add	r0, sp, #544	; 0x220
   198e8:	f7fd ffc2 	bl	17870 <sqr_mont_384x>
   198ec:	f04f 080c 	mov.w	r8, #12
   198f0:	f8cd 8000 	str.w	r8, [sp]
   198f4:	462b      	mov	r3, r5
   198f6:	aad0      	add	r2, sp, #832	; 0x340
   198f8:	a988      	add	r1, sp, #544	; 0x220
   198fa:	4608      	mov	r0, r1
   198fc:	f7f7 fa10 	bl	10d20 <add_mod_n>
   19900:	f8cd 8000 	str.w	r8, [sp]
   19904:	462b      	mov	r3, r5
   19906:	aadc      	add	r2, sp, #880	; 0x370
   19908:	a994      	add	r1, sp, #592	; 0x250
   1990a:	4608      	mov	r0, r1
   1990c:	f7f7 fa08 	bl	10d20 <add_mod_n>
   19910:	9400      	str	r4, [sp, #0]
   19912:	462b      	mov	r3, r5
   19914:	4632      	mov	r2, r6
   19916:	a988      	add	r1, sp, #544	; 0x220
   19918:	4608      	mov	r0, r1
   1991a:	f7fa fd1b 	bl	14354 <mul_mont_384x>
   1991e:	9400      	str	r4, [sp, #0]
   19920:	462b      	mov	r3, r5
   19922:	aa70      	add	r2, sp, #448	; 0x1c0
   19924:	f50a 61c8 	add.w	r1, sl, #1600	; 0x640
   19928:	a8d0      	add	r0, sp, #832	; 0x340
   1992a:	f7fa fd13 	bl	14354 <mul_mont_384x>
   1992e:	f8cd 8000 	str.w	r8, [sp]
   19932:	462b      	mov	r3, r5
   19934:	aad0      	add	r2, sp, #832	; 0x340
   19936:	a988      	add	r1, sp, #544	; 0x220
   19938:	4608      	mov	r0, r1
   1993a:	f7f7 f9f1 	bl	10d20 <add_mod_n>
   1993e:	f8cd 8000 	str.w	r8, [sp]
   19942:	462b      	mov	r3, r5
   19944:	aadc      	add	r2, sp, #880	; 0x370
   19946:	a994      	add	r1, sp, #592	; 0x250
   19948:	4608      	mov	r0, r1
   1994a:	f7f7 f9e9 	bl	10d20 <add_mod_n>
   1994e:	4623      	mov	r3, r4
   19950:	462a      	mov	r2, r5
   19952:	a970      	add	r1, sp, #448	; 0x1c0
   19954:	a8b8      	add	r0, sp, #736	; 0x2e0
   19956:	f7fd ff8b 	bl	17870 <sqr_mont_384x>
   1995a:	9400      	str	r4, [sp, #0]
   1995c:	462b      	mov	r3, r5
   1995e:	aa70      	add	r2, sp, #448	; 0x1c0
   19960:	a988      	add	r1, sp, #544	; 0x220
   19962:	a8d0      	add	r0, sp, #832	; 0x340
   19964:	f7fa fcf6 	bl	14354 <mul_mont_384x>
   19968:	9400      	str	r4, [sp, #0]
   1996a:	462b      	mov	r3, r5
   1996c:	aad0      	add	r2, sp, #832	; 0x340
   1996e:	a9b8      	add	r1, sp, #736	; 0x2e0
   19970:	4608      	mov	r0, r1
   19972:	f7fa fcef 	bl	14354 <mul_mont_384x>
   19976:	f106 0760 	add.w	r7, r6, #96	; 0x60
   1997a:	f8cd 8004 	str.w	r8, [sp, #4]
   1997e:	9400      	str	r4, [sp, #0]
   19980:	462b      	mov	r3, r5
   19982:	aab8      	add	r2, sp, #736	; 0x2e0
   19984:	4611      	mov	r1, r2
   19986:	a804      	add	r0, sp, #16
   19988:	f7f7 f822 	bl	109d0 <mul_mont_n>
   1998c:	f8cd 8004 	str.w	r8, [sp, #4]
   19990:	9400      	str	r4, [sp, #0]
   19992:	462b      	mov	r3, r5
   19994:	aac4      	add	r2, sp, #784	; 0x310
   19996:	4611      	mov	r1, r2
   19998:	a810      	add	r0, sp, #64	; 0x40
   1999a:	f7f7 f819 	bl	109d0 <mul_mont_n>
   1999e:	f8cd 8000 	str.w	r8, [sp]
   199a2:	462b      	mov	r3, r5
   199a4:	aa10      	add	r2, sp, #64	; 0x40
   199a6:	a904      	add	r1, sp, #16
   199a8:	4608      	mov	r0, r1
   199aa:	f7f7 f9b9 	bl	10d20 <add_mod_n>
   199ae:	a904      	add	r1, sp, #16
   199b0:	a81c      	add	r0, sp, #112	; 0x70
   199b2:	f7fc fce9 	bl	16388 <recip_sqrt_fp>
   199b6:	4683      	mov	fp, r0
   199b8:	9400      	str	r4, [sp, #0]
   199ba:	462b      	mov	r3, r5
   199bc:	f50a 62f8 	add.w	r2, sl, #1984	; 0x7c0
   199c0:	a9b8      	add	r1, sp, #736	; 0x2e0
   199c2:	a840      	add	r0, sp, #256	; 0x100
   199c4:	f7fa fcc6 	bl	14354 <mul_mont_384x>
   199c8:	f8cd 8004 	str.w	r8, [sp, #4]
   199cc:	9400      	str	r4, [sp, #0]
   199ce:	462b      	mov	r3, r5
   199d0:	f50a 6202 	add.w	r2, sl, #2080	; 0x820
   199d4:	a904      	add	r1, sp, #16
   199d6:	a828      	add	r0, sp, #160	; 0xa0
   199d8:	f7f6 fffa 	bl	109d0 <mul_mont_n>
   199dc:	f8cd 8004 	str.w	r8, [sp, #4]
   199e0:	9400      	str	r4, [sp, #0]
   199e2:	462b      	mov	r3, r5
   199e4:	f50a 6205 	add.w	r2, sl, #2128	; 0x850
   199e8:	a91c      	add	r1, sp, #112	; 0x70
   199ea:	a834      	add	r0, sp, #208	; 0xd0
   199ec:	f7f6 fff0 	bl	109d0 <mul_mont_n>
   199f0:	f1cb 0400 	rsb	r4, fp, #0
   199f4:	ad04      	add	r5, sp, #16
   199f6:	a828      	add	r0, sp, #160	; 0xa0
   199f8:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   199fc:	462a      	mov	r2, r5
   199fe:	6813      	ldr	r3, [r2, #0]
   19a00:	f850 1b04 	ldr.w	r1, [r0], #4
   19a04:	404b      	eors	r3, r1
   19a06:	4023      	ands	r3, r4
   19a08:	404b      	eors	r3, r1
   19a0a:	f842 3b04 	str.w	r3, [r2], #4
   19a0e:	4542      	cmp	r2, r8
   19a10:	d1f5      	bne.n	199fe <map_to_isogenous_E2+0x238>
   19a12:	aa1c      	add	r2, sp, #112	; 0x70
   19a14:	a934      	add	r1, sp, #208	; 0xd0
   19a16:	a828      	add	r0, sp, #160	; 0xa0
   19a18:	468c      	mov	ip, r1
   19a1a:	6813      	ldr	r3, [r2, #0]
   19a1c:	f85c 1b04 	ldr.w	r1, [ip], #4
   19a20:	404b      	eors	r3, r1
   19a22:	4023      	ands	r3, r4
   19a24:	404b      	eors	r3, r1
   19a26:	f842 3b04 	str.w	r3, [r2], #4
   19a2a:	4282      	cmp	r2, r0
   19a2c:	d1f5      	bne.n	19a1a <map_to_isogenous_E2+0x254>
   19a2e:	a9b7      	add	r1, sp, #732	; 0x2dc
   19a30:	aa3f      	add	r2, sp, #252	; 0xfc
   19a32:	a8cf      	add	r0, sp, #828	; 0x33c
   19a34:	46a4      	mov	ip, r4
   19a36:	f852 4f04 	ldr.w	r4, [r2, #4]!
   19a3a:	f851 3f04 	ldr.w	r3, [r1, #4]!
   19a3e:	4063      	eors	r3, r4
   19a40:	ea03 030c 	and.w	r3, r3, ip
   19a44:	4063      	eors	r3, r4
   19a46:	6013      	str	r3, [r2, #0]
   19a48:	4281      	cmp	r1, r0
   19a4a:	d1f4      	bne.n	19a36 <map_to_isogenous_E2+0x270>
   19a4c:	4664      	mov	r4, ip
   19a4e:	f8df a09c 	ldr.w	sl, [pc, #156]	; 19aec <map_to_isogenous_E2+0x326>
   19a52:	f04f 0b0c 	mov.w	fp, #12
   19a56:	f8cd b004 	str.w	fp, [sp, #4]
   19a5a:	4b23      	ldr	r3, [pc, #140]	; (19ae8 <map_to_isogenous_E2+0x322>)
   19a5c:	9300      	str	r3, [sp, #0]
   19a5e:	4653      	mov	r3, sl
   19a60:	aa1c      	add	r2, sp, #112	; 0x70
   19a62:	a904      	add	r1, sp, #16
   19a64:	4608      	mov	r0, r1
   19a66:	f7f6 ffb3 	bl	109d0 <mul_mont_n>
   19a6a:	f8cd b000 	str.w	fp, [sp]
   19a6e:	4653      	mov	r3, sl
   19a70:	aa04      	add	r2, sp, #16
   19a72:	a940      	add	r1, sp, #256	; 0x100
   19a74:	a810      	add	r0, sp, #64	; 0x40
   19a76:	f7f6 fdfd 	bl	10674 <sub_mod_n>
   19a7a:	f8cd b000 	str.w	fp, [sp]
   19a7e:	4653      	mov	r3, sl
   19a80:	aa04      	add	r2, sp, #16
   19a82:	a940      	add	r1, sp, #256	; 0x100
   19a84:	4610      	mov	r0, r2
   19a86:	f7f7 f94b 	bl	10d20 <add_mod_n>
   19a8a:	462b      	mov	r3, r5
   19a8c:	2200      	movs	r2, #0
   19a8e:	f853 1b04 	ldr.w	r1, [r3], #4
   19a92:	430a      	orrs	r2, r1
   19a94:	4543      	cmp	r3, r8
   19a96:	d1fa      	bne.n	19a8e <map_to_isogenous_E2+0x2c8>
   19a98:	1e50      	subs	r0, r2, #1
   19a9a:	ea20 0202 	bic.w	r2, r0, r2
   19a9e:	17d0      	asrs	r0, r2, #31
   19aa0:	aa10      	add	r2, sp, #64	; 0x40
   19aa2:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   19aa6:	f852 3b04 	ldr.w	r3, [r2], #4
   19aaa:	6829      	ldr	r1, [r5, #0]
   19aac:	404b      	eors	r3, r1
   19aae:	4003      	ands	r3, r0
   19ab0:	404b      	eors	r3, r1
   19ab2:	f845 3b04 	str.w	r3, [r5], #4
   19ab6:	4562      	cmp	r2, ip
   19ab8:	d1f5      	bne.n	19aa6 <map_to_isogenous_E2+0x2e0>
   19aba:	f8df 8030 	ldr.w	r8, [pc, #48]	; 19aec <map_to_isogenous_E2+0x326>
   19abe:	f04f 0b0c 	mov.w	fp, #12
   19ac2:	f8cd b000 	str.w	fp, [sp]
   19ac6:	4643      	mov	r3, r8
   19ac8:	2201      	movs	r2, #1
   19aca:	a904      	add	r1, sp, #16
   19acc:	4608      	mov	r0, r1
   19ace:	f7f6 fe39 	bl	10744 <rshift_mod_n>
   19ad2:	a904      	add	r1, sp, #16
   19ad4:	4638      	mov	r0, r7
   19ad6:	f7fc fc57 	bl	16388 <recip_sqrt_fp>
   19ada:	f106 0590 	add.w	r5, r6, #144	; 0x90
   19ade:	f8cd b000 	str.w	fp, [sp]
   19ae2:	4643      	mov	r3, r8
   19ae4:	2201      	movs	r2, #1
   19ae6:	e005      	b.n	19af4 <map_to_isogenous_E2+0x32e>
   19ae8:	fffcfffd 	.word	0xfffcfffd
   19aec:	00028738 	.word	0x00028738
   19af0:	00029830 	.word	0x00029830
   19af4:	a94c      	add	r1, sp, #304	; 0x130
   19af6:	4628      	mov	r0, r5
   19af8:	f7f6 fe24 	bl	10744 <rshift_mod_n>
   19afc:	f8cd b004 	str.w	fp, [sp, #4]
   19b00:	f8df a248 	ldr.w	sl, [pc, #584]	; 19d4c <map_to_isogenous_E2+0x586>
   19b04:	f8cd a000 	str.w	sl, [sp]
   19b08:	4643      	mov	r3, r8
   19b0a:	463a      	mov	r2, r7
   19b0c:	4629      	mov	r1, r5
   19b0e:	4628      	mov	r0, r5
   19b10:	f7f6 ff5e 	bl	109d0 <mul_mont_n>
   19b14:	f8cd b004 	str.w	fp, [sp, #4]
   19b18:	f8cd a000 	str.w	sl, [sp]
   19b1c:	4643      	mov	r3, r8
   19b1e:	aa04      	add	r2, sp, #16
   19b20:	4639      	mov	r1, r7
   19b22:	4638      	mov	r0, r7
   19b24:	f7f6 ff54 	bl	109d0 <mul_mont_n>
   19b28:	ab40      	add	r3, sp, #256	; 0x100
   19b2a:	463a      	mov	r2, r7
   19b2c:	4639      	mov	r1, r7
   19b2e:	4638      	mov	r0, r7
   19b30:	f7fe f9d2 	bl	17ed8 <sqrt_align_fp2>
   19b34:	f8cd b004 	str.w	fp, [sp, #4]
   19b38:	f8cd a000 	str.w	sl, [sp]
   19b3c:	4643      	mov	r3, r8
   19b3e:	aa1c      	add	r2, sp, #112	; 0x70
   19b40:	4639      	mov	r1, r7
   19b42:	4638      	mov	r0, r7
   19b44:	f7f6 ff44 	bl	109d0 <mul_mont_n>
   19b48:	f8cd b004 	str.w	fp, [sp, #4]
   19b4c:	f8cd a000 	str.w	sl, [sp]
   19b50:	4643      	mov	r3, r8
   19b52:	aa1c      	add	r2, sp, #112	; 0x70
   19b54:	4629      	mov	r1, r5
   19b56:	4628      	mov	r0, r5
   19b58:	f7f6 ff3a 	bl	109d0 <mul_mont_n>
   19b5c:	f8cd b000 	str.w	fp, [sp]
   19b60:	4643      	mov	r3, r8
   19b62:	2201      	movs	r2, #1
   19b64:	4629      	mov	r1, r5
   19b66:	4628      	mov	r0, r5
   19b68:	f7f7 ff6e 	bl	11a48 <cneg_mod_n>
   19b6c:	f8cd a000 	str.w	sl, [sp]
   19b70:	4643      	mov	r3, r8
   19b72:	aad0      	add	r2, sp, #832	; 0x340
   19b74:	4639      	mov	r1, r7
   19b76:	4638      	mov	r0, r7
   19b78:	f7fa fbec 	bl	14354 <mul_mont_384x>
   19b7c:	f8cd a000 	str.w	sl, [sp]
   19b80:	4643      	mov	r3, r8
   19b82:	aae8      	add	r2, sp, #928	; 0x3a0
   19b84:	4639      	mov	r1, r7
   19b86:	a858      	add	r0, sp, #352	; 0x160
   19b88:	f7fa fbe4 	bl	14354 <mul_mont_384x>
   19b8c:	f8cd a000 	str.w	sl, [sp]
   19b90:	4643      	mov	r3, r8
   19b92:	9a03      	ldr	r2, [sp, #12]
   19b94:	a958      	add	r1, sp, #352	; 0x160
   19b96:	4608      	mov	r0, r1
   19b98:	f7fa fbdc 	bl	14354 <mul_mont_384x>
   19b9c:	1f31      	subs	r1, r6, #4
   19b9e:	aaa0      	add	r2, sp, #640	; 0x280
   19ba0:	f50d 7c38 	add.w	ip, sp, #736	; 0x2e0
   19ba4:	f852 0b04 	ldr.w	r0, [r2], #4
   19ba8:	f851 3f04 	ldr.w	r3, [r1, #4]!
   19bac:	4043      	eors	r3, r0
   19bae:	4023      	ands	r3, r4
   19bb0:	4043      	eors	r3, r0
   19bb2:	600b      	str	r3, [r1, #0]
   19bb4:	4562      	cmp	r2, ip
   19bb6:	d1f5      	bne.n	19ba4 <map_to_isogenous_E2+0x3de>
   19bb8:	f106 015c 	add.w	r1, r6, #92	; 0x5c
   19bbc:	aa58      	add	r2, sp, #352	; 0x160
   19bbe:	f50d 7ce0 	add.w	ip, sp, #448	; 0x1c0
   19bc2:	f852 0b04 	ldr.w	r0, [r2], #4
   19bc6:	f851 3f04 	ldr.w	r3, [r1, #4]!
   19bca:	4043      	eors	r3, r0
   19bcc:	4023      	ands	r3, r4
   19bce:	4043      	eors	r3, r0
   19bd0:	600b      	str	r3, [r1, #0]
   19bd2:	4562      	cmp	r2, ip
   19bd4:	d1f5      	bne.n	19bc2 <map_to_isogenous_E2+0x3fc>
   19bd6:	f8df 8174 	ldr.w	r8, [pc, #372]	; 19d4c <map_to_isogenous_E2+0x586>
   19bda:	4c5d      	ldr	r4, [pc, #372]	; (19d50 <map_to_isogenous_E2+0x58a>)
   19bdc:	f04f 0a0c 	mov.w	sl, #12
   19be0:	f8cd a000 	str.w	sl, [sp]
   19be4:	4643      	mov	r3, r8
   19be6:	4622      	mov	r2, r4
   19be8:	f8dd b00c 	ldr.w	fp, [sp, #12]
   19bec:	4659      	mov	r1, fp
   19bee:	a840      	add	r0, sp, #256	; 0x100
   19bf0:	f7f7 fa20 	bl	11034 <from_mont_n>
   19bf4:	f8cd a000 	str.w	sl, [sp]
   19bf8:	4643      	mov	r3, r8
   19bfa:	4622      	mov	r2, r4
   19bfc:	4659      	mov	r1, fp
   19bfe:	3130      	adds	r1, #48	; 0x30
   19c00:	a84c      	add	r0, sp, #304	; 0x130
   19c02:	f7f7 fa17 	bl	11034 <from_mont_n>
   19c06:	4652      	mov	r2, sl
   19c08:	4621      	mov	r1, r4
   19c0a:	a840      	add	r0, sp, #256	; 0x100
   19c0c:	f7f7 fb27 	bl	1125e <sgn0_pty_mod_n>
   19c10:	4680      	mov	r8, r0
   19c12:	4652      	mov	r2, sl
   19c14:	4621      	mov	r1, r4
   19c16:	a84c      	add	r0, sp, #304	; 0x130
   19c18:	f7f7 fb21 	bl	1125e <sgn0_pty_mod_n>
   19c1c:	aa4b      	add	r2, sp, #300	; 0x12c
   19c1e:	ab40      	add	r3, sp, #256	; 0x100
   19c20:	f50d 7cae 	add.w	ip, sp, #348	; 0x15c
   19c24:	2100      	movs	r1, #0
   19c26:	f852 4f04 	ldr.w	r4, [r2, #4]!
   19c2a:	4321      	orrs	r1, r4
   19c2c:	4562      	cmp	r2, ip
   19c2e:	d1fa      	bne.n	19c26 <map_to_isogenous_E2+0x460>
   19c30:	f101 3cff 	add.w	ip, r1, #4294967295
   19c34:	ea2c 0101 	bic.w	r1, ip, r1
   19c38:	ea4f 7cd1 	mov.w	ip, r1, lsr #31
   19c3c:	ea08 71e1 	and.w	r1, r8, r1, asr #31
   19c40:	f10c 3cff 	add.w	ip, ip, #4294967295
   19c44:	ea0c 0c00 	and.w	ip, ip, r0
   19c48:	ea4c 0c01 	orr.w	ip, ip, r1
   19c4c:	f103 0430 	add.w	r4, r3, #48	; 0x30
   19c50:	2200      	movs	r2, #0
   19c52:	f853 1b04 	ldr.w	r1, [r3], #4
   19c56:	430a      	orrs	r2, r1
   19c58:	42a3      	cmp	r3, r4
   19c5a:	d1fa      	bne.n	19c52 <map_to_isogenous_E2+0x48c>
   19c5c:	1e54      	subs	r4, r2, #1
   19c5e:	ea24 0202 	bic.w	r2, r4, r2
   19c62:	0fd4      	lsrs	r4, r2, #31
   19c64:	ea00 70e2 	and.w	r0, r0, r2, asr #31
   19c68:	3c01      	subs	r4, #1
   19c6a:	ea04 0408 	and.w	r4, r4, r8
   19c6e:	4304      	orrs	r4, r0
   19c70:	f004 0401 	and.w	r4, r4, #1
   19c74:	f00c 0c02 	and.w	ip, ip, #2
   19c78:	ea44 040c 	orr.w	r4, r4, ip
   19c7c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 19d4c <map_to_isogenous_E2+0x586>
   19c80:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 19d50 <map_to_isogenous_E2+0x58a>
   19c84:	f04f 0b0c 	mov.w	fp, #12
   19c88:	f8cd b000 	str.w	fp, [sp]
   19c8c:	4643      	mov	r3, r8
   19c8e:	4652      	mov	r2, sl
   19c90:	4639      	mov	r1, r7
   19c92:	a840      	add	r0, sp, #256	; 0x100
   19c94:	f7f7 f9ce 	bl	11034 <from_mont_n>
   19c98:	f8cd b000 	str.w	fp, [sp]
   19c9c:	4643      	mov	r3, r8
   19c9e:	4652      	mov	r2, sl
   19ca0:	4629      	mov	r1, r5
   19ca2:	a84c      	add	r0, sp, #304	; 0x130
   19ca4:	f7f7 f9c6 	bl	11034 <from_mont_n>
   19ca8:	465a      	mov	r2, fp
   19caa:	4651      	mov	r1, sl
   19cac:	a840      	add	r0, sp, #256	; 0x100
   19cae:	f7f7 fad6 	bl	1125e <sgn0_pty_mod_n>
   19cb2:	4680      	mov	r8, r0
   19cb4:	465a      	mov	r2, fp
   19cb6:	4651      	mov	r1, sl
   19cb8:	a84c      	add	r0, sp, #304	; 0x130
   19cba:	f7f7 fad0 	bl	1125e <sgn0_pty_mod_n>
   19cbe:	4686      	mov	lr, r0
   19cc0:	a94b      	add	r1, sp, #300	; 0x12c
   19cc2:	ab40      	add	r3, sp, #256	; 0x100
   19cc4:	aa57      	add	r2, sp, #348	; 0x15c
   19cc6:	f851 0f04 	ldr.w	r0, [r1, #4]!
   19cca:	428a      	cmp	r2, r1
   19ccc:	d1fb      	bne.n	19cc6 <map_to_isogenous_E2+0x500>
   19cce:	f103 0c30 	add.w	ip, r3, #48	; 0x30
   19cd2:	2200      	movs	r2, #0
   19cd4:	f853 1b04 	ldr.w	r1, [r3], #4
   19cd8:	430a      	orrs	r2, r1
   19cda:	459c      	cmp	ip, r3
   19cdc:	d1fa      	bne.n	19cd4 <map_to_isogenous_E2+0x50e>
   19cde:	1e53      	subs	r3, r2, #1
   19ce0:	ea23 0202 	bic.w	r2, r3, r2
   19ce4:	0fd0      	lsrs	r0, r2, #31
   19ce6:	ea0e 72e2 	and.w	r2, lr, r2, asr #31
   19cea:	3801      	subs	r0, #1
   19cec:	ea00 0808 	and.w	r8, r0, r8
   19cf0:	ea48 0802 	orr.w	r8, r8, r2
   19cf4:	ea84 0408 	eor.w	r4, r4, r8
   19cf8:	f004 0401 	and.w	r4, r4, #1
   19cfc:	f8df 8050 	ldr.w	r8, [pc, #80]	; 19d50 <map_to_isogenous_E2+0x58a>
   19d00:	f04f 0a0c 	mov.w	sl, #12
   19d04:	f8cd a000 	str.w	sl, [sp]
   19d08:	4643      	mov	r3, r8
   19d0a:	4622      	mov	r2, r4
   19d0c:	4639      	mov	r1, r7
   19d0e:	4638      	mov	r0, r7
   19d10:	f7f7 fe9a 	bl	11a48 <cneg_mod_n>
   19d14:	f8cd a000 	str.w	sl, [sp]
   19d18:	4643      	mov	r3, r8
   19d1a:	4622      	mov	r2, r4
   19d1c:	4629      	mov	r1, r5
   19d1e:	4628      	mov	r0, r5
   19d20:	f7f7 fe92 	bl	11a48 <cneg_mod_n>
   19d24:	4c09      	ldr	r4, [pc, #36]	; (19d4c <map_to_isogenous_E2+0x586>)
   19d26:	9400      	str	r4, [sp, #0]
   19d28:	4643      	mov	r3, r8
   19d2a:	464a      	mov	r2, r9
   19d2c:	4631      	mov	r1, r6
   19d2e:	4630      	mov	r0, r6
   19d30:	f7fa fb10 	bl	14354 <mul_mont_384x>
   19d34:	9400      	str	r4, [sp, #0]
   19d36:	4643      	mov	r3, r8
   19d38:	aa70      	add	r2, sp, #448	; 0x1c0
   19d3a:	4639      	mov	r1, r7
   19d3c:	4638      	mov	r0, r7
   19d3e:	f7fa fb09 	bl	14354 <mul_mont_384x>
   19d42:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
   19d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d4a:	bf00      	nop
   19d4c:	fffcfffd 	.word	0xfffcfffd
   19d50:	00028738 	.word	0x00028738

00019d54 <map_to_g2>:
   19d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19d58:	f5ad 6d9d 	sub.w	sp, sp, #1256	; 0x4e8
   19d5c:	4606      	mov	r6, r0
   19d5e:	4614      	mov	r4, r2
   19d60:	a8f2      	add	r0, sp, #968	; 0x3c8
   19d62:	f7ff fd30 	bl	197c6 <map_to_isogenous_E2>
   19d66:	b14c      	cbz	r4, 19d7c <map_to_g2+0x28>
   19d68:	4621      	mov	r1, r4
   19d6a:	4630      	mov	r0, r6
   19d6c:	f7ff fd2b 	bl	197c6 <map_to_isogenous_E2>
   19d70:	4b97      	ldr	r3, [pc, #604]	; (19fd0 <map_to_g2+0x27c>)
   19d72:	4632      	mov	r2, r6
   19d74:	a9f2      	add	r1, sp, #968	; 0x3c8
   19d76:	4608      	mov	r0, r1
   19d78:	f7fe fec0 	bl	18afc <POINTonE2_dadd>
   19d7c:	4d95      	ldr	r5, [pc, #596]	; (19fd4 <map_to_g2+0x280>)
   19d7e:	4c96      	ldr	r4, [pc, #600]	; (19fd8 <map_to_g2+0x284>)
   19d80:	462b      	mov	r3, r5
   19d82:	4622      	mov	r2, r4
   19d84:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
   19d88:	a892      	add	r0, sp, #584	; 0x248
   19d8a:	f7fd fd71 	bl	17870 <sqr_mont_384x>
   19d8e:	462b      	mov	r3, r5
   19d90:	4622      	mov	r2, r4
   19d92:	a992      	add	r1, sp, #584	; 0x248
   19d94:	a87a      	add	r0, sp, #488	; 0x1e8
   19d96:	f7fd fd6b 	bl	17870 <sqr_mont_384x>
   19d9a:	9500      	str	r5, [sp, #0]
   19d9c:	4623      	mov	r3, r4
   19d9e:	aa7a      	add	r2, sp, #488	; 0x1e8
   19da0:	a992      	add	r1, sp, #584	; 0x248
   19da2:	a862      	add	r0, sp, #392	; 0x188
   19da4:	f7fa fad6 	bl	14354 <mul_mont_384x>
   19da8:	f8df 8230 	ldr.w	r8, [pc, #560]	; 19fdc <map_to_g2+0x288>
   19dac:	2303      	movs	r3, #3
   19dae:	aa62      	add	r2, sp, #392	; 0x188
   19db0:	f508 6108 	add.w	r1, r8, #2176	; 0x880
   19db4:	a8aa      	add	r0, sp, #680	; 0x2a8
   19db6:	f7fa fb5b 	bl	14470 <map_fp2_times_Zz>
   19dba:	9500      	str	r5, [sp, #0]
   19dbc:	4623      	mov	r3, r4
   19dbe:	f508 621a 	add.w	r2, r8, #2464	; 0x9a0
   19dc2:	a9f2      	add	r1, sp, #968	; 0x3c8
   19dc4:	a802      	add	r0, sp, #8
   19dc6:	f7fa fac5 	bl	14354 <mul_mont_384x>
   19dca:	270c      	movs	r7, #12
   19dcc:	9700      	str	r7, [sp, #0]
   19dce:	4623      	mov	r3, r4
   19dd0:	aada      	add	r2, sp, #872	; 0x368
   19dd2:	a902      	add	r1, sp, #8
   19dd4:	4608      	mov	r0, r1
   19dd6:	f7f6 ffa3 	bl	10d20 <add_mod_n>
   19dda:	9700      	str	r7, [sp, #0]
   19ddc:	4623      	mov	r3, r4
   19dde:	aae6      	add	r2, sp, #920	; 0x398
   19de0:	a90e      	add	r1, sp, #56	; 0x38
   19de2:	4608      	mov	r0, r1
   19de4:	f7f6 ff9c 	bl	10d20 <add_mod_n>
   19de8:	2302      	movs	r3, #2
   19dea:	aaaa      	add	r2, sp, #680	; 0x2a8
   19dec:	a9f2      	add	r1, sp, #968	; 0x3c8
   19dee:	a802      	add	r0, sp, #8
   19df0:	f7fa fc24 	bl	1463c <map_fp2>
   19df4:	2302      	movs	r3, #2
   19df6:	aa7a      	add	r2, sp, #488	; 0x1e8
   19df8:	f508 6120 	add.w	r1, r8, #2560	; 0xa00
   19dfc:	a8aa      	add	r0, sp, #680	; 0x2a8
   19dfe:	f7fa fb37 	bl	14470 <map_fp2_times_Zz>
   19e02:	9700      	str	r7, [sp, #0]
   19e04:	4623      	mov	r3, r4
   19e06:	aac2      	add	r2, sp, #776	; 0x308
   19e08:	a9f2      	add	r1, sp, #968	; 0x3c8
   19e0a:	a81a      	add	r0, sp, #104	; 0x68
   19e0c:	f7f6 ff88 	bl	10d20 <add_mod_n>
   19e10:	9700      	str	r7, [sp, #0]
   19e12:	4623      	mov	r3, r4
   19e14:	aace      	add	r2, sp, #824	; 0x338
   19e16:	a9fe      	add	r1, sp, #1016	; 0x3f8
   19e18:	a826      	add	r0, sp, #152	; 0x98
   19e1a:	f7f6 ff81 	bl	10d20 <add_mod_n>
   19e1e:	2301      	movs	r3, #1
   19e20:	aaaa      	add	r2, sp, #680	; 0x2a8
   19e22:	a9f2      	add	r1, sp, #968	; 0x3c8
   19e24:	a81a      	add	r0, sp, #104	; 0x68
   19e26:	f7fa fc09 	bl	1463c <map_fp2>
   19e2a:	9500      	str	r5, [sp, #0]
   19e2c:	4623      	mov	r3, r4
   19e2e:	aa92      	add	r2, sp, #584	; 0x248
   19e30:	a91a      	add	r1, sp, #104	; 0x68
   19e32:	4608      	mov	r0, r1
   19e34:	f7fa fa8e 	bl	14354 <mul_mont_384x>
   19e38:	2303      	movs	r3, #3
   19e3a:	aa62      	add	r2, sp, #392	; 0x188
   19e3c:	f508 612c 	add.w	r1, r8, #2752	; 0xac0
   19e40:	a8aa      	add	r0, sp, #680	; 0x2a8
   19e42:	f7fa fb15 	bl	14470 <map_fp2_times_Zz>
   19e46:	9500      	str	r5, [sp, #0]
   19e48:	4623      	mov	r3, r4
   19e4a:	f508 623e 	add.w	r2, r8, #3040	; 0xbe0
   19e4e:	a9f2      	add	r1, sp, #968	; 0x3c8
   19e50:	a832      	add	r0, sp, #200	; 0xc8
   19e52:	f7fa fa7f 	bl	14354 <mul_mont_384x>
   19e56:	9700      	str	r7, [sp, #0]
   19e58:	4623      	mov	r3, r4
   19e5a:	aada      	add	r2, sp, #872	; 0x368
   19e5c:	a932      	add	r1, sp, #200	; 0xc8
   19e5e:	4608      	mov	r0, r1
   19e60:	f7f6 ff5e 	bl	10d20 <add_mod_n>
   19e64:	9700      	str	r7, [sp, #0]
   19e66:	4623      	mov	r3, r4
   19e68:	aae6      	add	r2, sp, #920	; 0x398
   19e6a:	a93e      	add	r1, sp, #248	; 0xf8
   19e6c:	4608      	mov	r0, r1
   19e6e:	f7f6 ff57 	bl	10d20 <add_mod_n>
   19e72:	2302      	movs	r3, #2
   19e74:	aaaa      	add	r2, sp, #680	; 0x2a8
   19e76:	a9f2      	add	r1, sp, #968	; 0x3c8
   19e78:	a832      	add	r0, sp, #200	; 0xc8
   19e7a:	f7fa fbdf 	bl	1463c <map_fp2>
   19e7e:	9500      	str	r5, [sp, #0]
   19e80:	4623      	mov	r3, r4
   19e82:	f50d 6285 	add.w	r2, sp, #1064	; 0x428
   19e86:	a932      	add	r1, sp, #200	; 0xc8
   19e88:	4608      	mov	r0, r1
   19e8a:	f7fa fa63 	bl	14354 <mul_mont_384x>
   19e8e:	2303      	movs	r3, #3
   19e90:	aa62      	add	r2, sp, #392	; 0x188
   19e92:	f508 6144 	add.w	r1, r8, #3136	; 0xc40
   19e96:	a8aa      	add	r0, sp, #680	; 0x2a8
   19e98:	f7fa faea 	bl	14470 <map_fp2_times_Zz>
   19e9c:	9700      	str	r7, [sp, #0]
   19e9e:	4623      	mov	r3, r4
   19ea0:	aada      	add	r2, sp, #872	; 0x368
   19ea2:	a9f2      	add	r1, sp, #968	; 0x3c8
   19ea4:	a84a      	add	r0, sp, #296	; 0x128
   19ea6:	f7f6 ff3b 	bl	10d20 <add_mod_n>
   19eaa:	9700      	str	r7, [sp, #0]
   19eac:	4623      	mov	r3, r4
   19eae:	aae6      	add	r2, sp, #920	; 0x398
   19eb0:	a9fe      	add	r1, sp, #1016	; 0x3f8
   19eb2:	a856      	add	r0, sp, #344	; 0x158
   19eb4:	f7f6 ff34 	bl	10d20 <add_mod_n>
   19eb8:	2302      	movs	r3, #2
   19eba:	aaaa      	add	r2, sp, #680	; 0x2a8
   19ebc:	a9f2      	add	r1, sp, #968	; 0x3c8
   19ebe:	a84a      	add	r0, sp, #296	; 0x128
   19ec0:	f7fa fbbc 	bl	1463c <map_fp2>
   19ec4:	9500      	str	r5, [sp, #0]
   19ec6:	4623      	mov	r3, r4
   19ec8:	f50d 6291 	add.w	r2, sp, #1160	; 0x488
   19ecc:	a992      	add	r1, sp, #584	; 0x248
   19ece:	4608      	mov	r0, r1
   19ed0:	f7fa fa40 	bl	14354 <mul_mont_384x>
   19ed4:	9500      	str	r5, [sp, #0]
   19ed6:	4623      	mov	r3, r4
   19ed8:	aa92      	add	r2, sp, #584	; 0x248
   19eda:	a94a      	add	r1, sp, #296	; 0x128
   19edc:	4608      	mov	r0, r1
   19ede:	f7fa fa39 	bl	14354 <mul_mont_384x>
   19ee2:	9500      	str	r5, [sp, #0]
   19ee4:	4623      	mov	r3, r4
   19ee6:	aa4a      	add	r2, sp, #296	; 0x128
   19ee8:	a91a      	add	r1, sp, #104	; 0x68
   19eea:	f50d 6091 	add.w	r0, sp, #1160	; 0x488
   19eee:	f7fa fa31 	bl	14354 <mul_mont_384x>
   19ef2:	9500      	str	r5, [sp, #0]
   19ef4:	4623      	mov	r3, r4
   19ef6:	aa4a      	add	r2, sp, #296	; 0x128
   19ef8:	a902      	add	r1, sp, #8
   19efa:	a8f2      	add	r0, sp, #968	; 0x3c8
   19efc:	f7fa fa2a 	bl	14354 <mul_mont_384x>
   19f00:	9500      	str	r5, [sp, #0]
   19f02:	4623      	mov	r3, r4
   19f04:	f50d 6291 	add.w	r2, sp, #1160	; 0x488
   19f08:	a9f2      	add	r1, sp, #968	; 0x3c8
   19f0a:	4608      	mov	r0, r1
   19f0c:	f7fa fa22 	bl	14354 <mul_mont_384x>
   19f10:	462b      	mov	r3, r5
   19f12:	4622      	mov	r2, r4
   19f14:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
   19f18:	f50d 6085 	add.w	r0, sp, #1064	; 0x428
   19f1c:	f7fd fca8 	bl	17870 <sqr_mont_384x>
   19f20:	9500      	str	r5, [sp, #0]
   19f22:	4623      	mov	r3, r4
   19f24:	aa1a      	add	r2, sp, #104	; 0x68
   19f26:	f50d 6185 	add.w	r1, sp, #1064	; 0x428
   19f2a:	4608      	mov	r0, r1
   19f2c:	f7fa fa12 	bl	14354 <mul_mont_384x>
   19f30:	9500      	str	r5, [sp, #0]
   19f32:	4623      	mov	r3, r4
   19f34:	aa32      	add	r2, sp, #200	; 0xc8
   19f36:	f50d 6185 	add.w	r1, sp, #1064	; 0x428
   19f3a:	4608      	mov	r0, r1
   19f3c:	f7fa fa0a 	bl	14354 <mul_mont_384x>
   19f40:	a9f2      	add	r1, sp, #968	; 0x3c8
   19f42:	4630      	mov	r0, r6
   19f44:	f7fe fcd2 	bl	188ec <POINTonE2_double>
   19f48:	4631      	mov	r1, r6
   19f4a:	4630      	mov	r0, r6
   19f4c:	f7fa fa50 	bl	143f0 <psi>
   19f50:	4631      	mov	r1, r6
   19f52:	4630      	mov	r0, r6
   19f54:	f7fa fa4c 	bl	143f0 <psi>
   19f58:	abf1      	add	r3, sp, #964	; 0x3c4
   19f5a:	aa61      	add	r2, sp, #388	; 0x184
   19f5c:	f20d 41e4 	addw	r1, sp, #1252	; 0x4e4
   19f60:	f853 4f04 	ldr.w	r4, [r3, #4]!
   19f64:	f842 4f04 	str.w	r4, [r2, #4]!
   19f68:	428b      	cmp	r3, r1
   19f6a:	d1f9      	bne.n	19f60 <map_to_g2+0x20c>
   19f6c:	2101      	movs	r1, #1
   19f6e:	a862      	add	r0, sp, #392	; 0x188
   19f70:	f7f7 fe34 	bl	11bdc <POINTonE2_cneg>
   19f74:	a962      	add	r1, sp, #392	; 0x188
   19f76:	a8aa      	add	r0, sp, #680	; 0x2a8
   19f78:	f7fa fa3a 	bl	143f0 <psi>
   19f7c:	2300      	movs	r3, #0
   19f7e:	aa62      	add	r2, sp, #392	; 0x188
   19f80:	4631      	mov	r1, r6
   19f82:	4630      	mov	r0, r6
   19f84:	f7fe fdba 	bl	18afc <POINTonE2_dadd>
   19f88:	2300      	movs	r3, #0
   19f8a:	aaaa      	add	r2, sp, #680	; 0x2a8
   19f8c:	4631      	mov	r1, r6
   19f8e:	4630      	mov	r0, r6
   19f90:	f7fe fdb4 	bl	18afc <POINTonE2_dadd>
   19f94:	a9f2      	add	r1, sp, #968	; 0x3c8
   19f96:	a862      	add	r0, sp, #392	; 0x188
   19f98:	f7ff f9fb 	bl	19392 <POINTonE2_times_minus_z>
   19f9c:	2300      	movs	r3, #0
   19f9e:	aaf2      	add	r2, sp, #968	; 0x3c8
   19fa0:	a962      	add	r1, sp, #392	; 0x188
   19fa2:	4608      	mov	r0, r1
   19fa4:	f7fe fdaa 	bl	18afc <POINTonE2_dadd>
   19fa8:	2300      	movs	r3, #0
   19faa:	aaaa      	add	r2, sp, #680	; 0x2a8
   19fac:	a962      	add	r1, sp, #392	; 0x188
   19fae:	4608      	mov	r0, r1
   19fb0:	f7fe fda4 	bl	18afc <POINTonE2_dadd>
   19fb4:	a962      	add	r1, sp, #392	; 0x188
   19fb6:	a8aa      	add	r0, sp, #680	; 0x2a8
   19fb8:	f7ff f9eb 	bl	19392 <POINTonE2_times_minus_z>
   19fbc:	2300      	movs	r3, #0
   19fbe:	aaaa      	add	r2, sp, #680	; 0x2a8
   19fc0:	4631      	mov	r1, r6
   19fc2:	4630      	mov	r0, r6
   19fc4:	f7fe fd9a 	bl	18afc <POINTonE2_dadd>
   19fc8:	f50d 6d9d 	add.w	sp, sp, #1256	; 0x4e8
   19fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19fd0:	00029f90 	.word	0x00029f90
   19fd4:	fffcfffd 	.word	0xfffcfffd
   19fd8:	00028738 	.word	0x00028738
   19fdc:	00029830 	.word	0x00029830

00019fe0 <blst_map_to_g2>:
   19fe0:	b508      	push	{r3, lr}
   19fe2:	f7ff feb7 	bl	19d54 <map_to_g2>
   19fe6:	bd08      	pop	{r3, pc}

00019fe8 <blst_encode_to_g2>:
   19fe8:	b510      	push	{r4, lr}
   19fea:	b09c      	sub	sp, #112	; 0x70
   19fec:	4604      	mov	r4, r0
   19fee:	981e      	ldr	r0, [sp, #120]	; 0x78
   19ff0:	9003      	str	r0, [sp, #12]
   19ff2:	9302      	str	r3, [sp, #8]
   19ff4:	9201      	str	r2, [sp, #4]
   19ff6:	9100      	str	r1, [sp, #0]
   19ff8:	9b20      	ldr	r3, [sp, #128]	; 0x80
   19ffa:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   19ffc:	2102      	movs	r1, #2
   19ffe:	a804      	add	r0, sp, #16
   1a000:	f7fc fffd 	bl	16ffe <hash_to_field>
   1a004:	2200      	movs	r2, #0
   1a006:	a904      	add	r1, sp, #16
   1a008:	4620      	mov	r0, r4
   1a00a:	f7ff fea3 	bl	19d54 <map_to_g2>
   1a00e:	b01c      	add	sp, #112	; 0x70
   1a010:	bd10      	pop	{r4, pc}

0001a012 <blst_hash_to_g2>:
   1a012:	b510      	push	{r4, lr}
   1a014:	b0b4      	sub	sp, #208	; 0xd0
   1a016:	4604      	mov	r4, r0
   1a018:	9836      	ldr	r0, [sp, #216]	; 0xd8
   1a01a:	9003      	str	r0, [sp, #12]
   1a01c:	9302      	str	r3, [sp, #8]
   1a01e:	9201      	str	r2, [sp, #4]
   1a020:	9100      	str	r1, [sp, #0]
   1a022:	9b38      	ldr	r3, [sp, #224]	; 0xe0
   1a024:	9a37      	ldr	r2, [sp, #220]	; 0xdc
   1a026:	2104      	movs	r1, #4
   1a028:	a804      	add	r0, sp, #16
   1a02a:	f7fc ffe8 	bl	16ffe <hash_to_field>
   1a02e:	aa1c      	add	r2, sp, #112	; 0x70
   1a030:	a904      	add	r1, sp, #16
   1a032:	4620      	mov	r0, r4
   1a034:	f7ff fe8e 	bl	19d54 <map_to_g2>
   1a038:	b034      	add	sp, #208	; 0xd0
   1a03a:	bd10      	pop	{r4, pc}

0001a03c <sqr_fp4>:
   1a03c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a040:	b0be      	sub	sp, #248	; 0xf8
   1a042:	4604      	mov	r4, r0
   1a044:	468a      	mov	sl, r1
   1a046:	4690      	mov	r8, r2
   1a048:	4d3e      	ldr	r5, [pc, #248]	; (1a144 <sqr_fp4+0x108>)
   1a04a:	4f3f      	ldr	r7, [pc, #252]	; (1a148 <sqr_fp4+0x10c>)
   1a04c:	462b      	mov	r3, r5
   1a04e:	463a      	mov	r2, r7
   1a050:	a826      	add	r0, sp, #152	; 0x98
   1a052:	f7fd fc0d 	bl	17870 <sqr_mont_384x>
   1a056:	462b      	mov	r3, r5
   1a058:	463a      	mov	r2, r7
   1a05a:	4641      	mov	r1, r8
   1a05c:	a80e      	add	r0, sp, #56	; 0x38
   1a05e:	f7fd fc07 	bl	17870 <sqr_mont_384x>
   1a062:	f104 0560 	add.w	r5, r4, #96	; 0x60
   1a066:	f04f 090c 	mov.w	r9, #12
   1a06a:	f8cd 9000 	str.w	r9, [sp]
   1a06e:	463b      	mov	r3, r7
   1a070:	4642      	mov	r2, r8
   1a072:	4651      	mov	r1, sl
   1a074:	4628      	mov	r0, r5
   1a076:	f7f6 fe53 	bl	10d20 <add_mod_n>
   1a07a:	f104 0690 	add.w	r6, r4, #144	; 0x90
   1a07e:	f8cd 9000 	str.w	r9, [sp]
   1a082:	463b      	mov	r3, r7
   1a084:	f108 0230 	add.w	r2, r8, #48	; 0x30
   1a088:	f10a 0130 	add.w	r1, sl, #48	; 0x30
   1a08c:	4630      	mov	r0, r6
   1a08e:	f7f6 fe47 	bl	10d20 <add_mod_n>
   1a092:	f8cd 9000 	str.w	r9, [sp]
   1a096:	463b      	mov	r3, r7
   1a098:	aa1a      	add	r2, sp, #104	; 0x68
   1a09a:	a90e      	add	r1, sp, #56	; 0x38
   1a09c:	a802      	add	r0, sp, #8
   1a09e:	f7f6 fe3f 	bl	10d20 <add_mod_n>
   1a0a2:	f8cd 9000 	str.w	r9, [sp]
   1a0a6:	463b      	mov	r3, r7
   1a0a8:	aa1a      	add	r2, sp, #104	; 0x68
   1a0aa:	a90e      	add	r1, sp, #56	; 0x38
   1a0ac:	4620      	mov	r0, r4
   1a0ae:	f7f6 fae1 	bl	10674 <sub_mod_n>
   1a0b2:	aa02      	add	r2, sp, #8
   1a0b4:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   1a0b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   1a0bc:	f852 1b04 	ldr.w	r1, [r2], #4
   1a0c0:	f843 1f04 	str.w	r1, [r3, #4]!
   1a0c4:	4298      	cmp	r0, r3
   1a0c6:	d1f9      	bne.n	1a0bc <sqr_fp4+0x80>
   1a0c8:	4f1f      	ldr	r7, [pc, #124]	; (1a148 <sqr_fp4+0x10c>)
   1a0ca:	f04f 080c 	mov.w	r8, #12
   1a0ce:	f8cd 8000 	str.w	r8, [sp]
   1a0d2:	463b      	mov	r3, r7
   1a0d4:	aa26      	add	r2, sp, #152	; 0x98
   1a0d6:	4621      	mov	r1, r4
   1a0d8:	4620      	mov	r0, r4
   1a0da:	f7f6 fe21 	bl	10d20 <add_mod_n>
   1a0de:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1a0e2:	f8cd 8000 	str.w	r8, [sp]
   1a0e6:	463b      	mov	r3, r7
   1a0e8:	aa32      	add	r2, sp, #200	; 0xc8
   1a0ea:	4601      	mov	r1, r0
   1a0ec:	f7f6 fe18 	bl	10d20 <add_mod_n>
   1a0f0:	4b14      	ldr	r3, [pc, #80]	; (1a144 <sqr_fp4+0x108>)
   1a0f2:	463a      	mov	r2, r7
   1a0f4:	4629      	mov	r1, r5
   1a0f6:	4628      	mov	r0, r5
   1a0f8:	f7fd fbba 	bl	17870 <sqr_mont_384x>
   1a0fc:	f8cd 8000 	str.w	r8, [sp]
   1a100:	463b      	mov	r3, r7
   1a102:	aa26      	add	r2, sp, #152	; 0x98
   1a104:	4629      	mov	r1, r5
   1a106:	4628      	mov	r0, r5
   1a108:	f7f6 fab4 	bl	10674 <sub_mod_n>
   1a10c:	f8cd 8000 	str.w	r8, [sp]
   1a110:	463b      	mov	r3, r7
   1a112:	aa32      	add	r2, sp, #200	; 0xc8
   1a114:	4631      	mov	r1, r6
   1a116:	4630      	mov	r0, r6
   1a118:	f7f6 faac 	bl	10674 <sub_mod_n>
   1a11c:	f8cd 8000 	str.w	r8, [sp]
   1a120:	463b      	mov	r3, r7
   1a122:	aa0e      	add	r2, sp, #56	; 0x38
   1a124:	4629      	mov	r1, r5
   1a126:	4628      	mov	r0, r5
   1a128:	f7f6 faa4 	bl	10674 <sub_mod_n>
   1a12c:	f8cd 8000 	str.w	r8, [sp]
   1a130:	463b      	mov	r3, r7
   1a132:	aa1a      	add	r2, sp, #104	; 0x68
   1a134:	4631      	mov	r1, r6
   1a136:	4630      	mov	r0, r6
   1a138:	f7f6 fa9c 	bl	10674 <sub_mod_n>
   1a13c:	b03e      	add	sp, #248	; 0xf8
   1a13e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a142:	bf00      	nop
   1a144:	fffcfffd 	.word	0xfffcfffd
   1a148:	00028738 	.word	0x00028738

0001a14c <cyclotomic_sqr_fp12>:
   1a14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a150:	f5ad 7d21 	sub.w	sp, sp, #644	; 0x284
   1a154:	4604      	mov	r4, r0
   1a156:	460f      	mov	r7, r1
   1a158:	f501 7590 	add.w	r5, r1, #288	; 0x120
   1a15c:	9503      	str	r5, [sp, #12]
   1a15e:	f501 7ac0 	add.w	sl, r1, #384	; 0x180
   1a162:	4652      	mov	r2, sl
   1a164:	a870      	add	r0, sp, #448	; 0x1c0
   1a166:	f7ff ff69 	bl	1a03c <sqr_fp4>
   1a16a:	f107 0bc0 	add.w	fp, r7, #192	; 0xc0
   1a16e:	465a      	mov	r2, fp
   1a170:	4629      	mov	r1, r5
   1a172:	a840      	add	r0, sp, #256	; 0x100
   1a174:	f7ff ff62 	bl	1a03c <sqr_fp4>
   1a178:	f107 0860 	add.w	r8, r7, #96	; 0x60
   1a17c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
   1a180:	9302      	str	r3, [sp, #8]
   1a182:	461a      	mov	r2, r3
   1a184:	4641      	mov	r1, r8
   1a186:	a810      	add	r0, sp, #64	; 0x40
   1a188:	f7ff ff58 	bl	1a03c <sqr_fp4>
   1a18c:	4d9b      	ldr	r5, [pc, #620]	; (1a3fc <cyclotomic_sqr_fp12+0x2b0>)
   1a18e:	260c      	movs	r6, #12
   1a190:	9600      	str	r6, [sp, #0]
   1a192:	462b      	mov	r3, r5
   1a194:	463a      	mov	r2, r7
   1a196:	a970      	add	r1, sp, #448	; 0x1c0
   1a198:	4620      	mov	r0, r4
   1a19a:	f7f6 fa6b 	bl	10674 <sub_mod_n>
   1a19e:	f104 0930 	add.w	r9, r4, #48	; 0x30
   1a1a2:	9600      	str	r6, [sp, #0]
   1a1a4:	462b      	mov	r3, r5
   1a1a6:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1a1aa:	a97c      	add	r1, sp, #496	; 0x1f0
   1a1ac:	4648      	mov	r0, r9
   1a1ae:	f7f6 fa61 	bl	10674 <sub_mod_n>
   1a1b2:	9600      	str	r6, [sp, #0]
   1a1b4:	462b      	mov	r3, r5
   1a1b6:	4622      	mov	r2, r4
   1a1b8:	4621      	mov	r1, r4
   1a1ba:	4620      	mov	r0, r4
   1a1bc:	f7f6 fdb0 	bl	10d20 <add_mod_n>
   1a1c0:	9600      	str	r6, [sp, #0]
   1a1c2:	462b      	mov	r3, r5
   1a1c4:	464a      	mov	r2, r9
   1a1c6:	4649      	mov	r1, r9
   1a1c8:	4648      	mov	r0, r9
   1a1ca:	f7f6 fda9 	bl	10d20 <add_mod_n>
   1a1ce:	9600      	str	r6, [sp, #0]
   1a1d0:	462b      	mov	r3, r5
   1a1d2:	aa70      	add	r2, sp, #448	; 0x1c0
   1a1d4:	4621      	mov	r1, r4
   1a1d6:	4620      	mov	r0, r4
   1a1d8:	f7f6 fda2 	bl	10d20 <add_mod_n>
   1a1dc:	9600      	str	r6, [sp, #0]
   1a1de:	462b      	mov	r3, r5
   1a1e0:	aa7c      	add	r2, sp, #496	; 0x1f0
   1a1e2:	4649      	mov	r1, r9
   1a1e4:	4648      	mov	r0, r9
   1a1e6:	f7f6 fd9b 	bl	10d20 <add_mod_n>
   1a1ea:	f104 0960 	add.w	r9, r4, #96	; 0x60
   1a1ee:	9600      	str	r6, [sp, #0]
   1a1f0:	462b      	mov	r3, r5
   1a1f2:	4642      	mov	r2, r8
   1a1f4:	a940      	add	r1, sp, #256	; 0x100
   1a1f6:	4648      	mov	r0, r9
   1a1f8:	f7f6 fa3c 	bl	10674 <sub_mod_n>
   1a1fc:	f104 0890 	add.w	r8, r4, #144	; 0x90
   1a200:	9600      	str	r6, [sp, #0]
   1a202:	462b      	mov	r3, r5
   1a204:	f107 0290 	add.w	r2, r7, #144	; 0x90
   1a208:	a94c      	add	r1, sp, #304	; 0x130
   1a20a:	4640      	mov	r0, r8
   1a20c:	f7f6 fa32 	bl	10674 <sub_mod_n>
   1a210:	9600      	str	r6, [sp, #0]
   1a212:	462b      	mov	r3, r5
   1a214:	464a      	mov	r2, r9
   1a216:	4649      	mov	r1, r9
   1a218:	4648      	mov	r0, r9
   1a21a:	f7f6 fd81 	bl	10d20 <add_mod_n>
   1a21e:	9600      	str	r6, [sp, #0]
   1a220:	462b      	mov	r3, r5
   1a222:	4642      	mov	r2, r8
   1a224:	4641      	mov	r1, r8
   1a226:	4640      	mov	r0, r8
   1a228:	f7f6 fd7a 	bl	10d20 <add_mod_n>
   1a22c:	9600      	str	r6, [sp, #0]
   1a22e:	462b      	mov	r3, r5
   1a230:	aa40      	add	r2, sp, #256	; 0x100
   1a232:	4649      	mov	r1, r9
   1a234:	4648      	mov	r0, r9
   1a236:	f7f6 fd73 	bl	10d20 <add_mod_n>
   1a23a:	9600      	str	r6, [sp, #0]
   1a23c:	462b      	mov	r3, r5
   1a23e:	aa4c      	add	r2, sp, #304	; 0x130
   1a240:	4641      	mov	r1, r8
   1a242:	4640      	mov	r0, r8
   1a244:	f7f6 fd6c 	bl	10d20 <add_mod_n>
   1a248:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
   1a24c:	9600      	str	r6, [sp, #0]
   1a24e:	462b      	mov	r3, r5
   1a250:	465a      	mov	r2, fp
   1a252:	a910      	add	r1, sp, #64	; 0x40
   1a254:	4640      	mov	r0, r8
   1a256:	f7f6 fa0d 	bl	10674 <sub_mod_n>
   1a25a:	f104 09f0 	add.w	r9, r4, #240	; 0xf0
   1a25e:	9600      	str	r6, [sp, #0]
   1a260:	462b      	mov	r3, r5
   1a262:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
   1a266:	a91c      	add	r1, sp, #112	; 0x70
   1a268:	4648      	mov	r0, r9
   1a26a:	f7f6 fa03 	bl	10674 <sub_mod_n>
   1a26e:	9600      	str	r6, [sp, #0]
   1a270:	462b      	mov	r3, r5
   1a272:	4642      	mov	r2, r8
   1a274:	4641      	mov	r1, r8
   1a276:	4640      	mov	r0, r8
   1a278:	f7f6 fd52 	bl	10d20 <add_mod_n>
   1a27c:	9600      	str	r6, [sp, #0]
   1a27e:	462b      	mov	r3, r5
   1a280:	464a      	mov	r2, r9
   1a282:	4649      	mov	r1, r9
   1a284:	4648      	mov	r0, r9
   1a286:	f7f6 fd4b 	bl	10d20 <add_mod_n>
   1a28a:	9600      	str	r6, [sp, #0]
   1a28c:	462b      	mov	r3, r5
   1a28e:	aa10      	add	r2, sp, #64	; 0x40
   1a290:	4641      	mov	r1, r8
   1a292:	4640      	mov	r0, r8
   1a294:	f7f6 fd44 	bl	10d20 <add_mod_n>
   1a298:	9600      	str	r6, [sp, #0]
   1a29a:	462b      	mov	r3, r5
   1a29c:	aa1c      	add	r2, sp, #112	; 0x70
   1a29e:	4649      	mov	r1, r9
   1a2a0:	4648      	mov	r0, r9
   1a2a2:	f7f6 fd3d 	bl	10d20 <add_mod_n>
   1a2a6:	9600      	str	r6, [sp, #0]
   1a2a8:	462b      	mov	r3, r5
   1a2aa:	aa34      	add	r2, sp, #208	; 0xd0
   1a2ac:	a928      	add	r1, sp, #160	; 0xa0
   1a2ae:	a804      	add	r0, sp, #16
   1a2b0:	f7f6 fd36 	bl	10d20 <add_mod_n>
   1a2b4:	9600      	str	r6, [sp, #0]
   1a2b6:	462b      	mov	r3, r5
   1a2b8:	aa34      	add	r2, sp, #208	; 0xd0
   1a2ba:	a928      	add	r1, sp, #160	; 0xa0
   1a2bc:	4608      	mov	r0, r1
   1a2be:	f7f6 f9d9 	bl	10674 <sub_mod_n>
   1a2c2:	ab04      	add	r3, sp, #16
   1a2c4:	aa33      	add	r2, sp, #204	; 0xcc
   1a2c6:	a810      	add	r0, sp, #64	; 0x40
   1a2c8:	f853 1b04 	ldr.w	r1, [r3], #4
   1a2cc:	f842 1f04 	str.w	r1, [r2, #4]!
   1a2d0:	4298      	cmp	r0, r3
   1a2d2:	d1f9      	bne.n	1a2c8 <cyclotomic_sqr_fp12+0x17c>
   1a2d4:	f504 7890 	add.w	r8, r4, #288	; 0x120
   1a2d8:	4d48      	ldr	r5, [pc, #288]	; (1a3fc <cyclotomic_sqr_fp12+0x2b0>)
   1a2da:	260c      	movs	r6, #12
   1a2dc:	9600      	str	r6, [sp, #0]
   1a2de:	462b      	mov	r3, r5
   1a2e0:	9a03      	ldr	r2, [sp, #12]
   1a2e2:	a928      	add	r1, sp, #160	; 0xa0
   1a2e4:	4640      	mov	r0, r8
   1a2e6:	f7f6 fd1b 	bl	10d20 <add_mod_n>
   1a2ea:	f504 79a8 	add.w	r9, r4, #336	; 0x150
   1a2ee:	9600      	str	r6, [sp, #0]
   1a2f0:	462b      	mov	r3, r5
   1a2f2:	f507 72a8 	add.w	r2, r7, #336	; 0x150
   1a2f6:	a934      	add	r1, sp, #208	; 0xd0
   1a2f8:	4648      	mov	r0, r9
   1a2fa:	f7f6 fd11 	bl	10d20 <add_mod_n>
   1a2fe:	9600      	str	r6, [sp, #0]
   1a300:	462b      	mov	r3, r5
   1a302:	4642      	mov	r2, r8
   1a304:	4641      	mov	r1, r8
   1a306:	4640      	mov	r0, r8
   1a308:	f7f6 fd0a 	bl	10d20 <add_mod_n>
   1a30c:	9600      	str	r6, [sp, #0]
   1a30e:	462b      	mov	r3, r5
   1a310:	464a      	mov	r2, r9
   1a312:	4649      	mov	r1, r9
   1a314:	4648      	mov	r0, r9
   1a316:	f7f6 fd03 	bl	10d20 <add_mod_n>
   1a31a:	9600      	str	r6, [sp, #0]
   1a31c:	462b      	mov	r3, r5
   1a31e:	aa28      	add	r2, sp, #160	; 0xa0
   1a320:	4641      	mov	r1, r8
   1a322:	4640      	mov	r0, r8
   1a324:	f7f6 fcfc 	bl	10d20 <add_mod_n>
   1a328:	9600      	str	r6, [sp, #0]
   1a32a:	462b      	mov	r3, r5
   1a32c:	aa34      	add	r2, sp, #208	; 0xd0
   1a32e:	4649      	mov	r1, r9
   1a330:	4648      	mov	r0, r9
   1a332:	f7f6 fcf5 	bl	10d20 <add_mod_n>
   1a336:	f504 79c0 	add.w	r9, r4, #384	; 0x180
   1a33a:	9600      	str	r6, [sp, #0]
   1a33c:	462b      	mov	r3, r5
   1a33e:	4652      	mov	r2, sl
   1a340:	a988      	add	r1, sp, #544	; 0x220
   1a342:	4648      	mov	r0, r9
   1a344:	f7f6 fcec 	bl	10d20 <add_mod_n>
   1a348:	f504 78d8 	add.w	r8, r4, #432	; 0x1b0
   1a34c:	9600      	str	r6, [sp, #0]
   1a34e:	462b      	mov	r3, r5
   1a350:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
   1a354:	a994      	add	r1, sp, #592	; 0x250
   1a356:	4640      	mov	r0, r8
   1a358:	f7f6 fce2 	bl	10d20 <add_mod_n>
   1a35c:	9600      	str	r6, [sp, #0]
   1a35e:	462b      	mov	r3, r5
   1a360:	464a      	mov	r2, r9
   1a362:	4649      	mov	r1, r9
   1a364:	4648      	mov	r0, r9
   1a366:	f7f6 fcdb 	bl	10d20 <add_mod_n>
   1a36a:	9600      	str	r6, [sp, #0]
   1a36c:	462b      	mov	r3, r5
   1a36e:	4642      	mov	r2, r8
   1a370:	4641      	mov	r1, r8
   1a372:	4640      	mov	r0, r8
   1a374:	f7f6 fcd4 	bl	10d20 <add_mod_n>
   1a378:	9600      	str	r6, [sp, #0]
   1a37a:	462b      	mov	r3, r5
   1a37c:	aa88      	add	r2, sp, #544	; 0x220
   1a37e:	4649      	mov	r1, r9
   1a380:	4648      	mov	r0, r9
   1a382:	f7f6 fccd 	bl	10d20 <add_mod_n>
   1a386:	9600      	str	r6, [sp, #0]
   1a388:	462b      	mov	r3, r5
   1a38a:	aa94      	add	r2, sp, #592	; 0x250
   1a38c:	4641      	mov	r1, r8
   1a38e:	4640      	mov	r0, r8
   1a390:	f7f6 fcc6 	bl	10d20 <add_mod_n>
   1a394:	f504 78f0 	add.w	r8, r4, #480	; 0x1e0
   1a398:	9600      	str	r6, [sp, #0]
   1a39a:	462b      	mov	r3, r5
   1a39c:	9a02      	ldr	r2, [sp, #8]
   1a39e:	a958      	add	r1, sp, #352	; 0x160
   1a3a0:	4640      	mov	r0, r8
   1a3a2:	f7f6 fcbd 	bl	10d20 <add_mod_n>
   1a3a6:	f504 7404 	add.w	r4, r4, #528	; 0x210
   1a3aa:	9600      	str	r6, [sp, #0]
   1a3ac:	462b      	mov	r3, r5
   1a3ae:	f507 7204 	add.w	r2, r7, #528	; 0x210
   1a3b2:	a964      	add	r1, sp, #400	; 0x190
   1a3b4:	4620      	mov	r0, r4
   1a3b6:	f7f6 fcb3 	bl	10d20 <add_mod_n>
   1a3ba:	9600      	str	r6, [sp, #0]
   1a3bc:	462b      	mov	r3, r5
   1a3be:	4642      	mov	r2, r8
   1a3c0:	4641      	mov	r1, r8
   1a3c2:	4640      	mov	r0, r8
   1a3c4:	f7f6 fcac 	bl	10d20 <add_mod_n>
   1a3c8:	9600      	str	r6, [sp, #0]
   1a3ca:	462b      	mov	r3, r5
   1a3cc:	4622      	mov	r2, r4
   1a3ce:	4621      	mov	r1, r4
   1a3d0:	4620      	mov	r0, r4
   1a3d2:	f7f6 fca5 	bl	10d20 <add_mod_n>
   1a3d6:	9600      	str	r6, [sp, #0]
   1a3d8:	462b      	mov	r3, r5
   1a3da:	aa58      	add	r2, sp, #352	; 0x160
   1a3dc:	4641      	mov	r1, r8
   1a3de:	4640      	mov	r0, r8
   1a3e0:	f7f6 fc9e 	bl	10d20 <add_mod_n>
   1a3e4:	9600      	str	r6, [sp, #0]
   1a3e6:	462b      	mov	r3, r5
   1a3e8:	aa64      	add	r2, sp, #400	; 0x190
   1a3ea:	4621      	mov	r1, r4
   1a3ec:	4620      	mov	r0, r4
   1a3ee:	f7f6 fc97 	bl	10d20 <add_mod_n>
   1a3f2:	f50d 7d21 	add.w	sp, sp, #644	; 0x284
   1a3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a3fa:	bf00      	nop
   1a3fc:	00028738 	.word	0x00028738

0001a400 <blst_fp12_cyclotomic_sqr>:
   1a400:	b508      	push	{r3, lr}
   1a402:	f7ff fea3 	bl	1a14c <cyclotomic_sqr_fp12>
   1a406:	bd08      	pop	{r3, pc}

0001a408 <mul_n_sqr>:
   1a408:	b570      	push	{r4, r5, r6, lr}
   1a40a:	4605      	mov	r5, r0
   1a40c:	4616      	mov	r6, r2
   1a40e:	460a      	mov	r2, r1
   1a410:	4601      	mov	r1, r0
   1a412:	f7fa fab3 	bl	1497c <mul_fp12>
   1a416:	1e74      	subs	r4, r6, #1
   1a418:	b13e      	cbz	r6, 1a42a <mul_n_sqr+0x22>
   1a41a:	4629      	mov	r1, r5
   1a41c:	4628      	mov	r0, r5
   1a41e:	f7ff fe95 	bl	1a14c <cyclotomic_sqr_fp12>
   1a422:	3c01      	subs	r4, #1
   1a424:	f1b4 3fff 	cmp.w	r4, #4294967295
   1a428:	d1f7      	bne.n	1a41a <mul_n_sqr+0x12>
   1a42a:	bd70      	pop	{r4, r5, r6, pc}

0001a42c <raise_to_z_div_by_2>:
   1a42c:	b538      	push	{r3, r4, r5, lr}
   1a42e:	4604      	mov	r4, r0
   1a430:	460d      	mov	r5, r1
   1a432:	f7ff fe8b 	bl	1a14c <cyclotomic_sqr_fp12>
   1a436:	2202      	movs	r2, #2
   1a438:	4629      	mov	r1, r5
   1a43a:	4620      	mov	r0, r4
   1a43c:	f7ff ffe4 	bl	1a408 <mul_n_sqr>
   1a440:	2203      	movs	r2, #3
   1a442:	4629      	mov	r1, r5
   1a444:	4620      	mov	r0, r4
   1a446:	f7ff ffdf 	bl	1a408 <mul_n_sqr>
   1a44a:	2209      	movs	r2, #9
   1a44c:	4629      	mov	r1, r5
   1a44e:	4620      	mov	r0, r4
   1a450:	f7ff ffda 	bl	1a408 <mul_n_sqr>
   1a454:	2220      	movs	r2, #32
   1a456:	4629      	mov	r1, r5
   1a458:	4620      	mov	r0, r4
   1a45a:	f7ff ffd5 	bl	1a408 <mul_n_sqr>
   1a45e:	220f      	movs	r2, #15
   1a460:	4629      	mov	r1, r5
   1a462:	4620      	mov	r0, r4
   1a464:	f7ff ffd0 	bl	1a408 <mul_n_sqr>
   1a468:	4620      	mov	r0, r4
   1a46a:	f7f7 fc6d 	bl	11d48 <conjugate_fp12>
   1a46e:	bd38      	pop	{r3, r4, r5, pc}

0001a470 <sqr_fp6>:
   1a470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a474:	b0ef      	sub	sp, #444	; 0x1bc
   1a476:	4606      	mov	r6, r0
   1a478:	4689      	mov	r9, r1
   1a47a:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 1a66c <sqr_fp6+0x1fc>
   1a47e:	4c7c      	ldr	r4, [pc, #496]	; (1a670 <sqr_fp6+0x200>)
   1a480:	4653      	mov	r3, sl
   1a482:	4622      	mov	r2, r4
   1a484:	a856      	add	r0, sp, #344	; 0x158
   1a486:	f7fd f9f3 	bl	17870 <sqr_mont_384x>
   1a48a:	f109 0b60 	add.w	fp, r9, #96	; 0x60
   1a48e:	f8cd a000 	str.w	sl, [sp]
   1a492:	4623      	mov	r3, r4
   1a494:	465a      	mov	r2, fp
   1a496:	4649      	mov	r1, r9
   1a498:	a83e      	add	r0, sp, #248	; 0xf8
   1a49a:	f7f9 ff5b 	bl	14354 <mul_mont_384x>
   1a49e:	250c      	movs	r5, #12
   1a4a0:	9500      	str	r5, [sp, #0]
   1a4a2:	4623      	mov	r3, r4
   1a4a4:	aa3e      	add	r2, sp, #248	; 0xf8
   1a4a6:	4611      	mov	r1, r2
   1a4a8:	4610      	mov	r0, r2
   1a4aa:	f7f6 fc39 	bl	10d20 <add_mod_n>
   1a4ae:	9500      	str	r5, [sp, #0]
   1a4b0:	4623      	mov	r3, r4
   1a4b2:	aa4a      	add	r2, sp, #296	; 0x128
   1a4b4:	4611      	mov	r1, r2
   1a4b6:	4610      	mov	r0, r2
   1a4b8:	f7f6 fc32 	bl	10d20 <add_mod_n>
   1a4bc:	f109 08c0 	add.w	r8, r9, #192	; 0xc0
   1a4c0:	f8cd a000 	str.w	sl, [sp]
   1a4c4:	4623      	mov	r3, r4
   1a4c6:	4642      	mov	r2, r8
   1a4c8:	4659      	mov	r1, fp
   1a4ca:	a826      	add	r0, sp, #152	; 0x98
   1a4cc:	f7f9 ff42 	bl	14354 <mul_mont_384x>
   1a4d0:	9500      	str	r5, [sp, #0]
   1a4d2:	4623      	mov	r3, r4
   1a4d4:	aa26      	add	r2, sp, #152	; 0x98
   1a4d6:	4611      	mov	r1, r2
   1a4d8:	4610      	mov	r0, r2
   1a4da:	f7f6 fc21 	bl	10d20 <add_mod_n>
   1a4de:	9500      	str	r5, [sp, #0]
   1a4e0:	4623      	mov	r3, r4
   1a4e2:	aa32      	add	r2, sp, #200	; 0xc8
   1a4e4:	4611      	mov	r1, r2
   1a4e6:	4610      	mov	r0, r2
   1a4e8:	f7f6 fc1a 	bl	10d20 <add_mod_n>
   1a4ec:	4653      	mov	r3, sl
   1a4ee:	4622      	mov	r2, r4
   1a4f0:	4641      	mov	r1, r8
   1a4f2:	a80e      	add	r0, sp, #56	; 0x38
   1a4f4:	f7fd f9bc 	bl	17870 <sqr_mont_384x>
   1a4f8:	f106 07c0 	add.w	r7, r6, #192	; 0xc0
   1a4fc:	9500      	str	r5, [sp, #0]
   1a4fe:	4623      	mov	r3, r4
   1a500:	465a      	mov	r2, fp
   1a502:	4641      	mov	r1, r8
   1a504:	4638      	mov	r0, r7
   1a506:	f7f6 fc0b 	bl	10d20 <add_mod_n>
   1a50a:	f106 08f0 	add.w	r8, r6, #240	; 0xf0
   1a50e:	9500      	str	r5, [sp, #0]
   1a510:	4623      	mov	r3, r4
   1a512:	f109 0290 	add.w	r2, r9, #144	; 0x90
   1a516:	f109 01f0 	add.w	r1, r9, #240	; 0xf0
   1a51a:	4640      	mov	r0, r8
   1a51c:	f7f6 fc00 	bl	10d20 <add_mod_n>
   1a520:	9500      	str	r5, [sp, #0]
   1a522:	4623      	mov	r3, r4
   1a524:	464a      	mov	r2, r9
   1a526:	4639      	mov	r1, r7
   1a528:	4638      	mov	r0, r7
   1a52a:	f7f6 fbf9 	bl	10d20 <add_mod_n>
   1a52e:	9500      	str	r5, [sp, #0]
   1a530:	4623      	mov	r3, r4
   1a532:	f109 0230 	add.w	r2, r9, #48	; 0x30
   1a536:	4641      	mov	r1, r8
   1a538:	4640      	mov	r0, r8
   1a53a:	f7f6 fbf1 	bl	10d20 <add_mod_n>
   1a53e:	4653      	mov	r3, sl
   1a540:	4622      	mov	r2, r4
   1a542:	4639      	mov	r1, r7
   1a544:	4638      	mov	r0, r7
   1a546:	f7fd f993 	bl	17870 <sqr_mont_384x>
   1a54a:	9500      	str	r5, [sp, #0]
   1a54c:	4623      	mov	r3, r4
   1a54e:	aa56      	add	r2, sp, #344	; 0x158
   1a550:	4639      	mov	r1, r7
   1a552:	4638      	mov	r0, r7
   1a554:	f7f6 f88e 	bl	10674 <sub_mod_n>
   1a558:	9500      	str	r5, [sp, #0]
   1a55a:	4623      	mov	r3, r4
   1a55c:	aa62      	add	r2, sp, #392	; 0x188
   1a55e:	4641      	mov	r1, r8
   1a560:	4640      	mov	r0, r8
   1a562:	f7f6 f887 	bl	10674 <sub_mod_n>
   1a566:	9500      	str	r5, [sp, #0]
   1a568:	4623      	mov	r3, r4
   1a56a:	aa0e      	add	r2, sp, #56	; 0x38
   1a56c:	4639      	mov	r1, r7
   1a56e:	4638      	mov	r0, r7
   1a570:	f7f6 f880 	bl	10674 <sub_mod_n>
   1a574:	9500      	str	r5, [sp, #0]
   1a576:	4623      	mov	r3, r4
   1a578:	aa1a      	add	r2, sp, #104	; 0x68
   1a57a:	4641      	mov	r1, r8
   1a57c:	4640      	mov	r0, r8
   1a57e:	f7f6 f879 	bl	10674 <sub_mod_n>
   1a582:	9500      	str	r5, [sp, #0]
   1a584:	4623      	mov	r3, r4
   1a586:	aa3e      	add	r2, sp, #248	; 0xf8
   1a588:	4639      	mov	r1, r7
   1a58a:	4638      	mov	r0, r7
   1a58c:	f7f6 f872 	bl	10674 <sub_mod_n>
   1a590:	9500      	str	r5, [sp, #0]
   1a592:	4623      	mov	r3, r4
   1a594:	aa4a      	add	r2, sp, #296	; 0x128
   1a596:	4641      	mov	r1, r8
   1a598:	4640      	mov	r0, r8
   1a59a:	f7f6 f86b 	bl	10674 <sub_mod_n>
   1a59e:	9500      	str	r5, [sp, #0]
   1a5a0:	4623      	mov	r3, r4
   1a5a2:	aa26      	add	r2, sp, #152	; 0x98
   1a5a4:	4639      	mov	r1, r7
   1a5a6:	4638      	mov	r0, r7
   1a5a8:	f7f6 f864 	bl	10674 <sub_mod_n>
   1a5ac:	9500      	str	r5, [sp, #0]
   1a5ae:	4623      	mov	r3, r4
   1a5b0:	aa32      	add	r2, sp, #200	; 0xc8
   1a5b2:	4641      	mov	r1, r8
   1a5b4:	4640      	mov	r0, r8
   1a5b6:	f7f6 f85d 	bl	10674 <sub_mod_n>
   1a5ba:	9500      	str	r5, [sp, #0]
   1a5bc:	4623      	mov	r3, r4
   1a5be:	aa32      	add	r2, sp, #200	; 0xc8
   1a5c0:	a926      	add	r1, sp, #152	; 0x98
   1a5c2:	a802      	add	r0, sp, #8
   1a5c4:	f7f6 fbac 	bl	10d20 <add_mod_n>
   1a5c8:	9500      	str	r5, [sp, #0]
   1a5ca:	4623      	mov	r3, r4
   1a5cc:	aa32      	add	r2, sp, #200	; 0xc8
   1a5ce:	a926      	add	r1, sp, #152	; 0x98
   1a5d0:	4630      	mov	r0, r6
   1a5d2:	f7f6 f84f 	bl	10674 <sub_mod_n>
   1a5d6:	aa02      	add	r2, sp, #8
   1a5d8:	f106 032c 	add.w	r3, r6, #44	; 0x2c
   1a5dc:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   1a5e0:	f852 1b04 	ldr.w	r1, [r2], #4
   1a5e4:	f843 1f04 	str.w	r1, [r3, #4]!
   1a5e8:	4298      	cmp	r0, r3
   1a5ea:	d1f9      	bne.n	1a5e0 <sqr_fp6+0x170>
   1a5ec:	4c20      	ldr	r4, [pc, #128]	; (1a670 <sqr_fp6+0x200>)
   1a5ee:	250c      	movs	r5, #12
   1a5f0:	9500      	str	r5, [sp, #0]
   1a5f2:	4623      	mov	r3, r4
   1a5f4:	aa56      	add	r2, sp, #344	; 0x158
   1a5f6:	4631      	mov	r1, r6
   1a5f8:	4630      	mov	r0, r6
   1a5fa:	f7f6 fb91 	bl	10d20 <add_mod_n>
   1a5fe:	f106 0030 	add.w	r0, r6, #48	; 0x30
   1a602:	9500      	str	r5, [sp, #0]
   1a604:	4623      	mov	r3, r4
   1a606:	aa62      	add	r2, sp, #392	; 0x188
   1a608:	4601      	mov	r1, r0
   1a60a:	f7f6 fb89 	bl	10d20 <add_mod_n>
   1a60e:	f106 0760 	add.w	r7, r6, #96	; 0x60
   1a612:	9500      	str	r5, [sp, #0]
   1a614:	4623      	mov	r3, r4
   1a616:	aa1a      	add	r2, sp, #104	; 0x68
   1a618:	a90e      	add	r1, sp, #56	; 0x38
   1a61a:	a802      	add	r0, sp, #8
   1a61c:	f7f6 fb80 	bl	10d20 <add_mod_n>
   1a620:	9500      	str	r5, [sp, #0]
   1a622:	4623      	mov	r3, r4
   1a624:	aa1a      	add	r2, sp, #104	; 0x68
   1a626:	a90e      	add	r1, sp, #56	; 0x38
   1a628:	4638      	mov	r0, r7
   1a62a:	f7f6 f823 	bl	10674 <sub_mod_n>
   1a62e:	aa02      	add	r2, sp, #8
   1a630:	f106 038c 	add.w	r3, r6, #140	; 0x8c
   1a634:	f106 00bc 	add.w	r0, r6, #188	; 0xbc
   1a638:	f852 1b04 	ldr.w	r1, [r2], #4
   1a63c:	f843 1f04 	str.w	r1, [r3, #4]!
   1a640:	4283      	cmp	r3, r0
   1a642:	d1f9      	bne.n	1a638 <sqr_fp6+0x1c8>
   1a644:	4c0a      	ldr	r4, [pc, #40]	; (1a670 <sqr_fp6+0x200>)
   1a646:	250c      	movs	r5, #12
   1a648:	9500      	str	r5, [sp, #0]
   1a64a:	4623      	mov	r3, r4
   1a64c:	aa3e      	add	r2, sp, #248	; 0xf8
   1a64e:	4639      	mov	r1, r7
   1a650:	4638      	mov	r0, r7
   1a652:	f7f6 fb65 	bl	10d20 <add_mod_n>
   1a656:	f106 0090 	add.w	r0, r6, #144	; 0x90
   1a65a:	9500      	str	r5, [sp, #0]
   1a65c:	4623      	mov	r3, r4
   1a65e:	aa4a      	add	r2, sp, #296	; 0x128
   1a660:	4601      	mov	r1, r0
   1a662:	f7f6 fb5d 	bl	10d20 <add_mod_n>
   1a666:	b06f      	add	sp, #444	; 0x1bc
   1a668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a66c:	fffcfffd 	.word	0xfffcfffd
   1a670:	00028738 	.word	0x00028738

0001a674 <inverse_fp12>:
   1a674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a678:	f5ad 6d8b 	sub.w	sp, sp, #1112	; 0x458
   1a67c:	4605      	mov	r5, r0
   1a67e:	460e      	mov	r6, r1
   1a680:	a8ce      	add	r0, sp, #824	; 0x338
   1a682:	f7ff fef5 	bl	1a470 <sqr_fp6>
   1a686:	f506 7790 	add.w	r7, r6, #288	; 0x120
   1a68a:	4639      	mov	r1, r7
   1a68c:	a886      	add	r0, sp, #536	; 0x218
   1a68e:	f7ff feef 	bl	1a470 <sqr_fp6>
   1a692:	4cb7      	ldr	r4, [pc, #732]	; (1a970 <inverse_fp12+0x2fc>)
   1a694:	f04f 080c 	mov.w	r8, #12
   1a698:	f8cd 8000 	str.w	r8, [sp]
   1a69c:	4623      	mov	r3, r4
   1a69e:	aac2      	add	r2, sp, #776	; 0x308
   1a6a0:	a9b6      	add	r1, sp, #728	; 0x2d8
   1a6a2:	a86e      	add	r0, sp, #440	; 0x1b8
   1a6a4:	f7f6 fb3c 	bl	10d20 <add_mod_n>
   1a6a8:	f8cd 8000 	str.w	r8, [sp]
   1a6ac:	4623      	mov	r3, r4
   1a6ae:	aac2      	add	r2, sp, #776	; 0x308
   1a6b0:	a9b6      	add	r1, sp, #728	; 0x2d8
   1a6b2:	4608      	mov	r0, r1
   1a6b4:	f7f5 ffde 	bl	10674 <sub_mod_n>
   1a6b8:	ab6e      	add	r3, sp, #440	; 0x1b8
   1a6ba:	aac1      	add	r2, sp, #772	; 0x304
   1a6bc:	a87a      	add	r0, sp, #488	; 0x1e8
   1a6be:	f853 1b04 	ldr.w	r1, [r3], #4
   1a6c2:	f842 1f04 	str.w	r1, [r2, #4]!
   1a6c6:	4283      	cmp	r3, r0
   1a6c8:	d1f9      	bne.n	1a6be <inverse_fp12+0x4a>
   1a6ca:	4ca9      	ldr	r4, [pc, #676]	; (1a970 <inverse_fp12+0x2fc>)
   1a6cc:	f04f 080c 	mov.w	r8, #12
   1a6d0:	f8cd 8000 	str.w	r8, [sp]
   1a6d4:	4623      	mov	r3, r4
   1a6d6:	aab6      	add	r2, sp, #728	; 0x2d8
   1a6d8:	a9ce      	add	r1, sp, #824	; 0x338
   1a6da:	4608      	mov	r0, r1
   1a6dc:	f7f5 ffca 	bl	10674 <sub_mod_n>
   1a6e0:	f8cd 8000 	str.w	r8, [sp]
   1a6e4:	4623      	mov	r3, r4
   1a6e6:	aac2      	add	r2, sp, #776	; 0x308
   1a6e8:	a9da      	add	r1, sp, #872	; 0x368
   1a6ea:	4608      	mov	r0, r1
   1a6ec:	f7f5 ffc2 	bl	10674 <sub_mod_n>
   1a6f0:	f8cd 8000 	str.w	r8, [sp]
   1a6f4:	4623      	mov	r3, r4
   1a6f6:	aa86      	add	r2, sp, #536	; 0x218
   1a6f8:	a9e6      	add	r1, sp, #920	; 0x398
   1a6fa:	4608      	mov	r0, r1
   1a6fc:	f7f5 ffba 	bl	10674 <sub_mod_n>
   1a700:	f8cd 8000 	str.w	r8, [sp]
   1a704:	4623      	mov	r3, r4
   1a706:	aa92      	add	r2, sp, #584	; 0x248
   1a708:	a9f2      	add	r1, sp, #968	; 0x3c8
   1a70a:	4608      	mov	r0, r1
   1a70c:	f7f5 ffb2 	bl	10674 <sub_mod_n>
   1a710:	f8cd 8000 	str.w	r8, [sp]
   1a714:	4623      	mov	r3, r4
   1a716:	aa9e      	add	r2, sp, #632	; 0x278
   1a718:	a9fe      	add	r1, sp, #1016	; 0x3f8
   1a71a:	4608      	mov	r0, r1
   1a71c:	f7f5 ffaa 	bl	10674 <sub_mod_n>
   1a720:	f8cd 8000 	str.w	r8, [sp]
   1a724:	4623      	mov	r3, r4
   1a726:	aaaa      	add	r2, sp, #680	; 0x2a8
   1a728:	f50d 6185 	add.w	r1, sp, #1064	; 0x428
   1a72c:	4608      	mov	r0, r1
   1a72e:	f7f5 ffa1 	bl	10674 <sub_mod_n>
   1a732:	f8df 9240 	ldr.w	r9, [pc, #576]	; 1a974 <inverse_fp12+0x300>
   1a736:	464b      	mov	r3, r9
   1a738:	4622      	mov	r2, r4
   1a73a:	a9ce      	add	r1, sp, #824	; 0x338
   1a73c:	a80e      	add	r0, sp, #56	; 0x38
   1a73e:	f7fd f897 	bl	17870 <sqr_mont_384x>
   1a742:	f8cd 9000 	str.w	r9, [sp]
   1a746:	4623      	mov	r3, r4
   1a748:	aafe      	add	r2, sp, #1016	; 0x3f8
   1a74a:	a9e6      	add	r1, sp, #920	; 0x398
   1a74c:	a856      	add	r0, sp, #344	; 0x158
   1a74e:	f7f9 fe01 	bl	14354 <mul_mont_384x>
   1a752:	f8cd 8000 	str.w	r8, [sp]
   1a756:	4623      	mov	r3, r4
   1a758:	aa62      	add	r2, sp, #392	; 0x188
   1a75a:	a956      	add	r1, sp, #344	; 0x158
   1a75c:	a86e      	add	r0, sp, #440	; 0x1b8
   1a75e:	f7f6 fadf 	bl	10d20 <add_mod_n>
   1a762:	f8cd 8000 	str.w	r8, [sp]
   1a766:	4623      	mov	r3, r4
   1a768:	aa62      	add	r2, sp, #392	; 0x188
   1a76a:	a956      	add	r1, sp, #344	; 0x158
   1a76c:	4608      	mov	r0, r1
   1a76e:	f7f5 ff81 	bl	10674 <sub_mod_n>
   1a772:	ab6e      	add	r3, sp, #440	; 0x1b8
   1a774:	ac61      	add	r4, sp, #388	; 0x184
   1a776:	a87a      	add	r0, sp, #488	; 0x1e8
   1a778:	4622      	mov	r2, r4
   1a77a:	f853 1b04 	ldr.w	r1, [r3], #4
   1a77e:	f842 1f04 	str.w	r1, [r2, #4]!
   1a782:	4283      	cmp	r3, r0
   1a784:	d1f9      	bne.n	1a77a <inverse_fp12+0x106>
   1a786:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 1a970 <inverse_fp12+0x2fc>
   1a78a:	f04f 090c 	mov.w	r9, #12
   1a78e:	f8cd 9000 	str.w	r9, [sp]
   1a792:	4643      	mov	r3, r8
   1a794:	aa56      	add	r2, sp, #344	; 0x158
   1a796:	a90e      	add	r1, sp, #56	; 0x38
   1a798:	4608      	mov	r0, r1
   1a79a:	f7f5 ff6b 	bl	10674 <sub_mod_n>
   1a79e:	f8cd 9000 	str.w	r9, [sp]
   1a7a2:	4643      	mov	r3, r8
   1a7a4:	aa62      	add	r2, sp, #392	; 0x188
   1a7a6:	a91a      	add	r1, sp, #104	; 0x68
   1a7a8:	4608      	mov	r0, r1
   1a7aa:	f7f5 ff63 	bl	10674 <sub_mod_n>
   1a7ae:	4b71      	ldr	r3, [pc, #452]	; (1a974 <inverse_fp12+0x300>)
   1a7b0:	4642      	mov	r2, r8
   1a7b2:	a9fe      	add	r1, sp, #1016	; 0x3f8
   1a7b4:	a826      	add	r0, sp, #152	; 0x98
   1a7b6:	f7fd f85b 	bl	17870 <sqr_mont_384x>
   1a7ba:	f8cd 9000 	str.w	r9, [sp]
   1a7be:	4643      	mov	r3, r8
   1a7c0:	aa32      	add	r2, sp, #200	; 0xc8
   1a7c2:	a926      	add	r1, sp, #152	; 0x98
   1a7c4:	a86e      	add	r0, sp, #440	; 0x1b8
   1a7c6:	f7f6 faab 	bl	10d20 <add_mod_n>
   1a7ca:	f8cd 9000 	str.w	r9, [sp]
   1a7ce:	4643      	mov	r3, r8
   1a7d0:	aa32      	add	r2, sp, #200	; 0xc8
   1a7d2:	a926      	add	r1, sp, #152	; 0x98
   1a7d4:	4608      	mov	r0, r1
   1a7d6:	f7f5 ff4d 	bl	10674 <sub_mod_n>
   1a7da:	ab6e      	add	r3, sp, #440	; 0x1b8
   1a7dc:	aa31      	add	r2, sp, #196	; 0xc4
   1a7de:	a87a      	add	r0, sp, #488	; 0x1e8
   1a7e0:	f853 1b04 	ldr.w	r1, [r3], #4
   1a7e4:	f842 1f04 	str.w	r1, [r2, #4]!
   1a7e8:	4298      	cmp	r0, r3
   1a7ea:	d1f9      	bne.n	1a7e0 <inverse_fp12+0x16c>
   1a7ec:	f8df 8180 	ldr.w	r8, [pc, #384]	; 1a970 <inverse_fp12+0x2fc>
   1a7f0:	f8df a180 	ldr.w	sl, [pc, #384]	; 1a974 <inverse_fp12+0x300>
   1a7f4:	f8cd a000 	str.w	sl, [sp]
   1a7f8:	4643      	mov	r3, r8
   1a7fa:	aae6      	add	r2, sp, #920	; 0x398
   1a7fc:	a9ce      	add	r1, sp, #824	; 0x338
   1a7fe:	a856      	add	r0, sp, #344	; 0x158
   1a800:	f7f9 fda8 	bl	14354 <mul_mont_384x>
   1a804:	f04f 090c 	mov.w	r9, #12
   1a808:	f8cd 9000 	str.w	r9, [sp]
   1a80c:	4643      	mov	r3, r8
   1a80e:	aa56      	add	r2, sp, #344	; 0x158
   1a810:	a926      	add	r1, sp, #152	; 0x98
   1a812:	4608      	mov	r0, r1
   1a814:	f7f5 ff2e 	bl	10674 <sub_mod_n>
   1a818:	f8cd 9000 	str.w	r9, [sp]
   1a81c:	4643      	mov	r3, r8
   1a81e:	aa62      	add	r2, sp, #392	; 0x188
   1a820:	a932      	add	r1, sp, #200	; 0xc8
   1a822:	4608      	mov	r0, r1
   1a824:	f7f5 ff26 	bl	10674 <sub_mod_n>
   1a828:	4653      	mov	r3, sl
   1a82a:	4642      	mov	r2, r8
   1a82c:	a9e6      	add	r1, sp, #920	; 0x398
   1a82e:	a83e      	add	r0, sp, #248	; 0xf8
   1a830:	f7fd f81e 	bl	17870 <sqr_mont_384x>
   1a834:	f8cd a000 	str.w	sl, [sp]
   1a838:	4643      	mov	r3, r8
   1a83a:	aafe      	add	r2, sp, #1016	; 0x3f8
   1a83c:	a9ce      	add	r1, sp, #824	; 0x338
   1a83e:	a856      	add	r0, sp, #344	; 0x158
   1a840:	f7f9 fd88 	bl	14354 <mul_mont_384x>
   1a844:	f8cd 9000 	str.w	r9, [sp]
   1a848:	4643      	mov	r3, r8
   1a84a:	aa56      	add	r2, sp, #344	; 0x158
   1a84c:	a93e      	add	r1, sp, #248	; 0xf8
   1a84e:	4608      	mov	r0, r1
   1a850:	f7f5 ff10 	bl	10674 <sub_mod_n>
   1a854:	f8cd 9000 	str.w	r9, [sp]
   1a858:	4643      	mov	r3, r8
   1a85a:	aa62      	add	r2, sp, #392	; 0x188
   1a85c:	a94a      	add	r1, sp, #296	; 0x128
   1a85e:	4608      	mov	r0, r1
   1a860:	f7f5 ff08 	bl	10674 <sub_mod_n>
   1a864:	f8cd a000 	str.w	sl, [sp]
   1a868:	4643      	mov	r3, r8
   1a86a:	aafe      	add	r2, sp, #1016	; 0x3f8
   1a86c:	a926      	add	r1, sp, #152	; 0x98
   1a86e:	a856      	add	r0, sp, #344	; 0x158
   1a870:	f7f9 fd70 	bl	14354 <mul_mont_384x>
   1a874:	f8cd a000 	str.w	sl, [sp]
   1a878:	4643      	mov	r3, r8
   1a87a:	aae6      	add	r2, sp, #920	; 0x398
   1a87c:	a93e      	add	r1, sp, #248	; 0xf8
   1a87e:	a86e      	add	r0, sp, #440	; 0x1b8
   1a880:	f7f9 fd68 	bl	14354 <mul_mont_384x>
   1a884:	f8cd 9000 	str.w	r9, [sp]
   1a888:	4643      	mov	r3, r8
   1a88a:	aa6e      	add	r2, sp, #440	; 0x1b8
   1a88c:	a956      	add	r1, sp, #344	; 0x158
   1a88e:	4608      	mov	r0, r1
   1a890:	f7f6 fa46 	bl	10d20 <add_mod_n>
   1a894:	f8cd 9000 	str.w	r9, [sp]
   1a898:	4643      	mov	r3, r8
   1a89a:	aa7a      	add	r2, sp, #488	; 0x1e8
   1a89c:	a962      	add	r1, sp, #392	; 0x188
   1a89e:	4608      	mov	r0, r1
   1a8a0:	f7f6 fa3e 	bl	10d20 <add_mod_n>
   1a8a4:	f8cd 9000 	str.w	r9, [sp]
   1a8a8:	4643      	mov	r3, r8
   1a8aa:	aa62      	add	r2, sp, #392	; 0x188
   1a8ac:	a956      	add	r1, sp, #344	; 0x158
   1a8ae:	a802      	add	r0, sp, #8
   1a8b0:	f7f6 fa36 	bl	10d20 <add_mod_n>
   1a8b4:	f8cd 9000 	str.w	r9, [sp]
   1a8b8:	4643      	mov	r3, r8
   1a8ba:	aa62      	add	r2, sp, #392	; 0x188
   1a8bc:	a956      	add	r1, sp, #344	; 0x158
   1a8be:	4608      	mov	r0, r1
   1a8c0:	f7f5 fed8 	bl	10674 <sub_mod_n>
   1a8c4:	ab02      	add	r3, sp, #8
   1a8c6:	a90e      	add	r1, sp, #56	; 0x38
   1a8c8:	f853 2b04 	ldr.w	r2, [r3], #4
   1a8cc:	f844 2f04 	str.w	r2, [r4, #4]!
   1a8d0:	4299      	cmp	r1, r3
   1a8d2:	d1f9      	bne.n	1a8c8 <inverse_fp12+0x254>
   1a8d4:	4c26      	ldr	r4, [pc, #152]	; (1a970 <inverse_fp12+0x2fc>)
   1a8d6:	f8df 809c 	ldr.w	r8, [pc, #156]	; 1a974 <inverse_fp12+0x300>
   1a8da:	f8cd 8000 	str.w	r8, [sp]
   1a8de:	4623      	mov	r3, r4
   1a8e0:	aace      	add	r2, sp, #824	; 0x338
   1a8e2:	a90e      	add	r1, sp, #56	; 0x38
   1a8e4:	a86e      	add	r0, sp, #440	; 0x1b8
   1a8e6:	f7f9 fd35 	bl	14354 <mul_mont_384x>
   1a8ea:	f04f 090c 	mov.w	r9, #12
   1a8ee:	f8cd 9000 	str.w	r9, [sp]
   1a8f2:	4623      	mov	r3, r4
   1a8f4:	aa6e      	add	r2, sp, #440	; 0x1b8
   1a8f6:	a956      	add	r1, sp, #344	; 0x158
   1a8f8:	4608      	mov	r0, r1
   1a8fa:	f7f6 fa11 	bl	10d20 <add_mod_n>
   1a8fe:	f8cd 9000 	str.w	r9, [sp]
   1a902:	4623      	mov	r3, r4
   1a904:	aa7a      	add	r2, sp, #488	; 0x1e8
   1a906:	a962      	add	r1, sp, #392	; 0x188
   1a908:	4608      	mov	r0, r1
   1a90a:	f7f6 fa09 	bl	10d20 <add_mod_n>
   1a90e:	a956      	add	r1, sp, #344	; 0x158
   1a910:	a86e      	add	r0, sp, #440	; 0x1b8
   1a912:	f7fb f845 	bl	159a0 <reciprocal_fp2>
   1a916:	f8cd 8000 	str.w	r8, [sp]
   1a91a:	4623      	mov	r3, r4
   1a91c:	aa6e      	add	r2, sp, #440	; 0x1b8
   1a91e:	a90e      	add	r1, sp, #56	; 0x38
   1a920:	a886      	add	r0, sp, #536	; 0x218
   1a922:	f7f9 fd17 	bl	14354 <mul_mont_384x>
   1a926:	f8cd 8000 	str.w	r8, [sp]
   1a92a:	4623      	mov	r3, r4
   1a92c:	aa6e      	add	r2, sp, #440	; 0x1b8
   1a92e:	a926      	add	r1, sp, #152	; 0x98
   1a930:	a89e      	add	r0, sp, #632	; 0x278
   1a932:	f7f9 fd0f 	bl	14354 <mul_mont_384x>
   1a936:	f8cd 8000 	str.w	r8, [sp]
   1a93a:	4623      	mov	r3, r4
   1a93c:	aa6e      	add	r2, sp, #440	; 0x1b8
   1a93e:	a93e      	add	r1, sp, #248	; 0xf8
   1a940:	a8b6      	add	r0, sp, #728	; 0x2d8
   1a942:	f7f9 fd07 	bl	14354 <mul_mont_384x>
   1a946:	aa86      	add	r2, sp, #536	; 0x218
   1a948:	4631      	mov	r1, r6
   1a94a:	4628      	mov	r0, r5
   1a94c:	f7f9 feb0 	bl	146b0 <mul_fp6>
   1a950:	f505 7590 	add.w	r5, r5, #288	; 0x120
   1a954:	aa86      	add	r2, sp, #536	; 0x218
   1a956:	4639      	mov	r1, r7
   1a958:	4628      	mov	r0, r5
   1a95a:	f7f9 fea9 	bl	146b0 <mul_fp6>
   1a95e:	4629      	mov	r1, r5
   1a960:	4628      	mov	r0, r5
   1a962:	f7f7 f9b5 	bl	11cd0 <neg_fp6>
   1a966:	f50d 6d8b 	add.w	sp, sp, #1112	; 0x458
   1a96a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a96e:	bf00      	nop
   1a970:	00028738 	.word	0x00028738
   1a974:	fffcfffd 	.word	0xfffcfffd

0001a978 <blst_fp12_inverse>:
   1a978:	b508      	push	{r3, lr}
   1a97a:	f7ff fe7b 	bl	1a674 <inverse_fp12>
   1a97e:	bd08      	pop	{r3, pc}

0001a980 <final_exp>:
   1a980:	b530      	push	{r4, r5, lr}
   1a982:	f6ad 1d04 	subw	sp, sp, #2308	; 0x904
   1a986:	4604      	mov	r4, r0
   1a988:	460d      	mov	r5, r1
   1a98a:	f1a1 0c04 	sub.w	ip, r1, #4
   1a98e:	f50d 6390 	add.w	r3, sp, #1152	; 0x480
   1a992:	f50d 60d8 	add.w	r0, sp, #1728	; 0x6c0
   1a996:	f85c 2f04 	ldr.w	r2, [ip, #4]!
   1a99a:	f843 2b04 	str.w	r2, [r3], #4
   1a99e:	4283      	cmp	r3, r0
   1a9a0:	d1f9      	bne.n	1a996 <final_exp+0x16>
   1a9a2:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
   1a9a6:	f7f7 f9cf 	bl	11d48 <conjugate_fp12>
   1a9aa:	4629      	mov	r1, r5
   1a9ac:	a890      	add	r0, sp, #576	; 0x240
   1a9ae:	f7ff fe61 	bl	1a674 <inverse_fp12>
   1a9b2:	aa90      	add	r2, sp, #576	; 0x240
   1a9b4:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
   1a9b8:	4620      	mov	r0, r4
   1a9ba:	f7f9 ffdf 	bl	1497c <mul_fp12>
   1a9be:	2202      	movs	r2, #2
   1a9c0:	4621      	mov	r1, r4
   1a9c2:	a890      	add	r0, sp, #576	; 0x240
   1a9c4:	f7f9 fdfa 	bl	145bc <frobenius_map_fp12>
   1a9c8:	aa90      	add	r2, sp, #576	; 0x240
   1a9ca:	4621      	mov	r1, r4
   1a9cc:	4620      	mov	r0, r4
   1a9ce:	f7f9 ffd5 	bl	1497c <mul_fp12>
   1a9d2:	4621      	mov	r1, r4
   1a9d4:	f50d 60d8 	add.w	r0, sp, #1728	; 0x6c0
   1a9d8:	f7ff fbb8 	bl	1a14c <cyclotomic_sqr_fp12>
   1a9dc:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
   1a9e0:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
   1a9e4:	f7ff fd22 	bl	1a42c <raise_to_z_div_by_2>
   1a9e8:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
   1a9ec:	4608      	mov	r0, r1
   1a9ee:	f7ff fbad 	bl	1a14c <cyclotomic_sqr_fp12>
   1a9f2:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
   1a9f6:	a890      	add	r0, sp, #576	; 0x240
   1a9f8:	f7ff fd18 	bl	1a42c <raise_to_z_div_by_2>
   1a9fc:	f1a4 0c04 	sub.w	ip, r4, #4
   1aa00:	466b      	mov	r3, sp
   1aa02:	a990      	add	r1, sp, #576	; 0x240
   1aa04:	f85c 2f04 	ldr.w	r2, [ip, #4]!
   1aa08:	f843 2b04 	str.w	r2, [r3], #4
   1aa0c:	428b      	cmp	r3, r1
   1aa0e:	d1f9      	bne.n	1aa04 <final_exp+0x84>
   1aa10:	4668      	mov	r0, sp
   1aa12:	f7f7 f999 	bl	11d48 <conjugate_fp12>
   1aa16:	466a      	mov	r2, sp
   1aa18:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
   1aa1c:	4608      	mov	r0, r1
   1aa1e:	f7f9 ffad 	bl	1497c <mul_fp12>
   1aa22:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
   1aa26:	f7f7 f98f 	bl	11d48 <conjugate_fp12>
   1aa2a:	aa90      	add	r2, sp, #576	; 0x240
   1aa2c:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
   1aa30:	4608      	mov	r0, r1
   1aa32:	f7f9 ffa3 	bl	1497c <mul_fp12>
   1aa36:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
   1aa3a:	a890      	add	r0, sp, #576	; 0x240
   1aa3c:	f7ff fcf6 	bl	1a42c <raise_to_z_div_by_2>
   1aa40:	a990      	add	r1, sp, #576	; 0x240
   1aa42:	4608      	mov	r0, r1
   1aa44:	f7ff fb82 	bl	1a14c <cyclotomic_sqr_fp12>
   1aa48:	a990      	add	r1, sp, #576	; 0x240
   1aa4a:	4668      	mov	r0, sp
   1aa4c:	f7ff fcee 	bl	1a42c <raise_to_z_div_by_2>
   1aa50:	4669      	mov	r1, sp
   1aa52:	4668      	mov	r0, sp
   1aa54:	f7ff fb7a 	bl	1a14c <cyclotomic_sqr_fp12>
   1aa58:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
   1aa5c:	f7f7 f974 	bl	11d48 <conjugate_fp12>
   1aa60:	f50d 6290 	add.w	r2, sp, #1152	; 0x480
   1aa64:	4669      	mov	r1, sp
   1aa66:	4668      	mov	r0, sp
   1aa68:	f7f9 ff88 	bl	1497c <mul_fp12>
   1aa6c:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
   1aa70:	f7f7 f96a 	bl	11d48 <conjugate_fp12>
   1aa74:	2203      	movs	r2, #3
   1aa76:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
   1aa7a:	4608      	mov	r0, r1
   1aa7c:	f7f9 fd9e 	bl	145bc <frobenius_map_fp12>
   1aa80:	2202      	movs	r2, #2
   1aa82:	a990      	add	r1, sp, #576	; 0x240
   1aa84:	4608      	mov	r0, r1
   1aa86:	f7f9 fd99 	bl	145bc <frobenius_map_fp12>
   1aa8a:	aa90      	add	r2, sp, #576	; 0x240
   1aa8c:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
   1aa90:	4608      	mov	r0, r1
   1aa92:	f7f9 ff73 	bl	1497c <mul_fp12>
   1aa96:	4669      	mov	r1, sp
   1aa98:	a890      	add	r0, sp, #576	; 0x240
   1aa9a:	f7ff fcc7 	bl	1a42c <raise_to_z_div_by_2>
   1aa9e:	a990      	add	r1, sp, #576	; 0x240
   1aaa0:	4608      	mov	r0, r1
   1aaa2:	f7ff fb53 	bl	1a14c <cyclotomic_sqr_fp12>
   1aaa6:	f50d 62d8 	add.w	r2, sp, #1728	; 0x6c0
   1aaaa:	a990      	add	r1, sp, #576	; 0x240
   1aaac:	4608      	mov	r0, r1
   1aaae:	f7f9 ff65 	bl	1497c <mul_fp12>
   1aab2:	4622      	mov	r2, r4
   1aab4:	a990      	add	r1, sp, #576	; 0x240
   1aab6:	4608      	mov	r0, r1
   1aab8:	f7f9 ff60 	bl	1497c <mul_fp12>
   1aabc:	aa90      	add	r2, sp, #576	; 0x240
   1aabe:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
   1aac2:	4608      	mov	r0, r1
   1aac4:	f7f9 ff5a 	bl	1497c <mul_fp12>
   1aac8:	2201      	movs	r2, #1
   1aaca:	4669      	mov	r1, sp
   1aacc:	a890      	add	r0, sp, #576	; 0x240
   1aace:	f7f9 fd75 	bl	145bc <frobenius_map_fp12>
   1aad2:	aa90      	add	r2, sp, #576	; 0x240
   1aad4:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
   1aad8:	4620      	mov	r0, r4
   1aada:	f7f9 ff4f 	bl	1497c <mul_fp12>
   1aade:	f60d 1d04 	addw	sp, sp, #2308	; 0x904
   1aae2:	bd30      	pop	{r4, r5, pc}

0001aae4 <blst_final_exp>:
   1aae4:	b508      	push	{r3, lr}
   1aae6:	f7ff ff4b 	bl	1a980 <final_exp>
   1aaea:	bd08      	pop	{r3, pc}

0001aaec <line_dbl>:
   1aaec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aaf0:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
   1aaf4:	4606      	mov	r6, r0
   1aaf6:	4689      	mov	r9, r1
   1aaf8:	4617      	mov	r7, r2
   1aafa:	f8df a2dc 	ldr.w	sl, [pc, #732]	; 1add8 <line_dbl+0x2ec>
   1aafe:	4cb7      	ldr	r4, [pc, #732]	; (1addc <line_dbl+0x2f0>)
   1ab00:	4653      	mov	r3, sl
   1ab02:	4622      	mov	r2, r4
   1ab04:	4639      	mov	r1, r7
   1ab06:	a87e      	add	r0, sp, #504	; 0x1f8
   1ab08:	f7fc feb2 	bl	17870 <sqr_mont_384x>
   1ab0c:	f107 0b60 	add.w	fp, r7, #96	; 0x60
   1ab10:	4653      	mov	r3, sl
   1ab12:	4622      	mov	r2, r4
   1ab14:	4659      	mov	r1, fp
   1ab16:	a866      	add	r0, sp, #408	; 0x198
   1ab18:	f7fc feaa 	bl	17870 <sqr_mont_384x>
   1ab1c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
   1ab20:	4619      	mov	r1, r3
   1ab22:	4653      	mov	r3, sl
   1ab24:	4622      	mov	r2, r4
   1ab26:	9103      	str	r1, [sp, #12]
   1ab28:	a896      	add	r0, sp, #600	; 0x258
   1ab2a:	f7fc fea1 	bl	17870 <sqr_mont_384x>
   1ab2e:	4653      	mov	r3, sl
   1ab30:	4622      	mov	r2, r4
   1ab32:	a866      	add	r0, sp, #408	; 0x198
   1ab34:	4601      	mov	r1, r0
   1ab36:	a84e      	add	r0, sp, #312	; 0x138
   1ab38:	f7fc fe9a 	bl	17870 <sqr_mont_384x>
   1ab3c:	250c      	movs	r5, #12
   1ab3e:	9500      	str	r5, [sp, #0]
   1ab40:	4623      	mov	r3, r4
   1ab42:	aa66      	add	r2, sp, #408	; 0x198
   1ab44:	4639      	mov	r1, r7
   1ab46:	a836      	add	r0, sp, #216	; 0xd8
   1ab48:	f7f6 f8ea 	bl	10d20 <add_mod_n>
   1ab4c:	f107 0830 	add.w	r8, r7, #48	; 0x30
   1ab50:	9500      	str	r5, [sp, #0]
   1ab52:	4623      	mov	r3, r4
   1ab54:	aa72      	add	r2, sp, #456	; 0x1c8
   1ab56:	4641      	mov	r1, r8
   1ab58:	a842      	add	r0, sp, #264	; 0x108
   1ab5a:	f7f6 f8e1 	bl	10d20 <add_mod_n>
   1ab5e:	4653      	mov	r3, sl
   1ab60:	4622      	mov	r2, r4
   1ab62:	a836      	add	r0, sp, #216	; 0xd8
   1ab64:	4601      	mov	r1, r0
   1ab66:	f7fc fe83 	bl	17870 <sqr_mont_384x>
   1ab6a:	9500      	str	r5, [sp, #0]
   1ab6c:	4623      	mov	r3, r4
   1ab6e:	aa7e      	add	r2, sp, #504	; 0x1f8
   1ab70:	a836      	add	r0, sp, #216	; 0xd8
   1ab72:	4601      	mov	r1, r0
   1ab74:	f7f5 fd7e 	bl	10674 <sub_mod_n>
   1ab78:	9500      	str	r5, [sp, #0]
   1ab7a:	4623      	mov	r3, r4
   1ab7c:	aa8a      	add	r2, sp, #552	; 0x228
   1ab7e:	a842      	add	r0, sp, #264	; 0x108
   1ab80:	4601      	mov	r1, r0
   1ab82:	f7f5 fd77 	bl	10674 <sub_mod_n>
   1ab86:	9500      	str	r5, [sp, #0]
   1ab88:	4623      	mov	r3, r4
   1ab8a:	aa4e      	add	r2, sp, #312	; 0x138
   1ab8c:	a836      	add	r0, sp, #216	; 0xd8
   1ab8e:	4601      	mov	r1, r0
   1ab90:	f7f5 fd70 	bl	10674 <sub_mod_n>
   1ab94:	9500      	str	r5, [sp, #0]
   1ab96:	4623      	mov	r3, r4
   1ab98:	aa5a      	add	r2, sp, #360	; 0x168
   1ab9a:	a842      	add	r0, sp, #264	; 0x108
   1ab9c:	4601      	mov	r1, r0
   1ab9e:	f7f5 fd69 	bl	10674 <sub_mod_n>
   1aba2:	9500      	str	r5, [sp, #0]
   1aba4:	4623      	mov	r3, r4
   1aba6:	aa36      	add	r2, sp, #216	; 0xd8
   1aba8:	4610      	mov	r0, r2
   1abaa:	4611      	mov	r1, r2
   1abac:	f7f6 f8b8 	bl	10d20 <add_mod_n>
   1abb0:	9500      	str	r5, [sp, #0]
   1abb2:	4623      	mov	r3, r4
   1abb4:	aa42      	add	r2, sp, #264	; 0x108
   1abb6:	4610      	mov	r0, r2
   1abb8:	4611      	mov	r1, r2
   1abba:	f7f6 f8b1 	bl	10d20 <add_mod_n>
   1abbe:	462b      	mov	r3, r5
   1abc0:	4622      	mov	r2, r4
   1abc2:	a87e      	add	r0, sp, #504	; 0x1f8
   1abc4:	4601      	mov	r1, r0
   1abc6:	a81e      	add	r0, sp, #120	; 0x78
   1abc8:	f7f6 f932 	bl	10e30 <mul_by_3_mod_n>
   1abcc:	462b      	mov	r3, r5
   1abce:	4622      	mov	r2, r4
   1abd0:	a88a      	add	r0, sp, #552	; 0x228
   1abd2:	4601      	mov	r1, r0
   1abd4:	a82a      	add	r0, sp, #168	; 0xa8
   1abd6:	f7f6 f92b 	bl	10e30 <mul_by_3_mod_n>
   1abda:	4653      	mov	r3, sl
   1abdc:	4622      	mov	r2, r4
   1abde:	a81e      	add	r0, sp, #120	; 0x78
   1abe0:	4601      	mov	r1, r0
   1abe2:	a806      	add	r0, sp, #24
   1abe4:	f7fc fe44 	bl	17870 <sqr_mont_384x>
   1abe8:	9500      	str	r5, [sp, #0]
   1abea:	4623      	mov	r3, r4
   1abec:	463a      	mov	r2, r7
   1abee:	a81e      	add	r0, sp, #120	; 0x78
   1abf0:	4601      	mov	r1, r0
   1abf2:	4630      	mov	r0, r6
   1abf4:	f7f6 f894 	bl	10d20 <add_mod_n>
   1abf8:	f106 0030 	add.w	r0, r6, #48	; 0x30
   1abfc:	9500      	str	r5, [sp, #0]
   1abfe:	4623      	mov	r3, r4
   1ac00:	4642      	mov	r2, r8
   1ac02:	f10d 0ca8 	add.w	ip, sp, #168	; 0xa8
   1ac06:	4661      	mov	r1, ip
   1ac08:	9005      	str	r0, [sp, #20]
   1ac0a:	f7f6 f889 	bl	10d20 <add_mod_n>
   1ac0e:	9500      	str	r5, [sp, #0]
   1ac10:	4623      	mov	r3, r4
   1ac12:	aa36      	add	r2, sp, #216	; 0xd8
   1ac14:	f10d 0c18 	add.w	ip, sp, #24
   1ac18:	4661      	mov	r1, ip
   1ac1a:	4648      	mov	r0, r9
   1ac1c:	f7f5 fd2a 	bl	10674 <sub_mod_n>
   1ac20:	f109 0830 	add.w	r8, r9, #48	; 0x30
   1ac24:	9500      	str	r5, [sp, #0]
   1ac26:	4623      	mov	r3, r4
   1ac28:	aa42      	add	r2, sp, #264	; 0x108
   1ac2a:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
   1ac2e:	4661      	mov	r1, ip
   1ac30:	4640      	mov	r0, r8
   1ac32:	f7f5 fd1f 	bl	10674 <sub_mod_n>
   1ac36:	9500      	str	r5, [sp, #0]
   1ac38:	4623      	mov	r3, r4
   1ac3a:	aa36      	add	r2, sp, #216	; 0xd8
   1ac3c:	4649      	mov	r1, r9
   1ac3e:	4648      	mov	r0, r9
   1ac40:	f7f5 fd18 	bl	10674 <sub_mod_n>
   1ac44:	9500      	str	r5, [sp, #0]
   1ac46:	4623      	mov	r3, r4
   1ac48:	aa42      	add	r2, sp, #264	; 0x108
   1ac4a:	4641      	mov	r1, r8
   1ac4c:	f8cd 8010 	str.w	r8, [sp, #16]
   1ac50:	4640      	mov	r0, r8
   1ac52:	f7f5 fd0f 	bl	10674 <sub_mod_n>
   1ac56:	f109 08c0 	add.w	r8, r9, #192	; 0xc0
   1ac5a:	9500      	str	r5, [sp, #0]
   1ac5c:	4623      	mov	r3, r4
   1ac5e:	9a03      	ldr	r2, [sp, #12]
   1ac60:	4659      	mov	r1, fp
   1ac62:	4640      	mov	r0, r8
   1ac64:	f7f6 f85c 	bl	10d20 <add_mod_n>
   1ac68:	f109 0bf0 	add.w	fp, r9, #240	; 0xf0
   1ac6c:	9500      	str	r5, [sp, #0]
   1ac6e:	4623      	mov	r3, r4
   1ac70:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
   1ac74:	f107 0190 	add.w	r1, r7, #144	; 0x90
   1ac78:	4658      	mov	r0, fp
   1ac7a:	f7f6 f851 	bl	10d20 <add_mod_n>
   1ac7e:	4653      	mov	r3, sl
   1ac80:	4622      	mov	r2, r4
   1ac82:	4641      	mov	r1, r8
   1ac84:	4640      	mov	r0, r8
   1ac86:	f7fc fdf3 	bl	17870 <sqr_mont_384x>
   1ac8a:	9500      	str	r5, [sp, #0]
   1ac8c:	4623      	mov	r3, r4
   1ac8e:	aa66      	add	r2, sp, #408	; 0x198
   1ac90:	4641      	mov	r1, r8
   1ac92:	4640      	mov	r0, r8
   1ac94:	f7f5 fcee 	bl	10674 <sub_mod_n>
   1ac98:	9500      	str	r5, [sp, #0]
   1ac9a:	4623      	mov	r3, r4
   1ac9c:	aa72      	add	r2, sp, #456	; 0x1c8
   1ac9e:	4659      	mov	r1, fp
   1aca0:	4658      	mov	r0, fp
   1aca2:	f7f5 fce7 	bl	10674 <sub_mod_n>
   1aca6:	9500      	str	r5, [sp, #0]
   1aca8:	4623      	mov	r3, r4
   1acaa:	aa96      	add	r2, sp, #600	; 0x258
   1acac:	4641      	mov	r1, r8
   1acae:	4640      	mov	r0, r8
   1acb0:	f7f5 fce0 	bl	10674 <sub_mod_n>
   1acb4:	9500      	str	r5, [sp, #0]
   1acb6:	4623      	mov	r3, r4
   1acb8:	aaa2      	add	r2, sp, #648	; 0x288
   1acba:	4659      	mov	r1, fp
   1acbc:	4658      	mov	r0, fp
   1acbe:	f7f5 fcd9 	bl	10674 <sub_mod_n>
   1acc2:	9500      	str	r5, [sp, #0]
   1acc4:	4623      	mov	r3, r4
   1acc6:	2203      	movs	r2, #3
   1acc8:	a94e      	add	r1, sp, #312	; 0x138
   1acca:	4608      	mov	r0, r1
   1accc:	f7f6 f950 	bl	10f70 <lshift_mod_n>
   1acd0:	9500      	str	r5, [sp, #0]
   1acd2:	4623      	mov	r3, r4
   1acd4:	2203      	movs	r2, #3
   1acd6:	a95a      	add	r1, sp, #360	; 0x168
   1acd8:	4608      	mov	r0, r1
   1acda:	f7f6 f949 	bl	10f70 <lshift_mod_n>
   1acde:	f109 0b60 	add.w	fp, r9, #96	; 0x60
   1ace2:	9500      	str	r5, [sp, #0]
   1ace4:	4623      	mov	r3, r4
   1ace6:	464a      	mov	r2, r9
   1ace8:	a936      	add	r1, sp, #216	; 0xd8
   1acea:	4658      	mov	r0, fp
   1acec:	f7f5 fcc2 	bl	10674 <sub_mod_n>
   1acf0:	f109 0790 	add.w	r7, r9, #144	; 0x90
   1acf4:	9500      	str	r5, [sp, #0]
   1acf6:	4623      	mov	r3, r4
   1acf8:	9a04      	ldr	r2, [sp, #16]
   1acfa:	a942      	add	r1, sp, #264	; 0x108
   1acfc:	4638      	mov	r0, r7
   1acfe:	f7f5 fcb9 	bl	10674 <sub_mod_n>
   1ad02:	f8cd a000 	str.w	sl, [sp]
   1ad06:	4623      	mov	r3, r4
   1ad08:	aa1e      	add	r2, sp, #120	; 0x78
   1ad0a:	4659      	mov	r1, fp
   1ad0c:	4658      	mov	r0, fp
   1ad0e:	f7f9 fb21 	bl	14354 <mul_mont_384x>
   1ad12:	9500      	str	r5, [sp, #0]
   1ad14:	4623      	mov	r3, r4
   1ad16:	aa4e      	add	r2, sp, #312	; 0x138
   1ad18:	4659      	mov	r1, fp
   1ad1a:	4658      	mov	r0, fp
   1ad1c:	f7f5 fcaa 	bl	10674 <sub_mod_n>
   1ad20:	9500      	str	r5, [sp, #0]
   1ad22:	4623      	mov	r3, r4
   1ad24:	aa5a      	add	r2, sp, #360	; 0x168
   1ad26:	4639      	mov	r1, r7
   1ad28:	4638      	mov	r0, r7
   1ad2a:	f7f5 fca3 	bl	10674 <sub_mod_n>
   1ad2e:	4653      	mov	r3, sl
   1ad30:	4622      	mov	r2, r4
   1ad32:	4631      	mov	r1, r6
   1ad34:	4630      	mov	r0, r6
   1ad36:	f7fc fd9b 	bl	17870 <sqr_mont_384x>
   1ad3a:	9500      	str	r5, [sp, #0]
   1ad3c:	4623      	mov	r3, r4
   1ad3e:	aa7e      	add	r2, sp, #504	; 0x1f8
   1ad40:	4631      	mov	r1, r6
   1ad42:	4630      	mov	r0, r6
   1ad44:	f7f5 fc96 	bl	10674 <sub_mod_n>
   1ad48:	9500      	str	r5, [sp, #0]
   1ad4a:	4623      	mov	r3, r4
   1ad4c:	aa8a      	add	r2, sp, #552	; 0x228
   1ad4e:	9f05      	ldr	r7, [sp, #20]
   1ad50:	4639      	mov	r1, r7
   1ad52:	4638      	mov	r0, r7
   1ad54:	f7f5 fc8e 	bl	10674 <sub_mod_n>
   1ad58:	9500      	str	r5, [sp, #0]
   1ad5a:	4623      	mov	r3, r4
   1ad5c:	aa06      	add	r2, sp, #24
   1ad5e:	4631      	mov	r1, r6
   1ad60:	4630      	mov	r0, r6
   1ad62:	f7f5 fc87 	bl	10674 <sub_mod_n>
   1ad66:	9500      	str	r5, [sp, #0]
   1ad68:	4623      	mov	r3, r4
   1ad6a:	aa12      	add	r2, sp, #72	; 0x48
   1ad6c:	4639      	mov	r1, r7
   1ad6e:	4638      	mov	r0, r7
   1ad70:	f7f5 fc80 	bl	10674 <sub_mod_n>
   1ad74:	9500      	str	r5, [sp, #0]
   1ad76:	4623      	mov	r3, r4
   1ad78:	2202      	movs	r2, #2
   1ad7a:	a966      	add	r1, sp, #408	; 0x198
   1ad7c:	4608      	mov	r0, r1
   1ad7e:	f7f6 f8f7 	bl	10f70 <lshift_mod_n>
   1ad82:	9500      	str	r5, [sp, #0]
   1ad84:	4623      	mov	r3, r4
   1ad86:	2202      	movs	r2, #2
   1ad88:	a972      	add	r1, sp, #456	; 0x1c8
   1ad8a:	4608      	mov	r0, r1
   1ad8c:	f7f6 f8f0 	bl	10f70 <lshift_mod_n>
   1ad90:	9500      	str	r5, [sp, #0]
   1ad92:	4623      	mov	r3, r4
   1ad94:	aa66      	add	r2, sp, #408	; 0x198
   1ad96:	4631      	mov	r1, r6
   1ad98:	4630      	mov	r0, r6
   1ad9a:	f7f5 fc6b 	bl	10674 <sub_mod_n>
   1ad9e:	9500      	str	r5, [sp, #0]
   1ada0:	4623      	mov	r3, r4
   1ada2:	aa72      	add	r2, sp, #456	; 0x1c8
   1ada4:	4639      	mov	r1, r7
   1ada6:	4638      	mov	r0, r7
   1ada8:	f7f5 fc64 	bl	10674 <sub_mod_n>
   1adac:	f8cd a000 	str.w	sl, [sp]
   1adb0:	4623      	mov	r3, r4
   1adb2:	aa96      	add	r2, sp, #600	; 0x258
   1adb4:	a91e      	add	r1, sp, #120	; 0x78
   1adb6:	f106 0060 	add.w	r0, r6, #96	; 0x60
   1adba:	f7f9 facb 	bl	14354 <mul_mont_384x>
   1adbe:	f8cd a000 	str.w	sl, [sp]
   1adc2:	4623      	mov	r3, r4
   1adc4:	aa96      	add	r2, sp, #600	; 0x258
   1adc6:	4641      	mov	r1, r8
   1adc8:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   1adcc:	f7f9 fac2 	bl	14354 <mul_mont_384x>
   1add0:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
   1add4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1add8:	fffcfffd 	.word	0xfffcfffd
   1addc:	00028738 	.word	0x00028738

0001ade0 <start_dbl_n>:
   1ade0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ade4:	b0c8      	sub	sp, #288	; 0x120
   1ade6:	4606      	mov	r6, r0
   1ade8:	460c      	mov	r4, r1
   1adea:	4615      	mov	r5, r2
   1adec:	461f      	mov	r7, r3
   1adee:	460a      	mov	r2, r1
   1adf0:	4668      	mov	r0, sp
   1adf2:	f7ff fe7b 	bl	1aaec <line_dbl>
   1adf6:	4629      	mov	r1, r5
   1adf8:	4668      	mov	r0, sp
   1adfa:	f7f5 ff0b 	bl	10c14 <line_by_Px2>
   1adfe:	4633      	mov	r3, r6
   1ae00:	f506 7110 	add.w	r1, r6, #576	; 0x240
   1ae04:	2200      	movs	r2, #0
   1ae06:	f843 2b04 	str.w	r2, [r3], #4
   1ae0a:	428b      	cmp	r3, r1
   1ae0c:	d1fb      	bne.n	1ae06 <start_dbl_n+0x26>
   1ae0e:	f1ad 0204 	sub.w	r2, sp, #4
   1ae12:	1f33      	subs	r3, r6, #4
   1ae14:	a82f      	add	r0, sp, #188	; 0xbc
   1ae16:	f852 1f04 	ldr.w	r1, [r2, #4]!
   1ae1a:	f843 1f04 	str.w	r1, [r3, #4]!
   1ae1e:	4282      	cmp	r2, r0
   1ae20:	d1f9      	bne.n	1ae16 <start_dbl_n+0x36>
   1ae22:	aa2f      	add	r2, sp, #188	; 0xbc
   1ae24:	f506 73be 	add.w	r3, r6, #380	; 0x17c
   1ae28:	a847      	add	r0, sp, #284	; 0x11c
   1ae2a:	f852 1f04 	ldr.w	r1, [r2, #4]!
   1ae2e:	f843 1f04 	str.w	r1, [r3, #4]!
   1ae32:	4282      	cmp	r2, r0
   1ae34:	d1f9      	bne.n	1ae2a <start_dbl_n+0x4a>
   1ae36:	2f01      	cmp	r7, #1
   1ae38:	d919      	bls.n	1ae6e <start_dbl_n+0x8e>
   1ae3a:	f504 7490 	add.w	r4, r4, #288	; 0x120
   1ae3e:	3560      	adds	r5, #96	; 0x60
   1ae40:	f04f 0801 	mov.w	r8, #1
   1ae44:	4622      	mov	r2, r4
   1ae46:	4621      	mov	r1, r4
   1ae48:	4668      	mov	r0, sp
   1ae4a:	f7ff fe4f 	bl	1aaec <line_dbl>
   1ae4e:	4629      	mov	r1, r5
   1ae50:	4668      	mov	r0, sp
   1ae52:	f7f5 fedf 	bl	10c14 <line_by_Px2>
   1ae56:	466a      	mov	r2, sp
   1ae58:	4631      	mov	r1, r6
   1ae5a:	4630      	mov	r0, r6
   1ae5c:	f7f9 ffb2 	bl	14dc4 <mul_by_xy00z0_fp12>
   1ae60:	f108 0801 	add.w	r8, r8, #1
   1ae64:	f504 7490 	add.w	r4, r4, #288	; 0x120
   1ae68:	3560      	adds	r5, #96	; 0x60
   1ae6a:	4547      	cmp	r7, r8
   1ae6c:	d1ea      	bne.n	1ae44 <start_dbl_n+0x64>
   1ae6e:	b048      	add	sp, #288	; 0x120
   1ae70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ae74 <line_add>:
   1ae74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae78:	f5ad 7d47 	sub.w	sp, sp, #796	; 0x31c
   1ae7c:	4682      	mov	sl, r0
   1ae7e:	460e      	mov	r6, r1
   1ae80:	4693      	mov	fp, r2
   1ae82:	4699      	mov	r9, r3
   1ae84:	f102 05c0 	add.w	r5, r2, #192	; 0xc0
   1ae88:	4fcc      	ldr	r7, [pc, #816]	; (1b1bc <line_add+0x348>)
   1ae8a:	4ccd      	ldr	r4, [pc, #820]	; (1b1c0 <line_add+0x34c>)
   1ae8c:	463b      	mov	r3, r7
   1ae8e:	4622      	mov	r2, r4
   1ae90:	4629      	mov	r1, r5
   1ae92:	a8ae      	add	r0, sp, #696	; 0x2b8
   1ae94:	f7fc fcec 	bl	17870 <sqr_mont_384x>
   1ae98:	9700      	str	r7, [sp, #0]
   1ae9a:	4623      	mov	r3, r4
   1ae9c:	aaae      	add	r2, sp, #696	; 0x2b8
   1ae9e:	4649      	mov	r1, r9
   1aea0:	a896      	add	r0, sp, #600	; 0x258
   1aea2:	f7f9 fa57 	bl	14354 <mul_mont_384x>
   1aea6:	f8cd 9014 	str.w	r9, [sp, #20]
   1aeaa:	f109 0060 	add.w	r0, r9, #96	; 0x60
   1aeae:	9700      	str	r7, [sp, #0]
   1aeb0:	4623      	mov	r3, r4
   1aeb2:	9502      	str	r5, [sp, #8]
   1aeb4:	462a      	mov	r2, r5
   1aeb6:	9003      	str	r0, [sp, #12]
   1aeb8:	4601      	mov	r1, r0
   1aeba:	a87e      	add	r0, sp, #504	; 0x1f8
   1aebc:	f7f9 fa4a 	bl	14354 <mul_mont_384x>
   1aec0:	9700      	str	r7, [sp, #0]
   1aec2:	4623      	mov	r3, r4
   1aec4:	adae      	add	r5, sp, #696	; 0x2b8
   1aec6:	462a      	mov	r2, r5
   1aec8:	ad7e      	add	r5, sp, #504	; 0x1f8
   1aeca:	4629      	mov	r1, r5
   1aecc:	4628      	mov	r0, r5
   1aece:	f7f9 fa41 	bl	14354 <mul_mont_384x>
   1aed2:	250c      	movs	r5, #12
   1aed4:	9500      	str	r5, [sp, #0]
   1aed6:	4623      	mov	r3, r4
   1aed8:	465a      	mov	r2, fp
   1aeda:	f50d 7c16 	add.w	ip, sp, #600	; 0x258
   1aede:	4661      	mov	r1, ip
   1aee0:	a866      	add	r0, sp, #408	; 0x198
   1aee2:	f7f5 fbc7 	bl	10674 <sub_mod_n>
   1aee6:	9500      	str	r5, [sp, #0]
   1aee8:	4623      	mov	r3, r4
   1aeea:	f10b 0230 	add.w	r2, fp, #48	; 0x30
   1aeee:	a9a2      	add	r1, sp, #648	; 0x288
   1aef0:	a872      	add	r0, sp, #456	; 0x1c8
   1aef2:	f7f5 fbbf 	bl	10674 <sub_mod_n>
   1aef6:	463b      	mov	r3, r7
   1aef8:	4622      	mov	r2, r4
   1aefa:	f50d 7ccc 	add.w	ip, sp, #408	; 0x198
   1aefe:	4661      	mov	r1, ip
   1af00:	a84e      	add	r0, sp, #312	; 0x138
   1af02:	f7fc fcb5 	bl	17870 <sqr_mont_384x>
   1af06:	9500      	str	r5, [sp, #0]
   1af08:	4623      	mov	r3, r4
   1af0a:	f50d 7c9c 	add.w	ip, sp, #312	; 0x138
   1af0e:	4662      	mov	r2, ip
   1af10:	4661      	mov	r1, ip
   1af12:	a836      	add	r0, sp, #216	; 0xd8
   1af14:	f7f5 ff04 	bl	10d20 <add_mod_n>
   1af18:	9500      	str	r5, [sp, #0]
   1af1a:	4623      	mov	r3, r4
   1af1c:	f50d 7cb4 	add.w	ip, sp, #360	; 0x168
   1af20:	4662      	mov	r2, ip
   1af22:	4661      	mov	r1, ip
   1af24:	a842      	add	r0, sp, #264	; 0x108
   1af26:	f7f5 fefb 	bl	10d20 <add_mod_n>
   1af2a:	9500      	str	r5, [sp, #0]
   1af2c:	4623      	mov	r3, r4
   1af2e:	f10d 0cd8 	add.w	ip, sp, #216	; 0xd8
   1af32:	4662      	mov	r2, ip
   1af34:	4661      	mov	r1, ip
   1af36:	4660      	mov	r0, ip
   1af38:	f7f5 fef2 	bl	10d20 <add_mod_n>
   1af3c:	9500      	str	r5, [sp, #0]
   1af3e:	4623      	mov	r3, r4
   1af40:	f50d 7c84 	add.w	ip, sp, #264	; 0x108
   1af44:	4662      	mov	r2, ip
   1af46:	4661      	mov	r1, ip
   1af48:	4660      	mov	r0, ip
   1af4a:	f7f5 fee9 	bl	10d20 <add_mod_n>
   1af4e:	9700      	str	r7, [sp, #0]
   1af50:	4623      	mov	r3, r4
   1af52:	f10d 0cd8 	add.w	ip, sp, #216	; 0xd8
   1af56:	4662      	mov	r2, ip
   1af58:	f50d 7ccc 	add.w	ip, sp, #408	; 0x198
   1af5c:	4661      	mov	r1, ip
   1af5e:	a81e      	add	r0, sp, #120	; 0x78
   1af60:	f7f9 f9f8 	bl	14354 <mul_mont_384x>
   1af64:	f10a 0860 	add.w	r8, sl, #96	; 0x60
   1af68:	f10b 0960 	add.w	r9, fp, #96	; 0x60
   1af6c:	9500      	str	r5, [sp, #0]
   1af6e:	4623      	mov	r3, r4
   1af70:	464a      	mov	r2, r9
   1af72:	f50d 7cfc 	add.w	ip, sp, #504	; 0x1f8
   1af76:	4661      	mov	r1, ip
   1af78:	4640      	mov	r0, r8
   1af7a:	f7f5 fb7b 	bl	10674 <sub_mod_n>
   1af7e:	f8cd a010 	str.w	sl, [sp, #16]
   1af82:	f10a 0a90 	add.w	sl, sl, #144	; 0x90
   1af86:	9500      	str	r5, [sp, #0]
   1af88:	4623      	mov	r3, r4
   1af8a:	f10b 0290 	add.w	r2, fp, #144	; 0x90
   1af8e:	a98a      	add	r1, sp, #552	; 0x228
   1af90:	4650      	mov	r0, sl
   1af92:	f7f5 fb6f 	bl	10674 <sub_mod_n>
   1af96:	9500      	str	r5, [sp, #0]
   1af98:	4623      	mov	r3, r4
   1af9a:	4642      	mov	r2, r8
   1af9c:	4641      	mov	r1, r8
   1af9e:	4640      	mov	r0, r8
   1afa0:	f7f5 febe 	bl	10d20 <add_mod_n>
   1afa4:	9500      	str	r5, [sp, #0]
   1afa6:	4623      	mov	r3, r4
   1afa8:	4652      	mov	r2, sl
   1afaa:	4651      	mov	r1, sl
   1afac:	4650      	mov	r0, sl
   1afae:	f7f5 feb7 	bl	10d20 <add_mod_n>
   1afb2:	9700      	str	r7, [sp, #0]
   1afb4:	4623      	mov	r3, r4
   1afb6:	f10d 0cd8 	add.w	ip, sp, #216	; 0xd8
   1afba:	4662      	mov	r2, ip
   1afbc:	4659      	mov	r1, fp
   1afbe:	a806      	add	r0, sp, #24
   1afc0:	f7f9 f9c8 	bl	14354 <mul_mont_384x>
   1afc4:	463b      	mov	r3, r7
   1afc6:	4622      	mov	r2, r4
   1afc8:	4641      	mov	r1, r8
   1afca:	4630      	mov	r0, r6
   1afcc:	f7fc fc50 	bl	17870 <sqr_mont_384x>
   1afd0:	9500      	str	r5, [sp, #0]
   1afd2:	4623      	mov	r3, r4
   1afd4:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
   1afd8:	4662      	mov	r2, ip
   1afda:	4631      	mov	r1, r6
   1afdc:	4630      	mov	r0, r6
   1afde:	f7f5 fb49 	bl	10674 <sub_mod_n>
   1afe2:	f106 0a30 	add.w	sl, r6, #48	; 0x30
   1afe6:	9500      	str	r5, [sp, #0]
   1afe8:	4623      	mov	r3, r4
   1afea:	f10d 0ca8 	add.w	ip, sp, #168	; 0xa8
   1afee:	4662      	mov	r2, ip
   1aff0:	4651      	mov	r1, sl
   1aff2:	4650      	mov	r0, sl
   1aff4:	f7f5 fb3e 	bl	10674 <sub_mod_n>
   1aff8:	9500      	str	r5, [sp, #0]
   1affa:	4623      	mov	r3, r4
   1affc:	f10d 0c18 	add.w	ip, sp, #24
   1b000:	4662      	mov	r2, ip
   1b002:	4631      	mov	r1, r6
   1b004:	4630      	mov	r0, r6
   1b006:	f7f5 fb35 	bl	10674 <sub_mod_n>
   1b00a:	9500      	str	r5, [sp, #0]
   1b00c:	4623      	mov	r3, r4
   1b00e:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
   1b012:	4662      	mov	r2, ip
   1b014:	4651      	mov	r1, sl
   1b016:	4650      	mov	r0, sl
   1b018:	f7f5 fb2c 	bl	10674 <sub_mod_n>
   1b01c:	9500      	str	r5, [sp, #0]
   1b01e:	4623      	mov	r3, r4
   1b020:	f10d 0c18 	add.w	ip, sp, #24
   1b024:	4662      	mov	r2, ip
   1b026:	4631      	mov	r1, r6
   1b028:	4630      	mov	r0, r6
   1b02a:	f7f5 fb23 	bl	10674 <sub_mod_n>
   1b02e:	9500      	str	r5, [sp, #0]
   1b030:	4623      	mov	r3, r4
   1b032:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
   1b036:	4662      	mov	r2, ip
   1b038:	4651      	mov	r1, sl
   1b03a:	4650      	mov	r0, sl
   1b03c:	f7f5 fb1a 	bl	10674 <sub_mod_n>
   1b040:	9700      	str	r7, [sp, #0]
   1b042:	4623      	mov	r3, r4
   1b044:	464a      	mov	r2, r9
   1b046:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
   1b04a:	4661      	mov	r1, ip
   1b04c:	4660      	mov	r0, ip
   1b04e:	f7f9 f981 	bl	14354 <mul_mont_384x>
   1b052:	f106 0960 	add.w	r9, r6, #96	; 0x60
   1b056:	9500      	str	r5, [sp, #0]
   1b058:	4623      	mov	r3, r4
   1b05a:	4632      	mov	r2, r6
   1b05c:	f10d 0c18 	add.w	ip, sp, #24
   1b060:	4661      	mov	r1, ip
   1b062:	4648      	mov	r0, r9
   1b064:	f7f5 fb06 	bl	10674 <sub_mod_n>
   1b068:	f106 0090 	add.w	r0, r6, #144	; 0x90
   1b06c:	9500      	str	r5, [sp, #0]
   1b06e:	4623      	mov	r3, r4
   1b070:	4652      	mov	r2, sl
   1b072:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
   1b076:	4661      	mov	r1, ip
   1b078:	4682      	mov	sl, r0
   1b07a:	f7f5 fafb 	bl	10674 <sub_mod_n>
   1b07e:	9700      	str	r7, [sp, #0]
   1b080:	4623      	mov	r3, r4
   1b082:	4642      	mov	r2, r8
   1b084:	4649      	mov	r1, r9
   1b086:	4648      	mov	r0, r9
   1b088:	f7f9 f964 	bl	14354 <mul_mont_384x>
   1b08c:	9500      	str	r5, [sp, #0]
   1b08e:	4623      	mov	r3, r4
   1b090:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
   1b094:	4662      	mov	r2, ip
   1b096:	4649      	mov	r1, r9
   1b098:	4648      	mov	r0, r9
   1b09a:	f7f5 faeb 	bl	10674 <sub_mod_n>
   1b09e:	9500      	str	r5, [sp, #0]
   1b0a0:	4623      	mov	r3, r4
   1b0a2:	f10d 0ca8 	add.w	ip, sp, #168	; 0xa8
   1b0a6:	4662      	mov	r2, ip
   1b0a8:	4651      	mov	r1, sl
   1b0aa:	4650      	mov	r0, sl
   1b0ac:	f7f5 fae2 	bl	10674 <sub_mod_n>
   1b0b0:	9500      	str	r5, [sp, #0]
   1b0b2:	4623      	mov	r3, r4
   1b0b4:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
   1b0b8:	4662      	mov	r2, ip
   1b0ba:	4649      	mov	r1, r9
   1b0bc:	4648      	mov	r0, r9
   1b0be:	f7f5 fad9 	bl	10674 <sub_mod_n>
   1b0c2:	9500      	str	r5, [sp, #0]
   1b0c4:	4623      	mov	r3, r4
   1b0c6:	f10d 0ca8 	add.w	ip, sp, #168	; 0xa8
   1b0ca:	4662      	mov	r2, ip
   1b0cc:	4651      	mov	r1, sl
   1b0ce:	4650      	mov	r0, sl
   1b0d0:	f7f5 fad0 	bl	10674 <sub_mod_n>
   1b0d4:	f106 09c0 	add.w	r9, r6, #192	; 0xc0
   1b0d8:	9500      	str	r5, [sp, #0]
   1b0da:	4623      	mov	r3, r4
   1b0dc:	f50d 7ccc 	add.w	ip, sp, #408	; 0x198
   1b0e0:	4662      	mov	r2, ip
   1b0e2:	9902      	ldr	r1, [sp, #8]
   1b0e4:	4648      	mov	r0, r9
   1b0e6:	f7f5 fe1b 	bl	10d20 <add_mod_n>
   1b0ea:	f106 0af0 	add.w	sl, r6, #240	; 0xf0
   1b0ee:	9500      	str	r5, [sp, #0]
   1b0f0:	4623      	mov	r3, r4
   1b0f2:	aa72      	add	r2, sp, #456	; 0x1c8
   1b0f4:	f10b 01f0 	add.w	r1, fp, #240	; 0xf0
   1b0f8:	4650      	mov	r0, sl
   1b0fa:	f7f5 fe11 	bl	10d20 <add_mod_n>
   1b0fe:	463b      	mov	r3, r7
   1b100:	4622      	mov	r2, r4
   1b102:	4649      	mov	r1, r9
   1b104:	4648      	mov	r0, r9
   1b106:	f7fc fbb3 	bl	17870 <sqr_mont_384x>
   1b10a:	9500      	str	r5, [sp, #0]
   1b10c:	4623      	mov	r3, r4
   1b10e:	aaae      	add	r2, sp, #696	; 0x2b8
   1b110:	4649      	mov	r1, r9
   1b112:	4648      	mov	r0, r9
   1b114:	f7f5 faae 	bl	10674 <sub_mod_n>
   1b118:	9500      	str	r5, [sp, #0]
   1b11a:	4623      	mov	r3, r4
   1b11c:	aaba      	add	r2, sp, #744	; 0x2e8
   1b11e:	4651      	mov	r1, sl
   1b120:	4650      	mov	r0, sl
   1b122:	f7f5 faa7 	bl	10674 <sub_mod_n>
   1b126:	9500      	str	r5, [sp, #0]
   1b128:	4623      	mov	r3, r4
   1b12a:	aa4e      	add	r2, sp, #312	; 0x138
   1b12c:	4649      	mov	r1, r9
   1b12e:	4648      	mov	r0, r9
   1b130:	f7f5 faa0 	bl	10674 <sub_mod_n>
   1b134:	9500      	str	r5, [sp, #0]
   1b136:	4623      	mov	r3, r4
   1b138:	aa5a      	add	r2, sp, #360	; 0x168
   1b13a:	4651      	mov	r1, sl
   1b13c:	4650      	mov	r0, sl
   1b13e:	f7f5 fa99 	bl	10674 <sub_mod_n>
   1b142:	9700      	str	r7, [sp, #0]
   1b144:	4623      	mov	r3, r4
   1b146:	9a05      	ldr	r2, [sp, #20]
   1b148:	4641      	mov	r1, r8
   1b14a:	a836      	add	r0, sp, #216	; 0xd8
   1b14c:	f7f9 f902 	bl	14354 <mul_mont_384x>
   1b150:	9700      	str	r7, [sp, #0]
   1b152:	4623      	mov	r3, r4
   1b154:	464a      	mov	r2, r9
   1b156:	9903      	ldr	r1, [sp, #12]
   1b158:	a81e      	add	r0, sp, #120	; 0x78
   1b15a:	f7f9 f8fb 	bl	14354 <mul_mont_384x>
   1b15e:	9500      	str	r5, [sp, #0]
   1b160:	4623      	mov	r3, r4
   1b162:	aa1e      	add	r2, sp, #120	; 0x78
   1b164:	a936      	add	r1, sp, #216	; 0xd8
   1b166:	4608      	mov	r0, r1
   1b168:	f7f5 fa84 	bl	10674 <sub_mod_n>
   1b16c:	9500      	str	r5, [sp, #0]
   1b16e:	4623      	mov	r3, r4
   1b170:	aa2a      	add	r2, sp, #168	; 0xa8
   1b172:	a942      	add	r1, sp, #264	; 0x108
   1b174:	4608      	mov	r0, r1
   1b176:	f7f5 fa7d 	bl	10674 <sub_mod_n>
   1b17a:	9500      	str	r5, [sp, #0]
   1b17c:	4623      	mov	r3, r4
   1b17e:	aa36      	add	r2, sp, #216	; 0xd8
   1b180:	4611      	mov	r1, r2
   1b182:	f8dd 8010 	ldr.w	r8, [sp, #16]
   1b186:	4640      	mov	r0, r8
   1b188:	f7f5 fdca 	bl	10d20 <add_mod_n>
   1b18c:	9500      	str	r5, [sp, #0]
   1b18e:	4623      	mov	r3, r4
   1b190:	aa42      	add	r2, sp, #264	; 0x108
   1b192:	4611      	mov	r1, r2
   1b194:	f108 0030 	add.w	r0, r8, #48	; 0x30
   1b198:	f7f5 fdc2 	bl	10d20 <add_mod_n>
   1b19c:	f106 03bc 	add.w	r3, r6, #188	; 0xbc
   1b1a0:	f108 00bc 	add.w	r0, r8, #188	; 0xbc
   1b1a4:	f506 768e 	add.w	r6, r6, #284	; 0x11c
   1b1a8:	f853 2f04 	ldr.w	r2, [r3, #4]!
   1b1ac:	f840 2f04 	str.w	r2, [r0, #4]!
   1b1b0:	429e      	cmp	r6, r3
   1b1b2:	d1f9      	bne.n	1b1a8 <line_add+0x334>
   1b1b4:	f50d 7d47 	add.w	sp, sp, #796	; 0x31c
   1b1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b1bc:	fffcfffd 	.word	0xfffcfffd
   1b1c0:	00028738 	.word	0x00028738

0001b1c4 <add_n_dbl_n>:
   1b1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b1c8:	b0c9      	sub	sp, #292	; 0x124
   1b1ca:	4604      	mov	r4, r0
   1b1cc:	468b      	mov	fp, r1
   1b1ce:	469a      	mov	sl, r3
   1b1d0:	9d52      	ldr	r5, [sp, #328]	; 0x148
   1b1d2:	b1e5      	cbz	r5, 1b20e <add_n_dbl_n+0x4a>
   1b1d4:	460e      	mov	r6, r1
   1b1d6:	4617      	mov	r7, r2
   1b1d8:	4699      	mov	r9, r3
   1b1da:	f04f 0800 	mov.w	r8, #0
   1b1de:	463b      	mov	r3, r7
   1b1e0:	4632      	mov	r2, r6
   1b1e2:	4631      	mov	r1, r6
   1b1e4:	4668      	mov	r0, sp
   1b1e6:	f7ff fe45 	bl	1ae74 <line_add>
   1b1ea:	4649      	mov	r1, r9
   1b1ec:	4668      	mov	r0, sp
   1b1ee:	f7f5 fd11 	bl	10c14 <line_by_Px2>
   1b1f2:	466a      	mov	r2, sp
   1b1f4:	4621      	mov	r1, r4
   1b1f6:	4620      	mov	r0, r4
   1b1f8:	f7f9 fde4 	bl	14dc4 <mul_by_xy00z0_fp12>
   1b1fc:	f108 0801 	add.w	r8, r8, #1
   1b200:	f506 7690 	add.w	r6, r6, #288	; 0x120
   1b204:	37c0      	adds	r7, #192	; 0xc0
   1b206:	f109 0960 	add.w	r9, r9, #96	; 0x60
   1b20a:	4545      	cmp	r5, r8
   1b20c:	d1e7      	bne.n	1b1de <add_n_dbl_n+0x1a>
   1b20e:	9b53      	ldr	r3, [sp, #332]	; 0x14c
   1b210:	f103 38ff 	add.w	r8, r3, #4294967295
   1b214:	b30b      	cbz	r3, 1b25a <add_n_dbl_n+0x96>
   1b216:	4621      	mov	r1, r4
   1b218:	4620      	mov	r0, r4
   1b21a:	f7f9 fc31 	bl	14a80 <sqr_fp12>
   1b21e:	b1bd      	cbz	r5, 1b250 <add_n_dbl_n+0x8c>
   1b220:	465e      	mov	r6, fp
   1b222:	46d1      	mov	r9, sl
   1b224:	2700      	movs	r7, #0
   1b226:	4632      	mov	r2, r6
   1b228:	4631      	mov	r1, r6
   1b22a:	4668      	mov	r0, sp
   1b22c:	f7ff fc5e 	bl	1aaec <line_dbl>
   1b230:	4649      	mov	r1, r9
   1b232:	4668      	mov	r0, sp
   1b234:	f7f5 fcee 	bl	10c14 <line_by_Px2>
   1b238:	466a      	mov	r2, sp
   1b23a:	4621      	mov	r1, r4
   1b23c:	4620      	mov	r0, r4
   1b23e:	f7f9 fdc1 	bl	14dc4 <mul_by_xy00z0_fp12>
   1b242:	3701      	adds	r7, #1
   1b244:	f506 7690 	add.w	r6, r6, #288	; 0x120
   1b248:	f109 0960 	add.w	r9, r9, #96	; 0x60
   1b24c:	42bd      	cmp	r5, r7
   1b24e:	d1ea      	bne.n	1b226 <add_n_dbl_n+0x62>
   1b250:	f108 38ff 	add.w	r8, r8, #4294967295
   1b254:	f1b8 3fff 	cmp.w	r8, #4294967295
   1b258:	d1dd      	bne.n	1b216 <add_n_dbl_n+0x52>
   1b25a:	b049      	add	sp, #292	; 0x124
   1b25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001b260 <miller_loop_n>:
   1b260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b264:	b089      	sub	sp, #36	; 0x24
   1b266:	af02      	add	r7, sp, #8
   1b268:	6038      	str	r0, [r7, #0]
   1b26a:	6139      	str	r1, [r7, #16]
   1b26c:	4690      	mov	r8, r2
   1b26e:	461a      	mov	r2, r3
   1b270:	617b      	str	r3, [r7, #20]
   1b272:	f8c7 d004 	str.w	sp, [r7, #4]
   1b276:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1b27a:	4669      	mov	r1, sp
   1b27c:	eba1 1343 	sub.w	r3, r1, r3, lsl #5
   1b280:	469d      	mov	sp, r3
   1b282:	ab02      	add	r3, sp, #8
   1b284:	60fb      	str	r3, [r7, #12]
   1b286:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   1b28a:	4669      	mov	r1, sp
   1b28c:	eba1 1343 	sub.w	r3, r1, r3, lsl #5
   1b290:	469d      	mov	sp, r3
   1b292:	ab02      	add	r3, sp, #8
   1b294:	60bb      	str	r3, [r7, #8]
   1b296:	2a01      	cmp	r2, #1
   1b298:	f000 808b 	beq.w	1b3b2 <miller_loop_n+0x152>
   1b29c:	697b      	ldr	r3, [r7, #20]
   1b29e:	2b00      	cmp	r3, #0
   1b2a0:	d044      	beq.n	1b32c <miller_loop_n+0xcc>
   1b2a2:	68be      	ldr	r6, [r7, #8]
   1b2a4:	68fb      	ldr	r3, [r7, #12]
   1b2a6:	f103 0abc 	add.w	sl, r3, #188	; 0xbc
   1b2aa:	693b      	ldr	r3, [r7, #16]
   1b2ac:	f103 04bc 	add.w	r4, r3, #188	; 0xbc
   1b2b0:	f04f 0b00 	mov.w	fp, #0
   1b2b4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 1b410 <miller_loop_n+0x1b0>
   1b2b8:	f109 05ec 	add.w	r5, r9, #236	; 0xec
   1b2bc:	230c      	movs	r3, #12
   1b2be:	9300      	str	r3, [sp, #0]
   1b2c0:	464b      	mov	r3, r9
   1b2c2:	4642      	mov	r2, r8
   1b2c4:	4641      	mov	r1, r8
   1b2c6:	4630      	mov	r0, r6
   1b2c8:	f7f5 fd2a 	bl	10d20 <add_mod_n>
   1b2cc:	230c      	movs	r3, #12
   1b2ce:	9300      	str	r3, [sp, #0]
   1b2d0:	464b      	mov	r3, r9
   1b2d2:	2201      	movs	r2, #1
   1b2d4:	4631      	mov	r1, r6
   1b2d6:	4630      	mov	r0, r6
   1b2d8:	f7f6 fbb6 	bl	11a48 <cneg_mod_n>
   1b2dc:	f108 0130 	add.w	r1, r8, #48	; 0x30
   1b2e0:	230c      	movs	r3, #12
   1b2e2:	9300      	str	r3, [sp, #0]
   1b2e4:	464b      	mov	r3, r9
   1b2e6:	460a      	mov	r2, r1
   1b2e8:	f106 0030 	add.w	r0, r6, #48	; 0x30
   1b2ec:	f7f5 fd18 	bl	10d20 <add_mod_n>
   1b2f0:	f1a4 03c0 	sub.w	r3, r4, #192	; 0xc0
   1b2f4:	f1aa 02c0 	sub.w	r2, sl, #192	; 0xc0
   1b2f8:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1b2fc:	f842 1f04 	str.w	r1, [r2, #4]!
   1b300:	42a3      	cmp	r3, r4
   1b302:	d1f9      	bne.n	1b2f8 <miller_loop_n+0x98>
   1b304:	f109 038c 	add.w	r3, r9, #140	; 0x8c
   1b308:	4652      	mov	r2, sl
   1b30a:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1b30e:	f842 1f04 	str.w	r1, [r2, #4]!
   1b312:	42ab      	cmp	r3, r5
   1b314:	d1f9      	bne.n	1b30a <miller_loop_n+0xaa>
   1b316:	f10b 0b01 	add.w	fp, fp, #1
   1b31a:	3660      	adds	r6, #96	; 0x60
   1b31c:	f108 0860 	add.w	r8, r8, #96	; 0x60
   1b320:	f50a 7a90 	add.w	sl, sl, #288	; 0x120
   1b324:	34c0      	adds	r4, #192	; 0xc0
   1b326:	697b      	ldr	r3, [r7, #20]
   1b328:	455b      	cmp	r3, fp
   1b32a:	d8c7      	bhi.n	1b2bc <miller_loop_n+0x5c>
   1b32c:	697d      	ldr	r5, [r7, #20]
   1b32e:	462b      	mov	r3, r5
   1b330:	f8d7 8008 	ldr.w	r8, [r7, #8]
   1b334:	4642      	mov	r2, r8
   1b336:	68fe      	ldr	r6, [r7, #12]
   1b338:	4631      	mov	r1, r6
   1b33a:	683c      	ldr	r4, [r7, #0]
   1b33c:	4620      	mov	r0, r4
   1b33e:	f7ff fd4f 	bl	1ade0 <start_dbl_n>
   1b342:	2302      	movs	r3, #2
   1b344:	9301      	str	r3, [sp, #4]
   1b346:	9500      	str	r5, [sp, #0]
   1b348:	4643      	mov	r3, r8
   1b34a:	f8d7 9010 	ldr.w	r9, [r7, #16]
   1b34e:	464a      	mov	r2, r9
   1b350:	4631      	mov	r1, r6
   1b352:	4620      	mov	r0, r4
   1b354:	f7ff ff36 	bl	1b1c4 <add_n_dbl_n>
   1b358:	2303      	movs	r3, #3
   1b35a:	9301      	str	r3, [sp, #4]
   1b35c:	9500      	str	r5, [sp, #0]
   1b35e:	4643      	mov	r3, r8
   1b360:	464a      	mov	r2, r9
   1b362:	4631      	mov	r1, r6
   1b364:	4620      	mov	r0, r4
   1b366:	f7ff ff2d 	bl	1b1c4 <add_n_dbl_n>
   1b36a:	2309      	movs	r3, #9
   1b36c:	9301      	str	r3, [sp, #4]
   1b36e:	9500      	str	r5, [sp, #0]
   1b370:	4643      	mov	r3, r8
   1b372:	464a      	mov	r2, r9
   1b374:	4631      	mov	r1, r6
   1b376:	4620      	mov	r0, r4
   1b378:	f7ff ff24 	bl	1b1c4 <add_n_dbl_n>
   1b37c:	2320      	movs	r3, #32
   1b37e:	9301      	str	r3, [sp, #4]
   1b380:	9500      	str	r5, [sp, #0]
   1b382:	4643      	mov	r3, r8
   1b384:	464a      	mov	r2, r9
   1b386:	4631      	mov	r1, r6
   1b388:	4620      	mov	r0, r4
   1b38a:	f7ff ff1b 	bl	1b1c4 <add_n_dbl_n>
   1b38e:	2310      	movs	r3, #16
   1b390:	9301      	str	r3, [sp, #4]
   1b392:	9500      	str	r5, [sp, #0]
   1b394:	4643      	mov	r3, r8
   1b396:	464a      	mov	r2, r9
   1b398:	4631      	mov	r1, r6
   1b39a:	4620      	mov	r0, r4
   1b39c:	f7ff ff12 	bl	1b1c4 <add_n_dbl_n>
   1b3a0:	4620      	mov	r0, r4
   1b3a2:	f7f6 fcd1 	bl	11d48 <conjugate_fp12>
   1b3a6:	f8d7 d004 	ldr.w	sp, [r7, #4]
   1b3aa:	371c      	adds	r7, #28
   1b3ac:	46bd      	mov	sp, r7
   1b3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b3b2:	693a      	ldr	r2, [r7, #16]
   1b3b4:	1f13      	subs	r3, r2, #4
   1b3b6:	f102 00bc 	add.w	r0, r2, #188	; 0xbc
   1b3ba:	2100      	movs	r1, #0
   1b3bc:	f853 2f04 	ldr.w	r2, [r3, #4]!
   1b3c0:	4311      	orrs	r1, r2
   1b3c2:	4283      	cmp	r3, r0
   1b3c4:	d1fa      	bne.n	1b3bc <miller_loop_n+0x15c>
   1b3c6:	1e4c      	subs	r4, r1, #1
   1b3c8:	ea24 0101 	bic.w	r1, r4, r1
   1b3cc:	0fcc      	lsrs	r4, r1, #31
   1b3ce:	f1a8 0304 	sub.w	r3, r8, #4
   1b3d2:	f108 005c 	add.w	r0, r8, #92	; 0x5c
   1b3d6:	2100      	movs	r1, #0
   1b3d8:	f853 2f04 	ldr.w	r2, [r3, #4]!
   1b3dc:	4311      	orrs	r1, r2
   1b3de:	4283      	cmp	r3, r0
   1b3e0:	d1fa      	bne.n	1b3d8 <miller_loop_n+0x178>
   1b3e2:	1e4b      	subs	r3, r1, #1
   1b3e4:	ea23 0101 	bic.w	r1, r3, r1
   1b3e8:	ea54 73d1 	orrs.w	r3, r4, r1, lsr #31
   1b3ec:	f43f af59 	beq.w	1b2a2 <miller_loop_n+0x42>
   1b3f0:	4807      	ldr	r0, [pc, #28]	; (1b410 <miller_loop_n+0x1b0>)
   1b3f2:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   1b3f6:	683a      	ldr	r2, [r7, #0]
   1b3f8:	3a04      	subs	r2, #4
   1b3fa:	f500 7033 	add.w	r0, r0, #716	; 0x2cc
   1b3fe:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1b402:	f842 1f04 	str.w	r1, [r2, #4]!
   1b406:	4283      	cmp	r3, r0
   1b408:	d1f9      	bne.n	1b3fe <miller_loop_n+0x19e>
   1b40a:	f8d7 d004 	ldr.w	sp, [r7, #4]
   1b40e:	e7cc      	b.n	1b3aa <miller_loop_n+0x14a>
   1b410:	00028738 	.word	0x00028738

0001b414 <blst_miller_loop>:
   1b414:	b508      	push	{r3, lr}
   1b416:	2301      	movs	r3, #1
   1b418:	f7ff ff22 	bl	1b260 <miller_loop_n>
   1b41c:	bd08      	pop	{r3, pc}

0001b41e <PAIRING_Aggregate_PK_in_G2>:
   1b41e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b422:	f5ad 7d38 	sub.w	sp, sp, #736	; 0x2e0
   1b426:	4698      	mov	r8, r3
   1b428:	6803      	ldr	r3, [r0, #0]
   1b42a:	f013 0602 	ands.w	r6, r3, #2
   1b42e:	f040 8148 	bne.w	1b6c2 <PAIRING_Aggregate_PK_in_G2+0x2a4>
   1b432:	4607      	mov	r7, r0
   1b434:	460d      	mov	r5, r1
   1b436:	4691      	mov	r9, r2
   1b438:	f043 0301 	orr.w	r3, r3, #1
   1b43c:	6003      	str	r3, [r0, #0]
   1b43e:	f1b8 0f00 	cmp.w	r8, #0
   1b442:	d072      	beq.n	1b52a <PAIRING_Aggregate_PK_in_G2+0x10c>
   1b444:	f1a8 0304 	sub.w	r3, r8, #4
   1b448:	f108 045c 	add.w	r4, r8, #92	; 0x5c
   1b44c:	461a      	mov	r2, r3
   1b44e:	4631      	mov	r1, r6
   1b450:	f852 0f04 	ldr.w	r0, [r2, #4]!
   1b454:	4301      	orrs	r1, r0
   1b456:	42a2      	cmp	r2, r4
   1b458:	d1fa      	bne.n	1b450 <PAIRING_Aggregate_PK_in_G2+0x32>
   1b45a:	1e48      	subs	r0, r1, #1
   1b45c:	ea20 0101 	bic.w	r1, r0, r1
   1b460:	0fc9      	lsrs	r1, r1, #31
   1b462:	d162      	bne.n	1b52a <PAIRING_Aggregate_PK_in_G2+0x10c>
   1b464:	f507 7a14 	add.w	sl, r7, #592	; 0x250
   1b468:	f50d 7e80 	add.w	lr, sp, #256	; 0x100
   1b46c:	aa28      	add	r2, sp, #160	; 0xa0
   1b46e:	4618      	mov	r0, r3
   1b470:	f850 cf04 	ldr.w	ip, [r0, #4]!
   1b474:	f842 cb04 	str.w	ip, [r2], #4
   1b478:	4572      	cmp	r2, lr
   1b47a:	d1f9      	bne.n	1b470 <PAIRING_Aggregate_PK_in_G2+0x52>
   1b47c:	461a      	mov	r2, r3
   1b47e:	f852 0f04 	ldr.w	r0, [r2, #4]!
   1b482:	4301      	orrs	r1, r0
   1b484:	42a2      	cmp	r2, r4
   1b486:	d1fa      	bne.n	1b47e <PAIRING_Aggregate_PK_in_G2+0x60>
   1b488:	1e48      	subs	r0, r1, #1
   1b48a:	ea20 0101 	bic.w	r1, r0, r1
   1b48e:	17c8      	asrs	r0, r1, #31
   1b490:	498e      	ldr	r1, [pc, #568]	; (1b6cc <PAIRING_Aggregate_PK_in_G2+0x2ae>)
   1b492:	aa3f      	add	r2, sp, #252	; 0xfc
   1b494:	f108 0c2c 	add.w	ip, r8, #44	; 0x2c
   1b498:	f851 eb04 	ldr.w	lr, [r1], #4
   1b49c:	f853 4f04 	ldr.w	r4, [r3, #4]!
   1b4a0:	ea8e 0404 	eor.w	r4, lr, r4
   1b4a4:	4004      	ands	r4, r0
   1b4a6:	ea84 040e 	eor.w	r4, r4, lr
   1b4aa:	f842 4f04 	str.w	r4, [r2, #4]!
   1b4ae:	4563      	cmp	r3, ip
   1b4b0:	d1f2      	bne.n	1b498 <PAIRING_Aggregate_PK_in_G2+0x7a>
   1b4b2:	9bc0      	ldr	r3, [sp, #768]	; 0x300
   1b4b4:	b9a3      	cbnz	r3, 1b4e0 <PAIRING_Aggregate_PK_in_G2+0xc2>
   1b4b6:	683b      	ldr	r3, [r7, #0]
   1b4b8:	f013 0f10 	tst.w	r3, #16
   1b4bc:	d01d      	beq.n	1b4fa <PAIRING_Aggregate_PK_in_G2+0xdc>
   1b4be:	9bc2      	ldr	r3, [sp, #776]	; 0x308
   1b4c0:	b1ab      	cbz	r3, 1b4ee <PAIRING_Aggregate_PK_in_G2+0xd0>
   1b4c2:	9bc1      	ldr	r3, [sp, #772]	; 0x304
   1b4c4:	b19b      	cbz	r3, 1b4ee <PAIRING_Aggregate_PK_in_G2+0xd0>
   1b4c6:	9bc2      	ldr	r3, [sp, #776]	; 0x308
   1b4c8:	9ac1      	ldr	r2, [sp, #772]	; 0x304
   1b4ca:	a928      	add	r1, sp, #160	; 0xa0
   1b4cc:	4608      	mov	r0, r1
   1b4ce:	f7f8 f804 	bl	134da <POINTonE1_mult_w5>
   1b4d2:	2300      	movs	r3, #0
   1b4d4:	aa28      	add	r2, sp, #160	; 0xa0
   1b4d6:	4651      	mov	r1, sl
   1b4d8:	4650      	mov	r0, sl
   1b4da:	f7f7 fd1f 	bl	12f1c <POINTonE1_dadd>
   1b4de:	e024      	b.n	1b52a <PAIRING_Aggregate_PK_in_G2+0x10c>
   1b4e0:	a828      	add	r0, sp, #160	; 0xa0
   1b4e2:	f7f8 f8a3 	bl	1362c <POINTonE1_in_G1>
   1b4e6:	2800      	cmp	r0, #0
   1b4e8:	d1e5      	bne.n	1b4b6 <PAIRING_Aggregate_PK_in_G2+0x98>
   1b4ea:	2003      	movs	r0, #3
   1b4ec:	e0b1      	b.n	1b652 <PAIRING_Aggregate_PK_in_G2+0x234>
   1b4ee:	4642      	mov	r2, r8
   1b4f0:	4651      	mov	r1, sl
   1b4f2:	4650      	mov	r0, sl
   1b4f4:	f7f7 fba0 	bl	12c38 <POINTonE1_dadd_affine>
   1b4f8:	e017      	b.n	1b52a <PAIRING_Aggregate_PK_in_G2+0x10c>
   1b4fa:	f043 0310 	orr.w	r3, r3, #16
   1b4fe:	603b      	str	r3, [r7, #0]
   1b500:	9bc2      	ldr	r3, [sp, #776]	; 0x308
   1b502:	b143      	cbz	r3, 1b516 <PAIRING_Aggregate_PK_in_G2+0xf8>
   1b504:	9bc1      	ldr	r3, [sp, #772]	; 0x304
   1b506:	b133      	cbz	r3, 1b516 <PAIRING_Aggregate_PK_in_G2+0xf8>
   1b508:	9bc2      	ldr	r3, [sp, #776]	; 0x308
   1b50a:	9ac1      	ldr	r2, [sp, #772]	; 0x304
   1b50c:	a928      	add	r1, sp, #160	; 0xa0
   1b50e:	4650      	mov	r0, sl
   1b510:	f7f7 ffe3 	bl	134da <POINTonE1_mult_w5>
   1b514:	e009      	b.n	1b52a <PAIRING_Aggregate_PK_in_G2+0x10c>
   1b516:	ab27      	add	r3, sp, #156	; 0x9c
   1b518:	f507 7213 	add.w	r2, r7, #588	; 0x24c
   1b51c:	a84b      	add	r0, sp, #300	; 0x12c
   1b51e:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1b522:	f842 1f04 	str.w	r1, [r2, #4]!
   1b526:	4283      	cmp	r3, r0
   1b528:	d1f9      	bne.n	1b51e <PAIRING_Aggregate_PK_in_G2+0x100>
   1b52a:	2d00      	cmp	r5, #0
   1b52c:	f000 80cb 	beq.w	1b6c6 <PAIRING_Aggregate_PK_in_G2+0x2a8>
   1b530:	f8d7 8008 	ldr.w	r8, [r7, #8]
   1b534:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
   1b538:	bf08      	it	eq
   1b53a:	f507 6847 	addeq.w	r8, r7, #3184	; 0xc70
   1b53e:	1f2c      	subs	r4, r5, #4
   1b540:	35bc      	adds	r5, #188	; 0xbc
   1b542:	4623      	mov	r3, r4
   1b544:	f853 2f04 	ldr.w	r2, [r3, #4]!
   1b548:	4316      	orrs	r6, r2
   1b54a:	42ab      	cmp	r3, r5
   1b54c:	d1fa      	bne.n	1b544 <PAIRING_Aggregate_PK_in_G2+0x126>
   1b54e:	1e73      	subs	r3, r6, #1
   1b550:	ea23 0606 	bic.w	r6, r3, r6
   1b554:	0ff6      	lsrs	r6, r6, #31
   1b556:	f040 80b2 	bne.w	1b6be <PAIRING_Aggregate_PK_in_G2+0x2a0>
   1b55a:	f1b9 0f00 	cmp.w	r9, #0
   1b55e:	d02f      	beq.n	1b5c0 <PAIRING_Aggregate_PK_in_G2+0x1a2>
   1b560:	ab28      	add	r3, sp, #160	; 0xa0
   1b562:	a858      	add	r0, sp, #352	; 0x160
   1b564:	4622      	mov	r2, r4
   1b566:	f852 1f04 	ldr.w	r1, [r2, #4]!
   1b56a:	f843 1b04 	str.w	r1, [r3], #4
   1b56e:	4283      	cmp	r3, r0
   1b570:	d1f9      	bne.n	1b566 <PAIRING_Aggregate_PK_in_G2+0x148>
   1b572:	4623      	mov	r3, r4
   1b574:	4632      	mov	r2, r6
   1b576:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1b57a:	430a      	orrs	r2, r1
   1b57c:	42ab      	cmp	r3, r5
   1b57e:	d1fa      	bne.n	1b576 <PAIRING_Aggregate_PK_in_G2+0x158>
   1b580:	f102 3cff 	add.w	ip, r2, #4294967295
   1b584:	ea2c 0c02 	bic.w	ip, ip, r2
   1b588:	ea4f 7cec 	mov.w	ip, ip, asr #31
   1b58c:	4b50      	ldr	r3, [pc, #320]	; (1b6d0 <PAIRING_Aggregate_PK_in_G2+0x2b2>)
   1b58e:	f103 0290 	add.w	r2, r3, #144	; 0x90
   1b592:	a857      	add	r0, sp, #348	; 0x15c
   1b594:	f103 0ef0 	add.w	lr, r3, #240	; 0xf0
   1b598:	4621      	mov	r1, r4
   1b59a:	f852 9b04 	ldr.w	r9, [r2], #4
   1b59e:	f851 3f04 	ldr.w	r3, [r1, #4]!
   1b5a2:	ea89 0303 	eor.w	r3, r9, r3
   1b5a6:	ea03 030c 	and.w	r3, r3, ip
   1b5aa:	ea83 0309 	eor.w	r3, r3, r9
   1b5ae:	f840 3f04 	str.w	r3, [r0, #4]!
   1b5b2:	4572      	cmp	r2, lr
   1b5b4:	d1f1      	bne.n	1b59a <PAIRING_Aggregate_PK_in_G2+0x17c>
   1b5b6:	a828      	add	r0, sp, #160	; 0xa0
   1b5b8:	f7fd ff0a 	bl	193d0 <POINTonE2_in_G2>
   1b5bc:	2800      	cmp	r0, #0
   1b5be:	d04c      	beq.n	1b65a <PAIRING_Aggregate_PK_in_G2+0x23c>
   1b5c0:	683b      	ldr	r3, [r7, #0]
   1b5c2:	f013 0f40 	tst.w	r3, #64	; 0x40
   1b5c6:	d04a      	beq.n	1b65e <PAIRING_Aggregate_PK_in_G2+0x240>
   1b5c8:	68fb      	ldr	r3, [r7, #12]
   1b5ca:	9303      	str	r3, [sp, #12]
   1b5cc:	f8cd 8008 	str.w	r8, [sp, #8]
   1b5d0:	9bc4      	ldr	r3, [sp, #784]	; 0x310
   1b5d2:	9301      	str	r3, [sp, #4]
   1b5d4:	9bc3      	ldr	r3, [sp, #780]	; 0x30c
   1b5d6:	9300      	str	r3, [sp, #0]
   1b5d8:	9bc6      	ldr	r3, [sp, #792]	; 0x318
   1b5da:	9ac5      	ldr	r2, [sp, #788]	; 0x314
   1b5dc:	2102      	movs	r1, #2
   1b5de:	a828      	add	r0, sp, #160	; 0xa0
   1b5e0:	f7fb fd0d 	bl	16ffe <hash_to_field>
   1b5e4:	aa34      	add	r2, sp, #208	; 0xd0
   1b5e6:	a928      	add	r1, sp, #160	; 0xa0
   1b5e8:	a804      	add	r0, sp, #16
   1b5ea:	f7fb f85b 	bl	166a4 <map_to_g1>
   1b5ee:	9bc2      	ldr	r3, [sp, #776]	; 0x308
   1b5f0:	b13b      	cbz	r3, 1b602 <PAIRING_Aggregate_PK_in_G2+0x1e4>
   1b5f2:	9bc1      	ldr	r3, [sp, #772]	; 0x304
   1b5f4:	b12b      	cbz	r3, 1b602 <PAIRING_Aggregate_PK_in_G2+0x1e4>
   1b5f6:	9bc2      	ldr	r3, [sp, #776]	; 0x308
   1b5f8:	9ac1      	ldr	r2, [sp, #772]	; 0x304
   1b5fa:	a904      	add	r1, sp, #16
   1b5fc:	4608      	mov	r0, r1
   1b5fe:	f7f7 ff6c 	bl	134da <POINTonE1_mult_w5>
   1b602:	a904      	add	r1, sp, #16
   1b604:	4608      	mov	r0, r1
   1b606:	f7fa f8c1 	bl	1578c <POINTonE1_from_Jacobian>
   1b60a:	687a      	ldr	r2, [r7, #4]
   1b60c:	f507 715c 	add.w	r1, r7, #880	; 0x370
   1b610:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   1b614:	eb07 1383 	add.w	r3, r7, r3, lsl #6
   1b618:	f503 735b 	add.w	r3, r3, #876	; 0x36c
   1b61c:	f854 0f04 	ldr.w	r0, [r4, #4]!
   1b620:	f843 0f04 	str.w	r0, [r3, #4]!
   1b624:	42ac      	cmp	r4, r5
   1b626:	d1f9      	bne.n	1b61c <PAIRING_Aggregate_PK_in_G2+0x1fe>
   1b628:	f507 6c17 	add.w	ip, r7, #2416	; 0x970
   1b62c:	ab03      	add	r3, sp, #12
   1b62e:	eb02 0042 	add.w	r0, r2, r2, lsl #1
   1b632:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   1b636:	f600 106c 	addw	r0, r0, #2412	; 0x96c
   1b63a:	ad1b      	add	r5, sp, #108	; 0x6c
   1b63c:	f853 4f04 	ldr.w	r4, [r3, #4]!
   1b640:	f840 4f04 	str.w	r4, [r0, #4]!
   1b644:	429d      	cmp	r5, r3
   1b646:	d1f9      	bne.n	1b63c <PAIRING_Aggregate_PK_in_G2+0x21e>
   1b648:	1c54      	adds	r4, r2, #1
   1b64a:	2a07      	cmp	r2, #7
   1b64c:	d01b      	beq.n	1b686 <PAIRING_Aggregate_PK_in_G2+0x268>
   1b64e:	607c      	str	r4, [r7, #4]
   1b650:	2000      	movs	r0, #0
   1b652:	f50d 7d38 	add.w	sp, sp, #736	; 0x2e0
   1b656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b65a:	2003      	movs	r0, #3
   1b65c:	e7f9      	b.n	1b652 <PAIRING_Aggregate_PK_in_G2+0x234>
   1b65e:	68fb      	ldr	r3, [r7, #12]
   1b660:	9303      	str	r3, [sp, #12]
   1b662:	f8cd 8008 	str.w	r8, [sp, #8]
   1b666:	9bc4      	ldr	r3, [sp, #784]	; 0x310
   1b668:	9301      	str	r3, [sp, #4]
   1b66a:	9bc3      	ldr	r3, [sp, #780]	; 0x30c
   1b66c:	9300      	str	r3, [sp, #0]
   1b66e:	9bc6      	ldr	r3, [sp, #792]	; 0x318
   1b670:	9ac5      	ldr	r2, [sp, #788]	; 0x314
   1b672:	2101      	movs	r1, #1
   1b674:	a828      	add	r0, sp, #160	; 0xa0
   1b676:	f7fb fcc2 	bl	16ffe <hash_to_field>
   1b67a:	2200      	movs	r2, #0
   1b67c:	a928      	add	r1, sp, #160	; 0xa0
   1b67e:	a804      	add	r0, sp, #16
   1b680:	f7fb f810 	bl	166a4 <map_to_g1>
   1b684:	e7b3      	b.n	1b5ee <PAIRING_Aggregate_PK_in_G2+0x1d0>
   1b686:	683c      	ldr	r4, [r7, #0]
   1b688:	f014 0420 	ands.w	r4, r4, #32
   1b68c:	d00c      	beq.n	1b6a8 <PAIRING_Aggregate_PK_in_G2+0x28a>
   1b68e:	2308      	movs	r3, #8
   1b690:	4662      	mov	r2, ip
   1b692:	a828      	add	r0, sp, #160	; 0xa0
   1b694:	f7ff fde4 	bl	1b260 <miller_loop_n>
   1b698:	f107 0010 	add.w	r0, r7, #16
   1b69c:	aa28      	add	r2, sp, #160	; 0xa0
   1b69e:	4601      	mov	r1, r0
   1b6a0:	f7f9 f96c 	bl	1497c <mul_fp12>
   1b6a4:	4634      	mov	r4, r6
   1b6a6:	e7d2      	b.n	1b64e <PAIRING_Aggregate_PK_in_G2+0x230>
   1b6a8:	2308      	movs	r3, #8
   1b6aa:	4662      	mov	r2, ip
   1b6ac:	f107 0010 	add.w	r0, r7, #16
   1b6b0:	f7ff fdd6 	bl	1b260 <miller_loop_n>
   1b6b4:	683b      	ldr	r3, [r7, #0]
   1b6b6:	f043 0320 	orr.w	r3, r3, #32
   1b6ba:	603b      	str	r3, [r7, #0]
   1b6bc:	e7c7      	b.n	1b64e <PAIRING_Aggregate_PK_in_G2+0x230>
   1b6be:	2006      	movs	r0, #6
   1b6c0:	e7c7      	b.n	1b652 <PAIRING_Aggregate_PK_in_G2+0x234>
   1b6c2:	2004      	movs	r0, #4
   1b6c4:	e7c5      	b.n	1b652 <PAIRING_Aggregate_PK_in_G2+0x234>
   1b6c6:	2000      	movs	r0, #0
   1b6c8:	e7c3      	b.n	1b652 <PAIRING_Aggregate_PK_in_G2+0x234>
   1b6ca:	bf00      	nop
   1b6cc:	000287c8 	.word	0x000287c8
   1b6d0:	00028738 	.word	0x00028738

0001b6d4 <blst_pairing_aggregate_pk_in_g2>:
   1b6d4:	b500      	push	{lr}
   1b6d6:	b089      	sub	sp, #36	; 0x24
   1b6d8:	4694      	mov	ip, r2
   1b6da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1b6dc:	9206      	str	r2, [sp, #24]
   1b6de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1b6e0:	9205      	str	r2, [sp, #20]
   1b6e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1b6e4:	9204      	str	r2, [sp, #16]
   1b6e6:	9303      	str	r3, [sp, #12]
   1b6e8:	2200      	movs	r2, #0
   1b6ea:	9202      	str	r2, [sp, #8]
   1b6ec:	9201      	str	r2, [sp, #4]
   1b6ee:	2301      	movs	r3, #1
   1b6f0:	9300      	str	r3, [sp, #0]
   1b6f2:	4663      	mov	r3, ip
   1b6f4:	f7ff fe93 	bl	1b41e <PAIRING_Aggregate_PK_in_G2>
   1b6f8:	b009      	add	sp, #36	; 0x24
   1b6fa:	f85d fb04 	ldr.w	pc, [sp], #4

0001b6fe <blst_pairing_mul_n_aggregate_pk_in_g2>:
   1b6fe:	b500      	push	{lr}
   1b700:	b089      	sub	sp, #36	; 0x24
   1b702:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   1b706:	f8cd c018 	str.w	ip, [sp, #24]
   1b70a:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
   1b70e:	f8cd c014 	str.w	ip, [sp, #20]
   1b712:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   1b716:	f8cd c010 	str.w	ip, [sp, #16]
   1b71a:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
   1b71e:	f8cd c00c 	str.w	ip, [sp, #12]
   1b722:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   1b726:	f8cd c008 	str.w	ip, [sp, #8]
   1b72a:	9301      	str	r3, [sp, #4]
   1b72c:	2301      	movs	r3, #1
   1b72e:	9300      	str	r3, [sp, #0]
   1b730:	4613      	mov	r3, r2
   1b732:	2200      	movs	r2, #0
   1b734:	f7ff fe73 	bl	1b41e <PAIRING_Aggregate_PK_in_G2>
   1b738:	b009      	add	sp, #36	; 0x24
   1b73a:	f85d fb04 	ldr.w	pc, [sp], #4

0001b73e <blst_pairing_chk_n_aggr_pk_in_g2>:
   1b73e:	b510      	push	{r4, lr}
   1b740:	b088      	sub	sp, #32
   1b742:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1b744:	9406      	str	r4, [sp, #24]
   1b746:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1b748:	9405      	str	r4, [sp, #20]
   1b74a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1b74c:	9404      	str	r4, [sp, #16]
   1b74e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1b750:	9403      	str	r4, [sp, #12]
   1b752:	2400      	movs	r4, #0
   1b754:	9402      	str	r4, [sp, #8]
   1b756:	9401      	str	r4, [sp, #4]
   1b758:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1b75a:	9400      	str	r4, [sp, #0]
   1b75c:	f7ff fe5f 	bl	1b41e <PAIRING_Aggregate_PK_in_G2>
   1b760:	b008      	add	sp, #32
   1b762:	bd10      	pop	{r4, pc}

0001b764 <blst_pairing_chk_n_mul_n_aggr_pk_in_g2>:
   1b764:	b500      	push	{lr}
   1b766:	b089      	sub	sp, #36	; 0x24
   1b768:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   1b76c:	f8cd c018 	str.w	ip, [sp, #24]
   1b770:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
   1b774:	f8cd c014 	str.w	ip, [sp, #20]
   1b778:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   1b77c:	f8cd c010 	str.w	ip, [sp, #16]
   1b780:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
   1b784:	f8cd c00c 	str.w	ip, [sp, #12]
   1b788:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   1b78c:	f8cd c008 	str.w	ip, [sp, #8]
   1b790:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
   1b794:	f8cd c004 	str.w	ip, [sp, #4]
   1b798:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   1b79c:	f8cd c000 	str.w	ip, [sp]
   1b7a0:	f7ff fe3d 	bl	1b41e <PAIRING_Aggregate_PK_in_G2>
   1b7a4:	b009      	add	sp, #36	; 0x24
   1b7a6:	f85d fb04 	ldr.w	pc, [sp], #4

0001b7aa <PAIRING_Commit>:
   1b7aa:	6843      	ldr	r3, [r0, #4]
   1b7ac:	b32b      	cbz	r3, 1b7fa <PAIRING_Commit+0x50>
   1b7ae:	b510      	push	{r4, lr}
   1b7b0:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
   1b7b4:	4604      	mov	r4, r0
   1b7b6:	6802      	ldr	r2, [r0, #0]
   1b7b8:	f012 0f20 	tst.w	r2, #32
   1b7bc:	d011      	beq.n	1b7e2 <PAIRING_Commit+0x38>
   1b7be:	f500 6217 	add.w	r2, r0, #2416	; 0x970
   1b7c2:	f500 715c 	add.w	r1, r0, #880	; 0x370
   1b7c6:	4668      	mov	r0, sp
   1b7c8:	f7ff fd4a 	bl	1b260 <miller_loop_n>
   1b7cc:	f104 0010 	add.w	r0, r4, #16
   1b7d0:	466a      	mov	r2, sp
   1b7d2:	4601      	mov	r1, r0
   1b7d4:	f7f9 f8d2 	bl	1497c <mul_fp12>
   1b7d8:	2300      	movs	r3, #0
   1b7da:	6063      	str	r3, [r4, #4]
   1b7dc:	f50d 7d10 	add.w	sp, sp, #576	; 0x240
   1b7e0:	bd10      	pop	{r4, pc}
   1b7e2:	f500 6217 	add.w	r2, r0, #2416	; 0x970
   1b7e6:	f500 715c 	add.w	r1, r0, #880	; 0x370
   1b7ea:	3010      	adds	r0, #16
   1b7ec:	f7ff fd38 	bl	1b260 <miller_loop_n>
   1b7f0:	6823      	ldr	r3, [r4, #0]
   1b7f2:	f043 0320 	orr.w	r3, r3, #32
   1b7f6:	6023      	str	r3, [r4, #0]
   1b7f8:	e7ee      	b.n	1b7d8 <PAIRING_Commit+0x2e>
   1b7fa:	4770      	bx	lr

0001b7fc <blst_pairing_commit>:
   1b7fc:	b508      	push	{r3, lr}
   1b7fe:	f7ff ffd4 	bl	1b7aa <PAIRING_Commit>
   1b802:	bd08      	pop	{r3, pc}

0001b804 <PAIRING_FinalVerify>:
   1b804:	b530      	push	{r4, r5, lr}
   1b806:	f5ad 7d59 	sub.w	sp, sp, #868	; 0x364
   1b80a:	4605      	mov	r5, r0
   1b80c:	6803      	ldr	r3, [r0, #0]
   1b80e:	f013 0020 	ands.w	r0, r3, #32
   1b812:	d03a      	beq.n	1b88a <PAIRING_FinalVerify+0x86>
   1b814:	2900      	cmp	r1, #0
   1b816:	d03b      	beq.n	1b890 <PAIRING_FinalVerify+0x8c>
   1b818:	3904      	subs	r1, #4
   1b81a:	ab48      	add	r3, sp, #288	; 0x120
   1b81c:	a8d8      	add	r0, sp, #864	; 0x360
   1b81e:	f851 2f04 	ldr.w	r2, [r1, #4]!
   1b822:	f843 2b04 	str.w	r2, [r3], #4
   1b826:	4283      	cmp	r3, r0
   1b828:	d1f9      	bne.n	1b81e <PAIRING_FinalVerify+0x1a>
   1b82a:	ac48      	add	r4, sp, #288	; 0x120
   1b82c:	4620      	mov	r0, r4
   1b82e:	f7f6 fa8b 	bl	11d48 <conjugate_fp12>
   1b832:	f105 0210 	add.w	r2, r5, #16
   1b836:	4621      	mov	r1, r4
   1b838:	4620      	mov	r0, r4
   1b83a:	f7f9 f89f 	bl	1497c <mul_fp12>
   1b83e:	4621      	mov	r1, r4
   1b840:	4620      	mov	r0, r4
   1b842:	f7ff f89d 	bl	1a980 <final_exp>
   1b846:	aa47      	add	r2, sp, #284	; 0x11c
   1b848:	4929      	ldr	r1, [pc, #164]	; (1b8f0 <PAIRING_FinalVerify+0xec>)
   1b84a:	f50d 7ebe 	add.w	lr, sp, #380	; 0x17c
   1b84e:	f04f 0c00 	mov.w	ip, #0
   1b852:	f852 3f04 	ldr.w	r3, [r2, #4]!
   1b856:	f851 0f04 	ldr.w	r0, [r1, #4]!
   1b85a:	4043      	eors	r3, r0
   1b85c:	ea4c 0c03 	orr.w	ip, ip, r3
   1b860:	4572      	cmp	r2, lr
   1b862:	d1f6      	bne.n	1b852 <PAIRING_FinalVerify+0x4e>
   1b864:	f10c 30ff 	add.w	r0, ip, #4294967295
   1b868:	ea20 000c 	bic.w	r0, r0, ip
   1b86c:	0fc0      	lsrs	r0, r0, #31
   1b86e:	ab5f      	add	r3, sp, #380	; 0x17c
   1b870:	f504 710f 	add.w	r1, r4, #572	; 0x23c
   1b874:	2200      	movs	r2, #0
   1b876:	f853 4f04 	ldr.w	r4, [r3, #4]!
   1b87a:	4322      	orrs	r2, r4
   1b87c:	4299      	cmp	r1, r3
   1b87e:	d1fa      	bne.n	1b876 <PAIRING_FinalVerify+0x72>
   1b880:	1e53      	subs	r3, r2, #1
   1b882:	ea23 0202 	bic.w	r2, r3, r2
   1b886:	ea00 70d2 	and.w	r0, r0, r2, lsr #31
   1b88a:	f50d 7d59 	add.w	sp, sp, #868	; 0x364
   1b88e:	bd30      	pop	{r4, r5, pc}
   1b890:	f013 0f10 	tst.w	r3, #16
   1b894:	d01f      	beq.n	1b8d6 <PAIRING_FinalVerify+0xd2>
   1b896:	f003 0303 	and.w	r3, r3, #3
   1b89a:	2b01      	cmp	r3, #1
   1b89c:	d003      	beq.n	1b8a6 <PAIRING_FinalVerify+0xa2>
   1b89e:	2b02      	cmp	r3, #2
   1b8a0:	d00d      	beq.n	1b8be <PAIRING_FinalVerify+0xba>
   1b8a2:	2000      	movs	r0, #0
   1b8a4:	e7f1      	b.n	1b88a <PAIRING_FinalVerify+0x86>
   1b8a6:	f505 7114 	add.w	r1, r5, #592	; 0x250
   1b8aa:	4668      	mov	r0, sp
   1b8ac:	f7f9 ff6e 	bl	1578c <POINTonE1_from_Jacobian>
   1b8b0:	2301      	movs	r3, #1
   1b8b2:	466a      	mov	r2, sp
   1b8b4:	490f      	ldr	r1, [pc, #60]	; (1b8f4 <PAIRING_FinalVerify+0xf0>)
   1b8b6:	a848      	add	r0, sp, #288	; 0x120
   1b8b8:	f7ff fcd2 	bl	1b260 <miller_loop_n>
   1b8bc:	e7b5      	b.n	1b82a <PAIRING_FinalVerify+0x26>
   1b8be:	f505 7114 	add.w	r1, r5, #592	; 0x250
   1b8c2:	4668      	mov	r0, sp
   1b8c4:	f7fc f809 	bl	178da <POINTonE2_from_Jacobian>
   1b8c8:	2301      	movs	r3, #1
   1b8ca:	4a0b      	ldr	r2, [pc, #44]	; (1b8f8 <PAIRING_FinalVerify+0xf4>)
   1b8cc:	4669      	mov	r1, sp
   1b8ce:	a848      	add	r0, sp, #288	; 0x120
   1b8d0:	f7ff fcc6 	bl	1b260 <miller_loop_n>
   1b8d4:	e7a9      	b.n	1b82a <PAIRING_FinalVerify+0x26>
   1b8d6:	4809      	ldr	r0, [pc, #36]	; (1b8fc <PAIRING_FinalVerify+0xf8>)
   1b8d8:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   1b8dc:	aa47      	add	r2, sp, #284	; 0x11c
   1b8de:	f500 7033 	add.w	r0, r0, #716	; 0x2cc
   1b8e2:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1b8e6:	f842 1f04 	str.w	r1, [r2, #4]!
   1b8ea:	4283      	cmp	r3, r0
   1b8ec:	d1f9      	bne.n	1b8e2 <PAIRING_FinalVerify+0xde>
   1b8ee:	e79c      	b.n	1b82a <PAIRING_FinalVerify+0x26>
   1b8f0:	000287c4 	.word	0x000287c4
   1b8f4:	000294b8 	.word	0x000294b8
   1b8f8:	00029428 	.word	0x00029428
   1b8fc:	00028738 	.word	0x00028738

0001b900 <blst_pairing_finalverify>:
   1b900:	b508      	push	{r3, lr}
   1b902:	f7ff ff7f 	bl	1b804 <PAIRING_FinalVerify>
   1b906:	bd08      	pop	{r3, pc}

0001b908 <blst_core_verify_pk_in_g2>:
   1b908:	b510      	push	{r4, lr}
   1b90a:	f5ad 6d49 	sub.w	sp, sp, #3216	; 0xc90
   1b90e:	2a00      	cmp	r2, #0
   1b910:	bf14      	ite	ne
   1b912:	2240      	movne	r2, #64	; 0x40
   1b914:	2200      	moveq	r2, #0
   1b916:	9208      	str	r2, [sp, #32]
   1b918:	2200      	movs	r2, #0
   1b91a:	9209      	str	r2, [sp, #36]	; 0x24
   1b91c:	f8dd 4c9c 	ldr.w	r4, [sp, #3228]	; 0xc9c
   1b920:	940a      	str	r4, [sp, #40]	; 0x28
   1b922:	f8dd 4ca0 	ldr.w	r4, [sp, #3232]	; 0xca0
   1b926:	940b      	str	r4, [sp, #44]	; 0x2c
   1b928:	f8dd 4ca8 	ldr.w	r4, [sp, #3240]	; 0xca8
   1b92c:	9406      	str	r4, [sp, #24]
   1b92e:	f8dd 4ca4 	ldr.w	r4, [sp, #3236]	; 0xca4
   1b932:	9405      	str	r4, [sp, #20]
   1b934:	f8dd 4c98 	ldr.w	r4, [sp, #3224]	; 0xc98
   1b938:	9404      	str	r4, [sp, #16]
   1b93a:	9303      	str	r3, [sp, #12]
   1b93c:	9202      	str	r2, [sp, #8]
   1b93e:	9201      	str	r2, [sp, #4]
   1b940:	2201      	movs	r2, #1
   1b942:	9200      	str	r2, [sp, #0]
   1b944:	460b      	mov	r3, r1
   1b946:	4601      	mov	r1, r0
   1b948:	a808      	add	r0, sp, #32
   1b94a:	f7ff fd68 	bl	1b41e <PAIRING_Aggregate_PK_in_G2>
   1b94e:	4604      	mov	r4, r0
   1b950:	b118      	cbz	r0, 1b95a <blst_core_verify_pk_in_g2+0x52>
   1b952:	4620      	mov	r0, r4
   1b954:	f50d 6d49 	add.w	sp, sp, #3216	; 0xc90
   1b958:	bd10      	pop	{r4, pc}
   1b95a:	a808      	add	r0, sp, #32
   1b95c:	f7ff ff25 	bl	1b7aa <PAIRING_Commit>
   1b960:	2100      	movs	r1, #0
   1b962:	a808      	add	r0, sp, #32
   1b964:	f7ff ff4e 	bl	1b804 <PAIRING_FinalVerify>
   1b968:	2800      	cmp	r0, #0
   1b96a:	bf08      	it	eq
   1b96c:	2405      	moveq	r4, #5
   1b96e:	e7f0      	b.n	1b952 <blst_core_verify_pk_in_g2+0x4a>

0001b970 <blst_aggregated_in_g1>:
   1b970:	b508      	push	{r3, lr}
   1b972:	460a      	mov	r2, r1
   1b974:	2301      	movs	r3, #1
   1b976:	4902      	ldr	r1, [pc, #8]	; (1b980 <blst_aggregated_in_g1+0x10>)
   1b978:	f7ff fc72 	bl	1b260 <miller_loop_n>
   1b97c:	bd08      	pop	{r3, pc}
   1b97e:	bf00      	nop
   1b980:	000294b8 	.word	0x000294b8

0001b984 <blst_aggregated_in_g2>:
   1b984:	b508      	push	{r3, lr}
   1b986:	2301      	movs	r3, #1
   1b988:	4a01      	ldr	r2, [pc, #4]	; (1b990 <blst_aggregated_in_g2+0xc>)
   1b98a:	f7ff fc69 	bl	1b260 <miller_loop_n>
   1b98e:	bd08      	pop	{r3, pc}
   1b990:	00029428 	.word	0x00029428

0001b994 <pre_add_n_dbl>:
   1b994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b996:	460e      	mov	r6, r1
   1b998:	461f      	mov	r7, r3
   1b99a:	f500 7490 	add.w	r4, r0, #288	; 0x120
   1b99e:	4613      	mov	r3, r2
   1b9a0:	460a      	mov	r2, r1
   1b9a2:	f7ff fa67 	bl	1ae74 <line_add>
   1b9a6:	1e7d      	subs	r5, r7, #1
   1b9a8:	b157      	cbz	r7, 1b9c0 <pre_add_n_dbl+0x2c>
   1b9aa:	4620      	mov	r0, r4
   1b9ac:	4632      	mov	r2, r6
   1b9ae:	4631      	mov	r1, r6
   1b9b0:	f504 7490 	add.w	r4, r4, #288	; 0x120
   1b9b4:	f7ff f89a 	bl	1aaec <line_dbl>
   1b9b8:	3d01      	subs	r5, #1
   1b9ba:	f1b5 3fff 	cmp.w	r5, #4294967295
   1b9be:	d1f4      	bne.n	1b9aa <pre_add_n_dbl+0x16>
   1b9c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b9c2 <precompute_lines>:
   1b9c2:	b530      	push	{r4, r5, lr}
   1b9c4:	b0c9      	sub	sp, #292	; 0x124
   1b9c6:	4604      	mov	r4, r0
   1b9c8:	460d      	mov	r5, r1
   1b9ca:	f1a1 0c04 	sub.w	ip, r1, #4
   1b9ce:	466b      	mov	r3, sp
   1b9d0:	a930      	add	r1, sp, #192	; 0xc0
   1b9d2:	f85c 2f04 	ldr.w	r2, [ip, #4]!
   1b9d6:	f843 2b04 	str.w	r2, [r3], #4
   1b9da:	428b      	cmp	r3, r1
   1b9dc:	d1f9      	bne.n	1b9d2 <precompute_lines+0x10>
   1b9de:	491b      	ldr	r1, [pc, #108]	; (1ba4c <precompute_lines+0x8a>)
   1b9e0:	f101 038c 	add.w	r3, r1, #140	; 0x8c
   1b9e4:	f10d 0cbc 	add.w	ip, sp, #188	; 0xbc
   1b9e8:	31ec      	adds	r1, #236	; 0xec
   1b9ea:	f853 2f04 	ldr.w	r2, [r3, #4]!
   1b9ee:	f84c 2f04 	str.w	r2, [ip, #4]!
   1b9f2:	428b      	cmp	r3, r1
   1b9f4:	d1f9      	bne.n	1b9ea <precompute_lines+0x28>
   1b9f6:	466a      	mov	r2, sp
   1b9f8:	4669      	mov	r1, sp
   1b9fa:	4620      	mov	r0, r4
   1b9fc:	f7ff f876 	bl	1aaec <line_dbl>
   1ba00:	2302      	movs	r3, #2
   1ba02:	462a      	mov	r2, r5
   1ba04:	4669      	mov	r1, sp
   1ba06:	f504 7090 	add.w	r0, r4, #288	; 0x120
   1ba0a:	f7ff ffc3 	bl	1b994 <pre_add_n_dbl>
   1ba0e:	2303      	movs	r3, #3
   1ba10:	462a      	mov	r2, r5
   1ba12:	4669      	mov	r1, sp
   1ba14:	f504 6090 	add.w	r0, r4, #1152	; 0x480
   1ba18:	f7ff ffbc 	bl	1b994 <pre_add_n_dbl>
   1ba1c:	2309      	movs	r3, #9
   1ba1e:	462a      	mov	r2, r5
   1ba20:	4669      	mov	r1, sp
   1ba22:	f504 6010 	add.w	r0, r4, #2304	; 0x900
   1ba26:	f7ff ffb5 	bl	1b994 <pre_add_n_dbl>
   1ba2a:	2320      	movs	r3, #32
   1ba2c:	462a      	mov	r2, r5
   1ba2e:	4669      	mov	r1, sp
   1ba30:	f504 50a2 	add.w	r0, r4, #5184	; 0x1440
   1ba34:	f7ff ffae 	bl	1b994 <pre_add_n_dbl>
   1ba38:	2310      	movs	r3, #16
   1ba3a:	462a      	mov	r2, r5
   1ba3c:	4669      	mov	r1, sp
   1ba3e:	f504 5065 	add.w	r0, r4, #14656	; 0x3940
   1ba42:	3020      	adds	r0, #32
   1ba44:	f7ff ffa6 	bl	1b994 <pre_add_n_dbl>
   1ba48:	b049      	add	sp, #292	; 0x124
   1ba4a:	bd30      	pop	{r4, r5, pc}
   1ba4c:	00028738 	.word	0x00028738

0001ba50 <blst_precompute_lines>:
   1ba50:	b508      	push	{r3, lr}
   1ba52:	f7ff ffb6 	bl	1b9c2 <precompute_lines>
   1ba56:	bd08      	pop	{r3, pc}

0001ba58 <POINTonE2_dadd_affine>:
   1ba58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ba5c:	f5ad 7d5f 	sub.w	sp, sp, #892	; 0x37c
   1ba60:	9005      	str	r0, [sp, #20]
   1ba62:	460c      	mov	r4, r1
   1ba64:	4616      	mov	r6, r2
   1ba66:	1f17      	subs	r7, r2, #4
   1ba68:	f102 00bc 	add.w	r0, r2, #188	; 0xbc
   1ba6c:	463b      	mov	r3, r7
   1ba6e:	2200      	movs	r2, #0
   1ba70:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1ba74:	430a      	orrs	r2, r1
   1ba76:	4283      	cmp	r3, r0
   1ba78:	d1fa      	bne.n	1ba70 <POINTonE2_dadd_affine+0x18>
   1ba7a:	1e53      	subs	r3, r2, #1
   1ba7c:	ea23 0202 	bic.w	r2, r3, r2
   1ba80:	0fd3      	lsrs	r3, r2, #31
   1ba82:	9304      	str	r3, [sp, #16]
   1ba84:	4dc1      	ldr	r5, [pc, #772]	; (1bd8c <POINTonE2_dadd_affine+0x334>)
   1ba86:	f04f 090c 	mov.w	r9, #12
   1ba8a:	f8cd 9000 	str.w	r9, [sp]
   1ba8e:	462b      	mov	r3, r5
   1ba90:	4632      	mov	r2, r6
   1ba92:	4631      	mov	r1, r6
   1ba94:	a836      	add	r0, sp, #216	; 0xd8
   1ba96:	f7f5 f943 	bl	10d20 <add_mod_n>
   1ba9a:	f106 0130 	add.w	r1, r6, #48	; 0x30
   1ba9e:	f8cd 9000 	str.w	r9, [sp]
   1baa2:	462b      	mov	r3, r5
   1baa4:	460a      	mov	r2, r1
   1baa6:	a842      	add	r0, sp, #264	; 0x108
   1baa8:	f7f5 f93a 	bl	10d20 <add_mod_n>
   1baac:	4bb8      	ldr	r3, [pc, #736]	; (1bd90 <POINTonE2_dadd_affine+0x338>)
   1baae:	462a      	mov	r2, r5
   1bab0:	4631      	mov	r1, r6
   1bab2:	a81e      	add	r0, sp, #120	; 0x78
   1bab4:	f7fb fedc 	bl	17870 <sqr_mont_384x>
   1bab8:	464b      	mov	r3, r9
   1baba:	462a      	mov	r2, r5
   1babc:	a91e      	add	r1, sp, #120	; 0x78
   1babe:	4608      	mov	r0, r1
   1bac0:	f7f5 f9b6 	bl	10e30 <mul_by_3_mod_n>
   1bac4:	464b      	mov	r3, r9
   1bac6:	462a      	mov	r2, r5
   1bac8:	a92a      	add	r1, sp, #168	; 0xa8
   1baca:	4608      	mov	r0, r1
   1bacc:	f7f5 f9b0 	bl	10e30 <mul_by_3_mod_n>
   1bad0:	f106 0860 	add.w	r8, r6, #96	; 0x60
   1bad4:	f8cd 9000 	str.w	r9, [sp]
   1bad8:	462b      	mov	r3, r5
   1bada:	4642      	mov	r2, r8
   1badc:	4641      	mov	r1, r8
   1bade:	a806      	add	r0, sp, #24
   1bae0:	f7f5 f91e 	bl	10d20 <add_mod_n>
   1bae4:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1bae8:	f8cd 9000 	str.w	r9, [sp]
   1baec:	462b      	mov	r3, r5
   1baee:	460a      	mov	r2, r1
   1baf0:	a812      	add	r0, sp, #72	; 0x48
   1baf2:	f7f5 f915 	bl	10d20 <add_mod_n>
   1baf6:	f104 0ac0 	add.w	sl, r4, #192	; 0xc0
   1bafa:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
   1bafe:	f504 708e 	add.w	r0, r4, #284	; 0x11c
   1bb02:	2200      	movs	r2, #0
   1bb04:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1bb08:	430a      	orrs	r2, r1
   1bb0a:	4283      	cmp	r3, r0
   1bb0c:	d1fa      	bne.n	1bb04 <POINTonE2_dadd_affine+0xac>
   1bb0e:	1e53      	subs	r3, r2, #1
   1bb10:	ea23 0202 	bic.w	r2, r3, r2
   1bb14:	0fd3      	lsrs	r3, r2, #31
   1bb16:	9303      	str	r3, [sp, #12]
   1bb18:	f8df 9274 	ldr.w	r9, [pc, #628]	; 1bd90 <POINTonE2_dadd_affine+0x338>
   1bb1c:	4d9b      	ldr	r5, [pc, #620]	; (1bd8c <POINTonE2_dadd_affine+0x334>)
   1bb1e:	464b      	mov	r3, r9
   1bb20:	462a      	mov	r2, r5
   1bb22:	4651      	mov	r1, sl
   1bb24:	a84e      	add	r0, sp, #312	; 0x138
   1bb26:	f7fb fea3 	bl	17870 <sqr_mont_384x>
   1bb2a:	f8cd 9000 	str.w	r9, [sp]
   1bb2e:	462b      	mov	r3, r5
   1bb30:	4652      	mov	r2, sl
   1bb32:	a94e      	add	r1, sp, #312	; 0x138
   1bb34:	a866      	add	r0, sp, #408	; 0x198
   1bb36:	f7f8 fc0d 	bl	14354 <mul_mont_384x>
   1bb3a:	f8cd 9000 	str.w	r9, [sp]
   1bb3e:	462b      	mov	r3, r5
   1bb40:	4642      	mov	r2, r8
   1bb42:	a966      	add	r1, sp, #408	; 0x198
   1bb44:	4608      	mov	r0, r1
   1bb46:	f7f8 fc05 	bl	14354 <mul_mont_384x>
   1bb4a:	f04f 080c 	mov.w	r8, #12
   1bb4e:	f8cd 8000 	str.w	r8, [sp]
   1bb52:	462b      	mov	r3, r5
   1bb54:	f104 0260 	add.w	r2, r4, #96	; 0x60
   1bb58:	a966      	add	r1, sp, #408	; 0x198
   1bb5a:	4608      	mov	r0, r1
   1bb5c:	f7f4 fd8a 	bl	10674 <sub_mod_n>
   1bb60:	f8cd 8000 	str.w	r8, [sp]
   1bb64:	462b      	mov	r3, r5
   1bb66:	f104 0290 	add.w	r2, r4, #144	; 0x90
   1bb6a:	a972      	add	r1, sp, #456	; 0x1c8
   1bb6c:	4608      	mov	r0, r1
   1bb6e:	f7f4 fd81 	bl	10674 <sub_mod_n>
   1bb72:	f8cd 9000 	str.w	r9, [sp]
   1bb76:	462b      	mov	r3, r5
   1bb78:	4632      	mov	r2, r6
   1bb7a:	a94e      	add	r1, sp, #312	; 0x138
   1bb7c:	4608      	mov	r0, r1
   1bb7e:	f7f8 fbe9 	bl	14354 <mul_mont_384x>
   1bb82:	f8cd 8000 	str.w	r8, [sp]
   1bb86:	462b      	mov	r3, r5
   1bb88:	4622      	mov	r2, r4
   1bb8a:	a94e      	add	r1, sp, #312	; 0x138
   1bb8c:	a87e      	add	r0, sp, #504	; 0x1f8
   1bb8e:	f7f5 f8c7 	bl	10d20 <add_mod_n>
   1bb92:	f104 0630 	add.w	r6, r4, #48	; 0x30
   1bb96:	f8cd 8000 	str.w	r8, [sp]
   1bb9a:	462b      	mov	r3, r5
   1bb9c:	4632      	mov	r2, r6
   1bb9e:	a95a      	add	r1, sp, #360	; 0x168
   1bba0:	a88a      	add	r0, sp, #552	; 0x228
   1bba2:	f7f5 f8bd 	bl	10d20 <add_mod_n>
   1bba6:	f8cd 8000 	str.w	r8, [sp]
   1bbaa:	462b      	mov	r3, r5
   1bbac:	4622      	mov	r2, r4
   1bbae:	a94e      	add	r1, sp, #312	; 0x138
   1bbb0:	4608      	mov	r0, r1
   1bbb2:	f7f4 fd5f 	bl	10674 <sub_mod_n>
   1bbb6:	f8cd 8000 	str.w	r8, [sp]
   1bbba:	462b      	mov	r3, r5
   1bbbc:	4632      	mov	r2, r6
   1bbbe:	a95a      	add	r1, sp, #360	; 0x168
   1bbc0:	4608      	mov	r0, r1
   1bbc2:	f7f4 fd57 	bl	10674 <sub_mod_n>
   1bbc6:	f8cd 9000 	str.w	r9, [sp]
   1bbca:	462b      	mov	r3, r5
   1bbcc:	4652      	mov	r2, sl
   1bbce:	a94e      	add	r1, sp, #312	; 0x138
   1bbd0:	a8c6      	add	r0, sp, #792	; 0x318
   1bbd2:	f7f8 fbbf 	bl	14354 <mul_mont_384x>
   1bbd6:	f50d 7c9a 	add.w	ip, sp, #308	; 0x134
   1bbda:	a87d      	add	r0, sp, #500	; 0x1f4
   1bbdc:	4663      	mov	r3, ip
   1bbde:	2200      	movs	r2, #0
   1bbe0:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1bbe4:	430a      	orrs	r2, r1
   1bbe6:	4283      	cmp	r3, r0
   1bbe8:	d1fa      	bne.n	1bbe0 <POINTonE2_dadd_affine+0x188>
   1bbea:	1e50      	subs	r0, r2, #1
   1bbec:	ea20 0002 	bic.w	r0, r0, r2
   1bbf0:	17c0      	asrs	r0, r0, #31
   1bbf2:	3c04      	subs	r4, #4
   1bbf4:	ad96      	add	r5, sp, #600	; 0x258
   1bbf6:	f50d 7846 	add.w	r8, sp, #792	; 0x318
   1bbfa:	462a      	mov	r2, r5
   1bbfc:	4626      	mov	r6, r4
   1bbfe:	46be      	mov	lr, r7
   1bc00:	f856 1f04 	ldr.w	r1, [r6, #4]!
   1bc04:	f85e 3f04 	ldr.w	r3, [lr, #4]!
   1bc08:	404b      	eors	r3, r1
   1bc0a:	4003      	ands	r3, r0
   1bc0c:	404b      	eors	r3, r1
   1bc0e:	f842 3b04 	str.w	r3, [r2], #4
   1bc12:	4542      	cmp	r2, r8
   1bc14:	d1f4      	bne.n	1bc00 <POINTonE2_dadd_affine+0x1a8>
   1bc16:	aa05      	add	r2, sp, #20
   1bc18:	aec5      	add	r6, sp, #788	; 0x314
   1bc1a:	f10d 0a74 	add.w	sl, sp, #116	; 0x74
   1bc1e:	46b6      	mov	lr, r6
   1bc20:	4611      	mov	r1, r2
   1bc22:	f85e 9f04 	ldr.w	r9, [lr, #4]!
   1bc26:	f851 3f04 	ldr.w	r3, [r1, #4]!
   1bc2a:	ea89 0303 	eor.w	r3, r9, r3
   1bc2e:	4003      	ands	r3, r0
   1bc30:	ea83 0309 	eor.w	r3, r3, r9
   1bc34:	f8ce 3000 	str.w	r3, [lr]
   1bc38:	4551      	cmp	r1, sl
   1bc3a:	d1f2      	bne.n	1bc22 <POINTonE2_dadd_affine+0x1ca>
   1bc3c:	a94d      	add	r1, sp, #308	; 0x134
   1bc3e:	468e      	mov	lr, r1
   1bc40:	f85c 1f04 	ldr.w	r1, [ip, #4]!
   1bc44:	f852 3f04 	ldr.w	r3, [r2, #4]!
   1bc48:	404b      	eors	r3, r1
   1bc4a:	4003      	ands	r3, r0
   1bc4c:	404b      	eors	r3, r1
   1bc4e:	f8cc 3000 	str.w	r3, [ip]
   1bc52:	4572      	cmp	r2, lr
   1bc54:	d1f4      	bne.n	1bc40 <POINTonE2_dadd_affine+0x1e8>
   1bc56:	f8df a138 	ldr.w	sl, [pc, #312]	; 1bd90 <POINTonE2_dadd_affine+0x338>
   1bc5a:	f8df 9130 	ldr.w	r9, [pc, #304]	; 1bd8c <POINTonE2_dadd_affine+0x334>
   1bc5e:	4653      	mov	r3, sl
   1bc60:	464a      	mov	r2, r9
   1bc62:	a94e      	add	r1, sp, #312	; 0x138
   1bc64:	a806      	add	r0, sp, #24
   1bc66:	f7fb fe03 	bl	17870 <sqr_mont_384x>
   1bc6a:	f8cd a000 	str.w	sl, [sp]
   1bc6e:	464b      	mov	r3, r9
   1bc70:	aa4e      	add	r2, sp, #312	; 0x138
   1bc72:	a906      	add	r1, sp, #24
   1bc74:	a81e      	add	r0, sp, #120	; 0x78
   1bc76:	f7f8 fb6d 	bl	14354 <mul_mont_384x>
   1bc7a:	f8cd a000 	str.w	sl, [sp]
   1bc7e:	464b      	mov	r3, r9
   1bc80:	aaae      	add	r2, sp, #696	; 0x2b8
   1bc82:	a91e      	add	r1, sp, #120	; 0x78
   1bc84:	4608      	mov	r0, r1
   1bc86:	f7f8 fb65 	bl	14354 <mul_mont_384x>
   1bc8a:	f8cd a000 	str.w	sl, [sp]
   1bc8e:	464b      	mov	r3, r9
   1bc90:	aa96      	add	r2, sp, #600	; 0x258
   1bc92:	a906      	add	r1, sp, #24
   1bc94:	a8ae      	add	r0, sp, #696	; 0x2b8
   1bc96:	f7f8 fb5d 	bl	14354 <mul_mont_384x>
   1bc9a:	f8cd a000 	str.w	sl, [sp]
   1bc9e:	464b      	mov	r3, r9
   1bca0:	aa7e      	add	r2, sp, #504	; 0x1f8
   1bca2:	a906      	add	r1, sp, #24
   1bca4:	4608      	mov	r0, r1
   1bca6:	f7f8 fb55 	bl	14354 <mul_mont_384x>
   1bcaa:	4653      	mov	r3, sl
   1bcac:	464a      	mov	r2, r9
   1bcae:	a966      	add	r1, sp, #408	; 0x198
   1bcb0:	a896      	add	r0, sp, #600	; 0x258
   1bcb2:	f7fb fddd 	bl	17870 <sqr_mont_384x>
   1bcb6:	f04f 0b0c 	mov.w	fp, #12
   1bcba:	f8cd b000 	str.w	fp, [sp]
   1bcbe:	464b      	mov	r3, r9
   1bcc0:	aa06      	add	r2, sp, #24
   1bcc2:	a996      	add	r1, sp, #600	; 0x258
   1bcc4:	4608      	mov	r0, r1
   1bcc6:	f7f4 fcd5 	bl	10674 <sub_mod_n>
   1bcca:	f8cd b000 	str.w	fp, [sp]
   1bcce:	464b      	mov	r3, r9
   1bcd0:	aa12      	add	r2, sp, #72	; 0x48
   1bcd2:	a9a2      	add	r1, sp, #648	; 0x288
   1bcd4:	4608      	mov	r0, r1
   1bcd6:	f7f4 fccd 	bl	10674 <sub_mod_n>
   1bcda:	f8cd b000 	str.w	fp, [sp]
   1bcde:	464b      	mov	r3, r9
   1bce0:	aa96      	add	r2, sp, #600	; 0x258
   1bce2:	a9ae      	add	r1, sp, #696	; 0x2b8
   1bce4:	4608      	mov	r0, r1
   1bce6:	f7f4 fcc5 	bl	10674 <sub_mod_n>
   1bcea:	f8cd b000 	str.w	fp, [sp]
   1bcee:	464b      	mov	r3, r9
   1bcf0:	aaa2      	add	r2, sp, #648	; 0x288
   1bcf2:	a9ba      	add	r1, sp, #744	; 0x2e8
   1bcf4:	4608      	mov	r0, r1
   1bcf6:	f7f4 fcbd 	bl	10674 <sub_mod_n>
   1bcfa:	f8cd a000 	str.w	sl, [sp]
   1bcfe:	464b      	mov	r3, r9
   1bd00:	aa66      	add	r2, sp, #408	; 0x198
   1bd02:	a9ae      	add	r1, sp, #696	; 0x2b8
   1bd04:	4608      	mov	r0, r1
   1bd06:	f7f8 fb25 	bl	14354 <mul_mont_384x>
   1bd0a:	f8cd b000 	str.w	fp, [sp]
   1bd0e:	464b      	mov	r3, r9
   1bd10:	aa1e      	add	r2, sp, #120	; 0x78
   1bd12:	a9ae      	add	r1, sp, #696	; 0x2b8
   1bd14:	4608      	mov	r0, r1
   1bd16:	f7f4 fcad 	bl	10674 <sub_mod_n>
   1bd1a:	f8cd b000 	str.w	fp, [sp]
   1bd1e:	464b      	mov	r3, r9
   1bd20:	aa2a      	add	r2, sp, #168	; 0xa8
   1bd22:	a9ba      	add	r1, sp, #744	; 0x2e8
   1bd24:	4608      	mov	r0, r1
   1bd26:	f7f4 fca5 	bl	10674 <sub_mod_n>
   1bd2a:	9b03      	ldr	r3, [sp, #12]
   1bd2c:	425a      	negs	r2, r3
   1bd2e:	4629      	mov	r1, r5
   1bd30:	6808      	ldr	r0, [r1, #0]
   1bd32:	f857 3f04 	ldr.w	r3, [r7, #4]!
   1bd36:	4043      	eors	r3, r0
   1bd38:	4013      	ands	r3, r2
   1bd3a:	4043      	eors	r3, r0
   1bd3c:	f841 3b04 	str.w	r3, [r1], #4
   1bd40:	4541      	cmp	r1, r8
   1bd42:	d1f5      	bne.n	1bd30 <POINTonE2_dadd_affine+0x2d8>
   1bd44:	4f11      	ldr	r7, [pc, #68]	; (1bd8c <POINTonE2_dadd_affine+0x334>)
   1bd46:	f107 018c 	add.w	r1, r7, #140	; 0x8c
   1bd4a:	37ec      	adds	r7, #236	; 0xec
   1bd4c:	f856 0f04 	ldr.w	r0, [r6, #4]!
   1bd50:	f851 3f04 	ldr.w	r3, [r1, #4]!
   1bd54:	4043      	eors	r3, r0
   1bd56:	4013      	ands	r3, r2
   1bd58:	4043      	eors	r3, r0
   1bd5a:	6033      	str	r3, [r6, #0]
   1bd5c:	42b9      	cmp	r1, r7
   1bd5e:	d1f5      	bne.n	1bd4c <POINTonE2_dadd_affine+0x2f4>
   1bd60:	9b04      	ldr	r3, [sp, #16]
   1bd62:	4259      	negs	r1, r3
   1bd64:	9b05      	ldr	r3, [sp, #20]
   1bd66:	1f18      	subs	r0, r3, #4
   1bd68:	f505 7690 	add.w	r6, r5, #288	; 0x120
   1bd6c:	f855 2b04 	ldr.w	r2, [r5], #4
   1bd70:	f854 3f04 	ldr.w	r3, [r4, #4]!
   1bd74:	4053      	eors	r3, r2
   1bd76:	400b      	ands	r3, r1
   1bd78:	4053      	eors	r3, r2
   1bd7a:	f840 3f04 	str.w	r3, [r0, #4]!
   1bd7e:	42b5      	cmp	r5, r6
   1bd80:	d1f4      	bne.n	1bd6c <POINTonE2_dadd_affine+0x314>
   1bd82:	f50d 7d5f 	add.w	sp, sp, #892	; 0x37c
   1bd86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd8a:	bf00      	nop
   1bd8c:	00028738 	.word	0x00028738
   1bd90:	fffcfffd 	.word	0xfffcfffd

0001bd94 <PAIRING_Aggregate_PK_in_G1>:
   1bd94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd98:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
   1bd9c:	4698      	mov	r8, r3
   1bd9e:	6803      	ldr	r3, [r0, #0]
   1bda0:	f013 0501 	ands.w	r5, r3, #1
   1bda4:	f040 818b 	bne.w	1c0be <PAIRING_Aggregate_PK_in_G1+0x32a>
   1bda8:	4607      	mov	r7, r0
   1bdaa:	460e      	mov	r6, r1
   1bdac:	4691      	mov	r9, r2
   1bdae:	f043 0302 	orr.w	r3, r3, #2
   1bdb2:	6003      	str	r3, [r0, #0]
   1bdb4:	f1b8 0f00 	cmp.w	r8, #0
   1bdb8:	d07d      	beq.n	1beb6 <PAIRING_Aggregate_PK_in_G1+0x122>
   1bdba:	f1a8 0204 	sub.w	r2, r8, #4
   1bdbe:	f108 04bc 	add.w	r4, r8, #188	; 0xbc
   1bdc2:	4613      	mov	r3, r2
   1bdc4:	4629      	mov	r1, r5
   1bdc6:	f853 0f04 	ldr.w	r0, [r3, #4]!
   1bdca:	4301      	orrs	r1, r0
   1bdcc:	42a3      	cmp	r3, r4
   1bdce:	d1fa      	bne.n	1bdc6 <PAIRING_Aggregate_PK_in_G1+0x32>
   1bdd0:	1e48      	subs	r0, r1, #1
   1bdd2:	ea20 0101 	bic.w	r1, r0, r1
   1bdd6:	0fc9      	lsrs	r1, r1, #31
   1bdd8:	d16d      	bne.n	1beb6 <PAIRING_Aggregate_PK_in_G1+0x122>
   1bdda:	f507 7a14 	add.w	sl, r7, #592	; 0x250
   1bdde:	f50d 7e20 	add.w	lr, sp, #640	; 0x280
   1bde2:	ab70      	add	r3, sp, #448	; 0x1c0
   1bde4:	4610      	mov	r0, r2
   1bde6:	f850 cf04 	ldr.w	ip, [r0, #4]!
   1bdea:	f843 cb04 	str.w	ip, [r3], #4
   1bdee:	4573      	cmp	r3, lr
   1bdf0:	d1f9      	bne.n	1bde6 <PAIRING_Aggregate_PK_in_G1+0x52>
   1bdf2:	4613      	mov	r3, r2
   1bdf4:	f853 0f04 	ldr.w	r0, [r3, #4]!
   1bdf8:	4301      	orrs	r1, r0
   1bdfa:	42a3      	cmp	r3, r4
   1bdfc:	d1fa      	bne.n	1bdf4 <PAIRING_Aggregate_PK_in_G1+0x60>
   1bdfe:	1e48      	subs	r0, r1, #1
   1be00:	ea20 0101 	bic.w	r1, r0, r1
   1be04:	17c8      	asrs	r0, r1, #31
   1be06:	4cb0      	ldr	r4, [pc, #704]	; (1c0c8 <PAIRING_Aggregate_PK_in_G1+0x334>)
   1be08:	f104 0390 	add.w	r3, r4, #144	; 0x90
   1be0c:	a99f      	add	r1, sp, #636	; 0x27c
   1be0e:	f104 0cf0 	add.w	ip, r4, #240	; 0xf0
   1be12:	f853 eb04 	ldr.w	lr, [r3], #4
   1be16:	f852 4f04 	ldr.w	r4, [r2, #4]!
   1be1a:	ea8e 0404 	eor.w	r4, lr, r4
   1be1e:	4004      	ands	r4, r0
   1be20:	ea84 040e 	eor.w	r4, r4, lr
   1be24:	f841 4f04 	str.w	r4, [r1, #4]!
   1be28:	4563      	cmp	r3, ip
   1be2a:	d1f2      	bne.n	1be12 <PAIRING_Aggregate_PK_in_G1+0x7e>
   1be2c:	f8dd 3428 	ldr.w	r3, [sp, #1064]	; 0x428
   1be30:	b9c3      	cbnz	r3, 1be64 <PAIRING_Aggregate_PK_in_G1+0xd0>
   1be32:	683b      	ldr	r3, [r7, #0]
   1be34:	f013 0f10 	tst.w	r3, #16
   1be38:	d021      	beq.n	1be7e <PAIRING_Aggregate_PK_in_G1+0xea>
   1be3a:	f8dd 3430 	ldr.w	r3, [sp, #1072]	; 0x430
   1be3e:	b1c3      	cbz	r3, 1be72 <PAIRING_Aggregate_PK_in_G1+0xde>
   1be40:	f8dd 342c 	ldr.w	r3, [sp, #1068]	; 0x42c
   1be44:	b1ab      	cbz	r3, 1be72 <PAIRING_Aggregate_PK_in_G1+0xde>
   1be46:	f8dd 3430 	ldr.w	r3, [sp, #1072]	; 0x430
   1be4a:	f8dd 242c 	ldr.w	r2, [sp, #1068]	; 0x42c
   1be4e:	a970      	add	r1, sp, #448	; 0x1c0
   1be50:	4608      	mov	r0, r1
   1be52:	f7fd f9a5 	bl	191a0 <POINTonE2_mult_w5>
   1be56:	2300      	movs	r3, #0
   1be58:	aa70      	add	r2, sp, #448	; 0x1c0
   1be5a:	4651      	mov	r1, sl
   1be5c:	4650      	mov	r0, sl
   1be5e:	f7fc fe4d 	bl	18afc <POINTonE2_dadd>
   1be62:	e028      	b.n	1beb6 <PAIRING_Aggregate_PK_in_G1+0x122>
   1be64:	a870      	add	r0, sp, #448	; 0x1c0
   1be66:	f7fd fab3 	bl	193d0 <POINTonE2_in_G2>
   1be6a:	2800      	cmp	r0, #0
   1be6c:	d1e1      	bne.n	1be32 <PAIRING_Aggregate_PK_in_G1+0x9e>
   1be6e:	2003      	movs	r0, #3
   1be70:	e0e9      	b.n	1c046 <PAIRING_Aggregate_PK_in_G1+0x2b2>
   1be72:	4642      	mov	r2, r8
   1be74:	4651      	mov	r1, sl
   1be76:	4650      	mov	r0, sl
   1be78:	f7ff fdee 	bl	1ba58 <POINTonE2_dadd_affine>
   1be7c:	e01b      	b.n	1beb6 <PAIRING_Aggregate_PK_in_G1+0x122>
   1be7e:	f043 0310 	orr.w	r3, r3, #16
   1be82:	603b      	str	r3, [r7, #0]
   1be84:	f8dd 3430 	ldr.w	r3, [sp, #1072]	; 0x430
   1be88:	b15b      	cbz	r3, 1bea2 <PAIRING_Aggregate_PK_in_G1+0x10e>
   1be8a:	f8dd 342c 	ldr.w	r3, [sp, #1068]	; 0x42c
   1be8e:	b143      	cbz	r3, 1bea2 <PAIRING_Aggregate_PK_in_G1+0x10e>
   1be90:	f8dd 3430 	ldr.w	r3, [sp, #1072]	; 0x430
   1be94:	f8dd 242c 	ldr.w	r2, [sp, #1068]	; 0x42c
   1be98:	a970      	add	r1, sp, #448	; 0x1c0
   1be9a:	4650      	mov	r0, sl
   1be9c:	f7fd f980 	bl	191a0 <POINTonE2_mult_w5>
   1bea0:	e009      	b.n	1beb6 <PAIRING_Aggregate_PK_in_G1+0x122>
   1bea2:	ab6f      	add	r3, sp, #444	; 0x1bc
   1bea4:	f507 7213 	add.w	r2, r7, #588	; 0x24c
   1bea8:	a8b7      	add	r0, sp, #732	; 0x2dc
   1beaa:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1beae:	f842 1f04 	str.w	r1, [r2, #4]!
   1beb2:	4283      	cmp	r3, r0
   1beb4:	d1f9      	bne.n	1beaa <PAIRING_Aggregate_PK_in_G1+0x116>
   1beb6:	2e00      	cmp	r6, #0
   1beb8:	f000 8103 	beq.w	1c0c2 <PAIRING_Aggregate_PK_in_G1+0x32e>
   1bebc:	f8d7 b008 	ldr.w	fp, [r7, #8]
   1bec0:	f1bb 0f2a 	cmp.w	fp, #42	; 0x2a
   1bec4:	bf08      	it	eq
   1bec6:	f507 6b47 	addeq.w	fp, r7, #3184	; 0xc70
   1beca:	f1a6 0804 	sub.w	r8, r6, #4
   1bece:	46b2      	mov	sl, r6
   1bed0:	f106 045c 	add.w	r4, r6, #92	; 0x5c
   1bed4:	4643      	mov	r3, r8
   1bed6:	f853 2f04 	ldr.w	r2, [r3, #4]!
   1beda:	4315      	orrs	r5, r2
   1bedc:	42a3      	cmp	r3, r4
   1bede:	d1fa      	bne.n	1bed6 <PAIRING_Aggregate_PK_in_G1+0x142>
   1bee0:	1e6b      	subs	r3, r5, #1
   1bee2:	ea23 0505 	bic.w	r5, r3, r5
   1bee6:	0fed      	lsrs	r5, r5, #31
   1bee8:	f040 80e7 	bne.w	1c0ba <PAIRING_Aggregate_PK_in_G1+0x326>
   1beec:	f1b9 0f00 	cmp.w	r9, #0
   1bef0:	d02d      	beq.n	1bf4e <PAIRING_Aggregate_PK_in_G1+0x1ba>
   1bef2:	ab70      	add	r3, sp, #448	; 0x1c0
   1bef4:	a888      	add	r0, sp, #544	; 0x220
   1bef6:	4642      	mov	r2, r8
   1bef8:	f852 1f04 	ldr.w	r1, [r2, #4]!
   1befc:	f843 1b04 	str.w	r1, [r3], #4
   1bf00:	4283      	cmp	r3, r0
   1bf02:	d1f9      	bne.n	1bef8 <PAIRING_Aggregate_PK_in_G1+0x164>
   1bf04:	4643      	mov	r3, r8
   1bf06:	462a      	mov	r2, r5
   1bf08:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1bf0c:	430a      	orrs	r2, r1
   1bf0e:	42a3      	cmp	r3, r4
   1bf10:	d1fa      	bne.n	1bf08 <PAIRING_Aggregate_PK_in_G1+0x174>
   1bf12:	f102 3cff 	add.w	ip, r2, #4294967295
   1bf16:	ea2c 0c02 	bic.w	ip, ip, r2
   1bf1a:	ea4f 7cec 	mov.w	ip, ip, asr #31
   1bf1e:	486b      	ldr	r0, [pc, #428]	; (1c0cc <PAIRING_Aggregate_PK_in_G1+0x338>)
   1bf20:	a987      	add	r1, sp, #540	; 0x21c
   1bf22:	f10a 0e2c 	add.w	lr, sl, #44	; 0x2c
   1bf26:	4642      	mov	r2, r8
   1bf28:	f850 9b04 	ldr.w	r9, [r0], #4
   1bf2c:	f852 3f04 	ldr.w	r3, [r2, #4]!
   1bf30:	ea89 0303 	eor.w	r3, r9, r3
   1bf34:	ea03 030c 	and.w	r3, r3, ip
   1bf38:	ea83 0309 	eor.w	r3, r3, r9
   1bf3c:	f841 3f04 	str.w	r3, [r1, #4]!
   1bf40:	4572      	cmp	r2, lr
   1bf42:	d1f1      	bne.n	1bf28 <PAIRING_Aggregate_PK_in_G1+0x194>
   1bf44:	a870      	add	r0, sp, #448	; 0x1c0
   1bf46:	f7f7 fb71 	bl	1362c <POINTonE1_in_G1>
   1bf4a:	2800      	cmp	r0, #0
   1bf4c:	d07f      	beq.n	1c04e <PAIRING_Aggregate_PK_in_G1+0x2ba>
   1bf4e:	683b      	ldr	r3, [r7, #0]
   1bf50:	f013 0f40 	tst.w	r3, #64	; 0x40
   1bf54:	d07d      	beq.n	1c052 <PAIRING_Aggregate_PK_in_G1+0x2be>
   1bf56:	68fb      	ldr	r3, [r7, #12]
   1bf58:	9303      	str	r3, [sp, #12]
   1bf5a:	f8cd b008 	str.w	fp, [sp, #8]
   1bf5e:	f8dd 3438 	ldr.w	r3, [sp, #1080]	; 0x438
   1bf62:	9301      	str	r3, [sp, #4]
   1bf64:	f8dd 3434 	ldr.w	r3, [sp, #1076]	; 0x434
   1bf68:	9300      	str	r3, [sp, #0]
   1bf6a:	f8dd 3440 	ldr.w	r3, [sp, #1088]	; 0x440
   1bf6e:	f8dd 243c 	ldr.w	r2, [sp, #1084]	; 0x43c
   1bf72:	2104      	movs	r1, #4
   1bf74:	a870      	add	r0, sp, #448	; 0x1c0
   1bf76:	f7fb f842 	bl	16ffe <hash_to_field>
   1bf7a:	aa88      	add	r2, sp, #544	; 0x220
   1bf7c:	a970      	add	r1, sp, #448	; 0x1c0
   1bf7e:	a828      	add	r0, sp, #160	; 0xa0
   1bf80:	f7fd fee8 	bl	19d54 <map_to_g2>
   1bf84:	a928      	add	r1, sp, #160	; 0xa0
   1bf86:	4608      	mov	r0, r1
   1bf88:	f7fb fca7 	bl	178da <POINTonE2_from_Jacobian>
   1bf8c:	f8dd 3430 	ldr.w	r3, [sp, #1072]	; 0x430
   1bf90:	b393      	cbz	r3, 1bff8 <PAIRING_Aggregate_PK_in_G1+0x264>
   1bf92:	f8dd 342c 	ldr.w	r3, [sp, #1068]	; 0x42c
   1bf96:	b37b      	cbz	r3, 1bff8 <PAIRING_Aggregate_PK_in_G1+0x264>
   1bf98:	ab04      	add	r3, sp, #16
   1bf9a:	a81c      	add	r0, sp, #112	; 0x70
   1bf9c:	4642      	mov	r2, r8
   1bf9e:	f852 1f04 	ldr.w	r1, [r2, #4]!
   1bfa2:	f843 1b04 	str.w	r1, [r3], #4
   1bfa6:	4283      	cmp	r3, r0
   1bfa8:	d1f9      	bne.n	1bf9e <PAIRING_Aggregate_PK_in_G1+0x20a>
   1bfaa:	4643      	mov	r3, r8
   1bfac:	462a      	mov	r2, r5
   1bfae:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1bfb2:	430a      	orrs	r2, r1
   1bfb4:	42a3      	cmp	r3, r4
   1bfb6:	d1fa      	bne.n	1bfae <PAIRING_Aggregate_PK_in_G1+0x21a>
   1bfb8:	1e54      	subs	r4, r2, #1
   1bfba:	ea24 0202 	bic.w	r2, r4, r2
   1bfbe:	17d4      	asrs	r4, r2, #31
   1bfc0:	4842      	ldr	r0, [pc, #264]	; (1c0cc <PAIRING_Aggregate_PK_in_G1+0x338>)
   1bfc2:	a91b      	add	r1, sp, #108	; 0x6c
   1bfc4:	f10a 0a2c 	add.w	sl, sl, #44	; 0x2c
   1bfc8:	f850 2b04 	ldr.w	r2, [r0], #4
   1bfcc:	f858 3f04 	ldr.w	r3, [r8, #4]!
   1bfd0:	4053      	eors	r3, r2
   1bfd2:	4023      	ands	r3, r4
   1bfd4:	4053      	eors	r3, r2
   1bfd6:	f841 3f04 	str.w	r3, [r1, #4]!
   1bfda:	45d0      	cmp	r8, sl
   1bfdc:	d1f4      	bne.n	1bfc8 <PAIRING_Aggregate_PK_in_G1+0x234>
   1bfde:	f8dd 3430 	ldr.w	r3, [sp, #1072]	; 0x430
   1bfe2:	f8dd 242c 	ldr.w	r2, [sp, #1068]	; 0x42c
   1bfe6:	a904      	add	r1, sp, #16
   1bfe8:	4608      	mov	r0, r1
   1bfea:	f7f7 fa76 	bl	134da <POINTonE1_mult_w5>
   1bfee:	a904      	add	r1, sp, #16
   1bff0:	4608      	mov	r0, r1
   1bff2:	f7f9 fbcb 	bl	1578c <POINTonE1_from_Jacobian>
   1bff6:	ae04      	add	r6, sp, #16
   1bff8:	687c      	ldr	r4, [r7, #4]
   1bffa:	f507 715c 	add.w	r1, r7, #880	; 0x370
   1bffe:	ab27      	add	r3, sp, #156	; 0x9c
   1c000:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1c004:	eb07 1282 	add.w	r2, r7, r2, lsl #6
   1c008:	f502 725b 	add.w	r2, r2, #876	; 0x36c
   1c00c:	f50d 7cae 	add.w	ip, sp, #348	; 0x15c
   1c010:	f853 0f04 	ldr.w	r0, [r3, #4]!
   1c014:	f842 0f04 	str.w	r0, [r2, #4]!
   1c018:	4563      	cmp	r3, ip
   1c01a:	d1f9      	bne.n	1c010 <PAIRING_Aggregate_PK_in_G1+0x27c>
   1c01c:	f507 6c17 	add.w	ip, r7, #2416	; 0x970
   1c020:	1f33      	subs	r3, r6, #4
   1c022:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   1c026:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   1c02a:	f600 106c 	addw	r0, r0, #2412	; 0x96c
   1c02e:	365c      	adds	r6, #92	; 0x5c
   1c030:	f853 2f04 	ldr.w	r2, [r3, #4]!
   1c034:	f840 2f04 	str.w	r2, [r0, #4]!
   1c038:	42b3      	cmp	r3, r6
   1c03a:	d1f9      	bne.n	1c030 <PAIRING_Aggregate_PK_in_G1+0x29c>
   1c03c:	1c66      	adds	r6, r4, #1
   1c03e:	2c07      	cmp	r4, #7
   1c040:	d01f      	beq.n	1c082 <PAIRING_Aggregate_PK_in_G1+0x2ee>
   1c042:	607e      	str	r6, [r7, #4]
   1c044:	2000      	movs	r0, #0
   1c046:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
   1c04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c04e:	2003      	movs	r0, #3
   1c050:	e7f9      	b.n	1c046 <PAIRING_Aggregate_PK_in_G1+0x2b2>
   1c052:	68fb      	ldr	r3, [r7, #12]
   1c054:	9303      	str	r3, [sp, #12]
   1c056:	f8cd b008 	str.w	fp, [sp, #8]
   1c05a:	f8dd 3438 	ldr.w	r3, [sp, #1080]	; 0x438
   1c05e:	9301      	str	r3, [sp, #4]
   1c060:	f8dd 3434 	ldr.w	r3, [sp, #1076]	; 0x434
   1c064:	9300      	str	r3, [sp, #0]
   1c066:	f8dd 3440 	ldr.w	r3, [sp, #1088]	; 0x440
   1c06a:	f8dd 243c 	ldr.w	r2, [sp, #1084]	; 0x43c
   1c06e:	2102      	movs	r1, #2
   1c070:	a870      	add	r0, sp, #448	; 0x1c0
   1c072:	f7fa ffc4 	bl	16ffe <hash_to_field>
   1c076:	2200      	movs	r2, #0
   1c078:	a970      	add	r1, sp, #448	; 0x1c0
   1c07a:	a828      	add	r0, sp, #160	; 0xa0
   1c07c:	f7fd fe6a 	bl	19d54 <map_to_g2>
   1c080:	e780      	b.n	1bf84 <PAIRING_Aggregate_PK_in_G1+0x1f0>
   1c082:	683e      	ldr	r6, [r7, #0]
   1c084:	f016 0620 	ands.w	r6, r6, #32
   1c088:	d00c      	beq.n	1c0a4 <PAIRING_Aggregate_PK_in_G1+0x310>
   1c08a:	2308      	movs	r3, #8
   1c08c:	4662      	mov	r2, ip
   1c08e:	a870      	add	r0, sp, #448	; 0x1c0
   1c090:	f7ff f8e6 	bl	1b260 <miller_loop_n>
   1c094:	f107 0010 	add.w	r0, r7, #16
   1c098:	aa70      	add	r2, sp, #448	; 0x1c0
   1c09a:	4601      	mov	r1, r0
   1c09c:	f7f8 fc6e 	bl	1497c <mul_fp12>
   1c0a0:	462e      	mov	r6, r5
   1c0a2:	e7ce      	b.n	1c042 <PAIRING_Aggregate_PK_in_G1+0x2ae>
   1c0a4:	2308      	movs	r3, #8
   1c0a6:	4662      	mov	r2, ip
   1c0a8:	f107 0010 	add.w	r0, r7, #16
   1c0ac:	f7ff f8d8 	bl	1b260 <miller_loop_n>
   1c0b0:	683b      	ldr	r3, [r7, #0]
   1c0b2:	f043 0320 	orr.w	r3, r3, #32
   1c0b6:	603b      	str	r3, [r7, #0]
   1c0b8:	e7c3      	b.n	1c042 <PAIRING_Aggregate_PK_in_G1+0x2ae>
   1c0ba:	2006      	movs	r0, #6
   1c0bc:	e7c3      	b.n	1c046 <PAIRING_Aggregate_PK_in_G1+0x2b2>
   1c0be:	2004      	movs	r0, #4
   1c0c0:	e7c1      	b.n	1c046 <PAIRING_Aggregate_PK_in_G1+0x2b2>
   1c0c2:	2000      	movs	r0, #0
   1c0c4:	e7bf      	b.n	1c046 <PAIRING_Aggregate_PK_in_G1+0x2b2>
   1c0c6:	bf00      	nop
   1c0c8:	00028738 	.word	0x00028738
   1c0cc:	000287c8 	.word	0x000287c8

0001c0d0 <blst_pairing_aggregate_pk_in_g1>:
   1c0d0:	b500      	push	{lr}
   1c0d2:	b089      	sub	sp, #36	; 0x24
   1c0d4:	4694      	mov	ip, r2
   1c0d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1c0d8:	9206      	str	r2, [sp, #24]
   1c0da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1c0dc:	9205      	str	r2, [sp, #20]
   1c0de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c0e0:	9204      	str	r2, [sp, #16]
   1c0e2:	9303      	str	r3, [sp, #12]
   1c0e4:	2200      	movs	r2, #0
   1c0e6:	9202      	str	r2, [sp, #8]
   1c0e8:	9201      	str	r2, [sp, #4]
   1c0ea:	2301      	movs	r3, #1
   1c0ec:	9300      	str	r3, [sp, #0]
   1c0ee:	4663      	mov	r3, ip
   1c0f0:	f7ff fe50 	bl	1bd94 <PAIRING_Aggregate_PK_in_G1>
   1c0f4:	b009      	add	sp, #36	; 0x24
   1c0f6:	f85d fb04 	ldr.w	pc, [sp], #4

0001c0fa <blst_pairing_mul_n_aggregate_pk_in_g1>:
   1c0fa:	b500      	push	{lr}
   1c0fc:	b089      	sub	sp, #36	; 0x24
   1c0fe:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   1c102:	f8cd c018 	str.w	ip, [sp, #24]
   1c106:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
   1c10a:	f8cd c014 	str.w	ip, [sp, #20]
   1c10e:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   1c112:	f8cd c010 	str.w	ip, [sp, #16]
   1c116:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
   1c11a:	f8cd c00c 	str.w	ip, [sp, #12]
   1c11e:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   1c122:	f8cd c008 	str.w	ip, [sp, #8]
   1c126:	9301      	str	r3, [sp, #4]
   1c128:	2301      	movs	r3, #1
   1c12a:	9300      	str	r3, [sp, #0]
   1c12c:	4613      	mov	r3, r2
   1c12e:	2200      	movs	r2, #0
   1c130:	f7ff fe30 	bl	1bd94 <PAIRING_Aggregate_PK_in_G1>
   1c134:	b009      	add	sp, #36	; 0x24
   1c136:	f85d fb04 	ldr.w	pc, [sp], #4

0001c13a <blst_pairing_chk_n_aggr_pk_in_g1>:
   1c13a:	b510      	push	{r4, lr}
   1c13c:	b088      	sub	sp, #32
   1c13e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1c140:	9406      	str	r4, [sp, #24]
   1c142:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1c144:	9405      	str	r4, [sp, #20]
   1c146:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1c148:	9404      	str	r4, [sp, #16]
   1c14a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1c14c:	9403      	str	r4, [sp, #12]
   1c14e:	2400      	movs	r4, #0
   1c150:	9402      	str	r4, [sp, #8]
   1c152:	9401      	str	r4, [sp, #4]
   1c154:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1c156:	9400      	str	r4, [sp, #0]
   1c158:	f7ff fe1c 	bl	1bd94 <PAIRING_Aggregate_PK_in_G1>
   1c15c:	b008      	add	sp, #32
   1c15e:	bd10      	pop	{r4, pc}

0001c160 <blst_pairing_chk_n_mul_n_aggr_pk_in_g1>:
   1c160:	b500      	push	{lr}
   1c162:	b089      	sub	sp, #36	; 0x24
   1c164:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   1c168:	f8cd c018 	str.w	ip, [sp, #24]
   1c16c:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
   1c170:	f8cd c014 	str.w	ip, [sp, #20]
   1c174:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   1c178:	f8cd c010 	str.w	ip, [sp, #16]
   1c17c:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
   1c180:	f8cd c00c 	str.w	ip, [sp, #12]
   1c184:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   1c188:	f8cd c008 	str.w	ip, [sp, #8]
   1c18c:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
   1c190:	f8cd c004 	str.w	ip, [sp, #4]
   1c194:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   1c198:	f8cd c000 	str.w	ip, [sp]
   1c19c:	f7ff fdfa 	bl	1bd94 <PAIRING_Aggregate_PK_in_G1>
   1c1a0:	b009      	add	sp, #36	; 0x24
   1c1a2:	f85d fb04 	ldr.w	pc, [sp], #4

0001c1a6 <blst_core_verify_pk_in_g1>:
   1c1a6:	b510      	push	{r4, lr}
   1c1a8:	f5ad 6d49 	sub.w	sp, sp, #3216	; 0xc90
   1c1ac:	2a00      	cmp	r2, #0
   1c1ae:	bf14      	ite	ne
   1c1b0:	2240      	movne	r2, #64	; 0x40
   1c1b2:	2200      	moveq	r2, #0
   1c1b4:	9208      	str	r2, [sp, #32]
   1c1b6:	2200      	movs	r2, #0
   1c1b8:	9209      	str	r2, [sp, #36]	; 0x24
   1c1ba:	f8dd 4c9c 	ldr.w	r4, [sp, #3228]	; 0xc9c
   1c1be:	940a      	str	r4, [sp, #40]	; 0x28
   1c1c0:	f8dd 4ca0 	ldr.w	r4, [sp, #3232]	; 0xca0
   1c1c4:	940b      	str	r4, [sp, #44]	; 0x2c
   1c1c6:	f8dd 4ca8 	ldr.w	r4, [sp, #3240]	; 0xca8
   1c1ca:	9406      	str	r4, [sp, #24]
   1c1cc:	f8dd 4ca4 	ldr.w	r4, [sp, #3236]	; 0xca4
   1c1d0:	9405      	str	r4, [sp, #20]
   1c1d2:	f8dd 4c98 	ldr.w	r4, [sp, #3224]	; 0xc98
   1c1d6:	9404      	str	r4, [sp, #16]
   1c1d8:	9303      	str	r3, [sp, #12]
   1c1da:	9202      	str	r2, [sp, #8]
   1c1dc:	9201      	str	r2, [sp, #4]
   1c1de:	2201      	movs	r2, #1
   1c1e0:	9200      	str	r2, [sp, #0]
   1c1e2:	460b      	mov	r3, r1
   1c1e4:	4601      	mov	r1, r0
   1c1e6:	a808      	add	r0, sp, #32
   1c1e8:	f7ff fdd4 	bl	1bd94 <PAIRING_Aggregate_PK_in_G1>
   1c1ec:	4604      	mov	r4, r0
   1c1ee:	b118      	cbz	r0, 1c1f8 <blst_core_verify_pk_in_g1+0x52>
   1c1f0:	4620      	mov	r0, r4
   1c1f2:	f50d 6d49 	add.w	sp, sp, #3216	; 0xc90
   1c1f6:	bd10      	pop	{r4, pc}
   1c1f8:	a808      	add	r0, sp, #32
   1c1fa:	f7ff fad6 	bl	1b7aa <PAIRING_Commit>
   1c1fe:	2100      	movs	r1, #0
   1c200:	a808      	add	r0, sp, #32
   1c202:	f7ff faff 	bl	1b804 <PAIRING_FinalVerify>
   1c206:	2800      	cmp	r0, #0
   1c208:	bf08      	it	eq
   1c20a:	2405      	moveq	r4, #5
   1c20c:	e7f0      	b.n	1c1f0 <blst_core_verify_pk_in_g1+0x4a>

0001c20e <blst_aggregate_in_g2>:
   1c20e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c210:	b0c9      	sub	sp, #292	; 0x124
   1c212:	4605      	mov	r5, r0
   1c214:	460e      	mov	r6, r1
   1c216:	7813      	ldrb	r3, [r2, #0]
   1c218:	f013 0740 	ands.w	r7, r3, #64	; 0x40
   1c21c:	d120      	bne.n	1c260 <blst_aggregate_in_g2+0x52>
   1c21e:	4611      	mov	r1, r2
   1c220:	f013 0f80 	tst.w	r3, #128	; 0x80
   1c224:	d12b      	bne.n	1c27e <blst_aggregate_in_g2+0x70>
   1c226:	4668      	mov	r0, sp
   1c228:	f7fb fcca 	bl	17bc0 <POINTonE2_Deserialize_BE>
   1c22c:	4668      	mov	r0, sp
   1c22e:	f7fb fc65 	bl	17afc <POINTonE2_affine_on_curve>
   1c232:	b3b0      	cbz	r0, 1c2a2 <blst_aggregate_in_g2+0x94>
   1c234:	481d      	ldr	r0, [pc, #116]	; (1c2ac <blst_aggregate_in_g2+0x9e>)
   1c236:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   1c23a:	aa2f      	add	r2, sp, #188	; 0xbc
   1c23c:	30ec      	adds	r0, #236	; 0xec
   1c23e:	f853 4f04 	ldr.w	r4, [r3, #4]!
   1c242:	f842 4f04 	str.w	r4, [r2, #4]!
   1c246:	4283      	cmp	r3, r0
   1c248:	d1f9      	bne.n	1c23e <blst_aggregate_in_g2+0x30>
   1c24a:	4668      	mov	r0, sp
   1c24c:	f7fd f8c0 	bl	193d0 <POINTonE2_in_G2>
   1c250:	b348      	cbz	r0, 1c2a6 <blst_aggregate_in_g2+0x98>
   1c252:	b1de      	cbz	r6, 1c28c <blst_aggregate_in_g2+0x7e>
   1c254:	466a      	mov	r2, sp
   1c256:	4631      	mov	r1, r6
   1c258:	4628      	mov	r0, r5
   1c25a:	f7ff fbfd 	bl	1ba58 <POINTonE2_dadd_affine>
   1c25e:	e001      	b.n	1c264 <blst_aggregate_in_g2+0x56>
   1c260:	b119      	cbz	r1, 1c26a <blst_aggregate_in_g2+0x5c>
   1c262:	2700      	movs	r7, #0
   1c264:	4638      	mov	r0, r7
   1c266:	b049      	add	sp, #292	; 0x124
   1c268:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c26a:	4603      	mov	r3, r0
   1c26c:	f500 7190 	add.w	r1, r0, #288	; 0x120
   1c270:	2200      	movs	r2, #0
   1c272:	f843 2b04 	str.w	r2, [r3], #4
   1c276:	4299      	cmp	r1, r3
   1c278:	d1fb      	bne.n	1c272 <blst_aggregate_in_g2+0x64>
   1c27a:	2700      	movs	r7, #0
   1c27c:	e7f2      	b.n	1c264 <blst_aggregate_in_g2+0x56>
   1c27e:	4668      	mov	r0, sp
   1c280:	f7fc f89c 	bl	183bc <POINTonE2_Uncompress>
   1c284:	2800      	cmp	r0, #0
   1c286:	d0d5      	beq.n	1c234 <blst_aggregate_in_g2+0x26>
   1c288:	4607      	mov	r7, r0
   1c28a:	e7eb      	b.n	1c264 <blst_aggregate_in_g2+0x56>
   1c28c:	f1ad 0304 	sub.w	r3, sp, #4
   1c290:	3d04      	subs	r5, #4
   1c292:	a947      	add	r1, sp, #284	; 0x11c
   1c294:	f853 2f04 	ldr.w	r2, [r3, #4]!
   1c298:	f845 2f04 	str.w	r2, [r5, #4]!
   1c29c:	428b      	cmp	r3, r1
   1c29e:	d1f9      	bne.n	1c294 <blst_aggregate_in_g2+0x86>
   1c2a0:	e7e0      	b.n	1c264 <blst_aggregate_in_g2+0x56>
   1c2a2:	2702      	movs	r7, #2
   1c2a4:	e7de      	b.n	1c264 <blst_aggregate_in_g2+0x56>
   1c2a6:	2703      	movs	r7, #3
   1c2a8:	e7dc      	b.n	1c264 <blst_aggregate_in_g2+0x56>
   1c2aa:	bf00      	nop
   1c2ac:	00028738 	.word	0x00028738

0001c2b0 <POINTonE2_add_affine>:
   1c2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c2b4:	f5ad 7d45 	sub.w	sp, sp, #788	; 0x314
   1c2b8:	9003      	str	r0, [sp, #12]
   1c2ba:	460d      	mov	r5, r1
   1c2bc:	4616      	mov	r6, r2
   1c2be:	f101 0bc0 	add.w	fp, r1, #192	; 0xc0
   1c2c2:	f101 03bc 	add.w	r3, r1, #188	; 0xbc
   1c2c6:	f501 708e 	add.w	r0, r1, #284	; 0x11c
   1c2ca:	2200      	movs	r2, #0
   1c2cc:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1c2d0:	430a      	orrs	r2, r1
   1c2d2:	4283      	cmp	r3, r0
   1c2d4:	d1fa      	bne.n	1c2cc <POINTonE2_add_affine+0x1c>
   1c2d6:	1e57      	subs	r7, r2, #1
   1c2d8:	ea27 0702 	bic.w	r7, r7, r2
   1c2dc:	0fff      	lsrs	r7, r7, #31
   1c2de:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 1c5a4 <POINTonE2_add_affine+0x2f4>
   1c2e2:	4cb1      	ldr	r4, [pc, #708]	; (1c5a8 <POINTonE2_add_affine+0x2f8>)
   1c2e4:	4643      	mov	r3, r8
   1c2e6:	4622      	mov	r2, r4
   1c2e8:	4659      	mov	r1, fp
   1c2ea:	a864      	add	r0, sp, #400	; 0x190
   1c2ec:	f7fb fac0 	bl	17870 <sqr_mont_384x>
   1c2f0:	f8cd 8000 	str.w	r8, [sp]
   1c2f4:	4623      	mov	r3, r4
   1c2f6:	465a      	mov	r2, fp
   1c2f8:	a964      	add	r1, sp, #400	; 0x190
   1c2fa:	a8ac      	add	r0, sp, #688	; 0x2b0
   1c2fc:	f7f8 f82a 	bl	14354 <mul_mont_384x>
   1c300:	f8cd 8000 	str.w	r8, [sp]
   1c304:	4623      	mov	r3, r4
   1c306:	f106 0260 	add.w	r2, r6, #96	; 0x60
   1c30a:	a9ac      	add	r1, sp, #688	; 0x2b0
   1c30c:	4608      	mov	r0, r1
   1c30e:	f7f8 f821 	bl	14354 <mul_mont_384x>
   1c312:	f1a6 0804 	sub.w	r8, r6, #4
   1c316:	f106 00bc 	add.w	r0, r6, #188	; 0xbc
   1c31a:	4643      	mov	r3, r8
   1c31c:	2200      	movs	r2, #0
   1c31e:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1c322:	430a      	orrs	r2, r1
   1c324:	4283      	cmp	r3, r0
   1c326:	d1fa      	bne.n	1c31e <POINTonE2_add_affine+0x6e>
   1c328:	1e53      	subs	r3, r2, #1
   1c32a:	ea23 0202 	bic.w	r2, r3, r2
   1c32e:	0fd3      	lsrs	r3, r2, #31
   1c330:	9302      	str	r3, [sp, #8]
   1c332:	4c9d      	ldr	r4, [pc, #628]	; (1c5a8 <POINTonE2_add_affine+0x2f8>)
   1c334:	f8df 926c 	ldr.w	r9, [pc, #620]	; 1c5a4 <POINTonE2_add_affine+0x2f4>
   1c338:	f8cd 9000 	str.w	r9, [sp]
   1c33c:	4623      	mov	r3, r4
   1c33e:	aa64      	add	r2, sp, #400	; 0x190
   1c340:	4631      	mov	r1, r6
   1c342:	a84c      	add	r0, sp, #304	; 0x130
   1c344:	f7f8 f806 	bl	14354 <mul_mont_384x>
   1c348:	260c      	movs	r6, #12
   1c34a:	9600      	str	r6, [sp, #0]
   1c34c:	4623      	mov	r3, r4
   1c34e:	462a      	mov	r2, r5
   1c350:	a94c      	add	r1, sp, #304	; 0x130
   1c352:	4608      	mov	r0, r1
   1c354:	f7f4 f98e 	bl	10674 <sub_mod_n>
   1c358:	9600      	str	r6, [sp, #0]
   1c35a:	4623      	mov	r3, r4
   1c35c:	f105 0230 	add.w	r2, r5, #48	; 0x30
   1c360:	a958      	add	r1, sp, #352	; 0x160
   1c362:	4608      	mov	r0, r1
   1c364:	f7f4 f986 	bl	10674 <sub_mod_n>
   1c368:	464b      	mov	r3, r9
   1c36a:	4622      	mov	r2, r4
   1c36c:	a94c      	add	r1, sp, #304	; 0x130
   1c36e:	a834      	add	r0, sp, #208	; 0xd0
   1c370:	f7fb fa7e 	bl	17870 <sqr_mont_384x>
   1c374:	9600      	str	r6, [sp, #0]
   1c376:	4623      	mov	r3, r4
   1c378:	aa34      	add	r2, sp, #208	; 0xd0
   1c37a:	4611      	mov	r1, r2
   1c37c:	a81c      	add	r0, sp, #112	; 0x70
   1c37e:	f7f4 fccf 	bl	10d20 <add_mod_n>
   1c382:	9600      	str	r6, [sp, #0]
   1c384:	4623      	mov	r3, r4
   1c386:	aa40      	add	r2, sp, #256	; 0x100
   1c388:	4611      	mov	r1, r2
   1c38a:	a828      	add	r0, sp, #160	; 0xa0
   1c38c:	f7f4 fcc8 	bl	10d20 <add_mod_n>
   1c390:	9600      	str	r6, [sp, #0]
   1c392:	4623      	mov	r3, r4
   1c394:	aa1c      	add	r2, sp, #112	; 0x70
   1c396:	4611      	mov	r1, r2
   1c398:	4610      	mov	r0, r2
   1c39a:	f7f4 fcc1 	bl	10d20 <add_mod_n>
   1c39e:	9600      	str	r6, [sp, #0]
   1c3a0:	4623      	mov	r3, r4
   1c3a2:	aa28      	add	r2, sp, #160	; 0xa0
   1c3a4:	4611      	mov	r1, r2
   1c3a6:	4610      	mov	r0, r2
   1c3a8:	f7f4 fcba 	bl	10d20 <add_mod_n>
   1c3ac:	f8cd 9000 	str.w	r9, [sp]
   1c3b0:	4623      	mov	r3, r4
   1c3b2:	aa1c      	add	r2, sp, #112	; 0x70
   1c3b4:	4629      	mov	r1, r5
   1c3b6:	a894      	add	r0, sp, #592	; 0x250
   1c3b8:	f7f7 ffcc 	bl	14354 <mul_mont_384x>
   1c3bc:	f8cd 9000 	str.w	r9, [sp]
   1c3c0:	4623      	mov	r3, r4
   1c3c2:	aa1c      	add	r2, sp, #112	; 0x70
   1c3c4:	a94c      	add	r1, sp, #304	; 0x130
   1c3c6:	a804      	add	r0, sp, #16
   1c3c8:	f7f7 ffc4 	bl	14354 <mul_mont_384x>
   1c3cc:	f105 0a60 	add.w	sl, r5, #96	; 0x60
   1c3d0:	f8cd 9000 	str.w	r9, [sp]
   1c3d4:	4623      	mov	r3, r4
   1c3d6:	4652      	mov	r2, sl
   1c3d8:	a904      	add	r1, sp, #16
   1c3da:	a81c      	add	r0, sp, #112	; 0x70
   1c3dc:	f7f7 ffba 	bl	14354 <mul_mont_384x>
   1c3e0:	9600      	str	r6, [sp, #0]
   1c3e2:	4623      	mov	r3, r4
   1c3e4:	4652      	mov	r2, sl
   1c3e6:	a9ac      	add	r1, sp, #688	; 0x2b0
   1c3e8:	4608      	mov	r0, r1
   1c3ea:	f7f4 f943 	bl	10674 <sub_mod_n>
   1c3ee:	9600      	str	r6, [sp, #0]
   1c3f0:	4623      	mov	r3, r4
   1c3f2:	f105 0290 	add.w	r2, r5, #144	; 0x90
   1c3f6:	a9b8      	add	r1, sp, #736	; 0x2e0
   1c3f8:	4608      	mov	r0, r1
   1c3fa:	f7f4 f93b 	bl	10674 <sub_mod_n>
   1c3fe:	9600      	str	r6, [sp, #0]
   1c400:	4623      	mov	r3, r4
   1c402:	aaac      	add	r2, sp, #688	; 0x2b0
   1c404:	4611      	mov	r1, r2
   1c406:	4610      	mov	r0, r2
   1c408:	f7f4 fc8a 	bl	10d20 <add_mod_n>
   1c40c:	9600      	str	r6, [sp, #0]
   1c40e:	4623      	mov	r3, r4
   1c410:	aab8      	add	r2, sp, #736	; 0x2e0
   1c412:	4611      	mov	r1, r2
   1c414:	4610      	mov	r0, r2
   1c416:	f7f4 fc83 	bl	10d20 <add_mod_n>
   1c41a:	464b      	mov	r3, r9
   1c41c:	4622      	mov	r2, r4
   1c41e:	a9ac      	add	r1, sp, #688	; 0x2b0
   1c420:	a87c      	add	r0, sp, #496	; 0x1f0
   1c422:	f7fb fa25 	bl	17870 <sqr_mont_384x>
   1c426:	9600      	str	r6, [sp, #0]
   1c428:	4623      	mov	r3, r4
   1c42a:	aa04      	add	r2, sp, #16
   1c42c:	a97c      	add	r1, sp, #496	; 0x1f0
   1c42e:	4608      	mov	r0, r1
   1c430:	f7f4 f920 	bl	10674 <sub_mod_n>
   1c434:	9600      	str	r6, [sp, #0]
   1c436:	4623      	mov	r3, r4
   1c438:	aa10      	add	r2, sp, #64	; 0x40
   1c43a:	a988      	add	r1, sp, #544	; 0x220
   1c43c:	4608      	mov	r0, r1
   1c43e:	f7f4 f919 	bl	10674 <sub_mod_n>
   1c442:	9600      	str	r6, [sp, #0]
   1c444:	4623      	mov	r3, r4
   1c446:	aa94      	add	r2, sp, #592	; 0x250
   1c448:	a97c      	add	r1, sp, #496	; 0x1f0
   1c44a:	4608      	mov	r0, r1
   1c44c:	f7f4 f912 	bl	10674 <sub_mod_n>
   1c450:	9600      	str	r6, [sp, #0]
   1c452:	4623      	mov	r3, r4
   1c454:	aaa0      	add	r2, sp, #640	; 0x280
   1c456:	a988      	add	r1, sp, #544	; 0x220
   1c458:	4608      	mov	r0, r1
   1c45a:	f7f4 f90b 	bl	10674 <sub_mod_n>
   1c45e:	9600      	str	r6, [sp, #0]
   1c460:	4623      	mov	r3, r4
   1c462:	aa94      	add	r2, sp, #592	; 0x250
   1c464:	a97c      	add	r1, sp, #496	; 0x1f0
   1c466:	4608      	mov	r0, r1
   1c468:	f7f4 f904 	bl	10674 <sub_mod_n>
   1c46c:	9600      	str	r6, [sp, #0]
   1c46e:	4623      	mov	r3, r4
   1c470:	aaa0      	add	r2, sp, #640	; 0x280
   1c472:	a988      	add	r1, sp, #544	; 0x220
   1c474:	4608      	mov	r0, r1
   1c476:	f7f4 f8fd 	bl	10674 <sub_mod_n>
   1c47a:	9600      	str	r6, [sp, #0]
   1c47c:	4623      	mov	r3, r4
   1c47e:	aa7c      	add	r2, sp, #496	; 0x1f0
   1c480:	a994      	add	r1, sp, #592	; 0x250
   1c482:	4608      	mov	r0, r1
   1c484:	f7f4 f8f6 	bl	10674 <sub_mod_n>
   1c488:	9600      	str	r6, [sp, #0]
   1c48a:	4623      	mov	r3, r4
   1c48c:	aa88      	add	r2, sp, #544	; 0x220
   1c48e:	a9a0      	add	r1, sp, #640	; 0x280
   1c490:	4608      	mov	r0, r1
   1c492:	f7f4 f8ef 	bl	10674 <sub_mod_n>
   1c496:	f8cd 9000 	str.w	r9, [sp]
   1c49a:	4623      	mov	r3, r4
   1c49c:	aaac      	add	r2, sp, #688	; 0x2b0
   1c49e:	a994      	add	r1, sp, #592	; 0x250
   1c4a0:	4608      	mov	r0, r1
   1c4a2:	f7f7 ff57 	bl	14354 <mul_mont_384x>
   1c4a6:	9600      	str	r6, [sp, #0]
   1c4a8:	4623      	mov	r3, r4
   1c4aa:	aa1c      	add	r2, sp, #112	; 0x70
   1c4ac:	a994      	add	r1, sp, #592	; 0x250
   1c4ae:	4608      	mov	r0, r1
   1c4b0:	f7f4 f8e0 	bl	10674 <sub_mod_n>
   1c4b4:	9600      	str	r6, [sp, #0]
   1c4b6:	4623      	mov	r3, r4
   1c4b8:	aa28      	add	r2, sp, #160	; 0xa0
   1c4ba:	a9a0      	add	r1, sp, #640	; 0x280
   1c4bc:	4608      	mov	r0, r1
   1c4be:	f7f4 f8d9 	bl	10674 <sub_mod_n>
   1c4c2:	9600      	str	r6, [sp, #0]
   1c4c4:	4623      	mov	r3, r4
   1c4c6:	aa1c      	add	r2, sp, #112	; 0x70
   1c4c8:	a994      	add	r1, sp, #592	; 0x250
   1c4ca:	4608      	mov	r0, r1
   1c4cc:	f7f4 f8d2 	bl	10674 <sub_mod_n>
   1c4d0:	9600      	str	r6, [sp, #0]
   1c4d2:	4623      	mov	r3, r4
   1c4d4:	aa28      	add	r2, sp, #160	; 0xa0
   1c4d6:	a9a0      	add	r1, sp, #640	; 0x280
   1c4d8:	4608      	mov	r0, r1
   1c4da:	f7f4 f8cb 	bl	10674 <sub_mod_n>
   1c4de:	9600      	str	r6, [sp, #0]
   1c4e0:	4623      	mov	r3, r4
   1c4e2:	aa4c      	add	r2, sp, #304	; 0x130
   1c4e4:	4659      	mov	r1, fp
   1c4e6:	a8ac      	add	r0, sp, #688	; 0x2b0
   1c4e8:	f7f4 fc1a 	bl	10d20 <add_mod_n>
   1c4ec:	9600      	str	r6, [sp, #0]
   1c4ee:	4623      	mov	r3, r4
   1c4f0:	aa58      	add	r2, sp, #352	; 0x160
   1c4f2:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   1c4f6:	a8b8      	add	r0, sp, #736	; 0x2e0
   1c4f8:	f7f4 fc12 	bl	10d20 <add_mod_n>
   1c4fc:	464b      	mov	r3, r9
   1c4fe:	4622      	mov	r2, r4
   1c500:	a9ac      	add	r1, sp, #688	; 0x2b0
   1c502:	4608      	mov	r0, r1
   1c504:	f7fb f9b4 	bl	17870 <sqr_mont_384x>
   1c508:	9600      	str	r6, [sp, #0]
   1c50a:	4623      	mov	r3, r4
   1c50c:	aa64      	add	r2, sp, #400	; 0x190
   1c50e:	a9ac      	add	r1, sp, #688	; 0x2b0
   1c510:	4608      	mov	r0, r1
   1c512:	f7f4 f8af 	bl	10674 <sub_mod_n>
   1c516:	9600      	str	r6, [sp, #0]
   1c518:	4623      	mov	r3, r4
   1c51a:	aa70      	add	r2, sp, #448	; 0x1c0
   1c51c:	a9b8      	add	r1, sp, #736	; 0x2e0
   1c51e:	4608      	mov	r0, r1
   1c520:	f7f4 f8a8 	bl	10674 <sub_mod_n>
   1c524:	9600      	str	r6, [sp, #0]
   1c526:	4623      	mov	r3, r4
   1c528:	aa34      	add	r2, sp, #208	; 0xd0
   1c52a:	a9ac      	add	r1, sp, #688	; 0x2b0
   1c52c:	4608      	mov	r0, r1
   1c52e:	f7f4 f8a1 	bl	10674 <sub_mod_n>
   1c532:	9600      	str	r6, [sp, #0]
   1c534:	4623      	mov	r3, r4
   1c536:	aa40      	add	r2, sp, #256	; 0x100
   1c538:	a9b8      	add	r1, sp, #736	; 0x2e0
   1c53a:	4608      	mov	r0, r1
   1c53c:	f7f4 f89a 	bl	10674 <sub_mod_n>
   1c540:	427f      	negs	r7, r7
   1c542:	f104 018c 	add.w	r1, r4, #140	; 0x8c
   1c546:	aaab      	add	r2, sp, #684	; 0x2ac
   1c548:	34ec      	adds	r4, #236	; 0xec
   1c54a:	f852 0f04 	ldr.w	r0, [r2, #4]!
   1c54e:	f851 3f04 	ldr.w	r3, [r1, #4]!
   1c552:	4043      	eors	r3, r0
   1c554:	403b      	ands	r3, r7
   1c556:	4043      	eors	r3, r0
   1c558:	6013      	str	r3, [r2, #0]
   1c55a:	428c      	cmp	r4, r1
   1c55c:	d1f5      	bne.n	1c54a <POINTonE2_add_affine+0x29a>
   1c55e:	aa7c      	add	r2, sp, #496	; 0x1f0
   1c560:	acac      	add	r4, sp, #688	; 0x2b0
   1c562:	4611      	mov	r1, r2
   1c564:	6808      	ldr	r0, [r1, #0]
   1c566:	f858 3f04 	ldr.w	r3, [r8, #4]!
   1c56a:	4043      	eors	r3, r0
   1c56c:	403b      	ands	r3, r7
   1c56e:	4043      	eors	r3, r0
   1c570:	f841 3b04 	str.w	r3, [r1], #4
   1c574:	428c      	cmp	r4, r1
   1c576:	d1f5      	bne.n	1c564 <POINTonE2_add_affine+0x2b4>
   1c578:	9b02      	ldr	r3, [sp, #8]
   1c57a:	425c      	negs	r4, r3
   1c57c:	3d04      	subs	r5, #4
   1c57e:	9b03      	ldr	r3, [sp, #12]
   1c580:	1f18      	subs	r0, r3, #4
   1c582:	f502 7690 	add.w	r6, r2, #288	; 0x120
   1c586:	f852 1b04 	ldr.w	r1, [r2], #4
   1c58a:	f855 3f04 	ldr.w	r3, [r5, #4]!
   1c58e:	404b      	eors	r3, r1
   1c590:	4023      	ands	r3, r4
   1c592:	404b      	eors	r3, r1
   1c594:	f840 3f04 	str.w	r3, [r0, #4]!
   1c598:	4296      	cmp	r6, r2
   1c59a:	d1f4      	bne.n	1c586 <POINTonE2_add_affine+0x2d6>
   1c59c:	f50d 7d45 	add.w	sp, sp, #788	; 0x314
   1c5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c5a4:	fffcfffd 	.word	0xfffcfffd
   1c5a8:	00028738 	.word	0x00028738

0001c5ac <blst_fr_add>:
   1c5ac:	b500      	push	{lr}
   1c5ae:	b083      	sub	sp, #12
   1c5b0:	2308      	movs	r3, #8
   1c5b2:	9300      	str	r3, [sp, #0]
   1c5b4:	4b02      	ldr	r3, [pc, #8]	; (1c5c0 <blst_fr_add+0x14>)
   1c5b6:	f7f4 fbb3 	bl	10d20 <add_mod_n>
   1c5ba:	b003      	add	sp, #12
   1c5bc:	f85d fb04 	ldr.w	pc, [sp], #4
   1c5c0:	00029af8 	.word	0x00029af8

0001c5c4 <blst_fr_sub>:
   1c5c4:	b500      	push	{lr}
   1c5c6:	b083      	sub	sp, #12
   1c5c8:	2308      	movs	r3, #8
   1c5ca:	9300      	str	r3, [sp, #0]
   1c5cc:	4b02      	ldr	r3, [pc, #8]	; (1c5d8 <blst_fr_sub+0x14>)
   1c5ce:	f7f4 f851 	bl	10674 <sub_mod_n>
   1c5d2:	b003      	add	sp, #12
   1c5d4:	f85d fb04 	ldr.w	pc, [sp], #4
   1c5d8:	00029af8 	.word	0x00029af8

0001c5dc <blst_fr_mul_by_3>:
   1c5dc:	b508      	push	{r3, lr}
   1c5de:	2308      	movs	r3, #8
   1c5e0:	4a01      	ldr	r2, [pc, #4]	; (1c5e8 <blst_fr_mul_by_3+0xc>)
   1c5e2:	f7f4 fc25 	bl	10e30 <mul_by_3_mod_n>
   1c5e6:	bd08      	pop	{r3, pc}
   1c5e8:	00029af8 	.word	0x00029af8

0001c5ec <blst_fr_lshift>:
   1c5ec:	b500      	push	{lr}
   1c5ee:	b083      	sub	sp, #12
   1c5f0:	2308      	movs	r3, #8
   1c5f2:	9300      	str	r3, [sp, #0]
   1c5f4:	4b02      	ldr	r3, [pc, #8]	; (1c600 <blst_fr_lshift+0x14>)
   1c5f6:	f7f4 fcbb 	bl	10f70 <lshift_mod_n>
   1c5fa:	b003      	add	sp, #12
   1c5fc:	f85d fb04 	ldr.w	pc, [sp], #4
   1c600:	00029af8 	.word	0x00029af8

0001c604 <blst_fr_rshift>:
   1c604:	b500      	push	{lr}
   1c606:	b083      	sub	sp, #12
   1c608:	2308      	movs	r3, #8
   1c60a:	9300      	str	r3, [sp, #0]
   1c60c:	4b02      	ldr	r3, [pc, #8]	; (1c618 <blst_fr_rshift+0x14>)
   1c60e:	f7f4 f899 	bl	10744 <rshift_mod_n>
   1c612:	b003      	add	sp, #12
   1c614:	f85d fb04 	ldr.w	pc, [sp], #4
   1c618:	00029af8 	.word	0x00029af8

0001c61c <blst_fr_mul>:
   1c61c:	b500      	push	{lr}
   1c61e:	b083      	sub	sp, #12
   1c620:	2308      	movs	r3, #8
   1c622:	9301      	str	r3, [sp, #4]
   1c624:	f04f 33ff 	mov.w	r3, #4294967295
   1c628:	9300      	str	r3, [sp, #0]
   1c62a:	4b03      	ldr	r3, [pc, #12]	; (1c638 <blst_fr_mul+0x1c>)
   1c62c:	f7f4 f9d0 	bl	109d0 <mul_mont_n>
   1c630:	b003      	add	sp, #12
   1c632:	f85d fb04 	ldr.w	pc, [sp], #4
   1c636:	bf00      	nop
   1c638:	00029af8 	.word	0x00029af8

0001c63c <blst_fr_sqr>:
   1c63c:	b500      	push	{lr}
   1c63e:	b083      	sub	sp, #12
   1c640:	460a      	mov	r2, r1
   1c642:	2308      	movs	r3, #8
   1c644:	9301      	str	r3, [sp, #4]
   1c646:	f04f 33ff 	mov.w	r3, #4294967295
   1c64a:	9300      	str	r3, [sp, #0]
   1c64c:	4b02      	ldr	r3, [pc, #8]	; (1c658 <blst_fr_sqr+0x1c>)
   1c64e:	f7f4 f9bf 	bl	109d0 <mul_mont_n>
   1c652:	b003      	add	sp, #12
   1c654:	f85d fb04 	ldr.w	pc, [sp], #4
   1c658:	00029af8 	.word	0x00029af8

0001c65c <blst_fr_cneg>:
   1c65c:	b500      	push	{lr}
   1c65e:	b083      	sub	sp, #12
   1c660:	1e53      	subs	r3, r2, #1
   1c662:	ea23 0202 	bic.w	r2, r3, r2
   1c666:	2308      	movs	r3, #8
   1c668:	9300      	str	r3, [sp, #0]
   1c66a:	4b04      	ldr	r3, [pc, #16]	; (1c67c <blst_fr_cneg+0x20>)
   1c66c:	43d2      	mvns	r2, r2
   1c66e:	0fd2      	lsrs	r2, r2, #31
   1c670:	f7f5 f9ea 	bl	11a48 <cneg_mod_n>
   1c674:	b003      	add	sp, #12
   1c676:	f85d fb04 	ldr.w	pc, [sp], #4
   1c67a:	bf00      	nop
   1c67c:	00029af8 	.word	0x00029af8

0001c680 <blst_fr_to>:
   1c680:	b500      	push	{lr}
   1c682:	b083      	sub	sp, #12
   1c684:	4a07      	ldr	r2, [pc, #28]	; (1c6a4 <blst_fr_to+0x24>)
   1c686:	2308      	movs	r3, #8
   1c688:	9301      	str	r3, [sp, #4]
   1c68a:	f04f 33ff 	mov.w	r3, #4294967295
   1c68e:	9300      	str	r3, [sp, #0]
   1c690:	f502 7332 	add.w	r3, r2, #712	; 0x2c8
   1c694:	f502 6288 	add.w	r2, r2, #1088	; 0x440
   1c698:	f7f4 f99a 	bl	109d0 <mul_mont_n>
   1c69c:	b003      	add	sp, #12
   1c69e:	f85d fb04 	ldr.w	pc, [sp], #4
   1c6a2:	bf00      	nop
   1c6a4:	00029830 	.word	0x00029830

0001c6a8 <blst_fr_from>:
   1c6a8:	b500      	push	{lr}
   1c6aa:	b083      	sub	sp, #12
   1c6ac:	2308      	movs	r3, #8
   1c6ae:	9300      	str	r3, [sp, #0]
   1c6b0:	f04f 33ff 	mov.w	r3, #4294967295
   1c6b4:	4a02      	ldr	r2, [pc, #8]	; (1c6c0 <blst_fr_from+0x18>)
   1c6b6:	f7f4 fcbd 	bl	11034 <from_mont_n>
   1c6ba:	b003      	add	sp, #12
   1c6bc:	f85d fb04 	ldr.w	pc, [sp], #4
   1c6c0:	00029af8 	.word	0x00029af8

0001c6c4 <blst_fr_eucl_inverse>:
   1c6c4:	b500      	push	{lr}
   1c6c6:	b083      	sub	sp, #12
   1c6c8:	4a05      	ldr	r2, [pc, #20]	; (1c6e0 <blst_fr_eucl_inverse+0x1c>)
   1c6ca:	2308      	movs	r3, #8
   1c6cc:	9300      	str	r3, [sp, #0]
   1c6ce:	f502 6388 	add.w	r3, r2, #1088	; 0x440
   1c6d2:	f502 7232 	add.w	r2, r2, #712	; 0x2c8
   1c6d6:	f7f6 f99b 	bl	12a10 <eucl_inverse_mod_n>
   1c6da:	b003      	add	sp, #12
   1c6dc:	f85d fb04 	ldr.w	pc, [sp], #4
   1c6e0:	00029830 	.word	0x00029830

0001c6e4 <blst_fp_add>:
   1c6e4:	b500      	push	{lr}
   1c6e6:	b083      	sub	sp, #12
   1c6e8:	230c      	movs	r3, #12
   1c6ea:	9300      	str	r3, [sp, #0]
   1c6ec:	4b02      	ldr	r3, [pc, #8]	; (1c6f8 <blst_fp_add+0x14>)
   1c6ee:	f7f4 fb17 	bl	10d20 <add_mod_n>
   1c6f2:	b003      	add	sp, #12
   1c6f4:	f85d fb04 	ldr.w	pc, [sp], #4
   1c6f8:	00028738 	.word	0x00028738

0001c6fc <blst_fp_sub>:
   1c6fc:	b500      	push	{lr}
   1c6fe:	b083      	sub	sp, #12
   1c700:	230c      	movs	r3, #12
   1c702:	9300      	str	r3, [sp, #0]
   1c704:	4b02      	ldr	r3, [pc, #8]	; (1c710 <blst_fp_sub+0x14>)
   1c706:	f7f3 ffb5 	bl	10674 <sub_mod_n>
   1c70a:	b003      	add	sp, #12
   1c70c:	f85d fb04 	ldr.w	pc, [sp], #4
   1c710:	00028738 	.word	0x00028738

0001c714 <blst_fp_mul_by_3>:
   1c714:	b508      	push	{r3, lr}
   1c716:	230c      	movs	r3, #12
   1c718:	4a01      	ldr	r2, [pc, #4]	; (1c720 <blst_fp_mul_by_3+0xc>)
   1c71a:	f7f4 fb89 	bl	10e30 <mul_by_3_mod_n>
   1c71e:	bd08      	pop	{r3, pc}
   1c720:	00028738 	.word	0x00028738

0001c724 <blst_fp_mul_by_8>:
   1c724:	b500      	push	{lr}
   1c726:	b083      	sub	sp, #12
   1c728:	230c      	movs	r3, #12
   1c72a:	9300      	str	r3, [sp, #0]
   1c72c:	4b03      	ldr	r3, [pc, #12]	; (1c73c <blst_fp_mul_by_8+0x18>)
   1c72e:	2203      	movs	r2, #3
   1c730:	f7f4 fc1e 	bl	10f70 <lshift_mod_n>
   1c734:	b003      	add	sp, #12
   1c736:	f85d fb04 	ldr.w	pc, [sp], #4
   1c73a:	bf00      	nop
   1c73c:	00028738 	.word	0x00028738

0001c740 <blst_fp_lshift>:
   1c740:	b500      	push	{lr}
   1c742:	b083      	sub	sp, #12
   1c744:	230c      	movs	r3, #12
   1c746:	9300      	str	r3, [sp, #0]
   1c748:	4b02      	ldr	r3, [pc, #8]	; (1c754 <blst_fp_lshift+0x14>)
   1c74a:	f7f4 fc11 	bl	10f70 <lshift_mod_n>
   1c74e:	b003      	add	sp, #12
   1c750:	f85d fb04 	ldr.w	pc, [sp], #4
   1c754:	00028738 	.word	0x00028738

0001c758 <blst_fp_mul>:
   1c758:	b500      	push	{lr}
   1c75a:	b083      	sub	sp, #12
   1c75c:	230c      	movs	r3, #12
   1c75e:	9301      	str	r3, [sp, #4]
   1c760:	4b03      	ldr	r3, [pc, #12]	; (1c770 <blst_fp_mul+0x18>)
   1c762:	9300      	str	r3, [sp, #0]
   1c764:	4b03      	ldr	r3, [pc, #12]	; (1c774 <blst_fp_mul+0x1c>)
   1c766:	f7f4 f933 	bl	109d0 <mul_mont_n>
   1c76a:	b003      	add	sp, #12
   1c76c:	f85d fb04 	ldr.w	pc, [sp], #4
   1c770:	fffcfffd 	.word	0xfffcfffd
   1c774:	00028738 	.word	0x00028738

0001c778 <blst_fp_sqr>:
   1c778:	b500      	push	{lr}
   1c77a:	b083      	sub	sp, #12
   1c77c:	460a      	mov	r2, r1
   1c77e:	230c      	movs	r3, #12
   1c780:	9301      	str	r3, [sp, #4]
   1c782:	4b04      	ldr	r3, [pc, #16]	; (1c794 <blst_fp_sqr+0x1c>)
   1c784:	9300      	str	r3, [sp, #0]
   1c786:	4b04      	ldr	r3, [pc, #16]	; (1c798 <blst_fp_sqr+0x20>)
   1c788:	f7f4 f922 	bl	109d0 <mul_mont_n>
   1c78c:	b003      	add	sp, #12
   1c78e:	f85d fb04 	ldr.w	pc, [sp], #4
   1c792:	bf00      	nop
   1c794:	fffcfffd 	.word	0xfffcfffd
   1c798:	00028738 	.word	0x00028738

0001c79c <blst_fp_cneg>:
   1c79c:	b500      	push	{lr}
   1c79e:	b083      	sub	sp, #12
   1c7a0:	1e53      	subs	r3, r2, #1
   1c7a2:	ea23 0202 	bic.w	r2, r3, r2
   1c7a6:	230c      	movs	r3, #12
   1c7a8:	9300      	str	r3, [sp, #0]
   1c7aa:	4b04      	ldr	r3, [pc, #16]	; (1c7bc <blst_fp_cneg+0x20>)
   1c7ac:	43d2      	mvns	r2, r2
   1c7ae:	0fd2      	lsrs	r2, r2, #31
   1c7b0:	f7f5 f94a 	bl	11a48 <cneg_mod_n>
   1c7b4:	b003      	add	sp, #12
   1c7b6:	f85d fb04 	ldr.w	pc, [sp], #4
   1c7ba:	bf00      	nop
   1c7bc:	00028738 	.word	0x00028738

0001c7c0 <blst_fp_to>:
   1c7c0:	b500      	push	{lr}
   1c7c2:	b083      	sub	sp, #12
   1c7c4:	4b05      	ldr	r3, [pc, #20]	; (1c7dc <blst_fp_to+0x1c>)
   1c7c6:	220c      	movs	r2, #12
   1c7c8:	9201      	str	r2, [sp, #4]
   1c7ca:	4a05      	ldr	r2, [pc, #20]	; (1c7e0 <blst_fp_to+0x20>)
   1c7cc:	9200      	str	r2, [sp, #0]
   1c7ce:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
   1c7d2:	f7f4 f8fd 	bl	109d0 <mul_mont_n>
   1c7d6:	b003      	add	sp, #12
   1c7d8:	f85d fb04 	ldr.w	pc, [sp], #4
   1c7dc:	00028738 	.word	0x00028738
   1c7e0:	fffcfffd 	.word	0xfffcfffd

0001c7e4 <blst_fp_from>:
   1c7e4:	b500      	push	{lr}
   1c7e6:	b083      	sub	sp, #12
   1c7e8:	230c      	movs	r3, #12
   1c7ea:	9300      	str	r3, [sp, #0]
   1c7ec:	4b03      	ldr	r3, [pc, #12]	; (1c7fc <blst_fp_from+0x18>)
   1c7ee:	4a04      	ldr	r2, [pc, #16]	; (1c800 <blst_fp_from+0x1c>)
   1c7f0:	f7f4 fc20 	bl	11034 <from_mont_n>
   1c7f4:	b003      	add	sp, #12
   1c7f6:	f85d fb04 	ldr.w	pc, [sp], #4
   1c7fa:	bf00      	nop
   1c7fc:	fffcfffd 	.word	0xfffcfffd
   1c800:	00028738 	.word	0x00028738

0001c804 <blst_fp_from_uint32>:
   1c804:	b500      	push	{lr}
   1c806:	b083      	sub	sp, #12
   1c808:	4b05      	ldr	r3, [pc, #20]	; (1c820 <blst_fp_from_uint32+0x1c>)
   1c80a:	220c      	movs	r2, #12
   1c80c:	9201      	str	r2, [sp, #4]
   1c80e:	4a05      	ldr	r2, [pc, #20]	; (1c824 <blst_fp_from_uint32+0x20>)
   1c810:	9200      	str	r2, [sp, #0]
   1c812:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
   1c816:	f7f4 f8db 	bl	109d0 <mul_mont_n>
   1c81a:	b003      	add	sp, #12
   1c81c:	f85d fb04 	ldr.w	pc, [sp], #4
   1c820:	00028738 	.word	0x00028738
   1c824:	fffcfffd 	.word	0xfffcfffd

0001c828 <blst_uint32_from_fp>:
   1c828:	b500      	push	{lr}
   1c82a:	b083      	sub	sp, #12
   1c82c:	230c      	movs	r3, #12
   1c82e:	9300      	str	r3, [sp, #0]
   1c830:	4b03      	ldr	r3, [pc, #12]	; (1c840 <blst_uint32_from_fp+0x18>)
   1c832:	4a04      	ldr	r2, [pc, #16]	; (1c844 <blst_uint32_from_fp+0x1c>)
   1c834:	f7f4 fbfe 	bl	11034 <from_mont_n>
   1c838:	b003      	add	sp, #12
   1c83a:	f85d fb04 	ldr.w	pc, [sp], #4
   1c83e:	bf00      	nop
   1c840:	fffcfffd 	.word	0xfffcfffd
   1c844:	00028738 	.word	0x00028738

0001c848 <blst_fp_from_uint64>:
   1c848:	b500      	push	{lr}
   1c84a:	b083      	sub	sp, #12
   1c84c:	4b05      	ldr	r3, [pc, #20]	; (1c864 <blst_fp_from_uint64+0x1c>)
   1c84e:	220c      	movs	r2, #12
   1c850:	9201      	str	r2, [sp, #4]
   1c852:	4a05      	ldr	r2, [pc, #20]	; (1c868 <blst_fp_from_uint64+0x20>)
   1c854:	9200      	str	r2, [sp, #0]
   1c856:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
   1c85a:	f7f4 f8b9 	bl	109d0 <mul_mont_n>
   1c85e:	b003      	add	sp, #12
   1c860:	f85d fb04 	ldr.w	pc, [sp], #4
   1c864:	00028738 	.word	0x00028738
   1c868:	fffcfffd 	.word	0xfffcfffd

0001c86c <blst_uint64_from_fp>:
   1c86c:	b500      	push	{lr}
   1c86e:	b083      	sub	sp, #12
   1c870:	230c      	movs	r3, #12
   1c872:	9300      	str	r3, [sp, #0]
   1c874:	4b03      	ldr	r3, [pc, #12]	; (1c884 <blst_uint64_from_fp+0x18>)
   1c876:	4a04      	ldr	r2, [pc, #16]	; (1c888 <blst_uint64_from_fp+0x1c>)
   1c878:	f7f4 fbdc 	bl	11034 <from_mont_n>
   1c87c:	b003      	add	sp, #12
   1c87e:	f85d fb04 	ldr.w	pc, [sp], #4
   1c882:	bf00      	nop
   1c884:	fffcfffd 	.word	0xfffcfffd
   1c888:	00028738 	.word	0x00028738

0001c88c <blst_fp_from_bendian>:
   1c88c:	b510      	push	{r4, lr}
   1c88e:	b08e      	sub	sp, #56	; 0x38
   1c890:	f101 0e30 	add.w	lr, r1, #48	; 0x30
   1c894:	460a      	mov	r2, r1
   1c896:	2400      	movs	r4, #0
   1c898:	f101 0c2f 	add.w	ip, r1, #47	; 0x2f
   1c89c:	ebac 0302 	sub.w	r3, ip, r2
   1c8a0:	f812 1b01 	ldrb.w	r1, [r2], #1
   1c8a4:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
   1c8a8:	f023 0303 	bic.w	r3, r3, #3
   1c8ac:	a90e      	add	r1, sp, #56	; 0x38
   1c8ae:	440b      	add	r3, r1
   1c8b0:	f843 4c30 	str.w	r4, [r3, #-48]
   1c8b4:	4572      	cmp	r2, lr
   1c8b6:	d1f1      	bne.n	1c89c <blst_fp_from_bendian+0x10>
   1c8b8:	4b05      	ldr	r3, [pc, #20]	; (1c8d0 <blst_fp_from_bendian+0x44>)
   1c8ba:	220c      	movs	r2, #12
   1c8bc:	9201      	str	r2, [sp, #4]
   1c8be:	4a05      	ldr	r2, [pc, #20]	; (1c8d4 <blst_fp_from_bendian+0x48>)
   1c8c0:	9200      	str	r2, [sp, #0]
   1c8c2:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
   1c8c6:	a902      	add	r1, sp, #8
   1c8c8:	f7f4 f882 	bl	109d0 <mul_mont_n>
   1c8cc:	b00e      	add	sp, #56	; 0x38
   1c8ce:	bd10      	pop	{r4, pc}
   1c8d0:	00028738 	.word	0x00028738
   1c8d4:	fffcfffd 	.word	0xfffcfffd

0001c8d8 <blst_bendian_from_fp>:
   1c8d8:	b510      	push	{r4, lr}
   1c8da:	b08e      	sub	sp, #56	; 0x38
   1c8dc:	4604      	mov	r4, r0
   1c8de:	230c      	movs	r3, #12
   1c8e0:	9300      	str	r3, [sp, #0]
   1c8e2:	4b0e      	ldr	r3, [pc, #56]	; (1c91c <blst_bendian_from_fp+0x44>)
   1c8e4:	4a0e      	ldr	r2, [pc, #56]	; (1c920 <blst_bendian_from_fp+0x48>)
   1c8e6:	a802      	add	r0, sp, #8
   1c8e8:	f7f4 fba4 	bl	11034 <from_mont_n>
   1c8ec:	f104 0c30 	add.w	ip, r4, #48	; 0x30
   1c8f0:	4622      	mov	r2, r4
   1c8f2:	f104 002f 	add.w	r0, r4, #47	; 0x2f
   1c8f6:	1a83      	subs	r3, r0, r2
   1c8f8:	f023 0103 	bic.w	r1, r3, #3
   1c8fc:	ac0e      	add	r4, sp, #56	; 0x38
   1c8fe:	4421      	add	r1, r4
   1c900:	f003 0303 	and.w	r3, r3, #3
   1c904:	00db      	lsls	r3, r3, #3
   1c906:	f851 1c30 	ldr.w	r1, [r1, #-48]
   1c90a:	fa21 f303 	lsr.w	r3, r1, r3
   1c90e:	f802 3b01 	strb.w	r3, [r2], #1
   1c912:	4562      	cmp	r2, ip
   1c914:	d1ef      	bne.n	1c8f6 <blst_bendian_from_fp+0x1e>
   1c916:	b00e      	add	sp, #56	; 0x38
   1c918:	bd10      	pop	{r4, pc}
   1c91a:	bf00      	nop
   1c91c:	fffcfffd 	.word	0xfffcfffd
   1c920:	00028738 	.word	0x00028738

0001c924 <blst_fp_from_lendian>:
   1c924:	b510      	push	{r4, lr}
   1c926:	b08e      	sub	sp, #56	; 0x38
   1c928:	f101 0230 	add.w	r2, r1, #48	; 0x30
   1c92c:	2400      	movs	r4, #0
   1c92e:	ea6f 0e01 	mvn.w	lr, r1
   1c932:	eb0e 0302 	add.w	r3, lr, r2
   1c936:	f812 cd01 	ldrb.w	ip, [r2, #-1]!
   1c93a:	ea4c 2404 	orr.w	r4, ip, r4, lsl #8
   1c93e:	f023 0303 	bic.w	r3, r3, #3
   1c942:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
   1c946:	4463      	add	r3, ip
   1c948:	f843 4c30 	str.w	r4, [r3, #-48]
   1c94c:	428a      	cmp	r2, r1
   1c94e:	d1f0      	bne.n	1c932 <blst_fp_from_lendian+0xe>
   1c950:	4b05      	ldr	r3, [pc, #20]	; (1c968 <blst_fp_from_lendian+0x44>)
   1c952:	220c      	movs	r2, #12
   1c954:	9201      	str	r2, [sp, #4]
   1c956:	4a05      	ldr	r2, [pc, #20]	; (1c96c <blst_fp_from_lendian+0x48>)
   1c958:	9200      	str	r2, [sp, #0]
   1c95a:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
   1c95e:	a902      	add	r1, sp, #8
   1c960:	f7f4 f836 	bl	109d0 <mul_mont_n>
   1c964:	b00e      	add	sp, #56	; 0x38
   1c966:	bd10      	pop	{r4, pc}
   1c968:	00028738 	.word	0x00028738
   1c96c:	fffcfffd 	.word	0xfffcfffd

0001c970 <blst_lendian_from_fp>:
   1c970:	b530      	push	{r4, r5, lr}
   1c972:	b08f      	sub	sp, #60	; 0x3c
   1c974:	4604      	mov	r4, r0
   1c976:	ad02      	add	r5, sp, #8
   1c978:	230c      	movs	r3, #12
   1c97a:	9300      	str	r3, [sp, #0]
   1c97c:	4b0c      	ldr	r3, [pc, #48]	; (1c9b0 <blst_lendian_from_fp+0x40>)
   1c97e:	4a0d      	ldr	r2, [pc, #52]	; (1c9b4 <blst_lendian_from_fp+0x44>)
   1c980:	4628      	mov	r0, r5
   1c982:	f7f4 fb57 	bl	11034 <from_mont_n>
   1c986:	42ac      	cmp	r4, r5
   1c988:	d00f      	beq.n	1c9aa <blst_lendian_from_fp+0x3a>
   1c98a:	4628      	mov	r0, r5
   1c98c:	1d21      	adds	r1, r4, #4
   1c98e:	ac0e      	add	r4, sp, #56	; 0x38
   1c990:	e002      	b.n	1c998 <blst_lendian_from_fp+0x28>
   1c992:	3104      	adds	r1, #4
   1c994:	42a0      	cmp	r0, r4
   1c996:	d008      	beq.n	1c9aa <blst_lendian_from_fp+0x3a>
   1c998:	1f0a      	subs	r2, r1, #4
   1c99a:	f850 3b04 	ldr.w	r3, [r0], #4
   1c99e:	f802 3b01 	strb.w	r3, [r2], #1
   1c9a2:	0a1b      	lsrs	r3, r3, #8
   1c9a4:	428a      	cmp	r2, r1
   1c9a6:	d1fa      	bne.n	1c99e <blst_lendian_from_fp+0x2e>
   1c9a8:	e7f3      	b.n	1c992 <blst_lendian_from_fp+0x22>
   1c9aa:	b00f      	add	sp, #60	; 0x3c
   1c9ac:	bd30      	pop	{r4, r5, pc}
   1c9ae:	bf00      	nop
   1c9b0:	fffcfffd 	.word	0xfffcfffd
   1c9b4:	00028738 	.word	0x00028738

0001c9b8 <blst_fp2_add>:
   1c9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c9bc:	b082      	sub	sp, #8
   1c9be:	4604      	mov	r4, r0
   1c9c0:	460d      	mov	r5, r1
   1c9c2:	4616      	mov	r6, r2
   1c9c4:	4f0a      	ldr	r7, [pc, #40]	; (1c9f0 <blst_fp2_add+0x38>)
   1c9c6:	f04f 080c 	mov.w	r8, #12
   1c9ca:	f8cd 8000 	str.w	r8, [sp]
   1c9ce:	463b      	mov	r3, r7
   1c9d0:	f7f4 f9a6 	bl	10d20 <add_mod_n>
   1c9d4:	f8cd 8000 	str.w	r8, [sp]
   1c9d8:	463b      	mov	r3, r7
   1c9da:	f106 0230 	add.w	r2, r6, #48	; 0x30
   1c9de:	f105 0130 	add.w	r1, r5, #48	; 0x30
   1c9e2:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1c9e6:	f7f4 f99b 	bl	10d20 <add_mod_n>
   1c9ea:	b002      	add	sp, #8
   1c9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c9f0:	00028738 	.word	0x00028738

0001c9f4 <blst_fp2_sub>:
   1c9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c9f8:	b082      	sub	sp, #8
   1c9fa:	4604      	mov	r4, r0
   1c9fc:	460d      	mov	r5, r1
   1c9fe:	4616      	mov	r6, r2
   1ca00:	4f0a      	ldr	r7, [pc, #40]	; (1ca2c <blst_fp2_sub+0x38>)
   1ca02:	f04f 080c 	mov.w	r8, #12
   1ca06:	f8cd 8000 	str.w	r8, [sp]
   1ca0a:	463b      	mov	r3, r7
   1ca0c:	f7f3 fe32 	bl	10674 <sub_mod_n>
   1ca10:	f8cd 8000 	str.w	r8, [sp]
   1ca14:	463b      	mov	r3, r7
   1ca16:	f106 0230 	add.w	r2, r6, #48	; 0x30
   1ca1a:	f105 0130 	add.w	r1, r5, #48	; 0x30
   1ca1e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1ca22:	f7f3 fe27 	bl	10674 <sub_mod_n>
   1ca26:	b002      	add	sp, #8
   1ca28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ca2c:	00028738 	.word	0x00028738

0001ca30 <blst_fp2_mul_by_3>:
   1ca30:	b570      	push	{r4, r5, r6, lr}
   1ca32:	4604      	mov	r4, r0
   1ca34:	460d      	mov	r5, r1
   1ca36:	4e07      	ldr	r6, [pc, #28]	; (1ca54 <blst_fp2_mul_by_3+0x24>)
   1ca38:	230c      	movs	r3, #12
   1ca3a:	4632      	mov	r2, r6
   1ca3c:	f7f4 f9f8 	bl	10e30 <mul_by_3_mod_n>
   1ca40:	230c      	movs	r3, #12
   1ca42:	4632      	mov	r2, r6
   1ca44:	f105 0130 	add.w	r1, r5, #48	; 0x30
   1ca48:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1ca4c:	f7f4 f9f0 	bl	10e30 <mul_by_3_mod_n>
   1ca50:	bd70      	pop	{r4, r5, r6, pc}
   1ca52:	bf00      	nop
   1ca54:	00028738 	.word	0x00028738

0001ca58 <blst_fp2_mul_by_8>:
   1ca58:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ca5a:	b083      	sub	sp, #12
   1ca5c:	4604      	mov	r4, r0
   1ca5e:	460d      	mov	r5, r1
   1ca60:	4e08      	ldr	r6, [pc, #32]	; (1ca84 <blst_fp2_mul_by_8+0x2c>)
   1ca62:	270c      	movs	r7, #12
   1ca64:	9700      	str	r7, [sp, #0]
   1ca66:	4633      	mov	r3, r6
   1ca68:	2203      	movs	r2, #3
   1ca6a:	f7f4 fa81 	bl	10f70 <lshift_mod_n>
   1ca6e:	9700      	str	r7, [sp, #0]
   1ca70:	4633      	mov	r3, r6
   1ca72:	2203      	movs	r2, #3
   1ca74:	f105 0130 	add.w	r1, r5, #48	; 0x30
   1ca78:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1ca7c:	f7f4 fa78 	bl	10f70 <lshift_mod_n>
   1ca80:	b003      	add	sp, #12
   1ca82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ca84:	00028738 	.word	0x00028738

0001ca88 <blst_fp2_lshift>:
   1ca88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ca8c:	b082      	sub	sp, #8
   1ca8e:	4604      	mov	r4, r0
   1ca90:	460d      	mov	r5, r1
   1ca92:	4616      	mov	r6, r2
   1ca94:	4f0a      	ldr	r7, [pc, #40]	; (1cac0 <blst_fp2_lshift+0x38>)
   1ca96:	f04f 080c 	mov.w	r8, #12
   1ca9a:	f8cd 8000 	str.w	r8, [sp]
   1ca9e:	463b      	mov	r3, r7
   1caa0:	f7f4 fa66 	bl	10f70 <lshift_mod_n>
   1caa4:	f8cd 8000 	str.w	r8, [sp]
   1caa8:	463b      	mov	r3, r7
   1caaa:	4632      	mov	r2, r6
   1caac:	f105 0130 	add.w	r1, r5, #48	; 0x30
   1cab0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1cab4:	f7f4 fa5c 	bl	10f70 <lshift_mod_n>
   1cab8:	b002      	add	sp, #8
   1caba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cabe:	bf00      	nop
   1cac0:	00028738 	.word	0x00028738

0001cac4 <blst_fp2_mul>:
   1cac4:	b500      	push	{lr}
   1cac6:	b083      	sub	sp, #12
   1cac8:	4b03      	ldr	r3, [pc, #12]	; (1cad8 <blst_fp2_mul+0x14>)
   1caca:	9300      	str	r3, [sp, #0]
   1cacc:	4b03      	ldr	r3, [pc, #12]	; (1cadc <blst_fp2_mul+0x18>)
   1cace:	f7f7 fc41 	bl	14354 <mul_mont_384x>
   1cad2:	b003      	add	sp, #12
   1cad4:	f85d fb04 	ldr.w	pc, [sp], #4
   1cad8:	fffcfffd 	.word	0xfffcfffd
   1cadc:	00028738 	.word	0x00028738

0001cae0 <blst_fp2_sqr>:
   1cae0:	b508      	push	{r3, lr}
   1cae2:	4b02      	ldr	r3, [pc, #8]	; (1caec <blst_fp2_sqr+0xc>)
   1cae4:	4a02      	ldr	r2, [pc, #8]	; (1caf0 <blst_fp2_sqr+0x10>)
   1cae6:	f7fa fec3 	bl	17870 <sqr_mont_384x>
   1caea:	bd08      	pop	{r3, pc}
   1caec:	fffcfffd 	.word	0xfffcfffd
   1caf0:	00028738 	.word	0x00028738

0001caf4 <blst_fp2_cneg>:
   1caf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1caf8:	b082      	sub	sp, #8
   1cafa:	4605      	mov	r5, r0
   1cafc:	460e      	mov	r6, r1
   1cafe:	1e54      	subs	r4, r2, #1
   1cb00:	ea24 0402 	bic.w	r4, r4, r2
   1cb04:	43e4      	mvns	r4, r4
   1cb06:	0fe4      	lsrs	r4, r4, #31
   1cb08:	4f0a      	ldr	r7, [pc, #40]	; (1cb34 <blst_fp2_cneg+0x40>)
   1cb0a:	f04f 080c 	mov.w	r8, #12
   1cb0e:	f8cd 8000 	str.w	r8, [sp]
   1cb12:	463b      	mov	r3, r7
   1cb14:	4622      	mov	r2, r4
   1cb16:	f7f4 ff97 	bl	11a48 <cneg_mod_n>
   1cb1a:	f8cd 8000 	str.w	r8, [sp]
   1cb1e:	463b      	mov	r3, r7
   1cb20:	4622      	mov	r2, r4
   1cb22:	f106 0130 	add.w	r1, r6, #48	; 0x30
   1cb26:	f105 0030 	add.w	r0, r5, #48	; 0x30
   1cb2a:	f7f4 ff8d 	bl	11a48 <cneg_mod_n>
   1cb2e:	b002      	add	sp, #8
   1cb30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cb34:	00028738 	.word	0x00028738

0001cb38 <blst_p1_add>:
   1cb38:	b508      	push	{r3, lr}
   1cb3a:	f7f5 fc97 	bl	1246c <POINTonE1_add>
   1cb3e:	bd08      	pop	{r3, pc}

0001cb40 <blst_p1_add_or_double>:
   1cb40:	b508      	push	{r3, lr}
   1cb42:	2300      	movs	r3, #0
   1cb44:	f7f6 f9ea 	bl	12f1c <POINTonE1_dadd>
   1cb48:	bd08      	pop	{r3, pc}

0001cb4a <blst_p1_add_affine>:
   1cb4a:	b508      	push	{r3, lr}
   1cb4c:	f7f5 fac0 	bl	120d0 <POINTonE1_add_affine>
   1cb50:	bd08      	pop	{r3, pc}

0001cb52 <blst_p1_add_or_double_affine>:
   1cb52:	b508      	push	{r3, lr}
   1cb54:	f7f6 f870 	bl	12c38 <POINTonE1_dadd_affine>
   1cb58:	bd08      	pop	{r3, pc}

0001cb5a <blst_p1_double>:
   1cb5a:	b508      	push	{r3, lr}
   1cb5c:	f7f5 f982 	bl	11e64 <POINTonE1_double>
   1cb60:	bd08      	pop	{r3, pc}

0001cb62 <blst_p1_affine_is_equal>:
   1cb62:	b410      	push	{r4}
   1cb64:	1f02      	subs	r2, r0, #4
   1cb66:	3904      	subs	r1, #4
   1cb68:	f100 0c5c 	add.w	ip, r0, #92	; 0x5c
   1cb6c:	2000      	movs	r0, #0
   1cb6e:	f852 3f04 	ldr.w	r3, [r2, #4]!
   1cb72:	f851 4f04 	ldr.w	r4, [r1, #4]!
   1cb76:	4063      	eors	r3, r4
   1cb78:	4318      	orrs	r0, r3
   1cb7a:	4562      	cmp	r2, ip
   1cb7c:	d1f7      	bne.n	1cb6e <blst_p1_affine_is_equal+0xc>
   1cb7e:	1e43      	subs	r3, r0, #1
   1cb80:	ea23 0000 	bic.w	r0, r3, r0
   1cb84:	0fc0      	lsrs	r0, r0, #31
   1cb86:	bc10      	pop	{r4}
   1cb88:	4770      	bx	lr

0001cb8a <blst_p2_add>:
   1cb8a:	b508      	push	{r3, lr}
   1cb8c:	f7fb fd26 	bl	185dc <POINTonE2_add>
   1cb90:	bd08      	pop	{r3, pc}

0001cb92 <blst_p2_add_or_double>:
   1cb92:	b508      	push	{r3, lr}
   1cb94:	2300      	movs	r3, #0
   1cb96:	f7fb ffb1 	bl	18afc <POINTonE2_dadd>
   1cb9a:	bd08      	pop	{r3, pc}

0001cb9c <blst_p2_add_affine>:
   1cb9c:	b508      	push	{r3, lr}
   1cb9e:	f7ff fb87 	bl	1c2b0 <POINTonE2_add_affine>
   1cba2:	bd08      	pop	{r3, pc}

0001cba4 <blst_p2_add_or_double_affine>:
   1cba4:	b508      	push	{r3, lr}
   1cba6:	f7fe ff57 	bl	1ba58 <POINTonE2_dadd_affine>
   1cbaa:	bd08      	pop	{r3, pc}

0001cbac <blst_p2_double>:
   1cbac:	b508      	push	{r3, lr}
   1cbae:	f7fb fe9d 	bl	188ec <POINTonE2_double>
   1cbb2:	bd08      	pop	{r3, pc}

0001cbb4 <blst_p2_affine_is_equal>:
   1cbb4:	b410      	push	{r4}
   1cbb6:	1f02      	subs	r2, r0, #4
   1cbb8:	3904      	subs	r1, #4
   1cbba:	f100 0cbc 	add.w	ip, r0, #188	; 0xbc
   1cbbe:	2000      	movs	r0, #0
   1cbc0:	f852 3f04 	ldr.w	r3, [r2, #4]!
   1cbc4:	f851 4f04 	ldr.w	r4, [r1, #4]!
   1cbc8:	4063      	eors	r3, r4
   1cbca:	4318      	orrs	r0, r3
   1cbcc:	4562      	cmp	r2, ip
   1cbce:	d1f7      	bne.n	1cbc0 <blst_p2_affine_is_equal+0xc>
   1cbd0:	1e43      	subs	r3, r0, #1
   1cbd2:	ea23 0000 	bic.w	r0, r3, r0
   1cbd6:	0fc0      	lsrs	r0, r0, #31
   1cbd8:	bc10      	pop	{r4}
   1cbda:	4770      	bx	lr

0001cbdc <blst_scalar_from_uint32>:
   1cbdc:	4281      	cmp	r1, r0
   1cbde:	d014      	beq.n	1cc0a <blst_scalar_from_uint32+0x2e>
   1cbe0:	1d03      	adds	r3, r0, #4
   1cbe2:	3904      	subs	r1, #4
   1cbe4:	3024      	adds	r0, #36	; 0x24
   1cbe6:	f851 2f04 	ldr.w	r2, [r1, #4]!
   1cbea:	f803 2c04 	strb.w	r2, [r3, #-4]
   1cbee:	ea4f 2c12 	mov.w	ip, r2, lsr #8
   1cbf2:	f803 cc03 	strb.w	ip, [r3, #-3]
   1cbf6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   1cbfa:	f803 cc02 	strb.w	ip, [r3, #-2]
   1cbfe:	0e12      	lsrs	r2, r2, #24
   1cc00:	f803 2c01 	strb.w	r2, [r3, #-1]
   1cc04:	3304      	adds	r3, #4
   1cc06:	4283      	cmp	r3, r0
   1cc08:	d1ed      	bne.n	1cbe6 <blst_scalar_from_uint32+0xa>
   1cc0a:	4770      	bx	lr

0001cc0c <blst_uint32_from_scalar>:
   1cc0c:	4288      	cmp	r0, r1
   1cc0e:	d019      	beq.n	1cc44 <blst_uint32_from_scalar+0x38>
   1cc10:	b500      	push	{lr}
   1cc12:	1d0a      	adds	r2, r1, #4
   1cc14:	3804      	subs	r0, #4
   1cc16:	3124      	adds	r1, #36	; 0x24
   1cc18:	f812 cc04 	ldrb.w	ip, [r2, #-4]
   1cc1c:	f812 ec03 	ldrb.w	lr, [r2, #-3]
   1cc20:	f812 3c02 	ldrb.w	r3, [r2, #-2]
   1cc24:	041b      	lsls	r3, r3, #16
   1cc26:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
   1cc2a:	ea43 030c 	orr.w	r3, r3, ip
   1cc2e:	f812 cc01 	ldrb.w	ip, [r2, #-1]
   1cc32:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   1cc36:	f840 3f04 	str.w	r3, [r0, #4]!
   1cc3a:	3204      	adds	r2, #4
   1cc3c:	428a      	cmp	r2, r1
   1cc3e:	d1eb      	bne.n	1cc18 <blst_uint32_from_scalar+0xc>
   1cc40:	f85d fb04 	ldr.w	pc, [sp], #4
   1cc44:	4770      	bx	lr

0001cc46 <blst_scalar_from_uint64>:
   1cc46:	4281      	cmp	r1, r0
   1cc48:	d026      	beq.n	1cc98 <blst_scalar_from_uint64+0x52>
   1cc4a:	b500      	push	{lr}
   1cc4c:	f100 0308 	add.w	r3, r0, #8
   1cc50:	f1a1 0c08 	sub.w	ip, r1, #8
   1cc54:	3028      	adds	r0, #40	; 0x28
   1cc56:	f85c 1f08 	ldr.w	r1, [ip, #8]!
   1cc5a:	f8dc 2004 	ldr.w	r2, [ip, #4]
   1cc5e:	f803 1c08 	strb.w	r1, [r3, #-8]
   1cc62:	ea4f 2e11 	mov.w	lr, r1, lsr #8
   1cc66:	f803 ec07 	strb.w	lr, [r3, #-7]
   1cc6a:	ea4f 4e11 	mov.w	lr, r1, lsr #16
   1cc6e:	f803 ec06 	strb.w	lr, [r3, #-6]
   1cc72:	0e09      	lsrs	r1, r1, #24
   1cc74:	f803 1c05 	strb.w	r1, [r3, #-5]
   1cc78:	f803 2c04 	strb.w	r2, [r3, #-4]
   1cc7c:	0a11      	lsrs	r1, r2, #8
   1cc7e:	f803 1c03 	strb.w	r1, [r3, #-3]
   1cc82:	0c11      	lsrs	r1, r2, #16
   1cc84:	f803 1c02 	strb.w	r1, [r3, #-2]
   1cc88:	0e12      	lsrs	r2, r2, #24
   1cc8a:	f803 2c01 	strb.w	r2, [r3, #-1]
   1cc8e:	3308      	adds	r3, #8
   1cc90:	4283      	cmp	r3, r0
   1cc92:	d1e0      	bne.n	1cc56 <blst_scalar_from_uint64+0x10>
   1cc94:	f85d fb04 	ldr.w	pc, [sp], #4
   1cc98:	4770      	bx	lr

0001cc9a <blst_uint64_from_scalar>:
   1cc9a:	4288      	cmp	r0, r1
   1cc9c:	d029      	beq.n	1ccf2 <blst_uint64_from_scalar+0x58>
   1cc9e:	b500      	push	{lr}
   1cca0:	f101 0308 	add.w	r3, r1, #8
   1cca4:	3808      	subs	r0, #8
   1cca6:	f101 0c28 	add.w	ip, r1, #40	; 0x28
   1ccaa:	f813 1c08 	ldrb.w	r1, [r3, #-8]
   1ccae:	f813 ec07 	ldrb.w	lr, [r3, #-7]
   1ccb2:	f813 2c06 	ldrb.w	r2, [r3, #-6]
   1ccb6:	0412      	lsls	r2, r2, #16
   1ccb8:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
   1ccbc:	430a      	orrs	r2, r1
   1ccbe:	f813 1c05 	ldrb.w	r1, [r3, #-5]
   1ccc2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   1ccc6:	f813 1c04 	ldrb.w	r1, [r3, #-4]
   1ccca:	f813 ec03 	ldrb.w	lr, [r3, #-3]
   1ccce:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
   1ccd2:	f813 ec02 	ldrb.w	lr, [r3, #-2]
   1ccd6:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
   1ccda:	f813 ec01 	ldrb.w	lr, [r3, #-1]
   1ccde:	ea41 610e 	orr.w	r1, r1, lr, lsl #24
   1cce2:	f840 2f08 	str.w	r2, [r0, #8]!
   1cce6:	6041      	str	r1, [r0, #4]
   1cce8:	3308      	adds	r3, #8
   1ccea:	4563      	cmp	r3, ip
   1ccec:	d1dd      	bne.n	1ccaa <blst_uint64_from_scalar+0x10>
   1ccee:	f85d fb04 	ldr.w	pc, [sp], #4
   1ccf2:	4770      	bx	lr

0001ccf4 <blst_scalar_from_bendian>:
   1ccf4:	b510      	push	{r4, lr}
   1ccf6:	b088      	sub	sp, #32
   1ccf8:	468e      	mov	lr, r1
   1ccfa:	f101 0420 	add.w	r4, r1, #32
   1ccfe:	460a      	mov	r2, r1
   1cd00:	2100      	movs	r1, #0
   1cd02:	f10e 0e1f 	add.w	lr, lr, #31
   1cd06:	ebae 0302 	sub.w	r3, lr, r2
   1cd0a:	f812 cb01 	ldrb.w	ip, [r2], #1
   1cd0e:	ea4c 2101 	orr.w	r1, ip, r1, lsl #8
   1cd12:	f023 0303 	bic.w	r3, r3, #3
   1cd16:	f10d 0c20 	add.w	ip, sp, #32
   1cd1a:	4463      	add	r3, ip
   1cd1c:	f843 1c20 	str.w	r1, [r3, #-32]
   1cd20:	42a2      	cmp	r2, r4
   1cd22:	d1f0      	bne.n	1cd06 <blst_scalar_from_bendian+0x12>
   1cd24:	46ec      	mov	ip, sp
   1cd26:	4560      	cmp	r0, ip
   1cd28:	d005      	beq.n	1cd36 <blst_scalar_from_bendian+0x42>
   1cd2a:	1d01      	adds	r1, r0, #4
   1cd2c:	f1ad 0004 	sub.w	r0, sp, #4
   1cd30:	f10c 041c 	add.w	r4, ip, #28
   1cd34:	e00c      	b.n	1cd50 <blst_scalar_from_bendian+0x5c>
   1cd36:	f10c 0220 	add.w	r2, ip, #32
   1cd3a:	2300      	movs	r3, #0
   1cd3c:	f84c 3b04 	str.w	r3, [ip], #4
   1cd40:	4562      	cmp	r2, ip
   1cd42:	d1fb      	bne.n	1cd3c <blst_scalar_from_bendian+0x48>
   1cd44:	466b      	mov	r3, sp
   1cd46:	b008      	add	sp, #32
   1cd48:	bd10      	pop	{r4, pc}
   1cd4a:	3104      	adds	r1, #4
   1cd4c:	42a0      	cmp	r0, r4
   1cd4e:	d0f2      	beq.n	1cd36 <blst_scalar_from_bendian+0x42>
   1cd50:	1f0a      	subs	r2, r1, #4
   1cd52:	f850 3f04 	ldr.w	r3, [r0, #4]!
   1cd56:	f802 3b01 	strb.w	r3, [r2], #1
   1cd5a:	0a1b      	lsrs	r3, r3, #8
   1cd5c:	428a      	cmp	r2, r1
   1cd5e:	d1fa      	bne.n	1cd56 <blst_scalar_from_bendian+0x62>
   1cd60:	e7f3      	b.n	1cd4a <blst_scalar_from_bendian+0x56>

0001cd62 <blst_bendian_from_scalar>:
   1cd62:	b510      	push	{r4, lr}
   1cd64:	b088      	sub	sp, #32
   1cd66:	f101 0220 	add.w	r2, r1, #32
   1cd6a:	2400      	movs	r4, #0
   1cd6c:	ea6f 0e01 	mvn.w	lr, r1
   1cd70:	eb0e 0302 	add.w	r3, lr, r2
   1cd74:	f812 cd01 	ldrb.w	ip, [r2, #-1]!
   1cd78:	ea4c 2404 	orr.w	r4, ip, r4, lsl #8
   1cd7c:	f023 0303 	bic.w	r3, r3, #3
   1cd80:	f10d 0c20 	add.w	ip, sp, #32
   1cd84:	4463      	add	r3, ip
   1cd86:	f843 4c20 	str.w	r4, [r3, #-32]
   1cd8a:	428a      	cmp	r2, r1
   1cd8c:	d1f0      	bne.n	1cd70 <blst_bendian_from_scalar+0xe>
   1cd8e:	f100 0420 	add.w	r4, r0, #32
   1cd92:	4602      	mov	r2, r0
   1cd94:	301f      	adds	r0, #31
   1cd96:	1a83      	subs	r3, r0, r2
   1cd98:	f023 0103 	bic.w	r1, r3, #3
   1cd9c:	f10d 0c20 	add.w	ip, sp, #32
   1cda0:	4461      	add	r1, ip
   1cda2:	f003 0303 	and.w	r3, r3, #3
   1cda6:	00db      	lsls	r3, r3, #3
   1cda8:	f851 1c20 	ldr.w	r1, [r1, #-32]
   1cdac:	fa21 f303 	lsr.w	r3, r1, r3
   1cdb0:	f802 3b01 	strb.w	r3, [r2], #1
   1cdb4:	42a2      	cmp	r2, r4
   1cdb6:	d1ee      	bne.n	1cd96 <blst_bendian_from_scalar+0x34>
   1cdb8:	466b      	mov	r3, sp
   1cdba:	4661      	mov	r1, ip
   1cdbc:	2200      	movs	r2, #0
   1cdbe:	f843 2b04 	str.w	r2, [r3], #4
   1cdc2:	4299      	cmp	r1, r3
   1cdc4:	d1fb      	bne.n	1cdbe <blst_bendian_from_scalar+0x5c>
   1cdc6:	466b      	mov	r3, sp
   1cdc8:	b008      	add	sp, #32
   1cdca:	bd10      	pop	{r4, pc}

0001cdcc <blst_scalar_from_lendian>:
   1cdcc:	4288      	cmp	r0, r1
   1cdce:	d009      	beq.n	1cde4 <blst_scalar_from_lendian+0x18>
   1cdd0:	1e4b      	subs	r3, r1, #1
   1cdd2:	1e42      	subs	r2, r0, #1
   1cdd4:	f101 001f 	add.w	r0, r1, #31
   1cdd8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   1cddc:	f802 1f01 	strb.w	r1, [r2, #1]!
   1cde0:	4283      	cmp	r3, r0
   1cde2:	d1f9      	bne.n	1cdd8 <blst_scalar_from_lendian+0xc>
   1cde4:	4770      	bx	lr

0001cde6 <blst_lendian_from_scalar>:
   1cde6:	4288      	cmp	r0, r1
   1cde8:	d009      	beq.n	1cdfe <blst_lendian_from_scalar+0x18>
   1cdea:	1e4b      	subs	r3, r1, #1
   1cdec:	1e42      	subs	r2, r0, #1
   1cdee:	f101 001f 	add.w	r0, r1, #31
   1cdf2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   1cdf6:	f802 1f01 	strb.w	r1, [r2, #1]!
   1cdfa:	4283      	cmp	r3, r0
   1cdfc:	d1f9      	bne.n	1cdf2 <blst_lendian_from_scalar+0xc>
   1cdfe:	4770      	bx	lr

0001ce00 <blst_scalar_fr_check>:
   1ce00:	b530      	push	{r4, r5, lr}
   1ce02:	b093      	sub	sp, #76	; 0x4c
   1ce04:	4605      	mov	r5, r0
   1ce06:	2220      	movs	r2, #32
   1ce08:	2100      	movs	r1, #0
   1ce0a:	a802      	add	r0, sp, #8
   1ce0c:	f00a fc89 	bl	27722 <memset>
   1ce10:	f105 0220 	add.w	r2, r5, #32
   1ce14:	2100      	movs	r1, #0
   1ce16:	43e8      	mvns	r0, r5
   1ce18:	1883      	adds	r3, r0, r2
   1ce1a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1ce1e:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
   1ce22:	f023 0303 	bic.w	r3, r3, #3
   1ce26:	ac12      	add	r4, sp, #72	; 0x48
   1ce28:	4423      	add	r3, r4
   1ce2a:	f843 1c20 	str.w	r1, [r3, #-32]
   1ce2e:	42aa      	cmp	r2, r5
   1ce30:	d1f2      	bne.n	1ce18 <blst_scalar_fr_check+0x18>
   1ce32:	2308      	movs	r3, #8
   1ce34:	9300      	str	r3, [sp, #0]
   1ce36:	4b15      	ldr	r3, [pc, #84]	; (1ce8c <blst_scalar_fr_check+0x8c>)
   1ce38:	aa0a      	add	r2, sp, #40	; 0x28
   1ce3a:	a902      	add	r1, sp, #8
   1ce3c:	4608      	mov	r0, r1
   1ce3e:	f7f3 ff6f 	bl	10d20 <add_mod_n>
   1ce42:	a901      	add	r1, sp, #4
   1ce44:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
   1ce48:	aa02      	add	r2, sp, #8
   1ce4a:	4665      	mov	r5, ip
   1ce4c:	2000      	movs	r0, #0
   1ce4e:	f851 3f04 	ldr.w	r3, [r1, #4]!
   1ce52:	f85c 4f04 	ldr.w	r4, [ip, #4]!
   1ce56:	4063      	eors	r3, r4
   1ce58:	4318      	orrs	r0, r3
   1ce5a:	42a9      	cmp	r1, r5
   1ce5c:	d1f7      	bne.n	1ce4e <blst_scalar_fr_check+0x4e>
   1ce5e:	1e43      	subs	r3, r0, #1
   1ce60:	ea23 0000 	bic.w	r0, r3, r0
   1ce64:	0fc0      	lsrs	r0, r0, #31
   1ce66:	f102 0120 	add.w	r1, r2, #32
   1ce6a:	2300      	movs	r3, #0
   1ce6c:	f842 3b04 	str.w	r3, [r2], #4
   1ce70:	428a      	cmp	r2, r1
   1ce72:	d1fb      	bne.n	1ce6c <blst_scalar_fr_check+0x6c>
   1ce74:	ab02      	add	r3, sp, #8
   1ce76:	ab0a      	add	r3, sp, #40	; 0x28
   1ce78:	a912      	add	r1, sp, #72	; 0x48
   1ce7a:	2200      	movs	r2, #0
   1ce7c:	f843 2b04 	str.w	r2, [r3], #4
   1ce80:	4299      	cmp	r1, r3
   1ce82:	d1fb      	bne.n	1ce7c <blst_scalar_fr_check+0x7c>
   1ce84:	ab0a      	add	r3, sp, #40	; 0x28
   1ce86:	b013      	add	sp, #76	; 0x4c
   1ce88:	bd30      	pop	{r4, r5, pc}
   1ce8a:	bf00      	nop
   1ce8c:	00029af8 	.word	0x00029af8

0001ce90 <blst_sk_check>:
   1ce90:	b508      	push	{r3, lr}
   1ce92:	2208      	movs	r2, #8
   1ce94:	4901      	ldr	r1, [pc, #4]	; (1ce9c <blst_sk_check+0xc>)
   1ce96:	f7f3 fc26 	bl	106e6 <check_mod_n>
   1ce9a:	bd08      	pop	{r3, pc}
   1ce9c:	00029af8 	.word	0x00029af8

0001cea0 <blst_fr_from_uint64>:
   1cea0:	b500      	push	{lr}
   1cea2:	b083      	sub	sp, #12
   1cea4:	4a07      	ldr	r2, [pc, #28]	; (1cec4 <blst_fr_from_uint64+0x24>)
   1cea6:	2308      	movs	r3, #8
   1cea8:	9301      	str	r3, [sp, #4]
   1ceaa:	f04f 33ff 	mov.w	r3, #4294967295
   1ceae:	9300      	str	r3, [sp, #0]
   1ceb0:	f502 7332 	add.w	r3, r2, #712	; 0x2c8
   1ceb4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
   1ceb8:	f7f3 fd8a 	bl	109d0 <mul_mont_n>
   1cebc:	b003      	add	sp, #12
   1cebe:	f85d fb04 	ldr.w	pc, [sp], #4
   1cec2:	bf00      	nop
   1cec4:	00029830 	.word	0x00029830

0001cec8 <blst_uint64_from_fr>:
   1cec8:	b500      	push	{lr}
   1ceca:	b083      	sub	sp, #12
   1cecc:	2308      	movs	r3, #8
   1cece:	9300      	str	r3, [sp, #0]
   1ced0:	f04f 33ff 	mov.w	r3, #4294967295
   1ced4:	4a02      	ldr	r2, [pc, #8]	; (1cee0 <blst_uint64_from_fr+0x18>)
   1ced6:	f7f4 f8ad 	bl	11034 <from_mont_n>
   1ceda:	b003      	add	sp, #12
   1cedc:	f85d fb04 	ldr.w	pc, [sp], #4
   1cee0:	00029af8 	.word	0x00029af8

0001cee4 <blst_fr_from_scalar>:
   1cee4:	b510      	push	{r4, lr}
   1cee6:	b082      	sub	sp, #8
   1cee8:	f101 0320 	add.w	r3, r1, #32
   1ceec:	2400      	movs	r4, #0
   1ceee:	ea6f 0e01 	mvn.w	lr, r1
   1cef2:	eb0e 0203 	add.w	r2, lr, r3
   1cef6:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   1cefa:	ea4c 2404 	orr.w	r4, ip, r4, lsl #8
   1cefe:	f022 0203 	bic.w	r2, r2, #3
   1cf02:	5084      	str	r4, [r0, r2]
   1cf04:	428b      	cmp	r3, r1
   1cf06:	d1f4      	bne.n	1cef2 <_flash_used+0xa>
   1cf08:	4a07      	ldr	r2, [pc, #28]	; (1cf28 <_flash_used+0x40>)
   1cf0a:	2308      	movs	r3, #8
   1cf0c:	9301      	str	r3, [sp, #4]
   1cf0e:	f04f 33ff 	mov.w	r3, #4294967295
   1cf12:	9300      	str	r3, [sp, #0]
   1cf14:	f502 7332 	add.w	r3, r2, #712	; 0x2c8
   1cf18:	f502 6288 	add.w	r2, r2, #1088	; 0x440
   1cf1c:	4601      	mov	r1, r0
   1cf1e:	f7f3 fd57 	bl	109d0 <mul_mont_n>
   1cf22:	b002      	add	sp, #8
   1cf24:	bd10      	pop	{r4, pc}
   1cf26:	bf00      	nop
   1cf28:	00029830 	.word	0x00029830

0001cf2c <blst_scalar_from_fr>:
   1cf2c:	b530      	push	{r4, r5, lr}
   1cf2e:	b08b      	sub	sp, #44	; 0x2c
   1cf30:	4604      	mov	r4, r0
   1cf32:	ad02      	add	r5, sp, #8
   1cf34:	2308      	movs	r3, #8
   1cf36:	9300      	str	r3, [sp, #0]
   1cf38:	f04f 33ff 	mov.w	r3, #4294967295
   1cf3c:	4a10      	ldr	r2, [pc, #64]	; (1cf80 <blst_scalar_from_fr+0x54>)
   1cf3e:	4628      	mov	r0, r5
   1cf40:	f7f4 f878 	bl	11034 <from_mont_n>
   1cf44:	4628      	mov	r0, r5
   1cf46:	42ac      	cmp	r4, r5
   1cf48:	d004      	beq.n	1cf54 <blst_scalar_from_fr+0x28>
   1cf4a:	1d21      	adds	r1, r4, #4
   1cf4c:	ac01      	add	r4, sp, #4
   1cf4e:	f105 0c1c 	add.w	ip, r5, #28
   1cf52:	e00c      	b.n	1cf6e <blst_scalar_from_fr+0x42>
   1cf54:	f100 0220 	add.w	r2, r0, #32
   1cf58:	2300      	movs	r3, #0
   1cf5a:	f840 3b04 	str.w	r3, [r0], #4
   1cf5e:	4290      	cmp	r0, r2
   1cf60:	d1fb      	bne.n	1cf5a <blst_scalar_from_fr+0x2e>
   1cf62:	ab02      	add	r3, sp, #8
   1cf64:	b00b      	add	sp, #44	; 0x2c
   1cf66:	bd30      	pop	{r4, r5, pc}
   1cf68:	3104      	adds	r1, #4
   1cf6a:	4564      	cmp	r4, ip
   1cf6c:	d0f2      	beq.n	1cf54 <blst_scalar_from_fr+0x28>
   1cf6e:	1f0a      	subs	r2, r1, #4
   1cf70:	f854 3f04 	ldr.w	r3, [r4, #4]!
   1cf74:	f802 3b01 	strb.w	r3, [r2], #1
   1cf78:	0a1b      	lsrs	r3, r3, #8
   1cf7a:	428a      	cmp	r2, r1
   1cf7c:	d1fa      	bne.n	1cf74 <blst_scalar_from_fr+0x48>
   1cf7e:	e7f3      	b.n	1cf68 <blst_scalar_from_fr+0x3c>
   1cf80:	00029af8 	.word	0x00029af8

0001cf84 <blst_scalar_from_hexascii>:
   1cf84:	b508      	push	{r3, lr}
   1cf86:	460a      	mov	r2, r1
   1cf88:	2120      	movs	r1, #32
   1cf8a:	f7f3 fcdd 	bl	10948 <limbs_from_hexascii>
   1cf8e:	bd08      	pop	{r3, pc}

0001cf90 <blst_fp_from_hexascii>:
   1cf90:	b510      	push	{r4, lr}
   1cf92:	b082      	sub	sp, #8
   1cf94:	4604      	mov	r4, r0
   1cf96:	460a      	mov	r2, r1
   1cf98:	2130      	movs	r1, #48	; 0x30
   1cf9a:	f7f3 fcd5 	bl	10948 <limbs_from_hexascii>
   1cf9e:	4b06      	ldr	r3, [pc, #24]	; (1cfb8 <blst_fp_from_hexascii+0x28>)
   1cfa0:	220c      	movs	r2, #12
   1cfa2:	9201      	str	r2, [sp, #4]
   1cfa4:	4a05      	ldr	r2, [pc, #20]	; (1cfbc <blst_fp_from_hexascii+0x2c>)
   1cfa6:	9200      	str	r2, [sp, #0]
   1cfa8:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
   1cfac:	4621      	mov	r1, r4
   1cfae:	4620      	mov	r0, r4
   1cfb0:	f7f3 fd0e 	bl	109d0 <mul_mont_n>
   1cfb4:	b002      	add	sp, #8
   1cfb6:	bd10      	pop	{r4, pc}
   1cfb8:	00028738 	.word	0x00028738
   1cfbc:	fffcfffd 	.word	0xfffcfffd

0001cfc0 <blst_uniq_sizeof>:
   1cfc0:	0100      	lsls	r0, r0, #4
   1cfc2:	3008      	adds	r0, #8
   1cfc4:	4770      	bx	lr

0001cfc6 <blst_uniq_init>:
   1cfc6:	2300      	movs	r3, #0
   1cfc8:	6003      	str	r3, [r0, #0]
   1cfca:	6043      	str	r3, [r0, #4]
   1cfcc:	4770      	bx	lr

0001cfce <blst_uniq_test>:
   1cfce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cfd2:	b0a8      	sub	sp, #160	; 0xa0
   1cfd4:	4607      	mov	r7, r0
   1cfd6:	4688      	mov	r8, r1
   1cfd8:	4615      	mov	r5, r2
   1cfda:	6801      	ldr	r1, [r0, #0]
   1cfdc:	2900      	cmp	r1, #0
   1cfde:	f000 80ac 	beq.w	1d13a <blst_uniq_test+0x16c>
   1cfe2:	f10d 0920 	add.w	r9, sp, #32
   1cfe6:	466e      	mov	r6, sp
   1cfe8:	2400      	movs	r4, #0
   1cfea:	e014      	b.n	1d016 <blst_uniq_test+0x48>
   1cfec:	eba0 000e 	sub.w	r0, r0, lr
   1cff0:	e001      	b.n	1cff6 <blst_uniq_test+0x28>
   1cff2:	eba5 000a 	sub.w	r0, r5, sl
   1cff6:	2800      	cmp	r0, #0
   1cff8:	f000 80b7 	beq.w	1d16a <blst_uniq_test+0x19c>
   1cffc:	f849 1b04 	str.w	r1, [r9], #4
   1d000:	2800      	cmp	r0, #0
   1d002:	bfd4      	ite	le
   1d004:	2000      	movle	r0, #0
   1d006:	2001      	movgt	r0, #1
   1d008:	f806 0b01 	strb.w	r0, [r6], #1
   1d00c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   1d010:	1c63      	adds	r3, r4, #1
   1d012:	b1c1      	cbz	r1, 1d046 <blst_uniq_test+0x78>
   1d014:	461c      	mov	r4, r3
   1d016:	688a      	ldr	r2, [r1, #8]
   1d018:	68cb      	ldr	r3, [r1, #12]
   1d01a:	ea4f 0a53 	mov.w	sl, r3, lsr #1
   1d01e:	4628      	mov	r0, r5
   1d020:	4555      	cmp	r5, sl
   1d022:	bf28      	it	cs
   1d024:	4650      	movcs	r0, sl
   1d026:	2800      	cmp	r0, #0
   1d028:	d0e3      	beq.n	1cff2 <blst_uniq_test+0x24>
   1d02a:	f108 33ff 	add.w	r3, r8, #4294967295
   1d02e:	f102 3cff 	add.w	ip, r2, #4294967295
   1d032:	181a      	adds	r2, r3, r0
   1d034:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   1d038:	f81c ef01 	ldrb.w	lr, [ip, #1]!
   1d03c:	4570      	cmp	r0, lr
   1d03e:	d1d5      	bne.n	1cfec <blst_uniq_test+0x1e>
   1d040:	4293      	cmp	r3, r2
   1d042:	d1f7      	bne.n	1d034 <blst_uniq_test+0x66>
   1d044:	e7d5      	b.n	1cff2 <blst_uniq_test+0x24>
   1d046:	687a      	ldr	r2, [r7, #4]
   1d048:	1c51      	adds	r1, r2, #1
   1d04a:	6079      	str	r1, [r7, #4]
   1d04c:	0112      	lsls	r2, r2, #4
   1d04e:	f102 0108 	add.w	r1, r2, #8
   1d052:	4439      	add	r1, r7
   1d054:	443a      	add	r2, r7
   1d056:	2000      	movs	r0, #0
   1d058:	60d0      	str	r0, [r2, #12]
   1d05a:	6090      	str	r0, [r2, #8]
   1d05c:	f8c2 8010 	str.w	r8, [r2, #16]
   1d060:	0068      	lsls	r0, r5, #1
   1d062:	f040 0001 	orr.w	r0, r0, #1
   1d066:	6150      	str	r0, [r2, #20]
   1d068:	2b00      	cmp	r3, #0
   1d06a:	d077      	beq.n	1d15c <blst_uniq_test+0x18e>
   1d06c:	aa28      	add	r2, sp, #160	; 0xa0
   1d06e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
   1d072:	f852 2c80 	ldr.w	r2, [r2, #-128]
   1d076:	a828      	add	r0, sp, #160	; 0xa0
   1d078:	4404      	add	r4, r0
   1d07a:	f814 0ca0 	ldrb.w	r0, [r4, #-160]
   1d07e:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
   1d082:	2b01      	cmp	r3, #1
   1d084:	d96b      	bls.n	1d15e <blst_uniq_test+0x190>
   1d086:	aa08      	add	r2, sp, #32
   1d088:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   1d08c:	f103 3eff 	add.w	lr, r3, #4294967295
   1d090:	f851 4c04 	ldr.w	r4, [r1, #-4]
   1d094:	68e2      	ldr	r2, [r4, #12]
   1d096:	f012 0f01 	tst.w	r2, #1
   1d09a:	d060      	beq.n	1d15e <blst_uniq_test+0x190>
   1d09c:	eb0d 0203 	add.w	r2, sp, r3
   1d0a0:	f812 cc02 	ldrb.w	ip, [r2, #-2]
   1d0a4:	f851 0c08 	ldr.w	r0, [r1, #-8]
   1d0a8:	f08c 0501 	eor.w	r5, ip, #1
   1d0ac:	f850 2025 	ldr.w	r2, [r0, r5, lsl #2]
   1d0b0:	b1a2      	cbz	r2, 1d0dc <blst_uniq_test+0x10e>
   1d0b2:	68d6      	ldr	r6, [r2, #12]
   1d0b4:	f016 0f01 	tst.w	r6, #1
   1d0b8:	d010      	beq.n	1d0dc <blst_uniq_test+0x10e>
   1d0ba:	68c5      	ldr	r5, [r0, #12]
   1d0bc:	f045 0501 	orr.w	r5, r5, #1
   1d0c0:	60c5      	str	r5, [r0, #12]
   1d0c2:	68e0      	ldr	r0, [r4, #12]
   1d0c4:	f020 0001 	bic.w	r0, r0, #1
   1d0c8:	60e0      	str	r0, [r4, #12]
   1d0ca:	68d0      	ldr	r0, [r2, #12]
   1d0cc:	f020 0001 	bic.w	r0, r0, #1
   1d0d0:	60d0      	str	r0, [r2, #12]
   1d0d2:	3b02      	subs	r3, #2
   1d0d4:	3908      	subs	r1, #8
   1d0d6:	2b01      	cmp	r3, #1
   1d0d8:	d8d8      	bhi.n	1d08c <blst_uniq_test+0xbe>
   1d0da:	e040      	b.n	1d15e <blst_uniq_test+0x190>
   1d0dc:	aa28      	add	r2, sp, #160	; 0xa0
   1d0de:	4496      	add	lr, r2
   1d0e0:	f81e 2ca0 	ldrb.w	r2, [lr, #-160]
   1d0e4:	4562      	cmp	r2, ip
   1d0e6:	d024      	beq.n	1d132 <blst_uniq_test+0x164>
   1d0e8:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
   1d0ec:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
   1d0f0:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   1d0f4:	f842 402c 	str.w	r4, [r2, ip, lsl #2]
   1d0f8:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
   1d0fc:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
   1d100:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
   1d104:	68c1      	ldr	r1, [r0, #12]
   1d106:	f041 0101 	orr.w	r1, r1, #1
   1d10a:	60c1      	str	r1, [r0, #12]
   1d10c:	68d1      	ldr	r1, [r2, #12]
   1d10e:	f021 0101 	bic.w	r1, r1, #1
   1d112:	60d1      	str	r1, [r2, #12]
   1d114:	2b02      	cmp	r3, #2
   1d116:	d90e      	bls.n	1d136 <blst_uniq_test+0x168>
   1d118:	3b03      	subs	r3, #3
   1d11a:	a928      	add	r1, sp, #160	; 0xa0
   1d11c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   1d120:	f851 1c80 	ldr.w	r1, [r1, #-128]
   1d124:	a828      	add	r0, sp, #160	; 0xa0
   1d126:	4403      	add	r3, r0
   1d128:	f813 3ca0 	ldrb.w	r3, [r3, #-160]
   1d12c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   1d130:	e015      	b.n	1d15e <blst_uniq_test+0x190>
   1d132:	4622      	mov	r2, r4
   1d134:	e7e0      	b.n	1d0f8 <blst_uniq_test+0x12a>
   1d136:	603a      	str	r2, [r7, #0]
   1d138:	e011      	b.n	1d15e <blst_uniq_test+0x190>
   1d13a:	6842      	ldr	r2, [r0, #4]
   1d13c:	1c53      	adds	r3, r2, #1
   1d13e:	6043      	str	r3, [r0, #4]
   1d140:	0112      	lsls	r2, r2, #4
   1d142:	f102 0108 	add.w	r1, r2, #8
   1d146:	4401      	add	r1, r0
   1d148:	4402      	add	r2, r0
   1d14a:	2300      	movs	r3, #0
   1d14c:	60d3      	str	r3, [r2, #12]
   1d14e:	6093      	str	r3, [r2, #8]
   1d150:	f8c2 8010 	str.w	r8, [r2, #16]
   1d154:	006b      	lsls	r3, r5, #1
   1d156:	f043 0301 	orr.w	r3, r3, #1
   1d15a:	6153      	str	r3, [r2, #20]
   1d15c:	6039      	str	r1, [r7, #0]
   1d15e:	683a      	ldr	r2, [r7, #0]
   1d160:	68d3      	ldr	r3, [r2, #12]
   1d162:	f023 0301 	bic.w	r3, r3, #1
   1d166:	60d3      	str	r3, [r2, #12]
   1d168:	2001      	movs	r0, #1
   1d16a:	b028      	add	sp, #160	; 0xa0
   1d16c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001d170 <z_impl_clock_gettime>:
int z_impl_clock_gettime(clockid_t clock_id, struct timespec *ts)
{
	uint64_t elapsed_nsecs;
	struct timespec base;

	switch (clock_id) {
   1d170:	2801      	cmp	r0, #1
{
   1d172:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d176:	460d      	mov	r5, r1
	switch (clock_id) {
   1d178:	d009      	beq.n	1d18e <z_impl_clock_gettime+0x1e>
   1d17a:	2804      	cmp	r0, #4
   1d17c:	d03a      	beq.n	1d1f4 <z_impl_clock_gettime+0x84>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   1d17e:	f006 fae1 	bl	23744 <z_impl_z_errno>
	case CLOCK_REALTIME:
		base = rt_clock_base;
		break;

	default:
		errno = EINVAL;
   1d182:	2316      	movs	r3, #22
   1d184:	6003      	str	r3, [r0, #0]
   1d186:	f04f 30ff 	mov.w	r0, #4294967295
		ts->tv_sec++;
		ts->tv_nsec -= NSEC_PER_SEC;
	}

	return 0;
}
   1d18a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		base = rt_clock_base;
   1d18e:	4b1e      	ldr	r3, [pc, #120]	; (1d208 <z_impl_clock_gettime+0x98>)
   1d190:	689e      	ldr	r6, [r3, #8]
   1d192:	e9d3 4800 	ldrd	r4, r8, [r3]
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
   1d196:	f00a ff08 	bl	27faa <z_impl_k_uptime_ticks>
   1d19a:	460b      	mov	r3, r1
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   1d19c:	4f1b      	ldr	r7, [pc, #108]	; (1d20c <z_impl_clock_gettime+0x9c>)
   1d19e:	fba0 0107 	umull	r0, r1, r0, r7
   1d1a2:	fb07 1103 	mla	r1, r7, r3, r1
	ts->tv_sec = (int32_t) (elapsed_nsecs / NSEC_PER_SEC);
   1d1a6:	a316      	add	r3, pc, #88	; (adr r3, 1d200 <z_impl_clock_gettime+0x90>)
   1d1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d1ac:	ea4f 39d0 	mov.w	r9, r0, lsr #15
   1d1b0:	ea49 4941 	orr.w	r9, r9, r1, lsl #17
   1d1b4:	ea4f 3ad1 	mov.w	sl, r1, lsr #15
   1d1b8:	4648      	mov	r0, r9
   1d1ba:	4651      	mov	r1, sl
   1d1bc:	f7f3 f890 	bl	102e0 <__aeabi_uldivmod>
	ts->tv_nsec = (int32_t) (elapsed_nsecs % NSEC_PER_SEC);
   1d1c0:	a30f      	add	r3, pc, #60	; (adr r3, 1d200 <z_impl_clock_gettime+0x90>)
   1d1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
	ts->tv_sec += base.tv_sec;
   1d1c6:	1904      	adds	r4, r0, r4
   1d1c8:	eb41 0808 	adc.w	r8, r1, r8
	ts->tv_nsec = (int32_t) (elapsed_nsecs % NSEC_PER_SEC);
   1d1cc:	4648      	mov	r0, r9
   1d1ce:	4651      	mov	r1, sl
	ts->tv_sec += base.tv_sec;
   1d1d0:	e9c5 4800 	strd	r4, r8, [r5]
	ts->tv_nsec = (int32_t) (elapsed_nsecs % NSEC_PER_SEC);
   1d1d4:	f7f3 f884 	bl	102e0 <__aeabi_uldivmod>
	if (ts->tv_nsec >= NSEC_PER_SEC) {
   1d1d8:	4b0d      	ldr	r3, [pc, #52]	; (1d210 <z_impl_clock_gettime+0xa0>)
	ts->tv_nsec += base.tv_nsec;
   1d1da:	4432      	add	r2, r6
	if (ts->tv_nsec >= NSEC_PER_SEC) {
   1d1dc:	429a      	cmp	r2, r3
	ts->tv_nsec += base.tv_nsec;
   1d1de:	60aa      	str	r2, [r5, #8]
	if (ts->tv_nsec >= NSEC_PER_SEC) {
   1d1e0:	d906      	bls.n	1d1f0 <z_impl_clock_gettime+0x80>
		ts->tv_sec++;
   1d1e2:	3401      	adds	r4, #1
   1d1e4:	f148 0100 	adc.w	r1, r8, #0
   1d1e8:	e9c5 4100 	strd	r4, r1, [r5]
		ts->tv_nsec -= NSEC_PER_SEC;
   1d1ec:	1bd2      	subs	r2, r2, r7
   1d1ee:	60aa      	str	r2, [r5, #8]
	return 0;
   1d1f0:	2000      	movs	r0, #0
   1d1f2:	e7ca      	b.n	1d18a <z_impl_clock_gettime+0x1a>
	switch (clock_id) {
   1d1f4:	2600      	movs	r6, #0
   1d1f6:	4634      	mov	r4, r6
   1d1f8:	46b0      	mov	r8, r6
   1d1fa:	e7cc      	b.n	1d196 <z_impl_clock_gettime+0x26>
   1d1fc:	f3af 8000 	nop.w
   1d200:	3b9aca00 	.word	0x3b9aca00
   1d204:	00000000 	.word	0x00000000
   1d208:	20008600 	.word	0x20008600
   1d20c:	3b9aca00 	.word	0x3b9aca00
   1d210:	3b9ac9ff 	.word	0x3b9ac9ff
   1d214:	00000000 	.word	0x00000000

0001d218 <clock_settime>:
 */
int clock_settime(clockid_t clock_id, const struct timespec *tp)
{
	struct timespec base;

	if (clock_id != CLOCK_REALTIME) {
   1d218:	2801      	cmp	r0, #1
{
   1d21a:	b570      	push	{r4, r5, r6, lr}
   1d21c:	460c      	mov	r4, r1
	if (clock_id != CLOCK_REALTIME) {
   1d21e:	d006      	beq.n	1d22e <clock_settime+0x16>
   1d220:	f006 fa90 	bl	23744 <z_impl_z_errno>
		errno = EINVAL;
   1d224:	2316      	movs	r3, #22
   1d226:	6003      	str	r3, [r0, #0]
		return -1;
   1d228:	f04f 30ff 	mov.w	r0, #4294967295
	base.tv_nsec = delta % NSEC_PER_SEC;

	rt_clock_base = base;

	return 0;
}
   1d22c:	bd70      	pop	{r4, r5, r6, pc}
   1d22e:	f00a febc 	bl	27faa <z_impl_k_uptime_ticks>
   1d232:	460e      	mov	r6, r1
	int64_t delta = (int64_t)NSEC_PER_SEC * tp->tv_sec + tp->tv_nsec
   1d234:	4d18      	ldr	r5, [pc, #96]	; (1d298 <clock_settime+0x80>)
   1d236:	6822      	ldr	r2, [r4, #0]
   1d238:	6861      	ldr	r1, [r4, #4]
   1d23a:	fba2 2305 	umull	r2, r3, r2, r5
   1d23e:	fb05 3301 	mla	r3, r5, r1, r3
   1d242:	68a1      	ldr	r1, [r4, #8]
   1d244:	1852      	adds	r2, r2, r1
   1d246:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   1d24a:	fba0 0105 	umull	r0, r1, r0, r5
   1d24e:	fb05 1106 	mla	r1, r5, r6, r1
   1d252:	0bc4      	lsrs	r4, r0, #15
   1d254:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
		- elapsed_nsecs;
   1d258:	1b14      	subs	r4, r2, r4
   1d25a:	ea4f 35d1 	mov.w	r5, r1, lsr #15
   1d25e:	eb63 0505 	sbc.w	r5, r3, r5
	base.tv_sec = delta / NSEC_PER_SEC;
   1d262:	4620      	mov	r0, r4
   1d264:	a30a      	add	r3, pc, #40	; (adr r3, 1d290 <clock_settime+0x78>)
   1d266:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d26a:	4629      	mov	r1, r5
   1d26c:	f7f2 ffe8 	bl	10240 <__aeabi_ldivmod>
	base.tv_nsec = delta % NSEC_PER_SEC;
   1d270:	a307      	add	r3, pc, #28	; (adr r3, 1d290 <clock_settime+0x78>)
   1d272:	e9d3 2300 	ldrd	r2, r3, [r3]
	rt_clock_base = base;
   1d276:	4e09      	ldr	r6, [pc, #36]	; (1d29c <clock_settime+0x84>)
   1d278:	e9c6 0100 	strd	r0, r1, [r6]
	base.tv_nsec = delta % NSEC_PER_SEC;
   1d27c:	4620      	mov	r0, r4
   1d27e:	4629      	mov	r1, r5
   1d280:	f7f2 ffde 	bl	10240 <__aeabi_ldivmod>
	return 0;
   1d284:	2000      	movs	r0, #0
	base.tv_nsec = delta % NSEC_PER_SEC;
   1d286:	60b2      	str	r2, [r6, #8]
	return 0;
   1d288:	e7d0      	b.n	1d22c <clock_settime+0x14>
   1d28a:	bf00      	nop
   1d28c:	f3af 8000 	nop.w
   1d290:	3b9aca00 	.word	0x3b9aca00
   1d294:	00000000 	.word	0x00000000
   1d298:	3b9aca00 	.word	0x3b9aca00
   1d29c:	20008600 	.word	0x20008600

0001d2a0 <cmd_public_key>:
	return 0;
}


static int cmd_public_key(const struct shell *shell, size_t argc, char **argv)
{
   1d2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

        printf("Public key: \n");
        
        printf("0x");
        int cont = keys_counter - 1;
        for(int i = 96 * cont; i < 96 * cont + 96; i++) {
   1d2a2:	2460      	movs	r4, #96	; 0x60
        printf("Public key: \n");
   1d2a4:	480d      	ldr	r0, [pc, #52]	; (1d2dc <cmd_public_key+0x3c>)
   1d2a6:	f005 faa3 	bl	227f0 <printf>
        printf("0x");
   1d2aa:	480d      	ldr	r0, [pc, #52]	; (1d2e0 <cmd_public_key+0x40>)
   1d2ac:	f005 faa0 	bl	227f0 <printf>
        int cont = keys_counter - 1;
   1d2b0:	4b0c      	ldr	r3, [pc, #48]	; (1d2e4 <cmd_public_key+0x44>)
          printf("%c", public_keys_hex_store[i]);
   1d2b2:	4e0d      	ldr	r6, [pc, #52]	; (1d2e8 <cmd_public_key+0x48>)
        int cont = keys_counter - 1;
   1d2b4:	681b      	ldr	r3, [r3, #0]
          printf("%c", public_keys_hex_store[i]);
   1d2b6:	4f0d      	ldr	r7, [pc, #52]	; (1d2ec <cmd_public_key+0x4c>)
        int cont = keys_counter - 1;
   1d2b8:	3b01      	subs	r3, #1
        for(int i = 96 * cont; i < 96 * cont + 96; i++) {
   1d2ba:	435c      	muls	r4, r3
   1d2bc:	f104 0560 	add.w	r5, r4, #96	; 0x60
   1d2c0:	42a5      	cmp	r5, r4
   1d2c2:	dc04      	bgt.n	1d2ce <cmd_public_key+0x2e>
        }
        printf("\n");
   1d2c4:	480a      	ldr	r0, [pc, #40]	; (1d2f0 <cmd_public_key+0x50>)
   1d2c6:	f005 fa93 	bl	227f0 <printf>

	return 0;
}
   1d2ca:	2000      	movs	r0, #0
   1d2cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          printf("%c", public_keys_hex_store[i]);
   1d2ce:	5d31      	ldrb	r1, [r6, r4]
   1d2d0:	4638      	mov	r0, r7
   1d2d2:	f005 fa8d 	bl	227f0 <printf>
        for(int i = 96 * cont; i < 96 * cont + 96; i++) {
   1d2d6:	3401      	adds	r4, #1
   1d2d8:	e7f2      	b.n	1d2c0 <cmd_public_key+0x20>
   1d2da:	bf00      	nop
   1d2dc:	0002b012 	.word	0x0002b012
   1d2e0:	0002b020 	.word	0x0002b020
   1d2e4:	20008860 	.word	0x20008860
   1d2e8:	20008e9c 	.word	0x20008e9c
   1d2ec:	0002c0ba 	.word	0x0002c0ba
   1d2f0:	0002bafd 	.word	0x0002bafd

0001d2f4 <cmd_get_keys>:

	return 0;
}

static int cmd_get_keys(const struct shell *shell, size_t argc, char **argv)
{
   1d2f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        int j = 0;
        int cont = keys_counter - 1;
        int counter = keys_counter;
        
        printf("{'keys':['");
        for(int i = 0; i < 96 * cont + 96; i++){
   1d2f8:	2400      	movs	r4, #0
   1d2fa:	2760      	movs	r7, #96	; 0x60
        int cont = keys_counter - 1;
   1d2fc:	4b12      	ldr	r3, [pc, #72]	; (1d348 <cmd_get_keys+0x54>)
        printf("{'keys':['");
   1d2fe:	4813      	ldr	r0, [pc, #76]	; (1d34c <cmd_get_keys+0x58>)
        int cont = keys_counter - 1;
   1d300:	681e      	ldr	r6, [r3, #0]
        int j = 0;
   1d302:	4625      	mov	r5, r4
        printf("{'keys':['");
   1d304:	f005 fa74 	bl	227f0 <printf>
        for(int i = 0; i < 96 * cont + 96; i++){
   1d308:	4377      	muls	r7, r6
   1d30a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1d350 <cmd_get_keys+0x5c>
            printf("%c", public_keys_hex_store[i]);
   1d30e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 1d354 <cmd_get_keys+0x60>
            j++;
            if (j == 96){
                if(counter > 1) {
                    printf("'\n'");
                } else {
                    printf("']}\n");
   1d312:	f8df a044 	ldr.w	sl, [pc, #68]	; 1d358 <cmd_get_keys+0x64>
                    printf("'\n'");
   1d316:	f8df b044 	ldr.w	fp, [pc, #68]	; 1d35c <cmd_get_keys+0x68>
        for(int i = 0; i < 96 * cont + 96; i++){
   1d31a:	42a7      	cmp	r7, r4
   1d31c:	dc02      	bgt.n	1d324 <cmd_get_keys+0x30>
                counter--;
            }           
        }

	return 0;
}
   1d31e:	2000      	movs	r0, #0
   1d320:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            printf("%c", public_keys_hex_store[i]);
   1d324:	4648      	mov	r0, r9
   1d326:	f818 1b01 	ldrb.w	r1, [r8], #1
            j++;
   1d32a:	3501      	adds	r5, #1
            printf("%c", public_keys_hex_store[i]);
   1d32c:	f005 fa60 	bl	227f0 <printf>
            if (j == 96){
   1d330:	2d60      	cmp	r5, #96	; 0x60
   1d332:	d107      	bne.n	1d344 <cmd_get_keys+0x50>
                if(counter > 1) {
   1d334:	2e01      	cmp	r6, #1
                    printf("'\n'");
   1d336:	bfcc      	ite	gt
   1d338:	4658      	movgt	r0, fp
                    printf("']}\n");
   1d33a:	4650      	movle	r0, sl
   1d33c:	f005 fa58 	bl	227f0 <printf>
                j = 0;
   1d340:	2500      	movs	r5, #0
                counter--;
   1d342:	3e01      	subs	r6, #1
        for(int i = 0; i < 96 * cont + 96; i++){
   1d344:	3401      	adds	r4, #1
   1d346:	e7e8      	b.n	1d31a <cmd_get_keys+0x26>
   1d348:	20008860 	.word	0x20008860
   1d34c:	0002b023 	.word	0x0002b023
   1d350:	20008e9c 	.word	0x20008e9c
   1d354:	0002c0ba 	.word	0x0002c0ba
   1d358:	0002b032 	.word	0x0002b032
   1d35c:	0002b02e 	.word	0x0002b02e

0001d360 <cmd_keygen>:
        size_t olen = random_number_len;
   1d360:	2190      	movs	r1, #144	; 0x90
{
   1d362:	b570      	push	{r4, r5, r6, lr}
   1d364:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
        ret = spm_request_random_number(random_number, random_number_len, &olen);
   1d368:	aa03      	add	r2, sp, #12
   1d36a:	a874      	add	r0, sp, #464	; 0x1d0
        size_t olen = random_number_len;
   1d36c:	9103      	str	r1, [sp, #12]
        ret = spm_request_random_number(random_number, random_number_len, &olen);
   1d36e:	f00a f856 	bl	2741e <spm_request_random_number>
        if (ret != 0) {
   1d372:	4601      	mov	r1, r0
   1d374:	b110      	cbz	r0, 1d37c <cmd_keygen+0x1c>
           printk("Could not get random number (err: %d)\n", ret);
   1d376:	4841      	ldr	r0, [pc, #260]	; (1d47c <cmd_keygen+0x11c>)
   1d378:	f008 f82c 	bl	253d4 <printk>
        for(int i = 0; i < sizeof(ikm); i++){
   1d37c:	a904      	add	r1, sp, #16
{
   1d37e:	2200      	movs	r2, #0
   1d380:	460d      	mov	r5, r1
   1d382:	ab74      	add	r3, sp, #464	; 0x1d0
          ikm[i] = random_number[i];
   1d384:	f813 0b01 	ldrb.w	r0, [r3], #1
        for(int i = 0; i < sizeof(ikm); i++){
   1d388:	3201      	adds	r2, #1
   1d38a:	2a20      	cmp	r2, #32
          ikm[i] = random_number[i];
   1d38c:	f801 0b01 	strb.w	r0, [r1], #1
        for(int i = 0; i < sizeof(ikm); i++){
   1d390:	d1f8      	bne.n	1d384 <cmd_keygen+0x24>
        char info[] = {
   1d392:	4b3b      	ldr	r3, [pc, #236]	; (1d480 <cmd_keygen+0x120>)
   1d394:	ac0c      	add	r4, sp, #48	; 0x30
   1d396:	f103 0620 	add.w	r6, r3, #32
   1d39a:	4622      	mov	r2, r4
   1d39c:	6818      	ldr	r0, [r3, #0]
   1d39e:	6859      	ldr	r1, [r3, #4]
   1d3a0:	3308      	adds	r3, #8
   1d3a2:	c203      	stmia	r2!, {r0, r1}
   1d3a4:	42b3      	cmp	r3, r6
   1d3a6:	4614      	mov	r4, r2
   1d3a8:	d1f7      	bne.n	1d39a <cmd_keygen+0x3a>
        blst_keygen(&sk, ikm, sizeof(ikm), info, sizeof(info));
   1d3aa:	2220      	movs	r2, #32
        secret_keys_store[keys_counter] = sk;
   1d3ac:	4c35      	ldr	r4, [pc, #212]	; (1d484 <cmd_keygen+0x124>)
        blst_keygen(&sk, ikm, sizeof(ikm), info, sizeof(info));
   1d3ae:	4629      	mov	r1, r5
   1d3b0:	4835      	ldr	r0, [pc, #212]	; (1d488 <cmd_keygen+0x128>)
   1d3b2:	9200      	str	r2, [sp, #0]
   1d3b4:	ab0c      	add	r3, sp, #48	; 0x30
   1d3b6:	f7fa f8a3 	bl	17500 <blst_keygen>
        secret_keys_store[keys_counter] = sk;
   1d3ba:	6823      	ldr	r3, [r4, #0]
   1d3bc:	4a32      	ldr	r2, [pc, #200]	; (1d488 <cmd_keygen+0x128>)
   1d3be:	4933      	ldr	r1, [pc, #204]	; (1d48c <cmd_keygen+0x12c>)
   1d3c0:	f102 0020 	add.w	r0, r2, #32
   1d3c4:	eb01 1143 	add.w	r1, r1, r3, lsl #5
   1d3c8:	f852 5b04 	ldr.w	r5, [r2], #4
   1d3cc:	4282      	cmp	r2, r0
   1d3ce:	f841 5b04 	str.w	r5, [r1], #4
   1d3d2:	d1f9      	bne.n	1d3c8 <cmd_keygen+0x68>
        keys_counter++;
   1d3d4:	3301      	adds	r3, #1
        blst_bendian_from_scalar(priv_key_bin, &sk);
   1d3d6:	492c      	ldr	r1, [pc, #176]	; (1d488 <cmd_keygen+0x128>)
   1d3d8:	a814      	add	r0, sp, #80	; 0x50
        keys_counter++;
   1d3da:	6023      	str	r3, [r4, #0]
        blst_bendian_from_scalar(priv_key_bin, &sk);
   1d3dc:	f7ff fcc1 	bl	1cd62 <blst_bendian_from_scalar>
        if(bin2hex(priv_key_bin, sizeof(priv_key_bin), priv_key_hex2, sizeof(priv_key_hex2)) == 0) {
   1d3e0:	2340      	movs	r3, #64	; 0x40
   1d3e2:	2120      	movs	r1, #32
   1d3e4:	aa28      	add	r2, sp, #160	; 0xa0
   1d3e6:	a814      	add	r0, sp, #80	; 0x50
   1d3e8:	f007 ff4d 	bl	25286 <bin2hex>
   1d3ec:	b910      	cbnz	r0, 1d3f4 <cmd_keygen+0x94>
          printf("Error2\n");
   1d3ee:	4828      	ldr	r0, [pc, #160]	; (1d490 <cmd_keygen+0x130>)
   1d3f0:	f005 f9fe 	bl	227f0 <printf>
        printf("Secret key: \n");
   1d3f4:	4827      	ldr	r0, [pc, #156]	; (1d494 <cmd_keygen+0x134>)
   1d3f6:	f005 f9fb 	bl	227f0 <printf>
        printf("0x");
   1d3fa:	4827      	ldr	r0, [pc, #156]	; (1d498 <cmd_keygen+0x138>)
   1d3fc:	f005 f9f8 	bl	227f0 <printf>
        printf("%s\n", priv_key_hex2);
   1d400:	a928      	add	r1, sp, #160	; 0xa0
   1d402:	4826      	ldr	r0, [pc, #152]	; (1d49c <cmd_keygen+0x13c>)
   1d404:	f005 f9f4 	bl	227f0 <printf>
        blst_sk_to_pk_in_g1(&pk, &sk);
   1d408:	491f      	ldr	r1, [pc, #124]	; (1d488 <cmd_keygen+0x128>)
   1d40a:	a850      	add	r0, sp, #320	; 0x140
   1d40c:	f7f9 fb36 	bl	16a7c <blst_sk_to_pk_in_g1>
        blst_p1_to_affine(&pk2, &pk);
   1d410:	4823      	ldr	r0, [pc, #140]	; (1d4a0 <cmd_keygen+0x140>)
   1d412:	a950      	add	r1, sp, #320	; 0x140
   1d414:	f7f8 fa20 	bl	15858 <blst_p1_to_affine>
        blst_p1_compress(out, &pk);
   1d418:	a950      	add	r1, sp, #320	; 0x140
   1d41a:	a81c      	add	r0, sp, #112	; 0x70
   1d41c:	f7f8 fa82 	bl	15924 <blst_p1_compress>
        printf("Public key: \n");
   1d420:	4820      	ldr	r0, [pc, #128]	; (1d4a4 <cmd_keygen+0x144>)
   1d422:	f005 f9e5 	bl	227f0 <printf>
        if(bin2hex(&out, sizeof(out), public_key_hex, sizeof(public_key_hex)) == 0) {
   1d426:	2360      	movs	r3, #96	; 0x60
   1d428:	2130      	movs	r1, #48	; 0x30
   1d42a:	aa38      	add	r2, sp, #224	; 0xe0
   1d42c:	a81c      	add	r0, sp, #112	; 0x70
   1d42e:	f007 ff2a 	bl	25286 <bin2hex>
   1d432:	b910      	cbnz	r0, 1d43a <cmd_keygen+0xda>
          printf("Error3\n");
   1d434:	481c      	ldr	r0, [pc, #112]	; (1d4a8 <cmd_keygen+0x148>)
   1d436:	f005 f9db 	bl	227f0 <printf>
        int cont = keys_counter - 1;
   1d43a:	6823      	ldr	r3, [r4, #0]
            public_keys_hex_store[i+96*cont] = public_key_hex[i];
   1d43c:	2460      	movs	r4, #96	; 0x60
   1d43e:	4a1b      	ldr	r2, [pc, #108]	; (1d4ac <cmd_keygen+0x14c>)
   1d440:	ad38      	add	r5, sp, #224	; 0xe0
        int cont = keys_counter - 1;
   1d442:	3b01      	subs	r3, #1
   1d444:	fb04 2303 	mla	r3, r4, r3, r2
            public_keys_hex_store[i+96*cont] = public_key_hex[i];
   1d448:	462a      	mov	r2, r5
   1d44a:	f812 1b01 	ldrb.w	r1, [r2], #1
        for(int i = 0; i < 96; i++){
   1d44e:	3c01      	subs	r4, #1
            public_keys_hex_store[i+96*cont] = public_key_hex[i];
   1d450:	f803 1b01 	strb.w	r1, [r3], #1
        for(int i = 0; i < 96; i++){
   1d454:	d1f9      	bne.n	1d44a <cmd_keygen+0xea>
        printf("0x");
   1d456:	4810      	ldr	r0, [pc, #64]	; (1d498 <cmd_keygen+0x138>)
   1d458:	f005 f9ca 	bl	227f0 <printf>
          printf("%c", public_key_hex[i]);
   1d45c:	4e14      	ldr	r6, [pc, #80]	; (1d4b0 <cmd_keygen+0x150>)
   1d45e:	4630      	mov	r0, r6
   1d460:	f815 1b01 	ldrb.w	r1, [r5], #1
        for(int i = 0; i < 96; i++) {
   1d464:	3401      	adds	r4, #1
          printf("%c", public_key_hex[i]);
   1d466:	f005 f9c3 	bl	227f0 <printf>
        for(int i = 0; i < 96; i++) {
   1d46a:	2c60      	cmp	r4, #96	; 0x60
   1d46c:	d1f7      	bne.n	1d45e <cmd_keygen+0xfe>
        printf("\n");
   1d46e:	4811      	ldr	r0, [pc, #68]	; (1d4b4 <cmd_keygen+0x154>)
   1d470:	f005 f9be 	bl	227f0 <printf>
}
   1d474:	2000      	movs	r0, #0
   1d476:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
   1d47a:	bd70      	pop	{r4, r5, r6, pc}
   1d47c:	0002b037 	.word	0x0002b037
   1d480:	0002a744 	.word	0x0002a744
   1d484:	20008860 	.word	0x20008860
   1d488:	2000939c 	.word	0x2000939c
   1d48c:	2000925c 	.word	0x2000925c
   1d490:	0002b05e 	.word	0x0002b05e
   1d494:	0002b066 	.word	0x0002b066
   1d498:	0002b020 	.word	0x0002b020
   1d49c:	0002bc57 	.word	0x0002bc57
   1d4a0:	20008328 	.word	0x20008328
   1d4a4:	0002b012 	.word	0x0002b012
   1d4a8:	0002b074 	.word	0x0002b074
   1d4ac:	20008e9c 	.word	0x20008e9c
   1d4b0:	0002c0ba 	.word	0x0002c0ba
   1d4b4:	0002bafd 	.word	0x0002bafd

0001d4b8 <cmd_signature_message>:
{
   1d4b8:	b570      	push	{r4, r5, r6, lr}
   1d4ba:	4614      	mov	r4, r2
        public_key_to_sk(argv[1], &sk_sign, public_keys_hex_store, keys_counter);
   1d4bc:	4b35      	ldr	r3, [pc, #212]	; (1d594 <cmd_signature_message+0xdc>)
{
   1d4be:	f5ad 7d38 	sub.w	sp, sp, #736	; 0x2e0
        public_key_to_sk(argv[1], &sk_sign, public_keys_hex_store, keys_counter);
   1d4c2:	681b      	ldr	r3, [r3, #0]
   1d4c4:	4a34      	ldr	r2, [pc, #208]	; (1d598 <cmd_signature_message+0xe0>)
   1d4c6:	6860      	ldr	r0, [r4, #4]
   1d4c8:	a905      	add	r1, sp, #20
   1d4ca:	f7ee fd89 	bl	bfe0 <public_key_to_sk>
        char * msg_hex = argv[2];
   1d4ce:	68a4      	ldr	r4, [r4, #8]
        if(hex2bin(msg_hex, strlen(msg_hex), &msg_bin, sizeof(msg_bin)) == 0) {
   1d4d0:	4620      	mov	r0, r4
   1d4d2:	f00a f8a9 	bl	27628 <strlen>
   1d4d6:	2320      	movs	r3, #32
   1d4d8:	4601      	mov	r1, r0
   1d4da:	4a30      	ldr	r2, [pc, #192]	; (1d59c <cmd_signature_message+0xe4>)
   1d4dc:	4620      	mov	r0, r4
   1d4de:	f007 fefd 	bl	252dc <hex2bin>
   1d4e2:	b910      	cbnz	r0, 1d4ea <cmd_signature_message+0x32>
          printf("Error4\n");
   1d4e4:	482e      	ldr	r0, [pc, #184]	; (1d5a0 <cmd_signature_message+0xe8>)
   1d4e6:	f005 f983 	bl	227f0 <printf>
        if(bin2hex(&msg_bin, sizeof(msg_bin), &message, sizeof(message)) == 0) {
   1d4ea:	2340      	movs	r3, #64	; 0x40
   1d4ec:	2120      	movs	r1, #32
   1d4ee:	482b      	ldr	r0, [pc, #172]	; (1d59c <cmd_signature_message+0xe4>)
   1d4f0:	aa18      	add	r2, sp, #96	; 0x60
   1d4f2:	f007 fec8 	bl	25286 <bin2hex>
   1d4f6:	b910      	cbnz	r0, 1d4fe <cmd_signature_message+0x46>
          printf("Error5\n");
   1d4f8:	482a      	ldr	r0, [pc, #168]	; (1d5a4 <cmd_signature_message+0xec>)
   1d4fa:	f005 f979 	bl	227f0 <printf>
        char dst[] = "BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_POP"; //IETF BLS Signature V4
   1d4fe:	4b2a      	ldr	r3, [pc, #168]	; (1d5a8 <cmd_signature_message+0xf0>)
   1d500:	aa0d      	add	r2, sp, #52	; 0x34
   1d502:	f103 0528 	add.w	r5, r3, #40	; 0x28
   1d506:	4614      	mov	r4, r2
   1d508:	6818      	ldr	r0, [r3, #0]
   1d50a:	6859      	ldr	r1, [r3, #4]
   1d50c:	3308      	adds	r3, #8
   1d50e:	c403      	stmia	r4!, {r0, r1}
   1d510:	42ab      	cmp	r3, r5
   1d512:	4622      	mov	r2, r4
   1d514:	d1f7      	bne.n	1d506 <cmd_signature_message+0x4e>
   1d516:	8819      	ldrh	r1, [r3, #0]
   1d518:	789b      	ldrb	r3, [r3, #2]
   1d51a:	8021      	strh	r1, [r4, #0]
   1d51c:	70a3      	strb	r3, [r4, #2]
        blst_hash_to_g2(&hash, msg_bin, sizeof(msg_bin), dst, sizeof(dst), NULL, 0);
   1d51e:	2300      	movs	r3, #0
   1d520:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1d524:	232b      	movs	r3, #43	; 0x2b
   1d526:	2220      	movs	r2, #32
   1d528:	491c      	ldr	r1, [pc, #112]	; (1d59c <cmd_signature_message+0xe4>)
   1d52a:	4820      	ldr	r0, [pc, #128]	; (1d5ac <cmd_signature_message+0xf4>)
   1d52c:	9300      	str	r3, [sp, #0]
   1d52e:	ab0d      	add	r3, sp, #52	; 0x34
   1d530:	f7fc fd6f 	bl	1a012 <blst_hash_to_g2>
        blst_sign_pk_in_g1(&sig, &hash, &sk_sign); 
   1d534:	aa05      	add	r2, sp, #20
   1d536:	491d      	ldr	r1, [pc, #116]	; (1d5ac <cmd_signature_message+0xf4>)
   1d538:	a870      	add	r0, sp, #448	; 0x1c0
   1d53a:	f7fc f8e1 	bl	19700 <blst_sign_pk_in_g1>
        blst_p2_to_affine(&sig2, &sig);
   1d53e:	481c      	ldr	r0, [pc, #112]	; (1d5b0 <cmd_signature_message+0xf8>)
   1d540:	a970      	add	r1, sp, #448	; 0x1c0
   1d542:	f7fa fa49 	bl	179d8 <blst_p2_to_affine>
        blst_p2_compress(out2, &sig);
   1d546:	a970      	add	r1, sp, #448	; 0x1c0
   1d548:	a828      	add	r0, sp, #160	; 0xa0
   1d54a:	f7fa fab1 	bl	17ab0 <blst_p2_compress>
        printf("Signature: \n");
   1d54e:	4819      	ldr	r0, [pc, #100]	; (1d5b4 <cmd_signature_message+0xfc>)
   1d550:	f005 f94e 	bl	227f0 <printf>
        if(bin2hex(&out2, sizeof(out2), sig_hex, sizeof(sig_hex)) == 0) {
   1d554:	23c0      	movs	r3, #192	; 0xc0
   1d556:	2160      	movs	r1, #96	; 0x60
   1d558:	aa40      	add	r2, sp, #256	; 0x100
   1d55a:	a828      	add	r0, sp, #160	; 0xa0
   1d55c:	f007 fe93 	bl	25286 <bin2hex>
   1d560:	b910      	cbnz	r0, 1d568 <cmd_signature_message+0xb0>
          printf("Error6\n");
   1d562:	4815      	ldr	r0, [pc, #84]	; (1d5b8 <cmd_signature_message+0x100>)
   1d564:	f005 f944 	bl	227f0 <printf>
        printf("0x");
   1d568:	4814      	ldr	r0, [pc, #80]	; (1d5bc <cmd_signature_message+0x104>)
   1d56a:	f005 f941 	bl	227f0 <printf>
        for(int i = 0; i < 192; i++) {
   1d56e:	2500      	movs	r5, #0
          printf("%c", sig_hex[i]);
   1d570:	4e13      	ldr	r6, [pc, #76]	; (1d5c0 <cmd_signature_message+0x108>)
   1d572:	ac40      	add	r4, sp, #256	; 0x100
   1d574:	4630      	mov	r0, r6
   1d576:	f814 1b01 	ldrb.w	r1, [r4], #1
        for(int i = 0; i < 192; i++) {
   1d57a:	3501      	adds	r5, #1
          printf("%c", sig_hex[i]);
   1d57c:	f005 f938 	bl	227f0 <printf>
        for(int i = 0; i < 192; i++) {
   1d580:	2dc0      	cmp	r5, #192	; 0xc0
   1d582:	d1f7      	bne.n	1d574 <cmd_signature_message+0xbc>
        printf("\n\n");
   1d584:	480f      	ldr	r0, [pc, #60]	; (1d5c4 <cmd_signature_message+0x10c>)
   1d586:	f005 f933 	bl	227f0 <printf>
}
   1d58a:	2000      	movs	r0, #0
   1d58c:	f50d 7d38 	add.w	sp, sp, #736	; 0x2e0
   1d590:	bd70      	pop	{r4, r5, r6, pc}
   1d592:	bf00      	nop
   1d594:	20008860 	.word	0x20008860
   1d598:	20008e9c 	.word	0x20008e9c
   1d59c:	20008e7c 	.word	0x20008e7c
   1d5a0:	0002b07c 	.word	0x0002b07c
   1d5a4:	0002b084 	.word	0x0002b084
   1d5a8:	0002b094 	.word	0x0002b094
   1d5ac:	20008208 	.word	0x20008208
   1d5b0:	20008388 	.word	0x20008388
   1d5b4:	0002b167 	.word	0x0002b167
   1d5b8:	0002b08c 	.word	0x0002b08c
   1d5bc:	0002b020 	.word	0x0002b020
   1d5c0:	0002c0ba 	.word	0x0002c0ba
   1d5c4:	0002bafc 	.word	0x0002bafc

0001d5c8 <cmd_signature_verification>:
{
   1d5c8:	b570      	push	{r4, r5, r6, lr}
   1d5ca:	b092      	sub	sp, #72	; 0x48
        char dst[] = "BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_POP"; //IETF BLS Signature V4
   1d5cc:	aa07      	add	r2, sp, #28
   1d5ce:	4615      	mov	r5, r2
   1d5d0:	4b12      	ldr	r3, [pc, #72]	; (1d61c <cmd_signature_verification+0x54>)
   1d5d2:	f103 0628 	add.w	r6, r3, #40	; 0x28
   1d5d6:	4614      	mov	r4, r2
   1d5d8:	6818      	ldr	r0, [r3, #0]
   1d5da:	6859      	ldr	r1, [r3, #4]
   1d5dc:	3308      	adds	r3, #8
   1d5de:	c403      	stmia	r4!, {r0, r1}
   1d5e0:	42b3      	cmp	r3, r6
   1d5e2:	4622      	mov	r2, r4
   1d5e4:	d1f7      	bne.n	1d5d6 <cmd_signature_verification+0xe>
   1d5e6:	8819      	ldrh	r1, [r3, #0]
   1d5e8:	789b      	ldrb	r3, [r3, #2]
   1d5ea:	8021      	strh	r1, [r4, #0]
   1d5ec:	70a3      	strb	r3, [r4, #2]
        if(blst_core_verify_pk_in_g1(&pk2, &sig2, 1, msg_bin, sizeof(msg_bin), dst, sizeof(dst), NULL, 0) != BLST_SUCCESS){
   1d5ee:	2300      	movs	r3, #0
   1d5f0:	e9cd 3303 	strd	r3, r3, [sp, #12]
   1d5f4:	232b      	movs	r3, #43	; 0x2b
   1d5f6:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1d5fa:	2320      	movs	r3, #32
   1d5fc:	2201      	movs	r2, #1
   1d5fe:	9300      	str	r3, [sp, #0]
   1d600:	4907      	ldr	r1, [pc, #28]	; (1d620 <cmd_signature_verification+0x58>)
   1d602:	4b08      	ldr	r3, [pc, #32]	; (1d624 <cmd_signature_verification+0x5c>)
   1d604:	4808      	ldr	r0, [pc, #32]	; (1d628 <cmd_signature_verification+0x60>)
   1d606:	f7fe fdce 	bl	1c1a6 <blst_core_verify_pk_in_g1>
   1d60a:	b128      	cbz	r0, 1d618 <cmd_signature_verification+0x50>
          printf("Error\n");
   1d60c:	4807      	ldr	r0, [pc, #28]	; (1d62c <cmd_signature_verification+0x64>)
          printf("Success\n");
   1d60e:	f005 f8ef 	bl	227f0 <printf>
}
   1d612:	2000      	movs	r0, #0
   1d614:	b012      	add	sp, #72	; 0x48
   1d616:	bd70      	pop	{r4, r5, r6, pc}
          printf("Success\n");
   1d618:	4805      	ldr	r0, [pc, #20]	; (1d630 <cmd_signature_verification+0x68>)
   1d61a:	e7f8      	b.n	1d60e <cmd_signature_verification+0x46>
   1d61c:	0002b094 	.word	0x0002b094
   1d620:	20008388 	.word	0x20008388
   1d624:	20008e7c 	.word	0x20008e7c
   1d628:	20008328 	.word	0x20008328
   1d62c:	0002b0bf 	.word	0x0002b0bf
   1d630:	0002b0c6 	.word	0x0002b0c6

0001d634 <k_timer_remaining_get.constprop.0>:
 *
 * @param timer     Address of timer.
 *
 * @return Remaining time (in milliseconds).
 */
static inline uint32_t k_timer_remaining_get(struct k_timer *timer)
   1d634:	b508      	push	{r3, lr}
	return z_timeout_remaining(&timer->timeout);
   1d636:	4805      	ldr	r0, [pc, #20]	; (1d64c <k_timer_remaining_get.constprop.0+0x18>)
   1d638:	f00a fc79 	bl	27f2e <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
   1d63c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d640:	fba0 2302 	umull	r2, r3, r0, r2
   1d644:	0bd0      	lsrs	r0, r2, #15
{
	return k_ticks_to_ms_floor32(k_timer_remaining_ticks(timer));
}
   1d646:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1d64a:	bd08      	pop	{r3, pc}
   1d64c:	20008188 	.word	0x20008188

0001d650 <cmd_benchmark>:
	ARG_UNUSED(argv);

        unsigned char ikm[32];
	const int random_number_len = 144;     
        uint8_t random_number[random_number_len];
        size_t olen = random_number_len;
   1d650:	2190      	movs	r1, #144	; 0x90
{
   1d652:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d654:	f2ad 7d14 	subw	sp, sp, #1812	; 0x714
        int ret;

        ret = spm_request_random_number(random_number, random_number_len, &olen);
   1d658:	aa04      	add	r2, sp, #16
   1d65a:	a8b0      	add	r0, sp, #704	; 0x2c0
        size_t olen = random_number_len;
   1d65c:	9104      	str	r1, [sp, #16]
        ret = spm_request_random_number(random_number, random_number_len, &olen);
   1d65e:	f009 fede 	bl	2741e <spm_request_random_number>
        if (ret != 0) {
   1d662:	4601      	mov	r1, r0
   1d664:	b110      	cbz	r0, 1d66c <cmd_benchmark+0x1c>
           printk("Could not get random number (err: %d)\n", ret);
   1d666:	488c      	ldr	r0, [pc, #560]	; (1d898 <cmd_benchmark+0x248>)
   1d668:	f007 feb4 	bl	253d4 <printk>
        }

        for(int i = 0; i < sizeof(ikm); i++){
   1d66c:	a905      	add	r1, sp, #20
{
   1d66e:	2200      	movs	r2, #0
   1d670:	460d      	mov	r5, r1
   1d672:	abb0      	add	r3, sp, #704	; 0x2c0
          ikm[i] = random_number[i];
   1d674:	f813 0b01 	ldrb.w	r0, [r3], #1
        for(int i = 0; i < sizeof(ikm); i++){
   1d678:	3201      	adds	r2, #1
   1d67a:	2a20      	cmp	r2, #32
          ikm[i] = random_number[i];
   1d67c:	f801 0b01 	strb.w	r0, [r1], #1
        for(int i = 0; i < sizeof(ikm); i++){
   1d680:	d1f8      	bne.n	1d674 <cmd_benchmark+0x24>
        } 

        // key_info is an optional parameter.  This parameter MAY be used to derive
        // multiple independent keys from the same IKM.  By default, key_info is the empty string.
        char info[] = {
   1d682:	4b86      	ldr	r3, [pc, #536]	; (1d89c <cmd_benchmark+0x24c>)
   1d684:	ac0d      	add	r4, sp, #52	; 0x34
   1d686:	f103 0620 	add.w	r6, r3, #32
   1d68a:	4622      	mov	r2, r4
   1d68c:	6818      	ldr	r0, [r3, #0]
   1d68e:	6859      	ldr	r1, [r3, #4]
   1d690:	3308      	adds	r3, #8
   1d692:	c203      	stmia	r2!, {r0, r1}
   1d694:	42b3      	cmp	r3, r6
   1d696:	4614      	mov	r4, r2
   1d698:	d1f7      	bne.n	1d68a <cmd_benchmark+0x3a>
	z_impl_k_timer_start(timer, duration, period);
   1d69a:	2200      	movs	r2, #0
   1d69c:	2300      	movs	r3, #0
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

        k_timer_start(&my_timer, K_MSEC(3000), K_NO_WAIT);
        
        //Secret key (256-bit scalar)
        blst_keygen(&sk, ikm, sizeof(ikm), info, sizeof(info));
   1d69e:	2420      	movs	r4, #32
   1d6a0:	e9cd 2300 	strd	r2, r3, [sp]
   1d6a4:	487e      	ldr	r0, [pc, #504]	; (1d8a0 <cmd_benchmark+0x250>)
   1d6a6:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
   1d6aa:	2300      	movs	r3, #0
   1d6ac:	f007 fa6e 	bl	24b8c <z_impl_k_timer_start>
   1d6b0:	4622      	mov	r2, r4
   1d6b2:	ab0d      	add	r3, sp, #52	; 0x34
   1d6b4:	4629      	mov	r1, r5
   1d6b6:	487b      	ldr	r0, [pc, #492]	; (1d8a4 <cmd_benchmark+0x254>)
   1d6b8:	9400      	str	r4, [sp, #0]
   1d6ba:	f7f9 ff21 	bl	17500 <blst_keygen>
                
        uint8_t priv_key_bin[32];
        blst_bendian_from_scalar(priv_key_bin, &sk);
   1d6be:	4979      	ldr	r1, [pc, #484]	; (1d8a4 <cmd_benchmark+0x254>)
   1d6c0:	a815      	add	r0, sp, #84	; 0x54
   1d6c2:	f7ff fb4e 	bl	1cd62 <blst_bendian_from_scalar>

        char priv_key_hex2[64];
        if(bin2hex(priv_key_bin, sizeof(priv_key_bin), priv_key_hex2, sizeof(priv_key_hex2)) == 0) {
   1d6c6:	2340      	movs	r3, #64	; 0x40
   1d6c8:	4621      	mov	r1, r4
   1d6ca:	aa3c      	add	r2, sp, #240	; 0xf0
   1d6cc:	a815      	add	r0, sp, #84	; 0x54
   1d6ce:	f007 fdda 	bl	25286 <bin2hex>
   1d6d2:	b910      	cbnz	r0, 1d6da <cmd_benchmark+0x8a>
          printf("Error2\n");
   1d6d4:	4874      	ldr	r0, [pc, #464]	; (1d8a8 <cmd_benchmark+0x258>)
   1d6d6:	f005 f88b 	bl	227f0 <printf>
        }

        printf("Secret key: \n");
   1d6da:	4874      	ldr	r0, [pc, #464]	; (1d8ac <cmd_benchmark+0x25c>)
   1d6dc:	f005 f888 	bl	227f0 <printf>
        printf("0x");
   1d6e0:	4873      	ldr	r0, [pc, #460]	; (1d8b0 <cmd_benchmark+0x260>)
   1d6e2:	f005 f885 	bl	227f0 <printf>
        printf("%s\n", priv_key_hex2);
   1d6e6:	a93c      	add	r1, sp, #240	; 0xf0
   1d6e8:	4872      	ldr	r0, [pc, #456]	; (1d8b4 <cmd_benchmark+0x264>)
   1d6ea:	f005 f881 	bl	227f0 <printf>

        //The secret key allow us to generate the associated public key
        blst_p1 pk;
        byte out[48];
        char public_key_hex[96];
        blst_sk_to_pk_in_g1(&pk, &sk);
   1d6ee:	a88c      	add	r0, sp, #560	; 0x230
   1d6f0:	496c      	ldr	r1, [pc, #432]	; (1d8a4 <cmd_benchmark+0x254>)
   1d6f2:	f7f9 f9c3 	bl	16a7c <blst_sk_to_pk_in_g1>
        blst_p1_to_affine(&pk2, &pk);
   1d6f6:	a98c      	add	r1, sp, #560	; 0x230
   1d6f8:	486f      	ldr	r0, [pc, #444]	; (1d8b8 <cmd_benchmark+0x268>)
   1d6fa:	f7f8 f8ad 	bl	15858 <blst_p1_to_affine>
        blst_p1_compress(out, &pk);
   1d6fe:	a98c      	add	r1, sp, #560	; 0x230
   1d700:	a830      	add	r0, sp, #192	; 0xc0
   1d702:	f7f8 f90f 	bl	15924 <blst_p1_compress>

        uint32_t time_left;
        time_left = k_timer_remaining_get(&my_timer);
   1d706:	f7ff ff95 	bl	1d634 <k_timer_remaining_get.constprop.0>
   1d70a:	4605      	mov	r5, r0
	z_impl_k_timer_stop(timer);
   1d70c:	4864      	ldr	r0, [pc, #400]	; (1d8a0 <cmd_benchmark+0x250>)
   1d70e:	f00a fc5e 	bl	27fce <z_impl_k_timer_stop>
        k_timer_stop(&my_timer);

        printf("Public key: \n");
   1d712:	486a      	ldr	r0, [pc, #424]	; (1d8bc <cmd_benchmark+0x26c>)
   1d714:	f005 f86c 	bl	227f0 <printf>
        if(bin2hex(&out, sizeof(out), public_key_hex, sizeof(public_key_hex)) == 0) {
   1d718:	2360      	movs	r3, #96	; 0x60
   1d71a:	2130      	movs	r1, #48	; 0x30
   1d71c:	aa5c      	add	r2, sp, #368	; 0x170
   1d71e:	a830      	add	r0, sp, #192	; 0xc0
   1d720:	f007 fdb1 	bl	25286 <bin2hex>
   1d724:	b910      	cbnz	r0, 1d72c <cmd_benchmark+0xdc>
          printf("Error3\n");
   1d726:	4866      	ldr	r0, [pc, #408]	; (1d8c0 <cmd_benchmark+0x270>)
   1d728:	f005 f862 	bl	227f0 <printf>
        }
           
        printf("0x");
   1d72c:	4860      	ldr	r0, [pc, #384]	; (1d8b0 <cmd_benchmark+0x260>)
   1d72e:	f005 f85f 	bl	227f0 <printf>
        for(int i = 0; i < 96; i++) {
   1d732:	2600      	movs	r6, #0
          printf("%c", public_key_hex[i]);
   1d734:	4f63      	ldr	r7, [pc, #396]	; (1d8c4 <cmd_benchmark+0x274>)
   1d736:	ac5c      	add	r4, sp, #368	; 0x170
   1d738:	4638      	mov	r0, r7
   1d73a:	f814 1b01 	ldrb.w	r1, [r4], #1
        for(int i = 0; i < 96; i++) {
   1d73e:	3601      	adds	r6, #1
          printf("%c", public_key_hex[i]);
   1d740:	f005 f856 	bl	227f0 <printf>
        for(int i = 0; i < 96; i++) {
   1d744:	2e60      	cmp	r6, #96	; 0x60
   1d746:	d1f7      	bne.n	1d738 <cmd_benchmark+0xe8>
        }
        printf("\n");
   1d748:	485f      	ldr	r0, [pc, #380]	; (1d8c8 <cmd_benchmark+0x278>)
   1d74a:	f005 f851 	bl	227f0 <printf>

        printf("\nBenchmark for key generation: %u ms\n", 3000-time_left);
   1d74e:	f5c5 613b 	rsb	r1, r5, #2992	; 0xbb0
   1d752:	3108      	adds	r1, #8
   1d754:	485d      	ldr	r0, [pc, #372]	; (1d8cc <cmd_benchmark+0x27c>)
   1d756:	f005 f84b 	bl	227f0 <printf>
	z_impl_k_timer_start(timer, duration, period);
   1d75a:	2200      	movs	r2, #0
   1d75c:	2300      	movs	r3, #0
   1d75e:	4850      	ldr	r0, [pc, #320]	; (1d8a0 <cmd_benchmark+0x250>)
   1d760:	e9cd 2300 	strd	r2, r3, [sp]
   1d764:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
   1d768:	2300      	movs	r3, #0
   1d76a:	f007 fa0f 	bl	24b8c <z_impl_k_timer_start>
        
        blst_p2 hash;
        char * msg_hex = "5656565656565656565656565656565656565656565656565656565656565656";
        uint8_t msg_bin[32];
             
        if(hex2bin(msg_hex, strlen(msg_hex), &msg_bin, sizeof(msg_bin)) == 0) {
   1d76e:	4858      	ldr	r0, [pc, #352]	; (1d8d0 <cmd_benchmark+0x280>)
   1d770:	f009 ff5a 	bl	27628 <strlen>
   1d774:	2320      	movs	r3, #32
   1d776:	4601      	mov	r1, r0
   1d778:	aa1d      	add	r2, sp, #116	; 0x74
   1d77a:	4855      	ldr	r0, [pc, #340]	; (1d8d0 <cmd_benchmark+0x280>)
   1d77c:	f007 fdae 	bl	252dc <hex2bin>
   1d780:	b910      	cbnz	r0, 1d788 <cmd_benchmark+0x138>
          printf("Error4\n");
   1d782:	4854      	ldr	r0, [pc, #336]	; (1d8d4 <cmd_benchmark+0x284>)
   1d784:	f005 f834 	bl	227f0 <printf>
        }

        char message[64];
        if(bin2hex(&msg_bin, sizeof(msg_bin), &message, sizeof(message)) == 0) {
   1d788:	2340      	movs	r3, #64	; 0x40
   1d78a:	2120      	movs	r1, #32
   1d78c:	aa4c      	add	r2, sp, #304	; 0x130
   1d78e:	a81d      	add	r0, sp, #116	; 0x74
   1d790:	f007 fd79 	bl	25286 <bin2hex>
   1d794:	b910      	cbnz	r0, 1d79c <cmd_benchmark+0x14c>
          printf("Error5\n");
   1d796:	4850      	ldr	r0, [pc, #320]	; (1d8d8 <cmd_benchmark+0x288>)
   1d798:	f005 f82a 	bl	227f0 <printf>
        }

        printf("\nMessage: \n");
   1d79c:	484f      	ldr	r0, [pc, #316]	; (1d8dc <cmd_benchmark+0x28c>)
   1d79e:	f005 f827 	bl	227f0 <printf>
        printf("0x");
   1d7a2:	4843      	ldr	r0, [pc, #268]	; (1d8b0 <cmd_benchmark+0x260>)
   1d7a4:	f005 f824 	bl	227f0 <printf>
        printf("%s\n", message);
   1d7a8:	4842      	ldr	r0, [pc, #264]	; (1d8b4 <cmd_benchmark+0x264>)
   1d7aa:	a94c      	add	r1, sp, #304	; 0x130
   1d7ac:	f005 f820 	bl	227f0 <printf>
               
        char dst[] = "BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_POP"; //IETF BLS Signature V4
   1d7b0:	4b4b      	ldr	r3, [pc, #300]	; (1d8e0 <cmd_benchmark+0x290>)
   1d7b2:	aa25      	add	r2, sp, #148	; 0x94
   1d7b4:	f103 0528 	add.w	r5, r3, #40	; 0x28
   1d7b8:	4614      	mov	r4, r2
   1d7ba:	6818      	ldr	r0, [r3, #0]
   1d7bc:	6859      	ldr	r1, [r3, #4]
   1d7be:	3308      	adds	r3, #8
   1d7c0:	c403      	stmia	r4!, {r0, r1}
   1d7c2:	42ab      	cmp	r3, r5
   1d7c4:	4622      	mov	r2, r4
   1d7c6:	d1f7      	bne.n	1d7b8 <cmd_benchmark+0x168>
   1d7c8:	8819      	ldrh	r1, [r3, #0]
   1d7ca:	789b      	ldrb	r3, [r3, #2]
   1d7cc:	8021      	strh	r1, [r4, #0]
   1d7ce:	70a3      	strb	r3, [r4, #2]
        //Obtain the point from a message
        blst_hash_to_g2(&hash, msg_bin, sizeof(msg_bin), dst, sizeof(dst), NULL, 0);
   1d7d0:	2300      	movs	r3, #0
   1d7d2:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1d7d6:	232b      	movs	r3, #43	; 0x2b
   1d7d8:	2220      	movs	r2, #32
   1d7da:	9300      	str	r3, [sp, #0]
   1d7dc:	a91d      	add	r1, sp, #116	; 0x74
   1d7de:	ab25      	add	r3, sp, #148	; 0x94
   1d7e0:	f50d 609a 	add.w	r0, sp, #1232	; 0x4d0
   1d7e4:	f7fc fc15 	bl	1a012 <blst_hash_to_g2>

        time_left = k_timer_remaining_get(&my_timer);
   1d7e8:	f7ff ff24 	bl	1d634 <k_timer_remaining_get.constprop.0>
   1d7ec:	4604      	mov	r4, r0
	z_impl_k_timer_stop(timer);
   1d7ee:	482c      	ldr	r0, [pc, #176]	; (1d8a0 <cmd_benchmark+0x250>)
   1d7f0:	f00a fbed 	bl	27fce <z_impl_k_timer_stop>
        k_timer_stop(&my_timer);
        printf("\nBenchmark for message hash: %u ms\n", 3000-time_left);
   1d7f4:	f5c4 613b 	rsb	r1, r4, #2992	; 0xbb0
   1d7f8:	3108      	adds	r1, #8
   1d7fa:	483a      	ldr	r0, [pc, #232]	; (1d8e4 <cmd_benchmark+0x294>)
   1d7fc:	f004 fff8 	bl	227f0 <printf>
	z_impl_k_timer_start(timer, duration, period);
   1d800:	2200      	movs	r2, #0
   1d802:	2300      	movs	r3, #0
   1d804:	4826      	ldr	r0, [pc, #152]	; (1d8a0 <cmd_benchmark+0x250>)
   1d806:	e9cd 2300 	strd	r2, r3, [sp]
   1d80a:	2300      	movs	r3, #0
   1d80c:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
   1d810:	f007 f9bc 	bl	24b8c <z_impl_k_timer_start>
        blst_p2 sig;
        blst_p2_affine sig2;
        byte out2[96];
        char sig_hex[192];

        blst_sign_pk_in_g1(&sig, &hash, &sk); 
   1d814:	4a23      	ldr	r2, [pc, #140]	; (1d8a4 <cmd_benchmark+0x254>)
   1d816:	f50d 619a 	add.w	r1, sp, #1232	; 0x4d0
   1d81a:	f50d 60be 	add.w	r0, sp, #1520	; 0x5f0
   1d81e:	f7fb ff6f 	bl	19700 <blst_sign_pk_in_g1>
        blst_p2_to_affine(&sig2, &sig);
   1d822:	f50d 61be 	add.w	r1, sp, #1520	; 0x5f0
   1d826:	a8d4      	add	r0, sp, #848	; 0x350
   1d828:	f7fa f8d6 	bl	179d8 <blst_p2_to_affine>
        blst_p2_compress(out2, &sig);
   1d82c:	f50d 61be 	add.w	r1, sp, #1520	; 0x5f0
   1d830:	a874      	add	r0, sp, #464	; 0x1d0
   1d832:	f7fa f93d 	bl	17ab0 <blst_p2_compress>
        
        time_left = k_timer_remaining_get(&my_timer);
   1d836:	f7ff fefd 	bl	1d634 <k_timer_remaining_get.constprop.0>
   1d83a:	4605      	mov	r5, r0
	z_impl_k_timer_stop(timer);
   1d83c:	4818      	ldr	r0, [pc, #96]	; (1d8a0 <cmd_benchmark+0x250>)
   1d83e:	f00a fbc6 	bl	27fce <z_impl_k_timer_stop>
        k_timer_stop(&my_timer);
        
        printf("\nSignature: \n");
   1d842:	4829      	ldr	r0, [pc, #164]	; (1d8e8 <cmd_benchmark+0x298>)
   1d844:	f004 ffd4 	bl	227f0 <printf>
        if(bin2hex(&out2, sizeof(out2), sig_hex, sizeof(sig_hex)) == 0) {
   1d848:	23c0      	movs	r3, #192	; 0xc0
   1d84a:	2160      	movs	r1, #96	; 0x60
   1d84c:	f50d 6282 	add.w	r2, sp, #1040	; 0x410
   1d850:	a874      	add	r0, sp, #464	; 0x1d0
   1d852:	f007 fd18 	bl	25286 <bin2hex>
   1d856:	b910      	cbnz	r0, 1d85e <cmd_benchmark+0x20e>
          printf("Error6\n");
   1d858:	4824      	ldr	r0, [pc, #144]	; (1d8ec <cmd_benchmark+0x29c>)
   1d85a:	f004 ffc9 	bl	227f0 <printf>
        }
        
        printf("0x");
   1d85e:	4814      	ldr	r0, [pc, #80]	; (1d8b0 <cmd_benchmark+0x260>)
   1d860:	f004 ffc6 	bl	227f0 <printf>
        for(int i = 0; i < 192; i++) {
   1d864:	2600      	movs	r6, #0
          printf("%c", sig_hex[i]);
   1d866:	4f17      	ldr	r7, [pc, #92]	; (1d8c4 <cmd_benchmark+0x274>)
   1d868:	f50d 6482 	add.w	r4, sp, #1040	; 0x410
   1d86c:	4638      	mov	r0, r7
   1d86e:	f814 1b01 	ldrb.w	r1, [r4], #1
        for(int i = 0; i < 192; i++) {
   1d872:	3601      	adds	r6, #1
          printf("%c", sig_hex[i]);
   1d874:	f004 ffbc 	bl	227f0 <printf>
        for(int i = 0; i < 192; i++) {
   1d878:	2ec0      	cmp	r6, #192	; 0xc0
   1d87a:	d1f7      	bne.n	1d86c <cmd_benchmark+0x21c>
        }
        printf("\n");
   1d87c:	4812      	ldr	r0, [pc, #72]	; (1d8c8 <cmd_benchmark+0x278>)
   1d87e:	f004 ffb7 	bl	227f0 <printf>

        printf("\nBenchmark for signature: %u ms\n", 3000-time_left);
   1d882:	f5c5 613b 	rsb	r1, r5, #2992	; 0xbb0
   1d886:	3108      	adds	r1, #8
   1d888:	4819      	ldr	r0, [pc, #100]	; (1d8f0 <cmd_benchmark+0x2a0>)
   1d88a:	f004 ffb1 	bl	227f0 <printf>

	return 0;
}
   1d88e:	2000      	movs	r0, #0
   1d890:	f20d 7d14 	addw	sp, sp, #1812	; 0x714
   1d894:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d896:	bf00      	nop
   1d898:	0002b037 	.word	0x0002b037
   1d89c:	0002a744 	.word	0x0002a744
   1d8a0:	20008188 	.word	0x20008188
   1d8a4:	2000939c 	.word	0x2000939c
   1d8a8:	0002b05e 	.word	0x0002b05e
   1d8ac:	0002b066 	.word	0x0002b066
   1d8b0:	0002b020 	.word	0x0002b020
   1d8b4:	0002bc57 	.word	0x0002bc57
   1d8b8:	20008328 	.word	0x20008328
   1d8bc:	0002b012 	.word	0x0002b012
   1d8c0:	0002b074 	.word	0x0002b074
   1d8c4:	0002c0ba 	.word	0x0002c0ba
   1d8c8:	0002bafd 	.word	0x0002bafd
   1d8cc:	0002b0cf 	.word	0x0002b0cf
   1d8d0:	0002b0f5 	.word	0x0002b0f5
   1d8d4:	0002b07c 	.word	0x0002b07c
   1d8d8:	0002b084 	.word	0x0002b084
   1d8dc:	0002b136 	.word	0x0002b136
   1d8e0:	0002b094 	.word	0x0002b094
   1d8e4:	0002b142 	.word	0x0002b142
   1d8e8:	0002b166 	.word	0x0002b166
   1d8ec:	0002b08c 	.word	0x0002b08c
   1d8f0:	0002b174 	.word	0x0002b174

0001d8f4 <dynamic_cmd_get>:
}

/* dynamic command creation */
static void dynamic_cmd_get(size_t idx, struct shell_static_entry *entry)
{
	if (idx < dynamic_cmd_cnt) {
   1d8f4:	4b08      	ldr	r3, [pc, #32]	; (1d918 <dynamic_cmd_get+0x24>)
   1d8f6:	781b      	ldrb	r3, [r3, #0]
   1d8f8:	4283      	cmp	r3, r0
   1d8fa:	d90a      	bls.n	1d912 <dynamic_cmd_get+0x1e>
		/* m_dynamic_cmd_buffer must be sorted alphabetically to ensure
		 * correct CLI completion
		 */
		entry->syntax = dynamic_cmd_buffer[idx];
   1d8fc:	4b07      	ldr	r3, [pc, #28]	; (1d91c <dynamic_cmd_get+0x28>)
   1d8fe:	eb00 1040 	add.w	r0, r0, r0, lsl #5
   1d902:	4418      	add	r0, r3
		entry->handler  = NULL;
   1d904:	2300      	movs	r3, #0
		entry->subcmd = NULL;
   1d906:	e9c1 3302 	strd	r3, r3, [r1, #8]
		entry->help = "Show dynamic command name.";
   1d90a:	4b05      	ldr	r3, [pc, #20]	; (1d920 <dynamic_cmd_get+0x2c>)
		entry->syntax = dynamic_cmd_buffer[idx];
   1d90c:	6008      	str	r0, [r1, #0]
		entry->help = "Show dynamic command name.";
   1d90e:	604b      	str	r3, [r1, #4]
   1d910:	4770      	bx	lr
	} else {
		/* if there are no more dynamic commands available syntax
		 * must be set to NULL.
		 */
		entry->syntax = NULL;
   1d912:	2300      	movs	r3, #0
   1d914:	600b      	str	r3, [r1, #0]
	}
}
   1d916:	4770      	bx	lr
   1d918:	20009650 	.word	0x20009650
   1d91c:	200093bc 	.word	0x200093bc
   1d920:	0002b2d4 	.word	0x0002b2d4

0001d924 <cmd_dynamic_show>:
{
   1d924:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (dynamic_cmd_cnt == 0U) {
   1d928:	4d12      	ldr	r5, [pc, #72]	; (1d974 <cmd_dynamic_show+0x50>)
{
   1d92a:	4606      	mov	r6, r0
	if (dynamic_cmd_cnt == 0U) {
   1d92c:	782a      	ldrb	r2, [r5, #0]
   1d92e:	b942      	cbnz	r2, 1d942 <cmd_dynamic_show+0x1e>
		shell_warn(shell, "Please add some commands first.");
   1d930:	2104      	movs	r1, #4
   1d932:	4a11      	ldr	r2, [pc, #68]	; (1d978 <cmd_dynamic_show+0x54>)
   1d934:	f008 fe02 	bl	2653c <shell_fprintf>
   1d938:	f06f 0007 	mvn.w	r0, #7
}
   1d93c:	b002      	add	sp, #8
   1d93e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	shell_print(shell, "Dynamic command list:");
   1d942:	2100      	movs	r1, #0
   1d944:	4a0d      	ldr	r2, [pc, #52]	; (1d97c <cmd_dynamic_show+0x58>)
   1d946:	f008 fdf9 	bl	2653c <shell_fprintf>
	for (uint8_t i = 0; i < dynamic_cmd_cnt; i++) {
   1d94a:	2400      	movs	r4, #0
		shell_print(shell, "[%3d] %s", i, dynamic_cmd_buffer[i]);
   1d94c:	4f0c      	ldr	r7, [pc, #48]	; (1d980 <cmd_dynamic_show+0x5c>)
   1d94e:	f8df 8034 	ldr.w	r8, [pc, #52]	; 1d984 <cmd_dynamic_show+0x60>
	for (uint8_t i = 0; i < dynamic_cmd_cnt; i++) {
   1d952:	7829      	ldrb	r1, [r5, #0]
   1d954:	b2e3      	uxtb	r3, r4
   1d956:	4299      	cmp	r1, r3
   1d958:	d801      	bhi.n	1d95e <cmd_dynamic_show+0x3a>
	return 0;
   1d95a:	2000      	movs	r0, #0
   1d95c:	e7ee      	b.n	1d93c <cmd_dynamic_show+0x18>
		shell_print(shell, "[%3d] %s", i, dynamic_cmd_buffer[i]);
   1d95e:	eb03 1143 	add.w	r1, r3, r3, lsl #5
   1d962:	4439      	add	r1, r7
   1d964:	9100      	str	r1, [sp, #0]
   1d966:	4642      	mov	r2, r8
   1d968:	2100      	movs	r1, #0
   1d96a:	4630      	mov	r0, r6
   1d96c:	f008 fde6 	bl	2653c <shell_fprintf>
	for (uint8_t i = 0; i < dynamic_cmd_cnt; i++) {
   1d970:	3401      	adds	r4, #1
   1d972:	e7ee      	b.n	1d952 <cmd_dynamic_show+0x2e>
   1d974:	20009650 	.word	0x20009650
   1d978:	0002b2ef 	.word	0x0002b2ef
   1d97c:	0002b310 	.word	0x0002b310
   1d980:	200093bc 	.word	0x200093bc
   1d984:	0002b327 	.word	0x0002b327

0001d988 <cmd_dynamic_execute>:
{
   1d988:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1d98c:	4606      	mov	r6, r0
   1d98e:	4615      	mov	r5, r2
	for (uint8_t idx = 0; idx <  dynamic_cmd_cnt; idx++) {
   1d990:	2700      	movs	r7, #0
   1d992:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1d9ec <cmd_dynamic_execute+0x64>
		if (!strcmp(dynamic_cmd_buffer[idx], argv[1])) {
   1d996:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1d9f0 <cmd_dynamic_execute+0x68>
	for (uint8_t idx = 0; idx <  dynamic_cmd_cnt; idx++) {
   1d99a:	f898 2000 	ldrb.w	r2, [r8]
   1d99e:	b2fb      	uxtb	r3, r7
   1d9a0:	429a      	cmp	r2, r3
   1d9a2:	6869      	ldr	r1, [r5, #4]
   1d9a4:	d809      	bhi.n	1d9ba <cmd_dynamic_execute+0x32>
	shell_error(shell, "%s: uknown parameter: %s", argv[0], argv[1]);
   1d9a6:	9100      	str	r1, [sp, #0]
   1d9a8:	4630      	mov	r0, r6
   1d9aa:	2102      	movs	r1, #2
   1d9ac:	682b      	ldr	r3, [r5, #0]
   1d9ae:	4a0d      	ldr	r2, [pc, #52]	; (1d9e4 <cmd_dynamic_execute+0x5c>)
   1d9b0:	f008 fdc4 	bl	2653c <shell_fprintf>
	return -ENOEXEC;
   1d9b4:	f06f 0407 	mvn.w	r4, #7
   1d9b8:	e00f      	b.n	1d9da <cmd_dynamic_execute+0x52>
		if (!strcmp(dynamic_cmd_buffer[idx], argv[1])) {
   1d9ba:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   1d9be:	eb09 0003 	add.w	r0, r9, r3
   1d9c2:	f009 fe41 	bl	27648 <strcmp>
   1d9c6:	3701      	adds	r7, #1
   1d9c8:	4604      	mov	r4, r0
   1d9ca:	2800      	cmp	r0, #0
   1d9cc:	d1e5      	bne.n	1d99a <cmd_dynamic_execute+0x12>
			shell_print(shell, "dynamic command: %s", argv[1]);
   1d9ce:	4601      	mov	r1, r0
   1d9d0:	686b      	ldr	r3, [r5, #4]
   1d9d2:	4630      	mov	r0, r6
   1d9d4:	4a04      	ldr	r2, [pc, #16]	; (1d9e8 <cmd_dynamic_execute+0x60>)
   1d9d6:	f008 fdb1 	bl	2653c <shell_fprintf>
}
   1d9da:	4620      	mov	r0, r4
   1d9dc:	b003      	add	sp, #12
   1d9de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d9e2:	bf00      	nop
   1d9e4:	0002b346 	.word	0x0002b346
   1d9e8:	0002b331 	.word	0x0002b331
   1d9ec:	20009650 	.word	0x20009650
   1d9f0:	200093bc 	.word	0x200093bc

0001d9f4 <cmd_dynamic_remove>:
{
   1d9f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint8_t idx = 0; idx <  dynamic_cmd_cnt; idx++) {
   1d9f8:	f8df a08c 	ldr.w	sl, [pc, #140]	; 1da88 <cmd_dynamic_remove+0x94>
{
   1d9fc:	4693      	mov	fp, r2
   1d9fe:	4606      	mov	r6, r0
	for (uint8_t idx = 0; idx <  dynamic_cmd_cnt; idx++) {
   1da00:	2200      	movs	r2, #0
   1da02:	46d0      	mov	r8, sl
		if (!strcmp(dynamic_cmd_buffer[idx], argv[1])) {
   1da04:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1da8c <cmd_dynamic_remove+0x98>
	for (uint8_t idx = 0; idx <  dynamic_cmd_cnt; idx++) {
   1da08:	f89a 1000 	ldrb.w	r1, [sl]
   1da0c:	b2d4      	uxtb	r4, r2
   1da0e:	42a1      	cmp	r1, r4
   1da10:	f8db 3004 	ldr.w	r3, [fp, #4]
   1da14:	d807      	bhi.n	1da26 <cmd_dynamic_remove+0x32>
	shell_error(shell, "did not find command: %s", argv[1]);
   1da16:	2102      	movs	r1, #2
   1da18:	4630      	mov	r0, r6
   1da1a:	4a19      	ldr	r2, [pc, #100]	; (1da80 <cmd_dynamic_remove+0x8c>)
   1da1c:	f008 fd8e 	bl	2653c <shell_fprintf>
	return -ENOEXEC;
   1da20:	f06f 0507 	mvn.w	r5, #7
   1da24:	e01a      	b.n	1da5c <cmd_dynamic_remove+0x68>
		if (!strcmp(dynamic_cmd_buffer[idx], argv[1])) {
   1da26:	eb04 1744 	add.w	r7, r4, r4, lsl #5
   1da2a:	444f      	add	r7, r9
   1da2c:	4619      	mov	r1, r3
   1da2e:	4638      	mov	r0, r7
   1da30:	9201      	str	r2, [sp, #4]
   1da32:	f009 fe09 	bl	27648 <strcmp>
   1da36:	9a01      	ldr	r2, [sp, #4]
   1da38:	4605      	mov	r5, r0
   1da3a:	3201      	adds	r2, #1
   1da3c:	2800      	cmp	r0, #0
   1da3e:	d1e3      	bne.n	1da08 <cmd_dynamic_remove+0x14>
			if (idx == MAX_CMD_CNT - 1) {
   1da40:	2c13      	cmp	r4, #19
   1da42:	d10f      	bne.n	1da64 <cmd_dynamic_remove+0x70>
				dynamic_cmd_buffer[idx][0] = '\0';
   1da44:	f889 0273 	strb.w	r0, [r9, #627]	; 0x273
			--dynamic_cmd_cnt;
   1da48:	f898 3000 	ldrb.w	r3, [r8]
			shell_print(shell, "command removed successfully");
   1da4c:	2100      	movs	r1, #0
			--dynamic_cmd_cnt;
   1da4e:	3b01      	subs	r3, #1
			shell_print(shell, "command removed successfully");
   1da50:	4630      	mov	r0, r6
   1da52:	4a0c      	ldr	r2, [pc, #48]	; (1da84 <cmd_dynamic_remove+0x90>)
			--dynamic_cmd_cnt;
   1da54:	f888 3000 	strb.w	r3, [r8]
			shell_print(shell, "command removed successfully");
   1da58:	f008 fd70 	bl	2653c <shell_fprintf>
}
   1da5c:	4628      	mov	r0, r5
   1da5e:	b003      	add	sp, #12
   1da60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					(dynamic_cmd_cnt - idx));
   1da64:	f89a 2000 	ldrb.w	r2, [sl]
				memmove(dynamic_cmd_buffer[idx],
   1da68:	4638      	mov	r0, r7
					(dynamic_cmd_cnt - idx));
   1da6a:	1b12      	subs	r2, r2, r4
					dynamic_cmd_buffer[idx + 1],
   1da6c:	3401      	adds	r4, #1
   1da6e:	eb04 1444 	add.w	r4, r4, r4, lsl #5
				memmove(dynamic_cmd_buffer[idx],
   1da72:	eb02 1242 	add.w	r2, r2, r2, lsl #5
   1da76:	eb09 0104 	add.w	r1, r9, r4
   1da7a:	f009 fe10 	bl	2769e <memmove>
   1da7e:	e7e3      	b.n	1da48 <cmd_dynamic_remove+0x54>
   1da80:	0002b37e 	.word	0x0002b37e
   1da84:	0002b360 	.word	0x0002b360
   1da88:	20009650 	.word	0x20009650
   1da8c:	200093bc 	.word	0x200093bc

0001da90 <cmd_dynamic_add>:
{
   1da90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (dynamic_cmd_cnt >= MAX_CMD_CNT) {
   1da94:	4d29      	ldr	r5, [pc, #164]	; (1db3c <cmd_dynamic_add+0xac>)
{
   1da96:	4604      	mov	r4, r0
	if (dynamic_cmd_cnt >= MAX_CMD_CNT) {
   1da98:	782b      	ldrb	r3, [r5, #0]
{
   1da9a:	4616      	mov	r6, r2
	if (dynamic_cmd_cnt >= MAX_CMD_CNT) {
   1da9c:	2b13      	cmp	r3, #19
   1da9e:	d907      	bls.n	1dab0 <cmd_dynamic_add+0x20>
		shell_error(shell, "command limit reached");
   1daa0:	2102      	movs	r1, #2
   1daa2:	4a27      	ldr	r2, [pc, #156]	; (1db40 <cmd_dynamic_add+0xb0>)
			shell_error(shell, "duplicated command");
   1daa4:	f008 fd4a 	bl	2653c <shell_fprintf>
			return -ENOEXEC;
   1daa8:	f06f 0007 	mvn.w	r0, #7
}
   1daac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	cmd_len = strlen(argv[1]);
   1dab0:	6850      	ldr	r0, [r2, #4]
   1dab2:	f009 fdb9 	bl	27628 <strlen>
   1dab6:	b280      	uxth	r0, r0
	if (cmd_len >= MAX_CMD_LEN) {
   1dab8:	2820      	cmp	r0, #32
   1daba:	d80f      	bhi.n	1dadc <cmd_dynamic_add+0x4c>
   1dabc:	2300      	movs	r3, #0
   1dabe:	6877      	ldr	r7, [r6, #4]
	for (idx = 0U; idx < cmd_len; idx++) {
   1dac0:	b29a      	uxth	r2, r3
   1dac2:	4290      	cmp	r0, r2
   1dac4:	d80e      	bhi.n	1dae4 <cmd_dynamic_add+0x54>
   1dac6:	4f1f      	ldr	r7, [pc, #124]	; (1db44 <cmd_dynamic_add+0xb4>)
   1dac8:	f04f 0800 	mov.w	r8, #0
   1dacc:	46b9      	mov	r9, r7
		if (!strcmp(dynamic_cmd_buffer[idx], argv[1])) {
   1dace:	4638      	mov	r0, r7
   1dad0:	6871      	ldr	r1, [r6, #4]
   1dad2:	f009 fdb9 	bl	27648 <strcmp>
   1dad6:	b990      	cbnz	r0, 1dafe <cmd_dynamic_add+0x6e>
			shell_error(shell, "duplicated command");
   1dad8:	4a1b      	ldr	r2, [pc, #108]	; (1db48 <cmd_dynamic_add+0xb8>)
   1dada:	e000      	b.n	1dade <cmd_dynamic_add+0x4e>
		shell_error(shell, "too long command");
   1dadc:	4a1b      	ldr	r2, [pc, #108]	; (1db4c <cmd_dynamic_add+0xbc>)
			shell_error(shell, "duplicated command");
   1dade:	2102      	movs	r1, #2
   1dae0:	4620      	mov	r0, r4
   1dae2:	e7df      	b.n	1daa4 <cmd_dynamic_add+0x14>
		if (!isalnum((int)(argv[1][idx]))) {
   1dae4:	5cfa      	ldrb	r2, [r7, r3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
}

static inline int isalpha(int c)
{
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1dae6:	f042 0120 	orr.w	r1, r2, #32
   1daea:	3961      	subs	r1, #97	; 0x61
				(int)'z') ? (chr - 32) : (chr));
}

static inline int isalnum(int chr)
{
	return (int)(isalpha(chr) || isdigit(chr));
   1daec:	2919      	cmp	r1, #25
   1daee:	d904      	bls.n	1dafa <cmd_dynamic_add+0x6a>
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1daf0:	3a30      	subs	r2, #48	; 0x30
	return (int)(isalpha(chr) || isdigit(chr));
   1daf2:	2a09      	cmp	r2, #9
   1daf4:	d901      	bls.n	1dafa <cmd_dynamic_add+0x6a>
			shell_error(shell,
   1daf6:	4a16      	ldr	r2, [pc, #88]	; (1db50 <cmd_dynamic_add+0xc0>)
   1daf8:	e7f1      	b.n	1dade <cmd_dynamic_add+0x4e>
	for (idx = 0U; idx < cmd_len; idx++) {
   1dafa:	3301      	adds	r3, #1
   1dafc:	e7e0      	b.n	1dac0 <cmd_dynamic_add+0x30>
	for (idx = 0U; idx < MAX_CMD_CNT; idx++) {
   1dafe:	f108 0801 	add.w	r8, r8, #1
   1db02:	f1b8 0f14 	cmp.w	r8, #20
   1db06:	f107 0721 	add.w	r7, r7, #33	; 0x21
   1db0a:	d1e0      	bne.n	1dace <cmd_dynamic_add+0x3e>
	sprintf(dynamic_cmd_buffer[dynamic_cmd_cnt++], "%s", argv[1]);
   1db0c:	7828      	ldrb	r0, [r5, #0]
   1db0e:	6872      	ldr	r2, [r6, #4]
   1db10:	1c43      	adds	r3, r0, #1
   1db12:	eb00 1040 	add.w	r0, r0, r0, lsl #5
   1db16:	490f      	ldr	r1, [pc, #60]	; (1db54 <cmd_dynamic_add+0xc4>)
   1db18:	4448      	add	r0, r9
   1db1a:	702b      	strb	r3, [r5, #0]
   1db1c:	f004 fe50 	bl	227c0 <sprintf>
	qsort(dynamic_cmd_buffer, dynamic_cmd_cnt,
   1db20:	2221      	movs	r2, #33	; 0x21
   1db22:	4b0d      	ldr	r3, [pc, #52]	; (1db58 <cmd_dynamic_add+0xc8>)
   1db24:	7829      	ldrb	r1, [r5, #0]
   1db26:	4807      	ldr	r0, [pc, #28]	; (1db44 <cmd_dynamic_add+0xb4>)
   1db28:	f007 fa94 	bl	25054 <qsort>
	shell_print(shell, "command added successfully");
   1db2c:	4620      	mov	r0, r4
   1db2e:	2100      	movs	r1, #0
   1db30:	4a0a      	ldr	r2, [pc, #40]	; (1db5c <cmd_dynamic_add+0xcc>)
   1db32:	f008 fd03 	bl	2653c <shell_fprintf>
	return 0;
   1db36:	2000      	movs	r0, #0
   1db38:	e7b8      	b.n	1daac <cmd_dynamic_add+0x1c>
   1db3a:	bf00      	nop
   1db3c:	20009650 	.word	0x20009650
   1db40:	0002b398 	.word	0x0002b398
   1db44:	200093bc 	.word	0x200093bc
   1db48:	0002b3ff 	.word	0x0002b3ff
   1db4c:	0002b3af 	.word	0x0002b3af
   1db50:	0002b3c1 	.word	0x0002b3c1
   1db54:	0002bc4b 	.word	0x0002bc4b
   1db58:	00024ffb 	.word	0x00024ffb
   1db5c:	0002b413 	.word	0x0002b413

0001db60 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   1db60:	680b      	ldr	r3, [r1, #0]
   1db62:	3301      	adds	r3, #1
   1db64:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   1db66:	4b01      	ldr	r3, [pc, #4]	; (1db6c <char_out+0xc>)
   1db68:	681b      	ldr	r3, [r3, #0]
   1db6a:	4718      	bx	r3
   1db6c:	20008000 	.word	0x20008000

0001db70 <__printk_hook_install>:
	_char_out = fn;
   1db70:	4b01      	ldr	r3, [pc, #4]	; (1db78 <__printk_hook_install+0x8>)
   1db72:	6018      	str	r0, [r3, #0]
}
   1db74:	4770      	bx	lr
   1db76:	bf00      	nop
   1db78:	20008000 	.word	0x20008000

0001db7c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   1db7c:	b507      	push	{r0, r1, r2, lr}
   1db7e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   1db80:	2100      	movs	r1, #0
{
   1db82:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   1db84:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   1db86:	4803      	ldr	r0, [pc, #12]	; (1db94 <vprintk+0x18>)
   1db88:	a901      	add	r1, sp, #4
   1db8a:	f000 f981 	bl	1de90 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   1db8e:	b003      	add	sp, #12
   1db90:	f85d fb04 	ldr.w	pc, [sp], #4
   1db94:	0001db61 	.word	0x0001db61

0001db98 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   1db98:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   1db9a:	2500      	movs	r5, #0
{
   1db9c:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   1db9e:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   1dba2:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
   1dba4:	a901      	add	r1, sp, #4
   1dba6:	4805      	ldr	r0, [pc, #20]	; (1dbbc <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   1dba8:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   1dbaa:	f000 f971 	bl	1de90 <cbvprintf>

	if (ctx.count < ctx.max) {
   1dbae:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   1dbb2:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   1dbb4:	bfb8      	it	lt
   1dbb6:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   1dbb8:	b005      	add	sp, #20
   1dbba:	bd30      	pop	{r4, r5, pc}
   1dbbc:	000253af 	.word	0x000253af

0001dbc0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   1dbc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1dbc4:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
   1dbc8:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   1dbca:	f019 0808 	ands.w	r8, r9, #8
{
   1dbce:	4693      	mov	fp, r2
	if (processing) {
   1dbd0:	d00d      	beq.n	1dbee <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
   1dbd2:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   1dbd4:	bf0c      	ite	eq
   1dbd6:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   1dbda:	f049 0920 	orrne.w	r9, r9, #32
   1dbde:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1dbe2:	f38b 8811 	msr	BASEPRI, fp
   1dbe6:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   1dbea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1dbee:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   1dbf2:	2902      	cmp	r1, #2
   1dbf4:	d107      	bne.n	1dc06 <process_event+0x46>
			evt = process_recheck(mgr);
   1dbf6:	4620      	mov	r0, r4
   1dbf8:	f007 fc06 	bl	25408 <process_recheck>
		if (evt == EVT_NOP) {
   1dbfc:	2800      	cmp	r0, #0
   1dbfe:	d0f0      	beq.n	1dbe2 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   1dc00:	2801      	cmp	r0, #1
   1dc02:	8b23      	ldrh	r3, [r4, #24]
   1dc04:	d150      	bne.n	1dca8 <process_event+0xe8>
			res = mgr->last_res;
   1dc06:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1dc08:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   1dc0a:	2f00      	cmp	r7, #0
   1dc0c:	da15      	bge.n	1dc3a <process_event+0x7a>
		*clients = mgr->clients;
   1dc0e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1dc10:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   1dc14:	e9c4 8800 	strd	r8, r8, [r4]
   1dc18:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   1dc1c:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   1dc1e:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1dc20:	8b21      	ldrh	r1, [r4, #24]
   1dc22:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1dc26:	45ca      	cmp	sl, r9
   1dc28:	d002      	beq.n	1dc30 <process_event+0x70>
		if (do_monitors
   1dc2a:	68a3      	ldr	r3, [r4, #8]
   1dc2c:	2b00      	cmp	r3, #0
   1dc2e:	d15c      	bne.n	1dcea <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
   1dc30:	b90d      	cbnz	r5, 1dc36 <process_event+0x76>
		    || (transit != NULL)) {
   1dc32:	2e00      	cmp	r6, #0
   1dc34:	d074      	beq.n	1dd20 <process_event+0x160>
   1dc36:	2300      	movs	r3, #0
   1dc38:	e058      	b.n	1dcec <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1dc3a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   1dc3e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   1dc40:	2a01      	cmp	r2, #1
   1dc42:	d820      	bhi.n	1dc86 <process_event+0xc6>
		*clients = mgr->clients;
   1dc44:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   1dc48:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   1dc4a:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
   1dc4c:	b289      	uxth	r1, r1
	list->tail = NULL;
   1dc4e:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   1dc52:	d10c      	bne.n	1dc6e <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   1dc54:	2d00      	cmp	r5, #0
   1dc56:	462b      	mov	r3, r5
   1dc58:	bf38      	it	cc
   1dc5a:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1dc5c:	b12b      	cbz	r3, 1dc6a <process_event+0xaa>
				mgr->refs += 1U;
   1dc5e:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1dc60:	681b      	ldr	r3, [r3, #0]
   1dc62:	3201      	adds	r2, #1
   1dc64:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1dc66:	2b00      	cmp	r3, #0
   1dc68:	d1f8      	bne.n	1dc5c <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1dc6a:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
   1dc6e:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   1dc70:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   1dc72:	f007 fbc9 	bl	25408 <process_recheck>
   1dc76:	4606      	mov	r6, r0
   1dc78:	2800      	cmp	r0, #0
   1dc7a:	d0d1      	beq.n	1dc20 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1dc7c:	8b23      	ldrh	r3, [r4, #24]
   1dc7e:	f043 0320 	orr.w	r3, r3, #32
   1dc82:	8323      	strh	r3, [r4, #24]
   1dc84:	e7cb      	b.n	1dc1e <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   1dc86:	2b04      	cmp	r3, #4
   1dc88:	d10c      	bne.n	1dca4 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1dc8a:	f021 0107 	bic.w	r1, r1, #7
   1dc8e:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
   1dc90:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   1dc92:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   1dc94:	f007 fbb8 	bl	25408 <process_recheck>
   1dc98:	4605      	mov	r5, r0
   1dc9a:	2800      	cmp	r0, #0
   1dc9c:	d0bf      	beq.n	1dc1e <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1dc9e:	f041 0120 	orr.w	r1, r1, #32
   1dca2:	8321      	strh	r1, [r4, #24]
   1dca4:	2500      	movs	r5, #0
   1dca6:	e7ba      	b.n	1dc1e <process_event+0x5e>
		} else if (evt == EVT_START) {
   1dca8:	2803      	cmp	r0, #3
   1dcaa:	d109      	bne.n	1dcc0 <process_event+0x100>
			transit = mgr->transitions->start;
   1dcac:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1dcae:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   1dcb2:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1dcb4:	f043 0306 	orr.w	r3, r3, #6
}
   1dcb8:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
   1dcba:	8323      	strh	r3, [r4, #24]
		res = 0;
   1dcbc:	462f      	mov	r7, r5
   1dcbe:	e7af      	b.n	1dc20 <process_event+0x60>
		} else if (evt == EVT_STOP) {
   1dcc0:	2804      	cmp	r0, #4
   1dcc2:	d106      	bne.n	1dcd2 <process_event+0x112>
			transit = mgr->transitions->stop;
   1dcc4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1dcc6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   1dcca:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1dccc:	f043 0304 	orr.w	r3, r3, #4
   1dcd0:	e7f2      	b.n	1dcb8 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
   1dcd2:	2805      	cmp	r0, #5
   1dcd4:	d106      	bne.n	1dce4 <process_event+0x124>
			transit = mgr->transitions->reset;
   1dcd6:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1dcd8:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   1dcdc:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1dcde:	f043 0305 	orr.w	r3, r3, #5
   1dce2:	e7e9      	b.n	1dcb8 <process_event+0xf8>
   1dce4:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   1dce6:	462e      	mov	r6, r5
   1dce8:	e7e8      	b.n	1dcbc <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
   1dcea:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   1dcec:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   1dcf0:	8321      	strh	r1, [r4, #24]
   1dcf2:	f38b 8811 	msr	BASEPRI, fp
   1dcf6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   1dcfa:	bb03      	cbnz	r3, 1dd3e <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
   1dcfc:	2d00      	cmp	r5, #0
   1dcfe:	d133      	bne.n	1dd68 <process_event+0x1a8>
			if (transit != NULL) {
   1dd00:	b116      	cbz	r6, 1dd08 <process_event+0x148>
				transit(mgr, transition_complete);
   1dd02:	4620      	mov	r0, r4
   1dd04:	4920      	ldr	r1, [pc, #128]	; (1dd88 <process_event+0x1c8>)
   1dd06:	47b0      	blx	r6
	__asm__ volatile(
   1dd08:	f04f 0320 	mov.w	r3, #32
   1dd0c:	f3ef 8b11 	mrs	fp, BASEPRI
   1dd10:	f383 8811 	msr	BASEPRI, r3
   1dd14:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   1dd18:	8b23      	ldrh	r3, [r4, #24]
   1dd1a:	f023 0308 	bic.w	r3, r3, #8
   1dd1e:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   1dd20:	8b23      	ldrh	r3, [r4, #24]
   1dd22:	06da      	lsls	r2, r3, #27
   1dd24:	d528      	bpl.n	1dd78 <process_event+0x1b8>
			evt = EVT_COMPLETE;
   1dd26:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   1dd28:	f023 0310 	bic.w	r3, r3, #16
   1dd2c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   1dd2e:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   1dd32:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   1dd36:	2900      	cmp	r1, #0
   1dd38:	f47f af5b 	bne.w	1dbf2 <process_event+0x32>
out:
   1dd3c:	e751      	b.n	1dbe2 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1dd3e:	68a1      	ldr	r1, [r4, #8]
   1dd40:	2900      	cmp	r1, #0
   1dd42:	d0db      	beq.n	1dcfc <process_event+0x13c>
	return node->next;
   1dd44:	680b      	ldr	r3, [r1, #0]
   1dd46:	2b00      	cmp	r3, #0
   1dd48:	bf38      	it	cc
   1dd4a:	2300      	movcc	r3, #0
   1dd4c:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
   1dd4e:	4652      	mov	r2, sl
   1dd50:	463b      	mov	r3, r7
   1dd52:	4620      	mov	r0, r4
   1dd54:	f8d1 b004 	ldr.w	fp, [r1, #4]
   1dd58:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1dd5a:	f1b9 0f00 	cmp.w	r9, #0
   1dd5e:	d0cd      	beq.n	1dcfc <process_event+0x13c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1dd60:	4649      	mov	r1, r9
   1dd62:	f8d9 3000 	ldr.w	r3, [r9]
   1dd66:	e7ee      	b.n	1dd46 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1dd68:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   1dd6a:	463b      	mov	r3, r7
   1dd6c:	4652      	mov	r2, sl
   1dd6e:	4620      	mov	r0, r4
   1dd70:	682d      	ldr	r5, [r5, #0]
   1dd72:	f007 fb65 	bl	25440 <notify_one>
   1dd76:	e7c1      	b.n	1dcfc <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   1dd78:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   1dd7c:	bf1e      	ittt	ne
   1dd7e:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
   1dd82:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   1dd84:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   1dd86:	e7d2      	b.n	1dd2e <process_event+0x16e>
   1dd88:	0002546d 	.word	0x0002546d

0001dd8c <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

int64_t timeutil_timegm64(const struct tm *tm)
{
   1dd8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int64_t y = 1900 + (int64_t)tm->tm_year;
	unsigned int m = tm->tm_mon + 1;
   1dd90:	6903      	ldr	r3, [r0, #16]
	unsigned int d = tm->tm_mday - 1;
   1dd92:	68c4      	ldr	r4, [r0, #12]
	unsigned int m = tm->tm_mon + 1;
   1dd94:	f103 0901 	add.w	r9, r3, #1
	unsigned int d = tm->tm_mday - 1;
   1dd98:	1e63      	subs	r3, r4, #1
	int64_t y = 1900 + (int64_t)tm->tm_year;
   1dd9a:	f240 746c 	movw	r4, #1900	; 0x76c
   1dd9e:	2500      	movs	r5, #0
	unsigned int d = tm->tm_mday - 1;
   1dda0:	9301      	str	r3, [sp, #4]
	int64_t y = 1900 + (int64_t)tm->tm_year;
   1dda2:	6943      	ldr	r3, [r0, #20]
{
   1dda4:	4680      	mov	r8, r0
	int64_t y = 1900 + (int64_t)tm->tm_year;
   1dda6:	18e4      	adds	r4, r4, r3
   1dda8:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
	y -= m <= 2;
   1ddac:	f1b9 0f02 	cmp.w	r9, #2
   1ddb0:	bf8c      	ite	hi
   1ddb2:	2300      	movhi	r3, #0
   1ddb4:	2301      	movls	r3, #1
   1ddb6:	1ae4      	subs	r4, r4, r3
   1ddb8:	f165 0500 	sbc.w	r5, r5, #0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   1ddbc:	2c00      	cmp	r4, #0
   1ddbe:	f175 0300 	sbcs.w	r3, r5, #0
   1ddc2:	da57      	bge.n	1de74 <timeutil_timegm64+0xe8>
   1ddc4:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
   1ddc8:	f44f 72c8 	mov.w	r2, #400	; 0x190
   1ddcc:	2300      	movs	r3, #0
   1ddce:	1820      	adds	r0, r4, r0
   1ddd0:	f145 31ff 	adc.w	r1, r5, #4294967295
   1ddd4:	f7f2 fa34 	bl	10240 <__aeabi_ldivmod>
	unsigned int yoe = y - era * 400;
   1ddd8:	4b29      	ldr	r3, [pc, #164]	; (1de80 <timeutil_timegm64+0xf4>)
	int64_t ndays = time_days_from_civil(y, m, d);
	int64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   1ddda:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
	unsigned int yoe = y - era * 400;
   1ddde:	fb03 4400 	mla	r4, r3, r0, r4
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   1dde2:	e9d8 5300 	ldrd	r5, r3, [r8]
   1dde6:	469a      	mov	sl, r3
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   1dde8:	f1b9 0f02 	cmp.w	r9, #2
   1ddec:	bf8c      	ite	hi
   1ddee:	f06f 0e02 	mvnhi.w	lr, #2
   1ddf2:	f04f 0e09 	movls.w	lr, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   1ddf6:	ea4f 7be3 	mov.w	fp, r3, asr #31
   1ddfa:	f8d8 3008 	ldr.w	r3, [r8, #8]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   1ddfe:	44f1      	add	r9, lr
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   1de00:	fbcc ab03 	smlal	sl, fp, ip, r3
   1de04:	fbaa 230c 	umull	r2, r3, sl, ip
   1de08:	fb0c 330b 	mla	r3, ip, fp, r3
   1de0c:	1952      	adds	r2, r2, r5
   1de0e:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   1de12:	f240 156d 	movw	r5, #365	; 0x16d
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   1de16:	f04f 0e99 	mov.w	lr, #153	; 0x99
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   1de1a:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   1de1e:	fb05 cc04 	mla	ip, r5, r4, ip
   1de22:	9d01      	ldr	r5, [sp, #4]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   1de24:	fb0e fe09 	mul.w	lr, lr, r9
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   1de28:	4465      	add	r5, ip
   1de2a:	f04f 0c64 	mov.w	ip, #100	; 0x64
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   1de2e:	f04f 0905 	mov.w	r9, #5
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   1de32:	fbb4 f4fc 	udiv	r4, r4, ip
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   1de36:	f10e 0e02 	add.w	lr, lr, #2
   1de3a:	fbbe fef9 	udiv	lr, lr, r9
	return era * 146097 + (time_t)doe - 719468;
   1de3e:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1de8c <timeutil_timegm64+0x100>
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   1de42:	1b2c      	subs	r4, r5, r4
   1de44:	44a6      	add	lr, r4
	return era * 146097 + (time_t)doe - 719468;
   1de46:	fba0 450c 	umull	r4, r5, r0, ip
   1de4a:	fb0c 5501 	mla	r5, ip, r1, r5
   1de4e:	490d      	ldr	r1, [pc, #52]	; (1de84 <timeutil_timegm64+0xf8>)
   1de50:	1866      	adds	r6, r4, r1
	time += 86400LL * ndays;
   1de52:	490d      	ldr	r1, [pc, #52]	; (1de88 <timeutil_timegm64+0xfc>)
	return era * 146097 + (time_t)doe - 719468;
   1de54:	f145 37ff 	adc.w	r7, r5, #4294967295
   1de58:	eb16 060e 	adds.w	r6, r6, lr
	time += 86400LL * ndays;
   1de5c:	fba6 4501 	umull	r4, r5, r6, r1
	return era * 146097 + (time_t)doe - 719468;
   1de60:	f147 0700 	adc.w	r7, r7, #0
	time += 86400LL * ndays;
   1de64:	fb01 5507 	mla	r5, r1, r7, r5

	return time;
}
   1de68:	18a0      	adds	r0, r4, r2
   1de6a:	eb45 0103 	adc.w	r1, r5, r3
   1de6e:	b003      	add	sp, #12
   1de70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   1de74:	f44f 72c8 	mov.w	r2, #400	; 0x190
   1de78:	2300      	movs	r3, #0
   1de7a:	4620      	mov	r0, r4
   1de7c:	4629      	mov	r1, r5
   1de7e:	e7a9      	b.n	1ddd4 <timeutil_timegm64+0x48>
   1de80:	fffffe70 	.word	0xfffffe70
   1de84:	fff50594 	.word	0xfff50594
   1de88:	00015180 	.word	0x00015180
   1de8c:	00023ab1 	.word	0x00023ab1

0001de90 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   1de90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1de94:	468b      	mov	fp, r1
   1de96:	4692      	mov	sl, r2
   1de98:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   1de9a:	2500      	movs	r5, #0
{
   1de9c:	b091      	sub	sp, #68	; 0x44
   1de9e:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   1dea0:	f89a 0000 	ldrb.w	r0, [sl]
   1dea4:	b908      	cbnz	r0, 1deaa <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   1dea6:	4628      	mov	r0, r5
   1dea8:	e35e      	b.n	1e568 <cbvprintf+0x6d8>
		if (*fp != '%') {
   1deaa:	2825      	cmp	r0, #37	; 0x25
   1deac:	f10a 0701 	add.w	r7, sl, #1
   1deb0:	d007      	beq.n	1dec2 <cbvprintf+0x32>
			OUTC('%');
   1deb2:	4659      	mov	r1, fp
   1deb4:	9b02      	ldr	r3, [sp, #8]
   1deb6:	4798      	blx	r3
   1deb8:	2800      	cmp	r0, #0
   1deba:	f2c0 8355 	blt.w	1e568 <cbvprintf+0x6d8>
   1debe:	3501      	adds	r5, #1
			break;
   1dec0:	e210      	b.n	1e2e4 <cbvprintf+0x454>
		} state = {
   1dec2:	2218      	movs	r2, #24
   1dec4:	2100      	movs	r1, #0
   1dec6:	a80a      	add	r0, sp, #40	; 0x28
   1dec8:	f009 fc2b 	bl	27722 <memset>
	if (*sp == '%') {
   1decc:	f89a 3001 	ldrb.w	r3, [sl, #1]
   1ded0:	2b25      	cmp	r3, #37	; 0x25
   1ded2:	d078      	beq.n	1dfc6 <cbvprintf+0x136>
   1ded4:	2200      	movs	r2, #0
   1ded6:	4694      	mov	ip, r2
   1ded8:	4616      	mov	r6, r2
   1deda:	4696      	mov	lr, r2
   1dedc:	4610      	mov	r0, r2
   1dede:	4639      	mov	r1, r7
		switch (*sp) {
   1dee0:	f817 3b01 	ldrb.w	r3, [r7], #1
   1dee4:	2b2b      	cmp	r3, #43	; 0x2b
   1dee6:	f000 809d 	beq.w	1e024 <cbvprintf+0x194>
   1deea:	f200 8094 	bhi.w	1e016 <cbvprintf+0x186>
   1deee:	2b20      	cmp	r3, #32
   1def0:	f000 809b 	beq.w	1e02a <cbvprintf+0x19a>
   1def4:	2b23      	cmp	r3, #35	; 0x23
   1def6:	f000 809a 	beq.w	1e02e <cbvprintf+0x19e>
   1defa:	b128      	cbz	r0, 1df08 <cbvprintf+0x78>
   1defc:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   1df00:	f040 0004 	orr.w	r0, r0, #4
   1df04:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   1df08:	f1be 0f00 	cmp.w	lr, #0
   1df0c:	d005      	beq.n	1df1a <cbvprintf+0x8a>
   1df0e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   1df12:	f040 0008 	orr.w	r0, r0, #8
   1df16:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   1df1a:	b12e      	cbz	r6, 1df28 <cbvprintf+0x98>
   1df1c:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   1df20:	f040 0010 	orr.w	r0, r0, #16
   1df24:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   1df28:	f1bc 0f00 	cmp.w	ip, #0
   1df2c:	d005      	beq.n	1df3a <cbvprintf+0xaa>
   1df2e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   1df32:	f040 0020 	orr.w	r0, r0, #32
   1df36:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   1df3a:	b12a      	cbz	r2, 1df48 <cbvprintf+0xb8>
   1df3c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   1df40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1df44:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
   1df48:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   1df4c:	f002 0044 	and.w	r0, r2, #68	; 0x44
   1df50:	2844      	cmp	r0, #68	; 0x44
   1df52:	d103      	bne.n	1df5c <cbvprintf+0xcc>
		conv->flag_zero = false;
   1df54:	f36f 1286 	bfc	r2, #6, #1
   1df58:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
   1df5c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   1df60:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
   1df62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1df66:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   1df6a:	d17b      	bne.n	1e064 <cbvprintf+0x1d4>
		conv->width_star = true;
   1df6c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1df70:	1c4b      	adds	r3, r1, #1
   1df72:	f042 0201 	orr.w	r2, r2, #1
   1df76:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
   1df7a:	781a      	ldrb	r2, [r3, #0]
   1df7c:	2a2e      	cmp	r2, #46	; 0x2e
   1df7e:	bf0c      	ite	eq
   1df80:	2101      	moveq	r1, #1
   1df82:	2100      	movne	r1, #0
   1df84:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1df88:	f361 0241 	bfi	r2, r1, #1, #1
   1df8c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
   1df90:	d174      	bne.n	1e07c <cbvprintf+0x1ec>
	if (*sp == '*') {
   1df92:	785a      	ldrb	r2, [r3, #1]
   1df94:	2a2a      	cmp	r2, #42	; 0x2a
   1df96:	d06a      	beq.n	1e06e <cbvprintf+0x1de>
	size_t val = 0;
   1df98:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
   1df9a:	260a      	movs	r6, #10
   1df9c:	3301      	adds	r3, #1
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1df9e:	4618      	mov	r0, r3
   1dfa0:	f810 2b01 	ldrb.w	r2, [r0], #1
   1dfa4:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   1dfa8:	2f09      	cmp	r7, #9
   1dfaa:	f240 808e 	bls.w	1e0ca <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
   1dfae:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
   1dfb2:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
   1dfb4:	f3c2 0040 	ubfx	r0, r2, #1, #1
   1dfb8:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
   1dfbc:	f361 0241 	bfi	r2, r1, #1, #1
   1dfc0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   1dfc4:	e05a      	b.n	1e07c <cbvprintf+0x1ec>
		conv->specifier = *sp++;
   1dfc6:	f10a 0702 	add.w	r7, sl, #2
   1dfca:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
   1dfce:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1dfd2:	07d9      	lsls	r1, r3, #31
   1dfd4:	f140 8149 	bpl.w	1e26a <cbvprintf+0x3da>
			width = va_arg(ap, int);
   1dfd8:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
   1dfdc:	f1b9 0f00 	cmp.w	r9, #0
   1dfe0:	da07      	bge.n	1dff2 <cbvprintf+0x162>
				conv->flag_dash = true;
   1dfe2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
   1dfe6:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
   1dfea:	f042 0204 	orr.w	r2, r2, #4
   1dfee:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
   1dff2:	075a      	lsls	r2, r3, #29
   1dff4:	f140 8142 	bpl.w	1e27c <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
   1dff8:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
   1dffc:	f1b8 0f00 	cmp.w	r8, #0
   1e000:	f280 8141 	bge.w	1e286 <cbvprintf+0x3f6>
				conv->prec_present = false;
   1e004:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1e008:	f36f 0341 	bfc	r3, #1, #1
   1e00c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
   1e010:	f04f 38ff 	mov.w	r8, #4294967295
   1e014:	e137      	b.n	1e286 <cbvprintf+0x3f6>
		switch (*sp) {
   1e016:	2b2d      	cmp	r3, #45	; 0x2d
   1e018:	d00c      	beq.n	1e034 <cbvprintf+0x1a4>
   1e01a:	2b30      	cmp	r3, #48	; 0x30
   1e01c:	f47f af6d 	bne.w	1defa <cbvprintf+0x6a>
			conv->flag_zero = true;
   1e020:	2201      	movs	r2, #1
	} while (loop);
   1e022:	e75c      	b.n	1dede <cbvprintf+0x4e>
			conv->flag_plus = true;
   1e024:	f04f 0e01 	mov.w	lr, #1
   1e028:	e759      	b.n	1dede <cbvprintf+0x4e>
			conv->flag_space = true;
   1e02a:	2601      	movs	r6, #1
   1e02c:	e757      	b.n	1dede <cbvprintf+0x4e>
			conv->flag_hash = true;
   1e02e:	f04f 0c01 	mov.w	ip, #1
   1e032:	e754      	b.n	1dede <cbvprintf+0x4e>
		switch (*sp) {
   1e034:	2001      	movs	r0, #1
   1e036:	e752      	b.n	1dede <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
   1e038:	4633      	mov	r3, r6
   1e03a:	fb0c 0202 	mla	r2, ip, r2, r0
   1e03e:	3a30      	subs	r2, #48	; 0x30
   1e040:	461e      	mov	r6, r3
   1e042:	f816 0b01 	ldrb.w	r0, [r6], #1
   1e046:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   1e04a:	2f09      	cmp	r7, #9
   1e04c:	d9f4      	bls.n	1e038 <cbvprintf+0x1a8>
	if (sp != wp) {
   1e04e:	4299      	cmp	r1, r3
   1e050:	d093      	beq.n	1df7a <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   1e052:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
   1e056:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
   1e058:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   1e05a:	f362 0141 	bfi	r1, r2, #1, #1
   1e05e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   1e062:	e78a      	b.n	1df7a <cbvprintf+0xea>
   1e064:	460b      	mov	r3, r1
	size_t val = 0;
   1e066:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   1e068:	f04f 0c0a 	mov.w	ip, #10
   1e06c:	e7e8      	b.n	1e040 <cbvprintf+0x1b0>
		conv->prec_star = true;
   1e06e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
   1e072:	3302      	adds	r3, #2
		conv->prec_star = true;
   1e074:	f042 0204 	orr.w	r2, r2, #4
   1e078:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
   1e07c:	461f      	mov	r7, r3
   1e07e:	f817 2b01 	ldrb.w	r2, [r7], #1
   1e082:	2a6c      	cmp	r2, #108	; 0x6c
   1e084:	d041      	beq.n	1e10a <cbvprintf+0x27a>
   1e086:	d825      	bhi.n	1e0d4 <cbvprintf+0x244>
   1e088:	2a68      	cmp	r2, #104	; 0x68
   1e08a:	d02b      	beq.n	1e0e4 <cbvprintf+0x254>
   1e08c:	2a6a      	cmp	r2, #106	; 0x6a
   1e08e:	d046      	beq.n	1e11e <cbvprintf+0x28e>
   1e090:	2a4c      	cmp	r2, #76	; 0x4c
   1e092:	d04c      	beq.n	1e12e <cbvprintf+0x29e>
   1e094:	461f      	mov	r7, r3
	conv->specifier = *sp++;
   1e096:	f817 2b01 	ldrb.w	r2, [r7], #1
   1e09a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
   1e09e:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   1e0a0:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
   1e0a4:	f200 80d9 	bhi.w	1e25a <cbvprintf+0x3ca>
   1e0a8:	2a57      	cmp	r2, #87	; 0x57
   1e0aa:	d84d      	bhi.n	1e148 <cbvprintf+0x2b8>
   1e0ac:	2a41      	cmp	r2, #65	; 0x41
   1e0ae:	d003      	beq.n	1e0b8 <cbvprintf+0x228>
   1e0b0:	3a45      	subs	r2, #69	; 0x45
   1e0b2:	2a02      	cmp	r2, #2
   1e0b4:	f200 80d1 	bhi.w	1e25a <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
   1e0b8:	2204      	movs	r2, #4
   1e0ba:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   1e0be:	f362 0302 	bfi	r3, r2, #0, #3
   1e0c2:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
   1e0c6:	2301      	movs	r3, #1
			break;
   1e0c8:	e09e      	b.n	1e208 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
   1e0ca:	fb06 2101 	mla	r1, r6, r1, r2
   1e0ce:	4603      	mov	r3, r0
   1e0d0:	3930      	subs	r1, #48	; 0x30
   1e0d2:	e764      	b.n	1df9e <cbvprintf+0x10e>
	switch (*sp) {
   1e0d4:	2a74      	cmp	r2, #116	; 0x74
   1e0d6:	d026      	beq.n	1e126 <cbvprintf+0x296>
   1e0d8:	2a7a      	cmp	r2, #122	; 0x7a
   1e0da:	d1db      	bne.n	1e094 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
   1e0dc:	2206      	movs	r2, #6
   1e0de:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1e0e2:	e00d      	b.n	1e100 <cbvprintf+0x270>
		if (*++sp == 'h') {
   1e0e4:	785a      	ldrb	r2, [r3, #1]
   1e0e6:	2a68      	cmp	r2, #104	; 0x68
   1e0e8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1e0ec:	d106      	bne.n	1e0fc <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
   1e0ee:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   1e0f0:	f361 02c6 	bfi	r2, r1, #3, #4
   1e0f4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
   1e0f8:	1c9f      	adds	r7, r3, #2
   1e0fa:	e7cc      	b.n	1e096 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
   1e0fc:	4613      	mov	r3, r2
   1e0fe:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
   1e100:	f362 03c6 	bfi	r3, r2, #3, #4
   1e104:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
   1e108:	e7c5      	b.n	1e096 <cbvprintf+0x206>
		if (*++sp == 'l') {
   1e10a:	785a      	ldrb	r2, [r3, #1]
   1e10c:	2a6c      	cmp	r2, #108	; 0x6c
   1e10e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1e112:	d101      	bne.n	1e118 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
   1e114:	2104      	movs	r1, #4
   1e116:	e7eb      	b.n	1e0f0 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
   1e118:	4613      	mov	r3, r2
   1e11a:	2203      	movs	r2, #3
   1e11c:	e7f0      	b.n	1e100 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
   1e11e:	2205      	movs	r2, #5
   1e120:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1e124:	e7ec      	b.n	1e100 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
   1e126:	2207      	movs	r2, #7
   1e128:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1e12c:	e7e8      	b.n	1e100 <cbvprintf+0x270>
		conv->unsupported = true;
   1e12e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   1e132:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   1e136:	f023 0302 	bic.w	r3, r3, #2
   1e13a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1e13e:	f043 0302 	orr.w	r3, r3, #2
   1e142:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
   1e146:	e7a6      	b.n	1e096 <cbvprintf+0x206>
   1e148:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   1e14c:	2920      	cmp	r1, #32
   1e14e:	f200 8084 	bhi.w	1e25a <cbvprintf+0x3ca>
   1e152:	a001      	add	r0, pc, #4	; (adr r0, 1e158 <cbvprintf+0x2c8>)
   1e154:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   1e158:	0001e21d 	.word	0x0001e21d
   1e15c:	0001e25b 	.word	0x0001e25b
   1e160:	0001e25b 	.word	0x0001e25b
   1e164:	0001e25b 	.word	0x0001e25b
   1e168:	0001e25b 	.word	0x0001e25b
   1e16c:	0001e25b 	.word	0x0001e25b
   1e170:	0001e25b 	.word	0x0001e25b
   1e174:	0001e25b 	.word	0x0001e25b
   1e178:	0001e25b 	.word	0x0001e25b
   1e17c:	0001e0b9 	.word	0x0001e0b9
   1e180:	0001e25b 	.word	0x0001e25b
   1e184:	0001e21d 	.word	0x0001e21d
   1e188:	0001e1dd 	.word	0x0001e1dd
   1e18c:	0001e0b9 	.word	0x0001e0b9
   1e190:	0001e0b9 	.word	0x0001e0b9
   1e194:	0001e0b9 	.word	0x0001e0b9
   1e198:	0001e25b 	.word	0x0001e25b
   1e19c:	0001e1dd 	.word	0x0001e1dd
   1e1a0:	0001e25b 	.word	0x0001e25b
   1e1a4:	0001e25b 	.word	0x0001e25b
   1e1a8:	0001e25b 	.word	0x0001e25b
   1e1ac:	0001e25b 	.word	0x0001e25b
   1e1b0:	0001e225 	.word	0x0001e225
   1e1b4:	0001e21d 	.word	0x0001e21d
   1e1b8:	0001e241 	.word	0x0001e241
   1e1bc:	0001e25b 	.word	0x0001e25b
   1e1c0:	0001e25b 	.word	0x0001e25b
   1e1c4:	0001e241 	.word	0x0001e241
   1e1c8:	0001e25b 	.word	0x0001e25b
   1e1cc:	0001e21d 	.word	0x0001e21d
   1e1d0:	0001e25b 	.word	0x0001e25b
   1e1d4:	0001e25b 	.word	0x0001e25b
   1e1d8:	0001e21d 	.word	0x0001e21d
		conv->specifier_cat = SPECIFIER_SINT;
   1e1dc:	2001      	movs	r0, #1
   1e1de:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   1e1e2:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   1e1e6:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1e1ea:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   1e1ec:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
   1e1f0:	bf02      	ittt	eq
   1e1f2:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
   1e1f6:	f041 0101 	orreq.w	r1, r1, #1
   1e1fa:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
   1e1fe:	2a63      	cmp	r2, #99	; 0x63
   1e200:	d131      	bne.n	1e266 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1e202:	3b00      	subs	r3, #0
   1e204:	bf18      	it	ne
   1e206:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   1e208:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   1e20c:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1e210:	430b      	orrs	r3, r1
   1e212:	f363 0241 	bfi	r2, r3, #1, #1
   1e216:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   1e21a:	e6d8      	b.n	1dfce <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
   1e21c:	2002      	movs	r0, #2
   1e21e:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   1e222:	e7de      	b.n	1e1e2 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
   1e224:	2103      	movs	r1, #3
   1e226:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   1e22a:	f003 0378 	and.w	r3, r3, #120	; 0x78
   1e22e:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   1e232:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1e236:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   1e238:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   1e23c:	4143      	adcs	r3, r0
   1e23e:	e7e3      	b.n	1e208 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
   1e240:	2103      	movs	r1, #3
   1e242:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   1e246:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   1e24a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   1e24e:	bf14      	ite	ne
   1e250:	2301      	movne	r3, #1
   1e252:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
   1e254:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   1e258:	e7d6      	b.n	1e208 <cbvprintf+0x378>
		conv->invalid = true;
   1e25a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   1e25e:	f043 0301 	orr.w	r3, r3, #1
   1e262:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
   1e266:	2300      	movs	r3, #0
   1e268:	e7ce      	b.n	1e208 <cbvprintf+0x378>
		} else if (conv->width_present) {
   1e26a:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
   1e26e:	2a00      	cmp	r2, #0
		int width = -1;
   1e270:	bfac      	ite	ge
   1e272:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
   1e276:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
   1e27a:	e6ba      	b.n	1dff2 <cbvprintf+0x162>
		} else if (conv->prec_present) {
   1e27c:	079b      	lsls	r3, r3, #30
   1e27e:	f57f aec7 	bpl.w	1e010 <cbvprintf+0x180>
			precision = conv->prec_value;
   1e282:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
   1e286:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   1e288:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
   1e28c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
   1e290:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
   1e294:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   1e298:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   1e29a:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   1e29e:	d136      	bne.n	1e30e <cbvprintf+0x47e>
			switch (length_mod) {
   1e2a0:	1ed3      	subs	r3, r2, #3
   1e2a2:	2b04      	cmp	r3, #4
   1e2a4:	d820      	bhi.n	1e2e8 <cbvprintf+0x458>
   1e2a6:	e8df f003 	tbb	[pc, r3]
   1e2aa:	0703      	.short	0x0703
   1e2ac:	1f07      	.short	0x1f07
   1e2ae:	1f          	.byte	0x1f
   1e2af:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   1e2b0:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
   1e2b4:	17c1      	asrs	r1, r0, #31
   1e2b6:	e004      	b.n	1e2c2 <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
   1e2b8:	3407      	adds	r4, #7
   1e2ba:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   1e2be:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
   1e2c2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
   1e2c6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   1e2ca:	f013 0603 	ands.w	r6, r3, #3
   1e2ce:	d054      	beq.n	1e37a <cbvprintf+0x4ea>
			OUTS(sp, fp);
   1e2d0:	463b      	mov	r3, r7
   1e2d2:	4652      	mov	r2, sl
   1e2d4:	4659      	mov	r1, fp
   1e2d6:	9802      	ldr	r0, [sp, #8]
   1e2d8:	f007 fa80 	bl	257dc <outs>
   1e2dc:	2800      	cmp	r0, #0
   1e2de:	f2c0 8143 	blt.w	1e568 <cbvprintf+0x6d8>
   1e2e2:	4405      	add	r5, r0
			continue;
   1e2e4:	46ba      	mov	sl, r7
   1e2e6:	e5db      	b.n	1dea0 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1e2e8:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
   1e2ec:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1e2ee:	ea4f 71e0 	mov.w	r1, r0, asr #31
   1e2f2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   1e2f6:	d105      	bne.n	1e304 <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
   1e2f8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
   1e2fc:	930a      	str	r3, [sp, #40]	; 0x28
   1e2fe:	2300      	movs	r3, #0
   1e300:	930b      	str	r3, [sp, #44]	; 0x2c
   1e302:	e7e0      	b.n	1e2c6 <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
   1e304:	2a02      	cmp	r2, #2
   1e306:	d1de      	bne.n	1e2c6 <cbvprintf+0x436>
				value->sint = (short)value->sint;
   1e308:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
   1e30c:	e7d2      	b.n	1e2b4 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
   1e30e:	2b02      	cmp	r3, #2
   1e310:	d123      	bne.n	1e35a <cbvprintf+0x4ca>
			switch (length_mod) {
   1e312:	1ed3      	subs	r3, r2, #3
   1e314:	2b04      	cmp	r3, #4
   1e316:	d813      	bhi.n	1e340 <cbvprintf+0x4b0>
   1e318:	e8df f003 	tbb	[pc, r3]
   1e31c:	120a0a03 	.word	0x120a0a03
   1e320:	12          	.byte	0x12
   1e321:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
   1e322:	2100      	movs	r1, #0
					value->uint = (wchar_t)va_arg(ap,
   1e324:	6820      	ldr	r0, [r4, #0]
   1e326:	1d23      	adds	r3, r4, #4
   1e328:	900a      	str	r0, [sp, #40]	; 0x28
   1e32a:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
   1e32c:	461c      	mov	r4, r3
   1e32e:	e7ca      	b.n	1e2c6 <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
   1e330:	3407      	adds	r4, #7
   1e332:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
   1e336:	e8f3 0102 	ldrd	r0, r1, [r3], #8
   1e33a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
   1e33e:	e7f5      	b.n	1e32c <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
   1e340:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   1e344:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
   1e346:	930a      	str	r3, [sp, #40]	; 0x28
   1e348:	f04f 0300 	mov.w	r3, #0
   1e34c:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
   1e34e:	d0d3      	beq.n	1e2f8 <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
   1e350:	2a02      	cmp	r2, #2
   1e352:	d1b8      	bne.n	1e2c6 <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
   1e354:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1e358:	e7d0      	b.n	1e2fc <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
   1e35a:	2b04      	cmp	r3, #4
   1e35c:	d107      	bne.n	1e36e <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
   1e35e:	3407      	adds	r4, #7
   1e360:	f024 0407 	bic.w	r4, r4, #7
   1e364:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
   1e368:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   1e36c:	e7ab      	b.n	1e2c6 <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
   1e36e:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   1e370:	bf04      	itt	eq
   1e372:	f854 3b04 	ldreq.w	r3, [r4], #4
   1e376:	930a      	streq	r3, [sp, #40]	; 0x28
   1e378:	e7a5      	b.n	1e2c6 <cbvprintf+0x436>
		switch (conv->specifier) {
   1e37a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   1e37e:	2878      	cmp	r0, #120	; 0x78
   1e380:	d8b0      	bhi.n	1e2e4 <cbvprintf+0x454>
   1e382:	2862      	cmp	r0, #98	; 0x62
   1e384:	d822      	bhi.n	1e3cc <cbvprintf+0x53c>
   1e386:	2825      	cmp	r0, #37	; 0x25
   1e388:	f43f ad93 	beq.w	1deb2 <cbvprintf+0x22>
   1e38c:	2858      	cmp	r0, #88	; 0x58
   1e38e:	d1a9      	bne.n	1e2e4 <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
   1e390:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1e394:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   1e398:	9300      	str	r3, [sp, #0]
   1e39a:	aa0c      	add	r2, sp, #48	; 0x30
   1e39c:	ab04      	add	r3, sp, #16
   1e39e:	f007 f9d2 	bl	25746 <encode_uint>
   1e3a2:	4682      	mov	sl, r0
			if (precision >= 0) {
   1e3a4:	f1b8 0f00 	cmp.w	r8, #0
   1e3a8:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   1e3ac:	db0c      	blt.n	1e3c8 <cbvprintf+0x538>
				conv->flag_zero = false;
   1e3ae:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
   1e3b2:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
   1e3b6:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   1e3ba:	4598      	cmp	r8, r3
				conv->flag_zero = false;
   1e3bc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
   1e3c0:	d902      	bls.n	1e3c8 <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
   1e3c2:	eba8 0303 	sub.w	r3, r8, r3
   1e3c6:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
   1e3c8:	4680      	mov	r8, r0
   1e3ca:	e03d      	b.n	1e448 <cbvprintf+0x5b8>
   1e3cc:	3863      	subs	r0, #99	; 0x63
   1e3ce:	2815      	cmp	r0, #21
   1e3d0:	d888      	bhi.n	1e2e4 <cbvprintf+0x454>
   1e3d2:	a101      	add	r1, pc, #4	; (adr r1, 1e3d8 <cbvprintf+0x548>)
   1e3d4:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
   1e3d8:	0001e459 	.word	0x0001e459
   1e3dc:	0001e4bd 	.word	0x0001e4bd
   1e3e0:	0001e2e5 	.word	0x0001e2e5
   1e3e4:	0001e2e5 	.word	0x0001e2e5
   1e3e8:	0001e2e5 	.word	0x0001e2e5
   1e3ec:	0001e2e5 	.word	0x0001e2e5
   1e3f0:	0001e4bd 	.word	0x0001e4bd
   1e3f4:	0001e2e5 	.word	0x0001e2e5
   1e3f8:	0001e2e5 	.word	0x0001e2e5
   1e3fc:	0001e2e5 	.word	0x0001e2e5
   1e400:	0001e2e5 	.word	0x0001e2e5
   1e404:	0001e51b 	.word	0x0001e51b
   1e408:	0001e4e9 	.word	0x0001e4e9
   1e40c:	0001e4ed 	.word	0x0001e4ed
   1e410:	0001e2e5 	.word	0x0001e2e5
   1e414:	0001e2e5 	.word	0x0001e2e5
   1e418:	0001e431 	.word	0x0001e431
   1e41c:	0001e2e5 	.word	0x0001e2e5
   1e420:	0001e4e9 	.word	0x0001e4e9
   1e424:	0001e2e5 	.word	0x0001e2e5
   1e428:	0001e2e5 	.word	0x0001e2e5
   1e42c:	0001e4e9 	.word	0x0001e4e9
			if (precision >= 0) {
   1e430:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
   1e434:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
   1e438:	db0a      	blt.n	1e450 <cbvprintf+0x5c0>
				len = strnlen(bps, precision);
   1e43a:	4641      	mov	r1, r8
   1e43c:	4650      	mov	r0, sl
   1e43e:	f009 f8fa 	bl	27636 <strnlen>
		char sign = 0;
   1e442:	2600      	movs	r6, #0
			bpe = bps + len;
   1e444:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
   1e448:	f1ba 0f00 	cmp.w	sl, #0
   1e44c:	d10c      	bne.n	1e468 <cbvprintf+0x5d8>
   1e44e:	e749      	b.n	1e2e4 <cbvprintf+0x454>
				len = strlen(bps);
   1e450:	4650      	mov	r0, sl
   1e452:	f009 f8e9 	bl	27628 <strlen>
   1e456:	e7f4      	b.n	1e442 <cbvprintf+0x5b2>
			break;
   1e458:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1e45a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bpe = buf + 1;
   1e45c:	f10d 0811 	add.w	r8, sp, #17
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1e460:	f88d 3010 	strb.w	r3, [sp, #16]
			bps = buf;
   1e464:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
   1e468:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
   1e46c:	b106      	cbz	r6, 1e470 <cbvprintf+0x5e0>
			nj_len += 1U;
   1e46e:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   1e470:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   1e474:	06d0      	lsls	r0, r2, #27
   1e476:	d56b      	bpl.n	1e550 <cbvprintf+0x6c0>
			nj_len += 2U;
   1e478:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   1e47a:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   1e47c:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
   1e47e:	bf48      	it	mi
   1e480:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
   1e482:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   1e484:	bf48      	it	mi
   1e486:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   1e488:	f1b9 0f00 	cmp.w	r9, #0
   1e48c:	dd79      	ble.n	1e582 <cbvprintf+0x6f2>
			if (!conv->flag_dash) {
   1e48e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
   1e492:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
   1e496:	f3c2 0380 	ubfx	r3, r2, #2, #1
   1e49a:	9303      	str	r3, [sp, #12]
   1e49c:	0753      	lsls	r3, r2, #29
   1e49e:	d470      	bmi.n	1e582 <cbvprintf+0x6f2>
				if (conv->flag_zero) {
   1e4a0:	0650      	lsls	r0, r2, #25
   1e4a2:	d564      	bpl.n	1e56e <cbvprintf+0x6de>
					if (sign != 0) {
   1e4a4:	b146      	cbz	r6, 1e4b8 <cbvprintf+0x628>
						OUTC(sign);
   1e4a6:	4659      	mov	r1, fp
   1e4a8:	4630      	mov	r0, r6
   1e4aa:	9b02      	ldr	r3, [sp, #8]
   1e4ac:	4798      	blx	r3
   1e4ae:	2800      	cmp	r0, #0
   1e4b0:	db5a      	blt.n	1e568 <cbvprintf+0x6d8>
						sign = 0;
   1e4b2:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   1e4b4:	3501      	adds	r5, #1
						sign = 0;
   1e4b6:	461e      	mov	r6, r3
					pad = '0';
   1e4b8:	2330      	movs	r3, #48	; 0x30
   1e4ba:	e059      	b.n	1e570 <cbvprintf+0x6e0>
			if (conv->flag_plus) {
   1e4bc:	071e      	lsls	r6, r3, #28
   1e4be:	d411      	bmi.n	1e4e4 <cbvprintf+0x654>
				sign = ' ';
   1e4c0:	f013 0610 	ands.w	r6, r3, #16
   1e4c4:	bf18      	it	ne
   1e4c6:	2620      	movne	r6, #32
			sint = value->sint;
   1e4c8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
   1e4cc:	2a00      	cmp	r2, #0
   1e4ce:	f173 0100 	sbcs.w	r1, r3, #0
   1e4d2:	f6bf af5d 	bge.w	1e390 <cbvprintf+0x500>
				value->uint = (uint_value_type)-sint;
   1e4d6:	4252      	negs	r2, r2
   1e4d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
   1e4dc:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
   1e4de:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   1e4e2:	e755      	b.n	1e390 <cbvprintf+0x500>
				sign = '+';
   1e4e4:	262b      	movs	r6, #43	; 0x2b
   1e4e6:	e7ef      	b.n	1e4c8 <cbvprintf+0x638>
		switch (conv->specifier) {
   1e4e8:	2600      	movs	r6, #0
   1e4ea:	e751      	b.n	1e390 <cbvprintf+0x500>
			if (value->ptr != NULL) {
   1e4ec:	980a      	ldr	r0, [sp, #40]	; 0x28
   1e4ee:	b348      	cbz	r0, 1e544 <cbvprintf+0x6b4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1e4f0:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   1e4f4:	9300      	str	r3, [sp, #0]
   1e4f6:	2100      	movs	r1, #0
   1e4f8:	ab04      	add	r3, sp, #16
   1e4fa:	aa0c      	add	r2, sp, #48	; 0x30
   1e4fc:	f007 f923 	bl	25746 <encode_uint>
				conv->altform_0c = true;
   1e500:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1e504:	4682      	mov	sl, r0
				conv->altform_0c = true;
   1e506:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   1e50a:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   1e50e:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
   1e512:	2600      	movs	r6, #0
				conv->altform_0c = true;
   1e514:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
   1e518:	e744      	b.n	1e3a4 <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
   1e51a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
   1e51c:	2a07      	cmp	r2, #7
   1e51e:	f63f aee1 	bhi.w	1e2e4 <cbvprintf+0x454>
   1e522:	e8df f002 	tbb	[pc, r2]
   1e526:	040d      	.short	0x040d
   1e528:	08080d06 	.word	0x08080d06
   1e52c:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   1e52e:	701d      	strb	r5, [r3, #0]
		break;
   1e530:	e6d8      	b.n	1e2e4 <cbvprintf+0x454>
		*(short *)dp = (short)count;
   1e532:	801d      	strh	r5, [r3, #0]
		break;
   1e534:	e6d6      	b.n	1e2e4 <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
   1e536:	4628      	mov	r0, r5
   1e538:	17e9      	asrs	r1, r5, #31
   1e53a:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   1e53e:	e6d1      	b.n	1e2e4 <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   1e540:	601d      	str	r5, [r3, #0]
		break;
   1e542:	e6cf      	b.n	1e2e4 <cbvprintf+0x454>
			bpe = bps + 5;
   1e544:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 1e60c <cbvprintf+0x77c>
   1e548:	4606      	mov	r6, r0
			bps = "(nil)";
   1e54a:	f1a8 0a05 	sub.w	sl, r8, #5
   1e54e:	e78b      	b.n	1e468 <cbvprintf+0x5d8>
		} else if (conv->altform_0) {
   1e550:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   1e552:	bf48      	it	mi
   1e554:	3301      	addmi	r3, #1
   1e556:	e790      	b.n	1e47a <cbvprintf+0x5ea>
					OUTC(pad);
   1e558:	4618      	mov	r0, r3
   1e55a:	9303      	str	r3, [sp, #12]
   1e55c:	4659      	mov	r1, fp
   1e55e:	9b02      	ldr	r3, [sp, #8]
   1e560:	4798      	blx	r3
   1e562:	2800      	cmp	r0, #0
   1e564:	9b03      	ldr	r3, [sp, #12]
   1e566:	da04      	bge.n	1e572 <cbvprintf+0x6e2>
#undef OUTS
#undef OUTC
}
   1e568:	b011      	add	sp, #68	; 0x44
   1e56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   1e56e:	2320      	movs	r3, #32
   1e570:	444d      	add	r5, r9
   1e572:	464a      	mov	r2, r9
				while (width-- > 0) {
   1e574:	2a00      	cmp	r2, #0
   1e576:	eba5 0109 	sub.w	r1, r5, r9
   1e57a:	f109 39ff 	add.w	r9, r9, #4294967295
   1e57e:	dceb      	bgt.n	1e558 <cbvprintf+0x6c8>
   1e580:	460d      	mov	r5, r1
		if (sign != 0) {
   1e582:	b136      	cbz	r6, 1e592 <cbvprintf+0x702>
			OUTC(sign);
   1e584:	4659      	mov	r1, fp
   1e586:	4630      	mov	r0, r6
   1e588:	9b02      	ldr	r3, [sp, #8]
   1e58a:	4798      	blx	r3
   1e58c:	2800      	cmp	r0, #0
   1e58e:	dbeb      	blt.n	1e568 <cbvprintf+0x6d8>
   1e590:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   1e592:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   1e596:	06d9      	lsls	r1, r3, #27
   1e598:	d401      	bmi.n	1e59e <cbvprintf+0x70e>
   1e59a:	071a      	lsls	r2, r3, #28
   1e59c:	d506      	bpl.n	1e5ac <cbvprintf+0x71c>
				OUTC('0');
   1e59e:	4659      	mov	r1, fp
   1e5a0:	2030      	movs	r0, #48	; 0x30
   1e5a2:	9b02      	ldr	r3, [sp, #8]
   1e5a4:	4798      	blx	r3
   1e5a6:	2800      	cmp	r0, #0
   1e5a8:	dbde      	blt.n	1e568 <cbvprintf+0x6d8>
   1e5aa:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   1e5ac:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   1e5b0:	06db      	lsls	r3, r3, #27
   1e5b2:	d507      	bpl.n	1e5c4 <cbvprintf+0x734>
				OUTC(conv->specifier);
   1e5b4:	4659      	mov	r1, fp
   1e5b6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   1e5ba:	9b02      	ldr	r3, [sp, #8]
   1e5bc:	4798      	blx	r3
   1e5be:	2800      	cmp	r0, #0
   1e5c0:	dbd2      	blt.n	1e568 <cbvprintf+0x6d8>
   1e5c2:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   1e5c4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1e5c6:	442e      	add	r6, r5
   1e5c8:	1b73      	subs	r3, r6, r5
   1e5ca:	2b00      	cmp	r3, #0
   1e5cc:	dc16      	bgt.n	1e5fc <cbvprintf+0x76c>
			OUTS(bps, bpe);
   1e5ce:	4643      	mov	r3, r8
   1e5d0:	4652      	mov	r2, sl
   1e5d2:	4659      	mov	r1, fp
   1e5d4:	9802      	ldr	r0, [sp, #8]
   1e5d6:	f007 f901 	bl	257dc <outs>
   1e5da:	2800      	cmp	r0, #0
   1e5dc:	dbc4      	blt.n	1e568 <cbvprintf+0x6d8>
   1e5de:	4405      	add	r5, r0
		while (width > 0) {
   1e5e0:	44a9      	add	r9, r5
   1e5e2:	eba9 0305 	sub.w	r3, r9, r5
   1e5e6:	2b00      	cmp	r3, #0
   1e5e8:	f77f ae7c 	ble.w	1e2e4 <cbvprintf+0x454>
			OUTC(' ');
   1e5ec:	4659      	mov	r1, fp
   1e5ee:	2020      	movs	r0, #32
   1e5f0:	9b02      	ldr	r3, [sp, #8]
   1e5f2:	4798      	blx	r3
   1e5f4:	2800      	cmp	r0, #0
   1e5f6:	dbb7      	blt.n	1e568 <cbvprintf+0x6d8>
   1e5f8:	3501      	adds	r5, #1
			--width;
   1e5fa:	e7f2      	b.n	1e5e2 <cbvprintf+0x752>
				OUTC('0');
   1e5fc:	4659      	mov	r1, fp
   1e5fe:	2030      	movs	r0, #48	; 0x30
   1e600:	9b02      	ldr	r3, [sp, #8]
   1e602:	4798      	blx	r3
   1e604:	2800      	cmp	r0, #0
   1e606:	dbaf      	blt.n	1e568 <cbvprintf+0x6d8>
   1e608:	3501      	adds	r5, #1
   1e60a:	e7dd      	b.n	1e5c8 <cbvprintf+0x738>
   1e60c:	0002b5c1 	.word	0x0002b5c1

0001e610 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   1e610:	4604      	mov	r4, r0
   1e612:	b508      	push	{r3, lr}
   1e614:	f04f 0220 	mov.w	r2, #32
   1e618:	f3ef 8311 	mrs	r3, BASEPRI
   1e61c:	f382 8811 	msr	BASEPRI, r2
   1e620:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   1e624:	f008 fefa 	bl	2741c <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   1e628:	4620      	mov	r0, r4
   1e62a:	f003 fec3 	bl	223b4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   1e62e:	4803      	ldr	r0, [pc, #12]	; (1e63c <sys_reboot+0x2c>)
   1e630:	f006 fed0 	bl	253d4 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   1e634:	f003 fb70 	bl	21d18 <arch_cpu_idle>
   1e638:	e7fc      	b.n	1e634 <sys_reboot+0x24>
   1e63a:	bf00      	nop
   1e63c:	0002b5c2 	.word	0x0002b5c2

0001e640 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   1e640:	b148      	cbz	r0, 1e656 <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
   1e642:	4b05      	ldr	r3, [pc, #20]	; (1e658 <arch_busy_wait+0x18>)
   1e644:	681a      	ldr	r2, [r3, #0]
   1e646:	4b05      	ldr	r3, [pc, #20]	; (1e65c <arch_busy_wait+0x1c>)
   1e648:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   1e64c:	4b04      	ldr	r3, [pc, #16]	; (1e660 <arch_busy_wait+0x20>)
    delay_cycles(cycles);
   1e64e:	4350      	muls	r0, r2
   1e650:	f043 0301 	orr.w	r3, r3, #1
   1e654:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   1e656:	4770      	bx	lr
   1e658:	200080b0 	.word	0x200080b0
   1e65c:	000f4240 	.word	0x000f4240
   1e660:	0002a770 	.word	0x0002a770

0001e664 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   1e664:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   1e666:	2200      	movs	r2, #0
{
   1e668:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   1e66a:	490f      	ldr	r1, [pc, #60]	; (1e6a8 <enable_logger+0x44>)
   1e66c:	480f      	ldr	r0, [pc, #60]	; (1e6ac <enable_logger+0x48>)
   1e66e:	f009 fca2 	bl	27fb6 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1e672:	2200      	movs	r2, #0
   1e674:	2300      	movs	r3, #0
   1e676:	2400      	movs	r4, #0
   1e678:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1e67c:	230e      	movs	r3, #14
   1e67e:	4d0c      	ldr	r5, [pc, #48]	; (1e6b0 <enable_logger+0x4c>)
   1e680:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1e684:	f44f 7240 	mov.w	r2, #768	; 0x300
   1e688:	4628      	mov	r0, r5
   1e68a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1e68e:	4b09      	ldr	r3, [pc, #36]	; (1e6b4 <enable_logger+0x50>)
   1e690:	4909      	ldr	r1, [pc, #36]	; (1e6b8 <enable_logger+0x54>)
   1e692:	9400      	str	r4, [sp, #0]
   1e694:	f005 fac0 	bl	23c18 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1e698:	4908      	ldr	r1, [pc, #32]	; (1e6bc <enable_logger+0x58>)
   1e69a:	4628      	mov	r0, r5
   1e69c:	f005 fa12 	bl	23ac4 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   1e6a0:	4620      	mov	r0, r4
   1e6a2:	b009      	add	sp, #36	; 0x24
   1e6a4:	bd30      	pop	{r4, r5, pc}
   1e6a6:	bf00      	nop
   1e6a8:	0001e6c1 	.word	0x0001e6c1
   1e6ac:	20008448 	.word	0x20008448
   1e6b0:	20008480 	.word	0x20008480
   1e6b4:	0001ec51 	.word	0x0001ec51
   1e6b8:	200096e0 	.word	0x200096e0
   1e6bc:	0002b962 	.word	0x0002b962

0001e6c0 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1e6c0:	4801      	ldr	r0, [pc, #4]	; (1e6c8 <log_process_thread_timer_expiry_fn+0x8>)
   1e6c2:	f005 bcc7 	b.w	24054 <z_impl_k_sem_give>
   1e6c6:	bf00      	nop
   1e6c8:	200081f0 	.word	0x200081f0

0001e6cc <log_core_init>:
{
   1e6cc:	b538      	push	{r3, r4, r5, lr}
	panic_mode = false;
   1e6ce:	2400      	movs	r4, #0
   1e6d0:	4b14      	ldr	r3, [pc, #80]	; (1e724 <log_core_init+0x58>)
		timestamp_func = default_get_timestamp;
   1e6d2:	4a15      	ldr	r2, [pc, #84]	; (1e728 <log_core_init+0x5c>)
	panic_mode = false;
   1e6d4:	701c      	strb	r4, [r3, #0]
		timestamp_func = default_get_timestamp;
   1e6d6:	4b15      	ldr	r3, [pc, #84]	; (1e72c <log_core_init+0x60>)
	log_output_timestamp_freq_set(freq);
   1e6d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = default_get_timestamp;
   1e6dc:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   1e6de:	f000 fd5f 	bl	1f1a0 <log_output_timestamp_freq_set>
		log_msg_pool_init();
   1e6e2:	f000 fb13 	bl	1ed0c <log_msg_pool_init>
		log_list_init(&list);
   1e6e6:	4812      	ldr	r0, [pc, #72]	; (1e730 <log_core_init+0x64>)
   1e6e8:	f007 fab7 	bl	25c5a <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   1e6ec:	2304      	movs	r3, #4
   1e6ee:	2228      	movs	r2, #40	; 0x28
   1e6f0:	4910      	ldr	r1, [pc, #64]	; (1e734 <log_core_init+0x68>)
   1e6f2:	4811      	ldr	r0, [pc, #68]	; (1e738 <log_core_init+0x6c>)
   1e6f4:	f009 fa77 	bl	27be6 <k_mem_slab_init>
		for (int i = 0; i < log_sources_count(); i++) {
   1e6f8:	4623      	mov	r3, r4
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   1e6fa:	4810      	ldr	r0, [pc, #64]	; (1e73c <log_core_init+0x70>)
   1e6fc:	4a10      	ldr	r2, [pc, #64]	; (1e740 <log_core_init+0x74>)
   1e6fe:	4d11      	ldr	r5, [pc, #68]	; (1e744 <log_core_init+0x78>)
   1e700:	1a12      	subs	r2, r2, r0
   1e702:	08d2      	lsrs	r2, r2, #3
	return __log_const_start[source_id].level;
   1e704:	3004      	adds	r0, #4
   1e706:	4293      	cmp	r3, r2
   1e708:	d100      	bne.n	1e70c <log_core_init+0x40>
}
   1e70a:	bd38      	pop	{r3, r4, r5, pc}
			LOG_FILTER_SLOT_SET(filters,
   1e70c:	f810 1033 	ldrb.w	r1, [r0, r3, lsl #3]
   1e710:	682c      	ldr	r4, [r5, #0]
   1e712:	f001 0107 	and.w	r1, r1, #7
   1e716:	f024 0407 	bic.w	r4, r4, #7
   1e71a:	4321      	orrs	r1, r4
   1e71c:	f845 1b04 	str.w	r1, [r5], #4
		for (int i = 0; i < log_sources_count(); i++) {
   1e720:	3301      	adds	r3, #1
   1e722:	e7f0      	b.n	1e706 <log_core_init+0x3a>
   1e724:	20009652 	.word	0x20009652
   1e728:	00025c99 	.word	0x00025c99
   1e72c:	20008004 	.word	0x20008004
   1e730:	20008870 	.word	0x20008870
   1e734:	20016b20 	.word	0x20016b20
   1e738:	20008878 	.word	0x20008878
   1e73c:	000285c4 	.word	0x000285c4
   1e740:	00028624 	.word	0x00028624
   1e744:	20008154 	.word	0x20008154

0001e748 <get_msg>:
{
   1e748:	b510      	push	{r4, lr}
   1e74a:	f04f 0320 	mov.w	r3, #32
   1e74e:	f3ef 8411 	mrs	r4, BASEPRI
   1e752:	f383 8811 	msr	BASEPRI, r3
   1e756:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
   1e75a:	4804      	ldr	r0, [pc, #16]	; (1e76c <get_msg+0x24>)
   1e75c:	f007 fa8d 	bl	25c7a <log_list_head_get>
	__asm__ volatile(
   1e760:	f384 8811 	msr	BASEPRI, r4
   1e764:	f3bf 8f6f 	isb	sy
}
   1e768:	bd10      	pop	{r4, pc}
   1e76a:	bf00      	nop
   1e76c:	20008870 	.word	0x20008870

0001e770 <z_log_dropped>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1e770:	4b04      	ldr	r3, [pc, #16]	; (1e784 <z_log_dropped+0x14>)
   1e772:	e8d3 2fef 	ldaex	r2, [r3]
   1e776:	3201      	adds	r2, #1
   1e778:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1e77c:	2900      	cmp	r1, #0
   1e77e:	d1f8      	bne.n	1e772 <z_log_dropped+0x2>
}
   1e780:	4770      	bx	lr
   1e782:	bf00      	nop
   1e784:	20008868 	.word	0x20008868

0001e788 <z_log_dropped_read_and_clear>:
}
   1e788:	2000      	movs	r0, #0
   1e78a:	4602      	mov	r2, r0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1e78c:	4b03      	ldr	r3, [pc, #12]	; (1e79c <z_log_dropped_read_and_clear+0x14>)
   1e78e:	e8d3 0fef 	ldaex	r0, [r3]
   1e792:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1e796:	2900      	cmp	r1, #0
   1e798:	d1f9      	bne.n	1e78e <z_log_dropped_read_and_clear+0x6>
   1e79a:	4770      	bx	lr
   1e79c:	20008868 	.word	0x20008868

0001e7a0 <dropped_notify>:
{
   1e7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   1e7a2:	f7ff fff1 	bl	1e788 <z_log_dropped_read_and_clear>
	for (int i = 0; i < log_backend_count_get(); i++) {
   1e7a6:	2600      	movs	r6, #0
	uint32_t dropped = z_log_dropped_read_and_clear();
   1e7a8:	4607      	mov	r7, r0
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   1e7aa:	4c09      	ldr	r4, [pc, #36]	; (1e7d0 <dropped_notify+0x30>)
   1e7ac:	4d09      	ldr	r5, [pc, #36]	; (1e7d4 <dropped_notify+0x34>)
   1e7ae:	1b2d      	subs	r5, r5, r4
   1e7b0:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   1e7b2:	42ae      	cmp	r6, r5
   1e7b4:	db00      	blt.n	1e7b8 <dropped_notify+0x18>
}
   1e7b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   1e7b8:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   1e7ba:	795b      	ldrb	r3, [r3, #5]
   1e7bc:	b12b      	cbz	r3, 1e7ca <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
   1e7be:	6823      	ldr	r3, [r4, #0]
   1e7c0:	691b      	ldr	r3, [r3, #16]
   1e7c2:	b113      	cbz	r3, 1e7ca <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
   1e7c4:	4639      	mov	r1, r7
   1e7c6:	4620      	mov	r0, r4
   1e7c8:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   1e7ca:	3601      	adds	r6, #1
   1e7cc:	3410      	adds	r4, #16
   1e7ce:	e7f0      	b.n	1e7b2 <dropped_notify+0x12>
   1e7d0:	00028624 	.word	0x00028624
   1e7d4:	00028634 	.word	0x00028634

0001e7d8 <log_source_name_get>:
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   1e7d8:	4a04      	ldr	r2, [pc, #16]	; (1e7ec <log_source_name_get+0x14>)
   1e7da:	4b05      	ldr	r3, [pc, #20]	; (1e7f0 <log_source_name_get+0x18>)
   1e7dc:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   1e7de:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   1e7e2:	bf34      	ite	cc
   1e7e4:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   1e7e8:	2000      	movcs	r0, #0
}
   1e7ea:	4770      	bx	lr
   1e7ec:	000285c4 	.word	0x000285c4
   1e7f0:	00028624 	.word	0x00028624

0001e7f4 <z_impl_log_filter_set>:
{
   1e7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e7f8:	4689      	mov	r9, r1
   1e7fa:	4616      	mov	r6, r2
   1e7fc:	4698      	mov	r8, r3
		if (backend == NULL) {
   1e7fe:	4604      	mov	r4, r0
   1e800:	b9b0      	cbnz	r0, 1e830 <z_impl_log_filter_set+0x3c>
	return __log_backends_end - __log_backends_start;
   1e802:	4b21      	ldr	r3, [pc, #132]	; (1e888 <z_impl_log_filter_set+0x94>)
			uint32_t max = 0U;
   1e804:	4605      	mov	r5, r0
   1e806:	469a      	mov	sl, r3
   1e808:	4f20      	ldr	r7, [pc, #128]	; (1e88c <z_impl_log_filter_set+0x98>)
   1e80a:	1aff      	subs	r7, r7, r3
   1e80c:	113f      	asrs	r7, r7, #4
			for (int i = 0; i < log_backend_count_get(); i++) {
   1e80e:	42bc      	cmp	r4, r7
   1e810:	db02      	blt.n	1e818 <z_impl_log_filter_set+0x24>
}
   1e812:	4628      	mov	r0, r5
   1e814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (z_syscall_trap()) {
		return (uint32_t) arch_syscall_invoke4(*(uintptr_t *)&backend, *(uintptr_t *)&domain_id, *(uintptr_t *)&source_id, *(uintptr_t *)&level, K_SYSCALL_LOG_FILTER_SET);
	}
#endif
	compiler_barrier();
	return z_impl_log_filter_set(backend, domain_id, source_id, level);
   1e818:	eb0a 1004 	add.w	r0, sl, r4, lsl #4
   1e81c:	4643      	mov	r3, r8
   1e81e:	4632      	mov	r2, r6
   1e820:	4649      	mov	r1, r9
   1e822:	f7ff ffe7 	bl	1e7f4 <z_impl_log_filter_set>
				max = MAX(current, max);
   1e826:	4285      	cmp	r5, r0
   1e828:	bf38      	it	cc
   1e82a:	4605      	movcc	r5, r0
			for (int i = 0; i < log_backend_count_get(); i++) {
   1e82c:	3401      	adds	r4, #1
   1e82e:	e7ee      	b.n	1e80e <z_impl_log_filter_set+0x1a>
	return __log_const_start[source_id].level;
   1e830:	4b17      	ldr	r3, [pc, #92]	; (1e890 <z_impl_log_filter_set+0x9c>)
			LOG_FILTER_SLOT_SET(filters,
   1e832:	4918      	ldr	r1, [pc, #96]	; (1e894 <z_impl_log_filter_set+0xa0>)
   1e834:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	return log_compiled_level_get(source_id);
   1e838:	791d      	ldrb	r5, [r3, #4]
	return backend->cb->id;
   1e83a:	6843      	ldr	r3, [r0, #4]
			level = MIN(level, max);
   1e83c:	4545      	cmp	r5, r8
			LOG_FILTER_SLOT_SET(filters,
   1e83e:	791a      	ldrb	r2, [r3, #4]
   1e840:	f04f 0307 	mov.w	r3, #7
			level = MIN(level, max);
   1e844:	bf28      	it	cs
   1e846:	4645      	movcs	r5, r8
			LOG_FILTER_SLOT_SET(filters,
   1e848:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1e84c:	fa03 f002 	lsl.w	r0, r3, r2
   1e850:	f851 3026 	ldr.w	r3, [r1, r6, lsl #2]
   1e854:	ea23 0300 	bic.w	r3, r3, r0
   1e858:	f005 0007 	and.w	r0, r5, #7
   1e85c:	fa00 f202 	lsl.w	r2, r0, r2
   1e860:	4313      	orrs	r3, r2
	uint32_t max_filter = LOG_LEVEL_NONE;
   1e862:	2000      	movs	r0, #0
			LOG_FILTER_SLOT_SET(filters,
   1e864:	2203      	movs	r2, #3
		uint32_t tmp_filter = LOG_FILTER_SLOT_GET(&filters, i);
   1e866:	fa23 f402 	lsr.w	r4, r3, r2
   1e86a:	f004 0407 	and.w	r4, r4, #7
   1e86e:	42a0      	cmp	r0, r4
   1e870:	f102 0203 	add.w	r2, r2, #3
   1e874:	bf38      	it	cc
   1e876:	4620      	movcc	r0, r4
	for (i = first_slot; i < LOG_FILTERS_NUM_OF_SLOTS; i++) {
   1e878:	2a1e      	cmp	r2, #30
   1e87a:	d1f4      	bne.n	1e866 <z_impl_log_filter_set+0x72>
			LOG_FILTER_SLOT_SET(filters,
   1e87c:	f023 0307 	bic.w	r3, r3, #7
   1e880:	4303      	orrs	r3, r0
   1e882:	f841 3026 	str.w	r3, [r1, r6, lsl #2]
	return level;
   1e886:	e7c4      	b.n	1e812 <z_impl_log_filter_set+0x1e>
   1e888:	00028624 	.word	0x00028624
   1e88c:	00028634 	.word	0x00028634
   1e890:	000285c4 	.word	0x000285c4
   1e894:	20008154 	.word	0x20008154

0001e898 <backend_filter_set>:
{
   1e898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e89a:	4606      	mov	r6, r0
   1e89c:	460f      	mov	r7, r1
		for (int i = 0; i < log_sources_count(); i++) {
   1e89e:	2500      	movs	r5, #0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   1e8a0:	4c07      	ldr	r4, [pc, #28]	; (1e8c0 <backend_filter_set+0x28>)
   1e8a2:	4b08      	ldr	r3, [pc, #32]	; (1e8c4 <backend_filter_set+0x2c>)
   1e8a4:	1ae4      	subs	r4, r4, r3
   1e8a6:	08e4      	lsrs	r4, r4, #3
   1e8a8:	42a5      	cmp	r5, r4
   1e8aa:	d100      	bne.n	1e8ae <backend_filter_set+0x16>
}
   1e8ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e8ae:	2100      	movs	r1, #0
   1e8b0:	b22a      	sxth	r2, r5
   1e8b2:	463b      	mov	r3, r7
   1e8b4:	4630      	mov	r0, r6
   1e8b6:	f7ff ff9d 	bl	1e7f4 <z_impl_log_filter_set>
		for (int i = 0; i < log_sources_count(); i++) {
   1e8ba:	3501      	adds	r5, #1
   1e8bc:	e7f4      	b.n	1e8a8 <backend_filter_set+0x10>
   1e8be:	bf00      	nop
   1e8c0:	00028624 	.word	0x00028624
   1e8c4:	000285c4 	.word	0x000285c4

0001e8c8 <log_backend_enable>:
	id += backend - log_backend_get(0);
   1e8c8:	4b0c      	ldr	r3, [pc, #48]	; (1e8fc <log_backend_enable+0x34>)
{
   1e8ca:	b570      	push	{r4, r5, r6, lr}
	id += backend - log_backend_get(0);
   1e8cc:	1ac3      	subs	r3, r0, r3
	log_backend_id_set(backend, id);
   1e8ce:	6846      	ldr	r6, [r0, #4]
	id += backend - log_backend_get(0);
   1e8d0:	111b      	asrs	r3, r3, #4
{
   1e8d2:	4604      	mov	r4, r0
	id += backend - log_backend_get(0);
   1e8d4:	3301      	adds	r3, #1
{
   1e8d6:	460d      	mov	r5, r1
	log_backend_id_set(backend, id);
   1e8d8:	7133      	strb	r3, [r6, #4]
	backend_filter_set(backend, level);
   1e8da:	4611      	mov	r1, r2
   1e8dc:	f7ff ffdc 	bl	1e898 <backend_filter_set>
	backend->cb->active = true;
   1e8e0:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
   1e8e2:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   1e8e4:	4c06      	ldr	r4, [pc, #24]	; (1e900 <log_backend_enable+0x38>)
   1e8e6:	715a      	strb	r2, [r3, #5]
   1e8e8:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
   1e8ea:	601d      	str	r5, [r3, #0]
   1e8ec:	b912      	cbnz	r2, 1e8f4 <log_backend_enable+0x2c>
   1e8ee:	4805      	ldr	r0, [pc, #20]	; (1e904 <log_backend_enable+0x3c>)
   1e8f0:	f005 fbb0 	bl	24054 <z_impl_k_sem_give>
	backend_attached = true;
   1e8f4:	2301      	movs	r3, #1
   1e8f6:	7023      	strb	r3, [r4, #0]
}
   1e8f8:	bd70      	pop	{r4, r5, r6, pc}
   1e8fa:	bf00      	nop
   1e8fc:	00028624 	.word	0x00028624
   1e900:	20009651 	.word	0x20009651
   1e904:	200081f0 	.word	0x200081f0

0001e908 <log_init>:
{
   1e908:	b570      	push	{r4, r5, r6, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1e90a:	4b10      	ldr	r3, [pc, #64]	; (1e94c <log_init+0x44>)
   1e90c:	e8d3 5fef 	ldaex	r5, [r3]
   1e910:	1c6a      	adds	r2, r5, #1
   1e912:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1e916:	2900      	cmp	r1, #0
   1e918:	d1f8      	bne.n	1e90c <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
   1e91a:	b92d      	cbnz	r5, 1e928 <log_init+0x20>
	return __log_backends_end - __log_backends_start;
   1e91c:	4c0c      	ldr	r4, [pc, #48]	; (1e950 <log_init+0x48>)
   1e91e:	4e0d      	ldr	r6, [pc, #52]	; (1e954 <log_init+0x4c>)
   1e920:	1b36      	subs	r6, r6, r4
   1e922:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
   1e924:	42b5      	cmp	r5, r6
   1e926:	db00      	blt.n	1e92a <log_init+0x22>
}
   1e928:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   1e92a:	7b23      	ldrb	r3, [r4, #12]
   1e92c:	b153      	cbz	r3, 1e944 <log_init+0x3c>
			if (backend->api->init != NULL) {
   1e92e:	6823      	ldr	r3, [r4, #0]
   1e930:	699b      	ldr	r3, [r3, #24]
   1e932:	b10b      	cbz	r3, 1e938 <log_init+0x30>
				backend->api->init(backend);
   1e934:	4620      	mov	r0, r4
   1e936:	4798      	blx	r3
			log_backend_enable(backend,
   1e938:	6863      	ldr	r3, [r4, #4]
   1e93a:	2204      	movs	r2, #4
   1e93c:	4620      	mov	r0, r4
   1e93e:	6819      	ldr	r1, [r3, #0]
   1e940:	f7ff ffc2 	bl	1e8c8 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   1e944:	3501      	adds	r5, #1
   1e946:	3410      	adds	r4, #16
   1e948:	e7ec      	b.n	1e924 <log_init+0x1c>
   1e94a:	bf00      	nop
   1e94c:	2000886c 	.word	0x2000886c
   1e950:	00028624 	.word	0x00028624
   1e954:	00028634 	.word	0x00028634

0001e958 <log_filter_get>:
	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) && runtime) {
   1e958:	b163      	cbz	r3, 1e974 <log_filter_get+0x1c>
		if (source_id < 0) {
   1e95a:	2a00      	cmp	r2, #0
   1e95c:	db0f      	blt.n	1e97e <log_filter_get+0x26>
	return backend->cb->id;
   1e95e:	6843      	ldr	r3, [r0, #4]
		return LOG_FILTER_SLOT_GET(filters,
   1e960:	4908      	ldr	r1, [pc, #32]	; (1e984 <log_filter_get+0x2c>)
   1e962:	7918      	ldrb	r0, [r3, #4]
   1e964:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1e968:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
   1e96c:	40d8      	lsrs	r0, r3
   1e96e:	f000 0007 	and.w	r0, r0, #7
   1e972:	4770      	bx	lr
	return __log_const_start[source_id].level;
   1e974:	4b04      	ldr	r3, [pc, #16]	; (1e988 <log_filter_get+0x30>)
   1e976:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
	return log_compiled_level_get(source_id);
   1e97a:	7910      	ldrb	r0, [r2, #4]
   1e97c:	4770      	bx	lr
			return LOG_LEVEL_DBG;
   1e97e:	2004      	movs	r0, #4
}
   1e980:	4770      	bx	lr
   1e982:	bf00      	nop
   1e984:	20008154 	.word	0x20008154
   1e988:	000285c4 	.word	0x000285c4

0001e98c <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   1e98c:	4b14      	ldr	r3, [pc, #80]	; (1e9e0 <z_log_strdup+0x54>)
{
   1e98e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
   1e990:	4298      	cmp	r0, r3
{
   1e992:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   1e994:	d302      	bcc.n	1e99c <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   1e996:	4b13      	ldr	r3, [pc, #76]	; (1e9e4 <z_log_strdup+0x58>)
   1e998:	4298      	cmp	r0, r3
   1e99a:	d31c      	bcc.n	1e9d6 <z_log_strdup+0x4a>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   1e99c:	2200      	movs	r2, #0
   1e99e:	2300      	movs	r3, #0
   1e9a0:	4811      	ldr	r0, [pc, #68]	; (1e9e8 <z_log_strdup+0x5c>)
   1e9a2:	a901      	add	r1, sp, #4
   1e9a4:	f005 f826 	bl	239f4 <k_mem_slab_alloc>
	if (err != 0) {
   1e9a8:	4605      	mov	r5, r0
   1e9aa:	b9b8      	cbnz	r0, 1e9dc <z_log_strdup+0x50>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1e9ac:	2201      	movs	r2, #1
   1e9ae:	9b01      	ldr	r3, [sp, #4]
   1e9b0:	e8d3 1fef 	ldaex	r1, [r3]
   1e9b4:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1e9b8:	2800      	cmp	r0, #0
   1e9ba:	d1f9      	bne.n	1e9b0 <z_log_strdup+0x24>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   1e9bc:	9801      	ldr	r0, [sp, #4]
   1e9be:	4621      	mov	r1, r4
   1e9c0:	221f      	movs	r2, #31
   1e9c2:	3004      	adds	r0, #4
   1e9c4:	f008 fe0f 	bl	275e6 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   1e9c8:	237e      	movs	r3, #126	; 0x7e
   1e9ca:	9c01      	ldr	r4, [sp, #4]
   1e9cc:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   1e9d0:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
   1e9d4:	3404      	adds	r4, #4
}
   1e9d6:	4620      	mov	r0, r4
   1e9d8:	b003      	add	sp, #12
   1e9da:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
   1e9dc:	4c03      	ldr	r4, [pc, #12]	; (1e9ec <z_log_strdup+0x60>)
   1e9de:	e7fa      	b.n	1e9d6 <z_log_strdup+0x4a>
   1e9e0:	0002832c 	.word	0x0002832c
   1e9e4:	0002cce0 	.word	0x0002cce0
   1e9e8:	20008878 	.word	0x20008878
   1e9ec:	0002b5ef 	.word	0x0002b5ef

0001e9f0 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   1e9f0:	b148      	cbz	r0, 1ea06 <log_is_strdup+0x16>
   1e9f2:	4b05      	ldr	r3, [pc, #20]	; (1ea08 <log_is_strdup+0x18>)
   1e9f4:	4298      	cmp	r0, r3
   1e9f6:	d305      	bcc.n	1ea04 <log_is_strdup+0x14>
   1e9f8:	33a0      	adds	r3, #160	; 0xa0
   1e9fa:	4298      	cmp	r0, r3
   1e9fc:	bf2c      	ite	cs
   1e9fe:	2000      	movcs	r0, #0
   1ea00:	2001      	movcc	r0, #1
   1ea02:	4770      	bx	lr
   1ea04:	2000      	movs	r0, #0
}
   1ea06:	4770      	bx	lr
   1ea08:	20016b20 	.word	0x20016b20

0001ea0c <z_impl_log_process>:
{
   1ea0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
   1ea10:	4b51      	ldr	r3, [pc, #324]	; (1eb58 <z_impl_log_process+0x14c>)
{
   1ea12:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
   1ea14:	781b      	ldrb	r3, [r3, #0]
{
   1ea16:	b085      	sub	sp, #20
	if (!backend_attached && !bypass) {
   1ea18:	b903      	cbnz	r3, 1ea1c <z_impl_log_process+0x10>
   1ea1a:	b1e0      	cbz	r0, 1ea56 <z_impl_log_process+0x4a>
	msg = get_msg();
   1ea1c:	f7ff fe94 	bl	1e748 <get_msg>
	if (msg.msg) {
   1ea20:	4604      	mov	r4, r0
   1ea22:	b158      	cbz	r0, 1ea3c <z_impl_log_process+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1ea24:	4b4d      	ldr	r3, [pc, #308]	; (1eb5c <z_impl_log_process+0x150>)
   1ea26:	e8d3 2fef 	ldaex	r2, [r3]
   1ea2a:	3a01      	subs	r2, #1
   1ea2c:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1ea30:	2900      	cmp	r1, #0
   1ea32:	d1f8      	bne.n	1ea26 <z_impl_log_process+0x1a>
	if (!bypass) {
   1ea34:	b19d      	cbz	r5, 1ea5e <z_impl_log_process+0x52>
			log_msg_put(msg.msg);
   1ea36:	4620      	mov	r0, r4
   1ea38:	f007 fa2e 	bl	25e98 <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
   1ea3c:	b92d      	cbnz	r5, 1ea4a <z_impl_log_process+0x3e>
	return dropped_cnt > 0;
   1ea3e:	4b48      	ldr	r3, [pc, #288]	; (1eb60 <z_impl_log_process+0x154>)
	if (!bypass && z_log_dropped_pending()) {
   1ea40:	681b      	ldr	r3, [r3, #0]
   1ea42:	2b00      	cmp	r3, #0
   1ea44:	dd01      	ble.n	1ea4a <z_impl_log_process+0x3e>
		dropped_notify();
   1ea46:	f7ff feab 	bl	1e7a0 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
   1ea4a:	4846      	ldr	r0, [pc, #280]	; (1eb64 <z_impl_log_process+0x158>)
   1ea4c:	f007 f913 	bl	25c76 <log_list_head_peek>
   1ea50:	1e05      	subs	r5, r0, #0
   1ea52:	bf18      	it	ne
   1ea54:	2501      	movne	r5, #1
}
   1ea56:	4628      	mov	r0, r5
   1ea58:	b005      	add	sp, #20
   1ea5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
   1ea5e:	4b42      	ldr	r3, [pc, #264]	; (1eb68 <z_impl_log_process+0x15c>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
   1ea60:	781b      	ldrb	r3, [r3, #0]
   1ea62:	b9e3      	cbnz	r3, 1ea9e <z_impl_log_process+0x92>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   1ea64:	7a23      	ldrb	r3, [r4, #8]
	if (!log_msg_is_std(msg)) {
   1ea66:	07da      	lsls	r2, r3, #31
   1ea68:	d419      	bmi.n	1ea9e <z_impl_log_process+0x92>
	msg_str = log_msg_str_get(msg);
   1ea6a:	f007 fa24 	bl	25eb6 <log_msg_str_get>
   1ea6e:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   1ea70:	4620      	mov	r0, r4
   1ea72:	f007 f9ef 	bl	25e54 <log_msg_nargs_get>
   1ea76:	4601      	mov	r1, r0
   1ea78:	4638      	mov	r0, r7
   1ea7a:	f007 f911 	bl	25ca0 <z_log_get_s_mask>
 *
 * @return Source ID.
 */
static inline uint32_t log_dynamic_source_id(struct log_source_dynamic_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
   1ea7e:	4a3b      	ldr	r2, [pc, #236]	; (1eb6c <z_impl_log_process+0x160>)
   1ea80:	4606      	mov	r6, r0
	while (mask) {
   1ea82:	4690      	mov	r8, r2
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   1ea84:	493a      	ldr	r1, [pc, #232]	; (1eb70 <z_impl_log_process+0x164>)
   1ea86:	4b3b      	ldr	r3, [pc, #236]	; (1eb74 <z_impl_log_process+0x168>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   1ea88:	f8df b104 	ldr.w	fp, [pc, #260]	; 1eb90 <z_impl_log_process+0x184>
   1ea8c:	1a5b      	subs	r3, r3, r1
   1ea8e:	08db      	lsrs	r3, r3, #3
   1ea90:	9302      	str	r3, [sp, #8]
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
   1ea92:	4b39      	ldr	r3, [pc, #228]	; (1eb78 <z_impl_log_process+0x16c>)
   1ea94:	9103      	str	r1, [sp, #12]
   1ea96:	1ad3      	subs	r3, r2, r3
   1ea98:	ea4f 0a93 	mov.w	sl, r3, lsr #2
	while (mask) {
   1ea9c:	b946      	cbnz	r6, 1eab0 <z_impl_log_process+0xa4>
	return __log_backends_end - __log_backends_start;
   1ea9e:	4e37      	ldr	r6, [pc, #220]	; (1eb7c <z_impl_log_process+0x170>)
   1eaa0:	4f37      	ldr	r7, [pc, #220]	; (1eb80 <z_impl_log_process+0x174>)
   1eaa2:	f04f 0800 	mov.w	r8, #0
   1eaa6:	1bbf      	subs	r7, r7, r6
		return LOG_FILTER_SLOT_GET(filters,
   1eaa8:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 1eb78 <z_impl_log_process+0x16c>
   1eaac:	113f      	asrs	r7, r7, #4
   1eaae:	e04f      	b.n	1eb50 <z_impl_log_process+0x144>
		idx = 31 - __builtin_clz(mask);
   1eab0:	fab6 f186 	clz	r1, r6
   1eab4:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   1eab8:	4649      	mov	r1, r9
   1eaba:	4620      	mov	r0, r4
   1eabc:	f007 f9cd 	bl	25e5a <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   1eac0:	4b30      	ldr	r3, [pc, #192]	; (1eb84 <z_impl_log_process+0x178>)
		str = (const char *)log_msg_arg_get(msg, idx);
   1eac2:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   1eac4:	4298      	cmp	r0, r3
   1eac6:	d302      	bcc.n	1eace <z_impl_log_process+0xc2>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   1eac8:	4b2f      	ldr	r3, [pc, #188]	; (1eb88 <z_impl_log_process+0x17c>)
   1eaca:	4298      	cmp	r0, r3
   1eacc:	d31f      	bcc.n	1eb0e <z_impl_log_process+0x102>
   1eace:	4608      	mov	r0, r1
   1ead0:	f7ff ff8e 	bl	1e9f0 <log_is_strdup>
   1ead4:	4602      	mov	r2, r0
   1ead6:	b9d0      	cbnz	r0, 1eb0e <z_impl_log_process+0x102>
   1ead8:	4b2c      	ldr	r3, [pc, #176]	; (1eb8c <z_impl_log_process+0x180>)
   1eada:	4299      	cmp	r1, r3
   1eadc:	d017      	beq.n	1eb0e <z_impl_log_process+0x102>
	return msg->hdr.ids.source_id;
   1eade:	8963      	ldrh	r3, [r4, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   1eae0:	9902      	ldr	r1, [sp, #8]
   1eae2:	f3c3 1389 	ubfx	r3, r3, #6, #10
   1eae6:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
   1eae8:	bf3c      	itt	cc
   1eaea:	9a03      	ldrcc	r2, [sp, #12]
   1eaec:	f852 2033 	ldrcc.w	r2, [r2, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   1eaf0:	f8d8 3000 	ldr.w	r3, [r8]
   1eaf4:	075b      	lsls	r3, r3, #29
   1eaf6:	d00a      	beq.n	1eb0e <z_impl_log_process+0x102>
   1eaf8:	ea4f 138a 	mov.w	r3, sl, lsl #6
   1eafc:	f043 0301 	orr.w	r3, r3, #1
   1eb00:	f8ad 3000 	strh.w	r3, [sp]
   1eb04:	4649      	mov	r1, r9
   1eb06:	463b      	mov	r3, r7
   1eb08:	4658      	mov	r0, fp
   1eb0a:	f007 f928 	bl	25d5e <log_3>
		mask &= ~BIT(idx);
   1eb0e:	2101      	movs	r1, #1
   1eb10:	fa01 f109 	lsl.w	r1, r1, r9
   1eb14:	ea26 0601 	bic.w	r6, r6, r1
   1eb18:	e7c0      	b.n	1ea9c <z_impl_log_process+0x90>
			if (log_backend_is_active(backend) &&
   1eb1a:	6873      	ldr	r3, [r6, #4]
   1eb1c:	795a      	ldrb	r2, [r3, #5]
   1eb1e:	b1a2      	cbz	r2, 1eb4a <z_impl_log_process+0x13e>
   1eb20:	8960      	ldrh	r0, [r4, #10]
		return LOG_FILTER_SLOT_GET(filters,
   1eb22:	791b      	ldrb	r3, [r3, #4]
		uint32_t *filters = log_dynamic_filters_get(source_id);
   1eb24:	f3c0 1089 	ubfx	r0, r0, #6, #10
		return LOG_FILTER_SLOT_GET(filters,
   1eb28:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1eb2c:	f859 3020 	ldr.w	r3, [r9, r0, lsl #2]
	return msg->hdr.ids.level;
   1eb30:	7aa1      	ldrb	r1, [r4, #10]
   1eb32:	40d3      	lsrs	r3, r2
   1eb34:	f001 0107 	and.w	r1, r1, #7
   1eb38:	f003 0307 	and.w	r3, r3, #7
			if (log_backend_is_active(backend) &&
   1eb3c:	4299      	cmp	r1, r3
   1eb3e:	d804      	bhi.n	1eb4a <z_impl_log_process+0x13e>
	backend->api->put(backend, msg);
   1eb40:	6833      	ldr	r3, [r6, #0]
   1eb42:	4621      	mov	r1, r4
   1eb44:	4630      	mov	r0, r6
   1eb46:	685b      	ldr	r3, [r3, #4]
   1eb48:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   1eb4a:	f108 0801 	add.w	r8, r8, #1
   1eb4e:	3610      	adds	r6, #16
   1eb50:	45b8      	cmp	r8, r7
   1eb52:	dbe2      	blt.n	1eb1a <z_impl_log_process+0x10e>
   1eb54:	e76f      	b.n	1ea36 <z_impl_log_process+0x2a>
   1eb56:	bf00      	nop
   1eb58:	20009651 	.word	0x20009651
   1eb5c:	20008864 	.word	0x20008864
   1eb60:	20008868 	.word	0x20008868
   1eb64:	20008870 	.word	0x20008870
   1eb68:	20009652 	.word	0x20009652
   1eb6c:	20008164 	.word	0x20008164
   1eb70:	000285c4 	.word	0x000285c4
   1eb74:	00028624 	.word	0x00028624
   1eb78:	20008154 	.word	0x20008154
   1eb7c:	00028624 	.word	0x00028624
   1eb80:	00028634 	.word	0x00028634
   1eb84:	0002832c 	.word	0x0002832c
   1eb88:	0002cce0 	.word	0x0002cce0
   1eb8c:	0002b5ef 	.word	0x0002b5ef
   1eb90:	0002b609 	.word	0x0002b609

0001eb94 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   1eb94:	4b27      	ldr	r3, [pc, #156]	; (1ec34 <msg_finalize+0xa0>)
{
   1eb96:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
   1eb98:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   1eb9a:	8141      	strh	r1, [r0, #10]
{
   1eb9c:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   1eb9e:	4798      	blx	r3
   1eba0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1eba2:	f04f 0320 	mov.w	r3, #32
   1eba6:	f3ef 8511 	mrs	r5, BASEPRI
   1ebaa:	f383 8811 	msr	BASEPRI, r3
   1ebae:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   1ebb2:	4821      	ldr	r0, [pc, #132]	; (1ec38 <msg_finalize+0xa4>)
   1ebb4:	4621      	mov	r1, r4
   1ebb6:	f007 f854 	bl	25c62 <log_list_add_tail>
	__asm__ volatile(
   1ebba:	f385 8811 	msr	BASEPRI, r5
   1ebbe:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1ebc2:	4b1e      	ldr	r3, [pc, #120]	; (1ec3c <msg_finalize+0xa8>)
   1ebc4:	e8d3 2fef 	ldaex	r2, [r3]
   1ebc8:	3201      	adds	r2, #1
   1ebca:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1ebce:	2900      	cmp	r1, #0
   1ebd0:	d1f8      	bne.n	1ebc4 <msg_finalize+0x30>
	if (panic_mode) {
   1ebd2:	4a1b      	ldr	r2, [pc, #108]	; (1ec40 <msg_finalize+0xac>)
   1ebd4:	7812      	ldrb	r2, [r2, #0]
   1ebd6:	b182      	cbz	r2, 1ebfa <msg_finalize+0x66>
	__asm__ volatile(
   1ebd8:	f04f 0320 	mov.w	r3, #32
   1ebdc:	f3ef 8411 	mrs	r4, BASEPRI
   1ebe0:	f383 8811 	msr	BASEPRI, r3
   1ebe4:	f3bf 8f6f 	isb	sy
	return z_impl_log_process(bypass);
   1ebe8:	2000      	movs	r0, #0
   1ebea:	f7ff ff0f 	bl	1ea0c <z_impl_log_process>
	__asm__ volatile(
   1ebee:	f384 8811 	msr	BASEPRI, r4
   1ebf2:	f3bf 8f6f 	isb	sy
}
   1ebf6:	b003      	add	sp, #12
   1ebf8:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   1ebfa:	4a12      	ldr	r2, [pc, #72]	; (1ec44 <msg_finalize+0xb0>)
   1ebfc:	681b      	ldr	r3, [r3, #0]
   1ebfe:	6812      	ldr	r2, [r2, #0]
   1ec00:	2a00      	cmp	r2, #0
   1ec02:	d0f8      	beq.n	1ebf6 <msg_finalize+0x62>
   1ec04:	2b01      	cmp	r3, #1
   1ec06:	d10a      	bne.n	1ec1e <msg_finalize+0x8a>
	z_impl_k_timer_start(timer, duration, period);
   1ec08:	2200      	movs	r2, #0
   1ec0a:	2300      	movs	r3, #0
   1ec0c:	480e      	ldr	r0, [pc, #56]	; (1ec48 <msg_finalize+0xb4>)
   1ec0e:	e9cd 2300 	strd	r2, r3, [sp]
   1ec12:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1ec16:	2300      	movs	r3, #0
   1ec18:	f005 ffb8 	bl	24b8c <z_impl_k_timer_start>
   1ec1c:	e7eb      	b.n	1ebf6 <msg_finalize+0x62>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   1ec1e:	2b0a      	cmp	r3, #10
   1ec20:	d1e9      	bne.n	1ebf6 <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
   1ec22:	4809      	ldr	r0, [pc, #36]	; (1ec48 <msg_finalize+0xb4>)
   1ec24:	f009 f9d3 	bl	27fce <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   1ec28:	4808      	ldr	r0, [pc, #32]	; (1ec4c <msg_finalize+0xb8>)
}
   1ec2a:	b003      	add	sp, #12
   1ec2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1ec30:	f005 ba10 	b.w	24054 <z_impl_k_sem_give>
   1ec34:	20008004 	.word	0x20008004
   1ec38:	20008870 	.word	0x20008870
   1ec3c:	20008864 	.word	0x20008864
   1ec40:	20009652 	.word	0x20009652
   1ec44:	20008894 	.word	0x20008894
   1ec48:	20008448 	.word	0x20008448
   1ec4c:	200081f0 	.word	0x200081f0

0001ec50 <log_process_thread_func>:
{
   1ec50:	b510      	push	{r4, lr}
	log_init();
   1ec52:	f7ff fe59 	bl	1e908 <log_init>
	return z_impl_k_current_get();
   1ec56:	f005 fd57 	bl	24708 <z_impl_k_current_get>
	proc_tid = process_tid;
   1ec5a:	4b0c      	ldr	r3, [pc, #48]	; (1ec8c <log_process_thread_func+0x3c>)
   1ec5c:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   1ec5e:	b130      	cbz	r0, 1ec6e <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   1ec60:	4b0b      	ldr	r3, [pc, #44]	; (1ec90 <log_process_thread_func+0x40>)
	    process_tid &&
   1ec62:	681b      	ldr	r3, [r3, #0]
   1ec64:	2b09      	cmp	r3, #9
   1ec66:	dd02      	ble.n	1ec6e <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
   1ec68:	480a      	ldr	r0, [pc, #40]	; (1ec94 <log_process_thread_func+0x44>)
   1ec6a:	f005 f9f3 	bl	24054 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   1ec6e:	4c09      	ldr	r4, [pc, #36]	; (1ec94 <log_process_thread_func+0x44>)
   1ec70:	2000      	movs	r0, #0
   1ec72:	f7ff fecb 	bl	1ea0c <z_impl_log_process>
		if (log_process(false) == false) {
   1ec76:	2800      	cmp	r0, #0
   1ec78:	d1fa      	bne.n	1ec70 <log_process_thread_func+0x20>
   1ec7a:	f04f 32ff 	mov.w	r2, #4294967295
   1ec7e:	f04f 33ff 	mov.w	r3, #4294967295
   1ec82:	4620      	mov	r0, r4
   1ec84:	f005 fa0c 	bl	240a0 <z_impl_k_sem_take>
   1ec88:	e7f2      	b.n	1ec70 <log_process_thread_func+0x20>
   1ec8a:	bf00      	nop
   1ec8c:	20008894 	.word	0x20008894
   1ec90:	20008864 	.word	0x20008864
   1ec94:	200081f0 	.word	0x200081f0

0001ec98 <z_impl_log_panic>:
{
   1ec98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   1ec9a:	4f0e      	ldr	r7, [pc, #56]	; (1ecd4 <z_impl_log_panic+0x3c>)
   1ec9c:	783d      	ldrb	r5, [r7, #0]
   1ec9e:	b975      	cbnz	r5, 1ecbe <z_impl_log_panic+0x26>
	log_init();
   1eca0:	f7ff fe32 	bl	1e908 <log_init>
	return __log_backends_end - __log_backends_start;
   1eca4:	4c0c      	ldr	r4, [pc, #48]	; (1ecd8 <z_impl_log_panic+0x40>)
   1eca6:	4e0d      	ldr	r6, [pc, #52]	; (1ecdc <z_impl_log_panic+0x44>)
   1eca8:	1b36      	subs	r6, r6, r4
   1ecaa:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   1ecac:	42b5      	cmp	r5, r6
   1ecae:	db07      	blt.n	1ecc0 <z_impl_log_panic+0x28>
   1ecb0:	2000      	movs	r0, #0
   1ecb2:	f7ff feab 	bl	1ea0c <z_impl_log_process>
		while (log_process(false) == true) {
   1ecb6:	2800      	cmp	r0, #0
   1ecb8:	d1fa      	bne.n	1ecb0 <z_impl_log_panic+0x18>
	panic_mode = true;
   1ecba:	2301      	movs	r3, #1
   1ecbc:	703b      	strb	r3, [r7, #0]
}
   1ecbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
   1ecc0:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   1ecc2:	795b      	ldrb	r3, [r3, #5]
   1ecc4:	b11b      	cbz	r3, 1ecce <z_impl_log_panic+0x36>
	backend->api->panic(backend);
   1ecc6:	6823      	ldr	r3, [r4, #0]
   1ecc8:	4620      	mov	r0, r4
   1ecca:	695b      	ldr	r3, [r3, #20]
   1eccc:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   1ecce:	3501      	adds	r5, #1
   1ecd0:	3410      	adds	r4, #16
   1ecd2:	e7eb      	b.n	1ecac <z_impl_log_panic+0x14>
   1ecd4:	20009652 	.word	0x20009652
   1ecd8:	00028624 	.word	0x00028624
   1ecdc:	00028634 	.word	0x00028634

0001ece0 <log_free>:
{
   1ece0:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   1ece2:	3804      	subs	r0, #4
   1ece4:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1ece6:	e8d0 3fef 	ldaex	r3, [r0]
   1ecea:	1e5a      	subs	r2, r3, #1
   1ecec:	e8c0 2fe1 	stlex	r1, r2, [r0]
   1ecf0:	2900      	cmp	r1, #0
   1ecf2:	d1f8      	bne.n	1ece6 <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
   1ecf4:	2b01      	cmp	r3, #1
   1ecf6:	d103      	bne.n	1ed00 <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   1ecf8:	4803      	ldr	r0, [pc, #12]	; (1ed08 <log_free+0x28>)
   1ecfa:	a901      	add	r1, sp, #4
   1ecfc:	f008 ff8e 	bl	27c1c <k_mem_slab_free>
}
   1ed00:	b003      	add	sp, #12
   1ed02:	f85d fb04 	ldr.w	pc, [sp], #4
   1ed06:	bf00      	nop
   1ed08:	20008878 	.word	0x20008878

0001ed0c <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   1ed0c:	2320      	movs	r3, #32
   1ed0e:	4902      	ldr	r1, [pc, #8]	; (1ed18 <log_msg_pool_init+0xc>)
   1ed10:	461a      	mov	r2, r3
   1ed12:	4802      	ldr	r0, [pc, #8]	; (1ed1c <log_msg_pool_init+0x10>)
   1ed14:	f008 bf67 	b.w	27be6 <k_mem_slab_init>
   1ed18:	20016bc0 	.word	0x20016bc0
   1ed1c:	20008898 	.word	0x20008898

0001ed20 <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
   1ed20:	2300      	movs	r3, #0
{
   1ed22:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   1ed24:	4d09      	ldr	r5, [pc, #36]	; (1ed4c <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   1ed26:	9301      	str	r3, [sp, #4]
   1ed28:	2001      	movs	r0, #1
   1ed2a:	f7ff fe6f 	bl	1ea0c <z_impl_log_process>
   1ed2e:	4604      	mov	r4, r0
			z_log_dropped();
   1ed30:	f7ff fd1e 	bl	1e770 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   1ed34:	2200      	movs	r2, #0
   1ed36:	2300      	movs	r3, #0
   1ed38:	4628      	mov	r0, r5
   1ed3a:	a901      	add	r1, sp, #4
   1ed3c:	f004 fe5a 	bl	239f4 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   1ed40:	b108      	cbz	r0, 1ed46 <log_msg_no_space_handle+0x26>
   1ed42:	2c00      	cmp	r4, #0
   1ed44:	d1f0      	bne.n	1ed28 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
   1ed46:	9801      	ldr	r0, [sp, #4]
   1ed48:	b003      	add	sp, #12
   1ed4a:	bd30      	pop	{r4, r5, pc}
   1ed4c:	20008898 	.word	0x20008898

0001ed50 <log_msg_chunk_alloc>:
	union log_msg_chunk *msg = NULL;
   1ed50:	2300      	movs	r3, #0
{
   1ed52:	b507      	push	{r0, r1, r2, lr}
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   1ed54:	2200      	movs	r2, #0
	union log_msg_chunk *msg = NULL;
   1ed56:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   1ed58:	4806      	ldr	r0, [pc, #24]	; (1ed74 <log_msg_chunk_alloc+0x24>)
   1ed5a:	2300      	movs	r3, #0
   1ed5c:	a901      	add	r1, sp, #4
   1ed5e:	f004 fe49 	bl	239f4 <k_mem_slab_alloc>
	if (err != 0) {
   1ed62:	b110      	cbz	r0, 1ed6a <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
   1ed64:	f7ff ffdc 	bl	1ed20 <log_msg_no_space_handle>
   1ed68:	9001      	str	r0, [sp, #4]
}
   1ed6a:	9801      	ldr	r0, [sp, #4]
   1ed6c:	b003      	add	sp, #12
   1ed6e:	f85d fb04 	ldr.w	pc, [sp], #4
   1ed72:	bf00      	nop
   1ed74:	20008898 	.word	0x20008898

0001ed78 <msg_free>:
{
   1ed78:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   1ed7a:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   1ed7c:	7a45      	ldrb	r5, [r0, #9]
{
   1ed7e:	b085      	sub	sp, #20
   1ed80:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   1ed82:	07d8      	lsls	r0, r3, #31
	return msg->hdr.params.std.nargs;
   1ed84:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
   1ed88:	d41c      	bmi.n	1edc4 <msg_free+0x4c>
   1ed8a:	b1dd      	cbz	r5, 1edc4 <msg_free+0x4c>
		uint32_t smask = 0U;
   1ed8c:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
   1ed8e:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   1ed90:	4631      	mov	r1, r6
   1ed92:	9801      	ldr	r0, [sp, #4]
   1ed94:	f007 f861 	bl	25e5a <log_msg_arg_get>
   1ed98:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   1ed9a:	f7ff fe29 	bl	1e9f0 <log_is_strdup>
   1ed9e:	b170      	cbz	r0, 1edbe <msg_free+0x46>
				if (smask == 0U) {
   1eda0:	b934      	cbnz	r4, 1edb0 <msg_free+0x38>
					smask = z_log_get_s_mask(
   1eda2:	9b01      	ldr	r3, [sp, #4]
   1eda4:	4629      	mov	r1, r5
   1eda6:	6918      	ldr	r0, [r3, #16]
   1eda8:	f006 ff7a 	bl	25ca0 <z_log_get_s_mask>
					if (smask == 0U) {
   1edac:	4604      	mov	r4, r0
   1edae:	b148      	cbz	r0, 1edc4 <msg_free+0x4c>
				if (smask & BIT(i)) {
   1edb0:	fa24 f306 	lsr.w	r3, r4, r6
   1edb4:	07d9      	lsls	r1, r3, #31
   1edb6:	d502      	bpl.n	1edbe <msg_free+0x46>
					log_free(buf);
   1edb8:	4638      	mov	r0, r7
   1edba:	f7ff ff91 	bl	1ece0 <log_free>
		for (i = 0U; i < nargs; i++) {
   1edbe:	3601      	adds	r6, #1
   1edc0:	42ae      	cmp	r6, r5
   1edc2:	d3e5      	bcc.n	1ed90 <msg_free+0x18>
	if (msg->hdr.params.generic.ext == 1) {
   1edc4:	9b01      	ldr	r3, [sp, #4]
   1edc6:	7a1a      	ldrb	r2, [r3, #8]
   1edc8:	0792      	lsls	r2, r2, #30
   1edca:	d504      	bpl.n	1edd6 <msg_free+0x5e>
		cont_free(msg->payload.ext.next);
   1edcc:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   1edce:	4c08      	ldr	r4, [pc, #32]	; (1edf0 <msg_free+0x78>)
   1edd0:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   1edd2:	9b03      	ldr	r3, [sp, #12]
   1edd4:	b92b      	cbnz	r3, 1ede2 <msg_free+0x6a>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   1edd6:	4806      	ldr	r0, [pc, #24]	; (1edf0 <msg_free+0x78>)
   1edd8:	a901      	add	r1, sp, #4
   1edda:	f008 ff1f 	bl	27c1c <k_mem_slab_free>
}
   1edde:	b005      	add	sp, #20
   1ede0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
   1ede2:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   1ede4:	4620      	mov	r0, r4
   1ede6:	a903      	add	r1, sp, #12
   1ede8:	f008 ff18 	bl	27c1c <k_mem_slab_free>
		cont = next;
   1edec:	9503      	str	r5, [sp, #12]
   1edee:	e7f0      	b.n	1edd2 <msg_free+0x5a>
   1edf0:	20008898 	.word	0x20008898

0001edf4 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   1edf4:	b40e      	push	{r1, r2, r3}
   1edf6:	b503      	push	{r0, r1, lr}
   1edf8:	ab03      	add	r3, sp, #12
   1edfa:	f853 2b04 	ldr.w	r2, [r3], #4
   1edfe:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   1ee00:	4804      	ldr	r0, [pc, #16]	; (1ee14 <print_formatted+0x20>)
	va_start(args, fmt);
   1ee02:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   1ee04:	f7ff f844 	bl	1de90 <cbvprintf>
	va_end(args);

	return length;
}
   1ee08:	b002      	add	sp, #8
   1ee0a:	f85d eb04 	ldr.w	lr, [sp], #4
   1ee0e:	b003      	add	sp, #12
   1ee10:	4770      	bx	lr
   1ee12:	bf00      	nop
   1ee14:	000261b7 	.word	0x000261b7

0001ee18 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
   1ee18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   1ee1c:	f011 0602 	ands.w	r6, r1, #2
{
   1ee20:	b087      	sub	sp, #28
   1ee22:	9205      	str	r2, [sp, #20]
   1ee24:	4607      	mov	r7, r0
   1ee26:	461a      	mov	r2, r3
   1ee28:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   1ee2c:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   1ee30:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   1ee34:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   1ee38:	d006      	beq.n	1ee48 <prefix_print+0x30>
	if (!format) {
   1ee3a:	f011 0f44 	tst.w	r1, #68	; 0x44
   1ee3e:	d138      	bne.n	1eeb2 <prefix_print+0x9a>
		length = print_formatted(output, "[%08lu] ", timestamp);
   1ee40:	4932      	ldr	r1, [pc, #200]	; (1ef0c <prefix_print+0xf4>)
   1ee42:	f7ff ffd7 	bl	1edf4 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   1ee46:	4606      	mov	r6, r0
	if (color) {
   1ee48:	f1ba 0f00 	cmp.w	sl, #0
   1ee4c:	d00a      	beq.n	1ee64 <prefix_print+0x4c>
		const char *log_color = start && (colors[level] != NULL) ?
   1ee4e:	4b30      	ldr	r3, [pc, #192]	; (1ef10 <prefix_print+0xf8>)
		print_formatted(output, "%s", log_color);
   1ee50:	4638      	mov	r0, r7
		const char *log_color = start && (colors[level] != NULL) ?
   1ee52:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
		print_formatted(output, "%s", log_color);
   1ee56:	4b2f      	ldr	r3, [pc, #188]	; (1ef14 <prefix_print+0xfc>)
   1ee58:	492f      	ldr	r1, [pc, #188]	; (1ef18 <prefix_print+0x100>)
   1ee5a:	2a00      	cmp	r2, #0
   1ee5c:	bf08      	it	eq
   1ee5e:	461a      	moveq	r2, r3
   1ee60:	f7ff ffc8 	bl	1edf4 <print_formatted>
	if (level_on) {
   1ee64:	b13d      	cbz	r5, 1ee76 <prefix_print+0x5e>
		total += print_formatted(output, "<%s> ", severity[level]);
   1ee66:	4b2d      	ldr	r3, [pc, #180]	; (1ef1c <prefix_print+0x104>)
   1ee68:	4638      	mov	r0, r7
   1ee6a:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
   1ee6e:	492c      	ldr	r1, [pc, #176]	; (1ef20 <prefix_print+0x108>)
   1ee70:	f7ff ffc0 	bl	1edf4 <print_formatted>
   1ee74:	4605      	mov	r5, r0
	if (source_id >= 0) {
   1ee76:	f1b9 0f00 	cmp.w	r9, #0
   1ee7a:	db16      	blt.n	1eeaa <prefix_print+0x92>
		total += print_formatted(output,
   1ee7c:	9b05      	ldr	r3, [sp, #20]
   1ee7e:	2b00      	cmp	r3, #0
   1ee80:	d041      	beq.n	1ef06 <prefix_print+0xee>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   1ee82:	2301      	movs	r3, #1
   1ee84:	fa03 f808 	lsl.w	r8, r3, r8
		total += print_formatted(output,
   1ee88:	4b26      	ldr	r3, [pc, #152]	; (1ef24 <prefix_print+0x10c>)
   1ee8a:	f018 0f10 	tst.w	r8, #16
   1ee8e:	4c26      	ldr	r4, [pc, #152]	; (1ef28 <prefix_print+0x110>)
   1ee90:	bf18      	it	ne
   1ee92:	461c      	movne	r4, r3
   1ee94:	4649      	mov	r1, r9
   1ee96:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   1ee9a:	f7ff fc9d 	bl	1e7d8 <log_source_name_get>
   1ee9e:	4621      	mov	r1, r4
   1eea0:	4602      	mov	r2, r0
   1eea2:	4638      	mov	r0, r7
   1eea4:	f7ff ffa6 	bl	1edf4 <print_formatted>
   1eea8:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
   1eeaa:	19a8      	adds	r0, r5, r6
   1eeac:	b007      	add	sp, #28
   1eeae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   1eeb2:	4b1e      	ldr	r3, [pc, #120]	; (1ef2c <prefix_print+0x114>)
   1eeb4:	6819      	ldr	r1, [r3, #0]
   1eeb6:	b321      	cbz	r1, 1ef02 <prefix_print+0xea>
		timestamp /= timestamp_div;
   1eeb8:	4b1d      	ldr	r3, [pc, #116]	; (1ef30 <prefix_print+0x118>)
   1eeba:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
   1eebe:	681b      	ldr	r3, [r3, #0]
		ms = (remainder * 1000U) / freq;
   1eec0:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
		timestamp /= timestamp_div;
   1eec4:	fbb2 f3f3 	udiv	r3, r2, r3
		total_seconds = timestamp / freq;
   1eec8:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   1eecc:	fbb4 f2fc 	udiv	r2, r4, ip
   1eed0:	fb0c 4c12 	mls	ip, ip, r2, r4
		remainder = timestamp % freq;
   1eed4:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   1eed8:	4374      	muls	r4, r6
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1eeda:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
   1eede:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1eee2:	fb01 441b 	mls	r4, r1, fp, r4
   1eee6:	4374      	muls	r4, r6
		mins = seconds / 60U;
   1eee8:	fbbc f3fe 	udiv	r3, ip, lr
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1eeec:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(output,
   1eef0:	e9cd b101 	strd	fp, r1, [sp, #4]
   1eef4:	fb0e c113 	mls	r1, lr, r3, ip
   1eef8:	9100      	str	r1, [sp, #0]
   1eefa:	490e      	ldr	r1, [pc, #56]	; (1ef34 <prefix_print+0x11c>)
   1eefc:	f7ff ff7a 	bl	1edf4 <print_formatted>
   1ef00:	e7a1      	b.n	1ee46 <prefix_print+0x2e>
		length = 0;
   1ef02:	4608      	mov	r0, r1
   1ef04:	e79f      	b.n	1ee46 <prefix_print+0x2e>
		total += print_formatted(output,
   1ef06:	4c08      	ldr	r4, [pc, #32]	; (1ef28 <prefix_print+0x110>)
   1ef08:	e7c4      	b.n	1ee94 <prefix_print+0x7c>
   1ef0a:	bf00      	nop
   1ef0c:	0002b65a 	.word	0x0002b65a
   1ef10:	0002a878 	.word	0x0002a878
   1ef14:	0002b64c 	.word	0x0002b64c
   1ef18:	0002bc4b 	.word	0x0002bc4b
   1ef1c:	0002a88c 	.word	0x0002a88c
   1ef20:	0002b67f 	.word	0x0002b67f
   1ef24:	0002b656 	.word	0x0002b656
   1ef28:	0002b651 	.word	0x0002b651
   1ef2c:	200088b4 	.word	0x200088b4
   1ef30:	200088b8 	.word	0x200088b8
   1ef34:	0002b663 	.word	0x0002b663

0001ef38 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
   1ef38:	b538      	push	{r3, r4, r5, lr}
   1ef3a:	460c      	mov	r4, r1
	if (color) {
   1ef3c:	07e1      	lsls	r1, r4, #31
{
   1ef3e:	4605      	mov	r5, r0
	if (color) {
   1ef40:	d503      	bpl.n	1ef4a <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
   1ef42:	4a08      	ldr	r2, [pc, #32]	; (1ef64 <postfix_print+0x2c>)
   1ef44:	4908      	ldr	r1, [pc, #32]	; (1ef68 <postfix_print+0x30>)
   1ef46:	f7ff ff55 	bl	1edf4 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1ef4a:	06e2      	lsls	r2, r4, #27
   1ef4c:	d408      	bmi.n	1ef60 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   1ef4e:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   1ef50:	4628      	mov	r0, r5
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
   1ef52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   1ef56:	bf4c      	ite	mi
   1ef58:	4904      	ldrmi	r1, [pc, #16]	; (1ef6c <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   1ef5a:	4905      	ldrpl	r1, [pc, #20]	; (1ef70 <postfix_print+0x38>)
   1ef5c:	f7ff bf4a 	b.w	1edf4 <print_formatted>
}
   1ef60:	bd38      	pop	{r3, r4, r5, pc}
   1ef62:	bf00      	nop
   1ef64:	0002b64c 	.word	0x0002b64c
   1ef68:	0002bc4b 	.word	0x0002bc4b
   1ef6c:	0002bafd 	.word	0x0002bafd
   1ef70:	0002b6ff 	.word	0x0002b6ff

0001ef74 <hexdump_line_print>:
{
   1ef74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ef78:	461d      	mov	r5, r3
   1ef7a:	9b08      	ldr	r3, [sp, #32]
   1ef7c:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1ef7e:	06da      	lsls	r2, r3, #27
{
   1ef80:	4604      	mov	r4, r0
   1ef82:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1ef84:	d405      	bmi.n	1ef92 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   1ef86:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   1ef88:	bf4c      	ite	mi
   1ef8a:	492a      	ldrmi	r1, [pc, #168]	; (1f034 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
   1ef8c:	492a      	ldrpl	r1, [pc, #168]	; (1f038 <hexdump_line_print+0xc4>)
   1ef8e:	f7ff ff31 	bl	1edf4 <print_formatted>
{
   1ef92:	f04f 0800 	mov.w	r8, #0
		print_formatted(output, " ");
   1ef96:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1f040 <hexdump_line_print+0xcc>
	for (int i = 0; i < prefix_offset; i++) {
   1ef9a:	45a8      	cmp	r8, r5
   1ef9c:	db2a      	blt.n	1eff4 <hexdump_line_print+0x80>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1ef9e:	2500      	movs	r5, #0
			print_formatted(output, "   ");
   1efa0:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 1f044 <hexdump_line_print+0xd0>
			print_formatted(output, "%02x ", data[i]);
   1efa4:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 1f048 <hexdump_line_print+0xd4>
			print_formatted(output, " ");
   1efa8:	f8df a094 	ldr.w	sl, [pc, #148]	; 1f040 <hexdump_line_print+0xcc>
		if (i < length) {
   1efac:	42bd      	cmp	r5, r7
   1efae:	d22f      	bcs.n	1f010 <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
   1efb0:	4649      	mov	r1, r9
   1efb2:	4620      	mov	r0, r4
   1efb4:	5d72      	ldrb	r2, [r6, r5]
   1efb6:	f7ff ff1d 	bl	1edf4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1efba:	3501      	adds	r5, #1
   1efbc:	2d10      	cmp	r5, #16
   1efbe:	d120      	bne.n	1f002 <hexdump_line_print+0x8e>
	print_formatted(output, "|");
   1efc0:	4620      	mov	r0, r4
   1efc2:	491e      	ldr	r1, [pc, #120]	; (1f03c <hexdump_line_print+0xc8>)
   1efc4:	f7ff ff16 	bl	1edf4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1efc8:	2500      	movs	r5, #0
			print_formatted(output, " ");
   1efca:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1f040 <hexdump_line_print+0xcc>
			print_formatted(output, "%c",
   1efce:	f8df 907c 	ldr.w	r9, [pc, #124]	; 1f04c <hexdump_line_print+0xd8>
		if (i < length) {
   1efd2:	42af      	cmp	r7, r5
   1efd4:	d928      	bls.n	1f028 <hexdump_line_print+0xb4>
			char c = (char)data[i];
   1efd6:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(output, "%c",
   1efd8:	4649      	mov	r1, r9
	return (int)((((unsigned)c) >= ' ') &&
   1efda:	f1a2 0320 	sub.w	r3, r2, #32
   1efde:	2b5f      	cmp	r3, #95	; 0x5f
   1efe0:	bf28      	it	cs
   1efe2:	222e      	movcs	r2, #46	; 0x2e
   1efe4:	4620      	mov	r0, r4
   1efe6:	f7ff ff05 	bl	1edf4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1efea:	3501      	adds	r5, #1
   1efec:	2d10      	cmp	r5, #16
   1efee:	d114      	bne.n	1f01a <hexdump_line_print+0xa6>
}
   1eff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
   1eff4:	4649      	mov	r1, r9
   1eff6:	4620      	mov	r0, r4
   1eff8:	f7ff fefc 	bl	1edf4 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   1effc:	f108 0801 	add.w	r8, r8, #1
   1f000:	e7cb      	b.n	1ef9a <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   1f002:	076a      	lsls	r2, r5, #29
   1f004:	d1d2      	bne.n	1efac <hexdump_line_print+0x38>
			print_formatted(output, " ");
   1f006:	4651      	mov	r1, sl
   1f008:	4620      	mov	r0, r4
   1f00a:	f7ff fef3 	bl	1edf4 <print_formatted>
   1f00e:	e7cd      	b.n	1efac <hexdump_line_print+0x38>
			print_formatted(output, "   ");
   1f010:	4641      	mov	r1, r8
   1f012:	4620      	mov	r0, r4
   1f014:	f7ff feee 	bl	1edf4 <print_formatted>
   1f018:	e7cf      	b.n	1efba <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   1f01a:	076b      	lsls	r3, r5, #29
   1f01c:	d1d9      	bne.n	1efd2 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
   1f01e:	4641      	mov	r1, r8
   1f020:	4620      	mov	r0, r4
   1f022:	f7ff fee7 	bl	1edf4 <print_formatted>
   1f026:	e7d4      	b.n	1efd2 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
   1f028:	4641      	mov	r1, r8
   1f02a:	4620      	mov	r0, r4
   1f02c:	f7ff fee2 	bl	1edf4 <print_formatted>
   1f030:	e7db      	b.n	1efea <hexdump_line_print+0x76>
   1f032:	bf00      	nop
   1f034:	0002bafd 	.word	0x0002bafd
   1f038:	0002b6ff 	.word	0x0002b6ff
   1f03c:	0002b68f 	.word	0x0002b68f
   1f040:	0002b68d 	.word	0x0002b68d
   1f044:	0002b68b 	.word	0x0002b68b
   1f048:	0002b685 	.word	0x0002b685
   1f04c:	0002c0ba 	.word	0x0002c0ba

0001f050 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
   1f050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
   1f054:	7a8b      	ldrb	r3, [r1, #10]
   1f056:	4617      	mov	r7, r2
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
   1f058:	f013 0807 	ands.w	r8, r3, #7
{
   1f05c:	4605      	mov	r5, r0
   1f05e:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   1f060:	7a0a      	ldrb	r2, [r1, #8]
   1f062:	b08a      	sub	sp, #40	; 0x28
			0 : prefix_print(output, flags, std_msg, timestamp,
   1f064:	d021      	beq.n	1f0aa <log_output_msg_process+0x5a>
   1f066:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
   1f068:	8949      	ldrh	r1, [r1, #10]
   1f06a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1f06e:	f3c1 1189 	ubfx	r1, r1, #6, #10
   1f072:	e9cd 8300 	strd	r8, r3, [sp]
   1f076:	9102      	str	r1, [sp, #8]
   1f078:	68f3      	ldr	r3, [r6, #12]
   1f07a:	4639      	mov	r1, r7
   1f07c:	f002 0201 	and.w	r2, r2, #1
   1f080:	f7ff feca 	bl	1ee18 <prefix_print>
   1f084:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   1f086:	7a34      	ldrb	r4, [r6, #8]
   1f088:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
   1f08a:	f014 0401 	ands.w	r4, r4, #1
   1f08e:	d00e      	beq.n	1f0ae <log_output_msg_process+0x5e>
		std_print(msg, output);
   1f090:	4629      	mov	r1, r5
   1f092:	4630      	mov	r0, r6
   1f094:	f006 ff25 	bl	25ee2 <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
   1f098:	f1b8 0f00 	cmp.w	r8, #0
   1f09c:	d02b      	beq.n	1f0f6 <log_output_msg_process+0xa6>
		postfix_print(output, flags, level);
   1f09e:	4642      	mov	r2, r8
   1f0a0:	4639      	mov	r1, r7
   1f0a2:	4628      	mov	r0, r5
   1f0a4:	f7ff ff48 	bl	1ef38 <postfix_print>
   1f0a8:	e025      	b.n	1f0f6 <log_output_msg_process+0xa6>
			0 : prefix_print(output, flags, std_msg, timestamp,
   1f0aa:	46c1      	mov	r9, r8
   1f0ac:	e7eb      	b.n	1f086 <log_output_msg_process+0x36>
	} else if (raw_string) {
   1f0ae:	f1b8 0f00 	cmp.w	r8, #0
   1f0b2:	d126      	bne.n	1f102 <log_output_msg_process+0xb2>
	size_t offset = 0;
   1f0b4:	4627      	mov	r7, r4
		length = output->size;
   1f0b6:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
   1f0b8:	aa06      	add	r2, sp, #24
		length = output->size;
   1f0ba:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
   1f0bc:	4630      	mov	r0, r6
   1f0be:	463b      	mov	r3, r7
   1f0c0:	68a9      	ldr	r1, [r5, #8]
   1f0c2:	f006 fefa 	bl	25eba <log_msg_hexdump_data_get>
		output->control_block->offset = length;
   1f0c6:	9a06      	ldr	r2, [sp, #24]
   1f0c8:	686b      	ldr	r3, [r5, #4]
   1f0ca:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   1f0cc:	b13a      	cbz	r2, 1f0de <log_output_msg_process+0x8e>
			eol = (output->buf[length - 1] == '\n');
   1f0ce:	68ab      	ldr	r3, [r5, #8]
   1f0d0:	4413      	add	r3, r2
   1f0d2:	f813 4c01 	ldrb.w	r4, [r3, #-1]
   1f0d6:	f1a4 030a 	sub.w	r3, r4, #10
   1f0da:	425c      	negs	r4, r3
   1f0dc:	415c      	adcs	r4, r3
		log_output_flush(output);
   1f0de:	4628      	mov	r0, r5
   1f0e0:	f007 f85c 	bl	2619c <log_output_flush>
		offset += length;
   1f0e4:	9b06      	ldr	r3, [sp, #24]
   1f0e6:	441f      	add	r7, r3
	} while (length > 0);
   1f0e8:	2b00      	cmp	r3, #0
   1f0ea:	d1e4      	bne.n	1f0b6 <log_output_msg_process+0x66>
	if (eol) {
   1f0ec:	b11c      	cbz	r4, 1f0f6 <log_output_msg_process+0xa6>
		print_formatted(output, "\r");
   1f0ee:	4628      	mov	r0, r5
   1f0f0:	4913      	ldr	r1, [pc, #76]	; (1f140 <log_output_msg_process+0xf0>)
   1f0f2:	f7ff fe7f 	bl	1edf4 <print_formatted>
	}

	log_output_flush(output);
   1f0f6:	4628      	mov	r0, r5
   1f0f8:	f007 f850 	bl	2619c <log_output_flush>
}
   1f0fc:	b00a      	add	sp, #40	; 0x28
   1f0fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(output, "%s", log_msg_str_get(msg));
   1f102:	4630      	mov	r0, r6
   1f104:	f006 fed7 	bl	25eb6 <log_msg_str_get>
   1f108:	490e      	ldr	r1, [pc, #56]	; (1f144 <log_output_msg_process+0xf4>)
   1f10a:	4602      	mov	r2, r0
   1f10c:	4628      	mov	r0, r5
   1f10e:	f7ff fe71 	bl	1edf4 <print_formatted>
		length = sizeof(buf);
   1f112:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   1f116:	aa05      	add	r2, sp, #20
   1f118:	4623      	mov	r3, r4
   1f11a:	4630      	mov	r0, r6
   1f11c:	a906      	add	r1, sp, #24
		length = sizeof(buf);
   1f11e:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   1f122:	f006 feca 	bl	25eba <log_msg_hexdump_data_get>
		if (length) {
   1f126:	9a05      	ldr	r2, [sp, #20]
   1f128:	2a00      	cmp	r2, #0
   1f12a:	d0b8      	beq.n	1f09e <log_output_msg_process+0x4e>
			hexdump_line_print(output, buf, length,
   1f12c:	464b      	mov	r3, r9
   1f12e:	4628      	mov	r0, r5
   1f130:	9700      	str	r7, [sp, #0]
   1f132:	a906      	add	r1, sp, #24
   1f134:	f7ff ff1e 	bl	1ef74 <hexdump_line_print>
			offset += length;
   1f138:	9b05      	ldr	r3, [sp, #20]
   1f13a:	441c      	add	r4, r3
		length = sizeof(buf);
   1f13c:	e7eb      	b.n	1f116 <log_output_msg_process+0xc6>
   1f13e:	bf00      	nop
   1f140:	0002b691 	.word	0x0002b691
   1f144:	0002bc4b 	.word	0x0002bc4b

0001f148 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1f148:	f242 730f 	movw	r3, #9999	; 0x270f
{
   1f14c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1f14e:	428b      	cmp	r3, r1
   1f150:	bf28      	it	cs
   1f152:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   1f154:	6805      	ldr	r5, [r0, #0]
{
   1f156:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1f158:	2105      	movs	r1, #5
   1f15a:	4668      	mov	r0, sp
   1f15c:	4a0d      	ldr	r2, [pc, #52]	; (1f194 <log_output_dropped_process+0x4c>)
   1f15e:	f006 f946 	bl	253ee <snprintk>
   1f162:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   1f164:	6863      	ldr	r3, [r4, #4]
   1f166:	4628      	mov	r0, r5
   1f168:	2204      	movs	r2, #4
   1f16a:	685b      	ldr	r3, [r3, #4]
   1f16c:	490a      	ldr	r1, [pc, #40]	; (1f198 <log_output_dropped_process+0x50>)
   1f16e:	f006 feab 	bl	25ec8 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   1f172:	6863      	ldr	r3, [r4, #4]
   1f174:	4632      	mov	r2, r6
   1f176:	4669      	mov	r1, sp
   1f178:	4628      	mov	r0, r5
   1f17a:	685b      	ldr	r3, [r3, #4]
   1f17c:	f006 fea4 	bl	25ec8 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   1f180:	6863      	ldr	r3, [r4, #4]
   1f182:	2217      	movs	r2, #23
   1f184:	4628      	mov	r0, r5
   1f186:	685b      	ldr	r3, [r3, #4]
   1f188:	4904      	ldr	r1, [pc, #16]	; (1f19c <log_output_dropped_process+0x54>)
   1f18a:	f006 fe9d 	bl	25ec8 <buffer_write>
		     output->control_block->ctx);
}
   1f18e:	b002      	add	sp, #8
   1f190:	bd70      	pop	{r4, r5, r6, pc}
   1f192:	bf00      	nop
   1f194:	0002beec 	.word	0x0002beec
   1f198:	0002b6cb 	.word	0x0002b6cb
   1f19c:	0002b6b3 	.word	0x0002b6b3

0001f1a0 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   1f1a0:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   1f1a2:	2100      	movs	r1, #0
	timestamp_div = 1U;
   1f1a4:	4a07      	ldr	r2, [pc, #28]	; (1f1c4 <log_output_timestamp_freq_set+0x24>)
{
   1f1a6:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   1f1a8:	4c07      	ldr	r4, [pc, #28]	; (1f1c8 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   1f1aa:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   1f1ac:	42a0      	cmp	r0, r4
   1f1ae:	d804      	bhi.n	1f1ba <log_output_timestamp_freq_set+0x1a>
   1f1b0:	b101      	cbz	r1, 1f1b4 <log_output_timestamp_freq_set+0x14>
   1f1b2:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   1f1b4:	4b05      	ldr	r3, [pc, #20]	; (1f1cc <log_output_timestamp_freq_set+0x2c>)
   1f1b6:	6018      	str	r0, [r3, #0]
}
   1f1b8:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
   1f1ba:	2101      	movs	r1, #1
		frequency /= 2U;
   1f1bc:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   1f1be:	005b      	lsls	r3, r3, #1
   1f1c0:	e7f4      	b.n	1f1ac <log_output_timestamp_freq_set+0xc>
   1f1c2:	bf00      	nop
   1f1c4:	200088b8 	.word	0x200088b8
   1f1c8:	000f4240 	.word	0x000f4240
   1f1cc:	200088b4 	.word	0x200088b4

0001f1d0 <severity_lvl_get>:
}


static void severity_lvl_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
   1f1d0:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &dsub_module_name;
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
					severity_lvls_sorted[idx] : NULL;
   1f1d2:	2804      	cmp	r0, #4
	entry->handler = NULL;
   1f1d4:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
   1f1d6:	604b      	str	r3, [r1, #4]
					severity_lvls_sorted[idx] : NULL;
   1f1d8:	bf98      	it	ls
   1f1da:	4b04      	ldrls	r3, [pc, #16]	; (1f1ec <severity_lvl_get+0x1c>)
	entry->subcmd = &dsub_module_name;
   1f1dc:	4a04      	ldr	r2, [pc, #16]	; (1f1f0 <severity_lvl_get+0x20>)
					severity_lvls_sorted[idx] : NULL;
   1f1de:	bf98      	it	ls
   1f1e0:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	entry->subcmd = &dsub_module_name;
   1f1e4:	608a      	str	r2, [r1, #8]
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
   1f1e6:	600b      	str	r3, [r1, #0]
}
   1f1e8:	4770      	bx	lr
   1f1ea:	bf00      	nop
   1f1ec:	0002a8e0 	.word	0x0002a8e0
   1f1f0:	0002a8bc 	.word	0x0002a8bc

0001f1f4 <backend_name_get>:
	SHELL_SUBCMD_SET_END
);

static void backend_name_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
   1f1f4:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &sub_log_backend;
   1f1f6:	4a08      	ldr	r2, [pc, #32]	; (1f218 <backend_name_get+0x24>)
	entry->syntax  = NULL;
   1f1f8:	600b      	str	r3, [r1, #0]
	entry->handler = NULL;
   1f1fa:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
   1f1fc:	604b      	str	r3, [r1, #4]
	entry->subcmd = &sub_log_backend;
   1f1fe:	608a      	str	r2, [r1, #8]
	return __log_backends_end - __log_backends_start;
   1f200:	4b06      	ldr	r3, [pc, #24]	; (1f21c <backend_name_get+0x28>)
   1f202:	4a07      	ldr	r2, [pc, #28]	; (1f220 <backend_name_get+0x2c>)
   1f204:	1ad2      	subs	r2, r2, r3

	if (idx < log_backend_count_get()) {
   1f206:	ebb0 1f22 	cmp.w	r0, r2, asr #4
		const struct log_backend *backend = log_backend_get(idx);

		entry->syntax = backend->name;
   1f20a:	bf3e      	ittt	cc
   1f20c:	eb03 1300 	addcc.w	r3, r3, r0, lsl #4
   1f210:	689b      	ldrcc	r3, [r3, #8]
   1f212:	600b      	strcc	r3, [r1, #0]
	}
}
   1f214:	4770      	bx	lr
   1f216:	bf00      	nop
   1f218:	0002aa20 	.word	0x0002aa20
   1f21c:	00028624 	.word	0x00028624
   1f220:	00028634 	.word	0x00028634

0001f224 <cmd_log_backends_list>:
{
   1f224:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1f228:	4607      	mov	r7, r0
	for (int i = 0; i < backend_count; i++) {
   1f22a:	2600      	movs	r6, #0
   1f22c:	4c10      	ldr	r4, [pc, #64]	; (1f270 <cmd_log_backends_list+0x4c>)
   1f22e:	4d11      	ldr	r5, [pc, #68]	; (1f274 <cmd_log_backends_list+0x50>)
		shell_fprintf(shell, SHELL_NORMAL,
   1f230:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1f278 <cmd_log_backends_list+0x54>
   1f234:	1b2d      	subs	r5, r5, r4
   1f236:	f8df 9044 	ldr.w	r9, [pc, #68]	; 1f27c <cmd_log_backends_list+0x58>
   1f23a:	f8df a044 	ldr.w	sl, [pc, #68]	; 1f280 <cmd_log_backends_list+0x5c>
   1f23e:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < backend_count; i++) {
   1f240:	42ae      	cmp	r6, r5
   1f242:	db03      	blt.n	1f24c <cmd_log_backends_list+0x28>
}
   1f244:	2000      	movs	r0, #0
   1f246:	b002      	add	sp, #8
   1f248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			      backend->cb->active ? "enabled" : "disabled",
   1f24c:	6862      	ldr	r2, [r4, #4]
		shell_fprintf(shell, SHELL_NORMAL,
   1f24e:	2100      	movs	r1, #0
   1f250:	7953      	ldrb	r3, [r2, #5]
   1f252:	7912      	ldrb	r2, [r2, #4]
   1f254:	2b00      	cmp	r3, #0
   1f256:	bf14      	ite	ne
   1f258:	4643      	movne	r3, r8
   1f25a:	464b      	moveq	r3, r9
   1f25c:	4638      	mov	r0, r7
   1f25e:	e9cd 3200 	strd	r3, r2, [sp]
   1f262:	68a3      	ldr	r3, [r4, #8]
   1f264:	4652      	mov	r2, sl
   1f266:	f007 f969 	bl	2653c <shell_fprintf>
	for (int i = 0; i < backend_count; i++) {
   1f26a:	3601      	adds	r6, #1
   1f26c:	3410      	adds	r4, #16
   1f26e:	e7e7      	b.n	1f240 <cmd_log_backends_list+0x1c>
   1f270:	00028624 	.word	0x00028624
   1f274:	00028634 	.word	0x00028634
   1f278:	0002b6d0 	.word	0x0002b6d0
   1f27c:	0002b6d8 	.word	0x0002b6d8
   1f280:	0002b6e1 	.word	0x0002b6e1

0001f284 <log_status>:
{
   1f284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   1f288:	4b24      	ldr	r3, [pc, #144]	; (1f31c <log_status+0x98>)
   1f28a:	4c25      	ldr	r4, [pc, #148]	; (1f320 <log_status+0x9c>)
   1f28c:	4605      	mov	r5, r0
   1f28e:	1ae4      	subs	r4, r4, r3
	return backend->cb->active;
   1f290:	684b      	ldr	r3, [r1, #4]
   1f292:	460e      	mov	r6, r1
	if (!log_backend_is_active(backend)) {
   1f294:	795b      	ldrb	r3, [r3, #5]
{
   1f296:	b085      	sub	sp, #20
   1f298:	08e4      	lsrs	r4, r4, #3
	if (!log_backend_is_active(backend)) {
   1f29a:	b91b      	cbnz	r3, 1f2a4 <log_status+0x20>
		shell_warn(shell, "Logs are halted!");
   1f29c:	2104      	movs	r1, #4
   1f29e:	4a21      	ldr	r2, [pc, #132]	; (1f324 <log_status+0xa0>)
   1f2a0:	f007 f94c 	bl	2653c <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
   1f2a4:	2100      	movs	r1, #0
   1f2a6:	4628      	mov	r0, r5
   1f2a8:	4b1f      	ldr	r3, [pc, #124]	; (1f328 <log_status+0xa4>)
   1f2aa:	4a20      	ldr	r2, [pc, #128]	; (1f32c <log_status+0xa8>)
   1f2ac:	f007 f946 	bl	2653c <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL,
   1f2b0:	2100      	movs	r1, #0
   1f2b2:	4628      	mov	r0, r5
   1f2b4:	4a1e      	ldr	r2, [pc, #120]	; (1f330 <log_status+0xac>)
   1f2b6:	f007 f941 	bl	2653c <shell_fprintf>
	for (int16_t i = 0U; i < modules_cnt; i++) {
   1f2ba:	f04f 0800 	mov.w	r8, #0
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
   1f2be:	f8df a074 	ldr.w	sl, [pc, #116]	; 1f334 <log_status+0xb0>
   1f2c2:	f8df b074 	ldr.w	fp, [pc, #116]	; 1f338 <log_status+0xb4>
   1f2c6:	fa0f f788 	sxth.w	r7, r8
	for (int16_t i = 0U; i < modules_cnt; i++) {
   1f2ca:	42a7      	cmp	r7, r4
   1f2cc:	f108 0801 	add.w	r8, r8, #1
   1f2d0:	d303      	bcc.n	1f2da <log_status+0x56>
}
   1f2d2:	2000      	movs	r0, #0
   1f2d4:	b005      	add	sp, #20
   1f2d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   1f2da:	463a      	mov	r2, r7
   1f2dc:	2301      	movs	r3, #1
   1f2de:	2100      	movs	r1, #0
   1f2e0:	4630      	mov	r0, r6
   1f2e2:	f7ff fb39 	bl	1e958 <log_filter_get>
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   1f2e6:	2300      	movs	r3, #0
   1f2e8:	463a      	mov	r2, r7
   1f2ea:	4619      	mov	r1, r3
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   1f2ec:	4681      	mov	r9, r0
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   1f2ee:	4630      	mov	r0, r6
   1f2f0:	f7ff fb32 	bl	1e958 <log_filter_get>
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
   1f2f4:	4639      	mov	r1, r7
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   1f2f6:	9003      	str	r0, [sp, #12]
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
   1f2f8:	2000      	movs	r0, #0
   1f2fa:	f7ff fa6d 	bl	1e7d8 <log_source_name_get>
   1f2fe:	9a03      	ldr	r2, [sp, #12]
   1f300:	4603      	mov	r3, r0
   1f302:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
   1f306:	2100      	movs	r1, #0
   1f308:	9201      	str	r2, [sp, #4]
   1f30a:	f85a 2029 	ldr.w	r2, [sl, r9, lsl #2]
   1f30e:	4628      	mov	r0, r5
   1f310:	9200      	str	r2, [sp, #0]
   1f312:	465a      	mov	r2, fp
   1f314:	f007 f912 	bl	2653c <shell_fprintf>
	for (int16_t i = 0U; i < modules_cnt; i++) {
   1f318:	e7d5      	b.n	1f2c6 <log_status+0x42>
   1f31a:	bf00      	nop
   1f31c:	000285c4 	.word	0x000285c4
   1f320:	00028624 	.word	0x00028624
   1f324:	0002b702 	.word	0x0002b702
   1f328:	0002b714 	.word	0x0002b714
   1f32c:	0002b720 	.word	0x0002b720
   1f330:	0002b73e 	.word	0x0002b73e
   1f334:	0002a8cc 	.word	0x0002a8cc
   1f338:	0002b77b 	.word	0x0002b77b

0001f33c <module_name_get>:
	entry->handler = NULL;
   1f33c:	2300      	movs	r3, #0
	entry->subcmd = &dsub_module_name;
   1f33e:	4a06      	ldr	r2, [pc, #24]	; (1f358 <module_name_get+0x1c>)
{
   1f340:	b510      	push	{r4, lr}
   1f342:	460c      	mov	r4, r1
	entry->handler = NULL;
   1f344:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
   1f346:	604b      	str	r3, [r1, #4]
	entry->subcmd = &dsub_module_name;
   1f348:	608a      	str	r2, [r1, #8]
	entry->syntax = log_source_name_get(CONFIG_LOG_DOMAIN_ID, idx);
   1f34a:	4601      	mov	r1, r0
   1f34c:	4618      	mov	r0, r3
   1f34e:	f7ff fa43 	bl	1e7d8 <log_source_name_get>
   1f352:	6020      	str	r0, [r4, #0]
}
   1f354:	bd10      	pop	{r4, pc}
   1f356:	bf00      	nop
   1f358:	0002a8bc 	.word	0x0002a8bc

0001f35c <shell_backend_cmd_execute>:
{
   1f35c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char const *name = argv[-1];
   1f360:	f852 bc04 	ldr.w	fp, [r2, #-4]
{
   1f364:	4607      	mov	r7, r0
	size_t slen = strlen(name);
   1f366:	4658      	mov	r0, fp
{
   1f368:	4691      	mov	r9, r2
   1f36a:	468a      	mov	sl, r1
   1f36c:	9300      	str	r3, [sp, #0]
	size_t slen = strlen(name);
   1f36e:	f008 f95b 	bl	27628 <strlen>
	for (int i = 0; i < log_backend_count_get(); i++) {
   1f372:	f04f 0800 	mov.w	r8, #0
	size_t slen = strlen(name);
   1f376:	4602      	mov	r2, r0
	return __log_backends_end - __log_backends_start;
   1f378:	4c13      	ldr	r4, [pc, #76]	; (1f3c8 <shell_backend_cmd_execute+0x6c>)
   1f37a:	4e14      	ldr	r6, [pc, #80]	; (1f3cc <shell_backend_cmd_execute+0x70>)
   1f37c:	1b36      	subs	r6, r6, r4
   1f37e:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   1f380:	45b0      	cmp	r8, r6
   1f382:	db08      	blt.n	1f396 <shell_backend_cmd_execute+0x3a>
		shell_error(shell, "Invalid backend: %s", name);
   1f384:	465b      	mov	r3, fp
   1f386:	2102      	movs	r1, #2
   1f388:	4638      	mov	r0, r7
   1f38a:	4a11      	ldr	r2, [pc, #68]	; (1f3d0 <shell_backend_cmd_execute+0x74>)
   1f38c:	f007 f8d6 	bl	2653c <shell_fprintf>
		return -ENOEXEC;
   1f390:	f06f 0507 	mvn.w	r5, #7
   1f394:	e013      	b.n	1f3be <shell_backend_cmd_execute+0x62>
		if (strncmp(name, backend->name, slen) == 0) {
   1f396:	68a1      	ldr	r1, [r4, #8]
   1f398:	4658      	mov	r0, fp
   1f39a:	9201      	str	r2, [sp, #4]
   1f39c:	f008 f960 	bl	27660 <strncmp>
   1f3a0:	3410      	adds	r4, #16
   1f3a2:	4605      	mov	r5, r0
   1f3a4:	b118      	cbz	r0, 1f3ae <shell_backend_cmd_execute+0x52>
	for (int i = 0; i < log_backend_count_get(); i++) {
   1f3a6:	9a01      	ldr	r2, [sp, #4]
   1f3a8:	f108 0801 	add.w	r8, r8, #1
   1f3ac:	e7e8      	b.n	1f380 <shell_backend_cmd_execute+0x24>
		func(shell, backend, argc, argv);
   1f3ae:	4906      	ldr	r1, [pc, #24]	; (1f3c8 <shell_backend_cmd_execute+0x6c>)
   1f3b0:	464b      	mov	r3, r9
   1f3b2:	4652      	mov	r2, sl
   1f3b4:	4638      	mov	r0, r7
   1f3b6:	9c00      	ldr	r4, [sp, #0]
   1f3b8:	eb01 1108 	add.w	r1, r1, r8, lsl #4
   1f3bc:	47a0      	blx	r4
}
   1f3be:	4628      	mov	r0, r5
   1f3c0:	b003      	add	sp, #12
   1f3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f3c6:	bf00      	nop
   1f3c8:	00028624 	.word	0x00028624
   1f3cc:	00028634 	.word	0x00028634
   1f3d0:	0002b78f 	.word	0x0002b78f

0001f3d4 <cmd_log_backend_status>:
{
   1f3d4:	b508      	push	{r3, lr}
	shell_backend_cmd_execute(shell, argc, argv, log_status);
   1f3d6:	4b02      	ldr	r3, [pc, #8]	; (1f3e0 <cmd_log_backend_status+0xc>)
   1f3d8:	f7ff ffc0 	bl	1f35c <shell_backend_cmd_execute>
}
   1f3dc:	2000      	movs	r0, #0
   1f3de:	bd08      	pop	{r3, pc}
   1f3e0:	0001f285 	.word	0x0001f285

0001f3e4 <cmd_log_backend_halt>:
	return shell_backend_cmd_execute(shell, argc, argv, log_halt);
   1f3e4:	4b01      	ldr	r3, [pc, #4]	; (1f3ec <cmd_log_backend_halt+0x8>)
   1f3e6:	f7ff bfb9 	b.w	1f35c <shell_backend_cmd_execute>
   1f3ea:	bf00      	nop
   1f3ec:	000261e5 	.word	0x000261e5

0001f3f0 <cmd_log_backend_go>:
	return shell_backend_cmd_execute(shell, argc, argv, log_go);
   1f3f0:	4b01      	ldr	r3, [pc, #4]	; (1f3f8 <cmd_log_backend_go+0x8>)
   1f3f2:	f7ff bfb3 	b.w	1f35c <shell_backend_cmd_execute>
   1f3f6:	bf00      	nop
   1f3f8:	000261ed 	.word	0x000261ed

0001f3fc <cmd_log_backend_enable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_enable);
   1f3fc:	4b01      	ldr	r3, [pc, #4]	; (1f404 <cmd_log_backend_enable+0x8>)
   1f3fe:	f7ff bfad 	b.w	1f35c <shell_backend_cmd_execute>
   1f402:	bf00      	nop
   1f404:	0001f505 	.word	0x0001f505

0001f408 <cmd_log_backend_disable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_disable);
   1f408:	4b01      	ldr	r3, [pc, #4]	; (1f410 <cmd_log_backend_disable+0x8>)
   1f40a:	f7ff bfa7 	b.w	1f35c <shell_backend_cmd_execute>
   1f40e:	bf00      	nop
   1f410:	00026269 	.word	0x00026269

0001f414 <shell_state_precheck>:
{
   1f414:	b510      	push	{r4, lr}
	if (shell->log_backend->control_block->state
   1f416:	69c3      	ldr	r3, [r0, #28]
   1f418:	68db      	ldr	r3, [r3, #12]
   1f41a:	791c      	ldrb	r4, [r3, #4]
   1f41c:	b92c      	cbnz	r4, 1f42a <shell_state_precheck+0x16>
		shell_error(shell, "Shell log backend not initialized.");
   1f41e:	2102      	movs	r1, #2
   1f420:	4a03      	ldr	r2, [pc, #12]	; (1f430 <shell_state_precheck+0x1c>)
   1f422:	f007 f88b 	bl	2653c <shell_fprintf>
   1f426:	4620      	mov	r0, r4
}
   1f428:	bd10      	pop	{r4, pc}
	return true;
   1f42a:	2001      	movs	r0, #1
   1f42c:	e7fc      	b.n	1f428 <shell_state_precheck+0x14>
   1f42e:	bf00      	nop
   1f430:	0002b7a4 	.word	0x0002b7a4

0001f434 <filters_set>:
{
   1f434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f438:	461f      	mov	r7, r3
   1f43a:	4e2c      	ldr	r6, [pc, #176]	; (1f4ec <filters_set+0xb8>)
   1f43c:	4b2c      	ldr	r3, [pc, #176]	; (1f4f0 <filters_set+0xbc>)
	int cnt = all ? log_sources_count() : argc;
   1f43e:	1e15      	subs	r5, r2, #0
   1f440:	eba6 0603 	sub.w	r6, r6, r3
   1f444:	ea4f 06d6 	mov.w	r6, r6, lsr #3
   1f448:	bf14      	ite	ne
   1f44a:	462b      	movne	r3, r5
   1f44c:	4633      	moveq	r3, r6
{
   1f44e:	b085      	sub	sp, #20
	int cnt = all ? log_sources_count() : argc;
   1f450:	9302      	str	r3, [sp, #8]
	if (!backend->cb->active) {
   1f452:	684b      	ldr	r3, [r1, #4]
{
   1f454:	4680      	mov	r8, r0
	if (!backend->cb->active) {
   1f456:	795b      	ldrb	r3, [r3, #5]
{
   1f458:	4689      	mov	r9, r1
	if (!backend->cb->active) {
   1f45a:	b91b      	cbnz	r3, 1f464 <filters_set+0x30>
		shell_warn(shell, "Backend not active.");
   1f45c:	2104      	movs	r1, #4
   1f45e:	4a25      	ldr	r2, [pc, #148]	; (1f4f4 <filters_set+0xc0>)
   1f460:	f007 f86c 	bl	2653c <shell_fprintf>
	for (i = 0U; i < modules_cnt; i++) {
   1f464:	2400      	movs	r4, #0
				shell_warn(shell, "%s: level set to %s.",
   1f466:	f8df a098 	ldr.w	sl, [pc, #152]	; 1f500 <filters_set+0xcc>
	for (i = 0; i < cnt; i++) {
   1f46a:	9b02      	ldr	r3, [sp, #8]
   1f46c:	429c      	cmp	r4, r3
   1f46e:	db02      	blt.n	1f476 <filters_set+0x42>
}
   1f470:	b005      	add	sp, #20
   1f472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		id = all ? i : module_id_get(argv[i]);
   1f476:	b3bd      	cbz	r5, 1f4e8 <filters_set+0xb4>
	for (i = 0U; i < modules_cnt; i++) {
   1f478:	2300      	movs	r3, #0
		id = all ? i : module_id_get(argv[i]);
   1f47a:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
	for (i = 0U; i < modules_cnt; i++) {
   1f47e:	429e      	cmp	r6, r3
   1f480:	d107      	bne.n	1f492 <filters_set+0x5e>
			shell_error(shell, "%s: unknown source name.", argv[i]);
   1f482:	2102      	movs	r1, #2
   1f484:	4640      	mov	r0, r8
   1f486:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f48a:	4a1b      	ldr	r2, [pc, #108]	; (1f4f8 <filters_set+0xc4>)
   1f48c:	f007 f856 	bl	2653c <shell_fprintf>
   1f490:	e023      	b.n	1f4da <filters_set+0xa6>
		tmp_name = log_source_name_get(CONFIG_LOG_DOMAIN_ID, i);
   1f492:	4619      	mov	r1, r3
   1f494:	2000      	movs	r0, #0
   1f496:	9303      	str	r3, [sp, #12]
   1f498:	f7ff f99e 	bl	1e7d8 <log_source_name_get>
		if (strncmp(tmp_name, name, 64) == 0) {
   1f49c:	2240      	movs	r2, #64	; 0x40
   1f49e:	4659      	mov	r1, fp
   1f4a0:	f008 f8de 	bl	27660 <strncmp>
   1f4a4:	9b03      	ldr	r3, [sp, #12]
   1f4a6:	b9d0      	cbnz	r0, 1f4de <filters_set+0xaa>
			return i;
   1f4a8:	461a      	mov	r2, r3
	return z_impl_log_filter_set(backend, domain_id, source_id, level);
   1f4aa:	2100      	movs	r1, #0
   1f4ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f4ae:	4648      	mov	r0, r9
   1f4b0:	b212      	sxth	r2, r2
   1f4b2:	f7ff f99f 	bl	1e7f4 <z_impl_log_filter_set>
			if (set_lvl != level) {
   1f4b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f4b8:	4683      	mov	fp, r0
   1f4ba:	4283      	cmp	r3, r0
   1f4bc:	d00d      	beq.n	1f4da <filters_set+0xa6>
						CONFIG_LOG_DOMAIN_ID, i) :
   1f4be:	b985      	cbnz	r5, 1f4e2 <filters_set+0xae>
					log_source_name_get(
   1f4c0:	4621      	mov	r1, r4
   1f4c2:	4628      	mov	r0, r5
   1f4c4:	f7ff f988 	bl	1e7d8 <log_source_name_get>
   1f4c8:	4603      	mov	r3, r0
				shell_warn(shell, "%s: level set to %s.",
   1f4ca:	f85a 202b 	ldr.w	r2, [sl, fp, lsl #2]
   1f4ce:	2104      	movs	r1, #4
   1f4d0:	9200      	str	r2, [sp, #0]
   1f4d2:	4640      	mov	r0, r8
   1f4d4:	4a09      	ldr	r2, [pc, #36]	; (1f4fc <filters_set+0xc8>)
   1f4d6:	f007 f831 	bl	2653c <shell_fprintf>
	for (i = 0; i < cnt; i++) {
   1f4da:	3401      	adds	r4, #1
   1f4dc:	e7c5      	b.n	1f46a <filters_set+0x36>
	for (i = 0U; i < modules_cnt; i++) {
   1f4de:	3301      	adds	r3, #1
   1f4e0:	e7cd      	b.n	1f47e <filters_set+0x4a>
						CONFIG_LOG_DOMAIN_ID, i) :
   1f4e2:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1f4e6:	e7f0      	b.n	1f4ca <filters_set+0x96>
   1f4e8:	4622      	mov	r2, r4
   1f4ea:	e7de      	b.n	1f4aa <filters_set+0x76>
   1f4ec:	00028624 	.word	0x00028624
   1f4f0:	000285c4 	.word	0x000285c4
   1f4f4:	0002b7c8 	.word	0x0002b7c8
   1f4f8:	0002b7f3 	.word	0x0002b7f3
   1f4fc:	0002b7dd 	.word	0x0002b7dd
   1f500:	0002a8cc 	.word	0x0002a8cc

0001f504 <log_enable>:
{
   1f504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f508:	4606      	mov	r6, r0
   1f50a:	4688      	mov	r8, r1
   1f50c:	4691      	mov	r9, r2
   1f50e:	461d      	mov	r5, r3
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
   1f510:	2700      	movs	r7, #0
	severity_level = severity_level_get(argv[1]);
   1f512:	f8d3 b004 	ldr.w	fp, [r3, #4]
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
   1f516:	f8df a048 	ldr.w	sl, [pc, #72]	; 1f560 <log_enable+0x5c>
		if (strncmp(str, severity_lvls[i], 4) == 0) {
   1f51a:	2204      	movs	r2, #4
   1f51c:	4658      	mov	r0, fp
   1f51e:	f85a 1b04 	ldr.w	r1, [sl], #4
   1f522:	f008 f89d 	bl	27660 <strncmp>
   1f526:	4604      	mov	r4, r0
   1f528:	b170      	cbz	r0, 1f548 <log_enable+0x44>
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
   1f52a:	3701      	adds	r7, #1
   1f52c:	2f05      	cmp	r7, #5
   1f52e:	d1f4      	bne.n	1f51a <log_enable+0x16>
		shell_error(shell, "Invalid severity: %s", argv[1]);
   1f530:	2102      	movs	r1, #2
   1f532:	4630      	mov	r0, r6
   1f534:	686b      	ldr	r3, [r5, #4]
   1f536:	4a09      	ldr	r2, [pc, #36]	; (1f55c <log_enable+0x58>)
   1f538:	f007 f800 	bl	2653c <shell_fprintf>
   1f53c:	f06f 0407 	mvn.w	r4, #7
}
   1f540:	4620      	mov	r0, r4
   1f542:	b003      	add	sp, #12
   1f544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	filters_set(shell, backend, argc - 2, &argv[2], severity_level);
   1f548:	4641      	mov	r1, r8
   1f54a:	4630      	mov	r0, r6
   1f54c:	9700      	str	r7, [sp, #0]
   1f54e:	f105 0308 	add.w	r3, r5, #8
   1f552:	f1a9 0202 	sub.w	r2, r9, #2
   1f556:	f7ff ff6d 	bl	1f434 <filters_set>
	return 0;
   1f55a:	e7f1      	b.n	1f540 <log_enable+0x3c>
   1f55c:	0002b80d 	.word	0x0002b80d
   1f560:	0002a8cc 	.word	0x0002a8cc

0001f564 <cmd_kernel_version>:
#include <drivers/timer/system_timer.h>
#include <kernel.h>

static int cmd_kernel_version(const struct shell *shell,
			      size_t argc, char **argv)
{
   1f564:	b513      	push	{r0, r1, r4, lr}
   1f566:	4604      	mov	r4, r0
	uint32_t version = sys_kernel_version_get();
   1f568:	f004 fbe0 	bl	23d2c <sys_kernel_version_get>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Zephyr version %d.%d.%d",
   1f56c:	f3c0 2307 	ubfx	r3, r0, #8, #8
   1f570:	9301      	str	r3, [sp, #4]
   1f572:	f3c0 4307 	ubfx	r3, r0, #16, #8
   1f576:	9300      	str	r3, [sp, #0]
   1f578:	2100      	movs	r1, #0
   1f57a:	0e03      	lsrs	r3, r0, #24
   1f57c:	4a03      	ldr	r2, [pc, #12]	; (1f58c <cmd_kernel_version+0x28>)
   1f57e:	4620      	mov	r0, r4
   1f580:	f006 ffdc 	bl	2653c <shell_fprintf>
		      SYS_KERNEL_VER_MAJOR(version),
		      SYS_KERNEL_VER_MINOR(version),
		      SYS_KERNEL_VER_PATCHLEVEL(version));
	return 0;
}
   1f584:	2000      	movs	r0, #0
   1f586:	b002      	add	sp, #8
   1f588:	bd10      	pop	{r4, pc}
   1f58a:	bf00      	nop
   1f58c:	0002b9b4 	.word	0x0002b9b4

0001f590 <cmd_kernel_uptime>:

static int cmd_kernel_uptime(const struct shell *shell,
			     size_t argc, char **argv)
{
   1f590:	e92d 4878 	stmdb	sp!, {r3, r4, r5, r6, fp, lr}
   1f594:	4604      	mov	r4, r0
	return z_impl_k_uptime_ticks();
   1f596:	f008 fd08 	bl	27faa <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
   1f59a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   1f59e:	2500      	movs	r5, #0
   1f5a0:	fba0 bc06 	umull	fp, ip, r0, r6
   1f5a4:	fb06 cc01 	mla	ip, r6, r1, ip
   1f5a8:	ea4f 32db 	mov.w	r2, fp, lsr #15
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Uptime: %u ms", k_uptime_get_32());
   1f5ac:	4620      	mov	r0, r4
   1f5ae:	ea42 434c 	orr.w	r3, r2, ip, lsl #17
   1f5b2:	4629      	mov	r1, r5
   1f5b4:	4a02      	ldr	r2, [pc, #8]	; (1f5c0 <cmd_kernel_uptime+0x30>)
   1f5b6:	f006 ffc1 	bl	2653c <shell_fprintf>
	return 0;
}
   1f5ba:	4628      	mov	r0, r5
   1f5bc:	e8bd 8878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, pc}
   1f5c0:	0002b9cd 	.word	0x0002b9cd

0001f5c4 <cmd_kernel_threads>:

}

static int cmd_kernel_threads(const struct shell *shell,
			      size_t argc, char **argv)
{
   1f5c4:	b510      	push	{r4, lr}
   1f5c6:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Scheduler: %u since last call", sys_clock_elapsed());
   1f5c8:	f002 fa3e 	bl	21a48 <sys_clock_elapsed>
   1f5cc:	2100      	movs	r1, #0
   1f5ce:	4603      	mov	r3, r0
   1f5d0:	4a07      	ldr	r2, [pc, #28]	; (1f5f0 <cmd_kernel_threads+0x2c>)
   1f5d2:	4620      	mov	r0, r4
   1f5d4:	f006 ffb2 	bl	2653c <shell_fprintf>
	shell_print(shell, "Threads:");
   1f5d8:	4620      	mov	r0, r4
   1f5da:	4a06      	ldr	r2, [pc, #24]	; (1f5f4 <cmd_kernel_threads+0x30>)
   1f5dc:	2100      	movs	r1, #0
   1f5de:	f006 ffad 	bl	2653c <shell_fprintf>
	k_thread_foreach(shell_tdata_dump, (void *)shell);
   1f5e2:	4621      	mov	r1, r4
   1f5e4:	4804      	ldr	r0, [pc, #16]	; (1f5f8 <cmd_kernel_threads+0x34>)
   1f5e6:	f004 fa35 	bl	23a54 <k_thread_foreach>
	return 0;
}
   1f5ea:	2000      	movs	r0, #0
   1f5ec:	bd10      	pop	{r4, pc}
   1f5ee:	bf00      	nop
   1f5f0:	0002b9dc 	.word	0x0002b9dc
   1f5f4:	0002b9fb 	.word	0x0002b9fb
   1f5f8:	0001f659 	.word	0x0001f659

0001f5fc <cmd_kernel_stacks>:
extern K_KERNEL_STACK_ARRAY_DEFINE(z_interrupt_stacks, CONFIG_MP_NUM_CPUS,
				   CONFIG_ISR_STACK_SIZE);

static int cmd_kernel_stacks(const struct shell *shell,
			     size_t argc, char **argv)
{
   1f5fc:	b530      	push	{r4, r5, lr}
	uint8_t *buf;
	size_t size, unused;

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	k_thread_foreach(shell_stack_dump, (void *)shell);
   1f5fe:	4601      	mov	r1, r0
{
   1f600:	4604      	mov	r4, r0
   1f602:	b087      	sub	sp, #28
	k_thread_foreach(shell_stack_dump, (void *)shell);
   1f604:	4811      	ldr	r0, [pc, #68]	; (1f64c <cmd_kernel_stacks+0x50>)
   1f606:	f004 fa25 	bl	23a54 <k_thread_foreach>
	 */
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
		buf = Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]);
		size = K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]);

		unused = 0;
   1f60a:	2300      	movs	r3, #0
   1f60c:	4a10      	ldr	r2, [pc, #64]	; (1f650 <cmd_kernel_stacks+0x54>)
		for (size_t i = 0; i < size; i++) {
			if (buf[i] == 0xAAU) {
   1f60e:	f812 1b01 	ldrb.w	r1, [r2], #1
   1f612:	29aa      	cmp	r1, #170	; 0xaa
   1f614:	d103      	bne.n	1f61e <cmd_kernel_stacks+0x22>
				unused++;
   1f616:	3301      	adds	r3, #1
		for (size_t i = 0; i < size; i++) {
   1f618:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   1f61c:	d1f7      	bne.n	1f60e <cmd_kernel_stacks+0x12>
			} else {
				break;
			}
		}

		shell_print(shell,
   1f61e:	2264      	movs	r2, #100	; 0x64
   1f620:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
   1f624:	434a      	muls	r2, r1
   1f626:	0ad2      	lsrs	r2, r2, #11
   1f628:	2500      	movs	r5, #0
   1f62a:	9205      	str	r2, [sp, #20]
   1f62c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1f630:	4620      	mov	r0, r4
   1f632:	e9cd 1203 	strd	r1, r2, [sp, #12]
   1f636:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1f63a:	4629      	mov	r1, r5
   1f63c:	4b04      	ldr	r3, [pc, #16]	; (1f650 <cmd_kernel_stacks+0x54>)
   1f63e:	4a05      	ldr	r2, [pc, #20]	; (1f654 <cmd_kernel_stacks+0x58>)
   1f640:	9500      	str	r5, [sp, #0]
   1f642:	f006 ff7b 	bl	2653c <shell_fprintf>
			      size - unused, size,
			      ((size - unused) * 100U) / size);
	}

	return 0;
}
   1f646:	4628      	mov	r0, r5
   1f648:	b007      	add	sp, #28
   1f64a:	bd30      	pop	{r4, r5, pc}
   1f64c:	0001f741 	.word	0x0001f741
   1f650:	20015f20 	.word	0x20015f20
   1f654:	0002ba05 	.word	0x0002ba05

0001f658 <shell_tdata_dump>:
{
   1f658:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f65a:	b087      	sub	sp, #28
   1f65c:	4604      	mov	r4, r0
   1f65e:	460d      	mov	r5, r1
	size_t size = thread->stack_info.size;
   1f660:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
	tname = k_thread_name_get(thread);
   1f664:	f008 fb0a 	bl	27c7c <k_thread_name_get>
   1f668:	4606      	mov	r6, r0
	return z_impl_k_current_get();
   1f66a:	f005 f84d 	bl	24708 <z_impl_k_current_get>
	shell_print(shell, "%s%p %-10s",
   1f66e:	4b25      	ldr	r3, [pc, #148]	; (1f704 <shell_tdata_dump+0xac>)
   1f670:	4a25      	ldr	r2, [pc, #148]	; (1f708 <shell_tdata_dump+0xb0>)
   1f672:	2e00      	cmp	r6, #0
   1f674:	bf08      	it	eq
   1f676:	461e      	moveq	r6, r3
   1f678:	4b24      	ldr	r3, [pc, #144]	; (1f70c <shell_tdata_dump+0xb4>)
   1f67a:	e9cd 4600 	strd	r4, r6, [sp]
   1f67e:	4284      	cmp	r4, r0
   1f680:	bf18      	it	ne
   1f682:	4613      	movne	r3, r2
   1f684:	2100      	movs	r1, #0
   1f686:	4628      	mov	r0, r5
   1f688:	4a21      	ldr	r2, [pc, #132]	; (1f710 <shell_tdata_dump+0xb8>)
   1f68a:	f006 ff57 	bl	2653c <shell_fprintf>
	shell_print(shell, "\toptions: 0x%x, priority: %d timeout: %d",
   1f68e:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   1f692:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1f696:	f994 300e 	ldrsb.w	r3, [r4, #14]
   1f69a:	2100      	movs	r1, #0
   1f69c:	4628      	mov	r0, r5
   1f69e:	4a1d      	ldr	r2, [pc, #116]	; (1f714 <shell_tdata_dump+0xbc>)
   1f6a0:	9300      	str	r3, [sp, #0]
   1f6a2:	7b23      	ldrb	r3, [r4, #12]
   1f6a4:	f006 ff4a 	bl	2653c <shell_fprintf>
	shell_print(shell, "\tstate: %s, entry: %p", k_thread_state_str(thread),
   1f6a8:	4620      	mov	r0, r4
   1f6aa:	f004 fa1b 	bl	23ae4 <k_thread_state_str>
   1f6ae:	4606      	mov	r6, r0
   1f6b0:	f104 0364 	add.w	r3, r4, #100	; 0x64
   1f6b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1f6b6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   1f6ba:	4633      	mov	r3, r6
   1f6bc:	2100      	movs	r1, #0
   1f6be:	4628      	mov	r0, r5
   1f6c0:	4a15      	ldr	r2, [pc, #84]	; (1f718 <shell_tdata_dump+0xc0>)
   1f6c2:	f006 ff3b 	bl	2653c <shell_fprintf>
	return z_impl_k_thread_stack_space_get(thread, unused_ptr);
   1f6c6:	a905      	add	r1, sp, #20
   1f6c8:	4620      	mov	r0, r4
   1f6ca:	f008 fadb 	bl	27c84 <z_impl_k_thread_stack_space_get>
	if (ret) {
   1f6ce:	4601      	mov	r1, r0
   1f6d0:	b138      	cbz	r0, 1f6e2 <shell_tdata_dump+0x8a>
		shell_print(shell,
   1f6d2:	4603      	mov	r3, r0
   1f6d4:	2100      	movs	r1, #0
   1f6d6:	4628      	mov	r0, r5
   1f6d8:	4a10      	ldr	r2, [pc, #64]	; (1f71c <shell_tdata_dump+0xc4>)
   1f6da:	f006 ff2f 	bl	2653c <shell_fprintf>
}
   1f6de:	b007      	add	sp, #28
   1f6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcnt = ((size - unused) * 100U) / size;
   1f6e2:	2364      	movs	r3, #100	; 0x64
   1f6e4:	9a05      	ldr	r2, [sp, #20]
   1f6e6:	1ab8      	subs	r0, r7, r2
   1f6e8:	4343      	muls	r3, r0
   1f6ea:	fbb3 f3f7 	udiv	r3, r3, r7
		shell_print(shell,
   1f6ee:	e9cd 2000 	strd	r2, r0, [sp]
   1f6f2:	e9cd 7302 	strd	r7, r3, [sp, #8]
   1f6f6:	4628      	mov	r0, r5
   1f6f8:	463b      	mov	r3, r7
   1f6fa:	4a09      	ldr	r2, [pc, #36]	; (1f720 <shell_tdata_dump+0xc8>)
   1f6fc:	f006 ff1e 	bl	2653c <shell_fprintf>
}
   1f700:	e7ed      	b.n	1f6de <shell_tdata_dump+0x86>
   1f702:	bf00      	nop
   1f704:	0002ba4b 	.word	0x0002ba4b
   1f708:	0002b68d 	.word	0x0002b68d
   1f70c:	0002ca85 	.word	0x0002ca85
   1f710:	0002ba4e 	.word	0x0002ba4e
   1f714:	0002ba5a 	.word	0x0002ba5a
   1f718:	0002ba84 	.word	0x0002ba84
   1f71c:	0002ba9b 	.word	0x0002ba9b
   1f720:	0002bac8 	.word	0x0002bac8

0001f724 <cmd_kernel_cycles>:
{
   1f724:	b510      	push	{r4, lr}
   1f726:	4604      	mov	r4, r0
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   1f728:	f002 f99c 	bl	21a64 <sys_clock_cycle_get_32>
	shell_print(shell, "cycles: %u hw cycles", k_cycle_get_32());
   1f72c:	2100      	movs	r1, #0
   1f72e:	4603      	mov	r3, r0
   1f730:	4a02      	ldr	r2, [pc, #8]	; (1f73c <cmd_kernel_cycles+0x18>)
   1f732:	4620      	mov	r0, r4
   1f734:	f006 ff02 	bl	2653c <shell_fprintf>
}
   1f738:	2000      	movs	r0, #0
   1f73a:	bd10      	pop	{r4, pc}
   1f73c:	0002baff 	.word	0x0002baff

0001f740 <shell_stack_dump>:
{
   1f740:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f742:	4605      	mov	r5, r0
   1f744:	460e      	mov	r6, r1
	size_t size = thread->stack_info.size;
   1f746:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
{
   1f74a:	b089      	sub	sp, #36	; 0x24
   1f74c:	a907      	add	r1, sp, #28
   1f74e:	f008 fa99 	bl	27c84 <z_impl_k_thread_stack_space_get>
	if (ret) {
   1f752:	4604      	mov	r4, r0
   1f754:	b138      	cbz	r0, 1f766 <shell_stack_dump+0x26>
		shell_print(shell,
   1f756:	4603      	mov	r3, r0
   1f758:	2100      	movs	r1, #0
   1f75a:	4630      	mov	r0, r6
   1f75c:	4a0f      	ldr	r2, [pc, #60]	; (1f79c <shell_stack_dump+0x5c>)
   1f75e:	f006 feed 	bl	2653c <shell_fprintf>
}
   1f762:	b009      	add	sp, #36	; 0x24
   1f764:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tname = k_thread_name_get((struct k_thread *)thread);
   1f766:	4628      	mov	r0, r5
   1f768:	f008 fa88 	bl	27c7c <k_thread_name_get>
	pcnt = ((size - unused) * 100U) / size;
   1f76c:	2364      	movs	r3, #100	; 0x64
   1f76e:	9a07      	ldr	r2, [sp, #28]
	shell_print((const struct shell *)user_data,
   1f770:	f8df c030 	ldr.w	ip, [pc, #48]	; 1f7a4 <shell_stack_dump+0x64>
	pcnt = ((size - unused) * 100U) / size;
   1f774:	1ab9      	subs	r1, r7, r2
   1f776:	434b      	muls	r3, r1
	shell_print((const struct shell *)user_data,
   1f778:	2800      	cmp	r0, #0
   1f77a:	bf08      	it	eq
   1f77c:	4660      	moveq	r0, ip
	pcnt = ((size - unused) * 100U) / size;
   1f77e:	fbb3 f3f7 	udiv	r3, r3, r7
	shell_print((const struct shell *)user_data,
   1f782:	e9cd 2102 	strd	r2, r1, [sp, #8]
   1f786:	e9cd 7304 	strd	r7, r3, [sp, #16]
   1f78a:	e9cd 0700 	strd	r0, r7, [sp]
   1f78e:	462b      	mov	r3, r5
   1f790:	4621      	mov	r1, r4
   1f792:	4630      	mov	r0, r6
   1f794:	4a02      	ldr	r2, [pc, #8]	; (1f7a0 <shell_stack_dump+0x60>)
   1f796:	f006 fed1 	bl	2653c <shell_fprintf>
   1f79a:	e7e2      	b.n	1f762 <shell_stack_dump+0x22>
   1f79c:	0002ba9b 	.word	0x0002ba9b
   1f7a0:	0002bb15 	.word	0x0002bb15
   1f7a4:	0002ba4b 	.word	0x0002ba4b

0001f7a8 <get_device_name>:
};

static const char *get_device_name(const struct device *dev,
				   char *buf,
				   size_t len)
{
   1f7a8:	4603      	mov	r3, r0
	const char *name = dev->name;
   1f7aa:	6800      	ldr	r0, [r0, #0]
{
   1f7ac:	b510      	push	{r4, lr}
   1f7ae:	460c      	mov	r4, r1
   1f7b0:	4611      	mov	r1, r2

	if ((name == NULL) || (name[0] == 0)) {
   1f7b2:	b108      	cbz	r0, 1f7b8 <get_device_name+0x10>
   1f7b4:	7802      	ldrb	r2, [r0, #0]
   1f7b6:	b922      	cbnz	r2, 1f7c2 <get_device_name+0x1a>
		snprintf(buf, len, "[%p]", dev);
   1f7b8:	4620      	mov	r0, r4
   1f7ba:	4a02      	ldr	r2, [pc, #8]	; (1f7c4 <get_device_name+0x1c>)
   1f7bc:	f002 ffe8 	bl	22790 <snprintf>
		name = buf;
   1f7c0:	4620      	mov	r0, r4
	}

	return name;
}
   1f7c2:	bd10      	pop	{r4, pc}
   1f7c4:	0002bc1b 	.word	0x0002bc1b

0001f7c8 <cmd_device_list_visitor>:
	size_t buf_size;
};

static int cmd_device_list_visitor(const struct device *dev,
				   void *context)
{
   1f7c8:	b510      	push	{r4, lr}
	const struct cmd_device_list_visitor_context *ctx = context;

	shell_fprintf(ctx->shell, SHELL_NORMAL, "  requires: %s\n",
   1f7ca:	680c      	ldr	r4, [r1, #0]
   1f7cc:	e9d1 1201 	ldrd	r1, r2, [r1, #4]
   1f7d0:	f7ff ffea 	bl	1f7a8 <get_device_name>
   1f7d4:	2100      	movs	r1, #0
   1f7d6:	4603      	mov	r3, r0
   1f7d8:	4a02      	ldr	r2, [pc, #8]	; (1f7e4 <cmd_device_list_visitor+0x1c>)
   1f7da:	4620      	mov	r0, r4
   1f7dc:	f006 feae 	bl	2653c <shell_fprintf>
		      get_device_name(dev, ctx->buf, ctx->buf_size));

	return 0;
}
   1f7e0:	2000      	movs	r0, #0
   1f7e2:	bd10      	pop	{r4, pc}
   1f7e4:	0002bc20 	.word	0x0002bc20

0001f7e8 <cmd_device_list>:

static int cmd_device_list(const struct shell *shell,
			   size_t argc, char **argv)
{
   1f7e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f7ec:	b08a      	sub	sp, #40	; 0x28
   1f7ee:	4605      	mov	r5, r0
	const struct device *devlist;
	size_t devcnt = z_device_get_all_static(&devlist);
   1f7f0:	a801      	add	r0, sp, #4
   1f7f2:	f003 ff33 	bl	2365c <z_device_get_all_static>
	const struct device *devlist_end = devlist + devcnt;
   1f7f6:	2618      	movs	r6, #24
   1f7f8:	9b01      	ldr	r3, [sp, #4]
	const struct device *dev;
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
   1f7fa:	2100      	movs	r1, #0
	const struct device *devlist_end = devlist + devcnt;
   1f7fc:	fb06 3600 	mla	r6, r6, r0, r3
	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
   1f800:	4a19      	ldr	r2, [pc, #100]	; (1f868 <cmd_device_list+0x80>)
   1f802:	4628      	mov	r0, r5
   1f804:	f006 fe9a 	bl	2653c <shell_fprintf>
	for (dev = devlist; dev < devlist_end; dev++) {
		char buf[20];
		const char *name = get_device_name(dev, buf, sizeof(buf));
		const char *state = "READY";

		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
   1f808:	f8df 8068 	ldr.w	r8, [pc, #104]	; 1f874 <cmd_device_list+0x8c>
	for (dev = devlist; dev < devlist_end; dev++) {
   1f80c:	9c01      	ldr	r4, [sp, #4]
		if (!device_is_ready(dev)) {
			state = "DISABLED";
   1f80e:	f8df 9068 	ldr.w	r9, [pc, #104]	; 1f878 <cmd_device_list+0x90>
   1f812:	f8df a068 	ldr.w	sl, [pc, #104]	; 1f87c <cmd_device_list+0x94>
	for (dev = devlist; dev < devlist_end; dev++) {
   1f816:	42b4      	cmp	r4, r6
   1f818:	d303      	bcc.n	1f822 <cmd_device_list+0x3a>
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
		}
	}

	return 0;
}
   1f81a:	2000      	movs	r0, #0
   1f81c:	b00a      	add	sp, #40	; 0x28
   1f81e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const char *name = get_device_name(dev, buf, sizeof(buf));
   1f822:	af05      	add	r7, sp, #20
   1f824:	4639      	mov	r1, r7
   1f826:	2214      	movs	r2, #20
   1f828:	4620      	mov	r0, r4
   1f82a:	f7ff ffbd 	bl	1f7a8 <get_device_name>
		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
   1f82e:	4642      	mov	r2, r8
		const char *name = get_device_name(dev, buf, sizeof(buf));
   1f830:	4603      	mov	r3, r0
		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
   1f832:	2100      	movs	r1, #0
   1f834:	4628      	mov	r0, r5
   1f836:	f006 fe81 	bl	2653c <shell_fprintf>
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   1f83a:	4620      	mov	r0, r4
   1f83c:	f008 f9ca 	bl	27bd4 <z_device_ready>
		shell_fprintf(shell, SHELL_NORMAL, " (%s)\n", state);
   1f840:	2100      	movs	r1, #0
   1f842:	2800      	cmp	r0, #0
   1f844:	bf14      	ite	ne
   1f846:	464b      	movne	r3, r9
   1f848:	4653      	moveq	r3, sl
   1f84a:	4a08      	ldr	r2, [pc, #32]	; (1f86c <cmd_device_list+0x84>)
   1f84c:	4628      	mov	r0, r5
   1f84e:	f006 fe75 	bl	2653c <shell_fprintf>
			struct cmd_device_list_visitor_context ctx = {
   1f852:	2314      	movs	r3, #20
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
   1f854:	4620      	mov	r0, r4
   1f856:	4906      	ldr	r1, [pc, #24]	; (1f870 <cmd_device_list+0x88>)
   1f858:	aa02      	add	r2, sp, #8
			struct cmd_device_list_visitor_context ctx = {
   1f85a:	e9cd 5702 	strd	r5, r7, [sp, #8]
   1f85e:	9304      	str	r3, [sp, #16]
	for (dev = devlist; dev < devlist_end; dev++) {
   1f860:	3418      	adds	r4, #24
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
   1f862:	f003 ff35 	bl	236d0 <device_required_foreach>
	for (dev = devlist; dev < devlist_end; dev++) {
   1f866:	e7d6      	b.n	1f816 <cmd_device_list+0x2e>
   1f868:	0002bc3f 	.word	0x0002bc3f
   1f86c:	0002bc4e 	.word	0x0002bc4e
   1f870:	0001f7c9 	.word	0x0001f7c9
   1f874:	0002bc49 	.word	0x0002bc49
   1f878:	0002bc30 	.word	0x0002bc30
   1f87c:	0002bc36 	.word	0x0002bc36

0001f880 <device_get_config_level>:
{
   1f880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f884:	4606      	mov	r6, r0
	bool devices = false;
   1f886:	2700      	movs	r7, #0
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
   1f888:	4b10      	ldr	r3, [pc, #64]	; (1f8cc <device_get_config_level+0x4c>)
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
   1f88a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 1f8d0 <device_get_config_level+0x50>
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
   1f88e:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
   1f892:	3101      	adds	r1, #1
   1f894:	f853 8021 	ldr.w	r8, [r3, r1, lsl #2]
{
   1f898:	b087      	sub	sp, #28
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
   1f89a:	45a0      	cmp	r8, r4
   1f89c:	d803      	bhi.n	1f8a6 <device_get_config_level+0x26>
}
   1f89e:	4638      	mov	r0, r7
   1f8a0:	b007      	add	sp, #28
   1f8a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f8a6:	4620      	mov	r0, r4
   1f8a8:	f008 f994 	bl	27bd4 <z_device_ready>
   1f8ac:	4605      	mov	r5, r0
   1f8ae:	b158      	cbz	r0, 1f8c8 <device_get_config_level+0x48>
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
   1f8b0:	2214      	movs	r2, #20
   1f8b2:	a901      	add	r1, sp, #4
   1f8b4:	4620      	mov	r0, r4
   1f8b6:	f7ff ff77 	bl	1f7a8 <get_device_name>
   1f8ba:	464a      	mov	r2, r9
   1f8bc:	4603      	mov	r3, r0
   1f8be:	2100      	movs	r1, #0
   1f8c0:	4630      	mov	r0, r6
   1f8c2:	f006 fe3b 	bl	2653c <shell_fprintf>
			devices = true;
   1f8c6:	462f      	mov	r7, r5
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
   1f8c8:	3418      	adds	r4, #24
   1f8ca:	e7e6      	b.n	1f89a <device_get_config_level+0x1a>
   1f8cc:	0002ab30 	.word	0x0002ab30
   1f8d0:	0002bc55 	.word	0x0002bc55

0001f8d4 <cmd_device_levels>:
{
   1f8d4:	b510      	push	{r4, lr}
   1f8d6:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
   1f8d8:	2100      	movs	r1, #0
   1f8da:	4a1e      	ldr	r2, [pc, #120]	; (1f954 <cmd_device_levels+0x80>)
   1f8dc:	f006 fe2e 	bl	2653c <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_1);
   1f8e0:	2100      	movs	r1, #0
   1f8e2:	4620      	mov	r0, r4
   1f8e4:	f7ff ffcc 	bl	1f880 <device_get_config_level>
	if (ret == false) {
   1f8e8:	4601      	mov	r1, r0
   1f8ea:	b918      	cbnz	r0, 1f8f4 <cmd_device_levels+0x20>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
   1f8ec:	4620      	mov	r0, r4
   1f8ee:	4a1a      	ldr	r2, [pc, #104]	; (1f958 <cmd_device_levels+0x84>)
   1f8f0:	f006 fe24 	bl	2653c <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 2:\n");
   1f8f4:	2100      	movs	r1, #0
   1f8f6:	4620      	mov	r0, r4
   1f8f8:	4a18      	ldr	r2, [pc, #96]	; (1f95c <cmd_device_levels+0x88>)
   1f8fa:	f006 fe1f 	bl	2653c <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_2);
   1f8fe:	2101      	movs	r1, #1
   1f900:	4620      	mov	r0, r4
   1f902:	f7ff ffbd 	bl	1f880 <device_get_config_level>
	if (ret == false) {
   1f906:	4601      	mov	r1, r0
   1f908:	b918      	cbnz	r0, 1f912 <cmd_device_levels+0x3e>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
   1f90a:	4620      	mov	r0, r4
   1f90c:	4a12      	ldr	r2, [pc, #72]	; (1f958 <cmd_device_levels+0x84>)
   1f90e:	f006 fe15 	bl	2653c <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "POST_KERNEL:\n");
   1f912:	2100      	movs	r1, #0
   1f914:	4620      	mov	r0, r4
   1f916:	4a12      	ldr	r2, [pc, #72]	; (1f960 <cmd_device_levels+0x8c>)
   1f918:	f006 fe10 	bl	2653c <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_POST_KERNEL);
   1f91c:	2102      	movs	r1, #2
   1f91e:	4620      	mov	r0, r4
   1f920:	f7ff ffae 	bl	1f880 <device_get_config_level>
	if (ret == false) {
   1f924:	4601      	mov	r1, r0
   1f926:	b918      	cbnz	r0, 1f930 <cmd_device_levels+0x5c>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
   1f928:	4620      	mov	r0, r4
   1f92a:	4a0b      	ldr	r2, [pc, #44]	; (1f958 <cmd_device_levels+0x84>)
   1f92c:	f006 fe06 	bl	2653c <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "APPLICATION:\n");
   1f930:	2100      	movs	r1, #0
   1f932:	4620      	mov	r0, r4
   1f934:	4a0b      	ldr	r2, [pc, #44]	; (1f964 <cmd_device_levels+0x90>)
   1f936:	f006 fe01 	bl	2653c <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_APPLICATION);
   1f93a:	2103      	movs	r1, #3
   1f93c:	4620      	mov	r0, r4
   1f93e:	f7ff ff9f 	bl	1f880 <device_get_config_level>
	if (ret == false) {
   1f942:	4601      	mov	r1, r0
   1f944:	b918      	cbnz	r0, 1f94e <cmd_device_levels+0x7a>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
   1f946:	4620      	mov	r0, r4
   1f948:	4a03      	ldr	r2, [pc, #12]	; (1f958 <cmd_device_levels+0x84>)
   1f94a:	f006 fdf7 	bl	2653c <shell_fprintf>
}
   1f94e:	2000      	movs	r0, #0
   1f950:	bd10      	pop	{r4, pc}
   1f952:	bf00      	nop
   1f954:	0002bc5b 	.word	0x0002bc5b
   1f958:	0002bc6a 	.word	0x0002bc6a
   1f95c:	0002bc72 	.word	0x0002bc72
   1f960:	0002bc81 	.word	0x0002bc81
   1f964:	0002bc8f 	.word	0x0002bc8f

0001f968 <date_print>:

#define HELP_NONE      "[none]"
#define HELP_DATE_SET  "[Y-m-d] <H:M:S>"

static void date_print(const struct shell *shell, struct tm *tm)
{
   1f968:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	shell_print(shell,
   1f96a:	680a      	ldr	r2, [r1, #0]
   1f96c:	694b      	ldr	r3, [r1, #20]
   1f96e:	9204      	str	r2, [sp, #16]
   1f970:	684a      	ldr	r2, [r1, #4]
   1f972:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   1f976:	9203      	str	r2, [sp, #12]
   1f978:	688a      	ldr	r2, [r1, #8]
   1f97a:	9202      	str	r2, [sp, #8]
   1f97c:	68ca      	ldr	r2, [r1, #12]
   1f97e:	9201      	str	r2, [sp, #4]
   1f980:	690a      	ldr	r2, [r1, #16]
   1f982:	2100      	movs	r1, #0
   1f984:	3201      	adds	r2, #1
   1f986:	9200      	str	r2, [sp, #0]
   1f988:	4a02      	ldr	r2, [pc, #8]	; (1f994 <date_print+0x2c>)
   1f98a:	f006 fdd7 	bl	2653c <shell_fprintf>
		    tm->tm_mon + 1,
		    tm->tm_mday,
		    tm->tm_hour,
		    tm->tm_min,
		    tm->tm_sec);
}
   1f98e:	b007      	add	sp, #28
   1f990:	f85d fb04 	ldr.w	pc, [sp], #4
   1f994:	0002bcf3 	.word	0x0002bcf3

0001f998 <get_h_m_s>:
 * For user convenience of small adjustments to time the time argument will
 * accept H:M:S, :M:S or ::S where the missing field(s) will be filled in by
 * the previous time state.
 */
static int get_h_m_s(const struct shell *shell, struct tm *tm, char *time_str)
{
   1f998:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	char *endptr;

	if (*time_str == ':') {
   1f99a:	7813      	ldrb	r3, [r2, #0]
{
   1f99c:	4606      	mov	r6, r0
	if (*time_str == ':') {
   1f99e:	2b3a      	cmp	r3, #58	; 0x3a
{
   1f9a0:	460f      	mov	r7, r1
   1f9a2:	4615      	mov	r5, r2
	if (*time_str == ':') {
   1f9a4:	d116      	bne.n	1f9d4 <get_h_m_s+0x3c>
		time_str++;
   1f9a6:	1c54      	adds	r4, r2, #1
		} else {
			return -EINVAL;
		}
	}

	if (*time_str == ':') {
   1f9a8:	7823      	ldrb	r3, [r4, #0]
   1f9aa:	2b3a      	cmp	r3, #58	; 0x3a
   1f9ac:	d12e      	bne.n	1fa0c <get_h_m_s+0x74>
		time_str++;
   1f9ae:	3401      	adds	r4, #1
		} else {
			return -EINVAL;
		}
	}

	endptr = NULL;
   1f9b0:	2300      	movs	r3, #0
	tm->tm_sec = strtol(time_str, &endptr, 10);
   1f9b2:	220a      	movs	r2, #10
   1f9b4:	4620      	mov	r0, r4
   1f9b6:	a901      	add	r1, sp, #4
	endptr = NULL;
   1f9b8:	9301      	str	r3, [sp, #4]
	tm->tm_sec = strtol(time_str, &endptr, 10);
   1f9ba:	f007 fd74 	bl	274a6 <strtol>
	if ((endptr == time_str) || (*endptr != '\0')) {
   1f9be:	9a01      	ldr	r2, [sp, #4]
	tm->tm_sec = strtol(time_str, &endptr, 10);
   1f9c0:	4603      	mov	r3, r0
	if ((endptr == time_str) || (*endptr != '\0')) {
   1f9c2:	42a2      	cmp	r2, r4
	tm->tm_sec = strtol(time_str, &endptr, 10);
   1f9c4:	6038      	str	r0, [r7, #0]
	if ((endptr == time_str) || (*endptr != '\0')) {
   1f9c6:	d010      	beq.n	1f9ea <get_h_m_s+0x52>
   1f9c8:	7810      	ldrb	r0, [r2, #0]
   1f9ca:	b970      	cbnz	r0, 1f9ea <get_h_m_s+0x52>
		return -EINVAL;
	}

	/* Note range allows for a leap second */
	if ((tm->tm_sec < 0) || (tm->tm_sec > 60)) {
   1f9cc:	2b3c      	cmp	r3, #60	; 0x3c
   1f9ce:	d90e      	bls.n	1f9ee <get_h_m_s+0x56>
		shell_error(shell, "Invalid second");
   1f9d0:	4a18      	ldr	r2, [pc, #96]	; (1fa34 <get_h_m_s+0x9c>)
   1f9d2:	e014      	b.n	1f9fe <get_h_m_s+0x66>
		endptr = NULL;
   1f9d4:	2300      	movs	r3, #0
		tm->tm_hour = strtol(time_str, &endptr, 10);
   1f9d6:	220a      	movs	r2, #10
   1f9d8:	4628      	mov	r0, r5
   1f9da:	a901      	add	r1, sp, #4
		endptr = NULL;
   1f9dc:	9301      	str	r3, [sp, #4]
		tm->tm_hour = strtol(time_str, &endptr, 10);
   1f9de:	f007 fd62 	bl	274a6 <strtol>
		if (endptr == time_str) {
   1f9e2:	9c01      	ldr	r4, [sp, #4]
		tm->tm_hour = strtol(time_str, &endptr, 10);
   1f9e4:	60b8      	str	r0, [r7, #8]
		if (endptr == time_str) {
   1f9e6:	42ac      	cmp	r4, r5
   1f9e8:	d103      	bne.n	1f9f2 <get_h_m_s+0x5a>
		return -EINVAL;
   1f9ea:	f06f 0015 	mvn.w	r0, #21
	}

	return 0;
}
   1f9ee:	b003      	add	sp, #12
   1f9f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (*endptr == ':') {
   1f9f2:	7823      	ldrb	r3, [r4, #0]
   1f9f4:	2b3a      	cmp	r3, #58	; 0x3a
   1f9f6:	d1f8      	bne.n	1f9ea <get_h_m_s+0x52>
			if ((tm->tm_hour < 0) || (tm->tm_hour > 23)) {
   1f9f8:	2817      	cmp	r0, #23
   1f9fa:	d905      	bls.n	1fa08 <get_h_m_s+0x70>
				shell_error(shell, "Invalid hour");
   1f9fc:	4a0e      	ldr	r2, [pc, #56]	; (1fa38 <get_h_m_s+0xa0>)
		shell_error(shell, "Invalid second");
   1f9fe:	2102      	movs	r1, #2
   1fa00:	4630      	mov	r0, r6
   1fa02:	f006 fd9b 	bl	2653c <shell_fprintf>
   1fa06:	e7f0      	b.n	1f9ea <get_h_m_s+0x52>
			time_str = endptr + 1;
   1fa08:	3401      	adds	r4, #1
   1fa0a:	e7cd      	b.n	1f9a8 <get_h_m_s+0x10>
		endptr = NULL;
   1fa0c:	2300      	movs	r3, #0
		tm->tm_min = strtol(time_str, &endptr, 10);
   1fa0e:	220a      	movs	r2, #10
   1fa10:	4620      	mov	r0, r4
   1fa12:	a901      	add	r1, sp, #4
		endptr = NULL;
   1fa14:	9301      	str	r3, [sp, #4]
		tm->tm_min = strtol(time_str, &endptr, 10);
   1fa16:	f007 fd46 	bl	274a6 <strtol>
		if (endptr == time_str) {
   1fa1a:	9a01      	ldr	r2, [sp, #4]
		tm->tm_min = strtol(time_str, &endptr, 10);
   1fa1c:	6078      	str	r0, [r7, #4]
		if (endptr == time_str) {
   1fa1e:	42a2      	cmp	r2, r4
   1fa20:	d0e3      	beq.n	1f9ea <get_h_m_s+0x52>
		} else if (*endptr == ':') {
   1fa22:	7813      	ldrb	r3, [r2, #0]
   1fa24:	2b3a      	cmp	r3, #58	; 0x3a
   1fa26:	d1e0      	bne.n	1f9ea <get_h_m_s+0x52>
			if ((tm->tm_min < 0) || (tm->tm_min > 59)) {
   1fa28:	283b      	cmp	r0, #59	; 0x3b
   1fa2a:	d901      	bls.n	1fa30 <get_h_m_s+0x98>
				shell_error(shell, "Invalid minute");
   1fa2c:	4a03      	ldr	r2, [pc, #12]	; (1fa3c <get_h_m_s+0xa4>)
   1fa2e:	e7e6      	b.n	1f9fe <get_h_m_s+0x66>
			time_str = endptr + 1;
   1fa30:	1c54      	adds	r4, r2, #1
   1fa32:	e7bd      	b.n	1f9b0 <get_h_m_s+0x18>
   1fa34:	0002bd32 	.word	0x0002bd32
   1fa38:	0002bd14 	.word	0x0002bd14
   1fa3c:	0002bd22 	.word	0x0002bd22

0001fa40 <cmd_date_set>:

static int cmd_date_set(const struct shell *shell, size_t argc, char **argv)
{
   1fa40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1fa44:	4604      	mov	r4, r0
   1fa46:	460d      	mov	r5, r1
   1fa48:	4617      	mov	r7, r2
   1fa4a:	b091      	sub	sp, #68	; 0x44
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&clock_id, *(uintptr_t *)&ts, K_SYSCALL_CLOCK_GETTIME);
	}
#endif
	compiler_barrier();
	return z_impl_clock_gettime(clock_id, ts);
   1fa4c:	2001      	movs	r0, #1
   1fa4e:	a902      	add	r1, sp, #8
   1fa50:	f7fd fb8e 	bl	1d170 <z_impl_clock_gettime>
	struct tm tm;
	int ret;

	clock_gettime(CLOCK_REALTIME, &tp);

	gmtime_r(&tp.tv_sec, &tm);
   1fa54:	a907      	add	r1, sp, #28
   1fa56:	a802      	add	r0, sp, #8
   1fa58:	f002 fedc 	bl	22814 <gmtime_r>

	if (argc == 3) {
   1fa5c:	2d03      	cmp	r5, #3
   1fa5e:	d160      	bne.n	1fb22 <cmd_date_set+0xe2>
	endptr = NULL;
   1fa60:	f04f 0900 	mov.w	r9, #0
		ret = get_y_m_d(shell, &tm, argv[1]);
   1fa64:	687d      	ldr	r5, [r7, #4]
	year = strtol(date_str, &endptr, 10);
   1fa66:	220a      	movs	r2, #10
   1fa68:	4628      	mov	r0, r5
   1fa6a:	a901      	add	r1, sp, #4
	endptr = NULL;
   1fa6c:	f8cd 9004 	str.w	r9, [sp, #4]
	year = strtol(date_str, &endptr, 10);
   1fa70:	f007 fd19 	bl	274a6 <strtol>
	if ((endptr == date_str) || (*endptr != '-')) {
   1fa74:	9e01      	ldr	r6, [sp, #4]
	year = strtol(date_str, &endptr, 10);
   1fa76:	4680      	mov	r8, r0
	if ((endptr == date_str) || (*endptr != '-')) {
   1fa78:	42b5      	cmp	r5, r6
   1fa7a:	d018      	beq.n	1faae <cmd_date_set+0x6e>
   1fa7c:	7832      	ldrb	r2, [r6, #0]
   1fa7e:	2a2d      	cmp	r2, #45	; 0x2d
   1fa80:	d115      	bne.n	1faae <cmd_date_set+0x6e>
	date_str = endptr + 1;
   1fa82:	3601      	adds	r6, #1
	month = strtol(date_str, &endptr, 10);
   1fa84:	220a      	movs	r2, #10
   1fa86:	4630      	mov	r0, r6
   1fa88:	a901      	add	r1, sp, #4
	endptr = NULL;
   1fa8a:	f8cd 9004 	str.w	r9, [sp, #4]
	month = strtol(date_str, &endptr, 10);
   1fa8e:	f007 fd0a 	bl	274a6 <strtol>
	if ((endptr == date_str) || (*endptr != '-')) {
   1fa92:	9b01      	ldr	r3, [sp, #4]
   1fa94:	429e      	cmp	r6, r3
   1fa96:	d00a      	beq.n	1faae <cmd_date_set+0x6e>
   1fa98:	781a      	ldrb	r2, [r3, #0]
   1fa9a:	2a2d      	cmp	r2, #45	; 0x2d
   1fa9c:	d107      	bne.n	1faae <cmd_date_set+0x6e>
	if ((month < 1) || (month > 12)) {
   1fa9e:	1e45      	subs	r5, r0, #1
   1faa0:	2d0b      	cmp	r5, #11
   1faa2:	d90d      	bls.n	1fac0 <cmd_date_set+0x80>
		shell_error(shell, "Invalid month");
   1faa4:	4a2b      	ldr	r2, [pc, #172]	; (1fb54 <cmd_date_set+0x114>)
		shell_error(shell, "Invalid day");
   1faa6:	2102      	movs	r1, #2
   1faa8:	4620      	mov	r0, r4
   1faaa:	f006 fd47 	bl	2653c <shell_fprintf>
		if (ret != 0) {
			shell_help(shell);
   1faae:	4620      	mov	r0, r4
   1fab0:	f006 fd51 	bl	26556 <shell_help>
	tp.tv_nsec = 0;

	ret = clock_settime(CLOCK_REALTIME, &tp);
	if (ret != 0) {
		shell_error(shell, "Could not set date %d", ret);
		return -EINVAL;
   1fab4:	f06f 0515 	mvn.w	r5, #21
	}

	date_print(shell, &tm);

	return 0;
}
   1fab8:	4628      	mov	r0, r5
   1faba:	b011      	add	sp, #68	; 0x44
   1fabc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	date_str = endptr + 1;
   1fac0:	1c5e      	adds	r6, r3, #1
	day = strtol(date_str, &endptr, 10);
   1fac2:	220a      	movs	r2, #10
   1fac4:	4630      	mov	r0, r6
   1fac6:	a901      	add	r1, sp, #4
	endptr = NULL;
   1fac8:	f8cd 9004 	str.w	r9, [sp, #4]
	day = strtol(date_str, &endptr, 10);
   1facc:	f007 fceb 	bl	274a6 <strtol>
	if ((endptr == date_str) || (*endptr != '\0')) {
   1fad0:	9b01      	ldr	r3, [sp, #4]
   1fad2:	429e      	cmp	r6, r3
   1fad4:	d0eb      	beq.n	1faae <cmd_date_set+0x6e>
   1fad6:	781b      	ldrb	r3, [r3, #0]
   1fad8:	2b00      	cmp	r3, #0
   1fada:	d1e8      	bne.n	1faae <cmd_date_set+0x6e>
	if ((day < 1) || (day > 31)) {
   1fadc:	1e43      	subs	r3, r0, #1
   1fade:	2b1e      	cmp	r3, #30
   1fae0:	d901      	bls.n	1fae6 <cmd_date_set+0xa6>
		shell_error(shell, "Invalid day");
   1fae2:	4a1d      	ldr	r2, [pc, #116]	; (1fb58 <cmd_date_set+0x118>)
   1fae4:	e7df      	b.n	1faa6 <cmd_date_set+0x66>
	tm->tm_year = year - 1900;
   1fae6:	f2a8 736c 	subw	r3, r8, #1900	; 0x76c
	tm->tm_mon = month - 1;
   1faea:	e9cd 530b 	strd	r5, r3, [sp, #44]	; 0x2c
		ret = get_h_m_s(shell, &tm, argv[2]);
   1faee:	68ba      	ldr	r2, [r7, #8]
	tm->tm_mday = day;
   1faf0:	900a      	str	r0, [sp, #40]	; 0x28
		ret = get_h_m_s(shell, &tm, argv[2]);
   1faf2:	4620      	mov	r0, r4
   1faf4:	a907      	add	r1, sp, #28
   1faf6:	f7ff ff4f 	bl	1f998 <get_h_m_s>
		if (ret != 0) {
   1fafa:	2800      	cmp	r0, #0
   1fafc:	d1d7      	bne.n	1faae <cmd_date_set+0x6e>
	tp.tv_sec = timeutil_timegm(&tm);
   1fafe:	a807      	add	r0, sp, #28
   1fb00:	f005 fd37 	bl	25572 <timeutil_timegm>
   1fb04:	460b      	mov	r3, r1
   1fb06:	4602      	mov	r2, r0
   1fb08:	e9cd 2302 	strd	r2, r3, [sp, #8]
	if (tp.tv_sec == -1) {
   1fb0c:	3301      	adds	r3, #1
   1fb0e:	bf08      	it	eq
   1fb10:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   1fb14:	d109      	bne.n	1fb2a <cmd_date_set+0xea>
		shell_error(shell, "Failed to calculate seconds since Epoch");
   1fb16:	2102      	movs	r1, #2
   1fb18:	4620      	mov	r0, r4
   1fb1a:	4a10      	ldr	r2, [pc, #64]	; (1fb5c <cmd_date_set+0x11c>)
   1fb1c:	f006 fd0e 	bl	2653c <shell_fprintf>
		return -EINVAL;
   1fb20:	e7c8      	b.n	1fab4 <cmd_date_set+0x74>
	} else if (argc == 2) {
   1fb22:	2d02      	cmp	r5, #2
   1fb24:	d1c3      	bne.n	1faae <cmd_date_set+0x6e>
		ret = get_h_m_s(shell, &tm, argv[1]);
   1fb26:	687a      	ldr	r2, [r7, #4]
   1fb28:	e7e3      	b.n	1faf2 <cmd_date_set+0xb2>
	tp.tv_nsec = 0;
   1fb2a:	2300      	movs	r3, #0
	ret = clock_settime(CLOCK_REALTIME, &tp);
   1fb2c:	2001      	movs	r0, #1
   1fb2e:	a902      	add	r1, sp, #8
	tp.tv_nsec = 0;
   1fb30:	9304      	str	r3, [sp, #16]
	ret = clock_settime(CLOCK_REALTIME, &tp);
   1fb32:	f7fd fb71 	bl	1d218 <clock_settime>
	if (ret != 0) {
   1fb36:	4605      	mov	r5, r0
   1fb38:	b130      	cbz	r0, 1fb48 <cmd_date_set+0x108>
		shell_error(shell, "Could not set date %d", ret);
   1fb3a:	4603      	mov	r3, r0
   1fb3c:	2102      	movs	r1, #2
   1fb3e:	4620      	mov	r0, r4
   1fb40:	4a07      	ldr	r2, [pc, #28]	; (1fb60 <cmd_date_set+0x120>)
   1fb42:	f006 fcfb 	bl	2653c <shell_fprintf>
   1fb46:	e7b5      	b.n	1fab4 <cmd_date_set+0x74>
	date_print(shell, &tm);
   1fb48:	4620      	mov	r0, r4
   1fb4a:	a907      	add	r1, sp, #28
   1fb4c:	f7ff ff0c 	bl	1f968 <date_print>
	return 0;
   1fb50:	e7b2      	b.n	1fab8 <cmd_date_set+0x78>
   1fb52:	bf00      	nop
   1fb54:	0002bd42 	.word	0x0002bd42
   1fb58:	0002bd51 	.word	0x0002bd51
   1fb5c:	0002bd5e 	.word	0x0002bd5e
   1fb60:	0002bd87 	.word	0x0002bd87

0001fb64 <shell_internal_help_print>:
	shell->ctx->cmd_buff_pos = 0;
	shell->ctx->cmd_buff_len = 0;
}

static void shell_internal_help_print(const struct shell *shell)
{
   1fb64:	b510      	push	{r4, lr}
   1fb66:	4604      	mov	r4, r0
	if (!IS_ENABLED(CONFIG_SHELL_HELP)) {
		return;
	}

	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
   1fb68:	6881      	ldr	r1, [r0, #8]
   1fb6a:	3108      	adds	r1, #8
   1fb6c:	f001 f9be 	bl	20eec <z_shell_help_cmd_print>
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
   1fb70:	68a1      	ldr	r1, [r4, #8]
   1fb72:	4620      	mov	r0, r4
				  "Subcommands:\n");
}
   1fb74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
   1fb78:	4a01      	ldr	r2, [pc, #4]	; (1fb80 <shell_internal_help_print+0x1c>)
   1fb7a:	3108      	adds	r1, #8
   1fb7c:	f001 b958 	b.w	20e30 <z_shell_help_subcmd_print>
   1fb80:	0002bdcc 	.word	0x0002bdcc

0001fb84 <state_set.part.0>:
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
   1fb84:	2200      	movs	r2, #0
	}

	return 0;
}

static inline void state_set(const struct shell *shell, enum shell_state state)
   1fb86:	b510      	push	{r4, lr}
{
	shell->ctx->state = state;

	if (state == SHELL_STATE_ACTIVE) {
		cmd_buffer_clear(shell);
   1fb88:	6883      	ldr	r3, [r0, #8]
static inline void state_set(const struct shell *shell, enum shell_state state)
   1fb8a:	4604      	mov	r4, r0
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
   1fb8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	shell->ctx->cmd_buff_len = 0;
   1fb90:	639a      	str	r2, [r3, #56]	; 0x38
		if (z_flag_print_noinit_get(shell)) {
   1fb92:	6883      	ldr	r3, [r0, #8]
	shell->ctx->internal.flags.last_nl = val;
}

static inline bool z_flag_print_noinit_get(const struct shell *shell)
{
	return shell->ctx->internal.flags.print_noinit == 1;
   1fb94:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
   1fb98:	039b      	lsls	r3, r3, #14
   1fb9a:	d50b      	bpl.n	1fbb4 <state_set.part.0+0x30>
			z_shell_fprintf(shell, SHELL_WARNING, "%s",
   1fb9c:	2104      	movs	r1, #4
   1fb9e:	4b08      	ldr	r3, [pc, #32]	; (1fbc0 <state_set.part.0+0x3c>)
   1fba0:	4a08      	ldr	r2, [pc, #32]	; (1fbc4 <state_set.part.0+0x40>)
   1fba2:	f007 f827 	bl	26bf4 <z_shell_fprintf>

static inline bool z_flag_print_noinit_set(const struct shell *shell, bool val)
{
	bool ret;

	Z_SHELL_SET_FLAG_ATOMIC(shell, print_noinit, val, ret);
   1fba6:	68a0      	ldr	r0, [r4, #8]
   1fba8:	f46f 3100 	mvn.w	r1, #131072	; 0x20000
   1fbac:	f500 7017 	add.w	r0, r0, #604	; 0x25c
   1fbb0:	f006 fb9e 	bl	262f0 <atomic_and>
					SHELL_MSG_BACKEND_NOT_ACTIVE);
			z_flag_print_noinit_set(shell, false);
		}
		z_shell_print_prompt_and_cmd(shell);
   1fbb4:	4620      	mov	r0, r4
	}
}
   1fbb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_print_prompt_and_cmd(shell);
   1fbba:	f000 bfdd 	b.w	20b78 <z_shell_print_prompt_and_cmd>
   1fbbe:	bf00      	nop
   1fbc0:	0002bdda 	.word	0x0002bdda
   1fbc4:	0002bc4b 	.word	0x0002bc4b

0001fbc8 <history_handle>:

	z_shell_history_put(shell->history, line, length);
}

static void history_handle(const struct shell *shell, bool up)
{
   1fbc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1fbca:	4604      	mov	r4, r0
	if (!IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		return;
	}

	/* Checking if history process has been stopped */
	if (z_flag_history_exit_get(shell)) {
   1fbcc:	6880      	ldr	r0, [r0, #8]
{
   1fbce:	460d      	mov	r5, r1
	return shell->ctx->internal.flags.history_exit == 1;
   1fbd0:	f8d0 325c 	ldr.w	r3, [r0, #604]	; 0x25c
	if (z_flag_history_exit_get(shell)) {
   1fbd4:	061b      	lsls	r3, r3, #24
   1fbd6:	d505      	bpl.n	1fbe4 <history_handle+0x1c>
		z_flag_history_exit_set(shell, false);
   1fbd8:	2100      	movs	r1, #0
   1fbda:	f006 fc26 	bl	2642a <z_flag_history_exit_set.isra.0>
		z_shell_history_mode_exit(shell->history);
   1fbde:	68e0      	ldr	r0, [r4, #12]
   1fbe0:	f007 f94b 	bl	26e7a <z_shell_history_mode_exit>
	}

	/* Backup command if history is entered */
	if (!z_shell_history_active(shell->history)) {
   1fbe4:	68e3      	ldr	r3, [r4, #12]
   1fbe6:	68db      	ldr	r3, [r3, #12]
   1fbe8:	b963      	cbnz	r3, 1fc04 <history_handle+0x3c>
		if (up) {
   1fbea:	b39d      	cbz	r5, 1fc54 <history_handle+0x8c>
			uint16_t cmd_len = z_shell_strlen(shell->ctx->cmd_buff);
   1fbec:	68a0      	ldr	r0, [r4, #8]
   1fbee:	303e      	adds	r0, #62	; 0x3e
   1fbf0:	f006 fbc8 	bl	26384 <z_shell_strlen>

			if (cmd_len) {
   1fbf4:	68a3      	ldr	r3, [r4, #8]
   1fbf6:	b378      	cbz	r0, 1fc58 <history_handle+0x90>
				strcpy(shell->ctx->temp_buff,
   1fbf8:	f103 013e 	add.w	r1, r3, #62	; 0x3e
   1fbfc:	f503 709f 	add.w	r0, r3, #318	; 0x13e
   1fc00:	f007 fce7 	bl	275d2 <strcpy>
		}
	}

	/* Start by checking if history is not empty. */
	history_mode = z_shell_history_get(shell->history, up,
					   shell->ctx->cmd_buff, &len);
   1fc04:	68a2      	ldr	r2, [r4, #8]
	history_mode = z_shell_history_get(shell->history, up,
   1fc06:	4629      	mov	r1, r5
   1fc08:	68e0      	ldr	r0, [r4, #12]
   1fc0a:	f10d 0306 	add.w	r3, sp, #6
   1fc0e:	323e      	adds	r2, #62	; 0x3e
   1fc10:	f007 f936 	bl	26e80 <z_shell_history_get>

	/* On exiting history mode print backed up command. */
	if (!history_mode) {
   1fc14:	b958      	cbnz	r0, 1fc2e <history_handle+0x66>
		strcpy(shell->ctx->cmd_buff, shell->ctx->temp_buff);
   1fc16:	68a0      	ldr	r0, [r4, #8]
   1fc18:	f500 719f 	add.w	r1, r0, #318	; 0x13e
   1fc1c:	303e      	adds	r0, #62	; 0x3e
   1fc1e:	f007 fcd8 	bl	275d2 <strcpy>
		len = z_shell_strlen(shell->ctx->cmd_buff);
   1fc22:	68a0      	ldr	r0, [r4, #8]
   1fc24:	303e      	adds	r0, #62	; 0x3e
   1fc26:	f006 fbad 	bl	26384 <z_shell_strlen>
   1fc2a:	f8ad 0006 	strh.w	r0, [sp, #6]
	}

	z_shell_op_cursor_home_move(shell);
   1fc2e:	4620      	mov	r0, r4
   1fc30:	f006 ff39 	bl	26aa6 <z_shell_op_cursor_home_move>
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
   1fc34:	4a0a      	ldr	r2, [pc, #40]	; (1fc60 <history_handle+0x98>)
   1fc36:	490b      	ldr	r1, [pc, #44]	; (1fc64 <history_handle+0x9c>)
   1fc38:	6960      	ldr	r0, [r4, #20]
   1fc3a:	f006 fba9 	bl	26390 <z_shell_raw_fprintf>
	z_clear_eos(shell);
	z_shell_print_cmd(shell);
   1fc3e:	4620      	mov	r0, r4
   1fc40:	f000 fe7c 	bl	2093c <z_shell_print_cmd>
	shell->ctx->cmd_buff_pos = len;
   1fc44:	68a3      	ldr	r3, [r4, #8]
   1fc46:	f8bd 2006 	ldrh.w	r2, [sp, #6]
	shell->ctx->cmd_buff_len = len;
	z_shell_op_cond_next_line(shell);
   1fc4a:	4620      	mov	r0, r4
	shell->ctx->cmd_buff_pos = len;
   1fc4c:	875a      	strh	r2, [r3, #58]	; 0x3a
	shell->ctx->cmd_buff_len = len;
   1fc4e:	871a      	strh	r2, [r3, #56]	; 0x38
	z_shell_op_cond_next_line(shell);
   1fc50:	f000 fe36 	bl	208c0 <z_shell_op_cond_next_line>
}
   1fc54:	b003      	add	sp, #12
   1fc56:	bd30      	pop	{r4, r5, pc}
				shell->ctx->temp_buff[0] = '\0';
   1fc58:	f883 013e 	strb.w	r0, [r3, #318]	; 0x13e
   1fc5c:	e7d2      	b.n	1fc04 <history_handle+0x3c>
   1fc5e:	bf00      	nop
   1fc60:	0002c0a9 	.word	0x0002c0a9
   1fc64:	0002bc4b 	.word	0x0002bc4b

0001fc68 <execute>:
	struct shell_static_entry dloc; /* Memory for dynamic commands. */
	const char *argv[CONFIG_SHELL_ARGC_MAX + 1]; /* +1 reserved for NULL */
	const struct shell_static_entry *parent = selected_cmd_get(shell);
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry help_entry;
	size_t cmd_lvl = 0;
   1fc68:	2300      	movs	r3, #0
{
   1fc6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fc6e:	4604      	mov	r4, r0
   1fc70:	b09f      	sub	sp, #124	; 0x7c
	size_t cmd_with_handler_lvl = 0;
	bool wildcard_found = false;
	size_t argc = 0, args_left = SIZE_MAX;
   1fc72:	e9cd 3305 	strd	r3, r3, [sp, #20]
	char quote;
	const char **argvp;
	char *cmd_buf = shell->ctx->cmd_buff;
   1fc76:	6883      	ldr	r3, [r0, #8]
   1fc78:	333e      	adds	r3, #62	; 0x3e
   1fc7a:	9303      	str	r3, [sp, #12]
	bool has_last_handler = false;

	z_shell_op_cursor_end_move(shell);
   1fc7c:	f006 ff19 	bl	26ab2 <z_shell_op_cursor_end_move>
	if (!z_shell_cursor_in_empty_line(shell)) {
   1fc80:	4620      	mov	r0, r4
   1fc82:	f006 fe9e 	bl	269c2 <z_shell_cursor_in_empty_line>
   1fc86:	b918      	cbnz	r0, 1fc90 <execute+0x28>
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n");
   1fc88:	499f      	ldr	r1, [pc, #636]	; (1ff08 <execute+0x2a0>)
   1fc8a:	6960      	ldr	r0, [r4, #20]
   1fc8c:	f006 fb80 	bl	26390 <z_shell_raw_fprintf>
		argvp = &argv[1];
		active_cmd_prepare(parent, &shell->ctx->active_cmd, &help_entry,
				   &cmd_lvl, &cmd_with_handler_lvl, &args_left);
		cmd_lvl++;
	} else {
		help_entry.help = NULL;
   1fc90:	2600      	movs	r6, #0
	size_t argc = 0, args_left = SIZE_MAX;
   1fc92:	f04f 38ff 	mov.w	r8, #4294967295
	size_t cmd_with_handler_lvl = 0;
   1fc96:	46b1      	mov	r9, r6
		z_shell_wildcard_prepare(shell);
   1fc98:	46b2      	mov	sl, r6
   1fc9a:	4635      	mov	r5, r6
   1fc9c:	46b3      	mov	fp, r6
	memset(&shell->ctx->active_cmd, 0, sizeof(shell->ctx->active_cmd));
   1fc9e:	68a0      	ldr	r0, [r4, #8]
   1fca0:	2214      	movs	r2, #20
   1fca2:	2100      	movs	r1, #0
   1fca4:	3008      	adds	r0, #8
   1fca6:	f007 fd3c 	bl	27722 <memset>
		z_shell_cmd_trim(shell);
   1fcaa:	4620      	mov	r0, r4
   1fcac:	f006 fe36 	bl	2691c <z_shell_cmd_trim>
		history_put(shell, shell->ctx->cmd_buff,
   1fcb0:	68a1      	ldr	r1, [r4, #8]
	z_shell_history_put(shell->history, line, length);
   1fcb2:	68e0      	ldr	r0, [r4, #12]
   1fcb4:	8f0a      	ldrh	r2, [r1, #56]	; 0x38
   1fcb6:	313e      	adds	r1, #62	; 0x3e
   1fcb8:	f007 f919 	bl	26eee <z_shell_history_put>
		z_shell_wildcard_prepare(shell);
   1fcbc:	4620      	mov	r0, r4
   1fcbe:	f007 fad6 	bl	2726e <z_shell_wildcard_prepare>
   1fcc2:	af11      	add	r7, sp, #68	; 0x44
   1fcc4:	9602      	str	r6, [sp, #8]
		argvp = &argv[0];
	}

	/* Below loop is analyzing subcommands of found root command. */
	while ((argc != 1) && (cmd_lvl < CONFIG_SHELL_ARGC_MAX)
   1fcc6:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   1fcca:	2a01      	cmp	r2, #1
   1fccc:	f000 80d7 	beq.w	1fe7e <execute+0x216>
   1fcd0:	2b0b      	cmp	r3, #11
   1fcd2:	f240 80af 	bls.w	1fe34 <execute+0x1cc>
			cmd_lvl++;
		}

	}

	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
   1fcd6:	9906      	ldr	r1, [sp, #24]
   1fcd8:	2902      	cmp	r1, #2
   1fcda:	f040 80af 	bne.w	1fe3c <execute+0x1d4>
		/* argc == 2 indicates that when command string was parsed
		 * there was more characters remaining. It means that number of
		 * arguments exceeds the limit.
		 */
		z_shell_fprintf(shell, SHELL_ERROR, "%s\n",
   1fcde:	4b8b      	ldr	r3, [pc, #556]	; (1ff0c <execute+0x2a4>)
   1fce0:	4a8b      	ldr	r2, [pc, #556]	; (1ff10 <execute+0x2a8>)
   1fce2:	e015      	b.n	1fd10 <execute+0xa8>
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
   1fce4:	2302      	movs	r3, #2
   1fce6:	9a03      	ldr	r2, [sp, #12]
   1fce8:	4639      	mov	r1, r7
   1fcea:	a806      	add	r0, sp, #24
   1fcec:	f006 fcb0 	bl	26650 <z_shell_make_argv>
		cmd_buf = (char *)argvp[1];
   1fcf0:	687a      	ldr	r2, [r7, #4]
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
   1fcf2:	4603      	mov	r3, r0
		cmd_buf = (char *)argvp[1];
   1fcf4:	9203      	str	r2, [sp, #12]
		if (argc == 0) {
   1fcf6:	9a06      	ldr	r2, [sp, #24]
   1fcf8:	b92a      	cbnz	r2, 1fd06 <execute+0x9e>
			return -ENOEXEC;
   1fcfa:	f06f 0507 	mvn.w	r5, #7
	/* terminate arguments with NULL */
	argv[cmd_lvl] = NULL;
	/* Executing the deepest found handler. */
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
			&argv[cmd_with_handler_lvl], &help_entry);
}
   1fcfe:	4628      	mov	r0, r5
   1fd00:	b01f      	add	sp, #124	; 0x7c
   1fd02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if ((argc == 1) && (quote != 0)) {
   1fd06:	2a01      	cmp	r2, #1
   1fd08:	d106      	bne.n	1fd18 <execute+0xb0>
   1fd0a:	b128      	cbz	r0, 1fd18 <execute+0xb0>
			z_shell_fprintf(shell, SHELL_ERROR,
   1fd0c:	2102      	movs	r1, #2
   1fd0e:	4a81      	ldr	r2, [pc, #516]	; (1ff14 <execute+0x2ac>)
   1fd10:	4620      	mov	r0, r4
   1fd12:	f006 ff6f 	bl	26bf4 <z_shell_fprintf>
   1fd16:	e7f0      	b.n	1fcfa <execute+0x92>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
   1fd18:	9b05      	ldr	r3, [sp, #20]
   1fd1a:	b34b      	cbz	r3, 1fd70 <execute+0x108>
		    z_shell_help_request(argvp[0])) {
   1fd1c:	6838      	ldr	r0, [r7, #0]
   1fd1e:	f001 f909 	bl	20f34 <z_shell_help_request>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
   1fd22:	b198      	cbz	r0, 1fd4c <execute+0xe4>
			if (help_entry.help) {
   1fd24:	b166      	cbz	r6, 1fd40 <execute+0xd8>
				shell->ctx->active_cmd = help_entry;
   1fd26:	68a5      	ldr	r5, [r4, #8]
   1fd28:	960d      	str	r6, [sp, #52]	; 0x34
   1fd2a:	3508      	adds	r5, #8
				shell->ctx->active_cmd = *help_entry;
   1fd2c:	ae0c      	add	r6, sp, #48	; 0x30
   1fd2e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1fd30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1fd32:	6833      	ldr	r3, [r6, #0]
   1fd34:	602b      	str	r3, [r5, #0]
			shell_internal_help_print(shell);
   1fd36:	4620      	mov	r0, r4
   1fd38:	f7ff ff14 	bl	1fb64 <shell_internal_help_print>
			return SHELL_CMD_HELP_PRINTED;
   1fd3c:	2501      	movs	r5, #1
   1fd3e:	e7de      	b.n	1fcfe <execute+0x96>
			z_shell_fprintf(shell, SHELL_ERROR,
   1fd40:	4a75      	ldr	r2, [pc, #468]	; (1ff18 <execute+0x2b0>)
		z_shell_fprintf(shell, SHELL_ERROR,
   1fd42:	2102      	movs	r1, #2
   1fd44:	4620      	mov	r0, r4
   1fd46:	f006 ff55 	bl	26bf4 <z_shell_fprintf>
		return false;
   1fd4a:	e7d6      	b.n	1fcfa <execute+0x92>
		if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && (cmd_lvl > 0)) {
   1fd4c:	9b05      	ldr	r3, [sp, #20]
   1fd4e:	b17b      	cbz	r3, 1fd70 <execute+0x108>
			status = z_shell_wildcard_process(shell, entry,
   1fd50:	4629      	mov	r1, r5
   1fd52:	4620      	mov	r0, r4
   1fd54:	683a      	ldr	r2, [r7, #0]
   1fd56:	f001 fa41 	bl	211dc <z_shell_wildcard_process>
			if (status == SHELL_WILDCARD_CMD_NO_MATCH_FOUND) {
   1fd5a:	2802      	cmp	r0, #2
   1fd5c:	f000 808f 	beq.w	1fe7e <execute+0x216>
			if (status != SHELL_WILDCARD_NOT_FOUND) {
   1fd60:	2803      	cmp	r0, #3
   1fd62:	d005      	beq.n	1fd70 <execute+0x108>
				++cmd_lvl;
   1fd64:	9b05      	ldr	r3, [sp, #20]
   1fd66:	3301      	adds	r3, #1
   1fd68:	9305      	str	r3, [sp, #20]
				wildcard_found = true;
   1fd6a:	2301      	movs	r3, #1
   1fd6c:	9302      	str	r3, [sp, #8]
				continue;
   1fd6e:	e7aa      	b.n	1fcc6 <execute+0x5e>
		if (has_last_handler == false) {
   1fd70:	f1ba 0f00 	cmp.w	sl, #0
   1fd74:	d105      	bne.n	1fd82 <execute+0x11a>
			entry = z_shell_find_cmd(parent, argvp[0], &dloc);
   1fd76:	4658      	mov	r0, fp
   1fd78:	6839      	ldr	r1, [r7, #0]
   1fd7a:	aa07      	add	r2, sp, #28
   1fd7c:	f006 fd53 	bl	26826 <z_shell_find_cmd>
   1fd80:	4605      	mov	r5, r0
		argvp++;
   1fd82:	3704      	adds	r7, #4
		args_left--;
   1fd84:	f108 38ff 	add.w	r8, r8, #4294967295
		if (entry) {
   1fd88:	2d00      	cmp	r5, #0
   1fd8a:	d041      	beq.n	1fe10 <execute+0x1a8>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && found && entry->handler) {
   1fd8c:	9b02      	ldr	r3, [sp, #8]
   1fd8e:	b14b      	cbz	r3, 1fda4 <execute+0x13c>
   1fd90:	68eb      	ldr	r3, [r5, #12]
   1fd92:	b13b      	cbz	r3, 1fda4 <execute+0x13c>
		z_shell_op_cursor_end_move(shell);
   1fd94:	4620      	mov	r0, r4
   1fd96:	f006 fe8c 	bl	26ab2 <z_shell_op_cursor_end_move>
		z_shell_op_cond_next_line(shell);
   1fd9a:	4620      	mov	r0, r4
   1fd9c:	f000 fd90 	bl	208c0 <z_shell_op_cond_next_line>
		z_shell_fprintf(shell, SHELL_ERROR,
   1fda0:	4a5e      	ldr	r2, [pc, #376]	; (1ff1c <execute+0x2b4>)
   1fda2:	e7ce      	b.n	1fd42 <execute+0xda>
	if (entry->handler) {
   1fda4:	68eb      	ldr	r3, [r5, #12]
   1fda6:	b1cb      	cbz	r3, 1fddc <execute+0x174>
		*active_cmd = *entry;
   1fda8:	46ae      	mov	lr, r5
   1fdaa:	68a3      	ldr	r3, [r4, #8]
   1fdac:	f8dd 9014 	ldr.w	r9, [sp, #20]
   1fdb0:	f103 0c08 	add.w	ip, r3, #8
   1fdb4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1fdb8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1fdbc:	f8de 3000 	ldr.w	r3, [lr]
   1fdc0:	f8cc 3000 	str.w	r3, [ip]
		if ((entry->subcmd == NULL)
   1fdc4:	68ab      	ldr	r3, [r5, #8]
   1fdc6:	b94b      	cbnz	r3, 1fddc <execute+0x174>
		    && entry->args.optional == SHELL_OPT_ARG_RAW) {
   1fdc8:	7c6b      	ldrb	r3, [r5, #17]
   1fdca:	2bfe      	cmp	r3, #254	; 0xfe
			*args_left = entry->args.mandatory - 1;
   1fdcc:	bf01      	itttt	eq
   1fdce:	f895 8010 	ldrbeq.w	r8, [r5, #16]
			*lvl = *lvl + 1;
   1fdd2:	f109 0301 	addeq.w	r3, r9, #1
			*args_left = entry->args.mandatory - 1;
   1fdd6:	f108 38ff 	addeq.w	r8, r8, #4294967295
			*lvl = *lvl + 1;
   1fdda:	9305      	streq	r3, [sp, #20]
	if (entry->help) {
   1fddc:	f8d5 c004 	ldr.w	ip, [r5, #4]
   1fde0:	f1bc 0f00 	cmp.w	ip, #0
   1fde4:	d008      	beq.n	1fdf8 <execute+0x190>
		*help_entry = *entry;
   1fde6:	46ae      	mov	lr, r5
   1fde8:	ae0c      	add	r6, sp, #48	; 0x30
   1fdea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1fdee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1fdf0:	f8de 3000 	ldr.w	r3, [lr]
   1fdf4:	6033      	str	r3, [r6, #0]
   1fdf6:	4666      	mov	r6, ip
   1fdf8:	46ab      	mov	fp, r5
		if (args_left || (argc == 2)) {
   1fdfa:	f1b8 0f00 	cmp.w	r8, #0
   1fdfe:	d103      	bne.n	1fe08 <execute+0x1a0>
   1fe00:	9b06      	ldr	r3, [sp, #24]
   1fe02:	2b02      	cmp	r3, #2
   1fe04:	f47f af5f 	bne.w	1fcc6 <execute+0x5e>
			cmd_lvl++;
   1fe08:	9b05      	ldr	r3, [sp, #20]
   1fe0a:	3301      	adds	r3, #1
   1fe0c:	9305      	str	r3, [sp, #20]
   1fe0e:	e75a      	b.n	1fcc6 <execute+0x5e>
			if (cmd_lvl == 0 &&
   1fe10:	9b05      	ldr	r3, [sp, #20]
   1fe12:	b963      	cbnz	r3, 1fe2e <execute+0x1c6>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
}

static inline bool z_shell_in_select_mode(const struct shell *shell)
{
	return shell->ctx->selected_cmd == NULL ? false : true;
   1fe14:	68a3      	ldr	r3, [r4, #8]
   1fe16:	69db      	ldr	r3, [r3, #28]
   1fe18:	b10b      	cbz	r3, 1fe1e <execute+0x1b6>
				(!z_shell_in_select_mode(shell) ||
   1fe1a:	68db      	ldr	r3, [r3, #12]
   1fe1c:	b93b      	cbnz	r3, 1fe2e <execute+0x1c6>
				z_shell_fprintf(shell, SHELL_ERROR,
   1fe1e:	4b40      	ldr	r3, [pc, #256]	; (1ff20 <execute+0x2b8>)
   1fe20:	2102      	movs	r1, #2
   1fe22:	9300      	str	r3, [sp, #0]
   1fe24:	4620      	mov	r0, r4
   1fe26:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1fe28:	4a3e      	ldr	r2, [pc, #248]	; (1ff24 <execute+0x2bc>)
   1fe2a:	f006 fee3 	bl	26bf4 <z_shell_fprintf>
			has_last_handler = true;
   1fe2e:	f04f 0a01 	mov.w	sl, #1
   1fe32:	e7e2      	b.n	1fdfa <execute+0x192>
		&& args_left > 0) {
   1fe34:	f1b8 0f00 	cmp.w	r8, #0
   1fe38:	f47f af54 	bne.w	1fce4 <execute+0x7c>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && wildcard_found) {
   1fe3c:	9b02      	ldr	r3, [sp, #8]
   1fe3e:	b14b      	cbz	r3, 1fe54 <execute+0x1ec>
		z_shell_wildcard_finalize(shell);
   1fe40:	4620      	mov	r0, r4
   1fe42:	f007 fa38 	bl	272b6 <z_shell_wildcard_finalize>
					shell->ctx->cmd_buff,
   1fe46:	68a2      	ldr	r2, [r4, #8]
		(void)z_shell_make_argv(&cmd_lvl,
   1fe48:	230c      	movs	r3, #12
   1fe4a:	323e      	adds	r2, #62	; 0x3e
   1fe4c:	a911      	add	r1, sp, #68	; 0x44
   1fe4e:	a805      	add	r0, sp, #20
   1fe50:	f006 fbfe 	bl	26650 <z_shell_make_argv>
	argv[cmd_lvl] = NULL;
   1fe54:	2200      	movs	r2, #0
   1fe56:	9d05      	ldr	r5, [sp, #20]
	if (shell->ctx->active_cmd.handler == NULL) {
   1fe58:	68a0      	ldr	r0, [r4, #8]
	argv[cmd_lvl] = NULL;
   1fe5a:	ab1e      	add	r3, sp, #120	; 0x78
   1fe5c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   1fe60:	f843 2c34 	str.w	r2, [r3, #-52]
	if (shell->ctx->active_cmd.handler == NULL) {
   1fe64:	6943      	ldr	r3, [r0, #20]
   1fe66:	b973      	cbnz	r3, 1fe86 <execute+0x21e>
			if (help_entry->help == NULL) {
   1fe68:	2e00      	cmp	r6, #0
   1fe6a:	f43f af46 	beq.w	1fcfa <execute+0x92>
			if (help_entry->help != shell->ctx->active_cmd.help) {
   1fe6e:	68c3      	ldr	r3, [r0, #12]
   1fe70:	42b3      	cmp	r3, r6
   1fe72:	f43f af60 	beq.w	1fd36 <execute+0xce>
				shell->ctx->active_cmd = *help_entry;
   1fe76:	960d      	str	r6, [sp, #52]	; 0x34
   1fe78:	f100 0508 	add.w	r5, r0, #8
   1fe7c:	e756      	b.n	1fd2c <execute+0xc4>
	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
   1fe7e:	9b05      	ldr	r3, [sp, #20]
   1fe80:	2b0b      	cmp	r3, #11
   1fe82:	d9db      	bls.n	1fe3c <execute+0x1d4>
   1fe84:	e727      	b.n	1fcd6 <execute+0x6e>
	if (shell->ctx->active_cmd.args.mandatory) {
   1fe86:	7e03      	ldrb	r3, [r0, #24]
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
   1fe88:	eba5 0509 	sub.w	r5, r5, r9
	if (shell->ctx->active_cmd.args.mandatory) {
   1fe8c:	b1b3      	cbz	r3, 1febc <execute+0x254>
				UINT16_MAX : opt8;
   1fe8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
		uint8_t opt8 = shell->ctx->active_cmd.args.optional;
   1fe92:	7e42      	ldrb	r2, [r0, #25]
				UINT16_MAX : opt8;
   1fe94:	2aff      	cmp	r2, #255	; 0xff
   1fe96:	bf08      	it	eq
   1fe98:	460a      	moveq	r2, r1
		bool in_range = (argc >= mand) && (argc <= (mand + opt));
   1fe9a:	429d      	cmp	r5, r3
   1fe9c:	d302      	bcc.n	1fea4 <execute+0x23c>
   1fe9e:	4413      	add	r3, r2
	if (!arg_cnt_ok) {
   1fea0:	429d      	cmp	r5, r3
   1fea2:	d90b      	bls.n	1febc <execute+0x254>
		z_shell_fprintf(shell, SHELL_ERROR,
   1fea4:	6883      	ldr	r3, [r0, #8]
   1fea6:	2102      	movs	r1, #2
   1fea8:	4620      	mov	r0, r4
   1feaa:	4a1f      	ldr	r2, [pc, #124]	; (1ff28 <execute+0x2c0>)
   1feac:	f006 fea2 	bl	26bf4 <z_shell_fprintf>
			shell_internal_help_print(shell);
   1feb0:	4620      	mov	r0, r4
   1feb2:	f7ff fe57 	bl	1fb64 <shell_internal_help_print>
		return -EINVAL;
   1feb6:	f06f 0515 	mvn.w	r5, #21
   1feba:	e720      	b.n	1fcfe <execute+0x96>
	Z_SHELL_SET_FLAG_ATOMIC(shell, cmd_ctx, val, ret);
   1febc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1fec0:	f500 7017 	add.w	r0, r0, #604	; 0x25c
   1fec4:	f006 fa09 	bl	262da <atomic_or>
		k_mutex_unlock(&shell->ctx->wr_mtx);
   1fec8:	68a0      	ldr	r0, [r4, #8]
   1feca:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
   1fece:	f006 fa57 	bl	26380 <k_mutex_unlock>
		ret_val = shell->ctx->active_cmd.handler(shell, argc,
   1fed2:	68a3      	ldr	r3, [r4, #8]
   1fed4:	aa11      	add	r2, sp, #68	; 0x44
   1fed6:	4629      	mov	r1, r5
   1fed8:	eb02 0289 	add.w	r2, r2, r9, lsl #2
   1fedc:	4620      	mov	r0, r4
   1fede:	695b      	ldr	r3, [r3, #20]
   1fee0:	4798      	blx	r3
   1fee2:	4605      	mov	r5, r0
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   1fee4:	68a0      	ldr	r0, [r4, #8]
   1fee6:	f04f 32ff 	mov.w	r2, #4294967295
   1feea:	f04f 33ff 	mov.w	r3, #4294967295
   1feee:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
   1fef2:	f006 fac4 	bl	2647e <k_mutex_lock.constprop.0>
   1fef6:	68a0      	ldr	r0, [r4, #8]
   1fef8:	f46f 3180 	mvn.w	r1, #65536	; 0x10000
   1fefc:	f500 7017 	add.w	r0, r0, #604	; 0x25c
   1ff00:	f006 f9f6 	bl	262f0 <atomic_and>
	return ret;
   1ff04:	e6fb      	b.n	1fcfe <execute+0x96>
   1ff06:	bf00      	nop
   1ff08:	0002bafd 	.word	0x0002bafd
   1ff0c:	0002be93 	.word	0x0002be93
   1ff10:	0002bc57 	.word	0x0002bc57
   1ff14:	0002be1e 	.word	0x0002be1e
   1ff18:	0002be32 	.word	0x0002be32
   1ff1c:	0002be50 	.word	0x0002be50
   1ff20:	0002be7f 	.word	0x0002be7f
   1ff24:	0002c145 	.word	0x0002c145
   1ff28:	0002beb7 	.word	0x0002beb7

0001ff2c <shell_process>:

	return 0;
}

void shell_process(const struct shell *shell)
{
   1ff2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ff30:	4604      	mov	r4, r0
	Z_SHELL_SET_FLAG_ATOMIC(shell, processing, val, ret);
   1ff32:	6880      	ldr	r0, [r0, #8]
   1ff34:	2110      	movs	r1, #16
   1ff36:	b0ab      	sub	sp, #172	; 0xac
   1ff38:	f500 7017 	add.w	r0, r0, #604	; 0x25c
   1ff3c:	f006 f9cd 	bl	262da <atomic_or>
	__ASSERT_NO_MSG(shell->ctx);

	/* atomically set the processing flag */
	z_flag_processing_set(shell, true);

	switch (shell->ctx->state) {
   1ff40:	68a3      	ldr	r3, [r4, #8]
   1ff42:	791b      	ldrb	r3, [r3, #4]
   1ff44:	2b02      	cmp	r3, #2
   1ff46:	f040 830a 	bne.w	2055e <shell_process+0x632>
	size_t count = 0;
   1ff4a:	2300      	movs	r3, #0
   1ff4c:	930b      	str	r3, [sp, #44]	; 0x2c
		(void)shell->iface->api->read(shell->iface, &data,
   1ff4e:	6860      	ldr	r0, [r4, #4]
   1ff50:	2201      	movs	r2, #1
   1ff52:	6803      	ldr	r3, [r0, #0]
   1ff54:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
   1ff58:	691d      	ldr	r5, [r3, #16]
   1ff5a:	ab0b      	add	r3, sp, #44	; 0x2c
   1ff5c:	47a8      	blx	r5
		if (count == 0) {
   1ff5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ff60:	2b00      	cmp	r3, #0
   1ff62:	f000 82fc 	beq.w	2055e <shell_process+0x632>
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
   1ff66:	f99d 202b 	ldrsb.w	r2, [sp, #43]	; 0x2b
		if (ascii_filter(data) != 0) {
   1ff6a:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
   1ff6e:	2a00      	cmp	r2, #0
   1ff70:	dbed      	blt.n	1ff4e <shell_process+0x22>
		switch (shell->ctx->receive_state) {
   1ff72:	68a0      	ldr	r0, [r4, #8]
   1ff74:	7941      	ldrb	r1, [r0, #5]
   1ff76:	2901      	cmp	r1, #1
   1ff78:	f000 8273 	beq.w	20462 <shell_process+0x536>
   1ff7c:	2902      	cmp	r1, #2
   1ff7e:	f000 8286 	beq.w	2048e <shell_process+0x562>
   1ff82:	2900      	cmp	r1, #0
   1ff84:	f040 82e9 	bne.w	2055a <shell_process+0x62e>
	if ((data != '\r') && (data != '\n')) {
   1ff88:	2b0d      	cmp	r3, #13
	shell->ctx->internal.flags.last_nl = val;
   1ff8a:	f8d0 225c 	ldr.w	r2, [r0, #604]	; 0x25c
   1ff8e:	d018      	beq.n	1ffc2 <shell_process+0x96>
   1ff90:	2b0a      	cmp	r3, #10
   1ff92:	d016      	beq.n	1ffc2 <shell_process+0x96>
   1ff94:	f361 220f 	bfi	r2, r1, #8, #8
   1ff98:	f8c0 225c 	str.w	r2, [r0, #604]	; 0x25c
			switch (data) {
   1ff9c:	2b09      	cmp	r3, #9
   1ff9e:	d04d      	beq.n	2003c <shell_process+0x110>
   1ffa0:	d834      	bhi.n	2000c <shell_process+0xe0>
   1ffa2:	2b00      	cmp	r3, #0
   1ffa4:	d0d3      	beq.n	1ff4e <shell_process+0x22>
   1ffa6:	2b08      	cmp	r3, #8
   1ffa8:	f000 81c9 	beq.w	2033e <shell_process+0x412>
   1ffac:	f1a3 0220 	sub.w	r2, r3, #32
				if (isprint((int) data)) {
   1ffb0:	2a5e      	cmp	r2, #94	; 0x5e
   1ffb2:	f200 81d0 	bhi.w	20356 <shell_process+0x42a>
					z_flag_history_exit_set(shell, true);
   1ffb6:	2101      	movs	r1, #1
   1ffb8:	f006 fa37 	bl	2642a <z_flag_history_exit_set.isra.0>
					z_shell_op_char_insert(shell, data);
   1ffbc:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
   1ffc0:	e0e8      	b.n	20194 <shell_process+0x268>
	if ((z_flag_last_nl_get(shell) == 0U) ||
   1ffc2:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
   1ffc6:	d005      	beq.n	1ffd4 <shell_process+0xa8>
	return shell->ctx->internal.flags.last_nl;
   1ffc8:	f8d0 225c 	ldr.w	r2, [r0, #604]	; 0x25c
   1ffcc:	f3c2 2207 	ubfx	r2, r2, #8, #8
   1ffd0:	4293      	cmp	r3, r2
   1ffd2:	d1e3      	bne.n	1ff9c <shell_process+0x70>
	shell->ctx->internal.flags.last_nl = val;
   1ffd4:	f8d0 225c 	ldr.w	r2, [r0, #604]	; 0x25c
				if (!shell->ctx->cmd_buff_len) {
   1ffd8:	8f01      	ldrh	r1, [r0, #56]	; 0x38
   1ffda:	f363 220f 	bfi	r2, r3, #8, #8
   1ffde:	f8c0 225c 	str.w	r2, [r0, #604]	; 0x25c
   1ffe2:	b979      	cbnz	r1, 20004 <shell_process+0xd8>
	z_flag_history_exit_set(shell, false);
   1ffe4:	f006 fa21 	bl	2642a <z_flag_history_exit_set.isra.0>
	z_shell_history_mode_exit(shell->history);
   1ffe8:	68e0      	ldr	r0, [r4, #12]
   1ffea:	f006 ff46 	bl	26e7a <z_shell_history_mode_exit>
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n");
   1ffee:	49ad      	ldr	r1, [pc, #692]	; (202a4 <shell_process+0x378>)
   1fff0:	6960      	ldr	r0, [r4, #20]
   1fff2:	f006 f9cd 	bl	26390 <z_shell_raw_fprintf>
	shell->ctx->state = state;
   1fff6:	2202      	movs	r2, #2
   1fff8:	68a3      	ldr	r3, [r4, #8]
   1fffa:	4620      	mov	r0, r4
   1fffc:	711a      	strb	r2, [r3, #4]
	if (state == SHELL_STATE_ACTIVE) {
   1fffe:	f7ff fdc1 	bl	1fb84 <state_set.part.0>
   20002:	e7a4      	b.n	1ff4e <shell_process+0x22>
					(void)execute(shell);
   20004:	4620      	mov	r0, r4
   20006:	f7ff fe2f 	bl	1fc68 <execute>
	shell->ctx->state = state;
   2000a:	e7f4      	b.n	1fff6 <shell_process+0xca>
   2000c:	2b1b      	cmp	r3, #27
   2000e:	d012      	beq.n	20036 <shell_process+0x10a>
   20010:	2b7f      	cmp	r3, #127	; 0x7f
   20012:	d1cb      	bne.n	1ffac <shell_process+0x80>
	return shell->ctx->internal.flags.echo == 1;
   20014:	f8d0 325c 	ldr.w	r3, [r0, #604]	; 0x25c
				if (z_flag_echo_get(shell)) {
   20018:	075f      	lsls	r7, r3, #29
   2001a:	d598      	bpl.n	1ff4e <shell_process+0x22>
					z_flag_history_exit_set(shell, true);
   2001c:	2101      	movs	r1, #1
   2001e:	f006 fa04 	bl	2642a <z_flag_history_exit_set.isra.0>
					if (z_flag_mode_delete_get(shell)) {
   20022:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.mode_delete == 1;
   20024:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
   20028:	065e      	lsls	r6, r3, #25
   2002a:	f100 8190 	bmi.w	2034e <shell_process+0x422>
		z_shell_op_char_delete(shell);
   2002e:	4620      	mov	r0, r4
   20030:	f006 fe21 	bl	26c76 <z_shell_op_char_delete>
		break;
   20034:	e78b      	b.n	1ff4e <shell_process+0x22>
	shell->ctx->receive_state = state;
   20036:	2301      	movs	r3, #1
   20038:	7143      	strb	r3, [r0, #5]
}
   2003a:	e788      	b.n	1ff4e <shell_process+0x22>
	return shell->ctx->internal.flags.echo == 1;
   2003c:	f8d0 325c 	ldr.w	r3, [r0, #604]	; 0x25c
				if (z_flag_echo_get(shell) &&
   20040:	0759      	lsls	r1, r3, #29
   20042:	d584      	bpl.n	1ff4e <shell_process+0x22>
					z_flag_history_exit_set(shell, true);
   20044:	2101      	movs	r1, #1
   20046:	f006 f9f0 	bl	2642a <z_flag_history_exit_set.isra.0>
	uint16_t compl_space = completion_space_get(shell);
   2004a:	68a0      	ldr	r0, [r4, #8]
	if (compl_space == 0U) {
   2004c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
   2004e:	2bff      	cmp	r3, #255	; 0xff
   20050:	f43f af7d 	beq.w	1ff4e <shell_process+0x22>
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
   20054:	2500      	movs	r5, #0
	memcpy(shell->ctx->temp_buff, shell->ctx->cmd_buff,
   20056:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
   20058:	f100 013e 	add.w	r1, r0, #62	; 0x3e
   2005c:	f500 709f 	add.w	r0, r0, #318	; 0x13e
   20060:	f007 fb34 	bl	276cc <memcpy>
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
   20064:	68a2      	ldr	r2, [r4, #8]
	(void)z_shell_make_argv(argc, *argv, shell->ctx->temp_buff,
   20066:	a91d      	add	r1, sp, #116	; 0x74
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
   20068:	8f53      	ldrh	r3, [r2, #58]	; 0x3a
	(void)z_shell_make_argv(argc, *argv, shell->ctx->temp_buff,
   2006a:	a80d      	add	r0, sp, #52	; 0x34
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
   2006c:	4413      	add	r3, r2
   2006e:	f883 513e 	strb.w	r5, [r3, #318]	; 0x13e
	(void)z_shell_make_argv(argc, *argv, shell->ctx->temp_buff,
   20072:	f502 729f 	add.w	r2, r2, #318	; 0x13e
   20076:	230c      	movs	r3, #12
   20078:	f006 faea 	bl	26650 <z_shell_make_argv>
	if (*argc > CONFIG_SHELL_ARGC_MAX) {
   2007c:	990d      	ldr	r1, [sp, #52]	; 0x34
   2007e:	290c      	cmp	r1, #12
   20080:	f63f af65 	bhi.w	1ff4e <shell_process+0x22>
	(*argv)[*argc] = NULL;
   20084:	ab2a      	add	r3, sp, #168	; 0xa8
   20086:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   2008a:	f843 5c34 	str.w	r5, [r3, #-52]
	int space = isspace((int)shell->ctx->cmd_buff[
   2008e:	68a3      	ldr	r3, [r4, #8]
						shell->ctx->cmd_buff_pos - 1]);
   20090:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
	int space = isspace((int)shell->ctx->cmd_buff[
   20092:	4413      	add	r3, r2
   20094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   20098:	2b20      	cmp	r3, #32
   2009a:	f000 826a 	beq.w	20572 <shell_process+0x646>
   2009e:	3b09      	subs	r3, #9
   200a0:	2b04      	cmp	r3, #4
   200a2:	f240 8266 	bls.w	20572 <shell_process+0x646>
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
   200a6:	2901      	cmp	r1, #1
   200a8:	d84f      	bhi.n	2014a <shell_process+0x21e>
		*complete_arg_idx = Z_SHELL_CMD_ROOT_LVL;
   200aa:	2500      	movs	r5, #0
   200ac:	950c      	str	r5, [sp, #48]	; 0x30
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
   200ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   200b0:	aa2a      	add	r2, sp, #168	; 0xa8
   200b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   200b6:	f853 ac34 	ldr.w	sl, [r3, #-52]
	*cnt = 0;
   200ba:	2600      	movs	r6, #0
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
   200bc:	4650      	mov	r0, sl
   200be:	f006 f961 	bl	26384 <z_shell_strlen>
	size_t first = 0;
   200c2:	46b0      	mov	r8, r6
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
   200c4:	4681      	mov	r9, r0
	size_t idx = 0;
   200c6:	4637      	mov	r7, r6
	*longest = 0U;
   200c8:	9604      	str	r6, [sp, #16]
	while ((candidate = z_shell_cmd_get(cmd, idx, &dloc)) != NULL) {
   200ca:	4639      	mov	r1, r7
   200cc:	4628      	mov	r0, r5
   200ce:	aa18      	add	r2, sp, #96	; 0x60
   200d0:	f000 fba8 	bl	20824 <z_shell_cmd_get>
   200d4:	4683      	mov	fp, r0
   200d6:	2800      	cmp	r0, #0
   200d8:	d144      	bne.n	20164 <shell_process+0x238>
	if (cnt == 1) {
   200da:	2e01      	cmp	r6, #1
   200dc:	d163      	bne.n	201a6 <shell_process+0x27a>
		autocomplete(shell, cmd, argv[arg_idx], first);
   200de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   200e0:	aa2a      	add	r2, sp, #168	; 0xa8
   200e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	uint16_t arg_len = z_shell_strlen(arg);
   200e6:	f853 0c34 	ldr.w	r0, [r3, #-52]
   200ea:	f006 f94b 	bl	26384 <z_shell_strlen>
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
   200ee:	68a2      	ldr	r2, [r4, #8]
	uint16_t arg_len = z_shell_strlen(arg);
   200f0:	4606      	mov	r6, r0
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
   200f2:	4641      	mov	r1, r8
   200f4:	4628      	mov	r0, r5
   200f6:	3208      	adds	r2, #8
   200f8:	f000 fb94 	bl	20824 <z_shell_cmd_get>
   200fc:	4605      	mov	r5, r0
	cmd_len = z_shell_strlen(match->syntax);
   200fe:	6800      	ldr	r0, [r0, #0]
   20100:	f006 f940 	bl	26384 <z_shell_strlen>
	if (cmd_len != arg_len) {
   20104:	4286      	cmp	r6, r0
   20106:	d006      	beq.n	20116 <shell_process+0x1ea>
		z_shell_op_completion_insert(shell,
   20108:	6829      	ldr	r1, [r5, #0]
   2010a:	1b82      	subs	r2, r0, r6
   2010c:	b292      	uxth	r2, r2
   2010e:	4620      	mov	r0, r4
   20110:	4431      	add	r1, r6
   20112:	f006 fdae 	bl	26c72 <z_shell_op_completion_insert>
	if (!isspace((int) shell->ctx->cmd_buff[
   20116:	68a0      	ldr	r0, [r4, #8]
					shell->ctx->cmd_buff_pos])) {
   20118:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
	if (!isspace((int) shell->ctx->cmd_buff[
   2011a:	4403      	add	r3, r0
   2011c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   20120:	2b20      	cmp	r3, #32
   20122:	d03b      	beq.n	2019c <shell_process+0x270>
   20124:	3b09      	subs	r3, #9
   20126:	2b04      	cmp	r3, #4
   20128:	d938      	bls.n	2019c <shell_process+0x270>
	return shell->ctx->internal.flags.insert_mode == 1;
   2012a:	f8d0 325c 	ldr.w	r3, [r0, #604]	; 0x25c
		if (z_flag_insert_mode_get(shell)) {
   2012e:	07da      	lsls	r2, r3, #31
   20130:	d52f      	bpl.n	20192 <shell_process+0x266>
			z_flag_insert_mode_set(shell, false);
   20132:	2100      	movs	r1, #0
   20134:	f006 f989 	bl	2644a <z_flag_insert_mode_set.isra.0>
			z_shell_op_char_insert(shell, ' ');
   20138:	2120      	movs	r1, #32
   2013a:	4620      	mov	r0, r4
   2013c:	f000 fce4 	bl	20b08 <z_shell_op_char_insert>
			z_flag_insert_mode_set(shell, true);
   20140:	2101      	movs	r1, #1
   20142:	68a0      	ldr	r0, [r4, #8]
				z_flag_insert_mode_set(shell, !status);
   20144:	f006 f981 	bl	2644a <z_flag_insert_mode_set.isra.0>
				break;
   20148:	e701      	b.n	1ff4e <shell_process+0x22>
	search_argc = space ? *argc : *argc - 1;
   2014a:	3901      	subs	r1, #1
	*cmd = z_shell_get_last_command(selected_cmd_get(shell), search_argc,
   2014c:	2000      	movs	r0, #0
   2014e:	ab0e      	add	r3, sp, #56	; 0x38
   20150:	9300      	str	r3, [sp, #0]
   20152:	9001      	str	r0, [sp, #4]
   20154:	ab0c      	add	r3, sp, #48	; 0x30
   20156:	aa1d      	add	r2, sp, #116	; 0x74
   20158:	f006 fb7c 	bl	26854 <z_shell_get_last_command>
	if ((*cmd == NULL) && (search_argc != 0)) {
   2015c:	4605      	mov	r5, r0
   2015e:	2800      	cmp	r0, #0
   20160:	d1a5      	bne.n	200ae <shell_process+0x182>
   20162:	e6f4      	b.n	1ff4e <shell_process+0x22>
	return (strncmp(candidate, str, len) == 0) ? true : false;
   20164:	464a      	mov	r2, r9
   20166:	4651      	mov	r1, sl
   20168:	f8db 0000 	ldr.w	r0, [fp]
   2016c:	f007 fa78 	bl	27660 <strncmp>
		if (is_candidate) {
   20170:	b968      	cbnz	r0, 2018e <shell_process+0x262>
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
   20172:	f8db 0000 	ldr.w	r0, [fp]
   20176:	f007 fa57 	bl	27628 <strlen>
   2017a:	9b04      	ldr	r3, [sp, #16]
   2017c:	4283      	cmp	r3, r0
   2017e:	bf38      	it	cc
   20180:	4603      	movcc	r3, r0
   20182:	b29b      	uxth	r3, r3
				*first_idx = idx;
   20184:	2e00      	cmp	r6, #0
   20186:	bf08      	it	eq
   20188:	46b8      	moveq	r8, r7
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
   2018a:	9304      	str	r3, [sp, #16]
			(*cnt)++;
   2018c:	3601      	adds	r6, #1
		idx++;
   2018e:	3701      	adds	r7, #1
   20190:	e79b      	b.n	200ca <shell_process+0x19e>
			z_shell_op_char_insert(shell, ' ');
   20192:	2120      	movs	r1, #32
					z_shell_op_char_insert(shell, data);
   20194:	4620      	mov	r0, r4
   20196:	f000 fcb7 	bl	20b08 <z_shell_op_char_insert>
   2019a:	e6d8      	b.n	1ff4e <shell_process+0x22>
		z_shell_op_cursor_move(shell, 1);
   2019c:	2101      	movs	r1, #1
   2019e:	4620      	mov	r0, r4
   201a0:	f006 fc23 	bl	269ea <z_shell_op_cursor_move>
   201a4:	e6d3      	b.n	1ff4e <shell_process+0x22>
	} else if (cnt > 1) {
   201a6:	f67f aed2 	bls.w	1ff4e <shell_process+0x22>
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
   201aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   201ac:	aa2a      	add	r2, sp, #168	; 0xa8
   201ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   201b2:	f853 ac34 	ldr.w	sl, [r3, #-52]
	size_t str_len = z_shell_strlen(str);
   201b6:	4650      	mov	r0, sl
   201b8:	f006 f8e4 	bl	26384 <z_shell_strlen>
		shell->ctx->vt100_ctx.printed_cmd = 0;
   201bc:	68a3      	ldr	r3, [r4, #8]
	size_t str_len = z_shell_strlen(str);
   201be:	9006      	str	r0, [sp, #24]
		shell->ctx->vt100_ctx.printed_cmd = 0;
   201c0:	f8a3 b030 	strh.w	fp, [r3, #48]	; 0x30
	longest_option += z_shell_strlen(tab);
   201c4:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 202a8 <shell_process+0x37c>
		shell->ctx->vt100_ctx.printed_cmd = 0;
   201c8:	9605      	str	r6, [sp, #20]
   201ca:	f8cd 800c 	str.w	r8, [sp, #12]
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
   201ce:	68a2      	ldr	r2, [r4, #8]
   201d0:	4628      	mov	r0, r5
   201d2:	9903      	ldr	r1, [sp, #12]
   201d4:	3208      	adds	r2, #8
   201d6:	f000 fb25 	bl	20824 <z_shell_cmd_get>
		idx++;
   201da:	9b03      	ldr	r3, [sp, #12]
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
   201dc:	4607      	mov	r7, r0
		idx++;
   201de:	3301      	adds	r3, #1
   201e0:	9303      	str	r3, [sp, #12]
		if (str && match->syntax &&
   201e2:	f1ba 0f00 	cmp.w	sl, #0
   201e6:	d152      	bne.n	2028e <shell_process+0x362>
		tab_item_print(shell, match->syntax, longest);
   201e8:	683b      	ldr	r3, [r7, #0]
	if (option == NULL) {
   201ea:	2b00      	cmp	r3, #0
   201ec:	d15e      	bne.n	202ac <shell_process+0x380>
		shell->ctx->vt100_ctx.printed_cmd = 0;
   201ee:	68a2      	ldr	r2, [r4, #8]
   201f0:	8613      	strh	r3, [r2, #48]	; 0x30
	while (cnt) {
   201f2:	9b05      	ldr	r3, [sp, #20]
   201f4:	3b01      	subs	r3, #1
   201f6:	9305      	str	r3, [sp, #20]
   201f8:	d1e9      	bne.n	201ce <shell_process+0x2a2>
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n");
   201fa:	492a      	ldr	r1, [pc, #168]	; (202a4 <shell_process+0x378>)
   201fc:	6960      	ldr	r0, [r4, #20]
   201fe:	f006 f8c7 	bl	26390 <z_shell_raw_fprintf>
	z_shell_print_prompt_and_cmd(shell);
   20202:	4620      	mov	r0, r4
   20204:	f000 fcb8 	bl	20b78 <z_shell_print_prompt_and_cmd>
		partial_autocomplete(shell, cmd, argv[arg_idx], first, cnt);
   20208:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2020a:	aa2a      	add	r2, sp, #168	; 0xa8
   2020c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	uint16_t arg_len = z_shell_strlen(arg);
   20210:	f853 0c34 	ldr.w	r0, [r3, #-52]
   20214:	f006 f8b6 	bl	26384 <z_shell_strlen>
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
   20218:	4641      	mov	r1, r8
   2021a:	aa13      	add	r2, sp, #76	; 0x4c
	uint16_t arg_len = z_shell_strlen(arg);
   2021c:	4607      	mov	r7, r0
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
   2021e:	4628      	mov	r0, r5
   20220:	f000 fb00 	bl	20824 <z_shell_cmd_get>
	size_t idx = first + 1;
   20224:	f108 0901 	add.w	r9, r8, #1
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
   20228:	4680      	mov	r8, r0
	strncpy(shell->ctx->temp_buff, match->syntax,
   2022a:	68a0      	ldr	r0, [r4, #8]
   2022c:	f8d8 1000 	ldr.w	r1, [r8]
   20230:	22ff      	movs	r2, #255	; 0xff
   20232:	f500 709f 	add.w	r0, r0, #318	; 0x13e
   20236:	f007 f9d6 	bl	275e6 <strncpy>
	*str = match->syntax;
   2023a:	f8d8 a000 	ldr.w	sl, [r8]
	uint16_t common = UINT16_MAX;
   2023e:	f64f 78ff 	movw	r8, #65535	; 0xffff
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
   20242:	4649      	mov	r1, r9
   20244:	4628      	mov	r0, r5
   20246:	aa18      	add	r2, sp, #96	; 0x60
   20248:	f109 0b01 	add.w	fp, r9, #1
   2024c:	f000 faea 	bl	20824 <z_shell_cmd_get>
		if (match2 == NULL) {
   20250:	2800      	cmp	r0, #0
   20252:	d067      	beq.n	20324 <shell_process+0x3f8>
	size_t common = 0;
   20254:	2200      	movs	r2, #0
   20256:	68a3      	ldr	r3, [r4, #8]
		curr_common = str_common(shell->ctx->temp_buff, match2->syntax,
   20258:	6800      	ldr	r0, [r0, #0]
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   2025a:	f503 739f 	add.w	r3, r3, #318	; 0x13e
   2025e:	f813 cb01 	ldrb.w	ip, [r3], #1
   20262:	5c81      	ldrb	r1, [r0, r2]
   20264:	4561      	cmp	r1, ip
   20266:	d105      	bne.n	20274 <shell_process+0x348>
   20268:	b121      	cbz	r1, 20274 <shell_process+0x348>
   2026a:	f64f 71ff 	movw	r1, #65535	; 0xffff
		common++;
   2026e:	3201      	adds	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   20270:	428a      	cmp	r2, r1
   20272:	d1f4      	bne.n	2025e <shell_process+0x332>
		if ((arg_len == 0U) || (curr_common >= arg_len)) {
   20274:	b10f      	cbz	r7, 2027a <shell_process+0x34e>
   20276:	42ba      	cmp	r2, r7
   20278:	db07      	blt.n	2028a <shell_process+0x35e>
			common = (curr_common < common) ? curr_common : common;
   2027a:	4590      	cmp	r8, r2
   2027c:	bfa8      	it	ge
   2027e:	4690      	movge	r8, r2
			--cnt;
   20280:	3e01      	subs	r6, #1
	while (cnt > 1) {
   20282:	2e01      	cmp	r6, #1
			common = (curr_common < common) ? curr_common : common;
   20284:	fa1f f888 	uxth.w	r8, r8
	while (cnt > 1) {
   20288:	d04c      	beq.n	20324 <shell_process+0x3f8>
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
   2028a:	46d9      	mov	r9, fp
   2028c:	e7d9      	b.n	20242 <shell_process+0x316>
		if (str && match->syntax &&
   2028e:	6800      	ldr	r0, [r0, #0]
   20290:	2800      	cmp	r0, #0
   20292:	d0a9      	beq.n	201e8 <shell_process+0x2bc>
	return (strncmp(candidate, str, len) == 0) ? true : false;
   20294:	4651      	mov	r1, sl
   20296:	9a06      	ldr	r2, [sp, #24]
   20298:	f007 f9e2 	bl	27660 <strncmp>
		if (str && match->syntax &&
   2029c:	2800      	cmp	r0, #0
   2029e:	d0a3      	beq.n	201e8 <shell_process+0x2bc>
   202a0:	e795      	b.n	201ce <shell_process+0x2a2>
   202a2:	bf00      	nop
   202a4:	0002bafd 	.word	0x0002bafd
   202a8:	0002b68c 	.word	0x0002b68c
	longest_option += z_shell_strlen(tab);
   202ac:	4658      	mov	r0, fp
   202ae:	9307      	str	r3, [sp, #28]
   202b0:	f006 f868 	bl	26384 <z_shell_strlen>
   202b4:	9b04      	ldr	r3, [sp, #16]
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
   202b6:	68a1      	ldr	r1, [r4, #8]
	longest_option += z_shell_strlen(tab);
   202b8:	18c2      	adds	r2, r0, r3
   202ba:	b292      	uxth	r2, r2
			- z_shell_strlen(tab)) / longest_option;
   202bc:	4658      	mov	r0, fp
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
   202be:	8d4f      	ldrh	r7, [r1, #42]	; 0x2a
	longest_option += z_shell_strlen(tab);
   202c0:	9209      	str	r2, [sp, #36]	; 0x24
			- z_shell_strlen(tab)) / longest_option;
   202c2:	f006 f85f 	bl	26384 <z_shell_strlen>
	diff = longest_option - z_shell_strlen(option);
   202c6:	9b07      	ldr	r3, [sp, #28]
			- z_shell_strlen(tab)) / longest_option;
   202c8:	9008      	str	r0, [sp, #32]
	diff = longest_option - z_shell_strlen(option);
   202ca:	4618      	mov	r0, r3
   202cc:	f006 f85a 	bl	26384 <z_shell_strlen>
			- z_shell_strlen(tab)) / longest_option;
   202d0:	9908      	ldr	r1, [sp, #32]
	diff = longest_option - z_shell_strlen(option);
   202d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
			- z_shell_strlen(tab)) / longest_option;
   202d4:	1a7f      	subs	r7, r7, r1
	diff = longest_option - z_shell_strlen(option);
   202d6:	eba2 0900 	sub.w	r9, r2, r0
			- z_shell_strlen(tab)) / longest_option;
   202da:	fb97 f2f2 	sdiv	r2, r7, r2
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
   202de:	68a0      	ldr	r0, [r4, #8]
   202e0:	b292      	uxth	r2, r2
   202e2:	f8b0 c030 	ldrh.w	ip, [r0, #48]	; 0x30
   202e6:	9b07      	ldr	r3, [sp, #28]
   202e8:	fbbc f1f2 	udiv	r1, ip, r2
   202ec:	fb02 c211 	mls	r2, r2, r1, ip
   202f0:	f10c 0e01 	add.w	lr, ip, #1
   202f4:	b292      	uxth	r2, r2
	diff = longest_option - z_shell_strlen(option);
   202f6:	fa1f f989 	uxth.w	r9, r9
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
   202fa:	f8a0 e030 	strh.w	lr, [r0, #48]	; 0x30
   202fe:	b95a      	cbnz	r2, 20318 <shell_process+0x3ec>
		z_shell_fprintf(shell, SHELL_OPTION, "\n%s%s", tab, option);
   20300:	9300      	str	r3, [sp, #0]
   20302:	2107      	movs	r1, #7
   20304:	465b      	mov	r3, fp
   20306:	4620      	mov	r0, r4
   20308:	4a9c      	ldr	r2, [pc, #624]	; (2057c <shell_process+0x650>)
   2030a:	f006 fc73 	bl	26bf4 <z_shell_fprintf>
	z_shell_op_cursor_horiz_move(shell, diff);
   2030e:	4649      	mov	r1, r9
   20310:	4620      	mov	r0, r4
   20312:	f000 fac5 	bl	208a0 <z_shell_op_cursor_horiz_move>
   20316:	e76c      	b.n	201f2 <shell_process+0x2c6>
		z_shell_fprintf(shell, SHELL_OPTION, "%s", option);
   20318:	2107      	movs	r1, #7
   2031a:	4620      	mov	r0, r4
   2031c:	4a98      	ldr	r2, [pc, #608]	; (20580 <shell_process+0x654>)
   2031e:	f006 fc69 	bl	26bf4 <z_shell_fprintf>
   20322:	e7f4      	b.n	2030e <shell_process+0x3e2>
	if (common) {
   20324:	f1b8 0f00 	cmp.w	r8, #0
   20328:	f43f ae11 	beq.w	1ff4e <shell_process+0x22>
		z_shell_op_completion_insert(shell, &completion[arg_len],
   2032c:	eba8 0207 	sub.w	r2, r8, r7
   20330:	4620      	mov	r0, r4
   20332:	b292      	uxth	r2, r2
   20334:	eb0a 0107 	add.w	r1, sl, r7
   20338:	f006 fc9b 	bl	26c72 <z_shell_op_completion_insert>
   2033c:	e607      	b.n	1ff4e <shell_process+0x22>
	return shell->ctx->internal.flags.echo == 1;
   2033e:	f8d0 325c 	ldr.w	r3, [r0, #604]	; 0x25c
				if (z_flag_echo_get(shell)) {
   20342:	075b      	lsls	r3, r3, #29
   20344:	f57f ae03 	bpl.w	1ff4e <shell_process+0x22>
					z_flag_history_exit_set(shell, true);
   20348:	2101      	movs	r1, #1
   2034a:	f006 f86e 	bl	2642a <z_flag_history_exit_set.isra.0>
						z_shell_op_char_backspace(shell);
   2034e:	4620      	mov	r0, r4
   20350:	f006 fcac 	bl	26cac <z_shell_op_char_backspace>
   20354:	e5fb      	b.n	1ff4e <shell_process+0x22>
   20356:	f8d0 225c 	ldr.w	r2, [r0, #604]	; 0x25c
				} else if (z_flag_echo_get(shell)) {
   2035a:	0755      	lsls	r5, r2, #29
   2035c:	f57f adf7 	bpl.w	1ff4e <shell_process+0x22>
	switch (data) {
   20360:	3b01      	subs	r3, #1
   20362:	2b16      	cmp	r3, #22
   20364:	f63f adf3 	bhi.w	1ff4e <shell_process+0x22>
   20368:	a201      	add	r2, pc, #4	; (adr r2, 20370 <shell_process+0x444>)
   2036a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2036e:	bf00      	nop
   20370:	0002052d 	.word	0x0002052d
   20374:	000203cd 	.word	0x000203cd
   20378:	000203d5 	.word	0x000203d5
   2037c:	0002002f 	.word	0x0002002f
   20380:	00020521 	.word	0x00020521
   20384:	000203f5 	.word	0x000203f5
   20388:	0001ff4f 	.word	0x0001ff4f
   2038c:	0001ff4f 	.word	0x0001ff4f
   20390:	0001ff4f 	.word	0x0001ff4f
   20394:	0001ff4f 	.word	0x0001ff4f
   20398:	000203fd 	.word	0x000203fd
   2039c:	00020405 	.word	0x00020405
   203a0:	0001ff4f 	.word	0x0001ff4f
   203a4:	00020421 	.word	0x00020421
   203a8:	0001ff4f 	.word	0x0001ff4f
   203ac:	0002042b 	.word	0x0002042b
   203b0:	0001ff4f 	.word	0x0001ff4f
   203b4:	0001ff4f 	.word	0x0001ff4f
   203b8:	0001ff4f 	.word	0x0001ff4f
   203bc:	0001ff4f 	.word	0x0001ff4f
   203c0:	0002042f 	.word	0x0002042f
   203c4:	0001ff4f 	.word	0x0001ff4f
   203c8:	00020453 	.word	0x00020453
		z_shell_op_left_arrow(shell);
   203cc:	4620      	mov	r0, r4
   203ce:	f006 fb77 	bl	26ac0 <z_shell_op_left_arrow>
		break;
   203d2:	e5bc      	b.n	1ff4e <shell_process+0x22>
		z_shell_op_cursor_end_move(shell);
   203d4:	4620      	mov	r0, r4
   203d6:	f006 fb6c 	bl	26ab2 <z_shell_op_cursor_end_move>
		if (!z_shell_cursor_in_empty_line(shell)) {
   203da:	4620      	mov	r0, r4
   203dc:	f006 faf1 	bl	269c2 <z_shell_cursor_in_empty_line>
   203e0:	b918      	cbnz	r0, 203ea <shell_process+0x4be>
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n");
   203e2:	4968      	ldr	r1, [pc, #416]	; (20584 <shell_process+0x658>)
   203e4:	6960      	ldr	r0, [r4, #20]
   203e6:	f005 ffd3 	bl	26390 <z_shell_raw_fprintf>
		z_flag_history_exit_set(shell, true);
   203ea:	2101      	movs	r1, #1
   203ec:	68a0      	ldr	r0, [r4, #8]
   203ee:	f006 f81c 	bl	2642a <z_flag_history_exit_set.isra.0>
   203f2:	e600      	b.n	1fff6 <shell_process+0xca>
		z_shell_op_right_arrow(shell);
   203f4:	4620      	mov	r0, r4
   203f6:	f006 fb6b 	bl	26ad0 <z_shell_op_right_arrow>
		break;
   203fa:	e5a8      	b.n	1ff4e <shell_process+0x22>
		z_shell_op_delete_from_cursor(shell);
   203fc:	4620      	mov	r0, r4
   203fe:	f006 fb70 	bl	26ae2 <z_shell_op_delete_from_cursor>
		break;
   20402:	e5a4      	b.n	1ff4e <shell_process+0x22>
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
   20404:	6960      	ldr	r0, [r4, #20]
   20406:	4a60      	ldr	r2, [pc, #384]	; (20588 <shell_process+0x65c>)
   20408:	495d      	ldr	r1, [pc, #372]	; (20580 <shell_process+0x654>)
   2040a:	f005 ffc1 	bl	26390 <z_shell_raw_fprintf>
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
   2040e:	6960      	ldr	r0, [r4, #20]
   20410:	4a5e      	ldr	r2, [pc, #376]	; (2058c <shell_process+0x660>)
   20412:	495b      	ldr	r1, [pc, #364]	; (20580 <shell_process+0x654>)
   20414:	f005 ffbc 	bl	26390 <z_shell_raw_fprintf>
		z_shell_print_prompt_and_cmd(shell);
   20418:	4620      	mov	r0, r4
   2041a:	f000 fbad 	bl	20b78 <z_shell_print_prompt_and_cmd>
		break;
   2041e:	e596      	b.n	1ff4e <shell_process+0x22>
		history_handle(shell, false);
   20420:	2100      	movs	r1, #0
		history_handle(shell, true);
   20422:	4620      	mov	r0, r4
   20424:	f7ff fbd0 	bl	1fbc8 <history_handle>
		break;
   20428:	e591      	b.n	1ff4e <shell_process+0x22>
		history_handle(shell, true);
   2042a:	2101      	movs	r1, #1
   2042c:	e7f9      	b.n	20422 <shell_process+0x4f6>
		z_shell_op_cursor_home_move(shell);
   2042e:	4620      	mov	r0, r4
   20430:	f006 fb39 	bl	26aa6 <z_shell_op_cursor_home_move>
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
   20434:	2200      	movs	r2, #0
		cmd_buffer_clear(shell);
   20436:	68a3      	ldr	r3, [r4, #8]
		z_flag_history_exit_set(shell, true);
   20438:	2101      	movs	r1, #1
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
   2043a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	shell->ctx->cmd_buff_len = 0;
   2043e:	639a      	str	r2, [r3, #56]	; 0x38
		z_flag_history_exit_set(shell, true);
   20440:	68a0      	ldr	r0, [r4, #8]
   20442:	f005 fff2 	bl	2642a <z_flag_history_exit_set.isra.0>
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
   20446:	4a52      	ldr	r2, [pc, #328]	; (20590 <shell_process+0x664>)
   20448:	494d      	ldr	r1, [pc, #308]	; (20580 <shell_process+0x654>)
   2044a:	6960      	ldr	r0, [r4, #20]
   2044c:	f005 ffa0 	bl	26390 <z_shell_raw_fprintf>
}
   20450:	e57d      	b.n	1ff4e <shell_process+0x22>
		z_shell_op_word_remove(shell);
   20452:	4620      	mov	r0, r4
   20454:	f000 fac4 	bl	209e0 <z_shell_op_word_remove>
		z_flag_history_exit_set(shell, true);
   20458:	2101      	movs	r1, #1
   2045a:	68a0      	ldr	r0, [r4, #8]
   2045c:	f005 ffe5 	bl	2642a <z_flag_history_exit_set.isra.0>
		break;
   20460:	e575      	b.n	1ff4e <shell_process+0x22>
			if (data == '[') {
   20462:	2b5b      	cmp	r3, #91	; 0x5b
   20464:	d101      	bne.n	2046a <shell_process+0x53e>
	shell->ctx->receive_state = state;
   20466:	2302      	movs	r3, #2
   20468:	e5e6      	b.n	20038 <shell_process+0x10c>
	return shell->ctx->internal.flags.echo == 1;
   2046a:	f8d0 225c 	ldr.w	r2, [r0, #604]	; 0x25c
			} else if (z_flag_echo_get(shell)) {
   2046e:	0750      	lsls	r0, r2, #29
   20470:	d509      	bpl.n	20486 <shell_process+0x55a>
	if (data == SHELL_VT100_ASCII_ALT_B) {
   20472:	2b62      	cmp	r3, #98	; 0x62
   20474:	d105      	bne.n	20482 <shell_process+0x556>
		z_shell_op_cursor_word_move(shell, -1);
   20476:	f04f 31ff 	mov.w	r1, #4294967295
		z_shell_op_cursor_word_move(shell, 1);
   2047a:	4620      	mov	r0, r4
   2047c:	f006 fad9 	bl	26a32 <z_shell_op_cursor_word_move>
   20480:	e001      	b.n	20486 <shell_process+0x55a>
	} else if (data == SHELL_VT100_ASCII_ALT_F) {
   20482:	2b66      	cmp	r3, #102	; 0x66
   20484:	d0f9      	beq.n	2047a <shell_process+0x54e>
	shell->ctx->receive_state = state;
   20486:	2200      	movs	r2, #0
			receive_state_change(shell, SHELL_RECEIVE_DEFAULT);
   20488:	68a3      	ldr	r3, [r4, #8]
	shell->ctx->receive_state = state;
   2048a:	715a      	strb	r2, [r3, #5]
}
   2048c:	e55f      	b.n	1ff4e <shell_process+0x22>
	shell->ctx->receive_state = state;
   2048e:	2200      	movs	r2, #0
   20490:	7142      	strb	r2, [r0, #5]
			if (!z_flag_echo_get(shell)) {
   20492:	68a2      	ldr	r2, [r4, #8]
   20494:	f8d2 125c 	ldr.w	r1, [r2, #604]	; 0x25c
   20498:	0749      	lsls	r1, r1, #29
   2049a:	f57f ad58 	bpl.w	1ff4e <shell_process+0x22>
			switch (data) {
   2049e:	3b31      	subs	r3, #49	; 0x31
   204a0:	2b1b      	cmp	r3, #27
   204a2:	f63f ad54 	bhi.w	1ff4e <shell_process+0x22>
   204a6:	a101      	add	r1, pc, #4	; (adr r1, 204ac <shell_process+0x580>)
   204a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   204ac:	00020529 	.word	0x00020529
   204b0:	00020535 	.word	0x00020535
   204b4:	00020549 	.word	0x00020549
   204b8:	0002051d 	.word	0x0002051d
   204bc:	0001ff4f 	.word	0x0001ff4f
   204c0:	0001ff4f 	.word	0x0001ff4f
   204c4:	0001ff4f 	.word	0x0001ff4f
   204c8:	0001ff4f 	.word	0x0001ff4f
   204cc:	0001ff4f 	.word	0x0001ff4f
   204d0:	0001ff4f 	.word	0x0001ff4f
   204d4:	0001ff4f 	.word	0x0001ff4f
   204d8:	0001ff4f 	.word	0x0001ff4f
   204dc:	0001ff4f 	.word	0x0001ff4f
   204e0:	0001ff4f 	.word	0x0001ff4f
   204e4:	0001ff4f 	.word	0x0001ff4f
   204e8:	0001ff4f 	.word	0x0001ff4f
   204ec:	0002042b 	.word	0x0002042b
   204f0:	00020421 	.word	0x00020421
   204f4:	000203f5 	.word	0x000203f5
   204f8:	000203cd 	.word	0x000203cd
   204fc:	0001ff4f 	.word	0x0001ff4f
   20500:	00020521 	.word	0x00020521
   20504:	0001ff4f 	.word	0x0001ff4f
   20508:	0002052d 	.word	0x0002052d
   2050c:	0001ff4f 	.word	0x0001ff4f
   20510:	0001ff4f 	.word	0x0001ff4f
   20514:	0001ff4f 	.word	0x0001ff4f
   20518:	00020539 	.word	0x00020539
	shell->ctx->receive_state = state;
   2051c:	2303      	movs	r3, #3
   2051e:	7153      	strb	r3, [r2, #5]
		z_shell_op_cursor_end_move(shell);
   20520:	4620      	mov	r0, r4
   20522:	f006 fac6 	bl	26ab2 <z_shell_op_cursor_end_move>
		break;
   20526:	e512      	b.n	1ff4e <shell_process+0x22>
	shell->ctx->receive_state = state;
   20528:	2303      	movs	r3, #3
   2052a:	7153      	strb	r3, [r2, #5]
		z_shell_op_cursor_home_move(shell);
   2052c:	4620      	mov	r0, r4
   2052e:	f006 faba 	bl	26aa6 <z_shell_op_cursor_home_move>
		break;
   20532:	e50c      	b.n	1ff4e <shell_process+0x22>
	shell->ctx->receive_state = state;
   20534:	2303      	movs	r3, #3
   20536:	7153      	strb	r3, [r2, #5]
				bool status = z_flag_insert_mode_get(shell);
   20538:	68a0      	ldr	r0, [r4, #8]
	return shell->ctx->internal.flags.insert_mode == 1;
   2053a:	f8d0 125c 	ldr.w	r1, [r0, #604]	; 0x25c
   2053e:	f001 0101 	and.w	r1, r1, #1
				z_flag_insert_mode_set(shell, !status);
   20542:	f081 0101 	eor.w	r1, r1, #1
   20546:	e5fd      	b.n	20144 <shell_process+0x218>
	shell->ctx->receive_state = state;
   20548:	2303      	movs	r3, #3
   2054a:	7153      	strb	r3, [r2, #5]
				if (z_flag_echo_get(shell)) {
   2054c:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.echo == 1;
   2054e:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
   20552:	075b      	lsls	r3, r3, #29
   20554:	f57f acfb 	bpl.w	1ff4e <shell_process+0x22>
   20558:	e569      	b.n	2002e <shell_process+0x102>
	shell->ctx->receive_state = state;
   2055a:	2300      	movs	r3, #0
   2055c:	e56c      	b.n	20038 <shell_process+0x10c>
	Z_SHELL_SET_FLAG_ATOMIC(shell, processing, val, ret);
   2055e:	68a0      	ldr	r0, [r4, #8]
   20560:	f06f 0110 	mvn.w	r1, #16
   20564:	f500 7017 	add.w	r0, r0, #604	; 0x25c
   20568:	f005 fec2 	bl	262f0 <atomic_and>
		break;
	}

	/* atomically clear the processing flag */
	z_flag_processing_set(shell, false);
}
   2056c:	b02b      	add	sp, #172	; 0xac
   2056e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
   20572:	2900      	cmp	r1, #0
   20574:	f43f ad99 	beq.w	200aa <shell_process+0x17e>
   20578:	e5e8      	b.n	2014c <shell_process+0x220>
   2057a:	bf00      	nop
   2057c:	0002bed2 	.word	0x0002bed2
   20580:	0002bc4b 	.word	0x0002bc4b
   20584:	0002bafd 	.word	0x0002bafd
   20588:	0002c0ad 	.word	0x0002c0ad
   2058c:	0002c0b1 	.word	0x0002c0b1
   20590:	0002c0a9 	.word	0x0002c0a9

00020594 <shell_init>:
{
   20594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20598:	4604      	mov	r4, r0
	if (shell->ctx->tid) {
   2059a:	6880      	ldr	r0, [r0, #8]
{
   2059c:	460f      	mov	r7, r1
	if (shell->ctx->tid) {
   2059e:	f8d0 1304 	ldr.w	r1, [r0, #772]	; 0x304
{
   205a2:	461e      	mov	r6, r3
   205a4:	b088      	sub	sp, #32
	if (shell->ctx->tid) {
   205a6:	2900      	cmp	r1, #0
   205a8:	d16d      	bne.n	20686 <shell_init+0xf2>
	memset(shell->ctx, 0, sizeof(*shell->ctx));
   205aa:	f44f 7242 	mov.w	r2, #776	; 0x308
   205ae:	f007 f8b8 	bl	27722 <memset>
	shell->ctx->prompt = shell->default_prompt;
   205b2:	68a3      	ldr	r3, [r4, #8]
   205b4:	6822      	ldr	r2, [r4, #0]
	z_shell_history_init(shell->history);
   205b6:	68e0      	ldr	r0, [r4, #12]
	shell->ctx->prompt = shell->default_prompt;
   205b8:	601a      	str	r2, [r3, #0]
	z_shell_history_init(shell->history);
   205ba:	f006 fd04 	bl	26fc6 <z_shell_history_init>
	k_mutex_init(&shell->ctx->wr_mtx);
   205be:	68a0      	ldr	r0, [r4, #8]
   205c0:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
	return z_impl_k_mutex_init(mutex);
   205c4:	f007 fb8d 	bl	27ce2 <z_impl_k_mutex_init>
   205c8:	f44f 7828 	mov.w	r8, #672	; 0x2a0
   205cc:	f44f 7518 	mov.w	r5, #608	; 0x260
		k_poll_signal_init(&shell->ctx->signals[i]);
   205d0:	68a0      	ldr	r0, [r4, #8]
   205d2:	4428      	add	r0, r5
		arch_syscall_invoke1(*(uintptr_t *)&sig, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
   205d4:	f007 fe6a 	bl	282ac <z_impl_k_poll_signal_init>
		k_poll_event_init(&shell->ctx->events[i],
   205d8:	68a0      	ldr	r0, [r4, #8]
   205da:	2200      	movs	r2, #0
   205dc:	1943      	adds	r3, r0, r5
   205de:	2101      	movs	r1, #1
   205e0:	4440      	add	r0, r8
   205e2:	3510      	adds	r5, #16
   205e4:	f007 fe45 	bl	28272 <k_poll_event_init>
	for (int i = 0; i < SHELL_SIGNALS; i++) {
   205e8:	f5b5 7f28 	cmp.w	r5, #672	; 0x2a0
   205ec:	f108 0814 	add.w	r8, r8, #20
   205f0:	d1ee      	bne.n	205d0 <shell_init+0x3c>
		shell->stats->log_lost_cnt = 0;
   205f2:	2500      	movs	r5, #0
   205f4:	69a3      	ldr	r3, [r4, #24]
	Z_SHELL_SET_FLAG_ATOMIC(shell, tx_rdy, val, ret);
   205f6:	68a0      	ldr	r0, [r4, #8]
   205f8:	601d      	str	r5, [r3, #0]
   205fa:	2120      	movs	r1, #32
   205fc:	f500 7017 	add.w	r0, r0, #604	; 0x25c
   20600:	f005 fe6b 	bl	262da <atomic_or>
	z_flag_echo_set(shell, IS_ENABLED(CONFIG_SHELL_ECHO_STATUS));
   20604:	2101      	movs	r1, #1
   20606:	68a0      	ldr	r0, [r4, #8]
   20608:	f005 fecf 	bl	263aa <z_flag_echo_set.isra.0>
	z_flag_obscure_set(shell, IS_ENABLED(CONFIG_SHELL_START_OBSCURED));
   2060c:	4629      	mov	r1, r5
   2060e:	68a0      	ldr	r0, [r4, #8]
   20610:	f005 fedb 	bl	263ca <z_flag_obscure_set.isra.0>
	z_flag_mode_delete_set(shell,
   20614:	2101      	movs	r1, #1
   20616:	68a0      	ldr	r0, [r4, #8]
   20618:	f005 fee7 	bl	263ea <z_flag_mode_delete_set.isra.0>
	shell->ctx->vt100_ctx.cons.terminal_wid =
   2061c:	68a3      	ldr	r3, [r4, #8]
	shell->ctx->vt100_ctx.cons.terminal_hei =
   2061e:	4a1b      	ldr	r2, [pc, #108]	; (2068c <shell_init+0xf8>)
	shell->ctx->vt100_ctx.cons.name_len = z_shell_strlen(shell->ctx->prompt);
   20620:	6818      	ldr	r0, [r3, #0]
	shell->ctx->vt100_ctx.cons.terminal_hei =
   20622:	629a      	str	r2, [r3, #40]	; 0x28
	shell->ctx->vt100_ctx.cons.name_len = z_shell_strlen(shell->ctx->prompt);
   20624:	f005 feae 	bl	26384 <z_shell_strlen>
   20628:	68a3      	ldr	r3, [r4, #8]
	z_flag_use_colors_set(shell, IS_ENABLED(CONFIG_SHELL_VT100_COLORS));
   2062a:	2101      	movs	r1, #1
	shell->ctx->vt100_ctx.cons.name_len = z_shell_strlen(shell->ctx->prompt);
   2062c:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
	z_flag_use_colors_set(shell, IS_ENABLED(CONFIG_SHELL_VT100_COLORS));
   20630:	68a0      	ldr	r0, [r4, #8]
   20632:	f005 feea 	bl	2640a <z_flag_use_colors_set.isra.0>
	int ret = shell->iface->api->init(shell->iface, p_config,
   20636:	6860      	ldr	r0, [r4, #4]
   20638:	4639      	mov	r1, r7
   2063a:	6803      	ldr	r3, [r0, #0]
   2063c:	4a14      	ldr	r2, [pc, #80]	; (20690 <shell_init+0xfc>)
   2063e:	681d      	ldr	r5, [r3, #0]
   20640:	4623      	mov	r3, r4
   20642:	47a8      	blx	r5
	if (ret == 0) {
   20644:	4605      	mov	r5, r0
   20646:	b9d0      	cbnz	r0, 2067e <shell_init+0xea>
	shell->ctx->state = state;
   20648:	2201      	movs	r2, #1
   2064a:	68a3      	ldr	r3, [r4, #8]
   2064c:	711a      	strb	r2, [r3, #4]
	k_tid_t tid = k_thread_create(shell->thread,
   2064e:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   20652:	2200      	movs	r2, #0
   20654:	2300      	movs	r3, #0
   20656:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2065a:	230e      	movs	r3, #14
   2065c:	9303      	str	r3, [sp, #12]
   2065e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20660:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   20664:	e9cd 6301 	strd	r6, r3, [sp, #4]
   20668:	9504      	str	r5, [sp, #16]
   2066a:	4b0a      	ldr	r3, [pc, #40]	; (20694 <shell_init+0x100>)
   2066c:	9400      	str	r4, [sp, #0]
   2066e:	f003 fad3 	bl	23c18 <z_impl_k_thread_create>
	shell->ctx->tid = tid;
   20672:	68a3      	ldr	r3, [r4, #8]
	k_thread_name_set(tid, shell->thread_name);
   20674:	6a61      	ldr	r1, [r4, #36]	; 0x24
	shell->ctx->tid = tid;
   20676:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
	return z_impl_k_thread_name_set(thread, str);
   2067a:	f003 fa23 	bl	23ac4 <z_impl_k_thread_name_set>
}
   2067e:	4628      	mov	r0, r5
   20680:	b008      	add	sp, #32
   20682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EALREADY;
   20686:	f06f 0577 	mvn.w	r5, #119	; 0x77
   2068a:	e7f8      	b.n	2067e <shell_init+0xea>
   2068c:	00500018 	.word	0x00500018
   20690:	0002646b 	.word	0x0002646b
   20694:	000206e9 	.word	0x000206e9

00020698 <shell_start>:
{
   20698:	b510      	push	{r4, lr}
   2069a:	4604      	mov	r4, r0
	if (state_get(shell) != SHELL_STATE_INITIALIZED) {
   2069c:	6880      	ldr	r0, [r0, #8]
   2069e:	7903      	ldrb	r3, [r0, #4]
   206a0:	2b01      	cmp	r3, #1
   206a2:	d11c      	bne.n	206de <shell_start+0x46>
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   206a4:	f04f 32ff 	mov.w	r2, #4294967295
   206a8:	f04f 33ff 	mov.w	r3, #4294967295
   206ac:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
   206b0:	f005 fee5 	bl	2647e <k_mutex_lock.constprop.0>
		z_shell_vt100_color_set(shell, SHELL_NORMAL);
   206b4:	2100      	movs	r1, #0
   206b6:	4620      	mov	r0, r4
   206b8:	f000 f948 	bl	2094c <z_shell_vt100_color_set>
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n\n");
   206bc:	4909      	ldr	r1, [pc, #36]	; (206e4 <shell_start+0x4c>)
   206be:	6960      	ldr	r0, [r4, #20]
   206c0:	f005 fe66 	bl	26390 <z_shell_raw_fprintf>
	shell->ctx->state = state;
   206c4:	2202      	movs	r2, #2
   206c6:	68a3      	ldr	r3, [r4, #8]
   206c8:	4620      	mov	r0, r4
   206ca:	711a      	strb	r2, [r3, #4]
	if (state == SHELL_STATE_ACTIVE) {
   206cc:	f7ff fa5a 	bl	1fb84 <state_set.part.0>
	k_mutex_unlock(&shell->ctx->wr_mtx);
   206d0:	68a0      	ldr	r0, [r4, #8]
   206d2:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
   206d6:	f005 fe53 	bl	26380 <k_mutex_unlock>
	return 0;
   206da:	2000      	movs	r0, #0
}
   206dc:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   206de:	f06f 0085 	mvn.w	r0, #133	; 0x85
   206e2:	e7fb      	b.n	206dc <shell_start+0x44>
   206e4:	0002bafc 	.word	0x0002bafc

000206e8 <shell_thread>:
{
   206e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   206ec:	4604      	mov	r4, r0
	err = shell->iface->api->enable(shell->iface, false);
   206ee:	6840      	ldr	r0, [r0, #4]
{
   206f0:	460e      	mov	r6, r1
	err = shell->iface->api->enable(shell->iface, false);
   206f2:	6803      	ldr	r3, [r0, #0]
   206f4:	2100      	movs	r1, #0
   206f6:	689b      	ldr	r3, [r3, #8]
{
   206f8:	4615      	mov	r5, r2
	err = shell->iface->api->enable(shell->iface, false);
   206fa:	4798      	blx	r3
	if (err != 0) {
   206fc:	2800      	cmp	r0, #0
   206fe:	d14c      	bne.n	2079a <shell_thread+0xb2>
	if (IS_ENABLED(CONFIG_SHELL_LOG_BACKEND) && log_backend) {
   20700:	b126      	cbz	r6, 2070c <shell_thread+0x24>
		z_shell_log_backend_enable(shell->log_backend, (void *)shell,
   20702:	462a      	mov	r2, r5
   20704:	4621      	mov	r1, r4
   20706:	69e0      	ldr	r0, [r4, #28]
   20708:	f006 fd19 	bl	2713e <z_shell_log_backend_enable>
	err = shell_start(shell);
   2070c:	4620      	mov	r0, r4
   2070e:	f7ff ffc3 	bl	20698 <shell_start>
	if (err != 0) {
   20712:	2800      	cmp	r0, #0
   20714:	d141      	bne.n	2079a <shell_thread+0xb2>
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
   20716:	f8df 8094 	ldr.w	r8, [pc, #148]	; 207ac <shell_thread+0xc4>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
   2071a:	4f21      	ldr	r7, [pc, #132]	; (207a0 <shell_thread+0xb8>)
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
   2071c:	4e21      	ldr	r6, [pc, #132]	; (207a4 <shell_thread+0xbc>)
		err = k_poll(shell->ctx->events, SHELL_SIGNAL_TXDONE,
   2071e:	68a0      	ldr	r0, [r4, #8]
   20720:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
	return z_impl_k_poll(events, num_events, timeout);
   20724:	f04f 32ff 	mov.w	r2, #4294967295
   20728:	f04f 33ff 	mov.w	r3, #4294967295
   2072c:	2103      	movs	r1, #3
   2072e:	f004 fa8d 	bl	24c4c <z_impl_k_poll>
		if (err != 0) {
   20732:	4605      	mov	r5, r0
   20734:	68a0      	ldr	r0, [r4, #8]
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   20736:	f04f 32ff 	mov.w	r2, #4294967295
   2073a:	f04f 33ff 	mov.w	r3, #4294967295
   2073e:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
		if (err != 0) {
   20742:	b175      	cbz	r5, 20762 <shell_thread+0x7a>
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   20744:	f005 fe9b 	bl	2647e <k_mutex_lock.constprop.0>
			z_shell_fprintf(shell, SHELL_ERROR,
   20748:	4620      	mov	r0, r4
   2074a:	462b      	mov	r3, r5
   2074c:	2102      	movs	r1, #2
   2074e:	4a16      	ldr	r2, [pc, #88]	; (207a8 <shell_thread+0xc0>)
   20750:	f006 fa50 	bl	26bf4 <z_shell_fprintf>
			k_mutex_unlock(&shell->ctx->wr_mtx);
   20754:	68a0      	ldr	r0, [r4, #8]
}
   20756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_mutex_unlock(&shell->ctx->wr_mtx);
   2075a:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
   2075e:	f005 be0f 	b.w	26380 <k_mutex_unlock>
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   20762:	f005 fe8c 	bl	2647e <k_mutex_lock.constprop.0>
		if (shell->iface->api->update) {
   20766:	6860      	ldr	r0, [r4, #4]
   20768:	6803      	ldr	r3, [r0, #0]
   2076a:	695b      	ldr	r3, [r3, #20]
   2076c:	b103      	cbz	r3, 20770 <shell_thread+0x88>
			shell->iface->api->update(shell->iface);
   2076e:	4798      	blx	r3
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
   20770:	4642      	mov	r2, r8
   20772:	4620      	mov	r0, r4
   20774:	2102      	movs	r1, #2
   20776:	f005 fdee 	bl	26356 <shell_signal_handle>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
   2077a:	463a      	mov	r2, r7
   2077c:	4620      	mov	r0, r4
   2077e:	2100      	movs	r1, #0
   20780:	f005 fde9 	bl	26356 <shell_signal_handle>
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
   20784:	4620      	mov	r0, r4
   20786:	4632      	mov	r2, r6
   20788:	2101      	movs	r1, #1
   2078a:	f005 fde4 	bl	26356 <shell_signal_handle>
		k_mutex_unlock(&shell->ctx->wr_mtx);
   2078e:	68a0      	ldr	r0, [r4, #8]
   20790:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
   20794:	f005 fdf4 	bl	26380 <k_mutex_unlock>
   20798:	e7c1      	b.n	2071e <shell_thread+0x36>
}
   2079a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2079e:	bf00      	nop
   207a0:	0001ff2d 	.word	0x0001ff2d
   207a4:	00026483 	.word	0x00026483
   207a8:	0002bed8 	.word	0x0002bed8
   207ac:	00026307 	.word	0x00026307

000207b0 <cmd_help>:

	return (int)z_flag_mode_delete_set(shell, val);
}

static int cmd_help(const struct shell *shell, size_t argc, char **argv)
{
   207b0:	b510      	push	{r4, lr}
   207b2:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

#if defined(CONFIG_SHELL_TAB)
	shell_print(shell, "Please press the <Tab> button to see all available "
   207b4:	2100      	movs	r1, #0
   207b6:	4a0c      	ldr	r2, [pc, #48]	; (207e8 <cmd_help+0x38>)
   207b8:	f005 fec0 	bl	2653c <shell_fprintf>
			   "commands.");
#endif

#if defined(CONFIG_SHELL_TAB_AUTOCOMPLETION)
	shell_print(shell,
   207bc:	4620      	mov	r0, r4
   207be:	2100      	movs	r1, #0
   207c0:	4a0a      	ldr	r2, [pc, #40]	; (207ec <cmd_help+0x3c>)
   207c2:	f005 febb 	bl	2653c <shell_fprintf>
		"You can also use the <Tab> button to prompt or auto-complete"
		" all commands or its subcommands.");
#endif

#if defined(CONFIG_SHELL_HELP)
	shell_print(shell,
   207c6:	4620      	mov	r0, r4
   207c8:	2100      	movs	r1, #0
   207ca:	4a09      	ldr	r2, [pc, #36]	; (207f0 <cmd_help+0x40>)
   207cc:	f005 feb6 	bl	2653c <shell_fprintf>
		"You can try to call commands with <-h> or <--help> parameter"
		" for more information.");
#endif

#if defined(CONFIG_SHELL_METAKEYS)
	shell_print(shell,
   207d0:	4620      	mov	r0, r4
   207d2:	2100      	movs	r1, #0
   207d4:	4a07      	ldr	r2, [pc, #28]	; (207f4 <cmd_help+0x44>)
   207d6:	f005 feb1 	bl	2653c <shell_fprintf>
		"Please refer to shell documentation for more details.");
#endif

	if (IS_ENABLED(CONFIG_SHELL_HELP)) {
		/* For NULL argument function will print all root commands */
		z_shell_help_subcmd_print(shell, NULL,
   207da:	4620      	mov	r0, r4
   207dc:	2100      	movs	r1, #0
   207de:	4a06      	ldr	r2, [pc, #24]	; (207f8 <cmd_help+0x48>)
   207e0:	f000 fb26 	bl	20e30 <z_shell_help_subcmd_print>
			shell_print(shell, "  %s", entry->syntax);
		}
	}

	return 0;
}
   207e4:	2000      	movs	r0, #0
   207e6:	bd10      	pop	{r4, pc}
   207e8:	0002beef 	.word	0x0002beef
   207ec:	0002bf2d 	.word	0x0002bf2d
   207f0:	0002bf8c 	.word	0x0002bf8c
   207f4:	0002bfe0 	.word	0x0002bfe0
   207f8:	0002c07a 	.word	0x0002c07a

000207fc <z_shell_fprintf_fmt>:
	return 0;
}

void z_shell_fprintf_fmt(const struct shell_fprintf *sh_fprintf,
			 const char *fmt, va_list args)
{
   207fc:	b510      	push	{r4, lr}
   207fe:	4604      	mov	r4, r0
   20800:	4613      	mov	r3, r2
	(void)cbvprintf(out_func, (void *)sh_fprintf, fmt, args);
   20802:	460a      	mov	r2, r1
   20804:	4601      	mov	r1, r0
   20806:	4806      	ldr	r0, [pc, #24]	; (20820 <z_shell_fprintf_fmt+0x24>)
   20808:	f7fd fb42 	bl	1de90 <cbvprintf>

	if (sh_fprintf->ctrl_blk->autoflush) {
   2080c:	6923      	ldr	r3, [r4, #16]
   2080e:	791b      	ldrb	r3, [r3, #4]
   20810:	b123      	cbz	r3, 2081c <z_shell_fprintf_fmt+0x20>
		z_shell_fprintf_buffer_flush(sh_fprintf);
   20812:	4620      	mov	r0, r4
	}
}
   20814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_fprintf_buffer_flush(sh_fprintf);
   20818:	f005 beb2 	b.w	26580 <z_shell_fprintf_buffer_flush>
}
   2081c:	bd10      	pop	{r4, pc}
   2081e:	bf00      	nop
   20820:	00026599 	.word	0x00026599

00020824 <z_shell_cmd_get>:

const struct shell_static_entry *z_shell_cmd_get(
					const struct shell_static_entry *parent,
					size_t idx,
					struct shell_static_entry *dloc)
{
   20824:	b510      	push	{r4, lr}
   20826:	460b      	mov	r3, r1
   20828:	4614      	mov	r4, r2
	const struct shell_static_entry *res = NULL;

	if (parent == NULL) {
   2082a:	b950      	cbnz	r0, 20842 <z_shell_cmd_get+0x1e>
	return ((uint8_t *)__shell_root_cmds_end -
   2082c:	490e      	ldr	r1, [pc, #56]	; (20868 <z_shell_cmd_get+0x44>)
   2082e:	4a0f      	ldr	r2, [pc, #60]	; (2086c <z_shell_cmd_get+0x48>)
   20830:	1a52      	subs	r2, r2, r1
		return  (idx < shell_root_cmd_count()) ?
				shell_root_cmd_get(idx)->u.entry : NULL;
   20832:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
   20836:	d20f      	bcs.n	20858 <z_shell_cmd_get+0x34>
   20838:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   2083c:	684c      	ldr	r4, [r1, #4]
			}
		}
	}

	return res;
}
   2083e:	4620      	mov	r0, r4
   20840:	bd10      	pop	{r4, pc}
	if (parent->subcmd) {
   20842:	6881      	ldr	r1, [r0, #8]
   20844:	b141      	cbz	r1, 20858 <z_shell_cmd_get+0x34>
		if (parent->subcmd->is_dynamic) {
   20846:	684a      	ldr	r2, [r1, #4]
   20848:	7809      	ldrb	r1, [r1, #0]
   2084a:	b139      	cbz	r1, 2085c <z_shell_cmd_get+0x38>
			parent->subcmd->u.dynamic_get(idx, dloc);
   2084c:	4618      	mov	r0, r3
   2084e:	4621      	mov	r1, r4
   20850:	4790      	blx	r2
			if (dloc->syntax != NULL) {
   20852:	6823      	ldr	r3, [r4, #0]
   20854:	2b00      	cmp	r3, #0
   20856:	d1f2      	bne.n	2083e <z_shell_cmd_get+0x1a>
	const struct shell_static_entry *res = NULL;
   20858:	2400      	movs	r4, #0
   2085a:	e7f0      	b.n	2083e <z_shell_cmd_get+0x1a>
			if (parent->subcmd->u.entry[idx].syntax != NULL) {
   2085c:	2014      	movs	r0, #20
   2085e:	4343      	muls	r3, r0
   20860:	18d4      	adds	r4, r2, r3
   20862:	58d3      	ldr	r3, [r2, r3]
   20864:	e7f6      	b.n	20854 <z_shell_cmd_get+0x30>
   20866:	bf00      	nop
   20868:	00028664 	.word	0x00028664
   2086c:	000286ec 	.word	0x000286ec

00020870 <z_clear_eos.isra.0>:
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
   20870:	4a01      	ldr	r2, [pc, #4]	; (20878 <z_clear_eos.isra.0+0x8>)
   20872:	4902      	ldr	r1, [pc, #8]	; (2087c <z_clear_eos.isra.0+0xc>)
   20874:	f006 b884 	b.w	26980 <z_shell_raw_fprintf>
   20878:	0002c0bd 	.word	0x0002c0bd
   2087c:	0002bc4b 	.word	0x0002bc4b

00020880 <z_shell_op_cursor_vert_move>:
#include <ctype.h>
#include "shell_ops.h"

void z_shell_op_cursor_vert_move(const struct shell *shell, int32_t delta)
{
	if (delta != 0) {
   20880:	b159      	cbz	r1, 2089a <z_shell_op_cursor_vert_move+0x1a>
		z_shell_raw_fprintf(shell->fprintf_ctx, "\033[%d%c",
   20882:	2900      	cmp	r1, #0
   20884:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
   20888:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
   2088c:	bfcc      	ite	gt
   2088e:	2341      	movgt	r3, #65	; 0x41
   20890:	2342      	movle	r3, #66	; 0x42
   20892:	4902      	ldr	r1, [pc, #8]	; (2089c <z_shell_op_cursor_vert_move+0x1c>)
   20894:	6940      	ldr	r0, [r0, #20]
   20896:	f006 b873 	b.w	26980 <z_shell_raw_fprintf>
				    delta > 0 ? delta : -delta,
				    delta > 0 ? 'A' : 'B');
	}
}
   2089a:	4770      	bx	lr
   2089c:	0002c0b6 	.word	0x0002c0b6

000208a0 <z_shell_op_cursor_horiz_move>:

void z_shell_op_cursor_horiz_move(const struct shell *shell, int32_t delta)
{
	if (delta != 0) {
   208a0:	b159      	cbz	r1, 208ba <z_shell_op_cursor_horiz_move+0x1a>
		z_shell_raw_fprintf(shell->fprintf_ctx, "\033[%d%c",
   208a2:	2900      	cmp	r1, #0
   208a4:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
   208a8:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
   208ac:	bfcc      	ite	gt
   208ae:	2343      	movgt	r3, #67	; 0x43
   208b0:	2344      	movle	r3, #68	; 0x44
   208b2:	4902      	ldr	r1, [pc, #8]	; (208bc <z_shell_op_cursor_horiz_move+0x1c>)
   208b4:	6940      	ldr	r0, [r0, #20]
   208b6:	f006 b863 	b.w	26980 <z_shell_raw_fprintf>
				    delta > 0 ? delta : -delta,
				    delta > 0 ? 'C' : 'D');
	}
}
   208ba:	4770      	bx	lr
   208bc:	0002c0b6 	.word	0x0002c0b6

000208c0 <z_shell_op_cond_next_line>:
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
}

void z_shell_op_cond_next_line(const struct shell *shell)
{
   208c0:	b510      	push	{r4, lr}
   208c2:	4604      	mov	r4, r0
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
   208c4:	f006 f87d 	bl	269c2 <z_shell_cursor_in_empty_line>
   208c8:	b128      	cbz	r0, 208d6 <z_shell_op_cond_next_line+0x16>
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n");
   208ca:	6960      	ldr	r0, [r4, #20]
   208cc:	4905      	ldr	r1, [pc, #20]	; (208e4 <z_shell_op_cond_next_line+0x24>)
		z_cursor_next_line_move(shell);
	}
}
   208ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   208d2:	f006 b855 	b.w	26980 <z_shell_raw_fprintf>
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
   208d6:	f104 0008 	add.w	r0, r4, #8
   208da:	f006 f85e 	bl	2699a <full_line_cmd.isra.0>
   208de:	2800      	cmp	r0, #0
   208e0:	d1f3      	bne.n	208ca <z_shell_op_cond_next_line+0xa>
}
   208e2:	bd10      	pop	{r4, pc}
   208e4:	0002bafd 	.word	0x0002bafd

000208e8 <z_shell_op_cursor_position_synchronize>:

void z_shell_op_cursor_position_synchronize(const struct shell *shell)
{
   208e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
   208ec:	4606      	mov	r6, r0
   208ee:	f856 4f08 	ldr.w	r4, [r6, #8]!
{
   208f2:	4605      	mov	r5, r0
	bool last_line;

	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   208f4:	8f22      	ldrh	r2, [r4, #56]	; 0x38
   208f6:	f104 0020 	add.w	r0, r4, #32
   208fa:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
   208fc:	f005 fe92 	bl	26624 <z_shell_multiline_data_calc>
	last_line = (cons->cur_y == cons->cur_y_end);

	/* In case cursor reaches the bottom line of a terminal, it will
	 * be moved to the next line.
	 */
	if (full_line_cmd(shell)) {
   20900:	4630      	mov	r0, r6
	last_line = (cons->cur_y == cons->cur_y_end);
   20902:	f8b4 8024 	ldrh.w	r8, [r4, #36]	; 0x24
   20906:	8ce7      	ldrh	r7, [r4, #38]	; 0x26
	if (full_line_cmd(shell)) {
   20908:	f006 f847 	bl	2699a <full_line_cmd.isra.0>
   2090c:	b118      	cbz	r0, 20916 <z_shell_op_cursor_position_synchronize+0x2e>
   2090e:	490a      	ldr	r1, [pc, #40]	; (20938 <z_shell_op_cursor_position_synchronize+0x50>)
   20910:	6968      	ldr	r0, [r5, #20]
   20912:	f006 f835 	bl	26980 <z_shell_raw_fprintf>
		z_cursor_next_line_move(shell);
	}

	if (last_line) {
   20916:	45b8      	cmp	r8, r7
   20918:	d107      	bne.n	2092a <z_shell_op_cursor_position_synchronize+0x42>
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
							       cons->cur_x_end);
	} else {
		z_shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
   2091a:	8c21      	ldrh	r1, [r4, #32]
							       cons->cur_x_end);
   2091c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
   2091e:	4628      	mov	r0, r5
	}
}
   20920:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
   20924:	1ac9      	subs	r1, r1, r3
   20926:	f7ff bfbb 	b.w	208a0 <z_shell_op_cursor_horiz_move>
		z_shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
   2092a:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
   2092c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   2092e:	4628      	mov	r0, r5
   20930:	1ac9      	subs	r1, r1, r3
   20932:	f7ff ffa5 	bl	20880 <z_shell_op_cursor_vert_move>
   20936:	e7f0      	b.n	2091a <z_shell_op_cursor_position_synchronize+0x32>
   20938:	0002bafd 	.word	0x0002bafd

0002093c <z_shell_print_cmd>:
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
}

void z_shell_print_cmd(const struct shell *shell)
{
	z_shell_raw_fprintf(shell->fprintf_ctx, "%s", shell->ctx->cmd_buff);
   2093c:	6882      	ldr	r2, [r0, #8]
   2093e:	4902      	ldr	r1, [pc, #8]	; (20948 <z_shell_print_cmd+0xc>)
   20940:	6940      	ldr	r0, [r0, #20]
   20942:	323e      	adds	r2, #62	; 0x3e
   20944:	f006 b81c 	b.w	26980 <z_shell_raw_fprintf>
   20948:	0002bc4b 	.word	0x0002bc4b

0002094c <z_shell_vt100_color_set>:

}

void z_shell_vt100_color_set(const struct shell *shell,
			     enum shell_vt100_color color)
{
   2094c:	b507      	push	{r0, r1, r2, lr}

	if (shell->ctx->vt100_ctx.col.col == color) {
   2094e:	6883      	ldr	r3, [r0, #8]
   20950:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
   20954:	428a      	cmp	r2, r1
   20956:	d012      	beq.n	2097e <z_shell_vt100_color_set+0x32>
		return;
	}

	shell->ctx->vt100_ctx.col.col = color;
   20958:	f883 102e 	strb.w	r1, [r3, #46]	; 0x2e

	if (color != SHELL_NORMAL) {
   2095c:	6940      	ldr	r0, [r0, #20]
   2095e:	b189      	cbz	r1, 20984 <z_shell_vt100_color_set+0x38>

		uint8_t cmd[] = SHELL_VT100_COLOR(color - 1);
   20960:	4b09      	ldr	r3, [pc, #36]	; (20988 <z_shell_vt100_color_set+0x3c>)

		z_shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
   20962:	466a      	mov	r2, sp
		uint8_t cmd[] = SHELL_VT100_COLOR(color - 1);
   20964:	9300      	str	r3, [sp, #0]
   20966:	2333      	movs	r3, #51	; 0x33
   20968:	f88d 3004 	strb.w	r3, [sp, #4]
   2096c:	236d      	movs	r3, #109	; 0x6d
   2096e:	312f      	adds	r1, #47	; 0x2f
   20970:	f88d 1005 	strb.w	r1, [sp, #5]
   20974:	f8ad 3006 	strh.w	r3, [sp, #6]
	} else {
		static const uint8_t cmd[] = SHELL_VT100_MODESOFF;

		z_shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
   20978:	4904      	ldr	r1, [pc, #16]	; (2098c <z_shell_vt100_color_set+0x40>)
   2097a:	f006 f801 	bl	26980 <z_shell_raw_fprintf>
	}
}
   2097e:	b003      	add	sp, #12
   20980:	f85d fb04 	ldr.w	pc, [sp], #4
		z_shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
   20984:	4a02      	ldr	r2, [pc, #8]	; (20990 <z_shell_vt100_color_set+0x44>)
   20986:	e7f7      	b.n	20978 <z_shell_vt100_color_set+0x2c>
   20988:	3b315b1b 	.word	0x3b315b1b
   2098c:	0002bc4b 	.word	0x0002bc4b
   20990:	0002c0c7 	.word	0x0002c0c7

00020994 <z_shell_vt100_colors_restore>:

void z_shell_vt100_colors_restore(const struct shell *shell,
				       const struct shell_vt100_colors *color)
{
   20994:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20996:	460d      	mov	r5, r1
	z_shell_vt100_color_set(shell, color->col);
   20998:	7809      	ldrb	r1, [r1, #0]
{
   2099a:	4604      	mov	r4, r0
	z_shell_vt100_color_set(shell, color->col);
   2099c:	f7ff ffd6 	bl	2094c <z_shell_vt100_color_set>
	vt100_bgcolor_set(shell, color->bgcol);
   209a0:	786b      	ldrb	r3, [r5, #1]
	if ((bgcolor == SHELL_NORMAL) ||
   209a2:	b1cb      	cbz	r3, 209d8 <z_shell_vt100_colors_restore+0x44>
	    (shell->ctx->vt100_ctx.col.bgcol == bgcolor)) {
   209a4:	68a2      	ldr	r2, [r4, #8]
	if ((bgcolor == SHELL_NORMAL) ||
   209a6:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
   209aa:	4299      	cmp	r1, r3
   209ac:	d014      	beq.n	209d8 <z_shell_vt100_colors_restore+0x44>
	uint8_t cmd[] = SHELL_VT100_BGCOLOR(bgcolor - 1);
   209ae:	f645 311b 	movw	r1, #23323	; 0x5b1b
   209b2:	f8ad 1000 	strh.w	r1, [sp]
   209b6:	2134      	movs	r1, #52	; 0x34
   209b8:	f88d 1002 	strb.w	r1, [sp, #2]
   209bc:	f103 012f 	add.w	r1, r3, #47	; 0x2f
   209c0:	f88d 1003 	strb.w	r1, [sp, #3]
   209c4:	216d      	movs	r1, #109	; 0x6d
	shell->ctx->vt100_ctx.col.bgcol = bgcolor;
   209c6:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
	uint8_t cmd[] = SHELL_VT100_BGCOLOR(bgcolor - 1);
   209ca:	f8ad 1004 	strh.w	r1, [sp, #4]
	z_shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
   209ce:	466a      	mov	r2, sp
   209d0:	4902      	ldr	r1, [pc, #8]	; (209dc <z_shell_vt100_colors_restore+0x48>)
   209d2:	6960      	ldr	r0, [r4, #20]
   209d4:	f005 ffd4 	bl	26980 <z_shell_raw_fprintf>
}
   209d8:	b003      	add	sp, #12
   209da:	bd30      	pop	{r4, r5, pc}
   209dc:	0002bc4b 	.word	0x0002bc4b

000209e0 <z_shell_op_word_remove>:
{
   209e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
   209e2:	6883      	ldr	r3, [r0, #8]
{
   209e4:	4605      	mov	r5, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
   209e6:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   209e8:	2a00      	cmp	r2, #0
   209ea:	d046      	beq.n	20a7a <z_shell_op_word_remove+0x9a>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
   209ec:	8f58      	ldrh	r0, [r3, #58]	; 0x3a
	if ((shell->ctx->cmd_buff_len == 0) ||
   209ee:	2800      	cmp	r0, #0
   209f0:	d043      	beq.n	20a7a <z_shell_op_word_remove+0x9a>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
   209f2:	303d      	adds	r0, #61	; 0x3d
   209f4:	4418      	add	r0, r3
	char *str_start = &shell->ctx->cmd_buff[0];
   209f6:	f103 063e 	add.w	r6, r3, #62	; 0x3e
   209fa:	4603      	mov	r3, r0
   209fc:	1ac4      	subs	r4, r0, r3
	while ((str >= str_start) && (*str == ' ')) {
   209fe:	42b3      	cmp	r3, r6
   20a00:	4619      	mov	r1, r3
   20a02:	b2a4      	uxth	r4, r4
   20a04:	d30d      	bcc.n	20a22 <z_shell_op_word_remove+0x42>
   20a06:	f811 7901 	ldrb.w	r7, [r1], #-1
   20a0a:	2f20      	cmp	r7, #32
   20a0c:	d033      	beq.n	20a76 <z_shell_op_word_remove+0x96>
   20a0e:	4619      	mov	r1, r3
	while ((str >= str_start) && (*str != ' ')) {
   20a10:	7808      	ldrb	r0, [r1, #0]
   20a12:	3b01      	subs	r3, #1
   20a14:	2820      	cmp	r0, #32
   20a16:	d004      	beq.n	20a22 <z_shell_op_word_remove+0x42>
		++chars_to_delete;
   20a18:	3401      	adds	r4, #1
	while ((str >= str_start) && (*str != ' ')) {
   20a1a:	429e      	cmp	r6, r3
		--str;
   20a1c:	4619      	mov	r1, r3
		++chars_to_delete;
   20a1e:	b2a4      	uxth	r4, r4
	while ((str >= str_start) && (*str != ' ')) {
   20a20:	d9f5      	bls.n	20a0e <z_shell_op_word_remove+0x2e>
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
   20a22:	2700      	movs	r7, #0
	memmove(str + 1, str + 1 + chars_to_delete,
   20a24:	1c63      	adds	r3, r4, #1
   20a26:	1c4e      	adds	r6, r1, #1
   20a28:	1b12      	subs	r2, r2, r4
   20a2a:	4419      	add	r1, r3
   20a2c:	4630      	mov	r0, r6
   20a2e:	f006 fe36 	bl	2769e <memmove>
	shell->ctx->cmd_buff_len -= chars_to_delete;
   20a32:	68a9      	ldr	r1, [r5, #8]
	z_shell_op_cursor_move(shell, -chars_to_delete);
   20a34:	4628      	mov	r0, r5
	shell->ctx->cmd_buff_len -= chars_to_delete;
   20a36:	8f0a      	ldrh	r2, [r1, #56]	; 0x38
   20a38:	1b12      	subs	r2, r2, r4
   20a3a:	b292      	uxth	r2, r2
   20a3c:	870a      	strh	r2, [r1, #56]	; 0x38
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
   20a3e:	440a      	add	r2, r1
	z_shell_op_cursor_move(shell, -chars_to_delete);
   20a40:	4261      	negs	r1, r4
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
   20a42:	f882 703e 	strb.w	r7, [r2, #62]	; 0x3e
	z_shell_op_cursor_move(shell, -chars_to_delete);
   20a46:	b209      	sxth	r1, r1
   20a48:	f005 ffcf 	bl	269ea <z_shell_op_cursor_move>
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SAVECURSOR);
   20a4c:	6968      	ldr	r0, [r5, #20]
   20a4e:	4a0b      	ldr	r2, [pc, #44]	; (20a7c <z_shell_op_word_remove+0x9c>)
   20a50:	490b      	ldr	r1, [pc, #44]	; (20a80 <z_shell_op_word_remove+0xa0>)
   20a52:	f005 ff95 	bl	26980 <z_shell_raw_fprintf>
	z_shell_fprintf(shell, SHELL_NORMAL, "%s", str + 1);
   20a56:	4639      	mov	r1, r7
   20a58:	4633      	mov	r3, r6
   20a5a:	4628      	mov	r0, r5
   20a5c:	4a08      	ldr	r2, [pc, #32]	; (20a80 <z_shell_op_word_remove+0xa0>)
   20a5e:	f006 f8c9 	bl	26bf4 <z_shell_fprintf>
	z_clear_eos(shell);
   20a62:	6968      	ldr	r0, [r5, #20]
   20a64:	f7ff ff04 	bl	20870 <z_clear_eos.isra.0>
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_RESTORECURSOR);
   20a68:	6968      	ldr	r0, [r5, #20]
   20a6a:	4a06      	ldr	r2, [pc, #24]	; (20a84 <z_shell_op_word_remove+0xa4>)
   20a6c:	4904      	ldr	r1, [pc, #16]	; (20a80 <z_shell_op_word_remove+0xa0>)
}
   20a6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   20a72:	f005 bf85 	b.w	26980 <z_shell_raw_fprintf>
   20a76:	460b      	mov	r3, r1
   20a78:	e7c0      	b.n	209fc <z_shell_op_word_remove+0x1c>
   20a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20a7c:	0002c0c1 	.word	0x0002c0c1
   20a80:	0002bc4b 	.word	0x0002bc4b
   20a84:	0002c0c4 	.word	0x0002c0c4

00020a88 <reprint_from_cursor>:
{
   20a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20a8c:	4604      	mov	r4, r0
   20a8e:	460d      	mov	r5, r1
	if (data_removed) {
   20a90:	4617      	mov	r7, r2
   20a92:	b112      	cbz	r2, 20a9a <reprint_from_cursor+0x12>
		z_clear_eos(shell);
   20a94:	6940      	ldr	r0, [r0, #20]
   20a96:	f7ff feeb 	bl	20870 <z_clear_eos.isra.0>
	if (z_flag_obscure_get(shell)) {
   20a9a:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.obscure == 1;
   20a9c:	f8d3 225c 	ldr.w	r2, [r3, #604]	; 0x25c
   20aa0:	8f58      	ldrh	r0, [r3, #58]	; 0x3a
   20aa2:	f3c2 01c0 	ubfx	r1, r2, #3, #1
   20aa6:	303e      	adds	r0, #62	; 0x3e
   20aa8:	0712      	lsls	r2, r2, #28
   20aaa:	4403      	add	r3, r0
   20aac:	d521      	bpl.n	20af2 <reprint_from_cursor+0x6a>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
   20aae:	4618      	mov	r0, r3
   20ab0:	f006 fdba 	bl	27628 <strlen>
   20ab4:	4606      	mov	r6, r0
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
   20ab6:	f8df 804c 	ldr.w	r8, [pc, #76]	; 20b04 <reprint_from_cursor+0x7c>
		while (len--) {
   20aba:	3e01      	subs	r6, #1
   20abc:	d214      	bcs.n	20ae8 <reprint_from_cursor+0x60>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
   20abe:	4620      	mov	r0, r4
   20ac0:	f850 3f08 	ldr.w	r3, [r0, #8]!
   20ac4:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   20ac6:	875a      	strh	r2, [r3, #58]	; 0x3a
	if (full_line_cmd(shell)) {
   20ac8:	f005 ff67 	bl	2699a <full_line_cmd.isra.0>
   20acc:	b128      	cbz	r0, 20ada <reprint_from_cursor+0x52>
		if (((data_removed) && (diff > 0)) || (!data_removed)) {
   20ace:	b107      	cbz	r7, 20ad2 <reprint_from_cursor+0x4a>
   20ad0:	b11d      	cbz	r5, 20ada <reprint_from_cursor+0x52>
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n");
   20ad2:	490a      	ldr	r1, [pc, #40]	; (20afc <reprint_from_cursor+0x74>)
   20ad4:	6960      	ldr	r0, [r4, #20]
   20ad6:	f005 ff53 	bl	26980 <z_shell_raw_fprintf>
	z_shell_op_cursor_move(shell, -diff);
   20ada:	4269      	negs	r1, r5
   20adc:	4620      	mov	r0, r4
}
   20ade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_shell_op_cursor_move(shell, -diff);
   20ae2:	b209      	sxth	r1, r1
   20ae4:	f005 bf81 	b.w	269ea <z_shell_op_cursor_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
   20ae8:	4641      	mov	r1, r8
   20aea:	6960      	ldr	r0, [r4, #20]
   20aec:	f005 ff48 	bl	26980 <z_shell_raw_fprintf>
   20af0:	e7e3      	b.n	20aba <reprint_from_cursor+0x32>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s",
   20af2:	4620      	mov	r0, r4
   20af4:	4a02      	ldr	r2, [pc, #8]	; (20b00 <reprint_from_cursor+0x78>)
   20af6:	f006 f87d 	bl	26bf4 <z_shell_fprintf>
   20afa:	e7e0      	b.n	20abe <reprint_from_cursor+0x36>
   20afc:	0002bafd 	.word	0x0002bafd
   20b00:	0002bc4b 	.word	0x0002bc4b
   20b04:	0002ca85 	.word	0x0002ca85

00020b08 <z_shell_op_char_insert>:
{
   20b08:	b513      	push	{r0, r1, r4, lr}
	if (shell->ctx->internal.flags.insert_mode &&
   20b0a:	6883      	ldr	r3, [r0, #8]
{
   20b0c:	f88d 1007 	strb.w	r1, [sp, #7]
	if (shell->ctx->internal.flags.insert_mode &&
   20b10:	f8d3 225c 	ldr.w	r2, [r3, #604]	; 0x25c
{
   20b14:	4604      	mov	r4, r0
	if (shell->ctx->internal.flags.insert_mode &&
   20b16:	07d0      	lsls	r0, r2, #31
   20b18:	d523      	bpl.n	20b62 <z_shell_op_char_insert+0x5a>
		(shell->ctx->cmd_buff_len != shell->ctx->cmd_buff_pos)) {
   20b1a:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
	if (shell->ctx->internal.flags.insert_mode &&
   20b1c:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   20b1e:	428a      	cmp	r2, r1
   20b20:	d01f      	beq.n	20b62 <z_shell_op_char_insert+0x5a>
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
   20b22:	1c48      	adds	r0, r1, #1
		char_replace(shell, data);
   20b24:	f89d 2007 	ldrb.w	r2, [sp, #7]
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
   20b28:	8758      	strh	r0, [r3, #58]	; 0x3a
   20b2a:	440b      	add	r3, r1
   20b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	if (!z_flag_echo_get(shell)) {
   20b30:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.echo == 1;
   20b32:	f8d3 125c 	ldr.w	r1, [r3, #604]	; 0x25c
   20b36:	0749      	lsls	r1, r1, #29
   20b38:	d511      	bpl.n	20b5e <z_shell_op_char_insert+0x56>
	return shell->ctx->internal.flags.obscure == 1;
   20b3a:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
   20b3e:	6960      	ldr	r0, [r4, #20]
		data = '*';
   20b40:	f013 0f08 	tst.w	r3, #8
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
   20b44:	bf18      	it	ne
   20b46:	222a      	movne	r2, #42	; 0x2a
   20b48:	4909      	ldr	r1, [pc, #36]	; (20b70 <z_shell_op_char_insert+0x68>)
   20b4a:	f005 ff19 	bl	26980 <z_shell_raw_fprintf>
	if (z_shell_cursor_in_empty_line(shell)) {
   20b4e:	4620      	mov	r0, r4
   20b50:	f005 ff37 	bl	269c2 <z_shell_cursor_in_empty_line>
   20b54:	b118      	cbz	r0, 20b5e <z_shell_op_char_insert+0x56>
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n");
   20b56:	4907      	ldr	r1, [pc, #28]	; (20b74 <z_shell_op_char_insert+0x6c>)
   20b58:	6960      	ldr	r0, [r4, #20]
   20b5a:	f005 ff11 	bl	26980 <z_shell_raw_fprintf>
}
   20b5e:	b002      	add	sp, #8
   20b60:	bd10      	pop	{r4, pc}
		data_insert(shell, &data, 1);
   20b62:	2201      	movs	r2, #1
   20b64:	4620      	mov	r0, r4
   20b66:	f10d 0107 	add.w	r1, sp, #7
   20b6a:	f006 f850 	bl	26c0e <data_insert>
}
   20b6e:	e7f6      	b.n	20b5e <z_shell_op_char_insert+0x56>
   20b70:	0002c0ba 	.word	0x0002c0ba
   20b74:	0002bafd 	.word	0x0002bafd

00020b78 <z_shell_print_prompt_and_cmd>:
{
   20b78:	b510      	push	{r4, lr}
   20b7a:	4604      	mov	r4, r0
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
   20b7c:	6883      	ldr	r3, [r0, #8]
   20b7e:	2103      	movs	r1, #3
   20b80:	681b      	ldr	r3, [r3, #0]
   20b82:	4a08      	ldr	r2, [pc, #32]	; (20ba4 <z_shell_print_prompt_and_cmd+0x2c>)
   20b84:	f006 f836 	bl	26bf4 <z_shell_fprintf>
	if (z_flag_echo_get(shell)) {
   20b88:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.echo == 1;
   20b8a:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
   20b8e:	075b      	lsls	r3, r3, #29
   20b90:	d507      	bpl.n	20ba2 <z_shell_print_prompt_and_cmd+0x2a>
		z_shell_print_cmd(shell);
   20b92:	4620      	mov	r0, r4
   20b94:	f7ff fed2 	bl	2093c <z_shell_print_cmd>
		z_shell_op_cursor_position_synchronize(shell);
   20b98:	4620      	mov	r0, r4
}
   20b9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_op_cursor_position_synchronize(shell);
   20b9e:	f7ff bea3 	b.w	208e8 <z_shell_op_cursor_position_synchronize>
}
   20ba2:	bd10      	pop	{r4, pc}
   20ba4:	0002bc4b 	.word	0x0002bc4b

00020ba8 <enable_shell_uart>:
	.update = update,
#endif /* CONFIG_MCUMGR_SMP_SHELL */
};

static int enable_shell_uart(const struct device *arg)
{
   20ba8:	b507      	push	{r0, r1, r2, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   20baa:	4809      	ldr	r0, [pc, #36]	; (20bd0 <enable_shell_uart+0x28>)
   20bac:	f002 fd64 	bl	23678 <z_impl_device_get_binding>
	bool log_backend = CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > 0;
	uint32_t level =
		(CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > LOG_LEVEL_DBG) ?
		CONFIG_LOG_MAX_LEVEL : CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL;

	if (dev == NULL) {
   20bb0:	4601      	mov	r1, r0
   20bb2:	b150      	cbz	r0, 20bca <enable_shell_uart+0x22>

	if (IS_ENABLED(CONFIG_MCUMGR_SMP_SHELL)) {
		smp_shell_init();
	}

	shell_init(&shell_uart, dev, true, log_backend, level);
   20bb4:	2304      	movs	r3, #4
   20bb6:	9300      	str	r3, [sp, #0]
   20bb8:	2301      	movs	r3, #1
   20bba:	4806      	ldr	r0, [pc, #24]	; (20bd4 <enable_shell_uart+0x2c>)
   20bbc:	461a      	mov	r2, r3
   20bbe:	f7ff fce9 	bl	20594 <shell_init>

	return 0;
   20bc2:	2000      	movs	r0, #0
}
   20bc4:	b003      	add	sp, #12
   20bc6:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENODEV;
   20bca:	f06f 0012 	mvn.w	r0, #18
   20bce:	e7f9      	b.n	20bc4 <enable_shell_uart+0x1c>
   20bd0:	0002c0cb 	.word	0x0002c0cb
   20bd4:	00028634 	.word	0x00028634

00020bd8 <uart_callback>:
{
   20bd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20bdc:	4683      	mov	fp, r0
   20bde:	460d      	mov	r5, r1
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
   20be0:	6883      	ldr	r3, [r0, #8]
   20be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   20be4:	b103      	cbz	r3, 20be8 <uart_callback+0x10>
		return -ENOSYS;
	}
	return api->irq_update(dev);
   20be6:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
   20be8:	f8db 3008 	ldr.w	r3, [fp, #8]
   20bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   20bee:	bb83      	cbnz	r3, 20c52 <uart_callback+0x7a>
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
   20bf0:	4b39      	ldr	r3, [pc, #228]	; (20cd8 <uart_callback+0x100>)
   20bf2:	f04f 0900 	mov.w	r9, #0
   20bf6:	4698      	mov	r8, r3
   20bf8:	4e38      	ldr	r6, [pc, #224]	; (20cdc <uart_callback+0x104>)
			LOG_WRN("RX ring buffer full.");
   20bfa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 20ce0 <uart_callback+0x108>
   20bfe:	1b9e      	subs	r6, r3, r6
   20c00:	08b6      	lsrs	r6, r6, #2
   20c02:	01b6      	lsls	r6, r6, #6
   20c04:	f046 0602 	orr.w	r6, r6, #2
		len = ring_buf_put_claim(sh_uart->rx_ringbuf, &data,
   20c08:	68e8      	ldr	r0, [r5, #12]
   20c0a:	a901      	add	r1, sp, #4
   20c0c:	6902      	ldr	r2, [r0, #16]
   20c0e:	f004 fdfe 	bl	2580e <ring_buf_put_claim>
		if (len > 0) {
   20c12:	4607      	mov	r7, r0
   20c14:	2800      	cmp	r0, #0
   20c16:	d042      	beq.n	20c9e <uart_callback+0xc6>
	if (api->fifo_read != NULL) {
   20c18:	f8db 3008 	ldr.w	r3, [fp, #8]
   20c1c:	699c      	ldr	r4, [r3, #24]
   20c1e:	b124      	cbz	r4, 20c2a <uart_callback+0x52>
		return api->fifo_read(dev, rx_data, size);
   20c20:	4602      	mov	r2, r0
   20c22:	9901      	ldr	r1, [sp, #4]
   20c24:	4658      	mov	r0, fp
   20c26:	47a0      	blx	r4
   20c28:	4604      	mov	r4, r0
				new_data = true;
   20c2a:	2c00      	cmp	r4, #0
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
   20c2c:	4621      	mov	r1, r4
   20c2e:	68e8      	ldr	r0, [r5, #12]
				new_data = true;
   20c30:	bf18      	it	ne
   20c32:	f04f 0901 	movne.w	r9, #1
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
   20c36:	f004 fe06 	bl	25846 <ring_buf_put_finish>
	} while (rd_len && (rd_len == len));
   20c3a:	b10c      	cbz	r4, 20c40 <uart_callback+0x68>
   20c3c:	42a7      	cmp	r7, r4
   20c3e:	d0e3      	beq.n	20c08 <uart_callback+0x30>
	if (new_data) {
   20c40:	f1b9 0f00 	cmp.w	r9, #0
   20c44:	d009      	beq.n	20c5a <uart_callback+0x82>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_RX_RDY,
   20c46:	682b      	ldr	r3, [r5, #0]
   20c48:	2000      	movs	r0, #0
   20c4a:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   20c4e:	4790      	blx	r2
}
   20c50:	e003      	b.n	20c5a <uart_callback+0x82>
	return api->irq_rx_ready(dev);
   20c52:	4658      	mov	r0, fp
   20c54:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
   20c56:	2800      	cmp	r0, #0
   20c58:	d1ca      	bne.n	20bf0 <uart_callback+0x18>
	if (api->irq_tx_ready != NULL) {
   20c5a:	f8db 3008 	ldr.w	r3, [fp, #8]
   20c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   20c60:	b1d3      	cbz	r3, 20c98 <uart_callback+0xc0>
		return api->irq_tx_ready(dev);
   20c62:	4658      	mov	r0, fp
   20c64:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
   20c66:	b1b8      	cbz	r0, 20c98 <uart_callback+0xc0>
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (uint8_t **)&data,
   20c68:	68a8      	ldr	r0, [r5, #8]
   20c6a:	a901      	add	r1, sp, #4
   20c6c:	6902      	ldr	r2, [r0, #16]
   20c6e:	f004 fe16 	bl	2589e <ring_buf_get_claim>
	if (len) {
   20c72:	4604      	mov	r4, r0
   20c74:	b350      	cbz	r0, 20ccc <uart_callback+0xf4>
	if (api->fifo_fill != NULL) {
   20c76:	f8db 3008 	ldr.w	r3, [fp, #8]
   20c7a:	695b      	ldr	r3, [r3, #20]
   20c7c:	b323      	cbz	r3, 20cc8 <uart_callback+0xf0>
		return api->fifo_fill(dev, tx_data, size);
   20c7e:	4602      	mov	r2, r0
   20c80:	9901      	ldr	r1, [sp, #4]
   20c82:	4658      	mov	r0, fp
   20c84:	4798      	blx	r3
   20c86:	4601      	mov	r1, r0
		err = ring_buf_get_finish(sh_uart->tx_ringbuf, len);
   20c88:	68a8      	ldr	r0, [r5, #8]
   20c8a:	f004 fe24 	bl	258d6 <ring_buf_get_finish>
	sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
   20c8e:	682b      	ldr	r3, [r5, #0]
   20c90:	2001      	movs	r0, #1
   20c92:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   20c96:	4790      	blx	r2
}
   20c98:	b003      	add	sp, #12
   20c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_WRN("RX ring buffer full.");
   20c9e:	f8d8 3000 	ldr.w	r3, [r8]
   20ca2:	f013 0f06 	tst.w	r3, #6
   20ca6:	d003      	beq.n	20cb0 <uart_callback+0xd8>
   20ca8:	4631      	mov	r1, r6
   20caa:	4650      	mov	r0, sl
   20cac:	f005 f81d 	bl	25cea <log_0>
	if (api->fifo_read != NULL) {
   20cb0:	f8db 3008 	ldr.w	r3, [fp, #8]
   20cb4:	699c      	ldr	r4, [r3, #24]
   20cb6:	2c00      	cmp	r4, #0
   20cb8:	d0c2      	beq.n	20c40 <uart_callback+0x68>
		return api->fifo_read(dev, rx_data, size);
   20cba:	2201      	movs	r2, #1
   20cbc:	4658      	mov	r0, fp
   20cbe:	f10d 0103 	add.w	r1, sp, #3
   20cc2:	47a0      	blx	r4
   20cc4:	4604      	mov	r4, r0
   20cc6:	e7b8      	b.n	20c3a <uart_callback+0x62>
	return 0;
   20cc8:	4619      	mov	r1, r3
   20cca:	e7dd      	b.n	20c88 <uart_callback+0xb0>
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_TX_DISABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
   20ccc:	4658      	mov	r0, fp
   20cce:	f005 fffe 	bl	26cce <z_impl_uart_irq_tx_disable>
		sh_uart->ctrl_blk->tx_busy = 0;
   20cd2:	682b      	ldr	r3, [r5, #0]
   20cd4:	60dc      	str	r4, [r3, #12]
   20cd6:	e7da      	b.n	20c8e <uart_callback+0xb6>
   20cd8:	20008178 	.word	0x20008178
   20cdc:	20008154 	.word	0x20008154
   20ce0:	0002c0d2 	.word	0x0002c0d2

00020ce4 <init>:
{
   20ce4:	b570      	push	{r4, r5, r6, lr}
   20ce6:	460c      	mov	r4, r1
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
   20ce8:	6846      	ldr	r6, [r0, #4]
 *
 * @param buf Address of ring buffer.
 */
static inline void ring_buf_reset(struct ring_buf *buf)
{
	buf->head = 0;
   20cea:	2500      	movs	r5, #0
	sh_uart->ctrl_blk->dev = (const struct device *)config;
   20cec:	6831      	ldr	r1, [r6, #0]
	ring_buf_reset(sh_uart->tx_ringbuf);
   20cee:	68b0      	ldr	r0, [r6, #8]
	sh_uart->ctrl_blk->handler = evt_handler;
   20cf0:	e9c1 4200 	strd	r4, r2, [r1]
	buf->tail = 0;
	memset(&buf->misc, 0, sizeof(buf->misc));
   20cf4:	2208      	movs	r2, #8
	sh_uart->ctrl_blk->context = context;
   20cf6:	608b      	str	r3, [r1, #8]
   20cf8:	4629      	mov	r1, r5
	buf->tail = 0;
   20cfa:	e9c0 5500 	strd	r5, r5, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
   20cfe:	4410      	add	r0, r2
   20d00:	f006 fd0f 	bl	27722 <memset>
   20d04:	2208      	movs	r2, #8
	ring_buf_reset(sh_uart->rx_ringbuf);
   20d06:	68f0      	ldr	r0, [r6, #12]
   20d08:	4629      	mov	r1, r5
	buf->tail = 0;
   20d0a:	e9c0 5500 	strd	r5, r5, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
   20d0e:	4410      	add	r0, r2
   20d10:	f006 fd07 	bl	27722 <memset>
	sh_uart->ctrl_blk->tx_busy = 0;
   20d14:	6833      	ldr	r3, [r6, #0]
   20d16:	60dd      	str	r5, [r3, #12]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   20d18:	68a3      	ldr	r3, [r4, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   20d1a:	b12b      	cbz	r3, 20d28 <init+0x44>
   20d1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   20d1e:	b11b      	cbz	r3, 20d28 <init+0x44>
		api->irq_callback_set(dev, cb, user_data);
   20d20:	4632      	mov	r2, r6
   20d22:	4620      	mov	r0, r4
   20d24:	4904      	ldr	r1, [pc, #16]	; (20d38 <init+0x54>)
   20d26:	4798      	blx	r3
	if (api->irq_rx_enable != NULL) {
   20d28:	68a3      	ldr	r3, [r4, #8]
   20d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20d2c:	b10b      	cbz	r3, 20d32 <init+0x4e>
		api->irq_rx_enable(dev);
   20d2e:	4620      	mov	r0, r4
   20d30:	4798      	blx	r3
}
   20d32:	2000      	movs	r0, #0
   20d34:	bd70      	pop	{r4, r5, r6, pc}
   20d36:	bf00      	nop
   20d38:	00020bd9 	.word	0x00020bd9

00020d3c <formatted_text_print.constprop.0>:
 *   shell		Pointer to shell instance.
 *   p_str		Pointer to string to be printed.
 *   terminal_offset	Requested left margin.
 *   offset_first_line	Add margin to the first printed line.
 */
static void formatted_text_print(const struct shell *shell, const char *str,
   20d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20d40:	4604      	mov	r4, r0
   20d42:	4690      	mov	r8, r2
				 size_t terminal_offset, bool offset_first_line)
{
	size_t offset = 0;
	size_t length;

	if (str == NULL) {
   20d44:	460e      	mov	r6, r1
   20d46:	2900      	cmp	r1, #0
   20d48:	d06e      	beq.n	20e28 <formatted_text_print.constprop.0+0xec>
   20d4a:	2500      	movs	r5, #0
		z_shell_op_cursor_horiz_move(shell, terminal_offset);
	}


	/* Skipping whitespace. */
	while (isspace((int) *(str + offset))) {
   20d4c:	5d73      	ldrb	r3, [r6, r5]
   20d4e:	2b20      	cmp	r3, #32
   20d50:	d025      	beq.n	20d9e <formatted_text_print.constprop.0+0x62>
   20d52:	3b09      	subs	r3, #9
   20d54:	2b04      	cmp	r3, #4
   20d56:	d922      	bls.n	20d9e <formatted_text_print.constprop.0+0x62>
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n");
   20d58:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 20e2c <formatted_text_print.constprop.0+0xf0>
	return str == NULL ? 0U : (uint16_t)strlen(str);
   20d5c:	4630      	mov	r0, r6
   20d5e:	f006 fc63 	bl	27628 <strlen>
		size_t idx = 0;

		length = z_shell_strlen(str) - offset;

		if (length <=
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
   20d62:	68a3      	ldr	r3, [r4, #8]
		length = z_shell_strlen(str) - offset;
   20d64:	b280      	uxth	r0, r0
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
   20d66:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
		length = z_shell_strlen(str) - offset;
   20d68:	1b40      	subs	r0, r0, r5
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
   20d6a:	eba1 0308 	sub.w	r3, r1, r8
		if (length <=
   20d6e:	4298      	cmp	r0, r3
   20d70:	eb06 0a05 	add.w	sl, r6, r5
   20d74:	d915      	bls.n	20da2 <formatted_text_print.constprop.0+0x66>
   20d76:	4650      	mov	r0, sl
		size_t idx = 0;
   20d78:	2700      	movs	r7, #0
		length = shell->ctx->vt100_ctx.cons.terminal_wid
				- terminal_offset;

		while (true) {
			/* Determining line break. */
			if (isspace((int) (*(str + offset + idx)))) {
   20d7a:	f810 2b01 	ldrb.w	r2, [r0], #1
   20d7e:	2a20      	cmp	r2, #32
   20d80:	d006      	beq.n	20d90 <formatted_text_print.constprop.0+0x54>
   20d82:	f1a2 0c09 	sub.w	ip, r2, #9
   20d86:	f1bc 0f04 	cmp.w	ip, #4
   20d8a:	d802      	bhi.n	20d92 <formatted_text_print.constprop.0+0x56>
				length = idx;
				if (*(str + offset + idx) == '\n') {
   20d8c:	2a0a      	cmp	r2, #10
   20d8e:	d031      	beq.n	20df4 <formatted_text_print.constprop.0+0xb8>
   20d90:	463b      	mov	r3, r7
					break;
				}
			}

			if ((idx + terminal_offset) >=
   20d92:	eb08 0207 	add.w	r2, r8, r7
   20d96:	4291      	cmp	r1, r2
   20d98:	d92b      	bls.n	20df2 <formatted_text_print.constprop.0+0xb6>
			    shell->ctx->vt100_ctx.cons.terminal_wid) {
				/* End of line reached. */
				break;
			}

			++idx;
   20d9a:	3701      	adds	r7, #1
			if (isspace((int) (*(str + offset + idx)))) {
   20d9c:	e7ed      	b.n	20d7a <formatted_text_print.constprop.0+0x3e>
		++offset;
   20d9e:	3501      	adds	r5, #1
   20da0:	e7d4      	b.n	20d4c <formatted_text_print.constprop.0+0x10>
   20da2:	4653      	mov	r3, sl
			for (idx = 0; idx < length; idx++) {
   20da4:	2700      	movs	r7, #0
   20da6:	42b8      	cmp	r0, r7
   20da8:	d017      	beq.n	20dda <formatted_text_print.constprop.0+0x9e>
				if (*(str + offset + idx) == '\n') {
   20daa:	f813 2b01 	ldrb.w	r2, [r3], #1
   20dae:	eb05 0907 	add.w	r9, r5, r7
   20db2:	2a0a      	cmp	r2, #10
   20db4:	d11b      	bne.n	20dee <formatted_text_print.constprop.0+0xb2>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
   20db6:	6960      	ldr	r0, [r4, #20]
   20db8:	f005 fbe2 	bl	26580 <z_shell_fprintf_buffer_flush>
					z_shell_write(shell, str + offset, idx);
   20dbc:	463a      	mov	r2, r7
   20dbe:	4651      	mov	r1, sl
   20dc0:	4620      	mov	r0, r4
   20dc2:	f005 feb2 	bl	26b2a <z_shell_write>
   20dc6:	4919      	ldr	r1, [pc, #100]	; (20e2c <formatted_text_print.constprop.0+0xf0>)
   20dc8:	6960      	ldr	r0, [r4, #20]
   20dca:	f005 ffd8 	bl	26d7e <z_shell_raw_fprintf>
					z_shell_op_cursor_horiz_move(shell,
   20dce:	4641      	mov	r1, r8
   20dd0:	4620      	mov	r0, r4
					offset += idx + 1;
   20dd2:	f109 0501 	add.w	r5, r9, #1
					z_shell_op_cursor_horiz_move(shell,
   20dd6:	f7ff fd63 	bl	208a0 <z_shell_op_cursor_horiz_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, str + offset);
   20dda:	6960      	ldr	r0, [r4, #20]
   20ddc:	1971      	adds	r1, r6, r5
   20dde:	f005 ffce 	bl	26d7e <z_shell_raw_fprintf>
   20de2:	6960      	ldr	r0, [r4, #20]
   20de4:	4911      	ldr	r1, [pc, #68]	; (20e2c <formatted_text_print.constprop.0+0xf0>)
		z_cursor_next_line_move(shell);
		z_shell_op_cursor_horiz_move(shell, terminal_offset);

	}
	z_cursor_next_line_move(shell);
}
   20de6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20dea:	f005 bfc8 	b.w	26d7e <z_shell_raw_fprintf>
			for (idx = 0; idx < length; idx++) {
   20dee:	3701      	adds	r7, #1
   20df0:	e7d9      	b.n	20da6 <formatted_text_print.constprop.0+0x6a>
   20df2:	461f      	mov	r7, r3
   20df4:	6960      	ldr	r0, [r4, #20]
   20df6:	f005 fbc3 	bl	26580 <z_shell_fprintf_buffer_flush>
		z_shell_write(shell, str + offset, length);
   20dfa:	463a      	mov	r2, r7
   20dfc:	4651      	mov	r1, sl
   20dfe:	4620      	mov	r0, r4
   20e00:	f005 fe93 	bl	26b2a <z_shell_write>
		offset += length;
   20e04:	443d      	add	r5, r7
		while (isspace((int) (*(str + offset)))) {
   20e06:	5d73      	ldrb	r3, [r6, r5]
   20e08:	2b20      	cmp	r3, #32
   20e0a:	d00b      	beq.n	20e24 <formatted_text_print.constprop.0+0xe8>
   20e0c:	3b09      	subs	r3, #9
   20e0e:	2b04      	cmp	r3, #4
   20e10:	d908      	bls.n	20e24 <formatted_text_print.constprop.0+0xe8>
   20e12:	4649      	mov	r1, r9
   20e14:	6960      	ldr	r0, [r4, #20]
   20e16:	f005 ffb2 	bl	26d7e <z_shell_raw_fprintf>
		z_shell_op_cursor_horiz_move(shell, terminal_offset);
   20e1a:	4641      	mov	r1, r8
   20e1c:	4620      	mov	r0, r4
   20e1e:	f7ff fd3f 	bl	208a0 <z_shell_op_cursor_horiz_move>
	while (true) {
   20e22:	e79b      	b.n	20d5c <formatted_text_print.constprop.0+0x20>
			++offset;
   20e24:	3501      	adds	r5, #1
   20e26:	e7ee      	b.n	20e06 <formatted_text_print.constprop.0+0xca>
}
   20e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20e2c:	0002bafd 	.word	0x0002bafd

00020e30 <z_shell_help_subcmd_print>:
 * help string
 */
void z_shell_help_subcmd_print(const struct shell *shell,
			       const struct shell_static_entry *parent,
			       const char *description)
{
   20e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20e34:	460e      	mov	r6, r1
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry dloc;
	uint16_t longest = 0U;
	size_t idx = 0;
   20e36:	2100      	movs	r1, #0
{
   20e38:	4604      	mov	r4, r0
   20e3a:	4617      	mov	r7, r2
	uint16_t longest = 0U;
   20e3c:	460d      	mov	r5, r1
{
   20e3e:	b08d      	sub	sp, #52	; 0x34

	/* Searching for the longest subcommand to print. */
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
   20e40:	4630      	mov	r0, r6
   20e42:	aa07      	add	r2, sp, #28
   20e44:	f101 0801 	add.w	r8, r1, #1
   20e48:	f7ff fcec 	bl	20824 <z_shell_cmd_get>
   20e4c:	4601      	mov	r1, r0
   20e4e:	b9b0      	cbnz	r0, 20e7e <z_shell_help_subcmd_print+0x4e>
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
	}

	/* No help to print */
	if (longest == 0) {
   20e50:	b195      	cbz	r5, 20e78 <z_shell_help_subcmd_print+0x48>
		return;
	}

	if (description != NULL) {
   20e52:	b11f      	cbz	r7, 20e5c <z_shell_help_subcmd_print+0x2c>
		z_shell_fprintf(shell, SHELL_NORMAL, description);
   20e54:	463a      	mov	r2, r7
   20e56:	4620      	mov	r0, r4
   20e58:	f005 fecc 	bl	26bf4 <z_shell_fprintf>
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
   20e5c:	2100      	movs	r1, #0
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
   20e5e:	f8df 8080 	ldr.w	r8, [pc, #128]	; 20ee0 <z_shell_help_subcmd_print+0xb0>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%-*s%s:", tabulator,
   20e62:	f8df a080 	ldr.w	sl, [pc, #128]	; 20ee4 <z_shell_help_subcmd_print+0xb4>
   20e66:	f8df b080 	ldr.w	fp, [pc, #128]	; 20ee8 <z_shell_help_subcmd_print+0xb8>
	}

	/* Printing subcommands and help string (if exists). */
	idx = 0;

	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
   20e6a:	1c4b      	adds	r3, r1, #1
   20e6c:	4630      	mov	r0, r6
   20e6e:	aa07      	add	r2, sp, #28
   20e70:	9304      	str	r3, [sp, #16]
   20e72:	f7ff fcd7 	bl	20824 <z_shell_cmd_get>
   20e76:	b960      	cbnz	r0, 20e92 <z_shell_help_subcmd_print+0x62>
		help_item_print(shell, entry->syntax, longest, entry->help);
	}
}
   20e78:	b00d      	add	sp, #52	; 0x34
   20e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
   20e7e:	6808      	ldr	r0, [r1, #0]
	return str == NULL ? 0U : (uint16_t)strlen(str);
   20e80:	b110      	cbz	r0, 20e88 <z_shell_help_subcmd_print+0x58>
   20e82:	f006 fbd1 	bl	27628 <strlen>
   20e86:	b280      	uxth	r0, r0
   20e88:	4285      	cmp	r5, r0
   20e8a:	bf38      	it	cc
   20e8c:	4605      	movcc	r5, r0
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
   20e8e:	4641      	mov	r1, r8
   20e90:	e7d6      	b.n	20e40 <z_shell_help_subcmd_print+0x10>
		help_item_print(shell, entry->syntax, longest, entry->help);
   20e92:	6803      	ldr	r3, [r0, #0]
   20e94:	f8d0 9004 	ldr.w	r9, [r0, #4]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
   20e98:	4811      	ldr	r0, [pc, #68]	; (20ee0 <z_shell_help_subcmd_print+0xb0>)
		help_item_print(shell, entry->syntax, longest, entry->help);
   20e9a:	9305      	str	r3, [sp, #20]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
   20e9c:	f006 fbc4 	bl	27628 <strlen>
	if ((item_name == NULL) || (item_name[0] == '\0')) {
   20ea0:	9b05      	ldr	r3, [sp, #20]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
   20ea2:	4607      	mov	r7, r0
	if ((item_name == NULL) || (item_name[0] == '\0')) {
   20ea4:	b18b      	cbz	r3, 20eca <z_shell_help_subcmd_print+0x9a>
   20ea6:	781a      	ldrb	r2, [r3, #0]
   20ea8:	b17a      	cbz	r2, 20eca <z_shell_help_subcmd_print+0x9a>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%-*s%s:", tabulator,
   20eaa:	e9cd 3801 	strd	r3, r8, [sp, #4]
   20eae:	4652      	mov	r2, sl
   20eb0:	4643      	mov	r3, r8
   20eb2:	2100      	movs	r1, #0
   20eb4:	4620      	mov	r0, r4
   20eb6:	9500      	str	r5, [sp, #0]
   20eb8:	f005 fe9c 	bl	26bf4 <z_shell_fprintf>
	if (item_help == NULL) {
   20ebc:	f1b9 0f00 	cmp.w	r9, #0
   20ec0:	d105      	bne.n	20ece <z_shell_help_subcmd_print+0x9e>
   20ec2:	4659      	mov	r1, fp
   20ec4:	6960      	ldr	r0, [r4, #20]
   20ec6:	f005 ff5a 	bl	26d7e <z_shell_raw_fprintf>
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
   20eca:	9904      	ldr	r1, [sp, #16]
   20ecc:	e7cd      	b.n	20e6a <z_shell_help_subcmd_print+0x3a>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
   20ece:	1c6a      	adds	r2, r5, #1
   20ed0:	eb02 0247 	add.w	r2, r2, r7, lsl #1
	formatted_text_print(shell, item_help, offset, false);
   20ed4:	4649      	mov	r1, r9
   20ed6:	4620      	mov	r0, r4
   20ed8:	b292      	uxth	r2, r2
   20eda:	f7ff ff2f 	bl	20d3c <formatted_text_print.constprop.0>
   20ede:	e7f4      	b.n	20eca <z_shell_help_subcmd_print+0x9a>
   20ee0:	0002c12c 	.word	0x0002c12c
   20ee4:	0002c114 	.word	0x0002c114
   20ee8:	0002bafd 	.word	0x0002bafd

00020eec <z_shell_help_cmd_print>:

void z_shell_help_cmd_print(const struct shell *shell,
			    const struct shell_static_entry *cmd)
{
   20eec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20eee:	4606      	mov	r6, r0
	static const char cmd_sep[] = " - "; /* commands separator */
	uint16_t field_width;

	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
   20ef0:	6808      	ldr	r0, [r1, #0]
{
   20ef2:	460d      	mov	r5, r1
   20ef4:	b1b8      	cbz	r0, 20f26 <z_shell_help_cmd_print+0x3a>
   20ef6:	f006 fb97 	bl	27628 <strlen>
   20efa:	b284      	uxth	r4, r0
   20efc:	4f0b      	ldr	r7, [pc, #44]	; (20f2c <z_shell_help_cmd_print+0x40>)
   20efe:	4638      	mov	r0, r7
   20f00:	f006 fb92 	bl	27628 <strlen>
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
   20f04:	4404      	add	r4, r0

	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
   20f06:	2100      	movs	r1, #0
   20f08:	4630      	mov	r0, r6
   20f0a:	682b      	ldr	r3, [r5, #0]
   20f0c:	4a08      	ldr	r2, [pc, #32]	; (20f30 <z_shell_help_cmd_print+0x44>)
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
   20f0e:	b2a4      	uxth	r4, r4
	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
   20f10:	9700      	str	r7, [sp, #0]
   20f12:	f005 fe6f 	bl	26bf4 <z_shell_fprintf>

	formatted_text_print(shell, cmd->help, field_width, false);
   20f16:	4622      	mov	r2, r4
   20f18:	4630      	mov	r0, r6
   20f1a:	6869      	ldr	r1, [r5, #4]
}
   20f1c:	b003      	add	sp, #12
   20f1e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	formatted_text_print(shell, cmd->help, field_width, false);
   20f22:	f7ff bf0b 	b.w	20d3c <formatted_text_print.constprop.0>
   20f26:	4604      	mov	r4, r0
   20f28:	e7e8      	b.n	20efc <z_shell_help_cmd_print+0x10>
   20f2a:	bf00      	nop
   20f2c:	0002c128 	.word	0x0002c128
   20f30:	0002bed3 	.word	0x0002bed3

00020f34 <z_shell_help_request>:

bool z_shell_help_request(const char *str)
{
   20f34:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP_OPT_PARSE)) {
		return false;
	}

	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
   20f36:	4907      	ldr	r1, [pc, #28]	; (20f54 <z_shell_help_request+0x20>)
{
   20f38:	4604      	mov	r4, r0
	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
   20f3a:	f006 fb85 	bl	27648 <strcmp>
   20f3e:	b138      	cbz	r0, 20f50 <z_shell_help_request+0x1c>
   20f40:	4620      	mov	r0, r4
   20f42:	4905      	ldr	r1, [pc, #20]	; (20f58 <z_shell_help_request+0x24>)
   20f44:	f006 fb80 	bl	27648 <strcmp>
   20f48:	fab0 f080 	clz	r0, r0
   20f4c:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   20f4e:	bd10      	pop	{r4, pc}
		return true;
   20f50:	2001      	movs	r0, #1
   20f52:	e7fc      	b.n	20f4e <z_shell_help_request+0x1a>
   20f54:	0002c11e 	.word	0x0002c11e
   20f58:	0002c121 	.word	0x0002c121

00020f5c <cmd_clear>:
	z_cursor_restore(shell);
	return ret_val;
}

static int cmd_clear(const struct shell *shell, size_t argc, char **argv)
{
   20f5c:	b538      	push	{r3, r4, r5, lr}
   20f5e:	4604      	mov	r4, r0
	ARG_UNUSED(argv);

	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
   20f60:	4d06      	ldr	r5, [pc, #24]	; (20f7c <cmd_clear+0x20>)
   20f62:	4a07      	ldr	r2, [pc, #28]	; (20f80 <cmd_clear+0x24>)
   20f64:	4629      	mov	r1, r5
   20f66:	6940      	ldr	r0, [r0, #20]
   20f68:	f005 ff1a 	bl	26da0 <z_shell_raw_fprintf>
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
   20f6c:	6960      	ldr	r0, [r4, #20]
   20f6e:	4629      	mov	r1, r5
   20f70:	4a04      	ldr	r2, [pc, #16]	; (20f84 <cmd_clear+0x28>)
   20f72:	f005 ff15 	bl	26da0 <z_shell_raw_fprintf>

	return 0;
}
   20f76:	2000      	movs	r0, #0
   20f78:	bd38      	pop	{r3, r4, r5, pc}
   20f7a:	bf00      	nop
   20f7c:	0002bc4b 	.word	0x0002bc4b
   20f80:	0002c570 	.word	0x0002c570
   20f84:	0002c574 	.word	0x0002c574

00020f88 <cmd_resize_default>:
	return 0;
}

static int cmd_resize_default(const struct shell *shell,
			      size_t argc, char **argv)
{
   20f88:	b510      	push	{r4, lr}
   20f8a:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
   20f8c:	4a04      	ldr	r2, [pc, #16]	; (20fa0 <cmd_resize_default+0x18>)
   20f8e:	4905      	ldr	r1, [pc, #20]	; (20fa4 <cmd_resize_default+0x1c>)
   20f90:	6940      	ldr	r0, [r0, #20]
   20f92:	f005 ff05 	bl	26da0 <z_shell_raw_fprintf>
	shell->ctx->vt100_ctx.cons.terminal_wid = SHELL_DEFAULT_TERMINAL_WIDTH;
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
   20f96:	68a3      	ldr	r3, [r4, #8]
   20f98:	4a03      	ldr	r2, [pc, #12]	; (20fa8 <cmd_resize_default+0x20>)

	return 0;
}
   20f9a:	2000      	movs	r0, #0
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
   20f9c:	629a      	str	r2, [r3, #40]	; 0x28
}
   20f9e:	bd10      	pop	{r4, pc}
   20fa0:	0002c579 	.word	0x0002c579
   20fa4:	0002bc4b 	.word	0x0002bc4b
   20fa8:	00500018 	.word	0x00500018

00020fac <cmd_shell_stats_show>:
{
   20fac:	b508      	push	{r3, lr}
	shell_print(shell, "Lost logs: %u", shell->stats->log_lost_cnt);
   20fae:	6983      	ldr	r3, [r0, #24]
   20fb0:	2100      	movs	r1, #0
   20fb2:	681b      	ldr	r3, [r3, #0]
   20fb4:	4a02      	ldr	r2, [pc, #8]	; (20fc0 <cmd_shell_stats_show+0x14>)
   20fb6:	f005 fac1 	bl	2653c <shell_fprintf>
}
   20fba:	2000      	movs	r0, #0
   20fbc:	bd08      	pop	{r3, pc}
   20fbe:	bf00      	nop
   20fc0:	0002c12f 	.word	0x0002c12f

00020fc4 <cmd_history>:
{
   20fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   20fc6:	4604      	mov	r4, r0
	size_t i = 0;
   20fc8:	2500      	movs	r5, #0
			shell_print(shell, "[%3d] %s",
   20fca:	4f0f      	ldr	r7, [pc, #60]	; (21008 <cmd_history+0x44>)
{
   20fcc:	b085      	sub	sp, #20
				    shell->ctx->temp_buff, &len);
   20fce:	68a2      	ldr	r2, [r4, #8]
		z_shell_history_get(shell->history, true,
   20fd0:	f10d 030e 	add.w	r3, sp, #14
   20fd4:	2101      	movs	r1, #1
   20fd6:	68e0      	ldr	r0, [r4, #12]
   20fd8:	f502 729f 	add.w	r2, r2, #318	; 0x13e
   20fdc:	f005 ff50 	bl	26e80 <z_shell_history_get>
		if (len) {
   20fe0:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   20fe4:	68a3      	ldr	r3, [r4, #8]
   20fe6:	b158      	cbz	r0, 21000 <cmd_history+0x3c>
			shell_print(shell, "[%3d] %s",
   20fe8:	f503 739f 	add.w	r3, r3, #318	; 0x13e
   20fec:	9300      	str	r3, [sp, #0]
   20fee:	463a      	mov	r2, r7
   20ff0:	462b      	mov	r3, r5
   20ff2:	2100      	movs	r1, #0
   20ff4:	4620      	mov	r0, r4
   20ff6:	1c6e      	adds	r6, r5, #1
   20ff8:	f005 faa0 	bl	2653c <shell_fprintf>
   20ffc:	4635      	mov	r5, r6
		z_shell_history_get(shell->history, true,
   20ffe:	e7e6      	b.n	20fce <cmd_history+0xa>
	shell->ctx->temp_buff[0] = '\0';
   21000:	f883 013e 	strb.w	r0, [r3, #318]	; 0x13e
}
   21004:	b005      	add	sp, #20
   21006:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21008:	0002b327 	.word	0x0002b327

0002100c <cmd_echo>:
	if (argc == 2) {
   2100c:	2902      	cmp	r1, #2
{
   2100e:	b507      	push	{r0, r1, r2, lr}
	if (argc == 2) {
   21010:	d10c      	bne.n	2102c <cmd_echo+0x20>
		shell_error(shell, "%s:%s%s", argv[0],
   21012:	6853      	ldr	r3, [r2, #4]
   21014:	9301      	str	r3, [sp, #4]
   21016:	4b0d      	ldr	r3, [pc, #52]	; (2104c <cmd_echo+0x40>)
   21018:	9300      	str	r3, [sp, #0]
   2101a:	6813      	ldr	r3, [r2, #0]
   2101c:	4a0c      	ldr	r2, [pc, #48]	; (21050 <cmd_echo+0x44>)
   2101e:	f005 fa8d 	bl	2653c <shell_fprintf>
   21022:	f06f 0015 	mvn.w	r0, #21
}
   21026:	b003      	add	sp, #12
   21028:	f85d fb04 	ldr.w	pc, [sp], #4
	shell_print(shell, "Echo status: %s",
   2102c:	6883      	ldr	r3, [r0, #8]
   2102e:	4a09      	ldr	r2, [pc, #36]	; (21054 <cmd_echo+0x48>)
	return shell->ctx->internal.flags.echo == 1;
   21030:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
   21034:	2100      	movs	r1, #0
   21036:	f013 0f04 	tst.w	r3, #4
   2103a:	4b07      	ldr	r3, [pc, #28]	; (21058 <cmd_echo+0x4c>)
   2103c:	bf18      	it	ne
   2103e:	4613      	movne	r3, r2
   21040:	4a06      	ldr	r2, [pc, #24]	; (2105c <cmd_echo+0x50>)
   21042:	f005 fa7b 	bl	2653c <shell_fprintf>
	return 0;
   21046:	2000      	movs	r0, #0
   21048:	e7ed      	b.n	21026 <cmd_echo+0x1a>
   2104a:	bf00      	nop
   2104c:	0002c14b 	.word	0x0002c14b
   21050:	0002c142 	.word	0x0002c142
   21054:	0002bbe4 	.word	0x0002bbe4
   21058:	0002c13e 	.word	0x0002c13e
   2105c:	0002c160 	.word	0x0002c160

00021060 <cmd_resize>:

static int cmd_resize(const struct shell *shell, size_t argc, char **argv)
{
   21060:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (argc != 1) {
   21062:	2901      	cmp	r1, #1
{
   21064:	4605      	mov	r5, r0
   21066:	b085      	sub	sp, #20
	if (argc != 1) {
   21068:	d00d      	beq.n	21086 <cmd_resize+0x26>
		shell_error(shell, "%s:%s%s", argv[0],
   2106a:	6853      	ldr	r3, [r2, #4]
   2106c:	2102      	movs	r1, #2
   2106e:	9301      	str	r3, [sp, #4]
   21070:	4b52      	ldr	r3, [pc, #328]	; (211bc <cmd_resize+0x15c>)
			    SHELL_MSG_UNKNOWN_PARAMETER, argv[1]);
		return -EINVAL;
   21072:	f06f 0415 	mvn.w	r4, #21
		shell_error(shell, "%s:%s%s", argv[0],
   21076:	9300      	str	r3, [sp, #0]
   21078:	6813      	ldr	r3, [r2, #0]
   2107a:	4a51      	ldr	r2, [pc, #324]	; (211c0 <cmd_resize+0x160>)
   2107c:	f005 fa5e 	bl	2653c <shell_fprintf>
			   " screen size");
		return -ENOEXEC;
	}

	return 0;
}
   21080:	4620      	mov	r0, r4
   21082:	b005      	add	sp, #20
   21084:	bdf0      	pop	{r4, r5, r6, r7, pc}
	char c = 0;
   21086:	2400      	movs	r4, #0
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SAVECURSOR);
   21088:	4a4e      	ldr	r2, [pc, #312]	; (211c4 <cmd_resize+0x164>)
   2108a:	494f      	ldr	r1, [pc, #316]	; (211c8 <cmd_resize+0x168>)
   2108c:	6940      	ldr	r0, [r0, #20]
   2108e:	f005 fe87 	bl	26da0 <z_shell_raw_fprintf>
	z_shell_op_cursor_vert_move(shell, -SHELL_MAX_TERMINAL_SIZE);
   21092:	f06f 01f9 	mvn.w	r1, #249	; 0xf9
   21096:	4628      	mov	r0, r5
   21098:	f7ff fbf2 	bl	20880 <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, SHELL_MAX_TERMINAL_SIZE);
   2109c:	21fa      	movs	r1, #250	; 0xfa
   2109e:	4628      	mov	r0, r5
   210a0:	f7ff fbfe 	bl	208a0 <z_shell_op_cursor_horiz_move>
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
   210a4:	68a8      	ldr	r0, [r5, #8]
   210a6:	f44f 7280 	mov.w	r2, #256	; 0x100
   210aa:	4621      	mov	r1, r4
   210ac:	f500 709f 	add.w	r0, r0, #318	; 0x13e
	char c = 0;
   210b0:	f88d 400b 	strb.w	r4, [sp, #11]
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
   210b4:	f006 fb35 	bl	27722 <memset>
	z_shell_raw_fprintf(shell->fprintf_ctx, cmd_get_terminal_size);
   210b8:	4944      	ldr	r1, [pc, #272]	; (211cc <cmd_resize+0x16c>)
   210ba:	6968      	ldr	r0, [r5, #20]
   210bc:	f005 fe70 	bl	26da0 <z_shell_raw_fprintf>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
   210c0:	6968      	ldr	r0, [r5, #20]
   210c2:	f005 fa5d 	bl	26580 <z_shell_fprintf_buffer_flush>
   210c6:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
			(void)shell->iface->api->read(shell->iface, &c,
   210ca:	6868      	ldr	r0, [r5, #4]
   210cc:	2201      	movs	r2, #1
   210ce:	6803      	ldr	r3, [r0, #0]
   210d0:	f10d 010b 	add.w	r1, sp, #11
   210d4:	691f      	ldr	r7, [r3, #16]
   210d6:	ab03      	add	r3, sp, #12
   210d8:	47b8      	blx	r7
			if (cnt == 0) {
   210da:	9b03      	ldr	r3, [sp, #12]
   210dc:	b953      	cbnz	r3, 210f4 <cmd_resize+0x94>
	z_impl_k_busy_wait(usec_to_wait);
   210de:	3e01      	subs	r6, #1
   210e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   210e4:	b2b6      	uxth	r6, r6
   210e6:	f006 ff62 	bl	27fae <z_impl_k_busy_wait>
	for (uint16_t i = 0; i < 1000; i++) {
   210ea:	2e00      	cmp	r6, #0
   210ec:	d1ed      	bne.n	210ca <cmd_resize+0x6a>
		ret_val = -ENOTSUP;
   210ee:	f06f 0485 	mvn.w	r4, #133	; 0x85
   210f2:	e031      	b.n	21158 <cmd_resize+0xf8>
			if ((c != SHELL_VT100_ASCII_ESC) &&
   210f4:	f89d 300b 	ldrb.w	r3, [sp, #11]
   210f8:	68aa      	ldr	r2, [r5, #8]
   210fa:	2b1b      	cmp	r3, #27
   210fc:	d053      	beq.n	211a6 <cmd_resize+0x146>
   210fe:	f892 113e 	ldrb.w	r1, [r2, #318]	; 0x13e
   21102:	291b      	cmp	r1, #27
   21104:	d1e1      	bne.n	210ca <cmd_resize+0x6a>
			if (c == 'R') { /* End of response from the terminal. */
   21106:	2b52      	cmp	r3, #82	; 0x52
   21108:	d14d      	bne.n	211a6 <cmd_resize+0x146>
				shell->ctx->temp_buff[buff_idx] = '\0';
   2110a:	2300      	movs	r3, #0
   2110c:	4414      	add	r4, r2
   2110e:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
				if (shell->ctx->temp_buff[1] != '[') {
   21112:	f892 113f 	ldrb.w	r1, [r2, #319]	; 0x13f
   21116:	295b      	cmp	r1, #91	; 0x5b
   21118:	d14d      	bne.n	211b6 <cmd_resize+0x156>
	*y = 0U;
   2111a:	461f      	mov	r7, r3
				buff_idx = 2U;
   2111c:	2602      	movs	r6, #2
   2111e:	f502 70a0 	add.w	r0, r2, #320	; 0x140
				while (shell->ctx->temp_buff[buff_idx] != ';') {
   21122:	f810 1b01 	ldrb.w	r1, [r0], #1
   21126:	3601      	adds	r6, #1
   21128:	293b      	cmp	r1, #59	; 0x3b
   2112a:	b2b6      	uxth	r6, r6
   2112c:	d126      	bne.n	2117c <cmd_resize+0x11c>
				if (++buff_idx >= CONFIG_SHELL_CMD_BUFF_SIZE) {
   2112e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   21132:	d0dc      	beq.n	210ee <cmd_resize+0x8e>
	*x = 0U;
   21134:	2300      	movs	r3, #0
   21136:	f506 709f 	add.w	r0, r6, #318	; 0x13e
   2113a:	4410      	add	r0, r2
				while (shell->ctx->temp_buff[buff_idx]
   2113c:	f810 4b01 	ldrb.w	r4, [r0], #1
   21140:	bb34      	cbnz	r4, 21190 <cmd_resize+0x130>
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
   21142:	2bfa      	cmp	r3, #250	; 0xfa
   21144:	bf28      	it	cs
   21146:	23fa      	movcs	r3, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
   21148:	2ffa      	cmp	r7, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
   2114a:	8553      	strh	r3, [r2, #42]	; 0x2a
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
   2114c:	463b      	mov	r3, r7
   2114e:	bf28      	it	cs
   21150:	23fa      	movcs	r3, #250	; 0xfa
				shell->ctx->temp_buff[0] = 0;
   21152:	f882 413e 	strb.w	r4, [r2, #318]	; 0x13e
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
   21156:	8513      	strh	r3, [r2, #40]	; 0x28
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_RESTORECURSOR);
   21158:	4a1d      	ldr	r2, [pc, #116]	; (211d0 <cmd_resize+0x170>)
   2115a:	491b      	ldr	r1, [pc, #108]	; (211c8 <cmd_resize+0x168>)
   2115c:	6968      	ldr	r0, [r5, #20]
   2115e:	f005 fe1f 	bl	26da0 <z_shell_raw_fprintf>
	if (err != 0) {
   21162:	2c00      	cmp	r4, #0
   21164:	d08c      	beq.n	21080 <cmd_resize+0x20>
		shell->ctx->vt100_ctx.cons.terminal_hei =
   21166:	68ab      	ldr	r3, [r5, #8]
   21168:	4a1a      	ldr	r2, [pc, #104]	; (211d4 <cmd_resize+0x174>)
		shell_warn(shell, "No response from the terminal, assumed 80x24"
   2116a:	2104      	movs	r1, #4
		shell->ctx->vt100_ctx.cons.terminal_hei =
   2116c:	629a      	str	r2, [r3, #40]	; 0x28
		shell_warn(shell, "No response from the terminal, assumed 80x24"
   2116e:	4628      	mov	r0, r5
   21170:	4a19      	ldr	r2, [pc, #100]	; (211d8 <cmd_resize+0x178>)
   21172:	f005 f9e3 	bl	2653c <shell_fprintf>
   21176:	f06f 0407 	mvn.w	r4, #7
   2117a:	e781      	b.n	21080 <cmd_resize+0x20>
					*y = *y * 10U +
   2117c:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   21180:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   21184:	3b30      	subs	r3, #48	; 0x30
					if (buff_idx >=
   21186:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
					*y = *y * 10U +
   2118a:	b29f      	uxth	r7, r3
					if (buff_idx >=
   2118c:	d1c9      	bne.n	21122 <cmd_resize+0xc2>
   2118e:	e7ae      	b.n	210ee <cmd_resize+0x8e>
					*x = *x * 10U +
   21190:	eb03 0383 	add.w	r3, r3, r3, lsl #2
					(shell->ctx->temp_buff[buff_idx++] -
   21194:	3601      	adds	r6, #1
					*x = *x * 10U +
   21196:	eb04 0443 	add.w	r4, r4, r3, lsl #1
					(shell->ctx->temp_buff[buff_idx++] -
   2119a:	b2b6      	uxth	r6, r6
					*x = *x * 10U +
   2119c:	3c30      	subs	r4, #48	; 0x30
					if (buff_idx >=
   2119e:	2eff      	cmp	r6, #255	; 0xff
					*x = *x * 10U +
   211a0:	b2a3      	uxth	r3, r4
					if (buff_idx >=
   211a2:	d9cb      	bls.n	2113c <cmd_resize+0xdc>
   211a4:	e7a3      	b.n	210ee <cmd_resize+0x8e>
			shell->ctx->temp_buff[buff_idx] = c;
   211a6:	1911      	adds	r1, r2, r4
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
   211a8:	3401      	adds	r4, #1
   211aa:	b2a4      	uxth	r4, r4
   211ac:	2c09      	cmp	r4, #9
			shell->ctx->temp_buff[buff_idx] = c;
   211ae:	f881 313e 	strb.w	r3, [r1, #318]	; 0x13e
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
   211b2:	d98a      	bls.n	210ca <cmd_resize+0x6a>
				shell->ctx->temp_buff[0] = 0;
   211b4:	2300      	movs	r3, #0
   211b6:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
				return -ENOMEM;
   211ba:	e798      	b.n	210ee <cmd_resize+0x8e>
   211bc:	0002c14b 	.word	0x0002c14b
   211c0:	0002c142 	.word	0x0002c142
   211c4:	0002c56a 	.word	0x0002c56a
   211c8:	0002bc4b 	.word	0x0002bc4b
   211cc:	0002c57f 	.word	0x0002c57f
   211d0:	0002c56d 	.word	0x0002c56d
   211d4:	00500018 	.word	0x00500018
   211d8:	0002c171 	.word	0x0002c171

000211dc <z_shell_wildcard_process>:


enum shell_wildcard_status z_shell_wildcard_process(const struct shell *shell,
					const struct shell_static_entry *cmd,
					const char *pattern)
{
   211dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   211e0:	4607      	mov	r7, r0
   211e2:	4615      	mov	r5, r2
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_NOT_FOUND;

	if (cmd == NULL) {
   211e4:	4689      	mov	r9, r1
{
   211e6:	b089      	sub	sp, #36	; 0x24
	if (cmd == NULL) {
   211e8:	b921      	cbnz	r1, 211f4 <z_shell_wildcard_process+0x18>
		return ret_val;
   211ea:	2403      	movs	r4, #3
	 * and it will try to add matching commands.
	 */
	ret_val = commands_expand(shell, cmd, pattern);

	return ret_val;
}
   211ec:	4620      	mov	r0, r4
   211ee:	b009      	add	sp, #36	; 0x24
   211f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!z_shell_has_wildcard(pattern)) {
   211f4:	4610      	mov	r0, r2
   211f6:	f006 f826 	bl	27246 <z_shell_has_wildcard>
   211fa:	2800      	cmp	r0, #0
   211fc:	d0f5      	beq.n	211ea <z_shell_wildcard_process+0xe>
	size_t cnt = 0;
   211fe:	f04f 0800 	mov.w	r8, #0
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
   21202:	2402      	movs	r4, #2
	size_t cmd_idx = 0;
   21204:	4641      	mov	r1, r8
   21206:	e024      	b.n	21252 <z_shell_wildcard_process+0x76>
	return str == NULL ? 0U : (uint16_t)strlen(str);
   21208:	465c      	mov	r4, fp
   2120a:	e03c      	b.n	21286 <z_shell_wildcard_process+0xaa>
	completion_addr = strstr(buff, pattern);
   2120c:	4629      	mov	r1, r5
   2120e:	f50a 709f 	add.w	r0, sl, #318	; 0x13e
   21212:	f006 f9be 	bl	27592 <strstr>
	if (!completion_addr) {
   21216:	4606      	mov	r6, r0
   21218:	2800      	cmp	r0, #0
   2121a:	d04e      	beq.n	212ba <z_shell_wildcard_process+0xde>
   2121c:	f006 fa04 	bl	27628 <strlen>
	memmove(completion_addr + cmd_len + 1, completion_addr, shift + 1);
   21220:	b282      	uxth	r2, r0
   21222:	1c60      	adds	r0, r4, #1
   21224:	4631      	mov	r1, r6
   21226:	3201      	adds	r2, #1
   21228:	4430      	add	r0, r6
   2122a:	f006 fa38 	bl	2769e <memmove>
	memcpy(completion_addr, cmd, cmd_len);
   2122e:	4622      	mov	r2, r4
   21230:	4659      	mov	r1, fp
   21232:	4630      	mov	r0, r6
   21234:	f006 fa4a 	bl	276cc <memcpy>
	completion_addr[cmd_len] = ' ';
   21238:	f04f 0320 	mov.w	r3, #32
   2123c:	5533      	strb	r3, [r6, r4]
	*buff_len += cmd_len + 1; /* + 1 for space */
   2123e:	f8ba 003c 	ldrh.w	r0, [sl, #60]	; 0x3c
			cnt++;
   21242:	f108 0801 	add.w	r8, r8, #1
	*buff_len += cmd_len + 1; /* + 1 for space */
   21246:	4404      	add	r4, r0
   21248:	3401      	adds	r4, #1
   2124a:	f8aa 403c 	strh.w	r4, [sl, #60]	; 0x3c
			ret_val = command_add(shell->ctx->temp_buff,
   2124e:	2400      	movs	r4, #0
   21250:	9901      	ldr	r1, [sp, #4]
	while ((entry = z_shell_cmd_get(cmd, cmd_idx++, &dloc)) != NULL) {
   21252:	1c4b      	adds	r3, r1, #1
   21254:	4648      	mov	r0, r9
   21256:	aa03      	add	r2, sp, #12
   21258:	9301      	str	r3, [sp, #4]
   2125a:	f7ff fae3 	bl	20824 <z_shell_cmd_get>
   2125e:	4606      	mov	r6, r0
   21260:	b1f8      	cbz	r0, 212a2 <z_shell_wildcard_process+0xc6>
		if (fnmatch(pattern, entry->syntax, 0) == 0) {
   21262:	2200      	movs	r2, #0
   21264:	4628      	mov	r0, r5
   21266:	6831      	ldr	r1, [r6, #0]
   21268:	f004 fcbc 	bl	25be4 <fnmatch>
   2126c:	2800      	cmp	r0, #0
   2126e:	d1ef      	bne.n	21250 <z_shell_wildcard_process+0x74>
			ret_val = command_add(shell->ctx->temp_buff,
   21270:	f8d6 b000 	ldr.w	fp, [r6]
   21274:	f8d7 a008 	ldr.w	sl, [r7, #8]
   21278:	f1bb 0f00 	cmp.w	fp, #0
   2127c:	d0c4      	beq.n	21208 <z_shell_wildcard_process+0x2c>
   2127e:	4658      	mov	r0, fp
   21280:	f006 f9d2 	bl	27628 <strlen>
   21284:	b284      	uxth	r4, r0
	if ((*buff_len + cmd_len + 1) > CONFIG_SHELL_CMD_BUFF_SIZE) {
   21286:	f8ba 203c 	ldrh.w	r2, [sl, #60]	; 0x3c
   2128a:	3201      	adds	r2, #1
   2128c:	4422      	add	r2, r4
   2128e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   21292:	ddbb      	ble.n	2120c <z_shell_wildcard_process+0x30>
				z_shell_fprintf(shell, SHELL_WARNING,
   21294:	462b      	mov	r3, r5
   21296:	2104      	movs	r1, #4
   21298:	4638      	mov	r0, r7
   2129a:	4a09      	ldr	r2, [pc, #36]	; (212c0 <z_shell_wildcard_process+0xe4>)
   2129c:	f005 fcaa 	bl	26bf4 <z_shell_fprintf>
			ret_val = command_add(shell->ctx->temp_buff,
   212a0:	2401      	movs	r4, #1
	if (cnt > 0) {
   212a2:	f1b8 0f00 	cmp.w	r8, #0
   212a6:	d0a1      	beq.n	211ec <z_shell_wildcard_process+0x10>
		z_shell_pattern_remove(shell->ctx->temp_buff,
   212a8:	68b8      	ldr	r0, [r7, #8]
   212aa:	462a      	mov	r2, r5
   212ac:	f100 013c 	add.w	r1, r0, #60	; 0x3c
   212b0:	f500 709f 	add.w	r0, r0, #318	; 0x13e
   212b4:	f005 fa90 	bl	267d8 <z_shell_pattern_remove>
	return ret_val;
   212b8:	e798      	b.n	211ec <z_shell_wildcard_process+0x10>
		return SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
   212ba:	2402      	movs	r4, #2
   212bc:	e7f1      	b.n	212a2 <z_shell_wildcard_process+0xc6>
   212be:	bf00      	nop
   212c0:	0002c584 	.word	0x0002c584

000212c4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   212c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   212c6:	4605      	mov	r5, r0
	__asm__ volatile(
   212c8:	f04f 0320 	mov.w	r3, #32
   212cc:	f3ef 8611 	mrs	r6, BASEPRI
   212d0:	f383 8811 	msr	BASEPRI, r3
   212d4:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   212d8:	4b0b      	ldr	r3, [pc, #44]	; (21308 <pm_state_notify+0x44>)
   212da:	681c      	ldr	r4, [r3, #0]
   212dc:	2c00      	cmp	r4, #0
   212de:	bf38      	it	cc
   212e0:	2400      	movcc	r4, #0
   212e2:	b15c      	cbz	r4, 212fc <pm_state_notify+0x38>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
   212e4:	4f09      	ldr	r7, [pc, #36]	; (2130c <pm_state_notify+0x48>)
			callback = notifier->state_exit;
   212e6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   212ea:	2d00      	cmp	r5, #0
   212ec:	bf08      	it	eq
   212ee:	4613      	moveq	r3, r2
		if (callback) {
   212f0:	b10b      	cbz	r3, 212f6 <pm_state_notify+0x32>
			callback(z_power_state.state);
   212f2:	7838      	ldrb	r0, [r7, #0]
   212f4:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   212f6:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   212f8:	2c00      	cmp	r4, #0
   212fa:	d1f4      	bne.n	212e6 <pm_state_notify+0x22>
	__asm__ volatile(
   212fc:	f386 8811 	msr	BASEPRI, r6
   21300:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   21304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21306:	bf00      	nop
   21308:	20008bf8 	.word	0x20008bf8
   2130c:	20008c00 	.word	0x20008c00

00021310 <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
   21310:	4b08      	ldr	r3, [pc, #32]	; (21334 <pm_system_resume+0x24>)
{
   21312:	b510      	push	{r4, lr}
	if (!post_ops_done) {
   21314:	681c      	ldr	r4, [r3, #0]
   21316:	b95c      	cbnz	r4, 21330 <pm_system_resume+0x20>
		post_ops_done = 1;
   21318:	2201      	movs	r2, #1
   2131a:	601a      	str	r2, [r3, #0]
		pm_power_state_exit_post_ops(z_power_state);
   2131c:	4b06      	ldr	r3, [pc, #24]	; (21338 <pm_system_resume+0x28>)
   2131e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   21322:	f004 fc8f 	bl	25c44 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   21326:	4620      	mov	r0, r4
	}
}
   21328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pm_state_notify(false);
   2132c:	f7ff bfca 	b.w	212c4 <pm_state_notify>
}
   21330:	bd10      	pop	{r4, pc}
   21332:	bf00      	nop
   21334:	2000807c 	.word	0x2000807c
   21338:	20008c00 	.word	0x20008c00

0002133c <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
   2133c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2133e:	b085      	sub	sp, #20
	z_power_state = pm_policy_next_state(ticks);
   21340:	466e      	mov	r6, sp
   21342:	4c18      	ldr	r4, [pc, #96]	; (213a4 <pm_system_suspend+0x68>)
   21344:	4601      	mov	r1, r0
{
   21346:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
   21348:	4630      	mov	r0, r6
   2134a:	f005 ffc1 	bl	272d0 <pm_policy_next_state>
   2134e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   21352:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
   21356:	7820      	ldrb	r0, [r4, #0]
   21358:	b308      	cbz	r0, 2139e <pm_system_suspend+0x62>
		LOG_DBG("No PM operations done.");
		return z_power_state.state;
	}
	post_ops_done = 0;
   2135a:	2100      	movs	r1, #0
   2135c:	4b12      	ldr	r3, [pc, #72]	; (213a8 <pm_system_suspend+0x6c>)
   2135e:	6019      	str	r1, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
   21360:	1c6b      	adds	r3, r5, #1
   21362:	d00e      	beq.n	21382 <pm_system_suspend+0x46>
			return (uint32_t)((t * to_hz + off) / from_hz);
   21364:	4617      	mov	r7, r2
   21366:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2136a:	2100      	movs	r1, #0
   2136c:	480f      	ldr	r0, [pc, #60]	; (213ac <pm_system_suspend+0x70>)
   2136e:	2300      	movs	r3, #0
   21370:	fbe6 0107 	umlal	r0, r1, r6, r7
   21374:	4a0e      	ldr	r2, [pc, #56]	; (213b0 <pm_system_suspend+0x74>)
   21376:	f7ee ffb3 	bl	102e0 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   2137a:	2101      	movs	r1, #1
   2137c:	1a28      	subs	r0, r5, r0
   2137e:	f006 fdf6 	bl	27f6e <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   21382:	f002 ff11 	bl	241a8 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
   21386:	2001      	movs	r0, #1
   21388:	f7ff ff9c 	bl	212c4 <pm_state_notify>
	pm_power_state_set(z_power_state);
   2138c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   21390:	f004 fc45 	bl	25c1e <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
   21394:	f7ff ffbc 	bl	21310 <pm_system_resume>
	k_sched_unlock();
   21398:	f002 fff8 	bl	2438c <k_sched_unlock>

	return z_power_state.state;
   2139c:	7820      	ldrb	r0, [r4, #0]
}
   2139e:	b005      	add	sp, #20
   213a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   213a2:	bf00      	nop
   213a4:	20008c00 	.word	0x20008c00
   213a8:	2000807c 	.word	0x2000807c
   213ac:	000f423f 	.word	0x000f423f
   213b0:	000f4240 	.word	0x000f4240

000213b4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   213b4:	b510      	push	{r4, lr}
   213b6:	4807      	ldr	r0, [pc, #28]	; (213d4 <uart_console_init+0x20>)
   213b8:	f002 f95e 	bl	23678 <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
   213bc:	4c06      	ldr	r4, [pc, #24]	; (213d8 <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   213be:	4b07      	ldr	r3, [pc, #28]	; (213dc <uart_console_init+0x28>)
   213c0:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
   213c2:	4620      	mov	r0, r4
   213c4:	f001 f9d2 	bl	2276c <__stdout_hook_install>
	__printk_hook_install(console_out);
   213c8:	4620      	mov	r0, r4
   213ca:	f7fc fbd1 	bl	1db70 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
   213ce:	2000      	movs	r0, #0
   213d0:	bd10      	pop	{r4, pc}
   213d2:	bf00      	nop
   213d4:	0002c0cb 	.word	0x0002c0cb
   213d8:	000213e1 	.word	0x000213e1
   213dc:	20008c0c 	.word	0x20008c0c

000213e0 <console_out>:
	if ('\n' == c) {
   213e0:	280a      	cmp	r0, #10
{
   213e2:	b538      	push	{r3, r4, r5, lr}
   213e4:	4604      	mov	r4, r0
   213e6:	4d07      	ldr	r5, [pc, #28]	; (21404 <console_out+0x24>)
	if ('\n' == c) {
   213e8:	d104      	bne.n	213f4 <console_out+0x14>
   213ea:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
   213ec:	6883      	ldr	r3, [r0, #8]
   213ee:	210d      	movs	r1, #13
   213f0:	685b      	ldr	r3, [r3, #4]
   213f2:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   213f4:	6828      	ldr	r0, [r5, #0]
   213f6:	6883      	ldr	r3, [r0, #8]
   213f8:	b2e1      	uxtb	r1, r4
   213fa:	685b      	ldr	r3, [r3, #4]
   213fc:	4798      	blx	r3
}
   213fe:	4620      	mov	r0, r4
   21400:	bd38      	pop	{r3, r4, r5, pc}
   21402:	bf00      	nop
   21404:	20008c0c 	.word	0x20008c0c

00021408 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   21408:	b570      	push	{r4, r5, r6, lr}
   2140a:	4604      	mov	r4, r0
	err = set_off_state(&subdata->flags, ctx);
   2140c:	250c      	movs	r5, #12
	size_t offset = (size_t)(mgr - data->mgr);
   2140e:	480d      	ldr	r0, [pc, #52]	; (21444 <onoff_stop+0x3c>)
{
   21410:	460e      	mov	r6, r1
	size_t offset = (size_t)(mgr - data->mgr);
   21412:	1a23      	subs	r3, r4, r0
   21414:	109a      	asrs	r2, r3, #2
   21416:	4b0c      	ldr	r3, [pc, #48]	; (21448 <onoff_stop+0x40>)
	err = set_off_state(&subdata->flags, ctx);
   21418:	2140      	movs	r1, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   2141a:	4353      	muls	r3, r2
   2141c:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
   2141e:	435d      	muls	r5, r3
   21420:	f105 0378 	add.w	r3, r5, #120	; 0x78
   21424:	4418      	add	r0, r3
   21426:	f005 ff61 	bl	272ec <set_off_state>
	if (err < 0) {
   2142a:	1e01      	subs	r1, r0, #0
   2142c:	db04      	blt.n	21438 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
   2142e:	4b07      	ldr	r3, [pc, #28]	; (2144c <onoff_stop+0x44>)
   21430:	442b      	add	r3, r5
   21432:	685b      	ldr	r3, [r3, #4]
   21434:	4798      	blx	r3
	return 0;
   21436:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
   21438:	4620      	mov	r0, r4
   2143a:	4633      	mov	r3, r6
}
   2143c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   21440:	4718      	bx	r3
   21442:	bf00      	nop
   21444:	20008c24 	.word	0x20008c24
   21448:	b6db6db7 	.word	0xb6db6db7
   2144c:	0002ae9c 	.word	0x0002ae9c

00021450 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   21450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   21454:	4c0f      	ldr	r4, [pc, #60]	; (21494 <onoff_start+0x44>)
   21456:	4d10      	ldr	r5, [pc, #64]	; (21498 <onoff_start+0x48>)
   21458:	1b03      	subs	r3, r0, r4
   2145a:	109b      	asrs	r3, r3, #2
   2145c:	435d      	muls	r5, r3
   2145e:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
   21460:	250c      	movs	r5, #12
   21462:	435d      	muls	r5, r3
{
   21464:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
   21466:	f105 0078 	add.w	r0, r5, #120	; 0x78
{
   2146a:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   2146c:	4420      	add	r0, r4
   2146e:	2140      	movs	r1, #64	; 0x40
   21470:	f005 ff55 	bl	2731e <set_starting_state>
	if (err < 0) {
   21474:	1e01      	subs	r1, r0, #0
   21476:	db08      	blt.n	2148a <onoff_start+0x3a>
	subdata->cb = cb;
   21478:	4b08      	ldr	r3, [pc, #32]	; (2149c <onoff_start+0x4c>)
   2147a:	442c      	add	r4, r5
	subdata->user_data = user_data;
   2147c:	e9c4 361c 	strd	r3, r6, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
   21480:	4b07      	ldr	r3, [pc, #28]	; (214a0 <onoff_start+0x50>)
   21482:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   21484:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   21488:	4718      	bx	r3
		notify(mgr, err);
   2148a:	4638      	mov	r0, r7
   2148c:	4633      	mov	r3, r6
}
   2148e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   21492:	4718      	bx	r3
   21494:	20008c24 	.word	0x20008c24
   21498:	b6db6db7 	.word	0xb6db6db7
   2149c:	00027381 	.word	0x00027381
   214a0:	0002ae9c 	.word	0x0002ae9c

000214a4 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
   214a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   214a8:	2200      	movs	r2, #0
   214aa:	2101      	movs	r1, #1
{
   214ac:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   214ae:	2005      	movs	r0, #5
   214b0:	f000 fb40 	bl	21b34 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   214b4:	2005      	movs	r0, #5
   214b6:	f000 fb1f 	bl	21af8 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   214ba:	4811      	ldr	r0, [pc, #68]	; (21500 <clk_init+0x5c>)
   214bc:	f001 fef8 	bl	232b0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   214c0:	4b10      	ldr	r3, [pc, #64]	; (21504 <clk_init+0x60>)
   214c2:	4298      	cmp	r0, r3
   214c4:	d119      	bne.n	214fa <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   214c6:	f001 ff03 	bl	232d0 <nrfx_clock_enable>
   214ca:	2400      	movs	r4, #0
	return &data->mgr[type];
   214cc:	f04f 081c 	mov.w	r8, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   214d0:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
   214d2:	f8df 9034 	ldr.w	r9, [pc, #52]	; 21508 <clk_init+0x64>
						get_sub_data(dev, i);
   214d6:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   214d8:	4649      	mov	r1, r9
   214da:	fb08 5004 	mla	r0, r8, r4, r5
   214de:	f003 ffe2 	bl	254a6 <onoff_manager_init>
		if (err < 0) {
   214e2:	2800      	cmp	r0, #0
   214e4:	db07      	blt.n	214f6 <clk_init+0x52>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   214e6:	2301      	movs	r3, #1
   214e8:	fb07 5504 	mla	r5, r7, r4, r5
   214ec:	441c      	add	r4, r3
	for (enum clock_control_nrf_type i = 0;
   214ee:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   214f0:	67ab      	str	r3, [r5, #120]	; 0x78
	for (enum clock_control_nrf_type i = 0;
   214f2:	d1f0      	bne.n	214d6 <clk_init+0x32>
	}

	return 0;
   214f4:	2000      	movs	r0, #0
}
   214f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   214fa:	f06f 0004 	mvn.w	r0, #4
   214fe:	e7fa      	b.n	214f6 <clk_init+0x52>
   21500:	00021541 	.word	0x00021541
   21504:	0bad0000 	.word	0x0bad0000
   21508:	0002aefc 	.word	0x0002aefc

0002150c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   2150c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   2150e:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   21510:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
   21512:	434b      	muls	r3, r1
   21514:	4808      	ldr	r0, [pc, #32]	; (21538 <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
   21516:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   21518:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   2151a:	3378      	adds	r3, #120	; 0x78
	void *user_data = sub_data->user_data;
   2151c:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
   21520:	4418      	add	r0, r3
	sub_data->cb = NULL;
   21522:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
   21524:	f005 ff19 	bl	2735a <set_on_state>
	if (callback) {
   21528:	b12d      	cbz	r5, 21536 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   2152a:	4632      	mov	r2, r6
   2152c:	462b      	mov	r3, r5
}
   2152e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   21532:	4802      	ldr	r0, [pc, #8]	; (2153c <clkstarted_handle.constprop.0+0x30>)
   21534:	4718      	bx	r3
}
   21536:	bd70      	pop	{r4, r5, r6, pc}
   21538:	20008c24 	.word	0x20008c24
   2153c:	200080c4 	.word	0x200080c4

00021540 <clock_event_handler>:
	switch (event) {
   21540:	2805      	cmp	r0, #5
   21542:	d811      	bhi.n	21568 <clock_event_handler+0x28>
   21544:	e8df f000 	tbb	[pc, r0]
   21548:	10100e03 	.word	0x10100e03
   2154c:	0a0c      	.short	0x0a0c
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   2154e:	4b07      	ldr	r3, [pc, #28]	; (2156c <clock_event_handler+0x2c>)
   21550:	6f98      	ldr	r0, [r3, #120]	; 0x78
   21552:	f010 0007 	ands.w	r0, r0, #7
   21556:	d107      	bne.n	21568 <clock_event_handler+0x28>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   21558:	f7ff bfd8 	b.w	2150c <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
   2155c:	2002      	movs	r0, #2
   2155e:	e7fb      	b.n	21558 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
   21560:	2003      	movs	r0, #3
   21562:	e7f9      	b.n	21558 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   21564:	2001      	movs	r0, #1
   21566:	e7f7      	b.n	21558 <clock_event_handler+0x18>
}
   21568:	4770      	bx	lr
   2156a:	bf00      	nop
   2156c:	20008c24 	.word	0x20008c24

00021570 <hfclk_start>:
{
   21570:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   21572:	f006 fd1a 	bl	27faa <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
   21576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2157a:	460c      	mov	r4, r1
   2157c:	fba0 0103 	umull	r0, r1, r0, r3
   21580:	fb03 1104 	mla	r1, r3, r4, r1
}
   21584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21588:	0bc3      	lsrs	r3, r0, #15
		hf_start_tstamp = k_uptime_get();
   2158a:	4a04      	ldr	r2, [pc, #16]	; (2159c <hfclk_start+0x2c>)
   2158c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   21590:	2001      	movs	r0, #1
   21592:	0bc9      	lsrs	r1, r1, #15
   21594:	e9c2 3100 	strd	r3, r1, [r2]
   21598:	f001 beac 	b.w	232f4 <nrfx_clock_start>
   2159c:	200085f0 	.word	0x200085f0

000215a0 <generic_hfclk_start>:
{
   215a0:	b508      	push	{r3, lr}
	__asm__ volatile(
   215a2:	f04f 0320 	mov.w	r3, #32
   215a6:	f3ef 8111 	mrs	r1, BASEPRI
   215aa:	f383 8811 	msr	BASEPRI, r3
   215ae:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   215b2:	4a11      	ldr	r2, [pc, #68]	; (215f8 <generic_hfclk_start+0x58>)
   215b4:	6813      	ldr	r3, [r2, #0]
   215b6:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   215ba:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   215be:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   215c0:	d00b      	beq.n	215da <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   215c2:	4a0e      	ldr	r2, [pc, #56]	; (215fc <generic_hfclk_start+0x5c>)
   215c4:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   215c8:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   215cc:	f013 0301 	ands.w	r3, r3, #1
   215d0:	d003      	beq.n	215da <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
   215d2:	480b      	ldr	r0, [pc, #44]	; (21600 <generic_hfclk_start+0x60>)
   215d4:	f005 fec1 	bl	2735a <set_on_state>
			already_started = true;
   215d8:	2301      	movs	r3, #1
	__asm__ volatile(
   215da:	f381 8811 	msr	BASEPRI, r1
   215de:	f3bf 8f6f 	isb	sy
	if (already_started) {
   215e2:	b123      	cbz	r3, 215ee <generic_hfclk_start+0x4e>
}
   215e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   215e8:	2000      	movs	r0, #0
   215ea:	f7ff bf8f 	b.w	2150c <clkstarted_handle.constprop.0>
}
   215ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	hfclk_start();
   215f2:	f7ff bfbd 	b.w	21570 <hfclk_start>
   215f6:	bf00      	nop
   215f8:	20008cc4 	.word	0x20008cc4
   215fc:	40005000 	.word	0x40005000
   21600:	20008c9c 	.word	0x20008c9c

00021604 <hfclk_stop>:
{
   21604:	b510      	push	{r4, lr}
   21606:	f006 fcd0 	bl	27faa <z_impl_k_uptime_ticks>
   2160a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2160e:	460c      	mov	r4, r1
   21610:	fba0 0103 	umull	r0, r1, r0, r3
   21614:	fb03 1104 	mla	r1, r3, r4, r1
}
   21618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2161c:	0bc3      	lsrs	r3, r0, #15
		hf_stop_tstamp = k_uptime_get();
   2161e:	4a04      	ldr	r2, [pc, #16]	; (21630 <hfclk_stop+0x2c>)
   21620:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   21624:	2001      	movs	r0, #1
   21626:	0bc9      	lsrs	r1, r1, #15
   21628:	e9c2 3100 	strd	r3, r1, [r2]
   2162c:	f001 beb2 	b.w	23394 <nrfx_clock_stop>
   21630:	200085f8 	.word	0x200085f8

00021634 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21634:	4b06      	ldr	r3, [pc, #24]	; (21650 <generic_hfclk_stop+0x1c>)
   21636:	e8d3 2fef 	ldaex	r2, [r3]
   2163a:	f022 0102 	bic.w	r1, r2, #2
   2163e:	e8c3 1fe0 	stlex	r0, r1, [r3]
   21642:	2800      	cmp	r0, #0
   21644:	d1f7      	bne.n	21636 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   21646:	07d3      	lsls	r3, r2, #31
   21648:	d401      	bmi.n	2164e <generic_hfclk_stop+0x1a>
	hfclk_stop();
   2164a:	f7ff bfdb 	b.w	21604 <hfclk_stop>
}
   2164e:	4770      	bx	lr
   21650:	20008cc4 	.word	0x20008cc4

00021654 <cmd_status>:
		 &data, &config,
		 PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		 &clock_control_api);

static int cmd_status(const struct shell *shell, size_t argc, char **argv)
{
   21654:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   21658:	4f32      	ldr	r7, [pc, #200]	; (21724 <cmd_status+0xd0>)
   2165a:	4604      	mov	r4, r0
   2165c:	f8d7 6418 	ldr.w	r6, [r7, #1048]	; 0x418
   21660:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
	__asm__ volatile(
   21664:	f04f 0320 	mov.w	r3, #32
   21668:	f3ef 8811 	mrs	r8, BASEPRI
   2166c:	f383 8811 	msr	BASEPRI, r3
   21670:	f3bf 8f6f 	isb	sy
   21674:	f006 fc99 	bl	27faa <z_impl_k_uptime_ticks>
   21678:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2167c:	460a      	mov	r2, r1
   2167e:	fba0 0103 	umull	r0, r1, r0, r3
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   21682:	f8d7 940c 	ldr.w	r9, [r7, #1036]	; 0x40c
   21686:	fb03 1102 	mla	r1, r3, r2, r1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   2168a:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
	uint64_t now = k_uptime_get();

	(void)nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, (void *)&hfclk_src);
	hf_status = (hfclk_src == NRF_CLOCK_HFCLK_HIGH_ACCURACY);

	abs_start = hf_start_tstamp;
   2168e:	4b26      	ldr	r3, [pc, #152]	; (21728 <cmd_status+0xd4>)
   21690:	0bc5      	lsrs	r5, r0, #15
   21692:	f8d3 b000 	ldr.w	fp, [r3]
	abs_stop = hf_stop_tstamp;
   21696:	4b25      	ldr	r3, [pc, #148]	; (2172c <cmd_status+0xd8>)
   21698:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
   2169c:	f8d3 a000 	ldr.w	sl, [r3]
	__asm__ volatile(
   216a0:	f388 8811 	msr	BASEPRI, r8
   216a4:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	shell_print(shell, "HF clock:");
   216a8:	2100      	movs	r1, #0
   216aa:	4620      	mov	r0, r4
   216ac:	4a20      	ldr	r2, [pc, #128]	; (21730 <cmd_status+0xdc>)
   216ae:	f004 ff45 	bl	2653c <shell_fprintf>
	shell_print(shell, "\t- %srunning (users: %u)",
   216b2:	f019 0f01 	tst.w	r9, #1
   216b6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 21748 <cmd_status+0xf4>
   216ba:	f8df 8090 	ldr.w	r8, [pc, #144]	; 2174c <cmd_status+0xf8>
   216be:	f8b9 301a 	ldrh.w	r3, [r9, #26]
   216c2:	4f1c      	ldr	r7, [pc, #112]	; (21734 <cmd_status+0xe0>)
   216c4:	9300      	str	r3, [sp, #0]
   216c6:	4620      	mov	r0, r4
   216c8:	bf14      	ite	ne
   216ca:	4643      	movne	r3, r8
   216cc:	463b      	moveq	r3, r7
   216ce:	2100      	movs	r1, #0
   216d0:	4a19      	ldr	r2, [pc, #100]	; (21738 <cmd_status+0xe4>)
   216d2:	f004 ff33 	bl	2653c <shell_fprintf>
			hf_status ? "" : "not ", hf_mgr->refs);
	shell_print(shell, "\t- last start: %u ms (%u ms ago)",
   216d6:	eba5 030b 	sub.w	r3, r5, fp
   216da:	4620      	mov	r0, r4
   216dc:	9300      	str	r3, [sp, #0]
   216de:	2100      	movs	r1, #0
   216e0:	465b      	mov	r3, fp
   216e2:	4a16      	ldr	r2, [pc, #88]	; (2173c <cmd_status+0xe8>)
			(uint32_t)abs_start, (uint32_t)(now - abs_start));
	shell_print(shell, "\t- last stop: %u ms (%u ms ago)",
   216e4:	eba5 050a 	sub.w	r5, r5, sl
	shell_print(shell, "\t- last start: %u ms (%u ms ago)",
   216e8:	f004 ff28 	bl	2653c <shell_fprintf>
	shell_print(shell, "\t- last stop: %u ms (%u ms ago)",
   216ec:	4653      	mov	r3, sl
   216ee:	4620      	mov	r0, r4
   216f0:	2100      	movs	r1, #0
   216f2:	4a13      	ldr	r2, [pc, #76]	; (21740 <cmd_status+0xec>)
   216f4:	9500      	str	r5, [sp, #0]
   216f6:	f004 ff21 	bl	2653c <shell_fprintf>
			(uint32_t)abs_stop, (uint32_t)(now - abs_stop));
	shell_print(shell, "LF clock:");
   216fa:	4620      	mov	r0, r4
   216fc:	2100      	movs	r1, #0
   216fe:	4a11      	ldr	r2, [pc, #68]	; (21744 <cmd_status+0xf0>)
   21700:	f004 ff1c 	bl	2653c <shell_fprintf>
	shell_print(shell, "\t- %srunning (users: %u)",
   21704:	f8b9 3036 	ldrh.w	r3, [r9, #54]	; 0x36
   21708:	4620      	mov	r0, r4
   2170a:	9300      	str	r3, [sp, #0]
   2170c:	2100      	movs	r1, #0
   2170e:	2e00      	cmp	r6, #0
   21710:	bf14      	ite	ne
   21712:	4643      	movne	r3, r8
   21714:	463b      	moveq	r3, r7
   21716:	4a08      	ldr	r2, [pc, #32]	; (21738 <cmd_status+0xe4>)
   21718:	f004 ff10 	bl	2653c <shell_fprintf>
			lf_status ? "" : "not ", lf_mgr->refs);

	return 0;
}
   2171c:	2000      	movs	r0, #0
   2171e:	b003      	add	sp, #12
   21720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21724:	40005000 	.word	0x40005000
   21728:	200085f0 	.word	0x200085f0
   2172c:	200085f8 	.word	0x200085f8
   21730:	0002c5e1 	.word	0x0002c5e1
   21734:	0002c5dc 	.word	0x0002c5dc
   21738:	0002c5ec 	.word	0x0002c5ec
   2173c:	0002c606 	.word	0x0002c606
   21740:	0002c628 	.word	0x0002c628
   21744:	0002c649 	.word	0x0002c649
   21748:	20008c24 	.word	0x20008c24
   2174c:	0002bafe 	.word	0x0002bafe

00021750 <api_blocking_start>:
{
   21750:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   21752:	2200      	movs	r2, #0
   21754:	2301      	movs	r3, #1
   21756:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2175a:	ab04      	add	r3, sp, #16
   2175c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   21760:	4a09      	ldr	r2, [pc, #36]	; (21788 <api_blocking_start+0x38>)
   21762:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   21764:	f8cd d000 	str.w	sp, [sp]
   21768:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   2176c:	f005 fe3a 	bl	273e4 <api_start>
	if (err < 0) {
   21770:	2800      	cmp	r0, #0
   21772:	db05      	blt.n	21780 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   21774:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   21778:	2300      	movs	r3, #0
   2177a:	4668      	mov	r0, sp
   2177c:	f002 fc90 	bl	240a0 <z_impl_k_sem_take>
}
   21780:	b007      	add	sp, #28
   21782:	f85d fb04 	ldr.w	pc, [sp], #4
   21786:	bf00      	nop
   21788:	000273b7 	.word	0x000273b7

0002178c <z_nrf_clock_control_lf_on>:
{
   2178c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   21790:	2201      	movs	r2, #1
   21792:	4607      	mov	r7, r0
   21794:	4936      	ldr	r1, [pc, #216]	; (21870 <z_nrf_clock_control_lf_on+0xe4>)
   21796:	e8d1 3fef 	ldaex	r3, [r1]
   2179a:	e8c1 2fe0 	stlex	r0, r2, [r1]
   2179e:	2800      	cmp	r0, #0
   217a0:	d1f9      	bne.n	21796 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   217a2:	b933      	cbnz	r3, 217b2 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   217a4:	4933      	ldr	r1, [pc, #204]	; (21874 <z_nrf_clock_control_lf_on+0xe8>)
		err = onoff_request(mgr, &cli);
   217a6:	4834      	ldr	r0, [pc, #208]	; (21878 <z_nrf_clock_control_lf_on+0xec>)
   217a8:	604b      	str	r3, [r1, #4]
   217aa:	60cb      	str	r3, [r1, #12]
   217ac:	608a      	str	r2, [r1, #8]
   217ae:	f003 fe8d 	bl	254cc <onoff_request>
	switch (start_mode) {
   217b2:	1e7b      	subs	r3, r7, #1
   217b4:	2b01      	cmp	r3, #1
   217b6:	d82e      	bhi.n	21816 <z_nrf_clock_control_lf_on+0x8a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   217b8:	2f01      	cmp	r7, #1
   217ba:	d106      	bne.n	217ca <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   217bc:	4b2f      	ldr	r3, [pc, #188]	; (2187c <z_nrf_clock_control_lf_on+0xf0>)
   217be:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   217c2:	f003 0303 	and.w	r3, r3, #3
   217c6:	2b02      	cmp	r3, #2
   217c8:	d025      	beq.n	21816 <z_nrf_clock_control_lf_on+0x8a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   217ca:	f006 fa51 	bl	27c70 <k_is_in_isr>
   217ce:	4604      	mov	r4, r0
   217d0:	b918      	cbnz	r0, 217da <z_nrf_clock_control_lf_on+0x4e>
	return !z_sys_post_kernel;
   217d2:	4b2b      	ldr	r3, [pc, #172]	; (21880 <z_nrf_clock_control_lf_on+0xf4>)
	int key = isr_mode ? irq_lock() : 0;
   217d4:	781b      	ldrb	r3, [r3, #0]
   217d6:	2b00      	cmp	r3, #0
   217d8:	d144      	bne.n	21864 <z_nrf_clock_control_lf_on+0xd8>
	__asm__ volatile(
   217da:	f04f 0320 	mov.w	r3, #32
   217de:	f3ef 8611 	mrs	r6, BASEPRI
   217e2:	f383 8811 	msr	BASEPRI, r3
   217e6:	f3bf 8f6f 	isb	sy
   217ea:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   217ec:	4d23      	ldr	r5, [pc, #140]	; (2187c <z_nrf_clock_control_lf_on+0xf0>)
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   217ee:	f8df 809c 	ldr.w	r8, [pc, #156]	; 2188c <z_nrf_clock_control_lf_on+0x100>
   217f2:	46a9      	mov	r9, r5
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   217f4:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   217f8:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   217fc:	03d2      	lsls	r2, r2, #15
   217fe:	d50c      	bpl.n	2181a <z_nrf_clock_control_lf_on+0x8e>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   21800:	f003 0303 	and.w	r3, r3, #3
   21804:	2b02      	cmp	r3, #2
   21806:	d001      	beq.n	2180c <z_nrf_clock_control_lf_on+0x80>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   21808:	2f01      	cmp	r7, #1
   2180a:	d106      	bne.n	2181a <z_nrf_clock_control_lf_on+0x8e>
	if (isr_mode) {
   2180c:	b334      	cbz	r4, 2185c <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   2180e:	f386 8811 	msr	BASEPRI, r6
   21812:	f3bf 8f6f 	isb	sy
}
   21816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   2181a:	b1d4      	cbz	r4, 21852 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   2181c:	4630      	mov	r0, r6
   2181e:	f000 fa89 	bl	21d34 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   21822:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   21826:	b2db      	uxtb	r3, r3
   21828:	2b01      	cmp	r3, #1
   2182a:	d1e3      	bne.n	217f4 <z_nrf_clock_control_lf_on+0x68>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2182c:	f8d8 2000 	ldr.w	r2, [r8]
		    && nrf_clock_event_check(NRF_CLOCK,
   21830:	2a00      	cmp	r2, #0
   21832:	d0df      	beq.n	217f4 <z_nrf_clock_control_lf_on+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21834:	2200      	movs	r2, #0
   21836:	f8c8 2000 	str.w	r2, [r8]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   2183a:	f8d8 2000 	ldr.w	r2, [r8]
    p_reg->LFCLKSRC = (uint32_t)(source);
   2183e:	2202      	movs	r2, #2
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   21840:	2120      	movs	r1, #32
   21842:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
   21846:	4a0f      	ldr	r2, [pc, #60]	; (21884 <z_nrf_clock_control_lf_on+0xf8>)
   21848:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2184c:	4a0e      	ldr	r2, [pc, #56]	; (21888 <z_nrf_clock_control_lf_on+0xfc>)
   2184e:	6013      	str	r3, [r2, #0]
}
   21850:	e7d0      	b.n	217f4 <z_nrf_clock_control_lf_on+0x68>
	return z_impl_k_sleep(timeout);
   21852:	2100      	movs	r1, #0
   21854:	2021      	movs	r0, #33	; 0x21
   21856:	f002 ff35 	bl	246c4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   2185a:	e7e2      	b.n	21822 <z_nrf_clock_control_lf_on+0x96>
    p_reg->INTENSET = mask;
   2185c:	2302      	movs	r3, #2
   2185e:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   21862:	e7d8      	b.n	21816 <z_nrf_clock_control_lf_on+0x8a>
    p_reg->INTENCLR = mask;
   21864:	2202      	movs	r2, #2
   21866:	4b05      	ldr	r3, [pc, #20]	; (2187c <z_nrf_clock_control_lf_on+0xf0>)
	int key = isr_mode ? irq_lock() : 0;
   21868:	4606      	mov	r6, r0
   2186a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2186e:	e7bd      	b.n	217ec <z_nrf_clock_control_lf_on+0x60>
   21870:	20008cc8 	.word	0x20008cc8
   21874:	20008c14 	.word	0x20008c14
   21878:	20008c40 	.word	0x20008c40
   2187c:	40005000 	.word	0x40005000
   21880:	200096db 	.word	0x200096db
   21884:	e000e100 	.word	0xe000e100
   21888:	40005008 	.word	0x40005008
   2188c:	40005104 	.word	0x40005104

00021890 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
   21890:	4a04      	ldr	r2, [pc, #16]	; (218a4 <sys_clock_timeout_handler+0x14>)
   21892:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   21894:	1ac8      	subs	r0, r1, r3
   21896:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   2189a:	4403      	add	r3, r0
   2189c:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   2189e:	f003 b8c9 	b.w	24a34 <sys_clock_announce>
   218a2:	bf00      	nop
   218a4:	20008cdc 	.word	0x20008cdc

000218a8 <set_absolute_alarm>:
{
   218a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   218ac:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   218b0:	f04f 0900 	mov.w	r9, #0
   218b4:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   218b6:	f100 0450 	add.w	r4, r0, #80	; 0x50
   218ba:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
   218be:	00a4      	lsls	r4, r4, #2
   218c0:	f506 36a8 	add.w	r6, r6, #86016	; 0x15000
   218c4:	b2a4      	uxth	r4, r4
   218c6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    return p_reg->CC[ch];
   218ca:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   218ce:	f8df 806c 	ldr.w	r8, [pc, #108]	; 2193c <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
   218d2:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   218d6:	f504 34a8 	add.w	r4, r4, #86016	; 0x15000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   218da:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
   218dc:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   218e0:	eba3 030a 	sub.w	r3, r3, sl
   218e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   218e8:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   218ec:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
   218ee:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
   218f2:	d102      	bne.n	218fa <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
   218f4:	2013      	movs	r0, #19
   218f6:	f006 fb5a 	bl	27fae <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   218fa:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
   218fe:	1aab      	subs	r3, r5, r2
   21900:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
   21904:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   21908:	bf88      	it	hi
   2190a:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2190c:	f8c4 9000 	str.w	r9, [r4]
   21910:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   21912:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   21916:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
   2191a:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
   2191e:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   21922:	459a      	cmp	sl, r3
   21924:	d006      	beq.n	21934 <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
   21926:	1aeb      	subs	r3, r5, r3
   21928:	3b02      	subs	r3, #2
   2192a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   2192e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   21932:	d801      	bhi.n	21938 <set_absolute_alarm+0x90>
}
   21934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
   21938:	462b      	mov	r3, r5
   2193a:	e7cf      	b.n	218dc <set_absolute_alarm+0x34>
   2193c:	40015000 	.word	0x40015000

00021940 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   21940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   21942:	2400      	movs	r4, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   21944:	4627      	mov	r7, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21946:	4e0f      	ldr	r6, [pc, #60]	; (21984 <rtc_nrf_isr+0x44>)
   21948:	4b0f      	ldr	r3, [pc, #60]	; (21988 <rtc_nrf_isr+0x48>)
    return p_reg->INTENSET & mask;
   2194a:	4a10      	ldr	r2, [pc, #64]	; (2198c <rtc_nrf_isr+0x4c>)
   2194c:	4618      	mov	r0, r3
   2194e:	681d      	ldr	r5, [r3, #0]
   21950:	b104      	cbz	r4, 21954 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
   21952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21954:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
   21958:	03c9      	lsls	r1, r1, #15
   2195a:	d5fa      	bpl.n	21952 <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2195c:	6831      	ldr	r1, [r6, #0]
   2195e:	2900      	cmp	r1, #0
   21960:	d0f7      	beq.n	21952 <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   21962:	6034      	str	r4, [r6, #0]
   21964:	6831      	ldr	r1, [r6, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   21966:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   2196a:	f8c2 1348 	str.w	r1, [r2, #840]	; 0x348
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   2196e:	2401      	movs	r4, #1
    return p_reg->CC[ch];
   21970:	f8d2 1540 	ldr.w	r1, [r2, #1344]	; 0x540
			if (handler) {
   21974:	b125      	cbz	r5, 21980 <rtc_nrf_isr+0x40>
				handler(chan, cc_val,
   21976:	2000      	movs	r0, #0
   21978:	685a      	ldr	r2, [r3, #4]
   2197a:	601f      	str	r7, [r3, #0]
   2197c:	47a8      	blx	r5
   2197e:	e7e3      	b.n	21948 <rtc_nrf_isr+0x8>
   21980:	6005      	str	r5, [r0, #0]
}
   21982:	e7e6      	b.n	21952 <rtc_nrf_isr+0x12>
   21984:	40015140 	.word	0x40015140
   21988:	20008cd0 	.word	0x20008cd0
   2198c:	40015000 	.word	0x40015000

00021990 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
   21990:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
   21992:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
   21994:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   21998:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
   2199c:	4d0d      	ldr	r5, [pc, #52]	; (219d4 <sys_clock_driver_init+0x44>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   2199e:	2101      	movs	r1, #1
   219a0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
   219a4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   219a8:	4b0b      	ldr	r3, [pc, #44]	; (219d8 <sys_clock_driver_init+0x48>)
   219aa:	2015      	movs	r0, #21
   219ac:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   219b0:	4622      	mov	r2, r4
   219b2:	f000 f8bf 	bl	21b34 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   219b6:	2015      	movs	r0, #21
   219b8:	f000 f89e 	bl	21af8 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   219bc:	2301      	movs	r3, #1
   219be:	4a07      	ldr	r2, [pc, #28]	; (219dc <sys_clock_driver_init+0x4c>)
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
   219c0:	2002      	movs	r0, #2
   219c2:	6013      	str	r3, [r2, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
   219c4:	4a06      	ldr	r2, [pc, #24]	; (219e0 <sys_clock_driver_init+0x50>)
   219c6:	602b      	str	r3, [r5, #0]
   219c8:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
   219ca:	f7ff fedf 	bl	2178c <z_nrf_clock_control_lf_on>

	return 0;
}
   219ce:	4620      	mov	r0, r4
   219d0:	bd38      	pop	{r3, r4, r5, pc}
   219d2:	bf00      	nop
   219d4:	40015000 	.word	0x40015000
   219d8:	e000e100 	.word	0xe000e100
   219dc:	40015008 	.word	0x40015008
   219e0:	20008cd8 	.word	0x20008cd8

000219e4 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   219e4:	4b13      	ldr	r3, [pc, #76]	; (21a34 <sys_clock_set_timeout+0x50>)
   219e6:	f1b0 3fff 	cmp.w	r0, #4294967295
   219ea:	bf08      	it	eq
   219ec:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   219ee:	3801      	subs	r0, #1
   219f0:	2800      	cmp	r0, #0
   219f2:	dd1c      	ble.n	21a2e <sys_clock_set_timeout+0x4a>
   219f4:	4298      	cmp	r0, r3
   219f6:	bfa8      	it	ge
   219f8:	4618      	movge	r0, r3
     return p_reg->COUNTER;
   219fa:	4b0f      	ldr	r3, [pc, #60]	; (21a38 <sys_clock_set_timeout+0x54>)
   219fc:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
   21a00:	4b0e      	ldr	r3, [pc, #56]	; (21a3c <sys_clock_set_timeout+0x58>)
   21a02:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
   21a04:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
   21a06:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   21a0a:	bf18      	it	ne
   21a0c:	2000      	movne	r0, #0
	return (a - b) & COUNTER_MAX;
   21a0e:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   21a12:	3301      	adds	r3, #1
	cc_data[chan].callback = handler;
   21a14:	4a0a      	ldr	r2, [pc, #40]	; (21a40 <sys_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   21a16:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
   21a18:	480a      	ldr	r0, [pc, #40]	; (21a44 <sys_clock_set_timeout+0x60>)
   21a1a:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
   21a1c:	2000      	movs	r0, #0
   21a1e:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
   21a20:	4a04      	ldr	r2, [pc, #16]	; (21a34 <sys_clock_set_timeout+0x50>)
   21a22:	4293      	cmp	r3, r2
   21a24:	bf94      	ite	ls
   21a26:	18c9      	addls	r1, r1, r3
   21a28:	1889      	addhi	r1, r1, r2
   21a2a:	f7ff bf3d 	b.w	218a8 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   21a2e:	2000      	movs	r0, #0
   21a30:	e7e3      	b.n	219fa <sys_clock_set_timeout+0x16>
   21a32:	bf00      	nop
   21a34:	007fffff 	.word	0x007fffff
   21a38:	40015000 	.word	0x40015000
   21a3c:	20008cdc 	.word	0x20008cdc
   21a40:	20008cd0 	.word	0x20008cd0
   21a44:	00021891 	.word	0x00021891

00021a48 <sys_clock_elapsed>:
   21a48:	4b04      	ldr	r3, [pc, #16]	; (21a5c <sys_clock_elapsed+0x14>)
   21a4a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
   21a4e:	4b04      	ldr	r3, [pc, #16]	; (21a60 <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
   21a50:	681b      	ldr	r3, [r3, #0]
   21a52:	1ac0      	subs	r0, r0, r3
}
   21a54:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   21a58:	4770      	bx	lr
   21a5a:	bf00      	nop
   21a5c:	40015000 	.word	0x40015000
   21a60:	20008cdc 	.word	0x20008cdc

00021a64 <sys_clock_cycle_get_32>:
	__asm__ volatile(
   21a64:	f04f 0320 	mov.w	r3, #32
   21a68:	f3ef 8211 	mrs	r2, BASEPRI
   21a6c:	f383 8811 	msr	BASEPRI, r3
   21a70:	f3bf 8f6f 	isb	sy

uint32_t sys_clock_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   21a74:	4906      	ldr	r1, [pc, #24]	; (21a90 <sys_clock_cycle_get_32+0x2c>)
   21a76:	4b07      	ldr	r3, [pc, #28]	; (21a94 <sys_clock_cycle_get_32+0x30>)
   21a78:	6808      	ldr	r0, [r1, #0]
   21a7a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
   21a7e:	f382 8811 	msr	BASEPRI, r2
   21a82:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
   21a86:	1a1b      	subs	r3, r3, r0
   21a88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
   21a8c:	4418      	add	r0, r3
   21a8e:	4770      	bx	lr
   21a90:	20008cdc 	.word	0x20008cdc
   21a94:	40015000 	.word	0x40015000

00021a98 <before_nse>:
#include <arch/arm/aarch32/cortex_m/fpu.h>

static struct fpu_ctx_full context_buffer;

void before_nse(void)
{
   21a98:	b508      	push	{r3, lr}
	k_sched_lock();
   21a9a:	f002 fb85 	bl	241a8 <k_sched_lock>
	z_arm_save_fp_context(&context_buffer);
}
   21a9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_save_fp_context(&context_buffer);
   21aa2:	4801      	ldr	r0, [pc, #4]	; (21aa8 <before_nse+0x10>)
   21aa4:	f005 bcdb 	b.w	2745e <z_arm_save_fp_context>
   21aa8:	20008ce0 	.word	0x20008ce0

00021aac <after_nse>:

void after_nse(void)
{
   21aac:	b508      	push	{r3, lr}
	k_sched_unlock();
   21aae:	f002 fc6d 	bl	2438c <k_sched_unlock>
	z_arm_restore_fp_context(&context_buffer);
}
   21ab2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_restore_fp_context(&context_buffer);
   21ab6:	4801      	ldr	r0, [pc, #4]	; (21abc <after_nse+0x10>)
   21ab8:	f005 bcd2 	b.w	27460 <z_arm_restore_fp_context>
   21abc:	20008ce0 	.word	0x20008ce0

00021ac0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   21ac0:	4a0a      	ldr	r2, [pc, #40]	; (21aec <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
   21ac2:	490b      	ldr	r1, [pc, #44]	; (21af0 <arch_swap+0x30>)
	_current->arch.basepri = key;
   21ac4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   21ac6:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   21ac8:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
   21acc:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   21ad0:	4908      	ldr	r1, [pc, #32]	; (21af4 <arch_swap+0x34>)
   21ad2:	684b      	ldr	r3, [r1, #4]
   21ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   21ad8:	604b      	str	r3, [r1, #4]
   21ada:	2300      	movs	r3, #0
   21adc:	f383 8811 	msr	BASEPRI, r3
   21ae0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   21ae4:	6893      	ldr	r3, [r2, #8]
}
   21ae6:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
   21aea:	4770      	bx	lr
   21aec:	20008e30 	.word	0x20008e30
   21af0:	0002afe8 	.word	0x0002afe8
   21af4:	e000ed00 	.word	0xe000ed00

00021af8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   21af8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   21afa:	2b00      	cmp	r3, #0
   21afc:	db08      	blt.n	21b10 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   21afe:	2201      	movs	r2, #1
   21b00:	f000 001f 	and.w	r0, r0, #31
   21b04:	fa02 f000 	lsl.w	r0, r2, r0
   21b08:	4a02      	ldr	r2, [pc, #8]	; (21b14 <arch_irq_enable+0x1c>)
   21b0a:	095b      	lsrs	r3, r3, #5
   21b0c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   21b10:	4770      	bx	lr
   21b12:	bf00      	nop
   21b14:	e000e100 	.word	0xe000e100

00021b18 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   21b18:	4b05      	ldr	r3, [pc, #20]	; (21b30 <arch_irq_is_enabled+0x18>)
   21b1a:	0942      	lsrs	r2, r0, #5
   21b1c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   21b20:	2301      	movs	r3, #1
   21b22:	f000 001f 	and.w	r0, r0, #31
   21b26:	fa03 f000 	lsl.w	r0, r3, r0
}
   21b2a:	4010      	ands	r0, r2
   21b2c:	4770      	bx	lr
   21b2e:	bf00      	nop
   21b30:	e000e100 	.word	0xe000e100

00021b34 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   21b34:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   21b36:	2b00      	cmp	r3, #0
		prio += _IRQ_PRIO_OFFSET;
   21b38:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   21b3c:	bfac      	ite	ge
   21b3e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   21b42:	4b06      	ldrlt	r3, [pc, #24]	; (21b5c <z_arm_irq_priority_set+0x28>)
   21b44:	ea4f 1141 	mov.w	r1, r1, lsl #5
   21b48:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   21b4a:	bfab      	itete	ge
   21b4c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   21b50:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   21b54:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   21b58:	5419      	strblt	r1, [r3, r0]
}
   21b5a:	4770      	bx	lr
   21b5c:	e000ed14 	.word	0xe000ed14

00021b60 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   21b60:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   21b64:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   21b66:	490b      	ldr	r1, [pc, #44]	; (21b94 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
   21b68:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   21b6c:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   21b6e:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   21b72:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   21b76:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   21b78:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   21b7c:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   21b80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   21b84:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   21b88:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   21b8a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   21b8c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   21b8e:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   21b92:	4770      	bx	lr
   21b94:	0002555f 	.word	0x0002555f

00021b98 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   21b98:	4b09      	ldr	r3, [pc, #36]	; (21bc0 <arch_switch_to_main_thread+0x28>)
   21b9a:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   21b9c:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   21ba0:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   21ba4:	4610      	mov	r0, r2
   21ba6:	f381 8809 	msr	PSP, r1
   21baa:	2100      	movs	r1, #0
   21bac:	b663      	cpsie	if
   21bae:	f381 8811 	msr	BASEPRI, r1
   21bb2:	f3bf 8f6f 	isb	sy
   21bb6:	2200      	movs	r2, #0
   21bb8:	2300      	movs	r3, #0
   21bba:	f003 fcd0 	bl	2555e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   21bbe:	bf00      	nop
   21bc0:	20008e30 	.word	0x20008e30

00021bc4 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   21bc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21bc6:	4607      	mov	r7, r0

	if (esf != NULL) {
   21bc8:	460c      	mov	r4, r1
   21bca:	b361      	cbz	r1, 21c26 <z_arm_fatal_error+0x62>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   21bcc:	4e19      	ldr	r6, [pc, #100]	; (21c34 <z_arm_fatal_error+0x70>)
   21bce:	6833      	ldr	r3, [r6, #0]
   21bd0:	0758      	lsls	r0, r3, #29
   21bd2:	d028      	beq.n	21c26 <z_arm_fatal_error+0x62>
   21bd4:	4d18      	ldr	r5, [pc, #96]	; (21c38 <z_arm_fatal_error+0x74>)
   21bd6:	4819      	ldr	r0, [pc, #100]	; (21c3c <z_arm_fatal_error+0x78>)
   21bd8:	1b75      	subs	r5, r6, r5
   21bda:	08ad      	lsrs	r5, r5, #2
   21bdc:	01ad      	lsls	r5, r5, #6
   21bde:	f045 0501 	orr.w	r5, r5, #1
   21be2:	f8ad 5000 	strh.w	r5, [sp]
   21be6:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   21bea:	6809      	ldr	r1, [r1, #0]
   21bec:	f004 f8b7 	bl	25d5e <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   21bf0:	6833      	ldr	r3, [r6, #0]
   21bf2:	0759      	lsls	r1, r3, #29
   21bf4:	d017      	beq.n	21c26 <z_arm_fatal_error+0x62>
   21bf6:	f8ad 5000 	strh.w	r5, [sp]
   21bfa:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   21bfe:	68e1      	ldr	r1, [r4, #12]
   21c00:	480f      	ldr	r0, [pc, #60]	; (21c40 <z_arm_fatal_error+0x7c>)
   21c02:	f004 f8ac 	bl	25d5e <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   21c06:	6833      	ldr	r3, [r6, #0]
   21c08:	075a      	lsls	r2, r3, #29
   21c0a:	d00c      	beq.n	21c26 <z_arm_fatal_error+0x62>
   21c0c:	462a      	mov	r2, r5
   21c0e:	69e1      	ldr	r1, [r4, #28]
   21c10:	480c      	ldr	r0, [pc, #48]	; (21c44 <z_arm_fatal_error+0x80>)
   21c12:	f004 f877 	bl	25d04 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   21c16:	6833      	ldr	r3, [r6, #0]
   21c18:	075b      	lsls	r3, r3, #29
   21c1a:	d004      	beq.n	21c26 <z_arm_fatal_error+0x62>
   21c1c:	462a      	mov	r2, r5
   21c1e:	69a1      	ldr	r1, [r4, #24]
   21c20:	4809      	ldr	r0, [pc, #36]	; (21c48 <z_arm_fatal_error+0x84>)
   21c22:	f004 f86f 	bl	25d04 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   21c26:	4621      	mov	r1, r4
   21c28:	4638      	mov	r0, r7
}
   21c2a:	b003      	add	sp, #12
   21c2c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	z_fatal_error(reason, esf);
   21c30:	f001 bd8e 	b.w	23750 <z_fatal_error>
   21c34:	2000816c 	.word	0x2000816c
   21c38:	20008154 	.word	0x20008154
   21c3c:	0002c6b6 	.word	0x0002c6b6
   21c40:	0002c6e5 	.word	0x0002c6e5
   21c44:	0002c714 	.word	0x0002c714
   21c48:	0002c723 	.word	0x0002c723

00021c4c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   21c4c:	4a0e      	ldr	r2, [pc, #56]	; (21c88 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   21c4e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   21c50:	4b0e      	ldr	r3, [pc, #56]	; (21c8c <z_arm_prep_c+0x40>)
   21c52:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   21c56:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   21c58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   21c5c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   21c60:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   21c64:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   21c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   21c6c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   21c70:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   21c74:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   21c78:	f001 fde2 	bl	23840 <z_bss_zero>
	z_data_copy();
   21c7c:	f002 fdc2 	bl	24804 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   21c80:	f000 fbaa 	bl	223d8 <z_arm_interrupt_init>
	z_cstart();
   21c84:	f001 fe00 	bl	23888 <z_cstart>
   21c88:	00010000 	.word	0x00010000
   21c8c:	e000ed00 	.word	0xe000ed00

00021c90 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   21c90:	4914      	ldr	r1, [pc, #80]	; (21ce4 <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
   21c92:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   21c94:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   21c98:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   21c9a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   21c9e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   21ca2:	2020      	movs	r0, #32
    msr BASEPRI, r0
   21ca4:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   21ca8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   21cac:	4f0e      	ldr	r7, [pc, #56]	; (21ce8 <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   21cae:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   21cb2:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   21cb4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   21cb6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   21cb8:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
   21cbc:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   21cbe:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   21cc2:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   21cc6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   21cca:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   21cce:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   21cd2:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   21cd6:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   21cd8:	f005 fbb1 	bl	2743e <configure_builtin_stack_guard>
    pop {r2, lr}
   21cdc:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   21ce0:	4770      	bx	lr
   21ce2:	0000      	.short	0x0000
    ldr r1, =_kernel
   21ce4:	20008e30 	.word	0x20008e30
    ldr v4, =_SCS_ICSR
   21ce8:	e000ed04 	.word	0xe000ed04

00021cec <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   21cec:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   21cf0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   21cf2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   21cf6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   21cfa:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   21cfc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   21d00:	2902      	cmp	r1, #2
    beq _oops
   21d02:	d0ff      	beq.n	21d04 <_oops>

00021d04 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   21d04:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   21d06:	f005 fb9f 	bl	27448 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   21d0a:	bd01      	pop	{r0, pc}

00021d0c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   21d0c:	4901      	ldr	r1, [pc, #4]	; (21d14 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   21d0e:	2210      	movs	r2, #16
	str	r2, [r1]
   21d10:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   21d12:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   21d14:	e000ed10 	.word	0xe000ed10

00021d18 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   21d18:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   21d1a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   21d1c:	f380 8811 	msr	BASEPRI, r0
	isb
   21d20:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   21d24:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   21d28:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   21d2a:	b662      	cpsie	i
	isb
   21d2c:	f3bf 8f6f 	isb	sy

	bx	lr
   21d30:	4770      	bx	lr
   21d32:	bf00      	nop

00021d34 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   21d34:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   21d36:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   21d38:	f381 8811 	msr	BASEPRI, r1

	wfe
   21d3c:	bf20      	wfe

	msr	BASEPRI, r0
   21d3e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   21d42:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   21d44:	4770      	bx	lr
   21d46:	bf00      	nop

00021d48 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   21d48:	bf30      	wfi
    b z_SysNmiOnReset
   21d4a:	f7ff bffd 	b.w	21d48 <z_SysNmiOnReset>
   21d4e:	bf00      	nop

00021d50 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   21d50:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   21d52:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   21d54:	4a0b      	ldr	r2, [pc, #44]	; (21d84 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   21d56:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   21d58:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   21d5a:	bf1e      	ittt	ne
	movne	r1, #0
   21d5c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   21d5e:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
   21d60:	f005 ff9e 	blne	27ca0 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   21d64:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   21d66:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   21d6a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   21d6e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   21d72:	4905      	ldr	r1, [pc, #20]	; (21d88 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   21d74:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   21d76:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   21d78:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   21d7a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   21d7e:	4903      	ldr	r1, [pc, #12]	; (21d8c <_isr_wrapper+0x3c>)
	bx r1
   21d80:	4708      	bx	r1
   21d82:	0000      	.short	0x0000
	ldr r2, =_kernel
   21d84:	20008e30 	.word	0x20008e30
	ldr r1, =_sw_isr_table
   21d88:	0002839c 	.word	0x0002839c
	ldr r1, =z_arm_int_exit
   21d8c:	00021de1 	.word	0x00021de1

00021d90 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   21d90:	f003 ff43 	bl	25c1a <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   21d94:	2020      	movs	r0, #32
    msr BASEPRI, r0
   21d96:	f380 8811 	msr	BASEPRI, r0
 * (may be larger due to rounding up for stack pointer aligning
 * purposes but this is sufficient during initialization).
 */

#ifdef CONFIG_INIT_STACKS
    ldr r0, =z_interrupt_stacks
   21d9a:	480b      	ldr	r0, [pc, #44]	; (21dc8 <__start+0x38>)
    ldr r1, =0xaa
   21d9c:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   21da0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bl memset
   21da4:	f005 fcbd 	bl	27722 <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   21da8:	4807      	ldr	r0, [pc, #28]	; (21dc8 <__start+0x38>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   21daa:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   21dae:	1840      	adds	r0, r0, r1
    msr PSP, r0
   21db0:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   21db4:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   21db8:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   21dba:	4308      	orrs	r0, r1
    msr CONTROL, r0
   21dbc:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   21dc0:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   21dc4:	f7ff ff42 	bl	21c4c <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
   21dc8:	20015f20 	.word	0x20015f20

00021dcc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   21dcc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   21dd0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   21dd4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   21dd6:	4672      	mov	r2, lr
	bl z_arm_fault
   21dd8:	f000 f9ec 	bl	221b4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   21ddc:	bd01      	pop	{r0, pc}
   21dde:	bf00      	nop

00021de0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   21de0:	4b04      	ldr	r3, [pc, #16]	; (21df4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   21de2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   21de4:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   21de6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   21de8:	d003      	beq.n	21df2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   21dea:	4903      	ldr	r1, [pc, #12]	; (21df8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   21dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   21df0:	600a      	str	r2, [r1, #0]

00021df2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   21df2:	4770      	bx	lr
	ldr r3, =_kernel
   21df4:	20008e30 	.word	0x20008e30
	ldr r1, =_SCS_ICSR
   21df8:	e000ed04 	.word	0xe000ed04

00021dfc <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   21dfc:	b538      	push	{r3, r4, r5, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   21dfe:	4c44      	ldr	r4, [pc, #272]	; (21f10 <usage_fault.isra.0+0x114>)
   21e00:	6823      	ldr	r3, [r4, #0]
   21e02:	075d      	lsls	r5, r3, #29
   21e04:	d008      	beq.n	21e18 <usage_fault.isra.0+0x1c>
   21e06:	4943      	ldr	r1, [pc, #268]	; (21f14 <usage_fault.isra.0+0x118>)
   21e08:	4843      	ldr	r0, [pc, #268]	; (21f18 <usage_fault.isra.0+0x11c>)
   21e0a:	1a61      	subs	r1, r4, r1
   21e0c:	0889      	lsrs	r1, r1, #2
   21e0e:	0189      	lsls	r1, r1, #6
   21e10:	f041 0101 	orr.w	r1, r1, #1
   21e14:	f003 ff69 	bl	25cea <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   21e18:	4b40      	ldr	r3, [pc, #256]	; (21f1c <usage_fault.isra.0+0x120>)
   21e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21e1c:	0198      	lsls	r0, r3, #6
   21e1e:	d50b      	bpl.n	21e38 <usage_fault.isra.0+0x3c>
		PR_FAULT_INFO("  Division by zero");
   21e20:	6823      	ldr	r3, [r4, #0]
   21e22:	0759      	lsls	r1, r3, #29
   21e24:	d008      	beq.n	21e38 <usage_fault.isra.0+0x3c>
   21e26:	493b      	ldr	r1, [pc, #236]	; (21f14 <usage_fault.isra.0+0x118>)
   21e28:	483d      	ldr	r0, [pc, #244]	; (21f20 <usage_fault.isra.0+0x124>)
   21e2a:	1a61      	subs	r1, r4, r1
   21e2c:	0889      	lsrs	r1, r1, #2
   21e2e:	0189      	lsls	r1, r1, #6
   21e30:	f041 0101 	orr.w	r1, r1, #1
   21e34:	f003 ff59 	bl	25cea <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   21e38:	4b38      	ldr	r3, [pc, #224]	; (21f1c <usage_fault.isra.0+0x120>)
   21e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21e3c:	01da      	lsls	r2, r3, #7
   21e3e:	d50b      	bpl.n	21e58 <usage_fault.isra.0+0x5c>
		PR_FAULT_INFO("  Unaligned memory access");
   21e40:	6823      	ldr	r3, [r4, #0]
   21e42:	075b      	lsls	r3, r3, #29
   21e44:	d008      	beq.n	21e58 <usage_fault.isra.0+0x5c>
   21e46:	4933      	ldr	r1, [pc, #204]	; (21f14 <usage_fault.isra.0+0x118>)
   21e48:	4836      	ldr	r0, [pc, #216]	; (21f24 <usage_fault.isra.0+0x128>)
   21e4a:	1a61      	subs	r1, r4, r1
   21e4c:	0889      	lsrs	r1, r1, #2
   21e4e:	0189      	lsls	r1, r1, #6
   21e50:	f041 0101 	orr.w	r1, r1, #1
   21e54:	f003 ff49 	bl	25cea <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   21e58:	4b30      	ldr	r3, [pc, #192]	; (21f1c <usage_fault.isra.0+0x120>)
   21e5a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   21e5c:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
   21e60:	d00c      	beq.n	21e7c <usage_fault.isra.0+0x80>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   21e62:	6823      	ldr	r3, [r4, #0]
   21e64:	075d      	lsls	r5, r3, #29
   21e66:	d008      	beq.n	21e7a <usage_fault.isra.0+0x7e>
   21e68:	492a      	ldr	r1, [pc, #168]	; (21f14 <usage_fault.isra.0+0x118>)
   21e6a:	482f      	ldr	r0, [pc, #188]	; (21f28 <usage_fault.isra.0+0x12c>)
   21e6c:	1a61      	subs	r1, r4, r1
   21e6e:	0889      	lsrs	r1, r1, #2
   21e70:	0189      	lsls	r1, r1, #6
   21e72:	f041 0101 	orr.w	r1, r1, #1
   21e76:	f003 ff38 	bl	25cea <log_0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   21e7a:	2502      	movs	r5, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   21e7c:	4b27      	ldr	r3, [pc, #156]	; (21f1c <usage_fault.isra.0+0x120>)
   21e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21e80:	0318      	lsls	r0, r3, #12
   21e82:	d50b      	bpl.n	21e9c <usage_fault.isra.0+0xa0>
		PR_FAULT_INFO("  No coprocessor instructions");
   21e84:	6823      	ldr	r3, [r4, #0]
   21e86:	0759      	lsls	r1, r3, #29
   21e88:	d008      	beq.n	21e9c <usage_fault.isra.0+0xa0>
   21e8a:	4922      	ldr	r1, [pc, #136]	; (21f14 <usage_fault.isra.0+0x118>)
   21e8c:	4827      	ldr	r0, [pc, #156]	; (21f2c <usage_fault.isra.0+0x130>)
   21e8e:	1a61      	subs	r1, r4, r1
   21e90:	0889      	lsrs	r1, r1, #2
   21e92:	0189      	lsls	r1, r1, #6
   21e94:	f041 0101 	orr.w	r1, r1, #1
   21e98:	f003 ff27 	bl	25cea <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   21e9c:	4b1f      	ldr	r3, [pc, #124]	; (21f1c <usage_fault.isra.0+0x120>)
   21e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21ea0:	035a      	lsls	r2, r3, #13
   21ea2:	d50b      	bpl.n	21ebc <usage_fault.isra.0+0xc0>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   21ea4:	6823      	ldr	r3, [r4, #0]
   21ea6:	075b      	lsls	r3, r3, #29
   21ea8:	d008      	beq.n	21ebc <usage_fault.isra.0+0xc0>
   21eaa:	491a      	ldr	r1, [pc, #104]	; (21f14 <usage_fault.isra.0+0x118>)
   21eac:	4820      	ldr	r0, [pc, #128]	; (21f30 <usage_fault.isra.0+0x134>)
   21eae:	1a61      	subs	r1, r4, r1
   21eb0:	0889      	lsrs	r1, r1, #2
   21eb2:	0189      	lsls	r1, r1, #6
   21eb4:	f041 0101 	orr.w	r1, r1, #1
   21eb8:	f003 ff17 	bl	25cea <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   21ebc:	4b17      	ldr	r3, [pc, #92]	; (21f1c <usage_fault.isra.0+0x120>)
   21ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21ec0:	0398      	lsls	r0, r3, #14
   21ec2:	d50b      	bpl.n	21edc <usage_fault.isra.0+0xe0>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   21ec4:	6823      	ldr	r3, [r4, #0]
   21ec6:	0759      	lsls	r1, r3, #29
   21ec8:	d008      	beq.n	21edc <usage_fault.isra.0+0xe0>
   21eca:	4912      	ldr	r1, [pc, #72]	; (21f14 <usage_fault.isra.0+0x118>)
   21ecc:	4819      	ldr	r0, [pc, #100]	; (21f34 <usage_fault.isra.0+0x138>)
   21ece:	1a61      	subs	r1, r4, r1
   21ed0:	0889      	lsrs	r1, r1, #2
   21ed2:	0189      	lsls	r1, r1, #6
   21ed4:	f041 0101 	orr.w	r1, r1, #1
   21ed8:	f003 ff07 	bl	25cea <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   21edc:	4b0f      	ldr	r3, [pc, #60]	; (21f1c <usage_fault.isra.0+0x120>)
   21ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21ee0:	03da      	lsls	r2, r3, #15
   21ee2:	d50b      	bpl.n	21efc <usage_fault.isra.0+0x100>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   21ee4:	6823      	ldr	r3, [r4, #0]
   21ee6:	075b      	lsls	r3, r3, #29
   21ee8:	d008      	beq.n	21efc <usage_fault.isra.0+0x100>
   21eea:	490a      	ldr	r1, [pc, #40]	; (21f14 <usage_fault.isra.0+0x118>)
   21eec:	4812      	ldr	r0, [pc, #72]	; (21f38 <usage_fault.isra.0+0x13c>)
   21eee:	1a61      	subs	r1, r4, r1
   21ef0:	0889      	lsrs	r1, r1, #2
   21ef2:	0189      	lsls	r1, r1, #6
   21ef4:	f041 0101 	orr.w	r1, r1, #1
   21ef8:	f003 fef7 	bl	25cea <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   21efc:	4a07      	ldr	r2, [pc, #28]	; (21f1c <usage_fault.isra.0+0x120>)

	return reason;
}
   21efe:	4628      	mov	r0, r5
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   21f00:	6a93      	ldr	r3, [r2, #40]	; 0x28
   21f02:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   21f06:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   21f0a:	6293      	str	r3, [r2, #40]	; 0x28
}
   21f0c:	bd38      	pop	{r3, r4, r5, pc}
   21f0e:	bf00      	nop
   21f10:	2000816c 	.word	0x2000816c
   21f14:	20008154 	.word	0x20008154
   21f18:	0002c751 	.word	0x0002c751
   21f1c:	e000ed00 	.word	0xe000ed00
   21f20:	0002c769 	.word	0x0002c769
   21f24:	0002c77c 	.word	0x0002c77c
   21f28:	0002c796 	.word	0x0002c796
   21f2c:	0002c7c0 	.word	0x0002c7c0
   21f30:	0002c7de 	.word	0x0002c7de
   21f34:	0002c803 	.word	0x0002c803
   21f38:	0002c81d 	.word	0x0002c81d

00021f3c <mem_manage_fault.isra.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   21f3c:	b570      	push	{r4, r5, r6, lr}
	PR_FAULT_INFO("***** MPU FAULT *****");
   21f3e:	4c41      	ldr	r4, [pc, #260]	; (22044 <mem_manage_fault.isra.0+0x108>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   21f40:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   21f42:	6823      	ldr	r3, [r4, #0]
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   21f44:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
   21f46:	0759      	lsls	r1, r3, #29
   21f48:	d008      	beq.n	21f5c <mem_manage_fault.isra.0+0x20>
   21f4a:	493f      	ldr	r1, [pc, #252]	; (22048 <mem_manage_fault.isra.0+0x10c>)
   21f4c:	483f      	ldr	r0, [pc, #252]	; (2204c <mem_manage_fault.isra.0+0x110>)
   21f4e:	1a61      	subs	r1, r4, r1
   21f50:	0889      	lsrs	r1, r1, #2
   21f52:	0189      	lsls	r1, r1, #6
   21f54:	f041 0101 	orr.w	r1, r1, #1
   21f58:	f003 fec7 	bl	25cea <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   21f5c:	4b3c      	ldr	r3, [pc, #240]	; (22050 <mem_manage_fault.isra.0+0x114>)
   21f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21f60:	06da      	lsls	r2, r3, #27
   21f62:	d50b      	bpl.n	21f7c <mem_manage_fault.isra.0+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
   21f64:	6823      	ldr	r3, [r4, #0]
   21f66:	075b      	lsls	r3, r3, #29
   21f68:	d008      	beq.n	21f7c <mem_manage_fault.isra.0+0x40>
   21f6a:	4937      	ldr	r1, [pc, #220]	; (22048 <mem_manage_fault.isra.0+0x10c>)
   21f6c:	4839      	ldr	r0, [pc, #228]	; (22054 <mem_manage_fault.isra.0+0x118>)
   21f6e:	1a61      	subs	r1, r4, r1
   21f70:	0889      	lsrs	r1, r1, #2
   21f72:	0189      	lsls	r1, r1, #6
   21f74:	f041 0101 	orr.w	r1, r1, #1
   21f78:	f003 feb7 	bl	25cea <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   21f7c:	4b34      	ldr	r3, [pc, #208]	; (22050 <mem_manage_fault.isra.0+0x114>)
   21f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21f80:	0718      	lsls	r0, r3, #28
   21f82:	d50b      	bpl.n	21f9c <mem_manage_fault.isra.0+0x60>
		PR_FAULT_INFO("  Unstacking error");
   21f84:	6823      	ldr	r3, [r4, #0]
   21f86:	0759      	lsls	r1, r3, #29
   21f88:	d008      	beq.n	21f9c <mem_manage_fault.isra.0+0x60>
   21f8a:	492f      	ldr	r1, [pc, #188]	; (22048 <mem_manage_fault.isra.0+0x10c>)
   21f8c:	4832      	ldr	r0, [pc, #200]	; (22058 <mem_manage_fault.isra.0+0x11c>)
   21f8e:	1a61      	subs	r1, r4, r1
   21f90:	0889      	lsrs	r1, r1, #2
   21f92:	0189      	lsls	r1, r1, #6
   21f94:	f041 0101 	orr.w	r1, r1, #1
   21f98:	f003 fea7 	bl	25cea <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   21f9c:	4b2c      	ldr	r3, [pc, #176]	; (22050 <mem_manage_fault.isra.0+0x114>)
   21f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21fa0:	079a      	lsls	r2, r3, #30
   21fa2:	d522      	bpl.n	21fea <mem_manage_fault.isra.0+0xae>
		PR_FAULT_INFO("  Data Access Violation");
   21fa4:	6823      	ldr	r3, [r4, #0]
   21fa6:	075b      	lsls	r3, r3, #29
   21fa8:	d008      	beq.n	21fbc <mem_manage_fault.isra.0+0x80>
   21faa:	4927      	ldr	r1, [pc, #156]	; (22048 <mem_manage_fault.isra.0+0x10c>)
   21fac:	482b      	ldr	r0, [pc, #172]	; (2205c <mem_manage_fault.isra.0+0x120>)
   21fae:	1a61      	subs	r1, r4, r1
   21fb0:	0889      	lsrs	r1, r1, #2
   21fb2:	0189      	lsls	r1, r1, #6
   21fb4:	f041 0101 	orr.w	r1, r1, #1
   21fb8:	f003 fe97 	bl	25cea <log_0>
		uint32_t temp = SCB->MMFAR;
   21fbc:	4b24      	ldr	r3, [pc, #144]	; (22050 <mem_manage_fault.isra.0+0x114>)
   21fbe:	6b59      	ldr	r1, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   21fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21fc2:	0618      	lsls	r0, r3, #24
   21fc4:	d511      	bpl.n	21fea <mem_manage_fault.isra.0+0xae>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   21fc6:	6823      	ldr	r3, [r4, #0]
   21fc8:	075a      	lsls	r2, r3, #29
   21fca:	d008      	beq.n	21fde <mem_manage_fault.isra.0+0xa2>
   21fcc:	4a1e      	ldr	r2, [pc, #120]	; (22048 <mem_manage_fault.isra.0+0x10c>)
   21fce:	4824      	ldr	r0, [pc, #144]	; (22060 <mem_manage_fault.isra.0+0x124>)
   21fd0:	1aa2      	subs	r2, r4, r2
   21fd2:	0892      	lsrs	r2, r2, #2
   21fd4:	0192      	lsls	r2, r2, #6
   21fd6:	f042 0201 	orr.w	r2, r2, #1
   21fda:	f003 fe93 	bl	25d04 <log_1>
			if (from_hard_fault != 0) {
   21fde:	b126      	cbz	r6, 21fea <mem_manage_fault.isra.0+0xae>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   21fe0:	4a1b      	ldr	r2, [pc, #108]	; (22050 <mem_manage_fault.isra.0+0x114>)
   21fe2:	6a93      	ldr	r3, [r2, #40]	; 0x28
   21fe4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   21fe8:	6293      	str	r3, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   21fea:	4b19      	ldr	r3, [pc, #100]	; (22050 <mem_manage_fault.isra.0+0x114>)
   21fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21fee:	07db      	lsls	r3, r3, #31
   21ff0:	d50b      	bpl.n	2200a <mem_manage_fault.isra.0+0xce>
		PR_FAULT_INFO("  Instruction Access Violation");
   21ff2:	6823      	ldr	r3, [r4, #0]
   21ff4:	075e      	lsls	r6, r3, #29
   21ff6:	d008      	beq.n	2200a <mem_manage_fault.isra.0+0xce>
   21ff8:	4b13      	ldr	r3, [pc, #76]	; (22048 <mem_manage_fault.isra.0+0x10c>)
   21ffa:	481a      	ldr	r0, [pc, #104]	; (22064 <mem_manage_fault.isra.0+0x128>)
   21ffc:	1ae3      	subs	r3, r4, r3
   21ffe:	089b      	lsrs	r3, r3, #2
   22000:	019b      	lsls	r3, r3, #6
   22002:	f043 0101 	orr.w	r1, r3, #1
   22006:	f003 fe70 	bl	25cea <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   2200a:	4b11      	ldr	r3, [pc, #68]	; (22050 <mem_manage_fault.isra.0+0x114>)
   2200c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2200e:	0698      	lsls	r0, r3, #26
   22010:	d50b      	bpl.n	2202a <mem_manage_fault.isra.0+0xee>
		PR_FAULT_INFO(
   22012:	6823      	ldr	r3, [r4, #0]
   22014:	0759      	lsls	r1, r3, #29
   22016:	d008      	beq.n	2202a <mem_manage_fault.isra.0+0xee>
   22018:	490b      	ldr	r1, [pc, #44]	; (22048 <mem_manage_fault.isra.0+0x10c>)
   2201a:	4813      	ldr	r0, [pc, #76]	; (22068 <mem_manage_fault.isra.0+0x12c>)
   2201c:	1a64      	subs	r4, r4, r1
   2201e:	08a4      	lsrs	r4, r4, #2
   22020:	01a4      	lsls	r4, r4, #6
   22022:	f044 0101 	orr.w	r1, r4, #1
   22026:	f003 fe60 	bl	25cea <log_0>
	*recoverable = memory_fault_recoverable(esf, true);
   2202a:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   2202c:	4b08      	ldr	r3, [pc, #32]	; (22050 <mem_manage_fault.isra.0+0x114>)
   2202e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   22030:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   22032:	bf58      	it	pl
   22034:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   22036:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   22038:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   2203c:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   2203e:	7028      	strb	r0, [r5, #0]
}
   22040:	bd70      	pop	{r4, r5, r6, pc}
   22042:	bf00      	nop
   22044:	2000816c 	.word	0x2000816c
   22048:	20008154 	.word	0x20008154
   2204c:	0002c848 	.word	0x0002c848
   22050:	e000ed00 	.word	0xe000ed00
   22054:	0002c85e 	.word	0x0002c85e
   22058:	0002c891 	.word	0x0002c891
   2205c:	0002c8a4 	.word	0x0002c8a4
   22060:	0002c8bc 	.word	0x0002c8bc
   22064:	0002c8d2 	.word	0x0002c8d2
   22068:	0002c8f1 	.word	0x0002c8f1

0002206c <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   2206c:	b570      	push	{r4, r5, r6, lr}
	PR_FAULT_INFO("***** BUS FAULT *****");
   2206e:	4c46      	ldr	r4, [pc, #280]	; (22188 <bus_fault.isra.0+0x11c>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   22070:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   22072:	6823      	ldr	r3, [r4, #0]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   22074:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
   22076:	0759      	lsls	r1, r3, #29
   22078:	d008      	beq.n	2208c <bus_fault.isra.0+0x20>
   2207a:	4944      	ldr	r1, [pc, #272]	; (2218c <bus_fault.isra.0+0x120>)
   2207c:	4844      	ldr	r0, [pc, #272]	; (22190 <bus_fault.isra.0+0x124>)
   2207e:	1a61      	subs	r1, r4, r1
   22080:	0889      	lsrs	r1, r1, #2
   22082:	0189      	lsls	r1, r1, #6
   22084:	f041 0101 	orr.w	r1, r1, #1
   22088:	f003 fe2f 	bl	25cea <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   2208c:	4b41      	ldr	r3, [pc, #260]	; (22194 <bus_fault.isra.0+0x128>)
   2208e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22090:	04da      	lsls	r2, r3, #19
   22092:	d50b      	bpl.n	220ac <bus_fault.isra.0+0x40>
		PR_FAULT_INFO("  Stacking error");
   22094:	6823      	ldr	r3, [r4, #0]
   22096:	075b      	lsls	r3, r3, #29
   22098:	d008      	beq.n	220ac <bus_fault.isra.0+0x40>
   2209a:	493c      	ldr	r1, [pc, #240]	; (2218c <bus_fault.isra.0+0x120>)
   2209c:	483e      	ldr	r0, [pc, #248]	; (22198 <bus_fault.isra.0+0x12c>)
   2209e:	1a61      	subs	r1, r4, r1
   220a0:	0889      	lsrs	r1, r1, #2
   220a2:	0189      	lsls	r1, r1, #6
   220a4:	f041 0101 	orr.w	r1, r1, #1
   220a8:	f003 fe1f 	bl	25cea <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   220ac:	4b39      	ldr	r3, [pc, #228]	; (22194 <bus_fault.isra.0+0x128>)
   220ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   220b0:	0518      	lsls	r0, r3, #20
   220b2:	d50b      	bpl.n	220cc <bus_fault.isra.0+0x60>
		PR_FAULT_INFO("  Unstacking error");
   220b4:	6823      	ldr	r3, [r4, #0]
   220b6:	0759      	lsls	r1, r3, #29
   220b8:	d008      	beq.n	220cc <bus_fault.isra.0+0x60>
   220ba:	4934      	ldr	r1, [pc, #208]	; (2218c <bus_fault.isra.0+0x120>)
   220bc:	4837      	ldr	r0, [pc, #220]	; (2219c <bus_fault.isra.0+0x130>)
   220be:	1a61      	subs	r1, r4, r1
   220c0:	0889      	lsrs	r1, r1, #2
   220c2:	0189      	lsls	r1, r1, #6
   220c4:	f041 0101 	orr.w	r1, r1, #1
   220c8:	f003 fe0f 	bl	25cea <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   220cc:	4b31      	ldr	r3, [pc, #196]	; (22194 <bus_fault.isra.0+0x128>)
   220ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   220d0:	059a      	lsls	r2, r3, #22
   220d2:	d522      	bpl.n	2211a <bus_fault.isra.0+0xae>
		PR_FAULT_INFO("  Precise data bus error");
   220d4:	6823      	ldr	r3, [r4, #0]
   220d6:	075b      	lsls	r3, r3, #29
   220d8:	d008      	beq.n	220ec <bus_fault.isra.0+0x80>
   220da:	492c      	ldr	r1, [pc, #176]	; (2218c <bus_fault.isra.0+0x120>)
   220dc:	4830      	ldr	r0, [pc, #192]	; (221a0 <bus_fault.isra.0+0x134>)
   220de:	1a61      	subs	r1, r4, r1
   220e0:	0889      	lsrs	r1, r1, #2
   220e2:	0189      	lsls	r1, r1, #6
   220e4:	f041 0101 	orr.w	r1, r1, #1
   220e8:	f003 fdff 	bl	25cea <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   220ec:	4b29      	ldr	r3, [pc, #164]	; (22194 <bus_fault.isra.0+0x128>)
   220ee:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   220f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   220f2:	0418      	lsls	r0, r3, #16
   220f4:	d511      	bpl.n	2211a <bus_fault.isra.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   220f6:	6823      	ldr	r3, [r4, #0]
   220f8:	075a      	lsls	r2, r3, #29
   220fa:	d008      	beq.n	2210e <bus_fault.isra.0+0xa2>
   220fc:	4a23      	ldr	r2, [pc, #140]	; (2218c <bus_fault.isra.0+0x120>)
   220fe:	4829      	ldr	r0, [pc, #164]	; (221a4 <bus_fault.isra.0+0x138>)
   22100:	1aa2      	subs	r2, r4, r2
   22102:	0892      	lsrs	r2, r2, #2
   22104:	0192      	lsls	r2, r2, #6
   22106:	f042 0201 	orr.w	r2, r2, #1
   2210a:	f003 fdfb 	bl	25d04 <log_1>
			if (from_hard_fault != 0) {
   2210e:	b126      	cbz	r6, 2211a <bus_fault.isra.0+0xae>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   22110:	4a20      	ldr	r2, [pc, #128]	; (22194 <bus_fault.isra.0+0x128>)
   22112:	6a93      	ldr	r3, [r2, #40]	; 0x28
   22114:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   22118:	6293      	str	r3, [r2, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   2211a:	4b1e      	ldr	r3, [pc, #120]	; (22194 <bus_fault.isra.0+0x128>)
   2211c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2211e:	055b      	lsls	r3, r3, #21
   22120:	d50b      	bpl.n	2213a <bus_fault.isra.0+0xce>
		PR_FAULT_INFO("  Imprecise data bus error");
   22122:	6823      	ldr	r3, [r4, #0]
   22124:	075e      	lsls	r6, r3, #29
   22126:	d008      	beq.n	2213a <bus_fault.isra.0+0xce>
   22128:	4918      	ldr	r1, [pc, #96]	; (2218c <bus_fault.isra.0+0x120>)
   2212a:	481f      	ldr	r0, [pc, #124]	; (221a8 <bus_fault.isra.0+0x13c>)
   2212c:	1a61      	subs	r1, r4, r1
   2212e:	0889      	lsrs	r1, r1, #2
   22130:	0189      	lsls	r1, r1, #6
   22132:	f041 0101 	orr.w	r1, r1, #1
   22136:	f003 fdd8 	bl	25cea <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   2213a:	4b16      	ldr	r3, [pc, #88]	; (22194 <bus_fault.isra.0+0x128>)
   2213c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2213e:	05d0      	lsls	r0, r2, #23
   22140:	d513      	bpl.n	2216a <bus_fault.isra.0+0xfe>
		PR_FAULT_INFO("  Instruction bus error");
   22142:	6823      	ldr	r3, [r4, #0]
   22144:	0759      	lsls	r1, r3, #29
   22146:	d008      	beq.n	2215a <bus_fault.isra.0+0xee>
   22148:	4910      	ldr	r1, [pc, #64]	; (2218c <bus_fault.isra.0+0x120>)
   2214a:	4818      	ldr	r0, [pc, #96]	; (221ac <bus_fault.isra.0+0x140>)
   2214c:	1a64      	subs	r4, r4, r1
   2214e:	08a4      	lsrs	r4, r4, #2
   22150:	01a4      	lsls	r4, r4, #6
   22152:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   22156:	f003 fdc8 	bl	25cea <log_0>
	*recoverable = memory_fault_recoverable(esf, true);
   2215a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   2215c:	4a0d      	ldr	r2, [pc, #52]	; (22194 <bus_fault.isra.0+0x128>)
   2215e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   22160:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   22164:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   22166:	7028      	strb	r0, [r5, #0]
}
   22168:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   2216a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2216c:	049a      	lsls	r2, r3, #18
   2216e:	d5f4      	bpl.n	2215a <bus_fault.isra.0+0xee>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   22170:	6823      	ldr	r3, [r4, #0]
   22172:	075b      	lsls	r3, r3, #29
   22174:	d0f1      	beq.n	2215a <bus_fault.isra.0+0xee>
   22176:	4905      	ldr	r1, [pc, #20]	; (2218c <bus_fault.isra.0+0x120>)
   22178:	480d      	ldr	r0, [pc, #52]	; (221b0 <bus_fault.isra.0+0x144>)
   2217a:	1a64      	subs	r4, r4, r1
   2217c:	08a4      	lsrs	r4, r4, #2
   2217e:	01a4      	lsls	r4, r4, #6
   22180:	f044 0101 	orr.w	r1, r4, #1
   22184:	e7e7      	b.n	22156 <bus_fault.isra.0+0xea>
   22186:	bf00      	nop
   22188:	2000816c 	.word	0x2000816c
   2218c:	20008154 	.word	0x20008154
   22190:	0002c920 	.word	0x0002c920
   22194:	e000ed00 	.word	0xe000ed00
   22198:	0002c936 	.word	0x0002c936
   2219c:	0002c891 	.word	0x0002c891
   221a0:	0002c947 	.word	0x0002c947
   221a4:	0002c960 	.word	0x0002c960
   221a8:	0002c975 	.word	0x0002c975
   221ac:	0002c990 	.word	0x0002c990
   221b0:	0002c8f1 	.word	0x0002c8f1

000221b4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   221b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   221b8:	4b6a      	ldr	r3, [pc, #424]	; (22364 <z_arm_fault+0x1b0>)
{
   221ba:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   221bc:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   221c0:	4689      	mov	r9, r1
   221c2:	4614      	mov	r4, r2
   221c4:	2500      	movs	r5, #0
   221c6:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   221c8:	f3c8 0708 	ubfx	r7, r8, #0, #9
   221cc:	f385 8811 	msr	BASEPRI, r5
   221d0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   221d4:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   221d8:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   221dc:	d127      	bne.n	2222e <z_arm_fault+0x7a>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   221de:	07d1      	lsls	r1, r2, #31
   221e0:	d425      	bmi.n	2222e <z_arm_fault+0x7a>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   221e2:	0662      	lsls	r2, r4, #25
   221e4:	d403      	bmi.n	221ee <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   221e6:	0723      	lsls	r3, r4, #28
   221e8:	d411      	bmi.n	2220e <z_arm_fault+0x5a>
			*nested_exc = true;
   221ea:	2501      	movs	r5, #1
   221ec:	e011      	b.n	22212 <z_arm_fault+0x5e>
		PR_FAULT_INFO("Exception occurred in Secure State");
   221ee:	4b5e      	ldr	r3, [pc, #376]	; (22368 <z_arm_fault+0x1b4>)
   221f0:	681a      	ldr	r2, [r3, #0]
   221f2:	0755      	lsls	r5, r2, #29
   221f4:	d008      	beq.n	22208 <z_arm_fault+0x54>
   221f6:	495d      	ldr	r1, [pc, #372]	; (2236c <z_arm_fault+0x1b8>)
   221f8:	485d      	ldr	r0, [pc, #372]	; (22370 <z_arm_fault+0x1bc>)
   221fa:	1a5b      	subs	r3, r3, r1
   221fc:	089b      	lsrs	r3, r3, #2
   221fe:	019b      	lsls	r3, r3, #6
   22200:	f043 0101 	orr.w	r1, r3, #1
   22204:	f003 fd71 	bl	25cea <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   22208:	f014 0504 	ands.w	r5, r4, #4
   2220c:	d001      	beq.n	22212 <z_arm_fault+0x5e>
			ptr_esf = (z_arch_esf_t *)psp;
   2220e:	464e      	mov	r6, r9
	*nested_exc = false;
   22210:	2500      	movs	r5, #0
	*recoverable = false;
   22212:	2300      	movs	r3, #0
   22214:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   22218:	1efb      	subs	r3, r7, #3
   2221a:	2b09      	cmp	r3, #9
   2221c:	f200 8085 	bhi.w	2232a <z_arm_fault+0x176>
   22220:	e8df f003 	tbb	[pc, r3]
   22224:	69716d07 	.word	0x69716d07
   22228:	83838383 	.word	0x83838383
   2222c:	7583      	.short	0x7583
		return NULL;
   2222e:	462e      	mov	r6, r5
   22230:	e7ef      	b.n	22212 <z_arm_fault+0x5e>
	PR_FAULT_INFO("***** HARD FAULT *****");
   22232:	4f4d      	ldr	r7, [pc, #308]	; (22368 <z_arm_fault+0x1b4>)
   22234:	683b      	ldr	r3, [r7, #0]
   22236:	0758      	lsls	r0, r3, #29
   22238:	d008      	beq.n	2224c <z_arm_fault+0x98>
   2223a:	494c      	ldr	r1, [pc, #304]	; (2236c <z_arm_fault+0x1b8>)
   2223c:	484d      	ldr	r0, [pc, #308]	; (22374 <z_arm_fault+0x1c0>)
   2223e:	1a79      	subs	r1, r7, r1
   22240:	0889      	lsrs	r1, r1, #2
   22242:	0189      	lsls	r1, r1, #6
   22244:	f041 0101 	orr.w	r1, r1, #1
   22248:	f003 fd4f 	bl	25cea <log_0>
	*recoverable = false;
   2224c:	2400      	movs	r4, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   2224e:	4b45      	ldr	r3, [pc, #276]	; (22364 <z_arm_fault+0x1b0>)
	*recoverable = false;
   22250:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   22254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   22256:	0791      	lsls	r1, r2, #30
   22258:	d527      	bpl.n	222aa <z_arm_fault+0xf6>
		PR_EXC("  Bus fault on vector table read");
   2225a:	683b      	ldr	r3, [r7, #0]
   2225c:	075a      	lsls	r2, r3, #29
   2225e:	d101      	bne.n	22264 <z_arm_fault+0xb0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   22260:	2400      	movs	r4, #0
   22262:	e008      	b.n	22276 <z_arm_fault+0xc2>
   22264:	4941      	ldr	r1, [pc, #260]	; (2236c <z_arm_fault+0x1b8>)
		PR_EXC("  Bus fault on vector table read");
   22266:	4844      	ldr	r0, [pc, #272]	; (22378 <z_arm_fault+0x1c4>)
   22268:	1a79      	subs	r1, r7, r1
   2226a:	0889      	lsrs	r1, r1, #2
   2226c:	0189      	lsls	r1, r1, #6
   2226e:	f041 0101 	orr.w	r1, r1, #1
   22272:	f003 fd3a 	bl	25cea <log_0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   22276:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2227a:	b99b      	cbnz	r3, 222a4 <z_arm_fault+0xf0>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   2227c:	2220      	movs	r2, #32
   2227e:	4631      	mov	r1, r6
   22280:	a802      	add	r0, sp, #8
   22282:	f005 fa23 	bl	276cc <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   22286:	9b09      	ldr	r3, [sp, #36]	; 0x24
   22288:	2d00      	cmp	r5, #0
   2228a:	d065      	beq.n	22358 <z_arm_fault+0x1a4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   2228c:	f3c3 0208 	ubfx	r2, r3, #0, #9
   22290:	b922      	cbnz	r2, 2229c <z_arm_fault+0xe8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   22292:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   22296:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   2229a:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   2229c:	4620      	mov	r0, r4
   2229e:	a902      	add	r1, sp, #8
   222a0:	f7ff fc90 	bl	21bc4 <z_arm_fatal_error>
}
   222a4:	b00b      	add	sp, #44	; 0x2c
   222a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   222aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   222ac:	005b      	lsls	r3, r3, #1
   222ae:	d5d7      	bpl.n	22260 <z_arm_fault+0xac>
		PR_EXC("  Fault escalation (see below)");
   222b0:	683b      	ldr	r3, [r7, #0]
   222b2:	075c      	lsls	r4, r3, #29
   222b4:	d008      	beq.n	222c8 <z_arm_fault+0x114>
   222b6:	492d      	ldr	r1, [pc, #180]	; (2236c <z_arm_fault+0x1b8>)
   222b8:	4830      	ldr	r0, [pc, #192]	; (2237c <z_arm_fault+0x1c8>)
   222ba:	1a79      	subs	r1, r7, r1
   222bc:	0889      	lsrs	r1, r1, #2
   222be:	0189      	lsls	r1, r1, #6
   222c0:	f041 0101 	orr.w	r1, r1, #1
   222c4:	f003 fd11 	bl	25cea <log_0>
		if (SCB_MMFSR != 0) {
   222c8:	4b2d      	ldr	r3, [pc, #180]	; (22380 <z_arm_fault+0x1cc>)
   222ca:	781b      	ldrb	r3, [r3, #0]
   222cc:	b12b      	cbz	r3, 222da <z_arm_fault+0x126>
			reason = mem_manage_fault(esf, 1, recoverable);
   222ce:	2001      	movs	r0, #1
   222d0:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   222d4:	f7ff fe32 	bl	21f3c <mem_manage_fault.isra.0>
   222d8:	e00f      	b.n	222fa <z_arm_fault+0x146>
		} else if (SCB_BFSR != 0) {
   222da:	4b2a      	ldr	r3, [pc, #168]	; (22384 <z_arm_fault+0x1d0>)
   222dc:	781b      	ldrb	r3, [r3, #0]
   222de:	b12b      	cbz	r3, 222ec <z_arm_fault+0x138>
			reason = bus_fault(esf, 1, recoverable);
   222e0:	2001      	movs	r0, #1
   222e2:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   222e6:	f7ff fec1 	bl	2206c <bus_fault.isra.0>
   222ea:	e006      	b.n	222fa <z_arm_fault+0x146>
		} else if (SCB_UFSR != 0) {
   222ec:	4b26      	ldr	r3, [pc, #152]	; (22388 <z_arm_fault+0x1d4>)
   222ee:	881b      	ldrh	r3, [r3, #0]
   222f0:	b29b      	uxth	r3, r3
   222f2:	2b00      	cmp	r3, #0
   222f4:	d0b4      	beq.n	22260 <z_arm_fault+0xac>
			reason = usage_fault(esf);
   222f6:	f7ff fd81 	bl	21dfc <usage_fault.isra.0>
   222fa:	4604      	mov	r4, r0
   222fc:	e7bb      	b.n	22276 <z_arm_fault+0xc2>
		reason = mem_manage_fault(esf, 0, recoverable);
   222fe:	2000      	movs	r0, #0
   22300:	f10d 0107 	add.w	r1, sp, #7
   22304:	e7e6      	b.n	222d4 <z_arm_fault+0x120>
		reason = bus_fault(esf, 0, recoverable);
   22306:	2000      	movs	r0, #0
   22308:	f10d 0107 	add.w	r1, sp, #7
   2230c:	e7eb      	b.n	222e6 <z_arm_fault+0x132>
	PR_FAULT_INFO(
   2230e:	4916      	ldr	r1, [pc, #88]	; (22368 <z_arm_fault+0x1b4>)
   22310:	680b      	ldr	r3, [r1, #0]
   22312:	0758      	lsls	r0, r3, #29
   22314:	d0a4      	beq.n	22260 <z_arm_fault+0xac>
   22316:	4b15      	ldr	r3, [pc, #84]	; (2236c <z_arm_fault+0x1b8>)
   22318:	481c      	ldr	r0, [pc, #112]	; (2238c <z_arm_fault+0x1d8>)
   2231a:	1ac9      	subs	r1, r1, r3
   2231c:	0889      	lsrs	r1, r1, #2
   2231e:	0189      	lsls	r1, r1, #6
   22320:	f041 0101 	orr.w	r1, r1, #1
   22324:	f003 fce1 	bl	25cea <log_0>
   22328:	e79a      	b.n	22260 <z_arm_fault+0xac>
	PR_FAULT_INFO("***** %s %d) *****",
   2232a:	4b0f      	ldr	r3, [pc, #60]	; (22368 <z_arm_fault+0x1b4>)
   2232c:	681a      	ldr	r2, [r3, #0]
   2232e:	0752      	lsls	r2, r2, #29
   22330:	d096      	beq.n	22260 <z_arm_fault+0xac>
   22332:	4a0e      	ldr	r2, [pc, #56]	; (2236c <z_arm_fault+0x1b8>)
   22334:	4816      	ldr	r0, [pc, #88]	; (22390 <z_arm_fault+0x1dc>)
   22336:	1a9b      	subs	r3, r3, r2
   22338:	089b      	lsrs	r3, r3, #2
   2233a:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   2233e:	ea4f 1383 	mov.w	r3, r3, lsl #6
   22342:	4914      	ldr	r1, [pc, #80]	; (22394 <z_arm_fault+0x1e0>)
   22344:	f043 0301 	orr.w	r3, r3, #1
   22348:	bf18      	it	ne
   2234a:	4601      	movne	r1, r0
   2234c:	f1a7 0210 	sub.w	r2, r7, #16
   22350:	4811      	ldr	r0, [pc, #68]	; (22398 <z_arm_fault+0x1e4>)
   22352:	f003 fceb 	bl	25d2c <log_2>
   22356:	e783      	b.n	22260 <z_arm_fault+0xac>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   22358:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   2235c:	f023 0301 	bic.w	r3, r3, #1
   22360:	e79b      	b.n	2229a <z_arm_fault+0xe6>
   22362:	bf00      	nop
   22364:	e000ed00 	.word	0xe000ed00
   22368:	2000816c 	.word	0x2000816c
   2236c:	20008154 	.word	0x20008154
   22370:	0002c9a8 	.word	0x0002c9a8
   22374:	0002c9cb 	.word	0x0002c9cb
   22378:	0002c9e2 	.word	0x0002c9e2
   2237c:	0002ca03 	.word	0x0002ca03
   22380:	e000ed28 	.word	0xe000ed28
   22384:	e000ed29 	.word	0xe000ed29
   22388:	e000ed2a 	.word	0xe000ed2a
   2238c:	0002ca22 	.word	0x0002ca22
   22390:	0002ca5b 	.word	0x0002ca5b
   22394:	0002ca46 	.word	0x0002ca46
   22398:	0002ca74 	.word	0x0002ca74

0002239c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   2239c:	4b04      	ldr	r3, [pc, #16]	; (223b0 <z_arm_fault_init+0x14>)
   2239e:	695a      	ldr	r2, [r3, #20]
   223a0:	f042 0210 	orr.w	r2, r2, #16
   223a4:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   223a6:	695a      	ldr	r2, [r3, #20]
   223a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   223ac:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   223ae:	4770      	bx	lr
   223b0:	e000ed00 	.word	0xe000ed00

000223b4 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   223b4:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   223b8:	4905      	ldr	r1, [pc, #20]	; (223d0 <sys_arch_reboot+0x1c>)
   223ba:	4b06      	ldr	r3, [pc, #24]	; (223d4 <sys_arch_reboot+0x20>)
   223bc:	68ca      	ldr	r2, [r1, #12]
   223be:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   223c2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   223c4:	60cb      	str	r3, [r1, #12]
   223c6:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   223ca:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   223cc:	e7fd      	b.n	223ca <sys_arch_reboot+0x16>
   223ce:	bf00      	nop
   223d0:	e000ed00 	.word	0xe000ed00
   223d4:	05fa0004 	.word	0x05fa0004

000223d8 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   223d8:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   223da:	2120      	movs	r1, #32
   223dc:	4803      	ldr	r0, [pc, #12]	; (223ec <z_arm_interrupt_init+0x14>)
   223de:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   223e0:	3301      	adds	r3, #1
   223e2:	2b45      	cmp	r3, #69	; 0x45
   223e4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   223e8:	d1f9      	bne.n	223de <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   223ea:	4770      	bx	lr
   223ec:	e000e100 	.word	0xe000e100

000223f0 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   223f0:	4b06      	ldr	r3, [pc, #24]	; (2240c <z_impl_k_thread_abort+0x1c>)
   223f2:	689b      	ldr	r3, [r3, #8]
   223f4:	4283      	cmp	r3, r0
   223f6:	d107      	bne.n	22408 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   223f8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   223fc:	b123      	cbz	r3, 22408 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   223fe:	4a04      	ldr	r2, [pc, #16]	; (22410 <z_impl_k_thread_abort+0x20>)
   22400:	6853      	ldr	r3, [r2, #4]
   22402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   22406:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   22408:	f002 b994 	b.w	24734 <z_thread_abort>
   2240c:	20008e30 	.word	0x20008e30
   22410:	e000ed00 	.word	0xe000ed00

00022414 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   22414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   22416:	4c09      	ldr	r4, [pc, #36]	; (2243c <z_arm_configure_static_mpu_regions+0x28>)
   22418:	4a09      	ldr	r2, [pc, #36]	; (22440 <z_arm_configure_static_mpu_regions+0x2c>)
   2241a:	4623      	mov	r3, r4
   2241c:	2101      	movs	r1, #1
   2241e:	4809      	ldr	r0, [pc, #36]	; (22444 <z_arm_configure_static_mpu_regions+0x30>)
   22420:	f000 f91e 	bl	22660 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   22424:	2300      	movs	r3, #0
   22426:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   22428:	4b07      	ldr	r3, [pc, #28]	; (22448 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   2242a:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   2242c:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   2242e:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   22430:	9301      	str	r3, [sp, #4]
   22432:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   22434:	f000 f91e 	bl	22674 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   22438:	b004      	add	sp, #16
   2243a:	bd10      	pop	{r4, pc}
   2243c:	20080000 	.word	0x20080000
   22440:	20008000 	.word	0x20008000
   22444:	0002af08 	.word	0x0002af08
   22448:	20008208 	.word	0x20008208

0002244c <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   2244c:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   2244e:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   22450:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   22452:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   22456:	f004 031f 	and.w	r3, r4, #31
   2245a:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   2245c:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   2245e:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   22460:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   22464:	4904      	ldr	r1, [pc, #16]	; (22478 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   22466:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   2246a:	f043 0301 	orr.w	r3, r3, #1
   2246e:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   22470:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   22472:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   22474:	bd10      	pop	{r4, pc}
   22476:	bf00      	nop
   22478:	e000ed90 	.word	0xe000ed90

0002247c <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   2247c:	2807      	cmp	r0, #7
{
   2247e:	b510      	push	{r4, lr}
	if (index > (get_num_regions() - 1U)) {
   22480:	d910      	bls.n	224a4 <region_allocate_and_init+0x28>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   22482:	4a0a      	ldr	r2, [pc, #40]	; (224ac <region_allocate_and_init+0x30>)
   22484:	6813      	ldr	r3, [r2, #0]
   22486:	075b      	lsls	r3, r3, #29
   22488:	d009      	beq.n	2249e <region_allocate_and_init+0x22>
   2248a:	4b09      	ldr	r3, [pc, #36]	; (224b0 <region_allocate_and_init+0x34>)
   2248c:	4601      	mov	r1, r0
   2248e:	1ad2      	subs	r2, r2, r3
   22490:	0892      	lsrs	r2, r2, #2
   22492:	0192      	lsls	r2, r2, #6
   22494:	4807      	ldr	r0, [pc, #28]	; (224b4 <region_allocate_and_init+0x38>)
   22496:	f042 0201 	orr.w	r2, r2, #1
   2249a:	f003 fc33 	bl	25d04 <log_1>
		return -EINVAL;
   2249e:	f06f 0015 	mvn.w	r0, #21
   224a2:	e001      	b.n	224a8 <region_allocate_and_init+0x2c>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   224a4:	f7ff ffd2 	bl	2244c <region_init>

	return index;
}
   224a8:	bd10      	pop	{r4, pc}
   224aa:	bf00      	nop
   224ac:	20008168 	.word	0x20008168
   224b0:	20008154 	.word	0x20008154
   224b4:	0002ca8b 	.word	0x0002ca8b

000224b8 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   224b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   224bc:	4689      	mov	r9, r1
   224be:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   224c0:	4606      	mov	r6, r0
   224c2:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
   224c6:	4d58      	ldr	r5, [pc, #352]	; (22628 <mpu_configure_regions_and_partition.constprop.0+0x170>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   224c8:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   224ca:	45c8      	cmp	r8, r9
   224cc:	da2f      	bge.n	2252e <mpu_configure_regions_and_partition.constprop.0+0x76>
		if (regions[i].size == 0U) {
   224ce:	f8d6 a004 	ldr.w	sl, [r6, #4]
   224d2:	f1ba 0f00 	cmp.w	sl, #0
   224d6:	d054      	beq.n	22582 <mpu_configure_regions_and_partition.constprop.0+0xca>
		&&
   224d8:	f1ba 0f1f 	cmp.w	sl, #31
   224dc:	d921      	bls.n	22522 <mpu_configure_regions_and_partition.constprop.0+0x6a>
		&&
   224de:	f01a 0f1f 	tst.w	sl, #31
   224e2:	d11e      	bne.n	22522 <mpu_configure_regions_and_partition.constprop.0+0x6a>
		((part->start &
   224e4:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   224e8:	f01b 0f1f 	tst.w	fp, #31
   224ec:	d119      	bne.n	22522 <mpu_configure_regions_and_partition.constprop.0+0x6a>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   224ee:	4658      	mov	r0, fp
   224f0:	f004 ffb7 	bl	27462 <arm_cmse_mpu_region_get>
   224f4:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   224f6:	eb0a 000b 	add.w	r0, sl, fp
   224fa:	3801      	subs	r0, #1
   224fc:	f004 ffb1 	bl	27462 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   22500:	4287      	cmp	r7, r0
   22502:	d023      	beq.n	2254c <mpu_configure_regions_and_partition.constprop.0+0x94>
	return -EINVAL;
   22504:	f06f 0715 	mvn.w	r7, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   22508:	4a48      	ldr	r2, [pc, #288]	; (2262c <mpu_configure_regions_and_partition.constprop.0+0x174>)
   2250a:	6813      	ldr	r3, [r2, #0]
   2250c:	075b      	lsls	r3, r3, #29
   2250e:	d00c      	beq.n	2252a <mpu_configure_regions_and_partition.constprop.0+0x72>
   22510:	4b47      	ldr	r3, [pc, #284]	; (22630 <mpu_configure_regions_and_partition.constprop.0+0x178>)
   22512:	4639      	mov	r1, r7
   22514:	1ad2      	subs	r2, r2, r3
   22516:	0892      	lsrs	r2, r2, #2
   22518:	0192      	lsls	r2, r2, #6
   2251a:	4846      	ldr	r0, [pc, #280]	; (22634 <mpu_configure_regions_and_partition.constprop.0+0x17c>)
   2251c:	f042 0201 	orr.w	r2, r2, #1
   22520:	e011      	b.n	22546 <mpu_configure_regions_and_partition.constprop.0+0x8e>
			LOG_ERR("Partition %u: sanity check failed.", i);
   22522:	4a42      	ldr	r2, [pc, #264]	; (2262c <mpu_configure_regions_and_partition.constprop.0+0x174>)
   22524:	6813      	ldr	r3, [r2, #0]
   22526:	0759      	lsls	r1, r3, #29
   22528:	d105      	bne.n	22536 <mpu_configure_regions_and_partition.constprop.0+0x7e>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   2252a:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   2252e:	4620      	mov	r0, r4
   22530:	b005      	add	sp, #20
   22532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("Partition %u: sanity check failed.", i);
   22536:	4641      	mov	r1, r8
   22538:	4b3d      	ldr	r3, [pc, #244]	; (22630 <mpu_configure_regions_and_partition.constprop.0+0x178>)
   2253a:	483f      	ldr	r0, [pc, #252]	; (22638 <mpu_configure_regions_and_partition.constprop.0+0x180>)
   2253c:	1ad2      	subs	r2, r2, r3
   2253e:	0892      	lsrs	r2, r2, #2
   22540:	0192      	lsls	r2, r2, #6
   22542:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Invalid underlying region index %u",
   22546:	f003 fbdd 	bl	25d04 <log_1>
   2254a:	e7ee      	b.n	2252a <mpu_configure_regions_and_partition.constprop.0+0x72>
		if ((u_reg_index == -EINVAL) ||
   2254c:	f117 0f16 	cmn.w	r7, #22
   22550:	d0da      	beq.n	22508 <mpu_configure_regions_and_partition.constprop.0+0x50>
			(u_reg_index > (reg_index - 1))) {
   22552:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   22554:	42bb      	cmp	r3, r7
   22556:	dbd7      	blt.n	22508 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
   22558:	60af      	str	r7, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   2255a:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
   2255c:	60af      	str	r7, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   2255e:	692b      	ldr	r3, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   22560:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   22564:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   22568:	e9d6 3200 	ldrd	r3, r2, [r6]
   2256c:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
   2256e:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   22570:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
   22574:	d11a      	bne.n	225ac <mpu_configure_regions_and_partition.constprop.0+0xf4>
   22576:	45d3      	cmp	fp, sl
   22578:	d107      	bne.n	2258a <mpu_configure_regions_and_partition.constprop.0+0xd2>
			mpu_configure_region(u_reg_index, &regions[i]);
   2257a:	4631      	mov	r1, r6
   2257c:	b2f8      	uxtb	r0, r7
   2257e:	f004 ff79 	bl	27474 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   22582:	f108 0801 	add.w	r8, r8, #1
   22586:	360c      	adds	r6, #12
   22588:	e79f      	b.n	224ca <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
   2258a:	4631      	mov	r1, r6
	MPU->RNR = index;
   2258c:	60af      	str	r7, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   2258e:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   22590:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   22594:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   22598:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   2259a:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
   2259c:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   2259e:	f004 ff69 	bl	27474 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   225a2:	f110 0f16 	cmn.w	r0, #22
   225a6:	d0c0      	beq.n	2252a <mpu_configure_regions_and_partition.constprop.0+0x72>
			reg_index++;
   225a8:	1c44      	adds	r4, r0, #1
   225aa:	e7ea      	b.n	22582 <mpu_configure_regions_and_partition.constprop.0+0xca>
		} else if (reg_last == u_reg_last) {
   225ac:	3b01      	subs	r3, #1
   225ae:	45d3      	cmp	fp, sl
   225b0:	b2e0      	uxtb	r0, r4
   225b2:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
   225b6:	60af      	str	r7, [r5, #8]
		} else if (reg_last == u_reg_last) {
   225b8:	d106      	bne.n	225c8 <mpu_configure_regions_and_partition.constprop.0+0x110>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   225ba:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
   225bc:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   225be:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   225c2:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   225c4:	612b      	str	r3, [r5, #16]
			reg_index =
   225c6:	e7ea      	b.n	2259e <mpu_configure_regions_and_partition.constprop.0+0xe6>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   225c8:	6929      	ldr	r1, [r5, #16]
   225ca:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   225ce:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   225d0:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
   225d2:	4631      	mov	r1, r6
   225d4:	f004 ff4e 	bl	27474 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   225d8:	f110 0f16 	cmn.w	r0, #22
   225dc:	d0a5      	beq.n	2252a <mpu_configure_regions_and_partition.constprop.0+0x72>
	MPU->RNR = index;
   225de:	60af      	str	r7, [r5, #8]
	attr->rbar = MPU->RBAR &
   225e0:	68ea      	ldr	r2, [r5, #12]
   225e2:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   225e6:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
   225ea:	f362 0304 	bfi	r3, r2, #0, #5
   225ee:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   225f2:	692b      	ldr	r3, [r5, #16]
   225f4:	f89d 2008 	ldrb.w	r2, [sp, #8]
   225f8:	085b      	lsrs	r3, r3, #1
   225fa:	f363 1247 	bfi	r2, r3, #5, #3
   225fe:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
   22602:	e9d6 3200 	ldrd	r3, r2, [r6]
   22606:	4413      	add	r3, r2
   22608:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
   2260a:	f023 031f 	bic.w	r3, r3, #31
   2260e:	445b      	add	r3, fp
   22610:	eba3 030a 	sub.w	r3, r3, sl
			reg_index++;
   22614:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   22616:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
   2261a:	4669      	mov	r1, sp
   2261c:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   2261e:	9303      	str	r3, [sp, #12]
				region_allocate_and_init(reg_index,
   22620:	f7ff ff2c 	bl	2247c <region_allocate_and_init>
   22624:	e7bd      	b.n	225a2 <mpu_configure_regions_and_partition.constprop.0+0xea>
   22626:	bf00      	nop
   22628:	e000ed90 	.word	0xe000ed90
   2262c:	20008168 	.word	0x20008168
   22630:	20008154 	.word	0x20008154
   22634:	0002cad4 	.word	0x0002cad4
   22638:	0002cab1 	.word	0x0002cab1

0002263c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   2263c:	2205      	movs	r2, #5
   2263e:	4b03      	ldr	r3, [pc, #12]	; (2264c <arm_core_mpu_enable+0x10>)
   22640:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   22642:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   22646:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   2264a:	4770      	bx	lr
   2264c:	e000ed90 	.word	0xe000ed90

00022650 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   22650:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   22654:	2200      	movs	r2, #0
   22656:	4b01      	ldr	r3, [pc, #4]	; (2265c <arm_core_mpu_disable+0xc>)
   22658:	605a      	str	r2, [r3, #4]
}
   2265a:	4770      	bx	lr
   2265c:	e000ed90 	.word	0xe000ed90

00022660 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   22660:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   22662:	4c03      	ldr	r4, [pc, #12]	; (22670 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   22664:	7822      	ldrb	r2, [r4, #0]
   22666:	f7ff ff27 	bl	224b8 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   2266a:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   2266c:	bd10      	pop	{r4, pc}
   2266e:	bf00      	nop
   22670:	200096b9 	.word	0x200096b9

00022674 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   22674:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22678:	4d26      	ldr	r5, [pc, #152]	; (22714 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
   2267a:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   2267c:	4606      	mov	r6, r0
   2267e:	f04f 0800 	mov.w	r8, #0
   22682:	46ab      	mov	fp, r5
	MPU->RNR = index;
   22684:	4f24      	ldr	r7, [pc, #144]	; (22718 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   22686:	45d0      	cmp	r8, sl
   22688:	da1b      	bge.n	226c2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   2268a:	f8d6 9004 	ldr.w	r9, [r6, #4]
   2268e:	f1b9 0f00 	cmp.w	r9, #0
   22692:	d039      	beq.n	22708 <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   22694:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   22696:	4608      	mov	r0, r1
   22698:	9101      	str	r1, [sp, #4]
   2269a:	f004 fee2 	bl	27462 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   2269e:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   226a0:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   226a2:	eb09 0001 	add.w	r0, r9, r1
   226a6:	3801      	subs	r0, #1
   226a8:	f004 fedb 	bl	27462 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   226ac:	4284      	cmp	r4, r0
   226ae:	f04f 0214 	mov.w	r2, #20
   226b2:	4b1a      	ldr	r3, [pc, #104]	; (2271c <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
   226b4:	d008      	beq.n	226c8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   226b6:	f06f 0315 	mvn.w	r3, #21
   226ba:	fb02 f808 	mul.w	r8, r2, r8
   226be:	f84b 3008 	str.w	r3, [fp, r8]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   226c2:	b003      	add	sp, #12
   226c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   226c8:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   226cc:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   226ce:	d0f8      	beq.n	226c2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   226d0:	7819      	ldrb	r1, [r3, #0]
   226d2:	42a1      	cmp	r1, r4
   226d4:	ddf5      	ble.n	226c2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
   226d6:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   226da:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   226dc:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   226de:	68fc      	ldr	r4, [r7, #12]
   226e0:	f100 0108 	add.w	r1, r0, #8
   226e4:	7b00      	ldrb	r0, [r0, #12]
   226e6:	f364 0004 	bfi	r0, r4, #0, #5
   226ea:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   226ec:	6938      	ldr	r0, [r7, #16]
   226ee:	790c      	ldrb	r4, [r1, #4]
   226f0:	0840      	lsrs	r0, r0, #1
   226f2:	f360 1447 	bfi	r4, r0, #5, #3
   226f6:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   226f8:	68f9      	ldr	r1, [r7, #12]
   226fa:	f021 011f 	bic.w	r1, r1, #31
   226fe:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   22700:	6939      	ldr	r1, [r7, #16]
   22702:	f021 011f 	bic.w	r1, r1, #31
   22706:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   22708:	f108 0801 	add.w	r8, r8, #1
   2270c:	3514      	adds	r5, #20
   2270e:	360c      	adds	r6, #12
   22710:	e7b9      	b.n	22686 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   22712:	bf00      	nop
   22714:	20008d68 	.word	0x20008d68
   22718:	e000ed90 	.word	0xe000ed90
   2271c:	200096b9 	.word	0x200096b9

00022720 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   22720:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   22722:	4c0e      	ldr	r4, [pc, #56]	; (2275c <z_arm_mpu_init+0x3c>)
   22724:	6825      	ldr	r5, [r4, #0]
   22726:	2d08      	cmp	r5, #8
   22728:	d814      	bhi.n	22754 <z_arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   2272a:	f7ff ff91 	bl	22650 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   2272e:	2000      	movs	r0, #0
	MPU->MAIR0 =
   22730:	4b0b      	ldr	r3, [pc, #44]	; (22760 <z_arm_mpu_init+0x40>)
   22732:	4a0c      	ldr	r2, [pc, #48]	; (22764 <z_arm_mpu_init+0x44>)
   22734:	631a      	str	r2, [r3, #48]	; 0x30
   22736:	4285      	cmp	r5, r0
   22738:	d105      	bne.n	22746 <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   2273a:	4b0b      	ldr	r3, [pc, #44]	; (22768 <z_arm_mpu_init+0x48>)
   2273c:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   2273e:	f7ff ff7d 	bl	2263c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   22742:	2000      	movs	r0, #0
}
   22744:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   22746:	6861      	ldr	r1, [r4, #4]
   22748:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   2274c:	f7ff fe7e 	bl	2244c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   22750:	3001      	adds	r0, #1
   22752:	e7f0      	b.n	22736 <z_arm_mpu_init+0x16>
		return -1;
   22754:	f04f 30ff 	mov.w	r0, #4294967295
   22758:	e7f4      	b.n	22744 <z_arm_mpu_init+0x24>
   2275a:	bf00      	nop
   2275c:	0002af14 	.word	0x0002af14
   22760:	e000ed90 	.word	0xe000ed90
   22764:	0044ffaa 	.word	0x0044ffaa
   22768:	200096b9 	.word	0x200096b9

0002276c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   2276c:	4b01      	ldr	r3, [pc, #4]	; (22774 <__stdout_hook_install+0x8>)
   2276e:	6018      	str	r0, [r3, #0]
}
   22770:	4770      	bx	lr
   22772:	bf00      	nop
   22774:	20008080 	.word	0x20008080

00022778 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
   22778:	3902      	subs	r1, #2
   2277a:	2901      	cmp	r1, #1
   2277c:	d802      	bhi.n	22784 <z_impl_zephyr_fputc+0xc>
   2277e:	4b03      	ldr	r3, [pc, #12]	; (2278c <z_impl_zephyr_fputc+0x14>)
   22780:	681b      	ldr	r3, [r3, #0]
   22782:	4718      	bx	r3
}
   22784:	f04f 30ff 	mov.w	r0, #4294967295
   22788:	4770      	bx	lr
   2278a:	bf00      	nop
   2278c:	20008080 	.word	0x20008080

00022790 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT str, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
   22790:	b40c      	push	{r2, r3}
   22792:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
   22794:	b909      	cbnz	r1, 2279a <snprintf+0xa>
		str = &dummy; /* write final NUL to dummy, can't change *s */
   22796:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = str;
	p.len = (int) len;
   2279a:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
   2279e:	ab07      	add	r3, sp, #28
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   227a0:	9a06      	ldr	r2, [sp, #24]
   227a2:	a902      	add	r1, sp, #8
   227a4:	4805      	ldr	r0, [pc, #20]	; (227bc <snprintf+0x2c>)
	va_start(vargs, format);
   227a6:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   227a8:	f7fb fb72 	bl	1de90 <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
   227ac:	2200      	movs	r2, #0
   227ae:	9b02      	ldr	r3, [sp, #8]
   227b0:	701a      	strb	r2, [r3, #0]
	return r;
}
   227b2:	b005      	add	sp, #20
   227b4:	f85d eb04 	ldr.w	lr, [sp], #4
   227b8:	b002      	add	sp, #8
   227ba:	4770      	bx	lr
   227bc:	00027773 	.word	0x00027773

000227c0 <sprintf>:

int sprintf(char *_MLIBC_RESTRICT str, const char *_MLIBC_RESTRICT format, ...)
{
   227c0:	b40e      	push	{r1, r2, r3}
   227c2:	b50f      	push	{r0, r1, r2, r3, lr}

	struct emitter p;
	int     r;

	p.ptr = str;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   227c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
   227c8:	ab05      	add	r3, sp, #20
   227ca:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = str;
   227ce:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   227d0:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   227d2:	4806      	ldr	r0, [pc, #24]	; (227ec <sprintf+0x2c>)
   227d4:	a902      	add	r1, sp, #8
	va_start(vargs, format);
   227d6:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   227d8:	f7fb fb5a 	bl	1de90 <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
   227dc:	2200      	movs	r2, #0
   227de:	9b02      	ldr	r3, [sp, #8]
   227e0:	701a      	strb	r2, [r3, #0]
	return r;
}
   227e2:	b004      	add	sp, #16
   227e4:	f85d eb04 	ldr.w	lr, [sp], #4
   227e8:	b003      	add	sp, #12
   227ea:	4770      	bx	lr
   227ec:	00027773 	.word	0x00027773

000227f0 <printf>:

	return r;
}

int printf(const char *_MLIBC_RESTRICT format, ...)
{
   227f0:	b40f      	push	{r0, r1, r2, r3}
   227f2:	b507      	push	{r0, r1, r2, lr}
   227f4:	ab04      	add	r3, sp, #16
   227f6:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
   227fa:	2102      	movs	r1, #2
   227fc:	4804      	ldr	r0, [pc, #16]	; (22810 <printf+0x20>)
	va_start(vargs, format);
   227fe:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
   22800:	f7fb fb46 	bl	1de90 <cbvprintf>
	va_end(vargs);

	return r;
}
   22804:	b003      	add	sp, #12
   22806:	f85d eb04 	ldr.w	lr, [sp], #4
   2280a:	b004      	add	sp, #16
   2280c:	4770      	bx	lr
   2280e:	bf00      	nop
   22810:	0002776f 	.word	0x0002776f

00022814 <gmtime_r>:
 * due to time zone, leap seconds, or a different epoch must be
 * applied to @p time before invoking this function.
 */
struct tm *gmtime_r(const time_t *_MLIBC_RESTRICT timep,
		    struct tm *_MLIBC_RESTRICT result)
{
   22814:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	time_t z = *timep;
   22818:	e9d0 6700 	ldrd	r6, r7, [r0]
	bigint_type days = (z >= 0 ? z : z - 86399) / 86400;
   2281c:	2e00      	cmp	r6, #0
   2281e:	f177 0300 	sbcs.w	r3, r7, #0
{
   22822:	468a      	mov	sl, r1
	bigint_type days = (z >= 0 ? z : z - 86399) / 86400;
   22824:	f280 80a8 	bge.w	22978 <gmtime_r+0x164>
   22828:	2300      	movs	r3, #0
   2282a:	4863      	ldr	r0, [pc, #396]	; (229b8 <gmtime_r+0x1a4>)
   2282c:	4a63      	ldr	r2, [pc, #396]	; (229bc <gmtime_r+0x1a8>)
   2282e:	1830      	adds	r0, r6, r0
   22830:	f147 31ff 	adc.w	r1, r7, #4294967295
   22834:	f7ed fd04 	bl	10240 <__aeabi_ldivmod>
	unsigned int rem = z - days * 86400;
   22838:	4b61      	ldr	r3, [pc, #388]	; (229c0 <gmtime_r+0x1ac>)
	bigint_type days = (z >= 0 ? z : z - 86399) / 86400;
   2283a:	4604      	mov	r4, r0
	unsigned int rem = z - days * 86400;
   2283c:	fb03 6600 	mla	r6, r3, r0, r6
	bigint_type days = (z >= 0 ? z : z - 86399) / 86400;
   22840:	460d      	mov	r5, r1

	*result = (struct tm){ 0 };
   22842:	2224      	movs	r2, #36	; 0x24
   22844:	2100      	movs	r1, #0
   22846:	4650      	mov	r0, sl
   22848:	f004 ff6b 	bl	27722 <memset>
	tp->tm_wday = (z >= -4) ? ((z + 4) % 7) : ((z + 5) % 7 + 6);
   2284c:	f06f 0203 	mvn.w	r2, #3
   22850:	f04f 33ff 	mov.w	r3, #4294967295
   22854:	4294      	cmp	r4, r2
   22856:	eb75 0303 	sbcs.w	r3, r5, r3
   2285a:	f04f 0207 	mov.w	r2, #7
   2285e:	f04f 0300 	mov.w	r3, #0
   22862:	f2c0 808e 	blt.w	22982 <gmtime_r+0x16e>
   22866:	1d20      	adds	r0, r4, #4
   22868:	f145 0100 	adc.w	r1, r5, #0
   2286c:	f7ed fce8 	bl	10240 <__aeabi_ldivmod>
	z += 719468;
   22870:	4b54      	ldr	r3, [pc, #336]	; (229c4 <gmtime_r+0x1b0>)
	tp->tm_wday = (z >= -4) ? ((z + 4) % 7) : ((z + 5) % 7 + 6);
   22872:	f8ca 2018 	str.w	r2, [sl, #24]
	z += 719468;
   22876:	eb14 0803 	adds.w	r8, r4, r3
   2287a:	f04f 0300 	mov.w	r3, #0
   2287e:	eb45 0903 	adc.w	r9, r5, r3
	bigint_type era = ((z >= 0) ? z : (z - 146096)) / 146097;
   22882:	f1b8 0f00 	cmp.w	r8, #0
   22886:	f179 0300 	sbcs.w	r3, r9, #0
   2288a:	f280 8081 	bge.w	22990 <gmtime_r+0x17c>
   2288e:	2100      	movs	r1, #0
   22890:	2300      	movs	r3, #0
   22892:	484d      	ldr	r0, [pc, #308]	; (229c8 <gmtime_r+0x1b4>)
   22894:	4a4d      	ldr	r2, [pc, #308]	; (229cc <gmtime_r+0x1b8>)
   22896:	1820      	adds	r0, r4, r0
   22898:	eb45 0101 	adc.w	r1, r5, r1
   2289c:	f7ed fcd0 	bl	10240 <__aeabi_ldivmod>
	unsigned int yoe = (doe - doe / 1460U + doe / 36524U - doe / 146096U)
   228a0:	f648 62ac 	movw	r2, #36524	; 0x8eac
   228a4:	f240 55b4 	movw	r5, #1460	; 0x5b4
	unsigned int doe = (z - era * (bigint_type)146097);
   228a8:	4b49      	ldr	r3, [pc, #292]	; (229d0 <gmtime_r+0x1bc>)
	bigint_type y = (time_t)yoe + era * 400;
   228aa:	f44f 7cc8 	mov.w	ip, #400	; 0x190
	unsigned int doe = (z - era * (bigint_type)146097);
   228ae:	fb03 8800 	mla	r8, r3, r0, r8
	unsigned int yoe = (doe - doe / 1460U + doe / 36524U - doe / 146096U)
   228b2:	fbb8 f2f2 	udiv	r2, r8, r2
   228b6:	fbb8 f3f5 	udiv	r3, r8, r5
   228ba:	4442      	add	r2, r8
   228bc:	1ad2      	subs	r2, r2, r3
   228be:	4b45      	ldr	r3, [pc, #276]	; (229d4 <gmtime_r+0x1c0>)
	bigint_type era = ((z >= 0) ? z : (z - 146096)) / 146097;
   228c0:	460f      	mov	r7, r1
	unsigned int yoe = (doe - doe / 1460U + doe / 36524U - doe / 146096U)
   228c2:	fbb8 f3f3 	udiv	r3, r8, r3
   228c6:	1ad2      	subs	r2, r2, r3
   228c8:	f240 136d 	movw	r3, #365	; 0x16d
	unsigned int doy = doe - (365U * yoe + yoe / 4U - yoe / 100U);
   228cc:	f04f 0e64 	mov.w	lr, #100	; 0x64
	unsigned int yoe = (doe - doe / 1460U + doe / 36524U - doe / 146096U)
   228d0:	fbb2 f4f3 	udiv	r4, r2, r3
	bigint_type y = (time_t)yoe + era * 400;
   228d4:	fba0 010c 	umull	r0, r1, r0, ip
	unsigned int doy = doe - (365U * yoe + yoe / 4U - yoe / 100U);
   228d8:	fbb2 f5f5 	udiv	r5, r2, r5
	bigint_type y = (time_t)yoe + era * 400;
   228dc:	fb0c 1107 	mla	r1, ip, r7, r1
	unsigned int doy = doe - (365U * yoe + yoe / 4U - yoe / 100U);
   228e0:	fbb4 f7fe 	udiv	r7, r4, lr
	bigint_type y = (time_t)yoe + era * 400;
   228e4:	1900      	adds	r0, r0, r4
   228e6:	f141 0100 	adc.w	r1, r1, #0
   228ea:	e9cd 0100 	strd	r0, r1, [sp]
	unsigned int mp = (5U * doy + 2U) / 153U;
   228ee:	2199      	movs	r1, #153	; 0x99
	unsigned int doy = doe - (365U * yoe + yoe / 4U - yoe / 100U);
   228f0:	1b7d      	subs	r5, r7, r5
   228f2:	44a8      	add	r8, r5
   228f4:	fb03 8314 	mls	r3, r3, r4, r8
	unsigned int mp = (5U * doy + 2U) / 153U;
   228f8:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   228fc:	f10c 0c02 	add.w	ip, ip, #2
   22900:	fbbc f5f1 	udiv	r5, ip, r1
	unsigned int d = doy - (153U * mp + 2U) / 5U + 1U;
   22904:	f04f 0905 	mov.w	r9, #5
   22908:	4369      	muls	r1, r5
   2290a:	3102      	adds	r1, #2
   2290c:	fbb1 f1f9 	udiv	r1, r1, r9
   22910:	f103 0801 	add.w	r8, r3, #1
   22914:	eba8 0101 	sub.w	r1, r8, r1
	unsigned int m = mp + ((mp < 10) ? 3 : -9);
   22918:	f240 58f9 	movw	r8, #1529	; 0x5f9
   2291c:	45c4      	cmp	ip, r8
   2291e:	bf94      	ite	ls
   22920:	f04f 0c03 	movls.w	ip, #3
   22924:	f06f 0c08 	mvnhi.w	ip, #8
	tp->tm_year = y + (m <= 2) - 1900;
   22928:	9800      	ldr	r0, [sp, #0]
	unsigned int m = mp + ((mp < 10) ? 3 : -9);
   2292a:	4465      	add	r5, ip
	tp->tm_year = y + (m <= 2) - 1900;
   2292c:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   22930:	2d02      	cmp	r5, #2
   22932:	bf98      	it	ls
   22934:	3001      	addls	r0, #1
	tp->tm_mon = m - 1;
   22936:	3d01      	subs	r5, #1
	if (doy >= 306U) {
   22938:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
	tp->tm_mday = d;
   2293c:	e9ca 1503 	strd	r1, r5, [sl, #12]
	tp->tm_year = y + (m <= 2) - 1900;
   22940:	f8ca 0014 	str.w	r0, [sl, #20]
	if (doy >= 306U) {
   22944:	d329      	bcc.n	2299a <gmtime_r+0x186>
		tp->tm_yday = doy - 306U;
   22946:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132

	time_civil_from_days(days, result);

	result->tm_hour = rem / 60U / 60U;
   2294a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
		tp->tm_yday = doy + 59U + (((yoe % 4U == 0U) && (yoe % 100U != 0U)) || (yoe == 0U));
   2294e:	f8ca 301c 	str.w	r3, [sl, #28]
	result->tm_hour = rem / 60U / 60U;
   22952:	fbb6 f3f2 	udiv	r3, r6, r2
	rem -= result->tm_hour * 60 * 60;
   22956:	fb02 6613 	mls	r6, r2, r3, r6
	result->tm_min = rem / 60;
   2295a:	223c      	movs	r2, #60	; 0x3c
	result->tm_hour = rem / 60U / 60U;
   2295c:	f8ca 3008 	str.w	r3, [sl, #8]
	result->tm_min = rem / 60;
   22960:	fbb6 f3f2 	udiv	r3, r6, r2
	result->tm_sec = rem - result->tm_min * 60;

	return result;
}
   22964:	4650      	mov	r0, sl
	result->tm_sec = rem - result->tm_min * 60;
   22966:	fb02 6613 	mls	r6, r2, r3, r6
	result->tm_min = rem / 60;
   2296a:	f8ca 3004 	str.w	r3, [sl, #4]
	result->tm_sec = rem - result->tm_min * 60;
   2296e:	f8ca 6000 	str.w	r6, [sl]
}
   22972:	b002      	add	sp, #8
   22974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	bigint_type days = (z >= 0 ? z : z - 86399) / 86400;
   22978:	2300      	movs	r3, #0
   2297a:	4630      	mov	r0, r6
   2297c:	4639      	mov	r1, r7
   2297e:	4a0f      	ldr	r2, [pc, #60]	; (229bc <gmtime_r+0x1a8>)
   22980:	e758      	b.n	22834 <gmtime_r+0x20>
	tp->tm_wday = (z >= -4) ? ((z + 4) % 7) : ((z + 5) % 7 + 6);
   22982:	1d60      	adds	r0, r4, #5
   22984:	f145 0100 	adc.w	r1, r5, #0
   22988:	f7ed fc5a 	bl	10240 <__aeabi_ldivmod>
   2298c:	3206      	adds	r2, #6
   2298e:	e76f      	b.n	22870 <gmtime_r+0x5c>
	bigint_type era = ((z >= 0) ? z : (z - 146096)) / 146097;
   22990:	2300      	movs	r3, #0
   22992:	4640      	mov	r0, r8
   22994:	4649      	mov	r1, r9
   22996:	4a0d      	ldr	r2, [pc, #52]	; (229cc <gmtime_r+0x1b8>)
   22998:	e780      	b.n	2289c <gmtime_r+0x88>
		tp->tm_yday = doy + 59U + (((yoe % 4U == 0U) && (yoe % 100U != 0U)) || (yoe == 0U));
   2299a:	07a1      	lsls	r1, r4, #30
   2299c:	d102      	bne.n	229a4 <gmtime_r+0x190>
   2299e:	fb0e 4417 	mls	r4, lr, r7, r4
   229a2:	b93c      	cbnz	r4, 229b4 <gmtime_r+0x1a0>
   229a4:	f5b2 7fb6 	cmp.w	r2, #364	; 0x16c
   229a8:	bf8c      	ite	hi
   229aa:	2200      	movhi	r2, #0
   229ac:	2201      	movls	r2, #1
   229ae:	333b      	adds	r3, #59	; 0x3b
   229b0:	4413      	add	r3, r2
   229b2:	e7ca      	b.n	2294a <gmtime_r+0x136>
   229b4:	2201      	movs	r2, #1
   229b6:	e7fa      	b.n	229ae <gmtime_r+0x19a>
   229b8:	fffeae81 	.word	0xfffeae81
   229bc:	00015180 	.word	0x00015180
   229c0:	fffeae80 	.word	0xfffeae80
   229c4:	000afa6c 	.word	0x000afa6c
   229c8:	0008bfbc 	.word	0x0008bfbc
   229cc:	00023ab1 	.word	0x00023ab1
   229d0:	fffdc54f 	.word	0xfffdc54f
   229d4:	00023ab0 	.word	0x00023ab0

000229d8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   229d8:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   229da:	4b09      	ldr	r3, [pc, #36]	; (22a00 <gpio_nrfx_init+0x28>)
   229dc:	781a      	ldrb	r2, [r3, #0]
   229de:	b96a      	cbnz	r2, 229fc <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   229e0:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   229e2:	202f      	movs	r0, #47	; 0x2f
		gpio_initialized = true;
   229e4:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   229e6:	2105      	movs	r1, #5
   229e8:	f7ff f8a4 	bl	21b34 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   229ec:	202f      	movs	r0, #47	; 0x2f
   229ee:	f7ff f883 	bl	21af8 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   229f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   229f6:	4b03      	ldr	r3, [pc, #12]	; (22a04 <gpio_nrfx_init+0x2c>)
   229f8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   229fc:	2000      	movs	r0, #0
   229fe:	bd08      	pop	{r3, pc}
   22a00:	200096ba 	.word	0x200096ba
   22a04:	4002f000 	.word	0x4002f000

00022a08 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   22a08:	4b2d      	ldr	r3, [pc, #180]	; (22ac0 <gpio_nrfx_config+0xb8>)
{
   22a0a:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22a0c:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   22a0e:	482d      	ldr	r0, [pc, #180]	; (22ac4 <gpio_nrfx_config+0xbc>)
   22a10:	4013      	ands	r3, r2
   22a12:	4283      	cmp	r3, r0
   22a14:	d045      	beq.n	22aa2 <gpio_nrfx_config+0x9a>
   22a16:	d80d      	bhi.n	22a34 <gpio_nrfx_config+0x2c>
   22a18:	2b06      	cmp	r3, #6
   22a1a:	d015      	beq.n	22a48 <gpio_nrfx_config+0x40>
   22a1c:	d805      	bhi.n	22a2a <gpio_nrfx_config+0x22>
   22a1e:	b19b      	cbz	r3, 22a48 <gpio_nrfx_config+0x40>
   22a20:	2b02      	cmp	r3, #2
   22a22:	d040      	beq.n	22aa6 <gpio_nrfx_config+0x9e>
   22a24:	f06f 0015 	mvn.w	r0, #21
   22a28:	e03a      	b.n	22aa0 <gpio_nrfx_config+0x98>
   22a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   22a2e:	d1f9      	bne.n	22a24 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   22a30:	2301      	movs	r3, #1
   22a32:	e009      	b.n	22a48 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   22a34:	4824      	ldr	r0, [pc, #144]	; (22ac8 <gpio_nrfx_config+0xc0>)
   22a36:	4283      	cmp	r3, r0
   22a38:	d037      	beq.n	22aaa <gpio_nrfx_config+0xa2>
   22a3a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   22a3e:	d036      	beq.n	22aae <gpio_nrfx_config+0xa6>
   22a40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   22a44:	d1ee      	bne.n	22a24 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   22a46:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   22a48:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_PULLUP;
   22a4a:	bf4c      	ite	mi
   22a4c:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
   22a4e:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   22a52:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   22a56:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   22a58:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   22a5c:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   22a60:	d506      	bpl.n	22a70 <gpio_nrfx_config+0x68>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   22a62:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22a66:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   22a68:	d023      	beq.n	22ab2 <gpio_nrfx_config+0xaa>
			nrf_gpio_port_out_set(reg, BIT(pin));
   22a6a:	2201      	movs	r2, #1
   22a6c:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   22a6e:	60ba      	str	r2, [r7, #8]
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   22a70:	7a27      	ldrb	r7, [r4, #8]
        case 1: return NRF_P1;
   22a72:	4a16      	ldr	r2, [pc, #88]	; (22acc <gpio_nrfx_config+0xc4>)
   22a74:	4c16      	ldr	r4, [pc, #88]	; (22ad0 <gpio_nrfx_config+0xc8>)
    *p_pin = pin_number & 0x1F;
   22a76:	f001 011f 	and.w	r1, r1, #31
        case 1: return NRF_P1;
   22a7a:	2f01      	cmp	r7, #1
   22a7c:	bf08      	it	eq
   22a7e:	4614      	moveq	r4, r2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   22a80:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
	return 0;
   22a84:	2000      	movs	r0, #0
   22a86:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   22a8a:	f8d1 4200 	ldr.w	r4, [r1, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   22a8e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   22a92:	f004 44e0 	and.w	r4, r4, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   22a96:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   22a9a:	4323      	orrs	r3, r4
    reg->PIN_CNF[pin_number] = cnf;
   22a9c:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
   22aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   22aa2:	2307      	movs	r3, #7
   22aa4:	e7d0      	b.n	22a48 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   22aa6:	2304      	movs	r3, #4
   22aa8:	e7ce      	b.n	22a48 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   22aaa:	2305      	movs	r3, #5
   22aac:	e7cc      	b.n	22a48 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   22aae:	2303      	movs	r3, #3
   22ab0:	e7ca      	b.n	22a48 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   22ab2:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   22ab4:	bf42      	ittt	mi
   22ab6:	2201      	movmi	r2, #1
   22ab8:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   22aba:	60fa      	strmi	r2, [r7, #12]
}
   22abc:	e7d8      	b.n	22a70 <gpio_nrfx_config+0x68>
   22abe:	bf00      	nop
   22ac0:	00f00006 	.word	0x00f00006
   22ac4:	00100006 	.word	0x00100006
   22ac8:	00400002 	.word	0x00400002
   22acc:	40842800 	.word	0x40842800
   22ad0:	40842500 	.word	0x40842500

00022ad4 <nrf_gpio_cfg_sense_set>:
{
   22ad4:	b510      	push	{r4, lr}
        case 1: return NRF_P1;
   22ad6:	4b09      	ldr	r3, [pc, #36]	; (22afc <nrf_gpio_cfg_sense_set+0x28>)
   22ad8:	4c09      	ldr	r4, [pc, #36]	; (22b00 <nrf_gpio_cfg_sense_set+0x2c>)
    *p_pin = pin_number & 0x1F;
   22ada:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   22ade:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   22ae0:	2801      	cmp	r0, #1
   22ae2:	bf08      	it	eq
   22ae4:	4623      	moveq	r3, r4
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   22ae6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   22aea:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   22aee:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   22af2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   22af6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
   22afa:	bd10      	pop	{r4, pc}
   22afc:	40842500 	.word	0x40842500
   22b00:	40842800 	.word	0x40842800

00022b04 <check_level_trigger_pins>:
{
   22b04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
   22b08:	6903      	ldr	r3, [r0, #16]
{
   22b0a:	4688      	mov	r8, r1
	out &= ~data->trig_edge & ~data->double_edge;
   22b0c:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
	uint32_t out = data->pin_int_en;
   22b10:	68de      	ldr	r6, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   22b12:	430a      	orrs	r2, r1
   22b14:	ea26 0602 	bic.w	r6, r6, r2
	uint32_t check_pins = level_pins;
   22b18:	4637      	mov	r7, r6
	uint32_t bit = 1U << pin;
   22b1a:	2401      	movs	r4, #1
	uint32_t pin = 0U;
   22b1c:	f04f 0900 	mov.w	r9, #0
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   22b20:	f8d0 a004 	ldr.w	sl, [r0, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   22b24:	691b      	ldr	r3, [r3, #16]
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   22b26:	f8da 2004 	ldr.w	r2, [sl, #4]
        case 1: return NRF_P1;
   22b2a:	f8df b068 	ldr.w	fp, [pc, #104]	; 22b94 <check_level_trigger_pins+0x90>
    return p_reg->IN;
   22b2e:	6915      	ldr	r5, [r2, #16]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   22b30:	405d      	eors	r5, r3
        case 1: return NRF_P1;
   22b32:	4b17      	ldr	r3, [pc, #92]	; (22b90 <check_level_trigger_pins+0x8c>)
	uint32_t out = pin_states & level_pins;
   22b34:	ea26 0505 	bic.w	r5, r6, r5
	while (check_pins) {
   22b38:	b917      	cbnz	r7, 22b40 <check_level_trigger_pins+0x3c>
}
   22b3a:	4628      	mov	r0, r5
   22b3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
   22b40:	423c      	tst	r4, r7
   22b42:	d020      	beq.n	22b86 <check_level_trigger_pins+0x82>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   22b44:	f89a 2008 	ldrb.w	r2, [sl, #8]
   22b48:	f009 001f 	and.w	r0, r9, #31
			if (!(level_pins & bit)) {
   22b4c:	4234      	tst	r4, r6
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   22b4e:	ea40 1042 	orr.w	r0, r0, r2, lsl #5
			if (!(level_pins & bit)) {
   22b52:	d112      	bne.n	22b7a <check_level_trigger_pins+0x76>
    return pin_number >> 5;
   22b54:	0941      	lsrs	r1, r0, #5
        case 1: return NRF_P1;
   22b56:	2901      	cmp	r1, #1
   22b58:	bf14      	ite	ne
   22b5a:	4659      	movne	r1, fp
   22b5c:	4619      	moveq	r1, r3
    *p_pin = pin_number & 0x1F;
   22b5e:	f000 021f 	and.w	r2, r0, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   22b62:	3280      	adds	r2, #128	; 0x80
   22b64:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   22b68:	f3c2 4201 	ubfx	r2, r2, #16, #2
				if (high) {
   22b6c:	2a02      	cmp	r2, #2
					*sense_levels |= bit;
   22b6e:	bf02      	ittt	eq
   22b70:	f8d8 2000 	ldreq.w	r2, [r8]
   22b74:	4322      	orreq	r2, r4
   22b76:	f8c8 2000 	streq.w	r2, [r8]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   22b7a:	2100      	movs	r1, #0
   22b7c:	f7ff ffaa 	bl	22ad4 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
   22b80:	4b03      	ldr	r3, [pc, #12]	; (22b90 <check_level_trigger_pins+0x8c>)
   22b82:	ea27 0704 	bic.w	r7, r7, r4
		++pin;
   22b86:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   22b8a:	0064      	lsls	r4, r4, #1
   22b8c:	e7d4      	b.n	22b38 <check_level_trigger_pins+0x34>
   22b8e:	bf00      	nop
   22b90:	40842800 	.word	0x40842800
   22b94:	40842500 	.word	0x40842500

00022b98 <gpio_nrfx_pin_interrupt_configure>:
{
   22b98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22b9a:	460e      	mov	r6, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   22b9c:	6841      	ldr	r1, [r0, #4]
   22b9e:	f006 051f 	and.w	r5, r6, #31
   22ba2:	7a09      	ldrb	r1, [r1, #8]
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   22ba4:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
	struct gpio_nrfx_data *data = get_port_data(port);
   22ba8:	6907      	ldr	r7, [r0, #16]
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   22baa:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
   22bae:	d111      	bne.n	22bd4 <gpio_nrfx_pin_interrupt_configure+0x3c>
        case 1: return NRF_P1;
   22bb0:	4c5e      	ldr	r4, [pc, #376]	; (22d2c <gpio_nrfx_pin_interrupt_configure+0x194>)
   22bb2:	f8df c188 	ldr.w	ip, [pc, #392]	; 22d3c <gpio_nrfx_pin_interrupt_configure+0x1a4>
    return pin_number >> 5;
   22bb6:	0968      	lsrs	r0, r5, #5
        case 1: return NRF_P1;
   22bb8:	2801      	cmp	r0, #1
   22bba:	bf14      	ite	ne
   22bbc:	4620      	movne	r0, r4
   22bbe:	4660      	moveq	r0, ip
    *p_pin = pin_number & 0x1F;
   22bc0:	f005 011f 	and.w	r1, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   22bc4:	3180      	adds	r1, #128	; 0x80
   22bc6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   22bca:	07c8      	lsls	r0, r1, #31
   22bcc:	d507      	bpl.n	22bde <gpio_nrfx_pin_interrupt_configure+0x46>
		return -ENOTSUP;
   22bce:	f06f 0085 	mvn.w	r0, #133	; 0x85
   22bd2:	e091      	b.n	22cf8 <gpio_nrfx_pin_interrupt_configure+0x160>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   22bd4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   22bd8:	68f9      	ldr	r1, [r7, #12]
   22bda:	f000 808f 	beq.w	22cfc <gpio_nrfx_pin_interrupt_configure+0x164>
   22bde:	2101      	movs	r1, #1
   22be0:	68f8      	ldr	r0, [r7, #12]
   22be2:	40b1      	lsls	r1, r6
   22be4:	4301      	orrs	r1, r0
   22be6:	60f9      	str	r1, [r7, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   22be8:	2101      	movs	r1, #1
   22bea:	6978      	ldr	r0, [r7, #20]
   22bec:	40b1      	lsls	r1, r6
   22bee:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   22bf2:	bf0c      	ite	eq
   22bf4:	4308      	orreq	r0, r1
   22bf6:	4388      	bicne	r0, r1
   22bf8:	6178      	str	r0, [r7, #20]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   22bfa:	2000      	movs	r0, #0
   22bfc:	69ba      	ldr	r2, [r7, #24]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   22bfe:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   22c02:	bf0c      	ite	eq
   22c04:	430a      	orreq	r2, r1
   22c06:	438a      	bicne	r2, r1
   22c08:	61ba      	str	r2, [r7, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   22c0a:	693a      	ldr	r2, [r7, #16]
   22c0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   22c10:	bf0c      	ite	eq
   22c12:	4311      	orreq	r1, r2
   22c14:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   22c18:	4a45      	ldr	r2, [pc, #276]	; (22d30 <gpio_nrfx_pin_interrupt_configure+0x198>)
   22c1a:	6139      	str	r1, [r7, #16]
   22c1c:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
   22c20:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   22c22:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   22c26:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   22c2a:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   22c2e:	428d      	cmp	r5, r1
   22c30:	d169      	bne.n	22d06 <gpio_nrfx_pin_interrupt_configure+0x16e>
		    && (intenset & BIT(i))) {
   22c32:	fa23 f100 	lsr.w	r1, r3, r0
   22c36:	07c9      	lsls	r1, r1, #31
   22c38:	d565      	bpl.n	22d06 <gpio_nrfx_pin_interrupt_configure+0x16e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   22c3a:	0083      	lsls	r3, r0, #2
   22c3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   22c40:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   22c44:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   22c48:	f021 0101 	bic.w	r1, r1, #1
   22c4c:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   22c50:	2301      	movs	r3, #1
   22c52:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   22c54:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   22c58:	b2c0      	uxtb	r0, r0
   22c5a:	f000 fc85 	bl	23568 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   22c5e:	4628      	mov	r0, r5
   22c60:	2100      	movs	r1, #0
   22c62:	f7ff ff37 	bl	22ad4 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   22c66:	68f8      	ldr	r0, [r7, #12]
   22c68:	40f0      	lsrs	r0, r6
   22c6a:	f010 0001 	ands.w	r0, r0, #1
   22c6e:	d043      	beq.n	22cf8 <gpio_nrfx_pin_interrupt_configure+0x160>
		if (data->trig_edge & BIT(pin)) {
   22c70:	6978      	ldr	r0, [r7, #20]
   22c72:	40f0      	lsrs	r0, r6
   22c74:	f010 0401 	ands.w	r4, r0, #1
   22c78:	d04c      	beq.n	22d14 <gpio_nrfx_pin_interrupt_configure+0x17c>
				if (data->double_edge & BIT(pin)) {
   22c7a:	69bb      	ldr	r3, [r7, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   22c7c:	f10d 0007 	add.w	r0, sp, #7
				if (data->double_edge & BIT(pin)) {
   22c80:	40f3      	lsrs	r3, r6
   22c82:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   22c84:	bf57      	itett	pl
   22c86:	6939      	ldrpl	r1, [r7, #16]
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
   22c88:	2603      	movmi	r6, #3
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   22c8a:	fa21 f606 	lsrpl.w	r6, r1, r6
   22c8e:	f006 0601 	andpl.w	r6, r6, #1
   22c92:	bf5c      	itt	pl
   22c94:	f1c6 0602 	rsbpl	r6, r6, #2
   22c98:	b2f6      	uxtbpl	r6, r6
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   22c9a:	f000 fc87 	bl	235ac <nrfx_gpiote_channel_alloc>
   22c9e:	4b25      	ldr	r3, [pc, #148]	; (22d34 <gpio_nrfx_pin_interrupt_configure+0x19c>)
   22ca0:	4298      	cmp	r0, r3
   22ca2:	d134      	bne.n	22d0e <gpio_nrfx_pin_interrupt_configure+0x176>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   22ca4:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   22ca8:	022d      	lsls	r5, r5, #8
   22caa:	008b      	lsls	r3, r1, #2
   22cac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   22cb0:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   22cb4:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   22cb8:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   22cbc:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
   22cc0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   22cc4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   22cc8:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   22ccc:	0088      	lsls	r0, r1, #2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   22cce:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
   22cd0:	4a19      	ldr	r2, [pc, #100]	; (22d38 <gpio_nrfx_pin_interrupt_configure+0x1a0>)
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   22cd2:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    return ((uint32_t)p_reg + event);
   22cd6:	4402      	add	r2, r0
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   22cd8:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   22cda:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   22cde:	6010      	str	r0, [r2, #0]
   22ce0:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   22ce2:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   22ce6:	f042 0201 	orr.w	r2, r2, #1
   22cea:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   22cee:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
   22cf0:	4a0f      	ldr	r2, [pc, #60]	; (22d30 <gpio_nrfx_pin_interrupt_configure+0x198>)
   22cf2:	408b      	lsls	r3, r1
   22cf4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   22cf8:	b003      	add	sp, #12
   22cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   22cfc:	2001      	movs	r0, #1
   22cfe:	40b0      	lsls	r0, r6
   22d00:	ea21 0100 	bic.w	r1, r1, r0
   22d04:	e76f      	b.n	22be6 <gpio_nrfx_pin_interrupt_configure+0x4e>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   22d06:	3001      	adds	r0, #1
   22d08:	2808      	cmp	r0, #8
   22d0a:	d18a      	bne.n	22c22 <gpio_nrfx_pin_interrupt_configure+0x8a>
   22d0c:	e7a7      	b.n	22c5e <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
   22d0e:	f06f 0012 	mvn.w	r0, #18
   22d12:	e7f1      	b.n	22cf8 <gpio_nrfx_pin_interrupt_configure+0x160>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   22d14:	6939      	ldr	r1, [r7, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   22d16:	4628      	mov	r0, r5
	if ((BIT(pin) & data->int_active_level) != 0U) {
   22d18:	40f1      	lsrs	r1, r6
   22d1a:	f001 0101 	and.w	r1, r1, #1
   22d1e:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   22d22:	b2c9      	uxtb	r1, r1
   22d24:	f7ff fed6 	bl	22ad4 <nrf_gpio_cfg_sense_set>
	int res = 0;
   22d28:	4620      	mov	r0, r4
   22d2a:	e7e5      	b.n	22cf8 <gpio_nrfx_pin_interrupt_configure+0x160>
   22d2c:	40842500 	.word	0x40842500
   22d30:	4002f000 	.word	0x4002f000
   22d34:	0bad0000 	.word	0x0bad0000
   22d38:	4002f100 	.word	0x4002f100
   22d3c:	40842800 	.word	0x40842800

00022d40 <gpiote_event_handler>:
{
   22d40:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   22d42:	2400      	movs	r4, #0
{
   22d44:	b085      	sub	sp, #20
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   22d46:	e9cd 4400 	strd	r4, r4, [sp]
	uint32_t sense_levels[GPIO_COUNT] = {0};
   22d4a:	e9cd 4402 	strd	r4, r4, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22d4e:	4e25      	ldr	r6, [pc, #148]	; (22de4 <gpiote_event_handler+0xa4>)
   22d50:	6835      	ldr	r5, [r6, #0]
	if (port_event) {
   22d52:	b15d      	cbz	r5, 22d6c <gpiote_event_handler+0x2c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
   22d54:	a902      	add	r1, sp, #8
   22d56:	4824      	ldr	r0, [pc, #144]	; (22de8 <gpiote_event_handler+0xa8>)
   22d58:	f7ff fed4 	bl	22b04 <check_level_trigger_pins>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
   22d5c:	a903      	add	r1, sp, #12
		fired_triggers[0] =
   22d5e:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
   22d60:	4822      	ldr	r0, [pc, #136]	; (22dec <gpiote_event_handler+0xac>)
   22d62:	f7ff fecf 	bl	22b04 <check_level_trigger_pins>
		fired_triggers[1] =
   22d66:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   22d68:	6034      	str	r4, [r6, #0]
   22d6a:	6833      	ldr	r3, [r6, #0]
{
   22d6c:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   22d6e:	2601      	movs	r6, #1
   22d70:	469c      	mov	ip, r3
    return p_reg->INTENSET & mask;
   22d72:	4c1f      	ldr	r4, [pc, #124]	; (22df0 <gpiote_event_handler+0xb0>)
   22d74:	481f      	ldr	r0, [pc, #124]	; (22df4 <gpiote_event_handler+0xb4>)
   22d76:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
   22d7a:	fa06 f103 	lsl.w	r1, r6, r3
   22d7e:	4211      	tst	r1, r2
   22d80:	d018      	beq.n	22db4 <gpiote_event_handler+0x74>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22d82:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
   22d86:	b1aa      	cbz	r2, 22db4 <gpiote_event_handler+0x74>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   22d88:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   22d8c:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   22d90:	af04      	add	r7, sp, #16
   22d92:	f3c2 3140 	ubfx	r1, r2, #13, #1
   22d96:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   22d9a:	f851 7c10 	ldr.w	r7, [r1, #-16]
   22d9e:	f3c2 2204 	ubfx	r2, r2, #8, #5
   22da2:	fa06 f202 	lsl.w	r2, r6, r2
   22da6:	433a      	orrs	r2, r7
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   22da8:	f840 c023 	str.w	ip, [r0, r3, lsl #2]
   22dac:	f841 2c10 	str.w	r2, [r1, #-16]
   22db0:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   22db4:	3301      	adds	r3, #1
   22db6:	2b08      	cmp	r3, #8
   22db8:	d1dd      	bne.n	22d76 <gpiote_event_handler+0x36>
	if (fired_triggers[0]) {
   22dba:	9a00      	ldr	r2, [sp, #0]
   22dbc:	b11a      	cbz	r2, 22dc6 <gpiote_event_handler+0x86>
	gpio_fire_callbacks(list, port, pins);
   22dbe:	490a      	ldr	r1, [pc, #40]	; (22de8 <gpiote_event_handler+0xa8>)
   22dc0:	480d      	ldr	r0, [pc, #52]	; (22df8 <gpiote_event_handler+0xb8>)
   22dc2:	f004 fce3 	bl	2778c <gpio_fire_callbacks>
	if (fired_triggers[1]) {
   22dc6:	9a01      	ldr	r2, [sp, #4]
   22dc8:	b11a      	cbz	r2, 22dd2 <gpiote_event_handler+0x92>
	gpio_fire_callbacks(list, port, pins);
   22dca:	4908      	ldr	r1, [pc, #32]	; (22dec <gpiote_event_handler+0xac>)
   22dcc:	480b      	ldr	r0, [pc, #44]	; (22dfc <gpiote_event_handler+0xbc>)
   22dce:	f004 fcdd 	bl	2778c <gpio_fire_callbacks>
	if (port_event) {
   22dd2:	b12d      	cbz	r5, 22de0 <gpiote_event_handler+0xa0>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   22dd4:	4804      	ldr	r0, [pc, #16]	; (22de8 <gpiote_event_handler+0xa8>)
   22dd6:	f004 fd3c 	bl	27852 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   22dda:	4804      	ldr	r0, [pc, #16]	; (22dec <gpiote_event_handler+0xac>)
   22ddc:	f004 fd39 	bl	27852 <cfg_level_pins>
}
   22de0:	b005      	add	sp, #20
   22de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22de4:	4002f17c 	.word	0x4002f17c
   22de8:	20008124 	.word	0x20008124
   22dec:	2000813c 	.word	0x2000813c
   22df0:	4002f000 	.word	0x4002f000
   22df4:	4002f100 	.word	0x4002f100
   22df8:	20008d88 	.word	0x20008d88
   22dfc:	20008da4 	.word	0x20008da4

00022e00 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   22e00:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   22e02:	794b      	ldrb	r3, [r1, #5]
   22e04:	2b01      	cmp	r3, #1
   22e06:	d02c      	beq.n	22e62 <uarte_nrfx_configure+0x62>
   22e08:	2b03      	cmp	r3, #3
   22e0a:	d127      	bne.n	22e5c <uarte_nrfx_configure+0x5c>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   22e0c:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   22e0e:	798b      	ldrb	r3, [r1, #6]
   22e10:	2b03      	cmp	r3, #3
   22e12:	d123      	bne.n	22e5c <uarte_nrfx_configure+0x5c>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   22e14:	79cd      	ldrb	r5, [r1, #7]
   22e16:	b12d      	cbz	r5, 22e24 <uarte_nrfx_configure+0x24>
   22e18:	2d01      	cmp	r5, #1
   22e1a:	d11f      	bne.n	22e5c <uarte_nrfx_configure+0x5c>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   22e1c:	6843      	ldr	r3, [r0, #4]
   22e1e:	685b      	ldr	r3, [r3, #4]
   22e20:	079b      	lsls	r3, r3, #30
   22e22:	d01b      	beq.n	22e5c <uarte_nrfx_configure+0x5c>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   22e24:	790a      	ldrb	r2, [r1, #4]
   22e26:	2a01      	cmp	r2, #1
   22e28:	d01d      	beq.n	22e66 <uarte_nrfx_configure+0x66>
   22e2a:	2a02      	cmp	r2, #2
   22e2c:	d01f      	beq.n	22e6e <uarte_nrfx_configure+0x6e>
   22e2e:	b9aa      	cbnz	r2, 22e5c <uarte_nrfx_configure+0x5c>
   22e30:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   22e32:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   22e34:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
   22e36:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   22e3a:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
   22e3c:	d06e      	beq.n	22f1c <uarte_nrfx_configure+0x11c>
   22e3e:	d833      	bhi.n	22ea8 <uarte_nrfx_configure+0xa8>
   22e40:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   22e44:	d06d      	beq.n	22f22 <uarte_nrfx_configure+0x122>
   22e46:	d81c      	bhi.n	22e82 <uarte_nrfx_configure+0x82>
   22e48:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   22e4c:	d06b      	beq.n	22f26 <uarte_nrfx_configure+0x126>
   22e4e:	d810      	bhi.n	22e72 <uarte_nrfx_configure+0x72>
   22e50:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   22e54:	d06a      	beq.n	22f2c <uarte_nrfx_configure+0x12c>
   22e56:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   22e5a:	d06a      	beq.n	22f32 <uarte_nrfx_configure+0x132>
   22e5c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   22e60:	e05b      	b.n	22f1a <uarte_nrfx_configure+0x11a>
	switch (cfg->stop_bits) {
   22e62:	2700      	movs	r7, #0
   22e64:	e7d3      	b.n	22e0e <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   22e66:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   22e6a:	220e      	movs	r2, #14
   22e6c:	e7e1      	b.n	22e32 <uarte_nrfx_configure+0x32>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   22e6e:	2400      	movs	r4, #0
   22e70:	e7fb      	b.n	22e6a <uarte_nrfx_configure+0x6a>
	switch (baudrate) {
   22e72:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   22e76:	d05f      	beq.n	22f38 <uarte_nrfx_configure+0x138>
   22e78:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   22e7c:	d1ee      	bne.n	22e5c <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   22e7e:	4b39      	ldr	r3, [pc, #228]	; (22f64 <uarte_nrfx_configure+0x164>)
   22e80:	e03e      	b.n	22f00 <uarte_nrfx_configure+0x100>
	switch (baudrate) {
   22e82:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   22e86:	d05a      	beq.n	22f3e <uarte_nrfx_configure+0x13e>
   22e88:	d807      	bhi.n	22e9a <uarte_nrfx_configure+0x9a>
   22e8a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   22e8e:	d058      	beq.n	22f42 <uarte_nrfx_configure+0x142>
   22e90:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   22e94:	d1e2      	bne.n	22e5c <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   22e96:	4b34      	ldr	r3, [pc, #208]	; (22f68 <uarte_nrfx_configure+0x168>)
   22e98:	e032      	b.n	22f00 <uarte_nrfx_configure+0x100>
	switch (baudrate) {
   22e9a:	f647 2c12 	movw	ip, #31250	; 0x7a12
   22e9e:	4563      	cmp	r3, ip
   22ea0:	d1dc      	bne.n	22e5c <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   22ea2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   22ea6:	e02b      	b.n	22f00 <uarte_nrfx_configure+0x100>
	switch (baudrate) {
   22ea8:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   22eac:	d04b      	beq.n	22f46 <uarte_nrfx_configure+0x146>
   22eae:	d813      	bhi.n	22ed8 <uarte_nrfx_configure+0xd8>
   22eb0:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   22eb4:	d04a      	beq.n	22f4c <uarte_nrfx_configure+0x14c>
   22eb6:	d809      	bhi.n	22ecc <uarte_nrfx_configure+0xcc>
   22eb8:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
   22ebc:	4563      	cmp	r3, ip
   22ebe:	d047      	beq.n	22f50 <uarte_nrfx_configure+0x150>
   22ec0:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   22ec4:	d1ca      	bne.n	22e5c <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   22ec6:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   22eca:	e019      	b.n	22f00 <uarte_nrfx_configure+0x100>
	switch (baudrate) {
   22ecc:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   22ed0:	d1c4      	bne.n	22e5c <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   22ed2:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   22ed6:	e013      	b.n	22f00 <uarte_nrfx_configure+0x100>
	switch (baudrate) {
   22ed8:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   22edc:	d03b      	beq.n	22f56 <uarte_nrfx_configure+0x156>
   22ede:	d809      	bhi.n	22ef4 <uarte_nrfx_configure+0xf4>
   22ee0:	f8df c098 	ldr.w	ip, [pc, #152]	; 22f7c <uarte_nrfx_configure+0x17c>
   22ee4:	4563      	cmp	r3, ip
   22ee6:	d039      	beq.n	22f5c <uarte_nrfx_configure+0x15c>
   22ee8:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   22eec:	d1b6      	bne.n	22e5c <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   22eee:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   22ef2:	e005      	b.n	22f00 <uarte_nrfx_configure+0x100>
	switch (baudrate) {
   22ef4:	f8df c088 	ldr.w	ip, [pc, #136]	; 22f80 <uarte_nrfx_configure+0x180>
   22ef8:	4563      	cmp	r3, ip
   22efa:	d1af      	bne.n	22e5c <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   22efc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   22f00:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   22f04:	6903      	ldr	r3, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
   22f06:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
   22f08:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
   22f0a:	4322      	orrs	r2, r4
   22f0c:	3304      	adds	r3, #4
   22f0e:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   22f10:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
   22f14:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   22f18:	2000      	movs	r0, #0
}
   22f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   22f1c:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   22f20:	e7ee      	b.n	22f00 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   22f22:	4b12      	ldr	r3, [pc, #72]	; (22f6c <uarte_nrfx_configure+0x16c>)
   22f24:	e7ec      	b.n	22f00 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   22f26:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   22f2a:	e7e9      	b.n	22f00 <uarte_nrfx_configure+0x100>
		nrf_baudrate = 0x00014000;
   22f2c:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   22f30:	e7e6      	b.n	22f00 <uarte_nrfx_configure+0x100>
	switch (baudrate) {
   22f32:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   22f36:	e7e3      	b.n	22f00 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   22f38:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   22f3c:	e7e0      	b.n	22f00 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   22f3e:	4b0c      	ldr	r3, [pc, #48]	; (22f70 <uarte_nrfx_configure+0x170>)
   22f40:	e7de      	b.n	22f00 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   22f42:	4b0c      	ldr	r3, [pc, #48]	; (22f74 <uarte_nrfx_configure+0x174>)
   22f44:	e7dc      	b.n	22f00 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   22f46:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   22f4a:	e7d9      	b.n	22f00 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   22f4c:	4b0a      	ldr	r3, [pc, #40]	; (22f78 <uarte_nrfx_configure+0x178>)
   22f4e:	e7d7      	b.n	22f00 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   22f50:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   22f54:	e7d4      	b.n	22f00 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   22f56:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   22f5a:	e7d1      	b.n	22f00 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   22f5c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   22f60:	e7ce      	b.n	22f00 <uarte_nrfx_configure+0x100>
   22f62:	bf00      	nop
   22f64:	0013b000 	.word	0x0013b000
   22f68:	004ea000 	.word	0x004ea000
   22f6c:	00275000 	.word	0x00275000
   22f70:	0075c000 	.word	0x0075c000
   22f74:	003af000 	.word	0x003af000
   22f78:	013a9000 	.word	0x013a9000
   22f7c:	0003d090 	.word	0x0003d090
   22f80:	000f4240 	.word	0x000f4240

00022f84 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   22f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22f86:	4605      	mov	r5, r0
   22f88:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
   22f8a:	6906      	ldr	r6, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   22f8c:	f004 fe70 	bl	27c70 <k_is_in_isr>
   22f90:	b910      	cbnz	r0, 22f98 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   22f92:	4b20      	ldr	r3, [pc, #128]	; (23014 <uarte_nrfx_poll_out+0x90>)
	int key;

	if (isr_mode) {
   22f94:	781b      	ldrb	r3, [r3, #0]
   22f96:	b983      	cbnz	r3, 22fba <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   22f98:	f04f 0320 	mov.w	r3, #32
   22f9c:	f3ef 8411 	mrs	r4, BASEPRI
   22fa0:	f383 8811 	msr	BASEPRI, r3
   22fa4:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   22fa8:	4628      	mov	r0, r5
   22faa:	f004 fce5 	bl	27978 <is_tx_ready>
   22fae:	bb28      	cbnz	r0, 22ffc <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   22fb0:	f384 8811 	msr	BASEPRI, r4
   22fb4:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   22fb8:	e7ee      	b.n	22f98 <uarte_nrfx_poll_out+0x14>
{
   22fba:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   22fbc:	4628      	mov	r0, r5
   22fbe:	f004 fcdb 	bl	27978 <is_tx_ready>
   22fc2:	b970      	cbnz	r0, 22fe2 <uarte_nrfx_poll_out+0x5e>
   22fc4:	2001      	movs	r0, #1
   22fc6:	f004 fe02 	bl	27bce <nrfx_busy_wait>
   22fca:	3c01      	subs	r4, #1
   22fcc:	d1f6      	bne.n	22fbc <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
   22fce:	2100      	movs	r1, #0
   22fd0:	2021      	movs	r0, #33	; 0x21
   22fd2:	f001 fb77 	bl	246c4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   22fd6:	e7f0      	b.n	22fba <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   22fd8:	f384 8811 	msr	BASEPRI, r4
   22fdc:	f3bf 8f6f 	isb	sy
}
   22fe0:	e7f5      	b.n	22fce <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   22fe2:	f04f 0320 	mov.w	r3, #32
   22fe6:	f3ef 8411 	mrs	r4, BASEPRI
   22fea:	f383 8811 	msr	BASEPRI, r3
   22fee:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   22ff2:	4628      	mov	r0, r5
   22ff4:	f004 fcc0 	bl	27978 <is_tx_ready>
   22ff8:	2800      	cmp	r0, #0
   22ffa:	d0ed      	beq.n	22fd8 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   22ffc:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
   22ffe:	2201      	movs	r2, #1
   23000:	4628      	mov	r0, r5
	data->char_out = c;
   23002:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
   23006:	f004 fd4a 	bl	27a9e <tx_start>
	__asm__ volatile(
   2300a:	f384 8811 	msr	BASEPRI, r4
   2300e:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   23012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23014:	200096db 	.word	0x200096db

00023018 <nrf_gpio_cfg_input.constprop.0>:
        case 1: return NRF_P1;
   23018:	4b09      	ldr	r3, [pc, #36]	; (23040 <nrf_gpio_cfg_input.constprop.0+0x28>)
   2301a:	490a      	ldr	r1, [pc, #40]	; (23044 <nrf_gpio_cfg_input.constprop.0+0x2c>)
    *p_pin = pin_number & 0x1F;
   2301c:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   23020:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   23022:	2801      	cmp	r0, #1
   23024:	bf08      	it	eq
   23026:	460b      	moveq	r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   23028:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   2302c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   23030:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   23034:	f042 020c 	orr.w	r2, r2, #12
    reg->PIN_CNF[pin_number] = cnf;
   23038:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
   2303c:	4770      	bx	lr
   2303e:	bf00      	nop
   23040:	40842500 	.word	0x40842500
   23044:	40842800 	.word	0x40842800

00023048 <nrf_gpio_pin_set>:
        case 1: return NRF_P1;
   23048:	4b06      	ldr	r3, [pc, #24]	; (23064 <nrf_gpio_pin_set+0x1c>)
   2304a:	4907      	ldr	r1, [pc, #28]	; (23068 <nrf_gpio_pin_set+0x20>)
    *p_pin = pin_number & 0x1F;
   2304c:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   23050:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   23052:	2801      	cmp	r0, #1
   23054:	bf14      	ite	ne
   23056:	4618      	movne	r0, r3
   23058:	4608      	moveq	r0, r1
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2305a:	2301      	movs	r3, #1
   2305c:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2305e:	6083      	str	r3, [r0, #8]
}
   23060:	4770      	bx	lr
   23062:	bf00      	nop
   23064:	40842500 	.word	0x40842500
   23068:	40842800 	.word	0x40842800

0002306c <nrf_gpio_cfg_output>:
        case 1: return NRF_P1;
   2306c:	4b09      	ldr	r3, [pc, #36]	; (23094 <nrf_gpio_cfg_output+0x28>)
   2306e:	490a      	ldr	r1, [pc, #40]	; (23098 <nrf_gpio_cfg_output+0x2c>)
    *p_pin = pin_number & 0x1F;
   23070:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   23074:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   23076:	2801      	cmp	r0, #1
   23078:	bf08      	it	eq
   2307a:	460b      	moveq	r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2307c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   23080:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   23084:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   23088:	f042 0203 	orr.w	r2, r2, #3
    reg->PIN_CNF[pin_number] = cnf;
   2308c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
   23090:	4770      	bx	lr
   23092:	bf00      	nop
   23094:	40842500 	.word	0x40842500
   23098:	40842800 	.word	0x40842800

0002309c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   2309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2309e:	4605      	mov	r5, r0
   230a0:	2200      	movs	r2, #0
   230a2:	2101      	movs	r1, #1
   230a4:	2008      	movs	r0, #8
   230a6:	f7fe fd45 	bl	21b34 <z_arm_irq_priority_set>
   230aa:	2008      	movs	r0, #8
   230ac:	f7fe fd24 	bl	21af8 <arch_irq_enable>
	return config->uarte_regs;
   230b0:	686b      	ldr	r3, [r5, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   230b2:	692e      	ldr	r6, [r5, #16]
	return config->uarte_regs;
   230b4:	681c      	ldr	r4, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   230b6:	2300      	movs	r3, #0
        nrf_gpio_pin_set(pin_number);
   230b8:	2014      	movs	r0, #20
   230ba:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
   230be:	6035      	str	r5, [r6, #0]
   230c0:	f7ff ffc2 	bl	23048 <nrf_gpio_pin_set>
	nrf_gpio_cfg_output(config->pseltxd);
   230c4:	2014      	movs	r0, #20
   230c6:	f7ff ffd1 	bl	2306c <nrf_gpio_cfg_output>
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_PULLUP);
   230ca:	2016      	movs	r0, #22
   230cc:	f7ff ffa4 	bl	23018 <nrf_gpio_cfg_input.constprop.0>
    p_reg->PSEL.TXD = pseltxd;
   230d0:	2314      	movs	r3, #20
   230d2:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   230d6:	2316      	movs	r3, #22
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_PULLUP);
   230d8:	2015      	movs	r0, #21
   230da:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
   230de:	f7ff ff9b 	bl	23018 <nrf_gpio_cfg_input.constprop.0>
   230e2:	2013      	movs	r0, #19
   230e4:	f7ff ffb0 	bl	23048 <nrf_gpio_pin_set>
		nrf_gpio_cfg_output(config->pselrts);
   230e8:	2013      	movs	r0, #19
   230ea:	f7ff ffbf 	bl	2306c <nrf_gpio_cfg_output>
    p_reg->PSEL.RTS = pselrts;
   230ee:	2313      	movs	r3, #19
   230f0:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   230f4:	2315      	movs	r3, #21
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   230f6:	6929      	ldr	r1, [r5, #16]
   230f8:	4628      	mov	r0, r5
   230fa:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   230fe:	3104      	adds	r1, #4
   23100:	f7ff fe7e 	bl	22e00 <uarte_nrfx_configure>
	if (err) {
   23104:	4607      	mov	r7, r0
   23106:	2800      	cmp	r0, #0
   23108:	d14e      	bne.n	231a8 <uarte_0_init+0x10c>
	    get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   2310a:	686b      	ldr	r3, [r5, #4]
   2310c:	685b      	ldr	r3, [r3, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   2310e:	071b      	lsls	r3, r3, #28
   23110:	d523      	bpl.n	2315a <uarte_0_init+0xbe>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   23112:	f106 0016 	add.w	r0, r6, #22
   23116:	f000 f9ff 	bl	23518 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   2311a:	4b24      	ldr	r3, [pc, #144]	; (231ac <uarte_0_init+0x110>)
   2311c:	4298      	cmp	r0, r3
   2311e:	d00f      	beq.n	23140 <uarte_0_init+0xa4>
		LOG_ERR("Failed to allocate PPI Channel");
   23120:	4923      	ldr	r1, [pc, #140]	; (231b0 <uarte_0_init+0x114>)
   23122:	680b      	ldr	r3, [r1, #0]
   23124:	0758      	lsls	r0, r3, #29
   23126:	d008      	beq.n	2313a <uarte_0_init+0x9e>
   23128:	4b22      	ldr	r3, [pc, #136]	; (231b4 <uarte_0_init+0x118>)
   2312a:	4823      	ldr	r0, [pc, #140]	; (231b8 <uarte_0_init+0x11c>)
   2312c:	1ac9      	subs	r1, r1, r3
   2312e:	0889      	lsrs	r1, r1, #2
   23130:	0189      	lsls	r1, r1, #6
   23132:	f041 0101 	orr.w	r1, r1, #1
   23136:	f002 fdd8 	bl	25cea <log_0>
		return -EIO;
   2313a:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
   2313e:	e033      	b.n	231a8 <uarte_0_init+0x10c>
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   23140:	7db3      	ldrb	r3, [r6, #22]
   23142:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   23146:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   2314a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   2314e:	2301      	movs	r3, #1
   23150:	7db2      	ldrb	r2, [r6, #22]
   23152:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   23154:	4a19      	ldr	r2, [pc, #100]	; (231bc <uarte_0_init+0x120>)
   23156:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2315a:	2308      	movs	r3, #8
   2315c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23160:	2300      	movs	r3, #0
   23162:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   23166:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   2316a:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2316e:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   23172:	2301      	movs	r3, #1
   23174:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23178:	6023      	str	r3, [r4, #0]
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   2317a:	686b      	ldr	r3, [r5, #4]
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   2317c:	3614      	adds	r6, #20
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   2317e:	685b      	ldr	r3, [r3, #4]
   23180:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
   23182:	bf5c      	itt	pl
   23184:	f44f 7280 	movpl.w	r2, #256	; 0x100
   23188:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2318c:	06db      	lsls	r3, r3, #27
   2318e:	bf44      	itt	mi
   23190:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   23194:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   23198:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2319a:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2319e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   231a2:	2301      	movs	r3, #1
   231a4:	60a3      	str	r3, [r4, #8]
   231a6:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   231a8:	4638      	mov	r0, r7
   231aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   231ac:	0bad0000 	.word	0x0bad0000
   231b0:	20008180 	.word	0x20008180
   231b4:	20008154 	.word	0x20008154
   231b8:	0002cb14 	.word	0x0002cb14
   231bc:	40017000 	.word	0x40017000

000231c0 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   231c0:	b508      	push	{r3, lr}
	z_impl_log_panic();
   231c2:	f7fb fd69 	bl	1ec98 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   231c6:	4908      	ldr	r1, [pc, #32]	; (231e8 <k_sys_fatal_error_handler+0x28>)
   231c8:	680b      	ldr	r3, [r1, #0]
   231ca:	075b      	lsls	r3, r3, #29
   231cc:	d008      	beq.n	231e0 <k_sys_fatal_error_handler+0x20>
   231ce:	4b07      	ldr	r3, [pc, #28]	; (231ec <k_sys_fatal_error_handler+0x2c>)
   231d0:	4807      	ldr	r0, [pc, #28]	; (231f0 <k_sys_fatal_error_handler+0x30>)
   231d2:	1ac9      	subs	r1, r1, r3
   231d4:	0889      	lsrs	r1, r1, #2
   231d6:	0189      	lsls	r1, r1, #6
   231d8:	f041 0101 	orr.w	r1, r1, #1
   231dc:	f002 fd85 	bl	25cea <log_0>
		sys_arch_reboot(0);
   231e0:	2000      	movs	r0, #0
   231e2:	f7ff f8e7 	bl	223b4 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   231e6:	bf00      	nop
   231e8:	20008160 	.word	0x20008160
   231ec:	20008154 	.word	0x20008154
   231f0:	0002cb51 	.word	0x0002cb51

000231f4 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   231f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   231f8:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   231fa:	4c21      	ldr	r4, [pc, #132]	; (23280 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   231fc:	4e21      	ldr	r6, [pc, #132]	; (23284 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   231fe:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   23202:	f8df 9088 	ldr.w	r9, [pc, #136]	; 2328c <check_ext_api_requests+0x98>
{
   23206:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   23208:	45a8      	cmp	r8, r5
   2320a:	d803      	bhi.n	23214 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   2320c:	2000      	movs	r0, #0
   2320e:	b005      	add	sp, #20
   23210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   23214:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23216:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   2321a:	681f      	ldr	r7, [r3, #0]
   2321c:	ab01      	add	r3, sp, #4
   2321e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   23222:	220c      	movs	r2, #12
   23224:	4619      	mov	r1, r3
   23226:	4638      	mov	r0, r7
   23228:	f004 fa29 	bl	2767e <memcmp>
   2322c:	b990      	cbnz	r0, 23254 <check_ext_api_requests+0x60>
   2322e:	b18f      	cbz	r7, 23254 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   23230:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   23232:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   23234:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   23236:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   23238:	4291      	cmp	r1, r2
   2323a:	d10b      	bne.n	23254 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   2323c:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   2323e:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   23240:	4291      	cmp	r1, r2
   23242:	d807      	bhi.n	23254 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   23244:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   23246:	4291      	cmp	r1, r2
   23248:	d904      	bls.n	23254 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   2324a:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   2324c:	695b      	ldr	r3, [r3, #20]
   2324e:	ea32 0303 	bics.w	r3, r2, r3
   23252:	d00a      	beq.n	2326a <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   23254:	6a27      	ldr	r7, [r4, #32]
   23256:	b167      	cbz	r7, 23272 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   23258:	480b      	ldr	r0, [pc, #44]	; (23288 <check_ext_api_requests+0x94>)
   2325a:	f002 f8bb 	bl	253d4 <printk>
			k_panic();
   2325e:	4040      	eors	r0, r0
   23260:	f380 8811 	msr	BASEPRI, r0
   23264:	f04f 0004 	mov.w	r0, #4
   23268:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   2326a:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   2326c:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   2326e:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   23270:	e7ca      	b.n	23208 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   23272:	4648      	mov	r0, r9
   23274:	f002 f8ae 	bl	253d4 <printk>
			*ext_api_req->ext_api = NULL;
   23278:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2327a:	601f      	str	r7, [r3, #0]
   2327c:	e7f5      	b.n	2326a <check_ext_api_requests+0x76>
   2327e:	bf00      	nop
   23280:	0001023c 	.word	0x0001023c
   23284:	00028720 	.word	0x00028720
   23288:	0002cb6e 	.word	0x0002cb6e
   2328c:	0002cb97 	.word	0x0002cb97

00023290 <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   23290:	4b04      	ldr	r3, [pc, #16]	; (232a4 <SystemCoreClockUpdate+0x14>)
   23292:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   23296:	4b04      	ldr	r3, [pc, #16]	; (232a8 <SystemCoreClockUpdate+0x18>)
   23298:	f002 0203 	and.w	r2, r2, #3
   2329c:	40d3      	lsrs	r3, r2
   2329e:	4a03      	ldr	r2, [pc, #12]	; (232ac <SystemCoreClockUpdate+0x1c>)
   232a0:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   232a2:	4770      	bx	lr
   232a4:	40005000 	.word	0x40005000
   232a8:	07a12000 	.word	0x07a12000
   232ac:	200080b0 	.word	0x200080b0

000232b0 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   232b0:	4b04      	ldr	r3, [pc, #16]	; (232c4 <nrfx_clock_init+0x14>)
   232b2:	791a      	ldrb	r2, [r3, #4]
   232b4:	b922      	cbnz	r2, 232c0 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   232b6:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   232b8:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   232ba:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   232bc:	4802      	ldr	r0, [pc, #8]	; (232c8 <nrfx_clock_init+0x18>)
   232be:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   232c0:	4802      	ldr	r0, [pc, #8]	; (232cc <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   232c2:	4770      	bx	lr
   232c4:	20008dc4 	.word	0x20008dc4
   232c8:	0bad0000 	.word	0x0bad0000
   232cc:	0bad000c 	.word	0x0bad000c

000232d0 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   232d0:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   232d2:	2005      	movs	r0, #5
   232d4:	f7fe fc20 	bl	21b18 <arch_irq_is_enabled>
   232d8:	b910      	cbnz	r0, 232e0 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   232da:	2005      	movs	r0, #5
   232dc:	f7fe fc0c 	bl	21af8 <arch_irq_enable>
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
   232e0:	2201      	movs	r2, #1
   232e2:	4b03      	ldr	r3, [pc, #12]	; (232f0 <nrfx_clock_enable+0x20>)
   232e4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   232e8:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   232ec:	bd08      	pop	{r3, pc}
   232ee:	bf00      	nop
   232f0:	40005000 	.word	0x40005000

000232f4 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   232f4:	2803      	cmp	r0, #3
   232f6:	d842      	bhi.n	2337e <nrfx_clock_start+0x8a>
   232f8:	e8df f000 	tbb	[pc, r0]
   232fc:	362a2002 	.word	0x362a2002
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   23300:	4b1f      	ldr	r3, [pc, #124]	; (23380 <nrfx_clock_start+0x8c>)
   23302:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   23306:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   2330a:	f411 3f80 	tst.w	r1, #65536	; 0x10000
   2330e:	4619      	mov	r1, r3
   23310:	d010      	beq.n	23334 <nrfx_clock_start+0x40>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   23312:	f002 0203 	and.w	r2, r2, #3
   23316:	2a02      	cmp	r2, #2
   23318:	d10c      	bne.n	23334 <nrfx_clock_start+0x40>
    p_reg->LFCLKSRC = (uint32_t)(source);
   2331a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2331e:	2200      	movs	r2, #0
   23320:	4b18      	ldr	r3, [pc, #96]	; (23384 <nrfx_clock_start+0x90>)
   23322:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   23324:	2202      	movs	r2, #2
   23326:	681b      	ldr	r3, [r3, #0]
   23328:	4b15      	ldr	r3, [pc, #84]	; (23380 <nrfx_clock_start+0x8c>)
   2332a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2332e:	2201      	movs	r2, #1
   23330:	609a      	str	r2, [r3, #8]
}
   23332:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   23334:	2301      	movs	r3, #1
   23336:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
   2333a:	e7f0      	b.n	2331e <nrfx_clock_start+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2333c:	2200      	movs	r2, #0
   2333e:	4b12      	ldr	r3, [pc, #72]	; (23388 <nrfx_clock_start+0x94>)
   23340:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   23342:	2201      	movs	r2, #1
   23344:	681b      	ldr	r3, [r3, #0]
   23346:	4b0e      	ldr	r3, [pc, #56]	; (23380 <nrfx_clock_start+0x8c>)
   23348:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2334c:	601a      	str	r2, [r3, #0]
}
   2334e:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23350:	2200      	movs	r2, #0
   23352:	4b0e      	ldr	r3, [pc, #56]	; (2338c <nrfx_clock_start+0x98>)
   23354:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   23356:	f44f 7200 	mov.w	r2, #512	; 0x200
   2335a:	681b      	ldr	r3, [r3, #0]
   2335c:	4b08      	ldr	r3, [pc, #32]	; (23380 <nrfx_clock_start+0x8c>)
   2335e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23362:	2201      	movs	r2, #1
   23364:	621a      	str	r2, [r3, #32]
}
   23366:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23368:	2200      	movs	r2, #0
   2336a:	4b09      	ldr	r3, [pc, #36]	; (23390 <nrfx_clock_start+0x9c>)
   2336c:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   2336e:	f44f 7280 	mov.w	r2, #256	; 0x100
   23372:	681b      	ldr	r3, [r3, #0]
   23374:	4b02      	ldr	r3, [pc, #8]	; (23380 <nrfx_clock_start+0x8c>)
   23376:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2337a:	2201      	movs	r2, #1
   2337c:	619a      	str	r2, [r3, #24]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   2337e:	4770      	bx	lr
   23380:	40005000 	.word	0x40005000
   23384:	40005104 	.word	0x40005104
   23388:	40005100 	.word	0x40005100
   2338c:	40005124 	.word	0x40005124
   23390:	40005120 	.word	0x40005120

00023394 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   23394:	b570      	push	{r4, r5, r6, lr}
   23396:	4604      	mov	r4, r0
   23398:	2803      	cmp	r0, #3
   2339a:	d83b      	bhi.n	23414 <nrfx_clock_stop+0x80>
   2339c:	e8df f000 	tbb	[pc, r0]
   233a0:	473b2002 	.word	0x473b2002
    p_reg->INTENCLR = mask;
   233a4:	2202      	movs	r2, #2
   233a6:	4b2b      	ldr	r3, [pc, #172]	; (23454 <nrfx_clock_stop+0xc0>)
   233a8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   233ac:	2200      	movs	r2, #0
   233ae:	f503 7382 	add.w	r3, r3, #260	; 0x104
   233b2:	601a      	str	r2, [r3, #0]
   233b4:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   233b6:	4b28      	ldr	r3, [pc, #160]	; (23458 <nrfx_clock_stop+0xc4>)
   233b8:	2201      	movs	r2, #1
   233ba:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   233be:	4e25      	ldr	r6, [pc, #148]	; (23454 <nrfx_clock_stop+0xc0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   233c0:	601a      	str	r2, [r3, #0]
    switch (domain)
   233c2:	2c02      	cmp	r4, #2
   233c4:	d03f      	beq.n	23446 <nrfx_clock_stop+0xb2>
   233c6:	2c03      	cmp	r4, #3
   233c8:	d040      	beq.n	2344c <nrfx_clock_stop+0xb8>
   233ca:	bb1c      	cbnz	r4, 23414 <nrfx_clock_stop+0x80>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   233cc:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   233d0:	03db      	lsls	r3, r3, #15
   233d2:	d51f      	bpl.n	23414 <nrfx_clock_stop+0x80>
   233d4:	2001      	movs	r0, #1
   233d6:	f004 fbfa 	bl	27bce <nrfx_busy_wait>
   233da:	3d01      	subs	r5, #1
   233dc:	d1f1      	bne.n	233c2 <nrfx_clock_stop+0x2e>
   233de:	e019      	b.n	23414 <nrfx_clock_stop+0x80>
    p_reg->INTENCLR = mask;
   233e0:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   233e2:	2100      	movs	r1, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   233e4:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   233e8:	4a1c      	ldr	r2, [pc, #112]	; (2345c <nrfx_clock_stop+0xc8>)
    p_reg->INTENCLR = mask;
   233ea:	4c1a      	ldr	r4, [pc, #104]	; (23454 <nrfx_clock_stop+0xc0>)
   233ec:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   233f0:	6011      	str	r1, [r2, #0]
   233f2:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   233f4:	4a1a      	ldr	r2, [pc, #104]	; (23460 <nrfx_clock_stop+0xcc>)
   233f6:	6013      	str	r3, [r2, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   233f8:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   233fc:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   23400:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   23404:	03d2      	lsls	r2, r2, #15
   23406:	d505      	bpl.n	23414 <nrfx_clock_stop+0x80>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   23408:	b123      	cbz	r3, 23414 <nrfx_clock_stop+0x80>
   2340a:	2001      	movs	r0, #1
   2340c:	f004 fbdf 	bl	27bce <nrfx_busy_wait>
   23410:	3d01      	subs	r5, #1
   23412:	d1f1      	bne.n	233f8 <nrfx_clock_stop+0x64>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   23414:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
   23416:	f44f 7200 	mov.w	r2, #512	; 0x200
   2341a:	4b0e      	ldr	r3, [pc, #56]	; (23454 <nrfx_clock_stop+0xc0>)
   2341c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23420:	2200      	movs	r2, #0
   23422:	f503 7392 	add.w	r3, r3, #292	; 0x124
   23426:	601a      	str	r2, [r3, #0]
   23428:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2342a:	4b0e      	ldr	r3, [pc, #56]	; (23464 <nrfx_clock_stop+0xd0>)
   2342c:	e7c4      	b.n	233b8 <nrfx_clock_stop+0x24>
    p_reg->INTENCLR = mask;
   2342e:	f44f 7280 	mov.w	r2, #256	; 0x100
   23432:	4b08      	ldr	r3, [pc, #32]	; (23454 <nrfx_clock_stop+0xc0>)
   23434:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23438:	2200      	movs	r2, #0
   2343a:	f503 7390 	add.w	r3, r3, #288	; 0x120
   2343e:	601a      	str	r2, [r3, #0]
   23440:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23442:	4b09      	ldr	r3, [pc, #36]	; (23468 <nrfx_clock_stop+0xd4>)
   23444:	e7b8      	b.n	233b8 <nrfx_clock_stop+0x24>
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   23446:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   2344a:	e7c1      	b.n	233d0 <nrfx_clock_stop+0x3c>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   2344c:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   23450:	e7be      	b.n	233d0 <nrfx_clock_stop+0x3c>
   23452:	bf00      	nop
   23454:	40005000 	.word	0x40005000
   23458:	4000500c 	.word	0x4000500c
   2345c:	40005100 	.word	0x40005100
   23460:	40005004 	.word	0x40005004
   23464:	40005024 	.word	0x40005024
   23468:	4000501c 	.word	0x4000501c

0002346c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2346c:	4b24      	ldr	r3, [pc, #144]	; (23500 <nrfx_power_clock_irq_handler+0x94>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   2346e:	b510      	push	{r4, lr}
   23470:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   23472:	b14a      	cbz	r2, 23488 <nrfx_power_clock_irq_handler+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23474:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
   23476:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23478:	6018      	str	r0, [r3, #0]
   2347a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   2347c:	4b21      	ldr	r3, [pc, #132]	; (23504 <nrfx_power_clock_irq_handler+0x98>)
   2347e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   23482:	4b21      	ldr	r3, [pc, #132]	; (23508 <nrfx_power_clock_irq_handler+0x9c>)
   23484:	681b      	ldr	r3, [r3, #0]
   23486:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   23488:	4b20      	ldr	r3, [pc, #128]	; (2350c <nrfx_power_clock_irq_handler+0xa0>)
   2348a:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   2348c:	b182      	cbz	r2, 234b0 <nrfx_power_clock_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2348e:	2200      	movs	r2, #0
   23490:	601a      	str	r2, [r3, #0]
   23492:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   23494:	4b1b      	ldr	r3, [pc, #108]	; (23504 <nrfx_power_clock_irq_handler+0x98>)
   23496:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2349a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   2349e:	f002 0203 	and.w	r2, r2, #3
   234a2:	2a01      	cmp	r2, #1
   234a4:	f04f 0102 	mov.w	r1, #2
   234a8:	d122      	bne.n	234f0 <nrfx_power_clock_irq_handler+0x84>
    p_reg->LFCLKSRC = (uint32_t)(source);
   234aa:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   234ae:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   234b0:	4b17      	ldr	r3, [pc, #92]	; (23510 <nrfx_power_clock_irq_handler+0xa4>)
   234b2:	681a      	ldr	r2, [r3, #0]
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   234b4:	b15a      	cbz	r2, 234ce <nrfx_power_clock_irq_handler+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   234b6:	2200      	movs	r2, #0
   234b8:	601a      	str	r2, [r3, #0]
    p_reg->INTENCLR = mask;
   234ba:	f44f 7280 	mov.w	r2, #256	; 0x100
   234be:	681b      	ldr	r3, [r3, #0]
   234c0:	4b10      	ldr	r3, [pc, #64]	; (23504 <nrfx_power_clock_irq_handler+0x98>)
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   234c2:	2004      	movs	r0, #4
   234c4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   234c8:	4b0f      	ldr	r3, [pc, #60]	; (23508 <nrfx_power_clock_irq_handler+0x9c>)
   234ca:	681b      	ldr	r3, [r3, #0]
   234cc:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   234ce:	4b11      	ldr	r3, [pc, #68]	; (23514 <nrfx_power_clock_irq_handler+0xa8>)
   234d0:	681a      	ldr	r2, [r3, #0]
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   234d2:	b1a2      	cbz	r2, 234fe <nrfx_power_clock_irq_handler+0x92>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   234d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   234d8:	2200      	movs	r2, #0
   234da:	601a      	str	r2, [r3, #0]
    p_reg->INTENCLR = mask;
   234dc:	f44f 7200 	mov.w	r2, #512	; 0x200
   234e0:	681b      	ldr	r3, [r3, #0]
   234e2:	4b08      	ldr	r3, [pc, #32]	; (23504 <nrfx_power_clock_irq_handler+0x98>)
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   234e4:	2005      	movs	r0, #5
   234e6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   234ea:	4b07      	ldr	r3, [pc, #28]	; (23508 <nrfx_power_clock_irq_handler+0x9c>)
   234ec:	681b      	ldr	r3, [r3, #0]
   234ee:	4718      	bx	r3
   234f0:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   234f4:	4b04      	ldr	r3, [pc, #16]	; (23508 <nrfx_power_clock_irq_handler+0x9c>)
   234f6:	2001      	movs	r0, #1
   234f8:	681b      	ldr	r3, [r3, #0]
   234fa:	4798      	blx	r3
   234fc:	e7d8      	b.n	234b0 <nrfx_power_clock_irq_handler+0x44>
}
   234fe:	bd10      	pop	{r4, pc}
   23500:	40005100 	.word	0x40005100
   23504:	40005000 	.word	0x40005000
   23508:	20008dc4 	.word	0x20008dc4
   2350c:	40005104 	.word	0x40005104
   23510:	40005120 	.word	0x40005120
   23514:	40005124 	.word	0x40005124

00023518 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = 0;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   23518:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   2351a:	f04f 0320 	mov.w	r3, #32
   2351e:	f3ef 8511 	mrs	r5, BASEPRI
   23522:	f383 8811 	msr	BASEPRI, r3
   23526:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code;

    NRFX_CRITICAL_SECTION_ENTER();
    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   2352a:	4a0c      	ldr	r2, [pc, #48]	; (2355c <nrfx_dppi_channel_alloc+0x44>)
   2352c:	6814      	ldr	r4, [r2, #0]
    uint8_t channel = 0;

    if (!remaining_channels)
   2352e:	43e7      	mvns	r7, r4
   23530:	d012      	beq.n	23558 <nrfx_dppi_channel_alloc+0x40>
   23532:	2300      	movs	r3, #0
   23534:	b2d9      	uxtb	r1, r3
        err_code = NRFX_ERROR_NO_MEM;
    }
    else
    {
        // Find first free channel
        while (!(remaining_channels & DPPI_BIT_SET(channel)))
   23536:	fa27 f601 	lsr.w	r6, r7, r1
   2353a:	07f6      	lsls	r6, r6, #31
   2353c:	f103 0301 	add.w	r3, r3, #1
   23540:	d5f8      	bpl.n	23534 <nrfx_dppi_channel_alloc+0x1c>
        {
            channel++;
        }

        m_allocated_channels |= DPPI_BIT_SET(channel);
   23542:	2301      	movs	r3, #1
   23544:	408b      	lsls	r3, r1
   23546:	4323      	orrs	r3, r4
        *p_channel = channel;
   23548:	7001      	strb	r1, [r0, #0]

        err_code = NRFX_SUCCESS;
   2354a:	4805      	ldr	r0, [pc, #20]	; (23560 <nrfx_dppi_channel_alloc+0x48>)
        m_allocated_channels |= DPPI_BIT_SET(channel);
   2354c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   2354e:	f385 8811 	msr	BASEPRI, r5
   23552:	f3bf 8f6f 	isb	sy
        NRFX_LOG_INFO("Function: %s, error code: %s.",
                      __func__,
                      NRFX_LOG_ERROR_STRING_GET(err_code));
    }
    return err_code;
}
   23556:	bdf0      	pop	{r4, r5, r6, r7, pc}
        err_code = NRFX_ERROR_NO_MEM;
   23558:	4802      	ldr	r0, [pc, #8]	; (23564 <nrfx_dppi_channel_alloc+0x4c>)
   2355a:	e7f8      	b.n	2354e <nrfx_dppi_channel_alloc+0x36>
   2355c:	20008dcc 	.word	0x20008dcc
   23560:	0bad0000 	.word	0x0bad0000
   23564:	0bad0002 	.word	0x0bad0002

00023568 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   23568:	2301      	movs	r3, #1
   2356a:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   2356e:	f010 0fff 	tst.w	r0, #255	; 0xff
   23572:	d012      	beq.n	2359a <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
   23574:	f04f 0320 	mov.w	r3, #32
   23578:	f3ef 8111 	mrs	r1, BASEPRI
   2357c:	f383 8811 	msr	BASEPRI, r3
   23580:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   23584:	4a06      	ldr	r2, [pc, #24]	; (235a0 <nrfx_gpiote_channel_free+0x38>)
   23586:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   23588:	ea23 0000 	bic.w	r0, r3, r0
   2358c:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   2358e:	f381 8811 	msr	BASEPRI, r1
   23592:	f3bf 8f6f 	isb	sy
   23596:	4803      	ldr	r0, [pc, #12]	; (235a4 <nrfx_gpiote_channel_free+0x3c>)
   23598:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   2359a:	4803      	ldr	r0, [pc, #12]	; (235a8 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2359c:	4770      	bx	lr
   2359e:	bf00      	nop
   235a0:	20008dd0 	.word	0x20008dd0
   235a4:	0bad0000 	.word	0x0bad0000
   235a8:	0bad0004 	.word	0x0bad0004

000235ac <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   235ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   235b0:	22ff      	movs	r2, #255	; 0xff
{
   235b2:	2400      	movs	r4, #0
    return m_cb.allocated_channels_mask & (1UL << index);
   235b4:	2601      	movs	r6, #1
{
   235b6:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   235b8:	f8df e058 	ldr.w	lr, [pc, #88]	; 23614 <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   235bc:	4814      	ldr	r0, [pc, #80]	; (23610 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   235be:	f8df 8058 	ldr.w	r8, [pc, #88]	; 23618 <nrfx_gpiote_channel_alloc+0x6c>
   235c2:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   235c4:	f04f 0120 	mov.w	r1, #32
   235c8:	f3ef 8c11 	mrs	ip, BASEPRI
   235cc:	f381 8811 	msr	BASEPRI, r1
   235d0:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   235d4:	fa22 f103 	lsr.w	r1, r2, r3
   235d8:	07c9      	lsls	r1, r1, #31
   235da:	d50a      	bpl.n	235f2 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   235dc:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
   235e0:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   235e4:	4239      	tst	r1, r7
            err_code = NRFX_SUCCESS;
   235e6:	bf01      	itttt	eq
   235e8:	4640      	moveq	r0, r8
    m_cb.allocated_channels_mask |= (1UL << index);
   235ea:	4339      	orreq	r1, r7
   235ec:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            *p_channel = ch_idx;
   235f0:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   235f2:	f38c 8811 	msr	BASEPRI, ip
   235f6:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   235fa:	4540      	cmp	r0, r8
   235fc:	d005      	beq.n	2360a <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   235fe:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   23602:	439a      	bics	r2, r3
   23604:	f104 0401 	add.w	r4, r4, #1
   23608:	d1db      	bne.n	235c2 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2360a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2360e:	bf00      	nop
   23610:	0bad0002 	.word	0x0bad0002
   23614:	20008dd0 	.word	0x20008dd0
   23618:	0bad0000 	.word	0x0bad0000

0002361c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2361c:	4b0e      	ldr	r3, [pc, #56]	; (23658 <z_sys_init_run_level+0x3c>)
{
   2361e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   23620:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   23624:	3001      	adds	r0, #1
   23626:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   2362a:	42a6      	cmp	r6, r4
   2362c:	d800      	bhi.n	23630 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   2362e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   23630:	e9d4 3500 	ldrd	r3, r5, [r4]
   23634:	4628      	mov	r0, r5
   23636:	4798      	blx	r3
		if (dev != NULL) {
   23638:	b165      	cbz	r5, 23654 <z_sys_init_run_level+0x38>
			if (rc != 0) {
   2363a:	68eb      	ldr	r3, [r5, #12]
   2363c:	b130      	cbz	r0, 2364c <z_sys_init_run_level+0x30>
				if (rc < 0) {
   2363e:	2800      	cmp	r0, #0
   23640:	bfb8      	it	lt
   23642:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   23644:	28ff      	cmp	r0, #255	; 0xff
   23646:	bfa8      	it	ge
   23648:	20ff      	movge	r0, #255	; 0xff
   2364a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   2364c:	785a      	ldrb	r2, [r3, #1]
   2364e:	f042 0201 	orr.w	r2, r2, #1
   23652:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   23654:	3408      	adds	r4, #8
   23656:	e7e8      	b.n	2362a <z_sys_init_run_level+0xe>
   23658:	0002afd4 	.word	0x0002afd4

0002365c <z_device_get_all_static>:
#include <syscalls/device_usable_check_mrsh.c>
#endif /* CONFIG_USERSPACE */

size_t z_device_get_all_static(struct device const **devices)
{
	*devices = __device_start;
   2365c:	4a03      	ldr	r2, [pc, #12]	; (2366c <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
   2365e:	4b04      	ldr	r3, [pc, #16]	; (23670 <z_device_get_all_static+0x14>)
	*devices = __device_start;
   23660:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
   23662:	1a9b      	subs	r3, r3, r2
}
   23664:	4803      	ldr	r0, [pc, #12]	; (23674 <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
   23666:	10db      	asrs	r3, r3, #3
}
   23668:	4358      	muls	r0, r3
   2366a:	4770      	bx	lr
   2366c:	200080c4 	.word	0x200080c4
   23670:	20008154 	.word	0x20008154
   23674:	aaaaaaab 	.word	0xaaaaaaab

00023678 <z_impl_device_get_binding>:
{
   23678:	b570      	push	{r4, r5, r6, lr}
	if ((name == NULL) || (name[0] == '\0')) {
   2367a:	4605      	mov	r5, r0
   2367c:	b910      	cbnz	r0, 23684 <z_impl_device_get_binding+0xc>
		return NULL;
   2367e:	2400      	movs	r4, #0
}
   23680:	4620      	mov	r0, r4
   23682:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   23684:	7803      	ldrb	r3, [r0, #0]
   23686:	2b00      	cmp	r3, #0
   23688:	d0f9      	beq.n	2367e <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   2368a:	4a0f      	ldr	r2, [pc, #60]	; (236c8 <z_impl_device_get_binding+0x50>)
   2368c:	4c0f      	ldr	r4, [pc, #60]	; (236cc <z_impl_device_get_binding+0x54>)
   2368e:	4616      	mov	r6, r2
   23690:	4294      	cmp	r4, r2
   23692:	d108      	bne.n	236a6 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   23694:	4c0d      	ldr	r4, [pc, #52]	; (236cc <z_impl_device_get_binding+0x54>)
   23696:	42b4      	cmp	r4, r6
   23698:	d0f1      	beq.n	2367e <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   2369a:	4620      	mov	r0, r4
   2369c:	f004 fa9a 	bl	27bd4 <z_device_ready>
   236a0:	b950      	cbnz	r0, 236b8 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   236a2:	3418      	adds	r4, #24
   236a4:	e7f7      	b.n	23696 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   236a6:	4620      	mov	r0, r4
   236a8:	f004 fa94 	bl	27bd4 <z_device_ready>
   236ac:	b110      	cbz	r0, 236b4 <z_impl_device_get_binding+0x3c>
   236ae:	6823      	ldr	r3, [r4, #0]
   236b0:	42ab      	cmp	r3, r5
   236b2:	d0e5      	beq.n	23680 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   236b4:	3418      	adds	r4, #24
   236b6:	e7eb      	b.n	23690 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   236b8:	4628      	mov	r0, r5
   236ba:	6821      	ldr	r1, [r4, #0]
   236bc:	f003 ffc4 	bl	27648 <strcmp>
   236c0:	2800      	cmp	r0, #0
   236c2:	d1ee      	bne.n	236a2 <z_impl_device_get_binding+0x2a>
   236c4:	e7dc      	b.n	23680 <z_impl_device_get_binding+0x8>
   236c6:	bf00      	nop
   236c8:	20008154 	.word	0x20008154
   236cc:	200080c4 	.word	0x200080c4

000236d0 <device_required_foreach>:
}

int device_required_foreach(const struct device *dev,
			  device_visitor_callback_t visitor_cb,
			  void *context)
{
   236d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t handle_count = 0;
	const device_handle_t *handles =
		device_required_handles_get(dev, &handle_count);
   236d4:	6944      	ldr	r4, [r0, #20]
{
   236d6:	4688      	mov	r8, r1
   236d8:	4693      	mov	fp, r2
	if (rv != NULL) {
   236da:	bb24      	cbnz	r4, 23726 <device_required_foreach+0x56>
	size_t handle_count = 0;
   236dc:	4625      	mov	r5, r4
		if (rc < 0) {
			return rc;
		}
	}

	return handle_count;
   236de:	4628      	mov	r0, r5
   236e0:	e01f      	b.n	23722 <device_required_foreach+0x52>
			++i;
   236e2:	3501      	adds	r5, #1
		       && (rv[i] != DEVICE_HANDLE_SEP)) {
   236e4:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
   236e8:	440b      	add	r3, r1
		while ((rv[i] != DEVICE_HANDLE_ENDS)
   236ea:	b29b      	uxth	r3, r3
   236ec:	4293      	cmp	r3, r2
   236ee:	d9f8      	bls.n	236e2 <device_required_foreach+0x12>
		dev = &__device_start[dev_handle - 1];
   236f0:	f04f 0a18 	mov.w	sl, #24
	size_t numdev = __device_end - __device_start;
   236f4:	4e10      	ldr	r6, [pc, #64]	; (23738 <device_required_foreach+0x68>)
   236f6:	4f11      	ldr	r7, [pc, #68]	; (2373c <device_required_foreach+0x6c>)
   236f8:	eb04 0945 	add.w	r9, r4, r5, lsl #1
   236fc:	1bbf      	subs	r7, r7, r6
   236fe:	10fb      	asrs	r3, r7, #3
   23700:	4f0f      	ldr	r7, [pc, #60]	; (23740 <device_required_foreach+0x70>)
   23702:	435f      	muls	r7, r3
	for (size_t i = 0; i < handle_count; ++i) {
   23704:	45a1      	cmp	r9, r4
   23706:	d0ea      	beq.n	236de <device_required_foreach+0xe>
		device_handle_t dh = handles[i];
   23708:	f934 0b02 	ldrsh.w	r0, [r4], #2
	if ((dev_handle > 0) && ((size_t)dev_handle < numdev)) {
   2370c:	2800      	cmp	r0, #0
   2370e:	dd10      	ble.n	23732 <device_required_foreach+0x62>
   23710:	4287      	cmp	r7, r0
   23712:	d90e      	bls.n	23732 <device_required_foreach+0x62>
		dev = &__device_start[dev_handle - 1];
   23714:	3801      	subs	r0, #1
   23716:	fb0a 6000 	mla	r0, sl, r0, r6
		int rc = visitor_cb(rdev, context);
   2371a:	4659      	mov	r1, fp
   2371c:	47c0      	blx	r8
		if (rc < 0) {
   2371e:	2800      	cmp	r0, #0
   23720:	daf0      	bge.n	23704 <device_required_foreach+0x34>
}
   23722:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		size_t i = 0;
   23726:	2500      	movs	r5, #0
		       && (rv[i] != DEVICE_HANDLE_SEP)) {
   23728:	f647 71ff 	movw	r1, #32767	; 0x7fff
		while ((rv[i] != DEVICE_HANDLE_ENDS)
   2372c:	f64f 72fd 	movw	r2, #65533	; 0xfffd
   23730:	e7d8      	b.n	236e4 <device_required_foreach+0x14>
	const struct device *dev = NULL;
   23732:	2000      	movs	r0, #0
   23734:	e7f1      	b.n	2371a <device_required_foreach+0x4a>
   23736:	bf00      	nop
   23738:	200080c4 	.word	0x200080c4
   2373c:	20008154 	.word	0x20008154
   23740:	aaaaaaab 	.word	0xaaaaaaab

00023744 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   23744:	4b01      	ldr	r3, [pc, #4]	; (2374c <z_impl_z_errno+0x8>)
   23746:	6898      	ldr	r0, [r3, #8]
}
   23748:	3098      	adds	r0, #152	; 0x98
   2374a:	4770      	bx	lr
   2374c:	20008e30 	.word	0x20008e30

00023750 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   23750:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   23754:	4606      	mov	r6, r0
   23756:	460f      	mov	r7, r1
	__asm__ volatile(
   23758:	f04f 0320 	mov.w	r3, #32
   2375c:	f3ef 8811 	mrs	r8, BASEPRI
   23760:	f383 8811 	msr	BASEPRI, r3
   23764:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   23768:	f000 ffce 	bl	24708 <z_impl_k_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   2376c:	4c2c      	ldr	r4, [pc, #176]	; (23820 <z_fatal_error+0xd0>)
   2376e:	4605      	mov	r5, r0
   23770:	6823      	ldr	r3, [r4, #0]
   23772:	0759      	lsls	r1, r3, #29
   23774:	d051      	beq.n	2381a <z_fatal_error+0xca>
   23776:	4b2b      	ldr	r3, [pc, #172]	; (23824 <z_fatal_error+0xd4>)
   23778:	2e04      	cmp	r6, #4
   2377a:	eba4 0303 	sub.w	r3, r4, r3
   2377e:	ea4f 0393 	mov.w	r3, r3, lsr #2
   23782:	bf98      	it	ls
   23784:	4a28      	ldrls	r2, [pc, #160]	; (23828 <z_fatal_error+0xd8>)
   23786:	ea4f 1383 	mov.w	r3, r3, lsl #6
   2378a:	f043 0301 	orr.w	r3, r3, #1
	switch (reason) {
   2378e:	bf94      	ite	ls
   23790:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   23794:	4a25      	ldrhi	r2, [pc, #148]	; (2382c <z_fatal_error+0xdc>)
   23796:	f8ad 3000 	strh.w	r3, [sp]
   2379a:	4631      	mov	r1, r6
   2379c:	2300      	movs	r3, #0
   2379e:	4824      	ldr	r0, [pc, #144]	; (23830 <z_fatal_error+0xe0>)
   237a0:	f002 fadd 	bl	25d5e <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   237a4:	b17f      	cbz	r7, 237c6 <z_fatal_error+0x76>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   237a6:	69fb      	ldr	r3, [r7, #28]
   237a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   237ac:	b15b      	cbz	r3, 237c6 <z_fatal_error+0x76>
		LOG_ERR("Fault during interrupt handling\n");
   237ae:	6823      	ldr	r3, [r4, #0]
   237b0:	075a      	lsls	r2, r3, #29
   237b2:	d01b      	beq.n	237ec <z_fatal_error+0x9c>
   237b4:	491b      	ldr	r1, [pc, #108]	; (23824 <z_fatal_error+0xd4>)
   237b6:	481f      	ldr	r0, [pc, #124]	; (23834 <z_fatal_error+0xe4>)
   237b8:	1a61      	subs	r1, r4, r1
   237ba:	0889      	lsrs	r1, r1, #2
   237bc:	0189      	lsls	r1, r1, #6
   237be:	f041 0101 	orr.w	r1, r1, #1
   237c2:	f002 fa92 	bl	25cea <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   237c6:	6823      	ldr	r3, [r4, #0]
   237c8:	075b      	lsls	r3, r3, #29
   237ca:	d00f      	beq.n	237ec <z_fatal_error+0x9c>
   237cc:	4b15      	ldr	r3, [pc, #84]	; (23824 <z_fatal_error+0xd4>)
   237ce:	1ae4      	subs	r4, r4, r3
   237d0:	08a4      	lsrs	r4, r4, #2
   237d2:	01a4      	lsls	r4, r4, #6
   237d4:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   237d8:	b9b5      	cbnz	r5, 23808 <z_fatal_error+0xb8>
		thread_name = "unknown";
   237da:	4817      	ldr	r0, [pc, #92]	; (23838 <z_fatal_error+0xe8>)
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   237dc:	f7fb f8d6 	bl	1e98c <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
   237e0:	4623      	mov	r3, r4
   237e2:	4602      	mov	r2, r0
   237e4:	4629      	mov	r1, r5
   237e6:	4815      	ldr	r0, [pc, #84]	; (2383c <z_fatal_error+0xec>)
   237e8:	f002 faa0 	bl	25d2c <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   237ec:	4639      	mov	r1, r7
   237ee:	4630      	mov	r0, r6
   237f0:	f7ff fce6 	bl	231c0 <k_sys_fatal_error_handler>
	__asm__ volatile(
   237f4:	f388 8811 	msr	BASEPRI, r8
   237f8:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   237fc:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   237fe:	b002      	add	sp, #8
   23800:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   23804:	f7fe bdf4 	b.w	223f0 <z_impl_k_thread_abort>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   23808:	4628      	mov	r0, r5
   2380a:	f004 fa37 	bl	27c7c <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   2380e:	2800      	cmp	r0, #0
   23810:	d0e3      	beq.n	237da <z_fatal_error+0x8a>
   23812:	7803      	ldrb	r3, [r0, #0]
   23814:	2b00      	cmp	r3, #0
   23816:	d0e0      	beq.n	237da <z_fatal_error+0x8a>
   23818:	e7e0      	b.n	237dc <z_fatal_error+0x8c>
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   2381a:	2f00      	cmp	r7, #0
   2381c:	d1c3      	bne.n	237a6 <z_fatal_error+0x56>
   2381e:	e7e5      	b.n	237ec <z_fatal_error+0x9c>
   23820:	2000816c 	.word	0x2000816c
   23824:	20008154 	.word	0x20008154
   23828:	0002afec 	.word	0x0002afec
   2382c:	0002cbca 	.word	0x0002cbca
   23830:	0002cbe0 	.word	0x0002cbe0
   23834:	0002cc08 	.word	0x0002cc08
   23838:	0002cbd8 	.word	0x0002cbd8
   2383c:	0002cc29 	.word	0x0002cc29

00023840 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   23840:	4802      	ldr	r0, [pc, #8]	; (2384c <z_bss_zero+0xc>)
   23842:	4a03      	ldr	r2, [pc, #12]	; (23850 <z_bss_zero+0x10>)
   23844:	2100      	movs	r1, #0
   23846:	1a12      	subs	r2, r2, r0
   23848:	f003 bf6b 	b.w	27722 <memset>
   2384c:	20008208 	.word	0x20008208
   23850:	200096dc 	.word	0x200096dc

00023854 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   23854:	2201      	movs	r2, #1
{
   23856:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   23858:	4b09      	ldr	r3, [pc, #36]	; (23880 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2385a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   2385c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2385e:	f7ff fedd 	bl	2361c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   23862:	f004 fd30 	bl	282c6 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   23866:	2003      	movs	r0, #3
   23868:	f7ff fed8 	bl	2361c <z_sys_init_run_level>

	z_init_static_threads();
   2386c:	f000 fa00 	bl	23c70 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
   23870:	f001 fbc2 	bl	24ff8 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   23874:	4a03      	ldr	r2, [pc, #12]	; (23884 <bg_thread_main+0x30>)
   23876:	7b13      	ldrb	r3, [r2, #12]
   23878:	f023 0301 	bic.w	r3, r3, #1
   2387c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   2387e:	bd08      	pop	{r3, pc}
   23880:	200096db 	.word	0x200096db
   23884:	200086c8 	.word	0x200086c8

00023888 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   23888:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   2388c:	b0b7      	sub	sp, #220	; 0xdc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   2388e:	f7fa ff1d 	bl	1e6cc <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   23892:	4b3c      	ldr	r3, [pc, #240]	; (23984 <z_cstart+0xfc>)
	uint32_t msp =
   23894:	f503 6a00 	add.w	sl, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   23898:	f38a 8808 	msr	MSP, sl
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   2389c:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   238a0:	2400      	movs	r4, #0
   238a2:	23e0      	movs	r3, #224	; 0xe0
   238a4:	4d38      	ldr	r5, [pc, #224]	; (23988 <z_cstart+0x100>)
	_kernel.ready_q.cache = &z_main_thread;
   238a6:	4e39      	ldr	r6, [pc, #228]	; (2398c <z_cstart+0x104>)
   238a8:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   238ac:	77ec      	strb	r4, [r5, #31]
   238ae:	762c      	strb	r4, [r5, #24]
   238b0:	766c      	strb	r4, [r5, #25]
   238b2:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   238b4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   238b6:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 239ac <z_cstart+0x124>
   238ba:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   238be:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   238c0:	f7fe fd6c 	bl	2239c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   238c4:	f7fe fa22 	bl	21d0c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   238c8:	f04f 33ff 	mov.w	r3, #4294967295
   238cc:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   238ce:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   238d0:	f7fe ff26 	bl	22720 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   238d4:	f7fe fd9e 	bl	22414 <z_arm_configure_static_mpu_regions>
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   238d8:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   238dc:	4d2c      	ldr	r5, [pc, #176]	; (23990 <z_cstart+0x108>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   238de:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	_current_cpu->current = dummy_thread;
   238e2:	ab08      	add	r3, sp, #32
   238e4:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
   238e6:	e9cd 442f 	strd	r4, r4, [sp, #188]	; 0xbc
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   238ea:	f004 f972 	bl	27bd2 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   238ee:	4620      	mov	r0, r4
   238f0:	f7ff fe94 	bl	2361c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   238f4:	2001      	movs	r0, #1
   238f6:	f7ff fe91 	bl	2361c <z_sys_init_run_level>
	z_sched_init();
   238fa:	f000 fe85 	bl	24608 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   238fe:	4b25      	ldr	r3, [pc, #148]	; (23994 <z_cstart+0x10c>)
	_kernel.ready_q.cache = &z_main_thread;
   23900:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   23902:	9305      	str	r3, [sp, #20]
   23904:	2301      	movs	r3, #1
   23906:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2390a:	4923      	ldr	r1, [pc, #140]	; (23998 <z_cstart+0x110>)
   2390c:	e9cd 4303 	strd	r4, r3, [sp, #12]
   23910:	4630      	mov	r0, r6
   23912:	464b      	mov	r3, r9
   23914:	e9cd 4401 	strd	r4, r4, [sp, #4]
   23918:	9400      	str	r4, [sp, #0]
   2391a:	f000 f91d 	bl	23b58 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2391e:	7b73      	ldrb	r3, [r6, #13]
   23920:	4680      	mov	r8, r0
   23922:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   23926:	4630      	mov	r0, r6
	snprintk(tname, 8, "idle %02d", i);
   23928:	f10d 0b18 	add.w	fp, sp, #24
   2392c:	7373      	strb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
   2392e:	f004 fa6b 	bl	27e08 <z_ready_thread>
	snprintk(tname, 8, "idle %02d", i);
   23932:	4623      	mov	r3, r4
   23934:	2108      	movs	r1, #8
   23936:	4a19      	ldr	r2, [pc, #100]	; (2399c <z_cstart+0x114>)
   23938:	4658      	mov	r0, fp
   2393a:	f001 fd58 	bl	253ee <snprintk>
	z_setup_new_thread(thread, stack,
   2393e:	230f      	movs	r3, #15
   23940:	2201      	movs	r2, #1
   23942:	4f17      	ldr	r7, [pc, #92]	; (239a0 <z_cstart+0x118>)
   23944:	e9cd 3203 	strd	r3, r2, [sp, #12]
   23948:	4916      	ldr	r1, [pc, #88]	; (239a4 <z_cstart+0x11c>)
   2394a:	f44f 72a0 	mov.w	r2, #320	; 0x140
   2394e:	4b16      	ldr	r3, [pc, #88]	; (239a8 <z_cstart+0x120>)
   23950:	4638      	mov	r0, r7
   23952:	e9cd 4401 	strd	r4, r4, [sp, #4]
   23956:	f8cd b014 	str.w	fp, [sp, #20]
   2395a:	9500      	str	r5, [sp, #0]
   2395c:	f000 f8fc 	bl	23b58 <z_setup_new_thread>
   23960:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   23962:	464a      	mov	r2, r9
   23964:	f023 0304 	bic.w	r3, r3, #4
   23968:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   2396a:	f105 0318 	add.w	r3, r5, #24
   2396e:	4641      	mov	r1, r8
   23970:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   23972:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   23976:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   23978:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   2397a:	f8c5 a004 	str.w	sl, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   2397e:	f7fe f90b 	bl	21b98 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   23982:	bf00      	nop
   23984:	20015f20 	.word	0x20015f20
   23988:	e000ed00 	.word	0xe000ed00
   2398c:	200086c8 	.word	0x200086c8
   23990:	20008e30 	.word	0x20008e30
   23994:	0002cc8b 	.word	0x0002cc8b
   23998:	200159e0 	.word	0x200159e0
   2399c:	0002cc90 	.word	0x0002cc90
   239a0:	20008610 	.word	0x20008610
   239a4:	20015de0 	.word	0x20015de0
   239a8:	00023d35 	.word	0x00023d35
   239ac:	00023855 	.word	0x00023855

000239b0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   239b0:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   239b2:	4b0e      	ldr	r3, [pc, #56]	; (239ec <init_mem_slab_module+0x3c>)
   239b4:	4c0e      	ldr	r4, [pc, #56]	; (239f0 <init_mem_slab_module+0x40>)
   239b6:	42a3      	cmp	r3, r4
   239b8:	d301      	bcc.n	239be <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   239ba:	2000      	movs	r0, #0
	return rc;
}
   239bc:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   239be:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   239c2:	ea41 0200 	orr.w	r2, r1, r0
   239c6:	f012 0203 	ands.w	r2, r2, #3
   239ca:	d10b      	bne.n	239e4 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   239cc:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   239ce:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   239d0:	42aa      	cmp	r2, r5
   239d2:	d101      	bne.n	239d8 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   239d4:	331c      	adds	r3, #28
   239d6:	e7ee      	b.n	239b6 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   239d8:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   239da:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
   239dc:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
   239de:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   239e0:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   239e2:	e7f5      	b.n	239d0 <init_mem_slab_module+0x20>
		return -EINVAL;
   239e4:	f06f 0015 	mvn.w	r0, #21
	return rc;
   239e8:	e7e8      	b.n	239bc <init_mem_slab_module+0xc>
   239ea:	bf00      	nop
   239ec:	200081c0 	.word	0x200081c0
   239f0:	200081c0 	.word	0x200081c0

000239f4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   239f4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   239f6:	460c      	mov	r4, r1
   239f8:	4616      	mov	r6, r2
   239fa:	461f      	mov	r7, r3
	__asm__ volatile(
   239fc:	f04f 0320 	mov.w	r3, #32
   23a00:	f3ef 8111 	mrs	r1, BASEPRI
   23a04:	f383 8811 	msr	BASEPRI, r3
   23a08:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   23a0c:	6943      	ldr	r3, [r0, #20]
   23a0e:	b15b      	cbz	r3, 23a28 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   23a10:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   23a12:	681b      	ldr	r3, [r3, #0]
   23a14:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   23a16:	6983      	ldr	r3, [r0, #24]
   23a18:	3301      	adds	r3, #1
   23a1a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   23a1c:	2000      	movs	r0, #0
	__asm__ volatile(
   23a1e:	f381 8811 	msr	BASEPRI, r1
   23a22:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   23a26:	e011      	b.n	23a4c <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   23a28:	ea56 0207 	orrs.w	r2, r6, r7
   23a2c:	d103      	bne.n	23a36 <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
   23a2e:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   23a32:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   23a34:	e7f3      	b.n	23a1e <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   23a36:	4602      	mov	r2, r0
   23a38:	e9cd 6700 	strd	r6, r7, [sp]
   23a3c:	3008      	adds	r0, #8
   23a3e:	f000 fc25 	bl	2428c <z_pend_curr>
		if (result == 0) {
   23a42:	b918      	cbnz	r0, 23a4c <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   23a44:	4b02      	ldr	r3, [pc, #8]	; (23a50 <k_mem_slab_alloc+0x5c>)
   23a46:	689b      	ldr	r3, [r3, #8]
   23a48:	695b      	ldr	r3, [r3, #20]
   23a4a:	6023      	str	r3, [r4, #0]
}
   23a4c:	b002      	add	sp, #8
   23a4e:	bdd0      	pop	{r4, r6, r7, pc}
   23a50:	20008e30 	.word	0x20008e30

00023a54 <k_thread_foreach>:

#define _FOREACH_STATIC_THREAD(thread_data)              \
	Z_STRUCT_SECTION_FOREACH(_static_thread_data, thread_data)

void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data)
{
   23a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23a56:	4605      	mov	r5, r0
   23a58:	460e      	mov	r6, r1
	__asm__ volatile(
   23a5a:	f04f 0320 	mov.w	r3, #32
   23a5e:	f3ef 8711 	mrs	r7, BASEPRI
   23a62:	f383 8811 	msr	BASEPRI, r3
   23a66:	f3bf 8f6f 	isb	sy
	 */
	key = k_spin_lock(&z_thread_monitor_lock);

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, foreach);

	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
   23a6a:	4b06      	ldr	r3, [pc, #24]	; (23a84 <k_thread_foreach+0x30>)
   23a6c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   23a6e:	b924      	cbnz	r4, 23a7a <k_thread_foreach+0x26>
	__asm__ volatile(
   23a70:	f387 8811 	msr	BASEPRI, r7
   23a74:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, foreach);

	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
}
   23a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		user_cb(thread, user_data);
   23a7a:	4620      	mov	r0, r4
   23a7c:	4631      	mov	r1, r6
   23a7e:	47a8      	blx	r5
	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
   23a80:	6f64      	ldr	r4, [r4, #116]	; 0x74
   23a82:	e7f4      	b.n	23a6e <k_thread_foreach+0x1a>
   23a84:	20008e30 	.word	0x20008e30

00023a88 <z_thread_monitor_exit>:
	__asm__ volatile(
   23a88:	f04f 0320 	mov.w	r3, #32
   23a8c:	f3ef 8111 	mrs	r1, BASEPRI
   23a90:	f383 8811 	msr	BASEPRI, r3
   23a94:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   23a98:	4a09      	ldr	r2, [pc, #36]	; (23ac0 <z_thread_monitor_exit+0x38>)
   23a9a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   23a9c:	4283      	cmp	r3, r0
   23a9e:	d107      	bne.n	23ab0 <z_thread_monitor_exit+0x28>
		_kernel.threads = _kernel.threads->next_thread;
   23aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   23aa2:	6313      	str	r3, [r2, #48]	; 0x30
	__asm__ volatile(
   23aa4:	f381 8811 	msr	BASEPRI, r1
   23aa8:	f3bf 8f6f 	isb	sy
			prev_thread->next_thread = thread->next_thread;
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   23aac:	4770      	bx	lr
   23aae:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   23ab0:	2b00      	cmp	r3, #0
   23ab2:	d0f7      	beq.n	23aa4 <z_thread_monitor_exit+0x1c>
			(thread != prev_thread->next_thread)) {
   23ab4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   23ab6:	4282      	cmp	r2, r0
   23ab8:	d1f9      	bne.n	23aae <z_thread_monitor_exit+0x26>
			prev_thread->next_thread = thread->next_thread;
   23aba:	6f42      	ldr	r2, [r0, #116]	; 0x74
   23abc:	675a      	str	r2, [r3, #116]	; 0x74
   23abe:	e7f1      	b.n	23aa4 <z_thread_monitor_exit+0x1c>
   23ac0:	20008e30 	.word	0x20008e30

00023ac4 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   23ac4:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   23ac6:	4604      	mov	r4, r0
   23ac8:	b908      	cbnz	r0, 23ace <z_impl_k_thread_name_set+0xa>
		thread = _current;
   23aca:	4b05      	ldr	r3, [pc, #20]	; (23ae0 <z_impl_k_thread_name_set+0x1c>)
   23acc:	689c      	ldr	r4, [r3, #8]
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
   23ace:	2220      	movs	r2, #32
   23ad0:	f104 0078 	add.w	r0, r4, #120	; 0x78
   23ad4:	f003 fd87 	bl	275e6 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   23ad8:	2000      	movs	r0, #0
   23ada:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   23ade:	bd10      	pop	{r4, pc}
   23ae0:	20008e30 	.word	0x20008e30

00023ae4 <k_thread_state_str>:
#endif /* CONFIG_THREAD_NAME */
}

const char *k_thread_state_str(k_tid_t thread_id)
{
	switch (thread_id->base.thread_state) {
   23ae4:	7b43      	ldrb	r3, [r0, #13]
   23ae6:	2b10      	cmp	r3, #16
   23ae8:	d80e      	bhi.n	23b08 <k_thread_state_str+0x24>
   23aea:	2b10      	cmp	r3, #16
   23aec:	d81c      	bhi.n	23b28 <k_thread_state_str+0x44>
   23aee:	e8df f003 	tbb	[pc, r3]
   23af2:	091d      	.short	0x091d
   23af4:	1b151b13 	.word	0x1b151b13
   23af8:	1b171b1b 	.word	0x1b171b1b
   23afc:	1b1b1b1b 	.word	0x1b1b1b1b
   23b00:	1b1b      	.short	0x1b1b
   23b02:	19          	.byte	0x19
   23b03:	00          	.byte	0x00
   23b04:	480b      	ldr	r0, [pc, #44]	; (23b34 <k_thread_state_str+0x50>)
   23b06:	4770      	bx	lr
   23b08:	2b20      	cmp	r3, #32
   23b0a:	d011      	beq.n	23b30 <k_thread_state_str+0x4c>
		break;
	case _THREAD_ABORTING:
		return "aborting";
		break;
	case _THREAD_QUEUED:
		return "queued";
   23b0c:	4a0a      	ldr	r2, [pc, #40]	; (23b38 <k_thread_state_str+0x54>)
   23b0e:	480b      	ldr	r0, [pc, #44]	; (23b3c <k_thread_state_str+0x58>)
   23b10:	2b80      	cmp	r3, #128	; 0x80
   23b12:	bf08      	it	eq
   23b14:	4610      	moveq	r0, r2
   23b16:	4770      	bx	lr
		return "pending";
   23b18:	4809      	ldr	r0, [pc, #36]	; (23b40 <k_thread_state_str+0x5c>)
   23b1a:	4770      	bx	lr
		return "prestart";
   23b1c:	4809      	ldr	r0, [pc, #36]	; (23b44 <k_thread_state_str+0x60>)
   23b1e:	4770      	bx	lr
		return "dead";
   23b20:	4809      	ldr	r0, [pc, #36]	; (23b48 <k_thread_state_str+0x64>)
   23b22:	4770      	bx	lr
		return "suspended";
   23b24:	4809      	ldr	r0, [pc, #36]	; (23b4c <k_thread_state_str+0x68>)
   23b26:	4770      	bx	lr
		break;
	}
	return "unknown";
   23b28:	4804      	ldr	r0, [pc, #16]	; (23b3c <k_thread_state_str+0x58>)
   23b2a:	4770      	bx	lr
		return "";
   23b2c:	4808      	ldr	r0, [pc, #32]	; (23b50 <k_thread_state_str+0x6c>)
   23b2e:	4770      	bx	lr
		return "aborting";
   23b30:	4808      	ldr	r0, [pc, #32]	; (23b54 <k_thread_state_str+0x70>)
}
   23b32:	4770      	bx	lr
   23b34:	0002ccbd 	.word	0x0002ccbd
   23b38:	0002cccc 	.word	0x0002cccc
   23b3c:	0002cbd8 	.word	0x0002cbd8
   23b40:	0002cc9d 	.word	0x0002cc9d
   23b44:	0002cca5 	.word	0x0002cca5
   23b48:	0002ccae 	.word	0x0002ccae
   23b4c:	0002ccb3 	.word	0x0002ccb3
   23b50:	0002bafe 	.word	0x0002bafe
   23b54:	0002ccc3 	.word	0x0002ccc3

00023b58 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   23b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23b5c:	460e      	mov	r6, r1
   23b5e:	b085      	sub	sp, #20
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   23b60:	f100 0158 	add.w	r1, r0, #88	; 0x58
   23b64:	e9c0 1116 	strd	r1, r1, [r0, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   23b68:	9912      	ldr	r1, [sp, #72]	; 0x48
	thread_base->pended_on = NULL;
   23b6a:	2500      	movs	r5, #0
	thread_base->user_options = (uint8_t)options;
   23b6c:	7301      	strb	r1, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   23b6e:	2104      	movs	r1, #4
{
   23b70:	4604      	mov	r4, r0
   23b72:	4699      	mov	r9, r3
	thread_base->thread_state = (uint8_t)initial_state;
   23b74:	7341      	strb	r1, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   23b76:	3207      	adds	r2, #7

	thread_base->prio = priority;
   23b78:	9911      	ldr	r1, [sp, #68]	; 0x44
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   23b7a:	f022 0a07 	bic.w	sl, r2, #7
	memset(stack_buf_start, 0xaa, stack_buf_size);
   23b7e:	4652      	mov	r2, sl
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   23b80:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->pended_on = NULL;
   23b84:	6085      	str	r5, [r0, #8]
	thread_base->prio = priority;
   23b86:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   23b88:	73c5      	strb	r5, [r0, #15]
	memset(stack_buf_start, 0xaa, stack_buf_size);
   23b8a:	21aa      	movs	r1, #170	; 0xaa
   23b8c:	4630      	mov	r0, r6
{
   23b8e:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   23b92:	9f13      	ldr	r7, [sp, #76]	; 0x4c
	memset(stack_buf_start, 0xaa, stack_buf_size);
   23b94:	f003 fdc5 	bl	27722 <memset>
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   23b98:	9b10      	ldr	r3, [sp, #64]	; 0x40
	stack_ptr = (char *)stack + stack_obj_size;
   23b9a:	eb06 080a 	add.w	r8, r6, sl
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   23b9e:	9302      	str	r3, [sp, #8]
   23ba0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   23ba2:	4642      	mov	r2, r8
   23ba4:	e9cd b300 	strd	fp, r3, [sp]
   23ba8:	4631      	mov	r1, r6
   23baa:	464b      	mov	r3, r9
   23bac:	4620      	mov	r0, r4
	new_thread->stack_info.size = stack_buf_size;
   23bae:	e9c4 6a27 	strd	r6, sl, [r4, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
   23bb2:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   23bb6:	f7fd ffd3 	bl	21b60 <arch_new_thread>
	new_thread->entry.parameter2 = p2;
   23bba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	new_thread->entry.parameter1 = p1;
   23bbc:	e9c4 9b19 	strd	r9, fp, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
   23bc0:	66e3      	str	r3, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   23bc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
	new_thread->init_data = NULL;
   23bc4:	6565      	str	r5, [r4, #84]	; 0x54
	new_thread->entry.parameter3 = p3;
   23bc6:	6723      	str	r3, [r4, #112]	; 0x70
	__asm__ volatile(
   23bc8:	f04f 0320 	mov.w	r3, #32
   23bcc:	f3ef 8211 	mrs	r2, BASEPRI
   23bd0:	f383 8811 	msr	BASEPRI, r3
   23bd4:	f3bf 8f6f 	isb	sy
	new_thread->next_thread = _kernel.threads;
   23bd8:	4e0e      	ldr	r6, [pc, #56]	; (23c14 <z_setup_new_thread+0xbc>)
   23bda:	6b31      	ldr	r1, [r6, #48]	; 0x30
	_kernel.threads = new_thread;
   23bdc:	6334      	str	r4, [r6, #48]	; 0x30
	new_thread->next_thread = _kernel.threads;
   23bde:	6761      	str	r1, [r4, #116]	; 0x74
	__asm__ volatile(
   23be0:	f382 8811 	msr	BASEPRI, r2
   23be4:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
   23be8:	b18f      	cbz	r7, 23c0e <z_setup_new_thread+0xb6>
		strncpy(new_thread->name, name,
   23bea:	221f      	movs	r2, #31
   23bec:	4639      	mov	r1, r7
   23bee:	f104 0078 	add.w	r0, r4, #120	; 0x78
   23bf2:	f003 fcf8 	bl	275e6 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   23bf6:	f884 5097 	strb.w	r5, [r4, #151]	; 0x97
	if (!_current) {
   23bfa:	68b3      	ldr	r3, [r6, #8]
   23bfc:	b10b      	cbz	r3, 23c02 <z_setup_new_thread+0xaa>
	new_thread->resource_pool = _current->resource_pool;
   23bfe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
}
   23c02:	4640      	mov	r0, r8
   23c04:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
   23c08:	b005      	add	sp, #20
   23c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   23c0e:	f884 7078 	strb.w	r7, [r4, #120]	; 0x78
   23c12:	e7f2      	b.n	23bfa <z_setup_new_thread+0xa2>
   23c14:	20008e30 	.word	0x20008e30

00023c18 <z_impl_k_thread_create>:
{
   23c18:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   23c1a:	2500      	movs	r5, #0
{
   23c1c:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   23c1e:	9505      	str	r5, [sp, #20]
   23c20:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   23c22:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   23c26:	9504      	str	r5, [sp, #16]
   23c28:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   23c2a:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   23c2c:	9503      	str	r5, [sp, #12]
   23c2e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   23c30:	9502      	str	r5, [sp, #8]
   23c32:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   23c34:	9501      	str	r5, [sp, #4]
   23c36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   23c38:	9500      	str	r5, [sp, #0]
   23c3a:	f7ff ff8d 	bl	23b58 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   23c3e:	1c7b      	adds	r3, r7, #1
   23c40:	bf08      	it	eq
   23c42:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   23c46:	d005      	beq.n	23c54 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   23c48:	ea56 0307 	orrs.w	r3, r6, r7
   23c4c:	d105      	bne.n	23c5a <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   23c4e:	4620      	mov	r0, r4
   23c50:	f000 fc70 	bl	24534 <z_sched_start>
}
   23c54:	4620      	mov	r0, r4
   23c56:	b007      	add	sp, #28
   23c58:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   23c5a:	4632      	mov	r2, r6
   23c5c:	463b      	mov	r3, r7
   23c5e:	4903      	ldr	r1, [pc, #12]	; (23c6c <z_impl_k_thread_create+0x54>)
   23c60:	f104 0018 	add.w	r0, r4, #24
   23c64:	f000 fe5e 	bl	24924 <z_add_timeout>
   23c68:	e7f4      	b.n	23c54 <z_impl_k_thread_create+0x3c>
   23c6a:	bf00      	nop
   23c6c:	00027e29 	.word	0x00027e29

00023c70 <z_init_static_threads>:
{
   23c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   23c74:	4e2a      	ldr	r6, [pc, #168]	; (23d20 <z_init_static_threads+0xb0>)
   23c76:	4d2b      	ldr	r5, [pc, #172]	; (23d24 <z_init_static_threads+0xb4>)
   23c78:	46b0      	mov	r8, r6
{
   23c7a:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   23c7c:	42b5      	cmp	r5, r6
   23c7e:	f105 0430 	add.w	r4, r5, #48	; 0x30
   23c82:	d310      	bcc.n	23ca6 <z_init_static_threads+0x36>
	k_sched_lock();
   23c84:	f000 fa90 	bl	241a8 <k_sched_lock>
   23c88:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   23c8c:	f240 36e7 	movw	r6, #999	; 0x3e7
   23c90:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   23c92:	4c24      	ldr	r4, [pc, #144]	; (23d24 <z_init_static_threads+0xb4>)
   23c94:	f8df a090 	ldr.w	sl, [pc, #144]	; 23d28 <z_init_static_threads+0xb8>
   23c98:	4544      	cmp	r4, r8
   23c9a:	d321      	bcc.n	23ce0 <z_init_static_threads+0x70>
}
   23c9c:	b006      	add	sp, #24
   23c9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   23ca2:	f000 bb73 	b.w	2438c <k_sched_unlock>
		z_setup_new_thread(
   23ca6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   23caa:	9305      	str	r3, [sp, #20]
   23cac:	f854 3c10 	ldr.w	r3, [r4, #-16]
   23cb0:	9304      	str	r3, [sp, #16]
   23cb2:	f854 3c14 	ldr.w	r3, [r4, #-20]
   23cb6:	9303      	str	r3, [sp, #12]
   23cb8:	f854 3c18 	ldr.w	r3, [r4, #-24]
   23cbc:	9302      	str	r3, [sp, #8]
   23cbe:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   23cc2:	9301      	str	r3, [sp, #4]
   23cc4:	f854 3c20 	ldr.w	r3, [r4, #-32]
   23cc8:	9300      	str	r3, [sp, #0]
   23cca:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   23cce:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   23cd2:	f7ff ff41 	bl	23b58 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   23cd6:	f854 3c30 	ldr.w	r3, [r4, #-48]
   23cda:	655d      	str	r5, [r3, #84]	; 0x54
   23cdc:	4625      	mov	r5, r4
   23cde:	e7cd      	b.n	23c7c <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   23ce0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23ce2:	1c5a      	adds	r2, r3, #1
   23ce4:	d00d      	beq.n	23d02 <z_init_static_threads+0x92>
   23ce6:	4630      	mov	r0, r6
   23ce8:	4639      	mov	r1, r7
					    K_MSEC(thread_data->init_delay));
   23cea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   23cee:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   23cf2:	42b9      	cmp	r1, r7
   23cf4:	bf08      	it	eq
   23cf6:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   23cf8:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   23cfa:	d104      	bne.n	23d06 <z_init_static_threads+0x96>
	z_sched_start(thread);
   23cfc:	4628      	mov	r0, r5
   23cfe:	f000 fc19 	bl	24534 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   23d02:	3430      	adds	r4, #48	; 0x30
   23d04:	e7c8      	b.n	23c98 <z_init_static_threads+0x28>
   23d06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23d0a:	2300      	movs	r3, #0
   23d0c:	f7ec fae8 	bl	102e0 <__aeabi_uldivmod>
   23d10:	4602      	mov	r2, r0
   23d12:	460b      	mov	r3, r1
   23d14:	f105 0018 	add.w	r0, r5, #24
   23d18:	4651      	mov	r1, sl
   23d1a:	f000 fe03 	bl	24924 <z_add_timeout>
   23d1e:	e7f0      	b.n	23d02 <z_init_static_threads+0x92>
   23d20:	20008184 	.word	0x20008184
   23d24:	20008184 	.word	0x20008184
   23d28:	00027e29 	.word	0x00027e29

00023d2c <sys_kernel_version_get>:
 * @return kernel version
 */
uint32_t sys_kernel_version_get(void)
{
	return KERNELVERSION;
}
   23d2c:	4800      	ldr	r0, [pc, #0]	; (23d30 <sys_kernel_version_get+0x4>)
   23d2e:	4770      	bx	lr
   23d30:	02060000 	.word	0x02060000

00023d34 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   23d34:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   23d36:	4c09      	ldr	r4, [pc, #36]	; (23d5c <idle+0x28>)
	__asm__ volatile(
   23d38:	f04f 0220 	mov.w	r2, #32
   23d3c:	f3ef 8311 	mrs	r3, BASEPRI
   23d40:	f382 8811 	msr	BASEPRI, r2
   23d44:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   23d48:	f004 f901 	bl	27f4e <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   23d4c:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   23d4e:	f7fd faf5 	bl	2133c <pm_system_suspend>
   23d52:	2800      	cmp	r0, #0
   23d54:	d1f0      	bne.n	23d38 <idle+0x4>
	arch_cpu_idle();
   23d56:	f7fd ffdf 	bl	21d18 <arch_cpu_idle>
}
   23d5a:	e7ed      	b.n	23d38 <idle+0x4>
   23d5c:	20008e30 	.word	0x20008e30

00023d60 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   23d60:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   23d64:	4604      	mov	r4, r0
   23d66:	468a      	mov	sl, r1
   23d68:	4616      	mov	r6, r2
   23d6a:	461f      	mov	r7, r3

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   23d6c:	f100 0908 	add.w	r9, r0, #8
   23d70:	f04f 0320 	mov.w	r3, #32
   23d74:	f3ef 8811 	mrs	r8, BASEPRI
   23d78:	f383 8811 	msr	BASEPRI, r3
   23d7c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
   23d80:	6a02      	ldr	r2, [r0, #32]
   23d82:	68c3      	ldr	r3, [r0, #12]
   23d84:	429a      	cmp	r2, r3
   23d86:	d232      	bcs.n	23dee <z_impl_k_msgq_put+0x8e>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   23d88:	f004 f885 	bl	27e96 <z_unpend_first_thread>
		if (pending_thread != NULL) {
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, 0);

			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   23d8c:	4651      	mov	r1, sl
		if (pending_thread != NULL) {
   23d8e:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
   23d90:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
   23d92:	b180      	cbz	r0, 23db6 <z_impl_k_msgq_put+0x56>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   23d94:	2400      	movs	r4, #0
			(void)memcpy(pending_thread->base.swap_data, data,
   23d96:	6940      	ldr	r0, [r0, #20]
   23d98:	f003 fc98 	bl	276cc <memcpy>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   23d9c:	4628      	mov	r0, r5
   23d9e:	f8c5 40b0 	str.w	r4, [r5, #176]	; 0xb0
   23da2:	f004 f831 	bl	27e08 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   23da6:	4648      	mov	r0, r9
   23da8:	4641      	mov	r1, r8
   23daa:	f000 f9eb 	bl	24184 <z_reschedule>
			return 0;
   23dae:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   23db0:	b002      	add	sp, #8
   23db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
   23db6:	69e0      	ldr	r0, [r4, #28]
   23db8:	f003 fc88 	bl	276cc <memcpy>
			msgq->write_ptr += msgq->msg_size;
   23dbc:	69e3      	ldr	r3, [r4, #28]
   23dbe:	68a2      	ldr	r2, [r4, #8]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   23dc0:	f104 0024 	add.w	r0, r4, #36	; 0x24
			msgq->write_ptr += msgq->msg_size;
   23dc4:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   23dc6:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   23dc8:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   23dca:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   23dcc:	bf08      	it	eq
   23dce:	6923      	ldreq	r3, [r4, #16]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   23dd0:	f04f 0110 	mov.w	r1, #16
				msgq->write_ptr = msgq->buffer_start;
   23dd4:	bf08      	it	eq
   23dd6:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   23dd8:	6a23      	ldr	r3, [r4, #32]
   23dda:	3301      	adds	r3, #1
   23ddc:	6223      	str	r3, [r4, #32]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   23dde:	f004 fa57 	bl	28290 <z_handle_obj_poll_events>
		result = 0;
   23de2:	2000      	movs	r0, #0
	__asm__ volatile(
   23de4:	f388 8811 	msr	BASEPRI, r8
   23de8:	f3bf 8f6f 	isb	sy
	return result;
   23dec:	e7e0      	b.n	23db0 <z_impl_k_msgq_put+0x50>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   23dee:	ea56 0307 	orrs.w	r3, r6, r7
   23df2:	d00a      	beq.n	23e0a <z_impl_k_msgq_put+0xaa>
		_current->base.swap_data = (void *) data;
   23df4:	4b06      	ldr	r3, [pc, #24]	; (23e10 <z_impl_k_msgq_put+0xb0>)
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   23df6:	4602      	mov	r2, r0
		_current->base.swap_data = (void *) data;
   23df8:	689b      	ldr	r3, [r3, #8]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   23dfa:	4648      	mov	r0, r9
		_current->base.swap_data = (void *) data;
   23dfc:	6159      	str	r1, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   23dfe:	4641      	mov	r1, r8
   23e00:	e9cd 6700 	strd	r6, r7, [sp]
   23e04:	f000 fa42 	bl	2428c <z_pend_curr>
		return result;
   23e08:	e7d2      	b.n	23db0 <z_impl_k_msgq_put+0x50>
		result = -ENOMSG;
   23e0a:	f06f 0022 	mvn.w	r0, #34	; 0x22
   23e0e:	e7e9      	b.n	23de4 <z_impl_k_msgq_put+0x84>
   23e10:	20008e30 	.word	0x20008e30

00023e14 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   23e14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   23e18:	4604      	mov	r4, r0
   23e1a:	4616      	mov	r6, r2
   23e1c:	4608      	mov	r0, r1
   23e1e:	461f      	mov	r7, r3

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   23e20:	f104 0908 	add.w	r9, r4, #8
	__asm__ volatile(
   23e24:	f04f 0320 	mov.w	r3, #32
   23e28:	f3ef 8811 	mrs	r8, BASEPRI
   23e2c:	f383 8811 	msr	BASEPRI, r3
   23e30:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
   23e34:	6a23      	ldr	r3, [r4, #32]
   23e36:	2b00      	cmp	r3, #0
   23e38:	d034      	beq.n	23ea4 <z_impl_k_msgq_get+0x90>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   23e3a:	68a2      	ldr	r2, [r4, #8]
   23e3c:	69a1      	ldr	r1, [r4, #24]
   23e3e:	f003 fc45 	bl	276cc <memcpy>
		msgq->read_ptr += msgq->msg_size;
   23e42:	69a3      	ldr	r3, [r4, #24]
   23e44:	68a2      	ldr	r2, [r4, #8]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   23e46:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   23e48:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   23e4a:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   23e4c:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   23e4e:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   23e50:	bf04      	itt	eq
   23e52:	6923      	ldreq	r3, [r4, #16]
   23e54:	61a3      	streq	r3, [r4, #24]
		msgq->used_msgs--;
   23e56:	6a23      	ldr	r3, [r4, #32]
   23e58:	3b01      	subs	r3, #1
   23e5a:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   23e5c:	f004 f81b 	bl	27e96 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   23e60:	4605      	mov	r5, r0
   23e62:	2800      	cmp	r0, #0
   23e64:	d02e      	beq.n	23ec4 <z_impl_k_msgq_get+0xb0>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
   23e66:	6941      	ldr	r1, [r0, #20]
   23e68:	68a2      	ldr	r2, [r4, #8]
   23e6a:	69e0      	ldr	r0, [r4, #28]
   23e6c:	f003 fc2e 	bl	276cc <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   23e70:	69e3      	ldr	r3, [r4, #28]
   23e72:	68a2      	ldr	r2, [r4, #8]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   23e74:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   23e76:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   23e78:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   23e7a:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   23e7c:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   23e7e:	bf04      	itt	eq
   23e80:	6923      	ldreq	r3, [r4, #16]
   23e82:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   23e84:	6a23      	ldr	r3, [r4, #32]
   23e86:	3301      	adds	r3, #1
   23e88:	6223      	str	r3, [r4, #32]
   23e8a:	2400      	movs	r4, #0
   23e8c:	f8c5 40b0 	str.w	r4, [r5, #176]	; 0xb0
			z_ready_thread(pending_thread);
   23e90:	f003 ffba 	bl	27e08 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   23e94:	4648      	mov	r0, r9
   23e96:	4641      	mov	r1, r8
   23e98:	f000 f974 	bl	24184 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
   23e9c:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   23e9e:	b003      	add	sp, #12
   23ea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   23ea4:	ea56 0307 	orrs.w	r3, r6, r7
   23ea8:	d00a      	beq.n	23ec0 <z_impl_k_msgq_get+0xac>
		_current->base.swap_data = data;
   23eaa:	4b09      	ldr	r3, [pc, #36]	; (23ed0 <z_impl_k_msgq_get+0xbc>)
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   23eac:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   23eae:	689b      	ldr	r3, [r3, #8]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   23eb0:	4648      	mov	r0, r9
		_current->base.swap_data = data;
   23eb2:	6159      	str	r1, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   23eb4:	4641      	mov	r1, r8
   23eb6:	e9cd 6700 	strd	r6, r7, [sp]
   23eba:	f000 f9e7 	bl	2428c <z_pend_curr>
		return result;
   23ebe:	e7ee      	b.n	23e9e <z_impl_k_msgq_get+0x8a>
		result = -ENOMSG;
   23ec0:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
   23ec4:	f388 8811 	msr	BASEPRI, r8
   23ec8:	f3bf 8f6f 	isb	sy
	return result;
   23ecc:	e7e7      	b.n	23e9e <z_impl_k_msgq_get+0x8a>
   23ece:	bf00      	nop
   23ed0:	20008e30 	.word	0x20008e30

00023ed4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   23ed4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   23ed8:	4604      	mov	r4, r0
   23eda:	4616      	mov	r6, r2
   23edc:	461f      	mov	r7, r3
	__asm__ volatile(
   23ede:	f04f 0320 	mov.w	r3, #32
   23ee2:	f3ef 8811 	mrs	r8, BASEPRI
   23ee6:	f383 8811 	msr	BASEPRI, r3
   23eea:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   23eee:	68c3      	ldr	r3, [r0, #12]
   23ef0:	4a32      	ldr	r2, [pc, #200]	; (23fbc <z_impl_k_mutex_lock+0xe8>)
   23ef2:	b16b      	cbz	r3, 23f10 <z_impl_k_mutex_lock+0x3c>
   23ef4:	6880      	ldr	r0, [r0, #8]
   23ef6:	6891      	ldr	r1, [r2, #8]
   23ef8:	4288      	cmp	r0, r1
   23efa:	d019      	beq.n	23f30 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   23efc:	ea56 0307 	orrs.w	r3, r6, r7
   23f00:	d118      	bne.n	23f34 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   23f02:	f388 8811 	msr	BASEPRI, r8
   23f06:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   23f0a:	f06f 000f 	mvn.w	r0, #15
   23f0e:	e00c      	b.n	23f2a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   23f10:	6891      	ldr	r1, [r2, #8]
   23f12:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   23f16:	3301      	adds	r3, #1
   23f18:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   23f1a:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   23f1c:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   23f1e:	60a3      	str	r3, [r4, #8]
   23f20:	f388 8811 	msr	BASEPRI, r8
   23f24:	f3bf 8f6f 	isb	sy
		return 0;
   23f28:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   23f2a:	b002      	add	sp, #8
   23f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   23f30:	6921      	ldr	r1, [r4, #16]
   23f32:	e7f0      	b.n	23f16 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   23f34:	f990 300e 	ldrsb.w	r3, [r0, #14]
   23f38:	f991 100e 	ldrsb.w	r1, [r1, #14]
   23f3c:	4299      	cmp	r1, r3
   23f3e:	bfa8      	it	ge
   23f40:	4619      	movge	r1, r3
   23f42:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   23f46:	428b      	cmp	r3, r1
   23f48:	dd2c      	ble.n	23fa4 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   23f4a:	f000 fb11 	bl	24570 <z_set_prio>
   23f4e:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   23f50:	4622      	mov	r2, r4
   23f52:	4641      	mov	r1, r8
   23f54:	e9cd 6700 	strd	r6, r7, [sp]
   23f58:	4819      	ldr	r0, [pc, #100]	; (23fc0 <z_impl_k_mutex_lock+0xec>)
   23f5a:	f000 f997 	bl	2428c <z_pend_curr>
	if (got_mutex == 0) {
   23f5e:	2800      	cmp	r0, #0
   23f60:	d0e3      	beq.n	23f2a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   23f62:	f04f 0320 	mov.w	r3, #32
   23f66:	f3ef 8611 	mrs	r6, BASEPRI
   23f6a:	f383 8811 	msr	BASEPRI, r3
   23f6e:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   23f72:	6823      	ldr	r3, [r4, #0]
   23f74:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23f76:	429c      	cmp	r4, r3
   23f78:	d007      	beq.n	23f8a <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   23f7a:	b133      	cbz	r3, 23f8a <z_impl_k_mutex_lock+0xb6>
   23f7c:	f993 300e 	ldrsb.w	r3, [r3, #14]
   23f80:	4299      	cmp	r1, r3
   23f82:	bfa8      	it	ge
   23f84:	4619      	movge	r1, r3
   23f86:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   23f8a:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   23f8c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   23f90:	4299      	cmp	r1, r3
   23f92:	d109      	bne.n	23fa8 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   23f94:	b16d      	cbz	r5, 23fb2 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   23f96:	4631      	mov	r1, r6
   23f98:	4809      	ldr	r0, [pc, #36]	; (23fc0 <z_impl_k_mutex_lock+0xec>)
   23f9a:	f000 f8f3 	bl	24184 <z_reschedule>
	return -EAGAIN;
   23f9e:	f06f 000a 	mvn.w	r0, #10
   23fa2:	e7c2      	b.n	23f2a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   23fa4:	2500      	movs	r5, #0
   23fa6:	e7d3      	b.n	23f50 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   23fa8:	f000 fae2 	bl	24570 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   23fac:	2800      	cmp	r0, #0
   23fae:	d1f2      	bne.n	23f96 <z_impl_k_mutex_lock+0xc2>
   23fb0:	e7f0      	b.n	23f94 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   23fb2:	f386 8811 	msr	BASEPRI, r6
   23fb6:	f3bf 8f6f 	isb	sy
   23fba:	e7f0      	b.n	23f9e <z_impl_k_mutex_lock+0xca>
   23fbc:	20008e30 	.word	0x20008e30
   23fc0:	200096dc 	.word	0x200096dc

00023fc4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   23fc4:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   23fc6:	6883      	ldr	r3, [r0, #8]
{
   23fc8:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   23fca:	2b00      	cmp	r3, #0
   23fcc:	d037      	beq.n	2403e <z_impl_k_mutex_unlock+0x7a>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   23fce:	4a1f      	ldr	r2, [pc, #124]	; (2404c <z_impl_k_mutex_unlock+0x88>)
   23fd0:	6892      	ldr	r2, [r2, #8]
   23fd2:	4293      	cmp	r3, r2
   23fd4:	d136      	bne.n	24044 <z_impl_k_mutex_unlock+0x80>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   23fd6:	7bda      	ldrb	r2, [r3, #15]
   23fd8:	3a01      	subs	r2, #1
   23fda:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   23fdc:	68c3      	ldr	r3, [r0, #12]
   23fde:	2b01      	cmp	r3, #1
   23fe0:	d005      	beq.n	23fee <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   23fe2:	3b01      	subs	r3, #1
   23fe4:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   23fe6:	f000 f9d1 	bl	2438c <k_sched_unlock>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   23fea:	2000      	movs	r0, #0
}
   23fec:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   23fee:	f04f 0320 	mov.w	r3, #32
   23ff2:	f3ef 8511 	mrs	r5, BASEPRI
   23ff6:	f383 8811 	msr	BASEPRI, r3
   23ffa:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   23ffe:	6901      	ldr	r1, [r0, #16]
   24000:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   24002:	f990 300e 	ldrsb.w	r3, [r0, #14]
   24006:	4299      	cmp	r1, r3
   24008:	d001      	beq.n	2400e <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   2400a:	f000 fab1 	bl	24570 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   2400e:	4620      	mov	r0, r4
   24010:	f003 ff41 	bl	27e96 <z_unpend_first_thread>
	mutex->owner = new_owner;
   24014:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   24016:	b160      	cbz	r0, 24032 <z_impl_k_mutex_unlock+0x6e>
		mutex->owner_orig_prio = new_owner->base.prio;
   24018:	f990 200e 	ldrsb.w	r2, [r0, #14]
   2401c:	6122      	str	r2, [r4, #16]
   2401e:	2200      	movs	r2, #0
   24020:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   24024:	f003 fef0 	bl	27e08 <z_ready_thread>
		z_reschedule(&lock, key);
   24028:	4629      	mov	r1, r5
   2402a:	4809      	ldr	r0, [pc, #36]	; (24050 <z_impl_k_mutex_unlock+0x8c>)
   2402c:	f000 f8aa 	bl	24184 <z_reschedule>
   24030:	e7d9      	b.n	23fe6 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   24032:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   24034:	f385 8811 	msr	BASEPRI, r5
   24038:	f3bf 8f6f 	isb	sy
   2403c:	e7d3      	b.n	23fe6 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   2403e:	f06f 0015 	mvn.w	r0, #21
   24042:	e7d3      	b.n	23fec <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   24044:	f04f 30ff 	mov.w	r0, #4294967295
   24048:	e7d0      	b.n	23fec <z_impl_k_mutex_unlock+0x28>
   2404a:	bf00      	nop
   2404c:	20008e30 	.word	0x20008e30
   24050:	200096dc 	.word	0x200096dc

00024054 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   24054:	b538      	push	{r3, r4, r5, lr}
   24056:	4604      	mov	r4, r0
	__asm__ volatile(
   24058:	f04f 0320 	mov.w	r3, #32
   2405c:	f3ef 8511 	mrs	r5, BASEPRI
   24060:	f383 8811 	msr	BASEPRI, r3
   24064:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   24068:	f003 ff15 	bl	27e96 <z_unpend_first_thread>

	if (thread != NULL) {
   2406c:	b150      	cbz	r0, 24084 <z_impl_k_sem_give+0x30>
   2406e:	2200      	movs	r2, #0
   24070:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   24074:	f003 fec8 	bl	27e08 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   24078:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   2407a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   2407e:	4807      	ldr	r0, [pc, #28]	; (2409c <z_impl_k_sem_give+0x48>)
   24080:	f000 b880 	b.w	24184 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   24084:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   24088:	429a      	cmp	r2, r3
   2408a:	bf18      	it	ne
   2408c:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2408e:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   24090:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   24092:	f104 0010 	add.w	r0, r4, #16
   24096:	f004 f8fb 	bl	28290 <z_handle_obj_poll_events>
}
   2409a:	e7ed      	b.n	24078 <z_impl_k_sem_give+0x24>
   2409c:	200096dc 	.word	0x200096dc

000240a0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   240a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   240a2:	4614      	mov	r4, r2
   240a4:	461d      	mov	r5, r3
   240a6:	f04f 0320 	mov.w	r3, #32
   240aa:	f3ef 8111 	mrs	r1, BASEPRI
   240ae:	f383 8811 	msr	BASEPRI, r3
   240b2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   240b6:	6883      	ldr	r3, [r0, #8]
   240b8:	b143      	cbz	r3, 240cc <z_impl_k_sem_take+0x2c>
		sem->count--;
   240ba:	3b01      	subs	r3, #1
   240bc:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   240be:	f381 8811 	msr	BASEPRI, r1
   240c2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   240c6:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   240c8:	b003      	add	sp, #12
   240ca:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   240cc:	ea54 0305 	orrs.w	r3, r4, r5
   240d0:	d106      	bne.n	240e0 <z_impl_k_sem_take+0x40>
   240d2:	f381 8811 	msr	BASEPRI, r1
   240d6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   240da:	f06f 000f 	mvn.w	r0, #15
   240de:	e7f3      	b.n	240c8 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   240e0:	4602      	mov	r2, r0
   240e2:	e9cd 4500 	strd	r4, r5, [sp]
   240e6:	4802      	ldr	r0, [pc, #8]	; (240f0 <z_impl_k_sem_take+0x50>)
   240e8:	f000 f8d0 	bl	2428c <z_pend_curr>
	return ret;
   240ec:	e7ec      	b.n	240c8 <z_impl_k_sem_take+0x28>
   240ee:	bf00      	nop
   240f0:	200096dc 	.word	0x200096dc

000240f4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   240f4:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   240f6:	4c08      	ldr	r4, [pc, #32]	; (24118 <z_reset_time_slice+0x24>)
   240f8:	6823      	ldr	r3, [r4, #0]
   240fa:	b15b      	cbz	r3, 24114 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   240fc:	f7fd fca4 	bl	21a48 <sys_clock_elapsed>
   24100:	4603      	mov	r3, r0
   24102:	6820      	ldr	r0, [r4, #0]
   24104:	4a05      	ldr	r2, [pc, #20]	; (2411c <z_reset_time_slice+0x28>)
   24106:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
   24108:	2100      	movs	r1, #0
	}
}
   2410a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   2410e:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   24110:	f003 bf2d 	b.w	27f6e <z_set_timeout_expiry>
}
   24114:	bd10      	pop	{r4, pc}
   24116:	bf00      	nop
   24118:	20008e6c 	.word	0x20008e6c
   2411c:	20008e30 	.word	0x20008e30

00024120 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   24120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24122:	4604      	mov	r4, r0
   24124:	460d      	mov	r5, r1
	__asm__ volatile(
   24126:	f04f 0320 	mov.w	r3, #32
   2412a:	f3ef 8611 	mrs	r6, BASEPRI
   2412e:	f383 8811 	msr	BASEPRI, r3
   24132:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   24136:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   24138:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   2413c:	f240 30e7 	movw	r0, #999	; 0x3e7
   24140:	2100      	movs	r1, #0
   24142:	4b0d      	ldr	r3, [pc, #52]	; (24178 <k_sched_time_slice_set+0x58>)
   24144:	fbe7 0104 	umlal	r0, r1, r7, r4
   24148:	611a      	str	r2, [r3, #16]
   2414a:	2300      	movs	r3, #0
   2414c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   24150:	f7ec f8c6 	bl	102e0 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   24154:	2c00      	cmp	r4, #0
   24156:	4b09      	ldr	r3, [pc, #36]	; (2417c <k_sched_time_slice_set+0x5c>)
   24158:	dc09      	bgt.n	2416e <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   2415a:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   2415c:	4b08      	ldr	r3, [pc, #32]	; (24180 <k_sched_time_slice_set+0x60>)
   2415e:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   24160:	f7ff ffc8 	bl	240f4 <z_reset_time_slice>
	__asm__ volatile(
   24164:	f386 8811 	msr	BASEPRI, r6
   24168:	f3bf 8f6f 	isb	sy
	}
}
   2416c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   2416e:	2802      	cmp	r0, #2
   24170:	bfb8      	it	lt
   24172:	2002      	movlt	r0, #2
   24174:	e7f1      	b.n	2415a <k_sched_time_slice_set+0x3a>
   24176:	bf00      	nop
   24178:	20008e30 	.word	0x20008e30
   2417c:	20008e6c 	.word	0x20008e6c
   24180:	20008e68 	.word	0x20008e68

00024184 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   24184:	b949      	cbnz	r1, 2419a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   24186:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   2418a:	b930      	cbnz	r0, 2419a <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   2418c:	4b05      	ldr	r3, [pc, #20]	; (241a4 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   2418e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   24190:	689b      	ldr	r3, [r3, #8]
   24192:	429a      	cmp	r2, r3
   24194:	d001      	beq.n	2419a <z_reschedule+0x16>
	ret = arch_swap(key);
   24196:	f7fd bc93 	b.w	21ac0 <arch_swap>
   2419a:	f381 8811 	msr	BASEPRI, r1
   2419e:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   241a2:	4770      	bx	lr
   241a4:	20008e30 	.word	0x20008e30

000241a8 <k_sched_lock>:
	__asm__ volatile(
   241a8:	f04f 0320 	mov.w	r3, #32
   241ac:	f3ef 8111 	mrs	r1, BASEPRI
   241b0:	f383 8811 	msr	BASEPRI, r3
   241b4:	f3bf 8f6f 	isb	sy
   241b8:	4b04      	ldr	r3, [pc, #16]	; (241cc <k_sched_lock+0x24>)
   241ba:	689a      	ldr	r2, [r3, #8]
   241bc:	7bd3      	ldrb	r3, [r2, #15]
   241be:	3b01      	subs	r3, #1
   241c0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   241c2:	f381 8811 	msr	BASEPRI, r1
   241c6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   241ca:	4770      	bx	lr
   241cc:	20008e30 	.word	0x20008e30

000241d0 <update_cache>:
{
   241d0:	b538      	push	{r3, r4, r5, lr}
   241d2:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   241d4:	480c      	ldr	r0, [pc, #48]	; (24208 <update_cache+0x38>)
   241d6:	f003 fde0 	bl	27d9a <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   241da:	4d0c      	ldr	r5, [pc, #48]	; (2420c <update_cache+0x3c>)
   241dc:	4604      	mov	r4, r0
   241de:	b900      	cbnz	r0, 241e2 <update_cache+0x12>
   241e0:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   241e2:	68ab      	ldr	r3, [r5, #8]
   241e4:	b94a      	cbnz	r2, 241fa <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   241e6:	7b5a      	ldrb	r2, [r3, #13]
   241e8:	06d2      	lsls	r2, r2, #27
   241ea:	d106      	bne.n	241fa <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   241ec:	69a2      	ldr	r2, [r4, #24]
   241ee:	b922      	cbnz	r2, 241fa <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   241f0:	89da      	ldrh	r2, [r3, #14]
   241f2:	2a7f      	cmp	r2, #127	; 0x7f
   241f4:	d901      	bls.n	241fa <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   241f6:	626b      	str	r3, [r5, #36]	; 0x24
}
   241f8:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   241fa:	429c      	cmp	r4, r3
   241fc:	d001      	beq.n	24202 <update_cache+0x32>
			z_reset_time_slice();
   241fe:	f7ff ff79 	bl	240f4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   24202:	626c      	str	r4, [r5, #36]	; 0x24
}
   24204:	e7f8      	b.n	241f8 <update_cache+0x28>
   24206:	bf00      	nop
   24208:	20008e58 	.word	0x20008e58
   2420c:	20008e30 	.word	0x20008e30

00024210 <unready_thread>:
{
   24210:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   24212:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   24216:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   24218:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   2421a:	7b43      	ldrb	r3, [r0, #13]
   2421c:	da04      	bge.n	24228 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2421e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   24222:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   24224:	f003 fd64 	bl	27cf0 <sys_dlist_remove>
	update_cache(thread == _current);
   24228:	4b04      	ldr	r3, [pc, #16]	; (2423c <unready_thread+0x2c>)
   2422a:	6898      	ldr	r0, [r3, #8]
   2422c:	1a43      	subs	r3, r0, r1
   2422e:	4258      	negs	r0, r3
   24230:	4158      	adcs	r0, r3
}
   24232:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   24236:	f7ff bfcb 	b.w	241d0 <update_cache>
   2423a:	bf00      	nop
   2423c:	20008e30 	.word	0x20008e30

00024240 <pend>:
{
   24240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24244:	4606      	mov	r6, r0
   24246:	4614      	mov	r4, r2
   24248:	461d      	mov	r5, r3
	__asm__ volatile(
   2424a:	f04f 0320 	mov.w	r3, #32
   2424e:	f3ef 8711 	mrs	r7, BASEPRI
   24252:	f383 8811 	msr	BASEPRI, r3
   24256:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   2425a:	f003 fda8 	bl	27dae <add_to_waitq_locked>
	__asm__ volatile(
   2425e:	f387 8811 	msr	BASEPRI, r7
   24262:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24266:	1c6b      	adds	r3, r5, #1
   24268:	bf08      	it	eq
   2426a:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   2426e:	d008      	beq.n	24282 <pend+0x42>
   24270:	4622      	mov	r2, r4
   24272:	462b      	mov	r3, r5
   24274:	f106 0018 	add.w	r0, r6, #24
   24278:	4903      	ldr	r1, [pc, #12]	; (24288 <pend+0x48>)
}
   2427a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2427e:	f000 bb51 	b.w	24924 <z_add_timeout>
   24282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24286:	bf00      	nop
   24288:	00027e29 	.word	0x00027e29

0002428c <z_pend_curr>:
{
   2428c:	b510      	push	{r4, lr}
   2428e:	460c      	mov	r4, r1
	pending_current = _current;
   24290:	4b06      	ldr	r3, [pc, #24]	; (242ac <z_pend_curr+0x20>)
{
   24292:	4611      	mov	r1, r2
	pending_current = _current;
   24294:	6898      	ldr	r0, [r3, #8]
   24296:	4b06      	ldr	r3, [pc, #24]	; (242b0 <z_pend_curr+0x24>)
   24298:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   2429a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2429e:	f7ff ffcf 	bl	24240 <pend>
   242a2:	4620      	mov	r0, r4
}
   242a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   242a8:	f7fd bc0a 	b.w	21ac0 <arch_swap>
   242ac:	20008e30 	.word	0x20008e30
   242b0:	20008e64 	.word	0x20008e64

000242b4 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
   242b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   242b8:	4605      	mov	r5, r0
   242ba:	460f      	mov	r7, r1
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);

	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   242bc:	f003 fe71 	bl	27fa2 <sys_clock_tick_get_32>
   242c0:	4604      	mov	r4, r0
	__asm__ volatile(
   242c2:	f04f 0320 	mov.w	r3, #32
   242c6:	f3ef 8811 	mrs	r8, BASEPRI
   242ca:	f383 8811 	msr	BASEPRI, r3
   242ce:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   242d2:	4e12      	ldr	r6, [pc, #72]	; (2431c <z_tick_sleep.part.0+0x68>)
   242d4:	4b12      	ldr	r3, [pc, #72]	; (24320 <z_tick_sleep.part.0+0x6c>)
   242d6:	68b0      	ldr	r0, [r6, #8]
	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   242d8:	442c      	add	r4, r5
	pending_current = _current;
   242da:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   242dc:	f7ff ff98 	bl	24210 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   242e0:	68b0      	ldr	r0, [r6, #8]
   242e2:	4910      	ldr	r1, [pc, #64]	; (24324 <z_tick_sleep.part.0+0x70>)
   242e4:	462a      	mov	r2, r5
   242e6:	463b      	mov	r3, r7
   242e8:	3018      	adds	r0, #24
   242ea:	f000 fb1b 	bl	24924 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   242ee:	68b2      	ldr	r2, [r6, #8]
   242f0:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
   242f2:	7b53      	ldrb	r3, [r2, #13]

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   242f4:	2500      	movs	r5, #0
   242f6:	f043 0310 	orr.w	r3, r3, #16
   242fa:	7353      	strb	r3, [r2, #13]
   242fc:	f7fd fbe0 	bl	21ac0 <arch_swap>
   24300:	f003 fe4f 	bl	27fa2 <sys_clock_tick_get_32>
   24304:	1a24      	subs	r4, r4, r0
   24306:	f165 0500 	sbc.w	r5, r5, #0
   2430a:	2c00      	cmp	r4, #0
   2430c:	f175 0300 	sbcs.w	r3, r5, #0
   24310:	bfb8      	it	lt
   24312:	2400      	movlt	r4, #0
		return ticks;
	}
#endif

	return 0;
}
   24314:	4620      	mov	r0, r4
   24316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2431a:	bf00      	nop
   2431c:	20008e30 	.word	0x20008e30
   24320:	20008e64 	.word	0x20008e64
   24324:	00027e29 	.word	0x00027e29

00024328 <z_impl_k_thread_suspend>:
{
   24328:	b570      	push	{r4, r5, r6, lr}
   2432a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   2432c:	3018      	adds	r0, #24
   2432e:	f003 fde8 	bl	27f02 <z_abort_timeout>
   24332:	f04f 0320 	mov.w	r3, #32
   24336:	f3ef 8611 	mrs	r6, BASEPRI
   2433a:	f383 8811 	msr	BASEPRI, r3
   2433e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   24342:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   24346:	7b63      	ldrb	r3, [r4, #13]
   24348:	2a00      	cmp	r2, #0
   2434a:	da05      	bge.n	24358 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2434c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
   24350:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
   24352:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   24354:	f003 fccc 	bl	27cf0 <sys_dlist_remove>
		update_cache(thread == _current);
   24358:	4d0b      	ldr	r5, [pc, #44]	; (24388 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2435a:	7b63      	ldrb	r3, [r4, #13]
   2435c:	68a8      	ldr	r0, [r5, #8]
   2435e:	f043 0310 	orr.w	r3, r3, #16
   24362:	7363      	strb	r3, [r4, #13]
   24364:	1b03      	subs	r3, r0, r4
   24366:	4258      	negs	r0, r3
   24368:	4158      	adcs	r0, r3
   2436a:	f7ff ff31 	bl	241d0 <update_cache>
	__asm__ volatile(
   2436e:	f386 8811 	msr	BASEPRI, r6
   24372:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   24376:	68ab      	ldr	r3, [r5, #8]
   24378:	42a3      	cmp	r3, r4
   2437a:	d103      	bne.n	24384 <z_impl_k_thread_suspend+0x5c>
}
   2437c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   24380:	f003 bd01 	b.w	27d86 <z_reschedule_unlocked>
}
   24384:	bd70      	pop	{r4, r5, r6, pc}
   24386:	bf00      	nop
   24388:	20008e30 	.word	0x20008e30

0002438c <k_sched_unlock>:
{
   2438c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2438e:	f04f 0320 	mov.w	r3, #32
   24392:	f3ef 8411 	mrs	r4, BASEPRI
   24396:	f383 8811 	msr	BASEPRI, r3
   2439a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   2439e:	4b08      	ldr	r3, [pc, #32]	; (243c0 <k_sched_unlock+0x34>)
		update_cache(0);
   243a0:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   243a2:	689a      	ldr	r2, [r3, #8]
   243a4:	7bd3      	ldrb	r3, [r2, #15]
   243a6:	3301      	adds	r3, #1
   243a8:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   243aa:	f7ff ff11 	bl	241d0 <update_cache>
	__asm__ volatile(
   243ae:	f384 8811 	msr	BASEPRI, r4
   243b2:	f3bf 8f6f 	isb	sy
}
   243b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   243ba:	f003 bce4 	b.w	27d86 <z_reschedule_unlocked>
   243be:	bf00      	nop
   243c0:	20008e30 	.word	0x20008e30

000243c4 <move_thread_to_end_of_prio_q>:
{
   243c4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   243c6:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   243ca:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   243cc:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   243ce:	7b43      	ldrb	r3, [r0, #13]
   243d0:	da04      	bge.n	243dc <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   243d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   243d6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   243d8:	f003 fc8a 	bl	27cf0 <sys_dlist_remove>
	return list->head == list;
   243dc:	4a17      	ldr	r2, [pc, #92]	; (2443c <move_thread_to_end_of_prio_q+0x78>)
	thread->base.thread_state |= _THREAD_QUEUED;
   243de:	7b4b      	ldrb	r3, [r1, #13]
   243e0:	4610      	mov	r0, r2
   243e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   243e6:	734b      	strb	r3, [r1, #13]
   243e8:	f850 3f28 	ldr.w	r3, [r0, #40]!
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   243ec:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   243ee:	4283      	cmp	r3, r0
   243f0:	bf08      	it	eq
   243f2:	2300      	moveq	r3, #0
   243f4:	2b00      	cmp	r3, #0
   243f6:	bf38      	it	cc
   243f8:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   243fa:	b1cb      	cbz	r3, 24430 <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
   243fc:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   24400:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   24404:	42a6      	cmp	r6, r4
   24406:	d00f      	beq.n	24428 <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
   24408:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   2440a:	2c00      	cmp	r4, #0
   2440c:	dd0c      	ble.n	24428 <move_thread_to_end_of_prio_q+0x64>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   2440e:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   24410:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   24414:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   24416:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   24418:	6890      	ldr	r0, [r2, #8]
}
   2441a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   2441e:	1a43      	subs	r3, r0, r1
   24420:	4258      	negs	r0, r3
   24422:	4158      	adcs	r0, r3
   24424:	f7ff bed4 	b.w	241d0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   24428:	42ab      	cmp	r3, r5
   2442a:	d001      	beq.n	24430 <move_thread_to_end_of_prio_q+0x6c>
   2442c:	681b      	ldr	r3, [r3, #0]
   2442e:	e7e4      	b.n	243fa <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
   24430:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
   24434:	6029      	str	r1, [r5, #0]
	list->tail = node;
   24436:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   24438:	e7ee      	b.n	24418 <move_thread_to_end_of_prio_q+0x54>
   2443a:	bf00      	nop
   2443c:	20008e30 	.word	0x20008e30

00024440 <z_time_slice>:
{
   24440:	4601      	mov	r1, r0
   24442:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   24444:	f04f 0320 	mov.w	r3, #32
   24448:	f3ef 8411 	mrs	r4, BASEPRI
   2444c:	f383 8811 	msr	BASEPRI, r3
   24450:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   24454:	4b16      	ldr	r3, [pc, #88]	; (244b0 <z_time_slice+0x70>)
   24456:	4a17      	ldr	r2, [pc, #92]	; (244b4 <z_time_slice+0x74>)
   24458:	6898      	ldr	r0, [r3, #8]
   2445a:	6815      	ldr	r5, [r2, #0]
   2445c:	42a8      	cmp	r0, r5
   2445e:	461d      	mov	r5, r3
   24460:	d106      	bne.n	24470 <z_time_slice+0x30>
			z_reset_time_slice();
   24462:	f7ff fe47 	bl	240f4 <z_reset_time_slice>
	__asm__ volatile(
   24466:	f384 8811 	msr	BASEPRI, r4
   2446a:	f3bf 8f6f 	isb	sy
}
   2446e:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   24470:	2600      	movs	r6, #0
   24472:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   24474:	4a10      	ldr	r2, [pc, #64]	; (244b8 <z_time_slice+0x78>)
   24476:	6812      	ldr	r2, [r2, #0]
   24478:	b1ba      	cbz	r2, 244aa <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   2447a:	89c2      	ldrh	r2, [r0, #14]
   2447c:	2a7f      	cmp	r2, #127	; 0x7f
   2447e:	d814      	bhi.n	244aa <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   24480:	7b42      	ldrb	r2, [r0, #13]
   24482:	06d2      	lsls	r2, r2, #27
   24484:	d111      	bne.n	244aa <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   24486:	4a0d      	ldr	r2, [pc, #52]	; (244bc <z_time_slice+0x7c>)
   24488:	f990 600e 	ldrsb.w	r6, [r0, #14]
   2448c:	6812      	ldr	r2, [r2, #0]
   2448e:	4296      	cmp	r6, r2
   24490:	db0b      	blt.n	244aa <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   24492:	4a0b      	ldr	r2, [pc, #44]	; (244c0 <z_time_slice+0x80>)
   24494:	4290      	cmp	r0, r2
   24496:	d008      	beq.n	244aa <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   24498:	691a      	ldr	r2, [r3, #16]
   2449a:	428a      	cmp	r2, r1
   2449c:	dc02      	bgt.n	244a4 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   2449e:	f7ff ff91 	bl	243c4 <move_thread_to_end_of_prio_q>
   244a2:	e7de      	b.n	24462 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   244a4:	1a52      	subs	r2, r2, r1
   244a6:	611a      	str	r2, [r3, #16]
   244a8:	e7dd      	b.n	24466 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   244aa:	2300      	movs	r3, #0
   244ac:	612b      	str	r3, [r5, #16]
   244ae:	e7da      	b.n	24466 <z_time_slice+0x26>
   244b0:	20008e30 	.word	0x20008e30
   244b4:	20008e64 	.word	0x20008e64
   244b8:	20008e6c 	.word	0x20008e6c
   244bc:	20008e68 	.word	0x20008e68
   244c0:	20008610 	.word	0x20008610

000244c4 <ready_thread>:
{
   244c4:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   244c6:	f990 300d 	ldrsb.w	r3, [r0, #13]
   244ca:	7b42      	ldrb	r2, [r0, #13]
   244cc:	2b00      	cmp	r3, #0
   244ce:	db2d      	blt.n	2452c <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   244d0:	06d3      	lsls	r3, r2, #27
   244d2:	d12b      	bne.n	2452c <ready_thread+0x68>
	return !sys_dnode_is_linked(&to->node);
   244d4:	6983      	ldr	r3, [r0, #24]
   244d6:	bb4b      	cbnz	r3, 2452c <ready_thread+0x68>
	return list->head == list;
   244d8:	4915      	ldr	r1, [pc, #84]	; (24530 <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
   244da:	f062 027f 	orn	r2, r2, #127	; 0x7f
   244de:	7342      	strb	r2, [r0, #13]
   244e0:	460a      	mov	r2, r1
   244e2:	f852 4f28 	ldr.w	r4, [r2, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   244e6:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   244e8:	4294      	cmp	r4, r2
   244ea:	bf18      	it	ne
   244ec:	4623      	movne	r3, r4
   244ee:	2b00      	cmp	r3, #0
   244f0:	bf38      	it	cc
   244f2:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   244f4:	b1ab      	cbz	r3, 24522 <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
   244f6:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   244fa:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   244fe:	42a6      	cmp	r6, r4
   24500:	d00b      	beq.n	2451a <ready_thread+0x56>
		return b2 - b1;
   24502:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   24504:	2c00      	cmp	r4, #0
   24506:	dd08      	ble.n	2451a <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
   24508:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2450a:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   2450e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   24510:	6058      	str	r0, [r3, #4]
		update_cache(0);
   24512:	2000      	movs	r0, #0
}
   24514:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   24516:	f7ff be5b 	b.w	241d0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   2451a:	42ab      	cmp	r3, r5
   2451c:	d001      	beq.n	24522 <ready_thread+0x5e>
   2451e:	681b      	ldr	r3, [r3, #0]
   24520:	e7e8      	b.n	244f4 <ready_thread+0x30>
	node->prev = tail;
   24522:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
   24526:	6028      	str	r0, [r5, #0]
	list->tail = node;
   24528:	62c8      	str	r0, [r1, #44]	; 0x2c
}
   2452a:	e7f2      	b.n	24512 <ready_thread+0x4e>
}
   2452c:	bc70      	pop	{r4, r5, r6}
   2452e:	4770      	bx	lr
   24530:	20008e30 	.word	0x20008e30

00024534 <z_sched_start>:
{
   24534:	b510      	push	{r4, lr}
	__asm__ volatile(
   24536:	f04f 0220 	mov.w	r2, #32
   2453a:	f3ef 8411 	mrs	r4, BASEPRI
   2453e:	f382 8811 	msr	BASEPRI, r2
   24542:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   24546:	7b42      	ldrb	r2, [r0, #13]
   24548:	0751      	lsls	r1, r2, #29
   2454a:	d404      	bmi.n	24556 <z_sched_start+0x22>
	__asm__ volatile(
   2454c:	f384 8811 	msr	BASEPRI, r4
   24550:	f3bf 8f6f 	isb	sy
}
   24554:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   24556:	f022 0204 	bic.w	r2, r2, #4
   2455a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   2455c:	f7ff ffb2 	bl	244c4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   24560:	4621      	mov	r1, r4
}
   24562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   24566:	4801      	ldr	r0, [pc, #4]	; (2456c <z_sched_start+0x38>)
   24568:	f7ff be0c 	b.w	24184 <z_reschedule>
   2456c:	200096dc 	.word	0x200096dc

00024570 <z_set_prio>:
{
   24570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24572:	4604      	mov	r4, r0
	__asm__ volatile(
   24574:	f04f 0320 	mov.w	r3, #32
   24578:	f3ef 8611 	mrs	r6, BASEPRI
   2457c:	f383 8811 	msr	BASEPRI, r3
   24580:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   24584:	7b43      	ldrb	r3, [r0, #13]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
   24586:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   24588:	06da      	lsls	r2, r3, #27
   2458a:	d138      	bne.n	245fe <z_set_prio+0x8e>
   2458c:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   2458e:	2d00      	cmp	r5, #0
   24590:	d135      	bne.n	245fe <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   24592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   24596:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   24598:	f003 fbaa 	bl	27cf0 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2459c:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   2459e:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   245a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   245a4:	7343      	strb	r3, [r0, #13]
	return list->head == list;
   245a6:	4817      	ldr	r0, [pc, #92]	; (24604 <z_set_prio+0x94>)
   245a8:	4603      	mov	r3, r0
   245aa:	f853 7f28 	ldr.w	r7, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   245ae:	429f      	cmp	r7, r3
   245b0:	bf18      	it	ne
   245b2:	463d      	movne	r5, r7
   245b4:	2d00      	cmp	r5, #0
   245b6:	461a      	mov	r2, r3
   245b8:	462b      	mov	r3, r5
   245ba:	bf38      	it	cc
   245bc:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   245be:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   245c0:	b1c3      	cbz	r3, 245f4 <z_set_prio+0x84>
	int32_t b2 = thread_2->base.prio;
   245c2:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   245c6:	42a9      	cmp	r1, r5
   245c8:	d010      	beq.n	245ec <z_set_prio+0x7c>
		return b2 - b1;
   245ca:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   245cc:	2d00      	cmp	r5, #0
   245ce:	dd0d      	ble.n	245ec <z_set_prio+0x7c>
	sys_dnode_t *const prev = successor->prev;
   245d0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   245d2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   245d6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   245d8:	605c      	str	r4, [r3, #4]
			update_cache(1);
   245da:	2001      	movs	r0, #1
   245dc:	f7ff fdf8 	bl	241d0 <update_cache>
   245e0:	2001      	movs	r0, #1
	__asm__ volatile(
   245e2:	f386 8811 	msr	BASEPRI, r6
   245e6:	f3bf 8f6f 	isb	sy
}
   245ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   245ec:	42bb      	cmp	r3, r7
   245ee:	d001      	beq.n	245f4 <z_set_prio+0x84>
   245f0:	681b      	ldr	r3, [r3, #0]
   245f2:	e7e5      	b.n	245c0 <z_set_prio+0x50>
	node->prev = tail;
   245f4:	e9c4 2700 	strd	r2, r7, [r4]
	tail->next = node;
   245f8:	603c      	str	r4, [r7, #0]
	list->tail = node;
   245fa:	62c4      	str	r4, [r0, #44]	; 0x2c
}
   245fc:	e7ed      	b.n	245da <z_set_prio+0x6a>
			thread->base.prio = prio;
   245fe:	2000      	movs	r0, #0
   24600:	73a1      	strb	r1, [r4, #14]
   24602:	e7ee      	b.n	245e2 <z_set_prio+0x72>
   24604:	20008e30 	.word	0x20008e30

00024608 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   24608:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   2460a:	4b04      	ldr	r3, [pc, #16]	; (2461c <z_sched_init+0x14>)
   2460c:	4608      	mov	r0, r1
   2460e:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   24612:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   24616:	f7ff bd83 	b.w	24120 <k_sched_time_slice_set>
   2461a:	bf00      	nop
   2461c:	20008e30 	.word	0x20008e30

00024620 <z_impl_k_yield>:
	if (!z_is_idle_thread_object(_current)) {
   24620:	4926      	ldr	r1, [pc, #152]	; (246bc <z_impl_k_yield+0x9c>)
{
   24622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   24624:	688a      	ldr	r2, [r1, #8]
   24626:	4b26      	ldr	r3, [pc, #152]	; (246c0 <z_impl_k_yield+0xa0>)
   24628:	429a      	cmp	r2, r3
   2462a:	d03d      	beq.n	246a8 <z_impl_k_yield+0x88>
	__asm__ volatile(
   2462c:	f04f 0320 	mov.w	r3, #32
   24630:	f3ef 8511 	mrs	r5, BASEPRI
   24634:	f383 8811 	msr	BASEPRI, r3
   24638:	f3bf 8f6f 	isb	sy
			dequeue_thread(&_kernel.ready_q.runq,
   2463c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2463e:	7b43      	ldrb	r3, [r0, #13]
   24640:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   24644:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   24646:	f003 fb53 	bl	27cf0 <sys_dlist_remove>
	return list->head == list;
   2464a:	4608      	mov	r0, r1
		queue_thread(&_kernel.ready_q.runq, _current);
   2464c:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   2464e:	7b53      	ldrb	r3, [r2, #13]
   24650:	f063 037f 	orn	r3, r3, #127	; 0x7f
   24654:	7353      	strb	r3, [r2, #13]
   24656:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2465a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2465c:	4283      	cmp	r3, r0
   2465e:	bf08      	it	eq
   24660:	2300      	moveq	r3, #0
   24662:	2b00      	cmp	r3, #0
   24664:	bf38      	it	cc
   24666:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   24668:	b1cb      	cbz	r3, 2469e <z_impl_k_yield+0x7e>
	int32_t b1 = thread_1->base.prio;
   2466a:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
   2466e:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   24672:	42a7      	cmp	r7, r4
   24674:	d00f      	beq.n	24696 <z_impl_k_yield+0x76>
		return b2 - b1;
   24676:	1be4      	subs	r4, r4, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   24678:	2c00      	cmp	r4, #0
   2467a:	dd0c      	ble.n	24696 <z_impl_k_yield+0x76>
	sys_dnode_t *const prev = successor->prev;
   2467c:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   2467e:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
   24682:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   24684:	605a      	str	r2, [r3, #4]
		update_cache(1);
   24686:	2001      	movs	r0, #1
   24688:	f7ff fda2 	bl	241d0 <update_cache>
   2468c:	4628      	mov	r0, r5
}
   2468e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   24692:	f7fd ba15 	b.w	21ac0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   24696:	42b3      	cmp	r3, r6
   24698:	d001      	beq.n	2469e <z_impl_k_yield+0x7e>
   2469a:	681b      	ldr	r3, [r3, #0]
   2469c:	e7e4      	b.n	24668 <z_impl_k_yield+0x48>
	node->prev = tail;
   2469e:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
   246a2:	6032      	str	r2, [r6, #0]
	list->tail = node;
   246a4:	62ca      	str	r2, [r1, #44]	; 0x2c
}
   246a6:	e7ee      	b.n	24686 <z_impl_k_yield+0x66>
   246a8:	f04f 0320 	mov.w	r3, #32
   246ac:	f3ef 8011 	mrs	r0, BASEPRI
   246b0:	f383 8811 	msr	BASEPRI, r3
   246b4:	f3bf 8f6f 	isb	sy
   246b8:	e7e9      	b.n	2468e <z_impl_k_yield+0x6e>
   246ba:	bf00      	nop
   246bc:	20008e30 	.word	0x20008e30
   246c0:	20008610 	.word	0x20008610

000246c4 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   246c4:	f1b1 3fff 	cmp.w	r1, #4294967295
   246c8:	bf08      	it	eq
   246ca:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   246ce:	b508      	push	{r3, lr}
   246d0:	4602      	mov	r2, r0
   246d2:	460b      	mov	r3, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   246d4:	d106      	bne.n	246e4 <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
   246d6:	4b0b      	ldr	r3, [pc, #44]	; (24704 <z_impl_k_sleep+0x40>)
   246d8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   246da:	f7ff fe25 	bl	24328 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   246de:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   246e2:	bd08      	pop	{r3, pc}
	if (ticks == 0) {
   246e4:	4313      	orrs	r3, r2
   246e6:	d10a      	bne.n	246fe <z_impl_k_sleep+0x3a>
	z_impl_k_yield();
   246e8:	f7ff ff9a 	bl	24620 <z_impl_k_yield>
		return 0;
   246ec:	2000      	movs	r0, #0
			return (t * to_hz + off) / from_hz;
   246ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   246f2:	fb80 2303 	smull	r2, r3, r0, r3
   246f6:	0bd0      	lsrs	r0, r2, #15
   246f8:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   246fc:	e7f1      	b.n	246e2 <z_impl_k_sleep+0x1e>
   246fe:	f7ff fdd9 	bl	242b4 <z_tick_sleep.part.0>
   24702:	e7f4      	b.n	246ee <z_impl_k_sleep+0x2a>
   24704:	20008e30 	.word	0x20008e30

00024708 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   24708:	4b01      	ldr	r3, [pc, #4]	; (24710 <z_impl_k_current_get+0x8>)
   2470a:	6898      	ldr	r0, [r3, #8]
   2470c:	4770      	bx	lr
   2470e:	bf00      	nop
   24710:	20008e30 	.word	0x20008e30

00024714 <z_impl_k_is_preempt_thread>:
   24714:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/k_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   24718:	b93b      	cbnz	r3, 2472a <z_impl_k_is_preempt_thread+0x16>
   2471a:	4b05      	ldr	r3, [pc, #20]	; (24730 <z_impl_k_is_preempt_thread+0x1c>)
   2471c:	689b      	ldr	r3, [r3, #8]
   2471e:	89d8      	ldrh	r0, [r3, #14]
   24720:	287f      	cmp	r0, #127	; 0x7f
   24722:	bf8c      	ite	hi
   24724:	2000      	movhi	r0, #0
   24726:	2001      	movls	r0, #1
   24728:	4770      	bx	lr
   2472a:	2000      	movs	r0, #0
}
   2472c:	4770      	bx	lr
   2472e:	bf00      	nop
   24730:	20008e30 	.word	0x20008e30

00024734 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   24734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24738:	4604      	mov	r4, r0
   2473a:	f04f 0320 	mov.w	r3, #32
   2473e:	f3ef 8611 	mrs	r6, BASEPRI
   24742:	f383 8811 	msr	BASEPRI, r3
   24746:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   2474a:	7b43      	ldrb	r3, [r0, #13]
   2474c:	071a      	lsls	r2, r3, #28
   2474e:	d505      	bpl.n	2475c <z_thread_abort+0x28>
	__asm__ volatile(
   24750:	f386 8811 	msr	BASEPRI, r6
   24754:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   24758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2475c:	f023 0220 	bic.w	r2, r3, #32
   24760:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   24764:	09d2      	lsrs	r2, r2, #7
   24766:	d123      	bne.n	247b0 <z_thread_abort+0x7c>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   24768:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   2476a:	68a3      	ldr	r3, [r4, #8]
   2476c:	b113      	cbz	r3, 24774 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   2476e:	4620      	mov	r0, r4
   24770:	f003 fac6 	bl	27d00 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   24774:	f104 0018 	add.w	r0, r4, #24
   24778:	f003 fbc3 	bl	27f02 <z_abort_timeout>
   2477c:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   24780:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   24784:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24786:	42bd      	cmp	r5, r7
   24788:	d000      	beq.n	2478c <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2478a:	b9cd      	cbnz	r5, 247c0 <z_thread_abort+0x8c>
		update_cache(1);
   2478c:	2001      	movs	r0, #1
   2478e:	f7ff fd1f 	bl	241d0 <update_cache>
		z_thread_monitor_exit(thread);
   24792:	4620      	mov	r0, r4
   24794:	f7ff f978 	bl	23a88 <z_thread_monitor_exit>
	if (thread == _current && !arch_is_in_isr()) {
   24798:	4b10      	ldr	r3, [pc, #64]	; (247dc <z_thread_abort+0xa8>)
   2479a:	689b      	ldr	r3, [r3, #8]
   2479c:	42a3      	cmp	r3, r4
   2479e:	d1d7      	bne.n	24750 <z_thread_abort+0x1c>
   247a0:	f3ef 8305 	mrs	r3, IPSR
   247a4:	2b00      	cmp	r3, #0
   247a6:	d1d3      	bne.n	24750 <z_thread_abort+0x1c>
   247a8:	4630      	mov	r0, r6
   247aa:	f7fd f989 	bl	21ac0 <arch_swap>
	return ret;
   247ae:	e7cf      	b.n	24750 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   247b0:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   247b4:	f043 0308 	orr.w	r3, r3, #8
   247b8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   247ba:	f003 fa99 	bl	27cf0 <sys_dlist_remove>
}
   247be:	e7d4      	b.n	2476a <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   247c0:	4628      	mov	r0, r5
   247c2:	f003 fa9d 	bl	27d00 <unpend_thread_no_timeout>
   247c6:	f105 0018 	add.w	r0, r5, #24
   247ca:	f003 fb9a 	bl	27f02 <z_abort_timeout>
		ready_thread(thread);
   247ce:	4628      	mov	r0, r5
   247d0:	f8c5 80b0 	str.w	r8, [r5, #176]	; 0xb0
   247d4:	f7ff fe76 	bl	244c4 <ready_thread>
   247d8:	e7d4      	b.n	24784 <z_thread_abort+0x50>
   247da:	bf00      	nop
   247dc:	20008e30 	.word	0x20008e30

000247e0 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   247e0:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   247e2:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   247e6:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   247e8:	e9cd 6700 	strd	r6, r7, [sp]
   247ec:	f7ff fd4e 	bl	2428c <z_pend_curr>

	if (data != NULL) {
   247f0:	b11c      	cbz	r4, 247fa <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   247f2:	4b03      	ldr	r3, [pc, #12]	; (24800 <z_sched_wait+0x20>)
   247f4:	689b      	ldr	r3, [r3, #8]
   247f6:	695b      	ldr	r3, [r3, #20]
   247f8:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   247fa:	b002      	add	sp, #8
   247fc:	bdd0      	pop	{r4, r6, r7, pc}
   247fe:	bf00      	nop
   24800:	20008e30 	.word	0x20008e30

00024804 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   24804:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   24806:	4806      	ldr	r0, [pc, #24]	; (24820 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   24808:	4a06      	ldr	r2, [pc, #24]	; (24824 <z_data_copy+0x20>)
   2480a:	4907      	ldr	r1, [pc, #28]	; (24828 <z_data_copy+0x24>)
   2480c:	1a12      	subs	r2, r2, r0
   2480e:	f002 ff5d 	bl	276cc <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   24812:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   24816:	4a05      	ldr	r2, [pc, #20]	; (2482c <z_data_copy+0x28>)
   24818:	4905      	ldr	r1, [pc, #20]	; (24830 <z_data_copy+0x2c>)
   2481a:	4806      	ldr	r0, [pc, #24]	; (24834 <z_data_copy+0x30>)
   2481c:	f002 bf56 	b.w	276cc <memcpy>
   24820:	20008000 	.word	0x20008000
   24824:	20008208 	.word	0x20008208
   24828:	0002cce0 	.word	0x0002cce0
   2482c:	00000000 	.word	0x00000000
   24830:	0002cce0 	.word	0x0002cce0
   24834:	20008000 	.word	0x20008000

00024838 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   24838:	4b03      	ldr	r3, [pc, #12]	; (24848 <elapsed+0x10>)
   2483a:	681b      	ldr	r3, [r3, #0]
   2483c:	b90b      	cbnz	r3, 24842 <elapsed+0xa>
   2483e:	f7fd b903 	b.w	21a48 <sys_clock_elapsed>
}
   24842:	2000      	movs	r0, #0
   24844:	4770      	bx	lr
   24846:	bf00      	nop
   24848:	20008e70 	.word	0x20008e70

0002484c <remove_timeout>:
{
   2484c:	b530      	push	{r4, r5, lr}
   2484e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   24850:	b168      	cbz	r0, 2486e <remove_timeout+0x22>
   24852:	4a0a      	ldr	r2, [pc, #40]	; (2487c <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   24854:	6852      	ldr	r2, [r2, #4]
   24856:	4290      	cmp	r0, r2
   24858:	d009      	beq.n	2486e <remove_timeout+0x22>
	if (next(t) != NULL) {
   2485a:	b143      	cbz	r3, 2486e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   2485c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   24860:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   24864:	1912      	adds	r2, r2, r4
   24866:	eb45 0101 	adc.w	r1, r5, r1
   2486a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   2486e:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   24870:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   24872:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24874:	2300      	movs	r3, #0
	node->prev = NULL;
   24876:	e9c0 3300 	strd	r3, r3, [r0]
}
   2487a:	bd30      	pop	{r4, r5, pc}
   2487c:	200080b4 	.word	0x200080b4

00024880 <next_timeout>:

static int32_t next_timeout(void)
{
   24880:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   24882:	4b13      	ldr	r3, [pc, #76]	; (248d0 <next_timeout+0x50>)
   24884:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24886:	429c      	cmp	r4, r3
   24888:	bf08      	it	eq
   2488a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   2488c:	f7ff ffd4 	bl	24838 <elapsed>
   24890:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   24892:	b1bc      	cbz	r4, 248c4 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   24894:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   24898:	1b40      	subs	r0, r0, r5
   2489a:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   2489e:	2801      	cmp	r0, #1
   248a0:	f171 0300 	sbcs.w	r3, r1, #0
   248a4:	db11      	blt.n	248ca <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   248a6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   248aa:	2300      	movs	r3, #0
   248ac:	4282      	cmp	r2, r0
   248ae:	eb73 0401 	sbcs.w	r4, r3, r1
   248b2:	da00      	bge.n	248b6 <next_timeout+0x36>
   248b4:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   248b6:	4b07      	ldr	r3, [pc, #28]	; (248d4 <next_timeout+0x54>)
   248b8:	691b      	ldr	r3, [r3, #16]
   248ba:	b113      	cbz	r3, 248c2 <next_timeout+0x42>
   248bc:	4298      	cmp	r0, r3
   248be:	bfa8      	it	ge
   248c0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   248c2:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   248c4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   248c8:	e7f5      	b.n	248b6 <next_timeout+0x36>
   248ca:	2000      	movs	r0, #0
   248cc:	e7f3      	b.n	248b6 <next_timeout+0x36>
   248ce:	bf00      	nop
   248d0:	200080b4 	.word	0x200080b4
   248d4:	20008e30 	.word	0x20008e30

000248d8 <timeout_rem>:
/* must be locked */
static k_ticks_t timeout_rem(const struct _timeout *timeout)
{
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   248d8:	6803      	ldr	r3, [r0, #0]
{
   248da:	b570      	push	{r4, r5, r6, lr}
	if (z_is_inactive_timeout(timeout)) {
   248dc:	b1eb      	cbz	r3, 2491a <timeout_rem+0x42>
	return list->head == list;
   248de:	4a10      	ldr	r2, [pc, #64]	; (24920 <timeout_rem+0x48>)
   248e0:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   248e2:	4293      	cmp	r3, r2
   248e4:	d016      	beq.n	24914 <timeout_rem+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   248e6:	2400      	movs	r4, #0
   248e8:	2500      	movs	r5, #0
   248ea:	6851      	ldr	r1, [r2, #4]
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   248ec:	b93b      	cbnz	r3, 248fe <timeout_rem+0x26>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   248ee:	f7ff ffa3 	bl	24838 <elapsed>
   248f2:	1a24      	subs	r4, r4, r0
   248f4:	eb65 75e0 	sbc.w	r5, r5, r0, asr #31
}
   248f8:	4620      	mov	r0, r4
   248fa:	4629      	mov	r1, r5
   248fc:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
   248fe:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
   24902:	18a4      	adds	r4, r4, r2
   24904:	eb46 0505 	adc.w	r5, r6, r5
		if (timeout == t) {
   24908:	4283      	cmp	r3, r0
   2490a:	d0f0      	beq.n	248ee <timeout_rem+0x16>
	return (node == list->tail) ? NULL : node->next;
   2490c:	428b      	cmp	r3, r1
   2490e:	d0ee      	beq.n	248ee <timeout_rem+0x16>
   24910:	681b      	ldr	r3, [r3, #0]
   24912:	e7eb      	b.n	248ec <timeout_rem+0x14>
   24914:	2400      	movs	r4, #0
   24916:	2500      	movs	r5, #0
   24918:	e7e9      	b.n	248ee <timeout_rem+0x16>
		return 0;
   2491a:	2400      	movs	r4, #0
   2491c:	2500      	movs	r5, #0
   2491e:	e7eb      	b.n	248f8 <timeout_rem+0x20>
   24920:	200080b4 	.word	0x200080b4

00024924 <z_add_timeout>:
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24924:	f1b3 3fff 	cmp.w	r3, #4294967295
   24928:	bf08      	it	eq
   2492a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   2492e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24932:	4604      	mov	r4, r0
   24934:	4692      	mov	sl, r2
   24936:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24938:	d073      	beq.n	24a22 <z_add_timeout+0xfe>
	to->fn = fn;
   2493a:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   2493c:	f04f 0320 	mov.w	r3, #32
   24940:	f3ef 8511 	mrs	r5, BASEPRI
   24944:	f383 8811 	msr	BASEPRI, r3
   24948:	f3bf 8f6f 	isb	sy
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   2494c:	f06f 0301 	mvn.w	r3, #1
   24950:	f04f 32ff 	mov.w	r2, #4294967295
   24954:	ebb3 080a 	subs.w	r8, r3, sl
   24958:	eb62 090b 	sbc.w	r9, r2, fp
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   2495c:	f1b8 0f00 	cmp.w	r8, #0
   24960:	f179 0100 	sbcs.w	r1, r9, #0
   24964:	db1c      	blt.n	249a0 <z_add_timeout+0x7c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   24966:	4830      	ldr	r0, [pc, #192]	; (24a28 <z_add_timeout+0x104>)
   24968:	e9d0 1000 	ldrd	r1, r0, [r0]
   2496c:	1a5b      	subs	r3, r3, r1
   2496e:	eb62 0200 	sbc.w	r2, r2, r0
			to->dticks = MAX(1, ticks);
   24972:	ebb3 060a 	subs.w	r6, r3, sl
   24976:	eb62 070b 	sbc.w	r7, r2, fp
   2497a:	2e01      	cmp	r6, #1
   2497c:	f177 0300 	sbcs.w	r3, r7, #0
   24980:	bfbc      	itt	lt
   24982:	2601      	movlt	r6, #1
   24984:	2700      	movlt	r7, #0
   24986:	e9c4 6704 	strd	r6, r7, [r4, #16]
	return list->head == list;
   2498a:	4a28      	ldr	r2, [pc, #160]	; (24a2c <z_add_timeout+0x108>)
   2498c:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24990:	4293      	cmp	r3, r2
   24992:	d11e      	bne.n	249d2 <z_add_timeout+0xae>
	node->prev = tail;
   24994:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
   24998:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   2499c:	6054      	str	r4, [r2, #4]
}
   2499e:	e02d      	b.n	249fc <z_add_timeout+0xd8>
			to->dticks = timeout.ticks + 1 + elapsed();
   249a0:	f7ff ff4a 	bl	24838 <elapsed>
   249a4:	f11a 0301 	adds.w	r3, sl, #1
   249a8:	9300      	str	r3, [sp, #0]
   249aa:	f14b 0300 	adc.w	r3, fp, #0
   249ae:	9301      	str	r3, [sp, #4]
   249b0:	e9dd 2300 	ldrd	r2, r3, [sp]
   249b4:	1812      	adds	r2, r2, r0
   249b6:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   249ba:	e9c4 2304 	strd	r2, r3, [r4, #16]
   249be:	e7e4      	b.n	2498a <z_add_timeout+0x66>
			to->dticks -= t->dticks;
   249c0:	ebb6 0008 	subs.w	r0, r6, r8
   249c4:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
   249c8:	4563      	cmp	r3, ip
   249ca:	e9c4 0104 	strd	r0, r1, [r4, #16]
   249ce:	d0e1      	beq.n	24994 <z_add_timeout+0x70>
   249d0:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   249d2:	2b00      	cmp	r3, #0
   249d4:	d0de      	beq.n	24994 <z_add_timeout+0x70>
			if (t->dticks > to->dticks) {
   249d6:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
   249da:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
   249de:	4546      	cmp	r6, r8
   249e0:	eb77 0109 	sbcs.w	r1, r7, r9
   249e4:	daec      	bge.n	249c0 <z_add_timeout+0x9c>
				t->dticks -= to->dticks;
   249e6:	ebb8 0006 	subs.w	r0, r8, r6
   249ea:	eb69 0107 	sbc.w	r1, r9, r7
   249ee:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   249f2:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   249f4:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   249f8:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   249fa:	605c      	str	r4, [r3, #4]
	return list->head == list;
   249fc:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   249fe:	4293      	cmp	r3, r2
   24a00:	d00b      	beq.n	24a1a <z_add_timeout+0xf6>
		if (to == first()) {
   24a02:	429c      	cmp	r4, r3
   24a04:	d109      	bne.n	24a1a <z_add_timeout+0xf6>
			int32_t next_time = next_timeout();
   24a06:	f7ff ff3b 	bl	24880 <next_timeout>
			if (next_time == 0 ||
   24a0a:	b118      	cbz	r0, 24a14 <z_add_timeout+0xf0>
			    _current_cpu->slice_ticks != next_time) {
   24a0c:	4b08      	ldr	r3, [pc, #32]	; (24a30 <z_add_timeout+0x10c>)
			if (next_time == 0 ||
   24a0e:	691b      	ldr	r3, [r3, #16]
   24a10:	4283      	cmp	r3, r0
   24a12:	d002      	beq.n	24a1a <z_add_timeout+0xf6>
				sys_clock_set_timeout(next_time, false);
   24a14:	2100      	movs	r1, #0
   24a16:	f7fc ffe5 	bl	219e4 <sys_clock_set_timeout>
	__asm__ volatile(
   24a1a:	f385 8811 	msr	BASEPRI, r5
   24a1e:	f3bf 8f6f 	isb	sy
}
   24a22:	b003      	add	sp, #12
   24a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24a28:	20008780 	.word	0x20008780
   24a2c:	200080b4 	.word	0x200080b4
   24a30:	20008e30 	.word	0x20008e30

00024a34 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   24a34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24a38:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   24a3a:	f7ff fd01 	bl	24440 <z_time_slice>
	__asm__ volatile(
   24a3e:	f04f 0320 	mov.w	r3, #32
   24a42:	f3ef 8411 	mrs	r4, BASEPRI
   24a46:	f383 8811 	msr	BASEPRI, r3
   24a4a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   24a4e:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 24b00 <sys_clock_announce+0xcc>
   24a52:	4d2a      	ldr	r5, [pc, #168]	; (24afc <sys_clock_announce+0xc8>)
   24a54:	4651      	mov	r1, sl
	return list->head == list;
   24a56:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 24b04 <sys_clock_announce+0xd0>
   24a5a:	602e      	str	r6, [r5, #0]
   24a5c:	f8d5 c000 	ldr.w	ip, [r5]
   24a60:	f8db 0000 	ldr.w	r0, [fp]
   24a64:	4662      	mov	r2, ip
   24a66:	e9da 8900 	ldrd	r8, r9, [sl]
   24a6a:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24a6c:	4558      	cmp	r0, fp
   24a6e:	e9cd 2300 	strd	r2, r3, [sp]
   24a72:	d00d      	beq.n	24a90 <sys_clock_announce+0x5c>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   24a74:	b160      	cbz	r0, 24a90 <sys_clock_announce+0x5c>
   24a76:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   24a7a:	45b4      	cmp	ip, r6
   24a7c:	41bb      	sbcs	r3, r7
   24a7e:	da1d      	bge.n	24abc <sys_clock_announce+0x88>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   24a80:	9b00      	ldr	r3, [sp, #0]
   24a82:	ebb6 0c03 	subs.w	ip, r6, r3
   24a86:	9b01      	ldr	r3, [sp, #4]
   24a88:	eb67 0603 	sbc.w	r6, r7, r3
   24a8c:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   24a90:	2600      	movs	r6, #0
	curr_tick += announce_remaining;
   24a92:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
   24a94:	602e      	str	r6, [r5, #0]
	curr_tick += announce_remaining;
   24a96:	eb13 0208 	adds.w	r2, r3, r8
   24a9a:	9b01      	ldr	r3, [sp, #4]
   24a9c:	eb43 0309 	adc.w	r3, r3, r9
   24aa0:	e9c1 2300 	strd	r2, r3, [r1]

	sys_clock_set_timeout(next_timeout(), false);
   24aa4:	f7ff feec 	bl	24880 <next_timeout>
   24aa8:	4631      	mov	r1, r6
   24aaa:	f7fc ff9b 	bl	219e4 <sys_clock_set_timeout>
	__asm__ volatile(
   24aae:	f384 8811 	msr	BASEPRI, r4
   24ab2:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   24ab6:	b003      	add	sp, #12
   24ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   24abc:	2200      	movs	r2, #0
   24abe:	2300      	movs	r3, #0
		curr_tick += dt;
   24ac0:	eb18 0806 	adds.w	r8, r8, r6
   24ac4:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   24ac8:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   24acc:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   24ad0:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   24ad4:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   24ad6:	f7ff feb9 	bl	2484c <remove_timeout>
   24ada:	f384 8811 	msr	BASEPRI, r4
   24ade:	f3bf 8f6f 	isb	sy
		t->fn(t);
   24ae2:	6883      	ldr	r3, [r0, #8]
   24ae4:	4798      	blx	r3
	__asm__ volatile(
   24ae6:	f04f 0320 	mov.w	r3, #32
   24aea:	f3ef 8411 	mrs	r4, BASEPRI
   24aee:	f383 8811 	msr	BASEPRI, r3
   24af2:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   24af6:	4902      	ldr	r1, [pc, #8]	; (24b00 <sys_clock_announce+0xcc>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   24af8:	e7b0      	b.n	24a5c <sys_clock_announce+0x28>
   24afa:	bf00      	nop
   24afc:	20008e70 	.word	0x20008e70
   24b00:	20008780 	.word	0x20008780
   24b04:	200080b4 	.word	0x200080b4

00024b08 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   24b08:	b510      	push	{r4, lr}
   24b0a:	f04f 0320 	mov.w	r3, #32
   24b0e:	f3ef 8411 	mrs	r4, BASEPRI
   24b12:	f383 8811 	msr	BASEPRI, r3
   24b16:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   24b1a:	f7fc ff95 	bl	21a48 <sys_clock_elapsed>
   24b1e:	4b06      	ldr	r3, [pc, #24]	; (24b38 <sys_clock_tick_get+0x30>)
   24b20:	e9d3 2300 	ldrd	r2, r3, [r3]
   24b24:	1812      	adds	r2, r2, r0
   24b26:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   24b2a:	f384 8811 	msr	BASEPRI, r4
   24b2e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   24b32:	4610      	mov	r0, r2
   24b34:	4619      	mov	r1, r3
   24b36:	bd10      	pop	{r4, pc}
   24b38:	20008780 	.word	0x20008780

00024b3c <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   24b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   24b3e:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   24b42:	1c56      	adds	r6, r2, #1
   24b44:	f143 0700 	adc.w	r7, r3, #0
   24b48:	2f00      	cmp	r7, #0
   24b4a:	bf08      	it	eq
   24b4c:	2e02      	cmpeq	r6, #2
{
   24b4e:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   24b50:	d302      	bcc.n	24b58 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   24b52:	490d      	ldr	r1, [pc, #52]	; (24b88 <z_timer_expiration_handler+0x4c>)
   24b54:	f7ff fee6 	bl	24924 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   24b58:	6b23      	ldr	r3, [r4, #48]	; 0x30
   24b5a:	3301      	adds	r3, #1
   24b5c:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   24b5e:	6a23      	ldr	r3, [r4, #32]
   24b60:	b10b      	cbz	r3, 24b66 <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   24b62:	4620      	mov	r0, r4
   24b64:	4798      	blx	r3
	return list->head == list;
   24b66:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24b6a:	42a5      	cmp	r5, r4
   24b6c:	d00b      	beq.n	24b86 <z_timer_expiration_handler+0x4a>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   24b6e:	b155      	cbz	r5, 24b86 <z_timer_expiration_handler+0x4a>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   24b70:	4628      	mov	r0, r5
   24b72:	f003 f8d8 	bl	27d26 <z_unpend_thread_no_timeout>
   24b76:	2300      	movs	r3, #0

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
   24b78:	4628      	mov	r0, r5
   24b7a:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
}
   24b7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   24b82:	f003 b941 	b.w	27e08 <z_ready_thread>
}
   24b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24b88:	00024b3d 	.word	0x00024b3d

00024b8c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   24b8c:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   24b90:	4619      	mov	r1, r3
   24b92:	4606      	mov	r6, r0
   24b94:	4610      	mov	r0, r2
   24b96:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   24b9a:	1c4c      	adds	r4, r1, #1
   24b9c:	bf08      	it	eq
   24b9e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   24ba2:	4680      	mov	r8, r0
   24ba4:	4689      	mov	r9, r1
   24ba6:	d04c      	beq.n	24c42 <z_impl_k_timer_start+0xb6>
   24ba8:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   24baa:	1c6b      	adds	r3, r5, #1
   24bac:	bf08      	it	eq
   24bae:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   24bb2:	4614      	mov	r4, r2
   24bb4:	d019      	beq.n	24bea <z_impl_k_timer_start+0x5e>
   24bb6:	ea54 0305 	orrs.w	r3, r4, r5
   24bba:	d016      	beq.n	24bea <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
   24bbc:	f06f 0301 	mvn.w	r3, #1
   24bc0:	ebb3 0a02 	subs.w	sl, r3, r2
   24bc4:	f04f 33ff 	mov.w	r3, #4294967295
   24bc8:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   24bcc:	f1ba 0f00 	cmp.w	sl, #0
   24bd0:	f17b 0300 	sbcs.w	r3, fp, #0
   24bd4:	da09      	bge.n	24bea <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
   24bd6:	f112 34ff 	adds.w	r4, r2, #4294967295
   24bda:	f145 35ff 	adc.w	r5, r5, #4294967295
   24bde:	2c01      	cmp	r4, #1
   24be0:	f175 0300 	sbcs.w	r3, r5, #0
   24be4:	bfbc      	itt	lt
   24be6:	2401      	movlt	r4, #1
   24be8:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   24bea:	f06f 0301 	mvn.w	r3, #1
   24bee:	1a1b      	subs	r3, r3, r0
   24bf0:	9300      	str	r3, [sp, #0]
   24bf2:	f04f 33ff 	mov.w	r3, #4294967295
   24bf6:	eb63 0301 	sbc.w	r3, r3, r1
   24bfa:	9301      	str	r3, [sp, #4]
   24bfc:	e9dd 2300 	ldrd	r2, r3, [sp]
   24c00:	2a00      	cmp	r2, #0
   24c02:	f173 0300 	sbcs.w	r3, r3, #0
   24c06:	da0c      	bge.n	24c22 <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
   24c08:	f110 38ff 	adds.w	r8, r0, #4294967295
   24c0c:	f141 39ff 	adc.w	r9, r1, #4294967295
   24c10:	f1b8 0f00 	cmp.w	r8, #0
   24c14:	f179 0300 	sbcs.w	r3, r9, #0
   24c18:	bfbc      	itt	lt
   24c1a:	f04f 0800 	movlt.w	r8, #0
   24c1e:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   24c22:	4630      	mov	r0, r6
   24c24:	f003 f96d 	bl	27f02 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   24c28:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   24c2a:	4642      	mov	r2, r8
	timer->status = 0U;
   24c2c:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   24c2e:	4630      	mov	r0, r6
   24c30:	464b      	mov	r3, r9
   24c32:	4905      	ldr	r1, [pc, #20]	; (24c48 <z_impl_k_timer_start+0xbc>)
	timer->period = period;
   24c34:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   24c38:	b002      	add	sp, #8
   24c3a:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   24c3e:	f7ff be71 	b.w	24924 <z_add_timeout>
}
   24c42:	b002      	add	sp, #8
   24c44:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   24c48:	00024b3d 	.word	0x00024b3d

00024c4c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   24c4c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   24c50:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   24c52:	4b29      	ldr	r3, [pc, #164]	; (24cf8 <z_impl_k_poll+0xac>)
{
   24c54:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   24c56:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   24c58:	2301      	movs	r3, #1
   24c5a:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
   24c5e:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   24c62:	ea52 0307 	orrs.w	r3, r2, r7
   24c66:	bf0c      	ite	eq
   24c68:	2301      	moveq	r3, #1
   24c6a:	2300      	movne	r3, #0
   24c6c:	f105 0260 	add.w	r2, r5, #96	; 0x60
{
   24c70:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   24c72:	f003 fa2b 	bl	280cc <register_events>
   24c76:	4681      	mov	r9, r0
	__asm__ volatile(
   24c78:	f04f 0320 	mov.w	r3, #32
   24c7c:	f3ef 8a11 	mrs	sl, BASEPRI
   24c80:	f383 8811 	msr	BASEPRI, r3
   24c84:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   24c88:	f895 4060 	ldrb.w	r4, [r5, #96]	; 0x60
   24c8c:	b964      	cbnz	r4, 24ca8 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   24c8e:	4601      	mov	r1, r0
   24c90:	4652      	mov	r2, sl
   24c92:	4640      	mov	r0, r8
   24c94:	f003 f9b8 	bl	28008 <clear_event_registrations>
	__asm__ volatile(
   24c98:	f38a 8811 	msr	BASEPRI, sl
   24c9c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   24ca0:	4620      	mov	r0, r4
   24ca2:	b002      	add	sp, #8
   24ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   24ca8:	2300      	movs	r3, #0
   24caa:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24cae:	ea56 0307 	orrs.w	r3, r6, r7
   24cb2:	d106      	bne.n	24cc2 <z_impl_k_poll+0x76>
   24cb4:	f38a 8811 	msr	BASEPRI, sl
   24cb8:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   24cbc:	f06f 040a 	mvn.w	r4, #10
   24cc0:	e7ee      	b.n	24ca0 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   24cc2:	4651      	mov	r1, sl
   24cc4:	e9cd 6700 	strd	r6, r7, [sp]
   24cc8:	4a0c      	ldr	r2, [pc, #48]	; (24cfc <z_impl_k_poll+0xb0>)
   24cca:	480d      	ldr	r0, [pc, #52]	; (24d00 <z_impl_k_poll+0xb4>)
   24ccc:	f7ff fade 	bl	2428c <z_pend_curr>
   24cd0:	4604      	mov	r4, r0
	__asm__ volatile(
   24cd2:	f04f 0320 	mov.w	r3, #32
   24cd6:	f3ef 8511 	mrs	r5, BASEPRI
   24cda:	f383 8811 	msr	BASEPRI, r3
   24cde:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   24ce2:	462a      	mov	r2, r5
   24ce4:	4649      	mov	r1, r9
   24ce6:	4640      	mov	r0, r8
   24ce8:	f003 f98e 	bl	28008 <clear_event_registrations>
	__asm__ volatile(
   24cec:	f385 8811 	msr	BASEPRI, r5
   24cf0:	f3bf 8f6f 	isb	sy
	return swap_rc;
   24cf4:	e7d4      	b.n	24ca0 <z_impl_k_poll+0x54>
   24cf6:	bf00      	nop
   24cf8:	20008e30 	.word	0x20008e30
   24cfc:	200080bc 	.word	0x200080bc
   24d00:	200096dc 	.word	0x200096dc

00024d04 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   24d04:	b538      	push	{r3, r4, r5, lr}
   24d06:	4603      	mov	r3, r0
	__asm__ volatile(
   24d08:	f04f 0220 	mov.w	r2, #32
   24d0c:	f3ef 8511 	mrs	r5, BASEPRI
   24d10:	f382 8811 	msr	BASEPRI, r2
   24d14:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   24d18:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   24d1a:	2101      	movs	r1, #1
   24d1c:	6081      	str	r1, [r0, #8]
	return list->head == list;
   24d1e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   24d20:	4283      	cmp	r3, r0
   24d22:	d106      	bne.n	24d32 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   24d24:	f385 8811 	msr	BASEPRI, r5
   24d28:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   24d2c:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   24d2e:	4620      	mov	r0, r4
   24d30:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   24d32:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   24d36:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   24d38:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24d3a:	2300      	movs	r3, #0
	node->prev = NULL;
   24d3c:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   24d40:	f003 fa3b 	bl	281ba <signal_poll_event>
	z_reschedule(&lock, key);
   24d44:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   24d46:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   24d48:	4801      	ldr	r0, [pc, #4]	; (24d50 <z_impl_k_poll_signal_raise+0x4c>)
   24d4a:	f7ff fa1b 	bl	24184 <z_reschedule>
	return rc;
   24d4e:	e7ee      	b.n	24d2e <z_impl_k_poll_signal_raise+0x2a>
   24d50:	200096dc 	.word	0x200096dc

00024d54 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   24d54:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   24d56:	4c06      	ldr	r4, [pc, #24]	; (24d70 <statics_init+0x1c>)
   24d58:	4d06      	ldr	r5, [pc, #24]	; (24d74 <statics_init+0x20>)
   24d5a:	42ac      	cmp	r4, r5
   24d5c:	d301      	bcc.n	24d62 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   24d5e:	2000      	movs	r0, #0
   24d60:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   24d62:	4620      	mov	r0, r4
   24d64:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   24d68:	f003 faae 	bl	282c8 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   24d6c:	3414      	adds	r4, #20
   24d6e:	e7f4      	b.n	24d5a <statics_init+0x6>
   24d70:	200081c0 	.word	0x200081c0
   24d74:	200081c0 	.word	0x200081c0

00024d78 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   24d78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   24d7a:	2400      	movs	r4, #0
   24d7c:	4b08      	ldr	r3, [pc, #32]	; (24da0 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   24d7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
	struct k_work_queue_config cfg = {
   24d82:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   24d84:	ab02      	add	r3, sp, #8
   24d86:	9300      	str	r3, [sp, #0]
   24d88:	4906      	ldr	r1, [pc, #24]	; (24da4 <k_sys_work_q_init+0x2c>)
   24d8a:	f04f 33ff 	mov.w	r3, #4294967295
   24d8e:	4806      	ldr	r0, [pc, #24]	; (24da8 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   24d90:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   24d94:	f000 f8f8 	bl	24f88 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   24d98:	4620      	mov	r0, r4
   24d9a:	b004      	add	sp, #16
   24d9c:	bd10      	pop	{r4, pc}
   24d9e:	bf00      	nop
   24da0:	0002ccd3 	.word	0x0002ccd3
   24da4:	20016720 	.word	0x20016720
   24da8:	20008788 	.word	0x20008788

00024dac <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   24dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24db0:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   24db2:	f04f 38ff 	mov.w	r8, #4294967295
   24db6:	f04f 39ff 	mov.w	r9, #4294967295
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   24dba:	4e49      	ldr	r6, [pc, #292]	; (24ee0 <work_queue_main+0x134>)
{
   24dbc:	b085      	sub	sp, #20
	__asm__ volatile(
   24dbe:	f04f 0320 	mov.w	r3, #32
   24dc2:	f3ef 8711 	mrs	r7, BASEPRI
   24dc6:	f383 8811 	msr	BASEPRI, r3
   24dca:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   24dce:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
	return list->head;
   24dd2:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   24dd6:	b985      	cbnz	r5, 24dfa <work_queue_main+0x4e>
	*flagp &= ~BIT(bit);
   24dd8:	f023 0204 	bic.w	r2, r3, #4
		} else if (flag_test_and_clear(&queue->flags,
   24ddc:	075d      	lsls	r5, r3, #29
	*flagp &= ~BIT(bit);
   24dde:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
		} else if (flag_test_and_clear(&queue->flags,
   24de2:	d433      	bmi.n	24e4c <work_queue_main+0xa0>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   24de4:	2300      	movs	r3, #0
   24de6:	4639      	mov	r1, r7
   24de8:	e9cd 8900 	strd	r8, r9, [sp]
   24dec:	9302      	str	r3, [sp, #8]
   24dee:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
   24df2:	483c      	ldr	r0, [pc, #240]	; (24ee4 <work_queue_main+0x138>)
   24df4:	f7ff fcf4 	bl	247e0 <z_sched_wait>
			continue;
   24df8:	e7e1      	b.n	24dbe <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24dfa:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   24dfe:	6829      	ldr	r1, [r5, #0]
   24e00:	4295      	cmp	r5, r2
	list->head = node;
   24e02:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24e06:	d101      	bne.n	24e0c <work_queue_main+0x60>
	list->tail = node;
   24e08:	f8c4 10bc 	str.w	r1, [r4, #188]	; 0xbc
	*flagp |= BIT(bit);
   24e0c:	f043 0302 	orr.w	r3, r3, #2
   24e10:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   24e14:	68eb      	ldr	r3, [r5, #12]
   24e16:	f023 0304 	bic.w	r3, r3, #4
   24e1a:	f043 0301 	orr.w	r3, r3, #1
   24e1e:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   24e20:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   24e22:	f387 8811 	msr	BASEPRI, r7
   24e26:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
   24e2a:	4628      	mov	r0, r5
   24e2c:	4798      	blx	r3
	__asm__ volatile(
   24e2e:	f04f 0320 	mov.w	r3, #32
   24e32:	f3ef 8b11 	mrs	fp, BASEPRI
   24e36:	f383 8811 	msr	BASEPRI, r3
   24e3a:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   24e3e:	68eb      	ldr	r3, [r5, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24e40:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   24e42:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24e46:	d40b      	bmi.n	24e60 <work_queue_main+0xb4>
	*flagp &= ~BIT(bit);
   24e48:	60ea      	str	r2, [r5, #12]
   24e4a:	e00e      	b.n	24e6a <work_queue_main+0xbe>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   24e4c:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   24e50:	2200      	movs	r2, #0
   24e52:	2101      	movs	r1, #1
   24e54:	4628      	mov	r0, r5
   24e56:	f003 f836 	bl	27ec6 <z_sched_wake>
   24e5a:	2800      	cmp	r0, #0
   24e5c:	d1f8      	bne.n	24e50 <work_queue_main+0xa4>
   24e5e:	e7c1      	b.n	24de4 <work_queue_main+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   24e60:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   24e62:	f023 0303 	bic.w	r3, r3, #3
   24e66:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   24e68:	b970      	cbnz	r0, 24e88 <work_queue_main+0xdc>
	*flagp &= ~BIT(bit);
   24e6a:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   24e6e:	f023 0302 	bic.w	r3, r3, #2
   24e72:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	__asm__ volatile(
   24e76:	f38b 8811 	msr	BASEPRI, fp
   24e7a:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   24e7e:	05d8      	lsls	r0, r3, #23
   24e80:	d49d      	bmi.n	24dbe <work_queue_main+0x12>
   24e82:	f7ff fbcd 	bl	24620 <z_impl_k_yield>
}
   24e86:	e79a      	b.n	24dbe <work_queue_main+0x12>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   24e88:	f04f 0a00 	mov.w	sl, #0
   24e8c:	6807      	ldr	r7, [r0, #0]
	parent->next = child;
   24e8e:	4653      	mov	r3, sl
   24e90:	2f00      	cmp	r7, #0
   24e92:	bf38      	it	cc
   24e94:	2700      	movcc	r7, #0
		if (wc->work == work) {
   24e96:	6842      	ldr	r2, [r0, #4]
   24e98:	4601      	mov	r1, r0
   24e9a:	4295      	cmp	r5, r2
   24e9c:	d10e      	bne.n	24ebc <work_queue_main+0x110>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   24e9e:	6801      	ldr	r1, [r0, #0]
   24ea0:	f1ba 0f00 	cmp.w	sl, #0
   24ea4:	d114      	bne.n	24ed0 <work_queue_main+0x124>
   24ea6:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   24ea8:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   24eaa:	4290      	cmp	r0, r2
   24eac:	d100      	bne.n	24eb0 <work_queue_main+0x104>
	list->tail = node;
   24eae:	6071      	str	r1, [r6, #4]
	parent->next = child;
   24eb0:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   24eb4:	f7ff f8ce 	bl	24054 <z_impl_k_sem_give>
}
   24eb8:	4651      	mov	r1, sl
   24eba:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   24ebc:	2f00      	cmp	r7, #0
   24ebe:	d0d4      	beq.n	24e6a <work_queue_main+0xbe>
	return node->next;
   24ec0:	683a      	ldr	r2, [r7, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   24ec2:	4638      	mov	r0, r7
   24ec4:	2a00      	cmp	r2, #0
   24ec6:	bf38      	it	cc
   24ec8:	2200      	movcc	r2, #0
   24eca:	468a      	mov	sl, r1
   24ecc:	4617      	mov	r7, r2
   24ece:	e7e2      	b.n	24e96 <work_queue_main+0xea>
	parent->next = child;
   24ed0:	f8ca 1000 	str.w	r1, [sl]
Z_GENLIST_REMOVE(slist, snode)
   24ed4:	6872      	ldr	r2, [r6, #4]
   24ed6:	4290      	cmp	r0, r2
	list->tail = node;
   24ed8:	bf08      	it	eq
   24eda:	f8c6 a004 	streq.w	sl, [r6, #4]
}
   24ede:	e7e7      	b.n	24eb0 <work_queue_main+0x104>
   24ee0:	20008e74 	.word	0x20008e74
   24ee4:	200096dc 	.word	0x200096dc

00024ee8 <submit_to_queue_locked>:
{
   24ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24eea:	68c3      	ldr	r3, [r0, #12]
{
   24eec:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24eee:	079a      	lsls	r2, r3, #30
{
   24ef0:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24ef2:	f3c3 0540 	ubfx	r5, r3, #1, #1
   24ef6:	d41f      	bmi.n	24f38 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   24ef8:	075f      	lsls	r7, r3, #29
   24efa:	d41f      	bmi.n	24f3c <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   24efc:	680a      	ldr	r2, [r1, #0]
   24efe:	b90a      	cbnz	r2, 24f04 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   24f00:	6882      	ldr	r2, [r0, #8]
   24f02:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   24f04:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   24f06:	bf42      	ittt	mi
   24f08:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
   24f0a:	2502      	movmi	r5, #2
			*queuep = work->queue;
   24f0c:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   24f0e:	6837      	ldr	r7, [r6, #0]
		ret = 1;
   24f10:	bf58      	it	pl
   24f12:	2501      	movpl	r5, #1
	if (queue == NULL) {
   24f14:	b37f      	cbz	r7, 24f76 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   24f16:	4b1b      	ldr	r3, [pc, #108]	; (24f84 <submit_to_queue_locked+0x9c>)
   24f18:	689b      	ldr	r3, [r3, #8]
   24f1a:	42bb      	cmp	r3, r7
   24f1c:	d111      	bne.n	24f42 <submit_to_queue_locked+0x5a>
   24f1e:	f002 fea7 	bl	27c70 <k_is_in_isr>
   24f22:	f080 0001 	eor.w	r0, r0, #1
   24f26:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   24f28:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   24f2c:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   24f2e:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   24f32:	d523      	bpl.n	24f7c <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   24f34:	b13a      	cbz	r2, 24f46 <submit_to_queue_locked+0x5e>
   24f36:	b940      	cbnz	r0, 24f4a <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   24f38:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   24f3c:	2300      	movs	r3, #0
   24f3e:	6033      	str	r3, [r6, #0]
	return ret;
   24f40:	e013      	b.n	24f6a <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   24f42:	2000      	movs	r0, #0
   24f44:	e7f0      	b.n	24f28 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   24f46:	071b      	lsls	r3, r3, #28
   24f48:	d4f6      	bmi.n	24f38 <submit_to_queue_locked+0x50>
	parent->next = child;
   24f4a:	2300      	movs	r3, #0
   24f4c:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   24f4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   24f52:	b963      	cbnz	r3, 24f6e <submit_to_queue_locked+0x86>
	list->head = node;
   24f54:	e9c7 442e 	strd	r4, r4, [r7, #184]	; 0xb8
		(void)notify_queue_locked(queue);
   24f58:	4638      	mov	r0, r7
   24f5a:	f003 f9bd 	bl	282d8 <notify_queue_locked>
	*flagp |= BIT(bit);
   24f5e:	68e3      	ldr	r3, [r4, #12]
   24f60:	f043 0304 	orr.w	r3, r3, #4
   24f64:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   24f66:	6833      	ldr	r3, [r6, #0]
   24f68:	60a3      	str	r3, [r4, #8]
}
   24f6a:	4628      	mov	r0, r5
   24f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   24f6e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   24f70:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
}
   24f74:	e7f0      	b.n	24f58 <submit_to_queue_locked+0x70>
		return -EINVAL;
   24f76:	f06f 0515 	mvn.w	r5, #21
   24f7a:	e7df      	b.n	24f3c <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   24f7c:	f06f 0512 	mvn.w	r5, #18
   24f80:	e7dc      	b.n	24f3c <submit_to_queue_locked+0x54>
   24f82:	bf00      	nop
   24f84:	20008e30 	.word	0x20008e30

00024f88 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   24f88:	b5f0      	push	{r4, r5, r6, r7, lr}
   24f8a:	4604      	mov	r4, r0
	list->head = NULL;
   24f8c:	2000      	movs	r0, #0
   24f8e:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
   24f90:	e9c4 002e 	strd	r0, r0, [r4, #184]	; 0xb8
   24f94:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	sys_dlist_init(&w->waitq);
   24f96:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->tail = (sys_dnode_t *)list;
   24f9a:	e9c4 0030 	strd	r0, r0, [r4, #192]	; 0xc0
   24f9e:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
   24fa2:	e9c4 0032 	strd	r0, r0, [r4, #200]	; 0xc8

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   24fa6:	b31d      	cbz	r5, 24ff0 <k_work_queue_start+0x68>
   24fa8:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   24faa:	2800      	cmp	r0, #0
   24fac:	f240 1001 	movw	r0, #257	; 0x101
   24fb0:	bf08      	it	eq
   24fb2:	2001      	moveq	r0, #1
	*flagp = flags;
   24fb4:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   24fb8:	2000      	movs	r0, #0
   24fba:	f04f 36ff 	mov.w	r6, #4294967295
   24fbe:	f04f 37ff 	mov.w	r7, #4294967295
   24fc2:	e9cd 3003 	strd	r3, r0, [sp, #12]
   24fc6:	e9cd 0001 	strd	r0, r0, [sp, #4]
   24fca:	e9cd 6706 	strd	r6, r7, [sp, #24]
   24fce:	4620      	mov	r0, r4
   24fd0:	4b08      	ldr	r3, [pc, #32]	; (24ff4 <k_work_queue_start+0x6c>)
   24fd2:	9400      	str	r4, [sp, #0]
   24fd4:	f7fe fe20 	bl	23c18 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   24fd8:	b125      	cbz	r5, 24fe4 <k_work_queue_start+0x5c>
   24fda:	6829      	ldr	r1, [r5, #0]
   24fdc:	b111      	cbz	r1, 24fe4 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   24fde:	4620      	mov	r0, r4
   24fe0:	f7fe fd70 	bl	23ac4 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   24fe4:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   24fe6:	b009      	add	sp, #36	; 0x24
   24fe8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   24fec:	f002 be48 	b.w	27c80 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   24ff0:	2001      	movs	r0, #1
   24ff2:	e7df      	b.n	24fb4 <k_work_queue_start+0x2c>
   24ff4:	00024dad 	.word	0x00024dad

00024ff8 <main>:
SHELL_CMD_ARG_REGISTER(benchmark, NULL, "Benchmark for key generation and signature proccess", cmd_benchmark, 1, 0);

void main(void)
{

   24ff8:	4770      	bx	lr

00024ffa <string_cmp>:
	return strcmp((const char *)p_a, (const char *)p_b);
   24ffa:	f002 bb25 	b.w	27648 <strcmp>

00024ffe <swapfunc>:
 * Qsort routine from Bentley & McIlroy's "Engineering a Sort Function".
 */

static inline void
swapfunc(char *a, char *b, size_t es)
{
   24ffe:	b510      	push	{r4, lr}
   25000:	4402      	add	r2, r0
	char t;

	do {
		t = *a;
		*a++ = *b;
   25002:	780c      	ldrb	r4, [r1, #0]
		t = *a;
   25004:	7803      	ldrb	r3, [r0, #0]
		*a++ = *b;
   25006:	f800 4b01 	strb.w	r4, [r0], #1
		*b++ = t;
	} while (--es > 0);
   2500a:	4290      	cmp	r0, r2
		*b++ = t;
   2500c:	f801 3b01 	strb.w	r3, [r1], #1
	} while (--es > 0);
   25010:	d1f7      	bne.n	25002 <swapfunc+0x4>
}
   25012:	bd10      	pop	{r4, pc}

00025014 <med3.isra.0>:
#else
#define	CMP(t, x, y) (cmp((x), (y)))
#endif

static inline char *
med3(char *a, char *b, char *c, cmp_t *cmp, void *thunk)
   25014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25016:	460f      	mov	r7, r1
   25018:	4614      	mov	r4, r2
   2501a:	4606      	mov	r6, r0
   2501c:	461d      	mov	r5, r3
{
	return CMP(thunk, a, b) < 0 ?
   2501e:	4798      	blx	r3
	       (CMP(thunk, b, c) < 0 ? b : (CMP(thunk, a, c) < 0 ? c : a))
	      : (CMP(thunk, b, c) > 0 ? b : (CMP(thunk, a, c) < 0 ? a : c));
   25020:	2800      	cmp	r0, #0
	       (CMP(thunk, b, c) < 0 ? b : (CMP(thunk, a, c) < 0 ? c : a))
   25022:	4621      	mov	r1, r4
   25024:	4638      	mov	r0, r7
	      : (CMP(thunk, b, c) > 0 ? b : (CMP(thunk, a, c) < 0 ? a : c));
   25026:	da0c      	bge.n	25042 <med3.isra.0+0x2e>
	       (CMP(thunk, b, c) < 0 ? b : (CMP(thunk, a, c) < 0 ? c : a))
   25028:	47a8      	blx	r5
   2502a:	2800      	cmp	r0, #0
   2502c:	da02      	bge.n	25034 <med3.isra.0+0x20>
   2502e:	463c      	mov	r4, r7
}
   25030:	4620      	mov	r0, r4
   25032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	       (CMP(thunk, b, c) < 0 ? b : (CMP(thunk, a, c) < 0 ? c : a))
   25034:	4621      	mov	r1, r4
   25036:	4630      	mov	r0, r6
   25038:	47a8      	blx	r5
   2503a:	2800      	cmp	r0, #0
   2503c:	dbf8      	blt.n	25030 <med3.isra.0+0x1c>
   2503e:	4634      	mov	r4, r6
   25040:	e7f6      	b.n	25030 <med3.isra.0+0x1c>
	      : (CMP(thunk, b, c) > 0 ? b : (CMP(thunk, a, c) < 0 ? a : c));
   25042:	47a8      	blx	r5
   25044:	2800      	cmp	r0, #0
   25046:	dcf2      	bgt.n	2502e <med3.isra.0+0x1a>
   25048:	4621      	mov	r1, r4
   2504a:	4630      	mov	r0, r6
   2504c:	47a8      	blx	r5
   2504e:	2800      	cmp	r0, #0
   25050:	daee      	bge.n	25030 <med3.isra.0+0x1c>
   25052:	e7f4      	b.n	2503e <med3.isra.0+0x2a>

00025054 <qsort>:
void qsort_r(void *a, size_t n, size_t es, void *thunk, cmp_t *cmp)
#else
#define	thunk NULL
void qsort(void *a, size_t n, size_t es, cmp_t *cmp)
#endif
{
   25054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25058:	4606      	mov	r6, r0
   2505a:	468b      	mov	fp, r1
   2505c:	4614      	mov	r4, r2
   2505e:	4698      	mov	r8, r3
   25060:	b085      	sub	sp, #20
	int cmp_result;
	int swap_cnt;

loop:
	swap_cnt = 0;
	if (n < 7) {
   25062:	1933      	adds	r3, r6, r4
   25064:	f1bb 0f06 	cmp.w	fp, #6
   25068:	9300      	str	r3, [sp, #0]
   2506a:	d81a      	bhi.n	250a2 <qsort+0x4e>
		for (pm = (char *)a + es; pm < (char *)a + n * es; pm += es) {
   2506c:	461f      	mov	r7, r3
   2506e:	fb04 6b0b 	mla	fp, r4, fp, r6
   25072:	45bb      	cmp	fp, r7
   25074:	d802      	bhi.n	2507c <qsort+0x28>
			/* qsort(a, d1 / es, es, cmp); */
			n = d1 / es;
			goto loop;
		}
	}
}
   25076:	b005      	add	sp, #20
   25078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2507c:	46b9      	mov	r9, r7
   2507e:	e00c      	b.n	2509a <qsort+0x46>
			     pl > (char *)a && CMP(thunk, pl - es, pl) > 0;
   25080:	eba9 0a04 	sub.w	sl, r9, r4
   25084:	4649      	mov	r1, r9
   25086:	4650      	mov	r0, sl
   25088:	47c0      	blx	r8
   2508a:	2800      	cmp	r0, #0
   2508c:	dd07      	ble.n	2509e <qsort+0x4a>
				swapfunc(pl, pl - es, es);
   2508e:	4648      	mov	r0, r9
   25090:	4622      	mov	r2, r4
   25092:	4651      	mov	r1, sl
   25094:	f7ff ffb3 	bl	24ffe <swapfunc>
			     pl -= es) {
   25098:	46d1      	mov	r9, sl
			for (pl = pm;
   2509a:	454e      	cmp	r6, r9
   2509c:	d3f0      	bcc.n	25080 <qsort+0x2c>
		for (pm = (char *)a + es; pm < (char *)a + n * es; pm += es) {
   2509e:	4427      	add	r7, r4
   250a0:	e7e7      	b.n	25072 <qsort+0x1e>
	pm = (char *)a + (n / 2) * es;
   250a2:	ea4f 095b 	mov.w	r9, fp, lsr #1
   250a6:	f10b 35ff 	add.w	r5, fp, #4294967295
	if (n > 7) {
   250aa:	f1bb 0f07 	cmp.w	fp, #7
	pm = (char *)a + (n / 2) * es;
   250ae:	fb04 6909 	mla	r9, r4, r9, r6
	if (n > 7) {
   250b2:	fb04 6505 	mla	r5, r4, r5, r6
   250b6:	d027      	beq.n	25108 <qsort+0xb4>
		if (n > 40) {
   250b8:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
   250bc:	d945      	bls.n	2514a <qsort+0xf6>
			size_t d = (n / 8) * es;
   250be:	ea4f 0adb 	mov.w	sl, fp, lsr #3
   250c2:	fb04 fa0a 	mul.w	sl, r4, sl
			pl = med3(pl, pl + d, pl + 2 * d, cmp, thunk);
   250c6:	4643      	mov	r3, r8
   250c8:	eb06 024a 	add.w	r2, r6, sl, lsl #1
   250cc:	eb06 010a 	add.w	r1, r6, sl
   250d0:	4630      	mov	r0, r6
   250d2:	f7ff ff9f 	bl	25014 <med3.isra.0>
			pm = med3(pm - d, pm, pm + d, cmp, thunk);
   250d6:	4649      	mov	r1, r9
   250d8:	eb09 020a 	add.w	r2, r9, sl
   250dc:	4643      	mov	r3, r8
			pl = med3(pl, pl + d, pl + 2 * d, cmp, thunk);
   250de:	4607      	mov	r7, r0
			pm = med3(pm - d, pm, pm + d, cmp, thunk);
   250e0:	eba9 000a 	sub.w	r0, r9, sl
   250e4:	f7ff ff96 	bl	25014 <med3.isra.0>
			pn = med3(pn - 2 * d, pn - d, pn, cmp, thunk);
   250e8:	462a      	mov	r2, r5
			pm = med3(pm - d, pm, pm + d, cmp, thunk);
   250ea:	4681      	mov	r9, r0
			pn = med3(pn - 2 * d, pn - d, pn, cmp, thunk);
   250ec:	4643      	mov	r3, r8
   250ee:	eba5 010a 	sub.w	r1, r5, sl
   250f2:	eba5 004a 	sub.w	r0, r5, sl, lsl #1
   250f6:	f7ff ff8d 	bl	25014 <med3.isra.0>
   250fa:	4602      	mov	r2, r0
		pm = med3(pl, pm, pn, cmp, thunk);
   250fc:	4649      	mov	r1, r9
   250fe:	4643      	mov	r3, r8
   25100:	4638      	mov	r0, r7
   25102:	f7ff ff87 	bl	25014 <med3.isra.0>
   25106:	4681      	mov	r9, r0
	swapfunc(a, pm, es);
   25108:	4622      	mov	r2, r4
   2510a:	4649      	mov	r1, r9
	pa = pb = (char *)a + es;
   2510c:	1937      	adds	r7, r6, r4
	swapfunc(a, pm, es);
   2510e:	4630      	mov	r0, r6
   25110:	f7ff ff75 	bl	24ffe <swapfunc>
	pc = pd = (char *)a + (n - 1) * es;
   25114:	46b9      	mov	r9, r7
	swap_cnt = 0;
   25116:	2200      	movs	r2, #0
	pa = pb = (char *)a + es;
   25118:	e9cd 7500 	strd	r7, r5, [sp]
   2511c:	4263      	negs	r3, r4
   2511e:	9302      	str	r3, [sp, #8]
		while (pb <= pc && (cmp_result = CMP(thunk, pb, a)) <= 0) {
   25120:	45a9      	cmp	r9, r5
   25122:	d823      	bhi.n	2516c <qsort+0x118>
   25124:	4631      	mov	r1, r6
   25126:	4648      	mov	r0, r9
   25128:	9203      	str	r2, [sp, #12]
   2512a:	47c0      	blx	r8
   2512c:	2800      	cmp	r0, #0
   2512e:	9a03      	ldr	r2, [sp, #12]
   25130:	dc24      	bgt.n	2517c <qsort+0x128>
			if (cmp_result == 0) {
   25132:	d108      	bne.n	25146 <qsort+0xf2>
				swapfunc(pa, pb, es);
   25134:	4622      	mov	r2, r4
   25136:	4649      	mov	r1, r9
   25138:	9800      	ldr	r0, [sp, #0]
   2513a:	f7ff ff60 	bl	24ffe <swapfunc>
				pa += es;
   2513e:	9b00      	ldr	r3, [sp, #0]
   25140:	4423      	add	r3, r4
   25142:	9300      	str	r3, [sp, #0]
				swap_cnt = 1;
   25144:	2201      	movs	r2, #1
			pb += es;
   25146:	44a1      	add	r9, r4
   25148:	e7ea      	b.n	25120 <qsort+0xcc>
		pn = (char *)a + (n - 1) * es;
   2514a:	462a      	mov	r2, r5
   2514c:	4637      	mov	r7, r6
   2514e:	e7d5      	b.n	250fc <qsort+0xa8>
			if (cmp_result == 0) {
   25150:	d109      	bne.n	25166 <qsort+0x112>
				swapfunc(pc, pd, es);
   25152:	4622      	mov	r2, r4
   25154:	4628      	mov	r0, r5
   25156:	9901      	ldr	r1, [sp, #4]
   25158:	f7ff ff51 	bl	24ffe <swapfunc>
				pd -= es;
   2515c:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   25160:	4413      	add	r3, r2
				swap_cnt = 1;
   25162:	2201      	movs	r2, #1
				pd -= es;
   25164:	9301      	str	r3, [sp, #4]
		while (pb <= pc && (cmp_result = CMP(thunk, pc, a)) >= 0) {
   25166:	45d1      	cmp	r9, sl
			pc -= es;
   25168:	4655      	mov	r5, sl
		while (pb <= pc && (cmp_result = CMP(thunk, pc, a)) >= 0) {
   2516a:	d907      	bls.n	2517c <qsort+0x128>
	if (swap_cnt == 0) {  /* Switch to insertion sort */
   2516c:	fb04 6a0b 	mla	sl, r4, fp, r6
   25170:	bb32      	cbnz	r2, 251c0 <qsort+0x16c>
		for (pm = (char *)a + es; pm < (char *)a + n * es; pm += es) {
   25172:	45ba      	cmp	sl, r7
   25174:	f67f af7f 	bls.w	25076 <qsort+0x22>
   25178:	463d      	mov	r5, r7
   2517a:	e01d      	b.n	251b8 <qsort+0x164>
		while (pb <= pc && (cmp_result = CMP(thunk, pc, a)) >= 0) {
   2517c:	4631      	mov	r1, r6
   2517e:	4628      	mov	r0, r5
   25180:	9203      	str	r2, [sp, #12]
   25182:	47c0      	blx	r8
   25184:	9b02      	ldr	r3, [sp, #8]
   25186:	2800      	cmp	r0, #0
   25188:	9a03      	ldr	r2, [sp, #12]
   2518a:	eb05 0a03 	add.w	sl, r5, r3
   2518e:	dadf      	bge.n	25150 <qsort+0xfc>
		swapfunc(pb, pc, es);
   25190:	4629      	mov	r1, r5
   25192:	4622      	mov	r2, r4
   25194:	4648      	mov	r0, r9
   25196:	f7ff ff32 	bl	24ffe <swapfunc>
		pc -= es;
   2519a:	4655      	mov	r5, sl
	for (;;) {
   2519c:	e7d2      	b.n	25144 <qsort+0xf0>
			     pl > (char *)a && CMP(thunk, pl - es, pl) > 0;
   2519e:	eba5 0904 	sub.w	r9, r5, r4
   251a2:	4629      	mov	r1, r5
   251a4:	4648      	mov	r0, r9
   251a6:	47c0      	blx	r8
   251a8:	2800      	cmp	r0, #0
   251aa:	dd07      	ble.n	251bc <qsort+0x168>
				swapfunc(pl, pl - es, es);
   251ac:	4628      	mov	r0, r5
   251ae:	4622      	mov	r2, r4
   251b0:	4649      	mov	r1, r9
   251b2:	f7ff ff24 	bl	24ffe <swapfunc>
			     pl -= es) {
   251b6:	464d      	mov	r5, r9
			for (pl = pm;
   251b8:	42ae      	cmp	r6, r5
   251ba:	d3f0      	bcc.n	2519e <qsort+0x14a>
		for (pm = (char *)a + es; pm < (char *)a + n * es; pm += es) {
   251bc:	4427      	add	r7, r4
   251be:	e7d8      	b.n	25172 <qsort+0x11e>
	d1 = MIN(pa - (char *)a, pb - pa);
   251c0:	9b00      	ldr	r3, [sp, #0]
   251c2:	eba9 0b03 	sub.w	fp, r9, r3
   251c6:	1b9a      	subs	r2, r3, r6
   251c8:	455a      	cmp	r2, fp
   251ca:	bfa8      	it	ge
   251cc:	465a      	movge	r2, fp
	vecswap(a, pb - d1, d1);
   251ce:	b122      	cbz	r2, 251da <qsort+0x186>
   251d0:	4630      	mov	r0, r6
   251d2:	eba9 0102 	sub.w	r1, r9, r2
   251d6:	f7ff ff12 	bl	24ffe <swapfunc>
	d1 = MIN(pd - pc, pn - pd - es);
   251da:	9b01      	ldr	r3, [sp, #4]
   251dc:	ebaa 0203 	sub.w	r2, sl, r3
   251e0:	1b5d      	subs	r5, r3, r5
   251e2:	1b12      	subs	r2, r2, r4
   251e4:	42aa      	cmp	r2, r5
   251e6:	bf28      	it	cs
   251e8:	462a      	movcs	r2, r5
	vecswap(pb, pn - d1, d1);
   251ea:	b122      	cbz	r2, 251f6 <qsort+0x1a2>
   251ec:	4648      	mov	r0, r9
   251ee:	ebaa 0102 	sub.w	r1, sl, r2
   251f2:	f7ff ff04 	bl	24ffe <swapfunc>
	if (d1 <= d2) {
   251f6:	455d      	cmp	r5, fp
   251f8:	d310      	bcc.n	2521c <qsort+0x1c8>
		if (d1 > es) {
   251fa:	455c      	cmp	r4, fp
   251fc:	d206      	bcs.n	2520c <qsort+0x1b8>
			qsort(a, d1 / es, es, cmp);
   251fe:	4643      	mov	r3, r8
   25200:	4622      	mov	r2, r4
   25202:	fbbb f1f4 	udiv	r1, fp, r4
   25206:	4630      	mov	r0, r6
   25208:	f7ff ff24 	bl	25054 <qsort>
		if (d2 > es) {
   2520c:	42a5      	cmp	r5, r4
   2520e:	f67f af32 	bls.w	25076 <qsort+0x22>
			n = d2 / es;
   25212:	fbb5 fbf4 	udiv	fp, r5, r4
			a = pn - d2;
   25216:	ebaa 0605 	sub.w	r6, sl, r5
			goto loop;
   2521a:	e722      	b.n	25062 <qsort+0xe>
		if (d2 > es) {
   2521c:	42a5      	cmp	r5, r4
   2521e:	d907      	bls.n	25230 <qsort+0x1dc>
			qsort(pn - d2, d2 / es, es, cmp);
   25220:	4643      	mov	r3, r8
   25222:	4622      	mov	r2, r4
   25224:	fbb5 f1f4 	udiv	r1, r5, r4
   25228:	ebaa 0005 	sub.w	r0, sl, r5
   2522c:	f7ff ff12 	bl	25054 <qsort>
		if (d1 > es) {
   25230:	455c      	cmp	r4, fp
   25232:	f4bf af20 	bcs.w	25076 <qsort+0x22>
			n = d1 / es;
   25236:	fbbb fbf4 	udiv	fp, fp, r4
			goto loop;
   2523a:	e712      	b.n	25062 <qsort+0xe>

0002523c <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   2523c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   25240:	b2db      	uxtb	r3, r3
   25242:	2b09      	cmp	r3, #9
   25244:	d802      	bhi.n	2524c <char2hex+0x10>
		*x = c - '0';
   25246:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   25248:	2000      	movs	r0, #0
   2524a:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   2524c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   25250:	2b05      	cmp	r3, #5
   25252:	d802      	bhi.n	2525a <char2hex+0x1e>
		*x = c - 'a' + 10;
   25254:	3857      	subs	r0, #87	; 0x57
   25256:	7008      	strb	r0, [r1, #0]
   25258:	e7f6      	b.n	25248 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   2525a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   2525e:	2b05      	cmp	r3, #5
   25260:	d801      	bhi.n	25266 <char2hex+0x2a>
		*x = c - 'A' + 10;
   25262:	3837      	subs	r0, #55	; 0x37
   25264:	e7f7      	b.n	25256 <char2hex+0x1a>
		return -EINVAL;
   25266:	f06f 0015 	mvn.w	r0, #21
}
   2526a:	4770      	bx	lr

0002526c <hex2char>:

int hex2char(uint8_t x, char *c)
{
	if (x <= 9) {
   2526c:	2809      	cmp	r0, #9
   2526e:	d803      	bhi.n	25278 <hex2char+0xc>
		*c = x + '0';
   25270:	3030      	adds	r0, #48	; 0x30
	} else  if (x <= 15) {
		*c = x - 10 + 'a';
   25272:	7008      	strb	r0, [r1, #0]
	} else {
		return -EINVAL;
	}

	return 0;
   25274:	2000      	movs	r0, #0
   25276:	4770      	bx	lr
	} else  if (x <= 15) {
   25278:	280f      	cmp	r0, #15
   2527a:	d801      	bhi.n	25280 <hex2char+0x14>
		*c = x - 10 + 'a';
   2527c:	3057      	adds	r0, #87	; 0x57
   2527e:	e7f8      	b.n	25272 <hex2char+0x6>
		return -EINVAL;
   25280:	f06f 0015 	mvn.w	r0, #21
}
   25284:	4770      	bx	lr

00025286 <bin2hex>:

size_t bin2hex(const uint8_t *buf, size_t buflen, char *hex, size_t hexlen)
{
	if ((hexlen + 1) < buflen * 2) {
   25286:	3301      	adds	r3, #1
   25288:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
{
   2528c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25290:	460c      	mov	r4, r1
	if ((hexlen + 1) < buflen * 2) {
   25292:	ea4f 0641 	mov.w	r6, r1, lsl #1
   25296:	d203      	bcs.n	252a0 <bin2hex+0x1a>
		return 0;
   25298:	2600      	movs	r6, #0
		}
	}

	hex[2 * buflen] = '\0';
	return 2 * buflen;
}
   2529a:	4630      	mov	r0, r6
   2529c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   252a0:	4603      	mov	r3, r0
   252a2:	1c55      	adds	r5, r2, #1
   252a4:	1847      	adds	r7, r0, r1
	for (size_t i = 0; i < buflen; i++) {
   252a6:	42bb      	cmp	r3, r7
   252a8:	d103      	bne.n	252b2 <bin2hex+0x2c>
	hex[2 * buflen] = '\0';
   252aa:	2300      	movs	r3, #0
   252ac:	f802 3014 	strb.w	r3, [r2, r4, lsl #1]
	return 2 * buflen;
   252b0:	e7f3      	b.n	2529a <bin2hex+0x14>
		if (hex2char(buf[i] >> 4, &hex[2 * i]) < 0) {
   252b2:	7818      	ldrb	r0, [r3, #0]
   252b4:	1e69      	subs	r1, r5, #1
   252b6:	0900      	lsrs	r0, r0, #4
   252b8:	4698      	mov	r8, r3
   252ba:	f7ff ffd7 	bl	2526c <hex2char>
   252be:	2800      	cmp	r0, #0
   252c0:	dbea      	blt.n	25298 <bin2hex+0x12>
		if (hex2char(buf[i] & 0xf, &hex[2 * i + 1]) < 0) {
   252c2:	f898 0000 	ldrb.w	r0, [r8]
   252c6:	4629      	mov	r1, r5
   252c8:	f000 000f 	and.w	r0, r0, #15
   252cc:	3301      	adds	r3, #1
   252ce:	f7ff ffcd 	bl	2526c <hex2char>
   252d2:	2800      	cmp	r0, #0
   252d4:	f105 0502 	add.w	r5, r5, #2
   252d8:	dae5      	bge.n	252a6 <bin2hex+0x20>
   252da:	e7dd      	b.n	25298 <bin2hex+0x12>

000252dc <hex2bin>:

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   252dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   252de:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   252e0:	f001 0001 	and.w	r0, r1, #1
   252e4:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   252e8:	429d      	cmp	r5, r3
   252ea:	ea4f 0651 	mov.w	r6, r1, lsr #1
   252ee:	d903      	bls.n	252f8 <hex2bin+0x1c>
		return 0;
   252f0:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   252f2:	4628      	mov	r0, r5
   252f4:	b003      	add	sp, #12
   252f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   252f8:	b158      	cbz	r0, 25312 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   252fa:	7820      	ldrb	r0, [r4, #0]
   252fc:	f10d 0107 	add.w	r1, sp, #7
   25300:	f7ff ff9c 	bl	2523c <char2hex>
   25304:	2800      	cmp	r0, #0
   25306:	dbf3      	blt.n	252f0 <hex2bin+0x14>
		buf[0] = dec;
   25308:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   2530c:	3401      	adds	r4, #1
		buf[0] = dec;
   2530e:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   25312:	3401      	adds	r4, #1
   25314:	4416      	add	r6, r2
   25316:	42b2      	cmp	r2, r6
   25318:	d0eb      	beq.n	252f2 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   2531a:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   2531e:	f10d 0107 	add.w	r1, sp, #7
   25322:	f7ff ff8b 	bl	2523c <char2hex>
   25326:	2800      	cmp	r0, #0
   25328:	dbe2      	blt.n	252f0 <hex2bin+0x14>
		buf[i] = dec << 4;
   2532a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   2532e:	f10d 0107 	add.w	r1, sp, #7
		buf[i] = dec << 4;
   25332:	011b      	lsls	r3, r3, #4
   25334:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   25336:	f814 0b02 	ldrb.w	r0, [r4], #2
   2533a:	f7ff ff7f 	bl	2523c <char2hex>
   2533e:	2800      	cmp	r0, #0
   25340:	dbd6      	blt.n	252f0 <hex2bin+0x14>
		buf[i] += dec;
   25342:	7813      	ldrb	r3, [r2, #0]
   25344:	f89d 1007 	ldrb.w	r1, [sp, #7]
   25348:	440b      	add	r3, r1
   2534a:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   2534e:	e7e2      	b.n	25316 <hex2bin+0x3a>

00025350 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   25350:	4603      	mov	r3, r0
   25352:	b140      	cbz	r0, 25366 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   25354:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   25356:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   2535a:	2a02      	cmp	r2, #2
   2535c:	d006      	beq.n	2536c <sys_notify_validate+0x1c>
   2535e:	2a03      	cmp	r2, #3
   25360:	d004      	beq.n	2536c <sys_notify_validate+0x1c>
   25362:	2a01      	cmp	r2, #1
   25364:	d005      	beq.n	25372 <sys_notify_validate+0x22>
		return -EINVAL;
   25366:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   2536a:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2536c:	681a      	ldr	r2, [r3, #0]
   2536e:	2a00      	cmp	r2, #0
   25370:	d0f9      	beq.n	25366 <sys_notify_validate+0x16>
		notify->result = 0;
   25372:	2000      	movs	r0, #0
   25374:	6098      	str	r0, [r3, #8]
   25376:	4770      	bx	lr

00025378 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   25378:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   2537a:	b510      	push	{r4, lr}
	return method & SYS_NOTIFY_METHOD_MASK;
   2537c:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   25380:	2a02      	cmp	r2, #2
{
   25382:	4603      	mov	r3, r0
	notify->result = res;
   25384:	6081      	str	r1, [r0, #8]
	switch (method) {
   25386:	d00a      	beq.n	2539e <sys_notify_finalize+0x26>
   25388:	2a03      	cmp	r2, #3
   2538a:	d10b      	bne.n	253a4 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   2538c:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   2538e:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   25390:	2200      	movs	r2, #0
   25392:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   25394:	b108      	cbz	r0, 2539a <sys_notify_finalize+0x22>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   25396:	f7ff fcb5 	bl	24d04 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   2539a:	4620      	mov	r0, r4
   2539c:	bd10      	pop	{r4, pc}
	sys_notify_generic_callback rv = NULL;
   2539e:	2400      	movs	r4, #0
		sig = notify->method.signal;
   253a0:	6800      	ldr	r0, [r0, #0]
		break;
   253a2:	e7f5      	b.n	25390 <sys_notify_finalize+0x18>
	switch (method) {
   253a4:	2400      	movs	r4, #0
   253a6:	4620      	mov	r0, r4
   253a8:	e7f2      	b.n	25390 <sys_notify_finalize+0x18>

000253aa <arch_printk_char_out>:
}
   253aa:	2000      	movs	r0, #0
   253ac:	4770      	bx	lr

000253ae <str_out>:
{
   253ae:	b530      	push	{r4, r5, lr}
   253b0:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   253b2:	680c      	ldr	r4, [r1, #0]
   253b4:	1c55      	adds	r5, r2, #1
   253b6:	b114      	cbz	r4, 253be <str_out+0x10>
   253b8:	684b      	ldr	r3, [r1, #4]
   253ba:	4293      	cmp	r3, r2
   253bc:	dc01      	bgt.n	253c2 <str_out+0x14>
		ctx->count++;
   253be:	608d      	str	r5, [r1, #8]
}
   253c0:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   253c2:	3b01      	subs	r3, #1
   253c4:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   253c6:	bf08      	it	eq
   253c8:	2200      	moveq	r2, #0
   253ca:	608d      	str	r5, [r1, #8]
   253cc:	bf0c      	ite	eq
   253ce:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   253d0:	54a0      	strbne	r0, [r4, r2]
   253d2:	e7f5      	b.n	253c0 <str_out+0x12>

000253d4 <printk>:
{
   253d4:	b40f      	push	{r0, r1, r2, r3}
   253d6:	b507      	push	{r0, r1, r2, lr}
   253d8:	a904      	add	r1, sp, #16
   253da:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   253de:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   253e0:	f7f8 fbcc 	bl	1db7c <vprintk>
}
   253e4:	b003      	add	sp, #12
   253e6:	f85d eb04 	ldr.w	lr, [sp], #4
   253ea:	b004      	add	sp, #16
   253ec:	4770      	bx	lr

000253ee <snprintk>:
{
   253ee:	b40c      	push	{r2, r3}
   253f0:	b507      	push	{r0, r1, r2, lr}
   253f2:	ab04      	add	r3, sp, #16
   253f4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   253f8:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   253fa:	f7f8 fbcd 	bl	1db98 <vsnprintk>
}
   253fe:	b003      	add	sp, #12
   25400:	f85d eb04 	ldr.w	lr, [sp], #4
   25404:	b002      	add	sp, #8
   25406:	4770      	bx	lr

00025408 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   25408:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   2540a:	f013 0307 	ands.w	r3, r3, #7
   2540e:	d105      	bne.n	2541c <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   25410:	6803      	ldr	r3, [r0, #0]
   25412:	2b00      	cmp	r3, #0
		evt = EVT_START;
   25414:	bf0c      	ite	eq
   25416:	2000      	moveq	r0, #0
   25418:	2003      	movne	r0, #3
   2541a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2541c:	2b02      	cmp	r3, #2
   2541e:	d105      	bne.n	2542c <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   25420:	8b43      	ldrh	r3, [r0, #26]
   25422:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   25424:	bf14      	ite	ne
   25426:	2000      	movne	r0, #0
   25428:	2004      	moveq	r0, #4
   2542a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   2542c:	2b01      	cmp	r3, #1
   2542e:	d105      	bne.n	2543c <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   25430:	6803      	ldr	r3, [r0, #0]
   25432:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   25434:	bf0c      	ite	eq
   25436:	2000      	moveq	r0, #0
   25438:	2005      	movne	r0, #5
   2543a:	4770      	bx	lr
	int evt = EVT_NOP;
   2543c:	2000      	movs	r0, #0
}
   2543e:	4770      	bx	lr

00025440 <notify_one>:
{
   25440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25444:	460d      	mov	r5, r1
   25446:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   25448:	4619      	mov	r1, r3
   2544a:	1d28      	adds	r0, r5, #4
{
   2544c:	4690      	mov	r8, r2
   2544e:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   25450:	f7ff ff92 	bl	25378 <sys_notify_finalize>
	if (cb) {
   25454:	4604      	mov	r4, r0
   25456:	b138      	cbz	r0, 25468 <notify_one+0x28>
		cb(mgr, cli, state, res);
   25458:	4633      	mov	r3, r6
   2545a:	4642      	mov	r2, r8
   2545c:	4629      	mov	r1, r5
   2545e:	4638      	mov	r0, r7
   25460:	46a4      	mov	ip, r4
}
   25462:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   25466:	4760      	bx	ip
}
   25468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002546c <transition_complete>:
{
   2546c:	b410      	push	{r4}
	__asm__ volatile(
   2546e:	f04f 0420 	mov.w	r4, #32
   25472:	f3ef 8211 	mrs	r2, BASEPRI
   25476:	f384 8811 	msr	BASEPRI, r4
   2547a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   2547e:	6141      	str	r1, [r0, #20]
}
   25480:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   25482:	2101      	movs	r1, #1
   25484:	f7f8 bb9c 	b.w	1dbc0 <process_event>

00025488 <validate_args>:
{
   25488:	b510      	push	{r4, lr}
   2548a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2548c:	b140      	cbz	r0, 254a0 <validate_args+0x18>
   2548e:	b139      	cbz	r1, 254a0 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   25490:	1d08      	adds	r0, r1, #4
   25492:	f7ff ff5d 	bl	25350 <sys_notify_validate>
	if ((rv == 0)
   25496:	b928      	cbnz	r0, 254a4 <validate_args+0x1c>
	    && ((cli->notify.flags
   25498:	68a3      	ldr	r3, [r4, #8]
   2549a:	f033 0303 	bics.w	r3, r3, #3
   2549e:	d001      	beq.n	254a4 <validate_args+0x1c>
		rv = -EINVAL;
   254a0:	f06f 0015 	mvn.w	r0, #21
}
   254a4:	bd10      	pop	{r4, pc}

000254a6 <onoff_manager_init>:
{
   254a6:	b538      	push	{r3, r4, r5, lr}
   254a8:	460c      	mov	r4, r1
	if ((mgr == NULL)
   254aa:	4605      	mov	r5, r0
   254ac:	b158      	cbz	r0, 254c6 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   254ae:	b151      	cbz	r1, 254c6 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   254b0:	680b      	ldr	r3, [r1, #0]
   254b2:	b143      	cbz	r3, 254c6 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   254b4:	684b      	ldr	r3, [r1, #4]
   254b6:	b133      	cbz	r3, 254c6 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   254b8:	221c      	movs	r2, #28
   254ba:	2100      	movs	r1, #0
   254bc:	f002 f931 	bl	27722 <memset>
	return 0;
   254c0:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   254c2:	612c      	str	r4, [r5, #16]
}
   254c4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   254c6:	f06f 0015 	mvn.w	r0, #21
   254ca:	e7fb      	b.n	254c4 <onoff_manager_init+0x1e>

000254cc <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   254cc:	b570      	push	{r4, r5, r6, lr}
   254ce:	4604      	mov	r4, r0
   254d0:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   254d2:	f7ff ffd9 	bl	25488 <validate_args>

	if (rv < 0) {
   254d6:	1e05      	subs	r5, r0, #0
   254d8:	db31      	blt.n	2553e <onoff_request+0x72>
   254da:	f04f 0320 	mov.w	r3, #32
   254de:	f3ef 8111 	mrs	r1, BASEPRI
   254e2:	f383 8811 	msr	BASEPRI, r3
   254e6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   254ea:	f64f 75ff 	movw	r5, #65535	; 0xffff
   254ee:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   254f0:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   254f2:	42ab      	cmp	r3, r5
   254f4:	f000 0207 	and.w	r2, r0, #7
   254f8:	d02e      	beq.n	25558 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   254fa:	2a02      	cmp	r2, #2
   254fc:	d10e      	bne.n	2551c <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   254fe:	3301      	adds	r3, #1
   25500:	8363      	strh	r3, [r4, #26]
	rv = state;
   25502:	4615      	mov	r5, r2
		notify = true;
   25504:	2301      	movs	r3, #1
	__asm__ volatile(
   25506:	f381 8811 	msr	BASEPRI, r1
   2550a:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   2550e:	b1b3      	cbz	r3, 2553e <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   25510:	2300      	movs	r3, #0
   25512:	4631      	mov	r1, r6
   25514:	4620      	mov	r0, r4
   25516:	f7ff ff93 	bl	25440 <notify_one>
   2551a:	e010      	b.n	2553e <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   2551c:	0783      	lsls	r3, r0, #30
   2551e:	d001      	beq.n	25524 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   25520:	2a06      	cmp	r2, #6
   25522:	d10e      	bne.n	25542 <onoff_request+0x76>
	parent->next = child;
   25524:	2300      	movs	r3, #0
   25526:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   25528:	6863      	ldr	r3, [r4, #4]
   2552a:	b993      	cbnz	r3, 25552 <onoff_request+0x86>
	list->head = node;
   2552c:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   25530:	4615      	mov	r5, r2
   25532:	b962      	cbnz	r2, 2554e <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   25534:	460a      	mov	r2, r1
   25536:	4620      	mov	r0, r4
   25538:	2102      	movs	r1, #2
   2553a:	f7f8 fb41 	bl	1dbc0 <process_event>
		}
	}

	return rv;
}
   2553e:	4628      	mov	r0, r5
   25540:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   25542:	2a05      	cmp	r2, #5
   25544:	bf0c      	ite	eq
   25546:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   2554a:	f06f 0504 	mvnne.w	r5, #4
   2554e:	2300      	movs	r3, #0
   25550:	e7d9      	b.n	25506 <onoff_request+0x3a>
	parent->next = child;
   25552:	601e      	str	r6, [r3, #0]
	list->tail = node;
   25554:	6066      	str	r6, [r4, #4]
}
   25556:	e7eb      	b.n	25530 <onoff_request+0x64>
		rv = -EAGAIN;
   25558:	f06f 050a 	mvn.w	r5, #10
   2555c:	e7f7      	b.n	2554e <onoff_request+0x82>

0002555e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2555e:	4604      	mov	r4, r0
   25560:	b508      	push	{r3, lr}
   25562:	4608      	mov	r0, r1
   25564:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   25566:	461a      	mov	r2, r3
   25568:	47a0      	blx	r4
	return z_impl_k_current_get();
   2556a:	f7ff f8cd 	bl	24708 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   2556e:	f7fc ff3f 	bl	223f0 <z_impl_k_thread_abort>

00025572 <timeutil_timegm>:

time_t timeutil_timegm(const struct tm *tm)
{
   25572:	b538      	push	{r3, r4, r5, lr}
	int64_t time = timeutil_timegm64(tm);
   25574:	f7f8 fc0a 	bl	1dd8c <timeutil_timegm64>
   25578:	4605      	mov	r5, r0
   2557a:	460c      	mov	r4, r1
   2557c:	f7fe f8e2 	bl	23744 <z_impl_z_errno>
	time_t rv = (time_t)time;

	errno = 0;
   25580:	2300      	movs	r3, #0
		errno = ERANGE;
		rv = -1;
	}

	return rv;
}
   25582:	4621      	mov	r1, r4
	errno = 0;
   25584:	6003      	str	r3, [r0, #0]
}
   25586:	4628      	mov	r0, r5
   25588:	bd38      	pop	{r3, r4, r5, pc}

0002558a <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   2558a:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   2558c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   25590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   25594:	bf2c      	ite	cs
   25596:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   2559a:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   2559e:	4770      	bx	lr

000255a0 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   255a0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   255a4:	6880      	ldr	r0, [r0, #8]
   255a6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   255aa:	bf2c      	ite	cs
   255ac:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   255b0:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   255b4:	4770      	bx	lr

000255b6 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   255b6:	2201      	movs	r2, #1
{
   255b8:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   255ba:	f7ff ffe6 	bl	2558a <chunk_field>
}
   255be:	0840      	lsrs	r0, r0, #1
   255c0:	bd08      	pop	{r3, pc}

000255c2 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   255c2:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   255c4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   255c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   255cc:	d308      	bcc.n	255e0 <set_chunk_used+0x1e>
		if (used) {
   255ce:	684b      	ldr	r3, [r1, #4]
   255d0:	b11a      	cbz	r2, 255da <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   255d2:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   255d6:	604b      	str	r3, [r1, #4]
   255d8:	4770      	bx	lr
   255da:	f023 0301 	bic.w	r3, r3, #1
   255de:	e7fa      	b.n	255d6 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   255e0:	884b      	ldrh	r3, [r1, #2]
   255e2:	b11a      	cbz	r2, 255ec <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   255e4:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   255e8:	804b      	strh	r3, [r1, #2]
		}
	}
}
   255ea:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   255ec:	f023 0301 	bic.w	r3, r3, #1
   255f0:	e7fa      	b.n	255e8 <set_chunk_used+0x26>

000255f2 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   255f2:	0053      	lsls	r3, r2, #1
   255f4:	2201      	movs	r2, #1
   255f6:	f7ff bfd3 	b.w	255a0 <chunk_set>

000255fa <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   255fa:	6880      	ldr	r0, [r0, #8]
	return chunksz * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   255fc:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   255fe:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   25602:	bf2c      	ite	cs
   25604:	2002      	movcs	r0, #2
   25606:	2001      	movcc	r0, #1
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   25608:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   2560a:	fab0 f080 	clz	r0, r0
}
   2560e:	f1c0 001f 	rsb	r0, r0, #31
   25612:	4770      	bx	lr

00025614 <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   25614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25618:	4604      	mov	r4, r0
   2561a:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   2561c:	f7ff ffcb 	bl	255b6 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   25620:	68a3      	ldr	r3, [r4, #8]
   25622:	4601      	mov	r1, r0
   25624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   25628:	d301      	bcc.n	2562e <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   2562a:	2801      	cmp	r0, #1
   2562c:	d035      	beq.n	2569a <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   2562e:	4620      	mov	r0, r4
   25630:	f7ff ffe3 	bl	255fa <bucket_idx>
	if (b->next == 0U) {
   25634:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   25638:	6916      	ldr	r6, [r2, #16]
   2563a:	b99e      	cbnz	r6, 25664 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   2563c:	2301      	movs	r3, #1
   2563e:	fa03 f000 	lsl.w	r0, r3, r0
   25642:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   25644:	4629      	mov	r1, r5
   25646:	4303      	orrs	r3, r0
   25648:	60e3      	str	r3, [r4, #12]
   2564a:	4620      	mov	r0, r4
		b->next = c;
   2564c:	6115      	str	r5, [r2, #16]
   2564e:	462b      	mov	r3, r5
   25650:	2202      	movs	r2, #2
   25652:	f7ff ffa5 	bl	255a0 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   25656:	2203      	movs	r2, #3
   25658:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   2565a:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
   2565c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   25660:	f7ff bf9e 	b.w	255a0 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   25664:	2202      	movs	r2, #2
   25666:	4631      	mov	r1, r6
   25668:	4620      	mov	r0, r4
   2566a:	f7ff ff8e 	bl	2558a <chunk_field>
   2566e:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   25670:	4603      	mov	r3, r0
   25672:	2202      	movs	r2, #2
   25674:	4629      	mov	r1, r5
   25676:	4620      	mov	r0, r4
   25678:	f7ff ff92 	bl	255a0 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   2567c:	4633      	mov	r3, r6
   2567e:	2203      	movs	r2, #3
   25680:	4629      	mov	r1, r5
   25682:	4620      	mov	r0, r4
   25684:	f7ff ff8c 	bl	255a0 <chunk_set>
   25688:	2203      	movs	r2, #3
   2568a:	4639      	mov	r1, r7
   2568c:	462b      	mov	r3, r5
   2568e:	4620      	mov	r0, r4
   25690:	f7ff ff86 	bl	255a0 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   25694:	2202      	movs	r2, #2
   25696:	4631      	mov	r1, r6
   25698:	e7df      	b.n	2565a <free_list_add+0x46>
   2569a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002569e <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   2569e:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   256a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   256a4:	bf2c      	ite	cs
   256a6:	2508      	movcs	r5, #8
   256a8:	2504      	movcc	r5, #4
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   256aa:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
   256ac:	1b55      	subs	r5, r2, r5
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   256ae:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   256b0:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   256b2:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   256b6:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   256ba:	1b2d      	subs	r5, r5, r4
   256bc:	08ed      	lsrs	r5, r5, #3
	heap->heap = h;
   256be:	6004      	str	r4, [r0, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   256c0:	4629      	mov	r1, r5
   256c2:	4620      	mov	r0, r4
	h->end_chunk = heap_sz;
   256c4:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   256c6:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   256c8:	f7ff ff97 	bl	255fa <bucket_idx>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   256cc:	0086      	lsls	r6, r0, #2
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   256ce:	1c41      	adds	r1, r0, #1
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   256d0:	4618      	mov	r0, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   256d2:	361b      	adds	r6, #27
   256d4:	08f6      	lsrs	r6, r6, #3
	for (int i = 0; i < nb_buckets; i++) {
   256d6:	f104 0210 	add.w	r2, r4, #16
   256da:	428b      	cmp	r3, r1
   256dc:	db2f      	blt.n	2573e <sys_heap_init+0xa0>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   256de:	4632      	mov	r2, r6
   256e0:	4620      	mov	r0, r4
   256e2:	2100      	movs	r1, #0
   256e4:	f7ff ff85 	bl	255f2 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   256e8:	2300      	movs	r3, #0
   256ea:	4620      	mov	r0, r4
   256ec:	461a      	mov	r2, r3
   256ee:	4619      	mov	r1, r3
   256f0:	f7ff ff56 	bl	255a0 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   256f4:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   256f6:	4620      	mov	r0, r4
   256f8:	2201      	movs	r2, #1
   256fa:	2100      	movs	r1, #0
   256fc:	f7ff ff61 	bl	255c2 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   25700:	463a      	mov	r2, r7
   25702:	4631      	mov	r1, r6
   25704:	f7ff ff75 	bl	255f2 <set_chunk_size>
   25708:	4633      	mov	r3, r6
   2570a:	4631      	mov	r1, r6
   2570c:	4620      	mov	r0, r4
   2570e:	2200      	movs	r2, #0
   25710:	f7ff ff46 	bl	255a0 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   25714:	4629      	mov	r1, r5
   25716:	4620      	mov	r0, r4
   25718:	2200      	movs	r2, #0
   2571a:	f7ff ff6a 	bl	255f2 <set_chunk_size>
   2571e:	463b      	mov	r3, r7
   25720:	4629      	mov	r1, r5
   25722:	4620      	mov	r0, r4
   25724:	2200      	movs	r2, #0
   25726:	f7ff ff3b 	bl	255a0 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
   2572a:	4629      	mov	r1, r5
   2572c:	4620      	mov	r0, r4
   2572e:	2201      	movs	r2, #1
   25730:	f7ff ff47 	bl	255c2 <set_chunk_used>

	free_list_add(h, chunk0_size);
   25734:	4631      	mov	r1, r6
}
   25736:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   2573a:	f7ff bf6b 	b.w	25614 <free_list_add>
		h->buckets[i].next = 0;
   2573e:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   25742:	3301      	adds	r3, #1
   25744:	e7c9      	b.n	256da <sys_heap_init+0x3c>

00025746 <encode_uint>:
{
   25746:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2574a:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   2574c:	78d3      	ldrb	r3, [r2, #3]
{
   2574e:	4614      	mov	r4, r2
	switch (specifier) {
   25750:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   25752:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   25756:	4606      	mov	r6, r0
   25758:	460f      	mov	r7, r1
   2575a:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   2575c:	d02d      	beq.n	257ba <encode_uint+0x74>
   2575e:	d828      	bhi.n	257b2 <encode_uint+0x6c>
		return 16;
   25760:	2b58      	cmp	r3, #88	; 0x58
   25762:	bf14      	ite	ne
   25764:	250a      	movne	r5, #10
   25766:	2510      	moveq	r5, #16
		unsigned int lsv = (unsigned int)(value % radix);
   25768:	46aa      	mov	sl, r5
   2576a:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
   2576e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   25772:	4652      	mov	r2, sl
   25774:	465b      	mov	r3, fp
   25776:	4630      	mov	r0, r6
   25778:	4639      	mov	r1, r7
   2577a:	f7ea fdb1 	bl	102e0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2577e:	2a09      	cmp	r2, #9
   25780:	b2d3      	uxtb	r3, r2
   25782:	d81f      	bhi.n	257c4 <encode_uint+0x7e>
   25784:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   25786:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   25788:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   2578a:	bf08      	it	eq
   2578c:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2578e:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   25792:	d301      	bcc.n	25798 <encode_uint+0x52>
   25794:	45c8      	cmp	r8, r9
   25796:	d812      	bhi.n	257be <encode_uint+0x78>
	if (conv->flag_hash) {
   25798:	7823      	ldrb	r3, [r4, #0]
   2579a:	069b      	lsls	r3, r3, #26
   2579c:	d505      	bpl.n	257aa <encode_uint+0x64>
		if (radix == 8) {
   2579e:	2d08      	cmp	r5, #8
   257a0:	d116      	bne.n	257d0 <encode_uint+0x8a>
			conv->altform_0 = true;
   257a2:	78a3      	ldrb	r3, [r4, #2]
   257a4:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   257a8:	70a3      	strb	r3, [r4, #2]
}
   257aa:	4640      	mov	r0, r8
   257ac:	b003      	add	sp, #12
   257ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   257b2:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   257b6:	2b70      	cmp	r3, #112	; 0x70
   257b8:	e7d3      	b.n	25762 <encode_uint+0x1c>
	switch (specifier) {
   257ba:	2508      	movs	r5, #8
   257bc:	e7d4      	b.n	25768 <encode_uint+0x22>
		value /= radix;
   257be:	4606      	mov	r6, r0
   257c0:	460f      	mov	r7, r1
   257c2:	e7d6      	b.n	25772 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   257c4:	9a01      	ldr	r2, [sp, #4]
   257c6:	2a19      	cmp	r2, #25
   257c8:	bf94      	ite	ls
   257ca:	3337      	addls	r3, #55	; 0x37
   257cc:	3357      	addhi	r3, #87	; 0x57
   257ce:	e7da      	b.n	25786 <encode_uint+0x40>
		} else if (radix == 16) {
   257d0:	2d10      	cmp	r5, #16
   257d2:	d1ea      	bne.n	257aa <encode_uint+0x64>
			conv->altform_0c = true;
   257d4:	78a3      	ldrb	r3, [r4, #2]
   257d6:	f043 0310 	orr.w	r3, r3, #16
   257da:	e7e5      	b.n	257a8 <encode_uint+0x62>

000257dc <outs>:
{
   257dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   257e0:	4607      	mov	r7, r0
   257e2:	4688      	mov	r8, r1
   257e4:	4615      	mov	r5, r2
   257e6:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   257e8:	4614      	mov	r4, r2
   257ea:	42b4      	cmp	r4, r6
   257ec:	eba4 0005 	sub.w	r0, r4, r5
   257f0:	d302      	bcc.n	257f8 <outs+0x1c>
   257f2:	b93e      	cbnz	r6, 25804 <outs+0x28>
   257f4:	7823      	ldrb	r3, [r4, #0]
   257f6:	b12b      	cbz	r3, 25804 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   257f8:	4641      	mov	r1, r8
   257fa:	f814 0b01 	ldrb.w	r0, [r4], #1
   257fe:	47b8      	blx	r7
		if (rc < 0) {
   25800:	2800      	cmp	r0, #0
   25802:	daf2      	bge.n	257ea <outs+0xe>
}
   25804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025808 <ring_buf_get_rewind_threshold>:
 * rewinding earlier.
 */
uint32_t __weak ring_buf_get_rewind_threshold(void)
{
	return RING_BUFFER_MAX_SIZE;
}
   25808:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   2580c:	4770      	bx	lr

0002580e <ring_buf_put_claim>:
{
	return val >= max ? (val - max) : val;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   2580e:	b5f0      	push	{r4, r5, r6, r7, lr}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   25810:	6985      	ldr	r5, [r0, #24]
{
   25812:	4604      	mov	r4, r0
	uint32_t space, trail_size, allocated, tmp_trail_mod;

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
   25814:	6886      	ldr	r6, [r0, #8]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   25816:	6907      	ldr	r7, [r0, #16]
   25818:	b185      	cbz	r5, 2583c <ring_buf_put_claim+0x2e>
   2581a:	4035      	ands	r5, r6
	space = (buf->head + buf->size) - buf->misc.byte_mode.tmp_tail;
   2581c:	6823      	ldr	r3, [r4, #0]
   2581e:	443b      	add	r3, r7
   25820:	1b98      	subs	r0, r3, r6
	trail_size = buf->size - tmp_trail_mod;

	/* Limit requested size to available size. */
	size = MIN(size, space);
   25822:	4290      	cmp	r0, r2
   25824:	bf28      	it	cs
   25826:	4610      	movcs	r0, r2
	trail_size = buf->size - tmp_trail_mod;
   25828:	1b7f      	subs	r7, r7, r5

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
   2582a:	42b8      	cmp	r0, r7
   2582c:	bf28      	it	cs
   2582e:	4638      	movcs	r0, r7
	*data = &buf->buf.buf8[tmp_trail_mod];
   25830:	6963      	ldr	r3, [r4, #20]

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
   25832:	4406      	add	r6, r0
	*data = &buf->buf.buf8[tmp_trail_mod];
   25834:	441d      	add	r5, r3
   25836:	600d      	str	r5, [r1, #0]
	buf->misc.byte_mode.tmp_tail =
   25838:	60a6      	str	r6, [r4, #8]

	return allocated;
}
   2583a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   2583c:	fbb6 f5f7 	udiv	r5, r6, r7
   25840:	fb07 6515 	mls	r5, r7, r5, r6
   25844:	e7ea      	b.n	2581c <ring_buf_put_claim+0xe>

00025846 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
	if ((buf->tail + size) > (buf->head + buf->size)) {
   25846:	6843      	ldr	r3, [r0, #4]
   25848:	6902      	ldr	r2, [r0, #16]
   2584a:	4419      	add	r1, r3
   2584c:	6803      	ldr	r3, [r0, #0]
   2584e:	4413      	add	r3, r2
   25850:	4299      	cmp	r1, r3
		return -EINVAL;
	}

	buf->tail += size;
	buf->misc.byte_mode.tmp_tail = buf->tail;
   25852:	bf9a      	itte	ls
   25854:	e9c0 1101 	strdls	r1, r1, [r0, #4]

	return 0;
   25858:	2000      	movls	r0, #0
		return -EINVAL;
   2585a:	f06f 0015 	mvnhi.w	r0, #21
}
   2585e:	4770      	bx	lr

00025860 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
   25860:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   25864:	4680      	mov	r8, r0
   25866:	460e      	mov	r6, r1
   25868:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   2586a:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
   2586c:	462a      	mov	r2, r5
   2586e:	a901      	add	r1, sp, #4
   25870:	4640      	mov	r0, r8
   25872:	f7ff ffcc 	bl	2580e <ring_buf_put_claim>
   25876:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
   25878:	4602      	mov	r2, r0
   2587a:	4631      	mov	r1, r6
   2587c:	9801      	ldr	r0, [sp, #4]
   2587e:	f001 ff25 	bl	276cc <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
   25882:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
   25884:	4427      	add	r7, r4
		data += partial_size;
   25886:	4426      	add	r6, r4
	} while (size && partial_size);
   25888:	d001      	beq.n	2588e <ring_buf_put+0x2e>
   2588a:	2c00      	cmp	r4, #0
   2588c:	d1ee      	bne.n	2586c <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
   2588e:	4639      	mov	r1, r7
   25890:	4640      	mov	r0, r8
   25892:	f7ff ffd8 	bl	25846 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   25896:	4638      	mov	r0, r7
   25898:	b002      	add	sp, #8
   2589a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002589e <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   2589e:	b5f0      	push	{r4, r5, r6, r7, lr}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   258a0:	6985      	ldr	r5, [r0, #24]
{
   258a2:	4604      	mov	r4, r0
	uint32_t space, granted_size, trail_size, tmp_head_mod;

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
   258a4:	68c6      	ldr	r6, [r0, #12]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   258a6:	6903      	ldr	r3, [r0, #16]
   258a8:	b185      	cbz	r5, 258cc <ring_buf_get_claim+0x2e>
   258aa:	4035      	ands	r5, r6
	space = buf->tail - buf->misc.byte_mode.tmp_head;
   258ac:	6867      	ldr	r7, [r4, #4]
   258ae:	1bb8      	subs	r0, r7, r6
	trail_size = buf->size - tmp_head_mod;

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
   258b0:	4290      	cmp	r0, r2
   258b2:	bf28      	it	cs
   258b4:	4610      	movcs	r0, r2
   258b6:	4607      	mov	r7, r0
	trail_size = buf->size - tmp_head_mod;
   258b8:	1b58      	subs	r0, r3, r5

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
   258ba:	42b8      	cmp	r0, r7
   258bc:	bf28      	it	cs
   258be:	4638      	movcs	r0, r7

	*data = &buf->buf.buf8[tmp_head_mod];
   258c0:	6963      	ldr	r3, [r4, #20]
	buf->misc.byte_mode.tmp_head += granted_size;
   258c2:	4406      	add	r6, r0
	*data = &buf->buf.buf8[tmp_head_mod];
   258c4:	441d      	add	r5, r3
   258c6:	600d      	str	r5, [r1, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
   258c8:	60e6      	str	r6, [r4, #12]

	return granted_size;
}
   258ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   258cc:	fbb6 f5f3 	udiv	r5, r6, r3
   258d0:	fb03 6515 	mls	r5, r3, r5, r6
   258d4:	e7ea      	b.n	258ac <ring_buf_get_claim+0xe>

000258d6 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
	if ((buf->head + size) > buf->tail) {
   258d6:	6803      	ldr	r3, [r0, #0]
{
   258d8:	b510      	push	{r4, lr}
	if ((buf->head + size) > buf->tail) {
   258da:	4419      	add	r1, r3
   258dc:	6843      	ldr	r3, [r0, #4]
{
   258de:	4604      	mov	r4, r0
	if ((buf->head + size) > buf->tail) {
   258e0:	4299      	cmp	r1, r3
   258e2:	d824      	bhi.n	2592e <ring_buf_get_finish+0x58>
		return -EINVAL;
	}

	buf->head += size;
   258e4:	6001      	str	r1, [r0, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
   258e6:	60c1      	str	r1, [r0, #12]
	uint32_t threshold = ring_buf_get_rewind_threshold();
   258e8:	f7ff ff8e 	bl	25808 <ring_buf_get_rewind_threshold>
	if (buf->head < threshold) {
   258ec:	6823      	ldr	r3, [r4, #0]
   258ee:	4298      	cmp	r0, r3
   258f0:	d81b      	bhi.n	2592a <ring_buf_get_finish+0x54>
	rew = buf->size * (threshold / buf->size);
   258f2:	6923      	ldr	r3, [r4, #16]
   258f4:	fbb0 f0f3 	udiv	r0, r0, r3
   258f8:	4358      	muls	r0, r3
	__asm__ volatile(
   258fa:	f04f 0320 	mov.w	r3, #32
   258fe:	f3ef 8211 	mrs	r2, BASEPRI
   25902:	f383 8811 	msr	BASEPRI, r3
   25906:	f3bf 8f6f 	isb	sy
	buf->tail -= rew;
   2590a:	6863      	ldr	r3, [r4, #4]
   2590c:	1a1b      	subs	r3, r3, r0
   2590e:	6063      	str	r3, [r4, #4]
	buf->head -= rew;
   25910:	6823      	ldr	r3, [r4, #0]
   25912:	1a1b      	subs	r3, r3, r0
   25914:	6023      	str	r3, [r4, #0]
	buf->misc.byte_mode.tmp_head -= rew;
   25916:	68e3      	ldr	r3, [r4, #12]
   25918:	1a1b      	subs	r3, r3, r0
   2591a:	60e3      	str	r3, [r4, #12]
	buf->misc.byte_mode.tmp_tail -= rew;
   2591c:	68a3      	ldr	r3, [r4, #8]
   2591e:	1a18      	subs	r0, r3, r0
   25920:	60a0      	str	r0, [r4, #8]
	__asm__ volatile(
   25922:	f382 8811 	msr	BASEPRI, r2
   25926:	f3bf 8f6f 	isb	sy

	byte_indexes_rewind(buf);

	return 0;
   2592a:	2000      	movs	r0, #0
   2592c:	e001      	b.n	25932 <ring_buf_get_finish+0x5c>
		return -EINVAL;
   2592e:	f06f 0015 	mvn.w	r0, #21
}
   25932:	bd10      	pop	{r4, pc}

00025934 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
   25934:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   25938:	4680      	mov	r8, r0
   2593a:	460d      	mov	r5, r1
   2593c:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   2593e:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
   25940:	4632      	mov	r2, r6
   25942:	4640      	mov	r0, r8
   25944:	a901      	add	r1, sp, #4
   25946:	f7ff ffaa 	bl	2589e <ring_buf_get_claim>
   2594a:	4604      	mov	r4, r0
		if (data) {
   2594c:	b12d      	cbz	r5, 2595a <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
   2594e:	4602      	mov	r2, r0
   25950:	9901      	ldr	r1, [sp, #4]
   25952:	4628      	mov	r0, r5
   25954:	f001 feba 	bl	276cc <memcpy>
			data += partial_size;
   25958:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
   2595a:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
   2595c:	4427      	add	r7, r4
	} while (size && partial_size);
   2595e:	d001      	beq.n	25964 <ring_buf_get+0x30>
   25960:	2c00      	cmp	r4, #0
   25962:	d1ed      	bne.n	25940 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
   25964:	4639      	mov	r1, r7
   25966:	4640      	mov	r0, r8
   25968:	f7ff ffb5 	bl	258d6 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   2596c:	4638      	mov	r0, r7
   2596e:	b002      	add	sp, #8
   25970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025974 <foldcase>:
#define EOS    '\0'

static inline int foldcase(int ch, int flags)
{

    if ((flags & FNM_CASEFOLD) != 0 && isupper(ch))
   25974:	070b      	lsls	r3, r1, #28
   25976:	d504      	bpl.n	25982 <foldcase+0xe>
   25978:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   2597c:	2b19      	cmp	r3, #25
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
   2597e:	bf98      	it	ls
   25980:	3020      	addls	r0, #32
        return tolower(ch);
    return ch;
}
   25982:	4770      	bx	lr

00025984 <fnmatchx>:
    return ok == negate ? NULL : pattern;
}


static int fnmatchx(const char *pattern, const char *string, int flags, size_t recursion)
{
   25984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25988:	b087      	sub	sp, #28
   2598a:	468a      	mov	sl, r1
   2598c:	4614      	mov	r4, r2
    const char *stringstart, *r;
    char c, test;

    if ((pattern == NULL) || (string == NULL))
   2598e:	4605      	mov	r5, r0
{
   25990:	9302      	str	r3, [sp, #8]
    if ((pattern == NULL) || (string == NULL))
   25992:	b918      	cbnz	r0, 2599c <fnmatchx+0x18>
    {
        return FNM_NOMATCH;
   25994:	2001      	movs	r0, #1
                return FNM_NOMATCH;
            break;
        }
    }
    /* NOTREACHED */
}
   25996:	b007      	add	sp, #28
   25998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pattern == NULL) || (string == NULL))
   2599c:	2900      	cmp	r1, #0
   2599e:	d0f9      	beq.n	25994 <fnmatchx+0x10>
    if (recursion-- == 0)
   259a0:	9b02      	ldr	r3, [sp, #8]
   259a2:	2b00      	cmp	r3, #0
   259a4:	f000 811a 	beq.w	25bdc <fnmatchx+0x258>
   259a8:	460a      	mov	r2, r1
            if (*string == '.' && (flags & FNM_PERIOD) &&
   259aa:	f004 0304 	and.w	r3, r4, #4
   259ae:	9304      	str	r3, [sp, #16]
        switch (c = FOLDCASE(*pattern++, flags)) {
   259b0:	46a8      	mov	r8, r5
   259b2:	4621      	mov	r1, r4
   259b4:	f818 0b01 	ldrb.w	r0, [r8], #1
   259b8:	f7ff ffdc 	bl	25974 <foldcase>
   259bc:	4603      	mov	r3, r0
   259be:	b2c0      	uxtb	r0, r0
   259c0:	283f      	cmp	r0, #63	; 0x3f
   259c2:	4606      	mov	r6, r0
   259c4:	7817      	ldrb	r7, [r2, #0]
   259c6:	d024      	beq.n	25a12 <fnmatchx+0x8e>
   259c8:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   259cc:	d10a      	bne.n	259e4 <fnmatchx+0x60>
   259ce:	b1c0      	cbz	r0, 25a02 <fnmatchx+0x7e>
   259d0:	282a      	cmp	r0, #42	; 0x2a
   259d2:	d035      	beq.n	25a40 <fnmatchx+0xbc>
            if (c != FOLDCASE(*string++, flags))
   259d4:	4621      	mov	r1, r4
   259d6:	4638      	mov	r0, r7
   259d8:	3201      	adds	r2, #1
   259da:	f7ff ffcb 	bl	25974 <foldcase>
   259de:	4286      	cmp	r6, r0
   259e0:	d01e      	beq.n	25a20 <fnmatchx+0x9c>
   259e2:	e7d7      	b.n	25994 <fnmatchx+0x10>
        switch (c = FOLDCASE(*pattern++, flags)) {
   259e4:	285b      	cmp	r0, #91	; 0x5b
   259e6:	d07b      	beq.n	25ae0 <fnmatchx+0x15c>
   259e8:	285c      	cmp	r0, #92	; 0x5c
   259ea:	d1f3      	bne.n	259d4 <fnmatchx+0x50>
            if (!(flags & FNM_NOESCAPE)) {
   259ec:	07e3      	lsls	r3, r4, #31
   259ee:	d4f1      	bmi.n	259d4 <fnmatchx+0x50>
                if ((c = FOLDCASE(*pattern++, flags)) == EOS) {
   259f0:	7868      	ldrb	r0, [r5, #1]
   259f2:	f7ff ffbf 	bl	25974 <foldcase>
   259f6:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
   259fa:	bf18      	it	ne
   259fc:	f105 0802 	addne.w	r8, r5, #2
   25a00:	e7e8      	b.n	259d4 <fnmatchx+0x50>
            if ((flags & FNM_LEADING_DIR) && *string == '/')
   25a02:	06e4      	lsls	r4, r4, #27
   25a04:	d501      	bpl.n	25a0a <fnmatchx+0x86>
   25a06:	2f2f      	cmp	r7, #47	; 0x2f
   25a08:	d0c5      	beq.n	25996 <fnmatchx+0x12>
            return *string == EOS ? 0 : FNM_NOMATCH;
   25a0a:	1e38      	subs	r0, r7, #0
                        0 : FNM_NOMATCH;
   25a0c:	bf18      	it	ne
   25a0e:	2001      	movne	r0, #1
   25a10:	e7c1      	b.n	25996 <fnmatchx+0x12>
            if (*string == EOS)
   25a12:	2f00      	cmp	r7, #0
   25a14:	d0be      	beq.n	25994 <fnmatchx+0x10>
            if (*string == '/' && (flags & FNM_PATHNAME))
   25a16:	2f2f      	cmp	r7, #47	; 0x2f
   25a18:	d104      	bne.n	25a24 <fnmatchx+0xa0>
   25a1a:	07a1      	lsls	r1, r4, #30
   25a1c:	d4ba      	bmi.n	25994 <fnmatchx+0x10>
            ++string;
   25a1e:	3201      	adds	r2, #1
            break;
   25a20:	4645      	mov	r5, r8
   25a22:	e7c5      	b.n	259b0 <fnmatchx+0x2c>
            if (*string == '.' && (flags & FNM_PERIOD) &&
   25a24:	2f2e      	cmp	r7, #46	; 0x2e
   25a26:	d1fa      	bne.n	25a1e <fnmatchx+0x9a>
   25a28:	9b04      	ldr	r3, [sp, #16]
   25a2a:	2b00      	cmp	r3, #0
   25a2c:	d0f7      	beq.n	25a1e <fnmatchx+0x9a>
   25a2e:	4552      	cmp	r2, sl
   25a30:	d0b0      	beq.n	25994 <fnmatchx+0x10>
                (string == stringstart ||
   25a32:	07a3      	lsls	r3, r4, #30
   25a34:	d5f3      	bpl.n	25a1e <fnmatchx+0x9a>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
   25a36:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   25a3a:	2b2f      	cmp	r3, #47	; 0x2f
   25a3c:	d1ef      	bne.n	25a1e <fnmatchx+0x9a>
   25a3e:	e7a9      	b.n	25994 <fnmatchx+0x10>
            c = FOLDCASE(*pattern, flags);
   25a40:	7868      	ldrb	r0, [r5, #1]
                c = FOLDCASE(*++pattern, flags);
   25a42:	f7ff ff97 	bl	25974 <foldcase>
   25a46:	b2c1      	uxtb	r1, r0
            while (c == '*')
   25a48:	292a      	cmp	r1, #42	; 0x2a
   25a4a:	d018      	beq.n	25a7e <fnmatchx+0xfa>
            if (*string == '.' && (flags & FNM_PERIOD) &&
   25a4c:	2f2e      	cmp	r7, #46	; 0x2e
   25a4e:	d109      	bne.n	25a64 <fnmatchx+0xe0>
   25a50:	9b04      	ldr	r3, [sp, #16]
   25a52:	b13b      	cbz	r3, 25a64 <fnmatchx+0xe0>
   25a54:	4552      	cmp	r2, sl
   25a56:	d09d      	beq.n	25994 <fnmatchx+0x10>
                (string == stringstart ||
   25a58:	07a7      	lsls	r7, r4, #30
   25a5a:	d503      	bpl.n	25a64 <fnmatchx+0xe0>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
   25a5c:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   25a60:	2b2f      	cmp	r3, #47	; 0x2f
   25a62:	d097      	beq.n	25994 <fnmatchx+0x10>
            if (c == EOS) {
   25a64:	b979      	cbnz	r1, 25a86 <fnmatchx+0x102>
                if (flags & FNM_PATHNAME)
   25a66:	f014 0002 	ands.w	r0, r4, #2
   25a6a:	d094      	beq.n	25996 <fnmatchx+0x12>
                        0 : FNM_NOMATCH;
   25a6c:	06e6      	lsls	r6, r4, #27
   25a6e:	f100 80b7 	bmi.w	25be0 <fnmatchx+0x25c>
                        strchr(string, '/') == NULL ?
   25a72:	212f      	movs	r1, #47	; 0x2f
   25a74:	4610      	mov	r0, r2
   25a76:	f001 fdc9 	bl	2760c <strchr>
                        0 : FNM_NOMATCH;
   25a7a:	3800      	subs	r0, #0
   25a7c:	e7c6      	b.n	25a0c <fnmatchx+0x88>
                c = FOLDCASE(*++pattern, flags);
   25a7e:	4621      	mov	r1, r4
   25a80:	f818 0f01 	ldrb.w	r0, [r8, #1]!
   25a84:	e7dd      	b.n	25a42 <fnmatchx+0xbe>
            } else if (c == '/' && flags & FNM_PATHNAME) {
   25a86:	292f      	cmp	r1, #47	; 0x2f
   25a88:	d021      	beq.n	25ace <fnmatchx+0x14a>
   25a8a:	4616      	mov	r6, r2
    if (recursion-- == 0)
   25a8c:	9b02      	ldr	r3, [sp, #8]
                switch ((e = fnmatchx(pattern, string,
   25a8e:	f024 0904 	bic.w	r9, r4, #4
    if (recursion-- == 0)
   25a92:	1e5f      	subs	r7, r3, #1
                if (test == '/' && flags & FNM_PATHNAME)
   25a94:	f004 0a02 	and.w	sl, r4, #2
   25a98:	46b3      	mov	fp, r6
            while ((test = FOLDCASE(*string, flags)) != EOS) {
   25a9a:	4621      	mov	r1, r4
   25a9c:	f89b 0000 	ldrb.w	r0, [fp]
   25aa0:	f7ff ff68 	bl	25974 <foldcase>
   25aa4:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
   25aa8:	f106 0601 	add.w	r6, r6, #1
   25aac:	f43f af72 	beq.w	25994 <fnmatchx+0x10>
                switch ((e = fnmatchx(pattern, string,
   25ab0:	463b      	mov	r3, r7
   25ab2:	464a      	mov	r2, r9
   25ab4:	4659      	mov	r1, fp
   25ab6:	4640      	mov	r0, r8
   25ab8:	f7ff ff64 	bl	25984 <fnmatchx>
   25abc:	2801      	cmp	r0, #1
   25abe:	f47f af6a 	bne.w	25996 <fnmatchx+0x12>
                if (test == '/' && flags & FNM_PATHNAME)
   25ac2:	2d2f      	cmp	r5, #47	; 0x2f
   25ac4:	d1e8      	bne.n	25a98 <fnmatchx+0x114>
   25ac6:	f1ba 0f00 	cmp.w	sl, #0
   25aca:	d0e5      	beq.n	25a98 <fnmatchx+0x114>
   25acc:	e762      	b.n	25994 <fnmatchx+0x10>
            } else if (c == '/' && flags & FNM_PATHNAME) {
   25ace:	07a5      	lsls	r5, r4, #30
   25ad0:	d5db      	bpl.n	25a8a <fnmatchx+0x106>
                if ((string = strchr(string, '/')) == NULL)
   25ad2:	4610      	mov	r0, r2
   25ad4:	f001 fd9a 	bl	2760c <strchr>
   25ad8:	4602      	mov	r2, r0
   25ada:	2800      	cmp	r0, #0
   25adc:	d1a0      	bne.n	25a20 <fnmatchx+0x9c>
   25ade:	e759      	b.n	25994 <fnmatchx+0x10>
            if (*string == EOS)
   25ae0:	2f00      	cmp	r7, #0
   25ae2:	f43f af57 	beq.w	25994 <fnmatchx+0x10>
            if (*string == '/' && flags & FNM_PATHNAME)
   25ae6:	2f2f      	cmp	r7, #47	; 0x2f
   25ae8:	d102      	bne.n	25af0 <fnmatchx+0x16c>
   25aea:	07a0      	lsls	r0, r4, #30
   25aec:	f53f af52 	bmi.w	25994 <fnmatchx+0x10>
            if ((r = rangematch(pattern,
   25af0:	4621      	mov	r1, r4
   25af2:	4638      	mov	r0, r7
   25af4:	f7ff ff3e 	bl	25974 <foldcase>
   25af8:	9000      	str	r0, [sp, #0]
    if (pattern == NULL)
   25afa:	f1b8 0f00 	cmp.w	r8, #0
   25afe:	f43f af49 	beq.w	25994 <fnmatchx+0x10>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   25b02:	786b      	ldrb	r3, [r5, #1]
   25b04:	2b21      	cmp	r3, #33	; 0x21
   25b06:	d001      	beq.n	25b0c <fnmatchx+0x188>
   25b08:	2b5e      	cmp	r3, #94	; 0x5e
   25b0a:	d126      	bne.n	25b5a <fnmatchx+0x1d6>
        ++pattern;
   25b0c:	2301      	movs	r3, #1
   25b0e:	3502      	adds	r5, #2
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   25b10:	9301      	str	r3, [sp, #4]
    need = 1;
   25b12:	2301      	movs	r3, #1
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
   25b14:	f04f 0b00 	mov.w	fp, #0
        if (c == '\\' && !(flags & FNM_NOESCAPE))
   25b18:	ea04 0103 	and.w	r1, r4, r3
   25b1c:	9103      	str	r1, [sp, #12]
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
   25b1e:	462e      	mov	r6, r5
   25b20:	4621      	mov	r1, r4
   25b22:	f816 0b01 	ldrb.w	r0, [r6], #1
   25b26:	9305      	str	r3, [sp, #20]
   25b28:	f7ff ff24 	bl	25974 <foldcase>
   25b2c:	fa5f f980 	uxtb.w	r9, r0
   25b30:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   25b34:	9b05      	ldr	r3, [sp, #20]
   25b36:	d113      	bne.n	25b60 <fnmatchx+0x1dc>
   25b38:	bb2b      	cbnz	r3, 25b86 <fnmatchx+0x202>
    return ok == negate ? NULL : pattern;
   25b3a:	9b01      	ldr	r3, [sp, #4]
   25b3c:	455b      	cmp	r3, fp
   25b3e:	f43f af29 	beq.w	25994 <fnmatchx+0x10>
            if ((r = rangematch(pattern,
   25b42:	2e00      	cmp	r6, #0
   25b44:	f43f af26 	beq.w	25994 <fnmatchx+0x10>
            if (r == (void *)-1) {
   25b48:	1c71      	adds	r1, r6, #1
   25b4a:	d103      	bne.n	25b54 <fnmatchx+0x1d0>
                if (*string != '[')
   25b4c:	2f5b      	cmp	r7, #91	; 0x5b
   25b4e:	f47f af21 	bne.w	25994 <fnmatchx+0x10>
   25b52:	4646      	mov	r6, r8
            break;
   25b54:	46b0      	mov	r8, r6
            ++string;
   25b56:	3201      	adds	r2, #1
            break;
   25b58:	e762      	b.n	25a20 <fnmatchx+0x9c>
   25b5a:	4645      	mov	r5, r8
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   25b5c:	2300      	movs	r3, #0
   25b5e:	e7d7      	b.n	25b10 <fnmatchx+0x18c>
        if (c == '/')
   25b60:	f1b9 0f2f 	cmp.w	r9, #47	; 0x2f
   25b64:	d0f2      	beq.n	25b4c <fnmatchx+0x1c8>
        if (c == '\\' && !(flags & FNM_NOESCAPE))
   25b66:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
   25b6a:	d108      	bne.n	25b7e <fnmatchx+0x1fa>
   25b6c:	9b03      	ldr	r3, [sp, #12]
   25b6e:	b953      	cbnz	r3, 25b86 <fnmatchx+0x202>
            c = FOLDCASE(*pattern++, flags);
   25b70:	4621      	mov	r1, r4
   25b72:	7868      	ldrb	r0, [r5, #1]
   25b74:	f7ff fefe 	bl	25974 <foldcase>
   25b78:	1cae      	adds	r6, r5, #2
   25b7a:	fa5f f980 	uxtb.w	r9, r0
        if (c == EOS)
   25b7e:	f1b9 0f00 	cmp.w	r9, #0
   25b82:	f43f af07 	beq.w	25994 <fnmatchx+0x10>
        if (*pattern == '-' 
   25b86:	7833      	ldrb	r3, [r6, #0]
   25b88:	2b2d      	cmp	r3, #45	; 0x2d
   25b8a:	d120      	bne.n	25bce <fnmatchx+0x24a>
            && (c2 = FOLDCASE(*(pattern + 1), flags)) != EOS &&
   25b8c:	4621      	mov	r1, r4
   25b8e:	7870      	ldrb	r0, [r6, #1]
   25b90:	f7ff fef0 	bl	25974 <foldcase>
   25b94:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
   25b98:	d019      	beq.n	25bce <fnmatchx+0x24a>
   25b9a:	285d      	cmp	r0, #93	; 0x5d
   25b9c:	d017      	beq.n	25bce <fnmatchx+0x24a>
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
   25b9e:	285c      	cmp	r0, #92	; 0x5c
            pattern += 2;
   25ba0:	f106 0502 	add.w	r5, r6, #2
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
   25ba4:	d10a      	bne.n	25bbc <fnmatchx+0x238>
   25ba6:	9b03      	ldr	r3, [sp, #12]
   25ba8:	b943      	cbnz	r3, 25bbc <fnmatchx+0x238>
                c2 = FOLDCASE(*pattern++, flags);
   25baa:	78b0      	ldrb	r0, [r6, #2]
   25bac:	f7ff fee2 	bl	25974 <foldcase>
            if (c2 == EOS)
   25bb0:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
                c2 = FOLDCASE(*pattern++, flags);
   25bb4:	f106 0503 	add.w	r5, r6, #3
            if (c2 == EOS)
   25bb8:	f43f aeec 	beq.w	25994 <fnmatchx+0x10>
            if (c <= test && test <= c2)
   25bbc:	9b00      	ldr	r3, [sp, #0]
   25bbe:	454b      	cmp	r3, r9
   25bc0:	db03      	blt.n	25bca <fnmatchx+0x246>
                ok = 1;
   25bc2:	4283      	cmp	r3, r0
   25bc4:	bfd8      	it	le
   25bc6:	f04f 0b01 	movle.w	fp, #1
            ok = 1;
   25bca:	2300      	movs	r3, #0
   25bcc:	e7a7      	b.n	25b1e <fnmatchx+0x19a>
        } else if (c == test)
   25bce:	9b00      	ldr	r3, [sp, #0]
   25bd0:	4635      	mov	r5, r6
   25bd2:	454b      	cmp	r3, r9
   25bd4:	bf08      	it	eq
   25bd6:	f04f 0b01 	moveq.w	fp, #1
   25bda:	e7f6      	b.n	25bca <fnmatchx+0x246>
        return FNM_NORES;
   25bdc:	2003      	movs	r0, #3
   25bde:	e6da      	b.n	25996 <fnmatchx+0x12>
                return 0;
   25be0:	4608      	mov	r0, r1
   25be2:	e6d8      	b.n	25996 <fnmatchx+0x12>

00025be4 <fnmatch>:

int fnmatch(const char *pattern, const char *string, int flags)
{
    return fnmatchx(pattern, string, flags, 64);
   25be4:	2340      	movs	r3, #64	; 0x40
   25be6:	f7ff becd 	b.w	25984 <fnmatchx>

00025bea <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   25bea:	4770      	bx	lr

00025bec <nordicsemi_nrf53_init>:
	__asm__ volatile(
   25bec:	f04f 0320 	mov.w	r3, #32
   25bf0:	f3ef 8111 	mrs	r1, BASEPRI
   25bf4:	f383 8811 	msr	BASEPRI, r3
   25bf8:	f3bf 8f6f 	isb	sy
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   25bfc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   25c00:	2201      	movs	r2, #1
   25c02:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   25c06:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   25c0a:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
	__asm__ volatile(
   25c0e:	f381 8811 	msr	BASEPRI, r1
   25c12:	f3bf 8f6f 	isb	sy
}
   25c16:	2000      	movs	r0, #0
   25c18:	4770      	bx	lr

00025c1a <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   25c1a:	f001 bfd5 	b.w	27bc8 <SystemInit>

00025c1e <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void pm_power_state_set(struct pm_state_info info)
{
   25c1e:	b084      	sub	sp, #16
   25c20:	ab04      	add	r3, sp, #16
   25c22:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   25c26:	f89d 3004 	ldrb.w	r3, [sp, #4]
   25c2a:	2b06      	cmp	r3, #6
   25c2c:	d108      	bne.n	25c40 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   25c2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   25c32:	2201      	movs	r2, #1
   25c34:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   25c38:	f3bf 8f4f 	dsb	sy
        __WFE();
   25c3c:	bf20      	wfe
    while (true)
   25c3e:	e7fd      	b.n	25c3c <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   25c40:	b004      	add	sp, #16
   25c42:	4770      	bx	lr

00025c44 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   25c44:	b084      	sub	sp, #16
   25c46:	ab04      	add	r3, sp, #16
   25c48:	e903 0007 	stmdb	r3, {r0, r1, r2}
   25c4c:	2300      	movs	r3, #0
   25c4e:	f383 8811 	msr	BASEPRI, r3
   25c52:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   25c56:	b004      	add	sp, #16
   25c58:	4770      	bx	lr

00025c5a <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   25c5a:	2300      	movs	r3, #0
	list->head = NULL;
   25c5c:	e9c0 3300 	strd	r3, r3, [r0]
}
   25c60:	4770      	bx	lr

00025c62 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   25c62:	6803      	ldr	r3, [r0, #0]
   25c64:	b923      	cbnz	r3, 25c70 <log_list_add_tail+0xe>
		list->head = msg;
   25c66:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   25c68:	2300      	movs	r3, #0
	list->tail = msg;
   25c6a:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   25c6c:	600b      	str	r3, [r1, #0]
}
   25c6e:	4770      	bx	lr
		list->tail->next = msg;
   25c70:	6843      	ldr	r3, [r0, #4]
   25c72:	6019      	str	r1, [r3, #0]
   25c74:	e7f8      	b.n	25c68 <log_list_add_tail+0x6>

00025c76 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   25c76:	6800      	ldr	r0, [r0, #0]
   25c78:	4770      	bx	lr

00025c7a <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   25c7a:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   25c7c:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   25c7e:	b108      	cbz	r0, 25c84 <log_list_head_get+0xa>
		list->head = list->head->next;
   25c80:	6802      	ldr	r2, [r0, #0]
   25c82:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   25c84:	4770      	bx	lr

00025c86 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   25c86:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   25c88:	f7f9 f862 	bl	1ed50 <log_msg_chunk_alloc>

	if (msg != NULL) {
   25c8c:	b118      	cbz	r0, 25c96 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   25c8e:	2301      	movs	r3, #1
   25c90:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   25c92:	2300      	movs	r3, #0
   25c94:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   25c96:	bd08      	pop	{r3, pc}

00025c98 <default_get_timestamp>:
   25c98:	f7fb bee4 	b.w	21a64 <sys_clock_cycle_get_32>

00025c9c <dummy_timestamp>:
   25c9c:	2000      	movs	r0, #0
   25c9e:	4770      	bx	lr

00025ca0 <z_log_get_s_mask>:
{
   25ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
   25ca2:	4605      	mov	r5, r0
	uint32_t mask = 0U;
   25ca4:	2000      	movs	r0, #0
				mask |= BIT(arg);
   25ca6:	2701      	movs	r7, #1
	uint32_t arg = 0U;
   25ca8:	4603      	mov	r3, r0
	bool arm = false;
   25caa:	4602      	mov	r2, r0
	while ((curr = *str++) && arg < nargs) {
   25cac:	f815 4b01 	ldrb.w	r4, [r5], #1
   25cb0:	b10c      	cbz	r4, 25cb6 <z_log_get_s_mask+0x16>
   25cb2:	428b      	cmp	r3, r1
   25cb4:	d300      	bcc.n	25cb8 <z_log_get_s_mask+0x18>
}
   25cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   25cb8:	2c25      	cmp	r4, #37	; 0x25
   25cba:	d102      	bne.n	25cc2 <z_log_get_s_mask+0x22>
			arm = !arm;
   25cbc:	f082 0201 	eor.w	r2, r2, #1
   25cc0:	e7f4      	b.n	25cac <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   25cc2:	2a00      	cmp	r2, #0
   25cc4:	d0f2      	beq.n	25cac <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   25cc6:	f044 0620 	orr.w	r6, r4, #32
   25cca:	3e61      	subs	r6, #97	; 0x61
   25ccc:	2e19      	cmp	r6, #25
   25cce:	d8ed      	bhi.n	25cac <z_log_get_s_mask+0xc>
			if (curr == 's') {
   25cd0:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   25cd2:	bf04      	itt	eq
   25cd4:	fa07 f203 	lsleq.w	r2, r7, r3
   25cd8:	4310      	orreq	r0, r2
			arg++;
   25cda:	3301      	adds	r3, #1
			arm = false;
   25cdc:	2200      	movs	r2, #0
   25cde:	e7e5      	b.n	25cac <z_log_get_s_mask+0xc>

00025ce0 <log_backend_disable>:
	backend->cb->active = false;
   25ce0:	2100      	movs	r1, #0
   25ce2:	6843      	ldr	r3, [r0, #4]
   25ce4:	7159      	strb	r1, [r3, #5]
	backend_filter_set(backend, LOG_LEVEL_NONE);
   25ce6:	f7f8 bdd7 	b.w	1e898 <backend_filter_set>

00025cea <log_0>:
{
   25cea:	b538      	push	{r3, r4, r5, lr}
   25cec:	4605      	mov	r5, r0
   25cee:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   25cf0:	f7ff ffc9 	bl	25c86 <z_log_msg_std_alloc>

	if (msg != NULL) {
   25cf4:	b128      	cbz	r0, 25d02 <log_0+0x18>
		msg_finalize(msg, src_level);
   25cf6:	4621      	mov	r1, r4
		msg->str = str;
   25cf8:	6105      	str	r5, [r0, #16]
}
   25cfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   25cfe:	f7f8 bf49 	b.w	1eb94 <msg_finalize>
}
   25d02:	bd38      	pop	{r3, r4, r5, pc}

00025d04 <log_1>:
{
   25d04:	b570      	push	{r4, r5, r6, lr}
   25d06:	4606      	mov	r6, r0
   25d08:	460d      	mov	r5, r1
   25d0a:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   25d0c:	f7ff ffbb 	bl	25c86 <z_log_msg_std_alloc>

	if (msg != NULL) {
   25d10:	b158      	cbz	r0, 25d2a <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   25d12:	2101      	movs	r1, #1
   25d14:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   25d16:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   25d18:	f361 1207 	bfi	r2, r1, #4, #4
   25d1c:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
   25d1e:	4621      	mov	r1, r4
		msg->payload.single.args[0] = arg1;
   25d20:	6145      	str	r5, [r0, #20]
}
   25d22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   25d26:	f7f8 bf35 	b.w	1eb94 <msg_finalize>
}
   25d2a:	bd70      	pop	{r4, r5, r6, pc}

00025d2c <log_2>:
{
   25d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25d30:	4680      	mov	r8, r0
   25d32:	460f      	mov	r7, r1
   25d34:	4616      	mov	r6, r2
   25d36:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   25d38:	f7ff ffa5 	bl	25c86 <z_log_msg_std_alloc>

	if (msg != NULL) {
   25d3c:	b168      	cbz	r0, 25d5a <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   25d3e:	2202      	movs	r2, #2
   25d40:	7a43      	ldrb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   25d42:	4629      	mov	r1, r5
   25d44:	f362 1307 	bfi	r3, r2, #4, #4
   25d48:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   25d4a:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->str = str;
   25d4e:	f8c0 8010 	str.w	r8, [r0, #16]
}
   25d52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   25d56:	f7f8 bf1d 	b.w	1eb94 <msg_finalize>
}
   25d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025d5e <log_3>:
{
   25d5e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25d62:	4680      	mov	r8, r0
   25d64:	460f      	mov	r7, r1
   25d66:	4616      	mov	r6, r2
   25d68:	461d      	mov	r5, r3
   25d6a:	f8bd 9020 	ldrh.w	r9, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   25d6e:	f7ff ff8a 	bl	25c86 <z_log_msg_std_alloc>

	if (msg != NULL) {
   25d72:	b170      	cbz	r0, 25d92 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   25d74:	2203      	movs	r2, #3
   25d76:	7a43      	ldrb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   25d78:	4649      	mov	r1, r9
   25d7a:	f362 1307 	bfi	r3, r2, #4, #4
   25d7e:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   25d80:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->str = str;
   25d84:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->payload.single.args[2] = arg3;
   25d88:	61c5      	str	r5, [r0, #28]
}
   25d8a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   25d8e:	f7f8 bf01 	b.w	1eb94 <msg_finalize>
}
   25d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00025d96 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   25d96:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25d9a:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   25d9c:	8903      	ldrh	r3, [r0, #8]
{
   25d9e:	460e      	mov	r6, r1
   25da0:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   25da2:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   25da6:	42a2      	cmp	r2, r4
{
   25da8:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   25dac:	d803      	bhi.n	25db6 <log_msg_hexdump_data_op+0x20>
		*length = 0;
   25dae:	2300      	movs	r3, #0
   25db0:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   25db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   25db6:	680b      	ldr	r3, [r1, #0]
   25db8:	4423      	add	r3, r4
   25dba:	4293      	cmp	r3, r2
		*length = available_len - offset;
   25dbc:	bf84      	itt	hi
   25dbe:	1b13      	subhi	r3, r2, r4
   25dc0:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   25dc2:	2a0c      	cmp	r2, #12
	req_len = *length;
   25dc4:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   25dc8:	d92a      	bls.n	25e20 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   25dca:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   25dcc:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   25dd0:	d82d      	bhi.n	25e2e <log_msg_hexdump_data_op+0x98>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   25dd2:	2208      	movs	r2, #8
		head_data = msg->payload.ext.data.bytes;
   25dd4:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   25dd6:	454a      	cmp	r2, r9
   25dd8:	bf28      	it	cs
   25dda:	464a      	movcs	r2, r9
   25ddc:	4420      	add	r0, r4
   25dde:	4615      	mov	r5, r2
		if (put_op) {
   25de0:	b317      	cbz	r7, 25e28 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
   25de2:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   25de4:	f001 fc72 	bl	276cc <memcpy>
		req_len -= cpy_len;
   25de8:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   25dec:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   25dee:	f1b9 0f00 	cmp.w	r9, #0
   25df2:	d0de      	beq.n	25db2 <log_msg_hexdump_data_op+0x1c>
   25df4:	f1b8 0f00 	cmp.w	r8, #0
   25df8:	d0db      	beq.n	25db2 <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   25dfa:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   25dfe:	454d      	cmp	r5, r9
   25e00:	bf28      	it	cs
   25e02:	464d      	movcs	r5, r9
		if (put_op) {
   25e04:	1d20      	adds	r0, r4, #4
			(void)memcpy(&cont->payload.bytes[offset],
   25e06:	462a      	mov	r2, r5
   25e08:	4440      	add	r0, r8
		if (put_op) {
   25e0a:	b1bf      	cbz	r7, 25e3c <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
   25e0c:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   25e0e:	f001 fc5d 	bl	276cc <memcpy>
		offset = 0;
   25e12:	2400      	movs	r4, #0
		cont = cont->next;
   25e14:	f8d8 8000 	ldr.w	r8, [r8]
		req_len -= cpy_len;
   25e18:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   25e1c:	442e      	add	r6, r5
   25e1e:	e7e6      	b.n	25dee <log_msg_hexdump_data_op+0x58>
	struct log_msg_cont *cont = NULL;
   25e20:	f04f 0800 	mov.w	r8, #0
		head_data = msg->payload.single.bytes;
   25e24:	3014      	adds	r0, #20
	if (offset < chunk_len) {
   25e26:	e7d6      	b.n	25dd6 <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
   25e28:	4601      	mov	r1, r0
   25e2a:	4630      	mov	r0, r6
   25e2c:	e7da      	b.n	25de4 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   25e2e:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   25e30:	2c1b      	cmp	r4, #27
   25e32:	d9dc      	bls.n	25dee <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   25e34:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   25e38:	3c1c      	subs	r4, #28
   25e3a:	e7f9      	b.n	25e30 <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
   25e3c:	4601      	mov	r1, r0
   25e3e:	4630      	mov	r0, r6
   25e40:	e7e5      	b.n	25e0e <log_msg_hexdump_data_op+0x78>

00025e42 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   25e42:	3004      	adds	r0, #4
   25e44:	e8d0 3fef 	ldaex	r3, [r0]
   25e48:	3301      	adds	r3, #1
   25e4a:	e8c0 3fe2 	stlex	r2, r3, [r0]
   25e4e:	2a00      	cmp	r2, #0
   25e50:	d1f8      	bne.n	25e44 <log_msg_get+0x2>
}
   25e52:	4770      	bx	lr

00025e54 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   25e54:	7a40      	ldrb	r0, [r0, #9]
}
   25e56:	0900      	lsrs	r0, r0, #4
   25e58:	4770      	bx	lr

00025e5a <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   25e5a:	7a43      	ldrb	r3, [r0, #9]
   25e5c:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   25e60:	ea4f 1213 	mov.w	r2, r3, lsr #4
   25e64:	d216      	bcs.n	25e94 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   25e66:	2a03      	cmp	r2, #3
   25e68:	d803      	bhi.n	25e72 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   25e6a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   25e6e:	6948      	ldr	r0, [r1, #20]
   25e70:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   25e72:	2901      	cmp	r1, #1
   25e74:	d803      	bhi.n	25e7e <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   25e76:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   25e7a:	6988      	ldr	r0, [r1, #24]
   25e7c:	4770      	bx	lr
	cont = msg->payload.ext.next;
   25e7e:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   25e80:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   25e82:	2906      	cmp	r1, #6
   25e84:	d803      	bhi.n	25e8e <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   25e86:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   25e8a:	6848      	ldr	r0, [r1, #4]
   25e8c:	4770      	bx	lr
		cont = cont->next;
   25e8e:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   25e90:	3907      	subs	r1, #7
		cont = cont->next;
   25e92:	e7f6      	b.n	25e82 <log_msg_arg_get+0x28>
		return 0;
   25e94:	2000      	movs	r0, #0
}
   25e96:	4770      	bx	lr

00025e98 <log_msg_put>:
{
   25e98:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   25e9a:	1d02      	adds	r2, r0, #4
   25e9c:	e8d2 1fef 	ldaex	r1, [r2]
   25ea0:	3901      	subs	r1, #1
   25ea2:	e8c2 1fec 	stlex	ip, r1, [r2]
   25ea6:	f1bc 0f00 	cmp.w	ip, #0
   25eaa:	d1f7      	bne.n	25e9c <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   25eac:	685b      	ldr	r3, [r3, #4]
   25eae:	b90b      	cbnz	r3, 25eb4 <log_msg_put+0x1c>
		msg_free(msg);
   25eb0:	f7f8 bf62 	b.w	1ed78 <msg_free>
}
   25eb4:	4770      	bx	lr

00025eb6 <log_msg_str_get>:
}
   25eb6:	6900      	ldr	r0, [r0, #16]
   25eb8:	4770      	bx	lr

00025eba <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   25eba:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   25ebc:	2400      	movs	r4, #0
   25ebe:	9400      	str	r4, [sp, #0]
   25ec0:	f7ff ff69 	bl	25d96 <log_msg_hexdump_data_op>
}
   25ec4:	b002      	add	sp, #8
   25ec6:	bd10      	pop	{r4, pc}

00025ec8 <buffer_write>:
{
   25ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25eca:	4606      	mov	r6, r0
   25ecc:	460d      	mov	r5, r1
   25ece:	4614      	mov	r4, r2
   25ed0:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   25ed2:	4621      	mov	r1, r4
   25ed4:	4628      	mov	r0, r5
   25ed6:	463a      	mov	r2, r7
   25ed8:	47b0      	blx	r6
	} while (len != 0);
   25eda:	1a24      	subs	r4, r4, r0
		buf += processed;
   25edc:	4405      	add	r5, r0
	} while (len != 0);
   25ede:	d1f8      	bne.n	25ed2 <buffer_write+0xa>
}
   25ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00025ee2 <std_print>:
{
   25ee2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25ee6:	b08e      	sub	sp, #56	; 0x38
   25ee8:	af0e      	add	r7, sp, #56	; 0x38
   25eea:	4680      	mov	r8, r0
   25eec:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   25eee:	f7ff ffe2 	bl	25eb6 <log_msg_str_get>
   25ef2:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   25ef4:	4640      	mov	r0, r8
   25ef6:	f7ff ffad 	bl	25e54 <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   25efa:	f04f 0900 	mov.w	r9, #0
	uint32_t nargs = log_msg_nargs_get(msg);
   25efe:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   25f00:	0083      	lsls	r3, r0, #2
   25f02:	3307      	adds	r3, #7
   25f04:	f023 0307 	bic.w	r3, r3, #7
   25f08:	ebad 0d03 	sub.w	sp, sp, r3
   25f0c:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   25f0e:	45d1      	cmp	r9, sl
   25f10:	d116      	bne.n	25f40 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   25f12:	4640      	mov	r0, r8
   25f14:	f7ff ff9e 	bl	25e54 <log_msg_nargs_get>
   25f18:	280f      	cmp	r0, #15
   25f1a:	d81e      	bhi.n	25f5a <std_print+0x78>
   25f1c:	e8df f010 	tbh	[pc, r0, lsl #1]
   25f20:	00200019 	.word	0x00200019
   25f24:	002d0026 	.word	0x002d0026
   25f28:	00410036 	.word	0x00410036
   25f2c:	005d004e 	.word	0x005d004e
   25f30:	0081006e 	.word	0x0081006e
   25f34:	00ad0096 	.word	0x00ad0096
   25f38:	00e100c6 	.word	0x00e100c6
   25f3c:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   25f40:	4649      	mov	r1, r9
   25f42:	4640      	mov	r0, r8
   25f44:	f7ff ff89 	bl	25e5a <log_msg_arg_get>
   25f48:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   25f4c:	f109 0901 	add.w	r9, r9, #1
   25f50:	e7dd      	b.n	25f0e <std_print+0x2c>
		print_formatted(output, str);
   25f52:	4631      	mov	r1, r6
   25f54:	4628      	mov	r0, r5
   25f56:	f7f8 ff4d 	bl	1edf4 <print_formatted>
}
   25f5a:	46bd      	mov	sp, r7
   25f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   25f60:	4631      	mov	r1, r6
   25f62:	4628      	mov	r0, r5
   25f64:	6822      	ldr	r2, [r4, #0]
   25f66:	f7f8 ff45 	bl	1edf4 <print_formatted>
		break;
   25f6a:	e7f6      	b.n	25f5a <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
   25f6c:	4631      	mov	r1, r6
   25f6e:	e9d4 2300 	ldrd	r2, r3, [r4]
   25f72:	4628      	mov	r0, r5
   25f74:	f7f8 ff3e 	bl	1edf4 <print_formatted>
		break;
   25f78:	e7ef      	b.n	25f5a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
   25f7a:	68a3      	ldr	r3, [r4, #8]
   25f7c:	4631      	mov	r1, r6
   25f7e:	9300      	str	r3, [sp, #0]
   25f80:	4628      	mov	r0, r5
   25f82:	e9d4 2300 	ldrd	r2, r3, [r4]
   25f86:	f7f8 ff35 	bl	1edf4 <print_formatted>
		break;
   25f8a:	e7e6      	b.n	25f5a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   25f8c:	68e3      	ldr	r3, [r4, #12]
   25f8e:	4631      	mov	r1, r6
   25f90:	9301      	str	r3, [sp, #4]
   25f92:	68a3      	ldr	r3, [r4, #8]
   25f94:	4628      	mov	r0, r5
   25f96:	9300      	str	r3, [sp, #0]
   25f98:	e9d4 2300 	ldrd	r2, r3, [r4]
   25f9c:	f7f8 ff2a 	bl	1edf4 <print_formatted>
		break;
   25fa0:	e7db      	b.n	25f5a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   25fa2:	6923      	ldr	r3, [r4, #16]
   25fa4:	4631      	mov	r1, r6
   25fa6:	9302      	str	r3, [sp, #8]
   25fa8:	68e3      	ldr	r3, [r4, #12]
   25faa:	4628      	mov	r0, r5
   25fac:	9301      	str	r3, [sp, #4]
   25fae:	68a3      	ldr	r3, [r4, #8]
   25fb0:	9300      	str	r3, [sp, #0]
   25fb2:	e9d4 2300 	ldrd	r2, r3, [r4]
   25fb6:	f7f8 ff1d 	bl	1edf4 <print_formatted>
		break;
   25fba:	e7ce      	b.n	25f5a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   25fbc:	6963      	ldr	r3, [r4, #20]
   25fbe:	4631      	mov	r1, r6
   25fc0:	9303      	str	r3, [sp, #12]
   25fc2:	6923      	ldr	r3, [r4, #16]
   25fc4:	4628      	mov	r0, r5
   25fc6:	9302      	str	r3, [sp, #8]
   25fc8:	68e3      	ldr	r3, [r4, #12]
   25fca:	9301      	str	r3, [sp, #4]
   25fcc:	68a3      	ldr	r3, [r4, #8]
   25fce:	9300      	str	r3, [sp, #0]
   25fd0:	e9d4 2300 	ldrd	r2, r3, [r4]
   25fd4:	f7f8 ff0e 	bl	1edf4 <print_formatted>
		break;
   25fd8:	e7bf      	b.n	25f5a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   25fda:	69a3      	ldr	r3, [r4, #24]
   25fdc:	4631      	mov	r1, r6
   25fde:	9304      	str	r3, [sp, #16]
   25fe0:	6963      	ldr	r3, [r4, #20]
   25fe2:	4628      	mov	r0, r5
   25fe4:	9303      	str	r3, [sp, #12]
   25fe6:	6923      	ldr	r3, [r4, #16]
   25fe8:	9302      	str	r3, [sp, #8]
   25fea:	68e3      	ldr	r3, [r4, #12]
   25fec:	9301      	str	r3, [sp, #4]
   25fee:	68a3      	ldr	r3, [r4, #8]
   25ff0:	9300      	str	r3, [sp, #0]
   25ff2:	e9d4 2300 	ldrd	r2, r3, [r4]
   25ff6:	f7f8 fefd 	bl	1edf4 <print_formatted>
		break;
   25ffa:	e7ae      	b.n	25f5a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   25ffc:	69e3      	ldr	r3, [r4, #28]
   25ffe:	4631      	mov	r1, r6
   26000:	9305      	str	r3, [sp, #20]
   26002:	69a3      	ldr	r3, [r4, #24]
   26004:	4628      	mov	r0, r5
   26006:	9304      	str	r3, [sp, #16]
   26008:	6963      	ldr	r3, [r4, #20]
   2600a:	9303      	str	r3, [sp, #12]
   2600c:	6923      	ldr	r3, [r4, #16]
   2600e:	9302      	str	r3, [sp, #8]
   26010:	68e3      	ldr	r3, [r4, #12]
   26012:	9301      	str	r3, [sp, #4]
   26014:	68a3      	ldr	r3, [r4, #8]
   26016:	9300      	str	r3, [sp, #0]
   26018:	e9d4 2300 	ldrd	r2, r3, [r4]
   2601c:	f7f8 feea 	bl	1edf4 <print_formatted>
		break;
   26020:	e79b      	b.n	25f5a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   26022:	6a23      	ldr	r3, [r4, #32]
   26024:	4631      	mov	r1, r6
   26026:	9306      	str	r3, [sp, #24]
   26028:	69e3      	ldr	r3, [r4, #28]
   2602a:	4628      	mov	r0, r5
   2602c:	9305      	str	r3, [sp, #20]
   2602e:	69a3      	ldr	r3, [r4, #24]
   26030:	9304      	str	r3, [sp, #16]
   26032:	6963      	ldr	r3, [r4, #20]
   26034:	9303      	str	r3, [sp, #12]
   26036:	6923      	ldr	r3, [r4, #16]
   26038:	9302      	str	r3, [sp, #8]
   2603a:	68e3      	ldr	r3, [r4, #12]
   2603c:	9301      	str	r3, [sp, #4]
   2603e:	68a3      	ldr	r3, [r4, #8]
   26040:	9300      	str	r3, [sp, #0]
   26042:	e9d4 2300 	ldrd	r2, r3, [r4]
   26046:	f7f8 fed5 	bl	1edf4 <print_formatted>
		break;
   2604a:	e786      	b.n	25f5a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2604c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2604e:	4631      	mov	r1, r6
   26050:	9307      	str	r3, [sp, #28]
   26052:	6a23      	ldr	r3, [r4, #32]
   26054:	4628      	mov	r0, r5
   26056:	9306      	str	r3, [sp, #24]
   26058:	69e3      	ldr	r3, [r4, #28]
   2605a:	9305      	str	r3, [sp, #20]
   2605c:	69a3      	ldr	r3, [r4, #24]
   2605e:	9304      	str	r3, [sp, #16]
   26060:	6963      	ldr	r3, [r4, #20]
   26062:	9303      	str	r3, [sp, #12]
   26064:	6923      	ldr	r3, [r4, #16]
   26066:	9302      	str	r3, [sp, #8]
   26068:	68e3      	ldr	r3, [r4, #12]
   2606a:	9301      	str	r3, [sp, #4]
   2606c:	68a3      	ldr	r3, [r4, #8]
   2606e:	9300      	str	r3, [sp, #0]
   26070:	e9d4 2300 	ldrd	r2, r3, [r4]
   26074:	f7f8 febe 	bl	1edf4 <print_formatted>
		break;
   26078:	e76f      	b.n	25f5a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2607a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2607c:	4631      	mov	r1, r6
   2607e:	9308      	str	r3, [sp, #32]
   26080:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26082:	4628      	mov	r0, r5
   26084:	9307      	str	r3, [sp, #28]
   26086:	6a23      	ldr	r3, [r4, #32]
   26088:	9306      	str	r3, [sp, #24]
   2608a:	69e3      	ldr	r3, [r4, #28]
   2608c:	9305      	str	r3, [sp, #20]
   2608e:	69a3      	ldr	r3, [r4, #24]
   26090:	9304      	str	r3, [sp, #16]
   26092:	6963      	ldr	r3, [r4, #20]
   26094:	9303      	str	r3, [sp, #12]
   26096:	6923      	ldr	r3, [r4, #16]
   26098:	9302      	str	r3, [sp, #8]
   2609a:	68e3      	ldr	r3, [r4, #12]
   2609c:	9301      	str	r3, [sp, #4]
   2609e:	68a3      	ldr	r3, [r4, #8]
   260a0:	9300      	str	r3, [sp, #0]
   260a2:	e9d4 2300 	ldrd	r2, r3, [r4]
   260a6:	f7f8 fea5 	bl	1edf4 <print_formatted>
		break;
   260aa:	e756      	b.n	25f5a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   260ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   260ae:	4631      	mov	r1, r6
   260b0:	9309      	str	r3, [sp, #36]	; 0x24
   260b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   260b4:	4628      	mov	r0, r5
   260b6:	9308      	str	r3, [sp, #32]
   260b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   260ba:	9307      	str	r3, [sp, #28]
   260bc:	6a23      	ldr	r3, [r4, #32]
   260be:	9306      	str	r3, [sp, #24]
   260c0:	69e3      	ldr	r3, [r4, #28]
   260c2:	9305      	str	r3, [sp, #20]
   260c4:	69a3      	ldr	r3, [r4, #24]
   260c6:	9304      	str	r3, [sp, #16]
   260c8:	6963      	ldr	r3, [r4, #20]
   260ca:	9303      	str	r3, [sp, #12]
   260cc:	6923      	ldr	r3, [r4, #16]
   260ce:	9302      	str	r3, [sp, #8]
   260d0:	68e3      	ldr	r3, [r4, #12]
   260d2:	9301      	str	r3, [sp, #4]
   260d4:	68a3      	ldr	r3, [r4, #8]
   260d6:	9300      	str	r3, [sp, #0]
   260d8:	e9d4 2300 	ldrd	r2, r3, [r4]
   260dc:	f7f8 fe8a 	bl	1edf4 <print_formatted>
		break;
   260e0:	e73b      	b.n	25f5a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   260e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   260e4:	4631      	mov	r1, r6
   260e6:	930a      	str	r3, [sp, #40]	; 0x28
   260e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   260ea:	4628      	mov	r0, r5
   260ec:	9309      	str	r3, [sp, #36]	; 0x24
   260ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   260f0:	9308      	str	r3, [sp, #32]
   260f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   260f4:	9307      	str	r3, [sp, #28]
   260f6:	6a23      	ldr	r3, [r4, #32]
   260f8:	9306      	str	r3, [sp, #24]
   260fa:	69e3      	ldr	r3, [r4, #28]
   260fc:	9305      	str	r3, [sp, #20]
   260fe:	69a3      	ldr	r3, [r4, #24]
   26100:	9304      	str	r3, [sp, #16]
   26102:	6963      	ldr	r3, [r4, #20]
   26104:	9303      	str	r3, [sp, #12]
   26106:	6923      	ldr	r3, [r4, #16]
   26108:	9302      	str	r3, [sp, #8]
   2610a:	68e3      	ldr	r3, [r4, #12]
   2610c:	9301      	str	r3, [sp, #4]
   2610e:	68a3      	ldr	r3, [r4, #8]
   26110:	9300      	str	r3, [sp, #0]
   26112:	e9d4 2300 	ldrd	r2, r3, [r4]
   26116:	f7f8 fe6d 	bl	1edf4 <print_formatted>
		break;
   2611a:	e71e      	b.n	25f5a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2611c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2611e:	4631      	mov	r1, r6
   26120:	930b      	str	r3, [sp, #44]	; 0x2c
   26122:	6b23      	ldr	r3, [r4, #48]	; 0x30
   26124:	4628      	mov	r0, r5
   26126:	930a      	str	r3, [sp, #40]	; 0x28
   26128:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2612a:	9309      	str	r3, [sp, #36]	; 0x24
   2612c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2612e:	9308      	str	r3, [sp, #32]
   26130:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26132:	9307      	str	r3, [sp, #28]
   26134:	6a23      	ldr	r3, [r4, #32]
   26136:	9306      	str	r3, [sp, #24]
   26138:	69e3      	ldr	r3, [r4, #28]
   2613a:	9305      	str	r3, [sp, #20]
   2613c:	69a3      	ldr	r3, [r4, #24]
   2613e:	9304      	str	r3, [sp, #16]
   26140:	6963      	ldr	r3, [r4, #20]
   26142:	9303      	str	r3, [sp, #12]
   26144:	6923      	ldr	r3, [r4, #16]
   26146:	9302      	str	r3, [sp, #8]
   26148:	68e3      	ldr	r3, [r4, #12]
   2614a:	9301      	str	r3, [sp, #4]
   2614c:	68a3      	ldr	r3, [r4, #8]
   2614e:	9300      	str	r3, [sp, #0]
   26150:	e9d4 2300 	ldrd	r2, r3, [r4]
   26154:	f7f8 fe4e 	bl	1edf4 <print_formatted>
		break;
   26158:	e6ff      	b.n	25f5a <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2615a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2615c:	4631      	mov	r1, r6
   2615e:	930c      	str	r3, [sp, #48]	; 0x30
   26160:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26162:	4628      	mov	r0, r5
   26164:	930b      	str	r3, [sp, #44]	; 0x2c
   26166:	6b23      	ldr	r3, [r4, #48]	; 0x30
   26168:	930a      	str	r3, [sp, #40]	; 0x28
   2616a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2616c:	9309      	str	r3, [sp, #36]	; 0x24
   2616e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   26170:	9308      	str	r3, [sp, #32]
   26172:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26174:	9307      	str	r3, [sp, #28]
   26176:	6a23      	ldr	r3, [r4, #32]
   26178:	9306      	str	r3, [sp, #24]
   2617a:	69e3      	ldr	r3, [r4, #28]
   2617c:	9305      	str	r3, [sp, #20]
   2617e:	69a3      	ldr	r3, [r4, #24]
   26180:	9304      	str	r3, [sp, #16]
   26182:	6963      	ldr	r3, [r4, #20]
   26184:	9303      	str	r3, [sp, #12]
   26186:	6923      	ldr	r3, [r4, #16]
   26188:	9302      	str	r3, [sp, #8]
   2618a:	68e3      	ldr	r3, [r4, #12]
   2618c:	9301      	str	r3, [sp, #4]
   2618e:	68a3      	ldr	r3, [r4, #8]
   26190:	9300      	str	r3, [sp, #0]
   26192:	e9d4 2300 	ldrd	r2, r3, [r4]
   26196:	f7f8 fe2d 	bl	1edf4 <print_formatted>
}
   2619a:	e6de      	b.n	25f5a <std_print+0x78>

0002619c <log_output_flush>:
		     output->control_block->offset,
   2619c:	6842      	ldr	r2, [r0, #4]
{
   2619e:	b510      	push	{r4, lr}
	buffer_write(output->func, output->buf,
   261a0:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   261a4:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   261a6:	6881      	ldr	r1, [r0, #8]
   261a8:	6800      	ldr	r0, [r0, #0]
   261aa:	f7ff fe8d 	bl	25ec8 <buffer_write>
	output->control_block->offset = 0;
   261ae:	2200      	movs	r2, #0
   261b0:	6863      	ldr	r3, [r4, #4]
   261b2:	601a      	str	r2, [r3, #0]
}
   261b4:	bd10      	pop	{r4, pc}

000261b6 <out_func>:
{
   261b6:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   261b8:	684b      	ldr	r3, [r1, #4]
{
   261ba:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   261bc:	681a      	ldr	r2, [r3, #0]
   261be:	68cb      	ldr	r3, [r1, #12]
{
   261c0:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   261c2:	429a      	cmp	r2, r3
   261c4:	d102      	bne.n	261cc <out_func+0x16>
		log_output_flush(out_ctx);
   261c6:	4608      	mov	r0, r1
   261c8:	f7ff ffe8 	bl	2619c <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   261cc:	6863      	ldr	r3, [r4, #4]
   261ce:	e8d3 2fef 	ldaex	r2, [r3]
   261d2:	1c51      	adds	r1, r2, #1
   261d4:	e8c3 1fe0 	stlex	r0, r1, [r3]
   261d8:	2800      	cmp	r0, #0
   261da:	d1f8      	bne.n	261ce <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
   261dc:	68a3      	ldr	r3, [r4, #8]
}
   261de:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
   261e0:	549d      	strb	r5, [r3, r2]
}
   261e2:	bd38      	pop	{r3, r4, r5, pc}

000261e4 <log_halt>:
   261e4:	2000      	movs	r0, #0
   261e6:	684b      	ldr	r3, [r1, #4]
   261e8:	7158      	strb	r0, [r3, #5]
}
   261ea:	4770      	bx	lr

000261ec <log_go>:
	backend->cb->active = true;
   261ec:	2201      	movs	r2, #1
   261ee:	684b      	ldr	r3, [r1, #4]
}
   261f0:	2000      	movs	r0, #0
   261f2:	715a      	strb	r2, [r3, #5]
   261f4:	4770      	bx	lr

000261f6 <cmd_log_self_halt>:
{
   261f6:	b510      	push	{r4, lr}
   261f8:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
   261fa:	f7f9 f90b 	bl	1f414 <shell_state_precheck>
   261fe:	b120      	cbz	r0, 2620a <cmd_log_self_halt+0x14>
	backend->cb->active = false;
   26200:	2200      	movs	r2, #0
	return log_halt(shell, shell->log_backend->backend, argc, argv);
   26202:	69e3      	ldr	r3, [r4, #28]
	log_backend_deactivate(backend);
   26204:	681b      	ldr	r3, [r3, #0]
   26206:	685b      	ldr	r3, [r3, #4]
   26208:	715a      	strb	r2, [r3, #5]
}
   2620a:	2000      	movs	r0, #0
   2620c:	bd10      	pop	{r4, pc}

0002620e <cmd_log_self_go>:
{
   2620e:	b510      	push	{r4, lr}
   26210:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
   26212:	f7f9 f8ff 	bl	1f414 <shell_state_precheck>
   26216:	b120      	cbz	r0, 26222 <cmd_log_self_go+0x14>
	backend->cb->active = true;
   26218:	2201      	movs	r2, #1
	return log_go(shell, shell->log_backend->backend, argc, argv);
   2621a:	69e3      	ldr	r3, [r4, #28]
	log_backend_activate(backend, backend->cb->ctx);
   2621c:	681b      	ldr	r3, [r3, #0]
   2621e:	685b      	ldr	r3, [r3, #4]
   26220:	715a      	strb	r2, [r3, #5]
}
   26222:	2000      	movs	r0, #0
   26224:	bd10      	pop	{r4, pc}

00026226 <cmd_log_self_status>:
{
   26226:	b570      	push	{r4, r5, r6, lr}
   26228:	4604      	mov	r4, r0
   2622a:	460d      	mov	r5, r1
   2622c:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   2622e:	f7f9 f8f1 	bl	1f414 <shell_state_precheck>
   26232:	b130      	cbz	r0, 26242 <cmd_log_self_status+0x1c>
	log_status(shell, shell->log_backend->backend, argc, argv);
   26234:	69e1      	ldr	r1, [r4, #28]
   26236:	4633      	mov	r3, r6
   26238:	462a      	mov	r2, r5
   2623a:	4620      	mov	r0, r4
   2623c:	6809      	ldr	r1, [r1, #0]
   2623e:	f7f9 f821 	bl	1f284 <log_status>
}
   26242:	2000      	movs	r0, #0
   26244:	bd70      	pop	{r4, r5, r6, pc}

00026246 <cmd_log_self_enable>:
{
   26246:	b570      	push	{r4, r5, r6, lr}
   26248:	4604      	mov	r4, r0
   2624a:	460d      	mov	r5, r1
   2624c:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   2624e:	f7f9 f8e1 	bl	1f414 <shell_state_precheck>
   26252:	b140      	cbz	r0, 26266 <cmd_log_self_enable+0x20>
	return log_enable(shell, shell->log_backend->backend, argc, argv);
   26254:	69e1      	ldr	r1, [r4, #28]
   26256:	4633      	mov	r3, r6
   26258:	462a      	mov	r2, r5
   2625a:	4620      	mov	r0, r4
}
   2625c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_enable(shell, shell->log_backend->backend, argc, argv);
   26260:	6809      	ldr	r1, [r1, #0]
   26262:	f7f9 b94f 	b.w	1f504 <log_enable>
}
   26266:	bd70      	pop	{r4, r5, r6, pc}

00026268 <log_disable>:
{
   26268:	b513      	push	{r0, r1, r4, lr}
	filters_set(shell, backend, argc - 1, &argv[1], LOG_LEVEL_NONE);
   2626a:	2400      	movs	r4, #0
   2626c:	3304      	adds	r3, #4
   2626e:	9400      	str	r4, [sp, #0]
   26270:	3a01      	subs	r2, #1
   26272:	f7f9 f8df 	bl	1f434 <filters_set>
}
   26276:	4620      	mov	r0, r4
   26278:	b002      	add	sp, #8
   2627a:	bd10      	pop	{r4, pc}

0002627c <cmd_log_self_disable>:
{
   2627c:	b570      	push	{r4, r5, r6, lr}
   2627e:	4604      	mov	r4, r0
   26280:	460d      	mov	r5, r1
   26282:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   26284:	f7f9 f8c6 	bl	1f414 <shell_state_precheck>
   26288:	b140      	cbz	r0, 2629c <cmd_log_self_disable+0x20>
	return log_disable(shell, shell->log_backend->backend, argc, argv);
   2628a:	69e1      	ldr	r1, [r4, #28]
   2628c:	4633      	mov	r3, r6
   2628e:	462a      	mov	r2, r5
   26290:	4620      	mov	r0, r4
}
   26292:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_disable(shell, shell->log_backend->backend, argc, argv);
   26296:	6809      	ldr	r1, [r1, #0]
   26298:	f7ff bfe6 	b.w	26268 <log_disable>
}
   2629c:	bd70      	pop	{r4, r5, r6, pc}

0002629e <cmd_kernel_reboot_warm>:
#endif

#if defined(CONFIG_REBOOT)
static int cmd_kernel_reboot_warm(const struct shell *shell,
				  size_t argc, char **argv)
{
   2629e:	b508      	push	{r3, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	sys_reboot(SYS_REBOOT_WARM);
   262a0:	2000      	movs	r0, #0
   262a2:	f7f8 f9b5 	bl	1e610 <sys_reboot>
	return 0;
}
   262a6:	2000      	movs	r0, #0
   262a8:	bd08      	pop	{r3, pc}

000262aa <cmd_kernel_reboot_cold>:

static int cmd_kernel_reboot_cold(const struct shell *shell,
				  size_t argc, char **argv)
{
   262aa:	b508      	push	{r3, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	sys_reboot(SYS_REBOOT_COLD);
   262ac:	2001      	movs	r0, #1
   262ae:	f7f8 f9af 	bl	1e610 <sys_reboot>
	return 0;
}
   262b2:	2000      	movs	r0, #0
   262b4:	bd08      	pop	{r3, pc}

000262b6 <cmd_date_get>:

static int cmd_date_get(const struct shell *shell, size_t argc, char **argv)
{
   262b6:	b510      	push	{r4, lr}
   262b8:	4604      	mov	r4, r0
   262ba:	b08e      	sub	sp, #56	; 0x38
   262bc:	2001      	movs	r0, #1
   262be:	4669      	mov	r1, sp
   262c0:	f7f6 ff56 	bl	1d170 <z_impl_clock_gettime>
	struct timespec tp;
	struct tm tm;

	clock_gettime(CLOCK_REALTIME, &tp);

	gmtime_r(&tp.tv_sec, &tm);
   262c4:	a905      	add	r1, sp, #20
   262c6:	4668      	mov	r0, sp
   262c8:	f7fc faa4 	bl	22814 <gmtime_r>

	date_print(shell, &tm);
   262cc:	4620      	mov	r0, r4
   262ce:	a905      	add	r1, sp, #20
   262d0:	f7f9 fb4a 	bl	1f968 <date_print>

	return 0;
}
   262d4:	2000      	movs	r0, #0
   262d6:	b00e      	add	sp, #56	; 0x38
   262d8:	bd10      	pop	{r4, pc}

000262da <atomic_or>:
{
   262da:	4603      	mov	r3, r0
}
   262dc:	e8d3 0fef 	ldaex	r0, [r3]
   262e0:	ea40 0201 	orr.w	r2, r0, r1
   262e4:	e8c3 2fec 	stlex	ip, r2, [r3]
   262e8:	f1bc 0f00 	cmp.w	ip, #0
   262ec:	d1f6      	bne.n	262dc <atomic_or+0x2>
   262ee:	4770      	bx	lr

000262f0 <atomic_and>:
{
   262f0:	4603      	mov	r3, r0
}
   262f2:	e8d3 0fef 	ldaex	r0, [r3]
   262f6:	ea00 0201 	and.w	r2, r0, r1
   262fa:	e8c3 2fec 	stlex	ip, r2, [r3]
   262fe:	f1bc 0f00 	cmp.w	ip, #0
   26302:	d1f6      	bne.n	262f2 <atomic_and+0x2>
   26304:	4770      	bx	lr

00026306 <kill_handler>:
{
   26306:	b538      	push	{r3, r4, r5, lr}
	if (z_flag_processing_get(shell)) {
   26308:	6883      	ldr	r3, [r0, #8]
{
   2630a:	4604      	mov	r4, r0
	return shell->ctx->internal.flags.processing == 1;
   2630c:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
	if (z_flag_processing_get(shell)) {
   26310:	06db      	lsls	r3, r3, #27
   26312:	d41d      	bmi.n	26350 <kill_handler+0x4a>
		z_shell_log_backend_disable(shell->log_backend);
   26314:	69c0      	ldr	r0, [r0, #28]
   26316:	f000 ff21 	bl	2715c <z_shell_log_backend_disable>
	err = shell->iface->api->uninit(shell->iface);
   2631a:	6860      	ldr	r0, [r4, #4]
   2631c:	6803      	ldr	r3, [r0, #0]
   2631e:	685b      	ldr	r3, [r3, #4]
   26320:	4798      	blx	r3
	if (err != 0) {
   26322:	4605      	mov	r5, r0
   26324:	b920      	cbnz	r0, 26330 <kill_handler+0x2a>
	z_shell_history_purge(shell->history);
   26326:	68e0      	ldr	r0, [r4, #12]
   26328:	f000 fdd5 	bl	26ed6 <z_shell_history_purge>
	shell->ctx->state = state;
   2632c:	68a3      	ldr	r3, [r4, #8]
   2632e:	711d      	strb	r5, [r3, #4]
	if (shell->ctx->uninit_cb) {
   26330:	68a3      	ldr	r3, [r4, #8]
   26332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   26334:	b113      	cbz	r3, 2633c <kill_handler+0x36>
		shell->ctx->uninit_cb(shell, err);
   26336:	4629      	mov	r1, r5
   26338:	4620      	mov	r0, r4
   2633a:	4798      	blx	r3
	shell->ctx->tid = NULL;
   2633c:	2200      	movs	r2, #0
   2633e:	68a3      	ldr	r3, [r4, #8]
   26340:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	return z_impl_k_current_get();
   26344:	f7fe f9e0 	bl	24708 <z_impl_k_current_get>
}
   26348:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_thread_abort(thread);
   2634c:	f7fc b850 	b.w	223f0 <z_impl_k_thread_abort>
		return -EBUSY;
   26350:	f06f 050f 	mvn.w	r5, #15
   26354:	e7ec      	b.n	26330 <kill_handler+0x2a>

00026356 <shell_signal_handle>:
{
   26356:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
   26358:	6885      	ldr	r5, [r0, #8]
   2635a:	3126      	adds	r1, #38	; 0x26
{
   2635c:	4604      	mov	r4, r0
   2635e:	4616      	mov	r6, r2
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
   26360:	eb05 1501 	add.w	r5, r5, r1, lsl #4
	z_impl_k_poll_signal_check(sig, signaled, result);
   26364:	4669      	mov	r1, sp
   26366:	4628      	mov	r0, r5
   26368:	aa01      	add	r2, sp, #4
   2636a:	f001 ffa7 	bl	282bc <z_impl_k_poll_signal_check>
	if (set) {
   2636e:	9b00      	ldr	r3, [sp, #0]
   26370:	b123      	cbz	r3, 2637c <shell_signal_handle+0x26>
	z_impl_k_poll_signal_reset(sig);
   26372:	4628      	mov	r0, r5
   26374:	f001 ff9f 	bl	282b6 <z_impl_k_poll_signal_reset>
		handler(shell);
   26378:	4620      	mov	r0, r4
   2637a:	47b0      	blx	r6
}
   2637c:	b002      	add	sp, #8
   2637e:	bd70      	pop	{r4, r5, r6, pc}

00026380 <k_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   26380:	f7fd be20 	b.w	23fc4 <z_impl_k_mutex_unlock>

00026384 <z_shell_strlen>:
{
   26384:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
   26386:	b110      	cbz	r0, 2638e <z_shell_strlen+0xa>
   26388:	f001 f94e 	bl	27628 <strlen>
   2638c:	b280      	uxth	r0, r0
}
   2638e:	bd08      	pop	{r3, pc}

00026390 <z_shell_raw_fprintf>:
{
   26390:	b40e      	push	{r1, r2, r3}
   26392:	b503      	push	{r0, r1, lr}
   26394:	aa03      	add	r2, sp, #12
   26396:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   2639a:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   2639c:	f7fa fa2e 	bl	207fc <z_shell_fprintf_fmt>
}
   263a0:	b002      	add	sp, #8
   263a2:	f85d eb04 	ldr.w	lr, [sp], #4
   263a6:	b003      	add	sp, #12
   263a8:	4770      	bx	lr

000263aa <z_flag_echo_set.isra.0>:
static inline bool z_flag_echo_set(const struct shell *shell, bool val)
   263aa:	b508      	push	{r3, lr}
   263ac:	460b      	mov	r3, r1
	Z_SHELL_SET_FLAG_ATOMIC(shell, echo, val, ret);
   263ae:	f500 7017 	add.w	r0, r0, #604	; 0x25c
   263b2:	2104      	movs	r1, #4
   263b4:	b123      	cbz	r3, 263c0 <z_flag_echo_set.isra.0+0x16>
   263b6:	f7ff ff90 	bl	262da <atomic_or>
}
   263ba:	f3c0 0080 	ubfx	r0, r0, #2, #1
   263be:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(shell, echo, val, ret);
   263c0:	f06f 0104 	mvn.w	r1, #4
   263c4:	f7ff ff94 	bl	262f0 <atomic_and>
   263c8:	e7f7      	b.n	263ba <z_flag_echo_set.isra.0+0x10>

000263ca <z_flag_obscure_set.isra.0>:
static inline bool z_flag_obscure_set(const struct shell *shell, bool val)
   263ca:	b508      	push	{r3, lr}
   263cc:	460b      	mov	r3, r1
	Z_SHELL_SET_FLAG_ATOMIC(shell, obscure, val, ret);
   263ce:	f500 7017 	add.w	r0, r0, #604	; 0x25c
   263d2:	2108      	movs	r1, #8
   263d4:	b123      	cbz	r3, 263e0 <z_flag_obscure_set.isra.0+0x16>
   263d6:	f7ff ff80 	bl	262da <atomic_or>
}
   263da:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   263de:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(shell, obscure, val, ret);
   263e0:	f06f 0108 	mvn.w	r1, #8
   263e4:	f7ff ff84 	bl	262f0 <atomic_and>
   263e8:	e7f7      	b.n	263da <z_flag_obscure_set.isra.0+0x10>

000263ea <z_flag_mode_delete_set.isra.0>:
static inline bool z_flag_mode_delete_set(const struct shell *shell, bool val)
   263ea:	b508      	push	{r3, lr}
   263ec:	460b      	mov	r3, r1
	Z_SHELL_SET_FLAG_ATOMIC(shell, mode_delete, val, ret);
   263ee:	f500 7017 	add.w	r0, r0, #604	; 0x25c
   263f2:	2140      	movs	r1, #64	; 0x40
   263f4:	b123      	cbz	r3, 26400 <z_flag_mode_delete_set.isra.0+0x16>
   263f6:	f7ff ff70 	bl	262da <atomic_or>
}
   263fa:	f3c0 1080 	ubfx	r0, r0, #6, #1
   263fe:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(shell, mode_delete, val, ret);
   26400:	f06f 0140 	mvn.w	r1, #64	; 0x40
   26404:	f7ff ff74 	bl	262f0 <atomic_and>
   26408:	e7f7      	b.n	263fa <z_flag_mode_delete_set.isra.0+0x10>

0002640a <z_flag_use_colors_set.isra.0>:
static inline bool z_flag_use_colors_set(const struct shell *shell, bool val)
   2640a:	b508      	push	{r3, lr}
   2640c:	460b      	mov	r3, r1
	Z_SHELL_SET_FLAG_ATOMIC(shell, use_colors, val, ret);
   2640e:	f500 7017 	add.w	r0, r0, #604	; 0x25c
   26412:	2102      	movs	r1, #2
   26414:	b123      	cbz	r3, 26420 <z_flag_use_colors_set.isra.0+0x16>
   26416:	f7ff ff60 	bl	262da <atomic_or>
}
   2641a:	f3c0 0040 	ubfx	r0, r0, #1, #1
   2641e:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(shell, use_colors, val, ret);
   26420:	f06f 0102 	mvn.w	r1, #2
   26424:	f7ff ff64 	bl	262f0 <atomic_and>
   26428:	e7f7      	b.n	2641a <z_flag_use_colors_set.isra.0+0x10>

0002642a <z_flag_history_exit_set.isra.0>:
static inline bool z_flag_history_exit_set(const struct shell *shell, bool val)
   2642a:	b508      	push	{r3, lr}
   2642c:	460b      	mov	r3, r1
	Z_SHELL_SET_FLAG_ATOMIC(shell, history_exit, val, ret);
   2642e:	f500 7017 	add.w	r0, r0, #604	; 0x25c
   26432:	2180      	movs	r1, #128	; 0x80
   26434:	b123      	cbz	r3, 26440 <z_flag_history_exit_set.isra.0+0x16>
   26436:	f7ff ff50 	bl	262da <atomic_or>
}
   2643a:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   2643e:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(shell, history_exit, val, ret);
   26440:	f06f 0180 	mvn.w	r1, #128	; 0x80
   26444:	f7ff ff54 	bl	262f0 <atomic_and>
   26448:	e7f7      	b.n	2643a <z_flag_history_exit_set.isra.0+0x10>

0002644a <z_flag_insert_mode_set.isra.0>:
static inline bool z_flag_insert_mode_set(const struct shell *shell, bool val)
   2644a:	b508      	push	{r3, lr}
   2644c:	460b      	mov	r3, r1
	Z_SHELL_SET_FLAG_ATOMIC(shell, insert_mode, val, ret);
   2644e:	f500 7017 	add.w	r0, r0, #604	; 0x25c
   26452:	2101      	movs	r1, #1
   26454:	b123      	cbz	r3, 26460 <z_flag_insert_mode_set.isra.0+0x16>
   26456:	f7ff ff40 	bl	262da <atomic_or>
}
   2645a:	f000 0001 	and.w	r0, r0, #1
   2645e:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(shell, insert_mode, val, ret);
   26460:	f06f 0101 	mvn.w	r1, #1
   26464:	f7ff ff44 	bl	262f0 <atomic_and>
   26468:	e7f7      	b.n	2645a <z_flag_insert_mode_set.isra.0+0x10>

0002646a <transport_evt_handler>:
	signal = (evt_type == SHELL_TRANSPORT_EVT_RX_RDY) ?
   2646a:	688b      	ldr	r3, [r1, #8]
			&shell->ctx->signals[SHELL_SIGNAL_RXRDY] :
   2646c:	b920      	cbnz	r0, 26478 <transport_evt_handler+0xe>
   2646e:	f503 7018 	add.w	r0, r3, #608	; 0x260
	return z_impl_k_poll_signal_raise(sig, result);
   26472:	2100      	movs	r1, #0
   26474:	f7fe bc46 	b.w	24d04 <z_impl_k_poll_signal_raise>
   26478:	f503 7024 	add.w	r0, r3, #656	; 0x290
   2647c:	e7f9      	b.n	26472 <transport_evt_handler+0x8>

0002647e <k_mutex_lock.constprop.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   2647e:	f7fd bd29 	b.w	23ed4 <z_impl_k_mutex_lock>

00026482 <shell_log_process>:
	int signaled = 0;
   26482:	2300      	movs	r3, #0
{
   26484:	b573      	push	{r0, r1, r4, r5, r6, lr}
   26486:	4604      	mov	r4, r0
	int signaled = 0;
   26488:	9300      	str	r3, [sp, #0]
			z_shell_cmd_line_erase(shell);
   2648a:	4620      	mov	r0, r4
   2648c:	f000 fb33 	bl	26af6 <z_shell_cmd_line_erase>
			processed = z_shell_log_backend_process(
   26490:	69e0      	ldr	r0, [r4, #28]
   26492:	f000 fe73 	bl	2717c <z_shell_log_backend_process>
   26496:	4605      	mov	r5, r0
		z_shell_print_prompt_and_cmd(shell);
   26498:	4620      	mov	r0, r4
		struct k_poll_signal *signal =
   2649a:	68a6      	ldr	r6, [r4, #8]
		z_shell_print_prompt_and_cmd(shell);
   2649c:	f7fa fb6c 	bl	20b78 <z_shell_print_prompt_and_cmd>
		if (shell->ctx->cmd_buff_len) {
   264a0:	68a3      	ldr	r3, [r4, #8]
		struct k_poll_signal *signal =
   264a2:	f506 7618 	add.w	r6, r6, #608	; 0x260
		if (shell->ctx->cmd_buff_len) {
   264a6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
   264a8:	b123      	cbz	r3, 264b4 <shell_log_process+0x32>
	return z_impl_k_sleep(timeout);
   264aa:	f44f 70f6 	mov.w	r0, #492	; 0x1ec
   264ae:	2100      	movs	r1, #0
   264b0:	f7fe f908 	bl	246c4 <z_impl_k_sleep>
	z_impl_k_poll_signal_check(sig, signaled, result);
   264b4:	4669      	mov	r1, sp
   264b6:	4630      	mov	r0, r6
   264b8:	aa01      	add	r2, sp, #4
   264ba:	f001 feff 	bl	282bc <z_impl_k_poll_signal_check>
	} while (processed && !signaled);
   264be:	b115      	cbz	r5, 264c6 <shell_log_process+0x44>
   264c0:	9b00      	ldr	r3, [sp, #0]
   264c2:	2b00      	cmp	r3, #0
   264c4:	d0e1      	beq.n	2648a <shell_log_process+0x8>
}
   264c6:	b002      	add	sp, #8
   264c8:	bd70      	pop	{r4, r5, r6, pc}

000264ca <shell_vfprintf>:
{
   264ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   264cc:	4604      	mov	r4, r0
	if (state_get(shell) != SHELL_STATE_ACTIVE) {
   264ce:	6880      	ldr	r0, [r0, #8]
{
   264d0:	461f      	mov	r7, r3
	if (state_get(shell) != SHELL_STATE_ACTIVE) {
   264d2:	7903      	ldrb	r3, [r0, #4]
{
   264d4:	460d      	mov	r5, r1
	if (state_get(shell) != SHELL_STATE_ACTIVE) {
   264d6:	2b02      	cmp	r3, #2
{
   264d8:	4616      	mov	r6, r2
	if (state_get(shell) != SHELL_STATE_ACTIVE) {
   264da:	d007      	beq.n	264ec <shell_vfprintf+0x22>
}
   264dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	Z_SHELL_SET_FLAG_ATOMIC(shell, print_noinit, val, ret);
   264e0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   264e4:	f500 7017 	add.w	r0, r0, #604	; 0x25c
   264e8:	f7ff bef7 	b.w	262da <atomic_or>
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   264ec:	f04f 32ff 	mov.w	r2, #4294967295
   264f0:	f04f 33ff 	mov.w	r3, #4294967295
   264f4:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
   264f8:	f7ff ffc1 	bl	2647e <k_mutex_lock.constprop.0>
	if (!z_flag_cmd_ctx_get(shell)) {
   264fc:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.cmd_ctx == 1;
   264fe:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
   26502:	03da      	lsls	r2, r3, #15
   26504:	d402      	bmi.n	2650c <shell_vfprintf+0x42>
		z_shell_cmd_line_erase(shell);
   26506:	4620      	mov	r0, r4
   26508:	f000 faf5 	bl	26af6 <z_shell_cmd_line_erase>
	z_shell_vfprintf(shell, color, fmt, args);
   2650c:	463b      	mov	r3, r7
   2650e:	4632      	mov	r2, r6
   26510:	4629      	mov	r1, r5
   26512:	4620      	mov	r0, r4
   26514:	f000 fb46 	bl	26ba4 <z_shell_vfprintf>
	if (!z_flag_cmd_ctx_get(shell)) {
   26518:	68a3      	ldr	r3, [r4, #8]
   2651a:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
   2651e:	03db      	lsls	r3, r3, #15
   26520:	d402      	bmi.n	26528 <shell_vfprintf+0x5e>
		z_shell_print_prompt_and_cmd(shell);
   26522:	4620      	mov	r0, r4
   26524:	f7fa fb28 	bl	20b78 <z_shell_print_prompt_and_cmd>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
   26528:	6960      	ldr	r0, [r4, #20]
   2652a:	f000 f829 	bl	26580 <z_shell_fprintf_buffer_flush>
	k_mutex_unlock(&shell->ctx->wr_mtx);
   2652e:	68a0      	ldr	r0, [r4, #8]
}
   26530:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&shell->ctx->wr_mtx);
   26534:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
   26538:	f7ff bf22 	b.w	26380 <k_mutex_unlock>

0002653c <shell_fprintf>:
{
   2653c:	b40c      	push	{r2, r3}
   2653e:	b507      	push	{r0, r1, r2, lr}
   26540:	ab04      	add	r3, sp, #16
   26542:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
   26546:	9301      	str	r3, [sp, #4]
	shell_vfprintf(shell, color, fmt, args);
   26548:	f7ff ffbf 	bl	264ca <shell_vfprintf>
}
   2654c:	b003      	add	sp, #12
   2654e:	f85d eb04 	ldr.w	lr, [sp], #4
   26552:	b002      	add	sp, #8
   26554:	4770      	bx	lr

00026556 <shell_help>:
{
   26556:	b510      	push	{r4, lr}
   26558:	4604      	mov	r4, r0
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   2655a:	6880      	ldr	r0, [r0, #8]
   2655c:	f04f 32ff 	mov.w	r2, #4294967295
   26560:	f04f 33ff 	mov.w	r3, #4294967295
   26564:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
   26568:	f7ff ff89 	bl	2647e <k_mutex_lock.constprop.0>
	shell_internal_help_print(shell);
   2656c:	4620      	mov	r0, r4
   2656e:	f7f9 faf9 	bl	1fb64 <shell_internal_help_print>
	k_mutex_unlock(&shell->ctx->wr_mtx);
   26572:	68a0      	ldr	r0, [r4, #8]
}
   26574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_mutex_unlock(&shell->ctx->wr_mtx);
   26578:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
   2657c:	f7ff bf00 	b.w	26380 <k_mutex_unlock>

00026580 <z_shell_fprintf_buffer_flush>:


void z_shell_fprintf_buffer_flush(const struct shell_fprintf *sh_fprintf)
{
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
   26580:	6902      	ldr	r2, [r0, #16]
{
   26582:	b510      	push	{r4, lr}
   26584:	4604      	mov	r4, r0
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
   26586:	6883      	ldr	r3, [r0, #8]
   26588:	6812      	ldr	r2, [r2, #0]
   2658a:	6801      	ldr	r1, [r0, #0]
   2658c:	68c0      	ldr	r0, [r0, #12]
   2658e:	4798      	blx	r3
			   sh_fprintf->ctrl_blk->buffer_cnt);
	sh_fprintf->ctrl_blk->buffer_cnt = 0;
   26590:	2200      	movs	r2, #0
   26592:	6923      	ldr	r3, [r4, #16]
   26594:	601a      	str	r2, [r3, #0]
}
   26596:	bd10      	pop	{r4, pc}

00026598 <out_func>:
{
   26598:	b538      	push	{r3, r4, r5, lr}
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
   2659a:	68cb      	ldr	r3, [r1, #12]
{
   2659c:	4605      	mov	r5, r0
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
   2659e:	7c1b      	ldrb	r3, [r3, #16]
{
   265a0:	460c      	mov	r4, r1
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
   265a2:	2b02      	cmp	r3, #2
   265a4:	d104      	bne.n	265b0 <out_func+0x18>
   265a6:	280a      	cmp	r0, #10
   265a8:	d102      	bne.n	265b0 <out_func+0x18>
		(void)out_func('\r', ctx);
   265aa:	200d      	movs	r0, #13
   265ac:	f7ff fff4 	bl	26598 <out_func>
	sh_fprintf->buffer[sh_fprintf->ctrl_blk->buffer_cnt] = (uint8_t)c;
   265b0:	6923      	ldr	r3, [r4, #16]
   265b2:	6822      	ldr	r2, [r4, #0]
   265b4:	681b      	ldr	r3, [r3, #0]
   265b6:	54d5      	strb	r5, [r2, r3]
	sh_fprintf->ctrl_blk->buffer_cnt++;
   265b8:	6922      	ldr	r2, [r4, #16]
   265ba:	6813      	ldr	r3, [r2, #0]
   265bc:	3301      	adds	r3, #1
   265be:	6013      	str	r3, [r2, #0]
	if (sh_fprintf->ctrl_blk->buffer_cnt == sh_fprintf->buffer_size) {
   265c0:	6862      	ldr	r2, [r4, #4]
   265c2:	4293      	cmp	r3, r2
   265c4:	d102      	bne.n	265cc <out_func+0x34>
		z_shell_fprintf_buffer_flush(sh_fprintf);
   265c6:	4620      	mov	r0, r4
   265c8:	f7ff ffda 	bl	26580 <z_shell_fprintf_buffer_flush>
}
   265cc:	2000      	movs	r0, #0
   265ce:	bd38      	pop	{r3, r4, r5, pc}

000265d0 <isspace>:
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   265d0:	2820      	cmp	r0, #32
   265d2:	d005      	beq.n	265e0 <isspace+0x10>
   265d4:	3809      	subs	r0, #9
   265d6:	2804      	cmp	r0, #4
   265d8:	bf8c      	ite	hi
   265da:	2000      	movhi	r0, #0
   265dc:	2001      	movls	r0, #1
   265de:	4770      	bx	lr
   265e0:	2001      	movs	r0, #1
}
   265e2:	4770      	bx	lr

000265e4 <z_shell_strlen>:
{
   265e4:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
   265e6:	b110      	cbz	r0, 265ee <z_shell_strlen+0xa>
   265e8:	f001 f81e 	bl	27628 <strlen>
   265ec:	b280      	uxth	r0, r0
}
   265ee:	bd08      	pop	{r3, pc}

000265f0 <z_column_span_with_buffer_offsets_get>:
{
   265f0:	b510      	push	{r4, lr}
	return (1 + ((buffer_pos + cons->name_len) % cons->terminal_wid));
   265f2:	7b04      	ldrb	r4, [r0, #12]
   265f4:	8943      	ldrh	r3, [r0, #10]
   265f6:	4422      	add	r2, r4
   265f8:	4421      	add	r1, r4
   265fa:	fbb2 f0f3 	udiv	r0, r2, r3
   265fe:	fbb1 f4f3 	udiv	r4, r1, r3
   26602:	fb03 2010 	mls	r0, r3, r0, r2
   26606:	fb03 1114 	mls	r1, r3, r4, r1
}
   2660a:	1a40      	subs	r0, r0, r1
   2660c:	bd10      	pop	{r4, pc}

0002660e <z_row_span_with_buffer_offsets_get>:
{
   2660e:	b510      	push	{r4, lr}
	return ((buffer_pos + cons->name_len) / cons->terminal_wid);
   26610:	7b04      	ldrb	r4, [r0, #12]
   26612:	8943      	ldrh	r3, [r0, #10]
   26614:	4421      	add	r1, r4
   26616:	1910      	adds	r0, r2, r4
   26618:	fbb0 f0f3 	udiv	r0, r0, r3
   2661c:	fbb1 f1f3 	udiv	r1, r1, r3
}
   26620:	1a40      	subs	r0, r0, r1
   26622:	bd10      	pop	{r4, pc}

00026624 <z_shell_multiline_data_calc>:
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
   26624:	7b03      	ldrb	r3, [r0, #12]
{
   26626:	b530      	push	{r4, r5, lr}
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
   26628:	8944      	ldrh	r4, [r0, #10]
   2662a:	4419      	add	r1, r3
   2662c:	fbb1 f5f4 	udiv	r5, r1, r4
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   26630:	441a      	add	r2, r3
   26632:	fbb2 f3f4 	udiv	r3, r2, r4
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
   26636:	fb04 1115 	mls	r1, r4, r5, r1
   2663a:	3101      	adds	r1, #1
   2663c:	8001      	strh	r1, [r0, #0]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   2663e:	1c59      	adds	r1, r3, #1
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   26640:	fb04 2313 	mls	r3, r4, r3, r2
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
   26644:	3501      	adds	r5, #1
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   26646:	3301      	adds	r3, #1
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
   26648:	8085      	strh	r5, [r0, #4]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   2664a:	80c1      	strh	r1, [r0, #6]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   2664c:	8043      	strh	r3, [r0, #2]
}
   2664e:	bd30      	pop	{r4, r5, pc}

00026650 <z_shell_make_argv>:
{
   26650:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*argc = 0;
   26654:	2500      	movs	r5, #0
{
   26656:	4606      	mov	r6, r0
   26658:	460f      	mov	r7, r1
   2665a:	4614      	mov	r4, r2
   2665c:	4698      	mov	r8, r3
	*argc = 0;
   2665e:	6005      	str	r5, [r0, #0]
		c = *cmd;
   26660:	7820      	ldrb	r0, [r4, #0]
		if (c == '\0') {
   26662:	2800      	cmp	r0, #0
   26664:	f000 80b5 	beq.w	267d2 <z_shell_make_argv+0x182>
		if (isspace((int) c)) {
   26668:	f7ff ffb2 	bl	265d0 <isspace>
   2666c:	b118      	cbz	r0, 26676 <z_shell_make_argv+0x26>
			*cmd++ = '\0';
   2666e:	2300      	movs	r3, #0
   26670:	f804 3b01 	strb.w	r3, [r4], #1
			continue;
   26674:	e7f4      	b.n	26660 <z_shell_make_argv+0x10>
		argv[(*argc)++] = cmd;
   26676:	6832      	ldr	r2, [r6, #0]
   26678:	1c53      	adds	r3, r2, #1
		if (*argc == max_argc) {
   2667a:	4543      	cmp	r3, r8
		argv[(*argc)++] = cmd;
   2667c:	6033      	str	r3, [r6, #0]
   2667e:	f847 4022 	str.w	r4, [r7, r2, lsl #2]
		if (*argc == max_argc) {
   26682:	f000 80a6 	beq.w	267d2 <z_shell_make_argv+0x182>
	char quote = 0;
   26686:	4605      	mov	r5, r0
		c = *cmd;
   26688:	f894 9000 	ldrb.w	r9, [r4]
		if (c == '\0') {
   2668c:	f1b9 0f00 	cmp.w	r9, #0
   26690:	d0e6      	beq.n	26660 <z_shell_make_argv+0x10>
		if (!quote) {
   26692:	2d00      	cmp	r5, #0
   26694:	f040 8089 	bne.w	267aa <z_shell_make_argv+0x15a>
			switch (c) {
   26698:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
   2669c:	d006      	beq.n	266ac <z_shell_make_argv+0x5c>
   2669e:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
   266a2:	f000 808a 	beq.w	267ba <z_shell_make_argv+0x16a>
   266a6:	f1b9 0f22 	cmp.w	r9, #34	; 0x22
   266aa:	d176      	bne.n	2679a <z_shell_make_argv+0x14a>
						z_shell_strlen(cmd));
   266ac:	4620      	mov	r0, r4
   266ae:	f7ff ff99 	bl	265e4 <z_shell_strlen>
				memmove(cmd, cmd + 1,
   266b2:	1c61      	adds	r1, r4, #1
						z_shell_strlen(cmd));
   266b4:	4602      	mov	r2, r0
				memmove(cmd, cmd + 1,
   266b6:	4620      	mov	r0, r4
   266b8:	f000 fff1 	bl	2769e <memmove>
				continue;
   266bc:	464d      	mov	r5, r9
   266be:	e7e3      	b.n	26688 <z_shell_make_argv+0x38>
			memmove(cmd, cmd + 1, z_shell_strlen(cmd));
   266c0:	4620      	mov	r0, r4
   266c2:	f7ff ff8f 	bl	265e4 <z_shell_strlen>
   266c6:	1c61      	adds	r1, r4, #1
   266c8:	4602      	mov	r2, r0
   266ca:	4620      	mov	r0, r4
   266cc:	f000 ffe7 	bl	2769e <memmove>
			quote = 0;
   266d0:	2500      	movs	r5, #0
			continue;
   266d2:	e7d9      	b.n	26688 <z_shell_make_argv+0x38>
			if (t == '0') {
   266d4:	2930      	cmp	r1, #48	; 0x30
   266d6:	d125      	bne.n	26724 <z_shell_make_argv+0xd4>
   266d8:	2302      	movs	r3, #2
				uint8_t v = 0U;
   266da:	f04f 0a00 	mov.w	sl, #0
					t = *(cmd + i);
   266de:	5ce1      	ldrb	r1, [r4, r3]
   266e0:	fa5f f983 	uxtb.w	r9, r3
					if (t >= '0' && t <= '7') {
   266e4:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   266e8:	b2d0      	uxtb	r0, r2
   266ea:	2807      	cmp	r0, #7
   266ec:	d817      	bhi.n	2671e <z_shell_make_argv+0xce>
						v = (v << 3) | (t - '0');
   266ee:	3301      	adds	r3, #1
   266f0:	ea42 0aca 	orr.w	sl, r2, sl, lsl #3
				for (i = 2U; i < (2 + 3); i++) {
   266f4:	2b05      	cmp	r3, #5
						v = (v << 3) | (t - '0');
   266f6:	fa5f fa8a 	uxtb.w	sl, sl
				for (i = 2U; i < (2 + 3); i++) {
   266fa:	d1f0      	bne.n	266de <z_shell_make_argv+0x8e>
   266fc:	4699      	mov	r9, r3
						z_shell_strlen(cmd) - (i - 2));
   266fe:	4620      	mov	r0, r4
   26700:	f7ff ff70 	bl	265e4 <z_shell_strlen>
					memmove(cmd, cmd + (i - 1),
   26704:	f109 3bff 	add.w	fp, r9, #4294967295
   26708:	44a3      	add	fp, r4
						z_shell_strlen(cmd) - (i - 2));
   2670a:	1c82      	adds	r2, r0, #2
					memmove(cmd, cmd + (i - 1),
   2670c:	4659      	mov	r1, fp
   2670e:	4620      	mov	r0, r4
   26710:	eba2 0209 	sub.w	r2, r2, r9
   26714:	f000 ffc3 	bl	2769e <memmove>
					*cmd++ = v;
   26718:	f804 ab01 	strb.w	sl, [r4], #1
					continue;
   2671c:	e7b4      	b.n	26688 <z_shell_make_argv+0x38>
				if (i > 2) {
   2671e:	f1b9 0f02 	cmp.w	r9, #2
   26722:	d1ec      	bne.n	266fe <z_shell_make_argv+0xae>
			if (t == 'x') {
   26724:	2978      	cmp	r1, #120	; 0x78
   26726:	d13e      	bne.n	267a6 <z_shell_make_argv+0x156>
   26728:	2302      	movs	r3, #2
				uint8_t v = 0U;
   2672a:	f04f 0900 	mov.w	r9, #0
					t = *(cmd + i);
   2672e:	5ce2      	ldrb	r2, [r4, r3]
   26730:	b2d8      	uxtb	r0, r3
					if (t >= '0' && t <= '9') {
   26732:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   26736:	fa5f fc81 	uxtb.w	ip, r1
   2673a:	f1bc 0f09 	cmp.w	ip, #9
   2673e:	d819      	bhi.n	26774 <z_shell_make_argv+0x124>
						v = (v << 4) | (t - '0');
   26740:	ea41 1209 	orr.w	r2, r1, r9, lsl #4
				for (i = 2U; i < (2 + 2); i++) {
   26744:	2b03      	cmp	r3, #3
						v = (v << 4) | (t - 'A' + 10);
   26746:	fa5f f982 	uxtb.w	r9, r2
				for (i = 2U; i < (2 + 2); i++) {
   2674a:	d111      	bne.n	26770 <z_shell_make_argv+0x120>
   2674c:	f04f 0b04 	mov.w	fp, #4
						z_shell_strlen(cmd) - (i - 2));
   26750:	4620      	mov	r0, r4
   26752:	f7ff ff47 	bl	265e4 <z_shell_strlen>
					memmove(cmd, cmd + (i - 1),
   26756:	f10b 3aff 	add.w	sl, fp, #4294967295
   2675a:	44a2      	add	sl, r4
						z_shell_strlen(cmd) - (i - 2));
   2675c:	1c82      	adds	r2, r0, #2
					memmove(cmd, cmd + (i - 1),
   2675e:	4651      	mov	r1, sl
   26760:	4620      	mov	r0, r4
   26762:	eba2 020b 	sub.w	r2, r2, fp
   26766:	f000 ff9a 	bl	2769e <memmove>
					*cmd++ = v;
   2676a:	f804 9b01 	strb.w	r9, [r4], #1
					continue;
   2676e:	e78b      	b.n	26688 <z_shell_make_argv+0x38>
   26770:	2303      	movs	r3, #3
   26772:	e7dc      	b.n	2672e <z_shell_make_argv+0xde>
					} else if ((t >= 'a') &&
   26774:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
   26778:	2905      	cmp	r1, #5
   2677a:	d803      	bhi.n	26784 <z_shell_make_argv+0x134>
						v = (v << 4) | (t - 'a' + 10);
   2677c:	3a57      	subs	r2, #87	; 0x57
						v = (v << 4) | (t - 'A' + 10);
   2677e:	ea42 1209 	orr.w	r2, r2, r9, lsl #4
   26782:	e7df      	b.n	26744 <z_shell_make_argv+0xf4>
					} else if ((t >= 'A') && (t <= 'F')) {
   26784:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   26788:	2905      	cmp	r1, #5
   2678a:	d801      	bhi.n	26790 <z_shell_make_argv+0x140>
						v = (v << 4) | (t - 'A' + 10);
   2678c:	3a37      	subs	r2, #55	; 0x37
   2678e:	e7f6      	b.n	2677e <z_shell_make_argv+0x12e>
				if (i > 2) {
   26790:	2802      	cmp	r0, #2
   26792:	d008      	beq.n	267a6 <z_shell_make_argv+0x156>
   26794:	f04f 0b03 	mov.w	fp, #3
   26798:	e7da      	b.n	26750 <z_shell_make_argv+0x100>
		if (!quote && isspace((int) c)) {
   2679a:	4648      	mov	r0, r9
   2679c:	f7ff ff18 	bl	265d0 <isspace>
   267a0:	2800      	cmp	r0, #0
   267a2:	f47f af5d 	bne.w	26660 <z_shell_make_argv+0x10>
		cmd += 1;
   267a6:	3401      	adds	r4, #1
   267a8:	e76e      	b.n	26688 <z_shell_make_argv+0x38>
		if (quote == c) {
   267aa:	45a9      	cmp	r9, r5
   267ac:	d088      	beq.n	266c0 <z_shell_make_argv+0x70>
		if (quote && c == '\\') {
   267ae:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
   267b2:	d1f8      	bne.n	267a6 <z_shell_make_argv+0x156>
   267b4:	7861      	ldrb	r1, [r4, #1]
			if (t == quote) {
   267b6:	428d      	cmp	r5, r1
   267b8:	d18c      	bne.n	266d4 <z_shell_make_argv+0x84>
						z_shell_strlen(cmd));
   267ba:	4620      	mov	r0, r4
   267bc:	f7ff ff12 	bl	265e4 <z_shell_strlen>
				memmove(cmd, cmd + 1,
   267c0:	f104 0901 	add.w	r9, r4, #1
						z_shell_strlen(cmd));
   267c4:	4602      	mov	r2, r0
				memmove(cmd, cmd + 1,
   267c6:	4649      	mov	r1, r9
   267c8:	4620      	mov	r0, r4
   267ca:	f000 ff68 	bl	2769e <memmove>
				cmd += 1;
   267ce:	464c      	mov	r4, r9
				continue;
   267d0:	e75a      	b.n	26688 <z_shell_make_argv+0x38>
}
   267d2:	4628      	mov	r0, r5
   267d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000267d8 <z_shell_pattern_remove>:
{
   267d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   267da:	460e      	mov	r6, r1
	char *pattern_addr = strstr(buff, pattern);
   267dc:	4611      	mov	r1, r2
{
   267de:	4615      	mov	r5, r2
   267e0:	4607      	mov	r7, r0
	char *pattern_addr = strstr(buff, pattern);
   267e2:	f000 fed6 	bl	27592 <strstr>
   267e6:	4604      	mov	r4, r0
	uint16_t pattern_len = z_shell_strlen(pattern);
   267e8:	4628      	mov	r0, r5
   267ea:	f7ff fefb 	bl	265e4 <z_shell_strlen>
   267ee:	4605      	mov	r5, r0
	if (!pattern_addr) {
   267f0:	b1c4      	cbz	r4, 26824 <z_shell_pattern_remove+0x4c>
	if (pattern_addr > buff) {
   267f2:	42a7      	cmp	r7, r4
   267f4:	d207      	bcs.n	26806 <z_shell_pattern_remove+0x2e>
		if (*(pattern_addr - 1) == ' ') {
   267f6:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   267fa:	2b20      	cmp	r3, #32
			pattern_len++; /* space needs to be removed as well */
   267fc:	bf02      	ittt	eq
   267fe:	3501      	addeq	r5, #1
   26800:	b2ad      	uxtheq	r5, r5
			pattern_addr--; /* set pointer to space */
   26802:	f104 34ff 	addeq.w	r4, r4, #4294967295
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   26806:	4620      	mov	r0, r4
   26808:	f7ff feec 	bl	265e4 <z_shell_strlen>
	*buff_len -= pattern_len;
   2680c:	8833      	ldrh	r3, [r6, #0]
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   2680e:	1b42      	subs	r2, r0, r5
	*buff_len -= pattern_len;
   26810:	1b5b      	subs	r3, r3, r5
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   26812:	3201      	adds	r2, #1
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
   26814:	4620      	mov	r0, r4
	*buff_len -= pattern_len;
   26816:	8033      	strh	r3, [r6, #0]
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
   26818:	1961      	adds	r1, r4, r5
   2681a:	b292      	uxth	r2, r2
}
   2681c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
   26820:	f000 bf3d 	b.w	2769e <memmove>
}
   26824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026826 <z_shell_find_cmd>:
 */
const struct shell_static_entry *z_shell_find_cmd(
					const struct shell_static_entry *parent,
					const char *cmd_str,
					struct shell_static_entry *dloc)
{
   26826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2682a:	4605      	mov	r5, r0
   2682c:	4688      	mov	r8, r1
   2682e:	4617      	mov	r7, r2
	const struct shell_static_entry *entry;
	size_t idx = 0;
   26830:	2600      	movs	r6, #0

	while ((entry = z_shell_cmd_get(parent, idx++, dloc)) != NULL) {
   26832:	4631      	mov	r1, r6
   26834:	463a      	mov	r2, r7
   26836:	4628      	mov	r0, r5
   26838:	f7f9 fff4 	bl	20824 <z_shell_cmd_get>
   2683c:	3601      	adds	r6, #1
   2683e:	4604      	mov	r4, r0
   26840:	b128      	cbz	r0, 2684e <z_shell_find_cmd+0x28>
		if (strcmp(cmd_str, entry->syntax) == 0) {
   26842:	4640      	mov	r0, r8
   26844:	6821      	ldr	r1, [r4, #0]
   26846:	f000 feff 	bl	27648 <strcmp>
   2684a:	2800      	cmp	r0, #0
   2684c:	d1f1      	bne.n	26832 <z_shell_find_cmd+0xc>
			return entry;
		}
	}

	return NULL;
}
   2684e:	4620      	mov	r0, r4
   26850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026854 <z_shell_get_last_command>:
					size_t argc,
					const char *argv[],
					size_t *match_arg,
					struct shell_static_entry *dloc,
					bool only_static)
{
   26854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26858:	461c      	mov	r4, r3
	const struct shell_static_entry *prev_entry = NULL;

	*match_arg = Z_SHELL_CMD_ROOT_LVL;
   2685a:	2300      	movs	r3, #0
{
   2685c:	460f      	mov	r7, r1
   2685e:	4616      	mov	r6, r2
   26860:	f8dd 8020 	ldr.w	r8, [sp, #32]
   26864:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
	*match_arg = Z_SHELL_CMD_ROOT_LVL;
   26868:	6023      	str	r3, [r4, #0]

	while (*match_arg < argc) {
   2686a:	6823      	ldr	r3, [r4, #0]

		if (IS_ENABLED(CONFIG_SHELL_WILDCARD)) {
			/* ignore wildcard argument */
			if (z_shell_has_wildcard(argv[*match_arg])) {
				(*match_arg)++;
				continue;
   2686c:	4605      	mov	r5, r0
	while (*match_arg < argc) {
   2686e:	42bb      	cmp	r3, r7
   26870:	d21b      	bcs.n	268aa <z_shell_get_last_command+0x56>
			if (z_shell_has_wildcard(argv[*match_arg])) {
   26872:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
   26876:	f000 fce6 	bl	27246 <z_shell_has_wildcard>
   2687a:	6823      	ldr	r3, [r4, #0]
   2687c:	4682      	mov	sl, r0
   2687e:	b118      	cbz	r0, 26888 <z_shell_get_last_command+0x34>
				(*match_arg)++;
   26880:	3301      	adds	r3, #1
				continue;
   26882:	4628      	mov	r0, r5
				(*match_arg)++;
   26884:	6023      	str	r3, [r4, #0]
				continue;
   26886:	e7f0      	b.n	2686a <z_shell_get_last_command+0x16>
			}
		}

		prev_entry = entry;
		entry = z_shell_find_cmd(entry, argv[*match_arg], dloc);
   26888:	4642      	mov	r2, r8
   2688a:	4628      	mov	r0, r5
   2688c:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   26890:	f7ff ffc9 	bl	26826 <z_shell_find_cmd>
		if (entry) {
   26894:	b148      	cbz	r0, 268aa <z_shell_get_last_command+0x56>
			(*match_arg)++;
   26896:	6823      	ldr	r3, [r4, #0]
   26898:	1c5a      	adds	r2, r3, #1
   2689a:	6022      	str	r2, [r4, #0]
		} else {
			entry = prev_entry;
			break;
		}

		if (only_static && (entry == dloc)) {
   2689c:	f1b9 0f00 	cmp.w	r9, #0
   268a0:	d0e3      	beq.n	2686a <z_shell_get_last_command+0x16>
   268a2:	4580      	cmp	r8, r0
   268a4:	d1e1      	bne.n	2686a <z_shell_get_last_command+0x16>
			(*match_arg)--;
			return NULL;
   268a6:	4655      	mov	r5, sl
			(*match_arg)--;
   268a8:	6023      	str	r3, [r4, #0]
		}
	}

	return entry;
}
   268aa:	4628      	mov	r0, r5
   268ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000268b0 <z_shell_spaces_trim>:




void z_shell_spaces_trim(char *str)
{
   268b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   268b4:	4606      	mov	r6, r0
	uint16_t len = z_shell_strlen(str);
   268b6:	f7ff fe95 	bl	265e4 <z_shell_strlen>
   268ba:	4605      	mov	r5, r0
	uint16_t shift = 0U;

	if (!str) {
   268bc:	bb56      	cbnz	r6, 26914 <z_shell_spaces_trim+0x64>

				break;
			}
		}
	}
}
   268be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (shift > 0) {
   268c2:	b14c      	cbz	r4, 268d8 <z_shell_spaces_trim+0x28>
						len - j + 1);
   268c4:	1c6a      	adds	r2, r5, #1
   268c6:	b29b      	uxth	r3, r3
					memmove(&str[i + 1],
   268c8:	3701      	adds	r7, #1
   268ca:	1ad2      	subs	r2, r2, r3
   268cc:	19f0      	adds	r0, r6, r7
					len -= shift;
   268ce:	1b2d      	subs	r5, r5, r4
					memmove(&str[i + 1],
   268d0:	f000 fee5 	bl	2769e <memmove>
					shift = 0U;
   268d4:	464c      	mov	r4, r9
					len -= shift;
   268d6:	b2ad      	uxth	r5, r5
	for (uint16_t i = 0; i < len - 1; i++) {
   268d8:	f108 0801 	add.w	r8, r8, #1
   268dc:	fa1f f388 	uxth.w	r3, r8
   268e0:	1e6a      	subs	r2, r5, #1
   268e2:	4293      	cmp	r3, r2
   268e4:	461f      	mov	r7, r3
   268e6:	daea      	bge.n	268be <z_shell_spaces_trim+0xe>
		if (isspace((int)str[i])) {
   268e8:	5df0      	ldrb	r0, [r6, r7]
   268ea:	f7ff fe71 	bl	265d0 <isspace>
   268ee:	2800      	cmp	r0, #0
   268f0:	d0f2      	beq.n	268d8 <z_shell_spaces_trim+0x28>
			for (uint16_t j = i + 1; j < len; j++) {
   268f2:	3301      	adds	r3, #1
   268f4:	b29b      	uxth	r3, r3
   268f6:	b29a      	uxth	r2, r3
   268f8:	4295      	cmp	r5, r2
   268fa:	d9ed      	bls.n	268d8 <z_shell_spaces_trim+0x28>
				if (isspace((int)str[j])) {
   268fc:	5cf0      	ldrb	r0, [r6, r3]
   268fe:	18f1      	adds	r1, r6, r3
   26900:	f7ff fe66 	bl	265d0 <isspace>
   26904:	4681      	mov	r9, r0
   26906:	1c5a      	adds	r2, r3, #1
   26908:	2800      	cmp	r0, #0
   2690a:	d0da      	beq.n	268c2 <z_shell_spaces_trim+0x12>
					shift++;
   2690c:	3401      	adds	r4, #1
   2690e:	4613      	mov	r3, r2
   26910:	b2a4      	uxth	r4, r4
			for (uint16_t j = i + 1; j < len; j++) {
   26912:	e7f0      	b.n	268f6 <z_shell_spaces_trim+0x46>
   26914:	f04f 0800 	mov.w	r8, #0
	uint16_t shift = 0U;
   26918:	4644      	mov	r4, r8
   2691a:	e7df      	b.n	268dc <z_shell_spaces_trim+0x2c>

0002691c <z_shell_cmd_trim>:
		*buff_len = *buff_len - i;
	}
}

void z_shell_cmd_trim(const struct shell *shell)
{
   2691c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
   2691e:	6884      	ldr	r4, [r0, #8]
{
   26920:	4605      	mov	r5, r0
	if (buff[0] == '\0') {
   26922:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
   26926:	b953      	cbnz	r3, 2693e <z_shell_cmd_trim+0x22>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
   26928:	68ab      	ldr	r3, [r5, #8]
   2692a:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   2692c:	875a      	strh	r2, [r3, #58]	; 0x3a
}
   2692e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*buff_len -= 1U;
   26930:	3a01      	subs	r2, #1
   26932:	b292      	uxth	r2, r2
   26934:	8722      	strh	r2, [r4, #56]	; 0x38
		if (*buff_len == 0U) {
   26936:	b922      	cbnz	r2, 26942 <z_shell_cmd_trim+0x26>
			buff[0] = '\0';
   26938:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
			return;
   2693c:	e7f4      	b.n	26928 <z_shell_cmd_trim+0xc>
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
   2693e:	f104 063e 	add.w	r6, r4, #62	; 0x3e
	while (isspace((int) buff[*buff_len - 1U])) {
   26942:	8f22      	ldrh	r2, [r4, #56]	; 0x38
   26944:	18b3      	adds	r3, r6, r2
   26946:	f813 0c01 	ldrb.w	r0, [r3, #-1]
   2694a:	f7ff fe41 	bl	265d0 <isspace>
   2694e:	4603      	mov	r3, r0
   26950:	2800      	cmp	r0, #0
   26952:	d1ed      	bne.n	26930 <z_shell_cmd_trim+0x14>
	buff[*buff_len] = '\0';
   26954:	54b0      	strb	r0, [r6, r2]
	while (isspace((int) buff[i++])) {
   26956:	b29f      	uxth	r7, r3
   26958:	5df0      	ldrb	r0, [r6, r7]
   2695a:	fa16 f183 	uxtah	r1, r6, r3
   2695e:	f7ff fe37 	bl	265d0 <isspace>
   26962:	3301      	adds	r3, #1
   26964:	2800      	cmp	r0, #0
   26966:	d1f6      	bne.n	26956 <z_shell_cmd_trim+0x3a>
	if (--i > 0) {
   26968:	2f00      	cmp	r7, #0
   2696a:	d0dd      	beq.n	26928 <z_shell_cmd_trim+0xc>
		memmove(buff, buff + i, (*buff_len + 1U) - i); /* +1 for '\0' */
   2696c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   2696e:	4630      	mov	r0, r6
   26970:	3301      	adds	r3, #1
   26972:	1bda      	subs	r2, r3, r7
   26974:	f000 fe93 	bl	2769e <memmove>
		*buff_len = *buff_len - i;
   26978:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   2697a:	1bdb      	subs	r3, r3, r7
   2697c:	8723      	strh	r3, [r4, #56]	; 0x38
   2697e:	e7d3      	b.n	26928 <z_shell_cmd_trim+0xc>

00026980 <z_shell_raw_fprintf>:
{
   26980:	b40e      	push	{r1, r2, r3}
   26982:	b503      	push	{r0, r1, lr}
   26984:	aa03      	add	r2, sp, #12
   26986:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   2698a:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   2698c:	f7f9 ff36 	bl	207fc <z_shell_fprintf_fmt>
}
   26990:	b002      	add	sp, #8
   26992:	f85d eb04 	ldr.w	lr, [sp], #4
   26996:	b003      	add	sp, #12
   26998:	4770      	bx	lr

0002699a <full_line_cmd.isra.0>:
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
   2699a:	6802      	ldr	r2, [r0, #0]
static inline bool full_line_cmd(const struct shell *shell)
   2699c:	b538      	push	{r3, r4, r5, lr}
   2699e:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
   269a0:	6810      	ldr	r0, [r2, #0]
   269a2:	8f15      	ldrh	r5, [r2, #56]	; 0x38
	return str == NULL ? 0U : (uint16_t)strlen(str);
   269a4:	b110      	cbz	r0, 269ac <full_line_cmd.isra.0+0x12>
   269a6:	f000 fe3f 	bl	27628 <strlen>
   269aa:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   269ac:	6822      	ldr	r2, [r4, #0]
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
   269ae:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   269b0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
   269b2:	fbb3 f0f2 	udiv	r0, r3, r2
   269b6:	fb02 3010 	mls	r0, r2, r0, r3
}
   269ba:	fab0 f080 	clz	r0, r0
   269be:	0940      	lsrs	r0, r0, #5
   269c0:	bd38      	pop	{r3, r4, r5, pc}

000269c2 <z_shell_cursor_in_empty_line>:
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
   269c2:	6882      	ldr	r2, [r0, #8]
{
   269c4:	b538      	push	{r3, r4, r5, lr}
   269c6:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
   269c8:	6810      	ldr	r0, [r2, #0]
   269ca:	8f55      	ldrh	r5, [r2, #58]	; 0x3a
   269cc:	b110      	cbz	r0, 269d4 <z_shell_cursor_in_empty_line+0x12>
   269ce:	f000 fe2b 	bl	27628 <strlen>
   269d2:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   269d4:	68a2      	ldr	r2, [r4, #8]
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
   269d6:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   269d8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
   269da:	fbb3 f0f2 	udiv	r0, r3, r2
   269de:	fb02 3010 	mls	r0, r2, r0, r3
}
   269e2:	fab0 f080 	clz	r0, r0
   269e6:	0940      	lsrs	r0, r0, #5
   269e8:	bd38      	pop	{r3, r4, r5, pc}

000269ea <z_shell_op_cursor_move>:
{
   269ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   269ec:	4604      	mov	r4, r0
   269ee:	460d      	mov	r5, r1
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
   269f0:	6880      	ldr	r0, [r0, #8]
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
   269f2:	8f41      	ldrh	r1, [r0, #58]	; 0x3a
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   269f4:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   269f6:	3020      	adds	r0, #32
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
   269f8:	440d      	add	r5, r1
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   269fa:	f7ff fe13 	bl	26624 <z_shell_multiline_data_calc>
						&shell->ctx->vt100_ctx.cons,
   269fe:	68a0      	ldr	r0, [r4, #8]
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
   26a00:	b2ad      	uxth	r5, r5
	row_span = z_row_span_with_buffer_offsets_get(
   26a02:	8f41      	ldrh	r1, [r0, #58]	; 0x3a
   26a04:	462a      	mov	r2, r5
   26a06:	3020      	adds	r0, #32
   26a08:	f7ff fe01 	bl	2660e <z_row_span_with_buffer_offsets_get>
   26a0c:	4607      	mov	r7, r0
						&shell->ctx->vt100_ctx.cons,
   26a0e:	68a0      	ldr	r0, [r4, #8]
	col_span = z_column_span_with_buffer_offsets_get(
   26a10:	462a      	mov	r2, r5
   26a12:	8f41      	ldrh	r1, [r0, #58]	; 0x3a
   26a14:	3020      	adds	r0, #32
   26a16:	f7ff fdeb 	bl	265f0 <z_column_span_with_buffer_offsets_get>
   26a1a:	4606      	mov	r6, r0
	z_shell_op_cursor_vert_move(shell, -row_span);
   26a1c:	4279      	negs	r1, r7
   26a1e:	4620      	mov	r0, r4
   26a20:	f7f9 ff2e 	bl	20880 <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, col_span);
   26a24:	4631      	mov	r1, r6
   26a26:	4620      	mov	r0, r4
   26a28:	f7f9 ff3a 	bl	208a0 <z_shell_op_cursor_horiz_move>
	shell->ctx->cmd_buff_pos = new_pos;
   26a2c:	68a3      	ldr	r3, [r4, #8]
   26a2e:	875d      	strh	r5, [r3, #58]	; 0x3a
}
   26a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026a32 <z_shell_op_cursor_word_move>:
{
   26a32:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (val < 0) {
   26a36:	1e0c      	subs	r4, r1, #0
{
   26a38:	4606      	mov	r6, r0
	if (val < 0) {
   26a3a:	da32      	bge.n	26aa2 <z_shell_op_cursor_word_move+0x70>
		sign = -1;
   26a3c:	f04f 35ff 	mov.w	r5, #4294967295
		val = -val;
   26a40:	4264      	negs	r4, r4
   26a42:	b224      	sxth	r4, r4
		sign = -1;
   26a44:	b2af      	uxth	r7, r5
   26a46:	e022      	b.n	26a8e <z_shell_op_cursor_word_move+0x5c>
		shift = shift_calc(shell->ctx->cmd_buff,
   26a48:	68b3      	ldr	r3, [r6, #8]
	bool found = false;
   26a4a:	2000      	movs	r0, #0
		shift = shift_calc(shell->ctx->cmd_buff,
   26a4c:	f8b3 e03a 	ldrh.w	lr, [r3, #58]	; 0x3a
   26a50:	f8b3 9038 	ldrh.w	r9, [r3, #56]	; 0x38
   26a54:	f103 083e 	add.w	r8, r3, #62	; 0x3e
   26a58:	4673      	mov	r3, lr
		idx = pos + ret * sign;
   26a5a:	eba3 010e 	sub.w	r1, r3, lr
   26a5e:	b209      	sxth	r1, r1
		if (((idx == 0U) && (sign < 0)) ||
   26a60:	b90b      	cbnz	r3, 26a66 <z_shell_op_cursor_word_move+0x34>
   26a62:	1c6a      	adds	r2, r5, #1
   26a64:	d010      	beq.n	26a88 <z_shell_op_cursor_word_move+0x56>
   26a66:	4599      	cmp	r9, r3
   26a68:	d101      	bne.n	26a6e <z_shell_op_cursor_word_move+0x3c>
		    ((idx == len) && (sign > 0))) {
   26a6a:	2d01      	cmp	r5, #1
   26a6c:	d00c      	beq.n	26a88 <z_shell_op_cursor_word_move+0x56>
		if (isalnum((int)str[idx]) != 0) {
   26a6e:	f818 2003 	ldrb.w	r2, [r8, r3]
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   26a72:	f042 0c20 	orr.w	ip, r2, #32
   26a76:	f1ac 0c61 	sub.w	ip, ip, #97	; 0x61
	return (int)(isalpha(chr) || isdigit(chr));
   26a7a:	f1bc 0f19 	cmp.w	ip, #25
   26a7e:	d90c      	bls.n	26a9a <z_shell_op_cursor_word_move+0x68>
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   26a80:	3a30      	subs	r2, #48	; 0x30
	return (int)(isalpha(chr) || isdigit(chr));
   26a82:	2a09      	cmp	r2, #9
   26a84:	d909      	bls.n	26a9a <z_shell_op_cursor_word_move+0x68>
			if (found) {
   26a86:	b148      	cbz	r0, 26a9c <z_shell_op_cursor_word_move+0x6a>
		z_shell_op_cursor_move(shell, sign * shift);
   26a88:	4630      	mov	r0, r6
   26a8a:	f7ff ffae 	bl	269ea <z_shell_op_cursor_move>
	while (val--) {
   26a8e:	3c01      	subs	r4, #1
   26a90:	b224      	sxth	r4, r4
   26a92:	1c63      	adds	r3, r4, #1
   26a94:	d1d8      	bne.n	26a48 <z_shell_op_cursor_word_move+0x16>
}
   26a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			found = true;
   26a9a:	2001      	movs	r0, #1
	while (1) {
   26a9c:	443b      	add	r3, r7
   26a9e:	b29b      	uxth	r3, r3
		idx = pos + ret * sign;
   26aa0:	e7db      	b.n	26a5a <z_shell_op_cursor_word_move+0x28>
		sign = 1;
   26aa2:	2501      	movs	r5, #1
   26aa4:	e7ce      	b.n	26a44 <z_shell_op_cursor_word_move+0x12>

00026aa6 <z_shell_op_cursor_home_move>:
	z_shell_op_cursor_move(shell, -shell->ctx->cmd_buff_pos);
   26aa6:	6883      	ldr	r3, [r0, #8]
   26aa8:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
   26aaa:	4249      	negs	r1, r1
   26aac:	b209      	sxth	r1, r1
   26aae:	f7ff bf9c 	b.w	269ea <z_shell_op_cursor_move>

00026ab2 <z_shell_op_cursor_end_move>:
	z_shell_op_cursor_move(shell, shell->ctx->cmd_buff_len -
   26ab2:	6883      	ldr	r3, [r0, #8]
   26ab4:	8f19      	ldrh	r1, [r3, #56]	; 0x38
   26ab6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
   26ab8:	1ac9      	subs	r1, r1, r3
   26aba:	b209      	sxth	r1, r1
   26abc:	f7ff bf95 	b.w	269ea <z_shell_op_cursor_move>

00026ac0 <z_shell_op_left_arrow>:
	if (shell->ctx->cmd_buff_pos > 0) {
   26ac0:	6883      	ldr	r3, [r0, #8]
   26ac2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
   26ac4:	b11b      	cbz	r3, 26ace <z_shell_op_left_arrow+0xe>
		z_shell_op_cursor_move(shell, -1);
   26ac6:	f04f 31ff 	mov.w	r1, #4294967295
   26aca:	f7ff bf8e 	b.w	269ea <z_shell_op_cursor_move>
}
   26ace:	4770      	bx	lr

00026ad0 <z_shell_op_right_arrow>:
	if (shell->ctx->cmd_buff_pos < shell->ctx->cmd_buff_len) {
   26ad0:	6883      	ldr	r3, [r0, #8]
   26ad2:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
   26ad4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
   26ad6:	429a      	cmp	r2, r3
   26ad8:	d202      	bcs.n	26ae0 <z_shell_op_right_arrow+0x10>
		z_shell_op_cursor_move(shell, 1);
   26ada:	2101      	movs	r1, #1
   26adc:	f7ff bf85 	b.w	269ea <z_shell_op_cursor_move>
}
   26ae0:	4770      	bx	lr

00026ae2 <z_shell_op_delete_from_cursor>:
	shell->ctx->cmd_buff_len = shell->ctx->cmd_buff_pos;
   26ae2:	6883      	ldr	r3, [r0, #8]
   26ae4:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
   26ae6:	871a      	strh	r2, [r3, #56]	; 0x38
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos] = '\0';
   26ae8:	4413      	add	r3, r2
   26aea:	2200      	movs	r2, #0
   26aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	z_clear_eos(shell);
   26af0:	6940      	ldr	r0, [r0, #20]
   26af2:	f7f9 bebd 	b.w	20870 <z_clear_eos.isra.0>

00026af6 <z_shell_cmd_line_erase>:
{
   26af6:	b510      	push	{r4, lr}
   26af8:	4604      	mov	r4, r0
	z_shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
   26afa:	6880      	ldr	r0, [r0, #8]
   26afc:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   26afe:	8f41      	ldrh	r1, [r0, #58]	; 0x3a
   26b00:	3020      	adds	r0, #32
   26b02:	f7ff fd8f 	bl	26624 <z_shell_multiline_data_calc>
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
   26b06:	68a3      	ldr	r3, [r4, #8]
	z_shell_op_cursor_horiz_move(shell,
   26b08:	4620      	mov	r0, r4
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
   26b0a:	8c19      	ldrh	r1, [r3, #32]
	z_shell_op_cursor_horiz_move(shell,
   26b0c:	f1c1 0101 	rsb	r1, r1, #1
   26b10:	f7f9 fec6 	bl	208a0 <z_shell_op_cursor_horiz_move>
	z_shell_op_cursor_vert_move(shell, shell->ctx->vt100_ctx.cons.cur_y - 1);
   26b14:	68a3      	ldr	r3, [r4, #8]
   26b16:	4620      	mov	r0, r4
   26b18:	8c99      	ldrh	r1, [r3, #36]	; 0x24
   26b1a:	3901      	subs	r1, #1
   26b1c:	f7f9 feb0 	bl	20880 <z_shell_op_cursor_vert_move>
	z_clear_eos(shell);
   26b20:	6960      	ldr	r0, [r4, #20]
}
   26b22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_clear_eos(shell);
   26b26:	f7f9 bea3 	b.w	20870 <z_clear_eos.isra.0>

00026b2a <z_shell_write>:
{
   26b2a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   26b2e:	4606      	mov	r6, r0
   26b30:	4688      	mov	r8, r1
   26b32:	4615      	mov	r5, r2
	size_t offset = 0;
   26b34:	2700      	movs	r7, #0
	while (length) {
   26b36:	b915      	cbnz	r5, 26b3e <z_shell_write+0x14>
}
   26b38:	b002      	add	sp, #8
   26b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		int err = shell->iface->api->write(shell->iface,
   26b3e:	6870      	ldr	r0, [r6, #4]
   26b40:	462a      	mov	r2, r5
   26b42:	6803      	ldr	r3, [r0, #0]
   26b44:	eb08 0107 	add.w	r1, r8, r7
   26b48:	68dc      	ldr	r4, [r3, #12]
   26b4a:	ab01      	add	r3, sp, #4
   26b4c:	47a0      	blx	r4
		offset += tmp_cnt;
   26b4e:	9b01      	ldr	r3, [sp, #4]
   26b50:	441f      	add	r7, r3
		length -= tmp_cnt;
   26b52:	1aed      	subs	r5, r5, r3
		if (tmp_cnt == 0 &&
   26b54:	2b00      	cmp	r3, #0
   26b56:	d1ee      	bne.n	26b36 <z_shell_write+0xc>
		    (shell->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
   26b58:	68b4      	ldr	r4, [r6, #8]
   26b5a:	7923      	ldrb	r3, [r4, #4]
		if (tmp_cnt == 0 &&
   26b5c:	2b03      	cmp	r3, #3
   26b5e:	d0ea      	beq.n	26b36 <z_shell_write+0xc>
	if (IS_ENABLED(CONFIG_MULTITHREADING) &&
   26b60:	2b02      	cmp	r3, #2
   26b62:	d80e      	bhi.n	26b82 <z_shell_write+0x58>
	return z_impl_k_poll(events, num_events, timeout);
   26b64:	f04f 32ff 	mov.w	r2, #4294967295
   26b68:	f04f 33ff 	mov.w	r3, #4294967295
   26b6c:	2101      	movs	r1, #1
   26b6e:	f504 7037 	add.w	r0, r4, #732	; 0x2dc
   26b72:	f7fe f86b 	bl	24c4c <z_impl_k_poll>
		k_poll_signal_reset(&shell->ctx->signals[SHELL_SIGNAL_TXDONE]);
   26b76:	68b0      	ldr	r0, [r6, #8]
   26b78:	f500 7024 	add.w	r0, r0, #656	; 0x290
	z_impl_k_poll_signal_reset(sig);
   26b7c:	f001 fb9b 	bl	282b6 <z_impl_k_poll_signal_reset>
   26b80:	e7d9      	b.n	26b36 <z_shell_write+0xc>
	return shell->ctx->internal.flags.tx_rdy == 1;
   26b82:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
		while (!z_flag_tx_rdy_get(shell)) {
   26b86:	069b      	lsls	r3, r3, #26
   26b88:	d5fb      	bpl.n	26b82 <z_shell_write+0x58>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26b8a:	f504 7417 	add.w	r4, r4, #604	; 0x25c
   26b8e:	e8d4 3fef 	ldaex	r3, [r4]
   26b92:	f023 0320 	bic.w	r3, r3, #32
   26b96:	e8c4 3fe2 	stlex	r2, r3, [r4]
   26b9a:	2a00      	cmp	r2, #0
   26b9c:	d0cb      	beq.n	26b36 <z_shell_write+0xc>
   26b9e:	e7f6      	b.n	26b8e <z_shell_write+0x64>

00026ba0 <z_shell_print_stream>:
	z_shell_write((const struct shell *) user_ctx, data, len);
   26ba0:	f7ff bfc3 	b.w	26b2a <z_shell_write>

00026ba4 <z_shell_vfprintf>:

void z_shell_vfprintf(const struct shell *shell, enum shell_vt100_color color,
		      const char *fmt, va_list args)
{
   26ba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26ba6:	460f      	mov	r7, r1
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
	    shell->ctx->internal.flags.use_colors &&
   26ba8:	6881      	ldr	r1, [r0, #8]
{
   26baa:	461e      	mov	r6, r3
	    shell->ctx->internal.flags.use_colors &&
   26bac:	f8d1 325c 	ldr.w	r3, [r1, #604]	; 0x25c
{
   26bb0:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
   26bb2:	079b      	lsls	r3, r3, #30
{
   26bb4:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
   26bb6:	d517      	bpl.n	26be8 <z_shell_vfprintf+0x44>
	    shell->ctx->internal.flags.use_colors &&
   26bb8:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
   26bbc:	42bb      	cmp	r3, r7
   26bbe:	d013      	beq.n	26be8 <z_shell_vfprintf+0x44>
			     enum shell_vt100_color color);

static inline void z_shell_vt100_colors_store(const struct shell *shell,
					      struct shell_vt100_colors *color)
{
	memcpy(color, &shell->ctx->vt100_ctx.col, sizeof(*color));
   26bc0:	2202      	movs	r2, #2
   26bc2:	312e      	adds	r1, #46	; 0x2e
   26bc4:	a801      	add	r0, sp, #4
   26bc6:	f000 fd81 	bl	276cc <memcpy>
	    (color != shell->ctx->vt100_ctx.col.col)) {
		struct shell_vt100_colors col;

		z_shell_vt100_colors_store(shell, &col);
		z_shell_vt100_color_set(shell, color);
   26bca:	4639      	mov	r1, r7
   26bcc:	4620      	mov	r0, r4
   26bce:	f7f9 febd 	bl	2094c <z_shell_vt100_color_set>

		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
   26bd2:	4629      	mov	r1, r5
   26bd4:	6960      	ldr	r0, [r4, #20]
   26bd6:	4632      	mov	r2, r6
   26bd8:	f7f9 fe10 	bl	207fc <z_shell_fprintf_fmt>

		z_shell_vt100_colors_restore(shell, &col);
   26bdc:	4620      	mov	r0, r4
   26bde:	a901      	add	r1, sp, #4
   26be0:	f7f9 fed8 	bl	20994 <z_shell_vt100_colors_restore>
	} else {
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
	}
}
   26be4:	b003      	add	sp, #12
   26be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
   26be8:	4632      	mov	r2, r6
   26bea:	4629      	mov	r1, r5
   26bec:	6960      	ldr	r0, [r4, #20]
   26bee:	f7f9 fe05 	bl	207fc <z_shell_fprintf_fmt>
}
   26bf2:	e7f7      	b.n	26be4 <z_shell_vfprintf+0x40>

00026bf4 <z_shell_fprintf>:

void z_shell_fprintf(const struct shell *shell,
			    enum shell_vt100_color color,
			    const char *fmt, ...)
{
   26bf4:	b40c      	push	{r2, r3}
   26bf6:	b507      	push	{r0, r1, r2, lr}
   26bf8:	ab04      	add	r3, sp, #16
   26bfa:	f853 2b04 	ldr.w	r2, [r3], #4
	__ASSERT_NO_MSG(shell->fprintf_ctx);
	__ASSERT_NO_MSG(fmt);

	va_list args;

	va_start(args, fmt);
   26bfe:	9301      	str	r3, [sp, #4]
	z_shell_vfprintf(shell, color, fmt, args);
   26c00:	f7ff ffd0 	bl	26ba4 <z_shell_vfprintf>
	va_end(args);
}
   26c04:	b003      	add	sp, #12
   26c06:	f85d eb04 	ldr.w	lr, [sp], #4
   26c0a:	b002      	add	sp, #8
   26c0c:	4770      	bx	lr

00026c0e <data_insert>:
{
   26c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   26c12:	6886      	ldr	r6, [r0, #8]
{
   26c14:	4607      	mov	r7, r0
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   26c16:	8f35      	ldrh	r5, [r6, #56]	; 0x38
{
   26c18:	4688      	mov	r8, r1
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
   26c1a:	18ab      	adds	r3, r5, r2
   26c1c:	2bff      	cmp	r3, #255	; 0xff
{
   26c1e:	4614      	mov	r4, r2
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
   26c20:	dc1f      	bgt.n	26c62 <data_insert+0x54>
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   26c22:	8f73      	ldrh	r3, [r6, #58]	; 0x3a
   26c24:	1aed      	subs	r5, r5, r3
	char *curr_pos = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
   26c26:	333e      	adds	r3, #62	; 0x3e
   26c28:	441e      	add	r6, r3
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   26c2a:	b2ad      	uxth	r5, r5
	memmove(curr_pos + len, curr_pos, after);
   26c2c:	462a      	mov	r2, r5
   26c2e:	4631      	mov	r1, r6
   26c30:	1930      	adds	r0, r6, r4
   26c32:	f000 fd34 	bl	2769e <memmove>
	memcpy(curr_pos, data, len);
   26c36:	4622      	mov	r2, r4
   26c38:	4641      	mov	r1, r8
   26c3a:	4630      	mov	r0, r6
   26c3c:	f000 fd46 	bl	276cc <memcpy>
	shell->ctx->cmd_buff_len += len;
   26c40:	68ba      	ldr	r2, [r7, #8]
   26c42:	8f13      	ldrh	r3, [r2, #56]	; 0x38
   26c44:	4423      	add	r3, r4
   26c46:	b29b      	uxth	r3, r3
   26c48:	8713      	strh	r3, [r2, #56]	; 0x38
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
   26c4a:	4413      	add	r3, r2
   26c4c:	2200      	movs	r2, #0
   26c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	if (!z_flag_echo_get(shell)) {
   26c52:	68bb      	ldr	r3, [r7, #8]
	return shell->ctx->internal.flags.echo == 1;
   26c54:	f8d3 125c 	ldr.w	r1, [r3, #604]	; 0x25c
   26c58:	0749      	lsls	r1, r1, #29
   26c5a:	d404      	bmi.n	26c66 <data_insert+0x58>
		shell->ctx->cmd_buff_pos += len;
   26c5c:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
   26c5e:	4414      	add	r4, r2
   26c60:	875c      	strh	r4, [r3, #58]	; 0x3a
}
   26c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	reprint_from_cursor(shell, after, false);
   26c66:	4629      	mov	r1, r5
   26c68:	4638      	mov	r0, r7
}
   26c6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	reprint_from_cursor(shell, after, false);
   26c6e:	f7f9 bf0b 	b.w	20a88 <reprint_from_cursor>

00026c72 <z_shell_op_completion_insert>:
	data_insert(shell, compl, compl_len);
   26c72:	f7ff bfcc 	b.w	26c0e <data_insert>

00026c76 <z_shell_op_char_delete>:
{
   26c76:	b538      	push	{r3, r4, r5, lr}
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   26c78:	6883      	ldr	r3, [r0, #8]
{
   26c7a:	4605      	mov	r5, r0
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   26c7c:	8f1c      	ldrh	r4, [r3, #56]	; 0x38
   26c7e:	8f58      	ldrh	r0, [r3, #58]	; 0x3a
   26c80:	1a24      	subs	r4, r4, r0
   26c82:	b2a4      	uxth	r4, r4
	if (diff == 0U) {
   26c84:	b18c      	cbz	r4, 26caa <z_shell_op_char_delete+0x34>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
   26c86:	303e      	adds	r0, #62	; 0x3e
   26c88:	4418      	add	r0, r3
	memmove(str, str + 1, diff);
   26c8a:	4622      	mov	r2, r4
   26c8c:	1c41      	adds	r1, r0, #1
   26c8e:	f000 fd06 	bl	2769e <memmove>
	--shell->ctx->cmd_buff_len;
   26c92:	68aa      	ldr	r2, [r5, #8]
	reprint_from_cursor(shell, --diff, true);
   26c94:	1e61      	subs	r1, r4, #1
	--shell->ctx->cmd_buff_len;
   26c96:	8f13      	ldrh	r3, [r2, #56]	; 0x38
	reprint_from_cursor(shell, --diff, true);
   26c98:	4628      	mov	r0, r5
	--shell->ctx->cmd_buff_len;
   26c9a:	3b01      	subs	r3, #1
   26c9c:	8713      	strh	r3, [r2, #56]	; 0x38
	reprint_from_cursor(shell, --diff, true);
   26c9e:	b289      	uxth	r1, r1
   26ca0:	2201      	movs	r2, #1
}
   26ca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	reprint_from_cursor(shell, --diff, true);
   26ca6:	f7f9 beef 	b.w	20a88 <reprint_from_cursor>
}
   26caa:	bd38      	pop	{r3, r4, r5, pc}

00026cac <z_shell_op_char_backspace>:
	if ((shell->ctx->cmd_buff_len == 0) ||
   26cac:	6883      	ldr	r3, [r0, #8]
{
   26cae:	b510      	push	{r4, lr}
	if ((shell->ctx->cmd_buff_len == 0) ||
   26cb0:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
{
   26cb2:	4604      	mov	r4, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
   26cb4:	b152      	cbz	r2, 26ccc <z_shell_op_char_backspace+0x20>
   26cb6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
   26cb8:	b143      	cbz	r3, 26ccc <z_shell_op_char_backspace+0x20>
	z_shell_op_cursor_move(shell, -1);
   26cba:	f04f 31ff 	mov.w	r1, #4294967295
   26cbe:	f7ff fe94 	bl	269ea <z_shell_op_cursor_move>
	z_shell_op_char_delete(shell);
   26cc2:	4620      	mov	r0, r4
}
   26cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_op_char_delete(shell);
   26cc8:	f7ff bfd5 	b.w	26c76 <z_shell_op_char_delete>
}
   26ccc:	bd10      	pop	{r4, pc}

00026cce <z_impl_uart_irq_tx_disable>:
	if (api->irq_tx_disable != NULL) {
   26cce:	6883      	ldr	r3, [r0, #8]
   26cd0:	6a1b      	ldr	r3, [r3, #32]
   26cd2:	b103      	cbz	r3, 26cd6 <z_impl_uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
   26cd4:	4718      	bx	r3
}
   26cd6:	4770      	bx	lr

00026cd8 <read>:
{
   26cd8:	b510      	push	{r4, lr}
   26cda:	461c      	mov	r4, r3
	*cnt = ring_buf_get(sh_uart->rx_ringbuf, data, length);
   26cdc:	6843      	ldr	r3, [r0, #4]
   26cde:	68d8      	ldr	r0, [r3, #12]
   26ce0:	f7fe fe28 	bl	25934 <ring_buf_get>
   26ce4:	6020      	str	r0, [r4, #0]
}
   26ce6:	2000      	movs	r0, #0
   26ce8:	bd10      	pop	{r4, pc}

00026cea <write>:
{
   26cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
   26cee:	6845      	ldr	r5, [r0, #4]
{
   26cf0:	461e      	mov	r6, r3
		!sh_uart->ctrl_blk->blocking_tx) {
   26cf2:	682b      	ldr	r3, [r5, #0]
{
   26cf4:	460c      	mov	r4, r1
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
   26cf6:	7c1b      	ldrb	r3, [r3, #16]
{
   26cf8:	4617      	mov	r7, r2
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
   26cfa:	b153      	cbz	r3, 26d12 <write+0x28>
   26cfc:	eb01 0802 	add.w	r8, r1, r2
		for (size_t i = 0; i < length; i++) {
   26d00:	4544      	cmp	r4, r8
   26d02:	682b      	ldr	r3, [r5, #0]
   26d04:	d11c      	bne.n	26d40 <write+0x56>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
   26d06:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   26d0a:	2001      	movs	r0, #1
		*cnt = length;
   26d0c:	6037      	str	r7, [r6, #0]
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
   26d0e:	4790      	blx	r2
   26d10:	e013      	b.n	26d3a <write+0x50>
	*cnt = ring_buf_put(sh_uart->tx_ringbuf, data, length);
   26d12:	68a8      	ldr	r0, [r5, #8]
   26d14:	f7fe fda4 	bl	25860 <ring_buf_put>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   26d18:	2101      	movs	r1, #1
   26d1a:	682b      	ldr	r3, [r5, #0]
   26d1c:	6030      	str	r0, [r6, #0]
   26d1e:	330c      	adds	r3, #12
   26d20:	e8d3 2fef 	ldaex	r2, [r3]
   26d24:	e8c3 1fe0 	stlex	r0, r1, [r3]
   26d28:	2800      	cmp	r0, #0
   26d2a:	d1f9      	bne.n	26d20 <write+0x36>
	if (atomic_set(&sh_uart->ctrl_blk->tx_busy, 1) == 0) {
   26d2c:	b92a      	cbnz	r2, 26d3a <write+0x50>
		uart_irq_tx_enable(sh_uart->ctrl_blk->dev);
   26d2e:	682b      	ldr	r3, [r5, #0]
   26d30:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable != NULL) {
   26d32:	6883      	ldr	r3, [r0, #8]
   26d34:	69db      	ldr	r3, [r3, #28]
   26d36:	b103      	cbz	r3, 26d3a <write+0x50>
		api->irq_tx_enable(dev);
   26d38:	4798      	blx	r3
}
   26d3a:	2000      	movs	r0, #0
   26d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
   26d40:	6818      	ldr	r0, [r3, #0]
   26d42:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
   26d46:	6883      	ldr	r3, [r0, #8]
   26d48:	685b      	ldr	r3, [r3, #4]
   26d4a:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   26d4c:	e7d8      	b.n	26d00 <write+0x16>

00026d4e <uninit>:
		const struct device *dev = sh_uart->ctrl_blk->dev;
   26d4e:	6843      	ldr	r3, [r0, #4]
{
   26d50:	b510      	push	{r4, lr}
		const struct device *dev = sh_uart->ctrl_blk->dev;
   26d52:	681b      	ldr	r3, [r3, #0]
   26d54:	681c      	ldr	r4, [r3, #0]
   26d56:	4620      	mov	r0, r4
   26d58:	f7ff ffb9 	bl	26cce <z_impl_uart_irq_tx_disable>
	if (api->irq_rx_disable != NULL) {
   26d5c:	68a3      	ldr	r3, [r4, #8]
   26d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   26d60:	b10b      	cbz	r3, 26d66 <uninit+0x18>
		api->irq_rx_disable(dev);
   26d62:	4620      	mov	r0, r4
   26d64:	4798      	blx	r3
}
   26d66:	2000      	movs	r0, #0
   26d68:	bd10      	pop	{r4, pc}

00026d6a <enable>:
{
   26d6a:	b508      	push	{r3, lr}
	sh_uart->ctrl_blk->blocking_tx = blocking_tx;
   26d6c:	6843      	ldr	r3, [r0, #4]
   26d6e:	681b      	ldr	r3, [r3, #0]
   26d70:	7419      	strb	r1, [r3, #16]
	if (blocking_tx) {
   26d72:	b111      	cbz	r1, 26d7a <enable+0x10>
		uart_irq_tx_disable(sh_uart->ctrl_blk->dev);
   26d74:	6818      	ldr	r0, [r3, #0]
   26d76:	f7ff ffaa 	bl	26cce <z_impl_uart_irq_tx_disable>
}
   26d7a:	2000      	movs	r0, #0
   26d7c:	bd08      	pop	{r3, pc}

00026d7e <z_shell_raw_fprintf>:
{
   26d7e:	b40e      	push	{r1, r2, r3}
   26d80:	b503      	push	{r0, r1, lr}
   26d82:	aa03      	add	r2, sp, #12
   26d84:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   26d88:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   26d8a:	f7f9 fd37 	bl	207fc <z_shell_fprintf_fmt>
}
   26d8e:	b002      	add	sp, #8
   26d90:	f85d eb04 	ldr.w	lr, [sp], #4
   26d94:	b003      	add	sp, #12
   26d96:	4770      	bx	lr

00026d98 <cmd_shell_stats_reset>:
	shell->stats->log_lost_cnt = 0;
   26d98:	6983      	ldr	r3, [r0, #24]
   26d9a:	2000      	movs	r0, #0
   26d9c:	6018      	str	r0, [r3, #0]
}
   26d9e:	4770      	bx	lr

00026da0 <z_shell_raw_fprintf>:
{
   26da0:	b40e      	push	{r1, r2, r3}
   26da2:	b503      	push	{r0, r1, lr}
   26da4:	aa03      	add	r2, sp, #12
   26da6:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   26daa:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   26dac:	f7f9 fd26 	bl	207fc <z_shell_fprintf_fmt>
}
   26db0:	b002      	add	sp, #8
   26db2:	f85d eb04 	ldr.w	lr, [sp], #4
   26db6:	b003      	add	sp, #12
   26db8:	4770      	bx	lr

00026dba <cmd_echo_on>:
	Z_SHELL_SET_FLAG_ATOMIC(shell, echo, val, ret);
   26dba:	6883      	ldr	r3, [r0, #8]
   26dbc:	f503 7317 	add.w	r3, r3, #604	; 0x25c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   26dc0:	e8d3 2fef 	ldaex	r2, [r3]
   26dc4:	f042 0204 	orr.w	r2, r2, #4
   26dc8:	e8c3 2fe1 	stlex	r1, r2, [r3]
   26dcc:	2900      	cmp	r1, #0
   26dce:	d1f7      	bne.n	26dc0 <cmd_echo_on+0x6>
}
   26dd0:	2000      	movs	r0, #0
   26dd2:	4770      	bx	lr

00026dd4 <cmd_colors_off>:
	Z_SHELL_SET_FLAG_ATOMIC(shell, use_colors, val, ret);
   26dd4:	6883      	ldr	r3, [r0, #8]
   26dd6:	f503 7317 	add.w	r3, r3, #604	; 0x25c
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26dda:	e8d3 2fef 	ldaex	r2, [r3]
   26dde:	f022 0202 	bic.w	r2, r2, #2
   26de2:	e8c3 2fe1 	stlex	r1, r2, [r3]
   26de6:	2900      	cmp	r1, #0
   26de8:	d1f7      	bne.n	26dda <cmd_colors_off+0x6>
}
   26dea:	2000      	movs	r0, #0
   26dec:	4770      	bx	lr

00026dee <cmd_bacskpace_mode_backspace>:
	Z_SHELL_SET_FLAG_ATOMIC(shell, mode_delete, val, ret);
   26dee:	6883      	ldr	r3, [r0, #8]
   26df0:	f503 7317 	add.w	r3, r3, #604	; 0x25c
   26df4:	e8d3 2fef 	ldaex	r2, [r3]
   26df8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   26dfc:	e8c3 2fe1 	stlex	r1, r2, [r3]
   26e00:	2900      	cmp	r1, #0
   26e02:	d1f7      	bne.n	26df4 <cmd_bacskpace_mode_backspace+0x6>
}
   26e04:	2000      	movs	r0, #0
   26e06:	4770      	bx	lr

00026e08 <cmd_echo_off>:
	Z_SHELL_SET_FLAG_ATOMIC(shell, echo, val, ret);
   26e08:	6883      	ldr	r3, [r0, #8]
   26e0a:	f503 7317 	add.w	r3, r3, #604	; 0x25c
   26e0e:	e8d3 2fef 	ldaex	r2, [r3]
   26e12:	f022 0204 	bic.w	r2, r2, #4
   26e16:	e8c3 2fe1 	stlex	r1, r2, [r3]
   26e1a:	2900      	cmp	r1, #0
   26e1c:	d1f7      	bne.n	26e0e <cmd_echo_off+0x6>
}
   26e1e:	2000      	movs	r0, #0
   26e20:	4770      	bx	lr

00026e22 <cmd_bacskpace_mode_delete>:
	Z_SHELL_SET_FLAG_ATOMIC(shell, mode_delete, val, ret);
   26e22:	6883      	ldr	r3, [r0, #8]
   26e24:	f503 7317 	add.w	r3, r3, #604	; 0x25c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   26e28:	e8d3 2fef 	ldaex	r2, [r3]
   26e2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   26e30:	e8c3 2fe1 	stlex	r1, r2, [r3]
   26e34:	2900      	cmp	r1, #0
   26e36:	d1f7      	bne.n	26e28 <cmd_bacskpace_mode_delete+0x6>
}
   26e38:	2000      	movs	r0, #0
   26e3a:	4770      	bx	lr

00026e3c <cmd_colors_on>:
	Z_SHELL_SET_FLAG_ATOMIC(shell, use_colors, val, ret);
   26e3c:	6883      	ldr	r3, [r0, #8]
   26e3e:	f503 7317 	add.w	r3, r3, #604	; 0x25c
   26e42:	e8d3 2fef 	ldaex	r2, [r3]
   26e46:	f042 0202 	orr.w	r2, r2, #2
   26e4a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   26e4e:	2900      	cmp	r1, #0
   26e50:	d1f7      	bne.n	26e42 <cmd_colors_on+0x6>
}
   26e52:	2000      	movs	r0, #0
   26e54:	4770      	bx	lr

00026e56 <remove_from_tail.part.0>:
	memcpy(item->data, src, len);
	sys_dlist_prepend(&history->list, &item->dnode);
}

/* Returns true if element was removed. */
static bool remove_from_tail(struct shell_history *history)
   26e56:	b508      	push	{r3, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   26e58:	6883      	ldr	r3, [r0, #8]

	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);

	total_len = offsetof(struct shell_history_item, data) +
			h_item->len + h_item->padding;
	ring_buf_get_finish(history->ring_buf, total_len);
   26e5a:	6800      	ldr	r0, [r0, #0]
	sys_dnode_t *const next = node->next;
   26e5c:	e9d3 2100 	ldrd	r2, r1, [r3]
	prev->next = next;
   26e60:	600a      	str	r2, [r1, #0]
	next->prev = prev;
   26e62:	6051      	str	r1, [r2, #4]
	node->next = NULL;
   26e64:	2200      	movs	r2, #0
			h_item->len + h_item->padding;
   26e66:	8919      	ldrh	r1, [r3, #8]
	node->prev = NULL;
   26e68:	e9c3 2200 	strd	r2, r2, [r3]
   26e6c:	895b      	ldrh	r3, [r3, #10]
   26e6e:	4419      	add	r1, r3
	ring_buf_get_finish(history->ring_buf, total_len);
   26e70:	310c      	adds	r1, #12
   26e72:	f7fe fd30 	bl	258d6 <ring_buf_get_finish>

	return true;
}
   26e76:	2001      	movs	r0, #1
   26e78:	bd08      	pop	{r3, pc}

00026e7a <z_shell_history_mode_exit>:
	history->current = NULL;
   26e7a:	2300      	movs	r3, #0
   26e7c:	60c3      	str	r3, [r0, #12]
}
   26e7e:	4770      	bx	lr

00026e80 <z_shell_history_get>:
{
   26e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26e82:	461f      	mov	r7, r3
	return list->head == list;
   26e84:	4603      	mov	r3, r0
   26e86:	f853 4f04 	ldr.w	r4, [r3, #4]!
   26e8a:	4616      	mov	r6, r2
	if (sys_dlist_is_empty(&history->list)) {
   26e8c:	429c      	cmp	r4, r3
   26e8e:	d102      	bne.n	26e96 <z_shell_history_get+0x16>
		*len = 0U;
   26e90:	2000      	movs	r0, #0
   26e92:	8038      	strh	r0, [r7, #0]
}
   26e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!up) { /* button down */
   26e96:	68c5      	ldr	r5, [r0, #12]
   26e98:	b9b1      	cbnz	r1, 26ec8 <z_shell_history_get+0x48>
		if (history->current == NULL) {
   26e9a:	2d00      	cmp	r5, #0
   26e9c:	d0f8      	beq.n	26e90 <z_shell_history_get+0x10>
	return (node == list->head) ? NULL : node->prev;
   26e9e:	42ac      	cmp	r4, r5
   26ea0:	d102      	bne.n	26ea8 <z_shell_history_get+0x28>
	history->current = l_item;
   26ea2:	2300      	movs	r3, #0
   26ea4:	60c3      	str	r3, [r0, #12]
	if (l_item) {
   26ea6:	e7f3      	b.n	26e90 <z_shell_history_get+0x10>
   26ea8:	686c      	ldr	r4, [r5, #4]
	history->current = l_item;
   26eaa:	60c4      	str	r4, [r0, #12]
	if (l_item) {
   26eac:	2c00      	cmp	r4, #0
   26eae:	d0ef      	beq.n	26e90 <z_shell_history_get+0x10>
		memcpy(dst, h_item->data, h_item->len);
   26eb0:	8922      	ldrh	r2, [r4, #8]
   26eb2:	4630      	mov	r0, r6
   26eb4:	f104 010c 	add.w	r1, r4, #12
   26eb8:	f000 fc08 	bl	276cc <memcpy>
		dst[*len] = '\0';
   26ebc:	2200      	movs	r2, #0
		*len = h_item->len;
   26ebe:	8923      	ldrh	r3, [r4, #8]
		return true;
   26ec0:	2001      	movs	r0, #1
		*len = h_item->len;
   26ec2:	803b      	strh	r3, [r7, #0]
		dst[*len] = '\0';
   26ec4:	54f2      	strb	r2, [r6, r3]
		return true;
   26ec6:	e7e5      	b.n	26e94 <z_shell_history_get+0x14>
		sys_dlist_peek_head_not_empty(&history->list) :
   26ec8:	2d00      	cmp	r5, #0
   26eca:	d0ee      	beq.n	26eaa <z_shell_history_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
   26ecc:	6883      	ldr	r3, [r0, #8]
   26ece:	42ab      	cmp	r3, r5
   26ed0:	d0e7      	beq.n	26ea2 <z_shell_history_get+0x22>
   26ed2:	682c      	ldr	r4, [r5, #0]
   26ed4:	e7e9      	b.n	26eaa <z_shell_history_get+0x2a>

00026ed6 <z_shell_history_purge>:

void z_shell_history_purge(struct shell_history *history)
{
   26ed6:	b538      	push	{r3, r4, r5, lr}
   26ed8:	4604      	mov	r4, r0
	if (sys_dlist_is_empty(&history->list)) {
   26eda:	1d05      	adds	r5, r0, #4
   26edc:	6863      	ldr	r3, [r4, #4]
   26ede:	42ab      	cmp	r3, r5
   26ee0:	d004      	beq.n	26eec <z_shell_history_purge+0x16>
   26ee2:	4620      	mov	r0, r4
   26ee4:	f7ff ffb7 	bl	26e56 <remove_from_tail.part.0>
	while (remove_from_tail(history)) {
   26ee8:	2800      	cmp	r0, #0
   26eea:	d1f7      	bne.n	26edc <z_shell_history_purge+0x6>
	}
}
   26eec:	bd38      	pop	{r3, r4, r5, pc}

00026eee <z_shell_history_put>:

void z_shell_history_put(struct shell_history *history, uint8_t *line,
			 size_t len)
{
   26eee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);

	/* align to word. */
	total_len += padding;

	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   26ef2:	6803      	ldr	r3, [r0, #0]
	uint32_t total_len = len + offsetof(struct shell_history_item, data);
   26ef4:	f102 050c 	add.w	r5, r2, #12
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
   26ef8:	f1c5 0800 	rsb	r8, r5, #0
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   26efc:	691b      	ldr	r3, [r3, #16]
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
   26efe:	f008 0803 	and.w	r8, r8, #3
	total_len += padding;
   26f02:	4445      	add	r5, r8
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   26f04:	429d      	cmp	r5, r3
{
   26f06:	4604      	mov	r4, r0
   26f08:	468a      	mov	sl, r1
   26f0a:	4617      	mov	r7, r2
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   26f0c:	d841      	bhi.n	26f92 <z_shell_history_put+0xa4>
	history->current = NULL;
   26f0e:	2300      	movs	r3, #0
   26f10:	60c3      	str	r3, [r0, #12]
		return;
	}

	z_shell_history_mode_exit(history);

	if (len == 0) {
   26f12:	2a00      	cmp	r2, #0
   26f14:	d03d      	beq.n	26f92 <z_shell_history_put+0xa4>
		return;
	}

	l_item = sys_dlist_peek_head(&history->list);
   26f16:	f100 0904 	add.w	r9, r0, #4
	return list->head == list;
   26f1a:	6840      	ldr	r0, [r0, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26f1c:	4581      	cmp	r9, r0
   26f1e:	d12d      	bne.n	26f7c <z_shell_history_put+0x8e>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
   26f20:	9301      	str	r3, [sp, #4]
			add_to_head(history, h_item, line, len, padding);
			ring_buf_put_finish(history->ring_buf, claim_len);
			break;
		}

		ring_buf_put_finish(history->ring_buf, 0);
   26f22:	f04f 0b00 	mov.w	fp, #0
		claim_len = ring_buf_put_claim(history->ring_buf,
   26f26:	462a      	mov	r2, r5
   26f28:	6820      	ldr	r0, [r4, #0]
   26f2a:	a901      	add	r1, sp, #4
   26f2c:	f7fe fc6f 	bl	2580e <ring_buf_put_claim>
		if (claim_len < total_len) {
   26f30:	4285      	cmp	r5, r0
		claim_len = ring_buf_put_claim(history->ring_buf,
   26f32:	4606      	mov	r6, r0
		if (claim_len < total_len) {
   26f34:	d930      	bls.n	26f98 <z_shell_history_put+0xaa>
				ring_buf_put_claim(history->ring_buf,
   26f36:	462a      	mov	r2, r5
   26f38:	6820      	ldr	r0, [r4, #0]
   26f3a:	a901      	add	r1, sp, #4
   26f3c:	f7fe fc67 	bl	2580e <ring_buf_put_claim>
			if (claim2_len == total_len) {
   26f40:	4285      	cmp	r5, r0
   26f42:	d12a      	bne.n	26f9a <z_shell_history_put+0xac>
				ring_buf_put_finish(history->ring_buf,
   26f44:	4631      	mov	r1, r6
   26f46:	6820      	ldr	r0, [r4, #0]
				padding += claim_len;
   26f48:	44b0      	add	r8, r6
				ring_buf_put_finish(history->ring_buf,
   26f4a:	f7fe fc7c 	bl	25846 <ring_buf_put_finish>
				padding += claim_len;
   26f4e:	462e      	mov	r6, r5
   26f50:	fa1f f888 	uxth.w	r8, r8
			add_to_head(history, h_item, line, len, padding);
   26f54:	9d01      	ldr	r5, [sp, #4]
	memcpy(item->data, src, len);
   26f56:	4651      	mov	r1, sl
   26f58:	463a      	mov	r2, r7
	item->len = len;
   26f5a:	812f      	strh	r7, [r5, #8]
	item->padding = padding;
   26f5c:	f8a5 800a 	strh.w	r8, [r5, #10]
	memcpy(item->data, src, len);
   26f60:	f105 000c 	add.w	r0, r5, #12
   26f64:	f000 fbb2 	bl	276cc <memcpy>
	sys_dnode_t *const head = list->head;
   26f68:	6863      	ldr	r3, [r4, #4]
			ring_buf_put_finish(history->ring_buf, claim_len);
   26f6a:	4631      	mov	r1, r6
	node->prev = list;
   26f6c:	e9c5 3900 	strd	r3, r9, [r5]
   26f70:	6820      	ldr	r0, [r4, #0]
	head->prev = node;
   26f72:	605d      	str	r5, [r3, #4]
	list->head = node;
   26f74:	6065      	str	r5, [r4, #4]
   26f76:	f7fe fc66 	bl	25846 <ring_buf_put_finish>
			break;
   26f7a:	e00a      	b.n	26f92 <z_shell_history_put+0xa4>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
   26f7c:	9001      	str	r0, [sp, #4]
	if (l_item &&
   26f7e:	2800      	cmp	r0, #0
   26f80:	d0cf      	beq.n	26f22 <z_shell_history_put+0x34>
	   (h_item->len == len) &&
   26f82:	8903      	ldrh	r3, [r0, #8]
	if (l_item &&
   26f84:	4293      	cmp	r3, r2
   26f86:	d1cc      	bne.n	26f22 <z_shell_history_put+0x34>
	   (memcmp(h_item->data, line, len) == 0)) {
   26f88:	300c      	adds	r0, #12
   26f8a:	f000 fb78 	bl	2767e <memcmp>
	   (h_item->len == len) &&
   26f8e:	2800      	cmp	r0, #0
   26f90:	d1c7      	bne.n	26f22 <z_shell_history_put+0x34>
			 * of ring buffer capacity length.
			 */
			ring_buf_reset(history->ring_buf);
		}
	} while (1);
}
   26f92:	b003      	add	sp, #12
   26f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (claim_len == total_len) {
   26f98:	d0dc      	beq.n	26f54 <z_shell_history_put+0x66>
		ring_buf_put_finish(history->ring_buf, 0);
   26f9a:	2100      	movs	r1, #0
   26f9c:	6820      	ldr	r0, [r4, #0]
   26f9e:	f7fe fc52 	bl	25846 <ring_buf_put_finish>
	if (sys_dlist_is_empty(&history->list)) {
   26fa2:	6863      	ldr	r3, [r4, #4]
   26fa4:	4599      	cmp	r9, r3
   26fa6:	d108      	bne.n	26fba <z_shell_history_put+0xcc>
   26fa8:	2208      	movs	r2, #8
			ring_buf_reset(history->ring_buf);
   26faa:	6820      	ldr	r0, [r4, #0]
   26fac:	2100      	movs	r1, #0
	buf->tail = 0;
   26fae:	e9c0 bb00 	strd	fp, fp, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
   26fb2:	4410      	add	r0, r2
   26fb4:	f000 fbb5 	bl	27722 <memset>
}
   26fb8:	e7b5      	b.n	26f26 <z_shell_history_put+0x38>
   26fba:	4620      	mov	r0, r4
   26fbc:	f7ff ff4b 	bl	26e56 <remove_from_tail.part.0>
		if (remove_from_tail(history) == false) {
   26fc0:	2800      	cmp	r0, #0
   26fc2:	d1b0      	bne.n	26f26 <z_shell_history_put+0x38>
   26fc4:	e7f0      	b.n	26fa8 <z_shell_history_put+0xba>

00026fc6 <z_shell_history_init>:

void z_shell_history_init(struct shell_history *history)
{
	sys_dlist_init(&history->list);
   26fc6:	1d03      	adds	r3, r0, #4
	list->tail = (sys_dnode_t *)list;
   26fc8:	e9c0 3301 	strd	r3, r3, [r0, #4]
	history->current = NULL;
   26fcc:	2300      	movs	r3, #0
   26fce:	60c3      	str	r3, [r0, #12]
}
   26fd0:	4770      	bx	lr

00026fd2 <msg_from_fifo.isra.0>:
		backend->control_block->dropped_cnt = 0;
		backend->control_block->state = SHELL_LOG_BACKEND_ENABLED;
	}
}

static struct log_msg *msg_from_fifo(const struct shell_log_backend *backend)
   26fd2:	b507      	push	{r0, r1, r2, lr}
	return z_impl_k_msgq_get(msgq, data, timeout);
   26fd4:	2200      	movs	r2, #0
   26fd6:	2300      	movs	r3, #0
   26fd8:	4669      	mov	r1, sp
   26fda:	f7fc ff1b 	bl	23e14 <z_impl_k_msgq_get>
	struct shell_log_backend_msg msg;
	int err;

	err = k_msgq_get(backend->msgq, &msg, K_NO_WAIT);

	return (err == 0) ? msg.msg : NULL;
   26fde:	b918      	cbnz	r0, 26fe8 <msg_from_fifo.isra.0+0x16>
   26fe0:	9800      	ldr	r0, [sp, #0]
}
   26fe2:	b003      	add	sp, #12
   26fe4:	f85d fb04 	ldr.w	pc, [sp], #4
	return (err == 0) ? msg.msg : NULL;
   26fe8:	2000      	movs	r0, #0
   26fea:	e7fa      	b.n	26fe2 <msg_from_fifo.isra.0+0x10>

00026fec <dropped>:
	}
}

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   26fec:	6843      	ldr	r3, [r0, #4]
   26fee:	681b      	ldr	r3, [r3, #0]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   26ff0:	e9d3 3206 	ldrd	r3, r2, [r3, #24]
   26ff4:	e8d3 0fef 	ldaex	r0, [r3]
   26ff8:	4408      	add	r0, r1
   26ffa:	e8c3 0fec 	stlex	ip, r0, [r3]
   26ffe:	f1bc 0f00 	cmp.w	ip, #0
   27002:	d1f7      	bne.n	26ff4 <dropped+0x8>
   27004:	68d3      	ldr	r3, [r2, #12]
   27006:	e8d3 2fef 	ldaex	r2, [r3]
   2700a:	440a      	add	r2, r1
   2700c:	e8c3 2fe0 	stlex	r0, r2, [r3]
   27010:	2800      	cmp	r0, #0
   27012:	d1f8      	bne.n	27006 <dropped+0x1a>
	const struct shell_log_backend *log_backend = shell->log_backend;

	atomic_add(&shell->stats->log_lost_cnt, cnt);
	atomic_add(&log_backend->control_block->dropped_cnt, cnt);
}
   27014:	4770      	bx	lr

00027016 <put>:
{
   27016:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   2701a:	6843      	ldr	r3, [r0, #4]
	log_msg_get(msg);
   2701c:	4608      	mov	r0, r1
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   2701e:	681c      	ldr	r4, [r3, #0]
{
   27020:	460d      	mov	r5, r1
			shell->ctx->internal.flags.use_colors;
   27022:	68a3      	ldr	r3, [r4, #8]
   27024:	f8d3 625c 	ldr.w	r6, [r3, #604]	; 0x25c
	log_msg_get(msg);
   27028:	f7fe ff0b 	bl	25e42 <log_msg_get>
	switch (shell->log_backend->control_block->state) {
   2702c:	69e3      	ldr	r3, [r4, #28]
			shell->ctx->internal.flags.use_colors;
   2702e:	f3c6 0640 	ubfx	r6, r6, #1, #1
	switch (shell->log_backend->control_block->state) {
   27032:	68db      	ldr	r3, [r3, #12]
   27034:	791b      	ldrb	r3, [r3, #4]
   27036:	2b01      	cmp	r3, #1
   27038:	d005      	beq.n	27046 <put+0x30>
   2703a:	2b03      	cmp	r3, #3
   2703c:	d068      	beq.n	27110 <put+0xfa>
		log_msg_put(msg);
   2703e:	4628      	mov	r0, r5
   27040:	f7fe ff2a 	bl	25e98 <log_msg_put>
}
   27044:	e032      	b.n	270ac <put+0x96>
	struct shell_log_backend_msg t_msg = {
   27046:	9500      	str	r5, [sp, #0]
	return z_impl_k_uptime_ticks();
   27048:	f000 ffaf 	bl	27faa <z_impl_k_uptime_ticks>
   2704c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   27050:	460a      	mov	r2, r1
   27052:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   27056:	f240 36e7 	movw	r6, #999	; 0x3e7
   2705a:	2700      	movs	r7, #0
   2705c:	fba0 0103 	umull	r0, r1, r0, r3
   27060:	fb03 1102 	mla	r1, r3, r2, r1
   27064:	0bc3      	lsrs	r3, r0, #15
   27066:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
	return (uint32_t)k_uptime_get();
   2706a:	9301      	str	r3, [sp, #4]
   2706c:	46b1      	mov	r9, r6
   2706e:	46ba      	mov	sl, r7
		err = k_msgq_put(shell->log_backend->msgq, &t_msg,
   27070:	69e3      	ldr	r3, [r4, #28]
   27072:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   27076:	6919      	ldr	r1, [r3, #16]
   27078:	f8d3 8004 	ldr.w	r8, [r3, #4]
   2707c:	fbe5 9a01 	umlal	r9, sl, r5, r1
   27080:	2300      	movs	r3, #0
   27082:	4648      	mov	r0, r9
   27084:	4651      	mov	r1, sl
   27086:	f7e9 f92b 	bl	102e0 <__aeabi_uldivmod>
   2708a:	4602      	mov	r2, r0
   2708c:	460b      	mov	r3, r1
	return z_impl_k_msgq_put(msgq, data, timeout);
   2708e:	4669      	mov	r1, sp
   27090:	4640      	mov	r0, r8
   27092:	f7fc fe65 	bl	23d60 <z_impl_k_msgq_put>
		switch (err) {
   27096:	f110 0f23 	cmn.w	r0, #35	; 0x23
   2709a:	d00a      	beq.n	270b2 <put+0x9c>
   2709c:	300b      	adds	r0, #11
   2709e:	d008      	beq.n	270b2 <put+0x9c>
			signal = &shell->ctx->signals[SHELL_SIGNAL_LOG_MSG];
   270a0:	68a0      	ldr	r0, [r4, #8]
   270a2:	f500 701c 	add.w	r0, r0, #624	; 0x270
	return z_impl_k_poll_signal_raise(sig, result);
   270a6:	2100      	movs	r1, #0
   270a8:	f7fd fe2c 	bl	24d04 <z_impl_k_poll_signal_raise>
}
   270ac:	b004      	add	sp, #16
   270ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct k_msgq *msgq = shell->log_backend->msgq;
   270b2:	69e3      	ldr	r3, [r4, #28]
   270b4:	f8d3 8004 	ldr.w	r8, [r3, #4]
	uint32_t timeout = shell->log_backend->timeout;
   270b8:	f8d3 9010 	ldr.w	r9, [r3, #16]
	return z_impl_k_uptime_ticks();
   270bc:	f000 ff75 	bl	27faa <z_impl_k_uptime_ticks>
   270c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   270c4:	460a      	mov	r2, r1
   270c6:	fba0 0103 	umull	r0, r1, r0, r3
   270ca:	fb03 1102 	mla	r1, r3, r2, r1
   270ce:	ea4f 3ad0 	mov.w	sl, r0, lsr #15
   270d2:	ea4a 4a41 	orr.w	sl, sl, r1, lsl #17
	return z_impl_k_msgq_peek(msgq, data);
   270d6:	4640      	mov	r0, r8
   270d8:	a902      	add	r1, sp, #8
   270da:	f000 fde8 	bl	27cae <z_impl_k_msgq_peek>
		if (err == 0 && ((now - msg.timestamp) > timeout)) {
   270de:	2800      	cmp	r0, #0
   270e0:	d1c4      	bne.n	2706c <put+0x56>
   270e2:	9b03      	ldr	r3, [sp, #12]
   270e4:	ebaa 0303 	sub.w	r3, sl, r3
   270e8:	4599      	cmp	r9, r3
   270ea:	d2bf      	bcs.n	2706c <put+0x56>
	return z_impl_k_msgq_get(msgq, data, timeout);
   270ec:	2300      	movs	r3, #0
   270ee:	2200      	movs	r2, #0
   270f0:	a902      	add	r1, sp, #8
   270f2:	4640      	mov	r0, r8
   270f4:	f7fc fe8e 	bl	23e14 <z_impl_k_msgq_get>
			log_msg_put(msg.msg);
   270f8:	9802      	ldr	r0, [sp, #8]
   270fa:	f7fe fecd 	bl	25e98 <log_msg_put>
   270fe:	69a3      	ldr	r3, [r4, #24]
   27100:	e8d3 2fef 	ldaex	r2, [r3]
   27104:	3201      	adds	r2, #1
   27106:	e8c3 2fe1 	stlex	r1, r2, [r3]
   2710a:	2900      	cmp	r1, #0
   2710c:	d0e3      	beq.n	270d6 <put+0xc0>
   2710e:	e7f7      	b.n	27100 <put+0xea>
		z_shell_cmd_line_erase(shell);
   27110:	4620      	mov	r0, r4
   27112:	f7ff fcf0 	bl	26af6 <z_shell_cmd_line_erase>
		msg_process(shell->log_backend->log_output, msg, colors);
   27116:	69e3      	ldr	r3, [r4, #28]
		flags |= LOG_OUTPUT_FLAG_COLORS;
   27118:	2e00      	cmp	r6, #0
	log_output_msg_process(log_output, msg, flags);
   2711a:	bf0c      	ite	eq
   2711c:	220e      	moveq	r2, #14
   2711e:	220f      	movne	r2, #15
   27120:	4629      	mov	r1, r5
   27122:	6898      	ldr	r0, [r3, #8]
   27124:	f7f7 ff94 	bl	1f050 <log_output_msg_process>
	log_msg_put(msg);
   27128:	e789      	b.n	2703e <put+0x28>

0002712a <z_shell_log_backend_output_func>:
{
   2712a:	4613      	mov	r3, r2
   2712c:	b510      	push	{r4, lr}
   2712e:	460c      	mov	r4, r1
	z_shell_print_stream(ctx, data, length);
   27130:	460a      	mov	r2, r1
   27132:	4601      	mov	r1, r0
   27134:	4618      	mov	r0, r3
   27136:	f7ff fd33 	bl	26ba0 <z_shell_print_stream>
}
   2713a:	4620      	mov	r0, r4
   2713c:	bd10      	pop	{r4, pc}

0002713e <z_shell_log_backend_enable>:
{
   2713e:	b538      	push	{r3, r4, r5, lr}
   27140:	4604      	mov	r4, r0
   27142:	460d      	mov	r5, r1
		log_backend_enable(backend->backend, ctx, init_log_level);
   27144:	6800      	ldr	r0, [r0, #0]
   27146:	f7f7 fbbf 	bl	1e8c8 <log_backend_enable>
		backend->control_block->dropped_cnt = 0;
   2714a:	2200      	movs	r2, #0
		log_output_ctx_set(backend->log_output, ctx);
   2714c:	68a3      	ldr	r3, [r4, #8]
   2714e:	685b      	ldr	r3, [r3, #4]
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *output,
				      void *ctx)
{
	output->control_block->ctx = ctx;
   27150:	605d      	str	r5, [r3, #4]
		backend->control_block->dropped_cnt = 0;
   27152:	68e3      	ldr	r3, [r4, #12]
   27154:	601a      	str	r2, [r3, #0]
		backend->control_block->state = SHELL_LOG_BACKEND_ENABLED;
   27156:	2201      	movs	r2, #1
   27158:	711a      	strb	r2, [r3, #4]
}
   2715a:	bd38      	pop	{r3, r4, r5, pc}

0002715c <z_shell_log_backend_disable>:
{
   2715c:	b510      	push	{r4, lr}
   2715e:	4604      	mov	r4, r0
	while ((msg = msg_from_fifo(backend)) != NULL) {
   27160:	6860      	ldr	r0, [r4, #4]
   27162:	f7ff ff36 	bl	26fd2 <msg_from_fifo.isra.0>
   27166:	b930      	cbnz	r0, 27176 <z_shell_log_backend_disable+0x1a>
	log_backend_disable(backend->backend);
   27168:	6820      	ldr	r0, [r4, #0]
   2716a:	f7fe fdb9 	bl	25ce0 <log_backend_disable>
	backend->control_block->state = SHELL_LOG_BACKEND_DISABLED;
   2716e:	2202      	movs	r2, #2
   27170:	68e3      	ldr	r3, [r4, #12]
   27172:	711a      	strb	r2, [r3, #4]
}
   27174:	bd10      	pop	{r4, pc}
		log_msg_put(msg);
   27176:	f7fe fe8f 	bl	25e98 <log_msg_put>
   2717a:	e7f1      	b.n	27160 <z_shell_log_backend_disable+0x4>

0002717c <z_shell_log_backend_process>:
{
   2717c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2717e:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   27180:	2200      	movs	r2, #0
			(const struct shell *)backend->backend->cb->ctx;
   27182:	6803      	ldr	r3, [r0, #0]
	const struct shell *shell =
   27184:	685b      	ldr	r3, [r3, #4]
   27186:	681e      	ldr	r6, [r3, #0]
			shell->ctx->internal.flags.use_colors;
   27188:	68b3      	ldr	r3, [r6, #8]
   2718a:	f8d3 525c 	ldr.w	r5, [r3, #604]	; 0x25c
   2718e:	68c3      	ldr	r3, [r0, #12]
   27190:	f3c5 0540 	ubfx	r5, r5, #1, #1
   27194:	e8d3 7fef 	ldaex	r7, [r3]
   27198:	e8c3 2fe1 	stlex	r1, r2, [r3]
   2719c:	2900      	cmp	r1, #0
   2719e:	d1f9      	bne.n	27194 <z_shell_log_backend_process+0x18>
	if (dropped) {
   271a0:	b19f      	cbz	r7, 271ca <z_shell_log_backend_process+0x4e>
		if (colors) {
   271a2:	b14d      	cbz	r5, 271b8 <z_shell_log_backend_process+0x3c>
	memcpy(color, &shell->ctx->vt100_ctx.col, sizeof(*color));
   271a4:	68b1      	ldr	r1, [r6, #8]
   271a6:	2202      	movs	r2, #2
   271a8:	312e      	adds	r1, #46	; 0x2e
   271aa:	a801      	add	r0, sp, #4
   271ac:	f000 fa8e 	bl	276cc <memcpy>
			z_shell_vt100_color_set(shell, SHELL_VT100_COLOR_RED);
   271b0:	2102      	movs	r1, #2
   271b2:	4630      	mov	r0, r6
   271b4:	f7f9 fbca 	bl	2094c <z_shell_vt100_color_set>
		log_output_dropped_process(backend->log_output, dropped);
   271b8:	4639      	mov	r1, r7
   271ba:	68a0      	ldr	r0, [r4, #8]
   271bc:	f7f7 ffc4 	bl	1f148 <log_output_dropped_process>
		if (colors) {
   271c0:	b11d      	cbz	r5, 271ca <z_shell_log_backend_process+0x4e>
			z_shell_vt100_colors_restore(shell, &col);
   271c2:	4630      	mov	r0, r6
   271c4:	a901      	add	r1, sp, #4
   271c6:	f7f9 fbe5 	bl	20994 <z_shell_vt100_colors_restore>
	struct log_msg *msg = msg_from_fifo(backend);
   271ca:	6860      	ldr	r0, [r4, #4]
   271cc:	f7ff ff01 	bl	26fd2 <msg_from_fifo.isra.0>
	if (!msg) {
   271d0:	4604      	mov	r4, r0
   271d2:	b168      	cbz	r0, 271f0 <z_shell_log_backend_process+0x74>
	msg_process(shell->log_backend->log_output, msg, colors);
   271d4:	69f3      	ldr	r3, [r6, #28]
		flags |= LOG_OUTPUT_FLAG_COLORS;
   271d6:	2d00      	cmp	r5, #0
	log_output_msg_process(log_output, msg, flags);
   271d8:	4601      	mov	r1, r0
   271da:	bf08      	it	eq
   271dc:	220e      	moveq	r2, #14
   271de:	6898      	ldr	r0, [r3, #8]
   271e0:	bf18      	it	ne
   271e2:	220f      	movne	r2, #15
   271e4:	f7f7 ff34 	bl	1f050 <log_output_msg_process>
	log_msg_put(msg);
   271e8:	4620      	mov	r0, r4
   271ea:	f7fe fe55 	bl	25e98 <log_msg_put>
	return true;
   271ee:	2001      	movs	r0, #1
}
   271f0:	b003      	add	sp, #12
   271f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000271f4 <panic>:
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   271f4:	6843      	ldr	r3, [r0, #4]
{
   271f6:	b510      	push	{r4, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   271f8:	681c      	ldr	r4, [r3, #0]
	err = shell->iface->api->enable(shell->iface, true);
   271fa:	2101      	movs	r1, #1
   271fc:	6860      	ldr	r0, [r4, #4]
   271fe:	6803      	ldr	r3, [r0, #0]
   27200:	689b      	ldr	r3, [r3, #8]
   27202:	4798      	blx	r3
	if (err == 0) {
   27204:	b9d0      	cbnz	r0, 2723c <panic+0x48>
		shell->log_backend->control_block->state =
   27206:	2203      	movs	r2, #3
   27208:	69e3      	ldr	r3, [r4, #28]
   2720a:	68db      	ldr	r3, [r3, #12]
   2720c:	711a      	strb	r2, [r3, #4]
		z_shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
   2720e:	68a0      	ldr	r0, [r4, #8]
   27210:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   27212:	8f41      	ldrh	r1, [r0, #58]	; 0x3a
   27214:	3020      	adds	r0, #32
   27216:	f7ff fa05 	bl	26624 <z_shell_multiline_data_calc>
		z_shell_op_cursor_vert_move(shell, -1);
   2721a:	f04f 31ff 	mov.w	r1, #4294967295
   2721e:	4620      	mov	r0, r4
   27220:	f7f9 fb2e 	bl	20880 <z_shell_op_cursor_vert_move>
					   -shell->ctx->vt100_ctx.cons.cur_x);
   27224:	68a3      	ldr	r3, [r4, #8]
		z_shell_op_cursor_horiz_move(shell,
   27226:	4620      	mov	r0, r4
					   -shell->ctx->vt100_ctx.cons.cur_x);
   27228:	8c19      	ldrh	r1, [r3, #32]
		z_shell_op_cursor_horiz_move(shell,
   2722a:	4249      	negs	r1, r1
   2722c:	f7f9 fb38 	bl	208a0 <z_shell_op_cursor_horiz_move>
			while (z_shell_log_backend_process(
   27230:	69e0      	ldr	r0, [r4, #28]
   27232:	f7ff ffa3 	bl	2717c <z_shell_log_backend_process>
   27236:	2800      	cmp	r0, #0
   27238:	d1fa      	bne.n	27230 <panic+0x3c>
}
   2723a:	bd10      	pop	{r4, pc}
		z_shell_log_backend_disable(shell->log_backend);
   2723c:	69e0      	ldr	r0, [r4, #28]
}
   2723e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_log_backend_disable(shell->log_backend);
   27242:	f7ff bf8b 	b.w	2715c <z_shell_log_backend_disable>

00027246 <z_shell_has_wildcard>:
{
   27246:	b510      	push	{r4, lr}
   27248:	4604      	mov	r4, r0
   2724a:	b908      	cbnz	r0, 27250 <z_shell_has_wildcard+0xa>
	return false;
   2724c:	2000      	movs	r0, #0
}
   2724e:	bd10      	pop	{r4, pc}
   27250:	f000 f9ea 	bl	27628 <strlen>
	for (size_t i = 0; i < str_len; i++) {
   27254:	2300      	movs	r3, #0
   27256:	b280      	uxth	r0, r0
   27258:	4283      	cmp	r3, r0
   2725a:	d2f7      	bcs.n	2724c <z_shell_has_wildcard+0x6>
		if ((str[i] == '?') || (str[i] == '*')) {
   2725c:	5ce2      	ldrb	r2, [r4, r3]
   2725e:	2a3f      	cmp	r2, #63	; 0x3f
   27260:	d003      	beq.n	2726a <z_shell_has_wildcard+0x24>
   27262:	2a2a      	cmp	r2, #42	; 0x2a
   27264:	d001      	beq.n	2726a <z_shell_has_wildcard+0x24>
	for (size_t i = 0; i < str_len; i++) {
   27266:	3301      	adds	r3, #1
   27268:	e7f6      	b.n	27258 <z_shell_has_wildcard+0x12>
			return true;
   2726a:	2001      	movs	r0, #1
   2726c:	e7ef      	b.n	2724e <z_shell_has_wildcard+0x8>

0002726e <z_shell_wildcard_prepare>:
{
   2726e:	b510      	push	{r4, lr}
   27270:	4604      	mov	r4, r0
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
   27272:	6880      	ldr	r0, [r0, #8]
   27274:	f44f 7280 	mov.w	r2, #256	; 0x100
   27278:	2100      	movs	r1, #0
   2727a:	f500 709f 	add.w	r0, r0, #318	; 0x13e
   2727e:	f000 fa50 	bl	27722 <memset>
	memcpy(shell->ctx->temp_buff,
   27282:	68a0      	ldr	r0, [r4, #8]
   27284:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   27286:	f100 013e 	add.w	r1, r0, #62	; 0x3e
   2728a:	f500 709f 	add.w	r0, r0, #318	; 0x13e
   2728e:	f000 fa1d 	bl	276cc <memcpy>
	z_shell_spaces_trim(shell->ctx->temp_buff);
   27292:	68a0      	ldr	r0, [r4, #8]
   27294:	f500 709f 	add.w	r0, r0, #318	; 0x13e
   27298:	f7ff fb0a 	bl	268b0 <z_shell_spaces_trim>
	shell->ctx->cmd_tmp_buff_len = z_shell_strlen(shell->ctx->temp_buff) + 1;
   2729c:	68a3      	ldr	r3, [r4, #8]
   2729e:	f513 709f 	adds.w	r0, r3, #318	; 0x13e
   272a2:	d006      	beq.n	272b2 <z_shell_wildcard_prepare+0x44>
   272a4:	f000 f9c0 	bl	27628 <strlen>
   272a8:	b283      	uxth	r3, r0
   272aa:	68a2      	ldr	r2, [r4, #8]
   272ac:	3301      	adds	r3, #1
   272ae:	8793      	strh	r3, [r2, #60]	; 0x3c
}
   272b0:	bd10      	pop	{r4, pc}
   272b2:	4603      	mov	r3, r0
   272b4:	e7f9      	b.n	272aa <z_shell_wildcard_prepare+0x3c>

000272b6 <z_shell_wildcard_finalize>:

void z_shell_wildcard_finalize(const struct shell *shell)
{
   272b6:	b510      	push	{r4, lr}
   272b8:	4604      	mov	r4, r0
	memcpy(shell->ctx->cmd_buff,
   272ba:	6880      	ldr	r0, [r0, #8]
   272bc:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   272be:	f500 719f 	add.w	r1, r0, #318	; 0x13e
   272c2:	303e      	adds	r0, #62	; 0x3e
   272c4:	f000 fa02 	bl	276cc <memcpy>
	       shell->ctx->temp_buff,
	       shell->ctx->cmd_tmp_buff_len);
	shell->ctx->cmd_buff_len = shell->ctx->cmd_tmp_buff_len;
   272c8:	68a3      	ldr	r3, [r4, #8]
   272ca:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
   272cc:	871a      	strh	r2, [r3, #56]	; 0x38
}
   272ce:	bd10      	pop	{r4, pc}

000272d0 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   272d0:	2200      	movs	r2, #0
   272d2:	e9c0 2200 	strd	r2, r2, [r0]
   272d6:	6082      	str	r2, [r0, #8]
}
   272d8:	4770      	bx	lr

000272da <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   272da:	b2cb      	uxtb	r3, r1
   272dc:	210c      	movs	r1, #12
   272de:	6902      	ldr	r2, [r0, #16]
   272e0:	fb03 2101 	mla	r1, r3, r1, r2
   272e4:	6f88      	ldr	r0, [r1, #120]	; 0x78
}
   272e6:	f000 0007 	and.w	r0, r0, #7
   272ea:	4770      	bx	lr

000272ec <set_off_state>:
	__asm__ volatile(
   272ec:	f04f 0320 	mov.w	r3, #32
   272f0:	f3ef 8211 	mrs	r2, BASEPRI
   272f4:	f383 8811 	msr	BASEPRI, r3
   272f8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   272fc:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   272fe:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   27302:	d001      	beq.n	27308 <set_off_state+0x1c>
   27304:	428b      	cmp	r3, r1
   27306:	d107      	bne.n	27318 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   27308:	2301      	movs	r3, #1
   2730a:	6003      	str	r3, [r0, #0]
	int err = 0;
   2730c:	2000      	movs	r0, #0
	__asm__ volatile(
   2730e:	f382 8811 	msr	BASEPRI, r2
   27312:	f3bf 8f6f 	isb	sy
}
   27316:	4770      	bx	lr
		err = -EPERM;
   27318:	f04f 30ff 	mov.w	r0, #4294967295
   2731c:	e7f7      	b.n	2730e <set_off_state+0x22>

0002731e <set_starting_state>:
{
   2731e:	b510      	push	{r4, lr}
	__asm__ volatile(
   27320:	f04f 0320 	mov.w	r3, #32
   27324:	f3ef 8211 	mrs	r2, BASEPRI
   27328:	f383 8811 	msr	BASEPRI, r3
   2732c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   27330:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   27332:	f003 0407 	and.w	r4, r3, #7
   27336:	2c01      	cmp	r4, #1
   27338:	d106      	bne.n	27348 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2733a:	6001      	str	r1, [r0, #0]
	int err = 0;
   2733c:	2000      	movs	r0, #0
	__asm__ volatile(
   2733e:	f382 8811 	msr	BASEPRI, r2
   27342:	f3bf 8f6f 	isb	sy
}
   27346:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   27348:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   2734c:	428b      	cmp	r3, r1
		err = -EALREADY;
   2734e:	bf14      	ite	ne
   27350:	f04f 30ff 	movne.w	r0, #4294967295
   27354:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   27358:	e7f1      	b.n	2733e <set_starting_state+0x20>

0002735a <set_on_state>:
	__asm__ volatile(
   2735a:	f04f 0320 	mov.w	r3, #32
   2735e:	f3ef 8211 	mrs	r2, BASEPRI
   27362:	f383 8811 	msr	BASEPRI, r3
   27366:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2736a:	6803      	ldr	r3, [r0, #0]
   2736c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   27370:	f043 0302 	orr.w	r3, r3, #2
   27374:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   27376:	f382 8811 	msr	BASEPRI, r2
   2737a:	f3bf 8f6f 	isb	sy
}
   2737e:	4770      	bx	lr

00027380 <onoff_started_callback>:
{
   27380:	b410      	push	{r4}
	notify(mgr, 0);
   27382:	241c      	movs	r4, #28
	return &data->mgr[type];
   27384:	6900      	ldr	r0, [r0, #16]
   27386:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   27388:	fb03 0004 	mla	r0, r3, r4, r0
   2738c:	2100      	movs	r1, #0
}
   2738e:	bc10      	pop	{r4}
	notify(mgr, 0);
   27390:	4710      	bx	r2

00027392 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   27392:	2003      	movs	r0, #3
   27394:	f7fb bfae 	b.w	232f4 <nrfx_clock_start>

00027398 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   27398:	2002      	movs	r0, #2
   2739a:	f7fb bfab 	b.w	232f4 <nrfx_clock_start>

0002739e <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2739e:	2000      	movs	r0, #0
   273a0:	f7fb bfa8 	b.w	232f4 <nrfx_clock_start>

000273a4 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   273a4:	2003      	movs	r0, #3
   273a6:	f7fb bff5 	b.w	23394 <nrfx_clock_stop>

000273aa <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   273aa:	2002      	movs	r0, #2
   273ac:	f7fb bff2 	b.w	23394 <nrfx_clock_stop>

000273b0 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   273b0:	2000      	movs	r0, #0
   273b2:	f7fb bfef 	b.w	23394 <nrfx_clock_stop>

000273b6 <blocking_start_callback>:
{
   273b6:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   273b8:	f7fc be4c 	b.w	24054 <z_impl_k_sem_give>

000273bc <api_stop>:
{
   273bc:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
   273be:	240c      	movs	r4, #12
   273c0:	b2c9      	uxtb	r1, r1
   273c2:	434c      	muls	r4, r1
{
   273c4:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   273c6:	6900      	ldr	r0, [r0, #16]
   273c8:	f104 0378 	add.w	r3, r4, #120	; 0x78
   273cc:	2180      	movs	r1, #128	; 0x80
   273ce:	4418      	add	r0, r3
   273d0:	f7ff ff8c 	bl	272ec <set_off_state>
	if (err < 0) {
   273d4:	2800      	cmp	r0, #0
   273d6:	db04      	blt.n	273e2 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   273d8:	6869      	ldr	r1, [r5, #4]
   273da:	440c      	add	r4, r1
   273dc:	6863      	ldr	r3, [r4, #4]
   273de:	4798      	blx	r3
	return 0;
   273e0:	2000      	movs	r0, #0
}
   273e2:	bd38      	pop	{r3, r4, r5, pc}

000273e4 <api_start>:
{
   273e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
   273e8:	240c      	movs	r4, #12
   273ea:	b2c9      	uxtb	r1, r1
   273ec:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   273ee:	6905      	ldr	r5, [r0, #16]
{
   273f0:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   273f2:	f104 0078 	add.w	r0, r4, #120	; 0x78
   273f6:	2180      	movs	r1, #128	; 0x80
   273f8:	4428      	add	r0, r5
{
   273fa:	4690      	mov	r8, r2
   273fc:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   273fe:	f7ff ff8e 	bl	2731e <set_starting_state>
	if (err < 0) {
   27402:	2800      	cmp	r0, #0
   27404:	db06      	blt.n	27414 <api_start+0x30>
	subdata->cb = cb;
   27406:	4425      	add	r5, r4
	subdata->user_data = user_data;
   27408:	e9c5 871c 	strd	r8, r7, [r5, #112]	; 0x70
	 get_sub_config(dev, type)->start();
   2740c:	6873      	ldr	r3, [r6, #4]
   2740e:	591b      	ldr	r3, [r3, r4]
   27410:	4798      	blx	r3
	return 0;
   27412:	2000      	movs	r0, #0
}
   27414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027418 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   27418:	4770      	bx	lr

0002741a <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2741a:	4770      	bx	lr

0002741c <sys_clock_disable>:
   2741c:	4770      	bx	lr

0002741e <spm_request_random_number>:
	spm_request_system_reboot();
}
#endif /* CONFIG_SPM_SERVICE_REBOOT */

#ifdef CONFIG_SPM_SERVICE_RNG
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
   2741e:	b510      	push	{r4, lr}
   27420:	b40f      	push	{r0, r1, r2, r3}
   27422:	f7fa fb39 	bl	21a98 <before_nse>
   27426:	bc0f      	pop	{r0, r1, r2, r3}
   27428:	f7e4 fdde 	bl	bfe8 <spm_request_random_number_nse>
   2742c:	b40f      	push	{r0, r1, r2, r3}
   2742e:	f7fa fb3d 	bl	21aac <after_nse>
   27432:	bc0f      	pop	{r0, r1, r2, r3}
   27434:	bd10      	pop	{r4, pc}

00027436 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   27436:	2100      	movs	r1, #0
   27438:	2001      	movs	r0, #1
   2743a:	f7fa bbc3 	b.w	21bc4 <z_arm_fatal_error>

0002743e <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   2743e:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   27442:	f383 880b 	msr	PSPLIM, r3
}
   27446:	4770      	bx	lr

00027448 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   27448:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2744a:	6800      	ldr	r0, [r0, #0]
   2744c:	f7fa bbba 	b.w	21bc4 <z_arm_fatal_error>

00027450 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   27450:	b508      	push	{r3, lr}
	handler();
   27452:	f7fa fc79 	bl	21d48 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   27456:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2745a:	f7fa bcc1 	b.w	21de0 <z_arm_exc_exit>

0002745e <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   2745e:	4770      	bx	lr

00027460 <z_arm_restore_fp_context>:
   27460:	4770      	bx	lr

00027462 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   27462:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   27466:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2746a:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   2746c:	bf08      	it	eq
   2746e:	f06f 0015 	mvneq.w	r0, #21
   27472:	4770      	bx	lr

00027474 <mpu_configure_region>:
{
   27474:	b530      	push	{r4, r5, lr}
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   27476:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
   27478:	680c      	ldr	r4, [r1, #0]
{
   2747a:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   2747c:	890a      	ldrh	r2, [r1, #8]
   2747e:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
   27480:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   27482:	3b01      	subs	r3, #1
   27484:	f024 041f 	bic.w	r4, r4, #31
   27488:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   2748a:	f002 021f 	and.w	r2, r2, #31
   2748e:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   27492:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   27496:	4669      	mov	r1, sp
	p_attr->rbar = attr->rbar &
   27498:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   2749c:	9303      	str	r3, [sp, #12]
   2749e:	f7fa ffed 	bl	2247c <region_allocate_and_init>
}
   274a2:	b005      	add	sp, #20
   274a4:	bd30      	pop	{r4, r5, pc}

000274a6 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   274a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   274aa:	4684      	mov	ip, r0
   274ac:	4688      	mov	r8, r1
	register const char *s = nptr;
   274ae:	4601      	mov	r1, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   274b0:	460c      	mov	r4, r1
   274b2:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   274b6:	2b20      	cmp	r3, #32
   274b8:	d033      	beq.n	27522 <strtol+0x7c>
   274ba:	f1a3 0009 	sub.w	r0, r3, #9
   274be:	2804      	cmp	r0, #4
   274c0:	d92f      	bls.n	27522 <strtol+0x7c>
	} while (isspace(c));
	if (c == '-') {
   274c2:	2b2d      	cmp	r3, #45	; 0x2d
   274c4:	d12f      	bne.n	27526 <strtol+0x80>
		neg = 1;
		c = *s++;
   274c6:	784b      	ldrb	r3, [r1, #1]
   274c8:	1c8c      	adds	r4, r1, #2
		neg = 1;
   274ca:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   274cc:	2a00      	cmp	r2, #0
   274ce:	d05c      	beq.n	2758a <strtol+0xe4>
   274d0:	2a10      	cmp	r2, #16
   274d2:	d109      	bne.n	274e8 <strtol+0x42>
   274d4:	2b30      	cmp	r3, #48	; 0x30
   274d6:	d107      	bne.n	274e8 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   274d8:	7823      	ldrb	r3, [r4, #0]
   274da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   274de:	2b58      	cmp	r3, #88	; 0x58
   274e0:	d14e      	bne.n	27580 <strtol+0xda>
		c = s[1];
		s += 2;
		base = 16;
   274e2:	2210      	movs	r2, #16
		c = s[1];
   274e4:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   274e6:	3402      	adds	r4, #2
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   274e8:	2600      	movs	r6, #0
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   274ea:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   274ee:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
   274f0:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   274f4:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   274f6:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   274fa:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   274fe:	2d09      	cmp	r5, #9
   27500:	d817      	bhi.n	27532 <strtol+0x8c>
			c -= '0';
   27502:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   27504:	429a      	cmp	r2, r3
   27506:	dd24      	ble.n	27552 <strtol+0xac>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   27508:	1c75      	adds	r5, r6, #1
   2750a:	d007      	beq.n	2751c <strtol+0x76>
   2750c:	4570      	cmp	r0, lr
   2750e:	d81d      	bhi.n	2754c <strtol+0xa6>
   27510:	d101      	bne.n	27516 <strtol+0x70>
   27512:	454b      	cmp	r3, r9
   27514:	dc1a      	bgt.n	2754c <strtol+0xa6>
			any = -1;
		} else {
			any = 1;
   27516:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   27518:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   2751c:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   27520:	e7eb      	b.n	274fa <strtol+0x54>
{
   27522:	4621      	mov	r1, r4
   27524:	e7c4      	b.n	274b0 <strtol+0xa>
	} else if (c == '+') {
   27526:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   27528:	bf04      	itt	eq
   2752a:	784b      	ldrbeq	r3, [r1, #1]
   2752c:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   2752e:	2100      	movs	r1, #0
   27530:	e7cc      	b.n	274cc <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   27532:	f043 0520 	orr.w	r5, r3, #32
   27536:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   27538:	2d19      	cmp	r5, #25
   2753a:	d80a      	bhi.n	27552 <strtol+0xac>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2753c:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   27540:	2d1a      	cmp	r5, #26
   27542:	bf34      	ite	cc
   27544:	2537      	movcc	r5, #55	; 0x37
   27546:	2557      	movcs	r5, #87	; 0x57
   27548:	1b5b      	subs	r3, r3, r5
   2754a:	e7db      	b.n	27504 <strtol+0x5e>
			any = -1;
   2754c:	f04f 36ff 	mov.w	r6, #4294967295
   27550:	e7e4      	b.n	2751c <strtol+0x76>
		}
	}

	if (any < 0) {
   27552:	1c73      	adds	r3, r6, #1
   27554:	d109      	bne.n	2756a <strtol+0xc4>
   27556:	f7fc f8f5 	bl	23744 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   2755a:	2322      	movs	r3, #34	; 0x22
   2755c:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   2755e:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   27560:	f1b8 0f00 	cmp.w	r8, #0
   27564:	d107      	bne.n	27576 <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   27566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   2756a:	b101      	cbz	r1, 2756e <strtol+0xc8>
		acc = -acc;
   2756c:	4240      	negs	r0, r0
	if (endptr != NULL) {
   2756e:	f1b8 0f00 	cmp.w	r8, #0
   27572:	d0f8      	beq.n	27566 <strtol+0xc0>
		*endptr = (char *)(any ? s - 1 : nptr);
   27574:	b10e      	cbz	r6, 2757a <strtol+0xd4>
   27576:	f104 3cff 	add.w	ip, r4, #4294967295
   2757a:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   2757e:	e7f2      	b.n	27566 <strtol+0xc0>
	if (base == 0) {
   27580:	2330      	movs	r3, #48	; 0x30
   27582:	2a00      	cmp	r2, #0
   27584:	d1b0      	bne.n	274e8 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   27586:	2208      	movs	r2, #8
   27588:	e7ae      	b.n	274e8 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   2758a:	2b30      	cmp	r3, #48	; 0x30
   2758c:	d0a4      	beq.n	274d8 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   2758e:	220a      	movs	r2, #10
   27590:	e7aa      	b.n	274e8 <strtol+0x42>

00027592 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   27592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
   27596:	f891 8000 	ldrb.w	r8, [r1]
{
   2759a:	4605      	mov	r5, r0
	if (c != 0) {
   2759c:	f1b8 0f00 	cmp.w	r8, #0
   275a0:	d010      	beq.n	275c4 <strstr+0x32>
	c = *find++;
   275a2:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
   275a4:	4620      	mov	r0, r4
   275a6:	f000 f83f 	bl	27628 <strlen>
   275aa:	4607      	mov	r7, r0
		do {
			do {
				sc = *s++;
   275ac:	462e      	mov	r6, r5
   275ae:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
   275b2:	b163      	cbz	r3, 275ce <strstr+0x3c>
					return NULL;
				}
			} while (sc != c);
   275b4:	4598      	cmp	r8, r3
   275b6:	d108      	bne.n	275ca <strstr+0x38>
		} while (strncmp(s, find, len) != 0);
   275b8:	463a      	mov	r2, r7
   275ba:	4621      	mov	r1, r4
   275bc:	4630      	mov	r0, r6
   275be:	f000 f84f 	bl	27660 <strncmp>
   275c2:	b910      	cbnz	r0, 275ca <strstr+0x38>
	s--;
	}
	return (char *)s;
}
   275c4:	4628      	mov	r0, r5
   275c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   275ca:	4635      	mov	r5, r6
   275cc:	e7ee      	b.n	275ac <strstr+0x1a>
					return NULL;
   275ce:	461d      	mov	r5, r3
   275d0:	e7f8      	b.n	275c4 <strstr+0x32>

000275d2 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   275d2:	4603      	mov	r3, r0
   275d4:	3901      	subs	r1, #1
   275d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   275da:	b90a      	cbnz	r2, 275e0 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   275dc:	701a      	strb	r2, [r3, #0]

	return dest;
}
   275de:	4770      	bx	lr
		*d = *s;
   275e0:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   275e4:	e7f7      	b.n	275d6 <strcpy+0x4>

000275e6 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   275e6:	b570      	push	{r4, r5, r6, lr}
   275e8:	4605      	mov	r5, r0
   275ea:	3901      	subs	r1, #1
   275ec:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   275ee:	b142      	cbz	r2, 27602 <strncpy+0x1c>
   275f0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   275f4:	1e56      	subs	r6, r2, #1
   275f6:	b92b      	cbnz	r3, 27604 <strncpy+0x1e>
   275f8:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   275fa:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   275fe:	42a2      	cmp	r2, r4
   27600:	d1fb      	bne.n	275fa <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   27602:	bd70      	pop	{r4, r5, r6, pc}
		n--;
   27604:	4632      	mov	r2, r6
		*d = *s;
   27606:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   2760a:	e7ef      	b.n	275ec <strncpy+0x6>

0002760c <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   2760c:	4603      	mov	r3, r0
   2760e:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   27610:	781a      	ldrb	r2, [r3, #0]
   27612:	4618      	mov	r0, r3
   27614:	428a      	cmp	r2, r1
   27616:	f103 0301 	add.w	r3, r3, #1
   2761a:	d004      	beq.n	27626 <strchr+0x1a>
   2761c:	2a00      	cmp	r2, #0
   2761e:	d1f7      	bne.n	27610 <strchr+0x4>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   27620:	2900      	cmp	r1, #0
   27622:	bf18      	it	ne
   27624:	2000      	movne	r0, #0
}
   27626:	4770      	bx	lr

00027628 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   27628:	4603      	mov	r3, r0
	size_t n = 0;
   2762a:	2000      	movs	r0, #0

	while (*s != '\0') {
   2762c:	5c1a      	ldrb	r2, [r3, r0]
   2762e:	b902      	cbnz	r2, 27632 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   27630:	4770      	bx	lr
		n++;
   27632:	3001      	adds	r0, #1
   27634:	e7fa      	b.n	2762c <strlen+0x4>

00027636 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   27636:	4603      	mov	r3, r0
	size_t n = 0;
   27638:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   2763a:	5c1a      	ldrb	r2, [r3, r0]
   2763c:	b10a      	cbz	r2, 27642 <strnlen+0xc>
   2763e:	4288      	cmp	r0, r1
   27640:	d100      	bne.n	27644 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   27642:	4770      	bx	lr
		n++;
   27644:	3001      	adds	r0, #1
   27646:	e7f8      	b.n	2763a <strnlen+0x4>

00027648 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   27648:	1e43      	subs	r3, r0, #1
   2764a:	3901      	subs	r1, #1
   2764c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   27650:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   27654:	4282      	cmp	r2, r0
   27656:	d101      	bne.n	2765c <strcmp+0x14>
   27658:	2a00      	cmp	r2, #0
   2765a:	d1f7      	bne.n	2764c <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   2765c:	1a10      	subs	r0, r2, r0
   2765e:	4770      	bx	lr

00027660 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   27660:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   27662:	2400      	movs	r4, #0
   27664:	42a2      	cmp	r2, r4
   27666:	d008      	beq.n	2767a <strncmp+0x1a>
   27668:	5d03      	ldrb	r3, [r0, r4]
   2766a:	5d0d      	ldrb	r5, [r1, r4]
   2766c:	42ab      	cmp	r3, r5
   2766e:	d102      	bne.n	27676 <strncmp+0x16>
   27670:	3401      	adds	r4, #1
   27672:	2b00      	cmp	r3, #0
   27674:	d1f6      	bne.n	27664 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   27676:	1b58      	subs	r0, r3, r5
   27678:	e000      	b.n	2767c <strncmp+0x1c>
   2767a:	2000      	movs	r0, #0
}
   2767c:	bd30      	pop	{r4, r5, pc}

0002767e <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   2767e:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   27680:	b15a      	cbz	r2, 2769a <memcmp+0x1c>
   27682:	3901      	subs	r1, #1
   27684:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   27686:	f810 2b01 	ldrb.w	r2, [r0], #1
   2768a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   2768e:	42a0      	cmp	r0, r4
   27690:	d001      	beq.n	27696 <memcmp+0x18>
   27692:	429a      	cmp	r2, r3
   27694:	d0f7      	beq.n	27686 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   27696:	1ad0      	subs	r0, r2, r3
}
   27698:	bd10      	pop	{r4, pc}
		return 0;
   2769a:	4610      	mov	r0, r2
   2769c:	e7fc      	b.n	27698 <memcmp+0x1a>

0002769e <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   2769e:	1a43      	subs	r3, r0, r1
   276a0:	4293      	cmp	r3, r2
{
   276a2:	b510      	push	{r4, lr}
   276a4:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   276a8:	d308      	bcc.n	276bc <memmove+0x1e>
	char *dest = d;
   276aa:	4602      	mov	r2, r0
   276ac:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   276ae:	429a      	cmp	r2, r3
   276b0:	d00b      	beq.n	276ca <memmove+0x2c>
			*dest = *src;
   276b2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   276b6:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   276ba:	e7f8      	b.n	276ae <memmove+0x10>
   276bc:	440a      	add	r2, r1
			dest[n] = src[n];
   276be:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
   276c2:	428a      	cmp	r2, r1
			dest[n] = src[n];
   276c4:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   276c8:	d1f9      	bne.n	276be <memmove+0x20>
		}
	}

	return d;
}
   276ca:	bd10      	pop	{r4, pc}

000276cc <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   276cc:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   276ce:	ea81 0400 	eor.w	r4, r1, r0
   276d2:	07a5      	lsls	r5, r4, #30
   276d4:	4603      	mov	r3, r0
   276d6:	d00b      	beq.n	276f0 <memcpy+0x24>
   276d8:	3b01      	subs	r3, #1
   276da:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   276dc:	4291      	cmp	r1, r2
   276de:	d11b      	bne.n	27718 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   276e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   276e2:	2a00      	cmp	r2, #0
   276e4:	d0fc      	beq.n	276e0 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   276e6:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   276ea:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   276ec:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   276f0:	079c      	lsls	r4, r3, #30
   276f2:	d1f6      	bne.n	276e2 <memcpy+0x16>
   276f4:	f022 0403 	bic.w	r4, r2, #3
   276f8:	1f1d      	subs	r5, r3, #4
   276fa:	0896      	lsrs	r6, r2, #2
   276fc:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   276fe:	42b9      	cmp	r1, r7
   27700:	d105      	bne.n	2770e <memcpy+0x42>
   27702:	f06f 0503 	mvn.w	r5, #3
   27706:	4423      	add	r3, r4
   27708:	fb05 2206 	mla	r2, r5, r6, r2
   2770c:	e7e4      	b.n	276d8 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   2770e:	f851 cb04 	ldr.w	ip, [r1], #4
   27712:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   27716:	e7f2      	b.n	276fe <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   27718:	f811 4b01 	ldrb.w	r4, [r1], #1
   2771c:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   27720:	e7dc      	b.n	276dc <memcpy+0x10>

00027722 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   27722:	4603      	mov	r3, r0
{
   27724:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   27726:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   27728:	079c      	lsls	r4, r3, #30
   2772a:	d111      	bne.n	27750 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   2772c:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   27730:	f022 0603 	bic.w	r6, r2, #3
   27734:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   27738:	441e      	add	r6, r3
   2773a:	0894      	lsrs	r4, r2, #2
   2773c:	42b3      	cmp	r3, r6
   2773e:	d10d      	bne.n	2775c <memset+0x3a>
   27740:	f06f 0503 	mvn.w	r5, #3
   27744:	fb05 2204 	mla	r2, r5, r4, r2
   27748:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   2774a:	4293      	cmp	r3, r2
   2774c:	d109      	bne.n	27762 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   2774e:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   27750:	2a00      	cmp	r2, #0
   27752:	d0fc      	beq.n	2774e <memset+0x2c>
		*(d_byte++) = c_byte;
   27754:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   27758:	3a01      	subs	r2, #1
   2775a:	e7e5      	b.n	27728 <memset+0x6>
		*(d_word++) = c_word;
   2775c:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   27760:	e7ec      	b.n	2773c <memset+0x1a>
		*(d_byte++) = c_byte;
   27762:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   27766:	e7f0      	b.n	2774a <memset+0x28>

00027768 <_stdout_hook_default>:
}
   27768:	f04f 30ff 	mov.w	r0, #4294967295
   2776c:	4770      	bx	lr

0002776e <fputc>:
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&c, *(uintptr_t *)&stream, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
   2776e:	f7fb b803 	b.w	22778 <z_impl_zephyr_fputc>

00027772 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   27772:	684b      	ldr	r3, [r1, #4]
   27774:	2b01      	cmp	r3, #1
   27776:	dd07      	ble.n	27788 <sprintf_out+0x16>
		*(p->ptr) = c;
   27778:	680b      	ldr	r3, [r1, #0]
   2777a:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   2777c:	680b      	ldr	r3, [r1, #0]
   2777e:	3301      	adds	r3, #1
   27780:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   27782:	684b      	ldr	r3, [r1, #4]
   27784:	3b01      	subs	r3, #1
   27786:	604b      	str	r3, [r1, #4]
}
   27788:	2000      	movs	r0, #0
   2778a:	4770      	bx	lr

0002778c <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   2778c:	b570      	push	{r4, r5, r6, lr}
   2778e:	460e      	mov	r6, r1
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   27790:	6801      	ldr	r1, [r0, #0]
{
   27792:	4615      	mov	r5, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   27794:	b189      	cbz	r1, 277ba <gpio_fire_callbacks+0x2e>
	return node->next;
   27796:	680c      	ldr	r4, [r1, #0]
   27798:	2c00      	cmp	r4, #0
   2779a:	bf38      	it	cc
   2779c:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
   2779e:	688a      	ldr	r2, [r1, #8]
   277a0:	402a      	ands	r2, r5
   277a2:	d002      	beq.n	277aa <gpio_fire_callbacks+0x1e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   277a4:	4630      	mov	r0, r6
   277a6:	684b      	ldr	r3, [r1, #4]
   277a8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   277aa:	b134      	cbz	r4, 277ba <gpio_fire_callbacks+0x2e>
   277ac:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   277ae:	4621      	mov	r1, r4
   277b0:	2b00      	cmp	r3, #0
   277b2:	bf38      	it	cc
   277b4:	2300      	movcc	r3, #0
   277b6:	461c      	mov	r4, r3
   277b8:	e7f1      	b.n	2779e <gpio_fire_callbacks+0x12>
		}
	}
}
   277ba:	bd70      	pop	{r4, r5, r6, pc}

000277bc <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   277bc:	6843      	ldr	r3, [r0, #4]
}
   277be:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   277c0:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   277c2:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   277c4:	600b      	str	r3, [r1, #0]
}
   277c6:	4770      	bx	lr

000277c8 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   277c8:	6843      	ldr	r3, [r0, #4]
   277ca:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   277cc:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   277ce:	4042      	eors	r2, r0
   277d0:	400a      	ands	r2, r1
   277d2:	4042      	eors	r2, r0
    p_reg->OUT = value;
   277d4:	605a      	str	r2, [r3, #4]
}
   277d6:	2000      	movs	r0, #0
   277d8:	4770      	bx	lr

000277da <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   277da:	6843      	ldr	r3, [r0, #4]
}
   277dc:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   277de:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   277e0:	6099      	str	r1, [r3, #8]
}
   277e2:	4770      	bx	lr

000277e4 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   277e4:	6843      	ldr	r3, [r0, #4]
}
   277e6:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   277e8:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   277ea:	60d9      	str	r1, [r3, #12]
}
   277ec:	4770      	bx	lr

000277ee <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   277ee:	6843      	ldr	r3, [r0, #4]
}
   277f0:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   277f2:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   277f4:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   277f6:	404b      	eors	r3, r1
    p_reg->OUT = value;
   277f8:	6053      	str	r3, [r2, #4]
}
   277fa:	4770      	bx	lr

000277fc <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   277fc:	6903      	ldr	r3, [r0, #16]
{
   277fe:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   27800:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   27802:	b158      	cbz	r0, 2781c <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27804:	2400      	movs	r4, #0
   27806:	4281      	cmp	r1, r0
   27808:	d113      	bne.n	27832 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   2780a:	6808      	ldr	r0, [r1, #0]
   2780c:	b95c      	cbnz	r4, 27826 <gpio_nrfx_manage_callback+0x2a>
   2780e:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   27810:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   27812:	42a1      	cmp	r1, r4
   27814:	d100      	bne.n	27818 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   27816:	6098      	str	r0, [r3, #8]
	parent->next = child;
   27818:	2000      	movs	r0, #0
   2781a:	6008      	str	r0, [r1, #0]
	if (set) {
   2781c:	b972      	cbnz	r2, 2783c <gpio_nrfx_manage_callback+0x40>
	return 0;
   2781e:	2000      	movs	r0, #0
}
   27820:	bd30      	pop	{r4, r5, pc}
   27822:	4628      	mov	r0, r5
   27824:	e7ef      	b.n	27806 <gpio_nrfx_manage_callback+0xa>
   27826:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   27828:	6898      	ldr	r0, [r3, #8]
   2782a:	4281      	cmp	r1, r0
	list->tail = node;
   2782c:	bf08      	it	eq
   2782e:	609c      	streq	r4, [r3, #8]
}
   27830:	e7f2      	b.n	27818 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   27832:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27834:	4604      	mov	r4, r0
   27836:	2d00      	cmp	r5, #0
   27838:	d1f3      	bne.n	27822 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   2783a:	b13a      	cbz	r2, 2784c <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   2783c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2783e:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   27840:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   27842:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   27844:	2800      	cmp	r0, #0
   27846:	d1ea      	bne.n	2781e <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   27848:	6099      	str	r1, [r3, #8]
}
   2784a:	e7e9      	b.n	27820 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   2784c:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   27850:	e7e6      	b.n	27820 <gpio_nrfx_manage_callback+0x24>

00027852 <cfg_level_pins>:
{
   27852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
   27856:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   27858:	2500      	movs	r5, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   2785a:	6907      	ldr	r7, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   2785c:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   27860:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   27862:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   27866:	4313      	orrs	r3, r2
   27868:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   2786c:	b90c      	cbnz	r4, 27872 <cfg_level_pins+0x20>
}
   2786e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   27872:	4226      	tst	r6, r4
   27874:	d010      	beq.n	27898 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   27876:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   27878:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   2787c:	40e9      	lsrs	r1, r5
   2787e:	f001 0101 	and.w	r1, r1, #1
   27882:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   27886:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   2788a:	b2c9      	uxtb	r1, r1
   2788c:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   27890:	f7fb f920 	bl	22ad4 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   27894:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   27898:	3501      	adds	r5, #1
		bit <<= 1;
   2789a:	0076      	lsls	r6, r6, #1
   2789c:	e7e6      	b.n	2786c <cfg_level_pins+0x1a>

0002789e <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   2789e:	6843      	ldr	r3, [r0, #4]
{
   278a0:	b410      	push	{r4}
	return config->uarte_regs;
   278a2:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   278a4:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   278a8:	05d1      	lsls	r1, r2, #23
   278aa:	d518      	bpl.n	278de <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   278ac:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   278b0:	b1aa      	cbz	r2, 278de <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   278b2:	f04f 0120 	mov.w	r1, #32
   278b6:	f3ef 8211 	mrs	r2, BASEPRI
   278ba:	f381 8811 	msr	BASEPRI, r1
   278be:	f3bf 8f6f 	isb	sy
   278c2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   278c6:	b131      	cbz	r1, 278d6 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   278c8:	2100      	movs	r1, #0
   278ca:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   278ce:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   278d2:	2101      	movs	r1, #1
   278d4:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   278d6:	f382 8811 	msr	BASEPRI, r2
   278da:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   278de:	6842      	ldr	r2, [r0, #4]
   278e0:	6852      	ldr	r2, [r2, #4]
   278e2:	06d2      	lsls	r2, r2, #27
   278e4:	d51a      	bpl.n	2791c <uarte_nrfx_isr_int+0x7e>
	__asm__ volatile(
   278e6:	f04f 0220 	mov.w	r2, #32
   278ea:	f3ef 8111 	mrs	r1, BASEPRI
   278ee:	f382 8811 	msr	BASEPRI, r2
   278f2:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   278f6:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   278fa:	b112      	cbz	r2, 27902 <uarte_nrfx_isr_int+0x64>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   278fc:	2200      	movs	r2, #0
   278fe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   27902:	6902      	ldr	r2, [r0, #16]
   27904:	68d2      	ldr	r2, [r2, #12]
   27906:	b10a      	cbz	r2, 2790c <uarte_nrfx_isr_int+0x6e>
   27908:	6912      	ldr	r2, [r2, #16]
   2790a:	b91a      	cbnz	r2, 27914 <uarte_nrfx_isr_int+0x76>
    p_reg->INTENCLR = mask;
   2790c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   27910:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   27914:	f381 8811 	msr	BASEPRI, r1
   27918:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   2791c:	6902      	ldr	r2, [r0, #16]
   2791e:	68d2      	ldr	r2, [r2, #12]
   27920:	b15a      	cbz	r2, 2793a <uarte_nrfx_isr_int+0x9c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27922:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   27926:	b151      	cbz	r1, 2793e <uarte_nrfx_isr_int+0xa0>
		data->int_driven->fifo_fill_lock = 0;
   27928:	2100      	movs	r1, #0
		if (data->int_driven->disable_tx_irq) {
   2792a:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   2792c:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   2792e:	b134      	cbz	r4, 2793e <uarte_nrfx_isr_int+0xa0>
    p_reg->INTENCLR = mask;
   27930:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   27934:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   27938:	7391      	strb	r1, [r2, #14]
}
   2793a:	bc10      	pop	{r4}
   2793c:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2793e:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   27942:	b121      	cbz	r1, 2794e <uarte_nrfx_isr_int+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27944:	2100      	movs	r1, #0
   27946:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   2794a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   2794e:	6813      	ldr	r3, [r2, #0]
   27950:	2b00      	cmp	r3, #0
   27952:	d0f2      	beq.n	2793a <uarte_nrfx_isr_int+0x9c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   27954:	6851      	ldr	r1, [r2, #4]
}
   27956:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   27958:	4718      	bx	r3

0002795a <uarte_nrfx_config_get>:
{
   2795a:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   2795c:	6902      	ldr	r2, [r0, #16]
   2795e:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   27962:	e883 0003 	stmia.w	r3, {r0, r1}
}
   27966:	2000      	movs	r0, #0
   27968:	4770      	bx	lr

0002796a <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2796a:	6843      	ldr	r3, [r0, #4]
   2796c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2796e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   27972:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   27976:	4770      	bx	lr

00027978 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   27978:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   2797a:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2797c:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   27980:	b940      	cbnz	r0, 27994 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   27982:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   27984:	0712      	lsls	r2, r2, #28
   27986:	d406      	bmi.n	27996 <is_tx_ready+0x1e>
   27988:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   2798c:	3800      	subs	r0, #0
   2798e:	bf18      	it	ne
   27990:	2001      	movne	r0, #1
   27992:	4770      	bx	lr
   27994:	2001      	movs	r0, #1
}
   27996:	4770      	bx	lr

00027998 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   27998:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   2799a:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   2799c:	681b      	ldr	r3, [r3, #0]
   2799e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   279a2:	b148      	cbz	r0, 279b8 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   279a4:	2000      	movs	r0, #0
	*c = data->rx_data;
   279a6:	7d52      	ldrb	r2, [r2, #21]
   279a8:	700a      	strb	r2, [r1, #0]
   279aa:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   279ae:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   279b2:	2201      	movs	r2, #1
   279b4:	601a      	str	r2, [r3, #0]
	return 0;
   279b6:	4770      	bx	lr
		return -1;
   279b8:	f04f 30ff 	mov.w	r0, #4294967295
}
   279bc:	4770      	bx	lr

000279be <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   279be:	2a00      	cmp	r2, #0
{
   279c0:	b510      	push	{r4, lr}
   279c2:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   279c4:	dd0f      	ble.n	279e6 <uarte_nrfx_fifo_read+0x28>
	return config->uarte_regs;
   279c6:	6843      	ldr	r3, [r0, #4]
   279c8:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   279ca:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   279ce:	b148      	cbz	r0, 279e4 <uarte_nrfx_fifo_read+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   279d0:	2000      	movs	r0, #0
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   279d2:	6922      	ldr	r2, [r4, #16]
   279d4:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   279d8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   279dc:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   279de:	7d52      	ldrb	r2, [r2, #21]
   279e0:	700a      	strb	r2, [r1, #0]
   279e2:	6018      	str	r0, [r3, #0]
}
   279e4:	bd10      	pop	{r4, pc}
	int num_rx = 0;
   279e6:	2000      	movs	r0, #0
   279e8:	e7fc      	b.n	279e4 <uarte_nrfx_fifo_read+0x26>

000279ea <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   279ea:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   279ec:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   279ee:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   279f0:	f04f 0020 	mov.w	r0, #32
   279f4:	f3ef 8311 	mrs	r3, BASEPRI
   279f8:	f380 8811 	msr	BASEPRI, r0
   279fc:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   27a00:	2000      	movs	r0, #0
   27a02:	68c9      	ldr	r1, [r1, #12]
   27a04:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   27a06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   27a0a:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   27a0e:	f383 8811 	msr	BASEPRI, r3
   27a12:	f3bf 8f6f 	isb	sy
}
   27a16:	4770      	bx	lr

00027a18 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   27a18:	2201      	movs	r2, #1
   27a1a:	6903      	ldr	r3, [r0, #16]
   27a1c:	68db      	ldr	r3, [r3, #12]
   27a1e:	739a      	strb	r2, [r3, #14]
}
   27a20:	4770      	bx	lr

00027a22 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   27a22:	6903      	ldr	r3, [r0, #16]
   27a24:	68db      	ldr	r3, [r3, #12]
   27a26:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   27a28:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   27a2c:	b962      	cbnz	r2, 27a48 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   27a2e:	6842      	ldr	r2, [r0, #4]
   27a30:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27a32:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   27a36:	b140      	cbz	r0, 27a4a <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   27a38:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   27a3c:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   27a40:	d003      	beq.n	27a4a <uarte_nrfx_irq_tx_ready_complete+0x28>
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   27a42:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
   27a44:	6119      	str	r1, [r3, #16]
   27a46:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   27a48:	2000      	movs	r0, #0
}
   27a4a:	4770      	bx	lr

00027a4c <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   27a4c:	6843      	ldr	r3, [r0, #4]
   27a4e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27a50:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   27a54:	3800      	subs	r0, #0
   27a56:	bf18      	it	ne
   27a58:	2001      	movne	r0, #1
   27a5a:	4770      	bx	lr

00027a5c <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   27a5c:	2210      	movs	r2, #16
	return config->uarte_regs;
   27a5e:	6843      	ldr	r3, [r0, #4]
   27a60:	681b      	ldr	r3, [r3, #0]
   27a62:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   27a66:	4770      	bx	lr

00027a68 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   27a68:	2210      	movs	r2, #16
	return config->uarte_regs;
   27a6a:	6843      	ldr	r3, [r0, #4]
   27a6c:	681b      	ldr	r3, [r3, #0]
   27a6e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   27a72:	4770      	bx	lr

00027a74 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   27a74:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   27a78:	6843      	ldr	r3, [r0, #4]
   27a7a:	681b      	ldr	r3, [r3, #0]
   27a7c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   27a80:	4770      	bx	lr

00027a82 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   27a82:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   27a86:	6843      	ldr	r3, [r0, #4]
   27a88:	681b      	ldr	r3, [r3, #0]
   27a8a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   27a8e:	4770      	bx	lr

00027a90 <uarte_nrfx_irq_update>:
}
   27a90:	2001      	movs	r0, #1
   27a92:	4770      	bx	lr

00027a94 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   27a94:	6903      	ldr	r3, [r0, #16]
   27a96:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   27a98:	e9c3 1200 	strd	r1, r2, [r3]
}
   27a9c:	4770      	bx	lr

00027a9e <tx_start>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   27a9e:	6840      	ldr	r0, [r0, #4]
	return config->uarte_regs;
   27aa0:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   27aa2:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   27aa6:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27aaa:	2200      	movs	r2, #0
   27aac:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   27ab0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   27ab4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   27ab8:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   27abc:	6842      	ldr	r2, [r0, #4]
   27abe:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   27ac0:	bf41      	itttt	mi
   27ac2:	2208      	movmi	r2, #8
   27ac4:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   27ac8:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   27acc:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27ad0:	2201      	movs	r2, #1
   27ad2:	609a      	str	r2, [r3, #8]
}
   27ad4:	4770      	bx	lr

00027ad6 <uarte_nrfx_fifo_fill>:
{
   27ad6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   27ad8:	6906      	ldr	r6, [r0, #16]
{
   27ada:	4605      	mov	r5, r0
	len = MIN(len, data->int_driven->tx_buff_size);
   27adc:	68f3      	ldr	r3, [r6, #12]
   27ade:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   27ae0:	3310      	adds	r3, #16
   27ae2:	4294      	cmp	r4, r2
   27ae4:	bfa8      	it	ge
   27ae6:	4614      	movge	r4, r2
   27ae8:	2201      	movs	r2, #1
   27aea:	e8d3 0fef 	ldaex	r0, [r3]
   27aee:	2800      	cmp	r0, #0
   27af0:	d103      	bne.n	27afa <uarte_nrfx_fifo_fill+0x24>
   27af2:	e8c3 2fe7 	stlex	r7, r2, [r3]
   27af6:	2f00      	cmp	r7, #0
   27af8:	d1f7      	bne.n	27aea <uarte_nrfx_fifo_fill+0x14>
   27afa:	bf0c      	ite	eq
   27afc:	4613      	moveq	r3, r2
   27afe:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   27b00:	d01d      	beq.n	27b3e <uarte_nrfx_fifo_fill+0x68>
		return 0;
   27b02:	461c      	mov	r4, r3
}
   27b04:	4620      	mov	r0, r4
   27b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   27b08:	68f2      	ldr	r2, [r6, #12]
   27b0a:	5cc8      	ldrb	r0, [r1, r3]
   27b0c:	6892      	ldr	r2, [r2, #8]
   27b0e:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
   27b10:	3301      	adds	r3, #1
   27b12:	42a3      	cmp	r3, r4
   27b14:	dbf8      	blt.n	27b08 <uarte_nrfx_fifo_fill+0x32>
	__asm__ volatile(
   27b16:	f04f 0320 	mov.w	r3, #32
   27b1a:	f3ef 8711 	mrs	r7, BASEPRI
   27b1e:	f383 8811 	msr	BASEPRI, r3
   27b22:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   27b26:	4628      	mov	r0, r5
   27b28:	f7ff ff26 	bl	27978 <is_tx_ready>
   27b2c:	68f3      	ldr	r3, [r6, #12]
   27b2e:	b940      	cbnz	r0, 27b42 <uarte_nrfx_fifo_fill+0x6c>
		len = 0;
   27b30:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   27b32:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   27b34:	f387 8811 	msr	BASEPRI, r7
   27b38:	f3bf 8f6f 	isb	sy
	return len;
   27b3c:	e7e2      	b.n	27b04 <uarte_nrfx_fifo_fill+0x2e>
	for (int i = 0; i < len; i++) {
   27b3e:	2300      	movs	r3, #0
   27b40:	e7e7      	b.n	27b12 <uarte_nrfx_fifo_fill+0x3c>
		tx_start(dev, data->int_driven->tx_buffer, len);
   27b42:	4622      	mov	r2, r4
   27b44:	4628      	mov	r0, r5
   27b46:	6899      	ldr	r1, [r3, #8]
   27b48:	f7ff ffa9 	bl	27a9e <tx_start>
   27b4c:	e7f2      	b.n	27b34 <uarte_nrfx_fifo_fill+0x5e>

00027b4e <uarte_nrfx_irq_is_pending>:
{
   27b4e:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   27b50:	6843      	ldr	r3, [r0, #4]
{
   27b52:	4604      	mov	r4, r0
	return config->uarte_regs;
   27b54:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   27b56:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   27b5a:	025b      	lsls	r3, r3, #9
   27b5c:	d405      	bmi.n	27b6a <uarte_nrfx_irq_is_pending+0x1c>
   27b5e:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   27b62:	f010 0010 	ands.w	r0, r0, #16
   27b66:	d106      	bne.n	27b76 <uarte_nrfx_irq_is_pending+0x28>
}
   27b68:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   27b6a:	f7ff ff5a 	bl	27a22 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   27b6e:	2800      	cmp	r0, #0
   27b70:	d0f5      	beq.n	27b5e <uarte_nrfx_irq_is_pending+0x10>
		||
   27b72:	2001      	movs	r0, #1
   27b74:	e7f8      	b.n	27b68 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   27b76:	4620      	mov	r0, r4
   27b78:	f7ff ff68 	bl	27a4c <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   27b7c:	3800      	subs	r0, #0
   27b7e:	bf18      	it	ne
   27b80:	2001      	movne	r0, #1
   27b82:	e7f1      	b.n	27b68 <uarte_nrfx_irq_is_pending+0x1a>

00027b84 <entropy_cc3xx_rng_init>:
			return -EINVAL;
		}
	#endif

	return 0;
}
   27b84:	2000      	movs	r0, #0
   27b86:	4770      	bx	lr

00027b88 <entropy_cc3xx_rng_get_entropy>:
{
   27b88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   27b8a:	460f      	mov	r7, r1
   27b8c:	4616      	mov	r6, r2
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   27b8e:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   27b92:	2400      	movs	r4, #0
	int res = -EINVAL;
   27b94:	f06f 0015 	mvn.w	r0, #21
	while (offset < length) {
   27b98:	42a6      	cmp	r6, r4
   27b9a:	d801      	bhi.n	27ba0 <entropy_cc3xx_rng_get_entropy+0x18>
}
   27b9c:	b003      	add	sp, #12
   27b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   27ba0:	1b33      	subs	r3, r6, r4
   27ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   27ba6:	bf38      	it	cc
   27ba8:	461d      	movcc	r5, r3
			res = spm_request_random_number(buffer + offset,
   27baa:	aa01      	add	r2, sp, #4
   27bac:	4629      	mov	r1, r5
   27bae:	1938      	adds	r0, r7, r4
   27bb0:	f7ff fc35 	bl	2741e <spm_request_random_number>
		if (olen != chunk_size) {
   27bb4:	9b01      	ldr	r3, [sp, #4]
   27bb6:	42ab      	cmp	r3, r5
   27bb8:	d103      	bne.n	27bc2 <entropy_cc3xx_rng_get_entropy+0x3a>
		if (res != 0) {
   27bba:	2800      	cmp	r0, #0
   27bbc:	d1ee      	bne.n	27b9c <entropy_cc3xx_rng_get_entropy+0x14>
		offset += chunk_size;
   27bbe:	442c      	add	r4, r5
   27bc0:	e7ea      	b.n	27b98 <entropy_cc3xx_rng_get_entropy+0x10>
			return -EINVAL;
   27bc2:	f06f 0015 	mvn.w	r0, #21
   27bc6:	e7e9      	b.n	27b9c <entropy_cc3xx_rng_get_entropy+0x14>

00027bc8 <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   27bc8:	f7fb bb62 	b.w	23290 <SystemCoreClockUpdate>

00027bcc <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   27bcc:	4700      	bx	r0

00027bce <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   27bce:	f000 b9ee 	b.w	27fae <z_impl_k_busy_wait>

00027bd2 <z_device_state_init>:
}
   27bd2:	4770      	bx	lr

00027bd4 <z_device_ready>:
	return dev->state->initialized && (dev->state->init_res == 0U);
   27bd4:	68c3      	ldr	r3, [r0, #12]
   27bd6:	8818      	ldrh	r0, [r3, #0]
   27bd8:	f3c0 0008 	ubfx	r0, r0, #0, #9
}
   27bdc:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   27be0:	4258      	negs	r0, r3
   27be2:	4158      	adcs	r0, r3
   27be4:	4770      	bx	lr

00027be6 <k_mem_slab_init>:
{
   27be6:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   27be8:	2400      	movs	r4, #0
   27bea:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   27bec:	ea41 0402 	orr.w	r4, r1, r2
   27bf0:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   27bf4:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   27bf8:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   27bfa:	d10c      	bne.n	27c16 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   27bfc:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   27bfe:	42a3      	cmp	r3, r4
   27c00:	d103      	bne.n	27c0a <k_mem_slab_init+0x24>
   27c02:	e9c0 0000 	strd	r0, r0, [r0]
}
   27c06:	2000      	movs	r0, #0
}
   27c08:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   27c0a:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   27c0c:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   27c0e:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   27c10:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   27c12:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   27c14:	e7f3      	b.n	27bfe <k_mem_slab_init+0x18>
		return -EINVAL;
   27c16:	f06f 0015 	mvn.w	r0, #21
	return rc;
   27c1a:	e7f5      	b.n	27c08 <k_mem_slab_init+0x22>

00027c1c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   27c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27c1e:	4604      	mov	r4, r0
   27c20:	460d      	mov	r5, r1
	__asm__ volatile(
   27c22:	f04f 0320 	mov.w	r3, #32
   27c26:	f3ef 8611 	mrs	r6, BASEPRI
   27c2a:	f383 8811 	msr	BASEPRI, r3
   27c2e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   27c32:	6947      	ldr	r7, [r0, #20]
   27c34:	b97f      	cbnz	r7, 27c56 <k_mem_slab_free+0x3a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   27c36:	f000 f92e 	bl	27e96 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   27c3a:	b160      	cbz	r0, 27c56 <k_mem_slab_free+0x3a>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   27c3c:	682a      	ldr	r2, [r5, #0]
   27c3e:	f8c0 70b0 	str.w	r7, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   27c42:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   27c44:	f000 f8e0 	bl	27e08 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   27c48:	4631      	mov	r1, r6
   27c4a:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   27c4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   27c52:	f7fc ba97 	b.w	24184 <z_reschedule>
	**(char ***) mem = slab->free_list;
   27c56:	682b      	ldr	r3, [r5, #0]
   27c58:	6962      	ldr	r2, [r4, #20]
   27c5a:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   27c5c:	682b      	ldr	r3, [r5, #0]
   27c5e:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   27c60:	69a3      	ldr	r3, [r4, #24]
   27c62:	3b01      	subs	r3, #1
   27c64:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   27c66:	f386 8811 	msr	BASEPRI, r6
   27c6a:	f3bf 8f6f 	isb	sy
}
   27c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027c70 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   27c70:	f3ef 8005 	mrs	r0, IPSR
}
   27c74:	3800      	subs	r0, #0
   27c76:	bf18      	it	ne
   27c78:	2001      	movne	r0, #1
   27c7a:	4770      	bx	lr

00027c7c <k_thread_name_get>:
}
   27c7c:	3078      	adds	r0, #120	; 0x78
   27c7e:	4770      	bx	lr

00027c80 <z_impl_k_thread_start>:
	z_sched_start(thread);
   27c80:	f7fc bc58 	b.w	24534 <z_sched_start>

00027c84 <z_impl_k_thread_stack_space_get>:
int z_impl_k_thread_stack_space_get(const struct k_thread *thread,
				    size_t *unused_ptr)
{
	const uint8_t *start = (uint8_t *)thread->stack_info.start;
	size_t size = thread->stack_info.size;
	size_t unused = 0;
   27c84:	2300      	movs	r3, #0
{
   27c86:	b510      	push	{r4, lr}
	size_t size = thread->stack_info.size;
   27c88:	e9d0 4227 	ldrd	r4, r2, [r0, #156]	; 0x9c
		 */
		checked_stack += 4;
		size -= 4;
	}

	for (size_t i = 0; i < size; i++) {
   27c8c:	4293      	cmp	r3, r2
   27c8e:	d102      	bne.n	27c96 <z_impl_k_thread_stack_space_get+0x12>
	}

	*unused_ptr = unused;

	return 0;
}
   27c90:	2000      	movs	r0, #0
	*unused_ptr = unused;
   27c92:	600b      	str	r3, [r1, #0]
}
   27c94:	bd10      	pop	{r4, pc}
		if ((checked_stack[i]) == 0xaaU) {
   27c96:	5ce0      	ldrb	r0, [r4, r3]
   27c98:	28aa      	cmp	r0, #170	; 0xaa
   27c9a:	d1f9      	bne.n	27c90 <z_impl_k_thread_stack_space_get+0xc>
			unused++;
   27c9c:	3301      	adds	r3, #1
	for (size_t i = 0; i < size; i++) {
   27c9e:	e7f5      	b.n	27c8c <z_impl_k_thread_stack_space_get+0x8>

00027ca0 <z_pm_save_idle_exit>:
{
   27ca0:	b508      	push	{r3, lr}
	pm_system_resume();
   27ca2:	f7f9 fb35 	bl	21310 <pm_system_resume>
}
   27ca6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   27caa:	f7ff bbb6 	b.w	2741a <sys_clock_idle_exit>

00027cae <z_impl_k_msgq_peek>:
}
#include <syscalls/k_msgq_get_mrsh.c>
#endif

int z_impl_k_msgq_peek(struct k_msgq *msgq, void *data)
{
   27cae:	4603      	mov	r3, r0
   27cb0:	b510      	push	{r4, lr}
   27cb2:	4608      	mov	r0, r1
	__asm__ volatile(
   27cb4:	f04f 0220 	mov.w	r2, #32
   27cb8:	f3ef 8411 	mrs	r4, BASEPRI
   27cbc:	f382 8811 	msr	BASEPRI, r2
   27cc0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);

	if (msgq->used_msgs > 0U) {
   27cc4:	6a1a      	ldr	r2, [r3, #32]
   27cc6:	b14a      	cbz	r2, 27cdc <z_impl_k_msgq_peek+0x2e>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   27cc8:	689a      	ldr	r2, [r3, #8]
   27cca:	6999      	ldr	r1, [r3, #24]
   27ccc:	f7ff fcfe 	bl	276cc <memcpy>
		result = 0;
   27cd0:	2000      	movs	r0, #0
	__asm__ volatile(
   27cd2:	f384 8811 	msr	BASEPRI, r4
   27cd6:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC(k_msgq, peek, msgq, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   27cda:	bd10      	pop	{r4, pc}
		result = -ENOMSG;
   27cdc:	f06f 0022 	mvn.w	r0, #34	; 0x22
   27ce0:	e7f7      	b.n	27cd2 <z_impl_k_msgq_peek+0x24>

00027ce2 <z_impl_k_mutex_init>:
{
   27ce2:	4603      	mov	r3, r0
	mutex->owner = NULL;
   27ce4:	2000      	movs	r0, #0
   27ce6:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   27cea:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   27cee:	4770      	bx	lr

00027cf0 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   27cf0:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   27cf4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   27cf6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   27cf8:	2300      	movs	r3, #0
	node->prev = NULL;
   27cfa:	e9c0 3300 	strd	r3, r3, [r0]
}
   27cfe:	4770      	bx	lr

00027d00 <unpend_thread_no_timeout>:
{
   27d00:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   27d02:	f7ff fff5 	bl	27cf0 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   27d06:	7b43      	ldrb	r3, [r0, #13]
   27d08:	f023 0302 	bic.w	r3, r3, #2
   27d0c:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   27d0e:	2300      	movs	r3, #0
   27d10:	6083      	str	r3, [r0, #8]
}
   27d12:	bd08      	pop	{r3, pc}

00027d14 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   27d14:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   27d18:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   27d1c:	4283      	cmp	r3, r0
		return b2 - b1;
   27d1e:	bf14      	ite	ne
   27d20:	1ac0      	subne	r0, r0, r3
	return 0;
   27d22:	2000      	moveq	r0, #0
}
   27d24:	4770      	bx	lr

00027d26 <z_unpend_thread_no_timeout>:
{
   27d26:	b508      	push	{r3, lr}
	__asm__ volatile(
   27d28:	f04f 0320 	mov.w	r3, #32
   27d2c:	f3ef 8111 	mrs	r1, BASEPRI
   27d30:	f383 8811 	msr	BASEPRI, r3
   27d34:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   27d38:	f7ff ffe2 	bl	27d00 <unpend_thread_no_timeout>
	__asm__ volatile(
   27d3c:	f381 8811 	msr	BASEPRI, r1
   27d40:	f3bf 8f6f 	isb	sy
}
   27d44:	bd08      	pop	{r3, pc}

00027d46 <z_unpend_thread>:
{
   27d46:	b510      	push	{r4, lr}
	__asm__ volatile(
   27d48:	f04f 0320 	mov.w	r3, #32
   27d4c:	f3ef 8411 	mrs	r4, BASEPRI
   27d50:	f383 8811 	msr	BASEPRI, r3
   27d54:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   27d58:	f7ff ffd2 	bl	27d00 <unpend_thread_no_timeout>
	__asm__ volatile(
   27d5c:	f384 8811 	msr	BASEPRI, r4
   27d60:	f3bf 8f6f 	isb	sy
}
   27d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27d68:	3018      	adds	r0, #24
   27d6a:	f000 b8ca 	b.w	27f02 <z_abort_timeout>

00027d6e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   27d6e:	4603      	mov	r3, r0
   27d70:	b920      	cbnz	r0, 27d7c <z_reschedule_irqlock+0xe>
   27d72:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   27d76:	b90a      	cbnz	r2, 27d7c <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   27d78:	f7f9 bea2 	b.w	21ac0 <arch_swap>
   27d7c:	f383 8811 	msr	BASEPRI, r3
   27d80:	f3bf 8f6f 	isb	sy
}
   27d84:	4770      	bx	lr

00027d86 <z_reschedule_unlocked>:
	__asm__ volatile(
   27d86:	f04f 0320 	mov.w	r3, #32
   27d8a:	f3ef 8011 	mrs	r0, BASEPRI
   27d8e:	f383 8811 	msr	BASEPRI, r3
   27d92:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   27d96:	f7ff bfea 	b.w	27d6e <z_reschedule_irqlock>

00027d9a <z_priq_dumb_best>:
{
   27d9a:	4603      	mov	r3, r0
	return list->head == list;
   27d9c:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27d9e:	4283      	cmp	r3, r0
   27da0:	d003      	beq.n	27daa <z_priq_dumb_best+0x10>
	if (n != NULL) {
   27da2:	2800      	cmp	r0, #0
   27da4:	bf38      	it	cc
   27da6:	2000      	movcc	r0, #0
   27da8:	4770      	bx	lr
	struct k_thread *thread = NULL;
   27daa:	2000      	movs	r0, #0
}
   27dac:	4770      	bx	lr

00027dae <add_to_waitq_locked>:
{
   27dae:	b538      	push	{r3, r4, r5, lr}
   27db0:	4604      	mov	r4, r0
   27db2:	460d      	mov	r5, r1
	unready_thread(thread);
   27db4:	f7fc fa2c 	bl	24210 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   27db8:	7b63      	ldrb	r3, [r4, #13]
   27dba:	f043 0302 	orr.w	r3, r3, #2
   27dbe:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   27dc0:	b1b5      	cbz	r5, 27df0 <add_to_waitq_locked+0x42>
	return list->head == list;
   27dc2:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   27dc4:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27dc6:	429d      	cmp	r5, r3
   27dc8:	bf08      	it	eq
   27dca:	2300      	moveq	r3, #0
   27dcc:	2b00      	cmp	r3, #0
   27dce:	bf38      	it	cc
   27dd0:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   27dd2:	b19b      	cbz	r3, 27dfc <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
   27dd4:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   27dd8:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   27ddc:	4291      	cmp	r1, r2
   27dde:	d008      	beq.n	27df2 <add_to_waitq_locked+0x44>
		return b2 - b1;
   27de0:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   27de2:	2a00      	cmp	r2, #0
   27de4:	dd05      	ble.n	27df2 <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
   27de6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   27de8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   27dec:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   27dee:	605c      	str	r4, [r3, #4]
}
   27df0:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   27df2:	686a      	ldr	r2, [r5, #4]
   27df4:	4293      	cmp	r3, r2
   27df6:	d001      	beq.n	27dfc <add_to_waitq_locked+0x4e>
   27df8:	681b      	ldr	r3, [r3, #0]
   27dfa:	e7ea      	b.n	27dd2 <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
   27dfc:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   27dfe:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   27e02:	601c      	str	r4, [r3, #0]
	list->tail = node;
   27e04:	606c      	str	r4, [r5, #4]
   27e06:	e7f3      	b.n	27df0 <add_to_waitq_locked+0x42>

00027e08 <z_ready_thread>:
{
   27e08:	b510      	push	{r4, lr}
   27e0a:	f04f 0320 	mov.w	r3, #32
   27e0e:	f3ef 8411 	mrs	r4, BASEPRI
   27e12:	f383 8811 	msr	BASEPRI, r3
   27e16:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   27e1a:	f7fc fb53 	bl	244c4 <ready_thread>
	__asm__ volatile(
   27e1e:	f384 8811 	msr	BASEPRI, r4
   27e22:	f3bf 8f6f 	isb	sy
}
   27e26:	bd10      	pop	{r4, pc}

00027e28 <z_thread_timeout>:
{
   27e28:	4601      	mov	r1, r0
   27e2a:	b510      	push	{r4, lr}
	__asm__ volatile(
   27e2c:	f04f 0320 	mov.w	r3, #32
   27e30:	f3ef 8411 	mrs	r4, BASEPRI
   27e34:	f383 8811 	msr	BASEPRI, r3
   27e38:	f3bf 8f6f 	isb	sy
		if (!killed) {
   27e3c:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   27e40:	f013 0f28 	tst.w	r3, #40	; 0x28
   27e44:	d10d      	bne.n	27e62 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   27e46:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   27e4a:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   27e4c:	b10b      	cbz	r3, 27e52 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   27e4e:	f7ff ff57 	bl	27d00 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   27e52:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   27e56:	f023 0314 	bic.w	r3, r3, #20
   27e5a:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   27e5e:	f7fc fb31 	bl	244c4 <ready_thread>
	__asm__ volatile(
   27e62:	f384 8811 	msr	BASEPRI, r4
   27e66:	f3bf 8f6f 	isb	sy
}
   27e6a:	bd10      	pop	{r4, pc}

00027e6c <z_unpend1_no_timeout>:
{
   27e6c:	b510      	push	{r4, lr}
	__asm__ volatile(
   27e6e:	f04f 0320 	mov.w	r3, #32
   27e72:	f3ef 8411 	mrs	r4, BASEPRI
   27e76:	f383 8811 	msr	BASEPRI, r3
   27e7a:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   27e7e:	f7ff ff8c 	bl	27d9a <z_priq_dumb_best>
		if (thread != NULL) {
   27e82:	4601      	mov	r1, r0
   27e84:	b108      	cbz	r0, 27e8a <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   27e86:	f7ff ff3b 	bl	27d00 <unpend_thread_no_timeout>
	__asm__ volatile(
   27e8a:	f384 8811 	msr	BASEPRI, r4
   27e8e:	f3bf 8f6f 	isb	sy
}
   27e92:	4608      	mov	r0, r1
   27e94:	bd10      	pop	{r4, pc}

00027e96 <z_unpend_first_thread>:
{
   27e96:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   27e98:	f04f 0320 	mov.w	r3, #32
   27e9c:	f3ef 8511 	mrs	r5, BASEPRI
   27ea0:	f383 8811 	msr	BASEPRI, r3
   27ea4:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   27ea8:	f7ff ff77 	bl	27d9a <z_priq_dumb_best>
		if (thread != NULL) {
   27eac:	4604      	mov	r4, r0
   27eae:	b120      	cbz	r0, 27eba <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   27eb0:	f7ff ff26 	bl	27d00 <unpend_thread_no_timeout>
   27eb4:	3018      	adds	r0, #24
   27eb6:	f000 f824 	bl	27f02 <z_abort_timeout>
	__asm__ volatile(
   27eba:	f385 8811 	msr	BASEPRI, r5
   27ebe:	f3bf 8f6f 	isb	sy
}
   27ec2:	4620      	mov	r0, r4
   27ec4:	bd38      	pop	{r3, r4, r5, pc}

00027ec6 <z_sched_wake>:
{
   27ec6:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   27ec8:	f04f 0320 	mov.w	r3, #32
   27ecc:	f3ef 8511 	mrs	r5, BASEPRI
   27ed0:	f383 8811 	msr	BASEPRI, r3
   27ed4:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   27ed8:	f7ff ff5f 	bl	27d9a <z_priq_dumb_best>
		if (thread != NULL) {
   27edc:	4604      	mov	r4, r0
   27ede:	b158      	cbz	r0, 27ef8 <z_sched_wake+0x32>
   27ee0:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
   27ee4:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   27ee6:	f7ff ff0b 	bl	27d00 <unpend_thread_no_timeout>
   27eea:	3018      	adds	r0, #24
   27eec:	f000 f809 	bl	27f02 <z_abort_timeout>
			ready_thread(thread);
   27ef0:	4620      	mov	r0, r4
   27ef2:	f7fc fae7 	bl	244c4 <ready_thread>
			ret = true;
   27ef6:	2001      	movs	r0, #1
	__asm__ volatile(
   27ef8:	f385 8811 	msr	BASEPRI, r5
   27efc:	f3bf 8f6f 	isb	sy
}
   27f00:	bd38      	pop	{r3, r4, r5, pc}

00027f02 <z_abort_timeout>:
{
   27f02:	b510      	push	{r4, lr}
	__asm__ volatile(
   27f04:	f04f 0220 	mov.w	r2, #32
   27f08:	f3ef 8411 	mrs	r4, BASEPRI
   27f0c:	f382 8811 	msr	BASEPRI, r2
   27f10:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   27f14:	6803      	ldr	r3, [r0, #0]
   27f16:	b13b      	cbz	r3, 27f28 <z_abort_timeout+0x26>
			remove_timeout(to);
   27f18:	f7fc fc98 	bl	2484c <remove_timeout>
			ret = 0;
   27f1c:	2000      	movs	r0, #0
	__asm__ volatile(
   27f1e:	f384 8811 	msr	BASEPRI, r4
   27f22:	f3bf 8f6f 	isb	sy
}
   27f26:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   27f28:	f06f 0015 	mvn.w	r0, #21
   27f2c:	e7f7      	b.n	27f1e <z_abort_timeout+0x1c>

00027f2e <z_timeout_remaining>:
{
   27f2e:	b510      	push	{r4, lr}
	__asm__ volatile(
   27f30:	f04f 0320 	mov.w	r3, #32
   27f34:	f3ef 8411 	mrs	r4, BASEPRI
   27f38:	f383 8811 	msr	BASEPRI, r3
   27f3c:	f3bf 8f6f 	isb	sy
		ticks = timeout_rem(timeout);
   27f40:	f7fc fcca 	bl	248d8 <timeout_rem>
	__asm__ volatile(
   27f44:	f384 8811 	msr	BASEPRI, r4
   27f48:	f3bf 8f6f 	isb	sy
}
   27f4c:	bd10      	pop	{r4, pc}

00027f4e <z_get_next_timeout_expiry>:
{
   27f4e:	b510      	push	{r4, lr}
	__asm__ volatile(
   27f50:	f04f 0320 	mov.w	r3, #32
   27f54:	f3ef 8411 	mrs	r4, BASEPRI
   27f58:	f383 8811 	msr	BASEPRI, r3
   27f5c:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   27f60:	f7fc fc8e 	bl	24880 <next_timeout>
	__asm__ volatile(
   27f64:	f384 8811 	msr	BASEPRI, r4
   27f68:	f3bf 8f6f 	isb	sy
}
   27f6c:	bd10      	pop	{r4, pc}

00027f6e <z_set_timeout_expiry>:
{
   27f6e:	b570      	push	{r4, r5, r6, lr}
   27f70:	4604      	mov	r4, r0
   27f72:	460d      	mov	r5, r1
	__asm__ volatile(
   27f74:	f04f 0320 	mov.w	r3, #32
   27f78:	f3ef 8611 	mrs	r6, BASEPRI
   27f7c:	f383 8811 	msr	BASEPRI, r3
   27f80:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   27f84:	f7fc fc7c 	bl	24880 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   27f88:	2801      	cmp	r0, #1
   27f8a:	dd05      	ble.n	27f98 <z_set_timeout_expiry+0x2a>
   27f8c:	42a0      	cmp	r0, r4
   27f8e:	db03      	blt.n	27f98 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   27f90:	4629      	mov	r1, r5
   27f92:	4620      	mov	r0, r4
   27f94:	f7f9 fd26 	bl	219e4 <sys_clock_set_timeout>
	__asm__ volatile(
   27f98:	f386 8811 	msr	BASEPRI, r6
   27f9c:	f3bf 8f6f 	isb	sy
}
   27fa0:	bd70      	pop	{r4, r5, r6, pc}

00027fa2 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   27fa2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   27fa4:	f7fc fdb0 	bl	24b08 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   27fa8:	bd08      	pop	{r3, pc}

00027faa <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   27faa:	f7fc bdad 	b.w	24b08 <sys_clock_tick_get>

00027fae <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   27fae:	b108      	cbz	r0, 27fb4 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   27fb0:	f7f6 bb46 	b.w	1e640 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   27fb4:	4770      	bx	lr

00027fb6 <k_timer_init>:
	timer->status = 0U;
   27fb6:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   27fb8:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
   27fbc:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   27fc0:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   27fc4:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   27fc8:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   27fca:	6343      	str	r3, [r0, #52]	; 0x34
}
   27fcc:	4770      	bx	lr

00027fce <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   27fce:	b510      	push	{r4, lr}
   27fd0:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   27fd2:	f7ff ff96 	bl	27f02 <z_abort_timeout>

	if (inactive) {
   27fd6:	b9b0      	cbnz	r0, 28006 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   27fd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   27fda:	b10b      	cbz	r3, 27fe0 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   27fdc:	4620      	mov	r0, r4
   27fde:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   27fe0:	f104 0018 	add.w	r0, r4, #24
   27fe4:	f7ff ff42 	bl	27e6c <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   27fe8:	b168      	cbz	r0, 28006 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   27fea:	f7ff ff0d 	bl	27e08 <z_ready_thread>
	__asm__ volatile(
   27fee:	f04f 0320 	mov.w	r3, #32
   27ff2:	f3ef 8011 	mrs	r0, BASEPRI
   27ff6:	f383 8811 	msr	BASEPRI, r3
   27ffa:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   27ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   28002:	f7ff beb4 	b.w	27d6e <z_reschedule_irqlock>
   28006:	bd10      	pop	{r4, pc}

00028008 <clear_event_registrations>:
	while (num_events--) {
   28008:	2314      	movs	r3, #20
{
   2800a:	b570      	push	{r4, r5, r6, lr}
	event->poller = NULL;
   2800c:	2400      	movs	r4, #0
   2800e:	2601      	movs	r6, #1
   28010:	fb03 0101 	mla	r1, r3, r1, r0
	while (num_events--) {
   28014:	4281      	cmp	r1, r0
   28016:	d100      	bne.n	2801a <clear_event_registrations+0x12>
}
   28018:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   2801a:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   2801e:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   28022:	f003 031f 	and.w	r3, r3, #31
   28026:	2b08      	cmp	r3, #8
   28028:	d80d      	bhi.n	28046 <clear_event_registrations+0x3e>
   2802a:	fa06 f303 	lsl.w	r3, r6, r3
   2802e:	f413 7f8b 	tst.w	r3, #278	; 0x116
   28032:	d008      	beq.n	28046 <clear_event_registrations+0x3e>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   28034:	f851 3c14 	ldr.w	r3, [r1, #-20]
   28038:	b12b      	cbz	r3, 28046 <clear_event_registrations+0x3e>
	sys_dnode_t *const prev = node->prev;
   2803a:	f851 5c10 	ldr.w	r5, [r1, #-16]
	prev->next = next;
   2803e:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   28040:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   28042:	e941 4405 	strd	r4, r4, [r1, #-20]
	__asm__ volatile(
   28046:	f382 8811 	msr	BASEPRI, r2
   2804a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2804e:	f04f 0320 	mov.w	r3, #32
   28052:	f3ef 8211 	mrs	r2, BASEPRI
   28056:	f383 8811 	msr	BASEPRI, r3
   2805a:	f3bf 8f6f 	isb	sy
   2805e:	3914      	subs	r1, #20
   28060:	e7d8      	b.n	28014 <clear_event_registrations+0xc>

00028062 <add_event>:
{
   28062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28064:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   28066:	e9d0 2300 	ldrd	r2, r3, [r0]
   2806a:	4290      	cmp	r0, r2
   2806c:	4604      	mov	r4, r0
   2806e:	460d      	mov	r5, r1
   28070:	d105      	bne.n	2807e <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   28072:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   28074:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   28078:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2807a:	6065      	str	r5, [r4, #4]
}
   2807c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   2807e:	2b00      	cmp	r3, #0
   28080:	d0f7      	beq.n	28072 <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   28082:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   28084:	b100      	cbz	r0, 28088 <add_event+0x26>
   28086:	3860      	subs	r0, #96	; 0x60
   28088:	b107      	cbz	r7, 2808c <add_event+0x2a>
   2808a:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2808c:	4639      	mov	r1, r7
   2808e:	f7ff fe41 	bl	27d14 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   28092:	2800      	cmp	r0, #0
   28094:	dced      	bgt.n	28072 <add_event+0x10>
	return list->head == list;
   28096:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28098:	42b4      	cmp	r4, r6
   2809a:	d0ea      	beq.n	28072 <add_event+0x10>
   2809c:	2e00      	cmp	r6, #0
   2809e:	bf38      	it	cc
   280a0:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   280a2:	2e00      	cmp	r6, #0
   280a4:	d0e5      	beq.n	28072 <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   280a6:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   280a8:	b101      	cbz	r1, 280ac <add_event+0x4a>
   280aa:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   280ac:	4638      	mov	r0, r7
   280ae:	f7ff fe31 	bl	27d14 <z_sched_prio_cmp>
   280b2:	2800      	cmp	r0, #0
   280b4:	dd05      	ble.n	280c2 <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   280b6:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   280b8:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   280bc:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   280be:	6075      	str	r5, [r6, #4]
			return;
   280c0:	e7dc      	b.n	2807c <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   280c2:	6863      	ldr	r3, [r4, #4]
   280c4:	42b3      	cmp	r3, r6
   280c6:	d0d4      	beq.n	28072 <add_event+0x10>
   280c8:	6836      	ldr	r6, [r6, #0]
   280ca:	e7ea      	b.n	280a2 <add_event+0x40>

000280cc <register_events>:
{
   280cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   280d0:	2500      	movs	r5, #0
{
   280d2:	468b      	mov	fp, r1
   280d4:	4614      	mov	r4, r2
   280d6:	461f      	mov	r7, r3
   280d8:	4682      	mov	sl, r0
	int events_registered = 0;
   280da:	462e      	mov	r6, r5
	event->poller = NULL;
   280dc:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   280de:	455d      	cmp	r5, fp
   280e0:	db02      	blt.n	280e8 <register_events+0x1c>
}
   280e2:	4630      	mov	r0, r6
   280e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   280e8:	f04f 0320 	mov.w	r3, #32
   280ec:	f3ef 8911 	mrs	r9, BASEPRI
   280f0:	f383 8811 	msr	BASEPRI, r3
   280f4:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   280f8:	f89a 300d 	ldrb.w	r3, [sl, #13]
   280fc:	f003 031f 	and.w	r3, r3, #31
   28100:	3b01      	subs	r3, #1
   28102:	2b07      	cmp	r3, #7
   28104:	d80f      	bhi.n	28126 <register_events+0x5a>
   28106:	e8df f003 	tbb	[pc, r3]
   2810a:	041e      	.short	0x041e
   2810c:	0e0e0a0e 	.word	0x0e0e0a0e
   28110:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   28112:	f8da 3010 	ldr.w	r3, [sl, #16]
   28116:	689b      	ldr	r3, [r3, #8]
   28118:	b12b      	cbz	r3, 28126 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2811a:	2302      	movs	r3, #2
   2811c:	e020      	b.n	28160 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   2811e:	f8da 3010 	ldr.w	r3, [sl, #16]
   28122:	681b      	ldr	r3, [r3, #0]
   28124:	bb8b      	cbnz	r3, 2818a <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   28126:	bb47      	cbnz	r7, 2817a <register_events+0xae>
   28128:	7823      	ldrb	r3, [r4, #0]
   2812a:	b333      	cbz	r3, 2817a <register_events+0xae>
	switch (event->type) {
   2812c:	f89a 300d 	ldrb.w	r3, [sl, #13]
   28130:	f003 031f 	and.w	r3, r3, #31
   28134:	3b01      	subs	r3, #1
   28136:	2b07      	cmp	r3, #7
   28138:	d830      	bhi.n	2819c <register_events+0xd0>
   2813a:	e8df f003 	tbb	[pc, r3]
   2813e:	2833      	.short	0x2833
   28140:	2f2f282f 	.word	0x2f2f282f
   28144:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   28146:	f8da 3010 	ldr.w	r3, [sl, #16]
   2814a:	689b      	ldr	r3, [r3, #8]
   2814c:	2b00      	cmp	r3, #0
   2814e:	d0ea      	beq.n	28126 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   28150:	2301      	movs	r3, #1
   28152:	e005      	b.n	28160 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   28154:	f8da 3010 	ldr.w	r3, [sl, #16]
   28158:	6a1b      	ldr	r3, [r3, #32]
   2815a:	2b00      	cmp	r3, #0
   2815c:	d0e3      	beq.n	28126 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2815e:	2310      	movs	r3, #16
	event->state |= state;
   28160:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   28164:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   28168:	f3c2 3145 	ubfx	r1, r2, #13, #6
   2816c:	430b      	orrs	r3, r1
   2816e:	f363 3252 	bfi	r2, r3, #13, #6
   28172:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   28176:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2817a:	f389 8811 	msr	BASEPRI, r9
   2817e:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   28182:	3501      	adds	r5, #1
   28184:	f10a 0a14 	add.w	sl, sl, #20
   28188:	e7a9      	b.n	280de <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2818a:	2304      	movs	r3, #4
   2818c:	e7e8      	b.n	28160 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   2818e:	4622      	mov	r2, r4
   28190:	4651      	mov	r1, sl
   28192:	f8da 0010 	ldr.w	r0, [sl, #16]
   28196:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   28198:	f7ff ff63 	bl	28062 <add_event>
	event->poller = poller;
   2819c:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   281a0:	3601      	adds	r6, #1
   281a2:	e7ea      	b.n	2817a <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   281a4:	4622      	mov	r2, r4
   281a6:	4651      	mov	r1, sl
   281a8:	f8da 0010 	ldr.w	r0, [sl, #16]
   281ac:	e7f4      	b.n	28198 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   281ae:	f8da 0010 	ldr.w	r0, [sl, #16]
   281b2:	4622      	mov	r2, r4
   281b4:	4651      	mov	r1, sl
   281b6:	3024      	adds	r0, #36	; 0x24
   281b8:	e7ee      	b.n	28198 <register_events+0xcc>

000281ba <signal_poll_event>:
{
   281ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   281be:	6884      	ldr	r4, [r0, #8]
{
   281c0:	4605      	mov	r5, r0
   281c2:	460e      	mov	r6, r1
	if (poller != NULL) {
   281c4:	b144      	cbz	r4, 281d8 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   281c6:	7863      	ldrb	r3, [r4, #1]
   281c8:	2b01      	cmp	r3, #1
   281ca:	d138      	bne.n	2823e <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   281cc:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   281d0:	f013 0302 	ands.w	r3, r3, #2
   281d4:	d10a      	bne.n	281ec <signal_poll_event+0x32>
		poller->is_polling = false;
   281d6:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   281d8:	2000      	movs	r0, #0
	event->state |= state;
   281da:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   281dc:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   281de:	f3c3 3145 	ubfx	r1, r3, #13, #6
   281e2:	430e      	orrs	r6, r1
   281e4:	f366 3352 	bfi	r3, r6, #13, #6
   281e8:	60eb      	str	r3, [r5, #12]
	return retcode;
   281ea:	e00d      	b.n	28208 <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   281ec:	f04f 31ff 	mov.w	r1, #4294967295
   281f0:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   281f4:	f06f 0001 	mvn.w	r0, #1
   281f8:	428b      	cmp	r3, r1
   281fa:	bf08      	it	eq
   281fc:	4282      	cmpeq	r2, r0
   281fe:	d105      	bne.n	2820c <signal_poll_event+0x52>
		poller->is_polling = false;
   28200:	2300      	movs	r3, #0
		return -EAGAIN;
   28202:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   28206:	7023      	strb	r3, [r4, #0]
}
   28208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2820c:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   28210:	4640      	mov	r0, r8
   28212:	f7ff fd98 	bl	27d46 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   28216:	2e08      	cmp	r6, #8
   28218:	bf0c      	ite	eq
   2821a:	f06f 0303 	mvneq.w	r3, #3
   2821e:	2300      	movne	r3, #0
   28220:	6523      	str	r3, [r4, #80]	; 0x50
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   28222:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   28226:	06db      	lsls	r3, r3, #27
   28228:	d102      	bne.n	28230 <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   2822a:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2822e:	b10f      	cbz	r7, 28234 <signal_poll_event+0x7a>
		poller->is_polling = false;
   28230:	2300      	movs	r3, #0
   28232:	e7d0      	b.n	281d6 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   28234:	4640      	mov	r0, r8
   28236:	f7ff fde7 	bl	27e08 <z_ready_thread>
		poller->is_polling = false;
   2823a:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2823c:	e7cc      	b.n	281d8 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2823e:	2b02      	cmp	r3, #2
   28240:	d1f6      	bne.n	28230 <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   28242:	7823      	ldrb	r3, [r4, #0]
   28244:	2b00      	cmp	r3, #0
   28246:	d0c7      	beq.n	281d8 <signal_poll_event+0x1e>
   28248:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2824c:	2f00      	cmp	r7, #0
   2824e:	d0f4      	beq.n	2823a <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   28250:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   28254:	f1a4 0914 	sub.w	r9, r4, #20
   28258:	f104 0014 	add.w	r0, r4, #20
   2825c:	f7ff fe51 	bl	27f02 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   28260:	4649      	mov	r1, r9
   28262:	4638      	mov	r0, r7
		twork->poll_result = 0;
   28264:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   28268:	f000 f83d 	bl	282e6 <k_work_submit_to_queue>
		poller->is_polling = false;
   2826c:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   28270:	e7b2      	b.n	281d8 <signal_poll_event+0x1e>

00028272 <k_poll_event_init>:
{
   28272:	b510      	push	{r4, lr}
	event->poller = NULL;
   28274:	2400      	movs	r4, #0
	event->type = type;
   28276:	04d2      	lsls	r2, r2, #19
   28278:	0209      	lsls	r1, r1, #8
   2827a:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   2827e:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   28282:	430a      	orrs	r2, r1
   28284:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   28286:	6084      	str	r4, [r0, #8]
	event->type = type;
   28288:	430a      	orrs	r2, r1
	event->obj = obj;
   2828a:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   2828e:	bd10      	pop	{r4, pc}

00028290 <z_handle_obj_poll_events>:
{
   28290:	4603      	mov	r3, r0
	return list->head == list;
   28292:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   28294:	4283      	cmp	r3, r0
   28296:	d008      	beq.n	282aa <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   28298:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2829c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2829e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   282a0:	2300      	movs	r3, #0
	node->prev = NULL;
   282a2:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   282a6:	f7ff bf88 	b.w	281ba <signal_poll_event>
}
   282aa:	4770      	bx	lr

000282ac <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   282ac:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   282ae:	e9c0 0000 	strd	r0, r0, [r0]
   282b2:	6083      	str	r3, [r0, #8]
}
   282b4:	4770      	bx	lr

000282b6 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   282b6:	2300      	movs	r3, #0
   282b8:	6083      	str	r3, [r0, #8]
}
   282ba:	4770      	bx	lr

000282bc <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
   282bc:	6883      	ldr	r3, [r0, #8]
   282be:	600b      	str	r3, [r1, #0]
	*result = sig->result;
   282c0:	68c3      	ldr	r3, [r0, #12]
   282c2:	6013      	str	r3, [r2, #0]
}
   282c4:	4770      	bx	lr

000282c6 <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   282c6:	4770      	bx	lr

000282c8 <k_heap_init>:
{
   282c8:	b410      	push	{r4}
   282ca:	f100 040c 	add.w	r4, r0, #12
   282ce:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   282d2:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   282d4:	f7fd b9e3 	b.w	2569e <sys_heap_init>

000282d8 <notify_queue_locked>:
	if (queue != NULL) {
   282d8:	b120      	cbz	r0, 282e4 <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   282da:	2200      	movs	r2, #0
   282dc:	30c0      	adds	r0, #192	; 0xc0
   282de:	4611      	mov	r1, r2
   282e0:	f7ff bdf1 	b.w	27ec6 <z_sched_wake>
}
   282e4:	4770      	bx	lr

000282e6 <k_work_submit_to_queue>:
{
   282e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   282e8:	9001      	str	r0, [sp, #4]
   282ea:	4608      	mov	r0, r1
	__asm__ volatile(
   282ec:	f04f 0320 	mov.w	r3, #32
   282f0:	f3ef 8511 	mrs	r5, BASEPRI
   282f4:	f383 8811 	msr	BASEPRI, r3
   282f8:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   282fc:	a901      	add	r1, sp, #4
   282fe:	f7fc fdf3 	bl	24ee8 <submit_to_queue_locked>
   28302:	4604      	mov	r4, r0
	__asm__ volatile(
   28304:	f385 8811 	msr	BASEPRI, r5
   28308:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   2830c:	2800      	cmp	r0, #0
   2830e:	dd04      	ble.n	2831a <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   28310:	f7fc fa00 	bl	24714 <z_impl_k_is_preempt_thread>
   28314:	b108      	cbz	r0, 2831a <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   28316:	f7fc f983 	bl	24620 <z_impl_k_yield>
}
   2831a:	4620      	mov	r0, r4
   2831c:	b003      	add	sp, #12
   2831e:	bd30      	pop	{r4, r5, pc}

00028320 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   28320:	4770      	bx	lr
