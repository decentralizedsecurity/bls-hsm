
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00020000 <_vector_start>:
   20000:	20015ca0 	.word	0x20015ca0
   20004:	00031cd5 	.word	0x00031cd5
   20008:	00037395 	.word	0x00037395
   2000c:	00031d11 	.word	0x00031d11
   20010:	00031d11 	.word	0x00031d11
   20014:	00031d11 	.word	0x00031d11
   20018:	00031d11 	.word	0x00031d11
   2001c:	00031d11 	.word	0x00031d11
	...
   2002c:	00031c31 	.word	0x00031c31
   20030:	00031d11 	.word	0x00031d11
   20034:	00000000 	.word	0x00000000
   20038:	00031bd5 	.word	0x00031bd5
   2003c:	0003735d 	.word	0x0003735d

00020040 <_irq_vector_table>:
   20040:	00031c95 00031c95 00031c95 00031c95     ................
   20050:	00031c95 00031c95 00031c95 00031c95     ................
   20060:	00031c95 00031c95 00031c95 00031c95     ................
   20070:	00031c95 00031c95 00031c95 00031c95     ................
   20080:	00031c95 00031c95 00031c95 00031c95     ................
   20090:	00031c95 00031c95 00031c95 00031c95     ................
   200a0:	00031c95 00031c95 00031c95 00031c95     ................
   200b0:	00031c95 00031c95 00031c95 00031c95     ................
   200c0:	00031c95 00031c95 00031c95 00031c95     ................
   200d0:	00031c95 00031c95 00031c95 00031c95     ................
   200e0:	00031c95 00031c95 00031c95 00031c95     ................
   200f0:	00031c95 00031c95 00031c95 00031c95     ................
   20100:	00031c95 00031c95 00031c95 00031c95     ................
   20110:	00031c95 00031c95 00031c95 00031c95     ................
   20120:	00031c95 00031c95 00031c95 00031c95     ................
   20130:	00031c95 00031c95 00031c95 00031c95     ................
   20140:	00031c95 00031c95 00031c95 00031c95     ................
   20150:	00031c95                                ....

00020154 <_vector_end>:
	...

00020200 <m_firmware_info>:
   20200:	281ee6de 8fcebb4c 00003502 0000003c     ...(L....5..<...
   20210:	0001ce38 00000001 00020000 00020000     8...............
   20220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

00020240 <__aeabi_ldivmod>:
   20240:	b97b      	cbnz	r3, 20262 <__aeabi_ldivmod+0x22>
   20242:	b972      	cbnz	r2, 20262 <__aeabi_ldivmod+0x22>
   20244:	2900      	cmp	r1, #0
   20246:	bfbe      	ittt	lt
   20248:	2000      	movlt	r0, #0
   2024a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   2024e:	e006      	blt.n	2025e <__aeabi_ldivmod+0x1e>
   20250:	bf08      	it	eq
   20252:	2800      	cmpeq	r0, #0
   20254:	bf1c      	itt	ne
   20256:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   2025a:	f04f 30ff 	movne.w	r0, #4294967295
   2025e:	f000 b9bb 	b.w	205d8 <__aeabi_idiv0>
   20262:	f1ad 0c08 	sub.w	ip, sp, #8
   20266:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   2026a:	2900      	cmp	r1, #0
   2026c:	db09      	blt.n	20282 <__aeabi_ldivmod+0x42>
   2026e:	2b00      	cmp	r3, #0
   20270:	db1a      	blt.n	202a8 <__aeabi_ldivmod+0x68>
   20272:	f000 f84d 	bl	20310 <__udivmoddi4>
   20276:	f8dd e004 	ldr.w	lr, [sp, #4]
   2027a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2027e:	b004      	add	sp, #16
   20280:	4770      	bx	lr
   20282:	4240      	negs	r0, r0
   20284:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   20288:	2b00      	cmp	r3, #0
   2028a:	db1b      	blt.n	202c4 <__aeabi_ldivmod+0x84>
   2028c:	f000 f840 	bl	20310 <__udivmoddi4>
   20290:	f8dd e004 	ldr.w	lr, [sp, #4]
   20294:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   20298:	b004      	add	sp, #16
   2029a:	4240      	negs	r0, r0
   2029c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   202a0:	4252      	negs	r2, r2
   202a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   202a6:	4770      	bx	lr
   202a8:	4252      	negs	r2, r2
   202aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   202ae:	f000 f82f 	bl	20310 <__udivmoddi4>
   202b2:	f8dd e004 	ldr.w	lr, [sp, #4]
   202b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   202ba:	b004      	add	sp, #16
   202bc:	4240      	negs	r0, r0
   202be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   202c2:	4770      	bx	lr
   202c4:	4252      	negs	r2, r2
   202c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   202ca:	f000 f821 	bl	20310 <__udivmoddi4>
   202ce:	f8dd e004 	ldr.w	lr, [sp, #4]
   202d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   202d6:	b004      	add	sp, #16
   202d8:	4252      	negs	r2, r2
   202da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   202de:	4770      	bx	lr

000202e0 <__aeabi_uldivmod>:
   202e0:	b953      	cbnz	r3, 202f8 <__aeabi_uldivmod+0x18>
   202e2:	b94a      	cbnz	r2, 202f8 <__aeabi_uldivmod+0x18>
   202e4:	2900      	cmp	r1, #0
   202e6:	bf08      	it	eq
   202e8:	2800      	cmpeq	r0, #0
   202ea:	bf1c      	itt	ne
   202ec:	f04f 31ff 	movne.w	r1, #4294967295
   202f0:	f04f 30ff 	movne.w	r0, #4294967295
   202f4:	f000 b970 	b.w	205d8 <__aeabi_idiv0>
   202f8:	f1ad 0c08 	sub.w	ip, sp, #8
   202fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   20300:	f000 f806 	bl	20310 <__udivmoddi4>
   20304:	f8dd e004 	ldr.w	lr, [sp, #4]
   20308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2030c:	b004      	add	sp, #16
   2030e:	4770      	bx	lr

00020310 <__udivmoddi4>:
   20310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20314:	9e08      	ldr	r6, [sp, #32]
   20316:	460d      	mov	r5, r1
   20318:	4604      	mov	r4, r0
   2031a:	468a      	mov	sl, r1
   2031c:	2b00      	cmp	r3, #0
   2031e:	d17f      	bne.n	20420 <__udivmoddi4+0x110>
   20320:	428a      	cmp	r2, r1
   20322:	4617      	mov	r7, r2
   20324:	d941      	bls.n	203aa <__udivmoddi4+0x9a>
   20326:	fab2 f282 	clz	r2, r2
   2032a:	b14a      	cbz	r2, 20340 <__udivmoddi4+0x30>
   2032c:	f1c2 0120 	rsb	r1, r2, #32
   20330:	fa05 f302 	lsl.w	r3, r5, r2
   20334:	4097      	lsls	r7, r2
   20336:	4094      	lsls	r4, r2
   20338:	fa20 f101 	lsr.w	r1, r0, r1
   2033c:	ea41 0a03 	orr.w	sl, r1, r3
   20340:	ea4f 4817 	mov.w	r8, r7, lsr #16
   20344:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   20348:	fa1f f987 	uxth.w	r9, r7
   2034c:	fbba fef8 	udiv	lr, sl, r8
   20350:	fb08 a31e 	mls	r3, r8, lr, sl
   20354:	fb0e f109 	mul.w	r1, lr, r9
   20358:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
   2035c:	4299      	cmp	r1, r3
   2035e:	d906      	bls.n	2036e <__udivmoddi4+0x5e>
   20360:	18fb      	adds	r3, r7, r3
   20362:	d202      	bcs.n	2036a <__udivmoddi4+0x5a>
   20364:	4299      	cmp	r1, r3
   20366:	f200 8124 	bhi.w	205b2 <__udivmoddi4+0x2a2>
   2036a:	f10e 3eff 	add.w	lr, lr, #4294967295
   2036e:	1a59      	subs	r1, r3, r1
   20370:	b2a3      	uxth	r3, r4
   20372:	fbb1 f0f8 	udiv	r0, r1, r8
   20376:	fb08 1110 	mls	r1, r8, r0, r1
   2037a:	fb00 f909 	mul.w	r9, r0, r9
   2037e:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   20382:	45a1      	cmp	r9, r4
   20384:	d905      	bls.n	20392 <__udivmoddi4+0x82>
   20386:	193c      	adds	r4, r7, r4
   20388:	d202      	bcs.n	20390 <__udivmoddi4+0x80>
   2038a:	45a1      	cmp	r9, r4
   2038c:	f200 810e 	bhi.w	205ac <__udivmoddi4+0x29c>
   20390:	3801      	subs	r0, #1
   20392:	eba4 0409 	sub.w	r4, r4, r9
   20396:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
   2039a:	2100      	movs	r1, #0
   2039c:	b11e      	cbz	r6, 203a6 <__udivmoddi4+0x96>
   2039e:	40d4      	lsrs	r4, r2
   203a0:	2300      	movs	r3, #0
   203a2:	e9c6 4300 	strd	r4, r3, [r6]
   203a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   203aa:	b902      	cbnz	r2, 203ae <__udivmoddi4+0x9e>
   203ac:	deff      	udf	#255	; 0xff
   203ae:	fab2 f282 	clz	r2, r2
   203b2:	2a00      	cmp	r2, #0
   203b4:	d14f      	bne.n	20456 <__udivmoddi4+0x146>
   203b6:	1bcb      	subs	r3, r1, r7
   203b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   203bc:	fa1f f887 	uxth.w	r8, r7
   203c0:	2101      	movs	r1, #1
   203c2:	0c25      	lsrs	r5, r4, #16
   203c4:	fbb3 fcfe 	udiv	ip, r3, lr
   203c8:	fb0e 301c 	mls	r0, lr, ip, r3
   203cc:	462b      	mov	r3, r5
   203ce:	fb08 f90c 	mul.w	r9, r8, ip
   203d2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   203d6:	45a9      	cmp	r9, r5
   203d8:	d90a      	bls.n	203f0 <__udivmoddi4+0xe0>
   203da:	197d      	adds	r5, r7, r5
   203dc:	bf2c      	ite	cs
   203de:	2301      	movcs	r3, #1
   203e0:	2300      	movcc	r3, #0
   203e2:	45a9      	cmp	r9, r5
   203e4:	d902      	bls.n	203ec <__udivmoddi4+0xdc>
   203e6:	2b00      	cmp	r3, #0
   203e8:	f000 80d9 	beq.w	2059e <__udivmoddi4+0x28e>
   203ec:	f10c 3cff 	add.w	ip, ip, #4294967295
   203f0:	eba5 0509 	sub.w	r5, r5, r9
   203f4:	b2a3      	uxth	r3, r4
   203f6:	fbb5 f0fe 	udiv	r0, r5, lr
   203fa:	fb0e 5510 	mls	r5, lr, r0, r5
   203fe:	fb08 f800 	mul.w	r8, r8, r0
   20402:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   20406:	45a0      	cmp	r8, r4
   20408:	d905      	bls.n	20416 <__udivmoddi4+0x106>
   2040a:	193c      	adds	r4, r7, r4
   2040c:	d202      	bcs.n	20414 <__udivmoddi4+0x104>
   2040e:	45a0      	cmp	r8, r4
   20410:	f200 80c9 	bhi.w	205a6 <__udivmoddi4+0x296>
   20414:	3801      	subs	r0, #1
   20416:	eba4 0408 	sub.w	r4, r4, r8
   2041a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   2041e:	e7bd      	b.n	2039c <__udivmoddi4+0x8c>
   20420:	428b      	cmp	r3, r1
   20422:	d908      	bls.n	20436 <__udivmoddi4+0x126>
   20424:	2e00      	cmp	r6, #0
   20426:	f000 80b1 	beq.w	2058c <__udivmoddi4+0x27c>
   2042a:	2100      	movs	r1, #0
   2042c:	e9c6 0500 	strd	r0, r5, [r6]
   20430:	4608      	mov	r0, r1
   20432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20436:	fab3 f183 	clz	r1, r3
   2043a:	2900      	cmp	r1, #0
   2043c:	d146      	bne.n	204cc <__udivmoddi4+0x1bc>
   2043e:	42ab      	cmp	r3, r5
   20440:	f0c0 80a7 	bcc.w	20592 <__udivmoddi4+0x282>
   20444:	4282      	cmp	r2, r0
   20446:	f240 80a4 	bls.w	20592 <__udivmoddi4+0x282>
   2044a:	4608      	mov	r0, r1
   2044c:	2e00      	cmp	r6, #0
   2044e:	d0aa      	beq.n	203a6 <__udivmoddi4+0x96>
   20450:	e9c6 4a00 	strd	r4, sl, [r6]
   20454:	e7a7      	b.n	203a6 <__udivmoddi4+0x96>
   20456:	f1c2 0020 	rsb	r0, r2, #32
   2045a:	4097      	lsls	r7, r2
   2045c:	fa01 f302 	lsl.w	r3, r1, r2
   20460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   20464:	40c1      	lsrs	r1, r0
   20466:	fa24 f500 	lsr.w	r5, r4, r0
   2046a:	fa1f f887 	uxth.w	r8, r7
   2046e:	4094      	lsls	r4, r2
   20470:	431d      	orrs	r5, r3
   20472:	fbb1 f0fe 	udiv	r0, r1, lr
   20476:	0c2b      	lsrs	r3, r5, #16
   20478:	fb0e 1110 	mls	r1, lr, r0, r1
   2047c:	fb00 fc08 	mul.w	ip, r0, r8
   20480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   20484:	459c      	cmp	ip, r3
   20486:	d909      	bls.n	2049c <__udivmoddi4+0x18c>
   20488:	18fb      	adds	r3, r7, r3
   2048a:	bf2c      	ite	cs
   2048c:	2101      	movcs	r1, #1
   2048e:	2100      	movcc	r1, #0
   20490:	459c      	cmp	ip, r3
   20492:	d902      	bls.n	2049a <__udivmoddi4+0x18a>
   20494:	2900      	cmp	r1, #0
   20496:	f000 8095 	beq.w	205c4 <__udivmoddi4+0x2b4>
   2049a:	3801      	subs	r0, #1
   2049c:	eba3 030c 	sub.w	r3, r3, ip
   204a0:	b2ad      	uxth	r5, r5
   204a2:	fbb3 f1fe 	udiv	r1, r3, lr
   204a6:	fb0e 3311 	mls	r3, lr, r1, r3
   204aa:	fb01 fc08 	mul.w	ip, r1, r8
   204ae:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   204b2:	45ac      	cmp	ip, r5
   204b4:	d905      	bls.n	204c2 <__udivmoddi4+0x1b2>
   204b6:	197d      	adds	r5, r7, r5
   204b8:	d202      	bcs.n	204c0 <__udivmoddi4+0x1b0>
   204ba:	45ac      	cmp	ip, r5
   204bc:	f200 8089 	bhi.w	205d2 <__udivmoddi4+0x2c2>
   204c0:	3901      	subs	r1, #1
   204c2:	eba5 030c 	sub.w	r3, r5, ip
   204c6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   204ca:	e77a      	b.n	203c2 <__udivmoddi4+0xb2>
   204cc:	f1c1 0420 	rsb	r4, r1, #32
   204d0:	408b      	lsls	r3, r1
   204d2:	fa02 f701 	lsl.w	r7, r2, r1
   204d6:	fa05 fc01 	lsl.w	ip, r5, r1
   204da:	40e2      	lsrs	r2, r4
   204dc:	fa20 f804 	lsr.w	r8, r0, r4
   204e0:	40e5      	lsrs	r5, r4
   204e2:	fa00 fe01 	lsl.w	lr, r0, r1
   204e6:	4313      	orrs	r3, r2
   204e8:	ea48 020c 	orr.w	r2, r8, ip
   204ec:	ea4f 4813 	mov.w	r8, r3, lsr #16
   204f0:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   204f4:	fa1f f983 	uxth.w	r9, r3
   204f8:	fbb5 faf8 	udiv	sl, r5, r8
   204fc:	fb08 551a 	mls	r5, r8, sl, r5
   20500:	fb0a f009 	mul.w	r0, sl, r9
   20504:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
   20508:	4560      	cmp	r0, ip
   2050a:	d90a      	bls.n	20522 <__udivmoddi4+0x212>
   2050c:	eb13 0c0c 	adds.w	ip, r3, ip
   20510:	bf2c      	ite	cs
   20512:	2501      	movcs	r5, #1
   20514:	2500      	movcc	r5, #0
   20516:	4560      	cmp	r0, ip
   20518:	d901      	bls.n	2051e <__udivmoddi4+0x20e>
   2051a:	2d00      	cmp	r5, #0
   2051c:	d055      	beq.n	205ca <__udivmoddi4+0x2ba>
   2051e:	f10a 3aff 	add.w	sl, sl, #4294967295
   20522:	ebac 0c00 	sub.w	ip, ip, r0
   20526:	b292      	uxth	r2, r2
   20528:	fbbc f0f8 	udiv	r0, ip, r8
   2052c:	fb08 cc10 	mls	ip, r8, r0, ip
   20530:	fb00 f909 	mul.w	r9, r0, r9
   20534:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
   20538:	45e1      	cmp	r9, ip
   2053a:	d905      	bls.n	20548 <__udivmoddi4+0x238>
   2053c:	eb13 0c0c 	adds.w	ip, r3, ip
   20540:	d201      	bcs.n	20546 <__udivmoddi4+0x236>
   20542:	45e1      	cmp	r9, ip
   20544:	d83b      	bhi.n	205be <__udivmoddi4+0x2ae>
   20546:	3801      	subs	r0, #1
   20548:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
   2054c:	ebac 0c09 	sub.w	ip, ip, r9
   20550:	fba0 8907 	umull	r8, r9, r0, r7
   20554:	45cc      	cmp	ip, r9
   20556:	4645      	mov	r5, r8
   20558:	464a      	mov	r2, r9
   2055a:	d302      	bcc.n	20562 <__udivmoddi4+0x252>
   2055c:	d106      	bne.n	2056c <__udivmoddi4+0x25c>
   2055e:	45c6      	cmp	lr, r8
   20560:	d204      	bcs.n	2056c <__udivmoddi4+0x25c>
   20562:	3801      	subs	r0, #1
   20564:	ebb8 0507 	subs.w	r5, r8, r7
   20568:	eb69 0203 	sbc.w	r2, r9, r3
   2056c:	b32e      	cbz	r6, 205ba <__udivmoddi4+0x2aa>
   2056e:	ebbe 0305 	subs.w	r3, lr, r5
   20572:	eb6c 0c02 	sbc.w	ip, ip, r2
   20576:	fa23 f201 	lsr.w	r2, r3, r1
   2057a:	fa0c f404 	lsl.w	r4, ip, r4
   2057e:	fa2c f301 	lsr.w	r3, ip, r1
   20582:	2100      	movs	r1, #0
   20584:	4314      	orrs	r4, r2
   20586:	e9c6 4300 	strd	r4, r3, [r6]
   2058a:	e70c      	b.n	203a6 <__udivmoddi4+0x96>
   2058c:	4631      	mov	r1, r6
   2058e:	4630      	mov	r0, r6
   20590:	e709      	b.n	203a6 <__udivmoddi4+0x96>
   20592:	1a84      	subs	r4, r0, r2
   20594:	eb65 0303 	sbc.w	r3, r5, r3
   20598:	2001      	movs	r0, #1
   2059a:	469a      	mov	sl, r3
   2059c:	e756      	b.n	2044c <__udivmoddi4+0x13c>
   2059e:	f1ac 0c02 	sub.w	ip, ip, #2
   205a2:	443d      	add	r5, r7
   205a4:	e724      	b.n	203f0 <__udivmoddi4+0xe0>
   205a6:	3802      	subs	r0, #2
   205a8:	443c      	add	r4, r7
   205aa:	e734      	b.n	20416 <__udivmoddi4+0x106>
   205ac:	3802      	subs	r0, #2
   205ae:	443c      	add	r4, r7
   205b0:	e6ef      	b.n	20392 <__udivmoddi4+0x82>
   205b2:	f1ae 0e02 	sub.w	lr, lr, #2
   205b6:	443b      	add	r3, r7
   205b8:	e6d9      	b.n	2036e <__udivmoddi4+0x5e>
   205ba:	4631      	mov	r1, r6
   205bc:	e6f3      	b.n	203a6 <__udivmoddi4+0x96>
   205be:	3802      	subs	r0, #2
   205c0:	449c      	add	ip, r3
   205c2:	e7c1      	b.n	20548 <__udivmoddi4+0x238>
   205c4:	3802      	subs	r0, #2
   205c6:	443b      	add	r3, r7
   205c8:	e768      	b.n	2049c <__udivmoddi4+0x18c>
   205ca:	f1aa 0a02 	sub.w	sl, sl, #2
   205ce:	449c      	add	ip, r3
   205d0:	e7a7      	b.n	20522 <__udivmoddi4+0x212>
   205d2:	3902      	subs	r1, #2
   205d4:	443d      	add	r5, r7
   205d6:	e774      	b.n	204c2 <__udivmoddi4+0x1b2>

000205d8 <__aeabi_idiv0>:
   205d8:	4770      	bx	lr
   205da:	bf00      	nop

000205dc <sha256_init>:
   205dc:	4b12      	ldr	r3, [pc, #72]	; (20628 <sha256_init+0x4c>)
   205de:	6003      	str	r3, [r0, #0]
   205e0:	4b12      	ldr	r3, [pc, #72]	; (2062c <sha256_init+0x50>)
   205e2:	6043      	str	r3, [r0, #4]
   205e4:	4b12      	ldr	r3, [pc, #72]	; (20630 <sha256_init+0x54>)
   205e6:	6083      	str	r3, [r0, #8]
   205e8:	4b12      	ldr	r3, [pc, #72]	; (20634 <sha256_init+0x58>)
   205ea:	60c3      	str	r3, [r0, #12]
   205ec:	4b12      	ldr	r3, [pc, #72]	; (20638 <sha256_init+0x5c>)
   205ee:	6103      	str	r3, [r0, #16]
   205f0:	4b12      	ldr	r3, [pc, #72]	; (2063c <sha256_init+0x60>)
   205f2:	6143      	str	r3, [r0, #20]
   205f4:	4b12      	ldr	r3, [pc, #72]	; (20640 <sha256_init+0x64>)
   205f6:	6183      	str	r3, [r0, #24]
   205f8:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   205fc:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   20600:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   20604:	61c3      	str	r3, [r0, #28]
   20606:	2200      	movs	r2, #0
   20608:	2300      	movs	r3, #0
   2060a:	e9c0 2308 	strd	r2, r3, [r0, #32]
   2060e:	f100 0c28 	add.w	ip, r0, #40	; 0x28
   20612:	4663      	mov	r3, ip
   20614:	f100 0168 	add.w	r1, r0, #104	; 0x68
   20618:	f843 2b04 	str.w	r2, [r3], #4
   2061c:	428b      	cmp	r3, r1
   2061e:	d1fb      	bne.n	20618 <sha256_init+0x3c>
   20620:	2300      	movs	r3, #0
   20622:	6683      	str	r3, [r0, #104]	; 0x68
   20624:	4770      	bx	lr
   20626:	bf00      	nop
   20628:	6a09e667 	.word	0x6a09e667
   2062c:	bb67ae85 	.word	0xbb67ae85
   20630:	3c6ef372 	.word	0x3c6ef372
   20634:	a54ff53a 	.word	0xa54ff53a
   20638:	510e527f 	.word	0x510e527f
   2063c:	9b05688c 	.word	0x9b05688c
   20640:	1f83d9ab 	.word	0x1f83d9ab

00020644 <get_wval>:
   20644:	3a01      	subs	r2, #1
   20646:	440a      	add	r2, r1
   20648:	08d2      	lsrs	r2, r2, #3
   2064a:	5c83      	ldrb	r3, [r0, r2]
   2064c:	08ca      	lsrs	r2, r1, #3
   2064e:	5c80      	ldrb	r0, [r0, r2]
   20650:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   20654:	f001 0107 	and.w	r1, r1, #7
   20658:	40c8      	lsrs	r0, r1
   2065a:	4770      	bx	lr

0002065c <booth_encode>:
   2065c:	fa20 f101 	lsr.w	r1, r0, r1
   20660:	3001      	adds	r0, #1
   20662:	0843      	lsrs	r3, r0, #1
   20664:	1e4a      	subs	r2, r1, #1
   20666:	ea02 0050 	and.w	r0, r2, r0, lsr #1
   2066a:	425b      	negs	r3, r3
   2066c:	4249      	negs	r1, r1
   2066e:	4019      	ands	r1, r3
   20670:	4308      	orrs	r0, r1
   20672:	4770      	bx	lr

00020674 <sub_mod_n>:
   20674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20678:	9f07      	ldr	r7, [sp, #28]
   2067a:	b397      	cbz	r7, 206e2 <sub_mod_n+0x6e>
   2067c:	4699      	mov	r9, r3
   2067e:	f1a1 0e04 	sub.w	lr, r1, #4
   20682:	1f14      	subs	r4, r2, #4
   20684:	f1a0 0c04 	sub.w	ip, r0, #4
   20688:	ea4f 0887 	mov.w	r8, r7, lsl #2
   2068c:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   20690:	4666      	mov	r6, ip
   20692:	2100      	movs	r1, #0
   20694:	460d      	mov	r5, r1
   20696:	f85e 2f04 	ldr.w	r2, [lr, #4]!
   2069a:	1a52      	subs	r2, r2, r1
   2069c:	eb65 0105 	sbc.w	r1, r5, r5
   206a0:	f854 3f04 	ldr.w	r3, [r4, #4]!
   206a4:	1ad2      	subs	r2, r2, r3
   206a6:	f161 0100 	sbc.w	r1, r1, #0
   206aa:	f846 2f04 	str.w	r2, [r6, #4]!
   206ae:	f001 0101 	and.w	r1, r1, #1
   206b2:	45be      	cmp	lr, r7
   206b4:	d1ef      	bne.n	20696 <sub_mod_n+0x22>
   206b6:	424a      	negs	r2, r1
   206b8:	f1a9 0604 	sub.w	r6, r9, #4
   206bc:	3804      	subs	r0, #4
   206be:	4480      	add	r8, r0
   206c0:	2400      	movs	r4, #0
   206c2:	4625      	mov	r5, r4
   206c4:	f856 3f04 	ldr.w	r3, [r6, #4]!
   206c8:	4013      	ands	r3, r2
   206ca:	f85c 1f04 	ldr.w	r1, [ip, #4]!
   206ce:	1909      	adds	r1, r1, r4
   206d0:	eb45 0405 	adc.w	r4, r5, r5
   206d4:	185b      	adds	r3, r3, r1
   206d6:	f8cc 3000 	str.w	r3, [ip]
   206da:	f144 0400 	adc.w	r4, r4, #0
   206de:	45c4      	cmp	ip, r8
   206e0:	d1f0      	bne.n	206c4 <sub_mod_n+0x50>
   206e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000206e6 <check_mod_n>:
   206e6:	b5f0      	push	{r4, r5, r6, r7, lr}
   206e8:	4604      	mov	r4, r0
   206ea:	4610      	mov	r0, r2
   206ec:	b302      	cbz	r2, 20730 <check_mod_n+0x4a>
   206ee:	f1a1 0e04 	sub.w	lr, r1, #4
   206f2:	eb0e 0782 	add.w	r7, lr, r2, lsl #2
   206f6:	2000      	movs	r0, #0
   206f8:	4605      	mov	r5, r0
   206fa:	4606      	mov	r6, r0
   206fc:	e00d      	b.n	2071a <check_mod_n+0x34>
   206fe:	3404      	adds	r4, #4
   20700:	430d      	orrs	r5, r1
   20702:	f85e 3f04 	ldr.w	r3, [lr, #4]!
   20706:	181b      	adds	r3, r3, r0
   20708:	eb46 0006 	adc.w	r0, r6, r6
   2070c:	1ac9      	subs	r1, r1, r3
   2070e:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   20712:	f000 0001 	and.w	r0, r0, #1
   20716:	45be      	cmp	lr, r7
   20718:	d00b      	beq.n	20732 <check_mod_n+0x4c>
   2071a:	46a4      	mov	ip, r4
   2071c:	2300      	movs	r3, #0
   2071e:	4619      	mov	r1, r3
   20720:	f81c 2b01 	ldrb.w	r2, [ip], #1
   20724:	409a      	lsls	r2, r3
   20726:	4311      	orrs	r1, r2
   20728:	3308      	adds	r3, #8
   2072a:	2b20      	cmp	r3, #32
   2072c:	d1f8      	bne.n	20720 <check_mod_n+0x3a>
   2072e:	e7e6      	b.n	206fe <check_mod_n+0x18>
   20730:	4615      	mov	r5, r2
   20732:	1e6b      	subs	r3, r5, #1
   20734:	ea23 0505 	bic.w	r5, r3, r5
   20738:	2d00      	cmp	r5, #0
   2073a:	bfb4      	ite	lt
   2073c:	2000      	movlt	r0, #0
   2073e:	f000 0001 	andge.w	r0, r0, #1
   20742:	bdf0      	pop	{r4, r5, r6, r7, pc}

00020744 <rshift_mod_n>:
   20744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20748:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   2074c:	2a00      	cmp	r2, #0
   2074e:	d049      	beq.n	207e4 <rshift_mod_n+0xa0>
   20750:	4606      	mov	r6, r0
   20752:	460c      	mov	r4, r1
   20754:	4699      	mov	r9, r3
   20756:	1e57      	subs	r7, r2, #1
   20758:	ea4f 0a88 	mov.w	sl, r8, lsl #2
   2075c:	f1aa 0a04 	sub.w	sl, sl, #4
   20760:	f04f 0e00 	mov.w	lr, #0
   20764:	e01c      	b.n	207a0 <rshift_mod_n+0x5c>
   20766:	6832      	ldr	r2, [r6, #0]
   20768:	46c3      	mov	fp, r8
   2076a:	f04f 34ff 	mov.w	r4, #4294967295
   2076e:	4630      	mov	r0, r6
   20770:	2100      	movs	r1, #0
   20772:	0853      	lsrs	r3, r2, #1
   20774:	3101      	adds	r1, #1
   20776:	6842      	ldr	r2, [r0, #4]
   20778:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   2077c:	f840 3b04 	str.w	r3, [r0], #4
   20780:	42a1      	cmp	r1, r4
   20782:	d3f6      	bcc.n	20772 <rshift_mod_n+0x2e>
   20784:	2c00      	cmp	r4, #0
   20786:	bf08      	it	eq
   20788:	2401      	moveq	r4, #1
   2078a:	ea4f 7bcb 	mov.w	fp, fp, lsl #31
   2078e:	ea4b 0252 	orr.w	r2, fp, r2, lsr #1
   20792:	f846 2024 	str.w	r2, [r6, r4, lsl #2]
   20796:	3f01      	subs	r7, #1
   20798:	f1b7 3fff 	cmp.w	r7, #4294967295
   2079c:	d022      	beq.n	207e4 <rshift_mod_n+0xa0>
   2079e:	4634      	mov	r4, r6
   207a0:	6825      	ldr	r5, [r4, #0]
   207a2:	f345 0500 	sbfx	r5, r5, #0, #1
   207a6:	f1b8 0f00 	cmp.w	r8, #0
   207aa:	d0dc      	beq.n	20766 <rshift_mod_n+0x22>
   207ac:	f1a4 0c04 	sub.w	ip, r4, #4
   207b0:	f1a9 0004 	sub.w	r0, r9, #4
   207b4:	1f33      	subs	r3, r6, #4
   207b6:	4454      	add	r4, sl
   207b8:	46f3      	mov	fp, lr
   207ba:	f850 2f04 	ldr.w	r2, [r0, #4]!
   207be:	402a      	ands	r2, r5
   207c0:	f85c 1f04 	ldr.w	r1, [ip, #4]!
   207c4:	eb11 010b 	adds.w	r1, r1, fp
   207c8:	eb4e 0b0e 	adc.w	fp, lr, lr
   207cc:	1851      	adds	r1, r2, r1
   207ce:	f843 1f04 	str.w	r1, [r3, #4]!
   207d2:	f14b 0b00 	adc.w	fp, fp, #0
   207d6:	45a4      	cmp	ip, r4
   207d8:	d1ef      	bne.n	207ba <rshift_mod_n+0x76>
   207da:	6832      	ldr	r2, [r6, #0]
   207dc:	f1b8 0401 	subs.w	r4, r8, #1
   207e0:	d1c5      	bne.n	2076e <rshift_mod_n+0x2a>
   207e2:	e7d2      	b.n	2078a <rshift_mod_n+0x46>
   207e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000207e8 <inner_loop_n>:
   207e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   207ec:	b083      	sub	sp, #12
   207ee:	9001      	str	r0, [sp, #4]
   207f0:	6808      	ldr	r0, [r1, #0]
   207f2:	684e      	ldr	r6, [r1, #4]
   207f4:	f8d2 8000 	ldr.w	r8, [r2]
   207f8:	f8d2 9004 	ldr.w	r9, [r2, #4]
   207fc:	1e5a      	subs	r2, r3, #1
   207fe:	9200      	str	r2, [sp, #0]
   20800:	2b00      	cmp	r3, #0
   20802:	d056      	beq.n	208b2 <inner_loop_n+0xca>
   20804:	2401      	movs	r4, #1
   20806:	2500      	movs	r5, #0
   20808:	462b      	mov	r3, r5
   2080a:	4627      	mov	r7, r4
   2080c:	46aa      	mov	sl, r5
   2080e:	f340 0e00 	sbfx	lr, r0, #0, #1
   20812:	ea0e 0108 	and.w	r1, lr, r8
   20816:	1a42      	subs	r2, r0, r1
   20818:	1a41      	subs	r1, r0, r1
   2081a:	eb6a 010a 	sbc.w	r1, sl, sl
   2081e:	f001 0b01 	and.w	fp, r1, #1
   20822:	ea0e 0109 	and.w	r1, lr, r9
   20826:	1a71      	subs	r1, r6, r1
   20828:	eb6a 0c0a 	sbc.w	ip, sl, sl
   2082c:	ebb1 010b 	subs.w	r1, r1, fp
   20830:	f16c 0c00 	sbc.w	ip, ip, #0
   20834:	ea81 010c 	eor.w	r1, r1, ip
   20838:	ea82 020c 	eor.w	r2, r2, ip
   2083c:	f00c 0b01 	and.w	fp, ip, #1
   20840:	eb12 020b 	adds.w	r2, r2, fp
   20844:	f141 0100 	adc.w	r1, r1, #0
   20848:	ea80 0008 	eor.w	r0, r0, r8
   2084c:	ea00 000c 	and.w	r0, r0, ip
   20850:	ea88 0800 	eor.w	r8, r8, r0
   20854:	ea86 0609 	eor.w	r6, r6, r9
   20858:	ea06 060c 	and.w	r6, r6, ip
   2085c:	ea89 0906 	eor.w	r9, r9, r6
   20860:	ea87 0005 	eor.w	r0, r7, r5
   20864:	ea00 000c 	and.w	r0, r0, ip
   20868:	4047      	eors	r7, r0
   2086a:	4045      	eors	r5, r0
   2086c:	ea83 0004 	eor.w	r0, r3, r4
   20870:	ea00 0c0c 	and.w	ip, r0, ip
   20874:	ea8c 0303 	eor.w	r3, ip, r3
   20878:	ea8c 0404 	eor.w	r4, ip, r4
   2087c:	ea0e 0005 	and.w	r0, lr, r5
   20880:	1a3f      	subs	r7, r7, r0
   20882:	ea0e 0e04 	and.w	lr, lr, r4
   20886:	eba3 030e 	sub.w	r3, r3, lr
   2088a:	006d      	lsls	r5, r5, #1
   2088c:	0064      	lsls	r4, r4, #1
   2088e:	07c8      	lsls	r0, r1, #31
   20890:	ea40 0052 	orr.w	r0, r0, r2, lsr #1
   20894:	084e      	lsrs	r6, r1, #1
   20896:	9a00      	ldr	r2, [sp, #0]
   20898:	3a01      	subs	r2, #1
   2089a:	9200      	str	r2, [sp, #0]
   2089c:	f1b2 3fff 	cmp.w	r2, #4294967295
   208a0:	d1b5      	bne.n	2080e <inner_loop_n+0x26>
   208a2:	9a01      	ldr	r2, [sp, #4]
   208a4:	6017      	str	r7, [r2, #0]
   208a6:	6053      	str	r3, [r2, #4]
   208a8:	6095      	str	r5, [r2, #8]
   208aa:	60d4      	str	r4, [r2, #12]
   208ac:	b003      	add	sp, #12
   208ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   208b2:	461d      	mov	r5, r3
   208b4:	2401      	movs	r4, #1
   208b6:	4627      	mov	r7, r4
   208b8:	e7f3      	b.n	208a2 <inner_loop_n+0xba>

000208ba <cneg_n>:
   208ba:	b1bb      	cbz	r3, 208ec <cneg_n+0x32>
   208bc:	b530      	push	{r4, r5, lr}
   208be:	f002 0c01 	and.w	ip, r2, #1
   208c2:	3904      	subs	r1, #4
   208c4:	3804      	subs	r0, #4
   208c6:	eb01 0583 	add.w	r5, r1, r3, lsl #2
   208ca:	f04f 0e00 	mov.w	lr, #0
   208ce:	f851 3f04 	ldr.w	r3, [r1, #4]!
   208d2:	4053      	eors	r3, r2
   208d4:	eb03 040c 	add.w	r4, r3, ip
   208d8:	f840 4f04 	str.w	r4, [r0, #4]!
   208dc:	eb13 030c 	adds.w	r3, r3, ip
   208e0:	eb4e 030e 	adc.w	r3, lr, lr
   208e4:	469c      	mov	ip, r3
   208e6:	42a9      	cmp	r1, r5
   208e8:	d1f1      	bne.n	208ce <cneg_n+0x14>
   208ea:	bd30      	pop	{r4, r5, pc}
   208ec:	4770      	bx	lr

000208ee <umul_n>:
   208ee:	b193      	cbz	r3, 20916 <umul_n+0x28>
   208f0:	b510      	push	{r4, lr}
   208f2:	3904      	subs	r1, #4
   208f4:	f1a0 0e04 	sub.w	lr, r0, #4
   208f8:	eb01 0483 	add.w	r4, r1, r3, lsl #2
   208fc:	2000      	movs	r0, #0
   208fe:	f851 3f04 	ldr.w	r3, [r1, #4]!
   20902:	fba3 3c02 	umull	r3, ip, r3, r2
   20906:	181b      	adds	r3, r3, r0
   20908:	f84e 3f04 	str.w	r3, [lr, #4]!
   2090c:	f14c 0000 	adc.w	r0, ip, #0
   20910:	42a1      	cmp	r1, r4
   20912:	d1f4      	bne.n	208fe <umul_n+0x10>
   20914:	bd10      	pop	{r4, pc}
   20916:	4618      	mov	r0, r3
   20918:	4770      	bx	lr

0002091a <nibble>:
   2091a:	4603      	mov	r3, r0
   2091c:	3830      	subs	r0, #48	; 0x30
   2091e:	b2c0      	uxtb	r0, r0
   20920:	2809      	cmp	r0, #9
   20922:	d910      	bls.n	20946 <nibble+0x2c>
   20924:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   20928:	b2d2      	uxtb	r2, r2
   2092a:	2a05      	cmp	r2, #5
   2092c:	d907      	bls.n	2093e <nibble+0x24>
   2092e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   20932:	b2d2      	uxtb	r2, r2
   20934:	2a05      	cmp	r2, #5
   20936:	d805      	bhi.n	20944 <nibble+0x2a>
   20938:	3b37      	subs	r3, #55	; 0x37
   2093a:	b2d8      	uxtb	r0, r3
   2093c:	4770      	bx	lr
   2093e:	3b57      	subs	r3, #87	; 0x57
   20940:	b2d8      	uxtb	r0, r3
   20942:	4770      	bx	lr
   20944:	2010      	movs	r0, #16
   20946:	4770      	bx	lr

00020948 <limbs_from_hexascii>:
   20948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2094c:	4607      	mov	r7, r0
   2094e:	4689      	mov	r9, r1
   20950:	4616      	mov	r6, r2
   20952:	7813      	ldrb	r3, [r2, #0]
   20954:	2b30      	cmp	r3, #48	; 0x30
   20956:	d00e      	beq.n	20976 <limbs_from_hexascii+0x2e>
   20958:	ea5f 0849 	movs.w	r8, r9, lsl #1
   2095c:	d013      	beq.n	20986 <limbs_from_hexascii+0x3e>
   2095e:	1e75      	subs	r5, r6, #1
   20960:	2400      	movs	r4, #0
   20962:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   20966:	f7ff ffd8 	bl	2091a <nibble>
   2096a:	280f      	cmp	r0, #15
   2096c:	d80a      	bhi.n	20984 <limbs_from_hexascii+0x3c>
   2096e:	3401      	adds	r4, #1
   20970:	4544      	cmp	r4, r8
   20972:	d1f6      	bne.n	20962 <limbs_from_hexascii+0x1a>
   20974:	e007      	b.n	20986 <limbs_from_hexascii+0x3e>
   20976:	7853      	ldrb	r3, [r2, #1]
   20978:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2097c:	2b58      	cmp	r3, #88	; 0x58
   2097e:	bf08      	it	eq
   20980:	3602      	addeq	r6, #2
   20982:	e7e9      	b.n	20958 <limbs_from_hexascii+0x10>
   20984:	46a0      	mov	r8, r4
   20986:	ea4f 0099 	mov.w	r0, r9, lsr #2
   2098a:	f1b9 0f03 	cmp.w	r9, #3
   2098e:	d907      	bls.n	209a0 <limbs_from_hexascii+0x58>
   20990:	463a      	mov	r2, r7
   20992:	2300      	movs	r3, #0
   20994:	4619      	mov	r1, r3
   20996:	f842 1b04 	str.w	r1, [r2], #4
   2099a:	3301      	adds	r3, #1
   2099c:	4298      	cmp	r0, r3
   2099e:	d8fa      	bhi.n	20996 <limbs_from_hexascii+0x4e>
   209a0:	f108 34ff 	add.w	r4, r8, #4294967295
   209a4:	f1b8 0f00 	cmp.w	r8, #0
   209a8:	d010      	beq.n	209cc <limbs_from_hexascii+0x84>
   209aa:	2500      	movs	r5, #0
   209ac:	012d      	lsls	r5, r5, #4
   209ae:	f816 0b01 	ldrb.w	r0, [r6], #1
   209b2:	f7ff ffb2 	bl	2091a <nibble>
   209b6:	4305      	orrs	r5, r0
   209b8:	f014 0f07 	tst.w	r4, #7
   209bc:	bf04      	itt	eq
   209be:	08e3      	lsreq	r3, r4, #3
   209c0:	f847 5023 	streq.w	r5, [r7, r3, lsl #2]
   209c4:	3c01      	subs	r4, #1
   209c6:	f1b4 3fff 	cmp.w	r4, #4294967295
   209ca:	d1ef      	bne.n	209ac <limbs_from_hexascii+0x64>
   209cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000209d0 <mul_mont_n>:
   209d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   209d4:	b087      	sub	sp, #28
   209d6:	af00      	add	r7, sp, #0
   209d8:	6038      	str	r0, [r7, #0]
   209da:	60b9      	str	r1, [r7, #8]
   209dc:	617b      	str	r3, [r7, #20]
   209de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   209e0:	3301      	adds	r3, #1
   209e2:	0098      	lsls	r0, r3, #2
   209e4:	6078      	str	r0, [r7, #4]
   209e6:	1dc3      	adds	r3, r0, #7
   209e8:	f023 0307 	bic.w	r3, r3, #7
   209ec:	ebad 0d03 	sub.w	sp, sp, r3
   209f0:	46e8      	mov	r8, sp
   209f2:	6815      	ldr	r5, [r2, #0]
   209f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   209f6:	b363      	cbz	r3, 20a52 <mul_mont_n+0x82>
   209f8:	1f0c      	subs	r4, r1, #4
   209fa:	f1a8 0604 	sub.w	r6, r8, #4
   209fe:	f1a0 0c04 	sub.w	ip, r0, #4
   20a02:	44a4      	add	ip, r4
   20a04:	2100      	movs	r1, #0
   20a06:	f854 3f04 	ldr.w	r3, [r4, #4]!
   20a0a:	fba3 3005 	umull	r3, r0, r3, r5
   20a0e:	185b      	adds	r3, r3, r1
   20a10:	f846 3f04 	str.w	r3, [r6, #4]!
   20a14:	f140 0100 	adc.w	r1, r0, #0
   20a18:	4564      	cmp	r4, ip
   20a1a:	d1f4      	bne.n	20a06 <mul_mont_n+0x36>
   20a1c:	6c78      	ldr	r0, [r7, #68]	; 0x44
   20a1e:	f8d8 3000 	ldr.w	r3, [r8]
   20a22:	6c3c      	ldr	r4, [r7, #64]	; 0x40
   20a24:	fb04 f303 	mul.w	r3, r4, r3
   20a28:	f848 1020 	str.w	r1, [r8, r0, lsl #2]
   20a2c:	697d      	ldr	r5, [r7, #20]
   20a2e:	f855 1904 	ldr.w	r1, [r5], #-4
   20a32:	60f9      	str	r1, [r7, #12]
   20a34:	4691      	mov	r9, r2
   20a36:	6879      	ldr	r1, [r7, #4]
   20a38:	1f0e      	subs	r6, r1, #4
   20a3a:	3a04      	subs	r2, #4
   20a3c:	4631      	mov	r1, r6
   20a3e:	4432      	add	r2, r6
   20a40:	613a      	str	r2, [r7, #16]
   20a42:	4435      	add	r5, r6
   20a44:	68ba      	ldr	r2, [r7, #8]
   20a46:	1f16      	subs	r6, r2, #4
   20a48:	440e      	add	r6, r1
   20a4a:	f04f 0c00 	mov.w	ip, #0
   20a4e:	4664      	mov	r4, ip
   20a50:	e056      	b.n	20b00 <mul_mont_n+0x130>
   20a52:	6c78      	ldr	r0, [r7, #68]	; 0x44
   20a54:	4601      	mov	r1, r0
   20a56:	e7e2      	b.n	20a1e <mul_mont_n+0x4e>
   20a58:	2301      	movs	r3, #1
   20a5a:	e072      	b.n	20b42 <mul_mont_n+0x172>
   20a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   20a5e:	b37b      	cbz	r3, 20ac0 <mul_mont_n+0xf0>
   20a60:	f1a8 0404 	sub.w	r4, r8, #4
   20a64:	697b      	ldr	r3, [r7, #20]
   20a66:	f1a3 0c04 	sub.w	ip, r3, #4
   20a6a:	683b      	ldr	r3, [r7, #0]
   20a6c:	1f19      	subs	r1, r3, #4
   20a6e:	687b      	ldr	r3, [r7, #4]
   20a70:	3b08      	subs	r3, #8
   20a72:	4498      	add	r8, r3
   20a74:	460e      	mov	r6, r1
   20a76:	4620      	mov	r0, r4
   20a78:	2300      	movs	r3, #0
   20a7a:	461d      	mov	r5, r3
   20a7c:	f850 2f04 	ldr.w	r2, [r0, #4]!
   20a80:	1ad3      	subs	r3, r2, r3
   20a82:	eb65 0205 	sbc.w	r2, r5, r5
   20a86:	f85c 9f04 	ldr.w	r9, [ip, #4]!
   20a8a:	ebb3 0309 	subs.w	r3, r3, r9
   20a8e:	f162 0200 	sbc.w	r2, r2, #0
   20a92:	f846 3f04 	str.w	r3, [r6, #4]!
   20a96:	f002 0301 	and.w	r3, r2, #1
   20a9a:	4540      	cmp	r0, r8
   20a9c:	d1ee      	bne.n	20a7c <mul_mont_n+0xac>
   20a9e:	ebae 0e03 	sub.w	lr, lr, r3
   20aa2:	6838      	ldr	r0, [r7, #0]
   20aa4:	687b      	ldr	r3, [r7, #4]
   20aa6:	4418      	add	r0, r3
   20aa8:	3808      	subs	r0, #8
   20aaa:	f851 2f04 	ldr.w	r2, [r1, #4]!
   20aae:	f854 3f04 	ldr.w	r3, [r4, #4]!
   20ab2:	4053      	eors	r3, r2
   20ab4:	ea03 030e 	and.w	r3, r3, lr
   20ab8:	4053      	eors	r3, r2
   20aba:	600b      	str	r3, [r1, #0]
   20abc:	4281      	cmp	r1, r0
   20abe:	d1f4      	bne.n	20aaa <mul_mont_n+0xda>
   20ac0:	371c      	adds	r7, #28
   20ac2:	46bd      	mov	sp, r7
   20ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20ac8:	f85e 1f04 	ldr.w	r1, [lr, #4]!
   20acc:	fba1 100b 	umull	r1, r0, r1, fp
   20ad0:	f85c 3f04 	ldr.w	r3, [ip, #4]!
   20ad4:	189b      	adds	r3, r3, r2
   20ad6:	eb44 0204 	adc.w	r2, r4, r4
   20ada:	18cb      	adds	r3, r1, r3
   20adc:	f8cc 3000 	str.w	r3, [ip]
   20ae0:	eb40 0202 	adc.w	r2, r0, r2
   20ae4:	45b6      	cmp	lr, r6
   20ae6:	d1ef      	bne.n	20ac8 <mul_mont_n+0xf8>
   20ae8:	6c79      	ldr	r1, [r7, #68]	; 0x44
   20aea:	f8d8 3000 	ldr.w	r3, [r8]
   20aee:	6c38      	ldr	r0, [r7, #64]	; 0x40
   20af0:	fb00 f303 	mul.w	r3, r0, r3
   20af4:	eb12 020a 	adds.w	r2, r2, sl
   20af8:	f144 0c00 	adc.w	ip, r4, #0
   20afc:	f848 2021 	str.w	r2, [r8, r1, lsl #2]
   20b00:	68fa      	ldr	r2, [r7, #12]
   20b02:	fba3 e102 	umull	lr, r1, r3, r2
   20b06:	f8d8 0000 	ldr.w	r0, [r8]
   20b0a:	eb1e 0000 	adds.w	r0, lr, r0
   20b0e:	f141 0200 	adc.w	r2, r1, #0
   20b12:	6c79      	ldr	r1, [r7, #68]	; 0x44
   20b14:	2901      	cmp	r1, #1
   20b16:	d99f      	bls.n	20a58 <mul_mont_n+0x88>
   20b18:	46c6      	mov	lr, r8
   20b1a:	6978      	ldr	r0, [r7, #20]
   20b1c:	46b3      	mov	fp, r6
   20b1e:	f850 1f04 	ldr.w	r1, [r0, #4]!
   20b22:	fba1 1a03 	umull	r1, sl, r1, r3
   20b26:	188a      	adds	r2, r1, r2
   20b28:	f14a 0100 	adc.w	r1, sl, #0
   20b2c:	f8de 6004 	ldr.w	r6, [lr, #4]
   20b30:	1992      	adds	r2, r2, r6
   20b32:	f84e 2b04 	str.w	r2, [lr], #4
   20b36:	f141 0200 	adc.w	r2, r1, #0
   20b3a:	42a8      	cmp	r0, r5
   20b3c:	d1ef      	bne.n	20b1e <mul_mont_n+0x14e>
   20b3e:	465e      	mov	r6, fp
   20b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   20b42:	eb08 0083 	add.w	r0, r8, r3, lsl #2
   20b46:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
   20b4a:	eb12 010c 	adds.w	r1, r2, ip
   20b4e:	eb44 0e04 	adc.w	lr, r4, r4
   20b52:	1859      	adds	r1, r3, r1
   20b54:	f14e 0e00 	adc.w	lr, lr, #0
   20b58:	f840 1c04 	str.w	r1, [r0, #-4]
   20b5c:	46f2      	mov	sl, lr
   20b5e:	693b      	ldr	r3, [r7, #16]
   20b60:	4599      	cmp	r9, r3
   20b62:	f43f af7b 	beq.w	20a5c <mul_mont_n+0x8c>
   20b66:	f859 bf04 	ldr.w	fp, [r9, #4]!
   20b6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   20b6c:	b133      	cbz	r3, 20b7c <mul_mont_n+0x1ac>
   20b6e:	68bb      	ldr	r3, [r7, #8]
   20b70:	f1a3 0e04 	sub.w	lr, r3, #4
   20b74:	f1a8 0c04 	sub.w	ip, r8, #4
   20b78:	4622      	mov	r2, r4
   20b7a:	e7a5      	b.n	20ac8 <mul_mont_n+0xf8>
   20b7c:	6c79      	ldr	r1, [r7, #68]	; 0x44
   20b7e:	460a      	mov	r2, r1
   20b80:	e7b3      	b.n	20aea <mul_mont_n+0x11a>

00020b82 <sigma>:
   20b82:	b510      	push	{r4, lr}
   20b84:	b082      	sub	sp, #8
   20b86:	1f0b      	subs	r3, r1, #4
   20b88:	1f02      	subs	r2, r0, #4
   20b8a:	f101 0c5c 	add.w	ip, r1, #92	; 0x5c
   20b8e:	f853 4f04 	ldr.w	r4, [r3, #4]!
   20b92:	f842 4f04 	str.w	r4, [r2, #4]!
   20b96:	4563      	cmp	r3, ip
   20b98:	d1f9      	bne.n	20b8e <sigma+0xc>
   20b9a:	4b06      	ldr	r3, [pc, #24]	; (20bb4 <sigma+0x32>)
   20b9c:	220c      	movs	r2, #12
   20b9e:	9201      	str	r2, [sp, #4]
   20ba0:	4a05      	ldr	r2, [pc, #20]	; (20bb8 <sigma+0x36>)
   20ba2:	9200      	str	r2, [sp, #0]
   20ba4:	f103 0230 	add.w	r2, r3, #48	; 0x30
   20ba8:	3160      	adds	r1, #96	; 0x60
   20baa:	3060      	adds	r0, #96	; 0x60
   20bac:	f7ff ff10 	bl	209d0 <mul_mont_n>
   20bb0:	b002      	add	sp, #8
   20bb2:	bd10      	pop	{r4, pc}
   20bb4:	00038688 	.word	0x00038688
   20bb8:	fffcfffd 	.word	0xfffcfffd

00020bbc <map_fp_times_Zz>:
   20bbc:	b323      	cbz	r3, 20c08 <map_fp_times_Zz+0x4c>
   20bbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20bc2:	b082      	sub	sp, #8
   20bc4:	1e5f      	subs	r7, r3, #1
   20bc6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   20bca:	011c      	lsls	r4, r3, #4
   20bcc:	3c30      	subs	r4, #48	; 0x30
   20bce:	1906      	adds	r6, r0, r4
   20bd0:	190d      	adds	r5, r1, r4
   20bd2:	4414      	add	r4, r2
   20bd4:	f8df a034 	ldr.w	sl, [pc, #52]	; 20c0c <map_fp_times_Zz+0x50>
   20bd8:	f04f 090c 	mov.w	r9, #12
   20bdc:	f8df 8030 	ldr.w	r8, [pc, #48]	; 20c10 <map_fp_times_Zz+0x54>
   20be0:	f8cd 9004 	str.w	r9, [sp, #4]
   20be4:	f8cd 8000 	str.w	r8, [sp]
   20be8:	4653      	mov	r3, sl
   20bea:	4622      	mov	r2, r4
   20bec:	4629      	mov	r1, r5
   20bee:	4630      	mov	r0, r6
   20bf0:	f7ff feee 	bl	209d0 <mul_mont_n>
   20bf4:	3f01      	subs	r7, #1
   20bf6:	3e30      	subs	r6, #48	; 0x30
   20bf8:	3d30      	subs	r5, #48	; 0x30
   20bfa:	3c30      	subs	r4, #48	; 0x30
   20bfc:	f1b7 3fff 	cmp.w	r7, #4294967295
   20c00:	d1ee      	bne.n	20be0 <map_fp_times_Zz+0x24>
   20c02:	b002      	add	sp, #8
   20c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20c08:	4770      	bx	lr
   20c0a:	bf00      	nop
   20c0c:	00038688 	.word	0x00038688
   20c10:	fffcfffd 	.word	0xfffcfffd

00020c14 <line_by_Px2>:
   20c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20c18:	b082      	sub	sp, #8
   20c1a:	4604      	mov	r4, r0
   20c1c:	460d      	mov	r5, r1
   20c1e:	3060      	adds	r0, #96	; 0x60
   20c20:	4e16      	ldr	r6, [pc, #88]	; (20c7c <line_by_Px2+0x68>)
   20c22:	f04f 080c 	mov.w	r8, #12
   20c26:	f8cd 8004 	str.w	r8, [sp, #4]
   20c2a:	4f15      	ldr	r7, [pc, #84]	; (20c80 <line_by_Px2+0x6c>)
   20c2c:	9700      	str	r7, [sp, #0]
   20c2e:	4633      	mov	r3, r6
   20c30:	460a      	mov	r2, r1
   20c32:	4601      	mov	r1, r0
   20c34:	f7ff fecc 	bl	209d0 <mul_mont_n>
   20c38:	f104 0090 	add.w	r0, r4, #144	; 0x90
   20c3c:	f8cd 8004 	str.w	r8, [sp, #4]
   20c40:	9700      	str	r7, [sp, #0]
   20c42:	4633      	mov	r3, r6
   20c44:	462a      	mov	r2, r5
   20c46:	4601      	mov	r1, r0
   20c48:	f7ff fec2 	bl	209d0 <mul_mont_n>
   20c4c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   20c50:	3530      	adds	r5, #48	; 0x30
   20c52:	f8cd 8004 	str.w	r8, [sp, #4]
   20c56:	9700      	str	r7, [sp, #0]
   20c58:	4633      	mov	r3, r6
   20c5a:	462a      	mov	r2, r5
   20c5c:	4601      	mov	r1, r0
   20c5e:	f7ff feb7 	bl	209d0 <mul_mont_n>
   20c62:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   20c66:	f8cd 8004 	str.w	r8, [sp, #4]
   20c6a:	9700      	str	r7, [sp, #0]
   20c6c:	4633      	mov	r3, r6
   20c6e:	462a      	mov	r2, r5
   20c70:	4601      	mov	r1, r0
   20c72:	f7ff fead 	bl	209d0 <mul_mont_n>
   20c76:	b002      	add	sp, #8
   20c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20c7c:	00038688 	.word	0x00038688
   20c80:	fffcfffd 	.word	0xfffcfffd

00020c84 <post_line_by_Px2>:
   20c84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20c88:	b083      	sub	sp, #12
   20c8a:	4607      	mov	r7, r0
   20c8c:	460d      	mov	r5, r1
   20c8e:	4616      	mov	r6, r2
   20c90:	1f0b      	subs	r3, r1, #4
   20c92:	f1a0 0c04 	sub.w	ip, r0, #4
   20c96:	f101 0e5c 	add.w	lr, r1, #92	; 0x5c
   20c9a:	f853 4f04 	ldr.w	r4, [r3, #4]!
   20c9e:	f84c 4f04 	str.w	r4, [ip, #4]!
   20ca2:	4573      	cmp	r3, lr
   20ca4:	d1f9      	bne.n	20c9a <post_line_by_Px2+0x16>
   20ca6:	4c1c      	ldr	r4, [pc, #112]	; (20d18 <post_line_by_Px2+0x94>)
   20ca8:	f04f 090c 	mov.w	r9, #12
   20cac:	f8cd 9004 	str.w	r9, [sp, #4]
   20cb0:	f8df 8068 	ldr.w	r8, [pc, #104]	; 20d1c <post_line_by_Px2+0x98>
   20cb4:	f8cd 8000 	str.w	r8, [sp]
   20cb8:	4623      	mov	r3, r4
   20cba:	4632      	mov	r2, r6
   20cbc:	f105 0160 	add.w	r1, r5, #96	; 0x60
   20cc0:	f107 0060 	add.w	r0, r7, #96	; 0x60
   20cc4:	f7ff fe84 	bl	209d0 <mul_mont_n>
   20cc8:	f8cd 9004 	str.w	r9, [sp, #4]
   20ccc:	f8cd 8000 	str.w	r8, [sp]
   20cd0:	4623      	mov	r3, r4
   20cd2:	4632      	mov	r2, r6
   20cd4:	f105 0190 	add.w	r1, r5, #144	; 0x90
   20cd8:	f107 0090 	add.w	r0, r7, #144	; 0x90
   20cdc:	f7ff fe78 	bl	209d0 <mul_mont_n>
   20ce0:	3630      	adds	r6, #48	; 0x30
   20ce2:	f8cd 9004 	str.w	r9, [sp, #4]
   20ce6:	f8cd 8000 	str.w	r8, [sp]
   20cea:	4623      	mov	r3, r4
   20cec:	4632      	mov	r2, r6
   20cee:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
   20cf2:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
   20cf6:	f7ff fe6b 	bl	209d0 <mul_mont_n>
   20cfa:	f8cd 9004 	str.w	r9, [sp, #4]
   20cfe:	f8cd 8000 	str.w	r8, [sp]
   20d02:	4623      	mov	r3, r4
   20d04:	4632      	mov	r2, r6
   20d06:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   20d0a:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
   20d0e:	f7ff fe5f 	bl	209d0 <mul_mont_n>
   20d12:	b003      	add	sp, #12
   20d14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   20d18:	00038688 	.word	0x00038688
   20d1c:	fffcfffd 	.word	0xfffcfffd

00020d20 <add_mod_n>:
   20d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20d24:	b083      	sub	sp, #12
   20d26:	af00      	add	r7, sp, #0
   20d28:	607b      	str	r3, [r7, #4]
   20d2a:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   20d2c:	ea4f 0985 	mov.w	r9, r5, lsl #2
   20d30:	f109 0407 	add.w	r4, r9, #7
   20d34:	f024 0407 	bic.w	r4, r4, #7
   20d38:	ebad 0d04 	sub.w	sp, sp, r4
   20d3c:	2d00      	cmp	r5, #0
   20d3e:	d044      	beq.n	20dca <add_mod_n+0xaa>
   20d40:	46ea      	mov	sl, sp
   20d42:	f1a1 0c04 	sub.w	ip, r1, #4
   20d46:	f1a2 0e04 	sub.w	lr, r2, #4
   20d4a:	f1aa 0404 	sub.w	r4, sl, #4
   20d4e:	eb0c 0809 	add.w	r8, ip, r9
   20d52:	4626      	mov	r6, r4
   20d54:	2100      	movs	r1, #0
   20d56:	460d      	mov	r5, r1
   20d58:	f85c 2f04 	ldr.w	r2, [ip, #4]!
   20d5c:	f85e 3f04 	ldr.w	r3, [lr, #4]!
   20d60:	18d2      	adds	r2, r2, r3
   20d62:	eb45 0b05 	adc.w	fp, r5, r5
   20d66:	1852      	adds	r2, r2, r1
   20d68:	f846 2f04 	str.w	r2, [r6, #4]!
   20d6c:	f14b 0100 	adc.w	r1, fp, #0
   20d70:	45c4      	cmp	ip, r8
   20d72:	d1f1      	bne.n	20d58 <add_mod_n+0x38>
   20d74:	687b      	ldr	r3, [r7, #4]
   20d76:	3b04      	subs	r3, #4
   20d78:	1f05      	subs	r5, r0, #4
   20d7a:	f1a9 0204 	sub.w	r2, r9, #4
   20d7e:	4492      	add	sl, r2
   20d80:	46ae      	mov	lr, r5
   20d82:	4626      	mov	r6, r4
   20d84:	f04f 0800 	mov.w	r8, #0
   20d88:	46c4      	mov	ip, r8
   20d8a:	f856 2f04 	ldr.w	r2, [r6, #4]!
   20d8e:	ebb2 0208 	subs.w	r2, r2, r8
   20d92:	eb6c 080c 	sbc.w	r8, ip, ip
   20d96:	f853 bf04 	ldr.w	fp, [r3, #4]!
   20d9a:	ebb2 020b 	subs.w	r2, r2, fp
   20d9e:	f168 0800 	sbc.w	r8, r8, #0
   20da2:	f84e 2f04 	str.w	r2, [lr, #4]!
   20da6:	f008 0801 	and.w	r8, r8, #1
   20daa:	4556      	cmp	r6, sl
   20dac:	d1ed      	bne.n	20d8a <add_mod_n+0x6a>
   20dae:	eba1 0208 	sub.w	r2, r1, r8
   20db2:	3804      	subs	r0, #4
   20db4:	4481      	add	r9, r0
   20db6:	f855 1f04 	ldr.w	r1, [r5, #4]!
   20dba:	f854 3f04 	ldr.w	r3, [r4, #4]!
   20dbe:	404b      	eors	r3, r1
   20dc0:	4013      	ands	r3, r2
   20dc2:	404b      	eors	r3, r1
   20dc4:	602b      	str	r3, [r5, #0]
   20dc6:	454d      	cmp	r5, r9
   20dc8:	d1f5      	bne.n	20db6 <add_mod_n+0x96>
   20dca:	370c      	adds	r7, #12
   20dcc:	46bd      	mov	sp, r7
   20dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00020dd2 <map_fp>:
   20dd2:	b343      	cbz	r3, 20e26 <map_fp+0x54>
   20dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20dd8:	b082      	sub	sp, #8
   20dda:	4604      	mov	r4, r0
   20ddc:	4688      	mov	r8, r1
   20dde:	1e5e      	subs	r6, r3, #1
   20de0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   20de4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   20de8:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
   20dec:	f8df 9038 	ldr.w	r9, [pc, #56]	; 20e28 <map_fp+0x56>
   20df0:	270c      	movs	r7, #12
   20df2:	f8df a038 	ldr.w	sl, [pc, #56]	; 20e2c <map_fp+0x5a>
   20df6:	9701      	str	r7, [sp, #4]
   20df8:	f8cd a000 	str.w	sl, [sp]
   20dfc:	464b      	mov	r3, r9
   20dfe:	4642      	mov	r2, r8
   20e00:	4621      	mov	r1, r4
   20e02:	4620      	mov	r0, r4
   20e04:	f7ff fde4 	bl	209d0 <mul_mont_n>
   20e08:	9700      	str	r7, [sp, #0]
   20e0a:	464b      	mov	r3, r9
   20e0c:	462a      	mov	r2, r5
   20e0e:	4621      	mov	r1, r4
   20e10:	4620      	mov	r0, r4
   20e12:	f7ff ff85 	bl	20d20 <add_mod_n>
   20e16:	3e01      	subs	r6, #1
   20e18:	3d30      	subs	r5, #48	; 0x30
   20e1a:	f1b6 3fff 	cmp.w	r6, #4294967295
   20e1e:	d1ea      	bne.n	20df6 <map_fp+0x24>
   20e20:	b002      	add	sp, #8
   20e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20e26:	4770      	bx	lr
   20e28:	00038688 	.word	0x00038688
   20e2c:	fffcfffd 	.word	0xfffcfffd

00020e30 <mul_by_3_mod_n>:
   20e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20e34:	b087      	sub	sp, #28
   20e36:	af00      	add	r7, sp, #0
   20e38:	60f8      	str	r0, [r7, #12]
   20e3a:	4618      	mov	r0, r3
   20e3c:	60bb      	str	r3, [r7, #8]
   20e3e:	009e      	lsls	r6, r3, #2
   20e40:	617e      	str	r6, [r7, #20]
   20e42:	1df3      	adds	r3, r6, #7
   20e44:	f023 0307 	bic.w	r3, r3, #7
   20e48:	ebad 0d03 	sub.w	sp, sp, r3
   20e4c:	466c      	mov	r4, sp
   20e4e:	613c      	str	r4, [r7, #16]
   20e50:	ebad 0d03 	sub.w	sp, sp, r3
   20e54:	2800      	cmp	r0, #0
   20e56:	f000 8087 	beq.w	20f68 <mul_by_3_mod_n+0x138>
   20e5a:	466d      	mov	r5, sp
   20e5c:	1f08      	subs	r0, r1, #4
   20e5e:	3c04      	subs	r4, #4
   20e60:	6078      	str	r0, [r7, #4]
   20e62:	eb00 0e06 	add.w	lr, r0, r6
   20e66:	46a4      	mov	ip, r4
   20e68:	4603      	mov	r3, r0
   20e6a:	2100      	movs	r1, #0
   20e6c:	f853 6f04 	ldr.w	r6, [r3, #4]!
   20e70:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
   20e74:	f84c 1f04 	str.w	r1, [ip, #4]!
   20e78:	0ff1      	lsrs	r1, r6, #31
   20e7a:	4573      	cmp	r3, lr
   20e7c:	d1f6      	bne.n	20e6c <mul_by_3_mod_n+0x3c>
   20e7e:	f1a2 0e04 	sub.w	lr, r2, #4
   20e82:	3d04      	subs	r5, #4
   20e84:	697b      	ldr	r3, [r7, #20]
   20e86:	f1a3 0b04 	sub.w	fp, r3, #4
   20e8a:	693b      	ldr	r3, [r7, #16]
   20e8c:	449b      	add	fp, r3
   20e8e:	46a9      	mov	r9, r5
   20e90:	46f0      	mov	r8, lr
   20e92:	46a4      	mov	ip, r4
   20e94:	f04f 0a00 	mov.w	sl, #0
   20e98:	4656      	mov	r6, sl
   20e9a:	f85c 3f04 	ldr.w	r3, [ip, #4]!
   20e9e:	ebb3 0a0a 	subs.w	sl, r3, sl
   20ea2:	eb66 0206 	sbc.w	r2, r6, r6
   20ea6:	f858 3f04 	ldr.w	r3, [r8, #4]!
   20eaa:	ebba 0303 	subs.w	r3, sl, r3
   20eae:	f162 0a00 	sbc.w	sl, r2, #0
   20eb2:	f849 3f04 	str.w	r3, [r9, #4]!
   20eb6:	f00a 0a01 	and.w	sl, sl, #1
   20eba:	45dc      	cmp	ip, fp
   20ebc:	d1ed      	bne.n	20e9a <mul_by_3_mod_n+0x6a>
   20ebe:	eba1 0a0a 	sub.w	sl, r1, sl
   20ec2:	46a0      	mov	r8, r4
   20ec4:	46ac      	mov	ip, r5
   20ec6:	2600      	movs	r6, #0
   20ec8:	68ba      	ldr	r2, [r7, #8]
   20eca:	f85c 1f04 	ldr.w	r1, [ip, #4]!
   20ece:	f858 3f04 	ldr.w	r3, [r8, #4]!
   20ed2:	404b      	eors	r3, r1
   20ed4:	ea03 030a 	and.w	r3, r3, sl
   20ed8:	404b      	eors	r3, r1
   20eda:	f8cc 3000 	str.w	r3, [ip]
   20ede:	3601      	adds	r6, #1
   20ee0:	42b2      	cmp	r2, r6
   20ee2:	d1f2      	bne.n	20eca <mul_by_3_mod_n+0x9a>
   20ee4:	f8d7 c004 	ldr.w	ip, [r7, #4]
   20ee8:	697b      	ldr	r3, [r7, #20]
   20eea:	449c      	add	ip, r3
   20eec:	4626      	mov	r6, r4
   20eee:	2300      	movs	r3, #0
   20ef0:	4619      	mov	r1, r3
   20ef2:	46a8      	mov	r8, r5
   20ef4:	f850 2f04 	ldr.w	r2, [r0, #4]!
   20ef8:	f858 5f04 	ldr.w	r5, [r8, #4]!
   20efc:	1952      	adds	r2, r2, r5
   20efe:	eb41 0501 	adc.w	r5, r1, r1
   20f02:	18d2      	adds	r2, r2, r3
   20f04:	f846 2f04 	str.w	r2, [r6, #4]!
   20f08:	f145 0300 	adc.w	r3, r5, #0
   20f0c:	4560      	cmp	r0, ip
   20f0e:	d1f1      	bne.n	20ef4 <mul_by_3_mod_n+0xc4>
   20f10:	68fa      	ldr	r2, [r7, #12]
   20f12:	1f15      	subs	r5, r2, #4
   20f14:	697a      	ldr	r2, [r7, #20]
   20f16:	f1a2 0804 	sub.w	r8, r2, #4
   20f1a:	693a      	ldr	r2, [r7, #16]
   20f1c:	4442      	add	r2, r8
   20f1e:	4690      	mov	r8, r2
   20f20:	46ac      	mov	ip, r5
   20f22:	4620      	mov	r0, r4
   20f24:	2200      	movs	r2, #0
   20f26:	4616      	mov	r6, r2
   20f28:	f850 1f04 	ldr.w	r1, [r0, #4]!
   20f2c:	1a8a      	subs	r2, r1, r2
   20f2e:	eb66 0106 	sbc.w	r1, r6, r6
   20f32:	f85e 9f04 	ldr.w	r9, [lr, #4]!
   20f36:	ebb2 0209 	subs.w	r2, r2, r9
   20f3a:	f161 0100 	sbc.w	r1, r1, #0
   20f3e:	f84c 2f04 	str.w	r2, [ip, #4]!
   20f42:	f001 0201 	and.w	r2, r1, #1
   20f46:	4540      	cmp	r0, r8
   20f48:	d1ee      	bne.n	20f28 <mul_by_3_mod_n+0xf8>
   20f4a:	1a9b      	subs	r3, r3, r2
   20f4c:	68fa      	ldr	r2, [r7, #12]
   20f4e:	1f10      	subs	r0, r2, #4
   20f50:	697a      	ldr	r2, [r7, #20]
   20f52:	4410      	add	r0, r2
   20f54:	f855 1f04 	ldr.w	r1, [r5, #4]!
   20f58:	f854 2f04 	ldr.w	r2, [r4, #4]!
   20f5c:	404a      	eors	r2, r1
   20f5e:	401a      	ands	r2, r3
   20f60:	404a      	eors	r2, r1
   20f62:	602a      	str	r2, [r5, #0]
   20f64:	4285      	cmp	r5, r0
   20f66:	d1f5      	bne.n	20f54 <mul_by_3_mod_n+0x124>
   20f68:	371c      	adds	r7, #28
   20f6a:	46bd      	mov	sp, r7
   20f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00020f70 <lshift_mod_n>:
   20f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20f74:	b085      	sub	sp, #20
   20f76:	af00      	add	r7, sp, #0
   20f78:	60f8      	str	r0, [r7, #12]
   20f7a:	460d      	mov	r5, r1
   20f7c:	607b      	str	r3, [r7, #4]
   20f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   20f80:	0099      	lsls	r1, r3, #2
   20f82:	1dcb      	adds	r3, r1, #7
   20f84:	f023 0307 	bic.w	r3, r3, #7
   20f88:	ebad 0d03 	sub.w	sp, sp, r3
   20f8c:	466b      	mov	r3, sp
   20f8e:	60bb      	str	r3, [r7, #8]
   20f90:	2a00      	cmp	r2, #0
   20f92:	d04b      	beq.n	2102c <lshift_mod_n+0xbc>
   20f94:	f102 3bff 	add.w	fp, r2, #4294967295
   20f98:	1f0a      	subs	r2, r1, #4
   20f9a:	603a      	str	r2, [r7, #0]
   20f9c:	eb03 0a02 	add.w	sl, r3, r2
   20fa0:	f1a0 0904 	sub.w	r9, r0, #4
   20fa4:	4489      	add	r9, r1
   20fa6:	2400      	movs	r4, #0
   20fa8:	e010      	b.n	20fcc <lshift_mod_n+0x5c>
   20faa:	f850 2f04 	ldr.w	r2, [r0, #4]!
   20fae:	f856 3f04 	ldr.w	r3, [r6, #4]!
   20fb2:	4053      	eors	r3, r2
   20fb4:	ea03 0308 	and.w	r3, r3, r8
   20fb8:	4053      	eors	r3, r2
   20fba:	6003      	str	r3, [r0, #0]
   20fbc:	4548      	cmp	r0, r9
   20fbe:	d1f4      	bne.n	20faa <lshift_mod_n+0x3a>
   20fc0:	f10b 3bff 	add.w	fp, fp, #4294967295
   20fc4:	f1bb 3fff 	cmp.w	fp, #4294967295
   20fc8:	d030      	beq.n	2102c <lshift_mod_n+0xbc>
   20fca:	68fd      	ldr	r5, [r7, #12]
   20fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   20fce:	2b00      	cmp	r3, #0
   20fd0:	d0f6      	beq.n	20fc0 <lshift_mod_n+0x50>
   20fd2:	1f2b      	subs	r3, r5, #4
   20fd4:	68ba      	ldr	r2, [r7, #8]
   20fd6:	1f16      	subs	r6, r2, #4
   20fd8:	683a      	ldr	r2, [r7, #0]
   20fda:	4415      	add	r5, r2
   20fdc:	4630      	mov	r0, r6
   20fde:	4621      	mov	r1, r4
   20fe0:	f853 2f04 	ldr.w	r2, [r3, #4]!
   20fe4:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
   20fe8:	f840 1f04 	str.w	r1, [r0, #4]!
   20fec:	0fd1      	lsrs	r1, r2, #31
   20fee:	42ab      	cmp	r3, r5
   20ff0:	d1f6      	bne.n	20fe0 <lshift_mod_n+0x70>
   20ff2:	687b      	ldr	r3, [r7, #4]
   20ff4:	f1a3 0e04 	sub.w	lr, r3, #4
   20ff8:	68fb      	ldr	r3, [r7, #12]
   20ffa:	1f18      	subs	r0, r3, #4
   20ffc:	4684      	mov	ip, r0
   20ffe:	4635      	mov	r5, r6
   21000:	46a0      	mov	r8, r4
   21002:	f855 3f04 	ldr.w	r3, [r5, #4]!
   21006:	ebb3 0808 	subs.w	r8, r3, r8
   2100a:	eb64 0204 	sbc.w	r2, r4, r4
   2100e:	f85e 3f04 	ldr.w	r3, [lr, #4]!
   21012:	ebb8 0303 	subs.w	r3, r8, r3
   21016:	f162 0800 	sbc.w	r8, r2, #0
   2101a:	f84c 3f04 	str.w	r3, [ip, #4]!
   2101e:	f008 0801 	and.w	r8, r8, #1
   21022:	4555      	cmp	r5, sl
   21024:	d1ed      	bne.n	21002 <lshift_mod_n+0x92>
   21026:	eba1 0808 	sub.w	r8, r1, r8
   2102a:	e7be      	b.n	20faa <lshift_mod_n+0x3a>
   2102c:	3714      	adds	r7, #20
   2102e:	46bd      	mov	sp, r7
   21030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00021034 <from_mont_n>:
   21034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21038:	b087      	sub	sp, #28
   2103a:	af00      	add	r7, sp, #0
   2103c:	6078      	str	r0, [r7, #4]
   2103e:	468c      	mov	ip, r1
   21040:	613a      	str	r2, [r7, #16]
   21042:	617b      	str	r3, [r7, #20]
   21044:	f8d7 8040 	ldr.w	r8, [r7, #64]	; 0x40
   21048:	ea4f 0188 	mov.w	r1, r8, lsl #2
   2104c:	60b9      	str	r1, [r7, #8]
   2104e:	1dcb      	adds	r3, r1, #7
   21050:	f023 0307 	bic.w	r3, r3, #7
   21054:	ebad 0d03 	sub.w	sp, sp, r3
   21058:	f1b8 0f00 	cmp.w	r8, #0
   2105c:	d063      	beq.n	21126 <from_mont_n+0xf2>
   2105e:	46ea      	mov	sl, sp
   21060:	4616      	mov	r6, r2
   21062:	f856 3904 	ldr.w	r3, [r6], #-4
   21066:	60fb      	str	r3, [r7, #12]
   21068:	440e      	add	r6, r1
   2106a:	f04f 0900 	mov.w	r9, #0
   2106e:	464d      	mov	r5, r9
   21070:	e000      	b.n	21074 <from_mont_n+0x40>
   21072:	46d4      	mov	ip, sl
   21074:	f8dc 1000 	ldr.w	r1, [ip]
   21078:	697b      	ldr	r3, [r7, #20]
   2107a:	fb03 f401 	mul.w	r4, r3, r1
   2107e:	68fb      	ldr	r3, [r7, #12]
   21080:	fba4 2303 	umull	r2, r3, r4, r3
   21084:	1852      	adds	r2, r2, r1
   21086:	f143 0b00 	adc.w	fp, r3, #0
   2108a:	f1b8 0f01 	cmp.w	r8, #1
   2108e:	d94e      	bls.n	2112e <from_mont_n+0xfa>
   21090:	f1aa 0e04 	sub.w	lr, sl, #4
   21094:	6938      	ldr	r0, [r7, #16]
   21096:	f850 2f04 	ldr.w	r2, [r0, #4]!
   2109a:	fba2 2104 	umull	r2, r1, r2, r4
   2109e:	f85c 3f04 	ldr.w	r3, [ip, #4]!
   210a2:	eb13 030b 	adds.w	r3, r3, fp
   210a6:	eb45 0b05 	adc.w	fp, r5, r5
   210aa:	18d3      	adds	r3, r2, r3
   210ac:	f84e 3f04 	str.w	r3, [lr, #4]!
   210b0:	eb41 0b0b 	adc.w	fp, r1, fp
   210b4:	42b0      	cmp	r0, r6
   210b6:	d1ee      	bne.n	21096 <from_mont_n+0x62>
   210b8:	4643      	mov	r3, r8
   210ba:	3b01      	subs	r3, #1
   210bc:	f84a b023 	str.w	fp, [sl, r3, lsl #2]
   210c0:	f109 0901 	add.w	r9, r9, #1
   210c4:	45c8      	cmp	r8, r9
   210c6:	d1d4      	bne.n	21072 <from_mont_n+0x3e>
   210c8:	f1aa 0104 	sub.w	r1, sl, #4
   210cc:	693b      	ldr	r3, [r7, #16]
   210ce:	f1a3 0c04 	sub.w	ip, r3, #4
   210d2:	687b      	ldr	r3, [r7, #4]
   210d4:	1f18      	subs	r0, r3, #4
   210d6:	68bb      	ldr	r3, [r7, #8]
   210d8:	3b04      	subs	r3, #4
   210da:	449a      	add	sl, r3
   210dc:	4606      	mov	r6, r0
   210de:	460c      	mov	r4, r1
   210e0:	2300      	movs	r3, #0
   210e2:	461d      	mov	r5, r3
   210e4:	f854 2f04 	ldr.w	r2, [r4, #4]!
   210e8:	1ad3      	subs	r3, r2, r3
   210ea:	eb65 0205 	sbc.w	r2, r5, r5
   210ee:	f85c ef04 	ldr.w	lr, [ip, #4]!
   210f2:	ebb3 030e 	subs.w	r3, r3, lr
   210f6:	f162 0200 	sbc.w	r2, r2, #0
   210fa:	f846 3f04 	str.w	r3, [r6, #4]!
   210fe:	f002 0301 	and.w	r3, r2, #1
   21102:	4554      	cmp	r4, sl
   21104:	d1ee      	bne.n	210e4 <from_mont_n+0xb0>
   21106:	425e      	negs	r6, r3
   21108:	687a      	ldr	r2, [r7, #4]
   2110a:	1f15      	subs	r5, r2, #4
   2110c:	68ba      	ldr	r2, [r7, #8]
   2110e:	4415      	add	r5, r2
   21110:	3b01      	subs	r3, #1
   21112:	f850 2f04 	ldr.w	r2, [r0, #4]!
   21116:	401a      	ands	r2, r3
   21118:	f851 4f04 	ldr.w	r4, [r1, #4]!
   2111c:	4034      	ands	r4, r6
   2111e:	4322      	orrs	r2, r4
   21120:	6002      	str	r2, [r0, #0]
   21122:	42a8      	cmp	r0, r5
   21124:	d1f5      	bne.n	21112 <from_mont_n+0xde>
   21126:	371c      	adds	r7, #28
   21128:	46bd      	mov	sp, r7
   2112a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2112e:	2301      	movs	r3, #1
   21130:	e7c3      	b.n	210ba <from_mont_n+0x86>

00021132 <redc_mont_n>:
   21132:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21136:	b087      	sub	sp, #28
   21138:	af00      	add	r7, sp, #0
   2113a:	6078      	str	r0, [r7, #4]
   2113c:	6039      	str	r1, [r7, #0]
   2113e:	613a      	str	r2, [r7, #16]
   21140:	617b      	str	r3, [r7, #20]
   21142:	f8d7 8040 	ldr.w	r8, [r7, #64]	; 0x40
   21146:	ea4f 0088 	mov.w	r0, r8, lsl #2
   2114a:	60b8      	str	r0, [r7, #8]
   2114c:	1dc3      	adds	r3, r0, #7
   2114e:	f023 0307 	bic.w	r3, r3, #7
   21152:	ebad 0d03 	sub.w	sp, sp, r3
   21156:	f1b8 0f00 	cmp.w	r8, #0
   2115a:	d07a      	beq.n	21252 <redc_mont_n+0x120>
   2115c:	46ea      	mov	sl, sp
   2115e:	4616      	mov	r6, r2
   21160:	f856 3904 	ldr.w	r3, [r6], #-4
   21164:	60fb      	str	r3, [r7, #12]
   21166:	4406      	add	r6, r0
   21168:	468c      	mov	ip, r1
   2116a:	f04f 0900 	mov.w	r9, #0
   2116e:	464d      	mov	r5, r9
   21170:	e000      	b.n	21174 <redc_mont_n+0x42>
   21172:	46d4      	mov	ip, sl
   21174:	f8dc 1000 	ldr.w	r1, [ip]
   21178:	697b      	ldr	r3, [r7, #20]
   2117a:	fb03 f401 	mul.w	r4, r3, r1
   2117e:	68fb      	ldr	r3, [r7, #12]
   21180:	fba4 2303 	umull	r2, r3, r4, r3
   21184:	1852      	adds	r2, r2, r1
   21186:	f143 0b00 	adc.w	fp, r3, #0
   2118a:	f1b8 0f01 	cmp.w	r8, #1
   2118e:	d964      	bls.n	2125a <redc_mont_n+0x128>
   21190:	f1aa 0e04 	sub.w	lr, sl, #4
   21194:	6938      	ldr	r0, [r7, #16]
   21196:	f850 2f04 	ldr.w	r2, [r0, #4]!
   2119a:	fba2 2104 	umull	r2, r1, r2, r4
   2119e:	f85c 3f04 	ldr.w	r3, [ip, #4]!
   211a2:	eb13 030b 	adds.w	r3, r3, fp
   211a6:	eb45 0b05 	adc.w	fp, r5, r5
   211aa:	18d3      	adds	r3, r2, r3
   211ac:	f84e 3f04 	str.w	r3, [lr, #4]!
   211b0:	eb41 0b0b 	adc.w	fp, r1, fp
   211b4:	42b0      	cmp	r0, r6
   211b6:	d1ee      	bne.n	21196 <redc_mont_n+0x64>
   211b8:	4643      	mov	r3, r8
   211ba:	3b01      	subs	r3, #1
   211bc:	f84a b023 	str.w	fp, [sl, r3, lsl #2]
   211c0:	f109 0901 	add.w	r9, r9, #1
   211c4:	45c8      	cmp	r8, r9
   211c6:	d1d4      	bne.n	21172 <redc_mont_n+0x40>
   211c8:	68bb      	ldr	r3, [r7, #8]
   211ca:	1f19      	subs	r1, r3, #4
   211cc:	683b      	ldr	r3, [r7, #0]
   211ce:	4419      	add	r1, r3
   211d0:	f1aa 0504 	sub.w	r5, sl, #4
   211d4:	3b04      	subs	r3, #4
   211d6:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   211da:	4628      	mov	r0, r5
   211dc:	2300      	movs	r3, #0
   211de:	461c      	mov	r4, r3
   211e0:	f851 2f04 	ldr.w	r2, [r1, #4]!
   211e4:	f850 6f04 	ldr.w	r6, [r0, #4]!
   211e8:	1992      	adds	r2, r2, r6
   211ea:	eb44 0604 	adc.w	r6, r4, r4
   211ee:	18d2      	adds	r2, r2, r3
   211f0:	6002      	str	r2, [r0, #0]
   211f2:	f146 0300 	adc.w	r3, r6, #0
   211f6:	4549      	cmp	r1, r9
   211f8:	d1f2      	bne.n	211e0 <redc_mont_n+0xae>
   211fa:	693a      	ldr	r2, [r7, #16]
   211fc:	f1a2 0e04 	sub.w	lr, r2, #4
   21200:	687a      	ldr	r2, [r7, #4]
   21202:	1f10      	subs	r0, r2, #4
   21204:	68ba      	ldr	r2, [r7, #8]
   21206:	3a04      	subs	r2, #4
   21208:	4492      	add	sl, r2
   2120a:	4684      	mov	ip, r0
   2120c:	462c      	mov	r4, r5
   2120e:	2200      	movs	r2, #0
   21210:	4616      	mov	r6, r2
   21212:	f854 1f04 	ldr.w	r1, [r4, #4]!
   21216:	1a8a      	subs	r2, r1, r2
   21218:	eb66 0106 	sbc.w	r1, r6, r6
   2121c:	f85e 8f04 	ldr.w	r8, [lr, #4]!
   21220:	ebb2 0208 	subs.w	r2, r2, r8
   21224:	f161 0100 	sbc.w	r1, r1, #0
   21228:	f84c 2f04 	str.w	r2, [ip, #4]!
   2122c:	f001 0201 	and.w	r2, r1, #1
   21230:	4554      	cmp	r4, sl
   21232:	d1ee      	bne.n	21212 <redc_mont_n+0xe0>
   21234:	1a9b      	subs	r3, r3, r2
   21236:	687a      	ldr	r2, [r7, #4]
   21238:	1f14      	subs	r4, r2, #4
   2123a:	68ba      	ldr	r2, [r7, #8]
   2123c:	4414      	add	r4, r2
   2123e:	f850 1f04 	ldr.w	r1, [r0, #4]!
   21242:	f855 2f04 	ldr.w	r2, [r5, #4]!
   21246:	404a      	eors	r2, r1
   21248:	401a      	ands	r2, r3
   2124a:	404a      	eors	r2, r1
   2124c:	6002      	str	r2, [r0, #0]
   2124e:	42a0      	cmp	r0, r4
   21250:	d1f5      	bne.n	2123e <redc_mont_n+0x10c>
   21252:	371c      	adds	r7, #28
   21254:	46bd      	mov	sp, r7
   21256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2125a:	2301      	movs	r3, #1
   2125c:	e7ad      	b.n	211ba <redc_mont_n+0x88>

0002125e <sgn0_pty_mod_n>:
   2125e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21262:	af00      	add	r7, sp, #0
   21264:	ea4f 0982 	mov.w	r9, r2, lsl #2
   21268:	f109 0307 	add.w	r3, r9, #7
   2126c:	f023 0307 	bic.w	r3, r3, #7
   21270:	ebad 0d03 	sub.w	sp, sp, r3
   21274:	6803      	ldr	r3, [r0, #0]
   21276:	f003 0e01 	and.w	lr, r3, #1
   2127a:	b382      	cbz	r2, 212de <sgn0_pty_mod_n+0x80>
   2127c:	46e8      	mov	r8, sp
   2127e:	1f03      	subs	r3, r0, #4
   21280:	f1a8 0004 	sub.w	r0, r8, #4
   21284:	eb03 0409 	add.w	r4, r3, r9
   21288:	4605      	mov	r5, r0
   2128a:	f04f 0c00 	mov.w	ip, #0
   2128e:	f853 2f04 	ldr.w	r2, [r3, #4]!
   21292:	ea4c 0642 	orr.w	r6, ip, r2, lsl #1
   21296:	f845 6f04 	str.w	r6, [r5, #4]!
   2129a:	ea4f 7cd2 	mov.w	ip, r2, lsr #31
   2129e:	42a3      	cmp	r3, r4
   212a0:	d1f5      	bne.n	2128e <sgn0_pty_mod_n+0x30>
   212a2:	1f0c      	subs	r4, r1, #4
   212a4:	f1a9 0604 	sub.w	r6, r9, #4
   212a8:	4446      	add	r6, r8
   212aa:	2200      	movs	r2, #0
   212ac:	4615      	mov	r5, r2
   212ae:	f850 3f04 	ldr.w	r3, [r0, #4]!
   212b2:	1a9a      	subs	r2, r3, r2
   212b4:	eb65 0305 	sbc.w	r3, r5, r5
   212b8:	f854 1f04 	ldr.w	r1, [r4, #4]!
   212bc:	1a52      	subs	r2, r2, r1
   212be:	f163 0200 	sbc.w	r2, r3, #0
   212c2:	f002 0201 	and.w	r2, r2, #1
   212c6:	42b0      	cmp	r0, r6
   212c8:	d1f1      	bne.n	212ae <sgn0_pty_mod_n+0x50>
   212ca:	ebac 0202 	sub.w	r2, ip, r2
   212ce:	43d2      	mvns	r2, r2
   212d0:	f002 0202 	and.w	r2, r2, #2
   212d4:	ea42 000e 	orr.w	r0, r2, lr
   212d8:	46bd      	mov	sp, r7
   212da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   212de:	4694      	mov	ip, r2
   212e0:	e7f3      	b.n	212ca <sgn0_pty_mod_n+0x6c>

000212e2 <mul_mont_nonred_n>:
   212e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   212e6:	b087      	sub	sp, #28
   212e8:	af00      	add	r7, sp, #0
   212ea:	6038      	str	r0, [r7, #0]
   212ec:	6079      	str	r1, [r7, #4]
   212ee:	60fb      	str	r3, [r7, #12]
   212f0:	f8d7 8044 	ldr.w	r8, [r7, #68]	; 0x44
   212f4:	f108 0401 	add.w	r4, r8, #1
   212f8:	00a4      	lsls	r4, r4, #2
   212fa:	1de3      	adds	r3, r4, #7
   212fc:	f023 0307 	bic.w	r3, r3, #7
   21300:	ebad 0d03 	sub.w	sp, sp, r3
   21304:	46ea      	mov	sl, sp
   21306:	6816      	ldr	r6, [r2, #0]
   21308:	f1b8 0f00 	cmp.w	r8, #0
   2130c:	d029      	beq.n	21362 <mul_mont_nonred_n+0x80>
   2130e:	1f0d      	subs	r5, r1, #4
   21310:	f1aa 0c04 	sub.w	ip, sl, #4
   21314:	f1a4 0e04 	sub.w	lr, r4, #4
   21318:	44ae      	add	lr, r5
   2131a:	2100      	movs	r1, #0
   2131c:	f855 3f04 	ldr.w	r3, [r5, #4]!
   21320:	fba3 3006 	umull	r3, r0, r3, r6
   21324:	185b      	adds	r3, r3, r1
   21326:	f84c 3f04 	str.w	r3, [ip, #4]!
   2132a:	f140 0100 	adc.w	r1, r0, #0
   2132e:	4575      	cmp	r5, lr
   21330:	d1f4      	bne.n	2131c <mul_mont_nonred_n+0x3a>
   21332:	4640      	mov	r0, r8
   21334:	f8da 3000 	ldr.w	r3, [sl]
   21338:	6c3d      	ldr	r5, [r7, #64]	; 0x40
   2133a:	fb05 f303 	mul.w	r3, r5, r3
   2133e:	f84a 1020 	str.w	r1, [sl, r0, lsl #2]
   21342:	f8d7 900c 	ldr.w	r9, [r7, #12]
   21346:	f859 1904 	ldr.w	r1, [r9], #-4
   2134a:	6139      	str	r1, [r7, #16]
   2134c:	3204      	adds	r2, #4
   2134e:	617a      	str	r2, [r7, #20]
   21350:	3c04      	subs	r4, #4
   21352:	44a1      	add	r9, r4
   21354:	f04f 0b01 	mov.w	fp, #1
   21358:	2600      	movs	r6, #0
   2135a:	eb0a 0288 	add.w	r2, sl, r8, lsl #2
   2135e:	60ba      	str	r2, [r7, #8]
   21360:	e03e      	b.n	213e0 <mul_mont_nonred_n+0xfe>
   21362:	4641      	mov	r1, r8
   21364:	4640      	mov	r0, r8
   21366:	e7e5      	b.n	21334 <mul_mont_nonred_n+0x52>
   21368:	f8da 3004 	ldr.w	r3, [sl, #4]
   2136c:	440b      	add	r3, r1
   2136e:	f8ca 3000 	str.w	r3, [sl]
   21372:	45d8      	cmp	r8, fp
   21374:	d058      	beq.n	21428 <mul_mont_nonred_n+0x146>
   21376:	f1b8 0f00 	cmp.w	r8, #0
   2137a:	d102      	bne.n	21382 <mul_mont_nonred_n+0xa0>
   2137c:	4641      	mov	r1, r8
   2137e:	4642      	mov	r2, r8
   21380:	e022      	b.n	213c8 <mul_mont_nonred_n+0xe6>
   21382:	697b      	ldr	r3, [r7, #20]
   21384:	f8d3 c000 	ldr.w	ip, [r3]
   21388:	e002      	b.n	21390 <mul_mont_nonred_n+0xae>
   2138a:	697b      	ldr	r3, [r7, #20]
   2138c:	f8d3 c000 	ldr.w	ip, [r3]
   21390:	687b      	ldr	r3, [r7, #4]
   21392:	f1a3 0e04 	sub.w	lr, r3, #4
   21396:	f1aa 0504 	sub.w	r5, sl, #4
   2139a:	2400      	movs	r4, #0
   2139c:	4622      	mov	r2, r4
   2139e:	f85e 1f04 	ldr.w	r1, [lr, #4]!
   213a2:	fba1 100c 	umull	r1, r0, r1, ip
   213a6:	f855 3f04 	ldr.w	r3, [r5, #4]!
   213aa:	189b      	adds	r3, r3, r2
   213ac:	eb46 0206 	adc.w	r2, r6, r6
   213b0:	18cb      	adds	r3, r1, r3
   213b2:	602b      	str	r3, [r5, #0]
   213b4:	eb40 0202 	adc.w	r2, r0, r2
   213b8:	3401      	adds	r4, #1
   213ba:	45a0      	cmp	r8, r4
   213bc:	d8ef      	bhi.n	2139e <mul_mont_nonred_n+0xbc>
   213be:	f1b8 0f00 	cmp.w	r8, #0
   213c2:	bf14      	ite	ne
   213c4:	4641      	movne	r1, r8
   213c6:	2101      	moveq	r1, #1
   213c8:	f8da 3000 	ldr.w	r3, [sl]
   213cc:	6c38      	ldr	r0, [r7, #64]	; 0x40
   213ce:	fb00 f303 	mul.w	r3, r0, r3
   213d2:	f84a 2021 	str.w	r2, [sl, r1, lsl #2]
   213d6:	f10b 0b01 	add.w	fp, fp, #1
   213da:	697a      	ldr	r2, [r7, #20]
   213dc:	3204      	adds	r2, #4
   213de:	617a      	str	r2, [r7, #20]
   213e0:	693a      	ldr	r2, [r7, #16]
   213e2:	fba3 1002 	umull	r1, r0, r3, r2
   213e6:	f8da 2000 	ldr.w	r2, [sl]
   213ea:	188a      	adds	r2, r1, r2
   213ec:	f140 0100 	adc.w	r1, r0, #0
   213f0:	460a      	mov	r2, r1
   213f2:	f1b8 0f01 	cmp.w	r8, #1
   213f6:	d9b7      	bls.n	21368 <mul_mont_nonred_n+0x86>
   213f8:	4654      	mov	r4, sl
   213fa:	68f8      	ldr	r0, [r7, #12]
   213fc:	f850 1f04 	ldr.w	r1, [r0, #4]!
   21400:	fba1 1503 	umull	r1, r5, r1, r3
   21404:	188a      	adds	r2, r1, r2
   21406:	f145 0100 	adc.w	r1, r5, #0
   2140a:	6865      	ldr	r5, [r4, #4]
   2140c:	1952      	adds	r2, r2, r5
   2140e:	f844 2b04 	str.w	r2, [r4], #4
   21412:	f141 0200 	adc.w	r2, r1, #0
   21416:	4548      	cmp	r0, r9
   21418:	d1f0      	bne.n	213fc <mul_mont_nonred_n+0x11a>
   2141a:	68b9      	ldr	r1, [r7, #8]
   2141c:	680b      	ldr	r3, [r1, #0]
   2141e:	4413      	add	r3, r2
   21420:	f841 3c04 	str.w	r3, [r1, #-4]
   21424:	45d8      	cmp	r8, fp
   21426:	d1b0      	bne.n	2138a <mul_mont_nonred_n+0xa8>
   21428:	f03b 4140 	bics.w	r1, fp, #3221225472	; 0xc0000000
   2142c:	d00b      	beq.n	21446 <mul_mont_nonred_n+0x164>
   2142e:	f1aa 0a04 	sub.w	sl, sl, #4
   21432:	683b      	ldr	r3, [r7, #0]
   21434:	3b04      	subs	r3, #4
   21436:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
   2143a:	f85a 2f04 	ldr.w	r2, [sl, #4]!
   2143e:	f843 2f04 	str.w	r2, [r3, #4]!
   21442:	458a      	cmp	sl, r1
   21444:	d1f9      	bne.n	2143a <mul_mont_nonred_n+0x158>
   21446:	371c      	adds	r7, #28
   21448:	46bd      	mov	sp, r7
   2144a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002144e <smul_n_shift_n>:
   2144e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21452:	b085      	sub	sp, #20
   21454:	af00      	add	r7, sp, #0
   21456:	60f8      	str	r0, [r7, #12]
   21458:	4690      	mov	r8, r2
   2145a:	607b      	str	r3, [r7, #4]
   2145c:	f8d7 b038 	ldr.w	fp, [r7, #56]	; 0x38
   21460:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
   21462:	1c72      	adds	r2, r6, #1
   21464:	60ba      	str	r2, [r7, #8]
   21466:	0090      	lsls	r0, r2, #2
   21468:	6038      	str	r0, [r7, #0]
   2146a:	1dc3      	adds	r3, r0, #7
   2146c:	f023 0307 	bic.w	r3, r3, #7
   21470:	ebad 0d03 	sub.w	sp, sp, r3
   21474:	466c      	mov	r4, sp
   21476:	ebad 0d03 	sub.w	sp, sp, r3
   2147a:	466d      	mov	r5, sp
   2147c:	f8d8 3000 	ldr.w	r3, [r8]
   21480:	ea4f 79e3 	mov.w	r9, r3, asr #31
   21484:	ea83 7ae3 	eor.w	sl, r3, r3, asr #31
   21488:	ebaa 7ae3 	sub.w	sl, sl, r3, asr #31
   2148c:	4633      	mov	r3, r6
   2148e:	464a      	mov	r2, r9
   21490:	4620      	mov	r0, r4
   21492:	f7ff fa12 	bl	208ba <cneg_n>
   21496:	4633      	mov	r3, r6
   21498:	4652      	mov	r2, sl
   2149a:	4621      	mov	r1, r4
   2149c:	4620      	mov	r0, r4
   2149e:	f7ff fa26 	bl	208ee <umul_n>
   214a2:	ea09 090a 	and.w	r9, r9, sl
   214a6:	eba0 0009 	sub.w	r0, r0, r9
   214aa:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
   214ae:	f8db 3000 	ldr.w	r3, [fp]
   214b2:	ea4f 79e3 	mov.w	r9, r3, asr #31
   214b6:	ea83 7ae3 	eor.w	sl, r3, r3, asr #31
   214ba:	ebaa 7ae3 	sub.w	sl, sl, r3, asr #31
   214be:	4633      	mov	r3, r6
   214c0:	464a      	mov	r2, r9
   214c2:	6879      	ldr	r1, [r7, #4]
   214c4:	4628      	mov	r0, r5
   214c6:	f7ff f9f8 	bl	208ba <cneg_n>
   214ca:	4633      	mov	r3, r6
   214cc:	4652      	mov	r2, sl
   214ce:	4629      	mov	r1, r5
   214d0:	4628      	mov	r0, r5
   214d2:	f7ff fa0c 	bl	208ee <umul_n>
   214d6:	ea09 090a 	and.w	r9, r9, sl
   214da:	eba0 0009 	sub.w	r0, r0, r9
   214de:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
   214e2:	68ba      	ldr	r2, [r7, #8]
   214e4:	2a00      	cmp	r2, #0
   214e6:	d03e      	beq.n	21566 <smul_n_shift_n+0x118>
   214e8:	1f21      	subs	r1, r4, #4
   214ea:	3d04      	subs	r5, #4
   214ec:	6838      	ldr	r0, [r7, #0]
   214ee:	f1a0 0c04 	sub.w	ip, r0, #4
   214f2:	44a4      	add	ip, r4
   214f4:	2200      	movs	r2, #0
   214f6:	4610      	mov	r0, r2
   214f8:	46ae      	mov	lr, r5
   214fa:	f851 3f04 	ldr.w	r3, [r1, #4]!
   214fe:	f85e 5f04 	ldr.w	r5, [lr, #4]!
   21502:	195b      	adds	r3, r3, r5
   21504:	eb40 0500 	adc.w	r5, r0, r0
   21508:	189b      	adds	r3, r3, r2
   2150a:	600b      	str	r3, [r1, #0]
   2150c:	f145 0200 	adc.w	r2, r5, #0
   21510:	4561      	cmp	r1, ip
   21512:	d1f2      	bne.n	214fa <smul_n_shift_n+0xac>
   21514:	6822      	ldr	r2, [r4, #0]
   21516:	b166      	cbz	r6, 21532 <smul_n_shift_n+0xe4>
   21518:	68fb      	ldr	r3, [r7, #12]
   2151a:	1f18      	subs	r0, r3, #4
   2151c:	2100      	movs	r1, #0
   2151e:	0f93      	lsrs	r3, r2, #30
   21520:	3101      	adds	r1, #1
   21522:	f854 2f04 	ldr.w	r2, [r4, #4]!
   21526:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   2152a:	f840 3f04 	str.w	r3, [r0, #4]!
   2152e:	428e      	cmp	r6, r1
   21530:	d8f5      	bhi.n	2151e <smul_n_shift_n+0xd0>
   21532:	f8d8 3000 	ldr.w	r3, [r8]
   21536:	ea83 73e2 	eor.w	r3, r3, r2, asr #31
   2153a:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
   2153e:	f8c8 3000 	str.w	r3, [r8]
   21542:	f8db 3000 	ldr.w	r3, [fp]
   21546:	ea83 73e2 	eor.w	r3, r3, r2, asr #31
   2154a:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
   2154e:	f8cb 3000 	str.w	r3, [fp]
   21552:	4633      	mov	r3, r6
   21554:	17d2      	asrs	r2, r2, #31
   21556:	68f9      	ldr	r1, [r7, #12]
   21558:	4608      	mov	r0, r1
   2155a:	f7ff f9ae 	bl	208ba <cneg_n>
   2155e:	3714      	adds	r7, #20
   21560:	46bd      	mov	sp, r7
   21562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21566:	6822      	ldr	r2, [r4, #0]
   21568:	e7d6      	b.n	21518 <smul_n_shift_n+0xca>

0002156a <quot_rem_n>:
   2156a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2156e:	b083      	sub	sp, #12
   21570:	af00      	add	r7, sp, #0
   21572:	6078      	str	r0, [r7, #4]
   21574:	4608      	mov	r0, r1
   21576:	6039      	str	r1, [r7, #0]
   21578:	1c5e      	adds	r6, r3, #1
   2157a:	00b6      	lsls	r6, r6, #2
   2157c:	1df1      	adds	r1, r6, #7
   2157e:	f021 0107 	bic.w	r1, r1, #7
   21582:	ebad 0d01 	sub.w	sp, sp, r1
   21586:	46eb      	mov	fp, sp
   21588:	2b00      	cmp	r3, #0
   2158a:	d055      	beq.n	21638 <quot_rem_n+0xce>
   2158c:	1f04      	subs	r4, r0, #4
   2158e:	f1ab 0504 	sub.w	r5, fp, #4
   21592:	f1a6 0c04 	sub.w	ip, r6, #4
   21596:	44a4      	add	ip, r4
   21598:	2000      	movs	r0, #0
   2159a:	f854 1f04 	ldr.w	r1, [r4, #4]!
   2159e:	fba1 1e02 	umull	r1, lr, r1, r2
   215a2:	1809      	adds	r1, r1, r0
   215a4:	f845 1f04 	str.w	r1, [r5, #4]!
   215a8:	f14e 0000 	adc.w	r0, lr, #0
   215ac:	4564      	cmp	r4, ip
   215ae:	d1f4      	bne.n	2159a <quot_rem_n+0x30>
   215b0:	4619      	mov	r1, r3
   215b2:	f84b 0021 	str.w	r0, [fp, r1, lsl #2]
   215b6:	6879      	ldr	r1, [r7, #4]
   215b8:	1f0d      	subs	r5, r1, #4
   215ba:	f1ab 0c04 	sub.w	ip, fp, #4
   215be:	f1a6 0a04 	sub.w	sl, r6, #4
   215c2:	448a      	add	sl, r1
   215c4:	4664      	mov	r4, ip
   215c6:	46ae      	mov	lr, r5
   215c8:	f04f 0900 	mov.w	r9, #0
   215cc:	46c8      	mov	r8, r9
   215ce:	f85e 1f04 	ldr.w	r1, [lr, #4]!
   215d2:	ebb1 0909 	subs.w	r9, r1, r9
   215d6:	eb68 0008 	sbc.w	r0, r8, r8
   215da:	f854 1f04 	ldr.w	r1, [r4, #4]!
   215de:	ebb9 0101 	subs.w	r1, r9, r1
   215e2:	f160 0900 	sbc.w	r9, r0, #0
   215e6:	6021      	str	r1, [r4, #0]
   215e8:	f009 0901 	and.w	r9, r9, #1
   215ec:	45d6      	cmp	lr, sl
   215ee:	d1ee      	bne.n	215ce <quot_rem_n+0x64>
   215f0:	f1c9 0800 	rsb	r8, r9, #0
   215f4:	b1bb      	cbz	r3, 21626 <quot_rem_n+0xbc>
   215f6:	6839      	ldr	r1, [r7, #0]
   215f8:	3904      	subs	r1, #4
   215fa:	3e08      	subs	r6, #8
   215fc:	44b3      	add	fp, r6
   215fe:	2400      	movs	r4, #0
   21600:	46a2      	mov	sl, r4
   21602:	f851 0f04 	ldr.w	r0, [r1, #4]!
   21606:	ea08 0000 	and.w	r0, r8, r0
   2160a:	f85c 6f04 	ldr.w	r6, [ip, #4]!
   2160e:	1936      	adds	r6, r6, r4
   21610:	eb4a 040a 	adc.w	r4, sl, sl
   21614:	1986      	adds	r6, r0, r6
   21616:	f144 0400 	adc.w	r4, r4, #0
   2161a:	f845 6f04 	str.w	r6, [r5, #4]!
   2161e:	f004 0401 	and.w	r4, r4, #1
   21622:	45dc      	cmp	ip, fp
   21624:	d1ed      	bne.n	21602 <quot_rem_n+0x98>
   21626:	eba2 0009 	sub.w	r0, r2, r9
   2162a:	687a      	ldr	r2, [r7, #4]
   2162c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   21630:	370c      	adds	r7, #12
   21632:	46bd      	mov	sp, r7
   21634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21638:	4618      	mov	r0, r3
   2163a:	4619      	mov	r1, r3
   2163c:	e7b9      	b.n	215b2 <quot_rem_n+0x48>

0002163e <POINTonE1_affine_Compress_BE>:
   2163e:	b570      	push	{r4, r5, r6, lr}
   21640:	b09a      	sub	sp, #104	; 0x68
   21642:	4605      	mov	r5, r0
   21644:	460c      	mov	r4, r1
   21646:	230c      	movs	r3, #12
   21648:	9300      	str	r3, [sp, #0]
   2164a:	4b15      	ldr	r3, [pc, #84]	; (216a0 <POINTonE1_affine_Compress_BE+0x62>)
   2164c:	4a15      	ldr	r2, [pc, #84]	; (216a4 <POINTonE1_affine_Compress_BE+0x66>)
   2164e:	a80e      	add	r0, sp, #56	; 0x38
   21650:	f7ff fcf0 	bl	21034 <from_mont_n>
   21654:	f105 0c30 	add.w	ip, r5, #48	; 0x30
   21658:	462a      	mov	r2, r5
   2165a:	f105 012f 	add.w	r1, r5, #47	; 0x2f
   2165e:	1a8b      	subs	r3, r1, r2
   21660:	f023 0003 	bic.w	r0, r3, #3
   21664:	ad1a      	add	r5, sp, #104	; 0x68
   21666:	4428      	add	r0, r5
   21668:	f003 0303 	and.w	r3, r3, #3
   2166c:	00db      	lsls	r3, r3, #3
   2166e:	f850 0c30 	ldr.w	r0, [r0, #-48]
   21672:	fa20 f303 	lsr.w	r3, r0, r3
   21676:	f802 3b01 	strb.w	r3, [r2], #1
   2167a:	4594      	cmp	ip, r2
   2167c:	d1ef      	bne.n	2165e <POINTonE1_affine_Compress_BE+0x20>
   2167e:	4d09      	ldr	r5, [pc, #36]	; (216a4 <POINTonE1_affine_Compress_BE+0x66>)
   21680:	260c      	movs	r6, #12
   21682:	9600      	str	r6, [sp, #0]
   21684:	4b06      	ldr	r3, [pc, #24]	; (216a0 <POINTonE1_affine_Compress_BE+0x62>)
   21686:	462a      	mov	r2, r5
   21688:	f104 0130 	add.w	r1, r4, #48	; 0x30
   2168c:	a802      	add	r0, sp, #8
   2168e:	f7ff fcd1 	bl	21034 <from_mont_n>
   21692:	4632      	mov	r2, r6
   21694:	4629      	mov	r1, r5
   21696:	a802      	add	r0, sp, #8
   21698:	f7ff fde1 	bl	2125e <sgn0_pty_mod_n>
   2169c:	b01a      	add	sp, #104	; 0x68
   2169e:	bd70      	pop	{r4, r5, r6, pc}
   216a0:	fffcfffd 	.word	0xfffcfffd
   216a4:	00038688 	.word	0x00038688

000216a8 <POINTonE1_affine_Serialize_BE>:
   216a8:	b570      	push	{r4, r5, r6, lr}
   216aa:	b08e      	sub	sp, #56	; 0x38
   216ac:	4605      	mov	r5, r0
   216ae:	460e      	mov	r6, r1
   216b0:	230c      	movs	r3, #12
   216b2:	9300      	str	r3, [sp, #0]
   216b4:	4b1e      	ldr	r3, [pc, #120]	; (21730 <POINTonE1_affine_Serialize_BE+0x88>)
   216b6:	4a1f      	ldr	r2, [pc, #124]	; (21734 <POINTonE1_affine_Serialize_BE+0x8c>)
   216b8:	a802      	add	r0, sp, #8
   216ba:	f7ff fcbb 	bl	21034 <from_mont_n>
   216be:	f105 0430 	add.w	r4, r5, #48	; 0x30
   216c2:	462a      	mov	r2, r5
   216c4:	f105 002f 	add.w	r0, r5, #47	; 0x2f
   216c8:	1a83      	subs	r3, r0, r2
   216ca:	f023 0103 	bic.w	r1, r3, #3
   216ce:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
   216d2:	4461      	add	r1, ip
   216d4:	f003 0303 	and.w	r3, r3, #3
   216d8:	00db      	lsls	r3, r3, #3
   216da:	f851 1c30 	ldr.w	r1, [r1, #-48]
   216de:	fa21 f303 	lsr.w	r3, r1, r3
   216e2:	f802 3b01 	strb.w	r3, [r2], #1
   216e6:	42a2      	cmp	r2, r4
   216e8:	d1ee      	bne.n	216c8 <POINTonE1_affine_Serialize_BE+0x20>
   216ea:	230c      	movs	r3, #12
   216ec:	9300      	str	r3, [sp, #0]
   216ee:	4b10      	ldr	r3, [pc, #64]	; (21730 <POINTonE1_affine_Serialize_BE+0x88>)
   216f0:	4a10      	ldr	r2, [pc, #64]	; (21734 <POINTonE1_affine_Serialize_BE+0x8c>)
   216f2:	f106 0130 	add.w	r1, r6, #48	; 0x30
   216f6:	a802      	add	r0, sp, #8
   216f8:	f7ff fc9c 	bl	21034 <from_mont_n>
   216fc:	f105 0160 	add.w	r1, r5, #96	; 0x60
   21700:	355f      	adds	r5, #95	; 0x5f
   21702:	1b2b      	subs	r3, r5, r4
   21704:	f023 0203 	bic.w	r2, r3, #3
   21708:	a80e      	add	r0, sp, #56	; 0x38
   2170a:	4402      	add	r2, r0
   2170c:	f003 0303 	and.w	r3, r3, #3
   21710:	00db      	lsls	r3, r3, #3
   21712:	f852 2c30 	ldr.w	r2, [r2, #-48]
   21716:	fa22 f303 	lsr.w	r3, r2, r3
   2171a:	f804 3b01 	strb.w	r3, [r4], #1
   2171e:	428c      	cmp	r4, r1
   21720:	d1ef      	bne.n	21702 <POINTonE1_affine_Serialize_BE+0x5a>
   21722:	220c      	movs	r2, #12
   21724:	4903      	ldr	r1, [pc, #12]	; (21734 <POINTonE1_affine_Serialize_BE+0x8c>)
   21726:	a802      	add	r0, sp, #8
   21728:	f7ff fd99 	bl	2125e <sgn0_pty_mod_n>
   2172c:	b00e      	add	sp, #56	; 0x38
   2172e:	bd70      	pop	{r4, r5, r6, pc}
   21730:	fffcfffd 	.word	0xfffcfffd
   21734:	00038688 	.word	0x00038688

00021738 <POINTonE2_affine_Compress_BE>:
   21738:	b5f0      	push	{r4, r5, r6, r7, lr}
   2173a:	b0a7      	sub	sp, #156	; 0x9c
   2173c:	4606      	mov	r6, r0
   2173e:	460d      	mov	r5, r1
   21740:	230c      	movs	r3, #12
   21742:	9300      	str	r3, [sp, #0]
   21744:	4b3e      	ldr	r3, [pc, #248]	; (21840 <POINTonE2_affine_Compress_BE+0x108>)
   21746:	4a3f      	ldr	r2, [pc, #252]	; (21844 <POINTonE2_affine_Compress_BE+0x10c>)
   21748:	3130      	adds	r1, #48	; 0x30
   2174a:	a81a      	add	r0, sp, #104	; 0x68
   2174c:	f7ff fc72 	bl	21034 <from_mont_n>
   21750:	f106 0430 	add.w	r4, r6, #48	; 0x30
   21754:	4632      	mov	r2, r6
   21756:	f106 002f 	add.w	r0, r6, #47	; 0x2f
   2175a:	1a83      	subs	r3, r0, r2
   2175c:	f023 0103 	bic.w	r1, r3, #3
   21760:	af26      	add	r7, sp, #152	; 0x98
   21762:	4439      	add	r1, r7
   21764:	f003 0303 	and.w	r3, r3, #3
   21768:	00db      	lsls	r3, r3, #3
   2176a:	f851 1c30 	ldr.w	r1, [r1, #-48]
   2176e:	fa21 f303 	lsr.w	r3, r1, r3
   21772:	f802 3b01 	strb.w	r3, [r2], #1
   21776:	42a2      	cmp	r2, r4
   21778:	d1ef      	bne.n	2175a <POINTonE2_affine_Compress_BE+0x22>
   2177a:	230c      	movs	r3, #12
   2177c:	9300      	str	r3, [sp, #0]
   2177e:	4b30      	ldr	r3, [pc, #192]	; (21840 <POINTonE2_affine_Compress_BE+0x108>)
   21780:	4a30      	ldr	r2, [pc, #192]	; (21844 <POINTonE2_affine_Compress_BE+0x10c>)
   21782:	4629      	mov	r1, r5
   21784:	a81a      	add	r0, sp, #104	; 0x68
   21786:	f7ff fc55 	bl	21034 <from_mont_n>
   2178a:	f106 0160 	add.w	r1, r6, #96	; 0x60
   2178e:	365f      	adds	r6, #95	; 0x5f
   21790:	1b33      	subs	r3, r6, r4
   21792:	f023 0203 	bic.w	r2, r3, #3
   21796:	a826      	add	r0, sp, #152	; 0x98
   21798:	4402      	add	r2, r0
   2179a:	f003 0303 	and.w	r3, r3, #3
   2179e:	00db      	lsls	r3, r3, #3
   217a0:	f852 2c30 	ldr.w	r2, [r2, #-48]
   217a4:	fa22 f303 	lsr.w	r3, r2, r3
   217a8:	f804 3b01 	strb.w	r3, [r4], #1
   217ac:	428c      	cmp	r4, r1
   217ae:	d1ef      	bne.n	21790 <POINTonE2_affine_Compress_BE+0x58>
   217b0:	4f23      	ldr	r7, [pc, #140]	; (21840 <POINTonE2_affine_Compress_BE+0x108>)
   217b2:	4c24      	ldr	r4, [pc, #144]	; (21844 <POINTonE2_affine_Compress_BE+0x10c>)
   217b4:	260c      	movs	r6, #12
   217b6:	9600      	str	r6, [sp, #0]
   217b8:	463b      	mov	r3, r7
   217ba:	4622      	mov	r2, r4
   217bc:	f105 0160 	add.w	r1, r5, #96	; 0x60
   217c0:	a802      	add	r0, sp, #8
   217c2:	f7ff fc37 	bl	21034 <from_mont_n>
   217c6:	9600      	str	r6, [sp, #0]
   217c8:	463b      	mov	r3, r7
   217ca:	4622      	mov	r2, r4
   217cc:	f105 0190 	add.w	r1, r5, #144	; 0x90
   217d0:	a80e      	add	r0, sp, #56	; 0x38
   217d2:	f7ff fc2f 	bl	21034 <from_mont_n>
   217d6:	4632      	mov	r2, r6
   217d8:	4621      	mov	r1, r4
   217da:	a802      	add	r0, sp, #8
   217dc:	f7ff fd3f 	bl	2125e <sgn0_pty_mod_n>
   217e0:	4605      	mov	r5, r0
   217e2:	4632      	mov	r2, r6
   217e4:	4621      	mov	r1, r4
   217e6:	a80e      	add	r0, sp, #56	; 0x38
   217e8:	f7ff fd39 	bl	2125e <sgn0_pty_mod_n>
   217ec:	aa0d      	add	r2, sp, #52	; 0x34
   217ee:	ab02      	add	r3, sp, #8
   217f0:	ae19      	add	r6, sp, #100	; 0x64
   217f2:	2100      	movs	r1, #0
   217f4:	f852 4f04 	ldr.w	r4, [r2, #4]!
   217f8:	4321      	orrs	r1, r4
   217fa:	42b2      	cmp	r2, r6
   217fc:	d1fa      	bne.n	217f4 <POINTonE2_affine_Compress_BE+0xbc>
   217fe:	1e4c      	subs	r4, r1, #1
   21800:	ea24 0101 	bic.w	r1, r4, r1
   21804:	0fcc      	lsrs	r4, r1, #31
   21806:	ea05 71e1 	and.w	r1, r5, r1, asr #31
   2180a:	3c01      	subs	r4, #1
   2180c:	4004      	ands	r4, r0
   2180e:	430c      	orrs	r4, r1
   21810:	f103 0630 	add.w	r6, r3, #48	; 0x30
   21814:	2200      	movs	r2, #0
   21816:	f853 1b04 	ldr.w	r1, [r3], #4
   2181a:	430a      	orrs	r2, r1
   2181c:	429e      	cmp	r6, r3
   2181e:	d1fa      	bne.n	21816 <POINTonE2_affine_Compress_BE+0xde>
   21820:	1e53      	subs	r3, r2, #1
   21822:	ea23 0202 	bic.w	r2, r3, r2
   21826:	0fd3      	lsrs	r3, r2, #31
   21828:	ea00 70e2 	and.w	r0, r0, r2, asr #31
   2182c:	3b01      	subs	r3, #1
   2182e:	402b      	ands	r3, r5
   21830:	4303      	orrs	r3, r0
   21832:	f003 0301 	and.w	r3, r3, #1
   21836:	f004 0002 	and.w	r0, r4, #2
   2183a:	4318      	orrs	r0, r3
   2183c:	b027      	add	sp, #156	; 0x9c
   2183e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21840:	fffcfffd 	.word	0xfffcfffd
   21844:	00038688 	.word	0x00038688

00021848 <POINTonE2_affine_Serialize_BE>:
   21848:	b5f0      	push	{r4, r5, r6, r7, lr}
   2184a:	b09b      	sub	sp, #108	; 0x6c
   2184c:	4606      	mov	r6, r0
   2184e:	460f      	mov	r7, r1
   21850:	230c      	movs	r3, #12
   21852:	9300      	str	r3, [sp, #0]
   21854:	4b52      	ldr	r3, [pc, #328]	; (219a0 <POINTonE2_affine_Serialize_BE+0x158>)
   21856:	4a53      	ldr	r2, [pc, #332]	; (219a4 <POINTonE2_affine_Serialize_BE+0x15c>)
   21858:	3130      	adds	r1, #48	; 0x30
   2185a:	a80e      	add	r0, sp, #56	; 0x38
   2185c:	f7ff fbea 	bl	21034 <from_mont_n>
   21860:	f106 0430 	add.w	r4, r6, #48	; 0x30
   21864:	4632      	mov	r2, r6
   21866:	f106 002f 	add.w	r0, r6, #47	; 0x2f
   2186a:	1a83      	subs	r3, r0, r2
   2186c:	f023 0103 	bic.w	r1, r3, #3
   21870:	ad1a      	add	r5, sp, #104	; 0x68
   21872:	4429      	add	r1, r5
   21874:	f003 0303 	and.w	r3, r3, #3
   21878:	00db      	lsls	r3, r3, #3
   2187a:	f851 1c30 	ldr.w	r1, [r1, #-48]
   2187e:	fa21 f303 	lsr.w	r3, r1, r3
   21882:	f802 3b01 	strb.w	r3, [r2], #1
   21886:	42a2      	cmp	r2, r4
   21888:	d1ef      	bne.n	2186a <POINTonE2_affine_Serialize_BE+0x22>
   2188a:	230c      	movs	r3, #12
   2188c:	9300      	str	r3, [sp, #0]
   2188e:	4b44      	ldr	r3, [pc, #272]	; (219a0 <POINTonE2_affine_Serialize_BE+0x158>)
   21890:	4a44      	ldr	r2, [pc, #272]	; (219a4 <POINTonE2_affine_Serialize_BE+0x15c>)
   21892:	4639      	mov	r1, r7
   21894:	a802      	add	r0, sp, #8
   21896:	f7ff fbcd 	bl	21034 <from_mont_n>
   2189a:	f106 0560 	add.w	r5, r6, #96	; 0x60
   2189e:	f106 015f 	add.w	r1, r6, #95	; 0x5f
   218a2:	1b0b      	subs	r3, r1, r4
   218a4:	f023 0203 	bic.w	r2, r3, #3
   218a8:	a81a      	add	r0, sp, #104	; 0x68
   218aa:	4402      	add	r2, r0
   218ac:	f003 0303 	and.w	r3, r3, #3
   218b0:	00db      	lsls	r3, r3, #3
   218b2:	f852 2c60 	ldr.w	r2, [r2, #-96]
   218b6:	fa22 f303 	lsr.w	r3, r2, r3
   218ba:	f804 3b01 	strb.w	r3, [r4], #1
   218be:	42ac      	cmp	r4, r5
   218c0:	d1ef      	bne.n	218a2 <POINTonE2_affine_Serialize_BE+0x5a>
   218c2:	230c      	movs	r3, #12
   218c4:	9300      	str	r3, [sp, #0]
   218c6:	4b36      	ldr	r3, [pc, #216]	; (219a0 <POINTonE2_affine_Serialize_BE+0x158>)
   218c8:	4a36      	ldr	r2, [pc, #216]	; (219a4 <POINTonE2_affine_Serialize_BE+0x15c>)
   218ca:	f107 0190 	add.w	r1, r7, #144	; 0x90
   218ce:	a80e      	add	r0, sp, #56	; 0x38
   218d0:	f7ff fbb0 	bl	21034 <from_mont_n>
   218d4:	f106 0490 	add.w	r4, r6, #144	; 0x90
   218d8:	f106 018f 	add.w	r1, r6, #143	; 0x8f
   218dc:	1b4b      	subs	r3, r1, r5
   218de:	f023 0203 	bic.w	r2, r3, #3
   218e2:	a81a      	add	r0, sp, #104	; 0x68
   218e4:	4402      	add	r2, r0
   218e6:	f003 0303 	and.w	r3, r3, #3
   218ea:	00db      	lsls	r3, r3, #3
   218ec:	f852 2c30 	ldr.w	r2, [r2, #-48]
   218f0:	fa22 f303 	lsr.w	r3, r2, r3
   218f4:	f805 3b01 	strb.w	r3, [r5], #1
   218f8:	42ac      	cmp	r4, r5
   218fa:	d1ef      	bne.n	218dc <POINTonE2_affine_Serialize_BE+0x94>
   218fc:	230c      	movs	r3, #12
   218fe:	9300      	str	r3, [sp, #0]
   21900:	4b27      	ldr	r3, [pc, #156]	; (219a0 <POINTonE2_affine_Serialize_BE+0x158>)
   21902:	4a28      	ldr	r2, [pc, #160]	; (219a4 <POINTonE2_affine_Serialize_BE+0x15c>)
   21904:	f107 0160 	add.w	r1, r7, #96	; 0x60
   21908:	a802      	add	r0, sp, #8
   2190a:	f7ff fb93 	bl	21034 <from_mont_n>
   2190e:	f106 01c0 	add.w	r1, r6, #192	; 0xc0
   21912:	36bf      	adds	r6, #191	; 0xbf
   21914:	1b33      	subs	r3, r6, r4
   21916:	f023 0203 	bic.w	r2, r3, #3
   2191a:	a81a      	add	r0, sp, #104	; 0x68
   2191c:	4402      	add	r2, r0
   2191e:	f003 0303 	and.w	r3, r3, #3
   21922:	00db      	lsls	r3, r3, #3
   21924:	f852 2c60 	ldr.w	r2, [r2, #-96]
   21928:	fa22 f303 	lsr.w	r3, r2, r3
   2192c:	f804 3b01 	strb.w	r3, [r4], #1
   21930:	428c      	cmp	r4, r1
   21932:	d1ef      	bne.n	21914 <POINTonE2_affine_Serialize_BE+0xcc>
   21934:	4c1b      	ldr	r4, [pc, #108]	; (219a4 <POINTonE2_affine_Serialize_BE+0x15c>)
   21936:	220c      	movs	r2, #12
   21938:	4621      	mov	r1, r4
   2193a:	a802      	add	r0, sp, #8
   2193c:	f7ff fc8f 	bl	2125e <sgn0_pty_mod_n>
   21940:	4605      	mov	r5, r0
   21942:	220c      	movs	r2, #12
   21944:	4621      	mov	r1, r4
   21946:	a80e      	add	r0, sp, #56	; 0x38
   21948:	f7ff fc89 	bl	2125e <sgn0_pty_mod_n>
   2194c:	aa0d      	add	r2, sp, #52	; 0x34
   2194e:	ab02      	add	r3, sp, #8
   21950:	ae19      	add	r6, sp, #100	; 0x64
   21952:	2100      	movs	r1, #0
   21954:	f852 4f04 	ldr.w	r4, [r2, #4]!
   21958:	4321      	orrs	r1, r4
   2195a:	42b2      	cmp	r2, r6
   2195c:	d1fa      	bne.n	21954 <POINTonE2_affine_Serialize_BE+0x10c>
   2195e:	1e4c      	subs	r4, r1, #1
   21960:	ea24 0101 	bic.w	r1, r4, r1
   21964:	0fcc      	lsrs	r4, r1, #31
   21966:	ea05 71e1 	and.w	r1, r5, r1, asr #31
   2196a:	3c01      	subs	r4, #1
   2196c:	4004      	ands	r4, r0
   2196e:	430c      	orrs	r4, r1
   21970:	f103 0630 	add.w	r6, r3, #48	; 0x30
   21974:	2200      	movs	r2, #0
   21976:	f853 1b04 	ldr.w	r1, [r3], #4
   2197a:	430a      	orrs	r2, r1
   2197c:	429e      	cmp	r6, r3
   2197e:	d1fa      	bne.n	21976 <POINTonE2_affine_Serialize_BE+0x12e>
   21980:	1e53      	subs	r3, r2, #1
   21982:	ea23 0202 	bic.w	r2, r3, r2
   21986:	0fd3      	lsrs	r3, r2, #31
   21988:	ea00 70e2 	and.w	r0, r0, r2, asr #31
   2198c:	3b01      	subs	r3, #1
   2198e:	402b      	ands	r3, r5
   21990:	4303      	orrs	r3, r0
   21992:	f003 0301 	and.w	r3, r3, #1
   21996:	f004 0002 	and.w	r0, r4, #2
   2199a:	4318      	orrs	r0, r3
   2199c:	b01b      	add	sp, #108	; 0x6c
   2199e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   219a0:	fffcfffd 	.word	0xfffcfffd
   219a4:	00038688 	.word	0x00038688

000219a8 <POINTonE1_affine_on_curve>:
   219a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   219aa:	b09b      	sub	sp, #108	; 0x6c
   219ac:	4604      	mov	r4, r0
   219ae:	4d24      	ldr	r5, [pc, #144]	; (21a40 <POINTonE1_affine_on_curve+0x98>)
   219b0:	260c      	movs	r6, #12
   219b2:	9601      	str	r6, [sp, #4]
   219b4:	4f23      	ldr	r7, [pc, #140]	; (21a44 <POINTonE1_affine_on_curve+0x9c>)
   219b6:	9700      	str	r7, [sp, #0]
   219b8:	462b      	mov	r3, r5
   219ba:	4602      	mov	r2, r0
   219bc:	4601      	mov	r1, r0
   219be:	a80e      	add	r0, sp, #56	; 0x38
   219c0:	f7ff f806 	bl	209d0 <mul_mont_n>
   219c4:	9601      	str	r6, [sp, #4]
   219c6:	9700      	str	r7, [sp, #0]
   219c8:	462b      	mov	r3, r5
   219ca:	4622      	mov	r2, r4
   219cc:	a90e      	add	r1, sp, #56	; 0x38
   219ce:	4608      	mov	r0, r1
   219d0:	f7fe fffe 	bl	209d0 <mul_mont_n>
   219d4:	9600      	str	r6, [sp, #0]
   219d6:	462b      	mov	r3, r5
   219d8:	f105 0260 	add.w	r2, r5, #96	; 0x60
   219dc:	a90e      	add	r1, sp, #56	; 0x38
   219de:	4608      	mov	r0, r1
   219e0:	f7ff f99e 	bl	20d20 <add_mod_n>
   219e4:	f104 0130 	add.w	r1, r4, #48	; 0x30
   219e8:	9601      	str	r6, [sp, #4]
   219ea:	9700      	str	r7, [sp, #0]
   219ec:	462b      	mov	r3, r5
   219ee:	460a      	mov	r2, r1
   219f0:	a802      	add	r0, sp, #8
   219f2:	f7fe ffed 	bl	209d0 <mul_mont_n>
   219f6:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
   219fa:	f10d 0e08 	add.w	lr, sp, #8
   219fe:	a81a      	add	r0, sp, #104	; 0x68
   21a00:	2100      	movs	r1, #0
   21a02:	f85c 3b04 	ldr.w	r3, [ip], #4
   21a06:	f85e 2b04 	ldr.w	r2, [lr], #4
   21a0a:	4053      	eors	r3, r2
   21a0c:	4319      	orrs	r1, r3
   21a0e:	4584      	cmp	ip, r0
   21a10:	d1f7      	bne.n	21a02 <POINTonE1_affine_on_curve+0x5a>
   21a12:	f101 3eff 	add.w	lr, r1, #4294967295
   21a16:	ea2e 0101 	bic.w	r1, lr, r1
   21a1a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
   21a1e:	1f23      	subs	r3, r4, #4
   21a20:	f104 0c5c 	add.w	ip, r4, #92	; 0x5c
   21a24:	2100      	movs	r1, #0
   21a26:	f853 2f04 	ldr.w	r2, [r3, #4]!
   21a2a:	4311      	orrs	r1, r2
   21a2c:	4563      	cmp	r3, ip
   21a2e:	d1fa      	bne.n	21a26 <POINTonE1_affine_on_curve+0x7e>
   21a30:	1e48      	subs	r0, r1, #1
   21a32:	ea20 0001 	bic.w	r0, r0, r1
   21a36:	ea4e 70d0 	orr.w	r0, lr, r0, lsr #31
   21a3a:	b01b      	add	sp, #108	; 0x6c
   21a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21a3e:	bf00      	nop
   21a40:	00038688 	.word	0x00038688
   21a44:	fffcfffd 	.word	0xfffcfffd

00021a48 <cneg_mod_n>:
   21a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21a4c:	b083      	sub	sp, #12
   21a4e:	af00      	add	r7, sp, #0
   21a50:	607a      	str	r2, [r7, #4]
   21a52:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
   21a56:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
   21a5a:	f10b 0207 	add.w	r2, fp, #7
   21a5e:	f022 0207 	bic.w	r2, r2, #7
   21a62:	ebad 0d02 	sub.w	sp, sp, r2
   21a66:	f1ba 0f00 	cmp.w	sl, #0
   21a6a:	d045      	beq.n	21af8 <cneg_mod_n+0xb0>
   21a6c:	466d      	mov	r5, sp
   21a6e:	f1a3 0e04 	sub.w	lr, r3, #4
   21a72:	1f0c      	subs	r4, r1, #4
   21a74:	f1a5 0904 	sub.w	r9, r5, #4
   21a78:	44f3      	add	fp, lr
   21a7a:	46a0      	mov	r8, r4
   21a7c:	2300      	movs	r3, #0
   21a7e:	461e      	mov	r6, r3
   21a80:	f85e 2f04 	ldr.w	r2, [lr, #4]!
   21a84:	1ad3      	subs	r3, r2, r3
   21a86:	eb66 0c06 	sbc.w	ip, r6, r6
   21a8a:	f858 2f04 	ldr.w	r2, [r8, #4]!
   21a8e:	1a9a      	subs	r2, r3, r2
   21a90:	f16c 0300 	sbc.w	r3, ip, #0
   21a94:	f849 2f04 	str.w	r2, [r9, #4]!
   21a98:	f003 0301 	and.w	r3, r3, #1
   21a9c:	45de      	cmp	lr, fp
   21a9e:	d1ef      	bne.n	21a80 <cneg_mod_n+0x38>
   21aa0:	f03a 4c40 	bics.w	ip, sl, #3221225472	; 0xc0000000
   21aa4:	d02c      	beq.n	21b00 <cneg_mod_n+0xb8>
   21aa6:	1f0e      	subs	r6, r1, #4
   21aa8:	eb06 068c 	add.w	r6, r6, ip, lsl #2
   21aac:	2300      	movs	r3, #0
   21aae:	f854 2f04 	ldr.w	r2, [r4, #4]!
   21ab2:	4313      	orrs	r3, r2
   21ab4:	42b4      	cmp	r4, r6
   21ab6:	d1fa      	bne.n	21aae <cneg_mod_n+0x66>
   21ab8:	1e5a      	subs	r2, r3, #1
   21aba:	ea22 0303 	bic.w	r3, r2, r3
   21abe:	f8d7 c004 	ldr.w	ip, [r7, #4]
   21ac2:	2b00      	cmp	r3, #0
   21ac4:	bfb4      	ite	lt
   21ac6:	f04f 0c00 	movlt.w	ip, #0
   21aca:	f00c 0c01 	andge.w	ip, ip, #1
   21ace:	f1cc 0600 	rsb	r6, ip, #0
   21ad2:	3904      	subs	r1, #4
   21ad4:	3d04      	subs	r5, #4
   21ad6:	3804      	subs	r0, #4
   21ad8:	2400      	movs	r4, #0
   21ada:	f10c 3cff 	add.w	ip, ip, #4294967295
   21ade:	f851 3f04 	ldr.w	r3, [r1, #4]!
   21ae2:	ea0c 0303 	and.w	r3, ip, r3
   21ae6:	f855 2f04 	ldr.w	r2, [r5, #4]!
   21aea:	4032      	ands	r2, r6
   21aec:	4313      	orrs	r3, r2
   21aee:	f840 3f04 	str.w	r3, [r0, #4]!
   21af2:	3401      	adds	r4, #1
   21af4:	45a2      	cmp	sl, r4
   21af6:	d8f2      	bhi.n	21ade <cneg_mod_n+0x96>
   21af8:	370c      	adds	r7, #12
   21afa:	46bd      	mov	sp, r7
   21afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21b00:	4666      	mov	r6, ip
   21b02:	e7e6      	b.n	21ad2 <cneg_mod_n+0x8a>

00021b04 <POINTonE1_cneg>:
   21b04:	b500      	push	{lr}
   21b06:	b083      	sub	sp, #12
   21b08:	460a      	mov	r2, r1
   21b0a:	3030      	adds	r0, #48	; 0x30
   21b0c:	230c      	movs	r3, #12
   21b0e:	9300      	str	r3, [sp, #0]
   21b10:	4b03      	ldr	r3, [pc, #12]	; (21b20 <POINTonE1_cneg+0x1c>)
   21b12:	4601      	mov	r1, r0
   21b14:	f7ff ff98 	bl	21a48 <cneg_mod_n>
   21b18:	b003      	add	sp, #12
   21b1a:	f85d fb04 	ldr.w	pc, [sp], #4
   21b1e:	bf00      	nop
   21b20:	00038688 	.word	0x00038688

00021b24 <POINTonE1_gather_booth_w4>:
   21b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21b26:	460d      	mov	r5, r1
   21b28:	f3c2 1100 	ubfx	r1, r2, #4, #1
   21b2c:	f002 070f 	and.w	r7, r2, #15
   21b30:	4603      	mov	r3, r0
   21b32:	f100 0490 	add.w	r4, r0, #144	; 0x90
   21b36:	2200      	movs	r2, #0
   21b38:	f843 2b04 	str.w	r2, [r3], #4
   21b3c:	42a3      	cmp	r3, r4
   21b3e:	d1fb      	bne.n	21b38 <POINTonE1_gather_booth_w4+0x14>
   21b40:	358c      	adds	r5, #140	; 0x8c
   21b42:	2601      	movs	r6, #1
   21b44:	ea87 0e06 	eor.w	lr, r7, r6
   21b48:	fa5f fe8e 	uxtb.w	lr, lr
   21b4c:	f10e 3eff 	add.w	lr, lr, #4294967295
   21b50:	ea4f 7eee 	mov.w	lr, lr, asr #31
   21b54:	f1a5 0c90 	sub.w	ip, r5, #144	; 0x90
   21b58:	1f02      	subs	r2, r0, #4
   21b5a:	f852 4f04 	ldr.w	r4, [r2, #4]!
   21b5e:	f85c 3f04 	ldr.w	r3, [ip, #4]!
   21b62:	4063      	eors	r3, r4
   21b64:	ea03 030e 	and.w	r3, r3, lr
   21b68:	4063      	eors	r3, r4
   21b6a:	6013      	str	r3, [r2, #0]
   21b6c:	45ac      	cmp	ip, r5
   21b6e:	d1f4      	bne.n	21b5a <POINTonE1_gather_booth_w4+0x36>
   21b70:	3601      	adds	r6, #1
   21b72:	3590      	adds	r5, #144	; 0x90
   21b74:	2e09      	cmp	r6, #9
   21b76:	d1e5      	bne.n	21b44 <POINTonE1_gather_booth_w4+0x20>
   21b78:	f7ff ffc4 	bl	21b04 <POINTonE1_cneg>
   21b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021b7e <POINTonE1_gather_booth_w5>:
   21b7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21b80:	460d      	mov	r5, r1
   21b82:	f3c2 1140 	ubfx	r1, r2, #5, #1
   21b86:	f002 071f 	and.w	r7, r2, #31
   21b8a:	4603      	mov	r3, r0
   21b8c:	f100 0490 	add.w	r4, r0, #144	; 0x90
   21b90:	2200      	movs	r2, #0
   21b92:	f843 2b04 	str.w	r2, [r3], #4
   21b96:	42a3      	cmp	r3, r4
   21b98:	d1fb      	bne.n	21b92 <POINTonE1_gather_booth_w5+0x14>
   21b9a:	358c      	adds	r5, #140	; 0x8c
   21b9c:	2601      	movs	r6, #1
   21b9e:	e003      	b.n	21ba8 <POINTonE1_gather_booth_w5+0x2a>
   21ba0:	3601      	adds	r6, #1
   21ba2:	3590      	adds	r5, #144	; 0x90
   21ba4:	2e11      	cmp	r6, #17
   21ba6:	d016      	beq.n	21bd6 <POINTonE1_gather_booth_w5+0x58>
   21ba8:	ea87 0e06 	eor.w	lr, r7, r6
   21bac:	fa5f fe8e 	uxtb.w	lr, lr
   21bb0:	f10e 3eff 	add.w	lr, lr, #4294967295
   21bb4:	ea4f 7eee 	mov.w	lr, lr, asr #31
   21bb8:	f1a5 0c90 	sub.w	ip, r5, #144	; 0x90
   21bbc:	1f02      	subs	r2, r0, #4
   21bbe:	f852 4f04 	ldr.w	r4, [r2, #4]!
   21bc2:	f85c 3f04 	ldr.w	r3, [ip, #4]!
   21bc6:	4063      	eors	r3, r4
   21bc8:	ea03 030e 	and.w	r3, r3, lr
   21bcc:	4063      	eors	r3, r4
   21bce:	6013      	str	r3, [r2, #0]
   21bd0:	45ac      	cmp	ip, r5
   21bd2:	d1f4      	bne.n	21bbe <POINTonE1_gather_booth_w5+0x40>
   21bd4:	e7e4      	b.n	21ba0 <POINTonE1_gather_booth_w5+0x22>
   21bd6:	f7ff ff95 	bl	21b04 <POINTonE1_cneg>
   21bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021bdc <POINTonE2_cneg>:
   21bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
   21bde:	b083      	sub	sp, #12
   21be0:	4604      	mov	r4, r0
   21be2:	460d      	mov	r5, r1
   21be4:	3060      	adds	r0, #96	; 0x60
   21be6:	4e09      	ldr	r6, [pc, #36]	; (21c0c <POINTonE2_cneg+0x30>)
   21be8:	270c      	movs	r7, #12
   21bea:	9700      	str	r7, [sp, #0]
   21bec:	4633      	mov	r3, r6
   21bee:	460a      	mov	r2, r1
   21bf0:	4601      	mov	r1, r0
   21bf2:	f7ff ff29 	bl	21a48 <cneg_mod_n>
   21bf6:	f104 0090 	add.w	r0, r4, #144	; 0x90
   21bfa:	9700      	str	r7, [sp, #0]
   21bfc:	4633      	mov	r3, r6
   21bfe:	462a      	mov	r2, r5
   21c00:	4601      	mov	r1, r0
   21c02:	f7ff ff21 	bl	21a48 <cneg_mod_n>
   21c06:	b003      	add	sp, #12
   21c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21c0a:	bf00      	nop
   21c0c:	00038688 	.word	0x00038688

00021c10 <POINTonE2_gather_booth_w4>:
   21c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21c12:	460d      	mov	r5, r1
   21c14:	f3c2 1100 	ubfx	r1, r2, #4, #1
   21c18:	f002 070f 	and.w	r7, r2, #15
   21c1c:	4603      	mov	r3, r0
   21c1e:	f500 7490 	add.w	r4, r0, #288	; 0x120
   21c22:	2200      	movs	r2, #0
   21c24:	f843 2b04 	str.w	r2, [r3], #4
   21c28:	42a3      	cmp	r3, r4
   21c2a:	d1fb      	bne.n	21c24 <POINTonE2_gather_booth_w4+0x14>
   21c2c:	f505 758e 	add.w	r5, r5, #284	; 0x11c
   21c30:	2601      	movs	r6, #1
   21c32:	ea87 0e06 	eor.w	lr, r7, r6
   21c36:	fa5f fe8e 	uxtb.w	lr, lr
   21c3a:	f10e 3eff 	add.w	lr, lr, #4294967295
   21c3e:	ea4f 7eee 	mov.w	lr, lr, asr #31
   21c42:	f5a5 7c90 	sub.w	ip, r5, #288	; 0x120
   21c46:	1f02      	subs	r2, r0, #4
   21c48:	f852 4f04 	ldr.w	r4, [r2, #4]!
   21c4c:	f85c 3f04 	ldr.w	r3, [ip, #4]!
   21c50:	4063      	eors	r3, r4
   21c52:	ea03 030e 	and.w	r3, r3, lr
   21c56:	4063      	eors	r3, r4
   21c58:	6013      	str	r3, [r2, #0]
   21c5a:	45ac      	cmp	ip, r5
   21c5c:	d1f4      	bne.n	21c48 <POINTonE2_gather_booth_w4+0x38>
   21c5e:	3601      	adds	r6, #1
   21c60:	f505 7590 	add.w	r5, r5, #288	; 0x120
   21c64:	2e09      	cmp	r6, #9
   21c66:	d1e4      	bne.n	21c32 <POINTonE2_gather_booth_w4+0x22>
   21c68:	f7ff ffb8 	bl	21bdc <POINTonE2_cneg>
   21c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021c6e <POINTonE2_gather_booth_w5>:
   21c6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21c70:	460d      	mov	r5, r1
   21c72:	f3c2 1140 	ubfx	r1, r2, #5, #1
   21c76:	f002 071f 	and.w	r7, r2, #31
   21c7a:	4603      	mov	r3, r0
   21c7c:	f500 7490 	add.w	r4, r0, #288	; 0x120
   21c80:	2200      	movs	r2, #0
   21c82:	f843 2b04 	str.w	r2, [r3], #4
   21c86:	42a3      	cmp	r3, r4
   21c88:	d1fb      	bne.n	21c82 <POINTonE2_gather_booth_w5+0x14>
   21c8a:	f505 758e 	add.w	r5, r5, #284	; 0x11c
   21c8e:	2601      	movs	r6, #1
   21c90:	e004      	b.n	21c9c <POINTonE2_gather_booth_w5+0x2e>
   21c92:	3601      	adds	r6, #1
   21c94:	f505 7590 	add.w	r5, r5, #288	; 0x120
   21c98:	2e11      	cmp	r6, #17
   21c9a:	d016      	beq.n	21cca <POINTonE2_gather_booth_w5+0x5c>
   21c9c:	ea87 0e06 	eor.w	lr, r7, r6
   21ca0:	fa5f fe8e 	uxtb.w	lr, lr
   21ca4:	f10e 3eff 	add.w	lr, lr, #4294967295
   21ca8:	ea4f 7eee 	mov.w	lr, lr, asr #31
   21cac:	f5a5 7c90 	sub.w	ip, r5, #288	; 0x120
   21cb0:	1f02      	subs	r2, r0, #4
   21cb2:	f852 4f04 	ldr.w	r4, [r2, #4]!
   21cb6:	f85c 3f04 	ldr.w	r3, [ip, #4]!
   21cba:	4063      	eors	r3, r4
   21cbc:	ea03 030e 	and.w	r3, r3, lr
   21cc0:	4063      	eors	r3, r4
   21cc2:	6013      	str	r3, [r2, #0]
   21cc4:	45ac      	cmp	ip, r5
   21cc6:	d1f4      	bne.n	21cb2 <POINTonE2_gather_booth_w5+0x44>
   21cc8:	e7e3      	b.n	21c92 <POINTonE2_gather_booth_w5+0x24>
   21cca:	f7ff ff87 	bl	21bdc <POINTonE2_cneg>
   21cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021cd0 <neg_fp6>:
   21cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   21cd2:	b083      	sub	sp, #12
   21cd4:	4604      	mov	r4, r0
   21cd6:	460d      	mov	r5, r1
   21cd8:	4e1a      	ldr	r6, [pc, #104]	; (21d44 <neg_fp6+0x74>)
   21cda:	270c      	movs	r7, #12
   21cdc:	9700      	str	r7, [sp, #0]
   21cde:	4633      	mov	r3, r6
   21ce0:	2201      	movs	r2, #1
   21ce2:	f7ff feb1 	bl	21a48 <cneg_mod_n>
   21ce6:	9700      	str	r7, [sp, #0]
   21ce8:	4633      	mov	r3, r6
   21cea:	2201      	movs	r2, #1
   21cec:	f105 0130 	add.w	r1, r5, #48	; 0x30
   21cf0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   21cf4:	f7ff fea8 	bl	21a48 <cneg_mod_n>
   21cf8:	9700      	str	r7, [sp, #0]
   21cfa:	4633      	mov	r3, r6
   21cfc:	2201      	movs	r2, #1
   21cfe:	f105 0160 	add.w	r1, r5, #96	; 0x60
   21d02:	f104 0060 	add.w	r0, r4, #96	; 0x60
   21d06:	f7ff fe9f 	bl	21a48 <cneg_mod_n>
   21d0a:	9700      	str	r7, [sp, #0]
   21d0c:	4633      	mov	r3, r6
   21d0e:	2201      	movs	r2, #1
   21d10:	f105 0190 	add.w	r1, r5, #144	; 0x90
   21d14:	f104 0090 	add.w	r0, r4, #144	; 0x90
   21d18:	f7ff fe96 	bl	21a48 <cneg_mod_n>
   21d1c:	9700      	str	r7, [sp, #0]
   21d1e:	4633      	mov	r3, r6
   21d20:	2201      	movs	r2, #1
   21d22:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
   21d26:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   21d2a:	f7ff fe8d 	bl	21a48 <cneg_mod_n>
   21d2e:	9700      	str	r7, [sp, #0]
   21d30:	4633      	mov	r3, r6
   21d32:	2201      	movs	r2, #1
   21d34:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   21d38:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   21d3c:	f7ff fe84 	bl	21a48 <cneg_mod_n>
   21d40:	b003      	add	sp, #12
   21d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21d44:	00038688 	.word	0x00038688

00021d48 <conjugate_fp12>:
   21d48:	b508      	push	{r3, lr}
   21d4a:	f500 7090 	add.w	r0, r0, #288	; 0x120
   21d4e:	4601      	mov	r1, r0
   21d50:	f7ff ffbe 	bl	21cd0 <neg_fp6>
   21d54:	bd08      	pop	{r3, pc}

00021d56 <POINTonE1_is_equal>:
   21d56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21d5a:	b0cd      	sub	sp, #308	; 0x134
   21d5c:	4681      	mov	r9, r0
   21d5e:	4688      	mov	r8, r1
   21d60:	f100 0a60 	add.w	sl, r0, #96	; 0x60
   21d64:	f100 035c 	add.w	r3, r0, #92	; 0x5c
   21d68:	308c      	adds	r0, #140	; 0x8c
   21d6a:	2200      	movs	r2, #0
   21d6c:	f853 1f04 	ldr.w	r1, [r3, #4]!
   21d70:	430a      	orrs	r2, r1
   21d72:	4283      	cmp	r3, r0
   21d74:	d1fa      	bne.n	21d6c <POINTonE1_is_equal+0x16>
   21d76:	1e53      	subs	r3, r2, #1
   21d78:	ea23 0202 	bic.w	r2, r3, r2
   21d7c:	0fd3      	lsrs	r3, r2, #31
   21d7e:	9303      	str	r3, [sp, #12]
   21d80:	f108 0b60 	add.w	fp, r8, #96	; 0x60
   21d84:	f108 035c 	add.w	r3, r8, #92	; 0x5c
   21d88:	f108 008c 	add.w	r0, r8, #140	; 0x8c
   21d8c:	2200      	movs	r2, #0
   21d8e:	f853 1f04 	ldr.w	r1, [r3, #4]!
   21d92:	430a      	orrs	r2, r1
   21d94:	4283      	cmp	r3, r0
   21d96:	d1fa      	bne.n	21d8e <POINTonE1_is_equal+0x38>
   21d98:	1e54      	subs	r4, r2, #1
   21d9a:	ea24 0402 	bic.w	r4, r4, r2
   21d9e:	0fe4      	lsrs	r4, r4, #31
   21da0:	4d2e      	ldr	r5, [pc, #184]	; (21e5c <POINTonE1_is_equal+0x106>)
   21da2:	270c      	movs	r7, #12
   21da4:	9701      	str	r7, [sp, #4]
   21da6:	4e2e      	ldr	r6, [pc, #184]	; (21e60 <POINTonE1_is_equal+0x10a>)
   21da8:	9600      	str	r6, [sp, #0]
   21daa:	462b      	mov	r3, r5
   21dac:	4652      	mov	r2, sl
   21dae:	4651      	mov	r1, sl
   21db0:	a840      	add	r0, sp, #256	; 0x100
   21db2:	f7fe fe0d 	bl	209d0 <mul_mont_n>
   21db6:	9701      	str	r7, [sp, #4]
   21db8:	9600      	str	r6, [sp, #0]
   21dba:	462b      	mov	r3, r5
   21dbc:	465a      	mov	r2, fp
   21dbe:	4659      	mov	r1, fp
   21dc0:	a834      	add	r0, sp, #208	; 0xd0
   21dc2:	f7fe fe05 	bl	209d0 <mul_mont_n>
   21dc6:	9701      	str	r7, [sp, #4]
   21dc8:	9600      	str	r6, [sp, #0]
   21dca:	462b      	mov	r3, r5
   21dcc:	aa34      	add	r2, sp, #208	; 0xd0
   21dce:	4649      	mov	r1, r9
   21dd0:	a81c      	add	r0, sp, #112	; 0x70
   21dd2:	f7fe fdfd 	bl	209d0 <mul_mont_n>
   21dd6:	9701      	str	r7, [sp, #4]
   21dd8:	9600      	str	r6, [sp, #0]
   21dda:	462b      	mov	r3, r5
   21ddc:	aa40      	add	r2, sp, #256	; 0x100
   21dde:	4641      	mov	r1, r8
   21de0:	a804      	add	r0, sp, #16
   21de2:	f7fe fdf5 	bl	209d0 <mul_mont_n>
   21de6:	9701      	str	r7, [sp, #4]
   21de8:	9600      	str	r6, [sp, #0]
   21dea:	462b      	mov	r3, r5
   21dec:	465a      	mov	r2, fp
   21dee:	f109 0130 	add.w	r1, r9, #48	; 0x30
   21df2:	a828      	add	r0, sp, #160	; 0xa0
   21df4:	f7fe fdec 	bl	209d0 <mul_mont_n>
   21df8:	9701      	str	r7, [sp, #4]
   21dfa:	9600      	str	r6, [sp, #0]
   21dfc:	462b      	mov	r3, r5
   21dfe:	4652      	mov	r2, sl
   21e00:	f108 0130 	add.w	r1, r8, #48	; 0x30
   21e04:	a810      	add	r0, sp, #64	; 0x40
   21e06:	f7fe fde3 	bl	209d0 <mul_mont_n>
   21e0a:	9701      	str	r7, [sp, #4]
   21e0c:	9600      	str	r6, [sp, #0]
   21e0e:	462b      	mov	r3, r5
   21e10:	aa34      	add	r2, sp, #208	; 0xd0
   21e12:	a928      	add	r1, sp, #160	; 0xa0
   21e14:	4608      	mov	r0, r1
   21e16:	f7fe fddb 	bl	209d0 <mul_mont_n>
   21e1a:	9701      	str	r7, [sp, #4]
   21e1c:	9600      	str	r6, [sp, #0]
   21e1e:	462b      	mov	r3, r5
   21e20:	aa40      	add	r2, sp, #256	; 0x100
   21e22:	a910      	add	r1, sp, #64	; 0x40
   21e24:	4608      	mov	r0, r1
   21e26:	f7fe fdd3 	bl	209d0 <mul_mont_n>
   21e2a:	aa1b      	add	r2, sp, #108	; 0x6c
   21e2c:	eb0d 0107 	add.w	r1, sp, r7
   21e30:	ae33      	add	r6, sp, #204	; 0xcc
   21e32:	2000      	movs	r0, #0
   21e34:	f852 3f04 	ldr.w	r3, [r2, #4]!
   21e38:	f851 5f04 	ldr.w	r5, [r1, #4]!
   21e3c:	406b      	eors	r3, r5
   21e3e:	4318      	orrs	r0, r3
   21e40:	42b2      	cmp	r2, r6
   21e42:	d1f7      	bne.n	21e34 <POINTonE1_is_equal+0xde>
   21e44:	1e43      	subs	r3, r0, #1
   21e46:	ea23 0000 	bic.w	r0, r3, r0
   21e4a:	9b03      	ldr	r3, [sp, #12]
   21e4c:	405c      	eors	r4, r3
   21e4e:	f084 0401 	eor.w	r4, r4, #1
   21e52:	ea04 70d0 	and.w	r0, r4, r0, lsr #31
   21e56:	b04d      	add	sp, #308	; 0x134
   21e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21e5c:	00038688 	.word	0x00038688
   21e60:	fffcfffd 	.word	0xfffcfffd

00021e64 <POINTonE1_double>:
   21e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21e68:	b0a6      	sub	sp, #152	; 0x98
   21e6a:	4606      	mov	r6, r0
   21e6c:	460f      	mov	r7, r1
   21e6e:	4c4c      	ldr	r4, [pc, #304]	; (21fa0 <POINTonE1_double+0x13c>)
   21e70:	250c      	movs	r5, #12
   21e72:	9501      	str	r5, [sp, #4]
   21e74:	f8df 812c 	ldr.w	r8, [pc, #300]	; 21fa4 <POINTonE1_double+0x140>
   21e78:	f8cd 8000 	str.w	r8, [sp]
   21e7c:	4623      	mov	r3, r4
   21e7e:	460a      	mov	r2, r1
   21e80:	a81a      	add	r0, sp, #104	; 0x68
   21e82:	f7fe fda5 	bl	209d0 <mul_mont_n>
   21e86:	f107 0a30 	add.w	sl, r7, #48	; 0x30
   21e8a:	9501      	str	r5, [sp, #4]
   21e8c:	f8cd 8000 	str.w	r8, [sp]
   21e90:	4623      	mov	r3, r4
   21e92:	4652      	mov	r2, sl
   21e94:	4651      	mov	r1, sl
   21e96:	a80e      	add	r0, sp, #56	; 0x38
   21e98:	f7fe fd9a 	bl	209d0 <mul_mont_n>
   21e9c:	9501      	str	r5, [sp, #4]
   21e9e:	f8cd 8000 	str.w	r8, [sp]
   21ea2:	4623      	mov	r3, r4
   21ea4:	aa0e      	add	r2, sp, #56	; 0x38
   21ea6:	4611      	mov	r1, r2
   21ea8:	a802      	add	r0, sp, #8
   21eaa:	f7fe fd91 	bl	209d0 <mul_mont_n>
   21eae:	9500      	str	r5, [sp, #0]
   21eb0:	4623      	mov	r3, r4
   21eb2:	463a      	mov	r2, r7
   21eb4:	a90e      	add	r1, sp, #56	; 0x38
   21eb6:	4608      	mov	r0, r1
   21eb8:	f7fe ff32 	bl	20d20 <add_mod_n>
   21ebc:	9501      	str	r5, [sp, #4]
   21ebe:	f8cd 8000 	str.w	r8, [sp]
   21ec2:	4623      	mov	r3, r4
   21ec4:	aa0e      	add	r2, sp, #56	; 0x38
   21ec6:	4611      	mov	r1, r2
   21ec8:	4610      	mov	r0, r2
   21eca:	f7fe fd81 	bl	209d0 <mul_mont_n>
   21ece:	9500      	str	r5, [sp, #0]
   21ed0:	4623      	mov	r3, r4
   21ed2:	aa1a      	add	r2, sp, #104	; 0x68
   21ed4:	a90e      	add	r1, sp, #56	; 0x38
   21ed6:	4608      	mov	r0, r1
   21ed8:	f7fe fbcc 	bl	20674 <sub_mod_n>
   21edc:	9500      	str	r5, [sp, #0]
   21ede:	4623      	mov	r3, r4
   21ee0:	aa02      	add	r2, sp, #8
   21ee2:	a90e      	add	r1, sp, #56	; 0x38
   21ee4:	4608      	mov	r0, r1
   21ee6:	f7fe fbc5 	bl	20674 <sub_mod_n>
   21eea:	9500      	str	r5, [sp, #0]
   21eec:	4623      	mov	r3, r4
   21eee:	aa0e      	add	r2, sp, #56	; 0x38
   21ef0:	4611      	mov	r1, r2
   21ef2:	4610      	mov	r0, r2
   21ef4:	f7fe ff14 	bl	20d20 <add_mod_n>
   21ef8:	462b      	mov	r3, r5
   21efa:	4622      	mov	r2, r4
   21efc:	a91a      	add	r1, sp, #104	; 0x68
   21efe:	4608      	mov	r0, r1
   21f00:	f7fe ff96 	bl	20e30 <mul_by_3_mod_n>
   21f04:	9501      	str	r5, [sp, #4]
   21f06:	f8cd 8000 	str.w	r8, [sp]
   21f0a:	4623      	mov	r3, r4
   21f0c:	aa1a      	add	r2, sp, #104	; 0x68
   21f0e:	4611      	mov	r1, r2
   21f10:	4630      	mov	r0, r6
   21f12:	f7fe fd5d 	bl	209d0 <mul_mont_n>
   21f16:	9500      	str	r5, [sp, #0]
   21f18:	4623      	mov	r3, r4
   21f1a:	aa0e      	add	r2, sp, #56	; 0x38
   21f1c:	4631      	mov	r1, r6
   21f1e:	4630      	mov	r0, r6
   21f20:	f7fe fba8 	bl	20674 <sub_mod_n>
   21f24:	9500      	str	r5, [sp, #0]
   21f26:	4623      	mov	r3, r4
   21f28:	aa0e      	add	r2, sp, #56	; 0x38
   21f2a:	4631      	mov	r1, r6
   21f2c:	4630      	mov	r0, r6
   21f2e:	f7fe fba1 	bl	20674 <sub_mod_n>
   21f32:	f106 0960 	add.w	r9, r6, #96	; 0x60
   21f36:	f107 0160 	add.w	r1, r7, #96	; 0x60
   21f3a:	9500      	str	r5, [sp, #0]
   21f3c:	4623      	mov	r3, r4
   21f3e:	460a      	mov	r2, r1
   21f40:	4648      	mov	r0, r9
   21f42:	f7fe feed 	bl	20d20 <add_mod_n>
   21f46:	9501      	str	r5, [sp, #4]
   21f48:	f8cd 8000 	str.w	r8, [sp]
   21f4c:	4623      	mov	r3, r4
   21f4e:	4652      	mov	r2, sl
   21f50:	4649      	mov	r1, r9
   21f52:	4648      	mov	r0, r9
   21f54:	f7fe fd3c 	bl	209d0 <mul_mont_n>
   21f58:	9500      	str	r5, [sp, #0]
   21f5a:	4623      	mov	r3, r4
   21f5c:	2203      	movs	r2, #3
   21f5e:	a902      	add	r1, sp, #8
   21f60:	4608      	mov	r0, r1
   21f62:	f7ff f805 	bl	20f70 <lshift_mod_n>
   21f66:	f106 0730 	add.w	r7, r6, #48	; 0x30
   21f6a:	9500      	str	r5, [sp, #0]
   21f6c:	4623      	mov	r3, r4
   21f6e:	4632      	mov	r2, r6
   21f70:	a90e      	add	r1, sp, #56	; 0x38
   21f72:	4638      	mov	r0, r7
   21f74:	f7fe fb7e 	bl	20674 <sub_mod_n>
   21f78:	9501      	str	r5, [sp, #4]
   21f7a:	f8cd 8000 	str.w	r8, [sp]
   21f7e:	4623      	mov	r3, r4
   21f80:	aa1a      	add	r2, sp, #104	; 0x68
   21f82:	4639      	mov	r1, r7
   21f84:	4638      	mov	r0, r7
   21f86:	f7fe fd23 	bl	209d0 <mul_mont_n>
   21f8a:	9500      	str	r5, [sp, #0]
   21f8c:	4623      	mov	r3, r4
   21f8e:	aa02      	add	r2, sp, #8
   21f90:	4639      	mov	r1, r7
   21f92:	4638      	mov	r0, r7
   21f94:	f7fe fb6e 	bl	20674 <sub_mod_n>
   21f98:	b026      	add	sp, #152	; 0x98
   21f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21f9e:	bf00      	nop
   21fa0:	00038688 	.word	0x00038688
   21fa4:	fffcfffd 	.word	0xfffcfffd

00021fa8 <sub_fp6>:
   21fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21fac:	b082      	sub	sp, #8
   21fae:	4604      	mov	r4, r0
   21fb0:	460d      	mov	r5, r1
   21fb2:	4616      	mov	r6, r2
   21fb4:	4f20      	ldr	r7, [pc, #128]	; (22038 <sub_fp6+0x90>)
   21fb6:	f04f 080c 	mov.w	r8, #12
   21fba:	f8cd 8000 	str.w	r8, [sp]
   21fbe:	463b      	mov	r3, r7
   21fc0:	f7fe fb58 	bl	20674 <sub_mod_n>
   21fc4:	f8cd 8000 	str.w	r8, [sp]
   21fc8:	463b      	mov	r3, r7
   21fca:	f106 0230 	add.w	r2, r6, #48	; 0x30
   21fce:	f105 0130 	add.w	r1, r5, #48	; 0x30
   21fd2:	f104 0030 	add.w	r0, r4, #48	; 0x30
   21fd6:	f7fe fb4d 	bl	20674 <sub_mod_n>
   21fda:	f8cd 8000 	str.w	r8, [sp]
   21fde:	463b      	mov	r3, r7
   21fe0:	f106 0260 	add.w	r2, r6, #96	; 0x60
   21fe4:	f105 0160 	add.w	r1, r5, #96	; 0x60
   21fe8:	f104 0060 	add.w	r0, r4, #96	; 0x60
   21fec:	f7fe fb42 	bl	20674 <sub_mod_n>
   21ff0:	f8cd 8000 	str.w	r8, [sp]
   21ff4:	463b      	mov	r3, r7
   21ff6:	f106 0290 	add.w	r2, r6, #144	; 0x90
   21ffa:	f105 0190 	add.w	r1, r5, #144	; 0x90
   21ffe:	f104 0090 	add.w	r0, r4, #144	; 0x90
   22002:	f7fe fb37 	bl	20674 <sub_mod_n>
   22006:	f8cd 8000 	str.w	r8, [sp]
   2200a:	463b      	mov	r3, r7
   2200c:	f106 02c0 	add.w	r2, r6, #192	; 0xc0
   22010:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
   22014:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   22018:	f7fe fb2c 	bl	20674 <sub_mod_n>
   2201c:	f8cd 8000 	str.w	r8, [sp]
   22020:	463b      	mov	r3, r7
   22022:	f106 02f0 	add.w	r2, r6, #240	; 0xf0
   22026:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   2202a:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   2202e:	f7fe fb21 	bl	20674 <sub_mod_n>
   22032:	b002      	add	sp, #8
   22034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22038:	00038688 	.word	0x00038688

0002203c <add_fp6>:
   2203c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22040:	b082      	sub	sp, #8
   22042:	4604      	mov	r4, r0
   22044:	460d      	mov	r5, r1
   22046:	4616      	mov	r6, r2
   22048:	4f20      	ldr	r7, [pc, #128]	; (220cc <add_fp6+0x90>)
   2204a:	f04f 080c 	mov.w	r8, #12
   2204e:	f8cd 8000 	str.w	r8, [sp]
   22052:	463b      	mov	r3, r7
   22054:	f7fe fe64 	bl	20d20 <add_mod_n>
   22058:	f8cd 8000 	str.w	r8, [sp]
   2205c:	463b      	mov	r3, r7
   2205e:	f106 0230 	add.w	r2, r6, #48	; 0x30
   22062:	f105 0130 	add.w	r1, r5, #48	; 0x30
   22066:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2206a:	f7fe fe59 	bl	20d20 <add_mod_n>
   2206e:	f8cd 8000 	str.w	r8, [sp]
   22072:	463b      	mov	r3, r7
   22074:	f106 0260 	add.w	r2, r6, #96	; 0x60
   22078:	f105 0160 	add.w	r1, r5, #96	; 0x60
   2207c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   22080:	f7fe fe4e 	bl	20d20 <add_mod_n>
   22084:	f8cd 8000 	str.w	r8, [sp]
   22088:	463b      	mov	r3, r7
   2208a:	f106 0290 	add.w	r2, r6, #144	; 0x90
   2208e:	f105 0190 	add.w	r1, r5, #144	; 0x90
   22092:	f104 0090 	add.w	r0, r4, #144	; 0x90
   22096:	f7fe fe43 	bl	20d20 <add_mod_n>
   2209a:	f8cd 8000 	str.w	r8, [sp]
   2209e:	463b      	mov	r3, r7
   220a0:	f106 02c0 	add.w	r2, r6, #192	; 0xc0
   220a4:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
   220a8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   220ac:	f7fe fe38 	bl	20d20 <add_mod_n>
   220b0:	f8cd 8000 	str.w	r8, [sp]
   220b4:	463b      	mov	r3, r7
   220b6:	f106 02f0 	add.w	r2, r6, #240	; 0xf0
   220ba:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   220be:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   220c2:	f7fe fe2d 	bl	20d20 <add_mod_n>
   220c6:	b002      	add	sp, #8
   220c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   220cc:	00038688 	.word	0x00038688

000220d0 <POINTonE1_add_affine>:
   220d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   220d4:	b0e5      	sub	sp, #404	; 0x194
   220d6:	9003      	str	r0, [sp, #12]
   220d8:	460d      	mov	r5, r1
   220da:	4692      	mov	sl, r2
   220dc:	f101 0b60 	add.w	fp, r1, #96	; 0x60
   220e0:	f101 035c 	add.w	r3, r1, #92	; 0x5c
   220e4:	f101 008c 	add.w	r0, r1, #140	; 0x8c
   220e8:	2200      	movs	r2, #0
   220ea:	f853 1f04 	ldr.w	r1, [r3, #4]!
   220ee:	430a      	orrs	r2, r1
   220f0:	4283      	cmp	r3, r0
   220f2:	d1fa      	bne.n	220ea <POINTonE1_add_affine+0x1a>
   220f4:	1e56      	subs	r6, r2, #1
   220f6:	ea26 0602 	bic.w	r6, r6, r2
   220fa:	0ff6      	lsrs	r6, r6, #31
   220fc:	4c88      	ldr	r4, [pc, #544]	; (22320 <POINTonE1_add_affine+0x250>)
   220fe:	f04f 080c 	mov.w	r8, #12
   22102:	f8cd 8004 	str.w	r8, [sp, #4]
   22106:	4f87      	ldr	r7, [pc, #540]	; (22324 <POINTonE1_add_affine+0x254>)
   22108:	9700      	str	r7, [sp, #0]
   2210a:	4623      	mov	r3, r4
   2210c:	465a      	mov	r2, fp
   2210e:	4659      	mov	r1, fp
   22110:	a834      	add	r0, sp, #208	; 0xd0
   22112:	f7fe fc5d 	bl	209d0 <mul_mont_n>
   22116:	f8cd 8004 	str.w	r8, [sp, #4]
   2211a:	9700      	str	r7, [sp, #0]
   2211c:	4623      	mov	r3, r4
   2211e:	465a      	mov	r2, fp
   22120:	a934      	add	r1, sp, #208	; 0xd0
   22122:	a858      	add	r0, sp, #352	; 0x160
   22124:	f7fe fc54 	bl	209d0 <mul_mont_n>
   22128:	f8cd 8004 	str.w	r8, [sp, #4]
   2212c:	9700      	str	r7, [sp, #0]
   2212e:	4623      	mov	r3, r4
   22130:	f10a 0230 	add.w	r2, sl, #48	; 0x30
   22134:	a958      	add	r1, sp, #352	; 0x160
   22136:	4608      	mov	r0, r1
   22138:	f7fe fc4a 	bl	209d0 <mul_mont_n>
   2213c:	f1aa 0804 	sub.w	r8, sl, #4
   22140:	f10a 005c 	add.w	r0, sl, #92	; 0x5c
   22144:	4643      	mov	r3, r8
   22146:	2200      	movs	r2, #0
   22148:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2214c:	430a      	orrs	r2, r1
   2214e:	4283      	cmp	r3, r0
   22150:	d1fa      	bne.n	22148 <POINTonE1_add_affine+0x78>
   22152:	1e53      	subs	r3, r2, #1
   22154:	ea23 0202 	bic.w	r2, r3, r2
   22158:	0fd3      	lsrs	r3, r2, #31
   2215a:	9302      	str	r3, [sp, #8]
   2215c:	4c70      	ldr	r4, [pc, #448]	; (22320 <POINTonE1_add_affine+0x250>)
   2215e:	270c      	movs	r7, #12
   22160:	9701      	str	r7, [sp, #4]
   22162:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 22324 <POINTonE1_add_affine+0x254>
   22166:	f8cd 9000 	str.w	r9, [sp]
   2216a:	4623      	mov	r3, r4
   2216c:	aa34      	add	r2, sp, #208	; 0xd0
   2216e:	4651      	mov	r1, sl
   22170:	a828      	add	r0, sp, #160	; 0xa0
   22172:	f7fe fc2d 	bl	209d0 <mul_mont_n>
   22176:	9700      	str	r7, [sp, #0]
   22178:	4623      	mov	r3, r4
   2217a:	462a      	mov	r2, r5
   2217c:	a928      	add	r1, sp, #160	; 0xa0
   2217e:	4608      	mov	r0, r1
   22180:	f7fe fa78 	bl	20674 <sub_mod_n>
   22184:	9701      	str	r7, [sp, #4]
   22186:	f8cd 9000 	str.w	r9, [sp]
   2218a:	4623      	mov	r3, r4
   2218c:	aa28      	add	r2, sp, #160	; 0xa0
   2218e:	4611      	mov	r1, r2
   22190:	a81c      	add	r0, sp, #112	; 0x70
   22192:	f7fe fc1d 	bl	209d0 <mul_mont_n>
   22196:	9700      	str	r7, [sp, #0]
   22198:	4623      	mov	r3, r4
   2219a:	aa1c      	add	r2, sp, #112	; 0x70
   2219c:	4611      	mov	r1, r2
   2219e:	a810      	add	r0, sp, #64	; 0x40
   221a0:	f7fe fdbe 	bl	20d20 <add_mod_n>
   221a4:	9700      	str	r7, [sp, #0]
   221a6:	4623      	mov	r3, r4
   221a8:	aa10      	add	r2, sp, #64	; 0x40
   221aa:	4611      	mov	r1, r2
   221ac:	4610      	mov	r0, r2
   221ae:	f7fe fdb7 	bl	20d20 <add_mod_n>
   221b2:	9701      	str	r7, [sp, #4]
   221b4:	f8cd 9000 	str.w	r9, [sp]
   221b8:	4623      	mov	r3, r4
   221ba:	aa10      	add	r2, sp, #64	; 0x40
   221bc:	4629      	mov	r1, r5
   221be:	a84c      	add	r0, sp, #304	; 0x130
   221c0:	f7fe fc06 	bl	209d0 <mul_mont_n>
   221c4:	9701      	str	r7, [sp, #4]
   221c6:	f8cd 9000 	str.w	r9, [sp]
   221ca:	4623      	mov	r3, r4
   221cc:	aa10      	add	r2, sp, #64	; 0x40
   221ce:	a928      	add	r1, sp, #160	; 0xa0
   221d0:	a804      	add	r0, sp, #16
   221d2:	f7fe fbfd 	bl	209d0 <mul_mont_n>
   221d6:	f105 0a30 	add.w	sl, r5, #48	; 0x30
   221da:	9701      	str	r7, [sp, #4]
   221dc:	f8cd 9000 	str.w	r9, [sp]
   221e0:	4623      	mov	r3, r4
   221e2:	4652      	mov	r2, sl
   221e4:	a904      	add	r1, sp, #16
   221e6:	a810      	add	r0, sp, #64	; 0x40
   221e8:	f7fe fbf2 	bl	209d0 <mul_mont_n>
   221ec:	9700      	str	r7, [sp, #0]
   221ee:	4623      	mov	r3, r4
   221f0:	4652      	mov	r2, sl
   221f2:	a958      	add	r1, sp, #352	; 0x160
   221f4:	4608      	mov	r0, r1
   221f6:	f7fe fa3d 	bl	20674 <sub_mod_n>
   221fa:	9700      	str	r7, [sp, #0]
   221fc:	4623      	mov	r3, r4
   221fe:	aa58      	add	r2, sp, #352	; 0x160
   22200:	4611      	mov	r1, r2
   22202:	4610      	mov	r0, r2
   22204:	f7fe fd8c 	bl	20d20 <add_mod_n>
   22208:	9701      	str	r7, [sp, #4]
   2220a:	f8cd 9000 	str.w	r9, [sp]
   2220e:	4623      	mov	r3, r4
   22210:	aa58      	add	r2, sp, #352	; 0x160
   22212:	4611      	mov	r1, r2
   22214:	a840      	add	r0, sp, #256	; 0x100
   22216:	f7fe fbdb 	bl	209d0 <mul_mont_n>
   2221a:	9700      	str	r7, [sp, #0]
   2221c:	4623      	mov	r3, r4
   2221e:	aa04      	add	r2, sp, #16
   22220:	a940      	add	r1, sp, #256	; 0x100
   22222:	4608      	mov	r0, r1
   22224:	f7fe fa26 	bl	20674 <sub_mod_n>
   22228:	9700      	str	r7, [sp, #0]
   2222a:	4623      	mov	r3, r4
   2222c:	aa4c      	add	r2, sp, #304	; 0x130
   2222e:	a940      	add	r1, sp, #256	; 0x100
   22230:	4608      	mov	r0, r1
   22232:	f7fe fa1f 	bl	20674 <sub_mod_n>
   22236:	9700      	str	r7, [sp, #0]
   22238:	4623      	mov	r3, r4
   2223a:	aa4c      	add	r2, sp, #304	; 0x130
   2223c:	a940      	add	r1, sp, #256	; 0x100
   2223e:	4608      	mov	r0, r1
   22240:	f7fe fa18 	bl	20674 <sub_mod_n>
   22244:	9700      	str	r7, [sp, #0]
   22246:	4623      	mov	r3, r4
   22248:	aa40      	add	r2, sp, #256	; 0x100
   2224a:	a94c      	add	r1, sp, #304	; 0x130
   2224c:	4608      	mov	r0, r1
   2224e:	f7fe fa11 	bl	20674 <sub_mod_n>
   22252:	9701      	str	r7, [sp, #4]
   22254:	f8cd 9000 	str.w	r9, [sp]
   22258:	4623      	mov	r3, r4
   2225a:	aa58      	add	r2, sp, #352	; 0x160
   2225c:	a94c      	add	r1, sp, #304	; 0x130
   2225e:	4608      	mov	r0, r1
   22260:	f7fe fbb6 	bl	209d0 <mul_mont_n>
   22264:	9700      	str	r7, [sp, #0]
   22266:	4623      	mov	r3, r4
   22268:	aa10      	add	r2, sp, #64	; 0x40
   2226a:	a94c      	add	r1, sp, #304	; 0x130
   2226c:	4608      	mov	r0, r1
   2226e:	f7fe fa01 	bl	20674 <sub_mod_n>
   22272:	9700      	str	r7, [sp, #0]
   22274:	4623      	mov	r3, r4
   22276:	aa10      	add	r2, sp, #64	; 0x40
   22278:	a94c      	add	r1, sp, #304	; 0x130
   2227a:	4608      	mov	r0, r1
   2227c:	f7fe f9fa 	bl	20674 <sub_mod_n>
   22280:	9700      	str	r7, [sp, #0]
   22282:	4623      	mov	r3, r4
   22284:	aa28      	add	r2, sp, #160	; 0xa0
   22286:	4659      	mov	r1, fp
   22288:	a858      	add	r0, sp, #352	; 0x160
   2228a:	f7fe fd49 	bl	20d20 <add_mod_n>
   2228e:	9701      	str	r7, [sp, #4]
   22290:	f8cd 9000 	str.w	r9, [sp]
   22294:	4623      	mov	r3, r4
   22296:	aa58      	add	r2, sp, #352	; 0x160
   22298:	4611      	mov	r1, r2
   2229a:	4610      	mov	r0, r2
   2229c:	f7fe fb98 	bl	209d0 <mul_mont_n>
   222a0:	9700      	str	r7, [sp, #0]
   222a2:	4623      	mov	r3, r4
   222a4:	aa34      	add	r2, sp, #208	; 0xd0
   222a6:	a958      	add	r1, sp, #352	; 0x160
   222a8:	4608      	mov	r0, r1
   222aa:	f7fe f9e3 	bl	20674 <sub_mod_n>
   222ae:	9700      	str	r7, [sp, #0]
   222b0:	4623      	mov	r3, r4
   222b2:	aa1c      	add	r2, sp, #112	; 0x70
   222b4:	a958      	add	r1, sp, #352	; 0x160
   222b6:	4608      	mov	r0, r1
   222b8:	f7fe f9dc 	bl	20674 <sub_mod_n>
   222bc:	4276      	negs	r6, r6
   222be:	f104 0190 	add.w	r1, r4, #144	; 0x90
   222c2:	aa57      	add	r2, sp, #348	; 0x15c
   222c4:	34c0      	adds	r4, #192	; 0xc0
   222c6:	f851 3b04 	ldr.w	r3, [r1], #4
   222ca:	f852 0f04 	ldr.w	r0, [r2, #4]!
   222ce:	4043      	eors	r3, r0
   222d0:	4033      	ands	r3, r6
   222d2:	4043      	eors	r3, r0
   222d4:	6013      	str	r3, [r2, #0]
   222d6:	42a1      	cmp	r1, r4
   222d8:	d1f5      	bne.n	222c6 <POINTonE1_add_affine+0x1f6>
   222da:	aa40      	add	r2, sp, #256	; 0x100
   222dc:	ac58      	add	r4, sp, #352	; 0x160
   222de:	4611      	mov	r1, r2
   222e0:	6808      	ldr	r0, [r1, #0]
   222e2:	f858 3f04 	ldr.w	r3, [r8, #4]!
   222e6:	4043      	eors	r3, r0
   222e8:	4033      	ands	r3, r6
   222ea:	4043      	eors	r3, r0
   222ec:	f841 3b04 	str.w	r3, [r1], #4
   222f0:	42a1      	cmp	r1, r4
   222f2:	d1f5      	bne.n	222e0 <POINTonE1_add_affine+0x210>
   222f4:	9b02      	ldr	r3, [sp, #8]
   222f6:	425c      	negs	r4, r3
   222f8:	3d04      	subs	r5, #4
   222fa:	9b03      	ldr	r3, [sp, #12]
   222fc:	1f18      	subs	r0, r3, #4
   222fe:	f102 0690 	add.w	r6, r2, #144	; 0x90
   22302:	f852 1b04 	ldr.w	r1, [r2], #4
   22306:	f855 3f04 	ldr.w	r3, [r5, #4]!
   2230a:	404b      	eors	r3, r1
   2230c:	4023      	ands	r3, r4
   2230e:	404b      	eors	r3, r1
   22310:	f840 3f04 	str.w	r3, [r0, #4]!
   22314:	42b2      	cmp	r2, r6
   22316:	d1f4      	bne.n	22302 <POINTonE1_add_affine+0x232>
   22318:	b065      	add	sp, #404	; 0x194
   2231a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2231e:	bf00      	nop
   22320:	00038688 	.word	0x00038688
   22324:	fffcfffd 	.word	0xfffcfffd

00022328 <POINTonE1_Deserialize_BE>:
   22328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2232c:	b0a6      	sub	sp, #152	; 0x98
   2232e:	4604      	mov	r4, r0
   22330:	f101 0230 	add.w	r2, r1, #48	; 0x30
   22334:	4608      	mov	r0, r1
   22336:	2500      	movs	r5, #0
   22338:	f101 072f 	add.w	r7, r1, #47	; 0x2f
   2233c:	1a3b      	subs	r3, r7, r0
   2233e:	f810 6b01 	ldrb.w	r6, [r0], #1
   22342:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
   22346:	f023 0303 	bic.w	r3, r3, #3
   2234a:	ae26      	add	r6, sp, #152	; 0x98
   2234c:	4433      	add	r3, r6
   2234e:	f843 5c60 	str.w	r5, [r3, #-96]
   22352:	4290      	cmp	r0, r2
   22354:	d1f2      	bne.n	2233c <POINTonE1_Deserialize_BE+0x14>
   22356:	f101 0660 	add.w	r6, r1, #96	; 0x60
   2235a:	2000      	movs	r0, #0
   2235c:	315f      	adds	r1, #95	; 0x5f
   2235e:	1a8b      	subs	r3, r1, r2
   22360:	f812 5b01 	ldrb.w	r5, [r2], #1
   22364:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
   22368:	f023 0303 	bic.w	r3, r3, #3
   2236c:	ad26      	add	r5, sp, #152	; 0x98
   2236e:	442b      	add	r3, r5
   22370:	f843 0c30 	str.w	r0, [r3, #-48]
   22374:	42b2      	cmp	r2, r6
   22376:	d1f2      	bne.n	2235e <POINTonE1_Deserialize_BE+0x36>
   22378:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2237a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   2237e:	9319      	str	r3, [sp, #100]	; 0x64
   22380:	4b38      	ldr	r3, [pc, #224]	; (22464 <POINTonE1_Deserialize_BE+0x13c>)
   22382:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   22386:	220c      	movs	r2, #12
   22388:	9200      	str	r2, [sp, #0]
   2238a:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
   2238e:	4641      	mov	r1, r8
   22390:	a802      	add	r0, sp, #8
   22392:	f7fe fcc5 	bl	20d20 <add_mod_n>
   22396:	ae02      	add	r6, sp, #8
   22398:	46c2      	mov	sl, r8
   2239a:	4645      	mov	r5, r8
   2239c:	4641      	mov	r1, r8
   2239e:	4632      	mov	r2, r6
   223a0:	2000      	movs	r0, #0
   223a2:	f852 3b04 	ldr.w	r3, [r2], #4
   223a6:	f851 7b04 	ldr.w	r7, [r1], #4
   223aa:	407b      	eors	r3, r7
   223ac:	4318      	orrs	r0, r3
   223ae:	42aa      	cmp	r2, r5
   223b0:	d1f7      	bne.n	223a2 <POINTonE1_Deserialize_BE+0x7a>
   223b2:	1e43      	subs	r3, r0, #1
   223b4:	4383      	bics	r3, r0
   223b6:	d403      	bmi.n	223c0 <POINTonE1_Deserialize_BE+0x98>
   223b8:	2001      	movs	r0, #1
   223ba:	b026      	add	sp, #152	; 0x98
   223bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   223c0:	4b28      	ldr	r3, [pc, #160]	; (22464 <POINTonE1_Deserialize_BE+0x13c>)
   223c2:	220c      	movs	r2, #12
   223c4:	9200      	str	r2, [sp, #0]
   223c6:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
   223ca:	a91a      	add	r1, sp, #104	; 0x68
   223cc:	a802      	add	r0, sp, #8
   223ce:	f7fe fca7 	bl	20d20 <add_mod_n>
   223d2:	a919      	add	r1, sp, #100	; 0x64
   223d4:	2200      	movs	r2, #0
   223d6:	f856 3b04 	ldr.w	r3, [r6], #4
   223da:	f851 0f04 	ldr.w	r0, [r1, #4]!
   223de:	4043      	eors	r3, r0
   223e0:	431a      	orrs	r2, r3
   223e2:	42ae      	cmp	r6, r5
   223e4:	d1f7      	bne.n	223d6 <POINTonE1_Deserialize_BE+0xae>
   223e6:	1e53      	subs	r3, r2, #1
   223e8:	4393      	bics	r3, r2
   223ea:	d401      	bmi.n	223f0 <POINTonE1_Deserialize_BE+0xc8>
   223ec:	2001      	movs	r0, #1
   223ee:	e7e4      	b.n	223ba <POINTonE1_Deserialize_BE+0x92>
   223f0:	4d1c      	ldr	r5, [pc, #112]	; (22464 <POINTonE1_Deserialize_BE+0x13c>)
   223f2:	f505 7634 	add.w	r6, r5, #720	; 0x2d0
   223f6:	f04f 090c 	mov.w	r9, #12
   223fa:	f8cd 9004 	str.w	r9, [sp, #4]
   223fe:	f8df 8068 	ldr.w	r8, [pc, #104]	; 22468 <POINTonE1_Deserialize_BE+0x140>
   22402:	f8cd 8000 	str.w	r8, [sp]
   22406:	462b      	mov	r3, r5
   22408:	4632      	mov	r2, r6
   2240a:	a90e      	add	r1, sp, #56	; 0x38
   2240c:	4608      	mov	r0, r1
   2240e:	f7fe fadf 	bl	209d0 <mul_mont_n>
   22412:	f8cd 9004 	str.w	r9, [sp, #4]
   22416:	f8cd 8000 	str.w	r8, [sp]
   2241a:	462b      	mov	r3, r5
   2241c:	4632      	mov	r2, r6
   2241e:	a91a      	add	r1, sp, #104	; 0x68
   22420:	4608      	mov	r0, r1
   22422:	f7fe fad5 	bl	209d0 <mul_mont_n>
   22426:	a80e      	add	r0, sp, #56	; 0x38
   22428:	f7ff fabe 	bl	219a8 <POINTonE1_affine_on_curve>
   2242c:	b1b8      	cbz	r0, 2245e <POINTonE1_Deserialize_BE+0x136>
   2242e:	aa0d      	add	r2, sp, #52	; 0x34
   22430:	1f23      	subs	r3, r4, #4
   22432:	f10a 075c 	add.w	r7, sl, #92	; 0x5c
   22436:	4619      	mov	r1, r3
   22438:	f852 0f04 	ldr.w	r0, [r2, #4]!
   2243c:	f841 0f04 	str.w	r0, [r1, #4]!
   22440:	42ba      	cmp	r2, r7
   22442:	d1f9      	bne.n	22438 <POINTonE1_Deserialize_BE+0x110>
   22444:	342c      	adds	r4, #44	; 0x2c
   22446:	2200      	movs	r2, #0
   22448:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2244c:	430a      	orrs	r2, r1
   2244e:	42a3      	cmp	r3, r4
   22450:	d1fa      	bne.n	22448 <POINTonE1_Deserialize_BE+0x120>
   22452:	1e53      	subs	r3, r2, #1
   22454:	4393      	bics	r3, r2
   22456:	bf4c      	ite	mi
   22458:	2003      	movmi	r0, #3
   2245a:	2000      	movpl	r0, #0
   2245c:	e7ad      	b.n	223ba <POINTonE1_Deserialize_BE+0x92>
   2245e:	2002      	movs	r0, #2
   22460:	e7ab      	b.n	223ba <POINTonE1_Deserialize_BE+0x92>
   22462:	bf00      	nop
   22464:	00038688 	.word	0x00038688
   22468:	fffcfffd 	.word	0xfffcfffd

0002246c <POINTonE1_add>:
   2246c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22470:	b0fd      	sub	sp, #500	; 0x1f4
   22472:	9003      	str	r0, [sp, #12]
   22474:	460f      	mov	r7, r1
   22476:	4616      	mov	r6, r2
   22478:	f101 0a60 	add.w	sl, r1, #96	; 0x60
   2247c:	f101 035c 	add.w	r3, r1, #92	; 0x5c
   22480:	f101 008c 	add.w	r0, r1, #140	; 0x8c
   22484:	2200      	movs	r2, #0
   22486:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2248a:	430a      	orrs	r2, r1
   2248c:	4283      	cmp	r3, r0
   2248e:	d1fa      	bne.n	22486 <POINTonE1_add+0x1a>
   22490:	1e53      	subs	r3, r2, #1
   22492:	ea23 0202 	bic.w	r2, r3, r2
   22496:	0fd3      	lsrs	r3, r2, #31
   22498:	9302      	str	r3, [sp, #8]
   2249a:	4c95      	ldr	r4, [pc, #596]	; (226f0 <POINTonE1_add+0x284>)
   2249c:	f04f 080c 	mov.w	r8, #12
   224a0:	f8cd 8004 	str.w	r8, [sp, #4]
   224a4:	4d93      	ldr	r5, [pc, #588]	; (226f4 <POINTonE1_add+0x288>)
   224a6:	9500      	str	r5, [sp, #0]
   224a8:	4623      	mov	r3, r4
   224aa:	4652      	mov	r2, sl
   224ac:	4651      	mov	r1, sl
   224ae:	a84c      	add	r0, sp, #304	; 0x130
   224b0:	f7fe fa8e 	bl	209d0 <mul_mont_n>
   224b4:	f8cd 8004 	str.w	r8, [sp, #4]
   224b8:	9500      	str	r5, [sp, #0]
   224ba:	4623      	mov	r3, r4
   224bc:	4652      	mov	r2, sl
   224be:	a94c      	add	r1, sp, #304	; 0x130
   224c0:	a870      	add	r0, sp, #448	; 0x1c0
   224c2:	f7fe fa85 	bl	209d0 <mul_mont_n>
   224c6:	f8cd 8004 	str.w	r8, [sp, #4]
   224ca:	9500      	str	r5, [sp, #0]
   224cc:	4623      	mov	r3, r4
   224ce:	f106 0230 	add.w	r2, r6, #48	; 0x30
   224d2:	a970      	add	r1, sp, #448	; 0x1c0
   224d4:	4608      	mov	r0, r1
   224d6:	f7fe fa7b 	bl	209d0 <mul_mont_n>
   224da:	f106 0b60 	add.w	fp, r6, #96	; 0x60
   224de:	f106 035c 	add.w	r3, r6, #92	; 0x5c
   224e2:	f106 018c 	add.w	r1, r6, #140	; 0x8c
   224e6:	f04f 0800 	mov.w	r8, #0
   224ea:	f853 2f04 	ldr.w	r2, [r3, #4]!
   224ee:	ea48 0802 	orr.w	r8, r8, r2
   224f2:	428b      	cmp	r3, r1
   224f4:	d1f9      	bne.n	224ea <POINTonE1_add+0x7e>
   224f6:	4c7e      	ldr	r4, [pc, #504]	; (226f0 <POINTonE1_add+0x284>)
   224f8:	250c      	movs	r5, #12
   224fa:	9501      	str	r5, [sp, #4]
   224fc:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 226f4 <POINTonE1_add+0x288>
   22500:	f8cd 9000 	str.w	r9, [sp]
   22504:	4623      	mov	r3, r4
   22506:	465a      	mov	r2, fp
   22508:	4659      	mov	r1, fp
   2250a:	a840      	add	r0, sp, #256	; 0x100
   2250c:	f7fe fa60 	bl	209d0 <mul_mont_n>
   22510:	9501      	str	r5, [sp, #4]
   22512:	f8cd 9000 	str.w	r9, [sp]
   22516:	4623      	mov	r3, r4
   22518:	465a      	mov	r2, fp
   2251a:	a940      	add	r1, sp, #256	; 0x100
   2251c:	a828      	add	r0, sp, #160	; 0xa0
   2251e:	f7fe fa57 	bl	209d0 <mul_mont_n>
   22522:	9501      	str	r5, [sp, #4]
   22524:	f8cd 9000 	str.w	r9, [sp]
   22528:	4623      	mov	r3, r4
   2252a:	f107 0230 	add.w	r2, r7, #48	; 0x30
   2252e:	a928      	add	r1, sp, #160	; 0xa0
   22530:	4608      	mov	r0, r1
   22532:	f7fe fa4d 	bl	209d0 <mul_mont_n>
   22536:	9500      	str	r5, [sp, #0]
   22538:	4623      	mov	r3, r4
   2253a:	aa28      	add	r2, sp, #160	; 0xa0
   2253c:	a970      	add	r1, sp, #448	; 0x1c0
   2253e:	4608      	mov	r0, r1
   22540:	f7fe f898 	bl	20674 <sub_mod_n>
   22544:	9500      	str	r5, [sp, #0]
   22546:	4623      	mov	r3, r4
   22548:	aa70      	add	r2, sp, #448	; 0x1c0
   2254a:	4611      	mov	r1, r2
   2254c:	4610      	mov	r0, r2
   2254e:	f7fe fbe7 	bl	20d20 <add_mod_n>
   22552:	9501      	str	r5, [sp, #4]
   22554:	f8cd 9000 	str.w	r9, [sp]
   22558:	4623      	mov	r3, r4
   2255a:	aa40      	add	r2, sp, #256	; 0x100
   2255c:	4639      	mov	r1, r7
   2255e:	a834      	add	r0, sp, #208	; 0xd0
   22560:	f7fe fa36 	bl	209d0 <mul_mont_n>
   22564:	9501      	str	r5, [sp, #4]
   22566:	f8cd 9000 	str.w	r9, [sp]
   2256a:	4623      	mov	r3, r4
   2256c:	aa4c      	add	r2, sp, #304	; 0x130
   2256e:	4631      	mov	r1, r6
   22570:	a81c      	add	r0, sp, #112	; 0x70
   22572:	f7fe fa2d 	bl	209d0 <mul_mont_n>
   22576:	9500      	str	r5, [sp, #0]
   22578:	4623      	mov	r3, r4
   2257a:	aa34      	add	r2, sp, #208	; 0xd0
   2257c:	a91c      	add	r1, sp, #112	; 0x70
   2257e:	4608      	mov	r0, r1
   22580:	f7fe f878 	bl	20674 <sub_mod_n>
   22584:	9500      	str	r5, [sp, #0]
   22586:	4623      	mov	r3, r4
   22588:	aa1c      	add	r2, sp, #112	; 0x70
   2258a:	4611      	mov	r1, r2
   2258c:	a810      	add	r0, sp, #64	; 0x40
   2258e:	f7fe fbc7 	bl	20d20 <add_mod_n>
   22592:	9501      	str	r5, [sp, #4]
   22594:	f8cd 9000 	str.w	r9, [sp]
   22598:	4623      	mov	r3, r4
   2259a:	aa10      	add	r2, sp, #64	; 0x40
   2259c:	4611      	mov	r1, r2
   2259e:	4610      	mov	r0, r2
   225a0:	f7fe fa16 	bl	209d0 <mul_mont_n>
   225a4:	9501      	str	r5, [sp, #4]
   225a6:	f8cd 9000 	str.w	r9, [sp]
   225aa:	4623      	mov	r3, r4
   225ac:	aa10      	add	r2, sp, #64	; 0x40
   225ae:	a91c      	add	r1, sp, #112	; 0x70
   225b0:	a804      	add	r0, sp, #16
   225b2:	f7fe fa0d 	bl	209d0 <mul_mont_n>
   225b6:	9501      	str	r5, [sp, #4]
   225b8:	f8cd 9000 	str.w	r9, [sp]
   225bc:	4623      	mov	r3, r4
   225be:	aa04      	add	r2, sp, #16
   225c0:	a928      	add	r1, sp, #160	; 0xa0
   225c2:	4608      	mov	r0, r1
   225c4:	f7fe fa04 	bl	209d0 <mul_mont_n>
   225c8:	9501      	str	r5, [sp, #4]
   225ca:	f8cd 9000 	str.w	r9, [sp]
   225ce:	4623      	mov	r3, r4
   225d0:	aa10      	add	r2, sp, #64	; 0x40
   225d2:	a934      	add	r1, sp, #208	; 0xd0
   225d4:	a864      	add	r0, sp, #400	; 0x190
   225d6:	f7fe f9fb 	bl	209d0 <mul_mont_n>
   225da:	9501      	str	r5, [sp, #4]
   225dc:	f8cd 9000 	str.w	r9, [sp]
   225e0:	4623      	mov	r3, r4
   225e2:	aa70      	add	r2, sp, #448	; 0x1c0
   225e4:	4611      	mov	r1, r2
   225e6:	a858      	add	r0, sp, #352	; 0x160
   225e8:	f7fe f9f2 	bl	209d0 <mul_mont_n>
   225ec:	9500      	str	r5, [sp, #0]
   225ee:	4623      	mov	r3, r4
   225f0:	aa04      	add	r2, sp, #16
   225f2:	a958      	add	r1, sp, #352	; 0x160
   225f4:	4608      	mov	r0, r1
   225f6:	f7fe f83d 	bl	20674 <sub_mod_n>
   225fa:	9500      	str	r5, [sp, #0]
   225fc:	4623      	mov	r3, r4
   225fe:	aa64      	add	r2, sp, #400	; 0x190
   22600:	a958      	add	r1, sp, #352	; 0x160
   22602:	4608      	mov	r0, r1
   22604:	f7fe f836 	bl	20674 <sub_mod_n>
   22608:	9500      	str	r5, [sp, #0]
   2260a:	4623      	mov	r3, r4
   2260c:	aa64      	add	r2, sp, #400	; 0x190
   2260e:	a958      	add	r1, sp, #352	; 0x160
   22610:	4608      	mov	r0, r1
   22612:	f7fe f82f 	bl	20674 <sub_mod_n>
   22616:	9500      	str	r5, [sp, #0]
   22618:	4623      	mov	r3, r4
   2261a:	aa58      	add	r2, sp, #352	; 0x160
   2261c:	a964      	add	r1, sp, #400	; 0x190
   2261e:	4608      	mov	r0, r1
   22620:	f7fe f828 	bl	20674 <sub_mod_n>
   22624:	9501      	str	r5, [sp, #4]
   22626:	f8cd 9000 	str.w	r9, [sp]
   2262a:	4623      	mov	r3, r4
   2262c:	aa70      	add	r2, sp, #448	; 0x1c0
   2262e:	a964      	add	r1, sp, #400	; 0x190
   22630:	4608      	mov	r0, r1
   22632:	f7fe f9cd 	bl	209d0 <mul_mont_n>
   22636:	9500      	str	r5, [sp, #0]
   22638:	4623      	mov	r3, r4
   2263a:	aa28      	add	r2, sp, #160	; 0xa0
   2263c:	a964      	add	r1, sp, #400	; 0x190
   2263e:	4608      	mov	r0, r1
   22640:	f7fe f818 	bl	20674 <sub_mod_n>
   22644:	9500      	str	r5, [sp, #0]
   22646:	4623      	mov	r3, r4
   22648:	aa28      	add	r2, sp, #160	; 0xa0
   2264a:	a964      	add	r1, sp, #400	; 0x190
   2264c:	4608      	mov	r0, r1
   2264e:	f7fe f811 	bl	20674 <sub_mod_n>
   22652:	9500      	str	r5, [sp, #0]
   22654:	4623      	mov	r3, r4
   22656:	465a      	mov	r2, fp
   22658:	4651      	mov	r1, sl
   2265a:	a870      	add	r0, sp, #448	; 0x1c0
   2265c:	f7fe fb60 	bl	20d20 <add_mod_n>
   22660:	9501      	str	r5, [sp, #4]
   22662:	f8cd 9000 	str.w	r9, [sp]
   22666:	4623      	mov	r3, r4
   22668:	aa70      	add	r2, sp, #448	; 0x1c0
   2266a:	4611      	mov	r1, r2
   2266c:	4610      	mov	r0, r2
   2266e:	f7fe f9af 	bl	209d0 <mul_mont_n>
   22672:	9500      	str	r5, [sp, #0]
   22674:	4623      	mov	r3, r4
   22676:	aa4c      	add	r2, sp, #304	; 0x130
   22678:	a970      	add	r1, sp, #448	; 0x1c0
   2267a:	4608      	mov	r0, r1
   2267c:	f7fd fffa 	bl	20674 <sub_mod_n>
   22680:	9500      	str	r5, [sp, #0]
   22682:	4623      	mov	r3, r4
   22684:	aa40      	add	r2, sp, #256	; 0x100
   22686:	a970      	add	r1, sp, #448	; 0x1c0
   22688:	4608      	mov	r0, r1
   2268a:	f7fd fff3 	bl	20674 <sub_mod_n>
   2268e:	9501      	str	r5, [sp, #4]
   22690:	f8cd 9000 	str.w	r9, [sp]
   22694:	4623      	mov	r3, r4
   22696:	aa1c      	add	r2, sp, #112	; 0x70
   22698:	a970      	add	r1, sp, #448	; 0x1c0
   2269a:	4608      	mov	r0, r1
   2269c:	f7fe f998 	bl	209d0 <mul_mont_n>
   226a0:	f108 33ff 	add.w	r3, r8, #4294967295
   226a4:	ea23 0808 	bic.w	r8, r3, r8
   226a8:	ea4f 78e8 	mov.w	r8, r8, asr #31
   226ac:	3f04      	subs	r7, #4
   226ae:	ac58      	add	r4, sp, #352	; 0x160
   226b0:	ad7c      	add	r5, sp, #496	; 0x1f0
   226b2:	4622      	mov	r2, r4
   226b4:	6811      	ldr	r1, [r2, #0]
   226b6:	f857 3f04 	ldr.w	r3, [r7, #4]!
   226ba:	404b      	eors	r3, r1
   226bc:	ea03 0308 	and.w	r3, r3, r8
   226c0:	404b      	eors	r3, r1
   226c2:	f842 3b04 	str.w	r3, [r2], #4
   226c6:	42aa      	cmp	r2, r5
   226c8:	d1f4      	bne.n	226b4 <POINTonE1_add+0x248>
   226ca:	9b02      	ldr	r3, [sp, #8]
   226cc:	425a      	negs	r2, r3
   226ce:	3e04      	subs	r6, #4
   226d0:	9b03      	ldr	r3, [sp, #12]
   226d2:	1f18      	subs	r0, r3, #4
   226d4:	f854 1b04 	ldr.w	r1, [r4], #4
   226d8:	f856 3f04 	ldr.w	r3, [r6, #4]!
   226dc:	404b      	eors	r3, r1
   226de:	4013      	ands	r3, r2
   226e0:	404b      	eors	r3, r1
   226e2:	f840 3f04 	str.w	r3, [r0, #4]!
   226e6:	42ac      	cmp	r4, r5
   226e8:	d1f4      	bne.n	226d4 <POINTonE1_add+0x268>
   226ea:	b07d      	add	sp, #500	; 0x1f4
   226ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   226f0:	00038688 	.word	0x00038688
   226f4:	fffcfffd 	.word	0xfffcfffd

000226f8 <POINTonE1_precompute_w4>:
   226f8:	b570      	push	{r4, r5, r6, lr}
   226fa:	4606      	mov	r6, r0
   226fc:	1f0b      	subs	r3, r1, #4
   226fe:	1f02      	subs	r2, r0, #4
   22700:	f101 008c 	add.w	r0, r1, #140	; 0x8c
   22704:	f853 4f04 	ldr.w	r4, [r3, #4]!
   22708:	f842 4f04 	str.w	r4, [r2, #4]!
   2270c:	4283      	cmp	r3, r0
   2270e:	d1f9      	bne.n	22704 <POINTonE1_precompute_w4+0xc>
   22710:	f106 0090 	add.w	r0, r6, #144	; 0x90
   22714:	f7ff fba6 	bl	21e64 <POINTonE1_double>
   22718:	f506 7590 	add.w	r5, r6, #288	; 0x120
   2271c:	4634      	mov	r4, r6
   2271e:	f506 76d8 	add.w	r6, r6, #432	; 0x1b0
   22722:	4622      	mov	r2, r4
   22724:	3490      	adds	r4, #144	; 0x90
   22726:	4621      	mov	r1, r4
   22728:	4628      	mov	r0, r5
   2272a:	f7ff fe9f 	bl	2246c <POINTonE1_add>
   2272e:	4621      	mov	r1, r4
   22730:	f105 0090 	add.w	r0, r5, #144	; 0x90
   22734:	f7ff fb96 	bl	21e64 <POINTonE1_double>
   22738:	f505 7590 	add.w	r5, r5, #288	; 0x120
   2273c:	42b4      	cmp	r4, r6
   2273e:	d1f0      	bne.n	22722 <POINTonE1_precompute_w4+0x2a>
   22740:	bd70      	pop	{r4, r5, r6, pc}

00022742 <isogeny_map_to_E1>:
   22742:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22746:	f2ad 6d6c 	subw	sp, sp, #1644	; 0x66c
   2274a:	4607      	mov	r7, r0
   2274c:	4688      	mov	r8, r1
   2274e:	f101 0960 	add.w	r9, r1, #96	; 0x60
   22752:	4cad      	ldr	r4, [pc, #692]	; (22a08 <isogeny_map_to_E1+0x2c6>)
   22754:	250c      	movs	r5, #12
   22756:	9501      	str	r5, [sp, #4]
   22758:	4eac      	ldr	r6, [pc, #688]	; (22a0c <isogeny_map_to_E1+0x2ca>)
   2275a:	9600      	str	r6, [sp, #0]
   2275c:	4623      	mov	r3, r4
   2275e:	464a      	mov	r2, r9
   22760:	4649      	mov	r1, r9
   22762:	f50d 60c7 	add.w	r0, sp, #1592	; 0x638
   22766:	f7fe f933 	bl	209d0 <mul_mont_n>
   2276a:	9501      	str	r5, [sp, #4]
   2276c:	9600      	str	r6, [sp, #0]
   2276e:	4623      	mov	r3, r4
   22770:	f50d 62c7 	add.w	r2, sp, #1592	; 0x638
   22774:	4611      	mov	r1, r2
   22776:	f50d 60c1 	add.w	r0, sp, #1544	; 0x608
   2277a:	f7fe f929 	bl	209d0 <mul_mont_n>
   2277e:	9501      	str	r5, [sp, #4]
   22780:	9600      	str	r6, [sp, #0]
   22782:	4623      	mov	r3, r4
   22784:	f50d 62c1 	add.w	r2, sp, #1544	; 0x608
   22788:	f50d 61c7 	add.w	r1, sp, #1592	; 0x638
   2278c:	f50d 60bb 	add.w	r0, sp, #1496	; 0x5d8
   22790:	f7fe f91e 	bl	209d0 <mul_mont_n>
   22794:	9501      	str	r5, [sp, #4]
   22796:	9600      	str	r6, [sp, #0]
   22798:	4623      	mov	r3, r4
   2279a:	f50d 62c1 	add.w	r2, sp, #1544	; 0x608
   2279e:	4611      	mov	r1, r2
   227a0:	f50d 60b5 	add.w	r0, sp, #1448	; 0x5a8
   227a4:	f7fe f914 	bl	209d0 <mul_mont_n>
   227a8:	9501      	str	r5, [sp, #4]
   227aa:	9600      	str	r6, [sp, #0]
   227ac:	4623      	mov	r3, r4
   227ae:	f50d 62bb 	add.w	r2, sp, #1496	; 0x5d8
   227b2:	f50d 61c1 	add.w	r1, sp, #1544	; 0x608
   227b6:	f50d 60af 	add.w	r0, sp, #1400	; 0x578
   227ba:	f7fe f909 	bl	209d0 <mul_mont_n>
   227be:	9501      	str	r5, [sp, #4]
   227c0:	9600      	str	r6, [sp, #0]
   227c2:	4623      	mov	r3, r4
   227c4:	f50d 62bb 	add.w	r2, sp, #1496	; 0x5d8
   227c8:	4611      	mov	r1, r2
   227ca:	f50d 60a9 	add.w	r0, sp, #1352	; 0x548
   227ce:	f7fe f8ff 	bl	209d0 <mul_mont_n>
   227d2:	9501      	str	r5, [sp, #4]
   227d4:	9600      	str	r6, [sp, #0]
   227d6:	4623      	mov	r3, r4
   227d8:	f50d 62b5 	add.w	r2, sp, #1448	; 0x5a8
   227dc:	f50d 61bb 	add.w	r1, sp, #1496	; 0x5d8
   227e0:	f50d 60a3 	add.w	r0, sp, #1304	; 0x518
   227e4:	f7fe f8f4 	bl	209d0 <mul_mont_n>
   227e8:	9501      	str	r5, [sp, #4]
   227ea:	9600      	str	r6, [sp, #0]
   227ec:	4623      	mov	r3, r4
   227ee:	f50d 62b5 	add.w	r2, sp, #1448	; 0x5a8
   227f2:	4611      	mov	r1, r2
   227f4:	f50d 609d 	add.w	r0, sp, #1256	; 0x4e8
   227f8:	f7fe f8ea 	bl	209d0 <mul_mont_n>
   227fc:	9501      	str	r5, [sp, #4]
   227fe:	9600      	str	r6, [sp, #0]
   22800:	4623      	mov	r3, r4
   22802:	f50d 62af 	add.w	r2, sp, #1400	; 0x578
   22806:	f50d 61b5 	add.w	r1, sp, #1448	; 0x5a8
   2280a:	f50d 6097 	add.w	r0, sp, #1208	; 0x4b8
   2280e:	f7fe f8df 	bl	209d0 <mul_mont_n>
   22812:	9501      	str	r5, [sp, #4]
   22814:	9600      	str	r6, [sp, #0]
   22816:	4623      	mov	r3, r4
   22818:	f50d 62af 	add.w	r2, sp, #1400	; 0x578
   2281c:	4611      	mov	r1, r2
   2281e:	f50d 6091 	add.w	r0, sp, #1160	; 0x488
   22822:	f7fe f8d5 	bl	209d0 <mul_mont_n>
   22826:	9501      	str	r5, [sp, #4]
   22828:	9600      	str	r6, [sp, #0]
   2282a:	4623      	mov	r3, r4
   2282c:	f50d 62a9 	add.w	r2, sp, #1352	; 0x548
   22830:	f50d 61af 	add.w	r1, sp, #1400	; 0x578
   22834:	f50d 608b 	add.w	r0, sp, #1112	; 0x458
   22838:	f7fe f8ca 	bl	209d0 <mul_mont_n>
   2283c:	9501      	str	r5, [sp, #4]
   2283e:	9600      	str	r6, [sp, #0]
   22840:	4623      	mov	r3, r4
   22842:	f50d 62a9 	add.w	r2, sp, #1352	; 0x548
   22846:	4611      	mov	r1, r2
   22848:	f50d 6085 	add.w	r0, sp, #1064	; 0x428
   2284c:	f7fe f8c0 	bl	209d0 <mul_mont_n>
   22850:	9501      	str	r5, [sp, #4]
   22852:	9600      	str	r6, [sp, #0]
   22854:	4623      	mov	r3, r4
   22856:	f50d 62a3 	add.w	r2, sp, #1304	; 0x518
   2285a:	f50d 61a9 	add.w	r1, sp, #1352	; 0x548
   2285e:	a8fe      	add	r0, sp, #1016	; 0x3f8
   22860:	f7fe f8b6 	bl	209d0 <mul_mont_n>
   22864:	9501      	str	r5, [sp, #4]
   22866:	9600      	str	r6, [sp, #0]
   22868:	4623      	mov	r3, r4
   2286a:	f50d 62a3 	add.w	r2, sp, #1304	; 0x518
   2286e:	4611      	mov	r1, r2
   22870:	a8f2      	add	r0, sp, #968	; 0x3c8
   22872:	f7fe f8ad 	bl	209d0 <mul_mont_n>
   22876:	9501      	str	r5, [sp, #4]
   22878:	9600      	str	r6, [sp, #0]
   2287a:	4623      	mov	r3, r4
   2287c:	f50d 629d 	add.w	r2, sp, #1256	; 0x4e8
   22880:	f50d 61a3 	add.w	r1, sp, #1304	; 0x518
   22884:	a8e6      	add	r0, sp, #920	; 0x398
   22886:	f7fe f8a3 	bl	209d0 <mul_mont_n>
   2288a:	230b      	movs	r3, #11
   2288c:	f50d 628b 	add.w	r2, sp, #1112	; 0x458
   22890:	f504 7140 	add.w	r1, r4, #768	; 0x300
   22894:	a832      	add	r0, sp, #200	; 0xc8
   22896:	f7fe f991 	bl	20bbc <map_fp_times_Zz>
   2289a:	9501      	str	r5, [sp, #4]
   2289c:	9600      	str	r6, [sp, #0]
   2289e:	4623      	mov	r3, r4
   228a0:	f504 62a2 	add.w	r2, r4, #1296	; 0x510
   228a4:	4641      	mov	r1, r8
   228a6:	a826      	add	r0, sp, #152	; 0x98
   228a8:	f7fe f892 	bl	209d0 <mul_mont_n>
   228ac:	9500      	str	r5, [sp, #0]
   228ae:	4623      	mov	r3, r4
   228b0:	aaaa      	add	r2, sp, #680	; 0x2a8
   228b2:	a926      	add	r1, sp, #152	; 0x98
   228b4:	4608      	mov	r0, r1
   228b6:	f7fe fa33 	bl	20d20 <add_mod_n>
   228ba:	230a      	movs	r3, #10
   228bc:	aa32      	add	r2, sp, #200	; 0xc8
   228be:	4641      	mov	r1, r8
   228c0:	a826      	add	r0, sp, #152	; 0x98
   228c2:	f7fe fa86 	bl	20dd2 <map_fp>
   228c6:	230a      	movs	r3, #10
   228c8:	f50d 6291 	add.w	r2, sp, #1160	; 0x488
   228cc:	f504 61a8 	add.w	r1, r4, #1344	; 0x540
   228d0:	a832      	add	r0, sp, #200	; 0xc8
   228d2:	f7fe f973 	bl	20bbc <map_fp_times_Zz>
   228d6:	9500      	str	r5, [sp, #0]
   228d8:	4623      	mov	r3, r4
   228da:	aa9e      	add	r2, sp, #632	; 0x278
   228dc:	4641      	mov	r1, r8
   228de:	a81a      	add	r0, sp, #104	; 0x68
   228e0:	f7fe fa1e 	bl	20d20 <add_mod_n>
   228e4:	2309      	movs	r3, #9
   228e6:	aa32      	add	r2, sp, #200	; 0xc8
   228e8:	4641      	mov	r1, r8
   228ea:	a81a      	add	r0, sp, #104	; 0x68
   228ec:	f7fe fa71 	bl	20dd2 <map_fp>
   228f0:	9501      	str	r5, [sp, #4]
   228f2:	9600      	str	r6, [sp, #0]
   228f4:	4623      	mov	r3, r4
   228f6:	f50d 62c7 	add.w	r2, sp, #1592	; 0x638
   228fa:	a91a      	add	r1, sp, #104	; 0x68
   228fc:	4608      	mov	r0, r1
   228fe:	f7fe f867 	bl	209d0 <mul_mont_n>
   22902:	230f      	movs	r3, #15
   22904:	aae6      	add	r2, sp, #920	; 0x398
   22906:	f504 61e4 	add.w	r1, r4, #1824	; 0x720
   2290a:	a832      	add	r0, sp, #200	; 0xc8
   2290c:	f7fe f956 	bl	20bbc <map_fp_times_Zz>
   22910:	9501      	str	r5, [sp, #4]
   22912:	9600      	str	r6, [sp, #0]
   22914:	4623      	mov	r3, r4
   22916:	f504 621f 	add.w	r2, r4, #2544	; 0x9f0
   2291a:	4641      	mov	r1, r8
   2291c:	a80e      	add	r0, sp, #56	; 0x38
   2291e:	f7fe f857 	bl	209d0 <mul_mont_n>
   22922:	9500      	str	r5, [sp, #0]
   22924:	4623      	mov	r3, r4
   22926:	aada      	add	r2, sp, #872	; 0x368
   22928:	a90e      	add	r1, sp, #56	; 0x38
   2292a:	4608      	mov	r0, r1
   2292c:	f7fe f9f8 	bl	20d20 <add_mod_n>
   22930:	230e      	movs	r3, #14
   22932:	aa32      	add	r2, sp, #200	; 0xc8
   22934:	4641      	mov	r1, r8
   22936:	a80e      	add	r0, sp, #56	; 0x38
   22938:	f7fe fa4b 	bl	20dd2 <map_fp>
   2293c:	9501      	str	r5, [sp, #4]
   2293e:	9600      	str	r6, [sp, #0]
   22940:	4623      	mov	r3, r4
   22942:	f108 0230 	add.w	r2, r8, #48	; 0x30
   22946:	a90e      	add	r1, sp, #56	; 0x38
   22948:	4608      	mov	r0, r1
   2294a:	f7fe f841 	bl	209d0 <mul_mont_n>
   2294e:	230f      	movs	r3, #15
   22950:	aae6      	add	r2, sp, #920	; 0x398
   22952:	f504 6122 	add.w	r1, r4, #2592	; 0xa20
   22956:	a832      	add	r0, sp, #200	; 0xc8
   22958:	f7fe f930 	bl	20bbc <map_fp_times_Zz>
   2295c:	9500      	str	r5, [sp, #0]
   2295e:	4623      	mov	r3, r4
   22960:	aada      	add	r2, sp, #872	; 0x368
   22962:	4641      	mov	r1, r8
   22964:	a802      	add	r0, sp, #8
   22966:	f7fe f9db 	bl	20d20 <add_mod_n>
   2296a:	230e      	movs	r3, #14
   2296c:	aa32      	add	r2, sp, #200	; 0xc8
   2296e:	4641      	mov	r1, r8
   22970:	a802      	add	r0, sp, #8
   22972:	f7fe fa2e 	bl	20dd2 <map_fp>
   22976:	9501      	str	r5, [sp, #4]
   22978:	9600      	str	r6, [sp, #0]
   2297a:	4623      	mov	r3, r4
   2297c:	464a      	mov	r2, r9
   2297e:	f50d 61c7 	add.w	r1, sp, #1592	; 0x638
   22982:	4608      	mov	r0, r1
   22984:	f7fe f824 	bl	209d0 <mul_mont_n>
   22988:	9501      	str	r5, [sp, #4]
   2298a:	9600      	str	r6, [sp, #0]
   2298c:	4623      	mov	r3, r4
   2298e:	f50d 62c7 	add.w	r2, sp, #1592	; 0x638
   22992:	a902      	add	r1, sp, #8
   22994:	4608      	mov	r0, r1
   22996:	f7fe f81b 	bl	209d0 <mul_mont_n>
   2299a:	f107 0860 	add.w	r8, r7, #96	; 0x60
   2299e:	9501      	str	r5, [sp, #4]
   229a0:	9600      	str	r6, [sp, #0]
   229a2:	4623      	mov	r3, r4
   229a4:	aa02      	add	r2, sp, #8
   229a6:	a91a      	add	r1, sp, #104	; 0x68
   229a8:	4640      	mov	r0, r8
   229aa:	f7fe f811 	bl	209d0 <mul_mont_n>
   229ae:	9501      	str	r5, [sp, #4]
   229b0:	9600      	str	r6, [sp, #0]
   229b2:	4623      	mov	r3, r4
   229b4:	aa02      	add	r2, sp, #8
   229b6:	a926      	add	r1, sp, #152	; 0x98
   229b8:	4638      	mov	r0, r7
   229ba:	f7fe f809 	bl	209d0 <mul_mont_n>
   229be:	9501      	str	r5, [sp, #4]
   229c0:	9600      	str	r6, [sp, #0]
   229c2:	4623      	mov	r3, r4
   229c4:	4642      	mov	r2, r8
   229c6:	4639      	mov	r1, r7
   229c8:	4638      	mov	r0, r7
   229ca:	f7fe f801 	bl	209d0 <mul_mont_n>
   229ce:	3730      	adds	r7, #48	; 0x30
   229d0:	9501      	str	r5, [sp, #4]
   229d2:	9600      	str	r6, [sp, #0]
   229d4:	4623      	mov	r3, r4
   229d6:	4642      	mov	r2, r8
   229d8:	4641      	mov	r1, r8
   229da:	4638      	mov	r0, r7
   229dc:	f7fd fff8 	bl	209d0 <mul_mont_n>
   229e0:	9501      	str	r5, [sp, #4]
   229e2:	9600      	str	r6, [sp, #0]
   229e4:	4623      	mov	r3, r4
   229e6:	aa1a      	add	r2, sp, #104	; 0x68
   229e8:	4639      	mov	r1, r7
   229ea:	4638      	mov	r0, r7
   229ec:	f7fd fff0 	bl	209d0 <mul_mont_n>
   229f0:	9501      	str	r5, [sp, #4]
   229f2:	9600      	str	r6, [sp, #0]
   229f4:	4623      	mov	r3, r4
   229f6:	aa0e      	add	r2, sp, #56	; 0x38
   229f8:	4639      	mov	r1, r7
   229fa:	4638      	mov	r0, r7
   229fc:	f7fd ffe8 	bl	209d0 <mul_mont_n>
   22a00:	f20d 6d6c 	addw	sp, sp, #1644	; 0x66c
   22a04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22a08:	00038688 	.word	0x00038688
   22a0c:	fffcfffd 	.word	0xfffcfffd

00022a10 <eucl_inverse_mod_n>:
   22a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22a14:	b089      	sub	sp, #36	; 0x24
   22a16:	af02      	add	r7, sp, #8
   22a18:	6038      	str	r0, [r7, #0]
   22a1a:	460c      	mov	r4, r1
   22a1c:	469c      	mov	ip, r3
   22a1e:	6c3d      	ldr	r5, [r7, #64]	; 0x40
   22a20:	466b      	mov	r3, sp
   22a22:	eba3 03c5 	sub.w	r3, r3, r5, lsl #3
   22a26:	469d      	mov	sp, r3
   22a28:	ae02      	add	r6, sp, #8
   22a2a:	eba3 03c5 	sub.w	r3, r3, r5, lsl #3
   22a2e:	469d      	mov	sp, r3
   22a30:	ab02      	add	r3, sp, #8
   22a32:	613b      	str	r3, [r7, #16]
   22a34:	f035 4140 	bics.w	r1, r5, #3221225472	; 0xc0000000
   22a38:	d051      	beq.n	22ade <eucl_inverse_mod_n+0xce>
   22a3a:	4692      	mov	sl, r2
   22a3c:	1f22      	subs	r2, r4, #4
   22a3e:	008b      	lsls	r3, r1, #2
   22a40:	60bb      	str	r3, [r7, #8]
   22a42:	eb02 0181 	add.w	r1, r2, r1, lsl #2
   22a46:	4613      	mov	r3, r2
   22a48:	2400      	movs	r4, #0
   22a4a:	f853 0f04 	ldr.w	r0, [r3, #4]!
   22a4e:	4304      	orrs	r4, r0
   22a50:	428b      	cmp	r3, r1
   22a52:	d1fa      	bne.n	22a4a <eucl_inverse_mod_n+0x3a>
   22a54:	1e63      	subs	r3, r4, #1
   22a56:	ea23 0304 	bic.w	r3, r3, r4
   22a5a:	0fdb      	lsrs	r3, r3, #31
   22a5c:	60fb      	str	r3, [r7, #12]
   22a5e:	d135      	bne.n	22acc <eucl_inverse_mod_n+0xbc>
   22a60:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   22a64:	1f33      	subs	r3, r6, #4
   22a66:	f852 0f04 	ldr.w	r0, [r2, #4]!
   22a6a:	f843 0f04 	str.w	r0, [r3, #4]!
   22a6e:	428a      	cmp	r2, r1
   22a70:	d1f9      	bne.n	22a66 <eucl_inverse_mod_n+0x56>
   22a72:	f1bc 0f00 	cmp.w	ip, #0
   22a76:	d035      	beq.n	22ae4 <eucl_inverse_mod_n+0xd4>
   22a78:	f1ac 0004 	sub.w	r0, ip, #4
   22a7c:	f1ab 0304 	sub.w	r3, fp, #4
   22a80:	4433      	add	r3, r6
   22a82:	68ba      	ldr	r2, [r7, #8]
   22a84:	1881      	adds	r1, r0, r2
   22a86:	f850 2f04 	ldr.w	r2, [r0, #4]!
   22a8a:	f843 2f04 	str.w	r2, [r3, #4]!
   22a8e:	4288      	cmp	r0, r1
   22a90:	d1f9      	bne.n	22a86 <eucl_inverse_mod_n+0x76>
   22a92:	f1aa 0304 	sub.w	r3, sl, #4
   22a96:	693a      	ldr	r2, [r7, #16]
   22a98:	3a04      	subs	r2, #4
   22a9a:	68b9      	ldr	r1, [r7, #8]
   22a9c:	1858      	adds	r0, r3, r1
   22a9e:	f853 1f04 	ldr.w	r1, [r3, #4]!
   22aa2:	f842 1f04 	str.w	r1, [r2, #4]!
   22aa6:	4283      	cmp	r3, r0
   22aa8:	d1f9      	bne.n	22a9e <eucl_inverse_mod_n+0x8e>
   22aaa:	693b      	ldr	r3, [r7, #16]
   22aac:	eb03 000b 	add.w	r0, r3, fp
   22ab0:	4603      	mov	r3, r0
   22ab2:	68ba      	ldr	r2, [r7, #8]
   22ab4:	1881      	adds	r1, r0, r2
   22ab6:	2200      	movs	r2, #0
   22ab8:	f843 2b04 	str.w	r2, [r3], #4
   22abc:	428b      	cmp	r3, r1
   22abe:	d1fb      	bne.n	22ab8 <eucl_inverse_mod_n+0xa8>
   22ac0:	f1ab 0304 	sub.w	r3, fp, #4
   22ac4:	607b      	str	r3, [r7, #4]
   22ac6:	f105 39ff 	add.w	r9, r5, #4294967295
   22aca:	e094      	b.n	22bf6 <eucl_inverse_mod_n+0x1e6>
   22acc:	683a      	ldr	r2, [r7, #0]
   22ace:	4613      	mov	r3, r2
   22ad0:	68b9      	ldr	r1, [r7, #8]
   22ad2:	4411      	add	r1, r2
   22ad4:	2200      	movs	r2, #0
   22ad6:	f843 2b04 	str.w	r2, [r3], #4
   22ada:	428b      	cmp	r3, r1
   22adc:	d1fb      	bne.n	22ad6 <eucl_inverse_mod_n+0xc6>
   22ade:	683b      	ldr	r3, [r7, #0]
   22ae0:	2400      	movs	r4, #0
   22ae2:	e0a4      	b.n	22c2e <eucl_inverse_mod_n+0x21e>
   22ae4:	eb06 020b 	add.w	r2, r6, fp
   22ae8:	4613      	mov	r3, r2
   22aea:	68b9      	ldr	r1, [r7, #8]
   22aec:	1850      	adds	r0, r2, r1
   22aee:	2100      	movs	r1, #0
   22af0:	f843 1b04 	str.w	r1, [r3], #4
   22af4:	4283      	cmp	r3, r0
   22af6:	d1fb      	bne.n	22af0 <eucl_inverse_mod_n+0xe0>
   22af8:	2301      	movs	r3, #1
   22afa:	6013      	str	r3, [r2, #0]
   22afc:	e7c9      	b.n	22a92 <eucl_inverse_mod_n+0x82>
   22afe:	b175      	cbz	r5, 22b1e <eucl_inverse_mod_n+0x10e>
   22b00:	6979      	ldr	r1, [r7, #20]
   22b02:	f1c2 0c20 	rsb	ip, r2, #32
   22b06:	4696      	mov	lr, r2
   22b08:	684a      	ldr	r2, [r1, #4]
   22b0a:	fa02 f00c 	lsl.w	r0, r2, ip
   22b0e:	4303      	orrs	r3, r0
   22b10:	f841 3b04 	str.w	r3, [r1], #4
   22b14:	fa22 f30e 	lsr.w	r3, r2, lr
   22b18:	42a1      	cmp	r1, r4
   22b1a:	d1f5      	bne.n	22b08 <eucl_inverse_mod_n+0xf8>
   22b1c:	4672      	mov	r2, lr
   22b1e:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
   22b22:	f8cd 9000 	str.w	r9, [sp]
   22b26:	4653      	mov	r3, sl
   22b28:	4641      	mov	r1, r8
   22b2a:	4640      	mov	r0, r8
   22b2c:	f7fd fe0a 	bl	20744 <rshift_mod_n>
   22b30:	6831      	ldr	r1, [r6, #0]
   22b32:	f011 0f01 	tst.w	r1, #1
   22b36:	d10f      	bne.n	22b58 <eucl_inverse_mod_n+0x148>
   22b38:	084b      	lsrs	r3, r1, #1
   22b3a:	f3c1 0240 	ubfx	r2, r1, #1, #1
   22b3e:	f011 0f02 	tst.w	r1, #2
   22b42:	d1dc      	bne.n	22afe <eucl_inverse_mod_n+0xee>
   22b44:	088b      	lsrs	r3, r1, #2
   22b46:	2202      	movs	r2, #2
   22b48:	f013 0f01 	tst.w	r3, #1
   22b4c:	d1d7      	bne.n	22afe <eucl_inverse_mod_n+0xee>
   22b4e:	3201      	adds	r2, #1
   22b50:	085b      	lsrs	r3, r3, #1
   22b52:	2a1f      	cmp	r2, #31
   22b54:	d1f8      	bne.n	22b48 <eucl_inverse_mod_n+0x138>
   22b56:	e7d2      	b.n	22afe <eucl_inverse_mod_n+0xee>
   22b58:	462b      	mov	r3, r5
   22b5a:	464d      	mov	r5, r9
   22b5c:	4699      	mov	r9, r3
   22b5e:	f1a6 0e04 	sub.w	lr, r6, #4
   22b62:	693b      	ldr	r3, [r7, #16]
   22b64:	f1a3 0c04 	sub.w	ip, r3, #4
   22b68:	68f8      	ldr	r0, [r7, #12]
   22b6a:	4602      	mov	r2, r0
   22b6c:	2400      	movs	r4, #0
   22b6e:	f85e 3f04 	ldr.w	r3, [lr, #4]!
   22b72:	1a9b      	subs	r3, r3, r2
   22b74:	eb64 0204 	sbc.w	r2, r4, r4
   22b78:	f85c 1f04 	ldr.w	r1, [ip, #4]!
   22b7c:	1a5b      	subs	r3, r3, r1
   22b7e:	f162 0200 	sbc.w	r2, r2, #0
   22b82:	f002 0201 	and.w	r2, r2, #1
   22b86:	3001      	adds	r0, #1
   22b88:	4285      	cmp	r5, r0
   22b8a:	d1f0      	bne.n	22b6e <eucl_inverse_mod_n+0x15e>
   22b8c:	b112      	cbz	r2, 22b94 <eucl_inverse_mod_n+0x184>
   22b8e:	693b      	ldr	r3, [r7, #16]
   22b90:	613e      	str	r6, [r7, #16]
   22b92:	461e      	mov	r6, r3
   22b94:	1f31      	subs	r1, r6, #4
   22b96:	693b      	ldr	r3, [r7, #16]
   22b98:	f1a3 0e04 	sub.w	lr, r3, #4
   22b9c:	460c      	mov	r4, r1
   22b9e:	68f8      	ldr	r0, [r7, #12]
   22ba0:	4680      	mov	r8, r0
   22ba2:	f04f 0c00 	mov.w	ip, #0
   22ba6:	f854 3f04 	ldr.w	r3, [r4, #4]!
   22baa:	ebb3 0308 	subs.w	r3, r3, r8
   22bae:	eb6c 080c 	sbc.w	r8, ip, ip
   22bb2:	f85e 2f04 	ldr.w	r2, [lr, #4]!
   22bb6:	1a9b      	subs	r3, r3, r2
   22bb8:	f168 0800 	sbc.w	r8, r8, #0
   22bbc:	6023      	str	r3, [r4, #0]
   22bbe:	f008 0801 	and.w	r8, r8, #1
   22bc2:	3001      	adds	r0, #1
   22bc4:	4285      	cmp	r5, r0
   22bc6:	d8ee      	bhi.n	22ba6 <eucl_inverse_mod_n+0x196>
   22bc8:	68bb      	ldr	r3, [r7, #8]
   22bca:	1f18      	subs	r0, r3, #4
   22bcc:	4430      	add	r0, r6
   22bce:	68fb      	ldr	r3, [r7, #12]
   22bd0:	f851 2f04 	ldr.w	r2, [r1, #4]!
   22bd4:	4313      	orrs	r3, r2
   22bd6:	4281      	cmp	r1, r0
   22bd8:	d1fa      	bne.n	22bd0 <eucl_inverse_mod_n+0x1c0>
   22bda:	1e5c      	subs	r4, r3, #1
   22bdc:	ea24 0303 	bic.w	r3, r4, r3
   22be0:	0fdc      	lsrs	r4, r3, #31
   22be2:	eb06 000b 	add.w	r0, r6, fp
   22be6:	9500      	str	r5, [sp, #0]
   22be8:	4653      	mov	r3, sl
   22bea:	693a      	ldr	r2, [r7, #16]
   22bec:	445a      	add	r2, fp
   22bee:	4601      	mov	r1, r0
   22bf0:	f7fd fd40 	bl	20674 <sub_mod_n>
   22bf4:	b964      	cbnz	r4, 22c10 <eucl_inverse_mod_n+0x200>
   22bf6:	eb06 080b 	add.w	r8, r6, fp
   22bfa:	6831      	ldr	r1, [r6, #0]
   22bfc:	f011 0f01 	tst.w	r1, #1
   22c00:	d1ad      	bne.n	22b5e <eucl_inverse_mod_n+0x14e>
   22c02:	617e      	str	r6, [r7, #20]
   22c04:	687b      	ldr	r3, [r7, #4]
   22c06:	199c      	adds	r4, r3, r6
   22c08:	464b      	mov	r3, r9
   22c0a:	46a9      	mov	r9, r5
   22c0c:	461d      	mov	r5, r3
   22c0e:	e793      	b.n	22b38 <eucl_inverse_mod_n+0x128>
   22c10:	f1ab 0204 	sub.w	r2, fp, #4
   22c14:	693b      	ldr	r3, [r7, #16]
   22c16:	4413      	add	r3, r2
   22c18:	461a      	mov	r2, r3
   22c1a:	683b      	ldr	r3, [r7, #0]
   22c1c:	3b04      	subs	r3, #4
   22c1e:	68b8      	ldr	r0, [r7, #8]
   22c20:	4418      	add	r0, r3
   22c22:	f852 1f04 	ldr.w	r1, [r2, #4]!
   22c26:	f843 1f04 	str.w	r1, [r3, #4]!
   22c2a:	4298      	cmp	r0, r3
   22c2c:	d1f9      	bne.n	22c22 <eucl_inverse_mod_n+0x212>
   22c2e:	4620      	mov	r0, r4
   22c30:	371c      	adds	r7, #28
   22c32:	46bd      	mov	sp, r7
   22c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00022c38 <POINTonE1_dadd_affine>:
   22c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22c3c:	b0f3      	sub	sp, #460	; 0x1cc
   22c3e:	9005      	str	r0, [sp, #20]
   22c40:	460d      	mov	r5, r1
   22c42:	4614      	mov	r4, r2
   22c44:	1f17      	subs	r7, r2, #4
   22c46:	f102 005c 	add.w	r0, r2, #92	; 0x5c
   22c4a:	463b      	mov	r3, r7
   22c4c:	2200      	movs	r2, #0
   22c4e:	f853 1f04 	ldr.w	r1, [r3, #4]!
   22c52:	430a      	orrs	r2, r1
   22c54:	4283      	cmp	r3, r0
   22c56:	d1fa      	bne.n	22c4e <POINTonE1_dadd_affine+0x16>
   22c58:	1e53      	subs	r3, r2, #1
   22c5a:	ea23 0202 	bic.w	r2, r3, r2
   22c5e:	0fd3      	lsrs	r3, r2, #31
   22c60:	9304      	str	r3, [sp, #16]
   22c62:	4eac      	ldr	r6, [pc, #688]	; (22f14 <POINTonE1_dadd_affine+0x2dc>)
   22c64:	f04f 080c 	mov.w	r8, #12
   22c68:	f8cd 8000 	str.w	r8, [sp]
   22c6c:	4633      	mov	r3, r6
   22c6e:	4622      	mov	r2, r4
   22c70:	4621      	mov	r1, r4
   22c72:	a81e      	add	r0, sp, #120	; 0x78
   22c74:	f7fe f854 	bl	20d20 <add_mod_n>
   22c78:	f8cd 8004 	str.w	r8, [sp, #4]
   22c7c:	4ba6      	ldr	r3, [pc, #664]	; (22f18 <POINTonE1_dadd_affine+0x2e0>)
   22c7e:	9300      	str	r3, [sp, #0]
   22c80:	4633      	mov	r3, r6
   22c82:	4622      	mov	r2, r4
   22c84:	4621      	mov	r1, r4
   22c86:	a812      	add	r0, sp, #72	; 0x48
   22c88:	f7fd fea2 	bl	209d0 <mul_mont_n>
   22c8c:	4643      	mov	r3, r8
   22c8e:	4632      	mov	r2, r6
   22c90:	a912      	add	r1, sp, #72	; 0x48
   22c92:	4608      	mov	r0, r1
   22c94:	f7fe f8cc 	bl	20e30 <mul_by_3_mod_n>
   22c98:	f104 0b30 	add.w	fp, r4, #48	; 0x30
   22c9c:	f8cd 8000 	str.w	r8, [sp]
   22ca0:	4633      	mov	r3, r6
   22ca2:	465a      	mov	r2, fp
   22ca4:	4659      	mov	r1, fp
   22ca6:	a806      	add	r0, sp, #24
   22ca8:	f7fe f83a 	bl	20d20 <add_mod_n>
   22cac:	f105 0a60 	add.w	sl, r5, #96	; 0x60
   22cb0:	f105 035c 	add.w	r3, r5, #92	; 0x5c
   22cb4:	f105 008c 	add.w	r0, r5, #140	; 0x8c
   22cb8:	2200      	movs	r2, #0
   22cba:	f853 1f04 	ldr.w	r1, [r3, #4]!
   22cbe:	430a      	orrs	r2, r1
   22cc0:	4283      	cmp	r3, r0
   22cc2:	d1fa      	bne.n	22cba <POINTonE1_dadd_affine+0x82>
   22cc4:	1e53      	subs	r3, r2, #1
   22cc6:	ea23 0202 	bic.w	r2, r3, r2
   22cca:	0fd3      	lsrs	r3, r2, #31
   22ccc:	9303      	str	r3, [sp, #12]
   22cce:	4e91      	ldr	r6, [pc, #580]	; (22f14 <POINTonE1_dadd_affine+0x2dc>)
   22cd0:	f04f 080c 	mov.w	r8, #12
   22cd4:	f8cd 8004 	str.w	r8, [sp, #4]
   22cd8:	f8df 923c 	ldr.w	r9, [pc, #572]	; 22f18 <POINTonE1_dadd_affine+0x2e0>
   22cdc:	f8cd 9000 	str.w	r9, [sp]
   22ce0:	4633      	mov	r3, r6
   22ce2:	4652      	mov	r2, sl
   22ce4:	4651      	mov	r1, sl
   22ce6:	a82a      	add	r0, sp, #168	; 0xa8
   22ce8:	f7fd fe72 	bl	209d0 <mul_mont_n>
   22cec:	f8cd 8004 	str.w	r8, [sp, #4]
   22cf0:	f8cd 9000 	str.w	r9, [sp]
   22cf4:	4633      	mov	r3, r6
   22cf6:	4652      	mov	r2, sl
   22cf8:	a92a      	add	r1, sp, #168	; 0xa8
   22cfa:	a836      	add	r0, sp, #216	; 0xd8
   22cfc:	f7fd fe68 	bl	209d0 <mul_mont_n>
   22d00:	f8cd 8004 	str.w	r8, [sp, #4]
   22d04:	f8cd 9000 	str.w	r9, [sp]
   22d08:	4633      	mov	r3, r6
   22d0a:	465a      	mov	r2, fp
   22d0c:	a936      	add	r1, sp, #216	; 0xd8
   22d0e:	4608      	mov	r0, r1
   22d10:	f7fd fe5e 	bl	209d0 <mul_mont_n>
   22d14:	f8cd 8000 	str.w	r8, [sp]
   22d18:	4633      	mov	r3, r6
   22d1a:	f105 0230 	add.w	r2, r5, #48	; 0x30
   22d1e:	a936      	add	r1, sp, #216	; 0xd8
   22d20:	4608      	mov	r0, r1
   22d22:	f7fd fca7 	bl	20674 <sub_mod_n>
   22d26:	f8cd 8004 	str.w	r8, [sp, #4]
   22d2a:	f8cd 9000 	str.w	r9, [sp]
   22d2e:	4633      	mov	r3, r6
   22d30:	4622      	mov	r2, r4
   22d32:	a92a      	add	r1, sp, #168	; 0xa8
   22d34:	4608      	mov	r0, r1
   22d36:	f7fd fe4b 	bl	209d0 <mul_mont_n>
   22d3a:	f8cd 8000 	str.w	r8, [sp]
   22d3e:	4633      	mov	r3, r6
   22d40:	462a      	mov	r2, r5
   22d42:	a92a      	add	r1, sp, #168	; 0xa8
   22d44:	a842      	add	r0, sp, #264	; 0x108
   22d46:	f7fd ffeb 	bl	20d20 <add_mod_n>
   22d4a:	f8cd 8000 	str.w	r8, [sp]
   22d4e:	4633      	mov	r3, r6
   22d50:	462a      	mov	r2, r5
   22d52:	a92a      	add	r1, sp, #168	; 0xa8
   22d54:	4608      	mov	r0, r1
   22d56:	f7fd fc8d 	bl	20674 <sub_mod_n>
   22d5a:	f8cd 8004 	str.w	r8, [sp, #4]
   22d5e:	f8cd 9000 	str.w	r9, [sp]
   22d62:	4633      	mov	r3, r6
   22d64:	4652      	mov	r2, sl
   22d66:	a92a      	add	r1, sp, #168	; 0xa8
   22d68:	a866      	add	r0, sp, #408	; 0x198
   22d6a:	f7fd fe31 	bl	209d0 <mul_mont_n>
   22d6e:	a929      	add	r1, sp, #164	; 0xa4
   22d70:	ac41      	add	r4, sp, #260	; 0x104
   22d72:	460b      	mov	r3, r1
   22d74:	2200      	movs	r2, #0
   22d76:	f853 0f04 	ldr.w	r0, [r3, #4]!
   22d7a:	4302      	orrs	r2, r0
   22d7c:	42a3      	cmp	r3, r4
   22d7e:	d1fa      	bne.n	22d76 <POINTonE1_dadd_affine+0x13e>
   22d80:	1e53      	subs	r3, r2, #1
   22d82:	ea23 0202 	bic.w	r2, r3, r2
   22d86:	17d2      	asrs	r2, r2, #31
   22d88:	3d04      	subs	r5, #4
   22d8a:	ac4e      	add	r4, sp, #312	; 0x138
   22d8c:	f50d 78cc 	add.w	r8, sp, #408	; 0x198
   22d90:	4620      	mov	r0, r4
   22d92:	46ac      	mov	ip, r5
   22d94:	46be      	mov	lr, r7
   22d96:	f85c 6f04 	ldr.w	r6, [ip, #4]!
   22d9a:	f85e 3f04 	ldr.w	r3, [lr, #4]!
   22d9e:	4073      	eors	r3, r6
   22da0:	4013      	ands	r3, r2
   22da2:	4073      	eors	r3, r6
   22da4:	f840 3b04 	str.w	r3, [r0], #4
   22da8:	4540      	cmp	r0, r8
   22daa:	d1f4      	bne.n	22d96 <POINTonE1_dadd_affine+0x15e>
   22dac:	ae65      	add	r6, sp, #404	; 0x194
   22dae:	f10d 0948 	add.w	r9, sp, #72	; 0x48
   22db2:	46b4      	mov	ip, r6
   22db4:	a806      	add	r0, sp, #24
   22db6:	f850 3b04 	ldr.w	r3, [r0], #4
   22dba:	f85c ef04 	ldr.w	lr, [ip, #4]!
   22dbe:	ea83 030e 	eor.w	r3, r3, lr
   22dc2:	4013      	ands	r3, r2
   22dc4:	ea83 030e 	eor.w	r3, r3, lr
   22dc8:	f8cc 3000 	str.w	r3, [ip]
   22dcc:	4548      	cmp	r0, r9
   22dce:	d1f2      	bne.n	22db6 <POINTonE1_dadd_affine+0x17e>
   22dd0:	a805      	add	r0, sp, #20
   22dd2:	f10d 0ca4 	add.w	ip, sp, #164	; 0xa4
   22dd6:	4696      	mov	lr, r2
   22dd8:	f851 2f04 	ldr.w	r2, [r1, #4]!
   22ddc:	f850 3f04 	ldr.w	r3, [r0, #4]!
   22de0:	4053      	eors	r3, r2
   22de2:	ea03 030e 	and.w	r3, r3, lr
   22de6:	4053      	eors	r3, r2
   22de8:	600b      	str	r3, [r1, #0]
   22dea:	4560      	cmp	r0, ip
   22dec:	d1f4      	bne.n	22dd8 <POINTonE1_dadd_affine+0x1a0>
   22dee:	f8df 9124 	ldr.w	r9, [pc, #292]	; 22f14 <POINTonE1_dadd_affine+0x2dc>
   22df2:	f04f 0a0c 	mov.w	sl, #12
   22df6:	f8cd a004 	str.w	sl, [sp, #4]
   22dfa:	f8df b11c 	ldr.w	fp, [pc, #284]	; 22f18 <POINTonE1_dadd_affine+0x2e0>
   22dfe:	f8cd b000 	str.w	fp, [sp]
   22e02:	464b      	mov	r3, r9
   22e04:	aa2a      	add	r2, sp, #168	; 0xa8
   22e06:	4611      	mov	r1, r2
   22e08:	a806      	add	r0, sp, #24
   22e0a:	f7fd fde1 	bl	209d0 <mul_mont_n>
   22e0e:	f8cd a004 	str.w	sl, [sp, #4]
   22e12:	f8cd b000 	str.w	fp, [sp]
   22e16:	464b      	mov	r3, r9
   22e18:	aa2a      	add	r2, sp, #168	; 0xa8
   22e1a:	a906      	add	r1, sp, #24
   22e1c:	a812      	add	r0, sp, #72	; 0x48
   22e1e:	f7fd fdd7 	bl	209d0 <mul_mont_n>
   22e22:	f8cd a004 	str.w	sl, [sp, #4]
   22e26:	f8cd b000 	str.w	fp, [sp]
   22e2a:	464b      	mov	r3, r9
   22e2c:	aa5a      	add	r2, sp, #360	; 0x168
   22e2e:	a912      	add	r1, sp, #72	; 0x48
   22e30:	4608      	mov	r0, r1
   22e32:	f7fd fdcd 	bl	209d0 <mul_mont_n>
   22e36:	f8cd a004 	str.w	sl, [sp, #4]
   22e3a:	f8cd b000 	str.w	fp, [sp]
   22e3e:	464b      	mov	r3, r9
   22e40:	aa4e      	add	r2, sp, #312	; 0x138
   22e42:	a906      	add	r1, sp, #24
   22e44:	a85a      	add	r0, sp, #360	; 0x168
   22e46:	f7fd fdc3 	bl	209d0 <mul_mont_n>
   22e4a:	f8cd a004 	str.w	sl, [sp, #4]
   22e4e:	f8cd b000 	str.w	fp, [sp]
   22e52:	464b      	mov	r3, r9
   22e54:	aa42      	add	r2, sp, #264	; 0x108
   22e56:	a906      	add	r1, sp, #24
   22e58:	4608      	mov	r0, r1
   22e5a:	f7fd fdb9 	bl	209d0 <mul_mont_n>
   22e5e:	f8cd a004 	str.w	sl, [sp, #4]
   22e62:	f8cd b000 	str.w	fp, [sp]
   22e66:	464b      	mov	r3, r9
   22e68:	aa36      	add	r2, sp, #216	; 0xd8
   22e6a:	4611      	mov	r1, r2
   22e6c:	a84e      	add	r0, sp, #312	; 0x138
   22e6e:	f7fd fdaf 	bl	209d0 <mul_mont_n>
   22e72:	f8cd a000 	str.w	sl, [sp]
   22e76:	464b      	mov	r3, r9
   22e78:	aa06      	add	r2, sp, #24
   22e7a:	a94e      	add	r1, sp, #312	; 0x138
   22e7c:	4608      	mov	r0, r1
   22e7e:	f7fd fbf9 	bl	20674 <sub_mod_n>
   22e82:	f8cd a000 	str.w	sl, [sp]
   22e86:	464b      	mov	r3, r9
   22e88:	aa4e      	add	r2, sp, #312	; 0x138
   22e8a:	a95a      	add	r1, sp, #360	; 0x168
   22e8c:	4608      	mov	r0, r1
   22e8e:	f7fd fbf1 	bl	20674 <sub_mod_n>
   22e92:	f8cd a004 	str.w	sl, [sp, #4]
   22e96:	f8cd b000 	str.w	fp, [sp]
   22e9a:	464b      	mov	r3, r9
   22e9c:	aa36      	add	r2, sp, #216	; 0xd8
   22e9e:	a95a      	add	r1, sp, #360	; 0x168
   22ea0:	4608      	mov	r0, r1
   22ea2:	f7fd fd95 	bl	209d0 <mul_mont_n>
   22ea6:	f8cd a000 	str.w	sl, [sp]
   22eaa:	464b      	mov	r3, r9
   22eac:	aa12      	add	r2, sp, #72	; 0x48
   22eae:	a95a      	add	r1, sp, #360	; 0x168
   22eb0:	4608      	mov	r0, r1
   22eb2:	f7fd fbdf 	bl	20674 <sub_mod_n>
   22eb6:	9b03      	ldr	r3, [sp, #12]
   22eb8:	425a      	negs	r2, r3
   22eba:	4621      	mov	r1, r4
   22ebc:	6808      	ldr	r0, [r1, #0]
   22ebe:	f857 3f04 	ldr.w	r3, [r7, #4]!
   22ec2:	4043      	eors	r3, r0
   22ec4:	4013      	ands	r3, r2
   22ec6:	4043      	eors	r3, r0
   22ec8:	f841 3b04 	str.w	r3, [r1], #4
   22ecc:	4541      	cmp	r1, r8
   22ece:	d1f5      	bne.n	22ebc <POINTonE1_dadd_affine+0x284>
   22ed0:	4f10      	ldr	r7, [pc, #64]	; (22f14 <POINTonE1_dadd_affine+0x2dc>)
   22ed2:	f107 0190 	add.w	r1, r7, #144	; 0x90
   22ed6:	37c0      	adds	r7, #192	; 0xc0
   22ed8:	f851 3b04 	ldr.w	r3, [r1], #4
   22edc:	f856 0f04 	ldr.w	r0, [r6, #4]!
   22ee0:	4043      	eors	r3, r0
   22ee2:	4013      	ands	r3, r2
   22ee4:	4043      	eors	r3, r0
   22ee6:	6033      	str	r3, [r6, #0]
   22ee8:	42b9      	cmp	r1, r7
   22eea:	d1f5      	bne.n	22ed8 <POINTonE1_dadd_affine+0x2a0>
   22eec:	9b04      	ldr	r3, [sp, #16]
   22eee:	4259      	negs	r1, r3
   22ef0:	9b05      	ldr	r3, [sp, #20]
   22ef2:	1f18      	subs	r0, r3, #4
   22ef4:	f104 0690 	add.w	r6, r4, #144	; 0x90
   22ef8:	f854 2b04 	ldr.w	r2, [r4], #4
   22efc:	f855 3f04 	ldr.w	r3, [r5, #4]!
   22f00:	4053      	eors	r3, r2
   22f02:	400b      	ands	r3, r1
   22f04:	4053      	eors	r3, r2
   22f06:	f840 3f04 	str.w	r3, [r0, #4]!
   22f0a:	42a6      	cmp	r6, r4
   22f0c:	d1f4      	bne.n	22ef8 <POINTonE1_dadd_affine+0x2c0>
   22f0e:	b073      	add	sp, #460	; 0x1cc
   22f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22f14:	00038688 	.word	0x00038688
   22f18:	fffcfffd 	.word	0xfffcfffd

00022f1c <POINTonE1_dadd>:
   22f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22f20:	b0f3      	sub	sp, #460	; 0x1cc
   22f22:	9005      	str	r0, [sp, #20]
   22f24:	460c      	mov	r4, r1
   22f26:	4615      	mov	r5, r2
   22f28:	9302      	str	r3, [sp, #8]
   22f2a:	4ec9      	ldr	r6, [pc, #804]	; (23250 <POINTonE1_dadd+0x334>)
   22f2c:	270c      	movs	r7, #12
   22f2e:	9700      	str	r7, [sp, #0]
   22f30:	4633      	mov	r3, r6
   22f32:	460a      	mov	r2, r1
   22f34:	a81e      	add	r0, sp, #120	; 0x78
   22f36:	f7fd fef3 	bl	20d20 <add_mod_n>
   22f3a:	9701      	str	r7, [sp, #4]
   22f3c:	4bc5      	ldr	r3, [pc, #788]	; (23254 <POINTonE1_dadd+0x338>)
   22f3e:	9300      	str	r3, [sp, #0]
   22f40:	4633      	mov	r3, r6
   22f42:	4622      	mov	r2, r4
   22f44:	4621      	mov	r1, r4
   22f46:	a812      	add	r0, sp, #72	; 0x48
   22f48:	f7fd fd42 	bl	209d0 <mul_mont_n>
   22f4c:	463b      	mov	r3, r7
   22f4e:	4632      	mov	r2, r6
   22f50:	a912      	add	r1, sp, #72	; 0x48
   22f52:	4608      	mov	r0, r1
   22f54:	f7fd ff6c 	bl	20e30 <mul_by_3_mod_n>
   22f58:	f104 0830 	add.w	r8, r4, #48	; 0x30
   22f5c:	9700      	str	r7, [sp, #0]
   22f5e:	4633      	mov	r3, r6
   22f60:	4642      	mov	r2, r8
   22f62:	4641      	mov	r1, r8
   22f64:	a806      	add	r0, sp, #24
   22f66:	f7fd fedb 	bl	20d20 <add_mod_n>
   22f6a:	f105 0760 	add.w	r7, r5, #96	; 0x60
   22f6e:	f105 035c 	add.w	r3, r5, #92	; 0x5c
   22f72:	f105 008c 	add.w	r0, r5, #140	; 0x8c
   22f76:	2200      	movs	r2, #0
   22f78:	f853 1f04 	ldr.w	r1, [r3, #4]!
   22f7c:	430a      	orrs	r2, r1
   22f7e:	4283      	cmp	r3, r0
   22f80:	d1fa      	bne.n	22f78 <POINTonE1_dadd+0x5c>
   22f82:	1e53      	subs	r3, r2, #1
   22f84:	ea23 0202 	bic.w	r2, r3, r2
   22f88:	0fd3      	lsrs	r3, r2, #31
   22f8a:	9304      	str	r3, [sp, #16]
   22f8c:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 23250 <POINTonE1_dadd+0x334>
   22f90:	f04f 0b0c 	mov.w	fp, #12
   22f94:	f8cd b004 	str.w	fp, [sp, #4]
   22f98:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 23254 <POINTonE1_dadd+0x338>
   22f9c:	f8cd a000 	str.w	sl, [sp]
   22fa0:	464b      	mov	r3, r9
   22fa2:	463a      	mov	r2, r7
   22fa4:	4639      	mov	r1, r7
   22fa6:	a84e      	add	r0, sp, #312	; 0x138
   22fa8:	f7fd fd12 	bl	209d0 <mul_mont_n>
   22fac:	f104 0660 	add.w	r6, r4, #96	; 0x60
   22fb0:	f8cd b004 	str.w	fp, [sp, #4]
   22fb4:	f8cd a000 	str.w	sl, [sp]
   22fb8:	464b      	mov	r3, r9
   22fba:	463a      	mov	r2, r7
   22fbc:	4631      	mov	r1, r6
   22fbe:	a866      	add	r0, sp, #408	; 0x198
   22fc0:	f7fd fd06 	bl	209d0 <mul_mont_n>
   22fc4:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   22fc8:	f104 008c 	add.w	r0, r4, #140	; 0x8c
   22fcc:	2200      	movs	r2, #0
   22fce:	f853 1f04 	ldr.w	r1, [r3, #4]!
   22fd2:	430a      	orrs	r2, r1
   22fd4:	4283      	cmp	r3, r0
   22fd6:	d1fa      	bne.n	22fce <POINTonE1_dadd+0xb2>
   22fd8:	1e53      	subs	r3, r2, #1
   22fda:	ea23 0202 	bic.w	r2, r3, r2
   22fde:	0fd3      	lsrs	r3, r2, #31
   22fe0:	9303      	str	r3, [sp, #12]
   22fe2:	230c      	movs	r3, #12
   22fe4:	9301      	str	r3, [sp, #4]
   22fe6:	4b9b      	ldr	r3, [pc, #620]	; (23254 <POINTonE1_dadd+0x338>)
   22fe8:	9300      	str	r3, [sp, #0]
   22fea:	4b99      	ldr	r3, [pc, #612]	; (23250 <POINTonE1_dadd+0x334>)
   22fec:	4632      	mov	r2, r6
   22fee:	4631      	mov	r1, r6
   22ff0:	a82a      	add	r0, sp, #168	; 0xa8
   22ff2:	f7fd fced 	bl	209d0 <mul_mont_n>
   22ff6:	9b02      	ldr	r3, [sp, #8]
   22ff8:	b30b      	cbz	r3, 2303e <POINTonE1_dadd+0x122>
   22ffa:	f8df 9254 	ldr.w	r9, [pc, #596]	; 23250 <POINTonE1_dadd+0x334>
   22ffe:	f04f 0a0c 	mov.w	sl, #12
   23002:	f8cd a004 	str.w	sl, [sp, #4]
   23006:	f8df b24c 	ldr.w	fp, [pc, #588]	; 23254 <POINTonE1_dadd+0x338>
   2300a:	f8cd b000 	str.w	fp, [sp]
   2300e:	464b      	mov	r3, r9
   23010:	aa2a      	add	r2, sp, #168	; 0xa8
   23012:	4611      	mov	r1, r2
   23014:	a85a      	add	r0, sp, #360	; 0x168
   23016:	f7fd fcdb 	bl	209d0 <mul_mont_n>
   2301a:	f8cd a004 	str.w	sl, [sp, #4]
   2301e:	f8cd b000 	str.w	fp, [sp]
   23022:	464b      	mov	r3, r9
   23024:	9a02      	ldr	r2, [sp, #8]
   23026:	a95a      	add	r1, sp, #360	; 0x168
   23028:	4608      	mov	r0, r1
   2302a:	f7fd fcd1 	bl	209d0 <mul_mont_n>
   2302e:	f8cd a000 	str.w	sl, [sp]
   23032:	464b      	mov	r3, r9
   23034:	aa5a      	add	r2, sp, #360	; 0x168
   23036:	a912      	add	r1, sp, #72	; 0x48
   23038:	4608      	mov	r0, r1
   2303a:	f7fd fe71 	bl	20d20 <add_mod_n>
   2303e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 23250 <POINTonE1_dadd+0x334>
   23042:	f04f 0a0c 	mov.w	sl, #12
   23046:	f8cd a004 	str.w	sl, [sp, #4]
   2304a:	f8df b208 	ldr.w	fp, [pc, #520]	; 23254 <POINTonE1_dadd+0x338>
   2304e:	f8cd b000 	str.w	fp, [sp]
   23052:	464b      	mov	r3, r9
   23054:	463a      	mov	r2, r7
   23056:	4641      	mov	r1, r8
   23058:	a85a      	add	r0, sp, #360	; 0x168
   2305a:	f7fd fcb9 	bl	209d0 <mul_mont_n>
   2305e:	f8cd a004 	str.w	sl, [sp, #4]
   23062:	f8cd b000 	str.w	fp, [sp]
   23066:	464b      	mov	r3, r9
   23068:	aa4e      	add	r2, sp, #312	; 0x138
   2306a:	a95a      	add	r1, sp, #360	; 0x168
   2306c:	4608      	mov	r0, r1
   2306e:	f7fd fcaf 	bl	209d0 <mul_mont_n>
   23072:	f8cd a004 	str.w	sl, [sp, #4]
   23076:	f8cd b000 	str.w	fp, [sp]
   2307a:	464b      	mov	r3, r9
   2307c:	4632      	mov	r2, r6
   2307e:	f105 0130 	add.w	r1, r5, #48	; 0x30
   23082:	a836      	add	r0, sp, #216	; 0xd8
   23084:	f7fd fca4 	bl	209d0 <mul_mont_n>
   23088:	f8cd a004 	str.w	sl, [sp, #4]
   2308c:	f8cd b000 	str.w	fp, [sp]
   23090:	464b      	mov	r3, r9
   23092:	aa2a      	add	r2, sp, #168	; 0xa8
   23094:	a936      	add	r1, sp, #216	; 0xd8
   23096:	4608      	mov	r0, r1
   23098:	f7fd fc9a 	bl	209d0 <mul_mont_n>
   2309c:	f8cd a000 	str.w	sl, [sp]
   230a0:	464b      	mov	r3, r9
   230a2:	aa5a      	add	r2, sp, #360	; 0x168
   230a4:	a936      	add	r1, sp, #216	; 0xd8
   230a6:	4608      	mov	r0, r1
   230a8:	f7fd fae4 	bl	20674 <sub_mod_n>
   230ac:	f8cd a004 	str.w	sl, [sp, #4]
   230b0:	f8cd b000 	str.w	fp, [sp]
   230b4:	464b      	mov	r3, r9
   230b6:	4622      	mov	r2, r4
   230b8:	a94e      	add	r1, sp, #312	; 0x138
   230ba:	4608      	mov	r0, r1
   230bc:	f7fd fc88 	bl	209d0 <mul_mont_n>
   230c0:	f8cd a004 	str.w	sl, [sp, #4]
   230c4:	f8cd b000 	str.w	fp, [sp]
   230c8:	464b      	mov	r3, r9
   230ca:	462a      	mov	r2, r5
   230cc:	a92a      	add	r1, sp, #168	; 0xa8
   230ce:	4608      	mov	r0, r1
   230d0:	f7fd fc7e 	bl	209d0 <mul_mont_n>
   230d4:	f8cd a000 	str.w	sl, [sp]
   230d8:	464b      	mov	r3, r9
   230da:	aa4e      	add	r2, sp, #312	; 0x138
   230dc:	a92a      	add	r1, sp, #168	; 0xa8
   230de:	a842      	add	r0, sp, #264	; 0x108
   230e0:	f7fd fe1e 	bl	20d20 <add_mod_n>
   230e4:	f8cd a000 	str.w	sl, [sp]
   230e8:	464b      	mov	r3, r9
   230ea:	aa4e      	add	r2, sp, #312	; 0x138
   230ec:	a92a      	add	r1, sp, #168	; 0xa8
   230ee:	4608      	mov	r0, r1
   230f0:	f7fd fac0 	bl	20674 <sub_mod_n>
   230f4:	aa29      	add	r2, sp, #164	; 0xa4
   230f6:	ae41      	add	r6, sp, #260	; 0x104
   230f8:	4613      	mov	r3, r2
   230fa:	2100      	movs	r1, #0
   230fc:	f853 0f04 	ldr.w	r0, [r3, #4]!
   23100:	4301      	orrs	r1, r0
   23102:	42b3      	cmp	r3, r6
   23104:	d1fa      	bne.n	230fc <POINTonE1_dadd+0x1e0>
   23106:	1e48      	subs	r0, r1, #1
   23108:	ea20 0001 	bic.w	r0, r0, r1
   2310c:	17c0      	asrs	r0, r0, #31
   2310e:	3c04      	subs	r4, #4
   23110:	ae4e      	add	r6, sp, #312	; 0x138
   23112:	af72      	add	r7, sp, #456	; 0x1c8
   23114:	4631      	mov	r1, r6
   23116:	46a4      	mov	ip, r4
   23118:	4696      	mov	lr, r2
   2311a:	680a      	ldr	r2, [r1, #0]
   2311c:	f85c 3f04 	ldr.w	r3, [ip, #4]!
   23120:	4053      	eors	r3, r2
   23122:	4003      	ands	r3, r0
   23124:	4053      	eors	r3, r2
   23126:	f841 3b04 	str.w	r3, [r1], #4
   2312a:	42b9      	cmp	r1, r7
   2312c:	d1f5      	bne.n	2311a <POINTonE1_dadd+0x1fe>
   2312e:	4672      	mov	r2, lr
   23130:	a905      	add	r1, sp, #20
   23132:	f10d 0ca4 	add.w	ip, sp, #164	; 0xa4
   23136:	4686      	mov	lr, r0
   23138:	f852 0f04 	ldr.w	r0, [r2, #4]!
   2313c:	f851 3f04 	ldr.w	r3, [r1, #4]!
   23140:	4043      	eors	r3, r0
   23142:	ea03 030e 	and.w	r3, r3, lr
   23146:	4043      	eors	r3, r0
   23148:	6013      	str	r3, [r2, #0]
   2314a:	4561      	cmp	r1, ip
   2314c:	d1f4      	bne.n	23138 <POINTonE1_dadd+0x21c>
   2314e:	f8df 8100 	ldr.w	r8, [pc, #256]	; 23250 <POINTonE1_dadd+0x334>
   23152:	f04f 090c 	mov.w	r9, #12
   23156:	f8cd 9004 	str.w	r9, [sp, #4]
   2315a:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 23254 <POINTonE1_dadd+0x338>
   2315e:	f8cd a000 	str.w	sl, [sp]
   23162:	4643      	mov	r3, r8
   23164:	aa2a      	add	r2, sp, #168	; 0xa8
   23166:	a966      	add	r1, sp, #408	; 0x198
   23168:	4608      	mov	r0, r1
   2316a:	f7fd fc31 	bl	209d0 <mul_mont_n>
   2316e:	f8cd 9004 	str.w	r9, [sp, #4]
   23172:	f8cd a000 	str.w	sl, [sp]
   23176:	4643      	mov	r3, r8
   23178:	aa2a      	add	r2, sp, #168	; 0xa8
   2317a:	4611      	mov	r1, r2
   2317c:	a806      	add	r0, sp, #24
   2317e:	f7fd fc27 	bl	209d0 <mul_mont_n>
   23182:	f8cd 9004 	str.w	r9, [sp, #4]
   23186:	f8cd a000 	str.w	sl, [sp]
   2318a:	4643      	mov	r3, r8
   2318c:	aa2a      	add	r2, sp, #168	; 0xa8
   2318e:	a906      	add	r1, sp, #24
   23190:	a812      	add	r0, sp, #72	; 0x48
   23192:	f7fd fc1d 	bl	209d0 <mul_mont_n>
   23196:	f8cd 9004 	str.w	r9, [sp, #4]
   2319a:	f8cd a000 	str.w	sl, [sp]
   2319e:	4643      	mov	r3, r8
   231a0:	aa5a      	add	r2, sp, #360	; 0x168
   231a2:	a912      	add	r1, sp, #72	; 0x48
   231a4:	4608      	mov	r0, r1
   231a6:	f7fd fc13 	bl	209d0 <mul_mont_n>
   231aa:	f8cd 9004 	str.w	r9, [sp, #4]
   231ae:	f8cd a000 	str.w	sl, [sp]
   231b2:	4643      	mov	r3, r8
   231b4:	aa4e      	add	r2, sp, #312	; 0x138
   231b6:	a906      	add	r1, sp, #24
   231b8:	a85a      	add	r0, sp, #360	; 0x168
   231ba:	f7fd fc09 	bl	209d0 <mul_mont_n>
   231be:	f8cd 9004 	str.w	r9, [sp, #4]
   231c2:	f8cd a000 	str.w	sl, [sp]
   231c6:	4643      	mov	r3, r8
   231c8:	aa42      	add	r2, sp, #264	; 0x108
   231ca:	a906      	add	r1, sp, #24
   231cc:	4608      	mov	r0, r1
   231ce:	f7fd fbff 	bl	209d0 <mul_mont_n>
   231d2:	f8cd 9004 	str.w	r9, [sp, #4]
   231d6:	f8cd a000 	str.w	sl, [sp]
   231da:	4643      	mov	r3, r8
   231dc:	aa36      	add	r2, sp, #216	; 0xd8
   231de:	4611      	mov	r1, r2
   231e0:	a84e      	add	r0, sp, #312	; 0x138
   231e2:	f7fd fbf5 	bl	209d0 <mul_mont_n>
   231e6:	f8cd 9000 	str.w	r9, [sp]
   231ea:	4643      	mov	r3, r8
   231ec:	aa06      	add	r2, sp, #24
   231ee:	a94e      	add	r1, sp, #312	; 0x138
   231f0:	4608      	mov	r0, r1
   231f2:	f7fd fa3f 	bl	20674 <sub_mod_n>
   231f6:	f8cd 9000 	str.w	r9, [sp]
   231fa:	4643      	mov	r3, r8
   231fc:	aa4e      	add	r2, sp, #312	; 0x138
   231fe:	a95a      	add	r1, sp, #360	; 0x168
   23200:	4608      	mov	r0, r1
   23202:	f7fd fa37 	bl	20674 <sub_mod_n>
   23206:	f8cd 9004 	str.w	r9, [sp, #4]
   2320a:	f8cd a000 	str.w	sl, [sp]
   2320e:	4643      	mov	r3, r8
   23210:	aa36      	add	r2, sp, #216	; 0xd8
   23212:	a95a      	add	r1, sp, #360	; 0x168
   23214:	4608      	mov	r0, r1
   23216:	f7fd fbdb 	bl	209d0 <mul_mont_n>
   2321a:	f8cd 9000 	str.w	r9, [sp]
   2321e:	4643      	mov	r3, r8
   23220:	aa12      	add	r2, sp, #72	; 0x48
   23222:	a95a      	add	r1, sp, #360	; 0x168
   23224:	4608      	mov	r0, r1
   23226:	f7fd fa25 	bl	20674 <sub_mod_n>
   2322a:	9b04      	ldr	r3, [sp, #16]
   2322c:	4258      	negs	r0, r3
   2322e:	4632      	mov	r2, r6
   23230:	6811      	ldr	r1, [r2, #0]
   23232:	f854 3f04 	ldr.w	r3, [r4, #4]!
   23236:	404b      	eors	r3, r1
   23238:	4003      	ands	r3, r0
   2323a:	404b      	eors	r3, r1
   2323c:	f842 3b04 	str.w	r3, [r2], #4
   23240:	42ba      	cmp	r2, r7
   23242:	d1f5      	bne.n	23230 <POINTonE1_dadd+0x314>
   23244:	9b03      	ldr	r3, [sp, #12]
   23246:	425a      	negs	r2, r3
   23248:	3d04      	subs	r5, #4
   2324a:	9b05      	ldr	r3, [sp, #20]
   2324c:	1f18      	subs	r0, r3, #4
   2324e:	e003      	b.n	23258 <POINTonE1_dadd+0x33c>
   23250:	00038688 	.word	0x00038688
   23254:	fffcfffd 	.word	0xfffcfffd
   23258:	f856 1b04 	ldr.w	r1, [r6], #4
   2325c:	f855 3f04 	ldr.w	r3, [r5, #4]!
   23260:	404b      	eors	r3, r1
   23262:	4013      	ands	r3, r2
   23264:	404b      	eors	r3, r1
   23266:	f840 3f04 	str.w	r3, [r0, #4]!
   2326a:	42be      	cmp	r6, r7
   2326c:	d1f4      	bne.n	23258 <POINTonE1_dadd+0x33c>
   2326e:	b073      	add	sp, #460	; 0x1cc
   23270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00023274 <POINTonE1s_mult_w4>:
   23274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23278:	b0a7      	sub	sp, #156	; 0x9c
   2327a:	af00      	add	r7, sp, #0
   2327c:	4605      	mov	r5, r0
   2327e:	4616      	mov	r6, r2
   23280:	603b      	str	r3, [r7, #0]
   23282:	f8d7 80c0 	ldr.w	r8, [r7, #192]	; 0xc0
   23286:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   2328a:	b37b      	cbz	r3, 232ec <POINTonE1s_mult_w4+0x78>
   2328c:	b176      	cbz	r6, 232ac <POINTonE1s_mult_w4+0x38>
   2328e:	f1a1 0a04 	sub.w	sl, r1, #4
   23292:	f8d7 90c4 	ldr.w	r9, [r7, #196]	; 0xc4
   23296:	2400      	movs	r4, #0
   23298:	f85a 1f04 	ldr.w	r1, [sl, #4]!
   2329c:	4648      	mov	r0, r9
   2329e:	f7ff fa2b 	bl	226f8 <POINTonE1_precompute_w4>
   232a2:	3401      	adds	r4, #1
   232a4:	f509 6990 	add.w	r9, r9, #1152	; 0x480
   232a8:	42a6      	cmp	r6, r4
   232aa:	d1f5      	bne.n	23298 <POINTonE1s_mult_w4+0x24>
   232ac:	f008 0103 	and.w	r1, r8, #3
   232b0:	1c4a      	adds	r2, r1, #1
   232b2:	2301      	movs	r3, #1
   232b4:	4093      	lsls	r3, r2
   232b6:	f103 3aff 	add.w	sl, r3, #4294967295
   232ba:	4689      	mov	r9, r1
   232bc:	ebb8 0801 	subs.w	r8, r8, r1
   232c0:	d01d      	beq.n	232fe <POINTonE1s_mult_w4+0x8a>
   232c2:	f108 3bff 	add.w	fp, r8, #4294967295
   232c6:	4659      	mov	r1, fp
   232c8:	683b      	ldr	r3, [r7, #0]
   232ca:	6818      	ldr	r0, [r3, #0]
   232cc:	f7fd f9ba 	bl	20644 <get_wval>
   232d0:	2104      	movs	r1, #4
   232d2:	ea00 000a 	and.w	r0, r0, sl
   232d6:	f7fd f9c1 	bl	2065c <booth_encode>
   232da:	4602      	mov	r2, r0
   232dc:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
   232e0:	4628      	mov	r0, r5
   232e2:	f7fe fc1f 	bl	21b24 <POINTonE1_gather_booth_w4>
   232e6:	2401      	movs	r4, #1
   232e8:	464b      	mov	r3, r9
   232ea:	e021      	b.n	23330 <POINTonE1s_mult_w4+0xbc>
   232ec:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
   232f0:	466a      	mov	r2, sp
   232f2:	eba2 13c3 	sub.w	r3, r2, r3, lsl #7
   232f6:	469d      	mov	sp, r3
   232f8:	f8c7 d0c4 	str.w	sp, [r7, #196]	; 0xc4
   232fc:	e7c6      	b.n	2328c <POINTonE1s_mult_w4+0x18>
   232fe:	683b      	ldr	r3, [r7, #0]
   23300:	681b      	ldr	r3, [r3, #0]
   23302:	7818      	ldrb	r0, [r3, #0]
   23304:	2104      	movs	r1, #4
   23306:	ea0a 0040 	and.w	r0, sl, r0, lsl #1
   2330a:	f7fd f9a7 	bl	2065c <booth_encode>
   2330e:	4602      	mov	r2, r0
   23310:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
   23314:	4628      	mov	r0, r5
   23316:	f7fe fc05 	bl	21b24 <POINTonE1_gather_booth_w4>
   2331a:	2401      	movs	r4, #1
   2331c:	e040      	b.n	233a0 <POINTonE1s_mult_w4+0x12c>
   2331e:	f1ab 0204 	sub.w	r2, fp, #4
   23322:	f04f 0a1f 	mov.w	sl, #31
   23326:	2304      	movs	r3, #4
   23328:	f1bb 0f03 	cmp.w	fp, #3
   2332c:	d036      	beq.n	2339c <POINTonE1s_mult_w4+0x128>
   2332e:	4693      	mov	fp, r2
   23330:	42a6      	cmp	r6, r4
   23332:	d92b      	bls.n	2338c <POINTonE1s_mult_w4+0x118>
   23334:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
   23338:	f109 39ff 	add.w	r9, r9, #4294967295
   2333c:	683a      	ldr	r2, [r7, #0]
   2333e:	eb02 0989 	add.w	r9, r2, r9, lsl #2
   23342:	eb04 08c4 	add.w	r8, r4, r4, lsl #3
   23346:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
   2334a:	eb02 18c8 	add.w	r8, r2, r8, lsl #7
   2334e:	3301      	adds	r3, #1
   23350:	607b      	str	r3, [r7, #4]
   23352:	687a      	ldr	r2, [r7, #4]
   23354:	4659      	mov	r1, fp
   23356:	f859 0f04 	ldr.w	r0, [r9, #4]!
   2335a:	f7fd f973 	bl	20644 <get_wval>
   2335e:	2104      	movs	r1, #4
   23360:	ea00 000a 	and.w	r0, r0, sl
   23364:	f7fd f97a 	bl	2065c <booth_encode>
   23368:	4602      	mov	r2, r0
   2336a:	4641      	mov	r1, r8
   2336c:	f107 0008 	add.w	r0, r7, #8
   23370:	f7fe fbd8 	bl	21b24 <POINTonE1_gather_booth_w4>
   23374:	2300      	movs	r3, #0
   23376:	f107 0208 	add.w	r2, r7, #8
   2337a:	4629      	mov	r1, r5
   2337c:	4628      	mov	r0, r5
   2337e:	f7ff fdcd 	bl	22f1c <POINTonE1_dadd>
   23382:	3401      	adds	r4, #1
   23384:	f508 6890 	add.w	r8, r8, #1152	; 0x480
   23388:	42a6      	cmp	r6, r4
   2338a:	d1e2      	bne.n	23352 <POINTonE1s_mult_w4+0xde>
   2338c:	2404      	movs	r4, #4
   2338e:	4629      	mov	r1, r5
   23390:	4628      	mov	r0, r5
   23392:	f7fe fd67 	bl	21e64 <POINTonE1_double>
   23396:	3c01      	subs	r4, #1
   23398:	d1f9      	bne.n	2338e <POINTonE1s_mult_w4+0x11a>
   2339a:	e7c0      	b.n	2331e <POINTonE1s_mult_w4+0xaa>
   2339c:	f04f 0a1f 	mov.w	sl, #31
   233a0:	42a6      	cmp	r6, r4
   233a2:	d928      	bls.n	233f6 <POINTonE1s_mult_w4+0x182>
   233a4:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
   233a8:	f109 39ff 	add.w	r9, r9, #4294967295
   233ac:	683b      	ldr	r3, [r7, #0]
   233ae:	eb03 0989 	add.w	r9, r3, r9, lsl #2
   233b2:	eb04 08c4 	add.w	r8, r4, r4, lsl #3
   233b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   233ba:	eb03 18c8 	add.w	r8, r3, r8, lsl #7
   233be:	f04f 0b04 	mov.w	fp, #4
   233c2:	f859 3f04 	ldr.w	r3, [r9, #4]!
   233c6:	7818      	ldrb	r0, [r3, #0]
   233c8:	4659      	mov	r1, fp
   233ca:	ea0a 0040 	and.w	r0, sl, r0, lsl #1
   233ce:	f7fd f945 	bl	2065c <booth_encode>
   233d2:	4602      	mov	r2, r0
   233d4:	4641      	mov	r1, r8
   233d6:	f107 0008 	add.w	r0, r7, #8
   233da:	f7fe fba3 	bl	21b24 <POINTonE1_gather_booth_w4>
   233de:	2300      	movs	r3, #0
   233e0:	f107 0208 	add.w	r2, r7, #8
   233e4:	4629      	mov	r1, r5
   233e6:	4628      	mov	r0, r5
   233e8:	f7ff fd98 	bl	22f1c <POINTonE1_dadd>
   233ec:	3401      	adds	r4, #1
   233ee:	f508 6890 	add.w	r8, r8, #1152	; 0x480
   233f2:	42a6      	cmp	r6, r4
   233f4:	d1e5      	bne.n	233c2 <POINTonE1s_mult_w4+0x14e>
   233f6:	379c      	adds	r7, #156	; 0x9c
   233f8:	46bd      	mov	sp, r7
   233fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000233fe <POINTonE1_mult_w4>:
   233fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23402:	f2ad 5d14 	subw	sp, sp, #1300	; 0x514
   23406:	4605      	mov	r5, r0
   23408:	4617      	mov	r7, r2
   2340a:	461e      	mov	r6, r3
   2340c:	4668      	mov	r0, sp
   2340e:	f7ff f973 	bl	226f8 <POINTonE1_precompute_w4>
   23412:	f006 0303 	and.w	r3, r6, #3
   23416:	1c5c      	adds	r4, r3, #1
   23418:	1af6      	subs	r6, r6, r3
   2341a:	d036      	beq.n	2348a <POINTonE1_mult_w4+0x8c>
   2341c:	4622      	mov	r2, r4
   2341e:	1e71      	subs	r1, r6, #1
   23420:	4638      	mov	r0, r7
   23422:	f7fd f90f 	bl	20644 <get_wval>
   23426:	f04f 33ff 	mov.w	r3, #4294967295
   2342a:	40a3      	lsls	r3, r4
   2342c:	2104      	movs	r1, #4
   2342e:	ea20 0003 	bic.w	r0, r0, r3
   23432:	f7fd f913 	bl	2065c <booth_encode>
   23436:	4602      	mov	r2, r0
   23438:	4669      	mov	r1, sp
   2343a:	4628      	mov	r0, r5
   2343c:	f7fe fb72 	bl	21b24 <POINTonE1_gather_booth_w4>
   23440:	f04f 0905 	mov.w	r9, #5
   23444:	f04f 0804 	mov.w	r8, #4
   23448:	2404      	movs	r4, #4
   2344a:	4629      	mov	r1, r5
   2344c:	4628      	mov	r0, r5
   2344e:	f7fe fd09 	bl	21e64 <POINTonE1_double>
   23452:	3c01      	subs	r4, #1
   23454:	d1f9      	bne.n	2344a <POINTonE1_mult_w4+0x4c>
   23456:	1f34      	subs	r4, r6, #4
   23458:	d027      	beq.n	234aa <POINTonE1_mult_w4+0xac>
   2345a:	464a      	mov	r2, r9
   2345c:	1f71      	subs	r1, r6, #5
   2345e:	4638      	mov	r0, r7
   23460:	f7fd f8f0 	bl	20644 <get_wval>
   23464:	4641      	mov	r1, r8
   23466:	f000 001f 	and.w	r0, r0, #31
   2346a:	f7fd f8f7 	bl	2065c <booth_encode>
   2346e:	4602      	mov	r2, r0
   23470:	4669      	mov	r1, sp
   23472:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
   23476:	f7fe fb55 	bl	21b24 <POINTonE1_gather_booth_w4>
   2347a:	f50d 6290 	add.w	r2, sp, #1152	; 0x480
   2347e:	4629      	mov	r1, r5
   23480:	4628      	mov	r0, r5
   23482:	f7fe fff3 	bl	2246c <POINTonE1_add>
   23486:	4626      	mov	r6, r4
   23488:	e7de      	b.n	23448 <POINTonE1_mult_w4+0x4a>
   2348a:	7838      	ldrb	r0, [r7, #0]
   2348c:	f04f 33ff 	mov.w	r3, #4294967295
   23490:	40a3      	lsls	r3, r4
   23492:	43db      	mvns	r3, r3
   23494:	2104      	movs	r1, #4
   23496:	ea03 0040 	and.w	r0, r3, r0, lsl #1
   2349a:	f7fd f8df 	bl	2065c <booth_encode>
   2349e:	4602      	mov	r2, r0
   234a0:	4669      	mov	r1, sp
   234a2:	4628      	mov	r0, r5
   234a4:	f7fe fb3e 	bl	21b24 <POINTonE1_gather_booth_w4>
   234a8:	e013      	b.n	234d2 <POINTonE1_mult_w4+0xd4>
   234aa:	7838      	ldrb	r0, [r7, #0]
   234ac:	0040      	lsls	r0, r0, #1
   234ae:	2104      	movs	r1, #4
   234b0:	f000 001e 	and.w	r0, r0, #30
   234b4:	f7fd f8d2 	bl	2065c <booth_encode>
   234b8:	4602      	mov	r2, r0
   234ba:	4669      	mov	r1, sp
   234bc:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
   234c0:	f7fe fb30 	bl	21b24 <POINTonE1_gather_booth_w4>
   234c4:	2300      	movs	r3, #0
   234c6:	f50d 6290 	add.w	r2, sp, #1152	; 0x480
   234ca:	4629      	mov	r1, r5
   234cc:	4628      	mov	r0, r5
   234ce:	f7ff fd25 	bl	22f1c <POINTonE1_dadd>
   234d2:	f20d 5d14 	addw	sp, sp, #1300	; 0x514
   234d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000234da <POINTonE1_mult_w5>:
   234da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   234de:	f6ad 1d94 	subw	sp, sp, #2452	; 0x994
   234e2:	4605      	mov	r5, r0
   234e4:	4617      	mov	r7, r2
   234e6:	4698      	mov	r8, r3
   234e8:	f1a1 0e04 	sub.w	lr, r1, #4
   234ec:	466c      	mov	r4, sp
   234ee:	ab24      	add	r3, sp, #144	; 0x90
   234f0:	46a4      	mov	ip, r4
   234f2:	f85e 2f04 	ldr.w	r2, [lr, #4]!
   234f6:	f84c 2b04 	str.w	r2, [ip], #4
   234fa:	459c      	cmp	ip, r3
   234fc:	d1f9      	bne.n	234f2 <POINTonE1_mult_w5+0x18>
   234fe:	a824      	add	r0, sp, #144	; 0x90
   23500:	f7fe fcb0 	bl	21e64 <POINTonE1_double>
   23504:	ae48      	add	r6, sp, #288	; 0x120
   23506:	f504 797c 	add.w	r9, r4, #1008	; 0x3f0
   2350a:	4622      	mov	r2, r4
   2350c:	3490      	adds	r4, #144	; 0x90
   2350e:	4621      	mov	r1, r4
   23510:	4630      	mov	r0, r6
   23512:	f7fe ffab 	bl	2246c <POINTonE1_add>
   23516:	4621      	mov	r1, r4
   23518:	f106 0090 	add.w	r0, r6, #144	; 0x90
   2351c:	f7fe fca2 	bl	21e64 <POINTonE1_double>
   23520:	f506 7690 	add.w	r6, r6, #288	; 0x120
   23524:	45a1      	cmp	r9, r4
   23526:	d1f0      	bne.n	2350a <POINTonE1_mult_w5+0x30>
   23528:	4b35      	ldr	r3, [pc, #212]	; (23600 <POINTonE1_mult_w5+0x126>)
   2352a:	fba3 2308 	umull	r2, r3, r3, r8
   2352e:	f023 0603 	bic.w	r6, r3, #3
   23532:	eb06 0693 	add.w	r6, r6, r3, lsr #2
   23536:	eba8 0606 	sub.w	r6, r8, r6
   2353a:	1c74      	adds	r4, r6, #1
   2353c:	ebb8 0606 	subs.w	r6, r8, r6
   23540:	d036      	beq.n	235b0 <POINTonE1_mult_w5+0xd6>
   23542:	4622      	mov	r2, r4
   23544:	1e71      	subs	r1, r6, #1
   23546:	4638      	mov	r0, r7
   23548:	f7fd f87c 	bl	20644 <get_wval>
   2354c:	f04f 33ff 	mov.w	r3, #4294967295
   23550:	40a3      	lsls	r3, r4
   23552:	2105      	movs	r1, #5
   23554:	ea20 0003 	bic.w	r0, r0, r3
   23558:	f7fd f880 	bl	2065c <booth_encode>
   2355c:	4602      	mov	r2, r0
   2355e:	4669      	mov	r1, sp
   23560:	4628      	mov	r0, r5
   23562:	f7fe fb0c 	bl	21b7e <POINTonE1_gather_booth_w5>
   23566:	f04f 0906 	mov.w	r9, #6
   2356a:	f04f 0805 	mov.w	r8, #5
   2356e:	2405      	movs	r4, #5
   23570:	4629      	mov	r1, r5
   23572:	4628      	mov	r0, r5
   23574:	f7fe fc76 	bl	21e64 <POINTonE1_double>
   23578:	3c01      	subs	r4, #1
   2357a:	d1f9      	bne.n	23570 <POINTonE1_mult_w5+0x96>
   2357c:	1f74      	subs	r4, r6, #5
   2357e:	d027      	beq.n	235d0 <POINTonE1_mult_w5+0xf6>
   23580:	464a      	mov	r2, r9
   23582:	1fb1      	subs	r1, r6, #6
   23584:	4638      	mov	r0, r7
   23586:	f7fd f85d 	bl	20644 <get_wval>
   2358a:	4641      	mov	r1, r8
   2358c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   23590:	f7fd f864 	bl	2065c <booth_encode>
   23594:	4602      	mov	r2, r0
   23596:	4669      	mov	r1, sp
   23598:	f50d 6010 	add.w	r0, sp, #2304	; 0x900
   2359c:	f7fe faef 	bl	21b7e <POINTonE1_gather_booth_w5>
   235a0:	f50d 6210 	add.w	r2, sp, #2304	; 0x900
   235a4:	4629      	mov	r1, r5
   235a6:	4628      	mov	r0, r5
   235a8:	f7fe ff60 	bl	2246c <POINTonE1_add>
   235ac:	4626      	mov	r6, r4
   235ae:	e7de      	b.n	2356e <POINTonE1_mult_w5+0x94>
   235b0:	7838      	ldrb	r0, [r7, #0]
   235b2:	f04f 33ff 	mov.w	r3, #4294967295
   235b6:	40a3      	lsls	r3, r4
   235b8:	43db      	mvns	r3, r3
   235ba:	2105      	movs	r1, #5
   235bc:	ea03 0040 	and.w	r0, r3, r0, lsl #1
   235c0:	f7fd f84c 	bl	2065c <booth_encode>
   235c4:	4602      	mov	r2, r0
   235c6:	4669      	mov	r1, sp
   235c8:	4628      	mov	r0, r5
   235ca:	f7fe fad8 	bl	21b7e <POINTonE1_gather_booth_w5>
   235ce:	e013      	b.n	235f8 <POINTonE1_mult_w5+0x11e>
   235d0:	7838      	ldrb	r0, [r7, #0]
   235d2:	0040      	lsls	r0, r0, #1
   235d4:	2105      	movs	r1, #5
   235d6:	f000 003e 	and.w	r0, r0, #62	; 0x3e
   235da:	f7fd f83f 	bl	2065c <booth_encode>
   235de:	4602      	mov	r2, r0
   235e0:	4669      	mov	r1, sp
   235e2:	f50d 6010 	add.w	r0, sp, #2304	; 0x900
   235e6:	f7fe faca 	bl	21b7e <POINTonE1_gather_booth_w5>
   235ea:	2300      	movs	r3, #0
   235ec:	f50d 6210 	add.w	r2, sp, #2304	; 0x900
   235f0:	4629      	mov	r1, r5
   235f2:	4628      	mov	r0, r5
   235f4:	f7ff fc92 	bl	22f1c <POINTonE1_dadd>
   235f8:	f60d 1d94 	addw	sp, sp, #2452	; 0x994
   235fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23600:	cccccccd 	.word	0xcccccccd

00023604 <POINTonE1_dbl_n_add>:
   23604:	b570      	push	{r4, r5, r6, lr}
   23606:	4605      	mov	r5, r0
   23608:	4616      	mov	r6, r2
   2360a:	1e4c      	subs	r4, r1, #1
   2360c:	b139      	cbz	r1, 2361e <POINTonE1_dbl_n_add+0x1a>
   2360e:	4629      	mov	r1, r5
   23610:	4628      	mov	r0, r5
   23612:	f7fe fc27 	bl	21e64 <POINTonE1_double>
   23616:	3c01      	subs	r4, #1
   23618:	f1b4 3fff 	cmp.w	r4, #4294967295
   2361c:	d1f7      	bne.n	2360e <POINTonE1_dbl_n_add+0xa>
   2361e:	2300      	movs	r3, #0
   23620:	4632      	mov	r2, r6
   23622:	4629      	mov	r1, r5
   23624:	4628      	mov	r0, r5
   23626:	f7ff fc79 	bl	22f1c <POINTonE1_dadd>
   2362a:	bd70      	pop	{r4, r5, r6, pc}

0002362c <POINTonE1_in_G1>:
   2362c:	b510      	push	{r4, lr}
   2362e:	f5ad 6d90 	sub.w	sp, sp, #1152	; 0x480
   23632:	4604      	mov	r4, r0
   23634:	4601      	mov	r1, r0
   23636:	a8fc      	add	r0, sp, #1008	; 0x3f0
   23638:	f7fd faa3 	bl	20b82 <sigma>
   2363c:	a9fc      	add	r1, sp, #1008	; 0x3f0
   2363e:	a8d8      	add	r0, sp, #864	; 0x360
   23640:	f7fd fa9f 	bl	20b82 <sigma>
   23644:	a9fc      	add	r1, sp, #1008	; 0x3f0
   23646:	4608      	mov	r0, r1
   23648:	f7fe fc0c 	bl	21e64 <POINTonE1_double>
   2364c:	2300      	movs	r3, #0
   2364e:	4622      	mov	r2, r4
   23650:	a9d8      	add	r1, sp, #864	; 0x360
   23652:	a8b4      	add	r0, sp, #720	; 0x2d0
   23654:	f7ff fc62 	bl	22f1c <POINTonE1_dadd>
   23658:	2101      	movs	r1, #1
   2365a:	a8b4      	add	r0, sp, #720	; 0x2d0
   2365c:	f7fe fa52 	bl	21b04 <POINTonE1_cneg>
   23660:	2300      	movs	r3, #0
   23662:	aafc      	add	r2, sp, #1008	; 0x3f0
   23664:	a9b4      	add	r1, sp, #720	; 0x2d0
   23666:	4608      	mov	r0, r1
   23668:	f7ff fc58 	bl	22f1c <POINTonE1_dadd>
   2366c:	a9b4      	add	r1, sp, #720	; 0x2d0
   2366e:	a848      	add	r0, sp, #288	; 0x120
   23670:	f7fe fbf8 	bl	21e64 <POINTonE1_double>
   23674:	2300      	movs	r3, #0
   23676:	aab4      	add	r2, sp, #720	; 0x2d0
   23678:	a948      	add	r1, sp, #288	; 0x120
   2367a:	4668      	mov	r0, sp
   2367c:	f7ff fc4e 	bl	22f1c <POINTonE1_dadd>
   23680:	2300      	movs	r3, #0
   23682:	aa48      	add	r2, sp, #288	; 0x120
   23684:	4669      	mov	r1, sp
   23686:	a824      	add	r0, sp, #144	; 0x90
   23688:	f7ff fc48 	bl	22f1c <POINTonE1_dadd>
   2368c:	2300      	movs	r3, #0
   2368e:	aa48      	add	r2, sp, #288	; 0x120
   23690:	a924      	add	r1, sp, #144	; 0x90
   23692:	4610      	mov	r0, r2
   23694:	f7ff fc42 	bl	22f1c <POINTonE1_dadd>
   23698:	a924      	add	r1, sp, #144	; 0x90
   2369a:	a890      	add	r0, sp, #576	; 0x240
   2369c:	f7fe fbe2 	bl	21e64 <POINTonE1_double>
   236a0:	2300      	movs	r3, #0
   236a2:	aab4      	add	r2, sp, #720	; 0x2d0
   236a4:	a990      	add	r1, sp, #576	; 0x240
   236a6:	a86c      	add	r0, sp, #432	; 0x1b0
   236a8:	f7ff fc38 	bl	22f1c <POINTonE1_dadd>
   236ac:	aa24      	add	r2, sp, #144	; 0x90
   236ae:	2103      	movs	r1, #3
   236b0:	a890      	add	r0, sp, #576	; 0x240
   236b2:	f7ff ffa7 	bl	23604 <POINTonE1_dbl_n_add>
   236b6:	a948      	add	r1, sp, #288	; 0x120
   236b8:	a8fc      	add	r0, sp, #1008	; 0x3f0
   236ba:	f7fe fbd3 	bl	21e64 <POINTonE1_double>
   236be:	aa6c      	add	r2, sp, #432	; 0x1b0
   236c0:	2105      	movs	r1, #5
   236c2:	a8fc      	add	r0, sp, #1008	; 0x3f0
   236c4:	f7ff ff9e 	bl	23604 <POINTonE1_dbl_n_add>
   236c8:	466a      	mov	r2, sp
   236ca:	2103      	movs	r1, #3
   236cc:	a8fc      	add	r0, sp, #1008	; 0x3f0
   236ce:	f7ff ff99 	bl	23604 <POINTonE1_dbl_n_add>
   236d2:	aab4      	add	r2, sp, #720	; 0x2d0
   236d4:	2103      	movs	r1, #3
   236d6:	a8fc      	add	r0, sp, #1008	; 0x3f0
   236d8:	f7ff ff94 	bl	23604 <POINTonE1_dbl_n_add>
   236dc:	466a      	mov	r2, sp
   236de:	2105      	movs	r1, #5
   236e0:	a8fc      	add	r0, sp, #1008	; 0x3f0
   236e2:	f7ff ff8f 	bl	23604 <POINTonE1_dbl_n_add>
   236e6:	aa90      	add	r2, sp, #576	; 0x240
   236e8:	2112      	movs	r1, #18
   236ea:	a8fc      	add	r0, sp, #1008	; 0x3f0
   236ec:	f7ff ff8a 	bl	23604 <POINTonE1_dbl_n_add>
   236f0:	aa90      	add	r2, sp, #576	; 0x240
   236f2:	2108      	movs	r1, #8
   236f4:	a8fc      	add	r0, sp, #1008	; 0x3f0
   236f6:	f7ff ff85 	bl	23604 <POINTonE1_dbl_n_add>
   236fa:	aa48      	add	r2, sp, #288	; 0x120
   236fc:	2103      	movs	r1, #3
   236fe:	a8fc      	add	r0, sp, #1008	; 0x3f0
   23700:	f7ff ff80 	bl	23604 <POINTonE1_dbl_n_add>
   23704:	aa24      	add	r2, sp, #144	; 0x90
   23706:	2107      	movs	r1, #7
   23708:	a8fc      	add	r0, sp, #1008	; 0x3f0
   2370a:	f7ff ff7b 	bl	23604 <POINTonE1_dbl_n_add>
   2370e:	aa6c      	add	r2, sp, #432	; 0x1b0
   23710:	2105      	movs	r1, #5
   23712:	a8fc      	add	r0, sp, #1008	; 0x3f0
   23714:	f7ff ff76 	bl	23604 <POINTonE1_dbl_n_add>
   23718:	aa90      	add	r2, sp, #576	; 0x240
   2371a:	2129      	movs	r1, #41	; 0x29
   2371c:	a8fc      	add	r0, sp, #1008	; 0x3f0
   2371e:	f7ff ff71 	bl	23604 <POINTonE1_dbl_n_add>
   23722:	aa90      	add	r2, sp, #576	; 0x240
   23724:	2108      	movs	r1, #8
   23726:	a8fc      	add	r0, sp, #1008	; 0x3f0
   23728:	f7ff ff6c 	bl	23604 <POINTonE1_dbl_n_add>
   2372c:	aa90      	add	r2, sp, #576	; 0x240
   2372e:	2108      	movs	r1, #8
   23730:	a8fc      	add	r0, sp, #1008	; 0x3f0
   23732:	f7ff ff67 	bl	23604 <POINTonE1_dbl_n_add>
   23736:	aa90      	add	r2, sp, #576	; 0x240
   23738:	2108      	movs	r1, #8
   2373a:	a8fc      	add	r0, sp, #1008	; 0x3f0
   2373c:	f7ff ff62 	bl	23604 <POINTonE1_dbl_n_add>
   23740:	2101      	movs	r1, #1
   23742:	a8d8      	add	r0, sp, #864	; 0x360
   23744:	f7fe f9de 	bl	21b04 <POINTonE1_cneg>
   23748:	2300      	movs	r3, #0
   2374a:	aad8      	add	r2, sp, #864	; 0x360
   2374c:	a9fc      	add	r1, sp, #1008	; 0x3f0
   2374e:	4608      	mov	r0, r1
   23750:	f7ff fbe4 	bl	22f1c <POINTonE1_dadd>
   23754:	f20d 434c 	addw	r3, sp, #1100	; 0x44c
   23758:	f20d 417c 	addw	r1, sp, #1148	; 0x47c
   2375c:	2000      	movs	r0, #0
   2375e:	f853 2f04 	ldr.w	r2, [r3, #4]!
   23762:	4310      	orrs	r0, r2
   23764:	428b      	cmp	r3, r1
   23766:	d1fa      	bne.n	2375e <POINTonE1_in_G1+0x132>
   23768:	1e43      	subs	r3, r0, #1
   2376a:	ea23 0000 	bic.w	r0, r3, r0
   2376e:	0fc0      	lsrs	r0, r0, #31
   23770:	f50d 6d90 	add.w	sp, sp, #1152	; 0x480
   23774:	bd10      	pop	{r4, pc}

00023776 <smul_2n>:
   23776:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2377a:	b083      	sub	sp, #12
   2377c:	af00      	add	r7, sp, #0
   2377e:	4683      	mov	fp, r0
   23780:	607b      	str	r3, [r7, #4]
   23782:	f8d7 8030 	ldr.w	r8, [r7, #48]	; 0x30
   23786:	6b7e      	ldr	r6, [r7, #52]	; 0x34
   23788:	ea4f 0986 	mov.w	r9, r6, lsl #2
   2378c:	f109 0307 	add.w	r3, r9, #7
   23790:	f023 0307 	bic.w	r3, r3, #7
   23794:	ebad 0d03 	sub.w	sp, sp, r3
   23798:	466d      	mov	r5, sp
   2379a:	ebad 0d03 	sub.w	sp, sp, r3
   2379e:	466c      	mov	r4, sp
   237a0:	ea82 7ae2 	eor.w	sl, r2, r2, asr #31
   237a4:	ebaa 7ae2 	sub.w	sl, sl, r2, asr #31
   237a8:	4633      	mov	r3, r6
   237aa:	17d2      	asrs	r2, r2, #31
   237ac:	4628      	mov	r0, r5
   237ae:	f7fd f884 	bl	208ba <cneg_n>
   237b2:	4633      	mov	r3, r6
   237b4:	4652      	mov	r2, sl
   237b6:	4629      	mov	r1, r5
   237b8:	4628      	mov	r0, r5
   237ba:	f7fd f898 	bl	208ee <umul_n>
   237be:	ea88 7ae8 	eor.w	sl, r8, r8, asr #31
   237c2:	ebaa 7ae8 	sub.w	sl, sl, r8, asr #31
   237c6:	4633      	mov	r3, r6
   237c8:	ea4f 72e8 	mov.w	r2, r8, asr #31
   237cc:	6879      	ldr	r1, [r7, #4]
   237ce:	4620      	mov	r0, r4
   237d0:	f7fd f873 	bl	208ba <cneg_n>
   237d4:	4633      	mov	r3, r6
   237d6:	4652      	mov	r2, sl
   237d8:	4621      	mov	r1, r4
   237da:	4620      	mov	r0, r4
   237dc:	f7fd f887 	bl	208ee <umul_n>
   237e0:	b1b6      	cbz	r6, 23810 <smul_2n+0x9a>
   237e2:	1f29      	subs	r1, r5, #4
   237e4:	3c04      	subs	r4, #4
   237e6:	f1ab 0004 	sub.w	r0, fp, #4
   237ea:	f1a9 0904 	sub.w	r9, r9, #4
   237ee:	444d      	add	r5, r9
   237f0:	2200      	movs	r2, #0
   237f2:	4694      	mov	ip, r2
   237f4:	f851 3f04 	ldr.w	r3, [r1, #4]!
   237f8:	f854 6f04 	ldr.w	r6, [r4, #4]!
   237fc:	199b      	adds	r3, r3, r6
   237fe:	eb4c 060c 	adc.w	r6, ip, ip
   23802:	189b      	adds	r3, r3, r2
   23804:	f840 3f04 	str.w	r3, [r0, #4]!
   23808:	f146 0200 	adc.w	r2, r6, #0
   2380c:	42a9      	cmp	r1, r5
   2380e:	d1f1      	bne.n	237f4 <smul_2n+0x7e>
   23810:	370c      	adds	r7, #12
   23812:	46bd      	mov	sp, r7
   23814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00023818 <ct_inverse_mod_n>:
   23818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2381c:	b09f      	sub	sp, #124	; 0x7c
   2381e:	af02      	add	r7, sp, #8
   23820:	60b8      	str	r0, [r7, #8]
   23822:	607b      	str	r3, [r7, #4]
   23824:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   23828:	009b      	lsls	r3, r3, #2
   2382a:	3307      	adds	r3, #7
   2382c:	f023 0307 	bic.w	r3, r3, #7
   23830:	ebad 0d03 	sub.w	sp, sp, r3
   23834:	f10d 0808 	add.w	r8, sp, #8
   23838:	ebad 0d03 	sub.w	sp, sp, r3
   2383c:	ab02      	add	r3, sp, #8
   2383e:	63fb      	str	r3, [r7, #60]	; 0x3c
   23840:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   23844:	005b      	lsls	r3, r3, #1
   23846:	633b      	str	r3, [r7, #48]	; 0x30
   23848:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   2384c:	00db      	lsls	r3, r3, #3
   2384e:	643b      	str	r3, [r7, #64]	; 0x40
   23850:	466b      	mov	r3, sp
   23852:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
   23856:	eba3 03c0 	sub.w	r3, r3, r0, lsl #3
   2385a:	469d      	mov	sp, r3
   2385c:	ab02      	add	r3, sp, #8
   2385e:	63bb      	str	r3, [r7, #56]	; 0x38
   23860:	466b      	mov	r3, sp
   23862:	eba3 03c0 	sub.w	r3, r3, r0, lsl #3
   23866:	469d      	mov	sp, r3
   23868:	ab02      	add	r3, sp, #8
   2386a:	637b      	str	r3, [r7, #52]	; 0x34
   2386c:	466b      	mov	r3, sp
   2386e:	eba3 03c0 	sub.w	r3, r3, r0, lsl #3
   23872:	469d      	mov	sp, r3
   23874:	ab02      	add	r3, sp, #8
   23876:	64fb      	str	r3, [r7, #76]	; 0x4c
   23878:	f030 4440 	bics.w	r4, r0, #3221225472	; 0xc0000000
   2387c:	62fc      	str	r4, [r7, #44]	; 0x2c
   2387e:	d015      	beq.n	238ac <ct_inverse_mod_n+0x94>
   23880:	1f0b      	subs	r3, r1, #4
   23882:	f1a8 0104 	sub.w	r1, r8, #4
   23886:	00a0      	lsls	r0, r4, #2
   23888:	eb03 0584 	add.w	r5, r3, r4, lsl #2
   2388c:	f853 4f04 	ldr.w	r4, [r3, #4]!
   23890:	f841 4f04 	str.w	r4, [r1, #4]!
   23894:	42ab      	cmp	r3, r5
   23896:	d1f9      	bne.n	2388c <ct_inverse_mod_n+0x74>
   23898:	1f13      	subs	r3, r2, #4
   2389a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2389c:	3a04      	subs	r2, #4
   2389e:	4418      	add	r0, r3
   238a0:	f853 1f04 	ldr.w	r1, [r3, #4]!
   238a4:	f842 1f04 	str.w	r1, [r2, #4]!
   238a8:	4283      	cmp	r3, r0
   238aa:	d1f9      	bne.n	238a0 <ct_inverse_mod_n+0x88>
   238ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   238ae:	089c      	lsrs	r4, r3, #2
   238b0:	2b03      	cmp	r3, #3
   238b2:	d907      	bls.n	238c4 <ct_inverse_mod_n+0xac>
   238b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
   238b6:	2300      	movs	r3, #0
   238b8:	4619      	mov	r1, r3
   238ba:	f842 1b04 	str.w	r1, [r2], #4
   238be:	3301      	adds	r3, #1
   238c0:	429c      	cmp	r4, r3
   238c2:	d8fa      	bhi.n	238ba <ct_inverse_mod_n+0xa2>
   238c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
   238c6:	2301      	movs	r3, #1
   238c8:	6013      	str	r3, [r2, #0]
   238ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   238cc:	2b03      	cmp	r3, #3
   238ce:	d907      	bls.n	238e0 <ct_inverse_mod_n+0xc8>
   238d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   238d2:	2300      	movs	r3, #0
   238d4:	4619      	mov	r1, r3
   238d6:	f842 1b04 	str.w	r1, [r2], #4
   238da:	3301      	adds	r3, #1
   238dc:	42a3      	cmp	r3, r4
   238de:	d3fa      	bcc.n	238d6 <ct_inverse_mod_n+0xbe>
   238e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   238e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   238e6:	019b      	lsls	r3, r3, #6
   238e8:	3b02      	subs	r3, #2
   238ea:	461a      	mov	r2, r3
   238ec:	60fb      	str	r3, [r7, #12]
   238ee:	4bbd      	ldr	r3, [pc, #756]	; (23be4 <ct_inverse_mod_n+0x3cc>)
   238f0:	fba3 2302 	umull	r2, r3, r3, r2
   238f4:	091b      	lsrs	r3, r3, #4
   238f6:	61bb      	str	r3, [r7, #24]
   238f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   238fc:	1e5a      	subs	r2, r3, #1
   238fe:	eb08 0382 	add.w	r3, r8, r2, lsl #2
   23902:	62bb      	str	r3, [r7, #40]	; 0x28
   23904:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   23908:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2390c:	3b02      	subs	r3, #2
   2390e:	eb08 0183 	add.w	r1, r8, r3, lsl #2
   23912:	6279      	str	r1, [r7, #36]	; 0x24
   23914:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   23916:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   2391a:	623a      	str	r2, [r7, #32]
   2391c:	460a      	mov	r2, r1
   2391e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   23922:	61fb      	str	r3, [r7, #28]
   23924:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   23928:	3b02      	subs	r3, #2
   2392a:	eb08 0183 	add.w	r1, r8, r3, lsl #2
   2392e:	6179      	str	r1, [r7, #20]
   23930:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   23934:	613b      	str	r3, [r7, #16]
   23936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   23938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2393a:	eb03 0582 	add.w	r5, r3, r2, lsl #2
   2393e:	3d04      	subs	r5, #4
   23940:	2300      	movs	r3, #0
   23942:	647b      	str	r3, [r7, #68]	; 0x44
   23944:	f108 0604 	add.w	r6, r8, #4
   23948:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2394a:	6819      	ldr	r1, [r3, #0]
   2394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2394e:	f8d3 c000 	ldr.w	ip, [r3]
   23952:	f8c7 c048 	str.w	ip, [r7, #72]	; 0x48
   23956:	6a3b      	ldr	r3, [r7, #32]
   23958:	681a      	ldr	r2, [r3, #0]
   2395a:	69fb      	ldr	r3, [r7, #28]
   2395c:	6818      	ldr	r0, [r3, #0]
   2395e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   23962:	2b03      	cmp	r3, #3
   23964:	d029      	beq.n	239ba <ct_inverse_mod_n+0x1a2>
   23966:	f8d7 a010 	ldr.w	sl, [r7, #16]
   2396a:	f8d7 9014 	ldr.w	r9, [r7, #20]
   2396e:	4663      	mov	r3, ip
   23970:	ea41 0c02 	orr.w	ip, r1, r2
   23974:	f10c 3eff 	add.w	lr, ip, #4294967295
   23978:	ea2e 0c0c 	bic.w	ip, lr, ip
   2397c:	ea81 0e03 	eor.w	lr, r1, r3
   23980:	ea0e 7eec 	and.w	lr, lr, ip, asr #31
   23984:	ea81 010e 	eor.w	r1, r1, lr
   23988:	ea82 0e00 	eor.w	lr, r2, r0
   2398c:	ea0e 7eec 	and.w	lr, lr, ip, asr #31
   23990:	ea82 020e 	eor.w	r2, r2, lr
   23994:	f859 ed04 	ldr.w	lr, [r9, #-4]!
   23998:	ea83 0e0e 	eor.w	lr, r3, lr
   2399c:	ea0e 7eec 	and.w	lr, lr, ip, asr #31
   239a0:	ea83 030e 	eor.w	r3, r3, lr
   239a4:	f85a ed04 	ldr.w	lr, [sl, #-4]!
   239a8:	ea80 0e0e 	eor.w	lr, r0, lr
   239ac:	ea0e 7cec 	and.w	ip, lr, ip, asr #31
   239b0:	ea80 000c 	eor.w	r0, r0, ip
   239b4:	45b1      	cmp	r9, r6
   239b6:	d1db      	bne.n	23970 <ct_inverse_mod_n+0x158>
   239b8:	64bb      	str	r3, [r7, #72]	; 0x48
   239ba:	ea41 0a02 	orr.w	sl, r1, r2
   239be:	f10a 3cff 	add.w	ip, sl, #4294967295
   239c2:	ea2c 0c0a 	bic.w	ip, ip, sl
   239c6:	ea4f 4e1a 	mov.w	lr, sl, lsr #16
   239ca:	f1ce 0900 	rsb	r9, lr, #0
   239ce:	ea4f 79e9 	mov.w	r9, r9, asr #31
   239d2:	f009 0b10 	and.w	fp, r9, #16
   239d6:	f1bc 0f00 	cmp.w	ip, #0
   239da:	bfa8      	it	ge
   239dc:	f10b 0b01 	addge.w	fp, fp, #1
   239e0:	ea8a 0e0e 	eor.w	lr, sl, lr
   239e4:	ea0e 0909 	and.w	r9, lr, r9
   239e8:	ea89 0c0a 	eor.w	ip, r9, sl
   239ec:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
   239f0:	f1ce 0900 	rsb	r9, lr, #0
   239f4:	ea4f 79e9 	mov.w	r9, r9, asr #31
   239f8:	f009 0a08 	and.w	sl, r9, #8
   239fc:	44da      	add	sl, fp
   239fe:	ea8c 0e0e 	eor.w	lr, ip, lr
   23a02:	ea0e 0909 	and.w	r9, lr, r9
   23a06:	ea8c 0909 	eor.w	r9, ip, r9
   23a0a:	ea4f 1e19 	mov.w	lr, r9, lsr #4
   23a0e:	f1ce 0b00 	rsb	fp, lr, #0
   23a12:	ea4f 7beb 	mov.w	fp, fp, asr #31
   23a16:	f00b 0c04 	and.w	ip, fp, #4
   23a1a:	44e2      	add	sl, ip
   23a1c:	ea89 0e0e 	eor.w	lr, r9, lr
   23a20:	ea0e 0e0b 	and.w	lr, lr, fp
   23a24:	ea89 0c0e 	eor.w	ip, r9, lr
   23a28:	ea4f 0e9c 	mov.w	lr, ip, lsr #2
   23a2c:	f1ce 0900 	rsb	r9, lr, #0
   23a30:	ea4f 79e9 	mov.w	r9, r9, asr #31
   23a34:	f009 0b02 	and.w	fp, r9, #2
   23a38:	44da      	add	sl, fp
   23a3a:	ea8c 0e0e 	eor.w	lr, ip, lr
   23a3e:	ea0e 0e09 	and.w	lr, lr, r9
   23a42:	ea8c 0e0e 	eor.w	lr, ip, lr
   23a46:	eb0a 0a5e 	add.w	sl, sl, lr, lsr #1
   23a4a:	f1ca 0e20 	rsb	lr, sl, #32
   23a4e:	f8d8 3000 	ldr.w	r3, [r8]
   23a52:	66bb      	str	r3, [r7, #104]	; 0x68
   23a54:	f1ca 091f 	rsb	r9, sl, #31
   23a58:	ea29 090e 	bic.w	r9, r9, lr
   23a5c:	ea6f 0909 	mvn.w	r9, r9
   23a60:	ea4f 79d9 	mov.w	r9, r9, lsr #31
   23a64:	f1c9 0900 	rsb	r9, r9, #0
   23a68:	f00e 0e1f 	and.w	lr, lr, #31
   23a6c:	f00a 0a1f 	and.w	sl, sl, #31
   23a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23a72:	ea09 0303 	and.w	r3, r9, r3
   23a76:	fa23 f30a 	lsr.w	r3, r3, sl
   23a7a:	fa01 f10e 	lsl.w	r1, r1, lr
   23a7e:	4319      	orrs	r1, r3
   23a80:	66f9      	str	r1, [r7, #108]	; 0x6c
   23a82:	f8d7 b03c 	ldr.w	fp, [r7, #60]	; 0x3c
   23a86:	f8db 3000 	ldr.w	r3, [fp]
   23a8a:	663b      	str	r3, [r7, #96]	; 0x60
   23a8c:	ea09 0000 	and.w	r0, r9, r0
   23a90:	fa20 fa0a 	lsr.w	sl, r0, sl
   23a94:	fa02 f20e 	lsl.w	r2, r2, lr
   23a98:	ea4a 0202 	orr.w	r2, sl, r2
   23a9c:	667a      	str	r2, [r7, #100]	; 0x64
   23a9e:	231e      	movs	r3, #30
   23aa0:	f107 0260 	add.w	r2, r7, #96	; 0x60
   23aa4:	f107 0168 	add.w	r1, r7, #104	; 0x68
   23aa8:	f107 0050 	add.w	r0, r7, #80	; 0x50
   23aac:	f7fc fe9c 	bl	207e8 <inner_loop_n>
   23ab0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   23ab4:	9301      	str	r3, [sp, #4]
   23ab6:	f107 0354 	add.w	r3, r7, #84	; 0x54
   23aba:	9300      	str	r3, [sp, #0]
   23abc:	465b      	mov	r3, fp
   23abe:	f107 0250 	add.w	r2, r7, #80	; 0x50
   23ac2:	4641      	mov	r1, r8
   23ac4:	f8d7 904c 	ldr.w	r9, [r7, #76]	; 0x4c
   23ac8:	4648      	mov	r0, r9
   23aca:	f7fd fcc0 	bl	2144e <smul_n_shift_n>
   23ace:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   23ad2:	9301      	str	r3, [sp, #4]
   23ad4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
   23ad8:	9300      	str	r3, [sp, #0]
   23ada:	465b      	mov	r3, fp
   23adc:	f107 0258 	add.w	r2, r7, #88	; 0x58
   23ae0:	4641      	mov	r1, r8
   23ae2:	4658      	mov	r0, fp
   23ae4:	f7fd fcb3 	bl	2144e <smul_n_shift_n>
   23ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   23aea:	b14b      	cbz	r3, 23b00 <ct_inverse_mod_n+0x2e8>
   23aec:	f1a9 0304 	sub.w	r3, r9, #4
   23af0:	f1a8 0204 	sub.w	r2, r8, #4
   23af4:	f853 1f04 	ldr.w	r1, [r3, #4]!
   23af8:	f842 1f04 	str.w	r1, [r2, #4]!
   23afc:	42ab      	cmp	r3, r5
   23afe:	d1f9      	bne.n	23af4 <ct_inverse_mod_n+0x2dc>
   23b00:	f8d7 b030 	ldr.w	fp, [r7, #48]	; 0x30
   23b04:	f8cd b004 	str.w	fp, [sp, #4]
   23b08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   23b0a:	9300      	str	r3, [sp, #0]
   23b0c:	f8d7 9034 	ldr.w	r9, [r7, #52]	; 0x34
   23b10:	464b      	mov	r3, r9
   23b12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   23b14:	f8d7 a038 	ldr.w	sl, [r7, #56]	; 0x38
   23b18:	4651      	mov	r1, sl
   23b1a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   23b1c:	f7ff fe2b 	bl	23776 <smul_2n>
   23b20:	f8cd b004 	str.w	fp, [sp, #4]
   23b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   23b26:	9300      	str	r3, [sp, #0]
   23b28:	464b      	mov	r3, r9
   23b2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
   23b2c:	4651      	mov	r1, sl
   23b2e:	4648      	mov	r0, r9
   23b30:	f7ff fe21 	bl	23776 <smul_2n>
   23b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   23b36:	2b03      	cmp	r3, #3
   23b38:	d90b      	bls.n	23b52 <ct_inverse_mod_n+0x33a>
   23b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   23b3c:	1f19      	subs	r1, r3, #4
   23b3e:	f1aa 0204 	sub.w	r2, sl, #4
   23b42:	2300      	movs	r3, #0
   23b44:	f851 0f04 	ldr.w	r0, [r1, #4]!
   23b48:	f842 0f04 	str.w	r0, [r2, #4]!
   23b4c:	3301      	adds	r3, #1
   23b4e:	429c      	cmp	r4, r3
   23b50:	d8f8      	bhi.n	23b44 <ct_inverse_mod_n+0x32c>
   23b52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   23b54:	3301      	adds	r3, #1
   23b56:	647b      	str	r3, [r7, #68]	; 0x44
   23b58:	69ba      	ldr	r2, [r7, #24]
   23b5a:	4293      	cmp	r3, r2
   23b5c:	f4ff aef4 	bcc.w	23948 <ct_inverse_mod_n+0x130>
   23b60:	4b20      	ldr	r3, [pc, #128]	; (23be4 <ct_inverse_mod_n+0x3cc>)
   23b62:	68f9      	ldr	r1, [r7, #12]
   23b64:	fba3 2301 	umull	r2, r3, r3, r1
   23b68:	f023 020f 	bic.w	r2, r3, #15
   23b6c:	eba2 1313 	sub.w	r3, r2, r3, lsr #4
   23b70:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
   23b74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   23b76:	4641      	mov	r1, r8
   23b78:	f107 0050 	add.w	r0, r7, #80	; 0x50
   23b7c:	f7fc fe34 	bl	207e8 <inner_loop_n>
   23b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   23b82:	9301      	str	r3, [sp, #4]
   23b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   23b86:	9300      	str	r3, [sp, #0]
   23b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   23b8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
   23b8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   23b8e:	68bc      	ldr	r4, [r7, #8]
   23b90:	4620      	mov	r0, r4
   23b92:	f7ff fdf0 	bl	23776 <smul_2n>
   23b96:	4622      	mov	r2, r4
   23b98:	6c38      	ldr	r0, [r7, #64]	; 0x40
   23b9a:	1823      	adds	r3, r4, r0
   23b9c:	f853 4c04 	ldr.w	r4, [r3, #-4]
   23ba0:	17e4      	asrs	r4, r4, #31
   23ba2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   23ba6:	b1cb      	cbz	r3, 23bdc <ct_inverse_mod_n+0x3c4>
   23ba8:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
   23bac:	3901      	subs	r1, #1
   23bae:	eb02 0181 	add.w	r1, r2, r1, lsl #2
   23bb2:	687b      	ldr	r3, [r7, #4]
   23bb4:	1f1e      	subs	r6, r3, #4
   23bb6:	f1a2 0c04 	sub.w	ip, r2, #4
   23bba:	4484      	add	ip, r0
   23bbc:	2200      	movs	r2, #0
   23bbe:	4615      	mov	r5, r2
   23bc0:	f856 3f04 	ldr.w	r3, [r6, #4]!
   23bc4:	4023      	ands	r3, r4
   23bc6:	f851 0f04 	ldr.w	r0, [r1, #4]!
   23bca:	1880      	adds	r0, r0, r2
   23bcc:	eb45 0205 	adc.w	r2, r5, r5
   23bd0:	181b      	adds	r3, r3, r0
   23bd2:	600b      	str	r3, [r1, #0]
   23bd4:	f142 0200 	adc.w	r2, r2, #0
   23bd8:	4561      	cmp	r1, ip
   23bda:	d1f1      	bne.n	23bc0 <ct_inverse_mod_n+0x3a8>
   23bdc:	3774      	adds	r7, #116	; 0x74
   23bde:	46bd      	mov	sp, r7
   23be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23be4:	88888889 	.word	0x88888889

00023be8 <blst_p1_cneg>:
   23be8:	b508      	push	{r3, lr}
   23bea:	1e4b      	subs	r3, r1, #1
   23bec:	ea23 0101 	bic.w	r1, r3, r1
   23bf0:	43c9      	mvns	r1, r1
   23bf2:	0fc9      	lsrs	r1, r1, #31
   23bf4:	f7fd ff86 	bl	21b04 <POINTonE1_cneg>
   23bf8:	bd08      	pop	{r3, pc}

00023bfa <blst_p1_from_affine>:
   23bfa:	b430      	push	{r4, r5}
   23bfc:	1f0a      	subs	r2, r1, #4
   23bfe:	f1a0 0c04 	sub.w	ip, r0, #4
   23c02:	f101 045c 	add.w	r4, r1, #92	; 0x5c
   23c06:	4613      	mov	r3, r2
   23c08:	f853 5f04 	ldr.w	r5, [r3, #4]!
   23c0c:	f84c 5f04 	str.w	r5, [ip, #4]!
   23c10:	42a3      	cmp	r3, r4
   23c12:	d1f9      	bne.n	23c08 <blst_p1_from_affine+0xe>
   23c14:	4613      	mov	r3, r2
   23c16:	f04f 0c00 	mov.w	ip, #0
   23c1a:	f853 5f04 	ldr.w	r5, [r3, #4]!
   23c1e:	ea4c 0c05 	orr.w	ip, ip, r5
   23c22:	42a3      	cmp	r3, r4
   23c24:	d1f9      	bne.n	23c1a <blst_p1_from_affine+0x20>
   23c26:	f10c 33ff 	add.w	r3, ip, #4294967295
   23c2a:	ea23 0c0c 	bic.w	ip, r3, ip
   23c2e:	ea4f 7cec 	mov.w	ip, ip, asr #31
   23c32:	4c09      	ldr	r4, [pc, #36]	; (23c58 <blst_p1_from_affine+0x5e>)
   23c34:	305c      	adds	r0, #92	; 0x5c
   23c36:	f101 052c 	add.w	r5, r1, #44	; 0x2c
   23c3a:	f854 1b04 	ldr.w	r1, [r4], #4
   23c3e:	f852 3f04 	ldr.w	r3, [r2, #4]!
   23c42:	404b      	eors	r3, r1
   23c44:	ea03 030c 	and.w	r3, r3, ip
   23c48:	404b      	eors	r3, r1
   23c4a:	f840 3f04 	str.w	r3, [r0, #4]!
   23c4e:	42aa      	cmp	r2, r5
   23c50:	d1f3      	bne.n	23c3a <blst_p1_from_affine+0x40>
   23c52:	bc30      	pop	{r4, r5}
   23c54:	4770      	bx	lr
   23c56:	bf00      	nop
   23c58:	00038718 	.word	0x00038718

00023c5c <blst_p1_affine_on_curve>:
   23c5c:	b508      	push	{r3, lr}
   23c5e:	f7fd fea3 	bl	219a8 <POINTonE1_affine_on_curve>
   23c62:	bd08      	pop	{r3, pc}

00023c64 <blst_p1_on_curve>:
   23c64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23c68:	b0a7      	sub	sp, #156	; 0x9c
   23c6a:	4605      	mov	r5, r0
   23c6c:	f100 0760 	add.w	r7, r0, #96	; 0x60
   23c70:	f100 035c 	add.w	r3, r0, #92	; 0x5c
   23c74:	f100 028c 	add.w	r2, r0, #140	; 0x8c
   23c78:	f04f 0c00 	mov.w	ip, #0
   23c7c:	f853 4f04 	ldr.w	r4, [r3, #4]!
   23c80:	ea4c 0c04 	orr.w	ip, ip, r4
   23c84:	4293      	cmp	r3, r2
   23c86:	d1f9      	bne.n	23c7c <blst_p1_on_curve+0x18>
   23c88:	f10c 36ff 	add.w	r6, ip, #4294967295
   23c8c:	ea26 0c0c 	bic.w	ip, r6, ip
   23c90:	ea4f 76dc 	mov.w	r6, ip, lsr #31
   23c94:	4c32      	ldr	r4, [pc, #200]	; (23d60 <blst_p1_on_curve+0xfc>)
   23c96:	f04f 080c 	mov.w	r8, #12
   23c9a:	f8cd 8004 	str.w	r8, [sp, #4]
   23c9e:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 23d64 <blst_p1_on_curve+0x100>
   23ca2:	f8cd 9000 	str.w	r9, [sp]
   23ca6:	4623      	mov	r3, r4
   23ca8:	463a      	mov	r2, r7
   23caa:	4639      	mov	r1, r7
   23cac:	a81a      	add	r0, sp, #104	; 0x68
   23cae:	f7fc fe8f 	bl	209d0 <mul_mont_n>
   23cb2:	f8cd 8004 	str.w	r8, [sp, #4]
   23cb6:	f8cd 9000 	str.w	r9, [sp]
   23cba:	4623      	mov	r3, r4
   23cbc:	463a      	mov	r2, r7
   23cbe:	a91a      	add	r1, sp, #104	; 0x68
   23cc0:	4608      	mov	r0, r1
   23cc2:	f7fc fe85 	bl	209d0 <mul_mont_n>
   23cc6:	f8cd 8004 	str.w	r8, [sp, #4]
   23cca:	f8cd 9000 	str.w	r9, [sp]
   23cce:	4623      	mov	r3, r4
   23cd0:	aa1a      	add	r2, sp, #104	; 0x68
   23cd2:	4611      	mov	r1, r2
   23cd4:	4610      	mov	r0, r2
   23cd6:	f7fc fe7b 	bl	209d0 <mul_mont_n>
   23cda:	f8cd 8000 	str.w	r8, [sp]
   23cde:	4623      	mov	r3, r4
   23ce0:	2202      	movs	r2, #2
   23ce2:	a91a      	add	r1, sp, #104	; 0x68
   23ce4:	4608      	mov	r0, r1
   23ce6:	f7fd f943 	bl	20f70 <lshift_mod_n>
   23cea:	f8cd 8004 	str.w	r8, [sp, #4]
   23cee:	f8cd 9000 	str.w	r9, [sp]
   23cf2:	4623      	mov	r3, r4
   23cf4:	462a      	mov	r2, r5
   23cf6:	4629      	mov	r1, r5
   23cf8:	a802      	add	r0, sp, #8
   23cfa:	f7fc fe69 	bl	209d0 <mul_mont_n>
   23cfe:	f8cd 8004 	str.w	r8, [sp, #4]
   23d02:	f8cd 9000 	str.w	r9, [sp]
   23d06:	4623      	mov	r3, r4
   23d08:	462a      	mov	r2, r5
   23d0a:	a902      	add	r1, sp, #8
   23d0c:	4608      	mov	r0, r1
   23d0e:	f7fc fe5f 	bl	209d0 <mul_mont_n>
   23d12:	f8cd 8000 	str.w	r8, [sp]
   23d16:	4623      	mov	r3, r4
   23d18:	aa1a      	add	r2, sp, #104	; 0x68
   23d1a:	a902      	add	r1, sp, #8
   23d1c:	4608      	mov	r0, r1
   23d1e:	f7fc ffff 	bl	20d20 <add_mod_n>
   23d22:	f105 0130 	add.w	r1, r5, #48	; 0x30
   23d26:	f8cd 8004 	str.w	r8, [sp, #4]
   23d2a:	f8cd 9000 	str.w	r9, [sp]
   23d2e:	4623      	mov	r3, r4
   23d30:	460a      	mov	r2, r1
   23d32:	a80e      	add	r0, sp, #56	; 0x38
   23d34:	f7fc fe4c 	bl	209d0 <mul_mont_n>
   23d38:	aa02      	add	r2, sp, #8
   23d3a:	a90e      	add	r1, sp, #56	; 0x38
   23d3c:	460d      	mov	r5, r1
   23d3e:	2000      	movs	r0, #0
   23d40:	f852 3b04 	ldr.w	r3, [r2], #4
   23d44:	f851 4b04 	ldr.w	r4, [r1], #4
   23d48:	4063      	eors	r3, r4
   23d4a:	4318      	orrs	r0, r3
   23d4c:	42aa      	cmp	r2, r5
   23d4e:	d1f7      	bne.n	23d40 <blst_p1_on_curve+0xdc>
   23d50:	1e43      	subs	r3, r0, #1
   23d52:	ea23 0000 	bic.w	r0, r3, r0
   23d56:	ea46 70d0 	orr.w	r0, r6, r0, lsr #31
   23d5a:	b027      	add	sp, #156	; 0x9c
   23d5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23d60:	00038688 	.word	0x00038688
   23d64:	fffcfffd 	.word	0xfffcfffd

00023d68 <blst_p1_affine_serialize>:
   23d68:	b510      	push	{r4, lr}
   23d6a:	1f0b      	subs	r3, r1, #4
   23d6c:	f101 0c5c 	add.w	ip, r1, #92	; 0x5c
   23d70:	2200      	movs	r2, #0
   23d72:	f853 4f04 	ldr.w	r4, [r3, #4]!
   23d76:	4322      	orrs	r2, r4
   23d78:	4563      	cmp	r3, ip
   23d7a:	d1fa      	bne.n	23d72 <blst_p1_affine_serialize+0xa>
   23d7c:	1e53      	subs	r3, r2, #1
   23d7e:	4393      	bics	r3, r2
   23d80:	d50a      	bpl.n	23d98 <blst_p1_affine_serialize+0x30>
   23d82:	1e43      	subs	r3, r0, #1
   23d84:	f100 015f 	add.w	r1, r0, #95	; 0x5f
   23d88:	2200      	movs	r2, #0
   23d8a:	f803 2f01 	strb.w	r2, [r3, #1]!
   23d8e:	428b      	cmp	r3, r1
   23d90:	d1fb      	bne.n	23d8a <blst_p1_affine_serialize+0x22>
   23d92:	2340      	movs	r3, #64	; 0x40
   23d94:	7003      	strb	r3, [r0, #0]
   23d96:	bd10      	pop	{r4, pc}
   23d98:	f7fd fc86 	bl	216a8 <POINTonE1_affine_Serialize_BE>
   23d9c:	e7fb      	b.n	23d96 <blst_p1_affine_serialize+0x2e>

00023d9e <blst_p1_affine_compress>:
   23d9e:	b538      	push	{r3, r4, r5, lr}
   23da0:	4605      	mov	r5, r0
   23da2:	1f0b      	subs	r3, r1, #4
   23da4:	f101 0c5c 	add.w	ip, r1, #92	; 0x5c
   23da8:	2200      	movs	r2, #0
   23daa:	f853 4f04 	ldr.w	r4, [r3, #4]!
   23dae:	4322      	orrs	r2, r4
   23db0:	4563      	cmp	r3, ip
   23db2:	d1fa      	bne.n	23daa <blst_p1_affine_compress+0xc>
   23db4:	1e53      	subs	r3, r2, #1
   23db6:	4393      	bics	r3, r2
   23db8:	d50a      	bpl.n	23dd0 <blst_p1_affine_compress+0x32>
   23dba:	1e6b      	subs	r3, r5, #1
   23dbc:	f105 012f 	add.w	r1, r5, #47	; 0x2f
   23dc0:	2200      	movs	r2, #0
   23dc2:	f803 2f01 	strb.w	r2, [r3, #1]!
   23dc6:	428b      	cmp	r3, r1
   23dc8:	d1fb      	bne.n	23dc2 <blst_p1_affine_compress+0x24>
   23dca:	23c0      	movs	r3, #192	; 0xc0
   23dcc:	702b      	strb	r3, [r5, #0]
   23dce:	bd38      	pop	{r3, r4, r5, pc}
   23dd0:	4628      	mov	r0, r5
   23dd2:	f7fd fc34 	bl	2163e <POINTonE1_affine_Compress_BE>
   23dd6:	0103      	lsls	r3, r0, #4
   23dd8:	f003 0320 	and.w	r3, r3, #32
   23ddc:	782a      	ldrb	r2, [r5, #0]
   23dde:	4313      	orrs	r3, r2
   23de0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   23de4:	702b      	strb	r3, [r5, #0]
   23de6:	e7f2      	b.n	23dce <blst_p1_affine_compress+0x30>

00023de8 <blst_p1_is_equal>:
   23de8:	b508      	push	{r3, lr}
   23dea:	f7fd ffb4 	bl	21d56 <POINTonE1_is_equal>
   23dee:	bd08      	pop	{r3, pc}

00023df0 <blst_p1_is_inf>:
   23df0:	f100 035c 	add.w	r3, r0, #92	; 0x5c
   23df4:	f100 018c 	add.w	r1, r0, #140	; 0x8c
   23df8:	2000      	movs	r0, #0
   23dfa:	f853 2f04 	ldr.w	r2, [r3, #4]!
   23dfe:	4310      	orrs	r0, r2
   23e00:	428b      	cmp	r3, r1
   23e02:	d1fa      	bne.n	23dfa <blst_p1_is_inf+0xa>
   23e04:	1e43      	subs	r3, r0, #1
   23e06:	ea23 0000 	bic.w	r0, r3, r0
   23e0a:	0fc0      	lsrs	r0, r0, #31
   23e0c:	4770      	bx	lr

00023e0e <blst_p1_generator>:
   23e0e:	4801      	ldr	r0, [pc, #4]	; (23e14 <blst_p1_generator+0x6>)
   23e10:	4770      	bx	lr
   23e12:	bf00      	nop
   23e14:	00039378 	.word	0x00039378

00023e18 <blst_p1_affine_is_inf>:
   23e18:	1f03      	subs	r3, r0, #4
   23e1a:	f100 015c 	add.w	r1, r0, #92	; 0x5c
   23e1e:	2000      	movs	r0, #0
   23e20:	f853 2f04 	ldr.w	r2, [r3, #4]!
   23e24:	4310      	orrs	r0, r2
   23e26:	428b      	cmp	r3, r1
   23e28:	d1fa      	bne.n	23e20 <blst_p1_affine_is_inf+0x8>
   23e2a:	1e43      	subs	r3, r0, #1
   23e2c:	ea23 0000 	bic.w	r0, r3, r0
   23e30:	0fc0      	lsrs	r0, r0, #31
   23e32:	4770      	bx	lr

00023e34 <blst_p1_affine_generator>:
   23e34:	4800      	ldr	r0, [pc, #0]	; (23e38 <blst_p1_affine_generator+0x4>)
   23e36:	4770      	bx	lr
   23e38:	00039378 	.word	0x00039378

00023e3c <blst_p1_in_g1>:
   23e3c:	b508      	push	{r3, lr}
   23e3e:	f7ff fbf5 	bl	2362c <POINTonE1_in_G1>
   23e42:	bd08      	pop	{r3, pc}

00023e44 <blst_p1_affine_in_g1>:
   23e44:	b510      	push	{r4, lr}
   23e46:	b0a4      	sub	sp, #144	; 0x90
   23e48:	1f02      	subs	r2, r0, #4
   23e4a:	466b      	mov	r3, sp
   23e4c:	f10d 0c60 	add.w	ip, sp, #96	; 0x60
   23e50:	4611      	mov	r1, r2
   23e52:	f851 4f04 	ldr.w	r4, [r1, #4]!
   23e56:	f843 4b04 	str.w	r4, [r3], #4
   23e5a:	4563      	cmp	r3, ip
   23e5c:	d1f9      	bne.n	23e52 <blst_p1_affine_in_g1+0xe>
   23e5e:	f100 0c5c 	add.w	ip, r0, #92	; 0x5c
   23e62:	4613      	mov	r3, r2
   23e64:	2100      	movs	r1, #0
   23e66:	f853 4f04 	ldr.w	r4, [r3, #4]!
   23e6a:	4321      	orrs	r1, r4
   23e6c:	4563      	cmp	r3, ip
   23e6e:	d1fa      	bne.n	23e66 <blst_p1_affine_in_g1+0x22>
   23e70:	f101 3eff 	add.w	lr, r1, #4294967295
   23e74:	ea2e 0101 	bic.w	r1, lr, r1
   23e78:	ea4f 7ee1 	mov.w	lr, r1, asr #31
   23e7c:	4c0a      	ldr	r4, [pc, #40]	; (23ea8 <blst_p1_affine_in_g1+0x64>)
   23e7e:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   23e82:	302c      	adds	r0, #44	; 0x2c
   23e84:	f854 1b04 	ldr.w	r1, [r4], #4
   23e88:	f852 3f04 	ldr.w	r3, [r2, #4]!
   23e8c:	404b      	eors	r3, r1
   23e8e:	ea03 030e 	and.w	r3, r3, lr
   23e92:	404b      	eors	r3, r1
   23e94:	f84c 3f04 	str.w	r3, [ip, #4]!
   23e98:	4282      	cmp	r2, r0
   23e9a:	d1f3      	bne.n	23e84 <blst_p1_affine_in_g1+0x40>
   23e9c:	4668      	mov	r0, sp
   23e9e:	f7ff fbc5 	bl	2362c <POINTonE1_in_G1>
   23ea2:	b024      	add	sp, #144	; 0x90
   23ea4:	bd10      	pop	{r4, pc}
   23ea6:	bf00      	nop
   23ea8:	00038718 	.word	0x00038718

00023eac <blst_p2_cneg>:
   23eac:	b508      	push	{r3, lr}
   23eae:	1e4b      	subs	r3, r1, #1
   23eb0:	ea23 0101 	bic.w	r1, r3, r1
   23eb4:	43c9      	mvns	r1, r1
   23eb6:	0fc9      	lsrs	r1, r1, #31
   23eb8:	f7fd fe90 	bl	21bdc <POINTonE2_cneg>
   23ebc:	bd08      	pop	{r3, pc}

00023ebe <blst_p2_from_affine>:
   23ebe:	b510      	push	{r4, lr}
   23ec0:	f1a1 0c04 	sub.w	ip, r1, #4
   23ec4:	1f02      	subs	r2, r0, #4
   23ec6:	31bc      	adds	r1, #188	; 0xbc
   23ec8:	4663      	mov	r3, ip
   23eca:	f853 4f04 	ldr.w	r4, [r3, #4]!
   23ece:	f842 4f04 	str.w	r4, [r2, #4]!
   23ed2:	428b      	cmp	r3, r1
   23ed4:	d1f9      	bne.n	23eca <blst_p2_from_affine+0xc>
   23ed6:	4663      	mov	r3, ip
   23ed8:	2200      	movs	r2, #0
   23eda:	f853 4f04 	ldr.w	r4, [r3, #4]!
   23ede:	4322      	orrs	r2, r4
   23ee0:	428b      	cmp	r3, r1
   23ee2:	d1fa      	bne.n	23eda <blst_p2_from_affine+0x1c>
   23ee4:	1e54      	subs	r4, r2, #1
   23ee6:	ea24 0202 	bic.w	r2, r4, r2
   23eea:	17d4      	asrs	r4, r2, #31
   23eec:	4b08      	ldr	r3, [pc, #32]	; (23f10 <blst_p2_from_affine+0x52>)
   23eee:	f103 0290 	add.w	r2, r3, #144	; 0x90
   23ef2:	30bc      	adds	r0, #188	; 0xbc
   23ef4:	f103 0ef0 	add.w	lr, r3, #240	; 0xf0
   23ef8:	f852 1b04 	ldr.w	r1, [r2], #4
   23efc:	f85c 3f04 	ldr.w	r3, [ip, #4]!
   23f00:	404b      	eors	r3, r1
   23f02:	4023      	ands	r3, r4
   23f04:	404b      	eors	r3, r1
   23f06:	f840 3f04 	str.w	r3, [r0, #4]!
   23f0a:	4572      	cmp	r2, lr
   23f0c:	d1f4      	bne.n	23ef8 <blst_p2_from_affine+0x3a>
   23f0e:	bd10      	pop	{r4, pc}
   23f10:	00038688 	.word	0x00038688

00023f14 <blst_p2_affine_serialize>:
   23f14:	b510      	push	{r4, lr}
   23f16:	1f0b      	subs	r3, r1, #4
   23f18:	f101 0cbc 	add.w	ip, r1, #188	; 0xbc
   23f1c:	2200      	movs	r2, #0
   23f1e:	f853 4f04 	ldr.w	r4, [r3, #4]!
   23f22:	4322      	orrs	r2, r4
   23f24:	4563      	cmp	r3, ip
   23f26:	d1fa      	bne.n	23f1e <blst_p2_affine_serialize+0xa>
   23f28:	1e53      	subs	r3, r2, #1
   23f2a:	4393      	bics	r3, r2
   23f2c:	d50a      	bpl.n	23f44 <blst_p2_affine_serialize+0x30>
   23f2e:	1e43      	subs	r3, r0, #1
   23f30:	f100 01bf 	add.w	r1, r0, #191	; 0xbf
   23f34:	2200      	movs	r2, #0
   23f36:	f803 2f01 	strb.w	r2, [r3, #1]!
   23f3a:	428b      	cmp	r3, r1
   23f3c:	d1fb      	bne.n	23f36 <blst_p2_affine_serialize+0x22>
   23f3e:	2340      	movs	r3, #64	; 0x40
   23f40:	7003      	strb	r3, [r0, #0]
   23f42:	bd10      	pop	{r4, pc}
   23f44:	f7fd fc80 	bl	21848 <POINTonE2_affine_Serialize_BE>
   23f48:	e7fb      	b.n	23f42 <blst_p2_affine_serialize+0x2e>

00023f4a <blst_p2_affine_compress>:
   23f4a:	b538      	push	{r3, r4, r5, lr}
   23f4c:	4605      	mov	r5, r0
   23f4e:	1f0b      	subs	r3, r1, #4
   23f50:	f101 0cbc 	add.w	ip, r1, #188	; 0xbc
   23f54:	2200      	movs	r2, #0
   23f56:	f853 4f04 	ldr.w	r4, [r3, #4]!
   23f5a:	4322      	orrs	r2, r4
   23f5c:	4563      	cmp	r3, ip
   23f5e:	d1fa      	bne.n	23f56 <blst_p2_affine_compress+0xc>
   23f60:	1e53      	subs	r3, r2, #1
   23f62:	4393      	bics	r3, r2
   23f64:	d50a      	bpl.n	23f7c <blst_p2_affine_compress+0x32>
   23f66:	1e6b      	subs	r3, r5, #1
   23f68:	f105 015f 	add.w	r1, r5, #95	; 0x5f
   23f6c:	2200      	movs	r2, #0
   23f6e:	f803 2f01 	strb.w	r2, [r3, #1]!
   23f72:	428b      	cmp	r3, r1
   23f74:	d1fb      	bne.n	23f6e <blst_p2_affine_compress+0x24>
   23f76:	23c0      	movs	r3, #192	; 0xc0
   23f78:	702b      	strb	r3, [r5, #0]
   23f7a:	bd38      	pop	{r3, r4, r5, pc}
   23f7c:	4628      	mov	r0, r5
   23f7e:	f7fd fbdb 	bl	21738 <POINTonE2_affine_Compress_BE>
   23f82:	0103      	lsls	r3, r0, #4
   23f84:	f003 0320 	and.w	r3, r3, #32
   23f88:	782a      	ldrb	r2, [r5, #0]
   23f8a:	4313      	orrs	r3, r2
   23f8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   23f90:	702b      	strb	r3, [r5, #0]
   23f92:	e7f2      	b.n	23f7a <blst_p2_affine_compress+0x30>

00023f94 <blst_p2_is_inf>:
   23f94:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
   23f98:	f500 718e 	add.w	r1, r0, #284	; 0x11c
   23f9c:	2000      	movs	r0, #0
   23f9e:	f853 2f04 	ldr.w	r2, [r3, #4]!
   23fa2:	4310      	orrs	r0, r2
   23fa4:	428b      	cmp	r3, r1
   23fa6:	d1fa      	bne.n	23f9e <blst_p2_is_inf+0xa>
   23fa8:	1e43      	subs	r3, r0, #1
   23faa:	ea23 0000 	bic.w	r0, r3, r0
   23fae:	0fc0      	lsrs	r0, r0, #31
   23fb0:	4770      	bx	lr

00023fb2 <blst_p2_generator>:
   23fb2:	4801      	ldr	r0, [pc, #4]	; (23fb8 <blst_p2_generator+0x6>)
   23fb4:	4770      	bx	lr
   23fb6:	bf00      	nop
   23fb8:	00039408 	.word	0x00039408

00023fbc <blst_p2_affine_is_inf>:
   23fbc:	1f03      	subs	r3, r0, #4
   23fbe:	f100 01bc 	add.w	r1, r0, #188	; 0xbc
   23fc2:	2000      	movs	r0, #0
   23fc4:	f853 2f04 	ldr.w	r2, [r3, #4]!
   23fc8:	4310      	orrs	r0, r2
   23fca:	428b      	cmp	r3, r1
   23fcc:	d1fa      	bne.n	23fc4 <blst_p2_affine_is_inf+0x8>
   23fce:	1e43      	subs	r3, r0, #1
   23fd0:	ea23 0000 	bic.w	r0, r3, r0
   23fd4:	0fc0      	lsrs	r0, r0, #31
   23fd6:	4770      	bx	lr

00023fd8 <blst_p2_affine_generator>:
   23fd8:	4800      	ldr	r0, [pc, #0]	; (23fdc <blst_p2_affine_generator+0x4>)
   23fda:	4770      	bx	lr
   23fdc:	00039408 	.word	0x00039408

00023fe0 <blst_fp12_conjugate>:
   23fe0:	b508      	push	{r3, lr}
   23fe2:	f7fd feb1 	bl	21d48 <conjugate_fp12>
   23fe6:	bd08      	pop	{r3, pc}

00023fe8 <blst_fp12_is_equal>:
   23fe8:	b410      	push	{r4}
   23fea:	1f02      	subs	r2, r0, #4
   23fec:	3904      	subs	r1, #4
   23fee:	f500 7c0f 	add.w	ip, r0, #572	; 0x23c
   23ff2:	2000      	movs	r0, #0
   23ff4:	f852 3f04 	ldr.w	r3, [r2, #4]!
   23ff8:	f851 4f04 	ldr.w	r4, [r1, #4]!
   23ffc:	4063      	eors	r3, r4
   23ffe:	4318      	orrs	r0, r3
   24000:	4562      	cmp	r2, ip
   24002:	d1f7      	bne.n	23ff4 <blst_fp12_is_equal+0xc>
   24004:	1e43      	subs	r3, r0, #1
   24006:	ea23 0000 	bic.w	r0, r3, r0
   2400a:	0fc0      	lsrs	r0, r0, #31
   2400c:	bc10      	pop	{r4}
   2400e:	4770      	bx	lr

00024010 <blst_fp12_is_one>:
   24010:	b510      	push	{r4, lr}
   24012:	f1a0 0c04 	sub.w	ip, r0, #4
   24016:	4b12      	ldr	r3, [pc, #72]	; (24060 <blst_fp12_is_one+0x50>)
   24018:	f103 0290 	add.w	r2, r3, #144	; 0x90
   2401c:	f103 0ef0 	add.w	lr, r3, #240	; 0xf0
   24020:	2100      	movs	r1, #0
   24022:	f852 3b04 	ldr.w	r3, [r2], #4
   24026:	f85c 4f04 	ldr.w	r4, [ip, #4]!
   2402a:	4063      	eors	r3, r4
   2402c:	4319      	orrs	r1, r3
   2402e:	4572      	cmp	r2, lr
   24030:	d1f7      	bne.n	24022 <blst_fp12_is_one+0x12>
   24032:	f101 3cff 	add.w	ip, r1, #4294967295
   24036:	ea2c 0101 	bic.w	r1, ip, r1
   2403a:	ea4f 7cd1 	mov.w	ip, r1, lsr #31
   2403e:	f100 035c 	add.w	r3, r0, #92	; 0x5c
   24042:	f500 740f 	add.w	r4, r0, #572	; 0x23c
   24046:	2200      	movs	r2, #0
   24048:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2404c:	430a      	orrs	r2, r1
   2404e:	42a3      	cmp	r3, r4
   24050:	d1fa      	bne.n	24048 <blst_fp12_is_one+0x38>
   24052:	1e50      	subs	r0, r2, #1
   24054:	ea20 0002 	bic.w	r0, r0, r2
   24058:	ea0c 70d0 	and.w	r0, ip, r0, lsr #31
   2405c:	bd10      	pop	{r4, pc}
   2405e:	bf00      	nop
   24060:	00038688 	.word	0x00038688

00024064 <blst_fp12_one>:
   24064:	4800      	ldr	r0, [pc, #0]	; (24068 <blst_fp12_one+0x4>)
   24066:	4770      	bx	lr
   24068:	00038718 	.word	0x00038718

0002406c <blst_pairing_sizeof>:
   2406c:	f44f 6047 	mov.w	r0, #3184	; 0xc70
   24070:	4770      	bx	lr

00024072 <blst_pairing_init>:
   24072:	2900      	cmp	r1, #0
   24074:	bf14      	ite	ne
   24076:	2140      	movne	r1, #64	; 0x40
   24078:	2100      	moveq	r1, #0
   2407a:	6001      	str	r1, [r0, #0]
   2407c:	2100      	movs	r1, #0
   2407e:	6041      	str	r1, [r0, #4]
   24080:	f500 6147 	add.w	r1, r0, #3184	; 0xc70
   24084:	4291      	cmp	r1, r2
   24086:	bf08      	it	eq
   24088:	222a      	moveq	r2, #42	; 0x2a
   2408a:	6082      	str	r2, [r0, #8]
   2408c:	60c3      	str	r3, [r0, #12]
   2408e:	4770      	bx	lr

00024090 <blst_pairing_get_dst>:
   24090:	4603      	mov	r3, r0
   24092:	6880      	ldr	r0, [r0, #8]
   24094:	282a      	cmp	r0, #42	; 0x2a
   24096:	bf08      	it	eq
   24098:	f503 6047 	addeq.w	r0, r3, #3184	; 0xc70
   2409c:	4770      	bx	lr

0002409e <mul_mont_sparse_256>:
   2409e:	b510      	push	{r4, lr}
   240a0:	b082      	sub	sp, #8
   240a2:	2408      	movs	r4, #8
   240a4:	9401      	str	r4, [sp, #4]
   240a6:	9c04      	ldr	r4, [sp, #16]
   240a8:	9400      	str	r4, [sp, #0]
   240aa:	f7fc fc91 	bl	209d0 <mul_mont_n>
   240ae:	b002      	add	sp, #8
   240b0:	bd10      	pop	{r4, pc}

000240b2 <sqr_mont_sparse_256>:
   240b2:	b510      	push	{r4, lr}
   240b4:	b082      	sub	sp, #8
   240b6:	2408      	movs	r4, #8
   240b8:	9401      	str	r4, [sp, #4]
   240ba:	9300      	str	r3, [sp, #0]
   240bc:	4613      	mov	r3, r2
   240be:	460a      	mov	r2, r1
   240c0:	f7fc fc86 	bl	209d0 <mul_mont_n>
   240c4:	b002      	add	sp, #8
   240c6:	bd10      	pop	{r4, pc}

000240c8 <mul_mont_384>:
   240c8:	b510      	push	{r4, lr}
   240ca:	b082      	sub	sp, #8
   240cc:	240c      	movs	r4, #12
   240ce:	9401      	str	r4, [sp, #4]
   240d0:	9c04      	ldr	r4, [sp, #16]
   240d2:	9400      	str	r4, [sp, #0]
   240d4:	f7fc fc7c 	bl	209d0 <mul_mont_n>
   240d8:	b002      	add	sp, #8
   240da:	bd10      	pop	{r4, pc}

000240dc <sqr_mont_384>:
   240dc:	b510      	push	{r4, lr}
   240de:	b082      	sub	sp, #8
   240e0:	240c      	movs	r4, #12
   240e2:	9401      	str	r4, [sp, #4]
   240e4:	9300      	str	r3, [sp, #0]
   240e6:	4613      	mov	r3, r2
   240e8:	460a      	mov	r2, r1
   240ea:	f7fc fc71 	bl	209d0 <mul_mont_n>
   240ee:	b002      	add	sp, #8
   240f0:	bd10      	pop	{r4, pc}

000240f2 <add_mod_256>:
   240f2:	b510      	push	{r4, lr}
   240f4:	b082      	sub	sp, #8
   240f6:	2408      	movs	r4, #8
   240f8:	9400      	str	r4, [sp, #0]
   240fa:	f7fc fe11 	bl	20d20 <add_mod_n>
   240fe:	b002      	add	sp, #8
   24100:	bd10      	pop	{r4, pc}

00024102 <add_mod_384>:
   24102:	b510      	push	{r4, lr}
   24104:	b082      	sub	sp, #8
   24106:	240c      	movs	r4, #12
   24108:	9400      	str	r4, [sp, #0]
   2410a:	f7fc fe09 	bl	20d20 <add_mod_n>
   2410e:	b002      	add	sp, #8
   24110:	bd10      	pop	{r4, pc}

00024112 <sub_mod_256>:
   24112:	b510      	push	{r4, lr}
   24114:	b082      	sub	sp, #8
   24116:	2408      	movs	r4, #8
   24118:	9400      	str	r4, [sp, #0]
   2411a:	f7fc faab 	bl	20674 <sub_mod_n>
   2411e:	b002      	add	sp, #8
   24120:	bd10      	pop	{r4, pc}

00024122 <sub_mod_384>:
   24122:	b510      	push	{r4, lr}
   24124:	b082      	sub	sp, #8
   24126:	240c      	movs	r4, #12
   24128:	9400      	str	r4, [sp, #0]
   2412a:	f7fc faa3 	bl	20674 <sub_mod_n>
   2412e:	b002      	add	sp, #8
   24130:	bd10      	pop	{r4, pc}

00024132 <mul_by_3_mod_256>:
   24132:	b508      	push	{r3, lr}
   24134:	2308      	movs	r3, #8
   24136:	f7fc fe7b 	bl	20e30 <mul_by_3_mod_n>
   2413a:	bd08      	pop	{r3, pc}

0002413c <mul_by_3_mod_384>:
   2413c:	b508      	push	{r3, lr}
   2413e:	230c      	movs	r3, #12
   24140:	f7fc fe76 	bl	20e30 <mul_by_3_mod_n>
   24144:	bd08      	pop	{r3, pc}

00024146 <lshift_mod_256>:
   24146:	b510      	push	{r4, lr}
   24148:	b082      	sub	sp, #8
   2414a:	2408      	movs	r4, #8
   2414c:	9400      	str	r4, [sp, #0]
   2414e:	f7fc ff0f 	bl	20f70 <lshift_mod_n>
   24152:	b002      	add	sp, #8
   24154:	bd10      	pop	{r4, pc}

00024156 <lshift_mod_384>:
   24156:	b510      	push	{r4, lr}
   24158:	b082      	sub	sp, #8
   2415a:	240c      	movs	r4, #12
   2415c:	9400      	str	r4, [sp, #0]
   2415e:	f7fc ff07 	bl	20f70 <lshift_mod_n>
   24162:	b002      	add	sp, #8
   24164:	bd10      	pop	{r4, pc}

00024166 <cneg_mod_256>:
   24166:	b510      	push	{r4, lr}
   24168:	b082      	sub	sp, #8
   2416a:	2408      	movs	r4, #8
   2416c:	9400      	str	r4, [sp, #0]
   2416e:	f7fd fc6b 	bl	21a48 <cneg_mod_n>
   24172:	b002      	add	sp, #8
   24174:	bd10      	pop	{r4, pc}

00024176 <cneg_mod_384>:
   24176:	b510      	push	{r4, lr}
   24178:	b082      	sub	sp, #8
   2417a:	240c      	movs	r4, #12
   2417c:	9400      	str	r4, [sp, #0]
   2417e:	f7fd fc63 	bl	21a48 <cneg_mod_n>
   24182:	b002      	add	sp, #8
   24184:	bd10      	pop	{r4, pc}

00024186 <check_mod_256>:
   24186:	b508      	push	{r3, lr}
   24188:	2208      	movs	r2, #8
   2418a:	f7fc faac 	bl	206e6 <check_mod_n>
   2418e:	bd08      	pop	{r3, pc}

00024190 <from_mont_256>:
   24190:	b510      	push	{r4, lr}
   24192:	b082      	sub	sp, #8
   24194:	2408      	movs	r4, #8
   24196:	9400      	str	r4, [sp, #0]
   24198:	f7fc ff4c 	bl	21034 <from_mont_n>
   2419c:	b002      	add	sp, #8
   2419e:	bd10      	pop	{r4, pc}

000241a0 <from_mont_384>:
   241a0:	b510      	push	{r4, lr}
   241a2:	b082      	sub	sp, #8
   241a4:	240c      	movs	r4, #12
   241a6:	9400      	str	r4, [sp, #0]
   241a8:	f7fc ff44 	bl	21034 <from_mont_n>
   241ac:	b002      	add	sp, #8
   241ae:	bd10      	pop	{r4, pc}

000241b0 <redc_mont_256>:
   241b0:	b510      	push	{r4, lr}
   241b2:	b082      	sub	sp, #8
   241b4:	2408      	movs	r4, #8
   241b6:	9400      	str	r4, [sp, #0]
   241b8:	f7fc ffbb 	bl	21132 <redc_mont_n>
   241bc:	b002      	add	sp, #8
   241be:	bd10      	pop	{r4, pc}

000241c0 <redc_mont_384>:
   241c0:	b510      	push	{r4, lr}
   241c2:	b082      	sub	sp, #8
   241c4:	240c      	movs	r4, #12
   241c6:	9400      	str	r4, [sp, #0]
   241c8:	f7fc ffb3 	bl	21132 <redc_mont_n>
   241cc:	b002      	add	sp, #8
   241ce:	bd10      	pop	{r4, pc}

000241d0 <rshift_mod_256>:
   241d0:	b510      	push	{r4, lr}
   241d2:	b082      	sub	sp, #8
   241d4:	2408      	movs	r4, #8
   241d6:	9400      	str	r4, [sp, #0]
   241d8:	f7fc fab4 	bl	20744 <rshift_mod_n>
   241dc:	b002      	add	sp, #8
   241de:	bd10      	pop	{r4, pc}

000241e0 <rshift_mod_384>:
   241e0:	b510      	push	{r4, lr}
   241e2:	b082      	sub	sp, #8
   241e4:	240c      	movs	r4, #12
   241e6:	9400      	str	r4, [sp, #0]
   241e8:	f7fc faac 	bl	20744 <rshift_mod_n>
   241ec:	b002      	add	sp, #8
   241ee:	bd10      	pop	{r4, pc}

000241f0 <div_by_2_mod_384>:
   241f0:	b500      	push	{lr}
   241f2:	b083      	sub	sp, #12
   241f4:	4613      	mov	r3, r2
   241f6:	220c      	movs	r2, #12
   241f8:	9200      	str	r2, [sp, #0]
   241fa:	2201      	movs	r2, #1
   241fc:	f7fc faa2 	bl	20744 <rshift_mod_n>
   24200:	b003      	add	sp, #12
   24202:	f85d fb04 	ldr.w	pc, [sp], #4

00024206 <eucl_inverse_mod_256>:
   24206:	b510      	push	{r4, lr}
   24208:	b082      	sub	sp, #8
   2420a:	2408      	movs	r4, #8
   2420c:	9400      	str	r4, [sp, #0]
   2420e:	f7fe fbff 	bl	22a10 <eucl_inverse_mod_n>
   24212:	b002      	add	sp, #8
   24214:	bd10      	pop	{r4, pc}

00024216 <sgn0_pty_mod_384>:
   24216:	b508      	push	{r3, lr}
   24218:	220c      	movs	r2, #12
   2421a:	f7fd f820 	bl	2125e <sgn0_pty_mod_n>
   2421e:	bd08      	pop	{r3, pc}

00024220 <sgn0_pty_mont_384>:
   24220:	b530      	push	{r4, r5, lr}
   24222:	b08f      	sub	sp, #60	; 0x3c
   24224:	460c      	mov	r4, r1
   24226:	4613      	mov	r3, r2
   24228:	250c      	movs	r5, #12
   2422a:	9500      	str	r5, [sp, #0]
   2422c:	460a      	mov	r2, r1
   2422e:	4601      	mov	r1, r0
   24230:	a802      	add	r0, sp, #8
   24232:	f7fc feff 	bl	21034 <from_mont_n>
   24236:	462a      	mov	r2, r5
   24238:	4621      	mov	r1, r4
   2423a:	a802      	add	r0, sp, #8
   2423c:	f7fd f80f 	bl	2125e <sgn0_pty_mod_n>
   24240:	b00f      	add	sp, #60	; 0x3c
   24242:	bd30      	pop	{r4, r5, pc}

00024244 <sgn0_pty_mod_384x>:
   24244:	b570      	push	{r4, r5, r6, lr}
   24246:	4605      	mov	r5, r0
   24248:	460e      	mov	r6, r1
   2424a:	220c      	movs	r2, #12
   2424c:	f7fd f807 	bl	2125e <sgn0_pty_mod_n>
   24250:	4604      	mov	r4, r0
   24252:	220c      	movs	r2, #12
   24254:	4631      	mov	r1, r6
   24256:	f105 0030 	add.w	r0, r5, #48	; 0x30
   2425a:	f7fd f800 	bl	2125e <sgn0_pty_mod_n>
   2425e:	f105 032c 	add.w	r3, r5, #44	; 0x2c
   24262:	f105 0c5c 	add.w	ip, r5, #92	; 0x5c
   24266:	2200      	movs	r2, #0
   24268:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2426c:	430a      	orrs	r2, r1
   2426e:	4563      	cmp	r3, ip
   24270:	d1fa      	bne.n	24268 <sgn0_pty_mod_384x+0x24>
   24272:	f102 3eff 	add.w	lr, r2, #4294967295
   24276:	ea2e 0202 	bic.w	r2, lr, r2
   2427a:	ea4f 7ed2 	mov.w	lr, r2, lsr #31
   2427e:	ea04 72e2 	and.w	r2, r4, r2, asr #31
   24282:	f10e 3eff 	add.w	lr, lr, #4294967295
   24286:	ea0e 0e00 	and.w	lr, lr, r0
   2428a:	ea4e 0e02 	orr.w	lr, lr, r2
   2428e:	1f2b      	subs	r3, r5, #4
   24290:	f105 0c2c 	add.w	ip, r5, #44	; 0x2c
   24294:	2200      	movs	r2, #0
   24296:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2429a:	430a      	orrs	r2, r1
   2429c:	4563      	cmp	r3, ip
   2429e:	d1fa      	bne.n	24296 <sgn0_pty_mod_384x+0x52>
   242a0:	1e53      	subs	r3, r2, #1
   242a2:	ea23 0202 	bic.w	r2, r3, r2
   242a6:	0fd3      	lsrs	r3, r2, #31
   242a8:	ea00 72e2 	and.w	r2, r0, r2, asr #31
   242ac:	1e58      	subs	r0, r3, #1
   242ae:	4004      	ands	r4, r0
   242b0:	4314      	orrs	r4, r2
   242b2:	f004 0401 	and.w	r4, r4, #1
   242b6:	f00e 0002 	and.w	r0, lr, #2
   242ba:	4320      	orrs	r0, r4
   242bc:	bd70      	pop	{r4, r5, r6, pc}

000242be <sgn0_pty_mont_384x>:
   242be:	b5f0      	push	{r4, r5, r6, r7, lr}
   242c0:	b09b      	sub	sp, #108	; 0x6c
   242c2:	4605      	mov	r5, r0
   242c4:	460c      	mov	r4, r1
   242c6:	4617      	mov	r7, r2
   242c8:	260c      	movs	r6, #12
   242ca:	9600      	str	r6, [sp, #0]
   242cc:	4613      	mov	r3, r2
   242ce:	460a      	mov	r2, r1
   242d0:	4601      	mov	r1, r0
   242d2:	a802      	add	r0, sp, #8
   242d4:	f7fc feae 	bl	21034 <from_mont_n>
   242d8:	9600      	str	r6, [sp, #0]
   242da:	463b      	mov	r3, r7
   242dc:	4622      	mov	r2, r4
   242de:	f105 0130 	add.w	r1, r5, #48	; 0x30
   242e2:	a80e      	add	r0, sp, #56	; 0x38
   242e4:	f7fc fea6 	bl	21034 <from_mont_n>
   242e8:	4632      	mov	r2, r6
   242ea:	4621      	mov	r1, r4
   242ec:	a802      	add	r0, sp, #8
   242ee:	f7fc ffb6 	bl	2125e <sgn0_pty_mod_n>
   242f2:	4605      	mov	r5, r0
   242f4:	4632      	mov	r2, r6
   242f6:	4621      	mov	r1, r4
   242f8:	a80e      	add	r0, sp, #56	; 0x38
   242fa:	f7fc ffb0 	bl	2125e <sgn0_pty_mod_n>
   242fe:	aa0d      	add	r2, sp, #52	; 0x34
   24300:	ab02      	add	r3, sp, #8
   24302:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
   24306:	2100      	movs	r1, #0
   24308:	f852 4f04 	ldr.w	r4, [r2, #4]!
   2430c:	4321      	orrs	r1, r4
   2430e:	4562      	cmp	r2, ip
   24310:	d1fa      	bne.n	24308 <sgn0_pty_mont_384x+0x4a>
   24312:	1e4c      	subs	r4, r1, #1
   24314:	ea24 0101 	bic.w	r1, r4, r1
   24318:	0fcc      	lsrs	r4, r1, #31
   2431a:	ea05 71e1 	and.w	r1, r5, r1, asr #31
   2431e:	3c01      	subs	r4, #1
   24320:	4004      	ands	r4, r0
   24322:	430c      	orrs	r4, r1
   24324:	f103 0c30 	add.w	ip, r3, #48	; 0x30
   24328:	2200      	movs	r2, #0
   2432a:	f853 1b04 	ldr.w	r1, [r3], #4
   2432e:	430a      	orrs	r2, r1
   24330:	4563      	cmp	r3, ip
   24332:	d1fa      	bne.n	2432a <sgn0_pty_mont_384x+0x6c>
   24334:	1e53      	subs	r3, r2, #1
   24336:	ea23 0202 	bic.w	r2, r3, r2
   2433a:	0fd3      	lsrs	r3, r2, #31
   2433c:	ea00 70e2 	and.w	r0, r0, r2, asr #31
   24340:	3b01      	subs	r3, #1
   24342:	402b      	ands	r3, r5
   24344:	4303      	orrs	r3, r0
   24346:	f003 0301 	and.w	r3, r3, #1
   2434a:	f004 0002 	and.w	r0, r4, #2
   2434e:	4318      	orrs	r0, r3
   24350:	b01b      	add	sp, #108	; 0x6c
   24352:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024354 <mul_mont_384x>:
   24354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24358:	b0a7      	sub	sp, #156	; 0x9c
   2435a:	4605      	mov	r5, r0
   2435c:	4688      	mov	r8, r1
   2435e:	4617      	mov	r7, r2
   24360:	461c      	mov	r4, r3
   24362:	f8dd 90c0 	ldr.w	r9, [sp, #192]	; 0xc0
   24366:	f101 0a30 	add.w	sl, r1, #48	; 0x30
   2436a:	260c      	movs	r6, #12
   2436c:	9600      	str	r6, [sp, #0]
   2436e:	4652      	mov	r2, sl
   24370:	a81a      	add	r0, sp, #104	; 0x68
   24372:	f7fc fcd5 	bl	20d20 <add_mod_n>
   24376:	f107 0b30 	add.w	fp, r7, #48	; 0x30
   2437a:	9600      	str	r6, [sp, #0]
   2437c:	4623      	mov	r3, r4
   2437e:	465a      	mov	r2, fp
   24380:	4639      	mov	r1, r7
   24382:	a80e      	add	r0, sp, #56	; 0x38
   24384:	f7fc fccc 	bl	20d20 <add_mod_n>
   24388:	9601      	str	r6, [sp, #4]
   2438a:	f8cd 9000 	str.w	r9, [sp]
   2438e:	4623      	mov	r3, r4
   24390:	aa1a      	add	r2, sp, #104	; 0x68
   24392:	a90e      	add	r1, sp, #56	; 0x38
   24394:	4608      	mov	r0, r1
   24396:	f7fc fb1b 	bl	209d0 <mul_mont_n>
   2439a:	9601      	str	r6, [sp, #4]
   2439c:	f8cd 9000 	str.w	r9, [sp]
   243a0:	4623      	mov	r3, r4
   243a2:	463a      	mov	r2, r7
   243a4:	4641      	mov	r1, r8
   243a6:	a81a      	add	r0, sp, #104	; 0x68
   243a8:	f7fc fb12 	bl	209d0 <mul_mont_n>
   243ac:	9601      	str	r6, [sp, #4]
   243ae:	f8cd 9000 	str.w	r9, [sp]
   243b2:	4623      	mov	r3, r4
   243b4:	465a      	mov	r2, fp
   243b6:	4651      	mov	r1, sl
   243b8:	a802      	add	r0, sp, #8
   243ba:	f7fc fb09 	bl	209d0 <mul_mont_n>
   243be:	9600      	str	r6, [sp, #0]
   243c0:	4623      	mov	r3, r4
   243c2:	aa02      	add	r2, sp, #8
   243c4:	a91a      	add	r1, sp, #104	; 0x68
   243c6:	4628      	mov	r0, r5
   243c8:	f7fc f954 	bl	20674 <sub_mod_n>
   243cc:	3530      	adds	r5, #48	; 0x30
   243ce:	9600      	str	r6, [sp, #0]
   243d0:	4623      	mov	r3, r4
   243d2:	aa1a      	add	r2, sp, #104	; 0x68
   243d4:	a90e      	add	r1, sp, #56	; 0x38
   243d6:	4628      	mov	r0, r5
   243d8:	f7fc f94c 	bl	20674 <sub_mod_n>
   243dc:	9600      	str	r6, [sp, #0]
   243de:	4623      	mov	r3, r4
   243e0:	aa02      	add	r2, sp, #8
   243e2:	4629      	mov	r1, r5
   243e4:	4628      	mov	r0, r5
   243e6:	f7fc f945 	bl	20674 <sub_mod_n>
   243ea:	b027      	add	sp, #156	; 0x9c
   243ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000243f0 <psi>:
   243f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   243f2:	b083      	sub	sp, #12
   243f4:	4604      	mov	r4, r0
   243f6:	1f0b      	subs	r3, r1, #4
   243f8:	1f02      	subs	r2, r0, #4
   243fa:	f501 7c8e 	add.w	ip, r1, #284	; 0x11c
   243fe:	f853 1f04 	ldr.w	r1, [r3, #4]!
   24402:	f842 1f04 	str.w	r1, [r2, #4]!
   24406:	4563      	cmp	r3, ip
   24408:	d1f9      	bne.n	243fe <psi+0xe>
   2440a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2440e:	4d16      	ldr	r5, [pc, #88]	; (24468 <psi+0x78>)
   24410:	260c      	movs	r6, #12
   24412:	9600      	str	r6, [sp, #0]
   24414:	462b      	mov	r3, r5
   24416:	2201      	movs	r2, #1
   24418:	4601      	mov	r1, r0
   2441a:	f7fd fb15 	bl	21a48 <cneg_mod_n>
   2441e:	4f13      	ldr	r7, [pc, #76]	; (2446c <psi+0x7c>)
   24420:	9700      	str	r7, [sp, #0]
   24422:	462b      	mov	r3, r5
   24424:	f505 626a 	add.w	r2, r5, #3744	; 0xea0
   24428:	4621      	mov	r1, r4
   2442a:	4620      	mov	r0, r4
   2442c:	f7ff ff92 	bl	24354 <mul_mont_384x>
   24430:	f104 0090 	add.w	r0, r4, #144	; 0x90
   24434:	9600      	str	r6, [sp, #0]
   24436:	462b      	mov	r3, r5
   24438:	2201      	movs	r2, #1
   2443a:	4601      	mov	r1, r0
   2443c:	f7fd fb04 	bl	21a48 <cneg_mod_n>
   24440:	f104 0060 	add.w	r0, r4, #96	; 0x60
   24444:	9700      	str	r7, [sp, #0]
   24446:	462b      	mov	r3, r5
   24448:	f505 6270 	add.w	r2, r5, #3840	; 0xf00
   2444c:	4601      	mov	r1, r0
   2444e:	f7ff ff81 	bl	24354 <mul_mont_384x>
   24452:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   24456:	9600      	str	r6, [sp, #0]
   24458:	462b      	mov	r3, r5
   2445a:	2201      	movs	r2, #1
   2445c:	4601      	mov	r1, r0
   2445e:	f7fd faf3 	bl	21a48 <cneg_mod_n>
   24462:	b003      	add	sp, #12
   24464:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24466:	bf00      	nop
   24468:	00038688 	.word	0x00038688
   2446c:	fffcfffd 	.word	0xfffcfffd

00024470 <map_fp2_times_Zz>:
   24470:	b303      	cbz	r3, 244b4 <map_fp2_times_Zz+0x44>
   24472:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24476:	b083      	sub	sp, #12
   24478:	1e5f      	subs	r7, r3, #1
   2447a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2447e:	015c      	lsls	r4, r3, #5
   24480:	3c60      	subs	r4, #96	; 0x60
   24482:	1906      	adds	r6, r0, r4
   24484:	190d      	adds	r5, r1, r4
   24486:	4414      	add	r4, r2
   24488:	f8df 902c 	ldr.w	r9, [pc, #44]	; 244b8 <map_fp2_times_Zz+0x48>
   2448c:	f8df 802c 	ldr.w	r8, [pc, #44]	; 244bc <map_fp2_times_Zz+0x4c>
   24490:	f8cd 8000 	str.w	r8, [sp]
   24494:	464b      	mov	r3, r9
   24496:	4622      	mov	r2, r4
   24498:	4629      	mov	r1, r5
   2449a:	4630      	mov	r0, r6
   2449c:	f7ff ff5a 	bl	24354 <mul_mont_384x>
   244a0:	3f01      	subs	r7, #1
   244a2:	3e60      	subs	r6, #96	; 0x60
   244a4:	3d60      	subs	r5, #96	; 0x60
   244a6:	3c60      	subs	r4, #96	; 0x60
   244a8:	f1b7 3fff 	cmp.w	r7, #4294967295
   244ac:	d1f0      	bne.n	24490 <map_fp2_times_Zz+0x20>
   244ae:	b003      	add	sp, #12
   244b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   244b4:	4770      	bx	lr
   244b6:	bf00      	nop
   244b8:	00038688 	.word	0x00038688
   244bc:	fffcfffd 	.word	0xfffcfffd

000244c0 <frobenius_map_fp6>:
   244c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   244c4:	b083      	sub	sp, #12
   244c6:	4604      	mov	r4, r0
   244c8:	460d      	mov	r5, r1
   244ca:	4616      	mov	r6, r2
   244cc:	1f0b      	subs	r3, r1, #4
   244ce:	1f02      	subs	r2, r0, #4
   244d0:	f101 002c 	add.w	r0, r1, #44	; 0x2c
   244d4:	f853 1f04 	ldr.w	r1, [r3, #4]!
   244d8:	f842 1f04 	str.w	r1, [r2, #4]!
   244dc:	4283      	cmp	r3, r0
   244de:	d1f9      	bne.n	244d4 <frobenius_map_fp6+0x14>
   244e0:	f006 0701 	and.w	r7, r6, #1
   244e4:	230c      	movs	r3, #12
   244e6:	9300      	str	r3, [sp, #0]
   244e8:	4b31      	ldr	r3, [pc, #196]	; (245b0 <frobenius_map_fp6+0xf0>)
   244ea:	463a      	mov	r2, r7
   244ec:	f105 0130 	add.w	r1, r5, #48	; 0x30
   244f0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   244f4:	f7fd faa8 	bl	21a48 <cneg_mod_n>
   244f8:	f104 0860 	add.w	r8, r4, #96	; 0x60
   244fc:	f105 035c 	add.w	r3, r5, #92	; 0x5c
   24500:	f104 025c 	add.w	r2, r4, #92	; 0x5c
   24504:	f105 008c 	add.w	r0, r5, #140	; 0x8c
   24508:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2450c:	f842 1f04 	str.w	r1, [r2, #4]!
   24510:	4283      	cmp	r3, r0
   24512:	d1f9      	bne.n	24508 <frobenius_map_fp6+0x48>
   24514:	230c      	movs	r3, #12
   24516:	9300      	str	r3, [sp, #0]
   24518:	4b25      	ldr	r3, [pc, #148]	; (245b0 <frobenius_map_fp6+0xf0>)
   2451a:	463a      	mov	r2, r7
   2451c:	f105 0190 	add.w	r1, r5, #144	; 0x90
   24520:	f104 0090 	add.w	r0, r4, #144	; 0x90
   24524:	f7fd fa90 	bl	21a48 <cneg_mod_n>
   24528:	f105 03bc 	add.w	r3, r5, #188	; 0xbc
   2452c:	f104 0cbc 	add.w	ip, r4, #188	; 0xbc
   24530:	f105 01ec 	add.w	r1, r5, #236	; 0xec
   24534:	f853 2f04 	ldr.w	r2, [r3, #4]!
   24538:	f84c 2f04 	str.w	r2, [ip, #4]!
   2453c:	428b      	cmp	r3, r1
   2453e:	d1f9      	bne.n	24534 <frobenius_map_fp6+0x74>
   24540:	f104 0af0 	add.w	sl, r4, #240	; 0xf0
   24544:	f8df 9068 	ldr.w	r9, [pc, #104]	; 245b0 <frobenius_map_fp6+0xf0>
   24548:	f04f 0b0c 	mov.w	fp, #12
   2454c:	f8cd b000 	str.w	fp, [sp]
   24550:	464b      	mov	r3, r9
   24552:	463a      	mov	r2, r7
   24554:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   24558:	4650      	mov	r0, sl
   2455a:	f7fd fa75 	bl	21a48 <cneg_mod_n>
   2455e:	3e01      	subs	r6, #1
   24560:	f509 6276 	add.w	r2, r9, #3936	; 0xf60
   24564:	0077      	lsls	r7, r6, #1
   24566:	eb06 0146 	add.w	r1, r6, r6, lsl #1
   2456a:	4d12      	ldr	r5, [pc, #72]	; (245b4 <frobenius_map_fp6+0xf4>)
   2456c:	9500      	str	r5, [sp, #0]
   2456e:	464b      	mov	r3, r9
   24570:	eb02 1241 	add.w	r2, r2, r1, lsl #5
   24574:	4641      	mov	r1, r8
   24576:	4640      	mov	r0, r8
   24578:	f7ff feec 	bl	24354 <mul_mont_384x>
   2457c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   24580:	4437      	add	r7, r6
   24582:	4e0d      	ldr	r6, [pc, #52]	; (245b8 <frobenius_map_fp6+0xf8>)
   24584:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   24588:	f8cd b004 	str.w	fp, [sp, #4]
   2458c:	9500      	str	r5, [sp, #0]
   2458e:	464b      	mov	r3, r9
   24590:	4632      	mov	r2, r6
   24592:	4601      	mov	r1, r0
   24594:	f7fc fa1c 	bl	209d0 <mul_mont_n>
   24598:	f8cd b004 	str.w	fp, [sp, #4]
   2459c:	9500      	str	r5, [sp, #0]
   2459e:	464b      	mov	r3, r9
   245a0:	4632      	mov	r2, r6
   245a2:	4651      	mov	r1, sl
   245a4:	4650      	mov	r0, sl
   245a6:	f7fc fa13 	bl	209d0 <mul_mont_n>
   245aa:	b003      	add	sp, #12
   245ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   245b0:	00038688 	.word	0x00038688
   245b4:	fffcfffd 	.word	0xfffcfffd
   245b8:	00039708 	.word	0x00039708

000245bc <frobenius_map_fp12>:
   245bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   245c0:	b082      	sub	sp, #8
   245c2:	4605      	mov	r5, r0
   245c4:	460e      	mov	r6, r1
   245c6:	4614      	mov	r4, r2
   245c8:	f7ff ff7a 	bl	244c0 <frobenius_map_fp6>
   245cc:	f505 7790 	add.w	r7, r5, #288	; 0x120
   245d0:	4622      	mov	r2, r4
   245d2:	f506 7190 	add.w	r1, r6, #288	; 0x120
   245d6:	4638      	mov	r0, r7
   245d8:	f7ff ff72 	bl	244c0 <frobenius_map_fp6>
   245dc:	3c01      	subs	r4, #1
   245de:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   245e2:	4b11      	ldr	r3, [pc, #68]	; (24628 <frobenius_map_fp12+0x6c>)
   245e4:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   245e8:	4e10      	ldr	r6, [pc, #64]	; (2462c <frobenius_map_fp12+0x70>)
   245ea:	f8df 8044 	ldr.w	r8, [pc, #68]	; 24630 <frobenius_map_fp12+0x74>
   245ee:	f8cd 8000 	str.w	r8, [sp]
   245f2:	4633      	mov	r3, r6
   245f4:	4622      	mov	r2, r4
   245f6:	4639      	mov	r1, r7
   245f8:	4638      	mov	r0, r7
   245fa:	f7ff feab 	bl	24354 <mul_mont_384x>
   245fe:	f505 70c0 	add.w	r0, r5, #384	; 0x180
   24602:	f8cd 8000 	str.w	r8, [sp]
   24606:	4633      	mov	r3, r6
   24608:	4622      	mov	r2, r4
   2460a:	4601      	mov	r1, r0
   2460c:	f7ff fea2 	bl	24354 <mul_mont_384x>
   24610:	f505 70f0 	add.w	r0, r5, #480	; 0x1e0
   24614:	f8cd 8000 	str.w	r8, [sp]
   24618:	4633      	mov	r3, r6
   2461a:	4622      	mov	r2, r4
   2461c:	4601      	mov	r1, r0
   2461e:	f7ff fe99 	bl	24354 <mul_mont_384x>
   24622:	b002      	add	sp, #8
   24624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24628:	00039798 	.word	0x00039798
   2462c:	00038688 	.word	0x00038688
   24630:	fffcfffd 	.word	0xfffcfffd

00024634 <blst_fp12_frobenius_map>:
   24634:	b508      	push	{r3, lr}
   24636:	f7ff ffc1 	bl	245bc <frobenius_map_fp12>
   2463a:	bd08      	pop	{r3, pc}

0002463c <map_fp2>:
   2463c:	b393      	cbz	r3, 246a4 <map_fp2+0x68>
   2463e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24642:	b082      	sub	sp, #8
   24644:	4604      	mov	r4, r0
   24646:	4689      	mov	r9, r1
   24648:	1e5e      	subs	r6, r3, #1
   2464a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2464e:	eb02 1243 	add.w	r2, r2, r3, lsl #5
   24652:	f1a2 0560 	sub.w	r5, r2, #96	; 0x60
   24656:	4f14      	ldr	r7, [pc, #80]	; (246a8 <map_fp2+0x6c>)
   24658:	f8df a050 	ldr.w	sl, [pc, #80]	; 246ac <map_fp2+0x70>
   2465c:	f04f 080c 	mov.w	r8, #12
   24660:	f8cd a000 	str.w	sl, [sp]
   24664:	463b      	mov	r3, r7
   24666:	464a      	mov	r2, r9
   24668:	4621      	mov	r1, r4
   2466a:	4620      	mov	r0, r4
   2466c:	f7ff fe72 	bl	24354 <mul_mont_384x>
   24670:	f8cd 8000 	str.w	r8, [sp]
   24674:	463b      	mov	r3, r7
   24676:	462a      	mov	r2, r5
   24678:	4621      	mov	r1, r4
   2467a:	4620      	mov	r0, r4
   2467c:	f7fc fb50 	bl	20d20 <add_mod_n>
   24680:	f104 0030 	add.w	r0, r4, #48	; 0x30
   24684:	f8cd 8000 	str.w	r8, [sp]
   24688:	463b      	mov	r3, r7
   2468a:	f105 0230 	add.w	r2, r5, #48	; 0x30
   2468e:	4601      	mov	r1, r0
   24690:	f7fc fb46 	bl	20d20 <add_mod_n>
   24694:	3e01      	subs	r6, #1
   24696:	3d60      	subs	r5, #96	; 0x60
   24698:	f1b6 3fff 	cmp.w	r6, #4294967295
   2469c:	d1e0      	bne.n	24660 <map_fp2+0x24>
   2469e:	b002      	add	sp, #8
   246a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   246a4:	4770      	bx	lr
   246a6:	bf00      	nop
   246a8:	00038688 	.word	0x00038688
   246ac:	fffcfffd 	.word	0xfffcfffd

000246b0 <mul_fp6>:
   246b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   246b4:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
   246b8:	4683      	mov	fp, r0
   246ba:	460f      	mov	r7, r1
   246bc:	4616      	mov	r6, r2
   246be:	4cad      	ldr	r4, [pc, #692]	; (24974 <mul_fp6+0x2c4>)
   246c0:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 24978 <mul_fp6+0x2c8>
   246c4:	f8cd a000 	str.w	sl, [sp]
   246c8:	4623      	mov	r3, r4
   246ca:	a88e      	add	r0, sp, #568	; 0x238
   246cc:	f7ff fe42 	bl	24354 <mul_mont_384x>
   246d0:	f107 0960 	add.w	r9, r7, #96	; 0x60
   246d4:	f106 0860 	add.w	r8, r6, #96	; 0x60
   246d8:	f8cd a000 	str.w	sl, [sp]
   246dc:	4623      	mov	r3, r4
   246de:	4642      	mov	r2, r8
   246e0:	4649      	mov	r1, r9
   246e2:	a876      	add	r0, sp, #472	; 0x1d8
   246e4:	f7ff fe36 	bl	24354 <mul_mont_384x>
   246e8:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
   246ec:	f106 03c0 	add.w	r3, r6, #192	; 0xc0
   246f0:	461a      	mov	r2, r3
   246f2:	f8cd a000 	str.w	sl, [sp]
   246f6:	4623      	mov	r3, r4
   246f8:	9204      	str	r2, [sp, #16]
   246fa:	9103      	str	r1, [sp, #12]
   246fc:	a85e      	add	r0, sp, #376	; 0x178
   246fe:	f7ff fe29 	bl	24354 <mul_mont_384x>
   24702:	250c      	movs	r5, #12
   24704:	9500      	str	r5, [sp, #0]
   24706:	4623      	mov	r3, r4
   24708:	9a03      	ldr	r2, [sp, #12]
   2470a:	4649      	mov	r1, r9
   2470c:	a82e      	add	r0, sp, #184	; 0xb8
   2470e:	f7fc fb07 	bl	20d20 <add_mod_n>
   24712:	f107 0190 	add.w	r1, r7, #144	; 0x90
   24716:	9108      	str	r1, [sp, #32]
   24718:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
   2471c:	9009      	str	r0, [sp, #36]	; 0x24
   2471e:	9500      	str	r5, [sp, #0]
   24720:	4623      	mov	r3, r4
   24722:	4602      	mov	r2, r0
   24724:	a83a      	add	r0, sp, #232	; 0xe8
   24726:	f7fc fafb 	bl	20d20 <add_mod_n>
   2472a:	9500      	str	r5, [sp, #0]
   2472c:	4623      	mov	r3, r4
   2472e:	9a04      	ldr	r2, [sp, #16]
   24730:	4641      	mov	r1, r8
   24732:	a816      	add	r0, sp, #88	; 0x58
   24734:	f7fc faf4 	bl	20d20 <add_mod_n>
   24738:	f106 0190 	add.w	r1, r6, #144	; 0x90
   2473c:	9106      	str	r1, [sp, #24]
   2473e:	f106 03f0 	add.w	r3, r6, #240	; 0xf0
   24742:	461a      	mov	r2, r3
   24744:	9307      	str	r3, [sp, #28]
   24746:	9500      	str	r5, [sp, #0]
   24748:	4623      	mov	r3, r4
   2474a:	a822      	add	r0, sp, #136	; 0x88
   2474c:	f7fc fae8 	bl	20d20 <add_mod_n>
   24750:	f8cd a000 	str.w	sl, [sp]
   24754:	4623      	mov	r3, r4
   24756:	aa16      	add	r2, sp, #88	; 0x58
   24758:	a92e      	add	r1, sp, #184	; 0xb8
   2475a:	a846      	add	r0, sp, #280	; 0x118
   2475c:	f7ff fdfa 	bl	24354 <mul_mont_384x>
   24760:	9500      	str	r5, [sp, #0]
   24762:	4623      	mov	r3, r4
   24764:	aa76      	add	r2, sp, #472	; 0x1d8
   24766:	a946      	add	r1, sp, #280	; 0x118
   24768:	4608      	mov	r0, r1
   2476a:	f7fb ff83 	bl	20674 <sub_mod_n>
   2476e:	9500      	str	r5, [sp, #0]
   24770:	4623      	mov	r3, r4
   24772:	aa82      	add	r2, sp, #520	; 0x208
   24774:	a952      	add	r1, sp, #328	; 0x148
   24776:	4608      	mov	r0, r1
   24778:	f7fb ff7c 	bl	20674 <sub_mod_n>
   2477c:	9500      	str	r5, [sp, #0]
   2477e:	4623      	mov	r3, r4
   24780:	aa5e      	add	r2, sp, #376	; 0x178
   24782:	a946      	add	r1, sp, #280	; 0x118
   24784:	4608      	mov	r0, r1
   24786:	f7fb ff75 	bl	20674 <sub_mod_n>
   2478a:	9500      	str	r5, [sp, #0]
   2478c:	4623      	mov	r3, r4
   2478e:	aa6a      	add	r2, sp, #424	; 0x1a8
   24790:	a952      	add	r1, sp, #328	; 0x148
   24792:	4608      	mov	r0, r1
   24794:	f7fb ff6e 	bl	20674 <sub_mod_n>
   24798:	9500      	str	r5, [sp, #0]
   2479a:	4623      	mov	r3, r4
   2479c:	aa52      	add	r2, sp, #328	; 0x148
   2479e:	a946      	add	r1, sp, #280	; 0x118
   247a0:	a80a      	add	r0, sp, #40	; 0x28
   247a2:	f7fc fabd 	bl	20d20 <add_mod_n>
   247a6:	9500      	str	r5, [sp, #0]
   247a8:	4623      	mov	r3, r4
   247aa:	aa52      	add	r2, sp, #328	; 0x148
   247ac:	a946      	add	r1, sp, #280	; 0x118
   247ae:	4608      	mov	r0, r1
   247b0:	f7fb ff60 	bl	20674 <sub_mod_n>
   247b4:	ab0a      	add	r3, sp, #40	; 0x28
   247b6:	aa51      	add	r2, sp, #324	; 0x144
   247b8:	a816      	add	r0, sp, #88	; 0x58
   247ba:	f853 1b04 	ldr.w	r1, [r3], #4
   247be:	f842 1f04 	str.w	r1, [r2, #4]!
   247c2:	4298      	cmp	r0, r3
   247c4:	d1f9      	bne.n	247ba <mul_fp6+0x10a>
   247c6:	4c6b      	ldr	r4, [pc, #428]	; (24974 <mul_fp6+0x2c4>)
   247c8:	250c      	movs	r5, #12
   247ca:	9500      	str	r5, [sp, #0]
   247cc:	4623      	mov	r3, r4
   247ce:	464a      	mov	r2, r9
   247d0:	4639      	mov	r1, r7
   247d2:	a82e      	add	r0, sp, #184	; 0xb8
   247d4:	f7fc faa4 	bl	20d20 <add_mod_n>
   247d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
   247dc:	4619      	mov	r1, r3
   247de:	9305      	str	r3, [sp, #20]
   247e0:	9500      	str	r5, [sp, #0]
   247e2:	4623      	mov	r3, r4
   247e4:	9a08      	ldr	r2, [sp, #32]
   247e6:	a83a      	add	r0, sp, #232	; 0xe8
   247e8:	f7fc fa9a 	bl	20d20 <add_mod_n>
   247ec:	9500      	str	r5, [sp, #0]
   247ee:	4623      	mov	r3, r4
   247f0:	4642      	mov	r2, r8
   247f2:	4631      	mov	r1, r6
   247f4:	a816      	add	r0, sp, #88	; 0x58
   247f6:	f7fc fa93 	bl	20d20 <add_mod_n>
   247fa:	f106 0a30 	add.w	sl, r6, #48	; 0x30
   247fe:	9500      	str	r5, [sp, #0]
   24800:	4623      	mov	r3, r4
   24802:	9a06      	ldr	r2, [sp, #24]
   24804:	4651      	mov	r1, sl
   24806:	a822      	add	r0, sp, #136	; 0x88
   24808:	f7fc fa8a 	bl	20d20 <add_mod_n>
   2480c:	f10b 0860 	add.w	r8, fp, #96	; 0x60
   24810:	4b59      	ldr	r3, [pc, #356]	; (24978 <mul_fp6+0x2c8>)
   24812:	9300      	str	r3, [sp, #0]
   24814:	4623      	mov	r3, r4
   24816:	aa16      	add	r2, sp, #88	; 0x58
   24818:	a92e      	add	r1, sp, #184	; 0xb8
   2481a:	4640      	mov	r0, r8
   2481c:	f7ff fd9a 	bl	24354 <mul_mont_384x>
   24820:	9500      	str	r5, [sp, #0]
   24822:	4623      	mov	r3, r4
   24824:	aa8e      	add	r2, sp, #568	; 0x238
   24826:	4641      	mov	r1, r8
   24828:	4640      	mov	r0, r8
   2482a:	f7fb ff23 	bl	20674 <sub_mod_n>
   2482e:	f10b 0990 	add.w	r9, fp, #144	; 0x90
   24832:	9500      	str	r5, [sp, #0]
   24834:	4623      	mov	r3, r4
   24836:	aa9a      	add	r2, sp, #616	; 0x268
   24838:	4649      	mov	r1, r9
   2483a:	4648      	mov	r0, r9
   2483c:	f7fb ff1a 	bl	20674 <sub_mod_n>
   24840:	9500      	str	r5, [sp, #0]
   24842:	4623      	mov	r3, r4
   24844:	aa76      	add	r2, sp, #472	; 0x1d8
   24846:	4641      	mov	r1, r8
   24848:	4640      	mov	r0, r8
   2484a:	f7fb ff13 	bl	20674 <sub_mod_n>
   2484e:	9500      	str	r5, [sp, #0]
   24850:	4623      	mov	r3, r4
   24852:	aa82      	add	r2, sp, #520	; 0x208
   24854:	4649      	mov	r1, r9
   24856:	4648      	mov	r0, r9
   24858:	f7fb ff0c 	bl	20674 <sub_mod_n>
   2485c:	9500      	str	r5, [sp, #0]
   2485e:	4623      	mov	r3, r4
   24860:	aa6a      	add	r2, sp, #424	; 0x1a8
   24862:	a95e      	add	r1, sp, #376	; 0x178
   24864:	a80a      	add	r0, sp, #40	; 0x28
   24866:	f7fc fa5b 	bl	20d20 <add_mod_n>
   2486a:	9500      	str	r5, [sp, #0]
   2486c:	4623      	mov	r3, r4
   2486e:	aa6a      	add	r2, sp, #424	; 0x1a8
   24870:	a95e      	add	r1, sp, #376	; 0x178
   24872:	a82e      	add	r0, sp, #184	; 0xb8
   24874:	f7fb fefe 	bl	20674 <sub_mod_n>
   24878:	ab0a      	add	r3, sp, #40	; 0x28
   2487a:	aa39      	add	r2, sp, #228	; 0xe4
   2487c:	a816      	add	r0, sp, #88	; 0x58
   2487e:	f853 1b04 	ldr.w	r1, [r3], #4
   24882:	f842 1f04 	str.w	r1, [r2, #4]!
   24886:	4298      	cmp	r0, r3
   24888:	d1f9      	bne.n	2487e <mul_fp6+0x1ce>
   2488a:	4c3a      	ldr	r4, [pc, #232]	; (24974 <mul_fp6+0x2c4>)
   2488c:	250c      	movs	r5, #12
   2488e:	9500      	str	r5, [sp, #0]
   24890:	4623      	mov	r3, r4
   24892:	aa2e      	add	r2, sp, #184	; 0xb8
   24894:	4641      	mov	r1, r8
   24896:	4640      	mov	r0, r8
   24898:	f7fc fa42 	bl	20d20 <add_mod_n>
   2489c:	9500      	str	r5, [sp, #0]
   2489e:	4623      	mov	r3, r4
   248a0:	aa3a      	add	r2, sp, #232	; 0xe8
   248a2:	4649      	mov	r1, r9
   248a4:	4648      	mov	r0, r9
   248a6:	f7fc fa3b 	bl	20d20 <add_mod_n>
   248aa:	9500      	str	r5, [sp, #0]
   248ac:	4623      	mov	r3, r4
   248ae:	9a03      	ldr	r2, [sp, #12]
   248b0:	4639      	mov	r1, r7
   248b2:	a82e      	add	r0, sp, #184	; 0xb8
   248b4:	f7fc fa34 	bl	20d20 <add_mod_n>
   248b8:	9500      	str	r5, [sp, #0]
   248ba:	4623      	mov	r3, r4
   248bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   248be:	9905      	ldr	r1, [sp, #20]
   248c0:	a83a      	add	r0, sp, #232	; 0xe8
   248c2:	f7fc fa2d 	bl	20d20 <add_mod_n>
   248c6:	9500      	str	r5, [sp, #0]
   248c8:	4623      	mov	r3, r4
   248ca:	9a04      	ldr	r2, [sp, #16]
   248cc:	4631      	mov	r1, r6
   248ce:	a816      	add	r0, sp, #88	; 0x58
   248d0:	f7fc fa26 	bl	20d20 <add_mod_n>
   248d4:	9500      	str	r5, [sp, #0]
   248d6:	4623      	mov	r3, r4
   248d8:	9a07      	ldr	r2, [sp, #28]
   248da:	4651      	mov	r1, sl
   248dc:	a822      	add	r0, sp, #136	; 0x88
   248de:	f7fc fa1f 	bl	20d20 <add_mod_n>
   248e2:	f10b 06c0 	add.w	r6, fp, #192	; 0xc0
   248e6:	4b24      	ldr	r3, [pc, #144]	; (24978 <mul_fp6+0x2c8>)
   248e8:	9300      	str	r3, [sp, #0]
   248ea:	4623      	mov	r3, r4
   248ec:	aa16      	add	r2, sp, #88	; 0x58
   248ee:	a92e      	add	r1, sp, #184	; 0xb8
   248f0:	4630      	mov	r0, r6
   248f2:	f7ff fd2f 	bl	24354 <mul_mont_384x>
   248f6:	9500      	str	r5, [sp, #0]
   248f8:	4623      	mov	r3, r4
   248fa:	aa8e      	add	r2, sp, #568	; 0x238
   248fc:	4631      	mov	r1, r6
   248fe:	4630      	mov	r0, r6
   24900:	f7fb feb8 	bl	20674 <sub_mod_n>
   24904:	f10b 07f0 	add.w	r7, fp, #240	; 0xf0
   24908:	9500      	str	r5, [sp, #0]
   2490a:	4623      	mov	r3, r4
   2490c:	aa9a      	add	r2, sp, #616	; 0x268
   2490e:	4639      	mov	r1, r7
   24910:	4638      	mov	r0, r7
   24912:	f7fb feaf 	bl	20674 <sub_mod_n>
   24916:	9500      	str	r5, [sp, #0]
   24918:	4623      	mov	r3, r4
   2491a:	aa5e      	add	r2, sp, #376	; 0x178
   2491c:	4631      	mov	r1, r6
   2491e:	4630      	mov	r0, r6
   24920:	f7fb fea8 	bl	20674 <sub_mod_n>
   24924:	9500      	str	r5, [sp, #0]
   24926:	4623      	mov	r3, r4
   24928:	aa6a      	add	r2, sp, #424	; 0x1a8
   2492a:	4639      	mov	r1, r7
   2492c:	4638      	mov	r0, r7
   2492e:	f7fb fea1 	bl	20674 <sub_mod_n>
   24932:	9500      	str	r5, [sp, #0]
   24934:	4623      	mov	r3, r4
   24936:	aa76      	add	r2, sp, #472	; 0x1d8
   24938:	4631      	mov	r1, r6
   2493a:	4630      	mov	r0, r6
   2493c:	f7fc f9f0 	bl	20d20 <add_mod_n>
   24940:	9500      	str	r5, [sp, #0]
   24942:	4623      	mov	r3, r4
   24944:	aa82      	add	r2, sp, #520	; 0x208
   24946:	4639      	mov	r1, r7
   24948:	4638      	mov	r0, r7
   2494a:	f7fc f9e9 	bl	20d20 <add_mod_n>
   2494e:	9500      	str	r5, [sp, #0]
   24950:	4623      	mov	r3, r4
   24952:	aa8e      	add	r2, sp, #568	; 0x238
   24954:	a946      	add	r1, sp, #280	; 0x118
   24956:	4658      	mov	r0, fp
   24958:	f7fc f9e2 	bl	20d20 <add_mod_n>
   2495c:	9500      	str	r5, [sp, #0]
   2495e:	4623      	mov	r3, r4
   24960:	aa9a      	add	r2, sp, #616	; 0x268
   24962:	a952      	add	r1, sp, #328	; 0x148
   24964:	f10b 0030 	add.w	r0, fp, #48	; 0x30
   24968:	f7fc f9da 	bl	20d20 <add_mod_n>
   2496c:	f50d 7d27 	add.w	sp, sp, #668	; 0x29c
   24970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24974:	00038688 	.word	0x00038688
   24978:	fffcfffd 	.word	0xfffcfffd

0002497c <mul_fp12>:
   2497c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24980:	f5ad 7d66 	sub.w	sp, sp, #920	; 0x398
   24984:	4604      	mov	r4, r0
   24986:	460d      	mov	r5, r1
   24988:	4616      	mov	r6, r2
   2498a:	a89e      	add	r0, sp, #632	; 0x278
   2498c:	f7ff fe90 	bl	246b0 <mul_fp6>
   24990:	f505 7890 	add.w	r8, r5, #288	; 0x120
   24994:	f506 7790 	add.w	r7, r6, #288	; 0x120
   24998:	463a      	mov	r2, r7
   2499a:	4641      	mov	r1, r8
   2499c:	a856      	add	r0, sp, #344	; 0x158
   2499e:	f7ff fe87 	bl	246b0 <mul_fp6>
   249a2:	4642      	mov	r2, r8
   249a4:	4629      	mov	r1, r5
   249a6:	a80e      	add	r0, sp, #56	; 0x38
   249a8:	f7fd fb48 	bl	2203c <add_fp6>
   249ac:	f504 7590 	add.w	r5, r4, #288	; 0x120
   249b0:	463a      	mov	r2, r7
   249b2:	4631      	mov	r1, r6
   249b4:	4628      	mov	r0, r5
   249b6:	f7fd fb41 	bl	2203c <add_fp6>
   249ba:	aa0e      	add	r2, sp, #56	; 0x38
   249bc:	4629      	mov	r1, r5
   249be:	4628      	mov	r0, r5
   249c0:	f7ff fe76 	bl	246b0 <mul_fp6>
   249c4:	aa9e      	add	r2, sp, #632	; 0x278
   249c6:	4629      	mov	r1, r5
   249c8:	4628      	mov	r0, r5
   249ca:	f7fd faed 	bl	21fa8 <sub_fp6>
   249ce:	aa56      	add	r2, sp, #344	; 0x158
   249d0:	4629      	mov	r1, r5
   249d2:	4628      	mov	r0, r5
   249d4:	f7fd fae8 	bl	21fa8 <sub_fp6>
   249d8:	4d26      	ldr	r5, [pc, #152]	; (24a74 <mul_fp12+0xf8>)
   249da:	260c      	movs	r6, #12
   249dc:	9600      	str	r6, [sp, #0]
   249de:	462b      	mov	r3, r5
   249e0:	aa92      	add	r2, sp, #584	; 0x248
   249e2:	a986      	add	r1, sp, #536	; 0x218
   249e4:	a802      	add	r0, sp, #8
   249e6:	f7fc f99b 	bl	20d20 <add_mod_n>
   249ea:	9600      	str	r6, [sp, #0]
   249ec:	462b      	mov	r3, r5
   249ee:	aa92      	add	r2, sp, #584	; 0x248
   249f0:	a986      	add	r1, sp, #536	; 0x218
   249f2:	4608      	mov	r0, r1
   249f4:	f7fb fe3e 	bl	20674 <sub_mod_n>
   249f8:	ab02      	add	r3, sp, #8
   249fa:	aa91      	add	r2, sp, #580	; 0x244
   249fc:	a80e      	add	r0, sp, #56	; 0x38
   249fe:	f853 1b04 	ldr.w	r1, [r3], #4
   24a02:	f842 1f04 	str.w	r1, [r2, #4]!
   24a06:	4283      	cmp	r3, r0
   24a08:	d1f9      	bne.n	249fe <mul_fp12+0x82>
   24a0a:	4d1a      	ldr	r5, [pc, #104]	; (24a74 <mul_fp12+0xf8>)
   24a0c:	260c      	movs	r6, #12
   24a0e:	9600      	str	r6, [sp, #0]
   24a10:	462b      	mov	r3, r5
   24a12:	aa86      	add	r2, sp, #536	; 0x218
   24a14:	a99e      	add	r1, sp, #632	; 0x278
   24a16:	4620      	mov	r0, r4
   24a18:	f7fc f982 	bl	20d20 <add_mod_n>
   24a1c:	9600      	str	r6, [sp, #0]
   24a1e:	462b      	mov	r3, r5
   24a20:	aa92      	add	r2, sp, #584	; 0x248
   24a22:	a9aa      	add	r1, sp, #680	; 0x2a8
   24a24:	f104 0030 	add.w	r0, r4, #48	; 0x30
   24a28:	f7fc f97a 	bl	20d20 <add_mod_n>
   24a2c:	9600      	str	r6, [sp, #0]
   24a2e:	462b      	mov	r3, r5
   24a30:	aa56      	add	r2, sp, #344	; 0x158
   24a32:	a9b6      	add	r1, sp, #728	; 0x2d8
   24a34:	f104 0060 	add.w	r0, r4, #96	; 0x60
   24a38:	f7fc f972 	bl	20d20 <add_mod_n>
   24a3c:	9600      	str	r6, [sp, #0]
   24a3e:	462b      	mov	r3, r5
   24a40:	aa62      	add	r2, sp, #392	; 0x188
   24a42:	a9c2      	add	r1, sp, #776	; 0x308
   24a44:	f104 0090 	add.w	r0, r4, #144	; 0x90
   24a48:	f7fc f96a 	bl	20d20 <add_mod_n>
   24a4c:	9600      	str	r6, [sp, #0]
   24a4e:	462b      	mov	r3, r5
   24a50:	aa6e      	add	r2, sp, #440	; 0x1b8
   24a52:	a9ce      	add	r1, sp, #824	; 0x338
   24a54:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   24a58:	f7fc f962 	bl	20d20 <add_mod_n>
   24a5c:	9600      	str	r6, [sp, #0]
   24a5e:	462b      	mov	r3, r5
   24a60:	aa7a      	add	r2, sp, #488	; 0x1e8
   24a62:	a9da      	add	r1, sp, #872	; 0x368
   24a64:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   24a68:	f7fc f95a 	bl	20d20 <add_mod_n>
   24a6c:	f50d 7d66 	add.w	sp, sp, #920	; 0x398
   24a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24a74:	00038688 	.word	0x00038688

00024a78 <blst_fp12_mul>:
   24a78:	b508      	push	{r3, lr}
   24a7a:	f7ff ff7f 	bl	2497c <mul_fp12>
   24a7e:	bd08      	pop	{r3, pc}

00024a80 <sqr_fp12>:
   24a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24a84:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
   24a88:	4606      	mov	r6, r0
   24a8a:	460d      	mov	r5, r1
   24a8c:	f501 7790 	add.w	r7, r1, #288	; 0x120
   24a90:	463a      	mov	r2, r7
   24a92:	a856      	add	r0, sp, #344	; 0x158
   24a94:	f7fd fad2 	bl	2203c <add_fp6>
   24a98:	f505 74f0 	add.w	r4, r5, #480	; 0x1e0
   24a9c:	f505 7804 	add.w	r8, r5, #528	; 0x210
   24aa0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 24c1c <sqr_fp12+0x19c>
   24aa4:	f04f 0a0c 	mov.w	sl, #12
   24aa8:	f8cd a000 	str.w	sl, [sp]
   24aac:	464b      	mov	r3, r9
   24aae:	4642      	mov	r2, r8
   24ab0:	4621      	mov	r1, r4
   24ab2:	a802      	add	r0, sp, #8
   24ab4:	f7fc f934 	bl	20d20 <add_mod_n>
   24ab8:	f8cd a000 	str.w	sl, [sp]
   24abc:	464b      	mov	r3, r9
   24abe:	4642      	mov	r2, r8
   24ac0:	4621      	mov	r1, r4
   24ac2:	a83e      	add	r0, sp, #248	; 0xf8
   24ac4:	f7fb fdd6 	bl	20674 <sub_mod_n>
   24ac8:	ab02      	add	r3, sp, #8
   24aca:	ac49      	add	r4, sp, #292	; 0x124
   24acc:	a80e      	add	r0, sp, #56	; 0x38
   24ace:	4622      	mov	r2, r4
   24ad0:	f853 1b04 	ldr.w	r1, [r3], #4
   24ad4:	f842 1f04 	str.w	r1, [r2, #4]!
   24ad8:	4283      	cmp	r3, r0
   24ada:	d1f9      	bne.n	24ad0 <sqr_fp12+0x50>
   24adc:	f8df 813c 	ldr.w	r8, [pc, #316]	; 24c1c <sqr_fp12+0x19c>
   24ae0:	f04f 090c 	mov.w	r9, #12
   24ae4:	f8cd 9000 	str.w	r9, [sp]
   24ae8:	4643      	mov	r3, r8
   24aea:	aa3e      	add	r2, sp, #248	; 0xf8
   24aec:	4629      	mov	r1, r5
   24aee:	a80e      	add	r0, sp, #56	; 0x38
   24af0:	f7fc f916 	bl	20d20 <add_mod_n>
   24af4:	f8cd 9000 	str.w	r9, [sp]
   24af8:	4643      	mov	r3, r8
   24afa:	aa4a      	add	r2, sp, #296	; 0x128
   24afc:	f105 0130 	add.w	r1, r5, #48	; 0x30
   24b00:	a81a      	add	r0, sp, #104	; 0x68
   24b02:	f7fc f90d 	bl	20d20 <add_mod_n>
   24b06:	f8cd 9000 	str.w	r9, [sp]
   24b0a:	4643      	mov	r3, r8
   24b0c:	f505 7290 	add.w	r2, r5, #288	; 0x120
   24b10:	f105 0160 	add.w	r1, r5, #96	; 0x60
   24b14:	a826      	add	r0, sp, #152	; 0x98
   24b16:	f7fc f903 	bl	20d20 <add_mod_n>
   24b1a:	f8cd 9000 	str.w	r9, [sp]
   24b1e:	4643      	mov	r3, r8
   24b20:	f505 72a8 	add.w	r2, r5, #336	; 0x150
   24b24:	f105 0190 	add.w	r1, r5, #144	; 0x90
   24b28:	a832      	add	r0, sp, #200	; 0xc8
   24b2a:	f7fc f8f9 	bl	20d20 <add_mod_n>
   24b2e:	f8cd 9000 	str.w	r9, [sp]
   24b32:	4643      	mov	r3, r8
   24b34:	f505 72c0 	add.w	r2, r5, #384	; 0x180
   24b38:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
   24b3c:	a83e      	add	r0, sp, #248	; 0xf8
   24b3e:	f7fc f8ef 	bl	20d20 <add_mod_n>
   24b42:	f8cd 9000 	str.w	r9, [sp]
   24b46:	4643      	mov	r3, r8
   24b48:	f505 72d8 	add.w	r2, r5, #432	; 0x1b0
   24b4c:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   24b50:	a84a      	add	r0, sp, #296	; 0x128
   24b52:	f7fc f8e5 	bl	20d20 <add_mod_n>
   24b56:	aa0e      	add	r2, sp, #56	; 0x38
   24b58:	a956      	add	r1, sp, #344	; 0x158
   24b5a:	4608      	mov	r0, r1
   24b5c:	f7ff fda8 	bl	246b0 <mul_fp6>
   24b60:	463a      	mov	r2, r7
   24b62:	4629      	mov	r1, r5
   24b64:	a80e      	add	r0, sp, #56	; 0x38
   24b66:	f7ff fda3 	bl	246b0 <mul_fp6>
   24b6a:	aa0e      	add	r2, sp, #56	; 0x38
   24b6c:	4611      	mov	r1, r2
   24b6e:	f506 7090 	add.w	r0, r6, #288	; 0x120
   24b72:	f7fd fa63 	bl	2203c <add_fp6>
   24b76:	aa0e      	add	r2, sp, #56	; 0x38
   24b78:	a956      	add	r1, sp, #344	; 0x158
   24b7a:	4630      	mov	r0, r6
   24b7c:	f7fd fa14 	bl	21fa8 <sub_fp6>
   24b80:	f8cd 9000 	str.w	r9, [sp]
   24b84:	4643      	mov	r3, r8
   24b86:	aa4a      	add	r2, sp, #296	; 0x128
   24b88:	a93e      	add	r1, sp, #248	; 0xf8
   24b8a:	a802      	add	r0, sp, #8
   24b8c:	f7fc f8c8 	bl	20d20 <add_mod_n>
   24b90:	f8cd 9000 	str.w	r9, [sp]
   24b94:	4643      	mov	r3, r8
   24b96:	aa4a      	add	r2, sp, #296	; 0x128
   24b98:	a93e      	add	r1, sp, #248	; 0xf8
   24b9a:	4608      	mov	r0, r1
   24b9c:	f7fb fd6a 	bl	20674 <sub_mod_n>
   24ba0:	ab02      	add	r3, sp, #8
   24ba2:	a90e      	add	r1, sp, #56	; 0x38
   24ba4:	f853 2b04 	ldr.w	r2, [r3], #4
   24ba8:	f844 2f04 	str.w	r2, [r4, #4]!
   24bac:	4299      	cmp	r1, r3
   24bae:	d1f9      	bne.n	24ba4 <sqr_fp12+0x124>
   24bb0:	4c1a      	ldr	r4, [pc, #104]	; (24c1c <sqr_fp12+0x19c>)
   24bb2:	250c      	movs	r5, #12
   24bb4:	9500      	str	r5, [sp, #0]
   24bb6:	4623      	mov	r3, r4
   24bb8:	aa3e      	add	r2, sp, #248	; 0xf8
   24bba:	4631      	mov	r1, r6
   24bbc:	4630      	mov	r0, r6
   24bbe:	f7fb fd59 	bl	20674 <sub_mod_n>
   24bc2:	f106 0030 	add.w	r0, r6, #48	; 0x30
   24bc6:	9500      	str	r5, [sp, #0]
   24bc8:	4623      	mov	r3, r4
   24bca:	aa4a      	add	r2, sp, #296	; 0x128
   24bcc:	4601      	mov	r1, r0
   24bce:	f7fb fd51 	bl	20674 <sub_mod_n>
   24bd2:	f106 0060 	add.w	r0, r6, #96	; 0x60
   24bd6:	9500      	str	r5, [sp, #0]
   24bd8:	4623      	mov	r3, r4
   24bda:	aa0e      	add	r2, sp, #56	; 0x38
   24bdc:	4601      	mov	r1, r0
   24bde:	f7fb fd49 	bl	20674 <sub_mod_n>
   24be2:	f106 0090 	add.w	r0, r6, #144	; 0x90
   24be6:	9500      	str	r5, [sp, #0]
   24be8:	4623      	mov	r3, r4
   24bea:	aa1a      	add	r2, sp, #104	; 0x68
   24bec:	4601      	mov	r1, r0
   24bee:	f7fb fd41 	bl	20674 <sub_mod_n>
   24bf2:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   24bf6:	9500      	str	r5, [sp, #0]
   24bf8:	4623      	mov	r3, r4
   24bfa:	aa26      	add	r2, sp, #152	; 0x98
   24bfc:	4601      	mov	r1, r0
   24bfe:	f7fb fd39 	bl	20674 <sub_mod_n>
   24c02:	f106 00f0 	add.w	r0, r6, #240	; 0xf0
   24c06:	9500      	str	r5, [sp, #0]
   24c08:	4623      	mov	r3, r4
   24c0a:	aa32      	add	r2, sp, #200	; 0xc8
   24c0c:	4601      	mov	r1, r0
   24c0e:	f7fb fd31 	bl	20674 <sub_mod_n>
   24c12:	f50d 7d1e 	add.w	sp, sp, #632	; 0x278
   24c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24c1a:	bf00      	nop
   24c1c:	00038688 	.word	0x00038688

00024c20 <blst_fp12_sqr>:
   24c20:	b508      	push	{r3, lr}
   24c22:	f7ff ff2d 	bl	24a80 <sqr_fp12>
   24c26:	bd08      	pop	{r3, pc}

00024c28 <mul_by_xy0_fp6>:
   24c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24c2c:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
   24c30:	4604      	mov	r4, r0
   24c32:	460e      	mov	r6, r1
   24c34:	4615      	mov	r5, r2
   24c36:	f8df a184 	ldr.w	sl, [pc, #388]	; 24dbc <mul_by_xy0_fp6+0x194>
   24c3a:	f8df b184 	ldr.w	fp, [pc, #388]	; 24dc0 <mul_by_xy0_fp6+0x198>
   24c3e:	f8cd b000 	str.w	fp, [sp]
   24c42:	4653      	mov	r3, sl
   24c44:	a86e      	add	r0, sp, #440	; 0x1b8
   24c46:	f7ff fb85 	bl	24354 <mul_mont_384x>
   24c4a:	f106 0960 	add.w	r9, r6, #96	; 0x60
   24c4e:	f105 0760 	add.w	r7, r5, #96	; 0x60
   24c52:	f8cd b000 	str.w	fp, [sp]
   24c56:	4653      	mov	r3, sl
   24c58:	463a      	mov	r2, r7
   24c5a:	4649      	mov	r1, r9
   24c5c:	a856      	add	r0, sp, #344	; 0x158
   24c5e:	f7ff fb79 	bl	24354 <mul_mont_384x>
   24c62:	f106 08c0 	add.w	r8, r6, #192	; 0xc0
   24c66:	f8cd b000 	str.w	fp, [sp]
   24c6a:	4653      	mov	r3, sl
   24c6c:	463a      	mov	r2, r7
   24c6e:	4641      	mov	r1, r8
   24c70:	a83e      	add	r0, sp, #248	; 0xf8
   24c72:	f7ff fb6f 	bl	24354 <mul_mont_384x>
   24c76:	f04f 0b0c 	mov.w	fp, #12
   24c7a:	f8cd b000 	str.w	fp, [sp]
   24c7e:	4653      	mov	r3, sl
   24c80:	aa4a      	add	r2, sp, #296	; 0x128
   24c82:	a93e      	add	r1, sp, #248	; 0xf8
   24c84:	a802      	add	r0, sp, #8
   24c86:	f7fc f84b 	bl	20d20 <add_mod_n>
   24c8a:	f8cd b000 	str.w	fp, [sp]
   24c8e:	4653      	mov	r3, sl
   24c90:	aa4a      	add	r2, sp, #296	; 0x128
   24c92:	a93e      	add	r1, sp, #248	; 0xf8
   24c94:	4608      	mov	r0, r1
   24c96:	f7fb fced 	bl	20674 <sub_mod_n>
   24c9a:	ab02      	add	r3, sp, #8
   24c9c:	f50d 7c92 	add.w	ip, sp, #292	; 0x124
   24ca0:	a90e      	add	r1, sp, #56	; 0x38
   24ca2:	f853 2b04 	ldr.w	r2, [r3], #4
   24ca6:	f84c 2f04 	str.w	r2, [ip, #4]!
   24caa:	4299      	cmp	r1, r3
   24cac:	d1f9      	bne.n	24ca2 <mul_by_xy0_fp6+0x7a>
   24cae:	f8df a10c 	ldr.w	sl, [pc, #268]	; 24dbc <mul_by_xy0_fp6+0x194>
   24cb2:	f04f 0b0c 	mov.w	fp, #12
   24cb6:	f8cd b000 	str.w	fp, [sp]
   24cba:	4653      	mov	r3, sl
   24cbc:	464a      	mov	r2, r9
   24cbe:	4631      	mov	r1, r6
   24cc0:	a826      	add	r0, sp, #152	; 0x98
   24cc2:	f7fc f82d 	bl	20d20 <add_mod_n>
   24cc6:	f8cd b000 	str.w	fp, [sp]
   24cca:	4653      	mov	r3, sl
   24ccc:	f106 0290 	add.w	r2, r6, #144	; 0x90
   24cd0:	f106 0130 	add.w	r1, r6, #48	; 0x30
   24cd4:	a832      	add	r0, sp, #200	; 0xc8
   24cd6:	f7fc f823 	bl	20d20 <add_mod_n>
   24cda:	f8cd b000 	str.w	fp, [sp]
   24cde:	4653      	mov	r3, sl
   24ce0:	463a      	mov	r2, r7
   24ce2:	4629      	mov	r1, r5
   24ce4:	a80e      	add	r0, sp, #56	; 0x38
   24ce6:	f7fc f81b 	bl	20d20 <add_mod_n>
   24cea:	f8cd b000 	str.w	fp, [sp]
   24cee:	4653      	mov	r3, sl
   24cf0:	f105 0290 	add.w	r2, r5, #144	; 0x90
   24cf4:	f105 0130 	add.w	r1, r5, #48	; 0x30
   24cf8:	a81a      	add	r0, sp, #104	; 0x68
   24cfa:	f7fc f811 	bl	20d20 <add_mod_n>
   24cfe:	f104 0660 	add.w	r6, r4, #96	; 0x60
   24d02:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 24dc0 <mul_by_xy0_fp6+0x198>
   24d06:	f8cd 9000 	str.w	r9, [sp]
   24d0a:	4653      	mov	r3, sl
   24d0c:	aa0e      	add	r2, sp, #56	; 0x38
   24d0e:	a926      	add	r1, sp, #152	; 0x98
   24d10:	4630      	mov	r0, r6
   24d12:	f7ff fb1f 	bl	24354 <mul_mont_384x>
   24d16:	f8cd b000 	str.w	fp, [sp]
   24d1a:	4653      	mov	r3, sl
   24d1c:	aa6e      	add	r2, sp, #440	; 0x1b8
   24d1e:	4631      	mov	r1, r6
   24d20:	4630      	mov	r0, r6
   24d22:	f7fb fca7 	bl	20674 <sub_mod_n>
   24d26:	f104 0790 	add.w	r7, r4, #144	; 0x90
   24d2a:	f8cd b000 	str.w	fp, [sp]
   24d2e:	4653      	mov	r3, sl
   24d30:	aa7a      	add	r2, sp, #488	; 0x1e8
   24d32:	4639      	mov	r1, r7
   24d34:	4638      	mov	r0, r7
   24d36:	f7fb fc9d 	bl	20674 <sub_mod_n>
   24d3a:	f8cd b000 	str.w	fp, [sp]
   24d3e:	4653      	mov	r3, sl
   24d40:	aa56      	add	r2, sp, #344	; 0x158
   24d42:	4631      	mov	r1, r6
   24d44:	4630      	mov	r0, r6
   24d46:	f7fb fc95 	bl	20674 <sub_mod_n>
   24d4a:	f8cd b000 	str.w	fp, [sp]
   24d4e:	4653      	mov	r3, sl
   24d50:	aa62      	add	r2, sp, #392	; 0x188
   24d52:	4639      	mov	r1, r7
   24d54:	4638      	mov	r0, r7
   24d56:	f7fb fc8d 	bl	20674 <sub_mod_n>
   24d5a:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
   24d5e:	f8cd 9000 	str.w	r9, [sp]
   24d62:	4653      	mov	r3, sl
   24d64:	462a      	mov	r2, r5
   24d66:	4641      	mov	r1, r8
   24d68:	4630      	mov	r0, r6
   24d6a:	f7ff faf3 	bl	24354 <mul_mont_384x>
   24d6e:	f8cd b000 	str.w	fp, [sp]
   24d72:	4653      	mov	r3, sl
   24d74:	aa56      	add	r2, sp, #344	; 0x158
   24d76:	4631      	mov	r1, r6
   24d78:	4630      	mov	r0, r6
   24d7a:	f7fb ffd1 	bl	20d20 <add_mod_n>
   24d7e:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   24d82:	f8cd b000 	str.w	fp, [sp]
   24d86:	4653      	mov	r3, sl
   24d88:	aa62      	add	r2, sp, #392	; 0x188
   24d8a:	4601      	mov	r1, r0
   24d8c:	f7fb ffc8 	bl	20d20 <add_mod_n>
   24d90:	f8cd b000 	str.w	fp, [sp]
   24d94:	4653      	mov	r3, sl
   24d96:	aa6e      	add	r2, sp, #440	; 0x1b8
   24d98:	a93e      	add	r1, sp, #248	; 0xf8
   24d9a:	4620      	mov	r0, r4
   24d9c:	f7fb ffc0 	bl	20d20 <add_mod_n>
   24da0:	f8cd b000 	str.w	fp, [sp]
   24da4:	4653      	mov	r3, sl
   24da6:	aa7a      	add	r2, sp, #488	; 0x1e8
   24da8:	a94a      	add	r1, sp, #296	; 0x128
   24daa:	f104 0030 	add.w	r0, r4, #48	; 0x30
   24dae:	f7fb ffb7 	bl	20d20 <add_mod_n>
   24db2:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
   24db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24dba:	bf00      	nop
   24dbc:	00038688 	.word	0x00038688
   24dc0:	fffcfffd 	.word	0xfffcfffd

00024dc4 <mul_by_xy00z0_fp12>:
   24dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24dc8:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
   24dcc:	4604      	mov	r4, r0
   24dce:	460e      	mov	r6, r1
   24dd0:	4615      	mov	r5, r2
   24dd2:	a8b6      	add	r0, sp, #728	; 0x2d8
   24dd4:	f7ff ff28 	bl	24c28 <mul_by_xy0_fp6>
   24dd8:	f506 7890 	add.w	r8, r6, #288	; 0x120
   24ddc:	f105 07c0 	add.w	r7, r5, #192	; 0xc0
   24de0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 24f5c <mul_by_xy00z0_fp12+0x198>
   24de4:	f8df a178 	ldr.w	sl, [pc, #376]	; 24f60 <mul_by_xy00z0_fp12+0x19c>
   24de8:	f8cd a000 	str.w	sl, [sp]
   24dec:	464b      	mov	r3, r9
   24dee:	463a      	mov	r2, r7
   24df0:	f506 71f0 	add.w	r1, r6, #480	; 0x1e0
   24df4:	a80e      	add	r0, sp, #56	; 0x38
   24df6:	f7ff faad 	bl	24354 <mul_mont_384x>
   24dfa:	f8cd a000 	str.w	sl, [sp]
   24dfe:	464b      	mov	r3, r9
   24e00:	463a      	mov	r2, r7
   24e02:	f506 71c0 	add.w	r1, r6, #384	; 0x180
   24e06:	a89e      	add	r0, sp, #632	; 0x278
   24e08:	f7ff faa4 	bl	24354 <mul_mont_384x>
   24e0c:	f8cd a000 	str.w	sl, [sp]
   24e10:	464b      	mov	r3, r9
   24e12:	463a      	mov	r2, r7
   24e14:	4641      	mov	r1, r8
   24e16:	a886      	add	r0, sp, #536	; 0x218
   24e18:	f7ff fa9c 	bl	24354 <mul_mont_384x>
   24e1c:	f04f 0a0c 	mov.w	sl, #12
   24e20:	f8cd a000 	str.w	sl, [sp]
   24e24:	464b      	mov	r3, r9
   24e26:	aa1a      	add	r2, sp, #104	; 0x68
   24e28:	a90e      	add	r1, sp, #56	; 0x38
   24e2a:	a802      	add	r0, sp, #8
   24e2c:	f7fb ff78 	bl	20d20 <add_mod_n>
   24e30:	f8cd a000 	str.w	sl, [sp]
   24e34:	464b      	mov	r3, r9
   24e36:	aa1a      	add	r2, sp, #104	; 0x68
   24e38:	a90e      	add	r1, sp, #56	; 0x38
   24e3a:	a86e      	add	r0, sp, #440	; 0x1b8
   24e3c:	f7fb fc1a 	bl	20674 <sub_mod_n>
   24e40:	ab02      	add	r3, sp, #8
   24e42:	aa79      	add	r2, sp, #484	; 0x1e4
   24e44:	a80e      	add	r0, sp, #56	; 0x38
   24e46:	f853 1b04 	ldr.w	r1, [r3], #4
   24e4a:	f842 1f04 	str.w	r1, [r2, #4]!
   24e4e:	4283      	cmp	r3, r0
   24e50:	d1f9      	bne.n	24e46 <mul_by_xy00z0_fp12+0x82>
   24e52:	f1a5 0c04 	sub.w	ip, r5, #4
   24e56:	ab26      	add	r3, sp, #152	; 0x98
   24e58:	a93e      	add	r1, sp, #248	; 0xf8
   24e5a:	f85c 2f04 	ldr.w	r2, [ip, #4]!
   24e5e:	f843 2b04 	str.w	r2, [r3], #4
   24e62:	428b      	cmp	r3, r1
   24e64:	d1f9      	bne.n	24e5a <mul_by_xy00z0_fp12+0x96>
   24e66:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 24f5c <mul_by_xy00z0_fp12+0x198>
   24e6a:	f04f 0a0c 	mov.w	sl, #12
   24e6e:	f8cd a000 	str.w	sl, [sp]
   24e72:	464b      	mov	r3, r9
   24e74:	463a      	mov	r2, r7
   24e76:	f105 0160 	add.w	r1, r5, #96	; 0x60
   24e7a:	a83e      	add	r0, sp, #248	; 0xf8
   24e7c:	f7fb ff50 	bl	20d20 <add_mod_n>
   24e80:	f8cd a000 	str.w	sl, [sp]
   24e84:	464b      	mov	r3, r9
   24e86:	f105 02f0 	add.w	r2, r5, #240	; 0xf0
   24e8a:	f105 0190 	add.w	r1, r5, #144	; 0x90
   24e8e:	a84a      	add	r0, sp, #296	; 0x128
   24e90:	f7fb ff46 	bl	20d20 <add_mod_n>
   24e94:	f504 7590 	add.w	r5, r4, #288	; 0x120
   24e98:	4642      	mov	r2, r8
   24e9a:	4631      	mov	r1, r6
   24e9c:	4628      	mov	r0, r5
   24e9e:	f7fd f8cd 	bl	2203c <add_fp6>
   24ea2:	aa26      	add	r2, sp, #152	; 0x98
   24ea4:	4629      	mov	r1, r5
   24ea6:	4628      	mov	r0, r5
   24ea8:	f7ff febe 	bl	24c28 <mul_by_xy0_fp6>
   24eac:	aab6      	add	r2, sp, #728	; 0x2d8
   24eae:	4629      	mov	r1, r5
   24eb0:	4628      	mov	r0, r5
   24eb2:	f7fd f879 	bl	21fa8 <sub_fp6>
   24eb6:	aa6e      	add	r2, sp, #440	; 0x1b8
   24eb8:	4629      	mov	r1, r5
   24eba:	4628      	mov	r0, r5
   24ebc:	f7fd f874 	bl	21fa8 <sub_fp6>
   24ec0:	f8cd a000 	str.w	sl, [sp]
   24ec4:	464b      	mov	r3, r9
   24ec6:	aaaa      	add	r2, sp, #680	; 0x2a8
   24ec8:	a99e      	add	r1, sp, #632	; 0x278
   24eca:	a80e      	add	r0, sp, #56	; 0x38
   24ecc:	f7fb ff28 	bl	20d20 <add_mod_n>
   24ed0:	f8cd a000 	str.w	sl, [sp]
   24ed4:	464b      	mov	r3, r9
   24ed6:	aaaa      	add	r2, sp, #680	; 0x2a8
   24ed8:	a99e      	add	r1, sp, #632	; 0x278
   24eda:	4608      	mov	r0, r1
   24edc:	f7fb fbca 	bl	20674 <sub_mod_n>
   24ee0:	ab0e      	add	r3, sp, #56	; 0x38
   24ee2:	aaa9      	add	r2, sp, #676	; 0x2a4
   24ee4:	a81a      	add	r0, sp, #104	; 0x68
   24ee6:	f853 1b04 	ldr.w	r1, [r3], #4
   24eea:	f842 1f04 	str.w	r1, [r2, #4]!
   24eee:	4283      	cmp	r3, r0
   24ef0:	d1f9      	bne.n	24ee6 <mul_by_xy00z0_fp12+0x122>
   24ef2:	4d1a      	ldr	r5, [pc, #104]	; (24f5c <mul_by_xy00z0_fp12+0x198>)
   24ef4:	260c      	movs	r6, #12
   24ef6:	9600      	str	r6, [sp, #0]
   24ef8:	462b      	mov	r3, r5
   24efa:	aa9e      	add	r2, sp, #632	; 0x278
   24efc:	a9b6      	add	r1, sp, #728	; 0x2d8
   24efe:	4620      	mov	r0, r4
   24f00:	f7fb ff0e 	bl	20d20 <add_mod_n>
   24f04:	9600      	str	r6, [sp, #0]
   24f06:	462b      	mov	r3, r5
   24f08:	aaaa      	add	r2, sp, #680	; 0x2a8
   24f0a:	a9c2      	add	r1, sp, #776	; 0x308
   24f0c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   24f10:	f7fb ff06 	bl	20d20 <add_mod_n>
   24f14:	9600      	str	r6, [sp, #0]
   24f16:	462b      	mov	r3, r5
   24f18:	aa6e      	add	r2, sp, #440	; 0x1b8
   24f1a:	a9ce      	add	r1, sp, #824	; 0x338
   24f1c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   24f20:	f7fb fefe 	bl	20d20 <add_mod_n>
   24f24:	9600      	str	r6, [sp, #0]
   24f26:	462b      	mov	r3, r5
   24f28:	aa7a      	add	r2, sp, #488	; 0x1e8
   24f2a:	a9da      	add	r1, sp, #872	; 0x368
   24f2c:	f104 0090 	add.w	r0, r4, #144	; 0x90
   24f30:	f7fb fef6 	bl	20d20 <add_mod_n>
   24f34:	9600      	str	r6, [sp, #0]
   24f36:	462b      	mov	r3, r5
   24f38:	aa86      	add	r2, sp, #536	; 0x218
   24f3a:	a9e6      	add	r1, sp, #920	; 0x398
   24f3c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   24f40:	f7fb feee 	bl	20d20 <add_mod_n>
   24f44:	9600      	str	r6, [sp, #0]
   24f46:	462b      	mov	r3, r5
   24f48:	aa92      	add	r2, sp, #584	; 0x248
   24f4a:	a9f2      	add	r1, sp, #968	; 0x3c8
   24f4c:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   24f50:	f7fb fee6 	bl	20d20 <add_mod_n>
   24f54:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
   24f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24f5c:	00038688 	.word	0x00038688
   24f60:	fffcfffd 	.word	0xfffcfffd

00024f64 <blst_fp12_mul_by_xy00z0>:
   24f64:	b508      	push	{r3, lr}
   24f66:	f7ff ff2d 	bl	24dc4 <mul_by_xy00z0_fp12>
   24f6a:	bd08      	pop	{r3, pc}

00024f6c <post_add_n_dbl>:
   24f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24f70:	b0c8      	sub	sp, #288	; 0x120
   24f72:	4604      	mov	r4, r0
   24f74:	4617      	mov	r7, r2
   24f76:	4698      	mov	r8, r3
   24f78:	f501 7590 	add.w	r5, r1, #288	; 0x120
   24f7c:	4668      	mov	r0, sp
   24f7e:	f7fb fe81 	bl	20c84 <post_line_by_Px2>
   24f82:	466a      	mov	r2, sp
   24f84:	4621      	mov	r1, r4
   24f86:	4620      	mov	r0, r4
   24f88:	f7ff ff1c 	bl	24dc4 <mul_by_xy00z0_fp12>
   24f8c:	f108 36ff 	add.w	r6, r8, #4294967295
   24f90:	f1b8 0f00 	cmp.w	r8, #0
   24f94:	d013      	beq.n	24fbe <post_add_n_dbl+0x52>
   24f96:	4621      	mov	r1, r4
   24f98:	4620      	mov	r0, r4
   24f9a:	f7ff fd71 	bl	24a80 <sqr_fp12>
   24f9e:	4629      	mov	r1, r5
   24fa0:	463a      	mov	r2, r7
   24fa2:	f505 7590 	add.w	r5, r5, #288	; 0x120
   24fa6:	4668      	mov	r0, sp
   24fa8:	f7fb fe6c 	bl	20c84 <post_line_by_Px2>
   24fac:	466a      	mov	r2, sp
   24fae:	4621      	mov	r1, r4
   24fb0:	4620      	mov	r0, r4
   24fb2:	f7ff ff07 	bl	24dc4 <mul_by_xy00z0_fp12>
   24fb6:	3e01      	subs	r6, #1
   24fb8:	f1b6 3fff 	cmp.w	r6, #4294967295
   24fbc:	d1eb      	bne.n	24f96 <post_add_n_dbl+0x2a>
   24fbe:	b048      	add	sp, #288	; 0x120
   24fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024fc4 <miller_loop_lines>:
   24fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24fc8:	b0e2      	sub	sp, #392	; 0x188
   24fca:	4605      	mov	r5, r0
   24fcc:	460e      	mov	r6, r1
   24fce:	4614      	mov	r4, r2
   24fd0:	4f32      	ldr	r7, [pc, #200]	; (2509c <miller_loop_lines+0xd8>)
   24fd2:	f04f 080c 	mov.w	r8, #12
   24fd6:	f8cd 8000 	str.w	r8, [sp]
   24fda:	463b      	mov	r3, r7
   24fdc:	4611      	mov	r1, r2
   24fde:	a84a      	add	r0, sp, #296	; 0x128
   24fe0:	f7fb fe9e 	bl	20d20 <add_mod_n>
   24fe4:	f8cd 8000 	str.w	r8, [sp]
   24fe8:	463b      	mov	r3, r7
   24fea:	2201      	movs	r2, #1
   24fec:	a94a      	add	r1, sp, #296	; 0x128
   24fee:	4608      	mov	r0, r1
   24ff0:	f7fc fd2a 	bl	21a48 <cneg_mod_n>
   24ff4:	f104 0130 	add.w	r1, r4, #48	; 0x30
   24ff8:	f8cd 8000 	str.w	r8, [sp]
   24ffc:	463b      	mov	r3, r7
   24ffe:	460a      	mov	r2, r1
   25000:	a856      	add	r0, sp, #344	; 0x158
   25002:	f7fb fe8d 	bl	20d20 <add_mod_n>
   25006:	aa4a      	add	r2, sp, #296	; 0x128
   25008:	4631      	mov	r1, r6
   2500a:	a802      	add	r0, sp, #8
   2500c:	f7fb fe3a 	bl	20c84 <post_line_by_Px2>
   25010:	462b      	mov	r3, r5
   25012:	f505 7110 	add.w	r1, r5, #576	; 0x240
   25016:	2200      	movs	r2, #0
   25018:	f843 2b04 	str.w	r2, [r3], #4
   2501c:	428b      	cmp	r3, r1
   2501e:	d1fb      	bne.n	25018 <miller_loop_lines+0x54>
   25020:	ab01      	add	r3, sp, #4
   25022:	1f2a      	subs	r2, r5, #4
   25024:	a831      	add	r0, sp, #196	; 0xc4
   25026:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2502a:	f842 1f04 	str.w	r1, [r2, #4]!
   2502e:	4283      	cmp	r3, r0
   25030:	d1f9      	bne.n	25026 <miller_loop_lines+0x62>
   25032:	ab31      	add	r3, sp, #196	; 0xc4
   25034:	f505 72be 	add.w	r2, r5, #380	; 0x17c
   25038:	a949      	add	r1, sp, #292	; 0x124
   2503a:	f853 4f04 	ldr.w	r4, [r3, #4]!
   2503e:	f842 4f04 	str.w	r4, [r2, #4]!
   25042:	428b      	cmp	r3, r1
   25044:	d1f9      	bne.n	2503a <miller_loop_lines+0x76>
   25046:	2302      	movs	r3, #2
   25048:	aa4a      	add	r2, sp, #296	; 0x128
   2504a:	f506 7190 	add.w	r1, r6, #288	; 0x120
   2504e:	4628      	mov	r0, r5
   25050:	f7ff ff8c 	bl	24f6c <post_add_n_dbl>
   25054:	2303      	movs	r3, #3
   25056:	aa4a      	add	r2, sp, #296	; 0x128
   25058:	f506 6190 	add.w	r1, r6, #1152	; 0x480
   2505c:	4628      	mov	r0, r5
   2505e:	f7ff ff85 	bl	24f6c <post_add_n_dbl>
   25062:	2309      	movs	r3, #9
   25064:	aa4a      	add	r2, sp, #296	; 0x128
   25066:	f506 6110 	add.w	r1, r6, #2304	; 0x900
   2506a:	4628      	mov	r0, r5
   2506c:	f7ff ff7e 	bl	24f6c <post_add_n_dbl>
   25070:	2320      	movs	r3, #32
   25072:	aa4a      	add	r2, sp, #296	; 0x128
   25074:	f506 51a2 	add.w	r1, r6, #5184	; 0x1440
   25078:	4628      	mov	r0, r5
   2507a:	f7ff ff77 	bl	24f6c <post_add_n_dbl>
   2507e:	2310      	movs	r3, #16
   25080:	aa4a      	add	r2, sp, #296	; 0x128
   25082:	f506 5165 	add.w	r1, r6, #14656	; 0x3940
   25086:	3120      	adds	r1, #32
   25088:	4628      	mov	r0, r5
   2508a:	f7ff ff6f 	bl	24f6c <post_add_n_dbl>
   2508e:	4628      	mov	r0, r5
   25090:	f7fc fe5a 	bl	21d48 <conjugate_fp12>
   25094:	b062      	add	sp, #392	; 0x188
   25096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2509a:	bf00      	nop
   2509c:	00038688 	.word	0x00038688

000250a0 <blst_miller_loop_lines>:
   250a0:	b508      	push	{r3, lr}
   250a2:	f7ff ff8f 	bl	24fc4 <miller_loop_lines>
   250a6:	bd08      	pop	{r3, pc}

000250a8 <sqr_n_mul_mont_383>:
   250a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   250ac:	b082      	sub	sp, #8
   250ae:	4605      	mov	r5, r0
   250b0:	461e      	mov	r6, r3
   250b2:	9f08      	ldr	r7, [sp, #32]
   250b4:	b182      	cbz	r2, 250d8 <sqr_n_mul_mont_383+0x30>
   250b6:	1e54      	subs	r4, r2, #1
   250b8:	f04f 080c 	mov.w	r8, #12
   250bc:	e000      	b.n	250c0 <sqr_n_mul_mont_383+0x18>
   250be:	4629      	mov	r1, r5
   250c0:	f8cd 8004 	str.w	r8, [sp, #4]
   250c4:	9700      	str	r7, [sp, #0]
   250c6:	4633      	mov	r3, r6
   250c8:	460a      	mov	r2, r1
   250ca:	4628      	mov	r0, r5
   250cc:	f7fc f909 	bl	212e2 <mul_mont_nonred_n>
   250d0:	3c01      	subs	r4, #1
   250d2:	f1b4 3fff 	cmp.w	r4, #4294967295
   250d6:	d1f2      	bne.n	250be <sqr_n_mul_mont_383+0x16>
   250d8:	230c      	movs	r3, #12
   250da:	9301      	str	r3, [sp, #4]
   250dc:	9700      	str	r7, [sp, #0]
   250de:	4633      	mov	r3, r6
   250e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   250e2:	4629      	mov	r1, r5
   250e4:	4628      	mov	r0, r5
   250e6:	f7fb fc73 	bl	209d0 <mul_mont_n>
   250ea:	b002      	add	sp, #8
   250ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000250f0 <flt_reciprocal_fp>:
   250f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   250f4:	f5ad 7d45 	sub.w	sp, sp, #788	; 0x314
   250f8:	9003      	str	r0, [sp, #12]
   250fa:	1f0b      	subs	r3, r1, #4
   250fc:	aa0f      	add	r2, sp, #60	; 0x3c
   250fe:	f101 002c 	add.w	r0, r1, #44	; 0x2c
   25102:	f853 1f04 	ldr.w	r1, [r3, #4]!
   25106:	f842 1f04 	str.w	r1, [r2, #4]!
   2510a:	4283      	cmp	r3, r0
   2510c:	d1f9      	bne.n	25102 <flt_reciprocal_fp+0x12>
   2510e:	f8df b2e4 	ldr.w	fp, [pc, #740]	; 253f4 <flt_reciprocal_fp+0x304>
   25112:	270c      	movs	r7, #12
   25114:	9701      	str	r7, [sp, #4]
   25116:	4eb8      	ldr	r6, [pc, #736]	; (253f8 <flt_reciprocal_fp+0x308>)
   25118:	9600      	str	r6, [sp, #0]
   2511a:	465b      	mov	r3, fp
   2511c:	aa10      	add	r2, sp, #64	; 0x40
   2511e:	4611      	mov	r1, r2
   25120:	a804      	add	r0, sp, #16
   25122:	f7fb fc55 	bl	209d0 <mul_mont_n>
   25126:	ad70      	add	r5, sp, #448	; 0x1c0
   25128:	9701      	str	r7, [sp, #4]
   2512a:	9600      	str	r6, [sp, #0]
   2512c:	465b      	mov	r3, fp
   2512e:	aa10      	add	r2, sp, #64	; 0x40
   25130:	a904      	add	r1, sp, #16
   25132:	4628      	mov	r0, r5
   25134:	f7fb fc4c 	bl	209d0 <mul_mont_n>
   25138:	ac40      	add	r4, sp, #256	; 0x100
   2513a:	9701      	str	r7, [sp, #4]
   2513c:	9600      	str	r6, [sp, #0]
   2513e:	465b      	mov	r3, fp
   25140:	aa04      	add	r2, sp, #16
   25142:	4611      	mov	r1, r2
   25144:	4620      	mov	r0, r4
   25146:	f7fb fc43 	bl	209d0 <mul_mont_n>
   2514a:	9701      	str	r7, [sp, #4]
   2514c:	9600      	str	r6, [sp, #0]
   2514e:	465b      	mov	r3, fp
   25150:	aa04      	add	r2, sp, #16
   25152:	4629      	mov	r1, r5
   25154:	a81c      	add	r0, sp, #112	; 0x70
   25156:	f7fb fc3b 	bl	209d0 <mul_mont_n>
   2515a:	9701      	str	r7, [sp, #4]
   2515c:	9600      	str	r6, [sp, #0]
   2515e:	465b      	mov	r3, fp
   25160:	462a      	mov	r2, r5
   25162:	4621      	mov	r1, r4
   25164:	a858      	add	r0, sp, #352	; 0x160
   25166:	f7fb fc33 	bl	209d0 <mul_mont_n>
   2516a:	9701      	str	r7, [sp, #4]
   2516c:	9600      	str	r6, [sp, #0]
   2516e:	465b      	mov	r3, fp
   25170:	4622      	mov	r2, r4
   25172:	a91c      	add	r1, sp, #112	; 0x70
   25174:	a87c      	add	r0, sp, #496	; 0x1f0
   25176:	f7fb fc2b 	bl	209d0 <mul_mont_n>
   2517a:	9701      	str	r7, [sp, #4]
   2517c:	9600      	str	r6, [sp, #0]
   2517e:	465b      	mov	r3, fp
   25180:	4622      	mov	r2, r4
   25182:	a958      	add	r1, sp, #352	; 0x160
   25184:	a8a0      	add	r0, sp, #640	; 0x280
   25186:	f7fb fc23 	bl	209d0 <mul_mont_n>
   2518a:	f10d 08d0 	add.w	r8, sp, #208	; 0xd0
   2518e:	9701      	str	r7, [sp, #4]
   25190:	9600      	str	r6, [sp, #0]
   25192:	465b      	mov	r3, fp
   25194:	4622      	mov	r2, r4
   25196:	a97c      	add	r1, sp, #496	; 0x1f0
   25198:	4640      	mov	r0, r8
   2519a:	f7fb fc19 	bl	209d0 <mul_mont_n>
   2519e:	f50d 79c8 	add.w	r9, sp, #400	; 0x190
   251a2:	9701      	str	r7, [sp, #4]
   251a4:	9600      	str	r6, [sp, #0]
   251a6:	465b      	mov	r3, fp
   251a8:	4622      	mov	r2, r4
   251aa:	a9a0      	add	r1, sp, #640	; 0x280
   251ac:	4648      	mov	r0, r9
   251ae:	f7fb fc0f 	bl	209d0 <mul_mont_n>
   251b2:	9701      	str	r7, [sp, #4]
   251b4:	9600      	str	r6, [sp, #0]
   251b6:	465b      	mov	r3, fp
   251b8:	4622      	mov	r2, r4
   251ba:	4641      	mov	r1, r8
   251bc:	a8b8      	add	r0, sp, #736	; 0x2e0
   251be:	f7fb fc07 	bl	209d0 <mul_mont_n>
   251c2:	9701      	str	r7, [sp, #4]
   251c4:	9600      	str	r6, [sp, #0]
   251c6:	465b      	mov	r3, fp
   251c8:	4622      	mov	r2, r4
   251ca:	4649      	mov	r1, r9
   251cc:	a888      	add	r0, sp, #544	; 0x220
   251ce:	f7fb fbff 	bl	209d0 <mul_mont_n>
   251d2:	9701      	str	r7, [sp, #4]
   251d4:	9600      	str	r6, [sp, #0]
   251d6:	465b      	mov	r3, fp
   251d8:	4622      	mov	r2, r4
   251da:	a9b8      	add	r1, sp, #736	; 0x2e0
   251dc:	a828      	add	r0, sp, #160	; 0xa0
   251de:	f7fb fbf7 	bl	209d0 <mul_mont_n>
   251e2:	9701      	str	r7, [sp, #4]
   251e4:	9600      	str	r6, [sp, #0]
   251e6:	465b      	mov	r3, fp
   251e8:	4622      	mov	r2, r4
   251ea:	a988      	add	r1, sp, #544	; 0x220
   251ec:	a894      	add	r0, sp, #592	; 0x250
   251ee:	f7fb fbef 	bl	209d0 <mul_mont_n>
   251f2:	9701      	str	r7, [sp, #4]
   251f4:	9600      	str	r6, [sp, #0]
   251f6:	465b      	mov	r3, fp
   251f8:	4642      	mov	r2, r8
   251fa:	4641      	mov	r1, r8
   251fc:	a804      	add	r0, sp, #16
   251fe:	f7fb fbe7 	bl	209d0 <mul_mont_n>
   25202:	9701      	str	r7, [sp, #4]
   25204:	9600      	str	r6, [sp, #0]
   25206:	465b      	mov	r3, fp
   25208:	4622      	mov	r2, r4
   2520a:	a994      	add	r1, sp, #592	; 0x250
   2520c:	a8ac      	add	r0, sp, #688	; 0x2b0
   2520e:	f7fb fbdf 	bl	209d0 <mul_mont_n>
   25212:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
   25216:	9701      	str	r7, [sp, #4]
   25218:	9600      	str	r6, [sp, #0]
   2521a:	465b      	mov	r3, fp
   2521c:	462a      	mov	r2, r5
   2521e:	a904      	add	r1, sp, #16
   25220:	4650      	mov	r0, sl
   25222:	f7fb fbd5 	bl	209d0 <mul_mont_n>
   25226:	9701      	str	r7, [sp, #4]
   25228:	9600      	str	r6, [sp, #0]
   2522a:	465b      	mov	r3, fp
   2522c:	aa1c      	add	r2, sp, #112	; 0x70
   2522e:	a904      	add	r1, sp, #16
   25230:	4620      	mov	r0, r4
   25232:	f7fb fbcd 	bl	209d0 <mul_mont_n>
   25236:	abb8      	add	r3, sp, #736	; 0x2e0
   25238:	9301      	str	r3, [sp, #4]
   2523a:	9600      	str	r6, [sp, #0]
   2523c:	465b      	mov	r3, fp
   2523e:	463a      	mov	r2, r7
   25240:	a904      	add	r1, sp, #16
   25242:	4608      	mov	r0, r1
   25244:	f7ff ff30 	bl	250a8 <sqr_n_mul_mont_383>
   25248:	f8cd 9004 	str.w	r9, [sp, #4]
   2524c:	9600      	str	r6, [sp, #0]
   2524e:	465b      	mov	r3, fp
   25250:	2207      	movs	r2, #7
   25252:	a904      	add	r1, sp, #16
   25254:	4608      	mov	r0, r1
   25256:	f7ff ff27 	bl	250a8 <sqr_n_mul_mont_383>
   2525a:	ab1c      	add	r3, sp, #112	; 0x70
   2525c:	9301      	str	r3, [sp, #4]
   2525e:	9600      	str	r6, [sp, #0]
   25260:	465b      	mov	r3, fp
   25262:	2204      	movs	r2, #4
   25264:	a904      	add	r1, sp, #16
   25266:	4608      	mov	r0, r1
   25268:	f7ff ff1e 	bl	250a8 <sqr_n_mul_mont_383>
   2526c:	ab58      	add	r3, sp, #352	; 0x160
   2526e:	9301      	str	r3, [sp, #4]
   25270:	9600      	str	r6, [sp, #0]
   25272:	465b      	mov	r3, fp
   25274:	2206      	movs	r2, #6
   25276:	a904      	add	r1, sp, #16
   25278:	4608      	mov	r0, r1
   2527a:	f7ff ff15 	bl	250a8 <sqr_n_mul_mont_383>
   2527e:	ab94      	add	r3, sp, #592	; 0x250
   25280:	9301      	str	r3, [sp, #4]
   25282:	9600      	str	r6, [sp, #0]
   25284:	465b      	mov	r3, fp
   25286:	2207      	movs	r2, #7
   25288:	a904      	add	r1, sp, #16
   2528a:	4608      	mov	r0, r1
   2528c:	f7ff ff0c 	bl	250a8 <sqr_n_mul_mont_383>
   25290:	9401      	str	r4, [sp, #4]
   25292:	9600      	str	r6, [sp, #0]
   25294:	465b      	mov	r3, fp
   25296:	2205      	movs	r2, #5
   25298:	a904      	add	r1, sp, #16
   2529a:	4608      	mov	r0, r1
   2529c:	f7ff ff04 	bl	250a8 <sqr_n_mul_mont_383>
   252a0:	9501      	str	r5, [sp, #4]
   252a2:	9600      	str	r6, [sp, #0]
   252a4:	465b      	mov	r3, fp
   252a6:	2202      	movs	r2, #2
   252a8:	a904      	add	r1, sp, #16
   252aa:	4608      	mov	r0, r1
   252ac:	f7ff fefc 	bl	250a8 <sqr_n_mul_mont_383>
   252b0:	f8cd 8004 	str.w	r8, [sp, #4]
   252b4:	9600      	str	r6, [sp, #0]
   252b6:	465b      	mov	r3, fp
   252b8:	2206      	movs	r2, #6
   252ba:	a904      	add	r1, sp, #16
   252bc:	4608      	mov	r0, r1
   252be:	f7ff fef3 	bl	250a8 <sqr_n_mul_mont_383>
   252c2:	f8cd 8004 	str.w	r8, [sp, #4]
   252c6:	9600      	str	r6, [sp, #0]
   252c8:	465b      	mov	r3, fp
   252ca:	2206      	movs	r2, #6
   252cc:	a904      	add	r1, sp, #16
   252ce:	4608      	mov	r0, r1
   252d0:	f7ff feea 	bl	250a8 <sqr_n_mul_mont_383>
   252d4:	ab7c      	add	r3, sp, #496	; 0x1f0
   252d6:	9301      	str	r3, [sp, #4]
   252d8:	9600      	str	r6, [sp, #0]
   252da:	465b      	mov	r3, fp
   252dc:	2206      	movs	r2, #6
   252de:	a904      	add	r1, sp, #16
   252e0:	4608      	mov	r0, r1
   252e2:	f7ff fee1 	bl	250a8 <sqr_n_mul_mont_383>
   252e6:	9501      	str	r5, [sp, #4]
   252e8:	9600      	str	r6, [sp, #0]
   252ea:	465b      	mov	r3, fp
   252ec:	2203      	movs	r2, #3
   252ee:	a904      	add	r1, sp, #16
   252f0:	4608      	mov	r0, r1
   252f2:	f7ff fed9 	bl	250a8 <sqr_n_mul_mont_383>
   252f6:	f8cd 8004 	str.w	r8, [sp, #4]
   252fa:	9600      	str	r6, [sp, #0]
   252fc:	465b      	mov	r3, fp
   252fe:	2207      	movs	r2, #7
   25300:	a904      	add	r1, sp, #16
   25302:	4608      	mov	r0, r1
   25304:	f7ff fed0 	bl	250a8 <sqr_n_mul_mont_383>
   25308:	f8cd 8004 	str.w	r8, [sp, #4]
   2530c:	9600      	str	r6, [sp, #0]
   2530e:	465b      	mov	r3, fp
   25310:	2204      	movs	r2, #4
   25312:	a904      	add	r1, sp, #16
   25314:	4608      	mov	r0, r1
   25316:	f7ff fec7 	bl	250a8 <sqr_n_mul_mont_383>
   2531a:	f8cd 9004 	str.w	r9, [sp, #4]
   2531e:	9600      	str	r6, [sp, #0]
   25320:	465b      	mov	r3, fp
   25322:	2206      	movs	r2, #6
   25324:	a904      	add	r1, sp, #16
   25326:	4608      	mov	r0, r1
   25328:	f7ff febe 	bl	250a8 <sqr_n_mul_mont_383>
   2532c:	abac      	add	r3, sp, #688	; 0x2b0
   2532e:	9301      	str	r3, [sp, #4]
   25330:	9600      	str	r6, [sp, #0]
   25332:	465b      	mov	r3, fp
   25334:	2206      	movs	r2, #6
   25336:	a904      	add	r1, sp, #16
   25338:	4608      	mov	r0, r1
   2533a:	f7ff feb5 	bl	250a8 <sqr_n_mul_mont_383>
   2533e:	ab10      	add	r3, sp, #64	; 0x40
   25340:	9301      	str	r3, [sp, #4]
   25342:	9600      	str	r6, [sp, #0]
   25344:	465b      	mov	r3, fp
   25346:	2203      	movs	r2, #3
   25348:	a904      	add	r1, sp, #16
   2534a:	4608      	mov	r0, r1
   2534c:	f7ff feac 	bl	250a8 <sqr_n_mul_mont_383>
   25350:	f8cd 8004 	str.w	r8, [sp, #4]
   25354:	9600      	str	r6, [sp, #0]
   25356:	465b      	mov	r3, fp
   25358:	2208      	movs	r2, #8
   2535a:	a904      	add	r1, sp, #16
   2535c:	4608      	mov	r0, r1
   2535e:	f7ff fea3 	bl	250a8 <sqr_n_mul_mont_383>
   25362:	ab94      	add	r3, sp, #592	; 0x250
   25364:	9301      	str	r3, [sp, #4]
   25366:	9600      	str	r6, [sp, #0]
   25368:	465b      	mov	r3, fp
   2536a:	2207      	movs	r2, #7
   2536c:	a904      	add	r1, sp, #16
   2536e:	4608      	mov	r0, r1
   25370:	f7ff fe9a 	bl	250a8 <sqr_n_mul_mont_383>
   25374:	aba0      	add	r3, sp, #640	; 0x280
   25376:	9301      	str	r3, [sp, #4]
   25378:	9600      	str	r6, [sp, #0]
   2537a:	465b      	mov	r3, fp
   2537c:	2205      	movs	r2, #5
   2537e:	a904      	add	r1, sp, #16
   25380:	4608      	mov	r0, r1
   25382:	f7ff fe91 	bl	250a8 <sqr_n_mul_mont_383>
   25386:	f8cd 8004 	str.w	r8, [sp, #4]
   2538a:	9600      	str	r6, [sp, #0]
   2538c:	465b      	mov	r3, fp
   2538e:	2206      	movs	r2, #6
   25390:	a904      	add	r1, sp, #16
   25392:	4608      	mov	r0, r1
   25394:	f7ff fe88 	bl	250a8 <sqr_n_mul_mont_383>
   25398:	f8cd a004 	str.w	sl, [sp, #4]
   2539c:	9600      	str	r6, [sp, #0]
   2539e:	465b      	mov	r3, fp
   253a0:	2206      	movs	r2, #6
   253a2:	a904      	add	r1, sp, #16
   253a4:	4608      	mov	r0, r1
   253a6:	f7ff fe7f 	bl	250a8 <sqr_n_mul_mont_383>
   253aa:	ab7c      	add	r3, sp, #496	; 0x1f0
   253ac:	9301      	str	r3, [sp, #4]
   253ae:	9600      	str	r6, [sp, #0]
   253b0:	465b      	mov	r3, fp
   253b2:	2204      	movs	r2, #4
   253b4:	a904      	add	r1, sp, #16
   253b6:	4608      	mov	r0, r1
   253b8:	f7ff fe76 	bl	250a8 <sqr_n_mul_mont_383>
   253bc:	f8cd a004 	str.w	sl, [sp, #4]
   253c0:	9600      	str	r6, [sp, #0]
   253c2:	465b      	mov	r3, fp
   253c4:	2208      	movs	r2, #8
   253c6:	a904      	add	r1, sp, #16
   253c8:	4608      	mov	r0, r1
   253ca:	f7ff fe6d 	bl	250a8 <sqr_n_mul_mont_383>
   253ce:	f8cd 8004 	str.w	r8, [sp, #4]
   253d2:	9600      	str	r6, [sp, #0]
   253d4:	465b      	mov	r3, fp
   253d6:	2204      	movs	r2, #4
   253d8:	a904      	add	r1, sp, #16
   253da:	4608      	mov	r0, r1
   253dc:	f7ff fe64 	bl	250a8 <sqr_n_mul_mont_383>
   253e0:	ab94      	add	r3, sp, #592	; 0x250
   253e2:	9301      	str	r3, [sp, #4]
   253e4:	9600      	str	r6, [sp, #0]
   253e6:	465b      	mov	r3, fp
   253e8:	2207      	movs	r2, #7
   253ea:	a904      	add	r1, sp, #16
   253ec:	4608      	mov	r0, r1
   253ee:	f7ff fe5b 	bl	250a8 <sqr_n_mul_mont_383>
   253f2:	e003      	b.n	253fc <flt_reciprocal_fp+0x30c>
   253f4:	00038688 	.word	0x00038688
   253f8:	fffcfffd 	.word	0xfffcfffd
   253fc:	ab88      	add	r3, sp, #544	; 0x220
   253fe:	9301      	str	r3, [sp, #4]
   25400:	9600      	str	r6, [sp, #0]
   25402:	465b      	mov	r3, fp
   25404:	2209      	movs	r2, #9
   25406:	a904      	add	r1, sp, #16
   25408:	4608      	mov	r0, r1
   2540a:	f7ff fe4d 	bl	250a8 <sqr_n_mul_mont_383>
   2540e:	9501      	str	r5, [sp, #4]
   25410:	9600      	str	r6, [sp, #0]
   25412:	465b      	mov	r3, fp
   25414:	2202      	movs	r2, #2
   25416:	a904      	add	r1, sp, #16
   25418:	4608      	mov	r0, r1
   2541a:	f7ff fe45 	bl	250a8 <sqr_n_mul_mont_383>
   2541e:	ab58      	add	r3, sp, #352	; 0x160
   25420:	9301      	str	r3, [sp, #4]
   25422:	9600      	str	r6, [sp, #0]
   25424:	465b      	mov	r3, fp
   25426:	2205      	movs	r2, #5
   25428:	a904      	add	r1, sp, #16
   2542a:	4608      	mov	r0, r1
   2542c:	f7ff fe3c 	bl	250a8 <sqr_n_mul_mont_383>
   25430:	ab1c      	add	r3, sp, #112	; 0x70
   25432:	9301      	str	r3, [sp, #4]
   25434:	9600      	str	r6, [sp, #0]
   25436:	465b      	mov	r3, fp
   25438:	2207      	movs	r2, #7
   2543a:	a904      	add	r1, sp, #16
   2543c:	4608      	mov	r0, r1
   2543e:	f7ff fe33 	bl	250a8 <sqr_n_mul_mont_383>
   25442:	ab7c      	add	r3, sp, #496	; 0x1f0
   25444:	9301      	str	r3, [sp, #4]
   25446:	9600      	str	r6, [sp, #0]
   25448:	465b      	mov	r3, fp
   2544a:	2207      	movs	r2, #7
   2544c:	a904      	add	r1, sp, #16
   2544e:	4608      	mov	r0, r1
   25450:	f7ff fe2a 	bl	250a8 <sqr_n_mul_mont_383>
   25454:	ab94      	add	r3, sp, #592	; 0x250
   25456:	9301      	str	r3, [sp, #4]
   25458:	9600      	str	r6, [sp, #0]
   2545a:	465b      	mov	r3, fp
   2545c:	2206      	movs	r2, #6
   2545e:	a904      	add	r1, sp, #16
   25460:	4608      	mov	r0, r1
   25462:	f7ff fe21 	bl	250a8 <sqr_n_mul_mont_383>
   25466:	f8cd a004 	str.w	sl, [sp, #4]
   2546a:	9600      	str	r6, [sp, #0]
   2546c:	465b      	mov	r3, fp
   2546e:	2205      	movs	r2, #5
   25470:	a904      	add	r1, sp, #16
   25472:	4608      	mov	r0, r1
   25474:	f7ff fe18 	bl	250a8 <sqr_n_mul_mont_383>
   25478:	ab88      	add	r3, sp, #544	; 0x220
   2547a:	9301      	str	r3, [sp, #4]
   2547c:	9600      	str	r6, [sp, #0]
   2547e:	465b      	mov	r3, fp
   25480:	2205      	movs	r2, #5
   25482:	a904      	add	r1, sp, #16
   25484:	4608      	mov	r0, r1
   25486:	f7ff fe0f 	bl	250a8 <sqr_n_mul_mont_383>
   2548a:	ab88      	add	r3, sp, #544	; 0x220
   2548c:	9301      	str	r3, [sp, #4]
   2548e:	9600      	str	r6, [sp, #0]
   25490:	465b      	mov	r3, fp
   25492:	2205      	movs	r2, #5
   25494:	a904      	add	r1, sp, #16
   25496:	4608      	mov	r0, r1
   25498:	f7ff fe06 	bl	250a8 <sqr_n_mul_mont_383>
   2549c:	f8cd 8004 	str.w	r8, [sp, #4]
   254a0:	9600      	str	r6, [sp, #0]
   254a2:	465b      	mov	r3, fp
   254a4:	2208      	movs	r2, #8
   254a6:	a904      	add	r1, sp, #16
   254a8:	4608      	mov	r0, r1
   254aa:	f7ff fdfd 	bl	250a8 <sqr_n_mul_mont_383>
   254ae:	ab28      	add	r3, sp, #160	; 0xa0
   254b0:	9301      	str	r3, [sp, #4]
   254b2:	9600      	str	r6, [sp, #0]
   254b4:	465b      	mov	r3, fp
   254b6:	2207      	movs	r2, #7
   254b8:	a904      	add	r1, sp, #16
   254ba:	4608      	mov	r0, r1
   254bc:	f7ff fdf4 	bl	250a8 <sqr_n_mul_mont_383>
   254c0:	f8cd 9004 	str.w	r9, [sp, #4]
   254c4:	9600      	str	r6, [sp, #0]
   254c6:	465b      	mov	r3, fp
   254c8:	2209      	movs	r2, #9
   254ca:	a904      	add	r1, sp, #16
   254cc:	4608      	mov	r0, r1
   254ce:	f7ff fdeb 	bl	250a8 <sqr_n_mul_mont_383>
   254d2:	f8cd 8004 	str.w	r8, [sp, #4]
   254d6:	9600      	str	r6, [sp, #0]
   254d8:	465b      	mov	r3, fp
   254da:	2205      	movs	r2, #5
   254dc:	a904      	add	r1, sp, #16
   254de:	4608      	mov	r0, r1
   254e0:	f7ff fde2 	bl	250a8 <sqr_n_mul_mont_383>
   254e4:	9501      	str	r5, [sp, #4]
   254e6:	9600      	str	r6, [sp, #0]
   254e8:	465b      	mov	r3, fp
   254ea:	2203      	movs	r2, #3
   254ec:	a904      	add	r1, sp, #16
   254ee:	4608      	mov	r0, r1
   254f0:	f7ff fdda 	bl	250a8 <sqr_n_mul_mont_383>
   254f4:	f8cd 9004 	str.w	r9, [sp, #4]
   254f8:	9600      	str	r6, [sp, #0]
   254fa:	465b      	mov	r3, fp
   254fc:	2208      	movs	r2, #8
   254fe:	a904      	add	r1, sp, #16
   25500:	4608      	mov	r0, r1
   25502:	f7ff fdd1 	bl	250a8 <sqr_n_mul_mont_383>
   25506:	9501      	str	r5, [sp, #4]
   25508:	9600      	str	r6, [sp, #0]
   2550a:	465b      	mov	r3, fp
   2550c:	2203      	movs	r2, #3
   2550e:	a904      	add	r1, sp, #16
   25510:	4608      	mov	r0, r1
   25512:	f7ff fdc9 	bl	250a8 <sqr_n_mul_mont_383>
   25516:	ab7c      	add	r3, sp, #496	; 0x1f0
   25518:	9301      	str	r3, [sp, #4]
   2551a:	9600      	str	r6, [sp, #0]
   2551c:	465b      	mov	r3, fp
   2551e:	2207      	movs	r2, #7
   25520:	a904      	add	r1, sp, #16
   25522:	4608      	mov	r0, r1
   25524:	f7ff fdc0 	bl	250a8 <sqr_n_mul_mont_383>
   25528:	f8cd 9004 	str.w	r9, [sp, #4]
   2552c:	9600      	str	r6, [sp, #0]
   2552e:	465b      	mov	r3, fp
   25530:	2209      	movs	r2, #9
   25532:	a904      	add	r1, sp, #16
   25534:	4608      	mov	r0, r1
   25536:	f7ff fdb7 	bl	250a8 <sqr_n_mul_mont_383>
   2553a:	ab28      	add	r3, sp, #160	; 0xa0
   2553c:	9301      	str	r3, [sp, #4]
   2553e:	9600      	str	r6, [sp, #0]
   25540:	465b      	mov	r3, fp
   25542:	2206      	movs	r2, #6
   25544:	a904      	add	r1, sp, #16
   25546:	4608      	mov	r0, r1
   25548:	f7ff fdae 	bl	250a8 <sqr_n_mul_mont_383>
   2554c:	9401      	str	r4, [sp, #4]
   2554e:	9600      	str	r6, [sp, #0]
   25550:	465b      	mov	r3, fp
   25552:	2206      	movs	r2, #6
   25554:	a904      	add	r1, sp, #16
   25556:	4608      	mov	r0, r1
   25558:	f7ff fda6 	bl	250a8 <sqr_n_mul_mont_383>
   2555c:	9401      	str	r4, [sp, #4]
   2555e:	9600      	str	r6, [sp, #0]
   25560:	465b      	mov	r3, fp
   25562:	2205      	movs	r2, #5
   25564:	a904      	add	r1, sp, #16
   25566:	4608      	mov	r0, r1
   25568:	f7ff fd9e 	bl	250a8 <sqr_n_mul_mont_383>
   2556c:	9401      	str	r4, [sp, #4]
   2556e:	9600      	str	r6, [sp, #0]
   25570:	465b      	mov	r3, fp
   25572:	2205      	movs	r2, #5
   25574:	a904      	add	r1, sp, #16
   25576:	4608      	mov	r0, r1
   25578:	f7ff fd96 	bl	250a8 <sqr_n_mul_mont_383>
   2557c:	f8cd 8004 	str.w	r8, [sp, #4]
   25580:	9600      	str	r6, [sp, #0]
   25582:	465b      	mov	r3, fp
   25584:	2204      	movs	r2, #4
   25586:	a904      	add	r1, sp, #16
   25588:	4608      	mov	r0, r1
   2558a:	f7ff fd8d 	bl	250a8 <sqr_n_mul_mont_383>
   2558e:	9501      	str	r5, [sp, #4]
   25590:	9600      	str	r6, [sp, #0]
   25592:	465b      	mov	r3, fp
   25594:	2203      	movs	r2, #3
   25596:	a904      	add	r1, sp, #16
   25598:	4608      	mov	r0, r1
   2559a:	f7ff fd85 	bl	250a8 <sqr_n_mul_mont_383>
   2559e:	ab28      	add	r3, sp, #160	; 0xa0
   255a0:	9301      	str	r3, [sp, #4]
   255a2:	9600      	str	r6, [sp, #0]
   255a4:	465b      	mov	r3, fp
   255a6:	2208      	movs	r2, #8
   255a8:	a904      	add	r1, sp, #16
   255aa:	4608      	mov	r0, r1
   255ac:	f7ff fd7c 	bl	250a8 <sqr_n_mul_mont_383>
   255b0:	9401      	str	r4, [sp, #4]
   255b2:	9600      	str	r6, [sp, #0]
   255b4:	465b      	mov	r3, fp
   255b6:	2207      	movs	r2, #7
   255b8:	a904      	add	r1, sp, #16
   255ba:	4608      	mov	r0, r1
   255bc:	f7ff fd74 	bl	250a8 <sqr_n_mul_mont_383>
   255c0:	9401      	str	r4, [sp, #4]
   255c2:	9600      	str	r6, [sp, #0]
   255c4:	465b      	mov	r3, fp
   255c6:	2205      	movs	r2, #5
   255c8:	a904      	add	r1, sp, #16
   255ca:	4608      	mov	r0, r1
   255cc:	f7ff fd6c 	bl	250a8 <sqr_n_mul_mont_383>
   255d0:	9401      	str	r4, [sp, #4]
   255d2:	9600      	str	r6, [sp, #0]
   255d4:	465b      	mov	r3, fp
   255d6:	2205      	movs	r2, #5
   255d8:	a904      	add	r1, sp, #16
   255da:	4608      	mov	r0, r1
   255dc:	f7ff fd64 	bl	250a8 <sqr_n_mul_mont_383>
   255e0:	f8cd 9004 	str.w	r9, [sp, #4]
   255e4:	9600      	str	r6, [sp, #0]
   255e6:	465b      	mov	r3, fp
   255e8:	2204      	movs	r2, #4
   255ea:	a904      	add	r1, sp, #16
   255ec:	4608      	mov	r0, r1
   255ee:	f7ff fd5b 	bl	250a8 <sqr_n_mul_mont_383>
   255f2:	ab58      	add	r3, sp, #352	; 0x160
   255f4:	9301      	str	r3, [sp, #4]
   255f6:	9600      	str	r6, [sp, #0]
   255f8:	465b      	mov	r3, fp
   255fa:	2204      	movs	r2, #4
   255fc:	a904      	add	r1, sp, #16
   255fe:	4608      	mov	r0, r1
   25600:	f7ff fd52 	bl	250a8 <sqr_n_mul_mont_383>
   25604:	9401      	str	r4, [sp, #4]
   25606:	9600      	str	r6, [sp, #0]
   25608:	465b      	mov	r3, fp
   2560a:	2207      	movs	r2, #7
   2560c:	a904      	add	r1, sp, #16
   2560e:	4608      	mov	r0, r1
   25610:	f7ff fd4a 	bl	250a8 <sqr_n_mul_mont_383>
   25614:	f8cd a004 	str.w	sl, [sp, #4]
   25618:	9600      	str	r6, [sp, #0]
   2561a:	465b      	mov	r3, fp
   2561c:	2205      	movs	r2, #5
   2561e:	a904      	add	r1, sp, #16
   25620:	4608      	mov	r0, r1
   25622:	f7ff fd41 	bl	250a8 <sqr_n_mul_mont_383>
   25626:	ae40      	add	r6, sp, #256	; 0x100
   25628:	9601      	str	r6, [sp, #4]
   2562a:	4d2c      	ldr	r5, [pc, #176]	; (256dc <flt_reciprocal_fp+0x5ec>)
   2562c:	9500      	str	r5, [sp, #0]
   2562e:	465b      	mov	r3, fp
   25630:	2205      	movs	r2, #5
   25632:	a904      	add	r1, sp, #16
   25634:	4608      	mov	r0, r1
   25636:	f7ff fd37 	bl	250a8 <sqr_n_mul_mont_383>
   2563a:	9601      	str	r6, [sp, #4]
   2563c:	9500      	str	r5, [sp, #0]
   2563e:	465b      	mov	r3, fp
   25640:	2205      	movs	r2, #5
   25642:	a904      	add	r1, sp, #16
   25644:	4608      	mov	r0, r1
   25646:	f7ff fd2f 	bl	250a8 <sqr_n_mul_mont_383>
   2564a:	9601      	str	r6, [sp, #4]
   2564c:	9500      	str	r5, [sp, #0]
   2564e:	465b      	mov	r3, fp
   25650:	2205      	movs	r2, #5
   25652:	a904      	add	r1, sp, #16
   25654:	4608      	mov	r0, r1
   25656:	f7ff fd27 	bl	250a8 <sqr_n_mul_mont_383>
   2565a:	9601      	str	r6, [sp, #4]
   2565c:	9500      	str	r5, [sp, #0]
   2565e:	465b      	mov	r3, fp
   25660:	2205      	movs	r2, #5
   25662:	a904      	add	r1, sp, #16
   25664:	4608      	mov	r0, r1
   25666:	f7ff fd1f 	bl	250a8 <sqr_n_mul_mont_383>
   2566a:	9601      	str	r6, [sp, #4]
   2566c:	9500      	str	r5, [sp, #0]
   2566e:	465b      	mov	r3, fp
   25670:	2205      	movs	r2, #5
   25672:	a904      	add	r1, sp, #16
   25674:	4608      	mov	r0, r1
   25676:	f7ff fd17 	bl	250a8 <sqr_n_mul_mont_383>
   2567a:	9601      	str	r6, [sp, #4]
   2567c:	9500      	str	r5, [sp, #0]
   2567e:	465b      	mov	r3, fp
   25680:	2205      	movs	r2, #5
   25682:	a904      	add	r1, sp, #16
   25684:	4608      	mov	r0, r1
   25686:	f7ff fd0f 	bl	250a8 <sqr_n_mul_mont_383>
   2568a:	f8cd 8004 	str.w	r8, [sp, #4]
   2568e:	9500      	str	r5, [sp, #0]
   25690:	465b      	mov	r3, fp
   25692:	2204      	movs	r2, #4
   25694:	a904      	add	r1, sp, #16
   25696:	4608      	mov	r0, r1
   25698:	f7ff fd06 	bl	250a8 <sqr_n_mul_mont_383>
   2569c:	ab28      	add	r3, sp, #160	; 0xa0
   2569e:	9301      	str	r3, [sp, #4]
   256a0:	9500      	str	r5, [sp, #0]
   256a2:	465b      	mov	r3, fp
   256a4:	2206      	movs	r2, #6
   256a6:	a904      	add	r1, sp, #16
   256a8:	4608      	mov	r0, r1
   256aa:	f7ff fcfd 	bl	250a8 <sqr_n_mul_mont_383>
   256ae:	ab1c      	add	r3, sp, #112	; 0x70
   256b0:	9301      	str	r3, [sp, #4]
   256b2:	9500      	str	r5, [sp, #0]
   256b4:	465b      	mov	r3, fp
   256b6:	2204      	movs	r2, #4
   256b8:	a904      	add	r1, sp, #16
   256ba:	4608      	mov	r0, r1
   256bc:	f7ff fcf4 	bl	250a8 <sqr_n_mul_mont_383>
   256c0:	ab10      	add	r3, sp, #64	; 0x40
   256c2:	9301      	str	r3, [sp, #4]
   256c4:	9500      	str	r5, [sp, #0]
   256c6:	465b      	mov	r3, fp
   256c8:	2203      	movs	r2, #3
   256ca:	a904      	add	r1, sp, #16
   256cc:	9803      	ldr	r0, [sp, #12]
   256ce:	f7ff fceb 	bl	250a8 <sqr_n_mul_mont_383>
   256d2:	f50d 7d45 	add.w	sp, sp, #788	; 0x314
   256d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   256da:	bf00      	nop
   256dc:	fffcfffd 	.word	0xfffcfffd

000256e0 <reciprocal_fp>:
   256e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   256e4:	b09b      	sub	sp, #108	; 0x6c
   256e6:	4606      	mov	r6, r0
   256e8:	460f      	mov	r7, r1
   256ea:	f8df 9094 	ldr.w	r9, [pc, #148]	; 25780 <reciprocal_fp+0xa0>
   256ee:	4d25      	ldr	r5, [pc, #148]	; (25784 <reciprocal_fp+0xa4>)
   256f0:	240c      	movs	r4, #12
   256f2:	9400      	str	r4, [sp, #0]
   256f4:	f509 739c 	add.w	r3, r9, #312	; 0x138
   256f8:	462a      	mov	r2, r5
   256fa:	a802      	add	r0, sp, #8
   256fc:	f7fe f88c 	bl	23818 <ct_inverse_mod_n>
   25700:	f8df 8084 	ldr.w	r8, [pc, #132]	; 25788 <reciprocal_fp+0xa8>
   25704:	9400      	str	r4, [sp, #0]
   25706:	4643      	mov	r3, r8
   25708:	462a      	mov	r2, r5
   2570a:	a902      	add	r1, sp, #8
   2570c:	4608      	mov	r0, r1
   2570e:	f7fb fd10 	bl	21132 <redc_mont_n>
   25712:	9401      	str	r4, [sp, #4]
   25714:	f8cd 8000 	str.w	r8, [sp]
   25718:	462b      	mov	r3, r5
   2571a:	f509 72b4 	add.w	r2, r9, #360	; 0x168
   2571e:	a902      	add	r1, sp, #8
   25720:	4608      	mov	r0, r1
   25722:	f7fb f955 	bl	209d0 <mul_mont_n>
   25726:	9401      	str	r4, [sp, #4]
   25728:	f8cd 8000 	str.w	r8, [sp]
   2572c:	462b      	mov	r3, r5
   2572e:	463a      	mov	r2, r7
   25730:	a902      	add	r1, sp, #8
   25732:	a80e      	add	r0, sp, #56	; 0x38
   25734:	f7fb f94c 	bl	209d0 <mul_mont_n>
   25738:	ac0d      	add	r4, sp, #52	; 0x34
   2573a:	f105 0e90 	add.w	lr, r5, #144	; 0x90
   2573e:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
   25742:	2200      	movs	r2, #0
   25744:	f85e 3b04 	ldr.w	r3, [lr], #4
   25748:	f854 5f04 	ldr.w	r5, [r4, #4]!
   2574c:	ea83 0c05 	eor.w	ip, r3, r5
   25750:	ea42 020c 	orr.w	r2, r2, ip
   25754:	458e      	cmp	lr, r1
   25756:	d1f5      	bne.n	25744 <reciprocal_fp+0x64>
   25758:	1e53      	subs	r3, r2, #1
   2575a:	4393      	bics	r3, r2
   2575c:	d50b      	bpl.n	25776 <reciprocal_fp+0x96>
   2575e:	aa02      	add	r2, sp, #8
   25760:	1f33      	subs	r3, r6, #4
   25762:	362c      	adds	r6, #44	; 0x2c
   25764:	f852 1b04 	ldr.w	r1, [r2], #4
   25768:	f843 1f04 	str.w	r1, [r3, #4]!
   2576c:	42b3      	cmp	r3, r6
   2576e:	d1f9      	bne.n	25764 <reciprocal_fp+0x84>
   25770:	b01b      	add	sp, #108	; 0x6c
   25772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25776:	4639      	mov	r1, r7
   25778:	4630      	mov	r0, r6
   2577a:	f7ff fcb9 	bl	250f0 <flt_reciprocal_fp>
   2577e:	e7f7      	b.n	25770 <reciprocal_fp+0x90>
   25780:	00039780 	.word	0x00039780
   25784:	00038688 	.word	0x00038688
   25788:	fffcfffd 	.word	0xfffcfffd

0002578c <POINTonE1_from_Jacobian>:
   2578c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25790:	b09b      	sub	sp, #108	; 0x6c
   25792:	4607      	mov	r7, r0
   25794:	4689      	mov	r9, r1
   25796:	3160      	adds	r1, #96	; 0x60
   25798:	f109 045c 	add.w	r4, r9, #92	; 0x5c
   2579c:	f109 058c 	add.w	r5, r9, #140	; 0x8c
   257a0:	4623      	mov	r3, r4
   257a2:	f04f 0800 	mov.w	r8, #0
   257a6:	f853 2f04 	ldr.w	r2, [r3, #4]!
   257aa:	ea48 0802 	orr.w	r8, r8, r2
   257ae:	42ab      	cmp	r3, r5
   257b0:	d1f9      	bne.n	257a6 <POINTonE1_from_Jacobian+0x1a>
   257b2:	a80e      	add	r0, sp, #56	; 0x38
   257b4:	f7ff ff94 	bl	256e0 <reciprocal_fp>
   257b8:	4e23      	ldr	r6, [pc, #140]	; (25848 <POINTonE1_from_Jacobian+0xbc>)
   257ba:	f04f 0b0c 	mov.w	fp, #12
   257be:	f8cd b004 	str.w	fp, [sp, #4]
   257c2:	f8df a088 	ldr.w	sl, [pc, #136]	; 2584c <POINTonE1_from_Jacobian+0xc0>
   257c6:	f8cd a000 	str.w	sl, [sp]
   257ca:	4633      	mov	r3, r6
   257cc:	aa0e      	add	r2, sp, #56	; 0x38
   257ce:	4611      	mov	r1, r2
   257d0:	a802      	add	r0, sp, #8
   257d2:	f7fb f8fd 	bl	209d0 <mul_mont_n>
   257d6:	f8cd b004 	str.w	fp, [sp, #4]
   257da:	f8cd a000 	str.w	sl, [sp]
   257de:	4633      	mov	r3, r6
   257e0:	aa02      	add	r2, sp, #8
   257e2:	4649      	mov	r1, r9
   257e4:	4638      	mov	r0, r7
   257e6:	f7fb f8f3 	bl	209d0 <mul_mont_n>
   257ea:	f8cd b004 	str.w	fp, [sp, #4]
   257ee:	f8cd a000 	str.w	sl, [sp]
   257f2:	4633      	mov	r3, r6
   257f4:	aa0e      	add	r2, sp, #56	; 0x38
   257f6:	a902      	add	r1, sp, #8
   257f8:	4608      	mov	r0, r1
   257fa:	f7fb f8e9 	bl	209d0 <mul_mont_n>
   257fe:	f8cd b004 	str.w	fp, [sp, #4]
   25802:	f8cd a000 	str.w	sl, [sp]
   25806:	4633      	mov	r3, r6
   25808:	aa02      	add	r2, sp, #8
   2580a:	f109 0130 	add.w	r1, r9, #48	; 0x30
   2580e:	f107 0030 	add.w	r0, r7, #48	; 0x30
   25812:	f7fb f8dd 	bl	209d0 <mul_mont_n>
   25816:	f108 33ff 	add.w	r3, r8, #4294967295
   2581a:	ea23 0808 	bic.w	r8, r3, r8
   2581e:	ea4f 78e8 	mov.w	r8, r8, asr #31
   25822:	f606 534c 	addw	r3, r6, #3404	; 0xd4c
   25826:	f107 005c 	add.w	r0, r7, #92	; 0x5c
   2582a:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2582e:	f854 2f04 	ldr.w	r2, [r4, #4]!
   25832:	404a      	eors	r2, r1
   25834:	ea02 0208 	and.w	r2, r2, r8
   25838:	404a      	eors	r2, r1
   2583a:	f840 2f04 	str.w	r2, [r0, #4]!
   2583e:	42ac      	cmp	r4, r5
   25840:	d1f3      	bne.n	2582a <POINTonE1_from_Jacobian+0x9e>
   25842:	b01b      	add	sp, #108	; 0x6c
   25844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25848:	00038688 	.word	0x00038688
   2584c:	fffcfffd 	.word	0xfffcfffd

00025850 <blst_p1_from_jacobian>:
   25850:	b508      	push	{r3, lr}
   25852:	f7ff ff9b 	bl	2578c <POINTonE1_from_Jacobian>
   25856:	bd08      	pop	{r3, pc}

00025858 <blst_p1_to_affine>:
   25858:	b570      	push	{r4, r5, r6, lr}
   2585a:	b0a4      	sub	sp, #144	; 0x90
   2585c:	4604      	mov	r4, r0
   2585e:	f101 025c 	add.w	r2, r1, #92	; 0x5c
   25862:	4d0f      	ldr	r5, [pc, #60]	; (258a0 <blst_p1_to_affine+0x48>)
   25864:	f101 0c8c 	add.w	ip, r1, #140	; 0x8c
   25868:	2000      	movs	r0, #0
   2586a:	f855 3b04 	ldr.w	r3, [r5], #4
   2586e:	f852 6f04 	ldr.w	r6, [r2, #4]!
   25872:	4073      	eors	r3, r6
   25874:	4318      	orrs	r0, r3
   25876:	4562      	cmp	r2, ip
   25878:	d1f7      	bne.n	2586a <blst_p1_to_affine+0x12>
   2587a:	1e43      	subs	r3, r0, #1
   2587c:	4383      	bics	r3, r0
   2587e:	d50a      	bpl.n	25896 <blst_p1_to_affine+0x3e>
   25880:	1f0b      	subs	r3, r1, #4
   25882:	1f20      	subs	r0, r4, #4
   25884:	315c      	adds	r1, #92	; 0x5c
   25886:	f853 2f04 	ldr.w	r2, [r3, #4]!
   2588a:	f840 2f04 	str.w	r2, [r0, #4]!
   2588e:	428b      	cmp	r3, r1
   25890:	d1f9      	bne.n	25886 <blst_p1_to_affine+0x2e>
   25892:	b024      	add	sp, #144	; 0x90
   25894:	bd70      	pop	{r4, r5, r6, pc}
   25896:	4668      	mov	r0, sp
   25898:	f7ff ff78 	bl	2578c <POINTonE1_from_Jacobian>
   2589c:	4669      	mov	r1, sp
   2589e:	e7ef      	b.n	25880 <blst_p1_to_affine+0x28>
   258a0:	00038718 	.word	0x00038718

000258a4 <POINTonE1_Serialize_BE>:
   258a4:	b570      	push	{r4, r5, r6, lr}
   258a6:	b0a4      	sub	sp, #144	; 0x90
   258a8:	4606      	mov	r6, r0
   258aa:	f101 025c 	add.w	r2, r1, #92	; 0x5c
   258ae:	4c0e      	ldr	r4, [pc, #56]	; (258e8 <POINTonE1_Serialize_BE+0x44>)
   258b0:	f101 0e8c 	add.w	lr, r1, #140	; 0x8c
   258b4:	f04f 0c00 	mov.w	ip, #0
   258b8:	f854 3b04 	ldr.w	r3, [r4], #4
   258bc:	f852 5f04 	ldr.w	r5, [r2, #4]!
   258c0:	406b      	eors	r3, r5
   258c2:	ea4c 0c03 	orr.w	ip, ip, r3
   258c6:	4572      	cmp	r2, lr
   258c8:	d1f6      	bne.n	258b8 <POINTonE1_Serialize_BE+0x14>
   258ca:	f10c 33ff 	add.w	r3, ip, #4294967295
   258ce:	ea33 030c 	bics.w	r3, r3, ip
   258d2:	d504      	bpl.n	258de <POINTonE1_Serialize_BE+0x3a>
   258d4:	4630      	mov	r0, r6
   258d6:	f7fb fee7 	bl	216a8 <POINTonE1_affine_Serialize_BE>
   258da:	b024      	add	sp, #144	; 0x90
   258dc:	bd70      	pop	{r4, r5, r6, pc}
   258de:	4668      	mov	r0, sp
   258e0:	f7ff ff54 	bl	2578c <POINTonE1_from_Jacobian>
   258e4:	4669      	mov	r1, sp
   258e6:	e7f5      	b.n	258d4 <POINTonE1_Serialize_BE+0x30>
   258e8:	00038718 	.word	0x00038718

000258ec <blst_p1_serialize>:
   258ec:	b510      	push	{r4, lr}
   258ee:	f101 035c 	add.w	r3, r1, #92	; 0x5c
   258f2:	f101 0c8c 	add.w	ip, r1, #140	; 0x8c
   258f6:	2200      	movs	r2, #0
   258f8:	f853 4f04 	ldr.w	r4, [r3, #4]!
   258fc:	4322      	orrs	r2, r4
   258fe:	4563      	cmp	r3, ip
   25900:	d1fa      	bne.n	258f8 <blst_p1_serialize+0xc>
   25902:	1e53      	subs	r3, r2, #1
   25904:	4393      	bics	r3, r2
   25906:	d50a      	bpl.n	2591e <blst_p1_serialize+0x32>
   25908:	1e43      	subs	r3, r0, #1
   2590a:	f100 015f 	add.w	r1, r0, #95	; 0x5f
   2590e:	2200      	movs	r2, #0
   25910:	f803 2f01 	strb.w	r2, [r3, #1]!
   25914:	428b      	cmp	r3, r1
   25916:	d1fb      	bne.n	25910 <blst_p1_serialize+0x24>
   25918:	2340      	movs	r3, #64	; 0x40
   2591a:	7003      	strb	r3, [r0, #0]
   2591c:	bd10      	pop	{r4, pc}
   2591e:	f7ff ffc1 	bl	258a4 <POINTonE1_Serialize_BE>
   25922:	e7fb      	b.n	2591c <blst_p1_serialize+0x30>

00025924 <blst_p1_compress>:
   25924:	b570      	push	{r4, r5, r6, lr}
   25926:	b0a4      	sub	sp, #144	; 0x90
   25928:	4605      	mov	r5, r0
   2592a:	f101 0c5c 	add.w	ip, r1, #92	; 0x5c
   2592e:	f101 008c 	add.w	r0, r1, #140	; 0x8c
   25932:	4663      	mov	r3, ip
   25934:	2200      	movs	r2, #0
   25936:	f853 4f04 	ldr.w	r4, [r3, #4]!
   2593a:	4322      	orrs	r2, r4
   2593c:	4283      	cmp	r3, r0
   2593e:	d1fa      	bne.n	25936 <blst_p1_compress+0x12>
   25940:	1e53      	subs	r3, r2, #1
   25942:	ea23 0202 	bic.w	r2, r3, r2
   25946:	0fd2      	lsrs	r2, r2, #31
   25948:	d00b      	beq.n	25962 <blst_p1_compress+0x3e>
   2594a:	1e6b      	subs	r3, r5, #1
   2594c:	f105 012f 	add.w	r1, r5, #47	; 0x2f
   25950:	2200      	movs	r2, #0
   25952:	f803 2f01 	strb.w	r2, [r3, #1]!
   25956:	428b      	cmp	r3, r1
   25958:	d1fb      	bne.n	25952 <blst_p1_compress+0x2e>
   2595a:	23c0      	movs	r3, #192	; 0xc0
   2595c:	702b      	strb	r3, [r5, #0]
   2595e:	b024      	add	sp, #144	; 0x90
   25960:	bd70      	pop	{r4, r5, r6, pc}
   25962:	4c0e      	ldr	r4, [pc, #56]	; (2599c <blst_p1_compress+0x78>)
   25964:	f854 3b04 	ldr.w	r3, [r4], #4
   25968:	f85c 6f04 	ldr.w	r6, [ip, #4]!
   2596c:	4073      	eors	r3, r6
   2596e:	431a      	orrs	r2, r3
   25970:	4584      	cmp	ip, r0
   25972:	d1f7      	bne.n	25964 <blst_p1_compress+0x40>
   25974:	1e53      	subs	r3, r2, #1
   25976:	4393      	bics	r3, r2
   25978:	d50b      	bpl.n	25992 <blst_p1_compress+0x6e>
   2597a:	4628      	mov	r0, r5
   2597c:	f7fb fe5f 	bl	2163e <POINTonE1_affine_Compress_BE>
   25980:	0103      	lsls	r3, r0, #4
   25982:	f003 0320 	and.w	r3, r3, #32
   25986:	782a      	ldrb	r2, [r5, #0]
   25988:	4313      	orrs	r3, r2
   2598a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2598e:	702b      	strb	r3, [r5, #0]
   25990:	e7e5      	b.n	2595e <blst_p1_compress+0x3a>
   25992:	4668      	mov	r0, sp
   25994:	f7ff fefa 	bl	2578c <POINTonE1_from_Jacobian>
   25998:	4669      	mov	r1, sp
   2599a:	e7ee      	b.n	2597a <blst_p1_compress+0x56>
   2599c:	00038718 	.word	0x00038718

000259a0 <reciprocal_fp2>:
   259a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   259a4:	b09b      	sub	sp, #108	; 0x6c
   259a6:	4604      	mov	r4, r0
   259a8:	460f      	mov	r7, r1
   259aa:	4d1f      	ldr	r5, [pc, #124]	; (25a28 <reciprocal_fp2+0x88>)
   259ac:	260c      	movs	r6, #12
   259ae:	9601      	str	r6, [sp, #4]
   259b0:	f8df 8078 	ldr.w	r8, [pc, #120]	; 25a2c <reciprocal_fp2+0x8c>
   259b4:	f8cd 8000 	str.w	r8, [sp]
   259b8:	462b      	mov	r3, r5
   259ba:	460a      	mov	r2, r1
   259bc:	a80e      	add	r0, sp, #56	; 0x38
   259be:	f7fb f807 	bl	209d0 <mul_mont_n>
   259c2:	f107 0930 	add.w	r9, r7, #48	; 0x30
   259c6:	9601      	str	r6, [sp, #4]
   259c8:	f8cd 8000 	str.w	r8, [sp]
   259cc:	462b      	mov	r3, r5
   259ce:	464a      	mov	r2, r9
   259d0:	4649      	mov	r1, r9
   259d2:	a802      	add	r0, sp, #8
   259d4:	f7fa fffc 	bl	209d0 <mul_mont_n>
   259d8:	9600      	str	r6, [sp, #0]
   259da:	462b      	mov	r3, r5
   259dc:	aa02      	add	r2, sp, #8
   259de:	a90e      	add	r1, sp, #56	; 0x38
   259e0:	4608      	mov	r0, r1
   259e2:	f7fb f99d 	bl	20d20 <add_mod_n>
   259e6:	a90e      	add	r1, sp, #56	; 0x38
   259e8:	a802      	add	r0, sp, #8
   259ea:	f7ff fe79 	bl	256e0 <reciprocal_fp>
   259ee:	9601      	str	r6, [sp, #4]
   259f0:	f8cd 8000 	str.w	r8, [sp]
   259f4:	462b      	mov	r3, r5
   259f6:	aa02      	add	r2, sp, #8
   259f8:	4639      	mov	r1, r7
   259fa:	4620      	mov	r0, r4
   259fc:	f7fa ffe8 	bl	209d0 <mul_mont_n>
   25a00:	3430      	adds	r4, #48	; 0x30
   25a02:	9601      	str	r6, [sp, #4]
   25a04:	f8cd 8000 	str.w	r8, [sp]
   25a08:	462b      	mov	r3, r5
   25a0a:	aa02      	add	r2, sp, #8
   25a0c:	4649      	mov	r1, r9
   25a0e:	4620      	mov	r0, r4
   25a10:	f7fa ffde 	bl	209d0 <mul_mont_n>
   25a14:	9600      	str	r6, [sp, #0]
   25a16:	462b      	mov	r3, r5
   25a18:	2201      	movs	r2, #1
   25a1a:	4621      	mov	r1, r4
   25a1c:	4620      	mov	r0, r4
   25a1e:	f7fc f813 	bl	21a48 <cneg_mod_n>
   25a22:	b01b      	add	sp, #108	; 0x6c
   25a24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25a28:	00038688 	.word	0x00038688
   25a2c:	fffcfffd 	.word	0xfffcfffd

00025a30 <blst_fp2_inverse>:
   25a30:	b508      	push	{r3, lr}
   25a32:	f7ff ffb5 	bl	259a0 <reciprocal_fp2>
   25a36:	bd08      	pop	{r3, pc}

00025a38 <blst_fp2_eucl_inverse>:
   25a38:	b508      	push	{r3, lr}
   25a3a:	f7ff ffb1 	bl	259a0 <reciprocal_fp2>
   25a3e:	bd08      	pop	{r3, pc}

00025a40 <blst_fp_inverse>:
   25a40:	b508      	push	{r3, lr}
   25a42:	f7ff fe4d 	bl	256e0 <reciprocal_fp>
   25a46:	bd08      	pop	{r3, pc}

00025a48 <blst_fp_eucl_inverse>:
   25a48:	b508      	push	{r3, lr}
   25a4a:	f7ff fe49 	bl	256e0 <reciprocal_fp>
   25a4e:	bd08      	pop	{r3, pc}

00025a50 <recip_sqrt_fp_3mod4>:
   25a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25a54:	f5ad 7d45 	sub.w	sp, sp, #788	; 0x314
   25a58:	9003      	str	r0, [sp, #12]
   25a5a:	1f0b      	subs	r3, r1, #4
   25a5c:	aa9f      	add	r2, sp, #636	; 0x27c
   25a5e:	f101 002c 	add.w	r0, r1, #44	; 0x2c
   25a62:	f853 1f04 	ldr.w	r1, [r3, #4]!
   25a66:	f842 1f04 	str.w	r1, [r2, #4]!
   25a6a:	4283      	cmp	r3, r0
   25a6c:	d1f9      	bne.n	25a62 <recip_sqrt_fp_3mod4+0x12>
   25a6e:	f8df b2e4 	ldr.w	fp, [pc, #740]	; 25d54 <recip_sqrt_fp_3mod4+0x304>
   25a72:	270c      	movs	r7, #12
   25a74:	9701      	str	r7, [sp, #4]
   25a76:	4eb8      	ldr	r6, [pc, #736]	; (25d58 <recip_sqrt_fp_3mod4+0x308>)
   25a78:	9600      	str	r6, [sp, #0]
   25a7a:	465b      	mov	r3, fp
   25a7c:	aaa0      	add	r2, sp, #640	; 0x280
   25a7e:	4611      	mov	r1, r2
   25a80:	a804      	add	r0, sp, #16
   25a82:	f7fa ffa5 	bl	209d0 <mul_mont_n>
   25a86:	ad64      	add	r5, sp, #400	; 0x190
   25a88:	9701      	str	r7, [sp, #4]
   25a8a:	9600      	str	r6, [sp, #0]
   25a8c:	465b      	mov	r3, fp
   25a8e:	aaa0      	add	r2, sp, #640	; 0x280
   25a90:	a904      	add	r1, sp, #16
   25a92:	4628      	mov	r0, r5
   25a94:	f7fa ff9c 	bl	209d0 <mul_mont_n>
   25a98:	ac34      	add	r4, sp, #208	; 0xd0
   25a9a:	9701      	str	r7, [sp, #4]
   25a9c:	9600      	str	r6, [sp, #0]
   25a9e:	465b      	mov	r3, fp
   25aa0:	aa04      	add	r2, sp, #16
   25aa2:	4611      	mov	r1, r2
   25aa4:	4620      	mov	r0, r4
   25aa6:	f7fa ff93 	bl	209d0 <mul_mont_n>
   25aaa:	9701      	str	r7, [sp, #4]
   25aac:	9600      	str	r6, [sp, #0]
   25aae:	465b      	mov	r3, fp
   25ab0:	aa04      	add	r2, sp, #16
   25ab2:	4629      	mov	r1, r5
   25ab4:	a810      	add	r0, sp, #64	; 0x40
   25ab6:	f7fa ff8b 	bl	209d0 <mul_mont_n>
   25aba:	9701      	str	r7, [sp, #4]
   25abc:	9600      	str	r6, [sp, #0]
   25abe:	465b      	mov	r3, fp
   25ac0:	462a      	mov	r2, r5
   25ac2:	4621      	mov	r1, r4
   25ac4:	a84c      	add	r0, sp, #304	; 0x130
   25ac6:	f7fa ff83 	bl	209d0 <mul_mont_n>
   25aca:	9701      	str	r7, [sp, #4]
   25acc:	9600      	str	r6, [sp, #0]
   25ace:	465b      	mov	r3, fp
   25ad0:	4622      	mov	r2, r4
   25ad2:	a910      	add	r1, sp, #64	; 0x40
   25ad4:	a870      	add	r0, sp, #448	; 0x1c0
   25ad6:	f7fa ff7b 	bl	209d0 <mul_mont_n>
   25ada:	9701      	str	r7, [sp, #4]
   25adc:	9600      	str	r6, [sp, #0]
   25ade:	465b      	mov	r3, fp
   25ae0:	4622      	mov	r2, r4
   25ae2:	a94c      	add	r1, sp, #304	; 0x130
   25ae4:	a894      	add	r0, sp, #592	; 0x250
   25ae6:	f7fa ff73 	bl	209d0 <mul_mont_n>
   25aea:	f10d 08a0 	add.w	r8, sp, #160	; 0xa0
   25aee:	9701      	str	r7, [sp, #4]
   25af0:	9600      	str	r6, [sp, #0]
   25af2:	465b      	mov	r3, fp
   25af4:	4622      	mov	r2, r4
   25af6:	a970      	add	r1, sp, #448	; 0x1c0
   25af8:	4640      	mov	r0, r8
   25afa:	f7fa ff69 	bl	209d0 <mul_mont_n>
   25afe:	f50d 79b0 	add.w	r9, sp, #352	; 0x160
   25b02:	9701      	str	r7, [sp, #4]
   25b04:	9600      	str	r6, [sp, #0]
   25b06:	465b      	mov	r3, fp
   25b08:	4622      	mov	r2, r4
   25b0a:	a994      	add	r1, sp, #592	; 0x250
   25b0c:	4648      	mov	r0, r9
   25b0e:	f7fa ff5f 	bl	209d0 <mul_mont_n>
   25b12:	9701      	str	r7, [sp, #4]
   25b14:	9600      	str	r6, [sp, #0]
   25b16:	465b      	mov	r3, fp
   25b18:	4622      	mov	r2, r4
   25b1a:	4641      	mov	r1, r8
   25b1c:	a8b8      	add	r0, sp, #736	; 0x2e0
   25b1e:	f7fa ff57 	bl	209d0 <mul_mont_n>
   25b22:	9701      	str	r7, [sp, #4]
   25b24:	9600      	str	r6, [sp, #0]
   25b26:	465b      	mov	r3, fp
   25b28:	4622      	mov	r2, r4
   25b2a:	4649      	mov	r1, r9
   25b2c:	a87c      	add	r0, sp, #496	; 0x1f0
   25b2e:	f7fa ff4f 	bl	209d0 <mul_mont_n>
   25b32:	9701      	str	r7, [sp, #4]
   25b34:	9600      	str	r6, [sp, #0]
   25b36:	465b      	mov	r3, fp
   25b38:	4622      	mov	r2, r4
   25b3a:	a9b8      	add	r1, sp, #736	; 0x2e0
   25b3c:	a81c      	add	r0, sp, #112	; 0x70
   25b3e:	f7fa ff47 	bl	209d0 <mul_mont_n>
   25b42:	9701      	str	r7, [sp, #4]
   25b44:	9600      	str	r6, [sp, #0]
   25b46:	465b      	mov	r3, fp
   25b48:	4622      	mov	r2, r4
   25b4a:	a97c      	add	r1, sp, #496	; 0x1f0
   25b4c:	a888      	add	r0, sp, #544	; 0x220
   25b4e:	f7fa ff3f 	bl	209d0 <mul_mont_n>
   25b52:	9701      	str	r7, [sp, #4]
   25b54:	9600      	str	r6, [sp, #0]
   25b56:	465b      	mov	r3, fp
   25b58:	4642      	mov	r2, r8
   25b5a:	4641      	mov	r1, r8
   25b5c:	a804      	add	r0, sp, #16
   25b5e:	f7fa ff37 	bl	209d0 <mul_mont_n>
   25b62:	9701      	str	r7, [sp, #4]
   25b64:	9600      	str	r6, [sp, #0]
   25b66:	465b      	mov	r3, fp
   25b68:	4622      	mov	r2, r4
   25b6a:	a988      	add	r1, sp, #544	; 0x220
   25b6c:	a8ac      	add	r0, sp, #688	; 0x2b0
   25b6e:	f7fa ff2f 	bl	209d0 <mul_mont_n>
   25b72:	f50d 7a80 	add.w	sl, sp, #256	; 0x100
   25b76:	9701      	str	r7, [sp, #4]
   25b78:	9600      	str	r6, [sp, #0]
   25b7a:	465b      	mov	r3, fp
   25b7c:	462a      	mov	r2, r5
   25b7e:	a904      	add	r1, sp, #16
   25b80:	4650      	mov	r0, sl
   25b82:	f7fa ff25 	bl	209d0 <mul_mont_n>
   25b86:	9701      	str	r7, [sp, #4]
   25b88:	9600      	str	r6, [sp, #0]
   25b8a:	465b      	mov	r3, fp
   25b8c:	aa10      	add	r2, sp, #64	; 0x40
   25b8e:	a904      	add	r1, sp, #16
   25b90:	4620      	mov	r0, r4
   25b92:	f7fa ff1d 	bl	209d0 <mul_mont_n>
   25b96:	abb8      	add	r3, sp, #736	; 0x2e0
   25b98:	9301      	str	r3, [sp, #4]
   25b9a:	9600      	str	r6, [sp, #0]
   25b9c:	465b      	mov	r3, fp
   25b9e:	463a      	mov	r2, r7
   25ba0:	a904      	add	r1, sp, #16
   25ba2:	4608      	mov	r0, r1
   25ba4:	f7ff fa80 	bl	250a8 <sqr_n_mul_mont_383>
   25ba8:	f8cd 9004 	str.w	r9, [sp, #4]
   25bac:	9600      	str	r6, [sp, #0]
   25bae:	465b      	mov	r3, fp
   25bb0:	2207      	movs	r2, #7
   25bb2:	a904      	add	r1, sp, #16
   25bb4:	4608      	mov	r0, r1
   25bb6:	f7ff fa77 	bl	250a8 <sqr_n_mul_mont_383>
   25bba:	ab10      	add	r3, sp, #64	; 0x40
   25bbc:	9301      	str	r3, [sp, #4]
   25bbe:	9600      	str	r6, [sp, #0]
   25bc0:	465b      	mov	r3, fp
   25bc2:	2204      	movs	r2, #4
   25bc4:	a904      	add	r1, sp, #16
   25bc6:	4608      	mov	r0, r1
   25bc8:	f7ff fa6e 	bl	250a8 <sqr_n_mul_mont_383>
   25bcc:	ab4c      	add	r3, sp, #304	; 0x130
   25bce:	9301      	str	r3, [sp, #4]
   25bd0:	9600      	str	r6, [sp, #0]
   25bd2:	465b      	mov	r3, fp
   25bd4:	2206      	movs	r2, #6
   25bd6:	a904      	add	r1, sp, #16
   25bd8:	4608      	mov	r0, r1
   25bda:	f7ff fa65 	bl	250a8 <sqr_n_mul_mont_383>
   25bde:	ab88      	add	r3, sp, #544	; 0x220
   25be0:	9301      	str	r3, [sp, #4]
   25be2:	9600      	str	r6, [sp, #0]
   25be4:	465b      	mov	r3, fp
   25be6:	2207      	movs	r2, #7
   25be8:	a904      	add	r1, sp, #16
   25bea:	4608      	mov	r0, r1
   25bec:	f7ff fa5c 	bl	250a8 <sqr_n_mul_mont_383>
   25bf0:	9401      	str	r4, [sp, #4]
   25bf2:	9600      	str	r6, [sp, #0]
   25bf4:	465b      	mov	r3, fp
   25bf6:	2205      	movs	r2, #5
   25bf8:	a904      	add	r1, sp, #16
   25bfa:	4608      	mov	r0, r1
   25bfc:	f7ff fa54 	bl	250a8 <sqr_n_mul_mont_383>
   25c00:	9501      	str	r5, [sp, #4]
   25c02:	9600      	str	r6, [sp, #0]
   25c04:	465b      	mov	r3, fp
   25c06:	2202      	movs	r2, #2
   25c08:	a904      	add	r1, sp, #16
   25c0a:	4608      	mov	r0, r1
   25c0c:	f7ff fa4c 	bl	250a8 <sqr_n_mul_mont_383>
   25c10:	f8cd 8004 	str.w	r8, [sp, #4]
   25c14:	9600      	str	r6, [sp, #0]
   25c16:	465b      	mov	r3, fp
   25c18:	2206      	movs	r2, #6
   25c1a:	a904      	add	r1, sp, #16
   25c1c:	4608      	mov	r0, r1
   25c1e:	f7ff fa43 	bl	250a8 <sqr_n_mul_mont_383>
   25c22:	f8cd 8004 	str.w	r8, [sp, #4]
   25c26:	9600      	str	r6, [sp, #0]
   25c28:	465b      	mov	r3, fp
   25c2a:	2206      	movs	r2, #6
   25c2c:	a904      	add	r1, sp, #16
   25c2e:	4608      	mov	r0, r1
   25c30:	f7ff fa3a 	bl	250a8 <sqr_n_mul_mont_383>
   25c34:	ab70      	add	r3, sp, #448	; 0x1c0
   25c36:	9301      	str	r3, [sp, #4]
   25c38:	9600      	str	r6, [sp, #0]
   25c3a:	465b      	mov	r3, fp
   25c3c:	2206      	movs	r2, #6
   25c3e:	a904      	add	r1, sp, #16
   25c40:	4608      	mov	r0, r1
   25c42:	f7ff fa31 	bl	250a8 <sqr_n_mul_mont_383>
   25c46:	9501      	str	r5, [sp, #4]
   25c48:	9600      	str	r6, [sp, #0]
   25c4a:	465b      	mov	r3, fp
   25c4c:	2203      	movs	r2, #3
   25c4e:	a904      	add	r1, sp, #16
   25c50:	4608      	mov	r0, r1
   25c52:	f7ff fa29 	bl	250a8 <sqr_n_mul_mont_383>
   25c56:	f8cd 8004 	str.w	r8, [sp, #4]
   25c5a:	9600      	str	r6, [sp, #0]
   25c5c:	465b      	mov	r3, fp
   25c5e:	2207      	movs	r2, #7
   25c60:	a904      	add	r1, sp, #16
   25c62:	4608      	mov	r0, r1
   25c64:	f7ff fa20 	bl	250a8 <sqr_n_mul_mont_383>
   25c68:	f8cd 8004 	str.w	r8, [sp, #4]
   25c6c:	9600      	str	r6, [sp, #0]
   25c6e:	465b      	mov	r3, fp
   25c70:	2204      	movs	r2, #4
   25c72:	a904      	add	r1, sp, #16
   25c74:	4608      	mov	r0, r1
   25c76:	f7ff fa17 	bl	250a8 <sqr_n_mul_mont_383>
   25c7a:	f8cd 9004 	str.w	r9, [sp, #4]
   25c7e:	9600      	str	r6, [sp, #0]
   25c80:	465b      	mov	r3, fp
   25c82:	2206      	movs	r2, #6
   25c84:	a904      	add	r1, sp, #16
   25c86:	4608      	mov	r0, r1
   25c88:	f7ff fa0e 	bl	250a8 <sqr_n_mul_mont_383>
   25c8c:	abac      	add	r3, sp, #688	; 0x2b0
   25c8e:	9301      	str	r3, [sp, #4]
   25c90:	9600      	str	r6, [sp, #0]
   25c92:	465b      	mov	r3, fp
   25c94:	2206      	movs	r2, #6
   25c96:	a904      	add	r1, sp, #16
   25c98:	4608      	mov	r0, r1
   25c9a:	f7ff fa05 	bl	250a8 <sqr_n_mul_mont_383>
   25c9e:	aba0      	add	r3, sp, #640	; 0x280
   25ca0:	9301      	str	r3, [sp, #4]
   25ca2:	9600      	str	r6, [sp, #0]
   25ca4:	465b      	mov	r3, fp
   25ca6:	2203      	movs	r2, #3
   25ca8:	a904      	add	r1, sp, #16
   25caa:	4608      	mov	r0, r1
   25cac:	f7ff f9fc 	bl	250a8 <sqr_n_mul_mont_383>
   25cb0:	f8cd 8004 	str.w	r8, [sp, #4]
   25cb4:	9600      	str	r6, [sp, #0]
   25cb6:	465b      	mov	r3, fp
   25cb8:	2208      	movs	r2, #8
   25cba:	a904      	add	r1, sp, #16
   25cbc:	4608      	mov	r0, r1
   25cbe:	f7ff f9f3 	bl	250a8 <sqr_n_mul_mont_383>
   25cc2:	ab88      	add	r3, sp, #544	; 0x220
   25cc4:	9301      	str	r3, [sp, #4]
   25cc6:	9600      	str	r6, [sp, #0]
   25cc8:	465b      	mov	r3, fp
   25cca:	2207      	movs	r2, #7
   25ccc:	a904      	add	r1, sp, #16
   25cce:	4608      	mov	r0, r1
   25cd0:	f7ff f9ea 	bl	250a8 <sqr_n_mul_mont_383>
   25cd4:	ab94      	add	r3, sp, #592	; 0x250
   25cd6:	9301      	str	r3, [sp, #4]
   25cd8:	9600      	str	r6, [sp, #0]
   25cda:	465b      	mov	r3, fp
   25cdc:	2205      	movs	r2, #5
   25cde:	a904      	add	r1, sp, #16
   25ce0:	4608      	mov	r0, r1
   25ce2:	f7ff f9e1 	bl	250a8 <sqr_n_mul_mont_383>
   25ce6:	f8cd 8004 	str.w	r8, [sp, #4]
   25cea:	9600      	str	r6, [sp, #0]
   25cec:	465b      	mov	r3, fp
   25cee:	2206      	movs	r2, #6
   25cf0:	a904      	add	r1, sp, #16
   25cf2:	4608      	mov	r0, r1
   25cf4:	f7ff f9d8 	bl	250a8 <sqr_n_mul_mont_383>
   25cf8:	f8cd a004 	str.w	sl, [sp, #4]
   25cfc:	9600      	str	r6, [sp, #0]
   25cfe:	465b      	mov	r3, fp
   25d00:	2206      	movs	r2, #6
   25d02:	a904      	add	r1, sp, #16
   25d04:	4608      	mov	r0, r1
   25d06:	f7ff f9cf 	bl	250a8 <sqr_n_mul_mont_383>
   25d0a:	ab70      	add	r3, sp, #448	; 0x1c0
   25d0c:	9301      	str	r3, [sp, #4]
   25d0e:	9600      	str	r6, [sp, #0]
   25d10:	465b      	mov	r3, fp
   25d12:	2204      	movs	r2, #4
   25d14:	a904      	add	r1, sp, #16
   25d16:	4608      	mov	r0, r1
   25d18:	f7ff f9c6 	bl	250a8 <sqr_n_mul_mont_383>
   25d1c:	f8cd a004 	str.w	sl, [sp, #4]
   25d20:	9600      	str	r6, [sp, #0]
   25d22:	465b      	mov	r3, fp
   25d24:	2208      	movs	r2, #8
   25d26:	a904      	add	r1, sp, #16
   25d28:	4608      	mov	r0, r1
   25d2a:	f7ff f9bd 	bl	250a8 <sqr_n_mul_mont_383>
   25d2e:	f8cd 8004 	str.w	r8, [sp, #4]
   25d32:	9600      	str	r6, [sp, #0]
   25d34:	465b      	mov	r3, fp
   25d36:	2204      	movs	r2, #4
   25d38:	a904      	add	r1, sp, #16
   25d3a:	4608      	mov	r0, r1
   25d3c:	f7ff f9b4 	bl	250a8 <sqr_n_mul_mont_383>
   25d40:	ab88      	add	r3, sp, #544	; 0x220
   25d42:	9301      	str	r3, [sp, #4]
   25d44:	9600      	str	r6, [sp, #0]
   25d46:	465b      	mov	r3, fp
   25d48:	2207      	movs	r2, #7
   25d4a:	a904      	add	r1, sp, #16
   25d4c:	4608      	mov	r0, r1
   25d4e:	f7ff f9ab 	bl	250a8 <sqr_n_mul_mont_383>
   25d52:	e003      	b.n	25d5c <recip_sqrt_fp_3mod4+0x30c>
   25d54:	00038688 	.word	0x00038688
   25d58:	fffcfffd 	.word	0xfffcfffd
   25d5c:	ab7c      	add	r3, sp, #496	; 0x1f0
   25d5e:	9301      	str	r3, [sp, #4]
   25d60:	9600      	str	r6, [sp, #0]
   25d62:	465b      	mov	r3, fp
   25d64:	2209      	movs	r2, #9
   25d66:	a904      	add	r1, sp, #16
   25d68:	4608      	mov	r0, r1
   25d6a:	f7ff f99d 	bl	250a8 <sqr_n_mul_mont_383>
   25d6e:	9501      	str	r5, [sp, #4]
   25d70:	9600      	str	r6, [sp, #0]
   25d72:	465b      	mov	r3, fp
   25d74:	2202      	movs	r2, #2
   25d76:	a904      	add	r1, sp, #16
   25d78:	4608      	mov	r0, r1
   25d7a:	f7ff f995 	bl	250a8 <sqr_n_mul_mont_383>
   25d7e:	ab4c      	add	r3, sp, #304	; 0x130
   25d80:	9301      	str	r3, [sp, #4]
   25d82:	9600      	str	r6, [sp, #0]
   25d84:	465b      	mov	r3, fp
   25d86:	2205      	movs	r2, #5
   25d88:	a904      	add	r1, sp, #16
   25d8a:	4608      	mov	r0, r1
   25d8c:	f7ff f98c 	bl	250a8 <sqr_n_mul_mont_383>
   25d90:	ab10      	add	r3, sp, #64	; 0x40
   25d92:	9301      	str	r3, [sp, #4]
   25d94:	9600      	str	r6, [sp, #0]
   25d96:	465b      	mov	r3, fp
   25d98:	2207      	movs	r2, #7
   25d9a:	a904      	add	r1, sp, #16
   25d9c:	4608      	mov	r0, r1
   25d9e:	f7ff f983 	bl	250a8 <sqr_n_mul_mont_383>
   25da2:	ab70      	add	r3, sp, #448	; 0x1c0
   25da4:	9301      	str	r3, [sp, #4]
   25da6:	9600      	str	r6, [sp, #0]
   25da8:	465b      	mov	r3, fp
   25daa:	2207      	movs	r2, #7
   25dac:	a904      	add	r1, sp, #16
   25dae:	4608      	mov	r0, r1
   25db0:	f7ff f97a 	bl	250a8 <sqr_n_mul_mont_383>
   25db4:	ab88      	add	r3, sp, #544	; 0x220
   25db6:	9301      	str	r3, [sp, #4]
   25db8:	9600      	str	r6, [sp, #0]
   25dba:	465b      	mov	r3, fp
   25dbc:	2206      	movs	r2, #6
   25dbe:	a904      	add	r1, sp, #16
   25dc0:	4608      	mov	r0, r1
   25dc2:	f7ff f971 	bl	250a8 <sqr_n_mul_mont_383>
   25dc6:	f8cd a004 	str.w	sl, [sp, #4]
   25dca:	9600      	str	r6, [sp, #0]
   25dcc:	465b      	mov	r3, fp
   25dce:	2205      	movs	r2, #5
   25dd0:	a904      	add	r1, sp, #16
   25dd2:	4608      	mov	r0, r1
   25dd4:	f7ff f968 	bl	250a8 <sqr_n_mul_mont_383>
   25dd8:	ab7c      	add	r3, sp, #496	; 0x1f0
   25dda:	9301      	str	r3, [sp, #4]
   25ddc:	9600      	str	r6, [sp, #0]
   25dde:	465b      	mov	r3, fp
   25de0:	2205      	movs	r2, #5
   25de2:	a904      	add	r1, sp, #16
   25de4:	4608      	mov	r0, r1
   25de6:	f7ff f95f 	bl	250a8 <sqr_n_mul_mont_383>
   25dea:	ab7c      	add	r3, sp, #496	; 0x1f0
   25dec:	9301      	str	r3, [sp, #4]
   25dee:	9600      	str	r6, [sp, #0]
   25df0:	465b      	mov	r3, fp
   25df2:	2205      	movs	r2, #5
   25df4:	a904      	add	r1, sp, #16
   25df6:	4608      	mov	r0, r1
   25df8:	f7ff f956 	bl	250a8 <sqr_n_mul_mont_383>
   25dfc:	f8cd 8004 	str.w	r8, [sp, #4]
   25e00:	9600      	str	r6, [sp, #0]
   25e02:	465b      	mov	r3, fp
   25e04:	2208      	movs	r2, #8
   25e06:	a904      	add	r1, sp, #16
   25e08:	4608      	mov	r0, r1
   25e0a:	f7ff f94d 	bl	250a8 <sqr_n_mul_mont_383>
   25e0e:	ab1c      	add	r3, sp, #112	; 0x70
   25e10:	9301      	str	r3, [sp, #4]
   25e12:	9600      	str	r6, [sp, #0]
   25e14:	465b      	mov	r3, fp
   25e16:	2207      	movs	r2, #7
   25e18:	a904      	add	r1, sp, #16
   25e1a:	4608      	mov	r0, r1
   25e1c:	f7ff f944 	bl	250a8 <sqr_n_mul_mont_383>
   25e20:	f8cd 9004 	str.w	r9, [sp, #4]
   25e24:	9600      	str	r6, [sp, #0]
   25e26:	465b      	mov	r3, fp
   25e28:	2209      	movs	r2, #9
   25e2a:	a904      	add	r1, sp, #16
   25e2c:	4608      	mov	r0, r1
   25e2e:	f7ff f93b 	bl	250a8 <sqr_n_mul_mont_383>
   25e32:	f8cd 8004 	str.w	r8, [sp, #4]
   25e36:	9600      	str	r6, [sp, #0]
   25e38:	465b      	mov	r3, fp
   25e3a:	2205      	movs	r2, #5
   25e3c:	a904      	add	r1, sp, #16
   25e3e:	4608      	mov	r0, r1
   25e40:	f7ff f932 	bl	250a8 <sqr_n_mul_mont_383>
   25e44:	9501      	str	r5, [sp, #4]
   25e46:	9600      	str	r6, [sp, #0]
   25e48:	465b      	mov	r3, fp
   25e4a:	2203      	movs	r2, #3
   25e4c:	a904      	add	r1, sp, #16
   25e4e:	4608      	mov	r0, r1
   25e50:	f7ff f92a 	bl	250a8 <sqr_n_mul_mont_383>
   25e54:	f8cd 9004 	str.w	r9, [sp, #4]
   25e58:	9600      	str	r6, [sp, #0]
   25e5a:	465b      	mov	r3, fp
   25e5c:	2208      	movs	r2, #8
   25e5e:	a904      	add	r1, sp, #16
   25e60:	4608      	mov	r0, r1
   25e62:	f7ff f921 	bl	250a8 <sqr_n_mul_mont_383>
   25e66:	9501      	str	r5, [sp, #4]
   25e68:	9600      	str	r6, [sp, #0]
   25e6a:	465b      	mov	r3, fp
   25e6c:	2203      	movs	r2, #3
   25e6e:	a904      	add	r1, sp, #16
   25e70:	4608      	mov	r0, r1
   25e72:	f7ff f919 	bl	250a8 <sqr_n_mul_mont_383>
   25e76:	ab70      	add	r3, sp, #448	; 0x1c0
   25e78:	9301      	str	r3, [sp, #4]
   25e7a:	9600      	str	r6, [sp, #0]
   25e7c:	465b      	mov	r3, fp
   25e7e:	2207      	movs	r2, #7
   25e80:	a904      	add	r1, sp, #16
   25e82:	4608      	mov	r0, r1
   25e84:	f7ff f910 	bl	250a8 <sqr_n_mul_mont_383>
   25e88:	f8cd 9004 	str.w	r9, [sp, #4]
   25e8c:	9600      	str	r6, [sp, #0]
   25e8e:	465b      	mov	r3, fp
   25e90:	2209      	movs	r2, #9
   25e92:	a904      	add	r1, sp, #16
   25e94:	4608      	mov	r0, r1
   25e96:	f7ff f907 	bl	250a8 <sqr_n_mul_mont_383>
   25e9a:	ab1c      	add	r3, sp, #112	; 0x70
   25e9c:	9301      	str	r3, [sp, #4]
   25e9e:	9600      	str	r6, [sp, #0]
   25ea0:	465b      	mov	r3, fp
   25ea2:	2206      	movs	r2, #6
   25ea4:	a904      	add	r1, sp, #16
   25ea6:	4608      	mov	r0, r1
   25ea8:	f7ff f8fe 	bl	250a8 <sqr_n_mul_mont_383>
   25eac:	9401      	str	r4, [sp, #4]
   25eae:	9600      	str	r6, [sp, #0]
   25eb0:	465b      	mov	r3, fp
   25eb2:	2206      	movs	r2, #6
   25eb4:	a904      	add	r1, sp, #16
   25eb6:	4608      	mov	r0, r1
   25eb8:	f7ff f8f6 	bl	250a8 <sqr_n_mul_mont_383>
   25ebc:	9401      	str	r4, [sp, #4]
   25ebe:	9600      	str	r6, [sp, #0]
   25ec0:	465b      	mov	r3, fp
   25ec2:	2205      	movs	r2, #5
   25ec4:	a904      	add	r1, sp, #16
   25ec6:	4608      	mov	r0, r1
   25ec8:	f7ff f8ee 	bl	250a8 <sqr_n_mul_mont_383>
   25ecc:	9401      	str	r4, [sp, #4]
   25ece:	9600      	str	r6, [sp, #0]
   25ed0:	465b      	mov	r3, fp
   25ed2:	2205      	movs	r2, #5
   25ed4:	a904      	add	r1, sp, #16
   25ed6:	4608      	mov	r0, r1
   25ed8:	f7ff f8e6 	bl	250a8 <sqr_n_mul_mont_383>
   25edc:	f8cd 8004 	str.w	r8, [sp, #4]
   25ee0:	9600      	str	r6, [sp, #0]
   25ee2:	465b      	mov	r3, fp
   25ee4:	2204      	movs	r2, #4
   25ee6:	a904      	add	r1, sp, #16
   25ee8:	4608      	mov	r0, r1
   25eea:	f7ff f8dd 	bl	250a8 <sqr_n_mul_mont_383>
   25eee:	9501      	str	r5, [sp, #4]
   25ef0:	9600      	str	r6, [sp, #0]
   25ef2:	465b      	mov	r3, fp
   25ef4:	2203      	movs	r2, #3
   25ef6:	a904      	add	r1, sp, #16
   25ef8:	4608      	mov	r0, r1
   25efa:	f7ff f8d5 	bl	250a8 <sqr_n_mul_mont_383>
   25efe:	ab1c      	add	r3, sp, #112	; 0x70
   25f00:	9301      	str	r3, [sp, #4]
   25f02:	9600      	str	r6, [sp, #0]
   25f04:	465b      	mov	r3, fp
   25f06:	2208      	movs	r2, #8
   25f08:	a904      	add	r1, sp, #16
   25f0a:	4608      	mov	r0, r1
   25f0c:	f7ff f8cc 	bl	250a8 <sqr_n_mul_mont_383>
   25f10:	9401      	str	r4, [sp, #4]
   25f12:	9600      	str	r6, [sp, #0]
   25f14:	465b      	mov	r3, fp
   25f16:	2207      	movs	r2, #7
   25f18:	a904      	add	r1, sp, #16
   25f1a:	4608      	mov	r0, r1
   25f1c:	f7ff f8c4 	bl	250a8 <sqr_n_mul_mont_383>
   25f20:	9401      	str	r4, [sp, #4]
   25f22:	9600      	str	r6, [sp, #0]
   25f24:	465b      	mov	r3, fp
   25f26:	2205      	movs	r2, #5
   25f28:	a904      	add	r1, sp, #16
   25f2a:	4608      	mov	r0, r1
   25f2c:	f7ff f8bc 	bl	250a8 <sqr_n_mul_mont_383>
   25f30:	9401      	str	r4, [sp, #4]
   25f32:	9600      	str	r6, [sp, #0]
   25f34:	465b      	mov	r3, fp
   25f36:	2205      	movs	r2, #5
   25f38:	a904      	add	r1, sp, #16
   25f3a:	4608      	mov	r0, r1
   25f3c:	f7ff f8b4 	bl	250a8 <sqr_n_mul_mont_383>
   25f40:	f8cd 9004 	str.w	r9, [sp, #4]
   25f44:	9600      	str	r6, [sp, #0]
   25f46:	465b      	mov	r3, fp
   25f48:	2204      	movs	r2, #4
   25f4a:	a904      	add	r1, sp, #16
   25f4c:	4608      	mov	r0, r1
   25f4e:	f7ff f8ab 	bl	250a8 <sqr_n_mul_mont_383>
   25f52:	ab4c      	add	r3, sp, #304	; 0x130
   25f54:	9301      	str	r3, [sp, #4]
   25f56:	9600      	str	r6, [sp, #0]
   25f58:	465b      	mov	r3, fp
   25f5a:	2204      	movs	r2, #4
   25f5c:	a904      	add	r1, sp, #16
   25f5e:	4608      	mov	r0, r1
   25f60:	f7ff f8a2 	bl	250a8 <sqr_n_mul_mont_383>
   25f64:	9401      	str	r4, [sp, #4]
   25f66:	9600      	str	r6, [sp, #0]
   25f68:	465b      	mov	r3, fp
   25f6a:	2207      	movs	r2, #7
   25f6c:	a904      	add	r1, sp, #16
   25f6e:	4608      	mov	r0, r1
   25f70:	f7ff f89a 	bl	250a8 <sqr_n_mul_mont_383>
   25f74:	f8cd a004 	str.w	sl, [sp, #4]
   25f78:	9600      	str	r6, [sp, #0]
   25f7a:	465b      	mov	r3, fp
   25f7c:	2205      	movs	r2, #5
   25f7e:	a904      	add	r1, sp, #16
   25f80:	4608      	mov	r0, r1
   25f82:	f7ff f891 	bl	250a8 <sqr_n_mul_mont_383>
   25f86:	ae34      	add	r6, sp, #208	; 0xd0
   25f88:	9601      	str	r6, [sp, #4]
   25f8a:	4d2b      	ldr	r5, [pc, #172]	; (26038 <recip_sqrt_fp_3mod4+0x5e8>)
   25f8c:	9500      	str	r5, [sp, #0]
   25f8e:	465b      	mov	r3, fp
   25f90:	2205      	movs	r2, #5
   25f92:	a904      	add	r1, sp, #16
   25f94:	4608      	mov	r0, r1
   25f96:	f7ff f887 	bl	250a8 <sqr_n_mul_mont_383>
   25f9a:	9601      	str	r6, [sp, #4]
   25f9c:	9500      	str	r5, [sp, #0]
   25f9e:	465b      	mov	r3, fp
   25fa0:	2205      	movs	r2, #5
   25fa2:	a904      	add	r1, sp, #16
   25fa4:	4608      	mov	r0, r1
   25fa6:	f7ff f87f 	bl	250a8 <sqr_n_mul_mont_383>
   25faa:	9601      	str	r6, [sp, #4]
   25fac:	9500      	str	r5, [sp, #0]
   25fae:	465b      	mov	r3, fp
   25fb0:	2205      	movs	r2, #5
   25fb2:	a904      	add	r1, sp, #16
   25fb4:	4608      	mov	r0, r1
   25fb6:	f7ff f877 	bl	250a8 <sqr_n_mul_mont_383>
   25fba:	9601      	str	r6, [sp, #4]
   25fbc:	9500      	str	r5, [sp, #0]
   25fbe:	465b      	mov	r3, fp
   25fc0:	2205      	movs	r2, #5
   25fc2:	a904      	add	r1, sp, #16
   25fc4:	4608      	mov	r0, r1
   25fc6:	f7ff f86f 	bl	250a8 <sqr_n_mul_mont_383>
   25fca:	9601      	str	r6, [sp, #4]
   25fcc:	9500      	str	r5, [sp, #0]
   25fce:	465b      	mov	r3, fp
   25fd0:	2205      	movs	r2, #5
   25fd2:	a904      	add	r1, sp, #16
   25fd4:	4608      	mov	r0, r1
   25fd6:	f7ff f867 	bl	250a8 <sqr_n_mul_mont_383>
   25fda:	9601      	str	r6, [sp, #4]
   25fdc:	9500      	str	r5, [sp, #0]
   25fde:	465b      	mov	r3, fp
   25fe0:	2205      	movs	r2, #5
   25fe2:	a904      	add	r1, sp, #16
   25fe4:	4608      	mov	r0, r1
   25fe6:	f7ff f85f 	bl	250a8 <sqr_n_mul_mont_383>
   25fea:	f8cd 8004 	str.w	r8, [sp, #4]
   25fee:	9500      	str	r5, [sp, #0]
   25ff0:	465b      	mov	r3, fp
   25ff2:	2204      	movs	r2, #4
   25ff4:	a904      	add	r1, sp, #16
   25ff6:	4608      	mov	r0, r1
   25ff8:	f7ff f856 	bl	250a8 <sqr_n_mul_mont_383>
   25ffc:	ab1c      	add	r3, sp, #112	; 0x70
   25ffe:	9301      	str	r3, [sp, #4]
   26000:	9500      	str	r5, [sp, #0]
   26002:	465b      	mov	r3, fp
   26004:	2206      	movs	r2, #6
   26006:	a904      	add	r1, sp, #16
   26008:	4608      	mov	r0, r1
   2600a:	f7ff f84d 	bl	250a8 <sqr_n_mul_mont_383>
   2600e:	ab10      	add	r3, sp, #64	; 0x40
   26010:	9301      	str	r3, [sp, #4]
   26012:	9500      	str	r5, [sp, #0]
   26014:	465b      	mov	r3, fp
   26016:	2204      	movs	r2, #4
   26018:	a904      	add	r1, sp, #16
   2601a:	4608      	mov	r0, r1
   2601c:	f7ff f844 	bl	250a8 <sqr_n_mul_mont_383>
   26020:	9701      	str	r7, [sp, #4]
   26022:	9500      	str	r5, [sp, #0]
   26024:	465b      	mov	r3, fp
   26026:	aa04      	add	r2, sp, #16
   26028:	4611      	mov	r1, r2
   2602a:	9803      	ldr	r0, [sp, #12]
   2602c:	f7fa fcd0 	bl	209d0 <mul_mont_n>
   26030:	f50d 7d45 	add.w	sp, sp, #788	; 0x314
   26034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26038:	fffcfffd 	.word	0xfffcfffd

0002603c <sqrt_fp>:
   2603c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26040:	b09a      	sub	sp, #104	; 0x68
   26042:	4604      	mov	r4, r0
   26044:	460d      	mov	r5, r1
   26046:	a80e      	add	r0, sp, #56	; 0x38
   26048:	f7ff fd02 	bl	25a50 <recip_sqrt_fp_3mod4>
   2604c:	4e1a      	ldr	r6, [pc, #104]	; (260b8 <sqrt_fp+0x7c>)
   2604e:	f04f 080c 	mov.w	r8, #12
   26052:	f8cd 8004 	str.w	r8, [sp, #4]
   26056:	4f19      	ldr	r7, [pc, #100]	; (260bc <sqrt_fp+0x80>)
   26058:	9700      	str	r7, [sp, #0]
   2605a:	4633      	mov	r3, r6
   2605c:	462a      	mov	r2, r5
   2605e:	a90e      	add	r1, sp, #56	; 0x38
   26060:	4608      	mov	r0, r1
   26062:	f7fa fcb5 	bl	209d0 <mul_mont_n>
   26066:	f8cd 8004 	str.w	r8, [sp, #4]
   2606a:	9700      	str	r7, [sp, #0]
   2606c:	4633      	mov	r3, r6
   2606e:	aa0e      	add	r2, sp, #56	; 0x38
   26070:	4611      	mov	r1, r2
   26072:	a802      	add	r0, sp, #8
   26074:	f7fa fcac 	bl	209d0 <mul_mont_n>
   26078:	f10d 0e08 	add.w	lr, sp, #8
   2607c:	f1a5 0c04 	sub.w	ip, r5, #4
   26080:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   26084:	2200      	movs	r2, #0
   26086:	f85e 3b04 	ldr.w	r3, [lr], #4
   2608a:	f85c 0f04 	ldr.w	r0, [ip, #4]!
   2608e:	4043      	eors	r3, r0
   26090:	431a      	orrs	r2, r3
   26092:	458c      	cmp	ip, r1
   26094:	d1f7      	bne.n	26086 <sqrt_fp+0x4a>
   26096:	1e50      	subs	r0, r2, #1
   26098:	ea20 0002 	bic.w	r0, r0, r2
   2609c:	0fc0      	lsrs	r0, r0, #31
   2609e:	a90e      	add	r1, sp, #56	; 0x38
   260a0:	1f23      	subs	r3, r4, #4
   260a2:	342c      	adds	r4, #44	; 0x2c
   260a4:	f851 2b04 	ldr.w	r2, [r1], #4
   260a8:	f843 2f04 	str.w	r2, [r3, #4]!
   260ac:	42a3      	cmp	r3, r4
   260ae:	d1f9      	bne.n	260a4 <sqrt_fp+0x68>
   260b0:	b01a      	add	sp, #104	; 0x68
   260b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   260b6:	bf00      	nop
   260b8:	00038688 	.word	0x00038688
   260bc:	fffcfffd 	.word	0xfffcfffd

000260c0 <POINTonE1_Uncompress>:
   260c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   260c4:	b0b3      	sub	sp, #204	; 0xcc
   260c6:	780d      	ldrb	r5, [r1, #0]
   260c8:	f991 3000 	ldrsb.w	r3, [r1]
   260cc:	2b00      	cmp	r3, #0
   260ce:	f280 80be 	bge.w	2624e <POINTonE1_Uncompress+0x18e>
   260d2:	4604      	mov	r4, r0
   260d4:	f015 0640 	ands.w	r6, r5, #64	; 0x40
   260d8:	d01a      	beq.n	26110 <POINTonE1_Uncompress+0x50>
   260da:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   260de:	3d01      	subs	r5, #1
   260e0:	0fed      	lsrs	r5, r5, #31
   260e2:	460b      	mov	r3, r1
   260e4:	312f      	adds	r1, #47	; 0x2f
   260e6:	2200      	movs	r2, #0
   260e8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   260ec:	4302      	orrs	r2, r0
   260ee:	4299      	cmp	r1, r3
   260f0:	d1fa      	bne.n	260e8 <POINTonE1_Uncompress+0x28>
   260f2:	3a01      	subs	r2, #1
   260f4:	ea15 73d2 	ands.w	r3, r5, r2, lsr #31
   260f8:	f000 80ae 	beq.w	26258 <POINTonE1_Uncompress+0x198>
   260fc:	4623      	mov	r3, r4
   260fe:	f104 0160 	add.w	r1, r4, #96	; 0x60
   26102:	2200      	movs	r2, #0
   26104:	f843 2b04 	str.w	r2, [r3], #4
   26108:	4299      	cmp	r1, r3
   2610a:	d1fb      	bne.n	26104 <POINTonE1_Uncompress+0x44>
   2610c:	2600      	movs	r6, #0
   2610e:	e09f      	b.n	26250 <POINTonE1_Uncompress+0x190>
   26110:	f101 0c30 	add.w	ip, r1, #48	; 0x30
   26114:	460a      	mov	r2, r1
   26116:	2000      	movs	r0, #0
   26118:	312f      	adds	r1, #47	; 0x2f
   2611a:	1a8b      	subs	r3, r1, r2
   2611c:	f812 7b01 	ldrb.w	r7, [r2], #1
   26120:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
   26124:	f023 0303 	bic.w	r3, r3, #3
   26128:	af32      	add	r7, sp, #200	; 0xc8
   2612a:	443b      	add	r3, r7
   2612c:	f843 0c60 	str.w	r0, [r3, #-96]
   26130:	4562      	cmp	r2, ip
   26132:	d1f2      	bne.n	2611a <POINTonE1_Uncompress+0x5a>
   26134:	9b25      	ldr	r3, [sp, #148]	; 0x94
   26136:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   2613a:	9325      	str	r3, [sp, #148]	; 0x94
   2613c:	4b4b      	ldr	r3, [pc, #300]	; (2626c <POINTonE1_Uncompress+0x1ac>)
   2613e:	f10d 0868 	add.w	r8, sp, #104	; 0x68
   26142:	220c      	movs	r2, #12
   26144:	9200      	str	r2, [sp, #0]
   26146:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
   2614a:	4641      	mov	r1, r8
   2614c:	a802      	add	r0, sp, #8
   2614e:	f7fa fde7 	bl	20d20 <add_mod_n>
   26152:	aa02      	add	r2, sp, #8
   26154:	46c3      	mov	fp, r8
   26156:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
   2615a:	4641      	mov	r1, r8
   2615c:	2000      	movs	r0, #0
   2615e:	f852 3b04 	ldr.w	r3, [r2], #4
   26162:	f851 7b04 	ldr.w	r7, [r1], #4
   26166:	407b      	eors	r3, r7
   26168:	4318      	orrs	r0, r3
   2616a:	4572      	cmp	r2, lr
   2616c:	d1f7      	bne.n	2615e <POINTonE1_Uncompress+0x9e>
   2616e:	1e43      	subs	r3, r0, #1
   26170:	4383      	bics	r3, r0
   26172:	d573      	bpl.n	2625c <POINTonE1_Uncompress+0x19c>
   26174:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 2626c <POINTonE1_Uncompress+0x1ac>
   26178:	f04f 090c 	mov.w	r9, #12
   2617c:	f8cd 9004 	str.w	r9, [sp, #4]
   26180:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 26270 <POINTonE1_Uncompress+0x1b0>
   26184:	f8cd a000 	str.w	sl, [sp]
   26188:	4643      	mov	r3, r8
   2618a:	f508 7234 	add.w	r2, r8, #720	; 0x2d0
   2618e:	a91a      	add	r1, sp, #104	; 0x68
   26190:	4608      	mov	r0, r1
   26192:	f7fa fc1d 	bl	209d0 <mul_mont_n>
   26196:	f8cd 9004 	str.w	r9, [sp, #4]
   2619a:	f8cd a000 	str.w	sl, [sp]
   2619e:	4643      	mov	r3, r8
   261a0:	aa1a      	add	r2, sp, #104	; 0x68
   261a2:	4611      	mov	r1, r2
   261a4:	a826      	add	r0, sp, #152	; 0x98
   261a6:	f7fa fc13 	bl	209d0 <mul_mont_n>
   261aa:	f8cd 9004 	str.w	r9, [sp, #4]
   261ae:	f8cd a000 	str.w	sl, [sp]
   261b2:	4643      	mov	r3, r8
   261b4:	aa1a      	add	r2, sp, #104	; 0x68
   261b6:	a926      	add	r1, sp, #152	; 0x98
   261b8:	4608      	mov	r0, r1
   261ba:	f7fa fc09 	bl	209d0 <mul_mont_n>
   261be:	f8cd 9000 	str.w	r9, [sp]
   261c2:	4643      	mov	r3, r8
   261c4:	f108 0260 	add.w	r2, r8, #96	; 0x60
   261c8:	a926      	add	r1, sp, #152	; 0x98
   261ca:	4608      	mov	r0, r1
   261cc:	f7fa fda8 	bl	20d20 <add_mod_n>
   261d0:	a926      	add	r1, sp, #152	; 0x98
   261d2:	4608      	mov	r0, r1
   261d4:	f7ff ff32 	bl	2603c <sqrt_fp>
   261d8:	2800      	cmp	r0, #0
   261da:	d044      	beq.n	26266 <POINTonE1_Uncompress+0x1a6>
   261dc:	ab19      	add	r3, sp, #100	; 0x64
   261de:	f1a4 0804 	sub.w	r8, r4, #4
   261e2:	f10b 075c 	add.w	r7, fp, #92	; 0x5c
   261e6:	4642      	mov	r2, r8
   261e8:	f853 1f04 	ldr.w	r1, [r3, #4]!
   261ec:	f842 1f04 	str.w	r1, [r2, #4]!
   261f0:	42bb      	cmp	r3, r7
   261f2:	d1f9      	bne.n	261e8 <POINTonE1_Uncompress+0x128>
   261f4:	f104 0730 	add.w	r7, r4, #48	; 0x30
   261f8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 2626c <POINTonE1_Uncompress+0x1ac>
   261fc:	f04f 0a0c 	mov.w	sl, #12
   26200:	f8cd a000 	str.w	sl, [sp]
   26204:	4b1a      	ldr	r3, [pc, #104]	; (26270 <POINTonE1_Uncompress+0x1b0>)
   26206:	464a      	mov	r2, r9
   26208:	4639      	mov	r1, r7
   2620a:	a80e      	add	r0, sp, #56	; 0x38
   2620c:	f7fa ff12 	bl	21034 <from_mont_n>
   26210:	4652      	mov	r2, sl
   26212:	4649      	mov	r1, r9
   26214:	a80e      	add	r0, sp, #56	; 0x38
   26216:	f7fb f822 	bl	2125e <sgn0_pty_mod_n>
   2621a:	2803      	cmp	r0, #3
   2621c:	d820      	bhi.n	26260 <POINTonE1_Uncompress+0x1a0>
   2621e:	f3c5 1540 	ubfx	r5, r5, #5, #1
   26222:	230c      	movs	r3, #12
   26224:	9300      	str	r3, [sp, #0]
   26226:	4b11      	ldr	r3, [pc, #68]	; (2626c <POINTonE1_Uncompress+0x1ac>)
   26228:	ea85 0250 	eor.w	r2, r5, r0, lsr #1
   2622c:	4639      	mov	r1, r7
   2622e:	4638      	mov	r0, r7
   26230:	f7fb fc0a 	bl	21a48 <cneg_mod_n>
   26234:	342c      	adds	r4, #44	; 0x2c
   26236:	2300      	movs	r3, #0
   26238:	f858 2f04 	ldr.w	r2, [r8, #4]!
   2623c:	4313      	orrs	r3, r2
   2623e:	45a0      	cmp	r8, r4
   26240:	d1fa      	bne.n	26238 <POINTonE1_Uncompress+0x178>
   26242:	1e5a      	subs	r2, r3, #1
   26244:	ea32 0303 	bics.w	r3, r2, r3
   26248:	bf48      	it	mi
   2624a:	2603      	movmi	r6, #3
   2624c:	e000      	b.n	26250 <POINTonE1_Uncompress+0x190>
   2624e:	2601      	movs	r6, #1
   26250:	4630      	mov	r0, r6
   26252:	b033      	add	sp, #204	; 0xcc
   26254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26258:	2601      	movs	r6, #1
   2625a:	e7f9      	b.n	26250 <POINTonE1_Uncompress+0x190>
   2625c:	f04f 30ff 	mov.w	r0, #4294967295
   26260:	4240      	negs	r0, r0
   26262:	b2c6      	uxtb	r6, r0
   26264:	e7f4      	b.n	26250 <POINTonE1_Uncompress+0x190>
   26266:	f06f 0001 	mvn.w	r0, #1
   2626a:	e7f9      	b.n	26260 <POINTonE1_Uncompress+0x1a0>
   2626c:	00038688 	.word	0x00038688
   26270:	fffcfffd 	.word	0xfffcfffd

00026274 <blst_p1_uncompress>:
   26274:	b508      	push	{r3, lr}
   26276:	f7ff ff23 	bl	260c0 <POINTonE1_Uncompress>
   2627a:	bd08      	pop	{r3, pc}

0002627c <blst_p1_deserialize>:
   2627c:	b508      	push	{r3, lr}
   2627e:	780b      	ldrb	r3, [r1, #0]
   26280:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   26284:	d01a      	beq.n	262bc <blst_p1_deserialize+0x40>
   26286:	f013 0f80 	tst.w	r3, #128	; 0x80
   2628a:	d11a      	bne.n	262c2 <blst_p1_deserialize+0x46>
   2628c:	f013 0f40 	tst.w	r3, #64	; 0x40
   26290:	d024      	beq.n	262dc <blst_p1_deserialize+0x60>
   26292:	f003 0c3f 	and.w	ip, r3, #63	; 0x3f
   26296:	f10c 3cff 	add.w	ip, ip, #4294967295
   2629a:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
   2629e:	460b      	mov	r3, r1
   262a0:	315f      	adds	r1, #95	; 0x5f
   262a2:	2200      	movs	r2, #0
   262a4:	f813 ef01 	ldrb.w	lr, [r3, #1]!
   262a8:	ea42 020e 	orr.w	r2, r2, lr
   262ac:	428b      	cmp	r3, r1
   262ae:	d1f9      	bne.n	262a4 <blst_p1_deserialize+0x28>
   262b0:	3a01      	subs	r2, #1
   262b2:	ea1c 73d2 	ands.w	r3, ip, r2, lsr #31
   262b6:	d107      	bne.n	262c8 <blst_p1_deserialize+0x4c>
   262b8:	2001      	movs	r0, #1
   262ba:	e010      	b.n	262de <blst_p1_deserialize+0x62>
   262bc:	f7fc f834 	bl	22328 <POINTonE1_Deserialize_BE>
   262c0:	e00d      	b.n	262de <blst_p1_deserialize+0x62>
   262c2:	f7ff fefd 	bl	260c0 <POINTonE1_Uncompress>
   262c6:	e00a      	b.n	262de <blst_p1_deserialize+0x62>
   262c8:	4603      	mov	r3, r0
   262ca:	f100 0160 	add.w	r1, r0, #96	; 0x60
   262ce:	2200      	movs	r2, #0
   262d0:	f843 2b04 	str.w	r2, [r3], #4
   262d4:	428b      	cmp	r3, r1
   262d6:	d1fb      	bne.n	262d0 <blst_p1_deserialize+0x54>
   262d8:	2000      	movs	r0, #0
   262da:	e000      	b.n	262de <blst_p1_deserialize+0x62>
   262dc:	2001      	movs	r0, #1
   262de:	bd08      	pop	{r3, pc}

000262e0 <blst_aggregate_in_g1>:
   262e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   262e2:	b0a5      	sub	sp, #148	; 0x94
   262e4:	4605      	mov	r5, r0
   262e6:	460e      	mov	r6, r1
   262e8:	7813      	ldrb	r3, [r2, #0]
   262ea:	f013 0740 	ands.w	r7, r3, #64	; 0x40
   262ee:	d120      	bne.n	26332 <blst_aggregate_in_g1+0x52>
   262f0:	4611      	mov	r1, r2
   262f2:	f013 0f80 	tst.w	r3, #128	; 0x80
   262f6:	d12b      	bne.n	26350 <blst_aggregate_in_g1+0x70>
   262f8:	4668      	mov	r0, sp
   262fa:	f7fc f815 	bl	22328 <POINTonE1_Deserialize_BE>
   262fe:	4668      	mov	r0, sp
   26300:	f7fb fb52 	bl	219a8 <POINTonE1_affine_on_curve>
   26304:	b3b0      	cbz	r0, 26374 <blst_aggregate_in_g1+0x94>
   26306:	481d      	ldr	r0, [pc, #116]	; (2637c <blst_aggregate_in_g1+0x9c>)
   26308:	f100 0390 	add.w	r3, r0, #144	; 0x90
   2630c:	aa17      	add	r2, sp, #92	; 0x5c
   2630e:	30c0      	adds	r0, #192	; 0xc0
   26310:	f853 4b04 	ldr.w	r4, [r3], #4
   26314:	f842 4f04 	str.w	r4, [r2, #4]!
   26318:	4283      	cmp	r3, r0
   2631a:	d1f9      	bne.n	26310 <blst_aggregate_in_g1+0x30>
   2631c:	4668      	mov	r0, sp
   2631e:	f7fd f985 	bl	2362c <POINTonE1_in_G1>
   26322:	b348      	cbz	r0, 26378 <blst_aggregate_in_g1+0x98>
   26324:	b1de      	cbz	r6, 2635e <blst_aggregate_in_g1+0x7e>
   26326:	466a      	mov	r2, sp
   26328:	4631      	mov	r1, r6
   2632a:	4628      	mov	r0, r5
   2632c:	f7fc fc84 	bl	22c38 <POINTonE1_dadd_affine>
   26330:	e001      	b.n	26336 <blst_aggregate_in_g1+0x56>
   26332:	b119      	cbz	r1, 2633c <blst_aggregate_in_g1+0x5c>
   26334:	2700      	movs	r7, #0
   26336:	4638      	mov	r0, r7
   26338:	b025      	add	sp, #148	; 0x94
   2633a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2633c:	4603      	mov	r3, r0
   2633e:	f100 0190 	add.w	r1, r0, #144	; 0x90
   26342:	2200      	movs	r2, #0
   26344:	f843 2b04 	str.w	r2, [r3], #4
   26348:	4299      	cmp	r1, r3
   2634a:	d1fb      	bne.n	26344 <blst_aggregate_in_g1+0x64>
   2634c:	2700      	movs	r7, #0
   2634e:	e7f2      	b.n	26336 <blst_aggregate_in_g1+0x56>
   26350:	4668      	mov	r0, sp
   26352:	f7ff feb5 	bl	260c0 <POINTonE1_Uncompress>
   26356:	2800      	cmp	r0, #0
   26358:	d0d5      	beq.n	26306 <blst_aggregate_in_g1+0x26>
   2635a:	4607      	mov	r7, r0
   2635c:	e7eb      	b.n	26336 <blst_aggregate_in_g1+0x56>
   2635e:	f1ad 0304 	sub.w	r3, sp, #4
   26362:	3d04      	subs	r5, #4
   26364:	a923      	add	r1, sp, #140	; 0x8c
   26366:	f853 2f04 	ldr.w	r2, [r3, #4]!
   2636a:	f845 2f04 	str.w	r2, [r5, #4]!
   2636e:	428b      	cmp	r3, r1
   26370:	d1f9      	bne.n	26366 <blst_aggregate_in_g1+0x86>
   26372:	e7e0      	b.n	26336 <blst_aggregate_in_g1+0x56>
   26374:	2702      	movs	r7, #2
   26376:	e7de      	b.n	26336 <blst_aggregate_in_g1+0x56>
   26378:	2703      	movs	r7, #3
   2637a:	e7dc      	b.n	26336 <blst_aggregate_in_g1+0x56>
   2637c:	00038688 	.word	0x00038688

00026380 <blst_fp_sqrt>:
   26380:	b508      	push	{r3, lr}
   26382:	f7ff fe5b 	bl	2603c <sqrt_fp>
   26386:	bd08      	pop	{r3, pc}

00026388 <recip_sqrt_fp>:
   26388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2638c:	b09a      	sub	sp, #104	; 0x68
   2638e:	4604      	mov	r4, r0
   26390:	460d      	mov	r5, r1
   26392:	a80e      	add	r0, sp, #56	; 0x38
   26394:	f7ff fb5c 	bl	25a50 <recip_sqrt_fp_3mod4>
   26398:	4e1a      	ldr	r6, [pc, #104]	; (26404 <recip_sqrt_fp+0x7c>)
   2639a:	f04f 080c 	mov.w	r8, #12
   2639e:	f8cd 8004 	str.w	r8, [sp, #4]
   263a2:	4f19      	ldr	r7, [pc, #100]	; (26408 <recip_sqrt_fp+0x80>)
   263a4:	9700      	str	r7, [sp, #0]
   263a6:	4633      	mov	r3, r6
   263a8:	462a      	mov	r2, r5
   263aa:	a90e      	add	r1, sp, #56	; 0x38
   263ac:	a802      	add	r0, sp, #8
   263ae:	f7fa fb0f 	bl	209d0 <mul_mont_n>
   263b2:	f8cd 8004 	str.w	r8, [sp, #4]
   263b6:	9700      	str	r7, [sp, #0]
   263b8:	4633      	mov	r3, r6
   263ba:	aa02      	add	r2, sp, #8
   263bc:	4611      	mov	r1, r2
   263be:	4610      	mov	r0, r2
   263c0:	f7fa fb06 	bl	209d0 <mul_mont_n>
   263c4:	f10d 0e08 	add.w	lr, sp, #8
   263c8:	f1a5 0c04 	sub.w	ip, r5, #4
   263cc:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   263d0:	2200      	movs	r2, #0
   263d2:	f85e 3b04 	ldr.w	r3, [lr], #4
   263d6:	f85c 0f04 	ldr.w	r0, [ip, #4]!
   263da:	4043      	eors	r3, r0
   263dc:	431a      	orrs	r2, r3
   263de:	458c      	cmp	ip, r1
   263e0:	d1f7      	bne.n	263d2 <recip_sqrt_fp+0x4a>
   263e2:	1e50      	subs	r0, r2, #1
   263e4:	ea20 0002 	bic.w	r0, r0, r2
   263e8:	0fc0      	lsrs	r0, r0, #31
   263ea:	a90e      	add	r1, sp, #56	; 0x38
   263ec:	1f23      	subs	r3, r4, #4
   263ee:	342c      	adds	r4, #44	; 0x2c
   263f0:	f851 2b04 	ldr.w	r2, [r1], #4
   263f4:	f843 2f04 	str.w	r2, [r3, #4]!
   263f8:	42a3      	cmp	r3, r4
   263fa:	d1f9      	bne.n	263f0 <recip_sqrt_fp+0x68>
   263fc:	b01a      	add	sp, #104	; 0x68
   263fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26402:	bf00      	nop
   26404:	00038688 	.word	0x00038688
   26408:	fffcfffd 	.word	0xfffcfffd

0002640c <map_to_isogenous_E1>:
   2640c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26410:	b0d9      	sub	sp, #356	; 0x164
   26412:	4605      	mov	r5, r0
   26414:	460a      	mov	r2, r1
   26416:	9103      	str	r1, [sp, #12]
   26418:	4c9e      	ldr	r4, [pc, #632]	; (26694 <map_to_isogenous_E1+0x288>)
   2641a:	260c      	movs	r6, #12
   2641c:	9601      	str	r6, [sp, #4]
   2641e:	4f9e      	ldr	r7, [pc, #632]	; (26698 <map_to_isogenous_E1+0x28c>)
   26420:	9700      	str	r7, [sp, #0]
   26422:	4623      	mov	r3, r4
   26424:	a84c      	add	r0, sp, #304	; 0x130
   26426:	f7fa fad3 	bl	209d0 <mul_mont_n>
   2642a:	f8df 8270 	ldr.w	r8, [pc, #624]	; 2669c <map_to_isogenous_E1+0x290>
   2642e:	9601      	str	r6, [sp, #4]
   26430:	9700      	str	r7, [sp, #0]
   26432:	4623      	mov	r3, r4
   26434:	aa4c      	add	r2, sp, #304	; 0x130
   26436:	f508 71cc 	add.w	r1, r8, #408	; 0x198
   2643a:	a834      	add	r0, sp, #208	; 0xd0
   2643c:	f7fa fac8 	bl	209d0 <mul_mont_n>
   26440:	9601      	str	r6, [sp, #4]
   26442:	9700      	str	r7, [sp, #0]
   26444:	4623      	mov	r3, r4
   26446:	aa34      	add	r2, sp, #208	; 0xd0
   26448:	4611      	mov	r1, r2
   2644a:	a840      	add	r0, sp, #256	; 0x100
   2644c:	f7fa fac0 	bl	209d0 <mul_mont_n>
   26450:	9600      	str	r6, [sp, #0]
   26452:	4623      	mov	r3, r4
   26454:	aa34      	add	r2, sp, #208	; 0xd0
   26456:	a940      	add	r1, sp, #256	; 0x100
   26458:	4608      	mov	r0, r1
   2645a:	f7fa fc61 	bl	20d20 <add_mod_n>
   2645e:	9600      	str	r6, [sp, #0]
   26460:	4623      	mov	r3, r4
   26462:	f104 0290 	add.w	r2, r4, #144	; 0x90
   26466:	a940      	add	r1, sp, #256	; 0x100
   26468:	4628      	mov	r0, r5
   2646a:	f7fa fc59 	bl	20d20 <add_mod_n>
   2646e:	9601      	str	r6, [sp, #4]
   26470:	9700      	str	r7, [sp, #0]
   26472:	4623      	mov	r3, r4
   26474:	f508 72e4 	add.w	r2, r8, #456	; 0x1c8
   26478:	4629      	mov	r1, r5
   2647a:	4628      	mov	r0, r5
   2647c:	f7fa faa8 	bl	209d0 <mul_mont_n>
   26480:	9601      	str	r6, [sp, #4]
   26482:	9700      	str	r7, [sp, #0]
   26484:	4623      	mov	r3, r4
   26486:	462a      	mov	r2, r5
   26488:	a934      	add	r1, sp, #208	; 0xd0
   2648a:	4608      	mov	r0, r1
   2648c:	f7fa faa0 	bl	209d0 <mul_mont_n>
   26490:	f105 0a60 	add.w	sl, r5, #96	; 0x60
   26494:	9601      	str	r6, [sp, #4]
   26496:	9700      	str	r7, [sp, #0]
   26498:	4623      	mov	r3, r4
   2649a:	aa40      	add	r2, sp, #256	; 0x100
   2649c:	f508 71fc 	add.w	r1, r8, #504	; 0x1f8
   264a0:	4650      	mov	r0, sl
   264a2:	f7fa fa95 	bl	209d0 <mul_mont_n>
   264a6:	f105 025c 	add.w	r2, r5, #92	; 0x5c
   264aa:	f105 048c 	add.w	r4, r5, #140	; 0x8c
   264ae:	4613      	mov	r3, r2
   264b0:	2100      	movs	r1, #0
   264b2:	f853 0f04 	ldr.w	r0, [r3, #4]!
   264b6:	4301      	orrs	r1, r0
   264b8:	42a3      	cmp	r3, r4
   264ba:	d1fa      	bne.n	264b2 <map_to_isogenous_E1+0xa6>
   264bc:	1e4e      	subs	r6, r1, #1
   264be:	ea26 0101 	bic.w	r1, r6, r1
   264c2:	17ce      	asrs	r6, r1, #31
   264c4:	4876      	ldr	r0, [pc, #472]	; (266a0 <map_to_isogenous_E1+0x294>)
   264c6:	f850 3b04 	ldr.w	r3, [r0], #4
   264ca:	f852 1f04 	ldr.w	r1, [r2, #4]!
   264ce:	404b      	eors	r3, r1
   264d0:	4033      	ands	r3, r6
   264d2:	404b      	eors	r3, r1
   264d4:	6013      	str	r3, [r2, #0]
   264d6:	42a2      	cmp	r2, r4
   264d8:	d1f5      	bne.n	264c6 <map_to_isogenous_E1+0xba>
   264da:	4e6e      	ldr	r6, [pc, #440]	; (26694 <map_to_isogenous_E1+0x288>)
   264dc:	270c      	movs	r7, #12
   264de:	9701      	str	r7, [sp, #4]
   264e0:	4c6d      	ldr	r4, [pc, #436]	; (26698 <map_to_isogenous_E1+0x28c>)
   264e2:	9400      	str	r4, [sp, #0]
   264e4:	4633      	mov	r3, r6
   264e6:	4652      	mov	r2, sl
   264e8:	4651      	mov	r1, sl
   264ea:	a840      	add	r0, sp, #256	; 0x100
   264ec:	f7fa fa70 	bl	209d0 <mul_mont_n>
   264f0:	9701      	str	r7, [sp, #4]
   264f2:	9400      	str	r4, [sp, #0]
   264f4:	4633      	mov	r3, r6
   264f6:	aa40      	add	r2, sp, #256	; 0x100
   264f8:	4651      	mov	r1, sl
   264fa:	a81c      	add	r0, sp, #112	; 0x70
   264fc:	f7fa fa68 	bl	209d0 <mul_mont_n>
   26500:	f8df b198 	ldr.w	fp, [pc, #408]	; 2669c <map_to_isogenous_E1+0x290>
   26504:	9701      	str	r7, [sp, #4]
   26506:	9400      	str	r4, [sp, #0]
   26508:	4633      	mov	r3, r6
   2650a:	aa40      	add	r2, sp, #256	; 0x100
   2650c:	f50b 7116 	add.w	r1, fp, #600	; 0x258
   26510:	4610      	mov	r0, r2
   26512:	f7fa fa5d 	bl	209d0 <mul_mont_n>
   26516:	9701      	str	r7, [sp, #4]
   26518:	9400      	str	r4, [sp, #0]
   2651a:	4633      	mov	r3, r6
   2651c:	462a      	mov	r2, r5
   2651e:	4629      	mov	r1, r5
   26520:	a828      	add	r0, sp, #160	; 0xa0
   26522:	f7fa fa55 	bl	209d0 <mul_mont_n>
   26526:	9700      	str	r7, [sp, #0]
   26528:	4633      	mov	r3, r6
   2652a:	aa40      	add	r2, sp, #256	; 0x100
   2652c:	a928      	add	r1, sp, #160	; 0xa0
   2652e:	4608      	mov	r0, r1
   26530:	f7fa fbf6 	bl	20d20 <add_mod_n>
   26534:	9701      	str	r7, [sp, #4]
   26536:	9400      	str	r4, [sp, #0]
   26538:	4633      	mov	r3, r6
   2653a:	462a      	mov	r2, r5
   2653c:	a928      	add	r1, sp, #160	; 0xa0
   2653e:	4608      	mov	r0, r1
   26540:	f7fa fa46 	bl	209d0 <mul_mont_n>
   26544:	9701      	str	r7, [sp, #4]
   26546:	9400      	str	r4, [sp, #0]
   26548:	4633      	mov	r3, r6
   2654a:	aa1c      	add	r2, sp, #112	; 0x70
   2654c:	f50b 71e4 	add.w	r1, fp, #456	; 0x1c8
   26550:	a840      	add	r0, sp, #256	; 0x100
   26552:	f7fa fa3d 	bl	209d0 <mul_mont_n>
   26556:	9700      	str	r7, [sp, #0]
   26558:	4633      	mov	r3, r6
   2655a:	aa40      	add	r2, sp, #256	; 0x100
   2655c:	a928      	add	r1, sp, #160	; 0xa0
   2655e:	4608      	mov	r0, r1
   26560:	f7fa fbde 	bl	20d20 <add_mod_n>
   26564:	f105 0830 	add.w	r8, r5, #48	; 0x30
   26568:	9701      	str	r7, [sp, #4]
   2656a:	9400      	str	r4, [sp, #0]
   2656c:	4633      	mov	r3, r6
   2656e:	aa1c      	add	r2, sp, #112	; 0x70
   26570:	4611      	mov	r1, r2
   26572:	4640      	mov	r0, r8
   26574:	f7fa fa2c 	bl	209d0 <mul_mont_n>
   26578:	9701      	str	r7, [sp, #4]
   2657a:	9400      	str	r4, [sp, #0]
   2657c:	4633      	mov	r3, r6
   2657e:	aa1c      	add	r2, sp, #112	; 0x70
   26580:	a928      	add	r1, sp, #160	; 0xa0
   26582:	a840      	add	r0, sp, #256	; 0x100
   26584:	f7fa fa24 	bl	209d0 <mul_mont_n>
   26588:	9701      	str	r7, [sp, #4]
   2658a:	9400      	str	r4, [sp, #0]
   2658c:	4633      	mov	r3, r6
   2658e:	aa40      	add	r2, sp, #256	; 0x100
   26590:	4641      	mov	r1, r8
   26592:	4640      	mov	r0, r8
   26594:	f7fa fa1c 	bl	209d0 <mul_mont_n>
   26598:	4641      	mov	r1, r8
   2659a:	4640      	mov	r0, r8
   2659c:	f7ff fef4 	bl	26388 <recip_sqrt_fp>
   265a0:	4681      	mov	r9, r0
   265a2:	9701      	str	r7, [sp, #4]
   265a4:	9400      	str	r4, [sp, #0]
   265a6:	4633      	mov	r3, r6
   265a8:	aa40      	add	r2, sp, #256	; 0x100
   265aa:	4641      	mov	r1, r8
   265ac:	4640      	mov	r0, r8
   265ae:	f7fa fa0f 	bl	209d0 <mul_mont_n>
   265b2:	9701      	str	r7, [sp, #4]
   265b4:	9400      	str	r4, [sp, #0]
   265b6:	4633      	mov	r3, r6
   265b8:	f50b 7222 	add.w	r2, fp, #648	; 0x288
   265bc:	4641      	mov	r1, r8
   265be:	a810      	add	r0, sp, #64	; 0x40
   265c0:	f7fa fa06 	bl	209d0 <mul_mont_n>
   265c4:	9701      	str	r7, [sp, #4]
   265c6:	9400      	str	r4, [sp, #0]
   265c8:	4633      	mov	r3, r6
   265ca:	aa4c      	add	r2, sp, #304	; 0x130
   265cc:	a910      	add	r1, sp, #64	; 0x40
   265ce:	4608      	mov	r0, r1
   265d0:	f7fa f9fe 	bl	209d0 <mul_mont_n>
   265d4:	9701      	str	r7, [sp, #4]
   265d6:	9400      	str	r4, [sp, #0]
   265d8:	4633      	mov	r3, r6
   265da:	9a03      	ldr	r2, [sp, #12]
   265dc:	a910      	add	r1, sp, #64	; 0x40
   265de:	4608      	mov	r0, r1
   265e0:	f7fa f9f6 	bl	209d0 <mul_mont_n>
   265e4:	f1c9 0400 	rsb	r4, r9, #0
   265e8:	1f2a      	subs	r2, r5, #4
   265ea:	a834      	add	r0, sp, #208	; 0xd0
   265ec:	f105 062c 	add.w	r6, r5, #44	; 0x2c
   265f0:	f850 1b04 	ldr.w	r1, [r0], #4
   265f4:	f852 3f04 	ldr.w	r3, [r2, #4]!
   265f8:	404b      	eors	r3, r1
   265fa:	4023      	ands	r3, r4
   265fc:	404b      	eors	r3, r1
   265fe:	6013      	str	r3, [r2, #0]
   26600:	42b2      	cmp	r2, r6
   26602:	d1f5      	bne.n	265f0 <map_to_isogenous_E1+0x1e4>
   26604:	f105 022c 	add.w	r2, r5, #44	; 0x2c
   26608:	a810      	add	r0, sp, #64	; 0x40
   2660a:	f105 065c 	add.w	r6, r5, #92	; 0x5c
   2660e:	f850 1b04 	ldr.w	r1, [r0], #4
   26612:	f852 3f04 	ldr.w	r3, [r2, #4]!
   26616:	404b      	eors	r3, r1
   26618:	4023      	ands	r3, r4
   2661a:	404b      	eors	r3, r1
   2661c:	6013      	str	r3, [r2, #0]
   2661e:	4296      	cmp	r6, r2
   26620:	d1f5      	bne.n	2660e <map_to_isogenous_E1+0x202>
   26622:	4f1d      	ldr	r7, [pc, #116]	; (26698 <map_to_isogenous_E1+0x28c>)
   26624:	4c1b      	ldr	r4, [pc, #108]	; (26694 <map_to_isogenous_E1+0x288>)
   26626:	260c      	movs	r6, #12
   26628:	9600      	str	r6, [sp, #0]
   2662a:	463b      	mov	r3, r7
   2662c:	4622      	mov	r2, r4
   2662e:	9903      	ldr	r1, [sp, #12]
   26630:	a804      	add	r0, sp, #16
   26632:	f7fa fcff 	bl	21034 <from_mont_n>
   26636:	4632      	mov	r2, r6
   26638:	4621      	mov	r1, r4
   2663a:	a804      	add	r0, sp, #16
   2663c:	f7fa fe0f 	bl	2125e <sgn0_pty_mod_n>
   26640:	4681      	mov	r9, r0
   26642:	9600      	str	r6, [sp, #0]
   26644:	463b      	mov	r3, r7
   26646:	4622      	mov	r2, r4
   26648:	4641      	mov	r1, r8
   2664a:	a804      	add	r0, sp, #16
   2664c:	f7fa fcf2 	bl	21034 <from_mont_n>
   26650:	4632      	mov	r2, r6
   26652:	4621      	mov	r1, r4
   26654:	a804      	add	r0, sp, #16
   26656:	f7fa fe02 	bl	2125e <sgn0_pty_mod_n>
   2665a:	ea80 0209 	eor.w	r2, r0, r9
   2665e:	9600      	str	r6, [sp, #0]
   26660:	4623      	mov	r3, r4
   26662:	f002 0201 	and.w	r2, r2, #1
   26666:	4641      	mov	r1, r8
   26668:	4640      	mov	r0, r8
   2666a:	f7fb f9ed 	bl	21a48 <cneg_mod_n>
   2666e:	9601      	str	r6, [sp, #4]
   26670:	9700      	str	r7, [sp, #0]
   26672:	4623      	mov	r3, r4
   26674:	4652      	mov	r2, sl
   26676:	4629      	mov	r1, r5
   26678:	4628      	mov	r0, r5
   2667a:	f7fa f9a9 	bl	209d0 <mul_mont_n>
   2667e:	9601      	str	r6, [sp, #4]
   26680:	9700      	str	r7, [sp, #0]
   26682:	4623      	mov	r3, r4
   26684:	aa1c      	add	r2, sp, #112	; 0x70
   26686:	4641      	mov	r1, r8
   26688:	4640      	mov	r0, r8
   2668a:	f7fa f9a1 	bl	209d0 <mul_mont_n>
   2668e:	b059      	add	sp, #356	; 0x164
   26690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26694:	00038688 	.word	0x00038688
   26698:	fffcfffd 	.word	0xfffcfffd
   2669c:	00039780 	.word	0x00039780
   266a0:	000399a8 	.word	0x000399a8

000266a4 <map_to_g1>:
   266a4:	b530      	push	{r4, r5, lr}
   266a6:	b0a5      	sub	sp, #148	; 0x94
   266a8:	4604      	mov	r4, r0
   266aa:	4615      	mov	r5, r2
   266ac:	4668      	mov	r0, sp
   266ae:	f7ff fead 	bl	2640c <map_to_isogenous_E1>
   266b2:	b14d      	cbz	r5, 266c8 <map_to_g1+0x24>
   266b4:	4629      	mov	r1, r5
   266b6:	4620      	mov	r0, r4
   266b8:	f7ff fea8 	bl	2640c <map_to_isogenous_E1>
   266bc:	4b16      	ldr	r3, [pc, #88]	; (26718 <map_to_g1+0x74>)
   266be:	4622      	mov	r2, r4
   266c0:	4669      	mov	r1, sp
   266c2:	4668      	mov	r0, sp
   266c4:	f7fc fc2a 	bl	22f1c <POINTonE1_dadd>
   266c8:	4669      	mov	r1, sp
   266ca:	4668      	mov	r0, sp
   266cc:	f7fc f839 	bl	22742 <isogeny_map_to_E1>
   266d0:	4669      	mov	r1, sp
   266d2:	4620      	mov	r0, r4
   266d4:	f7fb fbc6 	bl	21e64 <POINTonE1_double>
   266d8:	466a      	mov	r2, sp
   266da:	4621      	mov	r1, r4
   266dc:	4620      	mov	r0, r4
   266de:	f7fb fec5 	bl	2246c <POINTonE1_add>
   266e2:	466a      	mov	r2, sp
   266e4:	2102      	movs	r1, #2
   266e6:	4620      	mov	r0, r4
   266e8:	f7fc ff8c 	bl	23604 <POINTonE1_dbl_n_add>
   266ec:	466a      	mov	r2, sp
   266ee:	2103      	movs	r1, #3
   266f0:	4620      	mov	r0, r4
   266f2:	f7fc ff87 	bl	23604 <POINTonE1_dbl_n_add>
   266f6:	466a      	mov	r2, sp
   266f8:	2109      	movs	r1, #9
   266fa:	4620      	mov	r0, r4
   266fc:	f7fc ff82 	bl	23604 <POINTonE1_dbl_n_add>
   26700:	466a      	mov	r2, sp
   26702:	2120      	movs	r1, #32
   26704:	4620      	mov	r0, r4
   26706:	f7fc ff7d 	bl	23604 <POINTonE1_dbl_n_add>
   2670a:	466a      	mov	r2, sp
   2670c:	2110      	movs	r1, #16
   2670e:	4620      	mov	r0, r4
   26710:	f7fc ff78 	bl	23604 <POINTonE1_dbl_n_add>
   26714:	b025      	add	sp, #148	; 0x94
   26716:	bd30      	pop	{r4, r5, pc}
   26718:	000399d8 	.word	0x000399d8

0002671c <blst_map_to_g1>:
   2671c:	b508      	push	{r3, lr}
   2671e:	f7ff ffc1 	bl	266a4 <map_to_g1>
   26722:	bd08      	pop	{r3, pc}

00026724 <sqr_mont_382x>:
   26724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26728:	b09b      	sub	sp, #108	; 0x6c
   2672a:	4607      	mov	r7, r0
   2672c:	4615      	mov	r5, r2
   2672e:	4698      	mov	r8, r3
   26730:	1f0b      	subs	r3, r1, #4
   26732:	ae0e      	add	r6, sp, #56	; 0x38
   26734:	f101 002c 	add.w	r0, r1, #44	; 0x2c
   26738:	46b2      	mov	sl, r6
   2673a:	469e      	mov	lr, r3
   2673c:	f04f 0b00 	mov.w	fp, #0
   26740:	46d9      	mov	r9, fp
   26742:	f85e 4f04 	ldr.w	r4, [lr, #4]!
   26746:	f8de 2030 	ldr.w	r2, [lr, #48]	; 0x30
   2674a:	eb14 0c02 	adds.w	ip, r4, r2
   2674e:	eb49 0209 	adc.w	r2, r9, r9
   26752:	eb1c 040b 	adds.w	r4, ip, fp
   26756:	f84a 4b04 	str.w	r4, [sl], #4
   2675a:	f142 0b00 	adc.w	fp, r2, #0
   2675e:	4586      	cmp	lr, r0
   26760:	d1ef      	bne.n	26742 <sqr_mont_382x+0x1e>
   26762:	f10d 0e08 	add.w	lr, sp, #8
   26766:	2200      	movs	r2, #0
   26768:	4694      	mov	ip, r2
   2676a:	f853 4f04 	ldr.w	r4, [r3, #4]!
   2676e:	1aa4      	subs	r4, r4, r2
   26770:	eb6c 090c 	sbc.w	r9, ip, ip
   26774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   26776:	1aa2      	subs	r2, r4, r2
   26778:	f169 0400 	sbc.w	r4, r9, #0
   2677c:	f84e 2b04 	str.w	r2, [lr], #4
   26780:	f004 0201 	and.w	r2, r4, #1
   26784:	4283      	cmp	r3, r0
   26786:	d1f0      	bne.n	2676a <sqr_mont_382x+0x46>
   26788:	4254      	negs	r4, r2
   2678a:	230c      	movs	r3, #12
   2678c:	9301      	str	r3, [sp, #4]
   2678e:	f8cd 8000 	str.w	r8, [sp]
   26792:	462b      	mov	r3, r5
   26794:	f101 0230 	add.w	r2, r1, #48	; 0x30
   26798:	f107 0030 	add.w	r0, r7, #48	; 0x30
   2679c:	f7fa fda1 	bl	212e2 <mul_mont_nonred_n>
   267a0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   267a4:	f107 005c 	add.w	r0, r7, #92	; 0x5c
   267a8:	2300      	movs	r3, #0
   267aa:	f852 1f04 	ldr.w	r1, [r2, #4]!
   267ae:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
   267b2:	6013      	str	r3, [r2, #0]
   267b4:	0fcb      	lsrs	r3, r1, #31
   267b6:	4282      	cmp	r2, r0
   267b8:	d1f7      	bne.n	267aa <sqr_mont_382x+0x86>
   267ba:	230c      	movs	r3, #12
   267bc:	9301      	str	r3, [sp, #4]
   267be:	f8cd 8000 	str.w	r8, [sp]
   267c2:	462b      	mov	r3, r5
   267c4:	aa02      	add	r2, sp, #8
   267c6:	a90e      	add	r1, sp, #56	; 0x38
   267c8:	4638      	mov	r0, r7
   267ca:	f7fa fd8a 	bl	212e2 <mul_mont_nonred_n>
   267ce:	f1a7 0c04 	sub.w	ip, r7, #4
   267d2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   267d6:	4667      	mov	r7, ip
   267d8:	2100      	movs	r1, #0
   267da:	468e      	mov	lr, r1
   267dc:	f856 2b04 	ldr.w	r2, [r6], #4
   267e0:	f857 3f04 	ldr.w	r3, [r7, #4]!
   267e4:	1a5b      	subs	r3, r3, r1
   267e6:	eb6e 010e 	sbc.w	r1, lr, lr
   267ea:	4022      	ands	r2, r4
   267ec:	1a9b      	subs	r3, r3, r2
   267ee:	f161 0100 	sbc.w	r1, r1, #0
   267f2:	603b      	str	r3, [r7, #0]
   267f4:	f001 0101 	and.w	r1, r1, #1
   267f8:	42b8      	cmp	r0, r7
   267fa:	d1ef      	bne.n	267dc <sqr_mont_382x+0xb8>
   267fc:	4249      	negs	r1, r1
   267fe:	3d04      	subs	r5, #4
   26800:	2600      	movs	r6, #0
   26802:	4632      	mov	r2, r6
   26804:	f855 3f04 	ldr.w	r3, [r5, #4]!
   26808:	400b      	ands	r3, r1
   2680a:	f85c 4f04 	ldr.w	r4, [ip, #4]!
   2680e:	19a4      	adds	r4, r4, r6
   26810:	eb42 0602 	adc.w	r6, r2, r2
   26814:	191b      	adds	r3, r3, r4
   26816:	f8cc 3000 	str.w	r3, [ip]
   2681a:	f146 0600 	adc.w	r6, r6, #0
   2681e:	4584      	cmp	ip, r0
   26820:	d1f0      	bne.n	26804 <sqr_mont_382x+0xe0>
   26822:	b01b      	add	sp, #108	; 0x6c
   26824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00026828 <ct_inverse_mod_383>:
   26828:	b510      	push	{r4, lr}
   2682a:	b082      	sub	sp, #8
   2682c:	240c      	movs	r4, #12
   2682e:	9400      	str	r4, [sp, #0]
   26830:	f7fc fff2 	bl	23818 <ct_inverse_mod_n>
   26834:	b002      	add	sp, #8
   26836:	bd10      	pop	{r4, pc}

00026838 <div_3_limbs>:
   26838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2683c:	4696      	mov	lr, r2
   2683e:	6802      	ldr	r2, [r0, #0]
   26840:	6840      	ldr	r0, [r0, #4]
   26842:	2620      	movs	r6, #32
   26844:	2400      	movs	r4, #0
   26846:	4625      	mov	r5, r4
   26848:	1a57      	subs	r7, r2, r1
   2684a:	1a53      	subs	r3, r2, r1
   2684c:	eb65 0c05 	sbc.w	ip, r5, r5
   26850:	f00c 0c01 	and.w	ip, ip, #1
   26854:	ebb0 080e 	subs.w	r8, r0, lr
   26858:	eb65 0305 	sbc.w	r3, r5, r5
   2685c:	ebb8 0c0c 	subs.w	ip, r8, ip
   26860:	f163 0300 	sbc.w	r3, r3, #0
   26864:	407a      	eors	r2, r7
   26866:	401a      	ands	r2, r3
   26868:	407a      	eors	r2, r7
   2686a:	ea8c 0000 	eor.w	r0, ip, r0
   2686e:	4018      	ands	r0, r3
   26870:	ea80 000c 	eor.w	r0, r0, ip
   26874:	f083 0301 	eor.w	r3, r3, #1
   26878:	f003 0301 	and.w	r3, r3, #1
   2687c:	ea43 0444 	orr.w	r4, r3, r4, lsl #1
   26880:	ea4f 73ce 	mov.w	r3, lr, lsl #31
   26884:	ea43 0151 	orr.w	r1, r3, r1, lsr #1
   26888:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
   2688c:	3e01      	subs	r6, #1
   2688e:	d1db      	bne.n	26848 <div_3_limbs+0x10>
   26890:	2300      	movs	r3, #0
   26892:	1a51      	subs	r1, r2, r1
   26894:	eb63 0203 	sbc.w	r2, r3, r3
   26898:	f002 0201 	and.w	r2, r2, #1
   2689c:	ebb0 000e 	subs.w	r0, r0, lr
   268a0:	eb63 0303 	sbc.w	r3, r3, r3
   268a4:	1a80      	subs	r0, r0, r2
   268a6:	f163 0300 	sbc.w	r3, r3, #0
   268aa:	43db      	mvns	r3, r3
   268ac:	f003 0301 	and.w	r3, r3, #1
   268b0:	0060      	lsls	r0, r4, #1
   268b2:	ea40 70e4 	orr.w	r0, r0, r4, asr #31
   268b6:	4318      	orrs	r0, r3
   268b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000268bc <div_by_zz>:
   268bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   268c0:	f100 0418 	add.w	r4, r0, #24
   268c4:	f100 0508 	add.w	r5, r0, #8
   268c8:	f8df 8028 	ldr.w	r8, [pc, #40]	; 268f4 <div_by_zz+0x38>
   268cc:	4f0a      	ldr	r7, [pc, #40]	; (268f8 <div_by_zz+0x3c>)
   268ce:	4e0b      	ldr	r6, [pc, #44]	; (268fc <div_by_zz+0x40>)
   268d0:	4642      	mov	r2, r8
   268d2:	4639      	mov	r1, r7
   268d4:	4620      	mov	r0, r4
   268d6:	f7ff ffaf 	bl	26838 <div_3_limbs>
   268da:	4602      	mov	r2, r0
   268dc:	2304      	movs	r3, #4
   268de:	4631      	mov	r1, r6
   268e0:	f1a4 000c 	sub.w	r0, r4, #12
   268e4:	f7fa fe41 	bl	2156a <quot_rem_n>
   268e8:	3c04      	subs	r4, #4
   268ea:	42ac      	cmp	r4, r5
   268ec:	d1f0      	bne.n	268d0 <div_by_zz+0x14>
   268ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   268f2:	bf00      	nop
   268f4:	ac45a401 	.word	0xac45a401
   268f8:	0001a402 	.word	0x0001a402
   268fc:	00039a38 	.word	0x00039a38

00026900 <POINTonE1_mult_glv>:
   26900:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26904:	b0b3      	sub	sp, #204	; 0xcc
   26906:	4605      	mov	r5, r0
   26908:	460e      	mov	r6, r1
   2690a:	f102 0c20 	add.w	ip, r2, #32
   2690e:	2400      	movs	r4, #0
   26910:	43d0      	mvns	r0, r2
   26912:	eb00 030c 	add.w	r3, r0, ip
   26916:	f81c 1d01 	ldrb.w	r1, [ip, #-1]!
   2691a:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
   2691e:	f023 0303 	bic.w	r3, r3, #3
   26922:	a932      	add	r1, sp, #200	; 0xc8
   26924:	440b      	add	r3, r1
   26926:	f843 4c20 	str.w	r4, [r3, #-32]
   2692a:	4562      	cmp	r2, ip
   2692c:	d1f1      	bne.n	26912 <POINTonE1_mult_glv+0x12>
   2692e:	ac2a      	add	r4, sp, #168	; 0xa8
   26930:	4620      	mov	r0, r4
   26932:	f7ff ffc3 	bl	268bc <div_by_zz>
   26936:	af06      	add	r7, sp, #24
   26938:	4631      	mov	r1, r6
   2693a:	4638      	mov	r0, r7
   2693c:	f7fa f921 	bl	20b82 <sigma>
   26940:	2101      	movs	r1, #1
   26942:	4638      	mov	r0, r7
   26944:	f7fb f8de 	bl	21b04 <POINTonE1_cneg>
   26948:	9602      	str	r6, [sp, #8]
   2694a:	ab2e      	add	r3, sp, #184	; 0xb8
   2694c:	9304      	str	r3, [sp, #16]
   2694e:	9703      	str	r7, [sp, #12]
   26950:	9405      	str	r4, [sp, #20]
   26952:	2300      	movs	r3, #0
   26954:	9301      	str	r3, [sp, #4]
   26956:	2380      	movs	r3, #128	; 0x80
   26958:	9300      	str	r3, [sp, #0]
   2695a:	ab04      	add	r3, sp, #16
   2695c:	2202      	movs	r2, #2
   2695e:	a902      	add	r1, sp, #8
   26960:	4628      	mov	r0, r5
   26962:	f7fc fc87 	bl	23274 <POINTonE1s_mult_w4>
   26966:	2101      	movs	r1, #1
   26968:	4628      	mov	r0, r5
   2696a:	f7fb f8cb 	bl	21b04 <POINTonE1_cneg>
   2696e:	3560      	adds	r5, #96	; 0x60
   26970:	4e12      	ldr	r6, [pc, #72]	; (269bc <POINTonE1_mult_glv+0xbc>)
   26972:	f106 0730 	add.w	r7, r6, #48	; 0x30
   26976:	f04f 090c 	mov.w	r9, #12
   2697a:	f8cd 9004 	str.w	r9, [sp, #4]
   2697e:	f8df 8040 	ldr.w	r8, [pc, #64]	; 269c0 <POINTonE1_mult_glv+0xc0>
   26982:	f8cd 8000 	str.w	r8, [sp]
   26986:	4633      	mov	r3, r6
   26988:	463a      	mov	r2, r7
   2698a:	4629      	mov	r1, r5
   2698c:	4628      	mov	r0, r5
   2698e:	f7fa f81f 	bl	209d0 <mul_mont_n>
   26992:	f8cd 9004 	str.w	r9, [sp, #4]
   26996:	f8cd 8000 	str.w	r8, [sp]
   2699a:	4633      	mov	r3, r6
   2699c:	463a      	mov	r2, r7
   2699e:	4629      	mov	r1, r5
   269a0:	4628      	mov	r0, r5
   269a2:	f7fa f815 	bl	209d0 <mul_mont_n>
   269a6:	4620      	mov	r0, r4
   269a8:	aa32      	add	r2, sp, #200	; 0xc8
   269aa:	2300      	movs	r3, #0
   269ac:	f840 3b04 	str.w	r3, [r0], #4
   269b0:	4290      	cmp	r0, r2
   269b2:	d1fb      	bne.n	269ac <POINTonE1_mult_glv+0xac>
   269b4:	ab2a      	add	r3, sp, #168	; 0xa8
   269b6:	b033      	add	sp, #204	; 0xcc
   269b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   269bc:	00038688 	.word	0x00038688
   269c0:	fffcfffd 	.word	0xfffcfffd

000269c4 <POINTonE1_sign>:
   269c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   269c8:	b09a      	sub	sp, #104	; 0x68
   269ca:	4680      	mov	r8, r0
   269cc:	f7ff ff98 	bl	26900 <POINTonE1_mult_glv>
   269d0:	f108 0160 	add.w	r1, r8, #96	; 0x60
   269d4:	f108 045c 	add.w	r4, r8, #92	; 0x5c
   269d8:	f108 058c 	add.w	r5, r8, #140	; 0x8c
   269dc:	4623      	mov	r3, r4
   269de:	2700      	movs	r7, #0
   269e0:	f853 2f04 	ldr.w	r2, [r3, #4]!
   269e4:	4317      	orrs	r7, r2
   269e6:	42ab      	cmp	r3, r5
   269e8:	d1fa      	bne.n	269e0 <POINTonE1_sign+0x1c>
   269ea:	a80e      	add	r0, sp, #56	; 0x38
   269ec:	f7fe fb80 	bl	250f0 <flt_reciprocal_fp>
   269f0:	4e20      	ldr	r6, [pc, #128]	; (26a74 <POINTonE1_sign+0xb0>)
   269f2:	f04f 0a0c 	mov.w	sl, #12
   269f6:	f8cd a004 	str.w	sl, [sp, #4]
   269fa:	f8df 907c 	ldr.w	r9, [pc, #124]	; 26a78 <POINTonE1_sign+0xb4>
   269fe:	f8cd 9000 	str.w	r9, [sp]
   26a02:	4633      	mov	r3, r6
   26a04:	aa0e      	add	r2, sp, #56	; 0x38
   26a06:	4611      	mov	r1, r2
   26a08:	a802      	add	r0, sp, #8
   26a0a:	f7f9 ffe1 	bl	209d0 <mul_mont_n>
   26a0e:	f8cd a004 	str.w	sl, [sp, #4]
   26a12:	f8cd 9000 	str.w	r9, [sp]
   26a16:	4633      	mov	r3, r6
   26a18:	aa02      	add	r2, sp, #8
   26a1a:	4641      	mov	r1, r8
   26a1c:	4640      	mov	r0, r8
   26a1e:	f7f9 ffd7 	bl	209d0 <mul_mont_n>
   26a22:	f8cd a004 	str.w	sl, [sp, #4]
   26a26:	f8cd 9000 	str.w	r9, [sp]
   26a2a:	4633      	mov	r3, r6
   26a2c:	aa0e      	add	r2, sp, #56	; 0x38
   26a2e:	a902      	add	r1, sp, #8
   26a30:	4608      	mov	r0, r1
   26a32:	f7f9 ffcd 	bl	209d0 <mul_mont_n>
   26a36:	f108 0030 	add.w	r0, r8, #48	; 0x30
   26a3a:	f8cd a004 	str.w	sl, [sp, #4]
   26a3e:	f8cd 9000 	str.w	r9, [sp]
   26a42:	4633      	mov	r3, r6
   26a44:	aa02      	add	r2, sp, #8
   26a46:	4601      	mov	r1, r0
   26a48:	f7f9 ffc2 	bl	209d0 <mul_mont_n>
   26a4c:	1e7b      	subs	r3, r7, #1
   26a4e:	ea23 0707 	bic.w	r7, r3, r7
   26a52:	17ff      	asrs	r7, r7, #31
   26a54:	f606 534c 	addw	r3, r6, #3404	; 0xd4c
   26a58:	f853 1f04 	ldr.w	r1, [r3, #4]!
   26a5c:	f854 2f04 	ldr.w	r2, [r4, #4]!
   26a60:	404a      	eors	r2, r1
   26a62:	403a      	ands	r2, r7
   26a64:	404a      	eors	r2, r1
   26a66:	6022      	str	r2, [r4, #0]
   26a68:	42ac      	cmp	r4, r5
   26a6a:	d1f5      	bne.n	26a58 <POINTonE1_sign+0x94>
   26a6c:	b01a      	add	sp, #104	; 0x68
   26a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26a72:	bf00      	nop
   26a74:	00038688 	.word	0x00038688
   26a78:	fffcfffd 	.word	0xfffcfffd

00026a7c <blst_sk_to_pk_in_g1>:
   26a7c:	b508      	push	{r3, lr}
   26a7e:	460a      	mov	r2, r1
   26a80:	4901      	ldr	r1, [pc, #4]	; (26a88 <blst_sk_to_pk_in_g1+0xc>)
   26a82:	f7ff ff9f 	bl	269c4 <POINTonE1_sign>
   26a86:	bd08      	pop	{r3, pc}
   26a88:	00039378 	.word	0x00039378

00026a8c <blst_sign_pk_in_g2>:
   26a8c:	b508      	push	{r3, lr}
   26a8e:	f7ff ff99 	bl	269c4 <POINTonE1_sign>
   26a92:	bd08      	pop	{r3, pc}

00026a94 <blst_sk_to_pk2_in_g1>:
   26a94:	b530      	push	{r4, r5, lr}
   26a96:	b0a5      	sub	sp, #148	; 0x94
   26a98:	4605      	mov	r5, r0
   26a9a:	460c      	mov	r4, r1
   26a9c:	4914      	ldr	r1, [pc, #80]	; (26af0 <blst_sk_to_pk2_in_g1+0x5c>)
   26a9e:	4668      	mov	r0, sp
   26aa0:	f7ff ff90 	bl	269c4 <POINTonE1_sign>
   26aa4:	b14c      	cbz	r4, 26aba <blst_sk_to_pk2_in_g1+0x26>
   26aa6:	f1ad 0304 	sub.w	r3, sp, #4
   26aaa:	1f21      	subs	r1, r4, #4
   26aac:	a817      	add	r0, sp, #92	; 0x5c
   26aae:	f853 2f04 	ldr.w	r2, [r3, #4]!
   26ab2:	f841 2f04 	str.w	r2, [r1, #4]!
   26ab6:	4283      	cmp	r3, r0
   26ab8:	d1f9      	bne.n	26aae <blst_sk_to_pk2_in_g1+0x1a>
   26aba:	b1bd      	cbz	r5, 26aec <blst_sk_to_pk2_in_g1+0x58>
   26abc:	4669      	mov	r1, sp
   26abe:	4628      	mov	r0, r5
   26ac0:	f7fe fef0 	bl	258a4 <POINTonE1_Serialize_BE>
   26ac4:	0100      	lsls	r0, r0, #4
   26ac6:	f000 0220 	and.w	r2, r0, #32
   26aca:	7828      	ldrb	r0, [r5, #0]
   26acc:	4310      	orrs	r0, r2
   26ace:	ab17      	add	r3, sp, #92	; 0x5c
   26ad0:	ac23      	add	r4, sp, #140	; 0x8c
   26ad2:	2200      	movs	r2, #0
   26ad4:	f853 1f04 	ldr.w	r1, [r3, #4]!
   26ad8:	430a      	orrs	r2, r1
   26ada:	42a3      	cmp	r3, r4
   26adc:	d1fa      	bne.n	26ad4 <blst_sk_to_pk2_in_g1+0x40>
   26ade:	1e53      	subs	r3, r2, #1
   26ae0:	ea23 0202 	bic.w	r2, r3, r2
   26ae4:	0fd2      	lsrs	r2, r2, #31
   26ae6:	ea40 1282 	orr.w	r2, r0, r2, lsl #6
   26aea:	702a      	strb	r2, [r5, #0]
   26aec:	b025      	add	sp, #148	; 0x94
   26aee:	bd30      	pop	{r4, r5, pc}
   26af0:	00039378 	.word	0x00039378

00026af4 <blst_sign_pk2_in_g2>:
   26af4:	b530      	push	{r4, r5, lr}
   26af6:	b0a5      	sub	sp, #148	; 0x94
   26af8:	4605      	mov	r5, r0
   26afa:	460c      	mov	r4, r1
   26afc:	4611      	mov	r1, r2
   26afe:	461a      	mov	r2, r3
   26b00:	4668      	mov	r0, sp
   26b02:	f7ff ff5f 	bl	269c4 <POINTonE1_sign>
   26b06:	b14c      	cbz	r4, 26b1c <blst_sign_pk2_in_g2+0x28>
   26b08:	f1ad 0304 	sub.w	r3, sp, #4
   26b0c:	1f21      	subs	r1, r4, #4
   26b0e:	a817      	add	r0, sp, #92	; 0x5c
   26b10:	f853 2f04 	ldr.w	r2, [r3, #4]!
   26b14:	f841 2f04 	str.w	r2, [r1, #4]!
   26b18:	4283      	cmp	r3, r0
   26b1a:	d1f9      	bne.n	26b10 <blst_sign_pk2_in_g2+0x1c>
   26b1c:	b1bd      	cbz	r5, 26b4e <blst_sign_pk2_in_g2+0x5a>
   26b1e:	4669      	mov	r1, sp
   26b20:	4628      	mov	r0, r5
   26b22:	f7fe febf 	bl	258a4 <POINTonE1_Serialize_BE>
   26b26:	0100      	lsls	r0, r0, #4
   26b28:	f000 0220 	and.w	r2, r0, #32
   26b2c:	7828      	ldrb	r0, [r5, #0]
   26b2e:	4310      	orrs	r0, r2
   26b30:	ab17      	add	r3, sp, #92	; 0x5c
   26b32:	ac23      	add	r4, sp, #140	; 0x8c
   26b34:	2200      	movs	r2, #0
   26b36:	f853 1f04 	ldr.w	r1, [r3, #4]!
   26b3a:	430a      	orrs	r2, r1
   26b3c:	42a3      	cmp	r3, r4
   26b3e:	d1fa      	bne.n	26b36 <blst_sign_pk2_in_g2+0x42>
   26b40:	1e53      	subs	r3, r2, #1
   26b42:	ea23 0202 	bic.w	r2, r3, r2
   26b46:	0fd2      	lsrs	r2, r2, #31
   26b48:	ea40 1282 	orr.w	r2, r0, r2, lsl #6
   26b4c:	702a      	strb	r2, [r5, #0]
   26b4e:	b025      	add	sp, #148	; 0x94
   26b50:	bd30      	pop	{r4, r5, pc}

00026b52 <blst_p1_mult>:
   26b52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26b56:	b089      	sub	sp, #36	; 0x24
   26b58:	4607      	mov	r7, r0
   26b5a:	4688      	mov	r8, r1
   26b5c:	4615      	mov	r5, r2
   26b5e:	461e      	mov	r6, r3
   26b60:	2bbf      	cmp	r3, #191	; 0xbf
   26b62:	d934      	bls.n	26bce <blst_p1_mult+0x7c>
   26b64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   26b68:	d83b      	bhi.n	26be2 <blst_p1_mult+0x90>
   26b6a:	1dd8      	adds	r0, r3, #7
   26b6c:	08c0      	lsrs	r0, r0, #3
   26b6e:	f10d 33ff 	add.w	r3, sp, #4294967295
   26b72:	466c      	mov	r4, sp
   26b74:	f10d 0e1f 	add.w	lr, sp, #31
   26b78:	f04f 39ff 	mov.w	r9, #4294967295
   26b7c:	2100      	movs	r1, #0
   26b7e:	469c      	mov	ip, r3
   26b80:	5c6a      	ldrb	r2, [r5, r1]
   26b82:	ea02 0209 	and.w	r2, r2, r9
   26b86:	f803 2f01 	strb.w	r2, [r3, #1]!
   26b8a:	f10c 0c02 	add.w	ip, ip, #2
   26b8e:	ebac 0c04 	sub.w	ip, ip, r4
   26b92:	ebac 0c00 	sub.w	ip, ip, r0
   26b96:	ea4f 79ec 	mov.w	r9, ip, asr #31
   26b9a:	eb01 71dc 	add.w	r1, r1, ip, lsr #31
   26b9e:	4573      	cmp	r3, lr
   26ba0:	d1ed      	bne.n	26b7e <blst_p1_mult+0x2c>
   26ba2:	2208      	movs	r2, #8
   26ba4:	4910      	ldr	r1, [pc, #64]	; (26be8 <blst_p1_mult+0x96>)
   26ba6:	4668      	mov	r0, sp
   26ba8:	f7f9 fd9d 	bl	206e6 <check_mod_n>
   26bac:	b190      	cbz	r0, 26bd4 <blst_p1_mult+0x82>
   26bae:	466a      	mov	r2, sp
   26bb0:	4641      	mov	r1, r8
   26bb2:	4638      	mov	r0, r7
   26bb4:	f7ff fea4 	bl	26900 <POINTonE1_mult_glv>
   26bb8:	f104 0220 	add.w	r2, r4, #32
   26bbc:	2300      	movs	r3, #0
   26bbe:	f844 3b04 	str.w	r3, [r4], #4
   26bc2:	42a2      	cmp	r2, r4
   26bc4:	d1fb      	bne.n	26bbe <blst_p1_mult+0x6c>
   26bc6:	466b      	mov	r3, sp
   26bc8:	b009      	add	sp, #36	; 0x24
   26bca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   26bce:	f7fc fc16 	bl	233fe <POINTonE1_mult_w4>
   26bd2:	e7f9      	b.n	26bc8 <blst_p1_mult+0x76>
   26bd4:	4633      	mov	r3, r6
   26bd6:	462a      	mov	r2, r5
   26bd8:	4641      	mov	r1, r8
   26bda:	4638      	mov	r0, r7
   26bdc:	f7fc fc7d 	bl	234da <POINTonE1_mult_w5>
   26be0:	e7ea      	b.n	26bb8 <blst_p1_mult+0x66>
   26be2:	f7fc fc7a 	bl	234da <POINTonE1_mult_w5>
   26be6:	e7ef      	b.n	26bc8 <blst_p1_mult+0x76>
   26be8:	00039a48 	.word	0x00039a48

00026bec <div_by_z>:
   26bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26bee:	4604      	mov	r4, r0
   26bf0:	4f0d      	ldr	r7, [pc, #52]	; (26c28 <div_by_z+0x3c>)
   26bf2:	463a      	mov	r2, r7
   26bf4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   26bf8:	3008      	adds	r0, #8
   26bfa:	f7ff fe1d 	bl	26838 <div_3_limbs>
   26bfe:	4602      	mov	r2, r0
   26c00:	1d26      	adds	r6, r4, #4
   26c02:	4d0a      	ldr	r5, [pc, #40]	; (26c2c <div_by_z+0x40>)
   26c04:	2302      	movs	r3, #2
   26c06:	4629      	mov	r1, r5
   26c08:	4630      	mov	r0, r6
   26c0a:	f7fa fcae 	bl	2156a <quot_rem_n>
   26c0e:	463a      	mov	r2, r7
   26c10:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   26c14:	4630      	mov	r0, r6
   26c16:	f7ff fe0f 	bl	26838 <div_3_limbs>
   26c1a:	4602      	mov	r2, r0
   26c1c:	2302      	movs	r3, #2
   26c1e:	4629      	mov	r1, r5
   26c20:	4620      	mov	r0, r4
   26c22:	f7fa fca2 	bl	2156a <quot_rem_n>
   26c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26c28:	d2010000 	.word	0xd2010000
   26c2c:	00039a68 	.word	0x00039a68

00026c30 <quot_rem_128>:
   26c30:	b508      	push	{r3, lr}
   26c32:	2304      	movs	r3, #4
   26c34:	f7fa fc99 	bl	2156a <quot_rem_n>
   26c38:	bd08      	pop	{r3, pc}

00026c3a <quot_rem_64>:
   26c3a:	b508      	push	{r3, lr}
   26c3c:	2302      	movs	r3, #2
   26c3e:	f7fa fc94 	bl	2156a <quot_rem_n>
   26c42:	bd08      	pop	{r3, pc}

00026c44 <blst_sha256_block_data_order>:
   26c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26c48:	b099      	sub	sp, #100	; 0x64
   26c4a:	4603      	mov	r3, r0
   26c4c:	9007      	str	r0, [sp, #28]
   26c4e:	9105      	str	r1, [sp, #20]
   26c50:	6800      	ldr	r0, [r0, #0]
   26c52:	685f      	ldr	r7, [r3, #4]
   26c54:	f8d3 b008 	ldr.w	fp, [r3, #8]
   26c58:	68dd      	ldr	r5, [r3, #12]
   26c5a:	691c      	ldr	r4, [r3, #16]
   26c5c:	695e      	ldr	r6, [r3, #20]
   26c5e:	6999      	ldr	r1, [r3, #24]
   26c60:	9101      	str	r1, [sp, #4]
   26c62:	69d9      	ldr	r1, [r3, #28]
   26c64:	1e53      	subs	r3, r2, #1
   26c66:	9306      	str	r3, [sp, #24]
   26c68:	2a00      	cmp	r2, #0
   26c6a:	f000 80f0 	beq.w	26e4e <blst_sha256_block_data_order+0x20a>
   26c6e:	46b0      	mov	r8, r6
   26c70:	462e      	mov	r6, r5
   26c72:	465d      	mov	r5, fp
   26c74:	e0e2      	b.n	26e3c <blst_sha256_block_data_order+0x1f8>
   26c76:	f8cd 8004 	str.w	r8, [sp, #4]
   26c7a:	46a0      	mov	r8, r4
   26c7c:	4674      	mov	r4, lr
   26c7e:	463d      	mov	r5, r7
   26c80:	4607      	mov	r7, r0
   26c82:	4610      	mov	r0, r2
   26c84:	f81c 3c03 	ldrb.w	r3, [ip, #-3]
   26c88:	f81c 2c04 	ldrb.w	r2, [ip, #-4]
   26c8c:	0612      	lsls	r2, r2, #24
   26c8e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   26c92:	f81c 3c01 	ldrb.w	r3, [ip, #-1]
   26c96:	431a      	orrs	r2, r3
   26c98:	f81c 3c02 	ldrb.w	r3, [ip, #-2]
   26c9c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   26ca0:	f849 2b04 	str.w	r2, [r9], #4
   26ca4:	ea4f 23f4 	mov.w	r3, r4, ror #11
   26ca8:	ea83 13b4 	eor.w	r3, r3, r4, ror #6
   26cac:	ea83 6374 	eor.w	r3, r3, r4, ror #25
   26cb0:	f8dd e004 	ldr.w	lr, [sp, #4]
   26cb4:	ea2e 0e04 	bic.w	lr, lr, r4
   26cb8:	ea04 0b08 	and.w	fp, r4, r8
   26cbc:	ea8e 0e0b 	eor.w	lr, lr, fp
   26cc0:	4473      	add	r3, lr
   26cc2:	f85a ef04 	ldr.w	lr, [sl, #4]!
   26cc6:	4473      	add	r3, lr
   26cc8:	441a      	add	r2, r3
   26cca:	4411      	add	r1, r2
   26ccc:	ea4f 3370 	mov.w	r3, r0, ror #13
   26cd0:	ea83 03b0 	eor.w	r3, r3, r0, ror #2
   26cd4:	ea83 53b0 	eor.w	r3, r3, r0, ror #22
   26cd8:	ea87 0205 	eor.w	r2, r7, r5
   26cdc:	4002      	ands	r2, r0
   26cde:	ea07 0e05 	and.w	lr, r7, r5
   26ce2:	ea82 020e 	eor.w	r2, r2, lr
   26ce6:	441a      	add	r2, r3
   26ce8:	eb01 0e06 	add.w	lr, r1, r6
   26cec:	440a      	add	r2, r1
   26cee:	f10c 0c04 	add.w	ip, ip, #4
   26cf2:	462e      	mov	r6, r5
   26cf4:	9901      	ldr	r1, [sp, #4]
   26cf6:	ab18      	add	r3, sp, #96	; 0x60
   26cf8:	454b      	cmp	r3, r9
   26cfa:	d1bc      	bne.n	26c76 <blst_sha256_block_data_order+0x32>
   26cfc:	4673      	mov	r3, lr
   26cfe:	9905      	ldr	r1, [sp, #20]
   26d00:	3140      	adds	r1, #64	; 0x40
   26d02:	9105      	str	r1, [sp, #20]
   26d04:	4953      	ldr	r1, [pc, #332]	; (26e54 <blst_sha256_block_data_order+0x210>)
   26d06:	f501 7b4b 	add.w	fp, r1, #812	; 0x32c
   26d0a:	f8cd 800c 	str.w	r8, [sp, #12]
   26d0e:	9402      	str	r4, [sp, #8]
   26d10:	4680      	mov	r8, r0
   26d12:	f04f 0c10 	mov.w	ip, #16
   26d16:	f8cd b010 	str.w	fp, [sp, #16]
   26d1a:	46a9      	mov	r9, r5
   26d1c:	f8dd a004 	ldr.w	sl, [sp, #4]
   26d20:	46be      	mov	lr, r7
   26d22:	e006      	b.n	26d32 <blst_sha256_block_data_order+0xee>
   26d24:	9802      	ldr	r0, [sp, #8]
   26d26:	9003      	str	r0, [sp, #12]
   26d28:	9302      	str	r3, [sp, #8]
   26d2a:	4623      	mov	r3, r4
   26d2c:	46c6      	mov	lr, r8
   26d2e:	4690      	mov	r8, r2
   26d30:	460a      	mov	r2, r1
   26d32:	4665      	mov	r5, ip
   26d34:	f10c 0c01 	add.w	ip, ip, #1
   26d38:	f00c 010f 	and.w	r1, ip, #15
   26d3c:	a818      	add	r0, sp, #96	; 0x60
   26d3e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   26d42:	f851 6c40 	ldr.w	r6, [r1, #-64]
   26d46:	ea4f 41b6 	mov.w	r1, r6, ror #18
   26d4a:	ea81 11f6 	eor.w	r1, r1, r6, ror #7
   26d4e:	f105 000e 	add.w	r0, r5, #14
   26d52:	f000 000f 	and.w	r0, r0, #15
   26d56:	ac18      	add	r4, sp, #96	; 0x60
   26d58:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   26d5c:	f850 7c40 	ldr.w	r7, [r0, #-64]
   26d60:	ea4f 40f7 	mov.w	r0, r7, ror #19
   26d64:	ea80 4077 	eor.w	r0, r0, r7, ror #17
   26d68:	f005 040f 	and.w	r4, r5, #15
   26d6c:	3509      	adds	r5, #9
   26d6e:	f005 050f 	and.w	r5, r5, #15
   26d72:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
   26d76:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
   26d7a:	eb0b 0484 	add.w	r4, fp, r4, lsl #2
   26d7e:	f855 5c40 	ldr.w	r5, [r5, #-64]
   26d82:	f854 bc40 	ldr.w	fp, [r4, #-64]
   26d86:	445d      	add	r5, fp
   26d88:	ea81 01d6 	eor.w	r1, r1, r6, lsr #3
   26d8c:	440d      	add	r5, r1
   26d8e:	ea80 2197 	eor.w	r1, r0, r7, lsr #10
   26d92:	4429      	add	r1, r5
   26d94:	f844 1c40 	str.w	r1, [r4, #-64]
   26d98:	ea4f 25f3 	mov.w	r5, r3, ror #11
   26d9c:	ea85 15b3 	eor.w	r5, r5, r3, ror #6
   26da0:	ea85 6073 	eor.w	r0, r5, r3, ror #25
   26da4:	9e03      	ldr	r6, [sp, #12]
   26da6:	ea26 0503 	bic.w	r5, r6, r3
   26daa:	9c02      	ldr	r4, [sp, #8]
   26dac:	401c      	ands	r4, r3
   26dae:	4065      	eors	r5, r4
   26db0:	4405      	add	r5, r0
   26db2:	9c04      	ldr	r4, [sp, #16]
   26db4:	f854 0f04 	ldr.w	r0, [r4, #4]!
   26db8:	9404      	str	r4, [sp, #16]
   26dba:	4405      	add	r5, r0
   26dbc:	440d      	add	r5, r1
   26dbe:	44aa      	add	sl, r5
   26dc0:	ea4f 3172 	mov.w	r1, r2, ror #13
   26dc4:	ea81 01b2 	eor.w	r1, r1, r2, ror #2
   26dc8:	ea81 50b2 	eor.w	r0, r1, r2, ror #22
   26dcc:	ea88 010e 	eor.w	r1, r8, lr
   26dd0:	4011      	ands	r1, r2
   26dd2:	ea08 040e 	and.w	r4, r8, lr
   26dd6:	4061      	eors	r1, r4
   26dd8:	4401      	add	r1, r0
   26dda:	eb0a 0409 	add.w	r4, sl, r9
   26dde:	4451      	add	r1, sl
   26de0:	46f1      	mov	r9, lr
   26de2:	46b2      	mov	sl, r6
   26de4:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
   26de8:	d19c      	bne.n	26d24 <blst_sha256_block_data_order+0xe0>
   26dea:	4676      	mov	r6, lr
   26dec:	9d07      	ldr	r5, [sp, #28]
   26dee:	6828      	ldr	r0, [r5, #0]
   26df0:	4408      	add	r0, r1
   26df2:	4629      	mov	r1, r5
   26df4:	6028      	str	r0, [r5, #0]
   26df6:	686f      	ldr	r7, [r5, #4]
   26df8:	4417      	add	r7, r2
   26dfa:	606f      	str	r7, [r5, #4]
   26dfc:	68ad      	ldr	r5, [r5, #8]
   26dfe:	4445      	add	r5, r8
   26e00:	608d      	str	r5, [r1, #8]
   26e02:	68ca      	ldr	r2, [r1, #12]
   26e04:	4416      	add	r6, r2
   26e06:	60ce      	str	r6, [r1, #12]
   26e08:	690a      	ldr	r2, [r1, #16]
   26e0a:	4414      	add	r4, r2
   26e0c:	610c      	str	r4, [r1, #16]
   26e0e:	694a      	ldr	r2, [r1, #20]
   26e10:	eb03 0802 	add.w	r8, r3, r2
   26e14:	460a      	mov	r2, r1
   26e16:	f8c1 8014 	str.w	r8, [r1, #20]
   26e1a:	698b      	ldr	r3, [r1, #24]
   26e1c:	9902      	ldr	r1, [sp, #8]
   26e1e:	4419      	add	r1, r3
   26e20:	9101      	str	r1, [sp, #4]
   26e22:	4613      	mov	r3, r2
   26e24:	6191      	str	r1, [r2, #24]
   26e26:	69d1      	ldr	r1, [r2, #28]
   26e28:	4652      	mov	r2, sl
   26e2a:	440a      	add	r2, r1
   26e2c:	4611      	mov	r1, r2
   26e2e:	61da      	str	r2, [r3, #28]
   26e30:	9b06      	ldr	r3, [sp, #24]
   26e32:	3b01      	subs	r3, #1
   26e34:	9306      	str	r3, [sp, #24]
   26e36:	f1b3 3fff 	cmp.w	r3, #4294967295
   26e3a:	d008      	beq.n	26e4e <blst_sha256_block_data_order+0x20a>
   26e3c:	9b05      	ldr	r3, [sp, #20]
   26e3e:	f103 0c04 	add.w	ip, r3, #4
   26e42:	f10d 0920 	add.w	r9, sp, #32
   26e46:	4b03      	ldr	r3, [pc, #12]	; (26e54 <blst_sha256_block_data_order+0x210>)
   26e48:	f503 7a3b 	add.w	sl, r3, #748	; 0x2ec
   26e4c:	e71a      	b.n	26c84 <blst_sha256_block_data_order+0x40>
   26e4e:	b019      	add	sp, #100	; 0x64
   26e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26e54:	00039780 	.word	0x00039780

00026e58 <blst_sha256_hcopy>:
   26e58:	1f0b      	subs	r3, r1, #4
   26e5a:	3804      	subs	r0, #4
   26e5c:	311c      	adds	r1, #28
   26e5e:	f853 2f04 	ldr.w	r2, [r3, #4]!
   26e62:	f840 2f04 	str.w	r2, [r0, #4]!
   26e66:	428b      	cmp	r3, r1
   26e68:	d1f9      	bne.n	26e5e <blst_sha256_hcopy+0x6>
   26e6a:	4770      	bx	lr

00026e6c <blst_sha256_emit>:
   26e6c:	1d03      	adds	r3, r0, #4
   26e6e:	3904      	subs	r1, #4
   26e70:	f100 0c24 	add.w	ip, r0, #36	; 0x24
   26e74:	f851 2f04 	ldr.w	r2, [r1, #4]!
   26e78:	0e10      	lsrs	r0, r2, #24
   26e7a:	f803 0c04 	strb.w	r0, [r3, #-4]
   26e7e:	0c10      	lsrs	r0, r2, #16
   26e80:	f803 0c03 	strb.w	r0, [r3, #-3]
   26e84:	0a10      	lsrs	r0, r2, #8
   26e86:	f803 0c02 	strb.w	r0, [r3, #-2]
   26e8a:	f803 2c01 	strb.w	r2, [r3, #-1]
   26e8e:	3304      	adds	r3, #4
   26e90:	4563      	cmp	r3, ip
   26e92:	d1ef      	bne.n	26e74 <blst_sha256_emit+0x8>
   26e94:	4770      	bx	lr

00026e96 <sha256_final>:
   26e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26e9a:	4607      	mov	r7, r0
   26e9c:	460c      	mov	r4, r1
   26e9e:	6a0e      	ldr	r6, [r1, #32]
   26ea0:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   26ea2:	00ed      	lsls	r5, r5, #3
   26ea4:	ea45 7556 	orr.w	r5, r5, r6, lsr #29
   26ea8:	00f6      	lsls	r6, r6, #3
   26eaa:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   26eac:	18ca      	adds	r2, r1, r3
   26eae:	2180      	movs	r1, #128	; 0x80
   26eb0:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
   26eb4:	3301      	adds	r3, #1
   26eb6:	2b38      	cmp	r3, #56	; 0x38
   26eb8:	d821      	bhi.n	26efe <sha256_final+0x68>
   26eba:	0e2b      	lsrs	r3, r5, #24
   26ebc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
   26ec0:	0c2b      	lsrs	r3, r5, #16
   26ec2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
   26ec6:	0a2b      	lsrs	r3, r5, #8
   26ec8:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
   26ecc:	f884 5063 	strb.w	r5, [r4, #99]	; 0x63
   26ed0:	0e33      	lsrs	r3, r6, #24
   26ed2:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
   26ed6:	0c33      	lsrs	r3, r6, #16
   26ed8:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
   26edc:	0a33      	lsrs	r3, r6, #8
   26ede:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
   26ee2:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
   26ee6:	2201      	movs	r2, #1
   26ee8:	f104 0128 	add.w	r1, r4, #40	; 0x28
   26eec:	4620      	mov	r0, r4
   26eee:	f7ff fea9 	bl	26c44 <blst_sha256_block_data_order>
   26ef2:	4621      	mov	r1, r4
   26ef4:	4638      	mov	r0, r7
   26ef6:	f7ff ffb9 	bl	26e6c <blst_sha256_emit>
   26efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26efe:	f104 0828 	add.w	r8, r4, #40	; 0x28
   26f02:	2201      	movs	r2, #1
   26f04:	4641      	mov	r1, r8
   26f06:	4620      	mov	r0, r4
   26f08:	f7ff fe9c 	bl	26c44 <blst_sha256_block_data_order>
   26f0c:	4643      	mov	r3, r8
   26f0e:	f104 0168 	add.w	r1, r4, #104	; 0x68
   26f12:	2200      	movs	r2, #0
   26f14:	f843 2b04 	str.w	r2, [r3], #4
   26f18:	428b      	cmp	r3, r1
   26f1a:	d1fb      	bne.n	26f14 <sha256_final+0x7e>
   26f1c:	e7cd      	b.n	26eba <sha256_final+0x24>

00026f1e <HMAC_final>:
   26f1e:	b570      	push	{r4, r5, r6, lr}
   26f20:	4605      	mov	r5, r0
   26f22:	460c      	mov	r4, r1
   26f24:	f101 06b0 	add.w	r6, r1, #176	; 0xb0
   26f28:	4630      	mov	r0, r6
   26f2a:	f7ff ffb4 	bl	26e96 <sha256_final>
   26f2e:	f104 0190 	add.w	r1, r4, #144	; 0x90
   26f32:	4620      	mov	r0, r4
   26f34:	f7ff ff90 	bl	26e58 <blst_sha256_hcopy>
   26f38:	2201      	movs	r2, #1
   26f3a:	4631      	mov	r1, r6
   26f3c:	4620      	mov	r0, r4
   26f3e:	f7ff fe81 	bl	26c44 <blst_sha256_block_data_order>
   26f42:	4621      	mov	r1, r4
   26f44:	4628      	mov	r0, r5
   26f46:	f7ff ff91 	bl	26e6c <blst_sha256_emit>
   26f4a:	bd70      	pop	{r4, r5, r6, pc}

00026f4c <blst_sha256_bcopy>:
   26f4c:	b152      	cbz	r2, 26f64 <blst_sha256_bcopy+0x18>
   26f4e:	1e4b      	subs	r3, r1, #1
   26f50:	3801      	subs	r0, #1
   26f52:	f102 3cff 	add.w	ip, r2, #4294967295
   26f56:	4461      	add	r1, ip
   26f58:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   26f5c:	f800 2f01 	strb.w	r2, [r0, #1]!
   26f60:	428b      	cmp	r3, r1
   26f62:	d1f9      	bne.n	26f58 <blst_sha256_bcopy+0xc>
   26f64:	4770      	bx	lr

00026f66 <sha256_update>:
   26f66:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26f6a:	4605      	mov	r5, r0
   26f6c:	460e      	mov	r6, r1
   26f6e:	4614      	mov	r4, r2
   26f70:	6a03      	ldr	r3, [r0, #32]
   26f72:	6a42      	ldr	r2, [r0, #36]	; 0x24
   26f74:	191b      	adds	r3, r3, r4
   26f76:	f142 0200 	adc.w	r2, r2, #0
   26f7a:	6203      	str	r3, [r0, #32]
   26f7c:	6242      	str	r2, [r0, #36]	; 0x24
   26f7e:	6e87      	ldr	r7, [r0, #104]	; 0x68
   26f80:	b1ec      	cbz	r4, 26fbe <sha256_update+0x58>
   26f82:	b1e7      	cbz	r7, 26fbe <sha256_update+0x58>
   26f84:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
   26f88:	454c      	cmp	r4, r9
   26f8a:	d31d      	bcc.n	26fc8 <sha256_update+0x62>
   26f8c:	f100 0828 	add.w	r8, r0, #40	; 0x28
   26f90:	464a      	mov	r2, r9
   26f92:	eb08 0007 	add.w	r0, r8, r7
   26f96:	f7ff ffd9 	bl	26f4c <blst_sha256_bcopy>
   26f9a:	444e      	add	r6, r9
   26f9c:	3c40      	subs	r4, #64	; 0x40
   26f9e:	443c      	add	r4, r7
   26fa0:	2201      	movs	r2, #1
   26fa2:	4641      	mov	r1, r8
   26fa4:	4628      	mov	r0, r5
   26fa6:	f7ff fe4d 	bl	26c44 <blst_sha256_block_data_order>
   26faa:	4643      	mov	r3, r8
   26fac:	f105 0168 	add.w	r1, r5, #104	; 0x68
   26fb0:	2200      	movs	r2, #0
   26fb2:	f843 2b04 	str.w	r2, [r3], #4
   26fb6:	428b      	cmp	r3, r1
   26fb8:	d1fb      	bne.n	26fb2 <sha256_update+0x4c>
   26fba:	2300      	movs	r3, #0
   26fbc:	66ab      	str	r3, [r5, #104]	; 0x68
   26fbe:	2c3f      	cmp	r4, #63	; 0x3f
   26fc0:	d80b      	bhi.n	26fda <sha256_update+0x74>
   26fc2:	b9a4      	cbnz	r4, 26fee <sha256_update+0x88>
   26fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26fc8:	3028      	adds	r0, #40	; 0x28
   26fca:	4622      	mov	r2, r4
   26fcc:	4438      	add	r0, r7
   26fce:	f7ff ffbd 	bl	26f4c <blst_sha256_bcopy>
   26fd2:	6eab      	ldr	r3, [r5, #104]	; 0x68
   26fd4:	4423      	add	r3, r4
   26fd6:	66ab      	str	r3, [r5, #104]	; 0x68
   26fd8:	e7f4      	b.n	26fc4 <sha256_update+0x5e>
   26fda:	09a2      	lsrs	r2, r4, #6
   26fdc:	4631      	mov	r1, r6
   26fde:	4628      	mov	r0, r5
   26fe0:	f7ff fe30 	bl	26c44 <blst_sha256_block_data_order>
   26fe4:	f024 033f 	bic.w	r3, r4, #63	; 0x3f
   26fe8:	441e      	add	r6, r3
   26fea:	1ae4      	subs	r4, r4, r3
   26fec:	e7e9      	b.n	26fc2 <sha256_update+0x5c>
   26fee:	66ac      	str	r4, [r5, #104]	; 0x68
   26ff0:	4622      	mov	r2, r4
   26ff2:	4631      	mov	r1, r6
   26ff4:	f105 0028 	add.w	r0, r5, #40	; 0x28
   26ff8:	f7ff ffa8 	bl	26f4c <blst_sha256_bcopy>
   26ffc:	e7e2      	b.n	26fc4 <sha256_update+0x5e>

00026ffe <hash_to_field>:
   26ffe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27002:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
   27006:	af02      	add	r7, sp, #8
   27008:	4605      	mov	r5, r0
   2700a:	6079      	str	r1, [r7, #4]
   2700c:	f8d7 6268 	ldr.w	r6, [r7, #616]	; 0x268
   27010:	f8d7 826c 	ldr.w	r8, [r7, #620]	; 0x26c
   27014:	018c      	lsls	r4, r1, #6
   27016:	4668      	mov	r0, sp
   27018:	eba0 1181 	sub.w	r1, r0, r1, lsl #6
   2701c:	468d      	mov	sp, r1
   2701e:	f10d 0b08 	add.w	fp, sp, #8
   27022:	f1b2 0900 	subs.w	r9, r2, #0
   27026:	bf08      	it	eq
   27028:	2300      	moveq	r3, #0
   2702a:	603b      	str	r3, [r7, #0]
   2702c:	2e00      	cmp	r6, #0
   2702e:	f000 817a 	beq.w	27326 <hash_to_field+0x328>
   27032:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   27036:	f200 815b 	bhi.w	272f0 <hash_to_field+0x2f2>
   2703a:	f108 0a6a 	add.w	sl, r8, #106	; 0x6a
   2703e:	f02a 003f 	bic.w	r0, sl, #63	; 0x3f
   27042:	f507 730e 	add.w	r3, r7, #568	; 0x238
   27046:	eb03 0c00 	add.w	ip, r3, r0
   2704a:	f5ac 7cf0 	sub.w	ip, ip, #480	; 0x1e0
   2704e:	4663      	mov	r3, ip
   27050:	f10c 0140 	add.w	r1, ip, #64	; 0x40
   27054:	2200      	movs	r2, #0
   27056:	f843 2b04 	str.w	r2, [r3], #4
   2705a:	428b      	cmp	r3, r1
   2705c:	d1fb      	bne.n	27056 <hash_to_field+0x58>
   2705e:	f1b8 0f00 	cmp.w	r8, #0
   27062:	f000 8163 	beq.w	2732c <hash_to_field+0x32e>
   27066:	1e73      	subs	r3, r6, #1
   27068:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
   2706c:	f108 31ff 	add.w	r1, r8, #4294967295
   27070:	440e      	add	r6, r1
   27072:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   27076:	f802 1f01 	strb.w	r1, [r2, #1]!
   2707a:	42b3      	cmp	r3, r6
   2707c:	d1f9      	bne.n	27072 <hash_to_field+0x74>
   2707e:	4643      	mov	r3, r8
   27080:	f107 02b9 	add.w	r2, r7, #185	; 0xb9
   27084:	f802 8003 	strb.w	r8, [r2, r3]
   27088:	f107 02ba 	add.w	r2, r7, #186	; 0xba
   2708c:	2180      	movs	r1, #128	; 0x80
   2708e:	54d1      	strb	r1, [r2, r3]
   27090:	2200      	movs	r2, #0
   27092:	f107 01bb 	add.w	r1, r7, #187	; 0xbb
   27096:	54ca      	strb	r2, [r1, r3]
   27098:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
   2709c:	54ca      	strb	r2, [r1, r3]
   2709e:	f107 01bd 	add.w	r1, r7, #189	; 0xbd
   270a2:	54ca      	strb	r2, [r1, r3]
   270a4:	f107 01be 	add.w	r1, r7, #190	; 0xbe
   270a8:	54ca      	strb	r2, [r1, r3]
   270aa:	f107 01bf 	add.w	r1, r7, #191	; 0xbf
   270ae:	54ca      	strb	r2, [r1, r3]
   270b0:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
   270b4:	54ca      	strb	r2, [r1, r3]
   270b6:	f107 01c1 	add.w	r1, r7, #193	; 0xc1
   270ba:	54ca      	strb	r2, [r1, r3]
   270bc:	f108 0322 	add.w	r3, r8, #34	; 0x22
   270c0:	00da      	lsls	r2, r3, #3
   270c2:	f107 0198 	add.w	r1, r7, #152	; 0x98
   270c6:	4408      	add	r0, r1
   270c8:	f3c3 1357 	ubfx	r3, r3, #5, #24
   270cc:	f800 3c02 	strb.w	r3, [r0, #-2]
   270d0:	f800 2c01 	strb.w	r2, [r0, #-1]
   270d4:	4b96      	ldr	r3, [pc, #600]	; (27330 <hash_to_field+0x332>)
   270d6:	62bb      	str	r3, [r7, #40]	; 0x28
   270d8:	4b96      	ldr	r3, [pc, #600]	; (27334 <hash_to_field+0x336>)
   270da:	62fb      	str	r3, [r7, #44]	; 0x2c
   270dc:	4b96      	ldr	r3, [pc, #600]	; (27338 <hash_to_field+0x33a>)
   270de:	633b      	str	r3, [r7, #48]	; 0x30
   270e0:	f103 53ab 	add.w	r3, r3, #358612992	; 0x15600000
   270e4:	f503 2346 	add.w	r3, r3, #811008	; 0xc6000
   270e8:	f203 7331 	addw	r3, r3, #1841	; 0x731
   270ec:	637b      	str	r3, [r7, #52]	; 0x34
   270ee:	4b93      	ldr	r3, [pc, #588]	; (2733c <hash_to_field+0x33e>)
   270f0:	63bb      	str	r3, [r7, #56]	; 0x38
   270f2:	f103 534f 	add.w	r3, r3, #868220928	; 0x33c00000
   270f6:	f503 1332 	add.w	r3, r3, #2916352	; 0x2c8000
   270fa:	f603 53b2 	addw	r3, r3, #3506	; 0xdb2
   270fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   27100:	4b8f      	ldr	r3, [pc, #572]	; (27340 <hash_to_field+0x342>)
   27102:	643b      	str	r3, [r7, #64]	; 0x40
   27104:	4b8f      	ldr	r3, [pc, #572]	; (27344 <hash_to_field+0x346>)
   27106:	647b      	str	r3, [r7, #68]	; 0x44
   27108:	2240      	movs	r2, #64	; 0x40
   2710a:	2300      	movs	r3, #0
   2710c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
   27110:	f107 0350 	add.w	r3, r7, #80	; 0x50
   27114:	f107 0190 	add.w	r1, r7, #144	; 0x90
   27118:	2200      	movs	r2, #0
   2711a:	f843 2b04 	str.w	r2, [r3], #4
   2711e:	428b      	cmp	r3, r1
   27120:	d1fb      	bne.n	2711a <hash_to_field+0x11c>
   27122:	f107 0350 	add.w	r3, r7, #80	; 0x50
   27126:	2600      	movs	r6, #0
   27128:	f8c7 6090 	str.w	r6, [r7, #144]	; 0x90
   2712c:	683a      	ldr	r2, [r7, #0]
   2712e:	4649      	mov	r1, r9
   27130:	f107 0028 	add.w	r0, r7, #40	; 0x28
   27134:	f7ff ff17 	bl	26f66 <sha256_update>
   27138:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
   2713c:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
   27140:	f107 0028 	add.w	r0, r7, #40	; 0x28
   27144:	f7ff ff0f 	bl	26f66 <sha256_update>
   27148:	0a23      	lsrs	r3, r4, #8
   2714a:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
   2714e:	f887 40b7 	strb.w	r4, [r7, #183]	; 0xb7
   27152:	f887 60b8 	strb.w	r6, [r7, #184]	; 0xb8
   27156:	f108 0204 	add.w	r2, r8, #4
   2715a:	f107 01b6 	add.w	r1, r7, #182	; 0xb6
   2715e:	f107 0028 	add.w	r0, r7, #40	; 0x28
   27162:	f7ff ff00 	bl	26f66 <sha256_update>
   27166:	f107 0128 	add.w	r1, r7, #40	; 0x28
   2716a:	f107 0008 	add.w	r0, r7, #8
   2716e:	f7ff fe92 	bl	26e96 <sha256_final>
   27172:	4b75      	ldr	r3, [pc, #468]	; (27348 <hash_to_field+0x34a>)
   27174:	62bb      	str	r3, [r7, #40]	; 0x28
   27176:	4b75      	ldr	r3, [pc, #468]	; (2734c <hash_to_field+0x34e>)
   27178:	62fb      	str	r3, [r7, #44]	; 0x2c
   2717a:	4b75      	ldr	r3, [pc, #468]	; (27350 <hash_to_field+0x352>)
   2717c:	633b      	str	r3, [r7, #48]	; 0x30
   2717e:	4b75      	ldr	r3, [pc, #468]	; (27354 <hash_to_field+0x356>)
   27180:	637b      	str	r3, [r7, #52]	; 0x34
   27182:	4b75      	ldr	r3, [pc, #468]	; (27358 <hash_to_field+0x35a>)
   27184:	63bb      	str	r3, [r7, #56]	; 0x38
   27186:	4b75      	ldr	r3, [pc, #468]	; (2735c <hash_to_field+0x35e>)
   27188:	63fb      	str	r3, [r7, #60]	; 0x3c
   2718a:	4b75      	ldr	r3, [pc, #468]	; (27360 <hash_to_field+0x362>)
   2718c:	643b      	str	r3, [r7, #64]	; 0x40
   2718e:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   27192:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   27196:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   2719a:	647b      	str	r3, [r7, #68]	; 0x44
   2719c:	f107 0024 	add.w	r0, r7, #36	; 0x24
   271a0:	f107 0294 	add.w	r2, r7, #148	; 0x94
   271a4:	1d3b      	adds	r3, r7, #4
   271a6:	f853 1f04 	ldr.w	r1, [r3, #4]!
   271aa:	f842 1f04 	str.w	r1, [r2, #4]!
   271ae:	4283      	cmp	r3, r0
   271b0:	d1f9      	bne.n	271a6 <hash_to_field+0x1a8>
   271b2:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
   271b6:	3301      	adds	r3, #1
   271b8:	f887 30b8 	strb.w	r3, [r7, #184]	; 0xb8
   271bc:	ea4f 1a9a 	mov.w	sl, sl, lsr #6
   271c0:	4652      	mov	r2, sl
   271c2:	f107 0198 	add.w	r1, r7, #152	; 0x98
   271c6:	f107 0028 	add.w	r0, r7, #40	; 0x28
   271ca:	f7ff fd3b 	bl	26c44 <blst_sha256_block_data_order>
   271ce:	f107 0128 	add.w	r1, r7, #40	; 0x28
   271d2:	4658      	mov	r0, fp
   271d4:	f7ff fe4a 	bl	26e6c <blst_sha256_emit>
   271d8:	0964      	lsrs	r4, r4, #5
   271da:	f1b4 0801 	subs.w	r8, r4, #1
   271de:	d03e      	beq.n	2725e <hash_to_field+0x260>
   271e0:	f10b 041c 	add.w	r4, fp, #28
   271e4:	465e      	mov	r6, fp
   271e6:	f8df 9164 	ldr.w	r9, [pc, #356]	; 2734c <hash_to_field+0x34e>
   271ea:	603d      	str	r5, [r7, #0]
   271ec:	4b56      	ldr	r3, [pc, #344]	; (27348 <hash_to_field+0x34a>)
   271ee:	62bb      	str	r3, [r7, #40]	; 0x28
   271f0:	f8c7 902c 	str.w	r9, [r7, #44]	; 0x2c
   271f4:	4b56      	ldr	r3, [pc, #344]	; (27350 <hash_to_field+0x352>)
   271f6:	633b      	str	r3, [r7, #48]	; 0x30
   271f8:	4b56      	ldr	r3, [pc, #344]	; (27354 <hash_to_field+0x356>)
   271fa:	637b      	str	r3, [r7, #52]	; 0x34
   271fc:	4b56      	ldr	r3, [pc, #344]	; (27358 <hash_to_field+0x35a>)
   271fe:	63bb      	str	r3, [r7, #56]	; 0x38
   27200:	4b56      	ldr	r3, [pc, #344]	; (2735c <hash_to_field+0x35e>)
   27202:	63fb      	str	r3, [r7, #60]	; 0x3c
   27204:	4b56      	ldr	r3, [pc, #344]	; (27360 <hash_to_field+0x362>)
   27206:	643b      	str	r3, [r7, #64]	; 0x40
   27208:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   2720c:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   27210:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   27214:	647b      	str	r3, [r7, #68]	; 0x44
   27216:	1f32      	subs	r2, r6, #4
   27218:	f107 0094 	add.w	r0, r7, #148	; 0x94
   2721c:	1d39      	adds	r1, r7, #4
   2721e:	f851 3f04 	ldr.w	r3, [r1, #4]!
   27222:	f852 5f04 	ldr.w	r5, [r2, #4]!
   27226:	406b      	eors	r3, r5
   27228:	f840 3f04 	str.w	r3, [r0, #4]!
   2722c:	42a2      	cmp	r2, r4
   2722e:	d1f6      	bne.n	2721e <hash_to_field+0x220>
   27230:	3620      	adds	r6, #32
   27232:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
   27236:	3301      	adds	r3, #1
   27238:	f887 30b8 	strb.w	r3, [r7, #184]	; 0xb8
   2723c:	4652      	mov	r2, sl
   2723e:	f107 0198 	add.w	r1, r7, #152	; 0x98
   27242:	f107 0028 	add.w	r0, r7, #40	; 0x28
   27246:	f7ff fcfd 	bl	26c44 <blst_sha256_block_data_order>
   2724a:	f107 0128 	add.w	r1, r7, #40	; 0x28
   2724e:	4630      	mov	r0, r6
   27250:	f7ff fe0c 	bl	26e6c <blst_sha256_emit>
   27254:	3420      	adds	r4, #32
   27256:	f1b8 0801 	subs.w	r8, r8, #1
   2725a:	d1c7      	bne.n	271ec <hash_to_field+0x1ee>
   2725c:	683d      	ldr	r5, [r7, #0]
   2725e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
   27262:	f507 710e 	add.w	r1, r7, #568	; 0x238
   27266:	2200      	movs	r2, #0
   27268:	f843 2b04 	str.w	r2, [r3], #4
   2726c:	428b      	cmp	r3, r1
   2726e:	d1fb      	bne.n	27268 <hash_to_field+0x26a>
   27270:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
   27274:	687b      	ldr	r3, [r7, #4]
   27276:	1e5e      	subs	r6, r3, #1
   27278:	b3ab      	cbz	r3, 272e6 <hash_to_field+0x2e8>
   2727a:	f10b 0440 	add.w	r4, fp, #64	; 0x40
   2727e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 27364 <hash_to_field+0x366>
   27282:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 27368 <hash_to_field+0x36a>
   27286:	465a      	mov	r2, fp
   27288:	2100      	movs	r1, #0
   2728a:	f10b 0c3f 	add.w	ip, fp, #63	; 0x3f
   2728e:	ebac 0302 	sub.w	r3, ip, r2
   27292:	f812 0b01 	ldrb.w	r0, [r2], #1
   27296:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
   2729a:	f023 0303 	bic.w	r3, r3, #3
   2729e:	f507 700e 	add.w	r0, r7, #568	; 0x238
   272a2:	4403      	add	r3, r0
   272a4:	f843 1c60 	str.w	r1, [r3, #-96]
   272a8:	42a2      	cmp	r2, r4
   272aa:	d1f0      	bne.n	2728e <hash_to_field+0x290>
   272ac:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
   272b0:	f04f 080c 	mov.w	r8, #12
   272b4:	f8cd 8000 	str.w	r8, [sp]
   272b8:	4653      	mov	r3, sl
   272ba:	464a      	mov	r2, r9
   272bc:	f507 71ec 	add.w	r1, r7, #472	; 0x1d8
   272c0:	4628      	mov	r0, r5
   272c2:	f7f9 ff36 	bl	21132 <redc_mont_n>
   272c6:	f8cd 8004 	str.w	r8, [sp, #4]
   272ca:	f8cd a000 	str.w	sl, [sp]
   272ce:	464b      	mov	r3, r9
   272d0:	4a26      	ldr	r2, [pc, #152]	; (2736c <hash_to_field+0x36e>)
   272d2:	4629      	mov	r1, r5
   272d4:	4628      	mov	r0, r5
   272d6:	f7f9 fb7b 	bl	209d0 <mul_mont_n>
   272da:	3530      	adds	r5, #48	; 0x30
   272dc:	3e01      	subs	r6, #1
   272de:	3440      	adds	r4, #64	; 0x40
   272e0:	f1b6 3fff 	cmp.w	r6, #4294967295
   272e4:	d1cf      	bne.n	27286 <hash_to_field+0x288>
   272e6:	f507 770f 	add.w	r7, r7, #572	; 0x23c
   272ea:	46bd      	mov	sp, r7
   272ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   272f0:	f107 0028 	add.w	r0, r7, #40	; 0x28
   272f4:	f7f9 f972 	bl	205dc <sha256_init>
   272f8:	2211      	movs	r2, #17
   272fa:	491d      	ldr	r1, [pc, #116]	; (27370 <hash_to_field+0x372>)
   272fc:	f107 0028 	add.w	r0, r7, #40	; 0x28
   27300:	f7ff fe31 	bl	26f66 <sha256_update>
   27304:	4642      	mov	r2, r8
   27306:	4631      	mov	r1, r6
   27308:	f107 0028 	add.w	r0, r7, #40	; 0x28
   2730c:	f7ff fe2b 	bl	26f66 <sha256_update>
   27310:	f107 0128 	add.w	r1, r7, #40	; 0x28
   27314:	f107 0008 	add.w	r0, r7, #8
   27318:	f7ff fdbd 	bl	26e96 <sha256_final>
   2731c:	f04f 0820 	mov.w	r8, #32
   27320:	f107 0608 	add.w	r6, r7, #8
   27324:	e689      	b.n	2703a <hash_to_field+0x3c>
   27326:	f04f 0800 	mov.w	r8, #0
   2732a:	e686      	b.n	2703a <hash_to_field+0x3c>
   2732c:	4643      	mov	r3, r8
   2732e:	e6a7      	b.n	27080 <hash_to_field+0x82>
   27330:	da5698be 	.word	0xda5698be
   27334:	17b9b469 	.word	0x17b9b469
   27338:	62335799 	.word	0x62335799
   2733c:	8ce5d491 	.word	0x8ce5d491
   27340:	bafef9ea 	.word	0xbafef9ea
   27344:	1837a9d8 	.word	0x1837a9d8
   27348:	6a09e667 	.word	0x6a09e667
   2734c:	bb67ae85 	.word	0xbb67ae85
   27350:	3c6ef372 	.word	0x3c6ef372
   27354:	a54ff53a 	.word	0xa54ff53a
   27358:	510e527f 	.word	0x510e527f
   2735c:	9b05688c 	.word	0x9b05688c
   27360:	1f83d9ab 	.word	0x1f83d9ab
   27364:	fffcfffd 	.word	0xfffcfffd
   27368:	00038688 	.word	0x00038688
   2736c:	00039b70 	.word	0x00039b70
   27370:	0003af50 	.word	0x0003af50

00027374 <blst_encode_to_g1>:
   27374:	b510      	push	{r4, lr}
   27376:	b090      	sub	sp, #64	; 0x40
   27378:	4604      	mov	r4, r0
   2737a:	9812      	ldr	r0, [sp, #72]	; 0x48
   2737c:	9003      	str	r0, [sp, #12]
   2737e:	9302      	str	r3, [sp, #8]
   27380:	9201      	str	r2, [sp, #4]
   27382:	9100      	str	r1, [sp, #0]
   27384:	9b14      	ldr	r3, [sp, #80]	; 0x50
   27386:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   27388:	2101      	movs	r1, #1
   2738a:	a804      	add	r0, sp, #16
   2738c:	f7ff fe37 	bl	26ffe <hash_to_field>
   27390:	2200      	movs	r2, #0
   27392:	a904      	add	r1, sp, #16
   27394:	4620      	mov	r0, r4
   27396:	f7ff f985 	bl	266a4 <map_to_g1>
   2739a:	b010      	add	sp, #64	; 0x40
   2739c:	bd10      	pop	{r4, pc}

0002739e <blst_hash_to_g1>:
   2739e:	b510      	push	{r4, lr}
   273a0:	b09c      	sub	sp, #112	; 0x70
   273a2:	4604      	mov	r4, r0
   273a4:	981e      	ldr	r0, [sp, #120]	; 0x78
   273a6:	9003      	str	r0, [sp, #12]
   273a8:	9302      	str	r3, [sp, #8]
   273aa:	9201      	str	r2, [sp, #4]
   273ac:	9100      	str	r1, [sp, #0]
   273ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
   273b0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   273b2:	2102      	movs	r1, #2
   273b4:	a804      	add	r0, sp, #16
   273b6:	f7ff fe22 	bl	26ffe <hash_to_field>
   273ba:	aa10      	add	r2, sp, #64	; 0x40
   273bc:	a904      	add	r1, sp, #16
   273be:	4620      	mov	r0, r4
   273c0:	f7ff f970 	bl	266a4 <map_to_g1>
   273c4:	b01c      	add	sp, #112	; 0x70
   273c6:	bd10      	pop	{r4, pc}

000273c8 <HMAC_init>:
   273c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   273cc:	4607      	mov	r7, r0
   273ce:	2900      	cmp	r1, #0
   273d0:	d06d      	beq.n	274ae <HMAC_init+0xe6>
   273d2:	4614      	mov	r4, r2
   273d4:	460d      	mov	r5, r1
   273d6:	f100 09b0 	add.w	r9, r0, #176	; 0xb0
   273da:	464e      	mov	r6, r9
   273dc:	f100 08f0 	add.w	r8, r0, #240	; 0xf0
   273e0:	464b      	mov	r3, r9
   273e2:	2100      	movs	r1, #0
   273e4:	f843 1b04 	str.w	r1, [r3], #4
   273e8:	4543      	cmp	r3, r8
   273ea:	d1fb      	bne.n	273e4 <HMAC_init+0x1c>
   273ec:	2c40      	cmp	r4, #64	; 0x40
   273ee:	d973      	bls.n	274d8 <HMAC_init+0x110>
   273f0:	4638      	mov	r0, r7
   273f2:	f7f9 f8f3 	bl	205dc <sha256_init>
   273f6:	4622      	mov	r2, r4
   273f8:	4629      	mov	r1, r5
   273fa:	4638      	mov	r0, r7
   273fc:	f7ff fdb3 	bl	26f66 <sha256_update>
   27400:	4639      	mov	r1, r7
   27402:	4648      	mov	r0, r9
   27404:	f7ff fd47 	bl	26e96 <sha256_final>
   27408:	f107 04ac 	add.w	r4, r7, #172	; 0xac
   2740c:	f107 05ec 	add.w	r5, r7, #236	; 0xec
   27410:	4623      	mov	r3, r4
   27412:	f853 2f04 	ldr.w	r2, [r3, #4]!
   27416:	f082 3236 	eor.w	r2, r2, #909522486	; 0x36363636
   2741a:	601a      	str	r2, [r3, #0]
   2741c:	42ab      	cmp	r3, r5
   2741e:	d1f8      	bne.n	27412 <HMAC_init+0x4a>
   27420:	4638      	mov	r0, r7
   27422:	f7f9 f8db 	bl	205dc <sha256_init>
   27426:	2240      	movs	r2, #64	; 0x40
   27428:	4649      	mov	r1, r9
   2742a:	4638      	mov	r0, r7
   2742c:	f7ff fd9b 	bl	26f66 <sha256_update>
   27430:	4639      	mov	r1, r7
   27432:	f107 0070 	add.w	r0, r7, #112	; 0x70
   27436:	f7ff fd0f 	bl	26e58 <blst_sha256_hcopy>
   2743a:	f854 3f04 	ldr.w	r3, [r4, #4]!
   2743e:	f083 336a 	eor.w	r3, r3, #1785358954	; 0x6a6a6a6a
   27442:	6023      	str	r3, [r4, #0]
   27444:	42ac      	cmp	r4, r5
   27446:	d1f8      	bne.n	2743a <HMAC_init+0x72>
   27448:	4b26      	ldr	r3, [pc, #152]	; (274e4 <HMAC_init+0x11c>)
   2744a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   2744e:	4b26      	ldr	r3, [pc, #152]	; (274e8 <HMAC_init+0x120>)
   27450:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   27454:	4b25      	ldr	r3, [pc, #148]	; (274ec <HMAC_init+0x124>)
   27456:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   2745a:	4b25      	ldr	r3, [pc, #148]	; (274f0 <HMAC_init+0x128>)
   2745c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   27460:	4b24      	ldr	r3, [pc, #144]	; (274f4 <HMAC_init+0x12c>)
   27462:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   27466:	4b24      	ldr	r3, [pc, #144]	; (274f8 <HMAC_init+0x130>)
   27468:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   2746c:	4b23      	ldr	r3, [pc, #140]	; (274fc <HMAC_init+0x134>)
   2746e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
   27472:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   27476:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   2747a:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   2747e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   27482:	2201      	movs	r2, #1
   27484:	4649      	mov	r1, r9
   27486:	f107 0090 	add.w	r0, r7, #144	; 0x90
   2748a:	f7ff fbdb 	bl	26c44 <blst_sha256_block_data_order>
   2748e:	2300      	movs	r3, #0
   27490:	f846 3b04 	str.w	r3, [r6], #4
   27494:	4546      	cmp	r6, r8
   27496:	d1fb      	bne.n	27490 <HMAC_init+0xc8>
   27498:	2380      	movs	r3, #128	; 0x80
   2749a:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0
   2749e:	2303      	movs	r3, #3
   274a0:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
   274a4:	2300      	movs	r3, #0
   274a6:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
   274aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   274ae:	f100 0170 	add.w	r1, r0, #112	; 0x70
   274b2:	f7ff fcd1 	bl	26e58 <blst_sha256_hcopy>
   274b6:	2240      	movs	r2, #64	; 0x40
   274b8:	2300      	movs	r3, #0
   274ba:	e9c7 2308 	strd	r2, r3, [r7, #32]
   274be:	f107 0028 	add.w	r0, r7, #40	; 0x28
   274c2:	4603      	mov	r3, r0
   274c4:	f107 0168 	add.w	r1, r7, #104	; 0x68
   274c8:	2200      	movs	r2, #0
   274ca:	f843 2b04 	str.w	r2, [r3], #4
   274ce:	4299      	cmp	r1, r3
   274d0:	d1fb      	bne.n	274ca <HMAC_init+0x102>
   274d2:	2300      	movs	r3, #0
   274d4:	66bb      	str	r3, [r7, #104]	; 0x68
   274d6:	e7e8      	b.n	274aa <HMAC_init+0xe2>
   274d8:	4622      	mov	r2, r4
   274da:	4629      	mov	r1, r5
   274dc:	4648      	mov	r0, r9
   274de:	f7ff fd35 	bl	26f4c <blst_sha256_bcopy>
   274e2:	e791      	b.n	27408 <HMAC_init+0x40>
   274e4:	6a09e667 	.word	0x6a09e667
   274e8:	bb67ae85 	.word	0xbb67ae85
   274ec:	3c6ef372 	.word	0x3c6ef372
   274f0:	a54ff53a 	.word	0xa54ff53a
   274f4:	510e527f 	.word	0x510e527f
   274f8:	9b05688c 	.word	0x9b05688c
   274fc:	1f83d9ab 	.word	0x1f83d9ab

00027500 <blst_keygen>:
   27500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27504:	b0f3      	sub	sp, #460	; 0x1cc
   27506:	af02      	add	r7, sp, #8
   27508:	6038      	str	r0, [r7, #0]
   2750a:	6139      	str	r1, [r7, #16]
   2750c:	4616      	mov	r6, r2
   2750e:	60fa      	str	r2, [r7, #12]
   27510:	607b      	str	r3, [r7, #4]
   27512:	f8d7 b1e8 	ldr.w	fp, [r7, #488]	; 0x1e8
   27516:	f107 0420 	add.w	r4, r7, #32
   2751a:	4d8c      	ldr	r5, [pc, #560]	; (2774c <blst_keygen+0x24c>)
   2751c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2751e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   27520:	e895 0003 	ldmia.w	r5, {r0, r1}
   27524:	f844 0b04 	str.w	r0, [r4], #4
   27528:	7021      	strb	r1, [r4, #0]
   2752a:	2300      	movs	r3, #0
   2752c:	f8c7 3035 	str.w	r3, [r7, #53]	; 0x35
   27530:	f8c7 3039 	str.w	r3, [r7, #57]	; 0x39
   27534:	63fb      	str	r3, [r7, #60]	; 0x3c
   27536:	2e1f      	cmp	r6, #31
   27538:	d90f      	bls.n	2755a <blst_keygen+0x5a>
   2753a:	687b      	ldr	r3, [r7, #4]
   2753c:	2b00      	cmp	r3, #0
   2753e:	bf08      	it	eq
   27540:	f04f 0b00 	moveq.w	fp, #0
   27544:	f04f 0914 	mov.w	r9, #20
   27548:	2500      	movs	r5, #0
   2754a:	f10b 030a 	add.w	r3, fp, #10
   2754e:	f023 0307 	bic.w	r3, r3, #7
   27552:	60bb      	str	r3, [r7, #8]
   27554:	f507 74c0 	add.w	r4, r7, #384	; 0x180
   27558:	e090      	b.n	2767c <blst_keygen+0x17c>
   2755a:	683a      	ldr	r2, [r7, #0]
   2755c:	4613      	mov	r3, r2
   2755e:	f102 0120 	add.w	r1, r2, #32
   27562:	2200      	movs	r2, #0
   27564:	f843 2b04 	str.w	r2, [r3], #4
   27568:	4299      	cmp	r1, r3
   2756a:	d1fb      	bne.n	27564 <blst_keygen+0x64>
   2756c:	683b      	ldr	r3, [r7, #0]
   2756e:	e0db      	b.n	27728 <blst_keygen+0x228>
   27570:	f806 500b 	strb.w	r5, [r6, fp]
   27574:	eb06 030b 	add.w	r3, r6, fp
   27578:	2230      	movs	r2, #48	; 0x30
   2757a:	705a      	strb	r2, [r3, #1]
   2757c:	2301      	movs	r3, #1
   2757e:	f806 3008 	strb.w	r3, [r6, r8]
   27582:	464a      	mov	r2, r9
   27584:	4631      	mov	r1, r6
   27586:	f107 0040 	add.w	r0, r7, #64	; 0x40
   2758a:	f7ff fcec 	bl	26f66 <sha256_update>
   2758e:	f107 0140 	add.w	r1, r7, #64	; 0x40
   27592:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
   27596:	f7ff fcc2 	bl	26f1e <HMAC_final>
   2759a:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
   2759e:	f507 70a8 	add.w	r0, r7, #336	; 0x150
   275a2:	f7ff fc59 	bl	26e58 <blst_sha256_hcopy>
   275a6:	f816 3008 	ldrb.w	r3, [r6, r8]
   275aa:	3301      	adds	r3, #1
   275ac:	f806 3008 	strb.w	r3, [r6, r8]
   275b0:	462a      	mov	r2, r5
   275b2:	4629      	mov	r1, r5
   275b4:	f107 0040 	add.w	r0, r7, #64	; 0x40
   275b8:	f7ff ff06 	bl	273c8 <HMAC_init>
   275bc:	2220      	movs	r2, #32
   275be:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
   275c2:	f107 0040 	add.w	r0, r7, #64	; 0x40
   275c6:	f7ff fcce 	bl	26f66 <sha256_update>
   275ca:	464a      	mov	r2, r9
   275cc:	4631      	mov	r1, r6
   275ce:	f107 0040 	add.w	r0, r7, #64	; 0x40
   275d2:	f7ff fcc8 	bl	26f66 <sha256_update>
   275d6:	f107 0140 	add.w	r1, r7, #64	; 0x40
   275da:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
   275de:	f7ff fc9e 	bl	26f1e <HMAC_final>
   275e2:	2210      	movs	r2, #16
   275e4:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
   275e8:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   275ec:	f7ff fcae 	bl	26f4c <blst_sha256_bcopy>
   275f0:	46d5      	mov	sp, sl
   275f2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
   275f6:	617b      	str	r3, [r7, #20]
   275f8:	f107 0a40 	add.w	sl, r7, #64	; 0x40
   275fc:	f507 76e0 	add.w	r6, r7, #448	; 0x1c0
   27600:	f843 5b04 	str.w	r5, [r3], #4
   27604:	42b3      	cmp	r3, r6
   27606:	d1fb      	bne.n	27600 <blst_keygen+0x100>
   27608:	f507 72a8 	add.w	r2, r7, #336	; 0x150
   2760c:	4629      	mov	r1, r5
   2760e:	f20a 103f 	addw	r0, sl, #319	; 0x13f
   27612:	1a83      	subs	r3, r0, r2
   27614:	f812 cb01 	ldrb.w	ip, [r2], #1
   27618:	ea4c 2101 	orr.w	r1, ip, r1, lsl #8
   2761c:	f023 0303 	bic.w	r3, r3, #3
   27620:	f507 7ce0 	add.w	ip, r7, #448	; 0x1c0
   27624:	4463      	add	r3, ip
   27626:	f843 1c40 	str.w	r1, [r3, #-64]
   2762a:	42a2      	cmp	r2, r4
   2762c:	d1f1      	bne.n	27612 <blst_keygen+0x112>
   2762e:	f8df 8120 	ldr.w	r8, [pc, #288]	; 27750 <blst_keygen+0x250>
   27632:	f508 7932 	add.w	r9, r8, #712	; 0x2c8
   27636:	2308      	movs	r3, #8
   27638:	9300      	str	r3, [sp, #0]
   2763a:	f04f 33ff 	mov.w	r3, #4294967295
   2763e:	464a      	mov	r2, r9
   27640:	4621      	mov	r1, r4
   27642:	4620      	mov	r0, r4
   27644:	f7f9 fd75 	bl	21132 <redc_mont_n>
   27648:	2308      	movs	r3, #8
   2764a:	9301      	str	r3, [sp, #4]
   2764c:	f04f 33ff 	mov.w	r3, #4294967295
   27650:	9300      	str	r3, [sp, #0]
   27652:	464b      	mov	r3, r9
   27654:	f508 6288 	add.w	r2, r8, #1088	; 0x440
   27658:	4621      	mov	r1, r4
   2765a:	4620      	mov	r0, r4
   2765c:	f7f9 f9b8 	bl	209d0 <mul_mont_n>
   27660:	f50a 70b0 	add.w	r0, sl, #352	; 0x160
   27664:	697b      	ldr	r3, [r7, #20]
   27666:	2200      	movs	r2, #0
   27668:	f853 1b04 	ldr.w	r1, [r3], #4
   2766c:	430a      	orrs	r2, r1
   2766e:	4298      	cmp	r0, r3
   27670:	d1fa      	bne.n	27668 <blst_keygen+0x168>
   27672:	f04f 0920 	mov.w	r9, #32
   27676:	1e53      	subs	r3, r2, #1
   27678:	4393      	bics	r3, r2
   2767a:	d544      	bpl.n	27706 <blst_keygen+0x206>
   2767c:	f107 0040 	add.w	r0, r7, #64	; 0x40
   27680:	f7f8 ffac 	bl	205dc <sha256_init>
   27684:	464a      	mov	r2, r9
   27686:	f107 0120 	add.w	r1, r7, #32
   2768a:	f107 0040 	add.w	r0, r7, #64	; 0x40
   2768e:	f7ff fc6a 	bl	26f66 <sha256_update>
   27692:	f107 0140 	add.w	r1, r7, #64	; 0x40
   27696:	f107 0020 	add.w	r0, r7, #32
   2769a:	f7ff fbfc 	bl	26e96 <sha256_final>
   2769e:	773d      	strb	r5, [r7, #28]
   276a0:	2220      	movs	r2, #32
   276a2:	18b9      	adds	r1, r7, r2
   276a4:	f107 0040 	add.w	r0, r7, #64	; 0x40
   276a8:	f7ff fe8e 	bl	273c8 <HMAC_init>
   276ac:	68fa      	ldr	r2, [r7, #12]
   276ae:	6939      	ldr	r1, [r7, #16]
   276b0:	f107 0040 	add.w	r0, r7, #64	; 0x40
   276b4:	f7ff fc57 	bl	26f66 <sha256_update>
   276b8:	2201      	movs	r2, #1
   276ba:	f107 011c 	add.w	r1, r7, #28
   276be:	f107 0040 	add.w	r0, r7, #64	; 0x40
   276c2:	f7ff fc50 	bl	26f66 <sha256_update>
   276c6:	f107 0140 	add.w	r1, r7, #64	; 0x40
   276ca:	f507 7098 	add.w	r0, r7, #304	; 0x130
   276ce:	f7ff fc26 	bl	26f1e <HMAC_final>
   276d2:	46ea      	mov	sl, sp
   276d4:	f10b 0903 	add.w	r9, fp, #3
   276d8:	f10b 0802 	add.w	r8, fp, #2
   276dc:	68bb      	ldr	r3, [r7, #8]
   276de:	ebad 0d03 	sub.w	sp, sp, r3
   276e2:	ae02      	add	r6, sp, #8
   276e4:	2220      	movs	r2, #32
   276e6:	f507 7198 	add.w	r1, r7, #304	; 0x130
   276ea:	f107 0040 	add.w	r0, r7, #64	; 0x40
   276ee:	f7ff fe6b 	bl	273c8 <HMAC_init>
   276f2:	f1bb 0f00 	cmp.w	fp, #0
   276f6:	f43f af3b 	beq.w	27570 <blst_keygen+0x70>
   276fa:	465a      	mov	r2, fp
   276fc:	6879      	ldr	r1, [r7, #4]
   276fe:	4630      	mov	r0, r6
   27700:	f7ff fc24 	bl	26f4c <blst_sha256_bcopy>
   27704:	e734      	b.n	27570 <blst_keygen+0x70>
   27706:	46d0      	mov	r8, sl
   27708:	f507 73c0 	add.w	r3, r7, #384	; 0x180
   2770c:	683a      	ldr	r2, [r7, #0]
   2770e:	429a      	cmp	r2, r3
   27710:	d003      	beq.n	2771a <blst_keygen+0x21a>
   27712:	6839      	ldr	r1, [r7, #0]
   27714:	3104      	adds	r1, #4
   27716:	697c      	ldr	r4, [r7, #20]
   27718:	e00e      	b.n	27738 <blst_keygen+0x238>
   2771a:	2300      	movs	r3, #0
   2771c:	f848 3b04 	str.w	r3, [r8], #4
   27720:	45b0      	cmp	r8, r6
   27722:	d1fb      	bne.n	2771c <blst_keygen+0x21c>
   27724:	f107 0340 	add.w	r3, r7, #64	; 0x40
   27728:	f507 77e2 	add.w	r7, r7, #452	; 0x1c4
   2772c:	46bd      	mov	sp, r7
   2772e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27732:	3104      	adds	r1, #4
   27734:	42a0      	cmp	r0, r4
   27736:	d0f0      	beq.n	2771a <blst_keygen+0x21a>
   27738:	1f0a      	subs	r2, r1, #4
   2773a:	f854 3b04 	ldr.w	r3, [r4], #4
   2773e:	f802 3b01 	strb.w	r3, [r2], #1
   27742:	0a1b      	lsrs	r3, r3, #8
   27744:	428a      	cmp	r2, r1
   27746:	d1fa      	bne.n	2773e <blst_keygen+0x23e>
   27748:	e7f3      	b.n	27732 <blst_keygen+0x232>
   2774a:	bf00      	nop
   2774c:	00039ba0 	.word	0x00039ba0
   27750:	00039780 	.word	0x00039780

00027754 <mul_by_8_mod_384>:
   27754:	b500      	push	{lr}
   27756:	b083      	sub	sp, #12
   27758:	4613      	mov	r3, r2
   2775a:	220c      	movs	r2, #12
   2775c:	9200      	str	r2, [sp, #0]
   2775e:	2203      	movs	r2, #3
   27760:	f7f9 fc06 	bl	20f70 <lshift_mod_n>
   27764:	b003      	add	sp, #12
   27766:	f85d fb04 	ldr.w	pc, [sp], #4

0002776a <mul_by_3_mod_384x>:
   2776a:	b570      	push	{r4, r5, r6, lr}
   2776c:	4604      	mov	r4, r0
   2776e:	460d      	mov	r5, r1
   27770:	4616      	mov	r6, r2
   27772:	230c      	movs	r3, #12
   27774:	f7f9 fb5c 	bl	20e30 <mul_by_3_mod_n>
   27778:	230c      	movs	r3, #12
   2777a:	4632      	mov	r2, r6
   2777c:	f105 0130 	add.w	r1, r5, #48	; 0x30
   27780:	f104 0030 	add.w	r0, r4, #48	; 0x30
   27784:	f7f9 fb54 	bl	20e30 <mul_by_3_mod_n>
   27788:	bd70      	pop	{r4, r5, r6, pc}

0002778a <mul_by_8_mod_384x>:
   2778a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2778c:	b083      	sub	sp, #12
   2778e:	4605      	mov	r5, r0
   27790:	460e      	mov	r6, r1
   27792:	4614      	mov	r4, r2
   27794:	270c      	movs	r7, #12
   27796:	9700      	str	r7, [sp, #0]
   27798:	4613      	mov	r3, r2
   2779a:	2203      	movs	r2, #3
   2779c:	f7f9 fbe8 	bl	20f70 <lshift_mod_n>
   277a0:	9700      	str	r7, [sp, #0]
   277a2:	4623      	mov	r3, r4
   277a4:	2203      	movs	r2, #3
   277a6:	f106 0130 	add.w	r1, r6, #48	; 0x30
   277aa:	f105 0030 	add.w	r0, r5, #48	; 0x30
   277ae:	f7f9 fbdf 	bl	20f70 <lshift_mod_n>
   277b2:	b003      	add	sp, #12
   277b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000277b6 <mul_by_1_plus_i_mod_384x>:
   277b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   277ba:	b08e      	sub	sp, #56	; 0x38
   277bc:	4604      	mov	r4, r0
   277be:	460d      	mov	r5, r1
   277c0:	4616      	mov	r6, r2
   277c2:	f101 0730 	add.w	r7, r1, #48	; 0x30
   277c6:	f04f 080c 	mov.w	r8, #12
   277ca:	f8cd 8000 	str.w	r8, [sp]
   277ce:	4613      	mov	r3, r2
   277d0:	463a      	mov	r2, r7
   277d2:	a802      	add	r0, sp, #8
   277d4:	f7f9 faa4 	bl	20d20 <add_mod_n>
   277d8:	f8cd 8000 	str.w	r8, [sp]
   277dc:	4633      	mov	r3, r6
   277de:	463a      	mov	r2, r7
   277e0:	4629      	mov	r1, r5
   277e2:	4620      	mov	r0, r4
   277e4:	f7f8 ff46 	bl	20674 <sub_mod_n>
   277e8:	aa02      	add	r2, sp, #8
   277ea:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   277ee:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   277f2:	f852 1b04 	ldr.w	r1, [r2], #4
   277f6:	f843 1f04 	str.w	r1, [r3, #4]!
   277fa:	4283      	cmp	r3, r0
   277fc:	d1f9      	bne.n	277f2 <mul_by_1_plus_i_mod_384x+0x3c>
   277fe:	b00e      	add	sp, #56	; 0x38
   27800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027804 <add_mod_384x>:
   27804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27808:	b082      	sub	sp, #8
   2780a:	4604      	mov	r4, r0
   2780c:	460d      	mov	r5, r1
   2780e:	4616      	mov	r6, r2
   27810:	461f      	mov	r7, r3
   27812:	f04f 080c 	mov.w	r8, #12
   27816:	f8cd 8000 	str.w	r8, [sp]
   2781a:	f7f9 fa81 	bl	20d20 <add_mod_n>
   2781e:	f8cd 8000 	str.w	r8, [sp]
   27822:	463b      	mov	r3, r7
   27824:	f106 0230 	add.w	r2, r6, #48	; 0x30
   27828:	f105 0130 	add.w	r1, r5, #48	; 0x30
   2782c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   27830:	f7f9 fa76 	bl	20d20 <add_mod_n>
   27834:	b002      	add	sp, #8
   27836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002783a <sub_mod_384x>:
   2783a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2783e:	b082      	sub	sp, #8
   27840:	4604      	mov	r4, r0
   27842:	460d      	mov	r5, r1
   27844:	4616      	mov	r6, r2
   27846:	461f      	mov	r7, r3
   27848:	f04f 080c 	mov.w	r8, #12
   2784c:	f8cd 8000 	str.w	r8, [sp]
   27850:	f7f8 ff10 	bl	20674 <sub_mod_n>
   27854:	f8cd 8000 	str.w	r8, [sp]
   27858:	463b      	mov	r3, r7
   2785a:	f106 0230 	add.w	r2, r6, #48	; 0x30
   2785e:	f105 0130 	add.w	r1, r5, #48	; 0x30
   27862:	f104 0030 	add.w	r0, r4, #48	; 0x30
   27866:	f7f8 ff05 	bl	20674 <sub_mod_n>
   2786a:	b002      	add	sp, #8
   2786c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027870 <sqr_mont_384x>:
   27870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27874:	b09a      	sub	sp, #104	; 0x68
   27876:	4607      	mov	r7, r0
   27878:	460e      	mov	r6, r1
   2787a:	4614      	mov	r4, r2
   2787c:	4698      	mov	r8, r3
   2787e:	f101 0a30 	add.w	sl, r1, #48	; 0x30
   27882:	250c      	movs	r5, #12
   27884:	9500      	str	r5, [sp, #0]
   27886:	4613      	mov	r3, r2
   27888:	4652      	mov	r2, sl
   2788a:	a80e      	add	r0, sp, #56	; 0x38
   2788c:	f7f9 fa48 	bl	20d20 <add_mod_n>
   27890:	9500      	str	r5, [sp, #0]
   27892:	4623      	mov	r3, r4
   27894:	4652      	mov	r2, sl
   27896:	4631      	mov	r1, r6
   27898:	a802      	add	r0, sp, #8
   2789a:	f7f8 feeb 	bl	20674 <sub_mod_n>
   2789e:	f107 0930 	add.w	r9, r7, #48	; 0x30
   278a2:	9501      	str	r5, [sp, #4]
   278a4:	f8cd 8000 	str.w	r8, [sp]
   278a8:	4623      	mov	r3, r4
   278aa:	4652      	mov	r2, sl
   278ac:	4631      	mov	r1, r6
   278ae:	4648      	mov	r0, r9
   278b0:	f7f9 f88e 	bl	209d0 <mul_mont_n>
   278b4:	9500      	str	r5, [sp, #0]
   278b6:	4623      	mov	r3, r4
   278b8:	464a      	mov	r2, r9
   278ba:	4649      	mov	r1, r9
   278bc:	4648      	mov	r0, r9
   278be:	f7f9 fa2f 	bl	20d20 <add_mod_n>
   278c2:	9501      	str	r5, [sp, #4]
   278c4:	f8cd 8000 	str.w	r8, [sp]
   278c8:	4623      	mov	r3, r4
   278ca:	aa02      	add	r2, sp, #8
   278cc:	a90e      	add	r1, sp, #56	; 0x38
   278ce:	4638      	mov	r0, r7
   278d0:	f7f9 f87e 	bl	209d0 <mul_mont_n>
   278d4:	b01a      	add	sp, #104	; 0x68
   278d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000278da <POINTonE2_from_Jacobian>:
   278da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   278de:	b0b3      	sub	sp, #204	; 0xcc
   278e0:	4605      	mov	r5, r0
   278e2:	4688      	mov	r8, r1
   278e4:	31c0      	adds	r1, #192	; 0xc0
   278e6:	f108 04bc 	add.w	r4, r8, #188	; 0xbc
   278ea:	f508 708e 	add.w	r0, r8, #284	; 0x11c
   278ee:	4623      	mov	r3, r4
   278f0:	2600      	movs	r6, #0
   278f2:	f853 2f04 	ldr.w	r2, [r3, #4]!
   278f6:	4316      	orrs	r6, r2
   278f8:	4283      	cmp	r3, r0
   278fa:	d1fa      	bne.n	278f2 <POINTonE2_from_Jacobian+0x18>
   278fc:	a81a      	add	r0, sp, #104	; 0x68
   278fe:	f7fe f84f 	bl	259a0 <reciprocal_fp2>
   27902:	f8df 9074 	ldr.w	r9, [pc, #116]	; 27978 <POINTonE2_from_Jacobian+0x9e>
   27906:	4f1d      	ldr	r7, [pc, #116]	; (2797c <POINTonE2_from_Jacobian+0xa2>)
   27908:	464b      	mov	r3, r9
   2790a:	463a      	mov	r2, r7
   2790c:	a91a      	add	r1, sp, #104	; 0x68
   2790e:	a802      	add	r0, sp, #8
   27910:	f7ff ffae 	bl	27870 <sqr_mont_384x>
   27914:	f8cd 9000 	str.w	r9, [sp]
   27918:	463b      	mov	r3, r7
   2791a:	aa02      	add	r2, sp, #8
   2791c:	4641      	mov	r1, r8
   2791e:	4628      	mov	r0, r5
   27920:	f7fc fd18 	bl	24354 <mul_mont_384x>
   27924:	f8cd 9000 	str.w	r9, [sp]
   27928:	463b      	mov	r3, r7
   2792a:	aa1a      	add	r2, sp, #104	; 0x68
   2792c:	a902      	add	r1, sp, #8
   2792e:	4608      	mov	r0, r1
   27930:	f7fc fd10 	bl	24354 <mul_mont_384x>
   27934:	f8cd 9000 	str.w	r9, [sp]
   27938:	463b      	mov	r3, r7
   2793a:	aa02      	add	r2, sp, #8
   2793c:	f108 0160 	add.w	r1, r8, #96	; 0x60
   27940:	f105 0060 	add.w	r0, r5, #96	; 0x60
   27944:	f7fc fd06 	bl	24354 <mul_mont_384x>
   27948:	1e73      	subs	r3, r6, #1
   2794a:	ea23 0606 	bic.w	r6, r3, r6
   2794e:	17f6      	asrs	r6, r6, #31
   27950:	f507 6164 	add.w	r1, r7, #3648	; 0xe40
   27954:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   27958:	f507 656a 	add.w	r5, r7, #3744	; 0xea0
   2795c:	f851 3b04 	ldr.w	r3, [r1], #4
   27960:	f854 2f04 	ldr.w	r2, [r4, #4]!
   27964:	405a      	eors	r2, r3
   27966:	4032      	ands	r2, r6
   27968:	405a      	eors	r2, r3
   2796a:	f840 2f04 	str.w	r2, [r0, #4]!
   2796e:	42a9      	cmp	r1, r5
   27970:	d1f4      	bne.n	2795c <POINTonE2_from_Jacobian+0x82>
   27972:	b033      	add	sp, #204	; 0xcc
   27974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   27978:	fffcfffd 	.word	0xfffcfffd
   2797c:	00038688 	.word	0x00038688

00027980 <blst_p2_from_jacobian>:
   27980:	b508      	push	{r3, lr}
   27982:	f7ff ffaa 	bl	278da <POINTonE2_from_Jacobian>
   27986:	bd08      	pop	{r3, pc}

00027988 <POINTonE2_to_affine>:
   27988:	b530      	push	{r4, r5, lr}
   2798a:	b0c9      	sub	sp, #292	; 0x124
   2798c:	4604      	mov	r4, r0
   2798e:	f101 0cbc 	add.w	ip, r1, #188	; 0xbc
   27992:	4b10      	ldr	r3, [pc, #64]	; (279d4 <POINTonE2_to_affine+0x4c>)
   27994:	f103 0290 	add.w	r2, r3, #144	; 0x90
   27998:	f103 0ef0 	add.w	lr, r3, #240	; 0xf0
   2799c:	2000      	movs	r0, #0
   2799e:	f852 3b04 	ldr.w	r3, [r2], #4
   279a2:	f85c 5f04 	ldr.w	r5, [ip, #4]!
   279a6:	406b      	eors	r3, r5
   279a8:	4318      	orrs	r0, r3
   279aa:	4572      	cmp	r2, lr
   279ac:	d1f7      	bne.n	2799e <POINTonE2_to_affine+0x16>
   279ae:	1e43      	subs	r3, r0, #1
   279b0:	4383      	bics	r3, r0
   279b2:	d50a      	bpl.n	279ca <POINTonE2_to_affine+0x42>
   279b4:	1f0b      	subs	r3, r1, #4
   279b6:	1f20      	subs	r0, r4, #4
   279b8:	31bc      	adds	r1, #188	; 0xbc
   279ba:	f853 2f04 	ldr.w	r2, [r3, #4]!
   279be:	f840 2f04 	str.w	r2, [r0, #4]!
   279c2:	428b      	cmp	r3, r1
   279c4:	d1f9      	bne.n	279ba <POINTonE2_to_affine+0x32>
   279c6:	b049      	add	sp, #292	; 0x124
   279c8:	bd30      	pop	{r4, r5, pc}
   279ca:	4668      	mov	r0, sp
   279cc:	f7ff ff85 	bl	278da <POINTonE2_from_Jacobian>
   279d0:	4669      	mov	r1, sp
   279d2:	e7ef      	b.n	279b4 <POINTonE2_to_affine+0x2c>
   279d4:	00038688 	.word	0x00038688

000279d8 <blst_p2_to_affine>:
   279d8:	b508      	push	{r3, lr}
   279da:	f7ff ffd5 	bl	27988 <POINTonE2_to_affine>
   279de:	bd08      	pop	{r3, pc}

000279e0 <POINTonE2_Serialize_BE>:
   279e0:	b570      	push	{r4, r5, r6, lr}
   279e2:	b0c8      	sub	sp, #288	; 0x120
   279e4:	4606      	mov	r6, r0
   279e6:	f101 0ebc 	add.w	lr, r1, #188	; 0xbc
   279ea:	4d0f      	ldr	r5, [pc, #60]	; (27a28 <POINTonE2_Serialize_BE+0x48>)
   279ec:	f105 0290 	add.w	r2, r5, #144	; 0x90
   279f0:	35f0      	adds	r5, #240	; 0xf0
   279f2:	f04f 0c00 	mov.w	ip, #0
   279f6:	f852 3b04 	ldr.w	r3, [r2], #4
   279fa:	f85e 4f04 	ldr.w	r4, [lr, #4]!
   279fe:	4063      	eors	r3, r4
   27a00:	ea4c 0c03 	orr.w	ip, ip, r3
   27a04:	42aa      	cmp	r2, r5
   27a06:	d1f6      	bne.n	279f6 <POINTonE2_Serialize_BE+0x16>
   27a08:	f10c 33ff 	add.w	r3, ip, #4294967295
   27a0c:	ea33 030c 	bics.w	r3, r3, ip
   27a10:	d504      	bpl.n	27a1c <POINTonE2_Serialize_BE+0x3c>
   27a12:	4630      	mov	r0, r6
   27a14:	f7f9 ff18 	bl	21848 <POINTonE2_affine_Serialize_BE>
   27a18:	b048      	add	sp, #288	; 0x120
   27a1a:	bd70      	pop	{r4, r5, r6, pc}
   27a1c:	4668      	mov	r0, sp
   27a1e:	f7ff ff5c 	bl	278da <POINTonE2_from_Jacobian>
   27a22:	4669      	mov	r1, sp
   27a24:	e7f5      	b.n	27a12 <POINTonE2_Serialize_BE+0x32>
   27a26:	bf00      	nop
   27a28:	00038688 	.word	0x00038688

00027a2c <blst_p2_serialize>:
   27a2c:	b510      	push	{r4, lr}
   27a2e:	f101 03bc 	add.w	r3, r1, #188	; 0xbc
   27a32:	f501 7c8e 	add.w	ip, r1, #284	; 0x11c
   27a36:	2200      	movs	r2, #0
   27a38:	f853 4f04 	ldr.w	r4, [r3, #4]!
   27a3c:	4322      	orrs	r2, r4
   27a3e:	4563      	cmp	r3, ip
   27a40:	d1fa      	bne.n	27a38 <blst_p2_serialize+0xc>
   27a42:	1e53      	subs	r3, r2, #1
   27a44:	4393      	bics	r3, r2
   27a46:	d50a      	bpl.n	27a5e <blst_p2_serialize+0x32>
   27a48:	1e43      	subs	r3, r0, #1
   27a4a:	f100 01bf 	add.w	r1, r0, #191	; 0xbf
   27a4e:	2200      	movs	r2, #0
   27a50:	f803 2f01 	strb.w	r2, [r3, #1]!
   27a54:	428b      	cmp	r3, r1
   27a56:	d1fb      	bne.n	27a50 <blst_p2_serialize+0x24>
   27a58:	2340      	movs	r3, #64	; 0x40
   27a5a:	7003      	strb	r3, [r0, #0]
   27a5c:	bd10      	pop	{r4, pc}
   27a5e:	f7ff ffbf 	bl	279e0 <POINTonE2_Serialize_BE>
   27a62:	e7fb      	b.n	27a5c <blst_p2_serialize+0x30>

00027a64 <POINTonE2_Compress_BE>:
   27a64:	b570      	push	{r4, r5, r6, lr}
   27a66:	b0c8      	sub	sp, #288	; 0x120
   27a68:	4606      	mov	r6, r0
   27a6a:	f101 0ebc 	add.w	lr, r1, #188	; 0xbc
   27a6e:	4d0f      	ldr	r5, [pc, #60]	; (27aac <POINTonE2_Compress_BE+0x48>)
   27a70:	f105 0290 	add.w	r2, r5, #144	; 0x90
   27a74:	35f0      	adds	r5, #240	; 0xf0
   27a76:	f04f 0c00 	mov.w	ip, #0
   27a7a:	f852 3b04 	ldr.w	r3, [r2], #4
   27a7e:	f85e 4f04 	ldr.w	r4, [lr, #4]!
   27a82:	4063      	eors	r3, r4
   27a84:	ea4c 0c03 	orr.w	ip, ip, r3
   27a88:	42aa      	cmp	r2, r5
   27a8a:	d1f6      	bne.n	27a7a <POINTonE2_Compress_BE+0x16>
   27a8c:	f10c 33ff 	add.w	r3, ip, #4294967295
   27a90:	ea33 030c 	bics.w	r3, r3, ip
   27a94:	d504      	bpl.n	27aa0 <POINTonE2_Compress_BE+0x3c>
   27a96:	4630      	mov	r0, r6
   27a98:	f7f9 fe4e 	bl	21738 <POINTonE2_affine_Compress_BE>
   27a9c:	b048      	add	sp, #288	; 0x120
   27a9e:	bd70      	pop	{r4, r5, r6, pc}
   27aa0:	4668      	mov	r0, sp
   27aa2:	f7ff ff1a 	bl	278da <POINTonE2_from_Jacobian>
   27aa6:	4669      	mov	r1, sp
   27aa8:	e7f5      	b.n	27a96 <POINTonE2_Compress_BE+0x32>
   27aaa:	bf00      	nop
   27aac:	00038688 	.word	0x00038688

00027ab0 <blst_p2_compress>:
   27ab0:	b538      	push	{r3, r4, r5, lr}
   27ab2:	4605      	mov	r5, r0
   27ab4:	f101 03bc 	add.w	r3, r1, #188	; 0xbc
   27ab8:	f501 7c8e 	add.w	ip, r1, #284	; 0x11c
   27abc:	2200      	movs	r2, #0
   27abe:	f853 4f04 	ldr.w	r4, [r3, #4]!
   27ac2:	4322      	orrs	r2, r4
   27ac4:	4563      	cmp	r3, ip
   27ac6:	d1fa      	bne.n	27abe <blst_p2_compress+0xe>
   27ac8:	1e53      	subs	r3, r2, #1
   27aca:	4393      	bics	r3, r2
   27acc:	d50a      	bpl.n	27ae4 <blst_p2_compress+0x34>
   27ace:	1e6b      	subs	r3, r5, #1
   27ad0:	f105 015f 	add.w	r1, r5, #95	; 0x5f
   27ad4:	2200      	movs	r2, #0
   27ad6:	f803 2f01 	strb.w	r2, [r3, #1]!
   27ada:	428b      	cmp	r3, r1
   27adc:	d1fb      	bne.n	27ad6 <blst_p2_compress+0x26>
   27ade:	23c0      	movs	r3, #192	; 0xc0
   27ae0:	702b      	strb	r3, [r5, #0]
   27ae2:	bd38      	pop	{r3, r4, r5, pc}
   27ae4:	4628      	mov	r0, r5
   27ae6:	f7ff ffbd 	bl	27a64 <POINTonE2_Compress_BE>
   27aea:	0103      	lsls	r3, r0, #4
   27aec:	f003 0320 	and.w	r3, r3, #32
   27af0:	782a      	ldrb	r2, [r5, #0]
   27af2:	4313      	orrs	r3, r2
   27af4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   27af8:	702b      	strb	r3, [r5, #0]
   27afa:	e7f2      	b.n	27ae2 <blst_p2_compress+0x32>

00027afc <POINTonE2_affine_on_curve>:
   27afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27b00:	b0b2      	sub	sp, #200	; 0xc8
   27b02:	4604      	mov	r4, r0
   27b04:	4e29      	ldr	r6, [pc, #164]	; (27bac <POINTonE2_affine_on_curve+0xb0>)
   27b06:	4d2a      	ldr	r5, [pc, #168]	; (27bb0 <POINTonE2_affine_on_curve+0xb4>)
   27b08:	4633      	mov	r3, r6
   27b0a:	462a      	mov	r2, r5
   27b0c:	4601      	mov	r1, r0
   27b0e:	a81a      	add	r0, sp, #104	; 0x68
   27b10:	f7ff feae 	bl	27870 <sqr_mont_384x>
   27b14:	9600      	str	r6, [sp, #0]
   27b16:	462b      	mov	r3, r5
   27b18:	4622      	mov	r2, r4
   27b1a:	a91a      	add	r1, sp, #104	; 0x68
   27b1c:	4608      	mov	r0, r1
   27b1e:	f7fc fc19 	bl	24354 <mul_mont_384x>
   27b22:	4f24      	ldr	r7, [pc, #144]	; (27bb4 <POINTonE2_affine_on_curve+0xb8>)
   27b24:	f04f 080c 	mov.w	r8, #12
   27b28:	f8cd 8000 	str.w	r8, [sp]
   27b2c:	462b      	mov	r3, r5
   27b2e:	f507 628c 	add.w	r2, r7, #1120	; 0x460
   27b32:	a91a      	add	r1, sp, #104	; 0x68
   27b34:	4608      	mov	r0, r1
   27b36:	f7f9 f8f3 	bl	20d20 <add_mod_n>
   27b3a:	f8cd 8000 	str.w	r8, [sp]
   27b3e:	462b      	mov	r3, r5
   27b40:	f507 6292 	add.w	r2, r7, #1168	; 0x490
   27b44:	a926      	add	r1, sp, #152	; 0x98
   27b46:	4608      	mov	r0, r1
   27b48:	f7f9 f8ea 	bl	20d20 <add_mod_n>
   27b4c:	4633      	mov	r3, r6
   27b4e:	462a      	mov	r2, r5
   27b50:	f104 0160 	add.w	r1, r4, #96	; 0x60
   27b54:	a802      	add	r0, sp, #8
   27b56:	f7ff fe8b 	bl	27870 <sqr_mont_384x>
   27b5a:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
   27b5e:	aa01      	add	r2, sp, #4
   27b60:	a831      	add	r0, sp, #196	; 0xc4
   27b62:	f04f 0e00 	mov.w	lr, #0
   27b66:	f85c 3f04 	ldr.w	r3, [ip, #4]!
   27b6a:	f852 1f04 	ldr.w	r1, [r2, #4]!
   27b6e:	404b      	eors	r3, r1
   27b70:	ea4e 0e03 	orr.w	lr, lr, r3
   27b74:	4584      	cmp	ip, r0
   27b76:	d1f6      	bne.n	27b66 <POINTonE2_affine_on_curve+0x6a>
   27b78:	f10e 30ff 	add.w	r0, lr, #4294967295
   27b7c:	ea20 0e0e 	bic.w	lr, r0, lr
   27b80:	ea4f 7ede 	mov.w	lr, lr, lsr #31
   27b84:	1f23      	subs	r3, r4, #4
   27b86:	f104 01bc 	add.w	r1, r4, #188	; 0xbc
   27b8a:	f04f 0c00 	mov.w	ip, #0
   27b8e:	f853 2f04 	ldr.w	r2, [r3, #4]!
   27b92:	ea4c 0c02 	orr.w	ip, ip, r2
   27b96:	428b      	cmp	r3, r1
   27b98:	d1f9      	bne.n	27b8e <POINTonE2_affine_on_curve+0x92>
   27b9a:	f10c 30ff 	add.w	r0, ip, #4294967295
   27b9e:	ea20 000c 	bic.w	r0, r0, ip
   27ba2:	ea4e 70d0 	orr.w	r0, lr, r0, lsr #31
   27ba6:	b032      	add	sp, #200	; 0xc8
   27ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27bac:	fffcfffd 	.word	0xfffcfffd
   27bb0:	00038688 	.word	0x00038688
   27bb4:	00039780 	.word	0x00039780

00027bb8 <blst_p2_affine_on_curve>:
   27bb8:	b508      	push	{r3, lr}
   27bba:	f7ff ff9f 	bl	27afc <POINTonE2_affine_on_curve>
   27bbe:	bd08      	pop	{r3, pc}

00027bc0 <POINTonE2_Deserialize_BE>:
   27bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27bc4:	b0be      	sub	sp, #248	; 0xf8
   27bc6:	4604      	mov	r4, r0
   27bc8:	f101 0230 	add.w	r2, r1, #48	; 0x30
   27bcc:	4608      	mov	r0, r1
   27bce:	2500      	movs	r5, #0
   27bd0:	f101 072f 	add.w	r7, r1, #47	; 0x2f
   27bd4:	1a3b      	subs	r3, r7, r0
   27bd6:	f810 6b01 	ldrb.w	r6, [r0], #1
   27bda:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
   27bde:	f023 0303 	bic.w	r3, r3, #3
   27be2:	ae3e      	add	r6, sp, #248	; 0xf8
   27be4:	4433      	add	r3, r6
   27be6:	f843 5c90 	str.w	r5, [r3, #-144]
   27bea:	4290      	cmp	r0, r2
   27bec:	d1f2      	bne.n	27bd4 <POINTonE2_Deserialize_BE+0x14>
   27bee:	f101 0060 	add.w	r0, r1, #96	; 0x60
   27bf2:	2500      	movs	r5, #0
   27bf4:	f101 075f 	add.w	r7, r1, #95	; 0x5f
   27bf8:	1abb      	subs	r3, r7, r2
   27bfa:	f812 6b01 	ldrb.w	r6, [r2], #1
   27bfe:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
   27c02:	f023 0303 	bic.w	r3, r3, #3
   27c06:	ae3e      	add	r6, sp, #248	; 0xf8
   27c08:	4433      	add	r3, r6
   27c0a:	f843 5cc0 	str.w	r5, [r3, #-192]
   27c0e:	4282      	cmp	r2, r0
   27c10:	d1f2      	bne.n	27bf8 <POINTonE2_Deserialize_BE+0x38>
   27c12:	f101 0290 	add.w	r2, r1, #144	; 0x90
   27c16:	2500      	movs	r5, #0
   27c18:	f101 078f 	add.w	r7, r1, #143	; 0x8f
   27c1c:	1a3b      	subs	r3, r7, r0
   27c1e:	f810 6b01 	ldrb.w	r6, [r0], #1
   27c22:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
   27c26:	f023 0303 	bic.w	r3, r3, #3
   27c2a:	ae3e      	add	r6, sp, #248	; 0xf8
   27c2c:	4433      	add	r3, r6
   27c2e:	f843 5c30 	str.w	r5, [r3, #-48]
   27c32:	4290      	cmp	r0, r2
   27c34:	d1f2      	bne.n	27c1c <POINTonE2_Deserialize_BE+0x5c>
   27c36:	f101 06c0 	add.w	r6, r1, #192	; 0xc0
   27c3a:	2000      	movs	r0, #0
   27c3c:	31bf      	adds	r1, #191	; 0xbf
   27c3e:	1a8b      	subs	r3, r1, r2
   27c40:	f812 5b01 	ldrb.w	r5, [r2], #1
   27c44:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
   27c48:	f023 0303 	bic.w	r3, r3, #3
   27c4c:	ad3e      	add	r5, sp, #248	; 0xf8
   27c4e:	442b      	add	r3, r5
   27c50:	f843 0c60 	str.w	r0, [r3, #-96]
   27c54:	42b2      	cmp	r2, r6
   27c56:	d1f2      	bne.n	27c3e <POINTonE2_Deserialize_BE+0x7e>
   27c58:	9b25      	ldr	r3, [sp, #148]	; 0x94
   27c5a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   27c5e:	9325      	str	r3, [sp, #148]	; 0x94
   27c60:	4b55      	ldr	r3, [pc, #340]	; (27db8 <POINTonE2_Deserialize_BE+0x1f8>)
   27c62:	220c      	movs	r2, #12
   27c64:	9200      	str	r2, [sp, #0]
   27c66:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
   27c6a:	a91a      	add	r1, sp, #104	; 0x68
   27c6c:	a802      	add	r0, sp, #8
   27c6e:	f7f9 f857 	bl	20d20 <add_mod_n>
   27c72:	ae02      	add	r6, sp, #8
   27c74:	a819      	add	r0, sp, #100	; 0x64
   27c76:	ad0e      	add	r5, sp, #56	; 0x38
   27c78:	4632      	mov	r2, r6
   27c7a:	2100      	movs	r1, #0
   27c7c:	f852 3b04 	ldr.w	r3, [r2], #4
   27c80:	f850 7f04 	ldr.w	r7, [r0, #4]!
   27c84:	407b      	eors	r3, r7
   27c86:	4319      	orrs	r1, r3
   27c88:	42aa      	cmp	r2, r5
   27c8a:	d1f7      	bne.n	27c7c <POINTonE2_Deserialize_BE+0xbc>
   27c8c:	1e4b      	subs	r3, r1, #1
   27c8e:	438b      	bics	r3, r1
   27c90:	d403      	bmi.n	27c9a <POINTonE2_Deserialize_BE+0xda>
   27c92:	2001      	movs	r0, #1
   27c94:	b03e      	add	sp, #248	; 0xf8
   27c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27c9a:	4b47      	ldr	r3, [pc, #284]	; (27db8 <POINTonE2_Deserialize_BE+0x1f8>)
   27c9c:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   27ca0:	220c      	movs	r2, #12
   27ca2:	9200      	str	r2, [sp, #0]
   27ca4:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
   27ca8:	4641      	mov	r1, r8
   27caa:	a802      	add	r0, sp, #8
   27cac:	f7f9 f838 	bl	20d20 <add_mod_n>
   27cb0:	46c2      	mov	sl, r8
   27cb2:	4641      	mov	r1, r8
   27cb4:	4632      	mov	r2, r6
   27cb6:	2000      	movs	r0, #0
   27cb8:	f852 3b04 	ldr.w	r3, [r2], #4
   27cbc:	f851 7b04 	ldr.w	r7, [r1], #4
   27cc0:	407b      	eors	r3, r7
   27cc2:	4318      	orrs	r0, r3
   27cc4:	42aa      	cmp	r2, r5
   27cc6:	d1f7      	bne.n	27cb8 <POINTonE2_Deserialize_BE+0xf8>
   27cc8:	1e43      	subs	r3, r0, #1
   27cca:	4383      	bics	r3, r0
   27ccc:	d401      	bmi.n	27cd2 <POINTonE2_Deserialize_BE+0x112>
   27cce:	2001      	movs	r0, #1
   27cd0:	e7e0      	b.n	27c94 <POINTonE2_Deserialize_BE+0xd4>
   27cd2:	4b39      	ldr	r3, [pc, #228]	; (27db8 <POINTonE2_Deserialize_BE+0x1f8>)
   27cd4:	220c      	movs	r2, #12
   27cd6:	9200      	str	r2, [sp, #0]
   27cd8:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
   27cdc:	a932      	add	r1, sp, #200	; 0xc8
   27cde:	a802      	add	r0, sp, #8
   27ce0:	f7f9 f81e 	bl	20d20 <add_mod_n>
   27ce4:	a831      	add	r0, sp, #196	; 0xc4
   27ce6:	4632      	mov	r2, r6
   27ce8:	2100      	movs	r1, #0
   27cea:	f852 3b04 	ldr.w	r3, [r2], #4
   27cee:	f850 7f04 	ldr.w	r7, [r0, #4]!
   27cf2:	407b      	eors	r3, r7
   27cf4:	4319      	orrs	r1, r3
   27cf6:	42aa      	cmp	r2, r5
   27cf8:	d1f7      	bne.n	27cea <POINTonE2_Deserialize_BE+0x12a>
   27cfa:	1e4b      	subs	r3, r1, #1
   27cfc:	438b      	bics	r3, r1
   27cfe:	d401      	bmi.n	27d04 <POINTonE2_Deserialize_BE+0x144>
   27d00:	2001      	movs	r0, #1
   27d02:	e7c7      	b.n	27c94 <POINTonE2_Deserialize_BE+0xd4>
   27d04:	4b2c      	ldr	r3, [pc, #176]	; (27db8 <POINTonE2_Deserialize_BE+0x1f8>)
   27d06:	220c      	movs	r2, #12
   27d08:	9200      	str	r2, [sp, #0]
   27d0a:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
   27d0e:	a926      	add	r1, sp, #152	; 0x98
   27d10:	a802      	add	r0, sp, #8
   27d12:	f7f9 f805 	bl	20d20 <add_mod_n>
   27d16:	a925      	add	r1, sp, #148	; 0x94
   27d18:	2200      	movs	r2, #0
   27d1a:	f856 3b04 	ldr.w	r3, [r6], #4
   27d1e:	f851 0f04 	ldr.w	r0, [r1, #4]!
   27d22:	4043      	eors	r3, r0
   27d24:	431a      	orrs	r2, r3
   27d26:	42ae      	cmp	r6, r5
   27d28:	d1f7      	bne.n	27d1a <POINTonE2_Deserialize_BE+0x15a>
   27d2a:	1e53      	subs	r3, r2, #1
   27d2c:	4393      	bics	r3, r2
   27d2e:	d401      	bmi.n	27d34 <POINTonE2_Deserialize_BE+0x174>
   27d30:	2001      	movs	r0, #1
   27d32:	e7af      	b.n	27c94 <POINTonE2_Deserialize_BE+0xd4>
   27d34:	4d20      	ldr	r5, [pc, #128]	; (27db8 <POINTonE2_Deserialize_BE+0x1f8>)
   27d36:	f505 7634 	add.w	r6, r5, #720	; 0x2d0
   27d3a:	f04f 090c 	mov.w	r9, #12
   27d3e:	f8cd 9004 	str.w	r9, [sp, #4]
   27d42:	f8df 8078 	ldr.w	r8, [pc, #120]	; 27dbc <POINTonE2_Deserialize_BE+0x1fc>
   27d46:	f8cd 8000 	str.w	r8, [sp]
   27d4a:	462b      	mov	r3, r5
   27d4c:	4632      	mov	r2, r6
   27d4e:	a90e      	add	r1, sp, #56	; 0x38
   27d50:	4608      	mov	r0, r1
   27d52:	f7f8 fe3d 	bl	209d0 <mul_mont_n>
   27d56:	f8cd 9004 	str.w	r9, [sp, #4]
   27d5a:	f8cd 8000 	str.w	r8, [sp]
   27d5e:	462b      	mov	r3, r5
   27d60:	4632      	mov	r2, r6
   27d62:	a91a      	add	r1, sp, #104	; 0x68
   27d64:	4608      	mov	r0, r1
   27d66:	f7f8 fe33 	bl	209d0 <mul_mont_n>
   27d6a:	f8cd 9004 	str.w	r9, [sp, #4]
   27d6e:	f8cd 8000 	str.w	r8, [sp]
   27d72:	462b      	mov	r3, r5
   27d74:	4632      	mov	r2, r6
   27d76:	a926      	add	r1, sp, #152	; 0x98
   27d78:	4608      	mov	r0, r1
   27d7a:	f7f8 fe29 	bl	209d0 <mul_mont_n>
   27d7e:	f8cd 9004 	str.w	r9, [sp, #4]
   27d82:	f8cd 8000 	str.w	r8, [sp]
   27d86:	462b      	mov	r3, r5
   27d88:	4632      	mov	r2, r6
   27d8a:	a932      	add	r1, sp, #200	; 0xc8
   27d8c:	4608      	mov	r0, r1
   27d8e:	f7f8 fe1f 	bl	209d0 <mul_mont_n>
   27d92:	a80e      	add	r0, sp, #56	; 0x38
   27d94:	f7ff feb2 	bl	27afc <POINTonE2_affine_on_curve>
   27d98:	b158      	cbz	r0, 27db2 <POINTonE2_Deserialize_BE+0x1f2>
   27d9a:	ab0d      	add	r3, sp, #52	; 0x34
   27d9c:	3c04      	subs	r4, #4
   27d9e:	f10a 07bc 	add.w	r7, sl, #188	; 0xbc
   27da2:	f853 2f04 	ldr.w	r2, [r3, #4]!
   27da6:	f844 2f04 	str.w	r2, [r4, #4]!
   27daa:	429f      	cmp	r7, r3
   27dac:	d1f9      	bne.n	27da2 <POINTonE2_Deserialize_BE+0x1e2>
   27dae:	2000      	movs	r0, #0
   27db0:	e770      	b.n	27c94 <POINTonE2_Deserialize_BE+0xd4>
   27db2:	2002      	movs	r0, #2
   27db4:	e76e      	b.n	27c94 <POINTonE2_Deserialize_BE+0xd4>
   27db6:	bf00      	nop
   27db8:	00038688 	.word	0x00038688
   27dbc:	fffcfffd 	.word	0xfffcfffd

00027dc0 <POINTonE2_on_curve>:
   27dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27dc4:	b0ca      	sub	sp, #296	; 0x128
   27dc6:	4606      	mov	r6, r0
   27dc8:	f100 07c0 	add.w	r7, r0, #192	; 0xc0
   27dcc:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
   27dd0:	f500 758e 	add.w	r5, r0, #284	; 0x11c
   27dd4:	f04f 0c00 	mov.w	ip, #0
   27dd8:	f853 4f04 	ldr.w	r4, [r3, #4]!
   27ddc:	ea4c 0c04 	orr.w	ip, ip, r4
   27de0:	42ab      	cmp	r3, r5
   27de2:	d1f9      	bne.n	27dd8 <POINTonE2_on_curve+0x18>
   27de4:	f10c 35ff 	add.w	r5, ip, #4294967295
   27de8:	ea25 0c0c 	bic.w	ip, r5, ip
   27dec:	ea4f 75dc 	mov.w	r5, ip, lsr #31
   27df0:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 27ec8 <POINTonE2_on_curve+0x108>
   27df4:	4c35      	ldr	r4, [pc, #212]	; (27ecc <POINTonE2_on_curve+0x10c>)
   27df6:	4643      	mov	r3, r8
   27df8:	4622      	mov	r2, r4
   27dfa:	4639      	mov	r1, r7
   27dfc:	a802      	add	r0, sp, #8
   27dfe:	f7ff fd37 	bl	27870 <sqr_mont_384x>
   27e02:	f8cd 8000 	str.w	r8, [sp]
   27e06:	4623      	mov	r3, r4
   27e08:	463a      	mov	r2, r7
   27e0a:	a902      	add	r1, sp, #8
   27e0c:	4608      	mov	r0, r1
   27e0e:	f7fc faa1 	bl	24354 <mul_mont_384x>
   27e12:	4643      	mov	r3, r8
   27e14:	4622      	mov	r2, r4
   27e16:	a902      	add	r1, sp, #8
   27e18:	a832      	add	r0, sp, #200	; 0xc8
   27e1a:	f7ff fd29 	bl	27870 <sqr_mont_384x>
   27e1e:	270c      	movs	r7, #12
   27e20:	9700      	str	r7, [sp, #0]
   27e22:	4623      	mov	r3, r4
   27e24:	aa3e      	add	r2, sp, #248	; 0xf8
   27e26:	a932      	add	r1, sp, #200	; 0xc8
   27e28:	a802      	add	r0, sp, #8
   27e2a:	f7f8 fc23 	bl	20674 <sub_mod_n>
   27e2e:	9700      	str	r7, [sp, #0]
   27e30:	4623      	mov	r3, r4
   27e32:	aa3e      	add	r2, sp, #248	; 0xf8
   27e34:	a932      	add	r1, sp, #200	; 0xc8
   27e36:	a80e      	add	r0, sp, #56	; 0x38
   27e38:	f7f8 ff72 	bl	20d20 <add_mod_n>
   27e3c:	9700      	str	r7, [sp, #0]
   27e3e:	4623      	mov	r3, r4
   27e40:	2202      	movs	r2, #2
   27e42:	a902      	add	r1, sp, #8
   27e44:	4608      	mov	r0, r1
   27e46:	f7f9 f893 	bl	20f70 <lshift_mod_n>
   27e4a:	9700      	str	r7, [sp, #0]
   27e4c:	4623      	mov	r3, r4
   27e4e:	2202      	movs	r2, #2
   27e50:	a90e      	add	r1, sp, #56	; 0x38
   27e52:	4608      	mov	r0, r1
   27e54:	f7f9 f88c 	bl	20f70 <lshift_mod_n>
   27e58:	4643      	mov	r3, r8
   27e5a:	4622      	mov	r2, r4
   27e5c:	4631      	mov	r1, r6
   27e5e:	a832      	add	r0, sp, #200	; 0xc8
   27e60:	f7ff fd06 	bl	27870 <sqr_mont_384x>
   27e64:	f8cd 8000 	str.w	r8, [sp]
   27e68:	4623      	mov	r3, r4
   27e6a:	4632      	mov	r2, r6
   27e6c:	a932      	add	r1, sp, #200	; 0xc8
   27e6e:	4608      	mov	r0, r1
   27e70:	f7fc fa70 	bl	24354 <mul_mont_384x>
   27e74:	9700      	str	r7, [sp, #0]
   27e76:	4623      	mov	r3, r4
   27e78:	aa02      	add	r2, sp, #8
   27e7a:	a932      	add	r1, sp, #200	; 0xc8
   27e7c:	4608      	mov	r0, r1
   27e7e:	f7f8 ff4f 	bl	20d20 <add_mod_n>
   27e82:	9700      	str	r7, [sp, #0]
   27e84:	4623      	mov	r3, r4
   27e86:	aa0e      	add	r2, sp, #56	; 0x38
   27e88:	a93e      	add	r1, sp, #248	; 0xf8
   27e8a:	4608      	mov	r0, r1
   27e8c:	f7f8 ff48 	bl	20d20 <add_mod_n>
   27e90:	4643      	mov	r3, r8
   27e92:	4622      	mov	r2, r4
   27e94:	f106 0160 	add.w	r1, r6, #96	; 0x60
   27e98:	a81a      	add	r0, sp, #104	; 0x68
   27e9a:	f7ff fce9 	bl	27870 <sqr_mont_384x>
   27e9e:	aa31      	add	r2, sp, #196	; 0xc4
   27ea0:	a919      	add	r1, sp, #100	; 0x64
   27ea2:	f50d 7c92 	add.w	ip, sp, #292	; 0x124
   27ea6:	2000      	movs	r0, #0
   27ea8:	f852 3f04 	ldr.w	r3, [r2, #4]!
   27eac:	f851 4f04 	ldr.w	r4, [r1, #4]!
   27eb0:	4063      	eors	r3, r4
   27eb2:	4318      	orrs	r0, r3
   27eb4:	4562      	cmp	r2, ip
   27eb6:	d1f7      	bne.n	27ea8 <POINTonE2_on_curve+0xe8>
   27eb8:	1e43      	subs	r3, r0, #1
   27eba:	ea23 0000 	bic.w	r0, r3, r0
   27ebe:	ea45 70d0 	orr.w	r0, r5, r0, lsr #31
   27ec2:	b04a      	add	sp, #296	; 0x128
   27ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27ec8:	fffcfffd 	.word	0xfffcfffd
   27ecc:	00038688 	.word	0x00038688

00027ed0 <blst_p2_on_curve>:
   27ed0:	b508      	push	{r3, lr}
   27ed2:	f7ff ff75 	bl	27dc0 <POINTonE2_on_curve>
   27ed6:	bd08      	pop	{r3, pc}

00027ed8 <sqrt_align_fp2>:
   27ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27edc:	b0cd      	sub	sp, #308	; 0x134
   27ede:	9002      	str	r0, [sp, #8]
   27ee0:	9103      	str	r1, [sp, #12]
   27ee2:	4611      	mov	r1, r2
   27ee4:	461f      	mov	r7, r3
   27ee6:	4c6d      	ldr	r4, [pc, #436]	; (2809c <sqrt_align_fp2+0x1c4>)
   27ee8:	4b6d      	ldr	r3, [pc, #436]	; (280a0 <sqrt_align_fp2+0x1c8>)
   27eea:	4622      	mov	r2, r4
   27eec:	a81c      	add	r0, sp, #112	; 0x70
   27eee:	f7ff fcbf 	bl	27870 <sqr_mont_384x>
   27ef2:	250c      	movs	r5, #12
   27ef4:	9500      	str	r5, [sp, #0]
   27ef6:	4623      	mov	r3, r4
   27ef8:	463a      	mov	r2, r7
   27efa:	a91c      	add	r1, sp, #112	; 0x70
   27efc:	a804      	add	r0, sp, #16
   27efe:	f7f8 fbb9 	bl	20674 <sub_mod_n>
   27f02:	f107 0930 	add.w	r9, r7, #48	; 0x30
   27f06:	9500      	str	r5, [sp, #0]
   27f08:	4623      	mov	r3, r4
   27f0a:	464a      	mov	r2, r9
   27f0c:	a928      	add	r1, sp, #160	; 0xa0
   27f0e:	a810      	add	r0, sp, #64	; 0x40
   27f10:	f7f8 fbb0 	bl	20674 <sub_mod_n>
   27f14:	eb0d 0605 	add.w	r6, sp, r5
   27f18:	ac1b      	add	r4, sp, #108	; 0x6c
   27f1a:	4633      	mov	r3, r6
   27f1c:	2200      	movs	r2, #0
   27f1e:	f853 1f04 	ldr.w	r1, [r3, #4]!
   27f22:	430a      	orrs	r2, r1
   27f24:	42a3      	cmp	r3, r4
   27f26:	d1fa      	bne.n	27f1e <sqrt_align_fp2+0x46>
   27f28:	f102 38ff 	add.w	r8, r2, #4294967295
   27f2c:	ea28 0802 	bic.w	r8, r8, r2
   27f30:	ea4f 78d8 	mov.w	r8, r8, lsr #31
   27f34:	4859      	ldr	r0, [pc, #356]	; (2809c <sqrt_align_fp2+0x1c4>)
   27f36:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   27f3a:	ad33      	add	r5, sp, #204	; 0xcc
   27f3c:	30ec      	adds	r0, #236	; 0xec
   27f3e:	462a      	mov	r2, r5
   27f40:	f853 1f04 	ldr.w	r1, [r3, #4]!
   27f44:	f842 1f04 	str.w	r1, [r2, #4]!
   27f48:	4283      	cmp	r3, r0
   27f4a:	d1f9      	bne.n	27f40 <sqrt_align_fp2+0x68>
   27f4c:	f8df a14c 	ldr.w	sl, [pc, #332]	; 2809c <sqrt_align_fp2+0x1c4>
   27f50:	f04f 0b0c 	mov.w	fp, #12
   27f54:	f8cd b000 	str.w	fp, [sp]
   27f58:	4653      	mov	r3, sl
   27f5a:	463a      	mov	r2, r7
   27f5c:	a91c      	add	r1, sp, #112	; 0x70
   27f5e:	a804      	add	r0, sp, #16
   27f60:	f7f8 fede 	bl	20d20 <add_mod_n>
   27f64:	f8cd b000 	str.w	fp, [sp]
   27f68:	4653      	mov	r3, sl
   27f6a:	464a      	mov	r2, r9
   27f6c:	a928      	add	r1, sp, #160	; 0xa0
   27f6e:	a810      	add	r0, sp, #64	; 0x40
   27f70:	f7f8 fed6 	bl	20d20 <add_mod_n>
   27f74:	4633      	mov	r3, r6
   27f76:	2200      	movs	r2, #0
   27f78:	f853 1f04 	ldr.w	r1, [r3, #4]!
   27f7c:	430a      	orrs	r2, r1
   27f7e:	42a3      	cmp	r3, r4
   27f80:	d1fa      	bne.n	27f78 <sqrt_align_fp2+0xa0>
   27f82:	f102 3cff 	add.w	ip, r2, #4294967295
   27f86:	ea2c 0c02 	bic.w	ip, ip, r2
   27f8a:	ea4f 7adc 	mov.w	sl, ip, lsr #31
   27f8e:	ea4f 7cec 	mov.w	ip, ip, asr #31
   27f92:	4b44      	ldr	r3, [pc, #272]	; (280a4 <sqrt_align_fp2+0x1cc>)
   27f94:	f203 41bc 	addw	r1, r3, #1212	; 0x4bc
   27f98:	f203 5e1c 	addw	lr, r3, #1308	; 0x51c
   27f9c:	462a      	mov	r2, r5
   27f9e:	f852 0f04 	ldr.w	r0, [r2, #4]!
   27fa2:	f851 3f04 	ldr.w	r3, [r1, #4]!
   27fa6:	4043      	eors	r3, r0
   27fa8:	ea03 030c 	and.w	r3, r3, ip
   27fac:	4043      	eors	r3, r0
   27fae:	6013      	str	r3, [r2, #0]
   27fb0:	4571      	cmp	r1, lr
   27fb2:	d1f4      	bne.n	27f9e <sqrt_align_fp2+0xc6>
   27fb4:	ea48 080a 	orr.w	r8, r8, sl
   27fb8:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 2809c <sqrt_align_fp2+0x1c4>
   27fbc:	f04f 0b0c 	mov.w	fp, #12
   27fc0:	f8cd b000 	str.w	fp, [sp]
   27fc4:	4653      	mov	r3, sl
   27fc6:	464a      	mov	r2, r9
   27fc8:	a91c      	add	r1, sp, #112	; 0x70
   27fca:	a804      	add	r0, sp, #16
   27fcc:	f7f8 fb52 	bl	20674 <sub_mod_n>
   27fd0:	f8cd b000 	str.w	fp, [sp]
   27fd4:	4653      	mov	r3, sl
   27fd6:	463a      	mov	r2, r7
   27fd8:	a928      	add	r1, sp, #160	; 0xa0
   27fda:	a810      	add	r0, sp, #64	; 0x40
   27fdc:	f7f8 fea0 	bl	20d20 <add_mod_n>
   27fe0:	4633      	mov	r3, r6
   27fe2:	2200      	movs	r2, #0
   27fe4:	f853 1f04 	ldr.w	r1, [r3, #4]!
   27fe8:	430a      	orrs	r2, r1
   27fea:	42a3      	cmp	r3, r4
   27fec:	d1fa      	bne.n	27fe4 <sqrt_align_fp2+0x10c>
   27fee:	f102 3cff 	add.w	ip, r2, #4294967295
   27ff2:	ea2c 0c02 	bic.w	ip, ip, r2
   27ff6:	ea4f 7adc 	mov.w	sl, ip, lsr #31
   27ffa:	ea4f 7cec 	mov.w	ip, ip, asr #31
   27ffe:	4b29      	ldr	r3, [pc, #164]	; (280a4 <sqrt_align_fp2+0x1cc>)
   28000:	f203 511c 	addw	r1, r3, #1308	; 0x51c
   28004:	f203 5e7c 	addw	lr, r3, #1404	; 0x57c
   28008:	462a      	mov	r2, r5
   2800a:	f852 0f04 	ldr.w	r0, [r2, #4]!
   2800e:	f851 3f04 	ldr.w	r3, [r1, #4]!
   28012:	4043      	eors	r3, r0
   28014:	ea03 030c 	and.w	r3, r3, ip
   28018:	4043      	eors	r3, r0
   2801a:	6013      	str	r3, [r2, #0]
   2801c:	4571      	cmp	r1, lr
   2801e:	d1f4      	bne.n	2800a <sqrt_align_fp2+0x132>
   28020:	ea48 080a 	orr.w	r8, r8, sl
   28024:	f8df a074 	ldr.w	sl, [pc, #116]	; 2809c <sqrt_align_fp2+0x1c4>
   28028:	f04f 0b0c 	mov.w	fp, #12
   2802c:	f8cd b000 	str.w	fp, [sp]
   28030:	4653      	mov	r3, sl
   28032:	464a      	mov	r2, r9
   28034:	a91c      	add	r1, sp, #112	; 0x70
   28036:	a804      	add	r0, sp, #16
   28038:	f7f8 fe72 	bl	20d20 <add_mod_n>
   2803c:	f8cd b000 	str.w	fp, [sp]
   28040:	4653      	mov	r3, sl
   28042:	463a      	mov	r2, r7
   28044:	a928      	add	r1, sp, #160	; 0xa0
   28046:	a810      	add	r0, sp, #64	; 0x40
   28048:	f7f8 fb14 	bl	20674 <sub_mod_n>
   2804c:	2300      	movs	r3, #0
   2804e:	f856 2f04 	ldr.w	r2, [r6, #4]!
   28052:	4313      	orrs	r3, r2
   28054:	42a6      	cmp	r6, r4
   28056:	d1fa      	bne.n	2804e <sqrt_align_fp2+0x176>
   28058:	1e5c      	subs	r4, r3, #1
   2805a:	ea24 0303 	bic.w	r3, r4, r3
   2805e:	0fd8      	lsrs	r0, r3, #31
   28060:	17dc      	asrs	r4, r3, #31
   28062:	4e10      	ldr	r6, [pc, #64]	; (280a4 <sqrt_align_fp2+0x1cc>)
   28064:	f206 527c 	addw	r2, r6, #1404	; 0x57c
   28068:	f206 56dc 	addw	r6, r6, #1500	; 0x5dc
   2806c:	f855 1f04 	ldr.w	r1, [r5, #4]!
   28070:	f852 3f04 	ldr.w	r3, [r2, #4]!
   28074:	404b      	eors	r3, r1
   28076:	4023      	ands	r3, r4
   28078:	404b      	eors	r3, r1
   2807a:	602b      	str	r3, [r5, #0]
   2807c:	42b2      	cmp	r2, r6
   2807e:	d1f5      	bne.n	2806c <sqrt_align_fp2+0x194>
   28080:	ea48 0800 	orr.w	r8, r8, r0
   28084:	4b06      	ldr	r3, [pc, #24]	; (280a0 <sqrt_align_fp2+0x1c8>)
   28086:	9300      	str	r3, [sp, #0]
   28088:	4b04      	ldr	r3, [pc, #16]	; (2809c <sqrt_align_fp2+0x1c4>)
   2808a:	aa34      	add	r2, sp, #208	; 0xd0
   2808c:	9903      	ldr	r1, [sp, #12]
   2808e:	9802      	ldr	r0, [sp, #8]
   28090:	f7fc f960 	bl	24354 <mul_mont_384x>
   28094:	4640      	mov	r0, r8
   28096:	b04d      	add	sp, #308	; 0x134
   28098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2809c:	00038688 	.word	0x00038688
   280a0:	fffcfffd 	.word	0xfffcfffd
   280a4:	00039780 	.word	0x00039780

000280a8 <sqrt_fp2>:
   280a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   280ac:	b0b2      	sub	sp, #200	; 0xc8
   280ae:	4682      	mov	sl, r0
   280b0:	460c      	mov	r4, r1
   280b2:	4f40      	ldr	r7, [pc, #256]	; (281b4 <sqrt_fp2+0x10c>)
   280b4:	250c      	movs	r5, #12
   280b6:	9501      	str	r5, [sp, #4]
   280b8:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 281b8 <sqrt_fp2+0x110>
   280bc:	f8cd 9000 	str.w	r9, [sp]
   280c0:	463b      	mov	r3, r7
   280c2:	460a      	mov	r2, r1
   280c4:	a80e      	add	r0, sp, #56	; 0x38
   280c6:	f7f8 fc83 	bl	209d0 <mul_mont_n>
   280ca:	f104 0630 	add.w	r6, r4, #48	; 0x30
   280ce:	9501      	str	r5, [sp, #4]
   280d0:	f8cd 9000 	str.w	r9, [sp]
   280d4:	463b      	mov	r3, r7
   280d6:	4632      	mov	r2, r6
   280d8:	4631      	mov	r1, r6
   280da:	a802      	add	r0, sp, #8
   280dc:	f7f8 fc78 	bl	209d0 <mul_mont_n>
   280e0:	9500      	str	r5, [sp, #0]
   280e2:	463b      	mov	r3, r7
   280e4:	aa02      	add	r2, sp, #8
   280e6:	a90e      	add	r1, sp, #56	; 0x38
   280e8:	4608      	mov	r0, r1
   280ea:	f7f8 fe19 	bl	20d20 <add_mod_n>
   280ee:	a90e      	add	r1, sp, #56	; 0x38
   280f0:	4608      	mov	r0, r1
   280f2:	f7fd ffa3 	bl	2603c <sqrt_fp>
   280f6:	9500      	str	r5, [sp, #0]
   280f8:	463b      	mov	r3, r7
   280fa:	aa0e      	add	r2, sp, #56	; 0x38
   280fc:	4621      	mov	r1, r4
   280fe:	a802      	add	r0, sp, #8
   28100:	f7f8 fab8 	bl	20674 <sub_mod_n>
   28104:	9500      	str	r5, [sp, #0]
   28106:	463b      	mov	r3, r7
   28108:	aa0e      	add	r2, sp, #56	; 0x38
   2810a:	4621      	mov	r1, r4
   2810c:	4610      	mov	r0, r2
   2810e:	f7f8 fe07 	bl	20d20 <add_mod_n>
   28112:	a90e      	add	r1, sp, #56	; 0x38
   28114:	a81a      	add	r0, sp, #104	; 0x68
   28116:	468c      	mov	ip, r1
   28118:	2300      	movs	r3, #0
   2811a:	f85c 2b04 	ldr.w	r2, [ip], #4
   2811e:	4313      	orrs	r3, r2
   28120:	4584      	cmp	ip, r0
   28122:	d1fa      	bne.n	2811a <sqrt_fp2+0x72>
   28124:	f103 3cff 	add.w	ip, r3, #4294967295
   28128:	ea2c 0303 	bic.w	r3, ip, r3
   2812c:	ea4f 7ce3 	mov.w	ip, r3, asr #31
   28130:	ab02      	add	r3, sp, #8
   28132:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
   28136:	f853 2b04 	ldr.w	r2, [r3], #4
   2813a:	6808      	ldr	r0, [r1, #0]
   2813c:	4042      	eors	r2, r0
   2813e:	ea02 020c 	and.w	r2, r2, ip
   28142:	4042      	eors	r2, r0
   28144:	f841 2b04 	str.w	r2, [r1], #4
   28148:	4573      	cmp	r3, lr
   2814a:	d1f4      	bne.n	28136 <sqrt_fp2+0x8e>
   2814c:	4f19      	ldr	r7, [pc, #100]	; (281b4 <sqrt_fp2+0x10c>)
   2814e:	f04f 080c 	mov.w	r8, #12
   28152:	f8cd 8000 	str.w	r8, [sp]
   28156:	463b      	mov	r3, r7
   28158:	2201      	movs	r2, #1
   2815a:	a90e      	add	r1, sp, #56	; 0x38
   2815c:	4608      	mov	r0, r1
   2815e:	f7f8 faf1 	bl	20744 <rshift_mod_n>
   28162:	a90e      	add	r1, sp, #56	; 0x38
   28164:	a81a      	add	r0, sp, #104	; 0x68
   28166:	f7fe f90f 	bl	26388 <recip_sqrt_fp>
   2816a:	f8cd 8000 	str.w	r8, [sp]
   2816e:	463b      	mov	r3, r7
   28170:	2201      	movs	r2, #1
   28172:	4631      	mov	r1, r6
   28174:	a826      	add	r0, sp, #152	; 0x98
   28176:	f7f8 fae5 	bl	20744 <rshift_mod_n>
   2817a:	f8cd 8004 	str.w	r8, [sp, #4]
   2817e:	4e0e      	ldr	r6, [pc, #56]	; (281b8 <sqrt_fp2+0x110>)
   28180:	9600      	str	r6, [sp, #0]
   28182:	463b      	mov	r3, r7
   28184:	aa1a      	add	r2, sp, #104	; 0x68
   28186:	a926      	add	r1, sp, #152	; 0x98
   28188:	4608      	mov	r0, r1
   2818a:	f7f8 fc21 	bl	209d0 <mul_mont_n>
   2818e:	f8cd 8004 	str.w	r8, [sp, #4]
   28192:	9600      	str	r6, [sp, #0]
   28194:	463b      	mov	r3, r7
   28196:	aa0e      	add	r2, sp, #56	; 0x38
   28198:	a91a      	add	r1, sp, #104	; 0x68
   2819a:	4608      	mov	r0, r1
   2819c:	f7f8 fc18 	bl	209d0 <mul_mont_n>
   281a0:	4623      	mov	r3, r4
   281a2:	aa1a      	add	r2, sp, #104	; 0x68
   281a4:	4611      	mov	r1, r2
   281a6:	4650      	mov	r0, sl
   281a8:	f7ff fe96 	bl	27ed8 <sqrt_align_fp2>
   281ac:	b032      	add	sp, #200	; 0xc8
   281ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   281b2:	bf00      	nop
   281b4:	00038688 	.word	0x00038688
   281b8:	fffcfffd 	.word	0xfffcfffd

000281bc <blst_fp2_sqrt>:
   281bc:	b508      	push	{r3, lr}
   281be:	f7ff ff73 	bl	280a8 <sqrt_fp2>
   281c2:	bd08      	pop	{r3, pc}

000281c4 <POINTonE2_Uncompress_BE>:
   281c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   281c8:	b0d7      	sub	sp, #348	; 0x15c
   281ca:	4604      	mov	r4, r0
   281cc:	f101 0230 	add.w	r2, r1, #48	; 0x30
   281d0:	4608      	mov	r0, r1
   281d2:	2500      	movs	r5, #0
   281d4:	f101 072f 	add.w	r7, r1, #47	; 0x2f
   281d8:	1a3b      	subs	r3, r7, r0
   281da:	f810 6b01 	ldrb.w	r6, [r0], #1
   281de:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
   281e2:	f023 0303 	bic.w	r3, r3, #3
   281e6:	ae56      	add	r6, sp, #344	; 0x158
   281e8:	4433      	add	r3, r6
   281ea:	f843 5c90 	str.w	r5, [r3, #-144]
   281ee:	4290      	cmp	r0, r2
   281f0:	d1f2      	bne.n	281d8 <POINTonE2_Uncompress_BE+0x14>
   281f2:	f101 0660 	add.w	r6, r1, #96	; 0x60
   281f6:	2000      	movs	r0, #0
   281f8:	315f      	adds	r1, #95	; 0x5f
   281fa:	1a8b      	subs	r3, r1, r2
   281fc:	f812 5b01 	ldrb.w	r5, [r2], #1
   28200:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
   28204:	f023 0303 	bic.w	r3, r3, #3
   28208:	ad56      	add	r5, sp, #344	; 0x158
   2820a:	442b      	add	r3, r5
   2820c:	f843 0cc0 	str.w	r0, [r3, #-192]
   28210:	42b2      	cmp	r2, r6
   28212:	d1f2      	bne.n	281fa <POINTonE2_Uncompress_BE+0x36>
   28214:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
   28216:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   2821a:	933d      	str	r3, [sp, #244]	; 0xf4
   2821c:	4b64      	ldr	r3, [pc, #400]	; (283b0 <POINTonE2_Uncompress_BE+0x1ec>)
   2821e:	220c      	movs	r2, #12
   28220:	9200      	str	r2, [sp, #0]
   28222:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
   28226:	a932      	add	r1, sp, #200	; 0xc8
   28228:	a81a      	add	r0, sp, #104	; 0x68
   2822a:	f7f8 fd79 	bl	20d20 <add_mod_n>
   2822e:	ad1a      	add	r5, sp, #104	; 0x68
   28230:	a831      	add	r0, sp, #196	; 0xc4
   28232:	ae26      	add	r6, sp, #152	; 0x98
   28234:	462a      	mov	r2, r5
   28236:	2100      	movs	r1, #0
   28238:	f852 3b04 	ldr.w	r3, [r2], #4
   2823c:	f850 7f04 	ldr.w	r7, [r0, #4]!
   28240:	407b      	eors	r3, r7
   28242:	4319      	orrs	r1, r3
   28244:	42b2      	cmp	r2, r6
   28246:	d1f7      	bne.n	28238 <POINTonE2_Uncompress_BE+0x74>
   28248:	1e4b      	subs	r3, r1, #1
   2824a:	438b      	bics	r3, r1
   2824c:	f140 80a4 	bpl.w	28398 <POINTonE2_Uncompress_BE+0x1d4>
   28250:	4b57      	ldr	r3, [pc, #348]	; (283b0 <POINTonE2_Uncompress_BE+0x1ec>)
   28252:	af26      	add	r7, sp, #152	; 0x98
   28254:	220c      	movs	r2, #12
   28256:	9200      	str	r2, [sp, #0]
   28258:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
   2825c:	4639      	mov	r1, r7
   2825e:	a81a      	add	r0, sp, #104	; 0x68
   28260:	f7f8 fd5e 	bl	20d20 <add_mod_n>
   28264:	46b8      	mov	r8, r7
   28266:	4639      	mov	r1, r7
   28268:	2200      	movs	r2, #0
   2826a:	f855 3b04 	ldr.w	r3, [r5], #4
   2826e:	f851 0b04 	ldr.w	r0, [r1], #4
   28272:	4043      	eors	r3, r0
   28274:	431a      	orrs	r2, r3
   28276:	42b5      	cmp	r5, r6
   28278:	d1f7      	bne.n	2826a <POINTonE2_Uncompress_BE+0xa6>
   2827a:	1e53      	subs	r3, r2, #1
   2827c:	4393      	bics	r3, r2
   2827e:	f140 8090 	bpl.w	283a2 <POINTonE2_Uncompress_BE+0x1de>
   28282:	4d4b      	ldr	r5, [pc, #300]	; (283b0 <POINTonE2_Uncompress_BE+0x1ec>)
   28284:	f505 7934 	add.w	r9, r5, #720	; 0x2d0
   28288:	260c      	movs	r6, #12
   2828a:	9601      	str	r6, [sp, #4]
   2828c:	4f49      	ldr	r7, [pc, #292]	; (283b4 <POINTonE2_Uncompress_BE+0x1f0>)
   2828e:	9700      	str	r7, [sp, #0]
   28290:	462b      	mov	r3, r5
   28292:	464a      	mov	r2, r9
   28294:	a926      	add	r1, sp, #152	; 0x98
   28296:	4608      	mov	r0, r1
   28298:	f7f8 fb9a 	bl	209d0 <mul_mont_n>
   2829c:	9601      	str	r6, [sp, #4]
   2829e:	9700      	str	r7, [sp, #0]
   282a0:	462b      	mov	r3, r5
   282a2:	464a      	mov	r2, r9
   282a4:	a932      	add	r1, sp, #200	; 0xc8
   282a6:	4608      	mov	r0, r1
   282a8:	f7f8 fb92 	bl	209d0 <mul_mont_n>
   282ac:	463b      	mov	r3, r7
   282ae:	462a      	mov	r2, r5
   282b0:	a926      	add	r1, sp, #152	; 0x98
   282b2:	a83e      	add	r0, sp, #248	; 0xf8
   282b4:	f7ff fadc 	bl	27870 <sqr_mont_384x>
   282b8:	9700      	str	r7, [sp, #0]
   282ba:	462b      	mov	r3, r5
   282bc:	aa26      	add	r2, sp, #152	; 0x98
   282be:	a93e      	add	r1, sp, #248	; 0xf8
   282c0:	4608      	mov	r0, r1
   282c2:	f7fc f847 	bl	24354 <mul_mont_384x>
   282c6:	4f3c      	ldr	r7, [pc, #240]	; (283b8 <POINTonE2_Uncompress_BE+0x1f4>)
   282c8:	9600      	str	r6, [sp, #0]
   282ca:	462b      	mov	r3, r5
   282cc:	f507 628c 	add.w	r2, r7, #1120	; 0x460
   282d0:	a93e      	add	r1, sp, #248	; 0xf8
   282d2:	4608      	mov	r0, r1
   282d4:	f7f8 fd24 	bl	20d20 <add_mod_n>
   282d8:	9600      	str	r6, [sp, #0]
   282da:	462b      	mov	r3, r5
   282dc:	f507 6292 	add.w	r2, r7, #1168	; 0x490
   282e0:	a94a      	add	r1, sp, #296	; 0x128
   282e2:	4608      	mov	r0, r1
   282e4:	f7f8 fd1c 	bl	20d20 <add_mod_n>
   282e8:	a93e      	add	r1, sp, #248	; 0xf8
   282ea:	4608      	mov	r0, r1
   282ec:	f7ff fedc 	bl	280a8 <sqrt_fp2>
   282f0:	2800      	cmp	r0, #0
   282f2:	d059      	beq.n	283a8 <POINTonE2_Uncompress_BE+0x1e4>
   282f4:	ab25      	add	r3, sp, #148	; 0x94
   282f6:	1f22      	subs	r2, r4, #4
   282f8:	f108 08bc 	add.w	r8, r8, #188	; 0xbc
   282fc:	f853 1f04 	ldr.w	r1, [r3, #4]!
   28300:	f842 1f04 	str.w	r1, [r2, #4]!
   28304:	4543      	cmp	r3, r8
   28306:	d1f9      	bne.n	282fc <POINTonE2_Uncompress_BE+0x138>
   28308:	4d2a      	ldr	r5, [pc, #168]	; (283b4 <POINTonE2_Uncompress_BE+0x1f0>)
   2830a:	4e29      	ldr	r6, [pc, #164]	; (283b0 <POINTonE2_Uncompress_BE+0x1ec>)
   2830c:	270c      	movs	r7, #12
   2830e:	9700      	str	r7, [sp, #0]
   28310:	462b      	mov	r3, r5
   28312:	4632      	mov	r2, r6
   28314:	f104 0160 	add.w	r1, r4, #96	; 0x60
   28318:	a802      	add	r0, sp, #8
   2831a:	f7f8 fe8b 	bl	21034 <from_mont_n>
   2831e:	9700      	str	r7, [sp, #0]
   28320:	462b      	mov	r3, r5
   28322:	4632      	mov	r2, r6
   28324:	f104 0190 	add.w	r1, r4, #144	; 0x90
   28328:	a80e      	add	r0, sp, #56	; 0x38
   2832a:	f7f8 fe83 	bl	21034 <from_mont_n>
   2832e:	463a      	mov	r2, r7
   28330:	4631      	mov	r1, r6
   28332:	a802      	add	r0, sp, #8
   28334:	f7f8 ff93 	bl	2125e <sgn0_pty_mod_n>
   28338:	4605      	mov	r5, r0
   2833a:	463a      	mov	r2, r7
   2833c:	4631      	mov	r1, r6
   2833e:	a80e      	add	r0, sp, #56	; 0x38
   28340:	f7f8 ff8d 	bl	2125e <sgn0_pty_mod_n>
   28344:	aa0d      	add	r2, sp, #52	; 0x34
   28346:	ab02      	add	r3, sp, #8
   28348:	ae19      	add	r6, sp, #100	; 0x64
   2834a:	2100      	movs	r1, #0
   2834c:	f852 4f04 	ldr.w	r4, [r2, #4]!
   28350:	4321      	orrs	r1, r4
   28352:	42b2      	cmp	r2, r6
   28354:	d1fa      	bne.n	2834c <POINTonE2_Uncompress_BE+0x188>
   28356:	1e4c      	subs	r4, r1, #1
   28358:	ea24 0101 	bic.w	r1, r4, r1
   2835c:	0fcc      	lsrs	r4, r1, #31
   2835e:	ea05 71e1 	and.w	r1, r5, r1, asr #31
   28362:	3c01      	subs	r4, #1
   28364:	4004      	ands	r4, r0
   28366:	430c      	orrs	r4, r1
   28368:	f103 0630 	add.w	r6, r3, #48	; 0x30
   2836c:	2200      	movs	r2, #0
   2836e:	f853 1b04 	ldr.w	r1, [r3], #4
   28372:	430a      	orrs	r2, r1
   28374:	42b3      	cmp	r3, r6
   28376:	d1fa      	bne.n	2836e <POINTonE2_Uncompress_BE+0x1aa>
   28378:	1e53      	subs	r3, r2, #1
   2837a:	ea23 0202 	bic.w	r2, r3, r2
   2837e:	0fd3      	lsrs	r3, r2, #31
   28380:	ea00 72e2 	and.w	r2, r0, r2, asr #31
   28384:	3b01      	subs	r3, #1
   28386:	ea03 0005 	and.w	r0, r3, r5
   2838a:	4310      	orrs	r0, r2
   2838c:	f000 0001 	and.w	r0, r0, #1
   28390:	f004 0402 	and.w	r4, r4, #2
   28394:	4320      	orrs	r0, r4
   28396:	e001      	b.n	2839c <POINTonE2_Uncompress_BE+0x1d8>
   28398:	f04f 30ff 	mov.w	r0, #4294967295
   2839c:	b057      	add	sp, #348	; 0x15c
   2839e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   283a2:	f04f 30ff 	mov.w	r0, #4294967295
   283a6:	e7f9      	b.n	2839c <POINTonE2_Uncompress_BE+0x1d8>
   283a8:	f06f 0001 	mvn.w	r0, #1
   283ac:	e7f6      	b.n	2839c <POINTonE2_Uncompress_BE+0x1d8>
   283ae:	bf00      	nop
   283b0:	00038688 	.word	0x00038688
   283b4:	fffcfffd 	.word	0xfffcfffd
   283b8:	00039780 	.word	0x00039780

000283bc <POINTonE2_Uncompress>:
   283bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   283c0:	b082      	sub	sp, #8
   283c2:	780d      	ldrb	r5, [r1, #0]
   283c4:	f991 3000 	ldrsb.w	r3, [r1]
   283c8:	2b00      	cmp	r3, #0
   283ca:	da3f      	bge.n	2844c <POINTonE2_Uncompress+0x90>
   283cc:	4604      	mov	r4, r0
   283ce:	f015 0640 	ands.w	r6, r5, #64	; 0x40
   283d2:	d01a      	beq.n	2840a <POINTonE2_Uncompress+0x4e>
   283d4:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   283d8:	3d01      	subs	r5, #1
   283da:	0fed      	lsrs	r5, r5, #31
   283dc:	460b      	mov	r3, r1
   283de:	315f      	adds	r1, #95	; 0x5f
   283e0:	2200      	movs	r2, #0
   283e2:	f813 cf01 	ldrb.w	ip, [r3, #1]!
   283e6:	ea42 020c 	orr.w	r2, r2, ip
   283ea:	428b      	cmp	r3, r1
   283ec:	d1f9      	bne.n	283e2 <POINTonE2_Uncompress+0x26>
   283ee:	3a01      	subs	r2, #1
   283f0:	ea15 73d2 	ands.w	r3, r5, r2, lsr #31
   283f4:	d02f      	beq.n	28456 <POINTonE2_Uncompress+0x9a>
   283f6:	4623      	mov	r3, r4
   283f8:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
   283fc:	2200      	movs	r2, #0
   283fe:	f843 2b04 	str.w	r2, [r3], #4
   28402:	428b      	cmp	r3, r1
   28404:	d1fb      	bne.n	283fe <POINTonE2_Uncompress+0x42>
   28406:	2600      	movs	r6, #0
   28408:	e021      	b.n	2844e <POINTonE2_Uncompress+0x92>
   2840a:	f7ff fedb 	bl	281c4 <POINTonE2_Uncompress_BE>
   2840e:	2803      	cmp	r0, #3
   28410:	d902      	bls.n	28418 <POINTonE2_Uncompress+0x5c>
   28412:	4240      	negs	r0, r0
   28414:	b2c6      	uxtb	r6, r0
   28416:	e01a      	b.n	2844e <POINTonE2_Uncompress+0x92>
   28418:	f3c5 1540 	ubfx	r5, r5, #5, #1
   2841c:	ea85 0550 	eor.w	r5, r5, r0, lsr #1
   28420:	f104 0060 	add.w	r0, r4, #96	; 0x60
   28424:	4f0d      	ldr	r7, [pc, #52]	; (2845c <POINTonE2_Uncompress+0xa0>)
   28426:	f04f 080c 	mov.w	r8, #12
   2842a:	f8cd 8000 	str.w	r8, [sp]
   2842e:	463b      	mov	r3, r7
   28430:	462a      	mov	r2, r5
   28432:	4601      	mov	r1, r0
   28434:	f7f9 fb08 	bl	21a48 <cneg_mod_n>
   28438:	f104 0090 	add.w	r0, r4, #144	; 0x90
   2843c:	f8cd 8000 	str.w	r8, [sp]
   28440:	463b      	mov	r3, r7
   28442:	462a      	mov	r2, r5
   28444:	4601      	mov	r1, r0
   28446:	f7f9 faff 	bl	21a48 <cneg_mod_n>
   2844a:	e000      	b.n	2844e <POINTonE2_Uncompress+0x92>
   2844c:	2601      	movs	r6, #1
   2844e:	4630      	mov	r0, r6
   28450:	b002      	add	sp, #8
   28452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28456:	2601      	movs	r6, #1
   28458:	e7f9      	b.n	2844e <POINTonE2_Uncompress+0x92>
   2845a:	bf00      	nop
   2845c:	00038688 	.word	0x00038688

00028460 <blst_p2_uncompress>:
   28460:	b508      	push	{r3, lr}
   28462:	f7ff ffab 	bl	283bc <POINTonE2_Uncompress>
   28466:	bd08      	pop	{r3, pc}

00028468 <blst_p2_deserialize>:
   28468:	b508      	push	{r3, lr}
   2846a:	780b      	ldrb	r3, [r1, #0]
   2846c:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   28470:	d01a      	beq.n	284a8 <blst_p2_deserialize+0x40>
   28472:	f013 0f80 	tst.w	r3, #128	; 0x80
   28476:	d11a      	bne.n	284ae <blst_p2_deserialize+0x46>
   28478:	f013 0f40 	tst.w	r3, #64	; 0x40
   2847c:	d024      	beq.n	284c8 <blst_p2_deserialize+0x60>
   2847e:	f003 0c3f 	and.w	ip, r3, #63	; 0x3f
   28482:	f10c 3cff 	add.w	ip, ip, #4294967295
   28486:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
   2848a:	460b      	mov	r3, r1
   2848c:	31bf      	adds	r1, #191	; 0xbf
   2848e:	2200      	movs	r2, #0
   28490:	f813 ef01 	ldrb.w	lr, [r3, #1]!
   28494:	ea42 020e 	orr.w	r2, r2, lr
   28498:	428b      	cmp	r3, r1
   2849a:	d1f9      	bne.n	28490 <blst_p2_deserialize+0x28>
   2849c:	3a01      	subs	r2, #1
   2849e:	ea1c 73d2 	ands.w	r3, ip, r2, lsr #31
   284a2:	d107      	bne.n	284b4 <blst_p2_deserialize+0x4c>
   284a4:	2001      	movs	r0, #1
   284a6:	e010      	b.n	284ca <blst_p2_deserialize+0x62>
   284a8:	f7ff fb8a 	bl	27bc0 <POINTonE2_Deserialize_BE>
   284ac:	e00d      	b.n	284ca <blst_p2_deserialize+0x62>
   284ae:	f7ff ff85 	bl	283bc <POINTonE2_Uncompress>
   284b2:	e00a      	b.n	284ca <blst_p2_deserialize+0x62>
   284b4:	4603      	mov	r3, r0
   284b6:	f100 01c0 	add.w	r1, r0, #192	; 0xc0
   284ba:	2200      	movs	r2, #0
   284bc:	f843 2b04 	str.w	r2, [r3], #4
   284c0:	428b      	cmp	r3, r1
   284c2:	d1fb      	bne.n	284bc <blst_p2_deserialize+0x54>
   284c4:	2000      	movs	r0, #0
   284c6:	e000      	b.n	284ca <blst_p2_deserialize+0x62>
   284c8:	2001      	movs	r0, #1
   284ca:	bd08      	pop	{r3, pc}

000284cc <POINTonE2_is_equal>:
   284cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   284d0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
   284d4:	4607      	mov	r7, r0
   284d6:	460e      	mov	r6, r1
   284d8:	f100 08c0 	add.w	r8, r0, #192	; 0xc0
   284dc:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
   284e0:	f500 708e 	add.w	r0, r0, #284	; 0x11c
   284e4:	2200      	movs	r2, #0
   284e6:	f853 1f04 	ldr.w	r1, [r3, #4]!
   284ea:	430a      	orrs	r2, r1
   284ec:	4283      	cmp	r3, r0
   284ee:	d1fa      	bne.n	284e6 <POINTonE2_is_equal+0x1a>
   284f0:	1e55      	subs	r5, r2, #1
   284f2:	ea25 0502 	bic.w	r5, r5, r2
   284f6:	0fed      	lsrs	r5, r5, #31
   284f8:	f106 09c0 	add.w	r9, r6, #192	; 0xc0
   284fc:	f106 03bc 	add.w	r3, r6, #188	; 0xbc
   28500:	f506 708e 	add.w	r0, r6, #284	; 0x11c
   28504:	2200      	movs	r2, #0
   28506:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2850a:	430a      	orrs	r2, r1
   2850c:	4283      	cmp	r3, r0
   2850e:	d1fa      	bne.n	28506 <POINTonE2_is_equal+0x3a>
   28510:	1e54      	subs	r4, r2, #1
   28512:	ea24 0202 	bic.w	r2, r4, r2
   28516:	0fd4      	lsrs	r4, r2, #31
   28518:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 285cc <POINTonE2_is_equal+0x100>
   2851c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 285d0 <POINTonE2_is_equal+0x104>
   28520:	465b      	mov	r3, fp
   28522:	4652      	mov	r2, sl
   28524:	4641      	mov	r1, r8
   28526:	a87a      	add	r0, sp, #488	; 0x1e8
   28528:	f7ff f9a2 	bl	27870 <sqr_mont_384x>
   2852c:	465b      	mov	r3, fp
   2852e:	4652      	mov	r2, sl
   28530:	4649      	mov	r1, r9
   28532:	a862      	add	r0, sp, #392	; 0x188
   28534:	f7ff f99c 	bl	27870 <sqr_mont_384x>
   28538:	f8cd b000 	str.w	fp, [sp]
   2853c:	4653      	mov	r3, sl
   2853e:	aa62      	add	r2, sp, #392	; 0x188
   28540:	4639      	mov	r1, r7
   28542:	a832      	add	r0, sp, #200	; 0xc8
   28544:	f7fb ff06 	bl	24354 <mul_mont_384x>
   28548:	f8cd b000 	str.w	fp, [sp]
   2854c:	4653      	mov	r3, sl
   2854e:	aa7a      	add	r2, sp, #488	; 0x1e8
   28550:	4631      	mov	r1, r6
   28552:	a802      	add	r0, sp, #8
   28554:	f7fb fefe 	bl	24354 <mul_mont_384x>
   28558:	f8cd b000 	str.w	fp, [sp]
   2855c:	4653      	mov	r3, sl
   2855e:	464a      	mov	r2, r9
   28560:	f107 0160 	add.w	r1, r7, #96	; 0x60
   28564:	a84a      	add	r0, sp, #296	; 0x128
   28566:	f7fb fef5 	bl	24354 <mul_mont_384x>
   2856a:	f8cd b000 	str.w	fp, [sp]
   2856e:	4653      	mov	r3, sl
   28570:	4642      	mov	r2, r8
   28572:	f106 0160 	add.w	r1, r6, #96	; 0x60
   28576:	a81a      	add	r0, sp, #104	; 0x68
   28578:	f7fb feec 	bl	24354 <mul_mont_384x>
   2857c:	f8cd b000 	str.w	fp, [sp]
   28580:	4653      	mov	r3, sl
   28582:	aa62      	add	r2, sp, #392	; 0x188
   28584:	a94a      	add	r1, sp, #296	; 0x128
   28586:	4608      	mov	r0, r1
   28588:	f7fb fee4 	bl	24354 <mul_mont_384x>
   2858c:	f8cd b000 	str.w	fp, [sp]
   28590:	4653      	mov	r3, sl
   28592:	aa7a      	add	r2, sp, #488	; 0x1e8
   28594:	a91a      	add	r1, sp, #104	; 0x68
   28596:	4608      	mov	r0, r1
   28598:	f7fb fedc 	bl	24354 <mul_mont_384x>
   2859c:	aa31      	add	r2, sp, #196	; 0xc4
   2859e:	a901      	add	r1, sp, #4
   285a0:	af61      	add	r7, sp, #388	; 0x184
   285a2:	2000      	movs	r0, #0
   285a4:	f852 3f04 	ldr.w	r3, [r2, #4]!
   285a8:	f851 6f04 	ldr.w	r6, [r1, #4]!
   285ac:	4073      	eors	r3, r6
   285ae:	4318      	orrs	r0, r3
   285b0:	42ba      	cmp	r2, r7
   285b2:	d1f7      	bne.n	285a4 <POINTonE2_is_equal+0xd8>
   285b4:	1e43      	subs	r3, r0, #1
   285b6:	ea23 0000 	bic.w	r0, r3, r0
   285ba:	406c      	eors	r4, r5
   285bc:	f084 0401 	eor.w	r4, r4, #1
   285c0:	ea04 70d0 	and.w	r0, r4, r0, lsr #31
   285c4:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
   285c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   285cc:	fffcfffd 	.word	0xfffcfffd
   285d0:	00038688 	.word	0x00038688

000285d4 <blst_p2_is_equal>:
   285d4:	b508      	push	{r3, lr}
   285d6:	f7ff ff79 	bl	284cc <POINTonE2_is_equal>
   285da:	bd08      	pop	{r3, pc}

000285dc <POINTonE2_add>:
   285dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   285e0:	f5ad 7d75 	sub.w	sp, sp, #980	; 0x3d4
   285e4:	9003      	str	r0, [sp, #12]
   285e6:	460e      	mov	r6, r1
   285e8:	4615      	mov	r5, r2
   285ea:	f101 0ac0 	add.w	sl, r1, #192	; 0xc0
   285ee:	f101 03bc 	add.w	r3, r1, #188	; 0xbc
   285f2:	f501 708e 	add.w	r0, r1, #284	; 0x11c
   285f6:	2200      	movs	r2, #0
   285f8:	f853 1f04 	ldr.w	r1, [r3, #4]!
   285fc:	430a      	orrs	r2, r1
   285fe:	4283      	cmp	r3, r0
   28600:	d1fa      	bne.n	285f8 <POINTonE2_add+0x1c>
   28602:	1e53      	subs	r3, r2, #1
   28604:	ea23 0202 	bic.w	r2, r3, r2
   28608:	0fd3      	lsrs	r3, r2, #31
   2860a:	9302      	str	r3, [sp, #8]
   2860c:	4fb5      	ldr	r7, [pc, #724]	; (288e4 <POINTonE2_add+0x308>)
   2860e:	4cb6      	ldr	r4, [pc, #728]	; (288e8 <POINTonE2_add+0x30c>)
   28610:	463b      	mov	r3, r7
   28612:	4622      	mov	r2, r4
   28614:	4651      	mov	r1, sl
   28616:	a894      	add	r0, sp, #592	; 0x250
   28618:	f7ff f92a 	bl	27870 <sqr_mont_384x>
   2861c:	9700      	str	r7, [sp, #0]
   2861e:	4623      	mov	r3, r4
   28620:	4652      	mov	r2, sl
   28622:	a994      	add	r1, sp, #592	; 0x250
   28624:	a8dc      	add	r0, sp, #880	; 0x370
   28626:	f7fb fe95 	bl	24354 <mul_mont_384x>
   2862a:	9700      	str	r7, [sp, #0]
   2862c:	4623      	mov	r3, r4
   2862e:	f105 0260 	add.w	r2, r5, #96	; 0x60
   28632:	a9dc      	add	r1, sp, #880	; 0x370
   28634:	4608      	mov	r0, r1
   28636:	f7fb fe8d 	bl	24354 <mul_mont_384x>
   2863a:	f105 0bc0 	add.w	fp, r5, #192	; 0xc0
   2863e:	f105 03bc 	add.w	r3, r5, #188	; 0xbc
   28642:	f505 718e 	add.w	r1, r5, #284	; 0x11c
   28646:	f04f 0800 	mov.w	r8, #0
   2864a:	f853 2f04 	ldr.w	r2, [r3, #4]!
   2864e:	ea48 0802 	orr.w	r8, r8, r2
   28652:	4299      	cmp	r1, r3
   28654:	d1f9      	bne.n	2864a <POINTonE2_add+0x6e>
   28656:	f8df 928c 	ldr.w	r9, [pc, #652]	; 288e4 <POINTonE2_add+0x308>
   2865a:	4ca3      	ldr	r4, [pc, #652]	; (288e8 <POINTonE2_add+0x30c>)
   2865c:	464b      	mov	r3, r9
   2865e:	4622      	mov	r2, r4
   28660:	4659      	mov	r1, fp
   28662:	a87c      	add	r0, sp, #496	; 0x1f0
   28664:	f7ff f904 	bl	27870 <sqr_mont_384x>
   28668:	f8cd 9000 	str.w	r9, [sp]
   2866c:	4623      	mov	r3, r4
   2866e:	465a      	mov	r2, fp
   28670:	a97c      	add	r1, sp, #496	; 0x1f0
   28672:	a84c      	add	r0, sp, #304	; 0x130
   28674:	f7fb fe6e 	bl	24354 <mul_mont_384x>
   28678:	f8cd 9000 	str.w	r9, [sp]
   2867c:	4623      	mov	r3, r4
   2867e:	f106 0260 	add.w	r2, r6, #96	; 0x60
   28682:	a94c      	add	r1, sp, #304	; 0x130
   28684:	4608      	mov	r0, r1
   28686:	f7fb fe65 	bl	24354 <mul_mont_384x>
   2868a:	270c      	movs	r7, #12
   2868c:	9700      	str	r7, [sp, #0]
   2868e:	4623      	mov	r3, r4
   28690:	aa4c      	add	r2, sp, #304	; 0x130
   28692:	a9dc      	add	r1, sp, #880	; 0x370
   28694:	4608      	mov	r0, r1
   28696:	f7f7 ffed 	bl	20674 <sub_mod_n>
   2869a:	9700      	str	r7, [sp, #0]
   2869c:	4623      	mov	r3, r4
   2869e:	aa58      	add	r2, sp, #352	; 0x160
   286a0:	a9e8      	add	r1, sp, #928	; 0x3a0
   286a2:	4608      	mov	r0, r1
   286a4:	f7f7 ffe6 	bl	20674 <sub_mod_n>
   286a8:	9700      	str	r7, [sp, #0]
   286aa:	4623      	mov	r3, r4
   286ac:	aadc      	add	r2, sp, #880	; 0x370
   286ae:	4611      	mov	r1, r2
   286b0:	4610      	mov	r0, r2
   286b2:	f7f8 fb35 	bl	20d20 <add_mod_n>
   286b6:	9700      	str	r7, [sp, #0]
   286b8:	4623      	mov	r3, r4
   286ba:	aae8      	add	r2, sp, #928	; 0x3a0
   286bc:	4611      	mov	r1, r2
   286be:	4610      	mov	r0, r2
   286c0:	f7f8 fb2e 	bl	20d20 <add_mod_n>
   286c4:	f8cd 9000 	str.w	r9, [sp]
   286c8:	4623      	mov	r3, r4
   286ca:	aa7c      	add	r2, sp, #496	; 0x1f0
   286cc:	4631      	mov	r1, r6
   286ce:	a864      	add	r0, sp, #400	; 0x190
   286d0:	f7fb fe40 	bl	24354 <mul_mont_384x>
   286d4:	f8cd 9000 	str.w	r9, [sp]
   286d8:	4623      	mov	r3, r4
   286da:	aa94      	add	r2, sp, #592	; 0x250
   286dc:	4629      	mov	r1, r5
   286de:	a834      	add	r0, sp, #208	; 0xd0
   286e0:	f7fb fe38 	bl	24354 <mul_mont_384x>
   286e4:	9700      	str	r7, [sp, #0]
   286e6:	4623      	mov	r3, r4
   286e8:	aa64      	add	r2, sp, #400	; 0x190
   286ea:	a934      	add	r1, sp, #208	; 0xd0
   286ec:	4608      	mov	r0, r1
   286ee:	f7f7 ffc1 	bl	20674 <sub_mod_n>
   286f2:	9700      	str	r7, [sp, #0]
   286f4:	4623      	mov	r3, r4
   286f6:	aa70      	add	r2, sp, #448	; 0x1c0
   286f8:	a940      	add	r1, sp, #256	; 0x100
   286fa:	4608      	mov	r0, r1
   286fc:	f7f7 ffba 	bl	20674 <sub_mod_n>
   28700:	9700      	str	r7, [sp, #0]
   28702:	4623      	mov	r3, r4
   28704:	aa34      	add	r2, sp, #208	; 0xd0
   28706:	4611      	mov	r1, r2
   28708:	a81c      	add	r0, sp, #112	; 0x70
   2870a:	f7f8 fb09 	bl	20d20 <add_mod_n>
   2870e:	9700      	str	r7, [sp, #0]
   28710:	4623      	mov	r3, r4
   28712:	aa40      	add	r2, sp, #256	; 0x100
   28714:	4611      	mov	r1, r2
   28716:	a828      	add	r0, sp, #160	; 0xa0
   28718:	f7f8 fb02 	bl	20d20 <add_mod_n>
   2871c:	464b      	mov	r3, r9
   2871e:	4622      	mov	r2, r4
   28720:	a91c      	add	r1, sp, #112	; 0x70
   28722:	4608      	mov	r0, r1
   28724:	f7ff f8a4 	bl	27870 <sqr_mont_384x>
   28728:	f8cd 9000 	str.w	r9, [sp]
   2872c:	4623      	mov	r3, r4
   2872e:	aa1c      	add	r2, sp, #112	; 0x70
   28730:	a934      	add	r1, sp, #208	; 0xd0
   28732:	a804      	add	r0, sp, #16
   28734:	f7fb fe0e 	bl	24354 <mul_mont_384x>
   28738:	f8cd 9000 	str.w	r9, [sp]
   2873c:	4623      	mov	r3, r4
   2873e:	aa04      	add	r2, sp, #16
   28740:	a94c      	add	r1, sp, #304	; 0x130
   28742:	4608      	mov	r0, r1
   28744:	f7fb fe06 	bl	24354 <mul_mont_384x>
   28748:	f8cd 9000 	str.w	r9, [sp]
   2874c:	4623      	mov	r3, r4
   2874e:	aa1c      	add	r2, sp, #112	; 0x70
   28750:	a964      	add	r1, sp, #400	; 0x190
   28752:	a8c4      	add	r0, sp, #784	; 0x310
   28754:	f7fb fdfe 	bl	24354 <mul_mont_384x>
   28758:	464b      	mov	r3, r9
   2875a:	4622      	mov	r2, r4
   2875c:	a9dc      	add	r1, sp, #880	; 0x370
   2875e:	a8ac      	add	r0, sp, #688	; 0x2b0
   28760:	f7ff f886 	bl	27870 <sqr_mont_384x>
   28764:	9700      	str	r7, [sp, #0]
   28766:	4623      	mov	r3, r4
   28768:	aa04      	add	r2, sp, #16
   2876a:	a9ac      	add	r1, sp, #688	; 0x2b0
   2876c:	4608      	mov	r0, r1
   2876e:	f7f7 ff81 	bl	20674 <sub_mod_n>
   28772:	9700      	str	r7, [sp, #0]
   28774:	4623      	mov	r3, r4
   28776:	aa10      	add	r2, sp, #64	; 0x40
   28778:	a9b8      	add	r1, sp, #736	; 0x2e0
   2877a:	4608      	mov	r0, r1
   2877c:	f7f7 ff7a 	bl	20674 <sub_mod_n>
   28780:	9700      	str	r7, [sp, #0]
   28782:	4623      	mov	r3, r4
   28784:	aac4      	add	r2, sp, #784	; 0x310
   28786:	a9ac      	add	r1, sp, #688	; 0x2b0
   28788:	4608      	mov	r0, r1
   2878a:	f7f7 ff73 	bl	20674 <sub_mod_n>
   2878e:	9700      	str	r7, [sp, #0]
   28790:	4623      	mov	r3, r4
   28792:	aad0      	add	r2, sp, #832	; 0x340
   28794:	a9b8      	add	r1, sp, #736	; 0x2e0
   28796:	4608      	mov	r0, r1
   28798:	f7f7 ff6c 	bl	20674 <sub_mod_n>
   2879c:	9700      	str	r7, [sp, #0]
   2879e:	4623      	mov	r3, r4
   287a0:	aac4      	add	r2, sp, #784	; 0x310
   287a2:	a9ac      	add	r1, sp, #688	; 0x2b0
   287a4:	4608      	mov	r0, r1
   287a6:	f7f7 ff65 	bl	20674 <sub_mod_n>
   287aa:	9700      	str	r7, [sp, #0]
   287ac:	4623      	mov	r3, r4
   287ae:	aad0      	add	r2, sp, #832	; 0x340
   287b0:	a9b8      	add	r1, sp, #736	; 0x2e0
   287b2:	4608      	mov	r0, r1
   287b4:	f7f7 ff5e 	bl	20674 <sub_mod_n>
   287b8:	9700      	str	r7, [sp, #0]
   287ba:	4623      	mov	r3, r4
   287bc:	aaac      	add	r2, sp, #688	; 0x2b0
   287be:	a9c4      	add	r1, sp, #784	; 0x310
   287c0:	4608      	mov	r0, r1
   287c2:	f7f7 ff57 	bl	20674 <sub_mod_n>
   287c6:	9700      	str	r7, [sp, #0]
   287c8:	4623      	mov	r3, r4
   287ca:	aab8      	add	r2, sp, #736	; 0x2e0
   287cc:	a9d0      	add	r1, sp, #832	; 0x340
   287ce:	4608      	mov	r0, r1
   287d0:	f7f7 ff50 	bl	20674 <sub_mod_n>
   287d4:	f8cd 9000 	str.w	r9, [sp]
   287d8:	4623      	mov	r3, r4
   287da:	aadc      	add	r2, sp, #880	; 0x370
   287dc:	a9c4      	add	r1, sp, #784	; 0x310
   287de:	4608      	mov	r0, r1
   287e0:	f7fb fdb8 	bl	24354 <mul_mont_384x>
   287e4:	9700      	str	r7, [sp, #0]
   287e6:	4623      	mov	r3, r4
   287e8:	aa4c      	add	r2, sp, #304	; 0x130
   287ea:	a9c4      	add	r1, sp, #784	; 0x310
   287ec:	4608      	mov	r0, r1
   287ee:	f7f7 ff41 	bl	20674 <sub_mod_n>
   287f2:	9700      	str	r7, [sp, #0]
   287f4:	4623      	mov	r3, r4
   287f6:	aa58      	add	r2, sp, #352	; 0x160
   287f8:	a9d0      	add	r1, sp, #832	; 0x340
   287fa:	4608      	mov	r0, r1
   287fc:	f7f7 ff3a 	bl	20674 <sub_mod_n>
   28800:	9700      	str	r7, [sp, #0]
   28802:	4623      	mov	r3, r4
   28804:	aa4c      	add	r2, sp, #304	; 0x130
   28806:	a9c4      	add	r1, sp, #784	; 0x310
   28808:	4608      	mov	r0, r1
   2880a:	f7f7 ff33 	bl	20674 <sub_mod_n>
   2880e:	9700      	str	r7, [sp, #0]
   28810:	4623      	mov	r3, r4
   28812:	aa58      	add	r2, sp, #352	; 0x160
   28814:	a9d0      	add	r1, sp, #832	; 0x340
   28816:	4608      	mov	r0, r1
   28818:	f7f7 ff2c 	bl	20674 <sub_mod_n>
   2881c:	9700      	str	r7, [sp, #0]
   2881e:	4623      	mov	r3, r4
   28820:	465a      	mov	r2, fp
   28822:	4651      	mov	r1, sl
   28824:	a8dc      	add	r0, sp, #880	; 0x370
   28826:	f7f8 fa7b 	bl	20d20 <add_mod_n>
   2882a:	9700      	str	r7, [sp, #0]
   2882c:	4623      	mov	r3, r4
   2882e:	f105 02f0 	add.w	r2, r5, #240	; 0xf0
   28832:	f106 01f0 	add.w	r1, r6, #240	; 0xf0
   28836:	a8e8      	add	r0, sp, #928	; 0x3a0
   28838:	f7f8 fa72 	bl	20d20 <add_mod_n>
   2883c:	464b      	mov	r3, r9
   2883e:	4622      	mov	r2, r4
   28840:	a9dc      	add	r1, sp, #880	; 0x370
   28842:	4608      	mov	r0, r1
   28844:	f7ff f814 	bl	27870 <sqr_mont_384x>
   28848:	9700      	str	r7, [sp, #0]
   2884a:	4623      	mov	r3, r4
   2884c:	aa94      	add	r2, sp, #592	; 0x250
   2884e:	a9dc      	add	r1, sp, #880	; 0x370
   28850:	4608      	mov	r0, r1
   28852:	f7f7 ff0f 	bl	20674 <sub_mod_n>
   28856:	9700      	str	r7, [sp, #0]
   28858:	4623      	mov	r3, r4
   2885a:	aaa0      	add	r2, sp, #640	; 0x280
   2885c:	a9e8      	add	r1, sp, #928	; 0x3a0
   2885e:	4608      	mov	r0, r1
   28860:	f7f7 ff08 	bl	20674 <sub_mod_n>
   28864:	9700      	str	r7, [sp, #0]
   28866:	4623      	mov	r3, r4
   28868:	aa7c      	add	r2, sp, #496	; 0x1f0
   2886a:	a9dc      	add	r1, sp, #880	; 0x370
   2886c:	4608      	mov	r0, r1
   2886e:	f7f7 ff01 	bl	20674 <sub_mod_n>
   28872:	9700      	str	r7, [sp, #0]
   28874:	4623      	mov	r3, r4
   28876:	aa88      	add	r2, sp, #544	; 0x220
   28878:	a9e8      	add	r1, sp, #928	; 0x3a0
   2887a:	4608      	mov	r0, r1
   2887c:	f7f7 fefa 	bl	20674 <sub_mod_n>
   28880:	f8cd 9000 	str.w	r9, [sp]
   28884:	4623      	mov	r3, r4
   28886:	aa34      	add	r2, sp, #208	; 0xd0
   28888:	a9dc      	add	r1, sp, #880	; 0x370
   2888a:	4608      	mov	r0, r1
   2888c:	f7fb fd62 	bl	24354 <mul_mont_384x>
   28890:	f108 33ff 	add.w	r3, r8, #4294967295
   28894:	ea23 0808 	bic.w	r8, r3, r8
   28898:	ea4f 78e8 	mov.w	r8, r8, asr #31
   2889c:	3e04      	subs	r6, #4
   2889e:	acac      	add	r4, sp, #688	; 0x2b0
   288a0:	aff4      	add	r7, sp, #976	; 0x3d0
   288a2:	4622      	mov	r2, r4
   288a4:	6811      	ldr	r1, [r2, #0]
   288a6:	f856 3f04 	ldr.w	r3, [r6, #4]!
   288aa:	404b      	eors	r3, r1
   288ac:	ea03 0308 	and.w	r3, r3, r8
   288b0:	404b      	eors	r3, r1
   288b2:	f842 3b04 	str.w	r3, [r2], #4
   288b6:	4297      	cmp	r7, r2
   288b8:	d1f4      	bne.n	288a4 <POINTonE2_add+0x2c8>
   288ba:	9b02      	ldr	r3, [sp, #8]
   288bc:	4259      	negs	r1, r3
   288be:	3d04      	subs	r5, #4
   288c0:	9b03      	ldr	r3, [sp, #12]
   288c2:	1f18      	subs	r0, r3, #4
   288c4:	f854 2b04 	ldr.w	r2, [r4], #4
   288c8:	f855 3f04 	ldr.w	r3, [r5, #4]!
   288cc:	4053      	eors	r3, r2
   288ce:	400b      	ands	r3, r1
   288d0:	4053      	eors	r3, r2
   288d2:	f840 3f04 	str.w	r3, [r0, #4]!
   288d6:	42a7      	cmp	r7, r4
   288d8:	d1f4      	bne.n	288c4 <POINTonE2_add+0x2e8>
   288da:	f50d 7d75 	add.w	sp, sp, #980	; 0x3d4
   288de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   288e2:	bf00      	nop
   288e4:	fffcfffd 	.word	0xfffcfffd
   288e8:	00038688 	.word	0x00038688

000288ec <POINTonE2_double>:
   288ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   288f0:	b0cb      	sub	sp, #300	; 0x12c
   288f2:	4606      	mov	r6, r0
   288f4:	460f      	mov	r7, r1
   288f6:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 28aa8 <POINTonE2_double+0x1bc>
   288fa:	4c6c      	ldr	r4, [pc, #432]	; (28aac <POINTonE2_double+0x1c0>)
   288fc:	4643      	mov	r3, r8
   288fe:	4622      	mov	r2, r4
   28900:	a832      	add	r0, sp, #200	; 0xc8
   28902:	f7fe ffb5 	bl	27870 <sqr_mont_384x>
   28906:	f107 0b60 	add.w	fp, r7, #96	; 0x60
   2890a:	4643      	mov	r3, r8
   2890c:	4622      	mov	r2, r4
   2890e:	4659      	mov	r1, fp
   28910:	a81a      	add	r0, sp, #104	; 0x68
   28912:	f7fe ffad 	bl	27870 <sqr_mont_384x>
   28916:	4643      	mov	r3, r8
   28918:	4622      	mov	r2, r4
   2891a:	a91a      	add	r1, sp, #104	; 0x68
   2891c:	a802      	add	r0, sp, #8
   2891e:	f7fe ffa7 	bl	27870 <sqr_mont_384x>
   28922:	250c      	movs	r5, #12
   28924:	9500      	str	r5, [sp, #0]
   28926:	4623      	mov	r3, r4
   28928:	463a      	mov	r2, r7
   2892a:	a91a      	add	r1, sp, #104	; 0x68
   2892c:	4608      	mov	r0, r1
   2892e:	f7f8 f9f7 	bl	20d20 <add_mod_n>
   28932:	9500      	str	r5, [sp, #0]
   28934:	4623      	mov	r3, r4
   28936:	f107 0230 	add.w	r2, r7, #48	; 0x30
   2893a:	a926      	add	r1, sp, #152	; 0x98
   2893c:	4608      	mov	r0, r1
   2893e:	f7f8 f9ef 	bl	20d20 <add_mod_n>
   28942:	4643      	mov	r3, r8
   28944:	4622      	mov	r2, r4
   28946:	a91a      	add	r1, sp, #104	; 0x68
   28948:	4608      	mov	r0, r1
   2894a:	f7fe ff91 	bl	27870 <sqr_mont_384x>
   2894e:	9500      	str	r5, [sp, #0]
   28950:	4623      	mov	r3, r4
   28952:	aa32      	add	r2, sp, #200	; 0xc8
   28954:	a91a      	add	r1, sp, #104	; 0x68
   28956:	4608      	mov	r0, r1
   28958:	f7f7 fe8c 	bl	20674 <sub_mod_n>
   2895c:	9500      	str	r5, [sp, #0]
   2895e:	4623      	mov	r3, r4
   28960:	aa3e      	add	r2, sp, #248	; 0xf8
   28962:	a926      	add	r1, sp, #152	; 0x98
   28964:	4608      	mov	r0, r1
   28966:	f7f7 fe85 	bl	20674 <sub_mod_n>
   2896a:	9500      	str	r5, [sp, #0]
   2896c:	4623      	mov	r3, r4
   2896e:	aa02      	add	r2, sp, #8
   28970:	a91a      	add	r1, sp, #104	; 0x68
   28972:	4608      	mov	r0, r1
   28974:	f7f7 fe7e 	bl	20674 <sub_mod_n>
   28978:	9500      	str	r5, [sp, #0]
   2897a:	4623      	mov	r3, r4
   2897c:	aa0e      	add	r2, sp, #56	; 0x38
   2897e:	a926      	add	r1, sp, #152	; 0x98
   28980:	4608      	mov	r0, r1
   28982:	f7f7 fe77 	bl	20674 <sub_mod_n>
   28986:	9500      	str	r5, [sp, #0]
   28988:	4623      	mov	r3, r4
   2898a:	aa1a      	add	r2, sp, #104	; 0x68
   2898c:	4611      	mov	r1, r2
   2898e:	4610      	mov	r0, r2
   28990:	f7f8 f9c6 	bl	20d20 <add_mod_n>
   28994:	9500      	str	r5, [sp, #0]
   28996:	4623      	mov	r3, r4
   28998:	aa26      	add	r2, sp, #152	; 0x98
   2899a:	4611      	mov	r1, r2
   2899c:	4610      	mov	r0, r2
   2899e:	f7f8 f9bf 	bl	20d20 <add_mod_n>
   289a2:	462b      	mov	r3, r5
   289a4:	4622      	mov	r2, r4
   289a6:	a932      	add	r1, sp, #200	; 0xc8
   289a8:	4608      	mov	r0, r1
   289aa:	f7f8 fa41 	bl	20e30 <mul_by_3_mod_n>
   289ae:	462b      	mov	r3, r5
   289b0:	4622      	mov	r2, r4
   289b2:	a93e      	add	r1, sp, #248	; 0xf8
   289b4:	4608      	mov	r0, r1
   289b6:	f7f8 fa3b 	bl	20e30 <mul_by_3_mod_n>
   289ba:	4643      	mov	r3, r8
   289bc:	4622      	mov	r2, r4
   289be:	a932      	add	r1, sp, #200	; 0xc8
   289c0:	4630      	mov	r0, r6
   289c2:	f7fe ff55 	bl	27870 <sqr_mont_384x>
   289c6:	9500      	str	r5, [sp, #0]
   289c8:	4623      	mov	r3, r4
   289ca:	aa1a      	add	r2, sp, #104	; 0x68
   289cc:	4631      	mov	r1, r6
   289ce:	4630      	mov	r0, r6
   289d0:	f7f7 fe50 	bl	20674 <sub_mod_n>
   289d4:	f106 0930 	add.w	r9, r6, #48	; 0x30
   289d8:	9500      	str	r5, [sp, #0]
   289da:	4623      	mov	r3, r4
   289dc:	aa26      	add	r2, sp, #152	; 0x98
   289de:	4649      	mov	r1, r9
   289e0:	4648      	mov	r0, r9
   289e2:	f7f7 fe47 	bl	20674 <sub_mod_n>
   289e6:	9500      	str	r5, [sp, #0]
   289e8:	4623      	mov	r3, r4
   289ea:	aa1a      	add	r2, sp, #104	; 0x68
   289ec:	4631      	mov	r1, r6
   289ee:	4630      	mov	r0, r6
   289f0:	f7f7 fe40 	bl	20674 <sub_mod_n>
   289f4:	9500      	str	r5, [sp, #0]
   289f6:	4623      	mov	r3, r4
   289f8:	aa26      	add	r2, sp, #152	; 0x98
   289fa:	4649      	mov	r1, r9
   289fc:	4648      	mov	r0, r9
   289fe:	f7f7 fe39 	bl	20674 <sub_mod_n>
   28a02:	f106 0ac0 	add.w	sl, r6, #192	; 0xc0
   28a06:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
   28a0a:	9500      	str	r5, [sp, #0]
   28a0c:	4623      	mov	r3, r4
   28a0e:	460a      	mov	r2, r1
   28a10:	4650      	mov	r0, sl
   28a12:	f7f8 f985 	bl	20d20 <add_mod_n>
   28a16:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
   28a1a:	9500      	str	r5, [sp, #0]
   28a1c:	4623      	mov	r3, r4
   28a1e:	460a      	mov	r2, r1
   28a20:	f106 00f0 	add.w	r0, r6, #240	; 0xf0
   28a24:	f7f8 f97c 	bl	20d20 <add_mod_n>
   28a28:	f8cd 8000 	str.w	r8, [sp]
   28a2c:	4623      	mov	r3, r4
   28a2e:	465a      	mov	r2, fp
   28a30:	4651      	mov	r1, sl
   28a32:	4650      	mov	r0, sl
   28a34:	f7fb fc8e 	bl	24354 <mul_mont_384x>
   28a38:	9500      	str	r5, [sp, #0]
   28a3a:	4623      	mov	r3, r4
   28a3c:	2203      	movs	r2, #3
   28a3e:	a902      	add	r1, sp, #8
   28a40:	4608      	mov	r0, r1
   28a42:	f7f8 fa95 	bl	20f70 <lshift_mod_n>
   28a46:	9500      	str	r5, [sp, #0]
   28a48:	4623      	mov	r3, r4
   28a4a:	2203      	movs	r2, #3
   28a4c:	a90e      	add	r1, sp, #56	; 0x38
   28a4e:	4608      	mov	r0, r1
   28a50:	f7f8 fa8e 	bl	20f70 <lshift_mod_n>
   28a54:	f106 0760 	add.w	r7, r6, #96	; 0x60
   28a58:	9500      	str	r5, [sp, #0]
   28a5a:	4623      	mov	r3, r4
   28a5c:	4632      	mov	r2, r6
   28a5e:	a91a      	add	r1, sp, #104	; 0x68
   28a60:	4638      	mov	r0, r7
   28a62:	f7f7 fe07 	bl	20674 <sub_mod_n>
   28a66:	3690      	adds	r6, #144	; 0x90
   28a68:	9500      	str	r5, [sp, #0]
   28a6a:	4623      	mov	r3, r4
   28a6c:	464a      	mov	r2, r9
   28a6e:	a926      	add	r1, sp, #152	; 0x98
   28a70:	4630      	mov	r0, r6
   28a72:	f7f7 fdff 	bl	20674 <sub_mod_n>
   28a76:	f8cd 8000 	str.w	r8, [sp]
   28a7a:	4623      	mov	r3, r4
   28a7c:	aa32      	add	r2, sp, #200	; 0xc8
   28a7e:	4639      	mov	r1, r7
   28a80:	4638      	mov	r0, r7
   28a82:	f7fb fc67 	bl	24354 <mul_mont_384x>
   28a86:	9500      	str	r5, [sp, #0]
   28a88:	4623      	mov	r3, r4
   28a8a:	aa02      	add	r2, sp, #8
   28a8c:	4639      	mov	r1, r7
   28a8e:	4638      	mov	r0, r7
   28a90:	f7f7 fdf0 	bl	20674 <sub_mod_n>
   28a94:	9500      	str	r5, [sp, #0]
   28a96:	4623      	mov	r3, r4
   28a98:	aa0e      	add	r2, sp, #56	; 0x38
   28a9a:	4631      	mov	r1, r6
   28a9c:	4630      	mov	r0, r6
   28a9e:	f7f7 fde9 	bl	20674 <sub_mod_n>
   28aa2:	b04b      	add	sp, #300	; 0x12c
   28aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28aa8:	fffcfffd 	.word	0xfffcfffd
   28aac:	00038688 	.word	0x00038688

00028ab0 <POINTonE2_precompute_w4>:
   28ab0:	b570      	push	{r4, r5, r6, lr}
   28ab2:	4606      	mov	r6, r0
   28ab4:	1f0b      	subs	r3, r1, #4
   28ab6:	1f02      	subs	r2, r0, #4
   28ab8:	f501 708e 	add.w	r0, r1, #284	; 0x11c
   28abc:	f853 4f04 	ldr.w	r4, [r3, #4]!
   28ac0:	f842 4f04 	str.w	r4, [r2, #4]!
   28ac4:	4283      	cmp	r3, r0
   28ac6:	d1f9      	bne.n	28abc <POINTonE2_precompute_w4+0xc>
   28ac8:	f506 7090 	add.w	r0, r6, #288	; 0x120
   28acc:	f7ff ff0e 	bl	288ec <POINTonE2_double>
   28ad0:	f506 7510 	add.w	r5, r6, #576	; 0x240
   28ad4:	4634      	mov	r4, r6
   28ad6:	f506 7658 	add.w	r6, r6, #864	; 0x360
   28ada:	4622      	mov	r2, r4
   28adc:	f504 7490 	add.w	r4, r4, #288	; 0x120
   28ae0:	4621      	mov	r1, r4
   28ae2:	4628      	mov	r0, r5
   28ae4:	f7ff fd7a 	bl	285dc <POINTonE2_add>
   28ae8:	4621      	mov	r1, r4
   28aea:	f505 7090 	add.w	r0, r5, #288	; 0x120
   28aee:	f7ff fefd 	bl	288ec <POINTonE2_double>
   28af2:	f505 7510 	add.w	r5, r5, #576	; 0x240
   28af6:	42b4      	cmp	r4, r6
   28af8:	d1ef      	bne.n	28ada <POINTonE2_precompute_w4+0x2a>
   28afa:	bd70      	pop	{r4, r5, r6, pc}

00028afc <POINTonE2_dadd>:
   28afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28b00:	f5ad 7d5d 	sub.w	sp, sp, #884	; 0x374
   28b04:	9003      	str	r0, [sp, #12]
   28b06:	460c      	mov	r4, r1
   28b08:	4615      	mov	r5, r2
   28b0a:	461e      	mov	r6, r3
   28b0c:	4fc8      	ldr	r7, [pc, #800]	; (28e30 <POINTonE2_dadd+0x334>)
   28b0e:	f04f 090c 	mov.w	r9, #12
   28b12:	f8cd 9000 	str.w	r9, [sp]
   28b16:	463b      	mov	r3, r7
   28b18:	460a      	mov	r2, r1
   28b1a:	a834      	add	r0, sp, #208	; 0xd0
   28b1c:	f7f8 f900 	bl	20d20 <add_mod_n>
   28b20:	f104 0130 	add.w	r1, r4, #48	; 0x30
   28b24:	f8cd 9000 	str.w	r9, [sp]
   28b28:	463b      	mov	r3, r7
   28b2a:	460a      	mov	r2, r1
   28b2c:	a840      	add	r0, sp, #256	; 0x100
   28b2e:	f7f8 f8f7 	bl	20d20 <add_mod_n>
   28b32:	4bc0      	ldr	r3, [pc, #768]	; (28e34 <POINTonE2_dadd+0x338>)
   28b34:	463a      	mov	r2, r7
   28b36:	4621      	mov	r1, r4
   28b38:	a81c      	add	r0, sp, #112	; 0x70
   28b3a:	f7fe fe99 	bl	27870 <sqr_mont_384x>
   28b3e:	464b      	mov	r3, r9
   28b40:	463a      	mov	r2, r7
   28b42:	a91c      	add	r1, sp, #112	; 0x70
   28b44:	4608      	mov	r0, r1
   28b46:	f7f8 f973 	bl	20e30 <mul_by_3_mod_n>
   28b4a:	464b      	mov	r3, r9
   28b4c:	463a      	mov	r2, r7
   28b4e:	a928      	add	r1, sp, #160	; 0xa0
   28b50:	4608      	mov	r0, r1
   28b52:	f7f8 f96d 	bl	20e30 <mul_by_3_mod_n>
   28b56:	f104 0860 	add.w	r8, r4, #96	; 0x60
   28b5a:	f8cd 9000 	str.w	r9, [sp]
   28b5e:	463b      	mov	r3, r7
   28b60:	4642      	mov	r2, r8
   28b62:	4641      	mov	r1, r8
   28b64:	a804      	add	r0, sp, #16
   28b66:	f7f8 f8db 	bl	20d20 <add_mod_n>
   28b6a:	f104 0190 	add.w	r1, r4, #144	; 0x90
   28b6e:	f8cd 9000 	str.w	r9, [sp]
   28b72:	463b      	mov	r3, r7
   28b74:	460a      	mov	r2, r1
   28b76:	a810      	add	r0, sp, #64	; 0x40
   28b78:	f7f8 f8d2 	bl	20d20 <add_mod_n>
   28b7c:	f105 09c0 	add.w	r9, r5, #192	; 0xc0
   28b80:	f105 03bc 	add.w	r3, r5, #188	; 0xbc
   28b84:	f505 708e 	add.w	r0, r5, #284	; 0x11c
   28b88:	2200      	movs	r2, #0
   28b8a:	f853 1f04 	ldr.w	r1, [r3, #4]!
   28b8e:	430a      	orrs	r2, r1
   28b90:	4283      	cmp	r3, r0
   28b92:	d1fa      	bne.n	28b8a <POINTonE2_dadd+0x8e>
   28b94:	1e53      	subs	r3, r2, #1
   28b96:	ea23 0202 	bic.w	r2, r3, r2
   28b9a:	0fd3      	lsrs	r3, r2, #31
   28b9c:	9302      	str	r3, [sp, #8]
   28b9e:	f8df b294 	ldr.w	fp, [pc, #660]	; 28e34 <POINTonE2_dadd+0x338>
   28ba2:	f8df a28c 	ldr.w	sl, [pc, #652]	; 28e30 <POINTonE2_dadd+0x334>
   28ba6:	465b      	mov	r3, fp
   28ba8:	4652      	mov	r2, sl
   28baa:	4649      	mov	r1, r9
   28bac:	a894      	add	r0, sp, #592	; 0x250
   28bae:	f7fe fe5f 	bl	27870 <sqr_mont_384x>
   28bb2:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
   28bb6:	f8cd b000 	str.w	fp, [sp]
   28bba:	4653      	mov	r3, sl
   28bbc:	464a      	mov	r2, r9
   28bbe:	4639      	mov	r1, r7
   28bc0:	a8c4      	add	r0, sp, #784	; 0x310
   28bc2:	f7fb fbc7 	bl	24354 <mul_mont_384x>
   28bc6:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
   28bca:	f504 708e 	add.w	r0, r4, #284	; 0x11c
   28bce:	2200      	movs	r2, #0
   28bd0:	f853 1f04 	ldr.w	r1, [r3, #4]!
   28bd4:	430a      	orrs	r2, r1
   28bd6:	4283      	cmp	r3, r0
   28bd8:	d1fa      	bne.n	28bd0 <POINTonE2_dadd+0xd4>
   28bda:	1e53      	subs	r3, r2, #1
   28bdc:	ea23 0202 	bic.w	r2, r3, r2
   28be0:	ea4f 7bd2 	mov.w	fp, r2, lsr #31
   28be4:	4b93      	ldr	r3, [pc, #588]	; (28e34 <POINTonE2_dadd+0x338>)
   28be6:	4a92      	ldr	r2, [pc, #584]	; (28e30 <POINTonE2_dadd+0x334>)
   28be8:	4639      	mov	r1, r7
   28bea:	a84c      	add	r0, sp, #304	; 0x130
   28bec:	f7fe fe40 	bl	27870 <sqr_mont_384x>
   28bf0:	b1f6      	cbz	r6, 28c30 <POINTonE2_dadd+0x134>
   28bf2:	f8df a23c 	ldr.w	sl, [pc, #572]	; 28e30 <POINTonE2_dadd+0x334>
   28bf6:	4b8f      	ldr	r3, [pc, #572]	; (28e34 <POINTonE2_dadd+0x338>)
   28bf8:	4652      	mov	r2, sl
   28bfa:	a94c      	add	r1, sp, #304	; 0x130
   28bfc:	a8ac      	add	r0, sp, #688	; 0x2b0
   28bfe:	f7fe fe37 	bl	27870 <sqr_mont_384x>
   28c02:	4b8c      	ldr	r3, [pc, #560]	; (28e34 <POINTonE2_dadd+0x338>)
   28c04:	9300      	str	r3, [sp, #0]
   28c06:	4653      	mov	r3, sl
   28c08:	4632      	mov	r2, r6
   28c0a:	a9ac      	add	r1, sp, #688	; 0x2b0
   28c0c:	4608      	mov	r0, r1
   28c0e:	f7fb fba1 	bl	24354 <mul_mont_384x>
   28c12:	260c      	movs	r6, #12
   28c14:	9600      	str	r6, [sp, #0]
   28c16:	4653      	mov	r3, sl
   28c18:	aaac      	add	r2, sp, #688	; 0x2b0
   28c1a:	a91c      	add	r1, sp, #112	; 0x70
   28c1c:	4608      	mov	r0, r1
   28c1e:	f7f8 f87f 	bl	20d20 <add_mod_n>
   28c22:	9600      	str	r6, [sp, #0]
   28c24:	4653      	mov	r3, sl
   28c26:	aab8      	add	r2, sp, #736	; 0x2e0
   28c28:	a928      	add	r1, sp, #160	; 0xa0
   28c2a:	4608      	mov	r0, r1
   28c2c:	f7f8 f878 	bl	20d20 <add_mod_n>
   28c30:	4e7f      	ldr	r6, [pc, #508]	; (28e30 <POINTonE2_dadd+0x334>)
   28c32:	f8df a200 	ldr.w	sl, [pc, #512]	; 28e34 <POINTonE2_dadd+0x338>
   28c36:	f8cd a000 	str.w	sl, [sp]
   28c3a:	4633      	mov	r3, r6
   28c3c:	464a      	mov	r2, r9
   28c3e:	4641      	mov	r1, r8
   28c40:	a8ac      	add	r0, sp, #688	; 0x2b0
   28c42:	f7fb fb87 	bl	24354 <mul_mont_384x>
   28c46:	f8cd a000 	str.w	sl, [sp]
   28c4a:	4633      	mov	r3, r6
   28c4c:	aa94      	add	r2, sp, #592	; 0x250
   28c4e:	a9ac      	add	r1, sp, #688	; 0x2b0
   28c50:	4608      	mov	r0, r1
   28c52:	f7fb fb7f 	bl	24354 <mul_mont_384x>
   28c56:	f8cd a000 	str.w	sl, [sp]
   28c5a:	4633      	mov	r3, r6
   28c5c:	463a      	mov	r2, r7
   28c5e:	f105 0160 	add.w	r1, r5, #96	; 0x60
   28c62:	a864      	add	r0, sp, #400	; 0x190
   28c64:	f7fb fb76 	bl	24354 <mul_mont_384x>
   28c68:	f8cd a000 	str.w	sl, [sp]
   28c6c:	4633      	mov	r3, r6
   28c6e:	aa4c      	add	r2, sp, #304	; 0x130
   28c70:	a964      	add	r1, sp, #400	; 0x190
   28c72:	4608      	mov	r0, r1
   28c74:	f7fb fb6e 	bl	24354 <mul_mont_384x>
   28c78:	270c      	movs	r7, #12
   28c7a:	9700      	str	r7, [sp, #0]
   28c7c:	4633      	mov	r3, r6
   28c7e:	aaac      	add	r2, sp, #688	; 0x2b0
   28c80:	a964      	add	r1, sp, #400	; 0x190
   28c82:	4608      	mov	r0, r1
   28c84:	f7f7 fcf6 	bl	20674 <sub_mod_n>
   28c88:	9700      	str	r7, [sp, #0]
   28c8a:	4633      	mov	r3, r6
   28c8c:	aab8      	add	r2, sp, #736	; 0x2e0
   28c8e:	a970      	add	r1, sp, #448	; 0x1c0
   28c90:	4608      	mov	r0, r1
   28c92:	f7f7 fcef 	bl	20674 <sub_mod_n>
   28c96:	f8cd a000 	str.w	sl, [sp]
   28c9a:	4633      	mov	r3, r6
   28c9c:	4622      	mov	r2, r4
   28c9e:	a994      	add	r1, sp, #592	; 0x250
   28ca0:	4608      	mov	r0, r1
   28ca2:	f7fb fb57 	bl	24354 <mul_mont_384x>
   28ca6:	f8cd a000 	str.w	sl, [sp]
   28caa:	4633      	mov	r3, r6
   28cac:	462a      	mov	r2, r5
   28cae:	a94c      	add	r1, sp, #304	; 0x130
   28cb0:	4608      	mov	r0, r1
   28cb2:	f7fb fb4f 	bl	24354 <mul_mont_384x>
   28cb6:	9700      	str	r7, [sp, #0]
   28cb8:	4633      	mov	r3, r6
   28cba:	aa94      	add	r2, sp, #592	; 0x250
   28cbc:	a94c      	add	r1, sp, #304	; 0x130
   28cbe:	a87c      	add	r0, sp, #496	; 0x1f0
   28cc0:	f7f8 f82e 	bl	20d20 <add_mod_n>
   28cc4:	9700      	str	r7, [sp, #0]
   28cc6:	4633      	mov	r3, r6
   28cc8:	aaa0      	add	r2, sp, #640	; 0x280
   28cca:	a958      	add	r1, sp, #352	; 0x160
   28ccc:	a888      	add	r0, sp, #544	; 0x220
   28cce:	f7f8 f827 	bl	20d20 <add_mod_n>
   28cd2:	9700      	str	r7, [sp, #0]
   28cd4:	4633      	mov	r3, r6
   28cd6:	aa94      	add	r2, sp, #592	; 0x250
   28cd8:	a94c      	add	r1, sp, #304	; 0x130
   28cda:	4608      	mov	r0, r1
   28cdc:	f7f7 fcca 	bl	20674 <sub_mod_n>
   28ce0:	9700      	str	r7, [sp, #0]
   28ce2:	4633      	mov	r3, r6
   28ce4:	aaa0      	add	r2, sp, #640	; 0x280
   28ce6:	a958      	add	r1, sp, #352	; 0x160
   28ce8:	4608      	mov	r0, r1
   28cea:	f7f7 fcc3 	bl	20674 <sub_mod_n>
   28cee:	aa4b      	add	r2, sp, #300	; 0x12c
   28cf0:	ae7b      	add	r6, sp, #492	; 0x1ec
   28cf2:	4613      	mov	r3, r2
   28cf4:	2100      	movs	r1, #0
   28cf6:	f853 0f04 	ldr.w	r0, [r3, #4]!
   28cfa:	4301      	orrs	r1, r0
   28cfc:	42b3      	cmp	r3, r6
   28cfe:	d1fa      	bne.n	28cf6 <POINTonE2_dadd+0x1fa>
   28d00:	1e48      	subs	r0, r1, #1
   28d02:	ea20 0001 	bic.w	r0, r0, r1
   28d06:	17c0      	asrs	r0, r0, #31
   28d08:	3c04      	subs	r4, #4
   28d0a:	ae94      	add	r6, sp, #592	; 0x250
   28d0c:	afdc      	add	r7, sp, #880	; 0x370
   28d0e:	4631      	mov	r1, r6
   28d10:	46a4      	mov	ip, r4
   28d12:	4696      	mov	lr, r2
   28d14:	680a      	ldr	r2, [r1, #0]
   28d16:	f85c 3f04 	ldr.w	r3, [ip, #4]!
   28d1a:	4053      	eors	r3, r2
   28d1c:	4003      	ands	r3, r0
   28d1e:	4053      	eors	r3, r2
   28d20:	f841 3b04 	str.w	r3, [r1], #4
   28d24:	42b9      	cmp	r1, r7
   28d26:	d1f5      	bne.n	28d14 <POINTonE2_dadd+0x218>
   28d28:	4672      	mov	r2, lr
   28d2a:	a903      	add	r1, sp, #12
   28d2c:	f50d 7c96 	add.w	ip, sp, #300	; 0x12c
   28d30:	4686      	mov	lr, r0
   28d32:	f852 0f04 	ldr.w	r0, [r2, #4]!
   28d36:	f851 3f04 	ldr.w	r3, [r1, #4]!
   28d3a:	4043      	eors	r3, r0
   28d3c:	ea03 030e 	and.w	r3, r3, lr
   28d40:	4043      	eors	r3, r0
   28d42:	6013      	str	r3, [r2, #0]
   28d44:	458c      	cmp	ip, r1
   28d46:	d1f4      	bne.n	28d32 <POINTonE2_dadd+0x236>
   28d48:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 28e30 <POINTonE2_dadd+0x334>
   28d4c:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 28e34 <POINTonE2_dadd+0x338>
   28d50:	f8cd 9000 	str.w	r9, [sp]
   28d54:	4643      	mov	r3, r8
   28d56:	aa4c      	add	r2, sp, #304	; 0x130
   28d58:	a9c4      	add	r1, sp, #784	; 0x310
   28d5a:	4608      	mov	r0, r1
   28d5c:	f7fb fafa 	bl	24354 <mul_mont_384x>
   28d60:	464b      	mov	r3, r9
   28d62:	4642      	mov	r2, r8
   28d64:	a94c      	add	r1, sp, #304	; 0x130
   28d66:	a804      	add	r0, sp, #16
   28d68:	f7fe fd82 	bl	27870 <sqr_mont_384x>
   28d6c:	f8cd 9000 	str.w	r9, [sp]
   28d70:	4643      	mov	r3, r8
   28d72:	aa4c      	add	r2, sp, #304	; 0x130
   28d74:	a904      	add	r1, sp, #16
   28d76:	a81c      	add	r0, sp, #112	; 0x70
   28d78:	f7fb faec 	bl	24354 <mul_mont_384x>
   28d7c:	f8cd 9000 	str.w	r9, [sp]
   28d80:	4643      	mov	r3, r8
   28d82:	aaac      	add	r2, sp, #688	; 0x2b0
   28d84:	a91c      	add	r1, sp, #112	; 0x70
   28d86:	4608      	mov	r0, r1
   28d88:	f7fb fae4 	bl	24354 <mul_mont_384x>
   28d8c:	f8cd 9000 	str.w	r9, [sp]
   28d90:	4643      	mov	r3, r8
   28d92:	aa94      	add	r2, sp, #592	; 0x250
   28d94:	a904      	add	r1, sp, #16
   28d96:	a8ac      	add	r0, sp, #688	; 0x2b0
   28d98:	f7fb fadc 	bl	24354 <mul_mont_384x>
   28d9c:	f8cd 9000 	str.w	r9, [sp]
   28da0:	4643      	mov	r3, r8
   28da2:	aa7c      	add	r2, sp, #496	; 0x1f0
   28da4:	a904      	add	r1, sp, #16
   28da6:	4608      	mov	r0, r1
   28da8:	f7fb fad4 	bl	24354 <mul_mont_384x>
   28dac:	464b      	mov	r3, r9
   28dae:	4642      	mov	r2, r8
   28db0:	a964      	add	r1, sp, #400	; 0x190
   28db2:	a894      	add	r0, sp, #592	; 0x250
   28db4:	f7fe fd5c 	bl	27870 <sqr_mont_384x>
   28db8:	f04f 0a0c 	mov.w	sl, #12
   28dbc:	f8cd a000 	str.w	sl, [sp]
   28dc0:	4643      	mov	r3, r8
   28dc2:	aa04      	add	r2, sp, #16
   28dc4:	a994      	add	r1, sp, #592	; 0x250
   28dc6:	4608      	mov	r0, r1
   28dc8:	f7f7 fc54 	bl	20674 <sub_mod_n>
   28dcc:	f8cd a000 	str.w	sl, [sp]
   28dd0:	4643      	mov	r3, r8
   28dd2:	aa10      	add	r2, sp, #64	; 0x40
   28dd4:	a9a0      	add	r1, sp, #640	; 0x280
   28dd6:	4608      	mov	r0, r1
   28dd8:	f7f7 fc4c 	bl	20674 <sub_mod_n>
   28ddc:	f8cd a000 	str.w	sl, [sp]
   28de0:	4643      	mov	r3, r8
   28de2:	aa94      	add	r2, sp, #592	; 0x250
   28de4:	a9ac      	add	r1, sp, #688	; 0x2b0
   28de6:	4608      	mov	r0, r1
   28de8:	f7f7 fc44 	bl	20674 <sub_mod_n>
   28dec:	f8cd a000 	str.w	sl, [sp]
   28df0:	4643      	mov	r3, r8
   28df2:	aaa0      	add	r2, sp, #640	; 0x280
   28df4:	a9b8      	add	r1, sp, #736	; 0x2e0
   28df6:	4608      	mov	r0, r1
   28df8:	f7f7 fc3c 	bl	20674 <sub_mod_n>
   28dfc:	f8cd 9000 	str.w	r9, [sp]
   28e00:	4643      	mov	r3, r8
   28e02:	aa64      	add	r2, sp, #400	; 0x190
   28e04:	a9ac      	add	r1, sp, #688	; 0x2b0
   28e06:	4608      	mov	r0, r1
   28e08:	f7fb faa4 	bl	24354 <mul_mont_384x>
   28e0c:	f8cd a000 	str.w	sl, [sp]
   28e10:	4643      	mov	r3, r8
   28e12:	aa1c      	add	r2, sp, #112	; 0x70
   28e14:	a9ac      	add	r1, sp, #688	; 0x2b0
   28e16:	4608      	mov	r0, r1
   28e18:	f7f7 fc2c 	bl	20674 <sub_mod_n>
   28e1c:	f8cd a000 	str.w	sl, [sp]
   28e20:	4643      	mov	r3, r8
   28e22:	aa28      	add	r2, sp, #160	; 0xa0
   28e24:	a9b8      	add	r1, sp, #736	; 0x2e0
   28e26:	4608      	mov	r0, r1
   28e28:	f7f7 fc24 	bl	20674 <sub_mod_n>
   28e2c:	9b02      	ldr	r3, [sp, #8]
   28e2e:	e003      	b.n	28e38 <POINTonE2_dadd+0x33c>
   28e30:	00038688 	.word	0x00038688
   28e34:	fffcfffd 	.word	0xfffcfffd
   28e38:	4258      	negs	r0, r3
   28e3a:	4632      	mov	r2, r6
   28e3c:	6811      	ldr	r1, [r2, #0]
   28e3e:	f854 3f04 	ldr.w	r3, [r4, #4]!
   28e42:	404b      	eors	r3, r1
   28e44:	4003      	ands	r3, r0
   28e46:	404b      	eors	r3, r1
   28e48:	f842 3b04 	str.w	r3, [r2], #4
   28e4c:	42ba      	cmp	r2, r7
   28e4e:	d1f5      	bne.n	28e3c <POINTonE2_dadd+0x340>
   28e50:	f1cb 0200 	rsb	r2, fp, #0
   28e54:	3d04      	subs	r5, #4
   28e56:	9b03      	ldr	r3, [sp, #12]
   28e58:	1f18      	subs	r0, r3, #4
   28e5a:	f856 1b04 	ldr.w	r1, [r6], #4
   28e5e:	f855 3f04 	ldr.w	r3, [r5, #4]!
   28e62:	404b      	eors	r3, r1
   28e64:	4013      	ands	r3, r2
   28e66:	404b      	eors	r3, r1
   28e68:	f840 3f04 	str.w	r3, [r0, #4]!
   28e6c:	42be      	cmp	r6, r7
   28e6e:	d1f4      	bne.n	28e5a <POINTonE2_dadd+0x35e>
   28e70:	f50d 7d5d 	add.w	sp, sp, #884	; 0x374
   28e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00028e78 <POINTonE2s_mult_w4>:
   28e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28e7c:	b0cb      	sub	sp, #300	; 0x12c
   28e7e:	af00      	add	r7, sp, #0
   28e80:	4605      	mov	r5, r0
   28e82:	4616      	mov	r6, r2
   28e84:	603b      	str	r3, [r7, #0]
   28e86:	f8d7 8150 	ldr.w	r8, [r7, #336]	; 0x150
   28e8a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
   28e8e:	b37b      	cbz	r3, 28ef0 <POINTonE2s_mult_w4+0x78>
   28e90:	b176      	cbz	r6, 28eb0 <POINTonE2s_mult_w4+0x38>
   28e92:	f1a1 0a04 	sub.w	sl, r1, #4
   28e96:	f8d7 9154 	ldr.w	r9, [r7, #340]	; 0x154
   28e9a:	2400      	movs	r4, #0
   28e9c:	f85a 1f04 	ldr.w	r1, [sl, #4]!
   28ea0:	4648      	mov	r0, r9
   28ea2:	f7ff fe05 	bl	28ab0 <POINTonE2_precompute_w4>
   28ea6:	3401      	adds	r4, #1
   28ea8:	f509 6910 	add.w	r9, r9, #2304	; 0x900
   28eac:	42a6      	cmp	r6, r4
   28eae:	d1f5      	bne.n	28e9c <POINTonE2s_mult_w4+0x24>
   28eb0:	f008 0103 	and.w	r1, r8, #3
   28eb4:	1c4a      	adds	r2, r1, #1
   28eb6:	2301      	movs	r3, #1
   28eb8:	4093      	lsls	r3, r2
   28eba:	f103 3aff 	add.w	sl, r3, #4294967295
   28ebe:	4689      	mov	r9, r1
   28ec0:	ebb8 0801 	subs.w	r8, r8, r1
   28ec4:	d01d      	beq.n	28f02 <POINTonE2s_mult_w4+0x8a>
   28ec6:	f108 3bff 	add.w	fp, r8, #4294967295
   28eca:	4659      	mov	r1, fp
   28ecc:	683b      	ldr	r3, [r7, #0]
   28ece:	6818      	ldr	r0, [r3, #0]
   28ed0:	f7f7 fbb8 	bl	20644 <get_wval>
   28ed4:	2104      	movs	r1, #4
   28ed6:	ea00 000a 	and.w	r0, r0, sl
   28eda:	f7f7 fbbf 	bl	2065c <booth_encode>
   28ede:	4602      	mov	r2, r0
   28ee0:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
   28ee4:	4628      	mov	r0, r5
   28ee6:	f7f8 fe93 	bl	21c10 <POINTonE2_gather_booth_w4>
   28eea:	2401      	movs	r4, #1
   28eec:	464b      	mov	r3, r9
   28eee:	e021      	b.n	28f34 <POINTonE2s_mult_w4+0xbc>
   28ef0:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
   28ef4:	466a      	mov	r2, sp
   28ef6:	eba2 2303 	sub.w	r3, r2, r3, lsl #8
   28efa:	469d      	mov	sp, r3
   28efc:	f8c7 d154 	str.w	sp, [r7, #340]	; 0x154
   28f00:	e7c6      	b.n	28e90 <POINTonE2s_mult_w4+0x18>
   28f02:	683b      	ldr	r3, [r7, #0]
   28f04:	681b      	ldr	r3, [r3, #0]
   28f06:	7818      	ldrb	r0, [r3, #0]
   28f08:	2104      	movs	r1, #4
   28f0a:	ea0a 0040 	and.w	r0, sl, r0, lsl #1
   28f0e:	f7f7 fba5 	bl	2065c <booth_encode>
   28f12:	4602      	mov	r2, r0
   28f14:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
   28f18:	4628      	mov	r0, r5
   28f1a:	f7f8 fe79 	bl	21c10 <POINTonE2_gather_booth_w4>
   28f1e:	2401      	movs	r4, #1
   28f20:	e040      	b.n	28fa4 <POINTonE2s_mult_w4+0x12c>
   28f22:	f1ab 0204 	sub.w	r2, fp, #4
   28f26:	f04f 0a1f 	mov.w	sl, #31
   28f2a:	2304      	movs	r3, #4
   28f2c:	f1bb 0f03 	cmp.w	fp, #3
   28f30:	d036      	beq.n	28fa0 <POINTonE2s_mult_w4+0x128>
   28f32:	4693      	mov	fp, r2
   28f34:	42a6      	cmp	r6, r4
   28f36:	d92b      	bls.n	28f90 <POINTonE2s_mult_w4+0x118>
   28f38:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
   28f3c:	f109 39ff 	add.w	r9, r9, #4294967295
   28f40:	683a      	ldr	r2, [r7, #0]
   28f42:	eb02 0989 	add.w	r9, r2, r9, lsl #2
   28f46:	eb04 08c4 	add.w	r8, r4, r4, lsl #3
   28f4a:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
   28f4e:	eb02 2808 	add.w	r8, r2, r8, lsl #8
   28f52:	3301      	adds	r3, #1
   28f54:	607b      	str	r3, [r7, #4]
   28f56:	687a      	ldr	r2, [r7, #4]
   28f58:	4659      	mov	r1, fp
   28f5a:	f859 0f04 	ldr.w	r0, [r9, #4]!
   28f5e:	f7f7 fb71 	bl	20644 <get_wval>
   28f62:	2104      	movs	r1, #4
   28f64:	ea00 000a 	and.w	r0, r0, sl
   28f68:	f7f7 fb78 	bl	2065c <booth_encode>
   28f6c:	4602      	mov	r2, r0
   28f6e:	4641      	mov	r1, r8
   28f70:	f107 0008 	add.w	r0, r7, #8
   28f74:	f7f8 fe4c 	bl	21c10 <POINTonE2_gather_booth_w4>
   28f78:	2300      	movs	r3, #0
   28f7a:	f107 0208 	add.w	r2, r7, #8
   28f7e:	4629      	mov	r1, r5
   28f80:	4628      	mov	r0, r5
   28f82:	f7ff fdbb 	bl	28afc <POINTonE2_dadd>
   28f86:	3401      	adds	r4, #1
   28f88:	f508 6810 	add.w	r8, r8, #2304	; 0x900
   28f8c:	42a6      	cmp	r6, r4
   28f8e:	d1e2      	bne.n	28f56 <POINTonE2s_mult_w4+0xde>
   28f90:	2404      	movs	r4, #4
   28f92:	4629      	mov	r1, r5
   28f94:	4628      	mov	r0, r5
   28f96:	f7ff fca9 	bl	288ec <POINTonE2_double>
   28f9a:	3c01      	subs	r4, #1
   28f9c:	d1f9      	bne.n	28f92 <POINTonE2s_mult_w4+0x11a>
   28f9e:	e7c0      	b.n	28f22 <POINTonE2s_mult_w4+0xaa>
   28fa0:	f04f 0a1f 	mov.w	sl, #31
   28fa4:	42a6      	cmp	r6, r4
   28fa6:	d928      	bls.n	28ffa <POINTonE2s_mult_w4+0x182>
   28fa8:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
   28fac:	f109 39ff 	add.w	r9, r9, #4294967295
   28fb0:	683b      	ldr	r3, [r7, #0]
   28fb2:	eb03 0989 	add.w	r9, r3, r9, lsl #2
   28fb6:	eb04 08c4 	add.w	r8, r4, r4, lsl #3
   28fba:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
   28fbe:	eb03 2808 	add.w	r8, r3, r8, lsl #8
   28fc2:	f04f 0b04 	mov.w	fp, #4
   28fc6:	f859 3f04 	ldr.w	r3, [r9, #4]!
   28fca:	7818      	ldrb	r0, [r3, #0]
   28fcc:	4659      	mov	r1, fp
   28fce:	ea0a 0040 	and.w	r0, sl, r0, lsl #1
   28fd2:	f7f7 fb43 	bl	2065c <booth_encode>
   28fd6:	4602      	mov	r2, r0
   28fd8:	4641      	mov	r1, r8
   28fda:	f107 0008 	add.w	r0, r7, #8
   28fde:	f7f8 fe17 	bl	21c10 <POINTonE2_gather_booth_w4>
   28fe2:	2300      	movs	r3, #0
   28fe4:	f107 0208 	add.w	r2, r7, #8
   28fe8:	4629      	mov	r1, r5
   28fea:	4628      	mov	r0, r5
   28fec:	f7ff fd86 	bl	28afc <POINTonE2_dadd>
   28ff0:	3401      	adds	r4, #1
   28ff2:	f508 6810 	add.w	r8, r8, #2304	; 0x900
   28ff6:	42a6      	cmp	r6, r4
   28ff8:	d1e5      	bne.n	28fc6 <POINTonE2s_mult_w4+0x14e>
   28ffa:	f507 7796 	add.w	r7, r7, #300	; 0x12c
   28ffe:	46bd      	mov	sp, r7
   29000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00029004 <POINTonE2_mult_gls>:
   29004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29008:	f5ad 7d6a 	sub.w	sp, sp, #936	; 0x3a8
   2900c:	4606      	mov	r6, r0
   2900e:	460d      	mov	r5, r1
   29010:	f102 0c20 	add.w	ip, r2, #32
   29014:	2400      	movs	r4, #0
   29016:	43d0      	mvns	r0, r2
   29018:	eb00 030c 	add.w	r3, r0, ip
   2901c:	f81c 1d01 	ldrb.w	r1, [ip, #-1]!
   29020:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
   29024:	f023 0303 	bic.w	r3, r3, #3
   29028:	a9ea      	add	r1, sp, #936	; 0x3a8
   2902a:	440b      	add	r3, r1
   2902c:	f843 4c20 	str.w	r4, [r3, #-32]
   29030:	4562      	cmp	r2, ip
   29032:	d1f1      	bne.n	29018 <POINTonE2_mult_gls+0x14>
   29034:	ace2      	add	r4, sp, #904	; 0x388
   29036:	4620      	mov	r0, r4
   29038:	f7fd fc40 	bl	268bc <div_by_zz>
   2903c:	4620      	mov	r0, r4
   2903e:	f7fd fdd5 	bl	26bec <div_by_z>
   29042:	f50d 7a66 	add.w	sl, sp, #920	; 0x398
   29046:	4650      	mov	r0, sl
   29048:	f7fd fdd0 	bl	26bec <div_by_z>
   2904c:	af0a      	add	r7, sp, #40	; 0x28
   2904e:	4629      	mov	r1, r5
   29050:	4638      	mov	r0, r7
   29052:	f7fb f9cd 	bl	243f0 <psi>
   29056:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
   2905a:	4639      	mov	r1, r7
   2905c:	4648      	mov	r0, r9
   2905e:	f7fb f9c7 	bl	243f0 <psi>
   29062:	f50d 781a 	add.w	r8, sp, #616	; 0x268
   29066:	4649      	mov	r1, r9
   29068:	4640      	mov	r0, r8
   2906a:	f7fb f9c1 	bl	243f0 <psi>
   2906e:	2101      	movs	r1, #1
   29070:	4638      	mov	r0, r7
   29072:	f7f8 fdb3 	bl	21bdc <POINTonE2_cneg>
   29076:	2101      	movs	r1, #1
   29078:	4640      	mov	r0, r8
   2907a:	f7f8 fdaf 	bl	21bdc <POINTonE2_cneg>
   2907e:	9502      	str	r5, [sp, #8]
   29080:	9406      	str	r4, [sp, #24]
   29082:	9703      	str	r7, [sp, #12]
   29084:	abe4      	add	r3, sp, #912	; 0x390
   29086:	9307      	str	r3, [sp, #28]
   29088:	f8cd 9010 	str.w	r9, [sp, #16]
   2908c:	f8cd a020 	str.w	sl, [sp, #32]
   29090:	f8cd 8014 	str.w	r8, [sp, #20]
   29094:	abe8      	add	r3, sp, #928	; 0x3a0
   29096:	9309      	str	r3, [sp, #36]	; 0x24
   29098:	2300      	movs	r3, #0
   2909a:	9301      	str	r3, [sp, #4]
   2909c:	2340      	movs	r3, #64	; 0x40
   2909e:	9300      	str	r3, [sp, #0]
   290a0:	ab06      	add	r3, sp, #24
   290a2:	2204      	movs	r2, #4
   290a4:	a902      	add	r1, sp, #8
   290a6:	4630      	mov	r0, r6
   290a8:	f7ff fee6 	bl	28e78 <POINTonE2s_mult_w4>
   290ac:	4620      	mov	r0, r4
   290ae:	aaea      	add	r2, sp, #936	; 0x3a8
   290b0:	2300      	movs	r3, #0
   290b2:	f840 3b04 	str.w	r3, [r0], #4
   290b6:	4290      	cmp	r0, r2
   290b8:	d1fb      	bne.n	290b2 <POINTonE2_mult_gls+0xae>
   290ba:	abe2      	add	r3, sp, #904	; 0x388
   290bc:	f50d 7d6a 	add.w	sp, sp, #936	; 0x3a8
   290c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000290c4 <POINTonE2_mult_w4>:
   290c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   290c8:	f6ad 2d24 	subw	sp, sp, #2596	; 0xa24
   290cc:	4605      	mov	r5, r0
   290ce:	4617      	mov	r7, r2
   290d0:	461e      	mov	r6, r3
   290d2:	4668      	mov	r0, sp
   290d4:	f7ff fcec 	bl	28ab0 <POINTonE2_precompute_w4>
   290d8:	f006 0303 	and.w	r3, r6, #3
   290dc:	1c5c      	adds	r4, r3, #1
   290de:	1af6      	subs	r6, r6, r3
   290e0:	d036      	beq.n	29150 <POINTonE2_mult_w4+0x8c>
   290e2:	4622      	mov	r2, r4
   290e4:	1e71      	subs	r1, r6, #1
   290e6:	4638      	mov	r0, r7
   290e8:	f7f7 faac 	bl	20644 <get_wval>
   290ec:	f04f 33ff 	mov.w	r3, #4294967295
   290f0:	40a3      	lsls	r3, r4
   290f2:	2104      	movs	r1, #4
   290f4:	ea20 0003 	bic.w	r0, r0, r3
   290f8:	f7f7 fab0 	bl	2065c <booth_encode>
   290fc:	4602      	mov	r2, r0
   290fe:	4669      	mov	r1, sp
   29100:	4628      	mov	r0, r5
   29102:	f7f8 fd85 	bl	21c10 <POINTonE2_gather_booth_w4>
   29106:	f04f 0905 	mov.w	r9, #5
   2910a:	f04f 0804 	mov.w	r8, #4
   2910e:	2404      	movs	r4, #4
   29110:	4629      	mov	r1, r5
   29112:	4628      	mov	r0, r5
   29114:	f7ff fbea 	bl	288ec <POINTonE2_double>
   29118:	3c01      	subs	r4, #1
   2911a:	d1f9      	bne.n	29110 <POINTonE2_mult_w4+0x4c>
   2911c:	1f34      	subs	r4, r6, #4
   2911e:	d027      	beq.n	29170 <POINTonE2_mult_w4+0xac>
   29120:	464a      	mov	r2, r9
   29122:	1f71      	subs	r1, r6, #5
   29124:	4638      	mov	r0, r7
   29126:	f7f7 fa8d 	bl	20644 <get_wval>
   2912a:	4641      	mov	r1, r8
   2912c:	f000 001f 	and.w	r0, r0, #31
   29130:	f7f7 fa94 	bl	2065c <booth_encode>
   29134:	4602      	mov	r2, r0
   29136:	4669      	mov	r1, sp
   29138:	f50d 6010 	add.w	r0, sp, #2304	; 0x900
   2913c:	f7f8 fd68 	bl	21c10 <POINTonE2_gather_booth_w4>
   29140:	f50d 6210 	add.w	r2, sp, #2304	; 0x900
   29144:	4629      	mov	r1, r5
   29146:	4628      	mov	r0, r5
   29148:	f7ff fa48 	bl	285dc <POINTonE2_add>
   2914c:	4626      	mov	r6, r4
   2914e:	e7de      	b.n	2910e <POINTonE2_mult_w4+0x4a>
   29150:	7838      	ldrb	r0, [r7, #0]
   29152:	f04f 33ff 	mov.w	r3, #4294967295
   29156:	40a3      	lsls	r3, r4
   29158:	43db      	mvns	r3, r3
   2915a:	2104      	movs	r1, #4
   2915c:	ea03 0040 	and.w	r0, r3, r0, lsl #1
   29160:	f7f7 fa7c 	bl	2065c <booth_encode>
   29164:	4602      	mov	r2, r0
   29166:	4669      	mov	r1, sp
   29168:	4628      	mov	r0, r5
   2916a:	f7f8 fd51 	bl	21c10 <POINTonE2_gather_booth_w4>
   2916e:	e013      	b.n	29198 <POINTonE2_mult_w4+0xd4>
   29170:	7838      	ldrb	r0, [r7, #0]
   29172:	0040      	lsls	r0, r0, #1
   29174:	2104      	movs	r1, #4
   29176:	f000 001e 	and.w	r0, r0, #30
   2917a:	f7f7 fa6f 	bl	2065c <booth_encode>
   2917e:	4602      	mov	r2, r0
   29180:	4669      	mov	r1, sp
   29182:	f50d 6010 	add.w	r0, sp, #2304	; 0x900
   29186:	f7f8 fd43 	bl	21c10 <POINTonE2_gather_booth_w4>
   2918a:	2300      	movs	r3, #0
   2918c:	f50d 6210 	add.w	r2, sp, #2304	; 0x900
   29190:	4629      	mov	r1, r5
   29192:	4628      	mov	r0, r5
   29194:	f7ff fcb2 	bl	28afc <POINTonE2_dadd>
   29198:	f60d 2d24 	addw	sp, sp, #2596	; 0xa24
   2919c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000291a0 <POINTonE2_mult_w5>:
   291a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   291a4:	f5ad 5d99 	sub.w	sp, sp, #4896	; 0x1320
   291a8:	b081      	sub	sp, #4
   291aa:	4605      	mov	r5, r0
   291ac:	4617      	mov	r7, r2
   291ae:	4698      	mov	r8, r3
   291b0:	f1a1 0e04 	sub.w	lr, r1, #4
   291b4:	466c      	mov	r4, sp
   291b6:	ab48      	add	r3, sp, #288	; 0x120
   291b8:	46a4      	mov	ip, r4
   291ba:	f85e 2f04 	ldr.w	r2, [lr, #4]!
   291be:	f84c 2b04 	str.w	r2, [ip], #4
   291c2:	459c      	cmp	ip, r3
   291c4:	d1f9      	bne.n	291ba <POINTonE2_mult_w5+0x1a>
   291c6:	a848      	add	r0, sp, #288	; 0x120
   291c8:	f7ff fb90 	bl	288ec <POINTonE2_double>
   291cc:	ae90      	add	r6, sp, #576	; 0x240
   291ce:	f504 69fc 	add.w	r9, r4, #2016	; 0x7e0
   291d2:	4622      	mov	r2, r4
   291d4:	f504 7490 	add.w	r4, r4, #288	; 0x120
   291d8:	4621      	mov	r1, r4
   291da:	4630      	mov	r0, r6
   291dc:	f7ff f9fe 	bl	285dc <POINTonE2_add>
   291e0:	4621      	mov	r1, r4
   291e2:	f506 7090 	add.w	r0, r6, #288	; 0x120
   291e6:	f7ff fb81 	bl	288ec <POINTonE2_double>
   291ea:	f506 7610 	add.w	r6, r6, #576	; 0x240
   291ee:	45a1      	cmp	r9, r4
   291f0:	d1ef      	bne.n	291d2 <POINTonE2_mult_w5+0x32>
   291f2:	4b36      	ldr	r3, [pc, #216]	; (292cc <POINTonE2_mult_w5+0x12c>)
   291f4:	fba3 2308 	umull	r2, r3, r3, r8
   291f8:	f023 0603 	bic.w	r6, r3, #3
   291fc:	eb06 0693 	add.w	r6, r6, r3, lsr #2
   29200:	eba8 0606 	sub.w	r6, r8, r6
   29204:	1c74      	adds	r4, r6, #1
   29206:	ebb8 0606 	subs.w	r6, r8, r6
   2920a:	d036      	beq.n	2927a <POINTonE2_mult_w5+0xda>
   2920c:	4622      	mov	r2, r4
   2920e:	1e71      	subs	r1, r6, #1
   29210:	4638      	mov	r0, r7
   29212:	f7f7 fa17 	bl	20644 <get_wval>
   29216:	f04f 33ff 	mov.w	r3, #4294967295
   2921a:	40a3      	lsls	r3, r4
   2921c:	2105      	movs	r1, #5
   2921e:	ea20 0003 	bic.w	r0, r0, r3
   29222:	f7f7 fa1b 	bl	2065c <booth_encode>
   29226:	4602      	mov	r2, r0
   29228:	4669      	mov	r1, sp
   2922a:	4628      	mov	r0, r5
   2922c:	f7f8 fd1f 	bl	21c6e <POINTonE2_gather_booth_w5>
   29230:	f04f 0906 	mov.w	r9, #6
   29234:	f04f 0805 	mov.w	r8, #5
   29238:	2405      	movs	r4, #5
   2923a:	4629      	mov	r1, r5
   2923c:	4628      	mov	r0, r5
   2923e:	f7ff fb55 	bl	288ec <POINTonE2_double>
   29242:	3c01      	subs	r4, #1
   29244:	d1f9      	bne.n	2923a <POINTonE2_mult_w5+0x9a>
   29246:	1f74      	subs	r4, r6, #5
   29248:	d027      	beq.n	2929a <POINTonE2_mult_w5+0xfa>
   2924a:	464a      	mov	r2, r9
   2924c:	1fb1      	subs	r1, r6, #6
   2924e:	4638      	mov	r0, r7
   29250:	f7f7 f9f8 	bl	20644 <get_wval>
   29254:	4641      	mov	r1, r8
   29256:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   2925a:	f7f7 f9ff 	bl	2065c <booth_encode>
   2925e:	4602      	mov	r2, r0
   29260:	4669      	mov	r1, sp
   29262:	f50d 5090 	add.w	r0, sp, #4608	; 0x1200
   29266:	f7f8 fd02 	bl	21c6e <POINTonE2_gather_booth_w5>
   2926a:	f50d 5290 	add.w	r2, sp, #4608	; 0x1200
   2926e:	4629      	mov	r1, r5
   29270:	4628      	mov	r0, r5
   29272:	f7ff f9b3 	bl	285dc <POINTonE2_add>
   29276:	4626      	mov	r6, r4
   29278:	e7de      	b.n	29238 <POINTonE2_mult_w5+0x98>
   2927a:	7838      	ldrb	r0, [r7, #0]
   2927c:	f04f 33ff 	mov.w	r3, #4294967295
   29280:	40a3      	lsls	r3, r4
   29282:	43db      	mvns	r3, r3
   29284:	2105      	movs	r1, #5
   29286:	ea03 0040 	and.w	r0, r3, r0, lsl #1
   2928a:	f7f7 f9e7 	bl	2065c <booth_encode>
   2928e:	4602      	mov	r2, r0
   29290:	4669      	mov	r1, sp
   29292:	4628      	mov	r0, r5
   29294:	f7f8 fceb 	bl	21c6e <POINTonE2_gather_booth_w5>
   29298:	e013      	b.n	292c2 <POINTonE2_mult_w5+0x122>
   2929a:	7838      	ldrb	r0, [r7, #0]
   2929c:	0040      	lsls	r0, r0, #1
   2929e:	2105      	movs	r1, #5
   292a0:	f000 003e 	and.w	r0, r0, #62	; 0x3e
   292a4:	f7f7 f9da 	bl	2065c <booth_encode>
   292a8:	4602      	mov	r2, r0
   292aa:	4669      	mov	r1, sp
   292ac:	f50d 5090 	add.w	r0, sp, #4608	; 0x1200
   292b0:	f7f8 fcdd 	bl	21c6e <POINTonE2_gather_booth_w5>
   292b4:	2300      	movs	r3, #0
   292b6:	f50d 5290 	add.w	r2, sp, #4608	; 0x1200
   292ba:	4629      	mov	r1, r5
   292bc:	4628      	mov	r0, r5
   292be:	f7ff fc1d 	bl	28afc <POINTonE2_dadd>
   292c2:	f50d 5d99 	add.w	sp, sp, #4896	; 0x1320
   292c6:	b001      	add	sp, #4
   292c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   292cc:	cccccccd 	.word	0xcccccccd

000292d0 <blst_p2_mult>:
   292d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   292d4:	b089      	sub	sp, #36	; 0x24
   292d6:	4607      	mov	r7, r0
   292d8:	4688      	mov	r8, r1
   292da:	4615      	mov	r5, r2
   292dc:	461e      	mov	r6, r3
   292de:	2b9f      	cmp	r3, #159	; 0x9f
   292e0:	d934      	bls.n	2934c <blst_p2_mult+0x7c>
   292e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   292e6:	d83b      	bhi.n	29360 <blst_p2_mult+0x90>
   292e8:	1dd8      	adds	r0, r3, #7
   292ea:	08c0      	lsrs	r0, r0, #3
   292ec:	f10d 33ff 	add.w	r3, sp, #4294967295
   292f0:	466c      	mov	r4, sp
   292f2:	f10d 0e1f 	add.w	lr, sp, #31
   292f6:	f04f 39ff 	mov.w	r9, #4294967295
   292fa:	2100      	movs	r1, #0
   292fc:	469c      	mov	ip, r3
   292fe:	5c6a      	ldrb	r2, [r5, r1]
   29300:	ea02 0209 	and.w	r2, r2, r9
   29304:	f803 2f01 	strb.w	r2, [r3, #1]!
   29308:	f10c 0c02 	add.w	ip, ip, #2
   2930c:	ebac 0c04 	sub.w	ip, ip, r4
   29310:	ebac 0c00 	sub.w	ip, ip, r0
   29314:	ea4f 79ec 	mov.w	r9, ip, asr #31
   29318:	eb01 71dc 	add.w	r1, r1, ip, lsr #31
   2931c:	4573      	cmp	r3, lr
   2931e:	d1ed      	bne.n	292fc <blst_p2_mult+0x2c>
   29320:	2208      	movs	r2, #8
   29322:	4911      	ldr	r1, [pc, #68]	; (29368 <blst_p2_mult+0x98>)
   29324:	4668      	mov	r0, sp
   29326:	f7f7 f9de 	bl	206e6 <check_mod_n>
   2932a:	b190      	cbz	r0, 29352 <blst_p2_mult+0x82>
   2932c:	466a      	mov	r2, sp
   2932e:	4641      	mov	r1, r8
   29330:	4638      	mov	r0, r7
   29332:	f7ff fe67 	bl	29004 <POINTonE2_mult_gls>
   29336:	f104 0220 	add.w	r2, r4, #32
   2933a:	2300      	movs	r3, #0
   2933c:	f844 3b04 	str.w	r3, [r4], #4
   29340:	42a2      	cmp	r2, r4
   29342:	d1fb      	bne.n	2933c <blst_p2_mult+0x6c>
   29344:	466b      	mov	r3, sp
   29346:	b009      	add	sp, #36	; 0x24
   29348:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2934c:	f7ff feba 	bl	290c4 <POINTonE2_mult_w4>
   29350:	e7f9      	b.n	29346 <blst_p2_mult+0x76>
   29352:	4633      	mov	r3, r6
   29354:	462a      	mov	r2, r5
   29356:	4641      	mov	r1, r8
   29358:	4638      	mov	r0, r7
   2935a:	f7ff ff21 	bl	291a0 <POINTonE2_mult_w5>
   2935e:	e7ea      	b.n	29336 <blst_p2_mult+0x66>
   29360:	f7ff ff1e 	bl	291a0 <POINTonE2_mult_w5>
   29364:	e7ef      	b.n	29346 <blst_p2_mult+0x76>
   29366:	bf00      	nop
   29368:	00039a48 	.word	0x00039a48

0002936c <POINTonE2_add_n_dbl>:
   2936c:	b570      	push	{r4, r5, r6, lr}
   2936e:	4605      	mov	r5, r0
   29370:	4616      	mov	r6, r2
   29372:	2300      	movs	r3, #0
   29374:	460a      	mov	r2, r1
   29376:	4601      	mov	r1, r0
   29378:	f7ff fbc0 	bl	28afc <POINTonE2_dadd>
   2937c:	1e74      	subs	r4, r6, #1
   2937e:	b13e      	cbz	r6, 29390 <POINTonE2_add_n_dbl+0x24>
   29380:	4629      	mov	r1, r5
   29382:	4628      	mov	r0, r5
   29384:	f7ff fab2 	bl	288ec <POINTonE2_double>
   29388:	3c01      	subs	r4, #1
   2938a:	f1b4 3fff 	cmp.w	r4, #4294967295
   2938e:	d1f7      	bne.n	29380 <POINTonE2_add_n_dbl+0x14>
   29390:	bd70      	pop	{r4, r5, r6, pc}

00029392 <POINTonE2_times_minus_z>:
   29392:	b538      	push	{r3, r4, r5, lr}
   29394:	4604      	mov	r4, r0
   29396:	460d      	mov	r5, r1
   29398:	f7ff faa8 	bl	288ec <POINTonE2_double>
   2939c:	2202      	movs	r2, #2
   2939e:	4629      	mov	r1, r5
   293a0:	4620      	mov	r0, r4
   293a2:	f7ff ffe3 	bl	2936c <POINTonE2_add_n_dbl>
   293a6:	2203      	movs	r2, #3
   293a8:	4629      	mov	r1, r5
   293aa:	4620      	mov	r0, r4
   293ac:	f7ff ffde 	bl	2936c <POINTonE2_add_n_dbl>
   293b0:	2209      	movs	r2, #9
   293b2:	4629      	mov	r1, r5
   293b4:	4620      	mov	r0, r4
   293b6:	f7ff ffd9 	bl	2936c <POINTonE2_add_n_dbl>
   293ba:	2220      	movs	r2, #32
   293bc:	4629      	mov	r1, r5
   293be:	4620      	mov	r0, r4
   293c0:	f7ff ffd4 	bl	2936c <POINTonE2_add_n_dbl>
   293c4:	2210      	movs	r2, #16
   293c6:	4629      	mov	r1, r5
   293c8:	4620      	mov	r0, r4
   293ca:	f7ff ffcf 	bl	2936c <POINTonE2_add_n_dbl>
   293ce:	bd38      	pop	{r3, r4, r5, pc}

000293d0 <POINTonE2_in_G2>:
   293d0:	b510      	push	{r4, lr}
   293d2:	f5ad 7d58 	sub.w	sp, sp, #864	; 0x360
   293d6:	4604      	mov	r4, r0
   293d8:	4601      	mov	r1, r0
   293da:	a890      	add	r0, sp, #576	; 0x240
   293dc:	f7fb f808 	bl	243f0 <psi>
   293e0:	a990      	add	r1, sp, #576	; 0x240
   293e2:	4608      	mov	r0, r1
   293e4:	f7fb f804 	bl	243f0 <psi>
   293e8:	a990      	add	r1, sp, #576	; 0x240
   293ea:	a848      	add	r0, sp, #288	; 0x120
   293ec:	f7fb f800 	bl	243f0 <psi>
   293f0:	a948      	add	r1, sp, #288	; 0x120
   293f2:	4668      	mov	r0, sp
   293f4:	f7ff ffcd 	bl	29392 <POINTonE2_times_minus_z>
   293f8:	2300      	movs	r3, #0
   293fa:	466a      	mov	r2, sp
   293fc:	a990      	add	r1, sp, #576	; 0x240
   293fe:	4608      	mov	r0, r1
   29400:	f7ff fb7c 	bl	28afc <POINTonE2_dadd>
   29404:	2101      	movs	r1, #1
   29406:	a890      	add	r0, sp, #576	; 0x240
   29408:	f7f8 fbe8 	bl	21bdc <POINTonE2_cneg>
   2940c:	2300      	movs	r3, #0
   2940e:	4622      	mov	r2, r4
   29410:	a990      	add	r1, sp, #576	; 0x240
   29412:	4608      	mov	r0, r1
   29414:	f7ff fb72 	bl	28afc <POINTonE2_dadd>
   29418:	abbf      	add	r3, sp, #764	; 0x2fc
   2941a:	a9d7      	add	r1, sp, #860	; 0x35c
   2941c:	2000      	movs	r0, #0
   2941e:	f853 2f04 	ldr.w	r2, [r3, #4]!
   29422:	4310      	orrs	r0, r2
   29424:	428b      	cmp	r3, r1
   29426:	d1fa      	bne.n	2941e <POINTonE2_in_G2+0x4e>
   29428:	1e43      	subs	r3, r0, #1
   2942a:	ea23 0000 	bic.w	r0, r3, r0
   2942e:	0fc0      	lsrs	r0, r0, #31
   29430:	f50d 7d58 	add.w	sp, sp, #864	; 0x360
   29434:	bd10      	pop	{r4, pc}

00029436 <blst_p2_in_g2>:
   29436:	b508      	push	{r3, lr}
   29438:	f7ff ffca 	bl	293d0 <POINTonE2_in_G2>
   2943c:	bd08      	pop	{r3, pc}

0002943e <blst_p2_affine_in_g2>:
   2943e:	b510      	push	{r4, lr}
   29440:	b0c8      	sub	sp, #288	; 0x120
   29442:	f1a0 0c04 	sub.w	ip, r0, #4
   29446:	466b      	mov	r3, sp
   29448:	ac30      	add	r4, sp, #192	; 0xc0
   2944a:	4662      	mov	r2, ip
   2944c:	f852 1f04 	ldr.w	r1, [r2, #4]!
   29450:	f843 1b04 	str.w	r1, [r3], #4
   29454:	42a3      	cmp	r3, r4
   29456:	d1f9      	bne.n	2944c <blst_p2_affine_in_g2+0xe>
   29458:	30bc      	adds	r0, #188	; 0xbc
   2945a:	4663      	mov	r3, ip
   2945c:	2200      	movs	r2, #0
   2945e:	f853 1f04 	ldr.w	r1, [r3, #4]!
   29462:	430a      	orrs	r2, r1
   29464:	4283      	cmp	r3, r0
   29466:	d1fa      	bne.n	2945e <blst_p2_affine_in_g2+0x20>
   29468:	f102 3eff 	add.w	lr, r2, #4294967295
   2946c:	ea2e 0202 	bic.w	r2, lr, r2
   29470:	ea4f 7ee2 	mov.w	lr, r2, asr #31
   29474:	4c0a      	ldr	r4, [pc, #40]	; (294a0 <blst_p2_affine_in_g2+0x62>)
   29476:	f104 0290 	add.w	r2, r4, #144	; 0x90
   2947a:	a82f      	add	r0, sp, #188	; 0xbc
   2947c:	34f0      	adds	r4, #240	; 0xf0
   2947e:	f852 1b04 	ldr.w	r1, [r2], #4
   29482:	f85c 3f04 	ldr.w	r3, [ip, #4]!
   29486:	404b      	eors	r3, r1
   29488:	ea03 030e 	and.w	r3, r3, lr
   2948c:	404b      	eors	r3, r1
   2948e:	f840 3f04 	str.w	r3, [r0, #4]!
   29492:	42a2      	cmp	r2, r4
   29494:	d1f3      	bne.n	2947e <blst_p2_affine_in_g2+0x40>
   29496:	4668      	mov	r0, sp
   29498:	f7ff ff9a 	bl	293d0 <POINTonE2_in_G2>
   2949c:	b048      	add	sp, #288	; 0x120
   2949e:	bd10      	pop	{r4, pc}
   294a0:	00038688 	.word	0x00038688

000294a4 <blst_pairing_merge>:
   294a4:	b538      	push	{r3, r4, r5, lr}
   294a6:	4604      	mov	r4, r0
   294a8:	460d      	mov	r5, r1
   294aa:	6803      	ldr	r3, [r0, #0]
   294ac:	f013 0203 	ands.w	r2, r3, #3
   294b0:	d007      	beq.n	294c2 <blst_pairing_merge+0x1e>
   294b2:	6809      	ldr	r1, [r1, #0]
   294b4:	f011 0f03 	tst.w	r1, #3
   294b8:	d003      	beq.n	294c2 <blst_pairing_merge+0x1e>
   294ba:	4019      	ands	r1, r3
   294bc:	f011 0f03 	tst.w	r1, #3
   294c0:	d07f      	beq.n	295c2 <blst_pairing_merge+0x11e>
   294c2:	6861      	ldr	r1, [r4, #4]
   294c4:	2900      	cmp	r1, #0
   294c6:	d17e      	bne.n	295c6 <blst_pairing_merge+0x122>
   294c8:	6869      	ldr	r1, [r5, #4]
   294ca:	2900      	cmp	r1, #0
   294cc:	d17d      	bne.n	295ca <blst_pairing_merge+0x126>
   294ce:	2a01      	cmp	r2, #1
   294d0:	d005      	beq.n	294de <blst_pairing_merge+0x3a>
   294d2:	2a02      	cmp	r2, #2
   294d4:	d03e      	beq.n	29554 <blst_pairing_merge+0xb0>
   294d6:	2a00      	cmp	r2, #0
   294d8:	d05e      	beq.n	29598 <blst_pairing_merge+0xf4>
   294da:	2004      	movs	r0, #4
   294dc:	bd38      	pop	{r3, r4, r5, pc}
   294de:	682a      	ldr	r2, [r5, #0]
   294e0:	ea03 0102 	and.w	r1, r3, r2
   294e4:	f011 0f10 	tst.w	r1, #16
   294e8:	d112      	bne.n	29510 <blst_pairing_merge+0x6c>
   294ea:	f012 0f10 	tst.w	r2, #16
   294ee:	d017      	beq.n	29520 <blst_pairing_merge+0x7c>
   294f0:	f043 0310 	orr.w	r3, r3, #16
   294f4:	6023      	str	r3, [r4, #0]
   294f6:	f505 7313 	add.w	r3, r5, #588	; 0x24c
   294fa:	f504 7213 	add.w	r2, r4, #588	; 0x24c
   294fe:	f505 7037 	add.w	r0, r5, #732	; 0x2dc
   29502:	f853 1f04 	ldr.w	r1, [r3, #4]!
   29506:	f842 1f04 	str.w	r1, [r2, #4]!
   2950a:	4283      	cmp	r3, r0
   2950c:	d1f9      	bne.n	29502 <blst_pairing_merge+0x5e>
   2950e:	e007      	b.n	29520 <blst_pairing_merge+0x7c>
   29510:	f504 7014 	add.w	r0, r4, #592	; 0x250
   29514:	2300      	movs	r3, #0
   29516:	f505 7214 	add.w	r2, r5, #592	; 0x250
   2951a:	4601      	mov	r1, r0
   2951c:	f7f9 fcfe 	bl	22f1c <POINTonE1_dadd>
   29520:	6823      	ldr	r3, [r4, #0]
   29522:	682a      	ldr	r2, [r5, #0]
   29524:	ea03 0102 	and.w	r1, r3, r2
   29528:	f011 0f20 	tst.w	r1, #32
   2952c:	d140      	bne.n	295b0 <blst_pairing_merge+0x10c>
   2952e:	f012 0f20 	tst.w	r2, #32
   29532:	d04c      	beq.n	295ce <blst_pairing_merge+0x12a>
   29534:	f043 0320 	orr.w	r3, r3, #32
   29538:	f844 3b0c 	str.w	r3, [r4], #12
   2953c:	f105 030c 	add.w	r3, r5, #12
   29540:	f505 7513 	add.w	r5, r5, #588	; 0x24c
   29544:	f853 2f04 	ldr.w	r2, [r3, #4]!
   29548:	f844 2f04 	str.w	r2, [r4, #4]!
   2954c:	42ab      	cmp	r3, r5
   2954e:	d1f9      	bne.n	29544 <blst_pairing_merge+0xa0>
   29550:	2000      	movs	r0, #0
   29552:	e7c3      	b.n	294dc <blst_pairing_merge+0x38>
   29554:	682a      	ldr	r2, [r5, #0]
   29556:	ea03 0102 	and.w	r1, r3, r2
   2955a:	f011 0f10 	tst.w	r1, #16
   2955e:	d112      	bne.n	29586 <blst_pairing_merge+0xe2>
   29560:	f012 0f10 	tst.w	r2, #16
   29564:	d0dc      	beq.n	29520 <blst_pairing_merge+0x7c>
   29566:	f043 0310 	orr.w	r3, r3, #16
   2956a:	6023      	str	r3, [r4, #0]
   2956c:	f505 7313 	add.w	r3, r5, #588	; 0x24c
   29570:	f504 7213 	add.w	r2, r4, #588	; 0x24c
   29574:	f505 705b 	add.w	r0, r5, #876	; 0x36c
   29578:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2957c:	f842 1f04 	str.w	r1, [r2, #4]!
   29580:	4283      	cmp	r3, r0
   29582:	d1f9      	bne.n	29578 <blst_pairing_merge+0xd4>
   29584:	e7cc      	b.n	29520 <blst_pairing_merge+0x7c>
   29586:	f504 7014 	add.w	r0, r4, #592	; 0x250
   2958a:	2300      	movs	r3, #0
   2958c:	f505 7214 	add.w	r2, r5, #592	; 0x250
   29590:	4601      	mov	r1, r0
   29592:	f7ff fab3 	bl	28afc <POINTonE2_dadd>
   29596:	e7c3      	b.n	29520 <blst_pairing_merge+0x7c>
   29598:	1f2b      	subs	r3, r5, #4
   2959a:	3c04      	subs	r4, #4
   2959c:	f605 456c 	addw	r5, r5, #3180	; 0xc6c
   295a0:	f853 2f04 	ldr.w	r2, [r3, #4]!
   295a4:	f844 2f04 	str.w	r2, [r4, #4]!
   295a8:	42ab      	cmp	r3, r5
   295aa:	d1f9      	bne.n	295a0 <blst_pairing_merge+0xfc>
   295ac:	2000      	movs	r0, #0
   295ae:	e795      	b.n	294dc <blst_pairing_merge+0x38>
   295b0:	f104 0010 	add.w	r0, r4, #16
   295b4:	f105 0210 	add.w	r2, r5, #16
   295b8:	4601      	mov	r1, r0
   295ba:	f7fb f9df 	bl	2497c <mul_fp12>
   295be:	2000      	movs	r0, #0
   295c0:	e78c      	b.n	294dc <blst_pairing_merge+0x38>
   295c2:	2004      	movs	r0, #4
   295c4:	e78a      	b.n	294dc <blst_pairing_merge+0x38>
   295c6:	2004      	movs	r0, #4
   295c8:	e788      	b.n	294dc <blst_pairing_merge+0x38>
   295ca:	2004      	movs	r0, #4
   295cc:	e786      	b.n	294dc <blst_pairing_merge+0x38>
   295ce:	2000      	movs	r0, #0
   295d0:	e784      	b.n	294dc <blst_pairing_merge+0x38>

000295d2 <POINTonE2_sign>:
   295d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   295d6:	b0cb      	sub	sp, #300	; 0x12c
   295d8:	4607      	mov	r7, r0
   295da:	f7ff fd13 	bl	29004 <POINTonE2_mult_gls>
   295de:	f107 08c0 	add.w	r8, r7, #192	; 0xc0
   295e2:	f107 04bc 	add.w	r4, r7, #188	; 0xbc
   295e6:	f507 718e 	add.w	r1, r7, #284	; 0x11c
   295ea:	4623      	mov	r3, r4
   295ec:	2600      	movs	r6, #0
   295ee:	f853 2f04 	ldr.w	r2, [r3, #4]!
   295f2:	4316      	orrs	r6, r2
   295f4:	428b      	cmp	r3, r1
   295f6:	d1fa      	bne.n	295ee <POINTonE2_sign+0x1c>
   295f8:	4d3b      	ldr	r5, [pc, #236]	; (296e8 <POINTonE2_sign+0x116>)
   295fa:	f04f 0a0c 	mov.w	sl, #12
   295fe:	f8cd a004 	str.w	sl, [sp, #4]
   29602:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 296ec <POINTonE2_sign+0x11a>
   29606:	f8cd 9000 	str.w	r9, [sp]
   2960a:	462b      	mov	r3, r5
   2960c:	4642      	mov	r2, r8
   2960e:	4641      	mov	r1, r8
   29610:	a802      	add	r0, sp, #8
   29612:	f7f7 f9dd 	bl	209d0 <mul_mont_n>
   29616:	f107 0bf0 	add.w	fp, r7, #240	; 0xf0
   2961a:	f8cd a004 	str.w	sl, [sp, #4]
   2961e:	f8cd 9000 	str.w	r9, [sp]
   29622:	462b      	mov	r3, r5
   29624:	465a      	mov	r2, fp
   29626:	4659      	mov	r1, fp
   29628:	a80e      	add	r0, sp, #56	; 0x38
   2962a:	f7f7 f9d1 	bl	209d0 <mul_mont_n>
   2962e:	f8cd a000 	str.w	sl, [sp]
   29632:	462b      	mov	r3, r5
   29634:	aa0e      	add	r2, sp, #56	; 0x38
   29636:	a902      	add	r1, sp, #8
   29638:	4608      	mov	r0, r1
   2963a:	f7f7 fb71 	bl	20d20 <add_mod_n>
   2963e:	a902      	add	r1, sp, #8
   29640:	a80e      	add	r0, sp, #56	; 0x38
   29642:	f7fb fd55 	bl	250f0 <flt_reciprocal_fp>
   29646:	f8cd a004 	str.w	sl, [sp, #4]
   2964a:	f8cd 9000 	str.w	r9, [sp]
   2964e:	462b      	mov	r3, r5
   29650:	aa0e      	add	r2, sp, #56	; 0x38
   29652:	4641      	mov	r1, r8
   29654:	a832      	add	r0, sp, #200	; 0xc8
   29656:	f7f7 f9bb 	bl	209d0 <mul_mont_n>
   2965a:	f8cd a004 	str.w	sl, [sp, #4]
   2965e:	f8cd 9000 	str.w	r9, [sp]
   29662:	462b      	mov	r3, r5
   29664:	aa0e      	add	r2, sp, #56	; 0x38
   29666:	4659      	mov	r1, fp
   29668:	a83e      	add	r0, sp, #248	; 0xf8
   2966a:	f7f7 f9b1 	bl	209d0 <mul_mont_n>
   2966e:	f8cd a000 	str.w	sl, [sp]
   29672:	462b      	mov	r3, r5
   29674:	2201      	movs	r2, #1
   29676:	a93e      	add	r1, sp, #248	; 0xf8
   29678:	4608      	mov	r0, r1
   2967a:	f7f8 f9e5 	bl	21a48 <cneg_mod_n>
   2967e:	464b      	mov	r3, r9
   29680:	462a      	mov	r2, r5
   29682:	a932      	add	r1, sp, #200	; 0xc8
   29684:	a81a      	add	r0, sp, #104	; 0x68
   29686:	f7fe f8f3 	bl	27870 <sqr_mont_384x>
   2968a:	f8cd 9000 	str.w	r9, [sp]
   2968e:	462b      	mov	r3, r5
   29690:	aa1a      	add	r2, sp, #104	; 0x68
   29692:	4639      	mov	r1, r7
   29694:	4638      	mov	r0, r7
   29696:	f7fa fe5d 	bl	24354 <mul_mont_384x>
   2969a:	f8cd 9000 	str.w	r9, [sp]
   2969e:	462b      	mov	r3, r5
   296a0:	aa32      	add	r2, sp, #200	; 0xc8
   296a2:	a91a      	add	r1, sp, #104	; 0x68
   296a4:	4608      	mov	r0, r1
   296a6:	f7fa fe55 	bl	24354 <mul_mont_384x>
   296aa:	f107 0060 	add.w	r0, r7, #96	; 0x60
   296ae:	f8cd 9000 	str.w	r9, [sp]
   296b2:	462b      	mov	r3, r5
   296b4:	aa1a      	add	r2, sp, #104	; 0x68
   296b6:	4601      	mov	r1, r0
   296b8:	f7fa fe4c 	bl	24354 <mul_mont_384x>
   296bc:	1e73      	subs	r3, r6, #1
   296be:	ea23 0606 	bic.w	r6, r3, r6
   296c2:	17f6      	asrs	r6, r6, #31
   296c4:	f505 6164 	add.w	r1, r5, #3648	; 0xe40
   296c8:	f505 656a 	add.w	r5, r5, #3744	; 0xea0
   296cc:	f851 0b04 	ldr.w	r0, [r1], #4
   296d0:	f854 2f04 	ldr.w	r2, [r4, #4]!
   296d4:	4042      	eors	r2, r0
   296d6:	4032      	ands	r2, r6
   296d8:	4042      	eors	r2, r0
   296da:	6022      	str	r2, [r4, #0]
   296dc:	42a9      	cmp	r1, r5
   296de:	d1f5      	bne.n	296cc <POINTonE2_sign+0xfa>
   296e0:	b04b      	add	sp, #300	; 0x12c
   296e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   296e6:	bf00      	nop
   296e8:	00038688 	.word	0x00038688
   296ec:	fffcfffd 	.word	0xfffcfffd

000296f0 <blst_sk_to_pk_in_g2>:
   296f0:	b508      	push	{r3, lr}
   296f2:	460a      	mov	r2, r1
   296f4:	4901      	ldr	r1, [pc, #4]	; (296fc <blst_sk_to_pk_in_g2+0xc>)
   296f6:	f7ff ff6c 	bl	295d2 <POINTonE2_sign>
   296fa:	bd08      	pop	{r3, pc}
   296fc:	00039408 	.word	0x00039408

00029700 <blst_sign_pk_in_g1>:
   29700:	b508      	push	{r3, lr}
   29702:	f7ff ff66 	bl	295d2 <POINTonE2_sign>
   29706:	bd08      	pop	{r3, pc}

00029708 <blst_sk_to_pk2_in_g2>:
   29708:	b530      	push	{r4, r5, lr}
   2970a:	b0c9      	sub	sp, #292	; 0x124
   2970c:	4605      	mov	r5, r0
   2970e:	460c      	mov	r4, r1
   29710:	4914      	ldr	r1, [pc, #80]	; (29764 <blst_sk_to_pk2_in_g2+0x5c>)
   29712:	4668      	mov	r0, sp
   29714:	f7ff ff5d 	bl	295d2 <POINTonE2_sign>
   29718:	b14c      	cbz	r4, 2972e <blst_sk_to_pk2_in_g2+0x26>
   2971a:	f1ad 0304 	sub.w	r3, sp, #4
   2971e:	1f21      	subs	r1, r4, #4
   29720:	a82f      	add	r0, sp, #188	; 0xbc
   29722:	f853 2f04 	ldr.w	r2, [r3, #4]!
   29726:	f841 2f04 	str.w	r2, [r1, #4]!
   2972a:	4283      	cmp	r3, r0
   2972c:	d1f9      	bne.n	29722 <blst_sk_to_pk2_in_g2+0x1a>
   2972e:	b1bd      	cbz	r5, 29760 <blst_sk_to_pk2_in_g2+0x58>
   29730:	4669      	mov	r1, sp
   29732:	4628      	mov	r0, r5
   29734:	f7fe f954 	bl	279e0 <POINTonE2_Serialize_BE>
   29738:	0100      	lsls	r0, r0, #4
   2973a:	f000 0220 	and.w	r2, r0, #32
   2973e:	7828      	ldrb	r0, [r5, #0]
   29740:	4310      	orrs	r0, r2
   29742:	ab2f      	add	r3, sp, #188	; 0xbc
   29744:	ac47      	add	r4, sp, #284	; 0x11c
   29746:	2200      	movs	r2, #0
   29748:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2974c:	430a      	orrs	r2, r1
   2974e:	42a3      	cmp	r3, r4
   29750:	d1fa      	bne.n	29748 <blst_sk_to_pk2_in_g2+0x40>
   29752:	1e53      	subs	r3, r2, #1
   29754:	ea23 0202 	bic.w	r2, r3, r2
   29758:	0fd2      	lsrs	r2, r2, #31
   2975a:	ea40 1282 	orr.w	r2, r0, r2, lsl #6
   2975e:	702a      	strb	r2, [r5, #0]
   29760:	b049      	add	sp, #292	; 0x124
   29762:	bd30      	pop	{r4, r5, pc}
   29764:	00039408 	.word	0x00039408

00029768 <blst_sign_pk2_in_g1>:
   29768:	b530      	push	{r4, r5, lr}
   2976a:	b0c9      	sub	sp, #292	; 0x124
   2976c:	4605      	mov	r5, r0
   2976e:	460c      	mov	r4, r1
   29770:	4611      	mov	r1, r2
   29772:	461a      	mov	r2, r3
   29774:	4668      	mov	r0, sp
   29776:	f7ff ff2c 	bl	295d2 <POINTonE2_sign>
   2977a:	b14c      	cbz	r4, 29790 <blst_sign_pk2_in_g1+0x28>
   2977c:	f1ad 0304 	sub.w	r3, sp, #4
   29780:	1f21      	subs	r1, r4, #4
   29782:	a82f      	add	r0, sp, #188	; 0xbc
   29784:	f853 2f04 	ldr.w	r2, [r3, #4]!
   29788:	f841 2f04 	str.w	r2, [r1, #4]!
   2978c:	4283      	cmp	r3, r0
   2978e:	d1f9      	bne.n	29784 <blst_sign_pk2_in_g1+0x1c>
   29790:	b1bd      	cbz	r5, 297c2 <blst_sign_pk2_in_g1+0x5a>
   29792:	4669      	mov	r1, sp
   29794:	4628      	mov	r0, r5
   29796:	f7fe f923 	bl	279e0 <POINTonE2_Serialize_BE>
   2979a:	0100      	lsls	r0, r0, #4
   2979c:	f000 0220 	and.w	r2, r0, #32
   297a0:	7828      	ldrb	r0, [r5, #0]
   297a2:	4310      	orrs	r0, r2
   297a4:	ab2f      	add	r3, sp, #188	; 0xbc
   297a6:	ac47      	add	r4, sp, #284	; 0x11c
   297a8:	2200      	movs	r2, #0
   297aa:	f853 1f04 	ldr.w	r1, [r3, #4]!
   297ae:	430a      	orrs	r2, r1
   297b0:	42a3      	cmp	r3, r4
   297b2:	d1fa      	bne.n	297aa <blst_sign_pk2_in_g1+0x42>
   297b4:	1e53      	subs	r3, r2, #1
   297b6:	ea23 0202 	bic.w	r2, r3, r2
   297ba:	0fd2      	lsrs	r2, r2, #31
   297bc:	ea40 1282 	orr.w	r2, r0, r2, lsl #6
   297c0:	702a      	strb	r2, [r5, #0]
   297c2:	b049      	add	sp, #292	; 0x124
   297c4:	bd30      	pop	{r4, r5, pc}

000297c6 <map_to_isogenous_E2>:
   297c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   297ca:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
   297ce:	4606      	mov	r6, r0
   297d0:	9103      	str	r1, [sp, #12]
   297d2:	4dc5      	ldr	r5, [pc, #788]	; (29ae8 <map_to_isogenous_E2+0x322>)
   297d4:	4cc5      	ldr	r4, [pc, #788]	; (29aec <map_to_isogenous_E2+0x326>)
   297d6:	462b      	mov	r3, r5
   297d8:	4622      	mov	r2, r4
   297da:	a8e8      	add	r0, sp, #928	; 0x3a0
   297dc:	f7fe f848 	bl	27870 <sqr_mont_384x>
   297e0:	f8df 830c 	ldr.w	r8, [pc, #780]	; 29af0 <map_to_isogenous_E2+0x32a>
   297e4:	9500      	str	r5, [sp, #0]
   297e6:	4623      	mov	r3, r4
   297e8:	aae8      	add	r2, sp, #928	; 0x3a0
   297ea:	f508 61bc 	add.w	r1, r8, #1504	; 0x5e0
   297ee:	a8a0      	add	r0, sp, #640	; 0x280
   297f0:	f7fa fdb0 	bl	24354 <mul_mont_384x>
   297f4:	462b      	mov	r3, r5
   297f6:	4622      	mov	r2, r4
   297f8:	a9a0      	add	r1, sp, #640	; 0x280
   297fa:	a8d0      	add	r0, sp, #832	; 0x340
   297fc:	f7fe f838 	bl	27870 <sqr_mont_384x>
   29800:	270c      	movs	r7, #12
   29802:	9700      	str	r7, [sp, #0]
   29804:	4623      	mov	r3, r4
   29806:	aaa0      	add	r2, sp, #640	; 0x280
   29808:	a9d0      	add	r1, sp, #832	; 0x340
   2980a:	4608      	mov	r0, r1
   2980c:	f7f7 fa88 	bl	20d20 <add_mod_n>
   29810:	9700      	str	r7, [sp, #0]
   29812:	4623      	mov	r3, r4
   29814:	aaac      	add	r2, sp, #688	; 0x2b0
   29816:	a9dc      	add	r1, sp, #880	; 0x370
   29818:	4608      	mov	r0, r1
   2981a:	f7f7 fa81 	bl	20d20 <add_mod_n>
   2981e:	9700      	str	r7, [sp, #0]
   29820:	4623      	mov	r3, r4
   29822:	f104 0290 	add.w	r2, r4, #144	; 0x90
   29826:	a9d0      	add	r1, sp, #832	; 0x340
   29828:	4630      	mov	r0, r6
   2982a:	f7f7 fa79 	bl	20d20 <add_mod_n>
   2982e:	9700      	str	r7, [sp, #0]
   29830:	4623      	mov	r3, r4
   29832:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
   29836:	a9dc      	add	r1, sp, #880	; 0x370
   29838:	f106 0030 	add.w	r0, r6, #48	; 0x30
   2983c:	f7f7 fa70 	bl	20d20 <add_mod_n>
   29840:	9500      	str	r5, [sp, #0]
   29842:	4623      	mov	r3, r4
   29844:	f508 62c8 	add.w	r2, r8, #1600	; 0x640
   29848:	4631      	mov	r1, r6
   2984a:	4630      	mov	r0, r6
   2984c:	f7fa fd82 	bl	24354 <mul_mont_384x>
   29850:	9500      	str	r5, [sp, #0]
   29852:	4623      	mov	r3, r4
   29854:	4632      	mov	r2, r6
   29856:	a9a0      	add	r1, sp, #640	; 0x280
   29858:	4608      	mov	r0, r1
   2985a:	f7fa fd7b 	bl	24354 <mul_mont_384x>
   2985e:	f106 09c0 	add.w	r9, r6, #192	; 0xc0
   29862:	9500      	str	r5, [sp, #0]
   29864:	4623      	mov	r3, r4
   29866:	aad0      	add	r2, sp, #832	; 0x340
   29868:	f508 61d4 	add.w	r1, r8, #1696	; 0x6a0
   2986c:	4648      	mov	r0, r9
   2986e:	f7fa fd71 	bl	24354 <mul_mont_384x>
   29872:	f106 02bc 	add.w	r2, r6, #188	; 0xbc
   29876:	f506 748e 	add.w	r4, r6, #284	; 0x11c
   2987a:	4613      	mov	r3, r2
   2987c:	2100      	movs	r1, #0
   2987e:	f853 0f04 	ldr.w	r0, [r3, #4]!
   29882:	4301      	orrs	r1, r0
   29884:	42a3      	cmp	r3, r4
   29886:	d1fa      	bne.n	2987e <map_to_isogenous_E2+0xb8>
   29888:	1e4c      	subs	r4, r1, #1
   2988a:	ea24 0101 	bic.w	r1, r4, r1
   2988e:	17cc      	asrs	r4, r1, #31
   29890:	4d97      	ldr	r5, [pc, #604]	; (29af0 <map_to_isogenous_E2+0x32a>)
   29892:	f205 61fc 	addw	r1, r5, #1788	; 0x6fc
   29896:	f205 755c 	addw	r5, r5, #1884	; 0x75c
   2989a:	f852 0f04 	ldr.w	r0, [r2, #4]!
   2989e:	f851 3f04 	ldr.w	r3, [r1, #4]!
   298a2:	4043      	eors	r3, r0
   298a4:	4023      	ands	r3, r4
   298a6:	4043      	eors	r3, r0
   298a8:	6013      	str	r3, [r2, #0]
   298aa:	42a9      	cmp	r1, r5
   298ac:	d1f5      	bne.n	2989a <map_to_isogenous_E2+0xd4>
   298ae:	4c8e      	ldr	r4, [pc, #568]	; (29ae8 <map_to_isogenous_E2+0x322>)
   298b0:	4d8e      	ldr	r5, [pc, #568]	; (29aec <map_to_isogenous_E2+0x326>)
   298b2:	4623      	mov	r3, r4
   298b4:	462a      	mov	r2, r5
   298b6:	4649      	mov	r1, r9
   298b8:	a8d0      	add	r0, sp, #832	; 0x340
   298ba:	f7fd ffd9 	bl	27870 <sqr_mont_384x>
   298be:	9400      	str	r4, [sp, #0]
   298c0:	462b      	mov	r3, r5
   298c2:	aad0      	add	r2, sp, #832	; 0x340
   298c4:	4649      	mov	r1, r9
   298c6:	a870      	add	r0, sp, #448	; 0x1c0
   298c8:	f7fa fd44 	bl	24354 <mul_mont_384x>
   298cc:	f8df a220 	ldr.w	sl, [pc, #544]	; 29af0 <map_to_isogenous_E2+0x32a>
   298d0:	9400      	str	r4, [sp, #0]
   298d2:	462b      	mov	r3, r5
   298d4:	aad0      	add	r2, sp, #832	; 0x340
   298d6:	f50a 61ec 	add.w	r1, sl, #1888	; 0x760
   298da:	4610      	mov	r0, r2
   298dc:	f7fa fd3a 	bl	24354 <mul_mont_384x>
   298e0:	4623      	mov	r3, r4
   298e2:	462a      	mov	r2, r5
   298e4:	4631      	mov	r1, r6
   298e6:	a888      	add	r0, sp, #544	; 0x220
   298e8:	f7fd ffc2 	bl	27870 <sqr_mont_384x>
   298ec:	f04f 080c 	mov.w	r8, #12
   298f0:	f8cd 8000 	str.w	r8, [sp]
   298f4:	462b      	mov	r3, r5
   298f6:	aad0      	add	r2, sp, #832	; 0x340
   298f8:	a988      	add	r1, sp, #544	; 0x220
   298fa:	4608      	mov	r0, r1
   298fc:	f7f7 fa10 	bl	20d20 <add_mod_n>
   29900:	f8cd 8000 	str.w	r8, [sp]
   29904:	462b      	mov	r3, r5
   29906:	aadc      	add	r2, sp, #880	; 0x370
   29908:	a994      	add	r1, sp, #592	; 0x250
   2990a:	4608      	mov	r0, r1
   2990c:	f7f7 fa08 	bl	20d20 <add_mod_n>
   29910:	9400      	str	r4, [sp, #0]
   29912:	462b      	mov	r3, r5
   29914:	4632      	mov	r2, r6
   29916:	a988      	add	r1, sp, #544	; 0x220
   29918:	4608      	mov	r0, r1
   2991a:	f7fa fd1b 	bl	24354 <mul_mont_384x>
   2991e:	9400      	str	r4, [sp, #0]
   29920:	462b      	mov	r3, r5
   29922:	aa70      	add	r2, sp, #448	; 0x1c0
   29924:	f50a 61c8 	add.w	r1, sl, #1600	; 0x640
   29928:	a8d0      	add	r0, sp, #832	; 0x340
   2992a:	f7fa fd13 	bl	24354 <mul_mont_384x>
   2992e:	f8cd 8000 	str.w	r8, [sp]
   29932:	462b      	mov	r3, r5
   29934:	aad0      	add	r2, sp, #832	; 0x340
   29936:	a988      	add	r1, sp, #544	; 0x220
   29938:	4608      	mov	r0, r1
   2993a:	f7f7 f9f1 	bl	20d20 <add_mod_n>
   2993e:	f8cd 8000 	str.w	r8, [sp]
   29942:	462b      	mov	r3, r5
   29944:	aadc      	add	r2, sp, #880	; 0x370
   29946:	a994      	add	r1, sp, #592	; 0x250
   29948:	4608      	mov	r0, r1
   2994a:	f7f7 f9e9 	bl	20d20 <add_mod_n>
   2994e:	4623      	mov	r3, r4
   29950:	462a      	mov	r2, r5
   29952:	a970      	add	r1, sp, #448	; 0x1c0
   29954:	a8b8      	add	r0, sp, #736	; 0x2e0
   29956:	f7fd ff8b 	bl	27870 <sqr_mont_384x>
   2995a:	9400      	str	r4, [sp, #0]
   2995c:	462b      	mov	r3, r5
   2995e:	aa70      	add	r2, sp, #448	; 0x1c0
   29960:	a988      	add	r1, sp, #544	; 0x220
   29962:	a8d0      	add	r0, sp, #832	; 0x340
   29964:	f7fa fcf6 	bl	24354 <mul_mont_384x>
   29968:	9400      	str	r4, [sp, #0]
   2996a:	462b      	mov	r3, r5
   2996c:	aad0      	add	r2, sp, #832	; 0x340
   2996e:	a9b8      	add	r1, sp, #736	; 0x2e0
   29970:	4608      	mov	r0, r1
   29972:	f7fa fcef 	bl	24354 <mul_mont_384x>
   29976:	f106 0760 	add.w	r7, r6, #96	; 0x60
   2997a:	f8cd 8004 	str.w	r8, [sp, #4]
   2997e:	9400      	str	r4, [sp, #0]
   29980:	462b      	mov	r3, r5
   29982:	aab8      	add	r2, sp, #736	; 0x2e0
   29984:	4611      	mov	r1, r2
   29986:	a804      	add	r0, sp, #16
   29988:	f7f7 f822 	bl	209d0 <mul_mont_n>
   2998c:	f8cd 8004 	str.w	r8, [sp, #4]
   29990:	9400      	str	r4, [sp, #0]
   29992:	462b      	mov	r3, r5
   29994:	aac4      	add	r2, sp, #784	; 0x310
   29996:	4611      	mov	r1, r2
   29998:	a810      	add	r0, sp, #64	; 0x40
   2999a:	f7f7 f819 	bl	209d0 <mul_mont_n>
   2999e:	f8cd 8000 	str.w	r8, [sp]
   299a2:	462b      	mov	r3, r5
   299a4:	aa10      	add	r2, sp, #64	; 0x40
   299a6:	a904      	add	r1, sp, #16
   299a8:	4608      	mov	r0, r1
   299aa:	f7f7 f9b9 	bl	20d20 <add_mod_n>
   299ae:	a904      	add	r1, sp, #16
   299b0:	a81c      	add	r0, sp, #112	; 0x70
   299b2:	f7fc fce9 	bl	26388 <recip_sqrt_fp>
   299b6:	4683      	mov	fp, r0
   299b8:	9400      	str	r4, [sp, #0]
   299ba:	462b      	mov	r3, r5
   299bc:	f50a 62f8 	add.w	r2, sl, #1984	; 0x7c0
   299c0:	a9b8      	add	r1, sp, #736	; 0x2e0
   299c2:	a840      	add	r0, sp, #256	; 0x100
   299c4:	f7fa fcc6 	bl	24354 <mul_mont_384x>
   299c8:	f8cd 8004 	str.w	r8, [sp, #4]
   299cc:	9400      	str	r4, [sp, #0]
   299ce:	462b      	mov	r3, r5
   299d0:	f50a 6202 	add.w	r2, sl, #2080	; 0x820
   299d4:	a904      	add	r1, sp, #16
   299d6:	a828      	add	r0, sp, #160	; 0xa0
   299d8:	f7f6 fffa 	bl	209d0 <mul_mont_n>
   299dc:	f8cd 8004 	str.w	r8, [sp, #4]
   299e0:	9400      	str	r4, [sp, #0]
   299e2:	462b      	mov	r3, r5
   299e4:	f50a 6205 	add.w	r2, sl, #2128	; 0x850
   299e8:	a91c      	add	r1, sp, #112	; 0x70
   299ea:	a834      	add	r0, sp, #208	; 0xd0
   299ec:	f7f6 fff0 	bl	209d0 <mul_mont_n>
   299f0:	f1cb 0400 	rsb	r4, fp, #0
   299f4:	ad04      	add	r5, sp, #16
   299f6:	a828      	add	r0, sp, #160	; 0xa0
   299f8:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   299fc:	462a      	mov	r2, r5
   299fe:	6813      	ldr	r3, [r2, #0]
   29a00:	f850 1b04 	ldr.w	r1, [r0], #4
   29a04:	404b      	eors	r3, r1
   29a06:	4023      	ands	r3, r4
   29a08:	404b      	eors	r3, r1
   29a0a:	f842 3b04 	str.w	r3, [r2], #4
   29a0e:	4542      	cmp	r2, r8
   29a10:	d1f5      	bne.n	299fe <map_to_isogenous_E2+0x238>
   29a12:	aa1c      	add	r2, sp, #112	; 0x70
   29a14:	a934      	add	r1, sp, #208	; 0xd0
   29a16:	a828      	add	r0, sp, #160	; 0xa0
   29a18:	468c      	mov	ip, r1
   29a1a:	6813      	ldr	r3, [r2, #0]
   29a1c:	f85c 1b04 	ldr.w	r1, [ip], #4
   29a20:	404b      	eors	r3, r1
   29a22:	4023      	ands	r3, r4
   29a24:	404b      	eors	r3, r1
   29a26:	f842 3b04 	str.w	r3, [r2], #4
   29a2a:	4282      	cmp	r2, r0
   29a2c:	d1f5      	bne.n	29a1a <map_to_isogenous_E2+0x254>
   29a2e:	a9b7      	add	r1, sp, #732	; 0x2dc
   29a30:	aa3f      	add	r2, sp, #252	; 0xfc
   29a32:	a8cf      	add	r0, sp, #828	; 0x33c
   29a34:	46a4      	mov	ip, r4
   29a36:	f852 4f04 	ldr.w	r4, [r2, #4]!
   29a3a:	f851 3f04 	ldr.w	r3, [r1, #4]!
   29a3e:	4063      	eors	r3, r4
   29a40:	ea03 030c 	and.w	r3, r3, ip
   29a44:	4063      	eors	r3, r4
   29a46:	6013      	str	r3, [r2, #0]
   29a48:	4281      	cmp	r1, r0
   29a4a:	d1f4      	bne.n	29a36 <map_to_isogenous_E2+0x270>
   29a4c:	4664      	mov	r4, ip
   29a4e:	f8df a09c 	ldr.w	sl, [pc, #156]	; 29aec <map_to_isogenous_E2+0x326>
   29a52:	f04f 0b0c 	mov.w	fp, #12
   29a56:	f8cd b004 	str.w	fp, [sp, #4]
   29a5a:	4b23      	ldr	r3, [pc, #140]	; (29ae8 <map_to_isogenous_E2+0x322>)
   29a5c:	9300      	str	r3, [sp, #0]
   29a5e:	4653      	mov	r3, sl
   29a60:	aa1c      	add	r2, sp, #112	; 0x70
   29a62:	a904      	add	r1, sp, #16
   29a64:	4608      	mov	r0, r1
   29a66:	f7f6 ffb3 	bl	209d0 <mul_mont_n>
   29a6a:	f8cd b000 	str.w	fp, [sp]
   29a6e:	4653      	mov	r3, sl
   29a70:	aa04      	add	r2, sp, #16
   29a72:	a940      	add	r1, sp, #256	; 0x100
   29a74:	a810      	add	r0, sp, #64	; 0x40
   29a76:	f7f6 fdfd 	bl	20674 <sub_mod_n>
   29a7a:	f8cd b000 	str.w	fp, [sp]
   29a7e:	4653      	mov	r3, sl
   29a80:	aa04      	add	r2, sp, #16
   29a82:	a940      	add	r1, sp, #256	; 0x100
   29a84:	4610      	mov	r0, r2
   29a86:	f7f7 f94b 	bl	20d20 <add_mod_n>
   29a8a:	462b      	mov	r3, r5
   29a8c:	2200      	movs	r2, #0
   29a8e:	f853 1b04 	ldr.w	r1, [r3], #4
   29a92:	430a      	orrs	r2, r1
   29a94:	4543      	cmp	r3, r8
   29a96:	d1fa      	bne.n	29a8e <map_to_isogenous_E2+0x2c8>
   29a98:	1e50      	subs	r0, r2, #1
   29a9a:	ea20 0202 	bic.w	r2, r0, r2
   29a9e:	17d0      	asrs	r0, r2, #31
   29aa0:	aa10      	add	r2, sp, #64	; 0x40
   29aa2:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   29aa6:	f852 3b04 	ldr.w	r3, [r2], #4
   29aaa:	6829      	ldr	r1, [r5, #0]
   29aac:	404b      	eors	r3, r1
   29aae:	4003      	ands	r3, r0
   29ab0:	404b      	eors	r3, r1
   29ab2:	f845 3b04 	str.w	r3, [r5], #4
   29ab6:	4562      	cmp	r2, ip
   29ab8:	d1f5      	bne.n	29aa6 <map_to_isogenous_E2+0x2e0>
   29aba:	f8df 8030 	ldr.w	r8, [pc, #48]	; 29aec <map_to_isogenous_E2+0x326>
   29abe:	f04f 0b0c 	mov.w	fp, #12
   29ac2:	f8cd b000 	str.w	fp, [sp]
   29ac6:	4643      	mov	r3, r8
   29ac8:	2201      	movs	r2, #1
   29aca:	a904      	add	r1, sp, #16
   29acc:	4608      	mov	r0, r1
   29ace:	f7f6 fe39 	bl	20744 <rshift_mod_n>
   29ad2:	a904      	add	r1, sp, #16
   29ad4:	4638      	mov	r0, r7
   29ad6:	f7fc fc57 	bl	26388 <recip_sqrt_fp>
   29ada:	f106 0590 	add.w	r5, r6, #144	; 0x90
   29ade:	f8cd b000 	str.w	fp, [sp]
   29ae2:	4643      	mov	r3, r8
   29ae4:	2201      	movs	r2, #1
   29ae6:	e005      	b.n	29af4 <map_to_isogenous_E2+0x32e>
   29ae8:	fffcfffd 	.word	0xfffcfffd
   29aec:	00038688 	.word	0x00038688
   29af0:	00039780 	.word	0x00039780
   29af4:	a94c      	add	r1, sp, #304	; 0x130
   29af6:	4628      	mov	r0, r5
   29af8:	f7f6 fe24 	bl	20744 <rshift_mod_n>
   29afc:	f8cd b004 	str.w	fp, [sp, #4]
   29b00:	f8df a248 	ldr.w	sl, [pc, #584]	; 29d4c <map_to_isogenous_E2+0x586>
   29b04:	f8cd a000 	str.w	sl, [sp]
   29b08:	4643      	mov	r3, r8
   29b0a:	463a      	mov	r2, r7
   29b0c:	4629      	mov	r1, r5
   29b0e:	4628      	mov	r0, r5
   29b10:	f7f6 ff5e 	bl	209d0 <mul_mont_n>
   29b14:	f8cd b004 	str.w	fp, [sp, #4]
   29b18:	f8cd a000 	str.w	sl, [sp]
   29b1c:	4643      	mov	r3, r8
   29b1e:	aa04      	add	r2, sp, #16
   29b20:	4639      	mov	r1, r7
   29b22:	4638      	mov	r0, r7
   29b24:	f7f6 ff54 	bl	209d0 <mul_mont_n>
   29b28:	ab40      	add	r3, sp, #256	; 0x100
   29b2a:	463a      	mov	r2, r7
   29b2c:	4639      	mov	r1, r7
   29b2e:	4638      	mov	r0, r7
   29b30:	f7fe f9d2 	bl	27ed8 <sqrt_align_fp2>
   29b34:	f8cd b004 	str.w	fp, [sp, #4]
   29b38:	f8cd a000 	str.w	sl, [sp]
   29b3c:	4643      	mov	r3, r8
   29b3e:	aa1c      	add	r2, sp, #112	; 0x70
   29b40:	4639      	mov	r1, r7
   29b42:	4638      	mov	r0, r7
   29b44:	f7f6 ff44 	bl	209d0 <mul_mont_n>
   29b48:	f8cd b004 	str.w	fp, [sp, #4]
   29b4c:	f8cd a000 	str.w	sl, [sp]
   29b50:	4643      	mov	r3, r8
   29b52:	aa1c      	add	r2, sp, #112	; 0x70
   29b54:	4629      	mov	r1, r5
   29b56:	4628      	mov	r0, r5
   29b58:	f7f6 ff3a 	bl	209d0 <mul_mont_n>
   29b5c:	f8cd b000 	str.w	fp, [sp]
   29b60:	4643      	mov	r3, r8
   29b62:	2201      	movs	r2, #1
   29b64:	4629      	mov	r1, r5
   29b66:	4628      	mov	r0, r5
   29b68:	f7f7 ff6e 	bl	21a48 <cneg_mod_n>
   29b6c:	f8cd a000 	str.w	sl, [sp]
   29b70:	4643      	mov	r3, r8
   29b72:	aad0      	add	r2, sp, #832	; 0x340
   29b74:	4639      	mov	r1, r7
   29b76:	4638      	mov	r0, r7
   29b78:	f7fa fbec 	bl	24354 <mul_mont_384x>
   29b7c:	f8cd a000 	str.w	sl, [sp]
   29b80:	4643      	mov	r3, r8
   29b82:	aae8      	add	r2, sp, #928	; 0x3a0
   29b84:	4639      	mov	r1, r7
   29b86:	a858      	add	r0, sp, #352	; 0x160
   29b88:	f7fa fbe4 	bl	24354 <mul_mont_384x>
   29b8c:	f8cd a000 	str.w	sl, [sp]
   29b90:	4643      	mov	r3, r8
   29b92:	9a03      	ldr	r2, [sp, #12]
   29b94:	a958      	add	r1, sp, #352	; 0x160
   29b96:	4608      	mov	r0, r1
   29b98:	f7fa fbdc 	bl	24354 <mul_mont_384x>
   29b9c:	1f31      	subs	r1, r6, #4
   29b9e:	aaa0      	add	r2, sp, #640	; 0x280
   29ba0:	f50d 7c38 	add.w	ip, sp, #736	; 0x2e0
   29ba4:	f852 0b04 	ldr.w	r0, [r2], #4
   29ba8:	f851 3f04 	ldr.w	r3, [r1, #4]!
   29bac:	4043      	eors	r3, r0
   29bae:	4023      	ands	r3, r4
   29bb0:	4043      	eors	r3, r0
   29bb2:	600b      	str	r3, [r1, #0]
   29bb4:	4562      	cmp	r2, ip
   29bb6:	d1f5      	bne.n	29ba4 <map_to_isogenous_E2+0x3de>
   29bb8:	f106 015c 	add.w	r1, r6, #92	; 0x5c
   29bbc:	aa58      	add	r2, sp, #352	; 0x160
   29bbe:	f50d 7ce0 	add.w	ip, sp, #448	; 0x1c0
   29bc2:	f852 0b04 	ldr.w	r0, [r2], #4
   29bc6:	f851 3f04 	ldr.w	r3, [r1, #4]!
   29bca:	4043      	eors	r3, r0
   29bcc:	4023      	ands	r3, r4
   29bce:	4043      	eors	r3, r0
   29bd0:	600b      	str	r3, [r1, #0]
   29bd2:	4562      	cmp	r2, ip
   29bd4:	d1f5      	bne.n	29bc2 <map_to_isogenous_E2+0x3fc>
   29bd6:	f8df 8174 	ldr.w	r8, [pc, #372]	; 29d4c <map_to_isogenous_E2+0x586>
   29bda:	4c5d      	ldr	r4, [pc, #372]	; (29d50 <map_to_isogenous_E2+0x58a>)
   29bdc:	f04f 0a0c 	mov.w	sl, #12
   29be0:	f8cd a000 	str.w	sl, [sp]
   29be4:	4643      	mov	r3, r8
   29be6:	4622      	mov	r2, r4
   29be8:	f8dd b00c 	ldr.w	fp, [sp, #12]
   29bec:	4659      	mov	r1, fp
   29bee:	a840      	add	r0, sp, #256	; 0x100
   29bf0:	f7f7 fa20 	bl	21034 <from_mont_n>
   29bf4:	f8cd a000 	str.w	sl, [sp]
   29bf8:	4643      	mov	r3, r8
   29bfa:	4622      	mov	r2, r4
   29bfc:	4659      	mov	r1, fp
   29bfe:	3130      	adds	r1, #48	; 0x30
   29c00:	a84c      	add	r0, sp, #304	; 0x130
   29c02:	f7f7 fa17 	bl	21034 <from_mont_n>
   29c06:	4652      	mov	r2, sl
   29c08:	4621      	mov	r1, r4
   29c0a:	a840      	add	r0, sp, #256	; 0x100
   29c0c:	f7f7 fb27 	bl	2125e <sgn0_pty_mod_n>
   29c10:	4680      	mov	r8, r0
   29c12:	4652      	mov	r2, sl
   29c14:	4621      	mov	r1, r4
   29c16:	a84c      	add	r0, sp, #304	; 0x130
   29c18:	f7f7 fb21 	bl	2125e <sgn0_pty_mod_n>
   29c1c:	aa4b      	add	r2, sp, #300	; 0x12c
   29c1e:	ab40      	add	r3, sp, #256	; 0x100
   29c20:	f50d 7cae 	add.w	ip, sp, #348	; 0x15c
   29c24:	2100      	movs	r1, #0
   29c26:	f852 4f04 	ldr.w	r4, [r2, #4]!
   29c2a:	4321      	orrs	r1, r4
   29c2c:	4562      	cmp	r2, ip
   29c2e:	d1fa      	bne.n	29c26 <map_to_isogenous_E2+0x460>
   29c30:	f101 3cff 	add.w	ip, r1, #4294967295
   29c34:	ea2c 0101 	bic.w	r1, ip, r1
   29c38:	ea4f 7cd1 	mov.w	ip, r1, lsr #31
   29c3c:	ea08 71e1 	and.w	r1, r8, r1, asr #31
   29c40:	f10c 3cff 	add.w	ip, ip, #4294967295
   29c44:	ea0c 0c00 	and.w	ip, ip, r0
   29c48:	ea4c 0c01 	orr.w	ip, ip, r1
   29c4c:	f103 0430 	add.w	r4, r3, #48	; 0x30
   29c50:	2200      	movs	r2, #0
   29c52:	f853 1b04 	ldr.w	r1, [r3], #4
   29c56:	430a      	orrs	r2, r1
   29c58:	42a3      	cmp	r3, r4
   29c5a:	d1fa      	bne.n	29c52 <map_to_isogenous_E2+0x48c>
   29c5c:	1e54      	subs	r4, r2, #1
   29c5e:	ea24 0202 	bic.w	r2, r4, r2
   29c62:	0fd4      	lsrs	r4, r2, #31
   29c64:	ea00 70e2 	and.w	r0, r0, r2, asr #31
   29c68:	3c01      	subs	r4, #1
   29c6a:	ea04 0408 	and.w	r4, r4, r8
   29c6e:	4304      	orrs	r4, r0
   29c70:	f004 0401 	and.w	r4, r4, #1
   29c74:	f00c 0c02 	and.w	ip, ip, #2
   29c78:	ea44 040c 	orr.w	r4, r4, ip
   29c7c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 29d4c <map_to_isogenous_E2+0x586>
   29c80:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 29d50 <map_to_isogenous_E2+0x58a>
   29c84:	f04f 0b0c 	mov.w	fp, #12
   29c88:	f8cd b000 	str.w	fp, [sp]
   29c8c:	4643      	mov	r3, r8
   29c8e:	4652      	mov	r2, sl
   29c90:	4639      	mov	r1, r7
   29c92:	a840      	add	r0, sp, #256	; 0x100
   29c94:	f7f7 f9ce 	bl	21034 <from_mont_n>
   29c98:	f8cd b000 	str.w	fp, [sp]
   29c9c:	4643      	mov	r3, r8
   29c9e:	4652      	mov	r2, sl
   29ca0:	4629      	mov	r1, r5
   29ca2:	a84c      	add	r0, sp, #304	; 0x130
   29ca4:	f7f7 f9c6 	bl	21034 <from_mont_n>
   29ca8:	465a      	mov	r2, fp
   29caa:	4651      	mov	r1, sl
   29cac:	a840      	add	r0, sp, #256	; 0x100
   29cae:	f7f7 fad6 	bl	2125e <sgn0_pty_mod_n>
   29cb2:	4680      	mov	r8, r0
   29cb4:	465a      	mov	r2, fp
   29cb6:	4651      	mov	r1, sl
   29cb8:	a84c      	add	r0, sp, #304	; 0x130
   29cba:	f7f7 fad0 	bl	2125e <sgn0_pty_mod_n>
   29cbe:	4686      	mov	lr, r0
   29cc0:	a94b      	add	r1, sp, #300	; 0x12c
   29cc2:	ab40      	add	r3, sp, #256	; 0x100
   29cc4:	aa57      	add	r2, sp, #348	; 0x15c
   29cc6:	f851 0f04 	ldr.w	r0, [r1, #4]!
   29cca:	428a      	cmp	r2, r1
   29ccc:	d1fb      	bne.n	29cc6 <map_to_isogenous_E2+0x500>
   29cce:	f103 0c30 	add.w	ip, r3, #48	; 0x30
   29cd2:	2200      	movs	r2, #0
   29cd4:	f853 1b04 	ldr.w	r1, [r3], #4
   29cd8:	430a      	orrs	r2, r1
   29cda:	459c      	cmp	ip, r3
   29cdc:	d1fa      	bne.n	29cd4 <map_to_isogenous_E2+0x50e>
   29cde:	1e53      	subs	r3, r2, #1
   29ce0:	ea23 0202 	bic.w	r2, r3, r2
   29ce4:	0fd0      	lsrs	r0, r2, #31
   29ce6:	ea0e 72e2 	and.w	r2, lr, r2, asr #31
   29cea:	3801      	subs	r0, #1
   29cec:	ea00 0808 	and.w	r8, r0, r8
   29cf0:	ea48 0802 	orr.w	r8, r8, r2
   29cf4:	ea84 0408 	eor.w	r4, r4, r8
   29cf8:	f004 0401 	and.w	r4, r4, #1
   29cfc:	f8df 8050 	ldr.w	r8, [pc, #80]	; 29d50 <map_to_isogenous_E2+0x58a>
   29d00:	f04f 0a0c 	mov.w	sl, #12
   29d04:	f8cd a000 	str.w	sl, [sp]
   29d08:	4643      	mov	r3, r8
   29d0a:	4622      	mov	r2, r4
   29d0c:	4639      	mov	r1, r7
   29d0e:	4638      	mov	r0, r7
   29d10:	f7f7 fe9a 	bl	21a48 <cneg_mod_n>
   29d14:	f8cd a000 	str.w	sl, [sp]
   29d18:	4643      	mov	r3, r8
   29d1a:	4622      	mov	r2, r4
   29d1c:	4629      	mov	r1, r5
   29d1e:	4628      	mov	r0, r5
   29d20:	f7f7 fe92 	bl	21a48 <cneg_mod_n>
   29d24:	4c09      	ldr	r4, [pc, #36]	; (29d4c <map_to_isogenous_E2+0x586>)
   29d26:	9400      	str	r4, [sp, #0]
   29d28:	4643      	mov	r3, r8
   29d2a:	464a      	mov	r2, r9
   29d2c:	4631      	mov	r1, r6
   29d2e:	4630      	mov	r0, r6
   29d30:	f7fa fb10 	bl	24354 <mul_mont_384x>
   29d34:	9400      	str	r4, [sp, #0]
   29d36:	4643      	mov	r3, r8
   29d38:	aa70      	add	r2, sp, #448	; 0x1c0
   29d3a:	4639      	mov	r1, r7
   29d3c:	4638      	mov	r0, r7
   29d3e:	f7fa fb09 	bl	24354 <mul_mont_384x>
   29d42:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
   29d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29d4a:	bf00      	nop
   29d4c:	fffcfffd 	.word	0xfffcfffd
   29d50:	00038688 	.word	0x00038688

00029d54 <map_to_g2>:
   29d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29d58:	f5ad 6d9d 	sub.w	sp, sp, #1256	; 0x4e8
   29d5c:	4606      	mov	r6, r0
   29d5e:	4614      	mov	r4, r2
   29d60:	a8f2      	add	r0, sp, #968	; 0x3c8
   29d62:	f7ff fd30 	bl	297c6 <map_to_isogenous_E2>
   29d66:	b14c      	cbz	r4, 29d7c <map_to_g2+0x28>
   29d68:	4621      	mov	r1, r4
   29d6a:	4630      	mov	r0, r6
   29d6c:	f7ff fd2b 	bl	297c6 <map_to_isogenous_E2>
   29d70:	4b97      	ldr	r3, [pc, #604]	; (29fd0 <map_to_g2+0x27c>)
   29d72:	4632      	mov	r2, r6
   29d74:	a9f2      	add	r1, sp, #968	; 0x3c8
   29d76:	4608      	mov	r0, r1
   29d78:	f7fe fec0 	bl	28afc <POINTonE2_dadd>
   29d7c:	4d95      	ldr	r5, [pc, #596]	; (29fd4 <map_to_g2+0x280>)
   29d7e:	4c96      	ldr	r4, [pc, #600]	; (29fd8 <map_to_g2+0x284>)
   29d80:	462b      	mov	r3, r5
   29d82:	4622      	mov	r2, r4
   29d84:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
   29d88:	a892      	add	r0, sp, #584	; 0x248
   29d8a:	f7fd fd71 	bl	27870 <sqr_mont_384x>
   29d8e:	462b      	mov	r3, r5
   29d90:	4622      	mov	r2, r4
   29d92:	a992      	add	r1, sp, #584	; 0x248
   29d94:	a87a      	add	r0, sp, #488	; 0x1e8
   29d96:	f7fd fd6b 	bl	27870 <sqr_mont_384x>
   29d9a:	9500      	str	r5, [sp, #0]
   29d9c:	4623      	mov	r3, r4
   29d9e:	aa7a      	add	r2, sp, #488	; 0x1e8
   29da0:	a992      	add	r1, sp, #584	; 0x248
   29da2:	a862      	add	r0, sp, #392	; 0x188
   29da4:	f7fa fad6 	bl	24354 <mul_mont_384x>
   29da8:	f8df 8230 	ldr.w	r8, [pc, #560]	; 29fdc <map_to_g2+0x288>
   29dac:	2303      	movs	r3, #3
   29dae:	aa62      	add	r2, sp, #392	; 0x188
   29db0:	f508 6108 	add.w	r1, r8, #2176	; 0x880
   29db4:	a8aa      	add	r0, sp, #680	; 0x2a8
   29db6:	f7fa fb5b 	bl	24470 <map_fp2_times_Zz>
   29dba:	9500      	str	r5, [sp, #0]
   29dbc:	4623      	mov	r3, r4
   29dbe:	f508 621a 	add.w	r2, r8, #2464	; 0x9a0
   29dc2:	a9f2      	add	r1, sp, #968	; 0x3c8
   29dc4:	a802      	add	r0, sp, #8
   29dc6:	f7fa fac5 	bl	24354 <mul_mont_384x>
   29dca:	270c      	movs	r7, #12
   29dcc:	9700      	str	r7, [sp, #0]
   29dce:	4623      	mov	r3, r4
   29dd0:	aada      	add	r2, sp, #872	; 0x368
   29dd2:	a902      	add	r1, sp, #8
   29dd4:	4608      	mov	r0, r1
   29dd6:	f7f6 ffa3 	bl	20d20 <add_mod_n>
   29dda:	9700      	str	r7, [sp, #0]
   29ddc:	4623      	mov	r3, r4
   29dde:	aae6      	add	r2, sp, #920	; 0x398
   29de0:	a90e      	add	r1, sp, #56	; 0x38
   29de2:	4608      	mov	r0, r1
   29de4:	f7f6 ff9c 	bl	20d20 <add_mod_n>
   29de8:	2302      	movs	r3, #2
   29dea:	aaaa      	add	r2, sp, #680	; 0x2a8
   29dec:	a9f2      	add	r1, sp, #968	; 0x3c8
   29dee:	a802      	add	r0, sp, #8
   29df0:	f7fa fc24 	bl	2463c <map_fp2>
   29df4:	2302      	movs	r3, #2
   29df6:	aa7a      	add	r2, sp, #488	; 0x1e8
   29df8:	f508 6120 	add.w	r1, r8, #2560	; 0xa00
   29dfc:	a8aa      	add	r0, sp, #680	; 0x2a8
   29dfe:	f7fa fb37 	bl	24470 <map_fp2_times_Zz>
   29e02:	9700      	str	r7, [sp, #0]
   29e04:	4623      	mov	r3, r4
   29e06:	aac2      	add	r2, sp, #776	; 0x308
   29e08:	a9f2      	add	r1, sp, #968	; 0x3c8
   29e0a:	a81a      	add	r0, sp, #104	; 0x68
   29e0c:	f7f6 ff88 	bl	20d20 <add_mod_n>
   29e10:	9700      	str	r7, [sp, #0]
   29e12:	4623      	mov	r3, r4
   29e14:	aace      	add	r2, sp, #824	; 0x338
   29e16:	a9fe      	add	r1, sp, #1016	; 0x3f8
   29e18:	a826      	add	r0, sp, #152	; 0x98
   29e1a:	f7f6 ff81 	bl	20d20 <add_mod_n>
   29e1e:	2301      	movs	r3, #1
   29e20:	aaaa      	add	r2, sp, #680	; 0x2a8
   29e22:	a9f2      	add	r1, sp, #968	; 0x3c8
   29e24:	a81a      	add	r0, sp, #104	; 0x68
   29e26:	f7fa fc09 	bl	2463c <map_fp2>
   29e2a:	9500      	str	r5, [sp, #0]
   29e2c:	4623      	mov	r3, r4
   29e2e:	aa92      	add	r2, sp, #584	; 0x248
   29e30:	a91a      	add	r1, sp, #104	; 0x68
   29e32:	4608      	mov	r0, r1
   29e34:	f7fa fa8e 	bl	24354 <mul_mont_384x>
   29e38:	2303      	movs	r3, #3
   29e3a:	aa62      	add	r2, sp, #392	; 0x188
   29e3c:	f508 612c 	add.w	r1, r8, #2752	; 0xac0
   29e40:	a8aa      	add	r0, sp, #680	; 0x2a8
   29e42:	f7fa fb15 	bl	24470 <map_fp2_times_Zz>
   29e46:	9500      	str	r5, [sp, #0]
   29e48:	4623      	mov	r3, r4
   29e4a:	f508 623e 	add.w	r2, r8, #3040	; 0xbe0
   29e4e:	a9f2      	add	r1, sp, #968	; 0x3c8
   29e50:	a832      	add	r0, sp, #200	; 0xc8
   29e52:	f7fa fa7f 	bl	24354 <mul_mont_384x>
   29e56:	9700      	str	r7, [sp, #0]
   29e58:	4623      	mov	r3, r4
   29e5a:	aada      	add	r2, sp, #872	; 0x368
   29e5c:	a932      	add	r1, sp, #200	; 0xc8
   29e5e:	4608      	mov	r0, r1
   29e60:	f7f6 ff5e 	bl	20d20 <add_mod_n>
   29e64:	9700      	str	r7, [sp, #0]
   29e66:	4623      	mov	r3, r4
   29e68:	aae6      	add	r2, sp, #920	; 0x398
   29e6a:	a93e      	add	r1, sp, #248	; 0xf8
   29e6c:	4608      	mov	r0, r1
   29e6e:	f7f6 ff57 	bl	20d20 <add_mod_n>
   29e72:	2302      	movs	r3, #2
   29e74:	aaaa      	add	r2, sp, #680	; 0x2a8
   29e76:	a9f2      	add	r1, sp, #968	; 0x3c8
   29e78:	a832      	add	r0, sp, #200	; 0xc8
   29e7a:	f7fa fbdf 	bl	2463c <map_fp2>
   29e7e:	9500      	str	r5, [sp, #0]
   29e80:	4623      	mov	r3, r4
   29e82:	f50d 6285 	add.w	r2, sp, #1064	; 0x428
   29e86:	a932      	add	r1, sp, #200	; 0xc8
   29e88:	4608      	mov	r0, r1
   29e8a:	f7fa fa63 	bl	24354 <mul_mont_384x>
   29e8e:	2303      	movs	r3, #3
   29e90:	aa62      	add	r2, sp, #392	; 0x188
   29e92:	f508 6144 	add.w	r1, r8, #3136	; 0xc40
   29e96:	a8aa      	add	r0, sp, #680	; 0x2a8
   29e98:	f7fa faea 	bl	24470 <map_fp2_times_Zz>
   29e9c:	9700      	str	r7, [sp, #0]
   29e9e:	4623      	mov	r3, r4
   29ea0:	aada      	add	r2, sp, #872	; 0x368
   29ea2:	a9f2      	add	r1, sp, #968	; 0x3c8
   29ea4:	a84a      	add	r0, sp, #296	; 0x128
   29ea6:	f7f6 ff3b 	bl	20d20 <add_mod_n>
   29eaa:	9700      	str	r7, [sp, #0]
   29eac:	4623      	mov	r3, r4
   29eae:	aae6      	add	r2, sp, #920	; 0x398
   29eb0:	a9fe      	add	r1, sp, #1016	; 0x3f8
   29eb2:	a856      	add	r0, sp, #344	; 0x158
   29eb4:	f7f6 ff34 	bl	20d20 <add_mod_n>
   29eb8:	2302      	movs	r3, #2
   29eba:	aaaa      	add	r2, sp, #680	; 0x2a8
   29ebc:	a9f2      	add	r1, sp, #968	; 0x3c8
   29ebe:	a84a      	add	r0, sp, #296	; 0x128
   29ec0:	f7fa fbbc 	bl	2463c <map_fp2>
   29ec4:	9500      	str	r5, [sp, #0]
   29ec6:	4623      	mov	r3, r4
   29ec8:	f50d 6291 	add.w	r2, sp, #1160	; 0x488
   29ecc:	a992      	add	r1, sp, #584	; 0x248
   29ece:	4608      	mov	r0, r1
   29ed0:	f7fa fa40 	bl	24354 <mul_mont_384x>
   29ed4:	9500      	str	r5, [sp, #0]
   29ed6:	4623      	mov	r3, r4
   29ed8:	aa92      	add	r2, sp, #584	; 0x248
   29eda:	a94a      	add	r1, sp, #296	; 0x128
   29edc:	4608      	mov	r0, r1
   29ede:	f7fa fa39 	bl	24354 <mul_mont_384x>
   29ee2:	9500      	str	r5, [sp, #0]
   29ee4:	4623      	mov	r3, r4
   29ee6:	aa4a      	add	r2, sp, #296	; 0x128
   29ee8:	a91a      	add	r1, sp, #104	; 0x68
   29eea:	f50d 6091 	add.w	r0, sp, #1160	; 0x488
   29eee:	f7fa fa31 	bl	24354 <mul_mont_384x>
   29ef2:	9500      	str	r5, [sp, #0]
   29ef4:	4623      	mov	r3, r4
   29ef6:	aa4a      	add	r2, sp, #296	; 0x128
   29ef8:	a902      	add	r1, sp, #8
   29efa:	a8f2      	add	r0, sp, #968	; 0x3c8
   29efc:	f7fa fa2a 	bl	24354 <mul_mont_384x>
   29f00:	9500      	str	r5, [sp, #0]
   29f02:	4623      	mov	r3, r4
   29f04:	f50d 6291 	add.w	r2, sp, #1160	; 0x488
   29f08:	a9f2      	add	r1, sp, #968	; 0x3c8
   29f0a:	4608      	mov	r0, r1
   29f0c:	f7fa fa22 	bl	24354 <mul_mont_384x>
   29f10:	462b      	mov	r3, r5
   29f12:	4622      	mov	r2, r4
   29f14:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
   29f18:	f50d 6085 	add.w	r0, sp, #1064	; 0x428
   29f1c:	f7fd fca8 	bl	27870 <sqr_mont_384x>
   29f20:	9500      	str	r5, [sp, #0]
   29f22:	4623      	mov	r3, r4
   29f24:	aa1a      	add	r2, sp, #104	; 0x68
   29f26:	f50d 6185 	add.w	r1, sp, #1064	; 0x428
   29f2a:	4608      	mov	r0, r1
   29f2c:	f7fa fa12 	bl	24354 <mul_mont_384x>
   29f30:	9500      	str	r5, [sp, #0]
   29f32:	4623      	mov	r3, r4
   29f34:	aa32      	add	r2, sp, #200	; 0xc8
   29f36:	f50d 6185 	add.w	r1, sp, #1064	; 0x428
   29f3a:	4608      	mov	r0, r1
   29f3c:	f7fa fa0a 	bl	24354 <mul_mont_384x>
   29f40:	a9f2      	add	r1, sp, #968	; 0x3c8
   29f42:	4630      	mov	r0, r6
   29f44:	f7fe fcd2 	bl	288ec <POINTonE2_double>
   29f48:	4631      	mov	r1, r6
   29f4a:	4630      	mov	r0, r6
   29f4c:	f7fa fa50 	bl	243f0 <psi>
   29f50:	4631      	mov	r1, r6
   29f52:	4630      	mov	r0, r6
   29f54:	f7fa fa4c 	bl	243f0 <psi>
   29f58:	abf1      	add	r3, sp, #964	; 0x3c4
   29f5a:	aa61      	add	r2, sp, #388	; 0x184
   29f5c:	f20d 41e4 	addw	r1, sp, #1252	; 0x4e4
   29f60:	f853 4f04 	ldr.w	r4, [r3, #4]!
   29f64:	f842 4f04 	str.w	r4, [r2, #4]!
   29f68:	428b      	cmp	r3, r1
   29f6a:	d1f9      	bne.n	29f60 <map_to_g2+0x20c>
   29f6c:	2101      	movs	r1, #1
   29f6e:	a862      	add	r0, sp, #392	; 0x188
   29f70:	f7f7 fe34 	bl	21bdc <POINTonE2_cneg>
   29f74:	a962      	add	r1, sp, #392	; 0x188
   29f76:	a8aa      	add	r0, sp, #680	; 0x2a8
   29f78:	f7fa fa3a 	bl	243f0 <psi>
   29f7c:	2300      	movs	r3, #0
   29f7e:	aa62      	add	r2, sp, #392	; 0x188
   29f80:	4631      	mov	r1, r6
   29f82:	4630      	mov	r0, r6
   29f84:	f7fe fdba 	bl	28afc <POINTonE2_dadd>
   29f88:	2300      	movs	r3, #0
   29f8a:	aaaa      	add	r2, sp, #680	; 0x2a8
   29f8c:	4631      	mov	r1, r6
   29f8e:	4630      	mov	r0, r6
   29f90:	f7fe fdb4 	bl	28afc <POINTonE2_dadd>
   29f94:	a9f2      	add	r1, sp, #968	; 0x3c8
   29f96:	a862      	add	r0, sp, #392	; 0x188
   29f98:	f7ff f9fb 	bl	29392 <POINTonE2_times_minus_z>
   29f9c:	2300      	movs	r3, #0
   29f9e:	aaf2      	add	r2, sp, #968	; 0x3c8
   29fa0:	a962      	add	r1, sp, #392	; 0x188
   29fa2:	4608      	mov	r0, r1
   29fa4:	f7fe fdaa 	bl	28afc <POINTonE2_dadd>
   29fa8:	2300      	movs	r3, #0
   29faa:	aaaa      	add	r2, sp, #680	; 0x2a8
   29fac:	a962      	add	r1, sp, #392	; 0x188
   29fae:	4608      	mov	r0, r1
   29fb0:	f7fe fda4 	bl	28afc <POINTonE2_dadd>
   29fb4:	a962      	add	r1, sp, #392	; 0x188
   29fb6:	a8aa      	add	r0, sp, #680	; 0x2a8
   29fb8:	f7ff f9eb 	bl	29392 <POINTonE2_times_minus_z>
   29fbc:	2300      	movs	r3, #0
   29fbe:	aaaa      	add	r2, sp, #680	; 0x2a8
   29fc0:	4631      	mov	r1, r6
   29fc2:	4630      	mov	r0, r6
   29fc4:	f7fe fd9a 	bl	28afc <POINTonE2_dadd>
   29fc8:	f50d 6d9d 	add.w	sp, sp, #1256	; 0x4e8
   29fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29fd0:	00039ee0 	.word	0x00039ee0
   29fd4:	fffcfffd 	.word	0xfffcfffd
   29fd8:	00038688 	.word	0x00038688
   29fdc:	00039780 	.word	0x00039780

00029fe0 <blst_map_to_g2>:
   29fe0:	b508      	push	{r3, lr}
   29fe2:	f7ff feb7 	bl	29d54 <map_to_g2>
   29fe6:	bd08      	pop	{r3, pc}

00029fe8 <blst_encode_to_g2>:
   29fe8:	b510      	push	{r4, lr}
   29fea:	b09c      	sub	sp, #112	; 0x70
   29fec:	4604      	mov	r4, r0
   29fee:	981e      	ldr	r0, [sp, #120]	; 0x78
   29ff0:	9003      	str	r0, [sp, #12]
   29ff2:	9302      	str	r3, [sp, #8]
   29ff4:	9201      	str	r2, [sp, #4]
   29ff6:	9100      	str	r1, [sp, #0]
   29ff8:	9b20      	ldr	r3, [sp, #128]	; 0x80
   29ffa:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   29ffc:	2102      	movs	r1, #2
   29ffe:	a804      	add	r0, sp, #16
   2a000:	f7fc fffd 	bl	26ffe <hash_to_field>
   2a004:	2200      	movs	r2, #0
   2a006:	a904      	add	r1, sp, #16
   2a008:	4620      	mov	r0, r4
   2a00a:	f7ff fea3 	bl	29d54 <map_to_g2>
   2a00e:	b01c      	add	sp, #112	; 0x70
   2a010:	bd10      	pop	{r4, pc}

0002a012 <blst_hash_to_g2>:
   2a012:	b510      	push	{r4, lr}
   2a014:	b0b4      	sub	sp, #208	; 0xd0
   2a016:	4604      	mov	r4, r0
   2a018:	9836      	ldr	r0, [sp, #216]	; 0xd8
   2a01a:	9003      	str	r0, [sp, #12]
   2a01c:	9302      	str	r3, [sp, #8]
   2a01e:	9201      	str	r2, [sp, #4]
   2a020:	9100      	str	r1, [sp, #0]
   2a022:	9b38      	ldr	r3, [sp, #224]	; 0xe0
   2a024:	9a37      	ldr	r2, [sp, #220]	; 0xdc
   2a026:	2104      	movs	r1, #4
   2a028:	a804      	add	r0, sp, #16
   2a02a:	f7fc ffe8 	bl	26ffe <hash_to_field>
   2a02e:	aa1c      	add	r2, sp, #112	; 0x70
   2a030:	a904      	add	r1, sp, #16
   2a032:	4620      	mov	r0, r4
   2a034:	f7ff fe8e 	bl	29d54 <map_to_g2>
   2a038:	b034      	add	sp, #208	; 0xd0
   2a03a:	bd10      	pop	{r4, pc}

0002a03c <sqr_fp4>:
   2a03c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a040:	b0be      	sub	sp, #248	; 0xf8
   2a042:	4604      	mov	r4, r0
   2a044:	468a      	mov	sl, r1
   2a046:	4690      	mov	r8, r2
   2a048:	4d3e      	ldr	r5, [pc, #248]	; (2a144 <sqr_fp4+0x108>)
   2a04a:	4f3f      	ldr	r7, [pc, #252]	; (2a148 <sqr_fp4+0x10c>)
   2a04c:	462b      	mov	r3, r5
   2a04e:	463a      	mov	r2, r7
   2a050:	a826      	add	r0, sp, #152	; 0x98
   2a052:	f7fd fc0d 	bl	27870 <sqr_mont_384x>
   2a056:	462b      	mov	r3, r5
   2a058:	463a      	mov	r2, r7
   2a05a:	4641      	mov	r1, r8
   2a05c:	a80e      	add	r0, sp, #56	; 0x38
   2a05e:	f7fd fc07 	bl	27870 <sqr_mont_384x>
   2a062:	f104 0560 	add.w	r5, r4, #96	; 0x60
   2a066:	f04f 090c 	mov.w	r9, #12
   2a06a:	f8cd 9000 	str.w	r9, [sp]
   2a06e:	463b      	mov	r3, r7
   2a070:	4642      	mov	r2, r8
   2a072:	4651      	mov	r1, sl
   2a074:	4628      	mov	r0, r5
   2a076:	f7f6 fe53 	bl	20d20 <add_mod_n>
   2a07a:	f104 0690 	add.w	r6, r4, #144	; 0x90
   2a07e:	f8cd 9000 	str.w	r9, [sp]
   2a082:	463b      	mov	r3, r7
   2a084:	f108 0230 	add.w	r2, r8, #48	; 0x30
   2a088:	f10a 0130 	add.w	r1, sl, #48	; 0x30
   2a08c:	4630      	mov	r0, r6
   2a08e:	f7f6 fe47 	bl	20d20 <add_mod_n>
   2a092:	f8cd 9000 	str.w	r9, [sp]
   2a096:	463b      	mov	r3, r7
   2a098:	aa1a      	add	r2, sp, #104	; 0x68
   2a09a:	a90e      	add	r1, sp, #56	; 0x38
   2a09c:	a802      	add	r0, sp, #8
   2a09e:	f7f6 fe3f 	bl	20d20 <add_mod_n>
   2a0a2:	f8cd 9000 	str.w	r9, [sp]
   2a0a6:	463b      	mov	r3, r7
   2a0a8:	aa1a      	add	r2, sp, #104	; 0x68
   2a0aa:	a90e      	add	r1, sp, #56	; 0x38
   2a0ac:	4620      	mov	r0, r4
   2a0ae:	f7f6 fae1 	bl	20674 <sub_mod_n>
   2a0b2:	aa02      	add	r2, sp, #8
   2a0b4:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   2a0b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   2a0bc:	f852 1b04 	ldr.w	r1, [r2], #4
   2a0c0:	f843 1f04 	str.w	r1, [r3, #4]!
   2a0c4:	4298      	cmp	r0, r3
   2a0c6:	d1f9      	bne.n	2a0bc <sqr_fp4+0x80>
   2a0c8:	4f1f      	ldr	r7, [pc, #124]	; (2a148 <sqr_fp4+0x10c>)
   2a0ca:	f04f 080c 	mov.w	r8, #12
   2a0ce:	f8cd 8000 	str.w	r8, [sp]
   2a0d2:	463b      	mov	r3, r7
   2a0d4:	aa26      	add	r2, sp, #152	; 0x98
   2a0d6:	4621      	mov	r1, r4
   2a0d8:	4620      	mov	r0, r4
   2a0da:	f7f6 fe21 	bl	20d20 <add_mod_n>
   2a0de:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2a0e2:	f8cd 8000 	str.w	r8, [sp]
   2a0e6:	463b      	mov	r3, r7
   2a0e8:	aa32      	add	r2, sp, #200	; 0xc8
   2a0ea:	4601      	mov	r1, r0
   2a0ec:	f7f6 fe18 	bl	20d20 <add_mod_n>
   2a0f0:	4b14      	ldr	r3, [pc, #80]	; (2a144 <sqr_fp4+0x108>)
   2a0f2:	463a      	mov	r2, r7
   2a0f4:	4629      	mov	r1, r5
   2a0f6:	4628      	mov	r0, r5
   2a0f8:	f7fd fbba 	bl	27870 <sqr_mont_384x>
   2a0fc:	f8cd 8000 	str.w	r8, [sp]
   2a100:	463b      	mov	r3, r7
   2a102:	aa26      	add	r2, sp, #152	; 0x98
   2a104:	4629      	mov	r1, r5
   2a106:	4628      	mov	r0, r5
   2a108:	f7f6 fab4 	bl	20674 <sub_mod_n>
   2a10c:	f8cd 8000 	str.w	r8, [sp]
   2a110:	463b      	mov	r3, r7
   2a112:	aa32      	add	r2, sp, #200	; 0xc8
   2a114:	4631      	mov	r1, r6
   2a116:	4630      	mov	r0, r6
   2a118:	f7f6 faac 	bl	20674 <sub_mod_n>
   2a11c:	f8cd 8000 	str.w	r8, [sp]
   2a120:	463b      	mov	r3, r7
   2a122:	aa0e      	add	r2, sp, #56	; 0x38
   2a124:	4629      	mov	r1, r5
   2a126:	4628      	mov	r0, r5
   2a128:	f7f6 faa4 	bl	20674 <sub_mod_n>
   2a12c:	f8cd 8000 	str.w	r8, [sp]
   2a130:	463b      	mov	r3, r7
   2a132:	aa1a      	add	r2, sp, #104	; 0x68
   2a134:	4631      	mov	r1, r6
   2a136:	4630      	mov	r0, r6
   2a138:	f7f6 fa9c 	bl	20674 <sub_mod_n>
   2a13c:	b03e      	add	sp, #248	; 0xf8
   2a13e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2a142:	bf00      	nop
   2a144:	fffcfffd 	.word	0xfffcfffd
   2a148:	00038688 	.word	0x00038688

0002a14c <cyclotomic_sqr_fp12>:
   2a14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a150:	f5ad 7d21 	sub.w	sp, sp, #644	; 0x284
   2a154:	4604      	mov	r4, r0
   2a156:	460f      	mov	r7, r1
   2a158:	f501 7590 	add.w	r5, r1, #288	; 0x120
   2a15c:	9503      	str	r5, [sp, #12]
   2a15e:	f501 7ac0 	add.w	sl, r1, #384	; 0x180
   2a162:	4652      	mov	r2, sl
   2a164:	a870      	add	r0, sp, #448	; 0x1c0
   2a166:	f7ff ff69 	bl	2a03c <sqr_fp4>
   2a16a:	f107 0bc0 	add.w	fp, r7, #192	; 0xc0
   2a16e:	465a      	mov	r2, fp
   2a170:	4629      	mov	r1, r5
   2a172:	a840      	add	r0, sp, #256	; 0x100
   2a174:	f7ff ff62 	bl	2a03c <sqr_fp4>
   2a178:	f107 0860 	add.w	r8, r7, #96	; 0x60
   2a17c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
   2a180:	9302      	str	r3, [sp, #8]
   2a182:	461a      	mov	r2, r3
   2a184:	4641      	mov	r1, r8
   2a186:	a810      	add	r0, sp, #64	; 0x40
   2a188:	f7ff ff58 	bl	2a03c <sqr_fp4>
   2a18c:	4d9b      	ldr	r5, [pc, #620]	; (2a3fc <cyclotomic_sqr_fp12+0x2b0>)
   2a18e:	260c      	movs	r6, #12
   2a190:	9600      	str	r6, [sp, #0]
   2a192:	462b      	mov	r3, r5
   2a194:	463a      	mov	r2, r7
   2a196:	a970      	add	r1, sp, #448	; 0x1c0
   2a198:	4620      	mov	r0, r4
   2a19a:	f7f6 fa6b 	bl	20674 <sub_mod_n>
   2a19e:	f104 0930 	add.w	r9, r4, #48	; 0x30
   2a1a2:	9600      	str	r6, [sp, #0]
   2a1a4:	462b      	mov	r3, r5
   2a1a6:	f107 0230 	add.w	r2, r7, #48	; 0x30
   2a1aa:	a97c      	add	r1, sp, #496	; 0x1f0
   2a1ac:	4648      	mov	r0, r9
   2a1ae:	f7f6 fa61 	bl	20674 <sub_mod_n>
   2a1b2:	9600      	str	r6, [sp, #0]
   2a1b4:	462b      	mov	r3, r5
   2a1b6:	4622      	mov	r2, r4
   2a1b8:	4621      	mov	r1, r4
   2a1ba:	4620      	mov	r0, r4
   2a1bc:	f7f6 fdb0 	bl	20d20 <add_mod_n>
   2a1c0:	9600      	str	r6, [sp, #0]
   2a1c2:	462b      	mov	r3, r5
   2a1c4:	464a      	mov	r2, r9
   2a1c6:	4649      	mov	r1, r9
   2a1c8:	4648      	mov	r0, r9
   2a1ca:	f7f6 fda9 	bl	20d20 <add_mod_n>
   2a1ce:	9600      	str	r6, [sp, #0]
   2a1d0:	462b      	mov	r3, r5
   2a1d2:	aa70      	add	r2, sp, #448	; 0x1c0
   2a1d4:	4621      	mov	r1, r4
   2a1d6:	4620      	mov	r0, r4
   2a1d8:	f7f6 fda2 	bl	20d20 <add_mod_n>
   2a1dc:	9600      	str	r6, [sp, #0]
   2a1de:	462b      	mov	r3, r5
   2a1e0:	aa7c      	add	r2, sp, #496	; 0x1f0
   2a1e2:	4649      	mov	r1, r9
   2a1e4:	4648      	mov	r0, r9
   2a1e6:	f7f6 fd9b 	bl	20d20 <add_mod_n>
   2a1ea:	f104 0960 	add.w	r9, r4, #96	; 0x60
   2a1ee:	9600      	str	r6, [sp, #0]
   2a1f0:	462b      	mov	r3, r5
   2a1f2:	4642      	mov	r2, r8
   2a1f4:	a940      	add	r1, sp, #256	; 0x100
   2a1f6:	4648      	mov	r0, r9
   2a1f8:	f7f6 fa3c 	bl	20674 <sub_mod_n>
   2a1fc:	f104 0890 	add.w	r8, r4, #144	; 0x90
   2a200:	9600      	str	r6, [sp, #0]
   2a202:	462b      	mov	r3, r5
   2a204:	f107 0290 	add.w	r2, r7, #144	; 0x90
   2a208:	a94c      	add	r1, sp, #304	; 0x130
   2a20a:	4640      	mov	r0, r8
   2a20c:	f7f6 fa32 	bl	20674 <sub_mod_n>
   2a210:	9600      	str	r6, [sp, #0]
   2a212:	462b      	mov	r3, r5
   2a214:	464a      	mov	r2, r9
   2a216:	4649      	mov	r1, r9
   2a218:	4648      	mov	r0, r9
   2a21a:	f7f6 fd81 	bl	20d20 <add_mod_n>
   2a21e:	9600      	str	r6, [sp, #0]
   2a220:	462b      	mov	r3, r5
   2a222:	4642      	mov	r2, r8
   2a224:	4641      	mov	r1, r8
   2a226:	4640      	mov	r0, r8
   2a228:	f7f6 fd7a 	bl	20d20 <add_mod_n>
   2a22c:	9600      	str	r6, [sp, #0]
   2a22e:	462b      	mov	r3, r5
   2a230:	aa40      	add	r2, sp, #256	; 0x100
   2a232:	4649      	mov	r1, r9
   2a234:	4648      	mov	r0, r9
   2a236:	f7f6 fd73 	bl	20d20 <add_mod_n>
   2a23a:	9600      	str	r6, [sp, #0]
   2a23c:	462b      	mov	r3, r5
   2a23e:	aa4c      	add	r2, sp, #304	; 0x130
   2a240:	4641      	mov	r1, r8
   2a242:	4640      	mov	r0, r8
   2a244:	f7f6 fd6c 	bl	20d20 <add_mod_n>
   2a248:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
   2a24c:	9600      	str	r6, [sp, #0]
   2a24e:	462b      	mov	r3, r5
   2a250:	465a      	mov	r2, fp
   2a252:	a910      	add	r1, sp, #64	; 0x40
   2a254:	4640      	mov	r0, r8
   2a256:	f7f6 fa0d 	bl	20674 <sub_mod_n>
   2a25a:	f104 09f0 	add.w	r9, r4, #240	; 0xf0
   2a25e:	9600      	str	r6, [sp, #0]
   2a260:	462b      	mov	r3, r5
   2a262:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
   2a266:	a91c      	add	r1, sp, #112	; 0x70
   2a268:	4648      	mov	r0, r9
   2a26a:	f7f6 fa03 	bl	20674 <sub_mod_n>
   2a26e:	9600      	str	r6, [sp, #0]
   2a270:	462b      	mov	r3, r5
   2a272:	4642      	mov	r2, r8
   2a274:	4641      	mov	r1, r8
   2a276:	4640      	mov	r0, r8
   2a278:	f7f6 fd52 	bl	20d20 <add_mod_n>
   2a27c:	9600      	str	r6, [sp, #0]
   2a27e:	462b      	mov	r3, r5
   2a280:	464a      	mov	r2, r9
   2a282:	4649      	mov	r1, r9
   2a284:	4648      	mov	r0, r9
   2a286:	f7f6 fd4b 	bl	20d20 <add_mod_n>
   2a28a:	9600      	str	r6, [sp, #0]
   2a28c:	462b      	mov	r3, r5
   2a28e:	aa10      	add	r2, sp, #64	; 0x40
   2a290:	4641      	mov	r1, r8
   2a292:	4640      	mov	r0, r8
   2a294:	f7f6 fd44 	bl	20d20 <add_mod_n>
   2a298:	9600      	str	r6, [sp, #0]
   2a29a:	462b      	mov	r3, r5
   2a29c:	aa1c      	add	r2, sp, #112	; 0x70
   2a29e:	4649      	mov	r1, r9
   2a2a0:	4648      	mov	r0, r9
   2a2a2:	f7f6 fd3d 	bl	20d20 <add_mod_n>
   2a2a6:	9600      	str	r6, [sp, #0]
   2a2a8:	462b      	mov	r3, r5
   2a2aa:	aa34      	add	r2, sp, #208	; 0xd0
   2a2ac:	a928      	add	r1, sp, #160	; 0xa0
   2a2ae:	a804      	add	r0, sp, #16
   2a2b0:	f7f6 fd36 	bl	20d20 <add_mod_n>
   2a2b4:	9600      	str	r6, [sp, #0]
   2a2b6:	462b      	mov	r3, r5
   2a2b8:	aa34      	add	r2, sp, #208	; 0xd0
   2a2ba:	a928      	add	r1, sp, #160	; 0xa0
   2a2bc:	4608      	mov	r0, r1
   2a2be:	f7f6 f9d9 	bl	20674 <sub_mod_n>
   2a2c2:	ab04      	add	r3, sp, #16
   2a2c4:	aa33      	add	r2, sp, #204	; 0xcc
   2a2c6:	a810      	add	r0, sp, #64	; 0x40
   2a2c8:	f853 1b04 	ldr.w	r1, [r3], #4
   2a2cc:	f842 1f04 	str.w	r1, [r2, #4]!
   2a2d0:	4298      	cmp	r0, r3
   2a2d2:	d1f9      	bne.n	2a2c8 <cyclotomic_sqr_fp12+0x17c>
   2a2d4:	f504 7890 	add.w	r8, r4, #288	; 0x120
   2a2d8:	4d48      	ldr	r5, [pc, #288]	; (2a3fc <cyclotomic_sqr_fp12+0x2b0>)
   2a2da:	260c      	movs	r6, #12
   2a2dc:	9600      	str	r6, [sp, #0]
   2a2de:	462b      	mov	r3, r5
   2a2e0:	9a03      	ldr	r2, [sp, #12]
   2a2e2:	a928      	add	r1, sp, #160	; 0xa0
   2a2e4:	4640      	mov	r0, r8
   2a2e6:	f7f6 fd1b 	bl	20d20 <add_mod_n>
   2a2ea:	f504 79a8 	add.w	r9, r4, #336	; 0x150
   2a2ee:	9600      	str	r6, [sp, #0]
   2a2f0:	462b      	mov	r3, r5
   2a2f2:	f507 72a8 	add.w	r2, r7, #336	; 0x150
   2a2f6:	a934      	add	r1, sp, #208	; 0xd0
   2a2f8:	4648      	mov	r0, r9
   2a2fa:	f7f6 fd11 	bl	20d20 <add_mod_n>
   2a2fe:	9600      	str	r6, [sp, #0]
   2a300:	462b      	mov	r3, r5
   2a302:	4642      	mov	r2, r8
   2a304:	4641      	mov	r1, r8
   2a306:	4640      	mov	r0, r8
   2a308:	f7f6 fd0a 	bl	20d20 <add_mod_n>
   2a30c:	9600      	str	r6, [sp, #0]
   2a30e:	462b      	mov	r3, r5
   2a310:	464a      	mov	r2, r9
   2a312:	4649      	mov	r1, r9
   2a314:	4648      	mov	r0, r9
   2a316:	f7f6 fd03 	bl	20d20 <add_mod_n>
   2a31a:	9600      	str	r6, [sp, #0]
   2a31c:	462b      	mov	r3, r5
   2a31e:	aa28      	add	r2, sp, #160	; 0xa0
   2a320:	4641      	mov	r1, r8
   2a322:	4640      	mov	r0, r8
   2a324:	f7f6 fcfc 	bl	20d20 <add_mod_n>
   2a328:	9600      	str	r6, [sp, #0]
   2a32a:	462b      	mov	r3, r5
   2a32c:	aa34      	add	r2, sp, #208	; 0xd0
   2a32e:	4649      	mov	r1, r9
   2a330:	4648      	mov	r0, r9
   2a332:	f7f6 fcf5 	bl	20d20 <add_mod_n>
   2a336:	f504 79c0 	add.w	r9, r4, #384	; 0x180
   2a33a:	9600      	str	r6, [sp, #0]
   2a33c:	462b      	mov	r3, r5
   2a33e:	4652      	mov	r2, sl
   2a340:	a988      	add	r1, sp, #544	; 0x220
   2a342:	4648      	mov	r0, r9
   2a344:	f7f6 fcec 	bl	20d20 <add_mod_n>
   2a348:	f504 78d8 	add.w	r8, r4, #432	; 0x1b0
   2a34c:	9600      	str	r6, [sp, #0]
   2a34e:	462b      	mov	r3, r5
   2a350:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
   2a354:	a994      	add	r1, sp, #592	; 0x250
   2a356:	4640      	mov	r0, r8
   2a358:	f7f6 fce2 	bl	20d20 <add_mod_n>
   2a35c:	9600      	str	r6, [sp, #0]
   2a35e:	462b      	mov	r3, r5
   2a360:	464a      	mov	r2, r9
   2a362:	4649      	mov	r1, r9
   2a364:	4648      	mov	r0, r9
   2a366:	f7f6 fcdb 	bl	20d20 <add_mod_n>
   2a36a:	9600      	str	r6, [sp, #0]
   2a36c:	462b      	mov	r3, r5
   2a36e:	4642      	mov	r2, r8
   2a370:	4641      	mov	r1, r8
   2a372:	4640      	mov	r0, r8
   2a374:	f7f6 fcd4 	bl	20d20 <add_mod_n>
   2a378:	9600      	str	r6, [sp, #0]
   2a37a:	462b      	mov	r3, r5
   2a37c:	aa88      	add	r2, sp, #544	; 0x220
   2a37e:	4649      	mov	r1, r9
   2a380:	4648      	mov	r0, r9
   2a382:	f7f6 fccd 	bl	20d20 <add_mod_n>
   2a386:	9600      	str	r6, [sp, #0]
   2a388:	462b      	mov	r3, r5
   2a38a:	aa94      	add	r2, sp, #592	; 0x250
   2a38c:	4641      	mov	r1, r8
   2a38e:	4640      	mov	r0, r8
   2a390:	f7f6 fcc6 	bl	20d20 <add_mod_n>
   2a394:	f504 78f0 	add.w	r8, r4, #480	; 0x1e0
   2a398:	9600      	str	r6, [sp, #0]
   2a39a:	462b      	mov	r3, r5
   2a39c:	9a02      	ldr	r2, [sp, #8]
   2a39e:	a958      	add	r1, sp, #352	; 0x160
   2a3a0:	4640      	mov	r0, r8
   2a3a2:	f7f6 fcbd 	bl	20d20 <add_mod_n>
   2a3a6:	f504 7404 	add.w	r4, r4, #528	; 0x210
   2a3aa:	9600      	str	r6, [sp, #0]
   2a3ac:	462b      	mov	r3, r5
   2a3ae:	f507 7204 	add.w	r2, r7, #528	; 0x210
   2a3b2:	a964      	add	r1, sp, #400	; 0x190
   2a3b4:	4620      	mov	r0, r4
   2a3b6:	f7f6 fcb3 	bl	20d20 <add_mod_n>
   2a3ba:	9600      	str	r6, [sp, #0]
   2a3bc:	462b      	mov	r3, r5
   2a3be:	4642      	mov	r2, r8
   2a3c0:	4641      	mov	r1, r8
   2a3c2:	4640      	mov	r0, r8
   2a3c4:	f7f6 fcac 	bl	20d20 <add_mod_n>
   2a3c8:	9600      	str	r6, [sp, #0]
   2a3ca:	462b      	mov	r3, r5
   2a3cc:	4622      	mov	r2, r4
   2a3ce:	4621      	mov	r1, r4
   2a3d0:	4620      	mov	r0, r4
   2a3d2:	f7f6 fca5 	bl	20d20 <add_mod_n>
   2a3d6:	9600      	str	r6, [sp, #0]
   2a3d8:	462b      	mov	r3, r5
   2a3da:	aa58      	add	r2, sp, #352	; 0x160
   2a3dc:	4641      	mov	r1, r8
   2a3de:	4640      	mov	r0, r8
   2a3e0:	f7f6 fc9e 	bl	20d20 <add_mod_n>
   2a3e4:	9600      	str	r6, [sp, #0]
   2a3e6:	462b      	mov	r3, r5
   2a3e8:	aa64      	add	r2, sp, #400	; 0x190
   2a3ea:	4621      	mov	r1, r4
   2a3ec:	4620      	mov	r0, r4
   2a3ee:	f7f6 fc97 	bl	20d20 <add_mod_n>
   2a3f2:	f50d 7d21 	add.w	sp, sp, #644	; 0x284
   2a3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a3fa:	bf00      	nop
   2a3fc:	00038688 	.word	0x00038688

0002a400 <blst_fp12_cyclotomic_sqr>:
   2a400:	b508      	push	{r3, lr}
   2a402:	f7ff fea3 	bl	2a14c <cyclotomic_sqr_fp12>
   2a406:	bd08      	pop	{r3, pc}

0002a408 <mul_n_sqr>:
   2a408:	b570      	push	{r4, r5, r6, lr}
   2a40a:	4605      	mov	r5, r0
   2a40c:	4616      	mov	r6, r2
   2a40e:	460a      	mov	r2, r1
   2a410:	4601      	mov	r1, r0
   2a412:	f7fa fab3 	bl	2497c <mul_fp12>
   2a416:	1e74      	subs	r4, r6, #1
   2a418:	b13e      	cbz	r6, 2a42a <mul_n_sqr+0x22>
   2a41a:	4629      	mov	r1, r5
   2a41c:	4628      	mov	r0, r5
   2a41e:	f7ff fe95 	bl	2a14c <cyclotomic_sqr_fp12>
   2a422:	3c01      	subs	r4, #1
   2a424:	f1b4 3fff 	cmp.w	r4, #4294967295
   2a428:	d1f7      	bne.n	2a41a <mul_n_sqr+0x12>
   2a42a:	bd70      	pop	{r4, r5, r6, pc}

0002a42c <raise_to_z_div_by_2>:
   2a42c:	b538      	push	{r3, r4, r5, lr}
   2a42e:	4604      	mov	r4, r0
   2a430:	460d      	mov	r5, r1
   2a432:	f7ff fe8b 	bl	2a14c <cyclotomic_sqr_fp12>
   2a436:	2202      	movs	r2, #2
   2a438:	4629      	mov	r1, r5
   2a43a:	4620      	mov	r0, r4
   2a43c:	f7ff ffe4 	bl	2a408 <mul_n_sqr>
   2a440:	2203      	movs	r2, #3
   2a442:	4629      	mov	r1, r5
   2a444:	4620      	mov	r0, r4
   2a446:	f7ff ffdf 	bl	2a408 <mul_n_sqr>
   2a44a:	2209      	movs	r2, #9
   2a44c:	4629      	mov	r1, r5
   2a44e:	4620      	mov	r0, r4
   2a450:	f7ff ffda 	bl	2a408 <mul_n_sqr>
   2a454:	2220      	movs	r2, #32
   2a456:	4629      	mov	r1, r5
   2a458:	4620      	mov	r0, r4
   2a45a:	f7ff ffd5 	bl	2a408 <mul_n_sqr>
   2a45e:	220f      	movs	r2, #15
   2a460:	4629      	mov	r1, r5
   2a462:	4620      	mov	r0, r4
   2a464:	f7ff ffd0 	bl	2a408 <mul_n_sqr>
   2a468:	4620      	mov	r0, r4
   2a46a:	f7f7 fc6d 	bl	21d48 <conjugate_fp12>
   2a46e:	bd38      	pop	{r3, r4, r5, pc}

0002a470 <sqr_fp6>:
   2a470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a474:	b0ef      	sub	sp, #444	; 0x1bc
   2a476:	4606      	mov	r6, r0
   2a478:	4689      	mov	r9, r1
   2a47a:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 2a66c <sqr_fp6+0x1fc>
   2a47e:	4c7c      	ldr	r4, [pc, #496]	; (2a670 <sqr_fp6+0x200>)
   2a480:	4653      	mov	r3, sl
   2a482:	4622      	mov	r2, r4
   2a484:	a856      	add	r0, sp, #344	; 0x158
   2a486:	f7fd f9f3 	bl	27870 <sqr_mont_384x>
   2a48a:	f109 0b60 	add.w	fp, r9, #96	; 0x60
   2a48e:	f8cd a000 	str.w	sl, [sp]
   2a492:	4623      	mov	r3, r4
   2a494:	465a      	mov	r2, fp
   2a496:	4649      	mov	r1, r9
   2a498:	a83e      	add	r0, sp, #248	; 0xf8
   2a49a:	f7f9 ff5b 	bl	24354 <mul_mont_384x>
   2a49e:	250c      	movs	r5, #12
   2a4a0:	9500      	str	r5, [sp, #0]
   2a4a2:	4623      	mov	r3, r4
   2a4a4:	aa3e      	add	r2, sp, #248	; 0xf8
   2a4a6:	4611      	mov	r1, r2
   2a4a8:	4610      	mov	r0, r2
   2a4aa:	f7f6 fc39 	bl	20d20 <add_mod_n>
   2a4ae:	9500      	str	r5, [sp, #0]
   2a4b0:	4623      	mov	r3, r4
   2a4b2:	aa4a      	add	r2, sp, #296	; 0x128
   2a4b4:	4611      	mov	r1, r2
   2a4b6:	4610      	mov	r0, r2
   2a4b8:	f7f6 fc32 	bl	20d20 <add_mod_n>
   2a4bc:	f109 08c0 	add.w	r8, r9, #192	; 0xc0
   2a4c0:	f8cd a000 	str.w	sl, [sp]
   2a4c4:	4623      	mov	r3, r4
   2a4c6:	4642      	mov	r2, r8
   2a4c8:	4659      	mov	r1, fp
   2a4ca:	a826      	add	r0, sp, #152	; 0x98
   2a4cc:	f7f9 ff42 	bl	24354 <mul_mont_384x>
   2a4d0:	9500      	str	r5, [sp, #0]
   2a4d2:	4623      	mov	r3, r4
   2a4d4:	aa26      	add	r2, sp, #152	; 0x98
   2a4d6:	4611      	mov	r1, r2
   2a4d8:	4610      	mov	r0, r2
   2a4da:	f7f6 fc21 	bl	20d20 <add_mod_n>
   2a4de:	9500      	str	r5, [sp, #0]
   2a4e0:	4623      	mov	r3, r4
   2a4e2:	aa32      	add	r2, sp, #200	; 0xc8
   2a4e4:	4611      	mov	r1, r2
   2a4e6:	4610      	mov	r0, r2
   2a4e8:	f7f6 fc1a 	bl	20d20 <add_mod_n>
   2a4ec:	4653      	mov	r3, sl
   2a4ee:	4622      	mov	r2, r4
   2a4f0:	4641      	mov	r1, r8
   2a4f2:	a80e      	add	r0, sp, #56	; 0x38
   2a4f4:	f7fd f9bc 	bl	27870 <sqr_mont_384x>
   2a4f8:	f106 07c0 	add.w	r7, r6, #192	; 0xc0
   2a4fc:	9500      	str	r5, [sp, #0]
   2a4fe:	4623      	mov	r3, r4
   2a500:	465a      	mov	r2, fp
   2a502:	4641      	mov	r1, r8
   2a504:	4638      	mov	r0, r7
   2a506:	f7f6 fc0b 	bl	20d20 <add_mod_n>
   2a50a:	f106 08f0 	add.w	r8, r6, #240	; 0xf0
   2a50e:	9500      	str	r5, [sp, #0]
   2a510:	4623      	mov	r3, r4
   2a512:	f109 0290 	add.w	r2, r9, #144	; 0x90
   2a516:	f109 01f0 	add.w	r1, r9, #240	; 0xf0
   2a51a:	4640      	mov	r0, r8
   2a51c:	f7f6 fc00 	bl	20d20 <add_mod_n>
   2a520:	9500      	str	r5, [sp, #0]
   2a522:	4623      	mov	r3, r4
   2a524:	464a      	mov	r2, r9
   2a526:	4639      	mov	r1, r7
   2a528:	4638      	mov	r0, r7
   2a52a:	f7f6 fbf9 	bl	20d20 <add_mod_n>
   2a52e:	9500      	str	r5, [sp, #0]
   2a530:	4623      	mov	r3, r4
   2a532:	f109 0230 	add.w	r2, r9, #48	; 0x30
   2a536:	4641      	mov	r1, r8
   2a538:	4640      	mov	r0, r8
   2a53a:	f7f6 fbf1 	bl	20d20 <add_mod_n>
   2a53e:	4653      	mov	r3, sl
   2a540:	4622      	mov	r2, r4
   2a542:	4639      	mov	r1, r7
   2a544:	4638      	mov	r0, r7
   2a546:	f7fd f993 	bl	27870 <sqr_mont_384x>
   2a54a:	9500      	str	r5, [sp, #0]
   2a54c:	4623      	mov	r3, r4
   2a54e:	aa56      	add	r2, sp, #344	; 0x158
   2a550:	4639      	mov	r1, r7
   2a552:	4638      	mov	r0, r7
   2a554:	f7f6 f88e 	bl	20674 <sub_mod_n>
   2a558:	9500      	str	r5, [sp, #0]
   2a55a:	4623      	mov	r3, r4
   2a55c:	aa62      	add	r2, sp, #392	; 0x188
   2a55e:	4641      	mov	r1, r8
   2a560:	4640      	mov	r0, r8
   2a562:	f7f6 f887 	bl	20674 <sub_mod_n>
   2a566:	9500      	str	r5, [sp, #0]
   2a568:	4623      	mov	r3, r4
   2a56a:	aa0e      	add	r2, sp, #56	; 0x38
   2a56c:	4639      	mov	r1, r7
   2a56e:	4638      	mov	r0, r7
   2a570:	f7f6 f880 	bl	20674 <sub_mod_n>
   2a574:	9500      	str	r5, [sp, #0]
   2a576:	4623      	mov	r3, r4
   2a578:	aa1a      	add	r2, sp, #104	; 0x68
   2a57a:	4641      	mov	r1, r8
   2a57c:	4640      	mov	r0, r8
   2a57e:	f7f6 f879 	bl	20674 <sub_mod_n>
   2a582:	9500      	str	r5, [sp, #0]
   2a584:	4623      	mov	r3, r4
   2a586:	aa3e      	add	r2, sp, #248	; 0xf8
   2a588:	4639      	mov	r1, r7
   2a58a:	4638      	mov	r0, r7
   2a58c:	f7f6 f872 	bl	20674 <sub_mod_n>
   2a590:	9500      	str	r5, [sp, #0]
   2a592:	4623      	mov	r3, r4
   2a594:	aa4a      	add	r2, sp, #296	; 0x128
   2a596:	4641      	mov	r1, r8
   2a598:	4640      	mov	r0, r8
   2a59a:	f7f6 f86b 	bl	20674 <sub_mod_n>
   2a59e:	9500      	str	r5, [sp, #0]
   2a5a0:	4623      	mov	r3, r4
   2a5a2:	aa26      	add	r2, sp, #152	; 0x98
   2a5a4:	4639      	mov	r1, r7
   2a5a6:	4638      	mov	r0, r7
   2a5a8:	f7f6 f864 	bl	20674 <sub_mod_n>
   2a5ac:	9500      	str	r5, [sp, #0]
   2a5ae:	4623      	mov	r3, r4
   2a5b0:	aa32      	add	r2, sp, #200	; 0xc8
   2a5b2:	4641      	mov	r1, r8
   2a5b4:	4640      	mov	r0, r8
   2a5b6:	f7f6 f85d 	bl	20674 <sub_mod_n>
   2a5ba:	9500      	str	r5, [sp, #0]
   2a5bc:	4623      	mov	r3, r4
   2a5be:	aa32      	add	r2, sp, #200	; 0xc8
   2a5c0:	a926      	add	r1, sp, #152	; 0x98
   2a5c2:	a802      	add	r0, sp, #8
   2a5c4:	f7f6 fbac 	bl	20d20 <add_mod_n>
   2a5c8:	9500      	str	r5, [sp, #0]
   2a5ca:	4623      	mov	r3, r4
   2a5cc:	aa32      	add	r2, sp, #200	; 0xc8
   2a5ce:	a926      	add	r1, sp, #152	; 0x98
   2a5d0:	4630      	mov	r0, r6
   2a5d2:	f7f6 f84f 	bl	20674 <sub_mod_n>
   2a5d6:	aa02      	add	r2, sp, #8
   2a5d8:	f106 032c 	add.w	r3, r6, #44	; 0x2c
   2a5dc:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   2a5e0:	f852 1b04 	ldr.w	r1, [r2], #4
   2a5e4:	f843 1f04 	str.w	r1, [r3, #4]!
   2a5e8:	4298      	cmp	r0, r3
   2a5ea:	d1f9      	bne.n	2a5e0 <sqr_fp6+0x170>
   2a5ec:	4c20      	ldr	r4, [pc, #128]	; (2a670 <sqr_fp6+0x200>)
   2a5ee:	250c      	movs	r5, #12
   2a5f0:	9500      	str	r5, [sp, #0]
   2a5f2:	4623      	mov	r3, r4
   2a5f4:	aa56      	add	r2, sp, #344	; 0x158
   2a5f6:	4631      	mov	r1, r6
   2a5f8:	4630      	mov	r0, r6
   2a5fa:	f7f6 fb91 	bl	20d20 <add_mod_n>
   2a5fe:	f106 0030 	add.w	r0, r6, #48	; 0x30
   2a602:	9500      	str	r5, [sp, #0]
   2a604:	4623      	mov	r3, r4
   2a606:	aa62      	add	r2, sp, #392	; 0x188
   2a608:	4601      	mov	r1, r0
   2a60a:	f7f6 fb89 	bl	20d20 <add_mod_n>
   2a60e:	f106 0760 	add.w	r7, r6, #96	; 0x60
   2a612:	9500      	str	r5, [sp, #0]
   2a614:	4623      	mov	r3, r4
   2a616:	aa1a      	add	r2, sp, #104	; 0x68
   2a618:	a90e      	add	r1, sp, #56	; 0x38
   2a61a:	a802      	add	r0, sp, #8
   2a61c:	f7f6 fb80 	bl	20d20 <add_mod_n>
   2a620:	9500      	str	r5, [sp, #0]
   2a622:	4623      	mov	r3, r4
   2a624:	aa1a      	add	r2, sp, #104	; 0x68
   2a626:	a90e      	add	r1, sp, #56	; 0x38
   2a628:	4638      	mov	r0, r7
   2a62a:	f7f6 f823 	bl	20674 <sub_mod_n>
   2a62e:	aa02      	add	r2, sp, #8
   2a630:	f106 038c 	add.w	r3, r6, #140	; 0x8c
   2a634:	f106 00bc 	add.w	r0, r6, #188	; 0xbc
   2a638:	f852 1b04 	ldr.w	r1, [r2], #4
   2a63c:	f843 1f04 	str.w	r1, [r3, #4]!
   2a640:	4283      	cmp	r3, r0
   2a642:	d1f9      	bne.n	2a638 <sqr_fp6+0x1c8>
   2a644:	4c0a      	ldr	r4, [pc, #40]	; (2a670 <sqr_fp6+0x200>)
   2a646:	250c      	movs	r5, #12
   2a648:	9500      	str	r5, [sp, #0]
   2a64a:	4623      	mov	r3, r4
   2a64c:	aa3e      	add	r2, sp, #248	; 0xf8
   2a64e:	4639      	mov	r1, r7
   2a650:	4638      	mov	r0, r7
   2a652:	f7f6 fb65 	bl	20d20 <add_mod_n>
   2a656:	f106 0090 	add.w	r0, r6, #144	; 0x90
   2a65a:	9500      	str	r5, [sp, #0]
   2a65c:	4623      	mov	r3, r4
   2a65e:	aa4a      	add	r2, sp, #296	; 0x128
   2a660:	4601      	mov	r1, r0
   2a662:	f7f6 fb5d 	bl	20d20 <add_mod_n>
   2a666:	b06f      	add	sp, #444	; 0x1bc
   2a668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a66c:	fffcfffd 	.word	0xfffcfffd
   2a670:	00038688 	.word	0x00038688

0002a674 <inverse_fp12>:
   2a674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a678:	f5ad 6d8b 	sub.w	sp, sp, #1112	; 0x458
   2a67c:	4605      	mov	r5, r0
   2a67e:	460e      	mov	r6, r1
   2a680:	a8ce      	add	r0, sp, #824	; 0x338
   2a682:	f7ff fef5 	bl	2a470 <sqr_fp6>
   2a686:	f506 7790 	add.w	r7, r6, #288	; 0x120
   2a68a:	4639      	mov	r1, r7
   2a68c:	a886      	add	r0, sp, #536	; 0x218
   2a68e:	f7ff feef 	bl	2a470 <sqr_fp6>
   2a692:	4cb7      	ldr	r4, [pc, #732]	; (2a970 <inverse_fp12+0x2fc>)
   2a694:	f04f 080c 	mov.w	r8, #12
   2a698:	f8cd 8000 	str.w	r8, [sp]
   2a69c:	4623      	mov	r3, r4
   2a69e:	aac2      	add	r2, sp, #776	; 0x308
   2a6a0:	a9b6      	add	r1, sp, #728	; 0x2d8
   2a6a2:	a86e      	add	r0, sp, #440	; 0x1b8
   2a6a4:	f7f6 fb3c 	bl	20d20 <add_mod_n>
   2a6a8:	f8cd 8000 	str.w	r8, [sp]
   2a6ac:	4623      	mov	r3, r4
   2a6ae:	aac2      	add	r2, sp, #776	; 0x308
   2a6b0:	a9b6      	add	r1, sp, #728	; 0x2d8
   2a6b2:	4608      	mov	r0, r1
   2a6b4:	f7f5 ffde 	bl	20674 <sub_mod_n>
   2a6b8:	ab6e      	add	r3, sp, #440	; 0x1b8
   2a6ba:	aac1      	add	r2, sp, #772	; 0x304
   2a6bc:	a87a      	add	r0, sp, #488	; 0x1e8
   2a6be:	f853 1b04 	ldr.w	r1, [r3], #4
   2a6c2:	f842 1f04 	str.w	r1, [r2, #4]!
   2a6c6:	4283      	cmp	r3, r0
   2a6c8:	d1f9      	bne.n	2a6be <inverse_fp12+0x4a>
   2a6ca:	4ca9      	ldr	r4, [pc, #676]	; (2a970 <inverse_fp12+0x2fc>)
   2a6cc:	f04f 080c 	mov.w	r8, #12
   2a6d0:	f8cd 8000 	str.w	r8, [sp]
   2a6d4:	4623      	mov	r3, r4
   2a6d6:	aab6      	add	r2, sp, #728	; 0x2d8
   2a6d8:	a9ce      	add	r1, sp, #824	; 0x338
   2a6da:	4608      	mov	r0, r1
   2a6dc:	f7f5 ffca 	bl	20674 <sub_mod_n>
   2a6e0:	f8cd 8000 	str.w	r8, [sp]
   2a6e4:	4623      	mov	r3, r4
   2a6e6:	aac2      	add	r2, sp, #776	; 0x308
   2a6e8:	a9da      	add	r1, sp, #872	; 0x368
   2a6ea:	4608      	mov	r0, r1
   2a6ec:	f7f5 ffc2 	bl	20674 <sub_mod_n>
   2a6f0:	f8cd 8000 	str.w	r8, [sp]
   2a6f4:	4623      	mov	r3, r4
   2a6f6:	aa86      	add	r2, sp, #536	; 0x218
   2a6f8:	a9e6      	add	r1, sp, #920	; 0x398
   2a6fa:	4608      	mov	r0, r1
   2a6fc:	f7f5 ffba 	bl	20674 <sub_mod_n>
   2a700:	f8cd 8000 	str.w	r8, [sp]
   2a704:	4623      	mov	r3, r4
   2a706:	aa92      	add	r2, sp, #584	; 0x248
   2a708:	a9f2      	add	r1, sp, #968	; 0x3c8
   2a70a:	4608      	mov	r0, r1
   2a70c:	f7f5 ffb2 	bl	20674 <sub_mod_n>
   2a710:	f8cd 8000 	str.w	r8, [sp]
   2a714:	4623      	mov	r3, r4
   2a716:	aa9e      	add	r2, sp, #632	; 0x278
   2a718:	a9fe      	add	r1, sp, #1016	; 0x3f8
   2a71a:	4608      	mov	r0, r1
   2a71c:	f7f5 ffaa 	bl	20674 <sub_mod_n>
   2a720:	f8cd 8000 	str.w	r8, [sp]
   2a724:	4623      	mov	r3, r4
   2a726:	aaaa      	add	r2, sp, #680	; 0x2a8
   2a728:	f50d 6185 	add.w	r1, sp, #1064	; 0x428
   2a72c:	4608      	mov	r0, r1
   2a72e:	f7f5 ffa1 	bl	20674 <sub_mod_n>
   2a732:	f8df 9240 	ldr.w	r9, [pc, #576]	; 2a974 <inverse_fp12+0x300>
   2a736:	464b      	mov	r3, r9
   2a738:	4622      	mov	r2, r4
   2a73a:	a9ce      	add	r1, sp, #824	; 0x338
   2a73c:	a80e      	add	r0, sp, #56	; 0x38
   2a73e:	f7fd f897 	bl	27870 <sqr_mont_384x>
   2a742:	f8cd 9000 	str.w	r9, [sp]
   2a746:	4623      	mov	r3, r4
   2a748:	aafe      	add	r2, sp, #1016	; 0x3f8
   2a74a:	a9e6      	add	r1, sp, #920	; 0x398
   2a74c:	a856      	add	r0, sp, #344	; 0x158
   2a74e:	f7f9 fe01 	bl	24354 <mul_mont_384x>
   2a752:	f8cd 8000 	str.w	r8, [sp]
   2a756:	4623      	mov	r3, r4
   2a758:	aa62      	add	r2, sp, #392	; 0x188
   2a75a:	a956      	add	r1, sp, #344	; 0x158
   2a75c:	a86e      	add	r0, sp, #440	; 0x1b8
   2a75e:	f7f6 fadf 	bl	20d20 <add_mod_n>
   2a762:	f8cd 8000 	str.w	r8, [sp]
   2a766:	4623      	mov	r3, r4
   2a768:	aa62      	add	r2, sp, #392	; 0x188
   2a76a:	a956      	add	r1, sp, #344	; 0x158
   2a76c:	4608      	mov	r0, r1
   2a76e:	f7f5 ff81 	bl	20674 <sub_mod_n>
   2a772:	ab6e      	add	r3, sp, #440	; 0x1b8
   2a774:	ac61      	add	r4, sp, #388	; 0x184
   2a776:	a87a      	add	r0, sp, #488	; 0x1e8
   2a778:	4622      	mov	r2, r4
   2a77a:	f853 1b04 	ldr.w	r1, [r3], #4
   2a77e:	f842 1f04 	str.w	r1, [r2, #4]!
   2a782:	4283      	cmp	r3, r0
   2a784:	d1f9      	bne.n	2a77a <inverse_fp12+0x106>
   2a786:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 2a970 <inverse_fp12+0x2fc>
   2a78a:	f04f 090c 	mov.w	r9, #12
   2a78e:	f8cd 9000 	str.w	r9, [sp]
   2a792:	4643      	mov	r3, r8
   2a794:	aa56      	add	r2, sp, #344	; 0x158
   2a796:	a90e      	add	r1, sp, #56	; 0x38
   2a798:	4608      	mov	r0, r1
   2a79a:	f7f5 ff6b 	bl	20674 <sub_mod_n>
   2a79e:	f8cd 9000 	str.w	r9, [sp]
   2a7a2:	4643      	mov	r3, r8
   2a7a4:	aa62      	add	r2, sp, #392	; 0x188
   2a7a6:	a91a      	add	r1, sp, #104	; 0x68
   2a7a8:	4608      	mov	r0, r1
   2a7aa:	f7f5 ff63 	bl	20674 <sub_mod_n>
   2a7ae:	4b71      	ldr	r3, [pc, #452]	; (2a974 <inverse_fp12+0x300>)
   2a7b0:	4642      	mov	r2, r8
   2a7b2:	a9fe      	add	r1, sp, #1016	; 0x3f8
   2a7b4:	a826      	add	r0, sp, #152	; 0x98
   2a7b6:	f7fd f85b 	bl	27870 <sqr_mont_384x>
   2a7ba:	f8cd 9000 	str.w	r9, [sp]
   2a7be:	4643      	mov	r3, r8
   2a7c0:	aa32      	add	r2, sp, #200	; 0xc8
   2a7c2:	a926      	add	r1, sp, #152	; 0x98
   2a7c4:	a86e      	add	r0, sp, #440	; 0x1b8
   2a7c6:	f7f6 faab 	bl	20d20 <add_mod_n>
   2a7ca:	f8cd 9000 	str.w	r9, [sp]
   2a7ce:	4643      	mov	r3, r8
   2a7d0:	aa32      	add	r2, sp, #200	; 0xc8
   2a7d2:	a926      	add	r1, sp, #152	; 0x98
   2a7d4:	4608      	mov	r0, r1
   2a7d6:	f7f5 ff4d 	bl	20674 <sub_mod_n>
   2a7da:	ab6e      	add	r3, sp, #440	; 0x1b8
   2a7dc:	aa31      	add	r2, sp, #196	; 0xc4
   2a7de:	a87a      	add	r0, sp, #488	; 0x1e8
   2a7e0:	f853 1b04 	ldr.w	r1, [r3], #4
   2a7e4:	f842 1f04 	str.w	r1, [r2, #4]!
   2a7e8:	4298      	cmp	r0, r3
   2a7ea:	d1f9      	bne.n	2a7e0 <inverse_fp12+0x16c>
   2a7ec:	f8df 8180 	ldr.w	r8, [pc, #384]	; 2a970 <inverse_fp12+0x2fc>
   2a7f0:	f8df a180 	ldr.w	sl, [pc, #384]	; 2a974 <inverse_fp12+0x300>
   2a7f4:	f8cd a000 	str.w	sl, [sp]
   2a7f8:	4643      	mov	r3, r8
   2a7fa:	aae6      	add	r2, sp, #920	; 0x398
   2a7fc:	a9ce      	add	r1, sp, #824	; 0x338
   2a7fe:	a856      	add	r0, sp, #344	; 0x158
   2a800:	f7f9 fda8 	bl	24354 <mul_mont_384x>
   2a804:	f04f 090c 	mov.w	r9, #12
   2a808:	f8cd 9000 	str.w	r9, [sp]
   2a80c:	4643      	mov	r3, r8
   2a80e:	aa56      	add	r2, sp, #344	; 0x158
   2a810:	a926      	add	r1, sp, #152	; 0x98
   2a812:	4608      	mov	r0, r1
   2a814:	f7f5 ff2e 	bl	20674 <sub_mod_n>
   2a818:	f8cd 9000 	str.w	r9, [sp]
   2a81c:	4643      	mov	r3, r8
   2a81e:	aa62      	add	r2, sp, #392	; 0x188
   2a820:	a932      	add	r1, sp, #200	; 0xc8
   2a822:	4608      	mov	r0, r1
   2a824:	f7f5 ff26 	bl	20674 <sub_mod_n>
   2a828:	4653      	mov	r3, sl
   2a82a:	4642      	mov	r2, r8
   2a82c:	a9e6      	add	r1, sp, #920	; 0x398
   2a82e:	a83e      	add	r0, sp, #248	; 0xf8
   2a830:	f7fd f81e 	bl	27870 <sqr_mont_384x>
   2a834:	f8cd a000 	str.w	sl, [sp]
   2a838:	4643      	mov	r3, r8
   2a83a:	aafe      	add	r2, sp, #1016	; 0x3f8
   2a83c:	a9ce      	add	r1, sp, #824	; 0x338
   2a83e:	a856      	add	r0, sp, #344	; 0x158
   2a840:	f7f9 fd88 	bl	24354 <mul_mont_384x>
   2a844:	f8cd 9000 	str.w	r9, [sp]
   2a848:	4643      	mov	r3, r8
   2a84a:	aa56      	add	r2, sp, #344	; 0x158
   2a84c:	a93e      	add	r1, sp, #248	; 0xf8
   2a84e:	4608      	mov	r0, r1
   2a850:	f7f5 ff10 	bl	20674 <sub_mod_n>
   2a854:	f8cd 9000 	str.w	r9, [sp]
   2a858:	4643      	mov	r3, r8
   2a85a:	aa62      	add	r2, sp, #392	; 0x188
   2a85c:	a94a      	add	r1, sp, #296	; 0x128
   2a85e:	4608      	mov	r0, r1
   2a860:	f7f5 ff08 	bl	20674 <sub_mod_n>
   2a864:	f8cd a000 	str.w	sl, [sp]
   2a868:	4643      	mov	r3, r8
   2a86a:	aafe      	add	r2, sp, #1016	; 0x3f8
   2a86c:	a926      	add	r1, sp, #152	; 0x98
   2a86e:	a856      	add	r0, sp, #344	; 0x158
   2a870:	f7f9 fd70 	bl	24354 <mul_mont_384x>
   2a874:	f8cd a000 	str.w	sl, [sp]
   2a878:	4643      	mov	r3, r8
   2a87a:	aae6      	add	r2, sp, #920	; 0x398
   2a87c:	a93e      	add	r1, sp, #248	; 0xf8
   2a87e:	a86e      	add	r0, sp, #440	; 0x1b8
   2a880:	f7f9 fd68 	bl	24354 <mul_mont_384x>
   2a884:	f8cd 9000 	str.w	r9, [sp]
   2a888:	4643      	mov	r3, r8
   2a88a:	aa6e      	add	r2, sp, #440	; 0x1b8
   2a88c:	a956      	add	r1, sp, #344	; 0x158
   2a88e:	4608      	mov	r0, r1
   2a890:	f7f6 fa46 	bl	20d20 <add_mod_n>
   2a894:	f8cd 9000 	str.w	r9, [sp]
   2a898:	4643      	mov	r3, r8
   2a89a:	aa7a      	add	r2, sp, #488	; 0x1e8
   2a89c:	a962      	add	r1, sp, #392	; 0x188
   2a89e:	4608      	mov	r0, r1
   2a8a0:	f7f6 fa3e 	bl	20d20 <add_mod_n>
   2a8a4:	f8cd 9000 	str.w	r9, [sp]
   2a8a8:	4643      	mov	r3, r8
   2a8aa:	aa62      	add	r2, sp, #392	; 0x188
   2a8ac:	a956      	add	r1, sp, #344	; 0x158
   2a8ae:	a802      	add	r0, sp, #8
   2a8b0:	f7f6 fa36 	bl	20d20 <add_mod_n>
   2a8b4:	f8cd 9000 	str.w	r9, [sp]
   2a8b8:	4643      	mov	r3, r8
   2a8ba:	aa62      	add	r2, sp, #392	; 0x188
   2a8bc:	a956      	add	r1, sp, #344	; 0x158
   2a8be:	4608      	mov	r0, r1
   2a8c0:	f7f5 fed8 	bl	20674 <sub_mod_n>
   2a8c4:	ab02      	add	r3, sp, #8
   2a8c6:	a90e      	add	r1, sp, #56	; 0x38
   2a8c8:	f853 2b04 	ldr.w	r2, [r3], #4
   2a8cc:	f844 2f04 	str.w	r2, [r4, #4]!
   2a8d0:	4299      	cmp	r1, r3
   2a8d2:	d1f9      	bne.n	2a8c8 <inverse_fp12+0x254>
   2a8d4:	4c26      	ldr	r4, [pc, #152]	; (2a970 <inverse_fp12+0x2fc>)
   2a8d6:	f8df 809c 	ldr.w	r8, [pc, #156]	; 2a974 <inverse_fp12+0x300>
   2a8da:	f8cd 8000 	str.w	r8, [sp]
   2a8de:	4623      	mov	r3, r4
   2a8e0:	aace      	add	r2, sp, #824	; 0x338
   2a8e2:	a90e      	add	r1, sp, #56	; 0x38
   2a8e4:	a86e      	add	r0, sp, #440	; 0x1b8
   2a8e6:	f7f9 fd35 	bl	24354 <mul_mont_384x>
   2a8ea:	f04f 090c 	mov.w	r9, #12
   2a8ee:	f8cd 9000 	str.w	r9, [sp]
   2a8f2:	4623      	mov	r3, r4
   2a8f4:	aa6e      	add	r2, sp, #440	; 0x1b8
   2a8f6:	a956      	add	r1, sp, #344	; 0x158
   2a8f8:	4608      	mov	r0, r1
   2a8fa:	f7f6 fa11 	bl	20d20 <add_mod_n>
   2a8fe:	f8cd 9000 	str.w	r9, [sp]
   2a902:	4623      	mov	r3, r4
   2a904:	aa7a      	add	r2, sp, #488	; 0x1e8
   2a906:	a962      	add	r1, sp, #392	; 0x188
   2a908:	4608      	mov	r0, r1
   2a90a:	f7f6 fa09 	bl	20d20 <add_mod_n>
   2a90e:	a956      	add	r1, sp, #344	; 0x158
   2a910:	a86e      	add	r0, sp, #440	; 0x1b8
   2a912:	f7fb f845 	bl	259a0 <reciprocal_fp2>
   2a916:	f8cd 8000 	str.w	r8, [sp]
   2a91a:	4623      	mov	r3, r4
   2a91c:	aa6e      	add	r2, sp, #440	; 0x1b8
   2a91e:	a90e      	add	r1, sp, #56	; 0x38
   2a920:	a886      	add	r0, sp, #536	; 0x218
   2a922:	f7f9 fd17 	bl	24354 <mul_mont_384x>
   2a926:	f8cd 8000 	str.w	r8, [sp]
   2a92a:	4623      	mov	r3, r4
   2a92c:	aa6e      	add	r2, sp, #440	; 0x1b8
   2a92e:	a926      	add	r1, sp, #152	; 0x98
   2a930:	a89e      	add	r0, sp, #632	; 0x278
   2a932:	f7f9 fd0f 	bl	24354 <mul_mont_384x>
   2a936:	f8cd 8000 	str.w	r8, [sp]
   2a93a:	4623      	mov	r3, r4
   2a93c:	aa6e      	add	r2, sp, #440	; 0x1b8
   2a93e:	a93e      	add	r1, sp, #248	; 0xf8
   2a940:	a8b6      	add	r0, sp, #728	; 0x2d8
   2a942:	f7f9 fd07 	bl	24354 <mul_mont_384x>
   2a946:	aa86      	add	r2, sp, #536	; 0x218
   2a948:	4631      	mov	r1, r6
   2a94a:	4628      	mov	r0, r5
   2a94c:	f7f9 feb0 	bl	246b0 <mul_fp6>
   2a950:	f505 7590 	add.w	r5, r5, #288	; 0x120
   2a954:	aa86      	add	r2, sp, #536	; 0x218
   2a956:	4639      	mov	r1, r7
   2a958:	4628      	mov	r0, r5
   2a95a:	f7f9 fea9 	bl	246b0 <mul_fp6>
   2a95e:	4629      	mov	r1, r5
   2a960:	4628      	mov	r0, r5
   2a962:	f7f7 f9b5 	bl	21cd0 <neg_fp6>
   2a966:	f50d 6d8b 	add.w	sp, sp, #1112	; 0x458
   2a96a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2a96e:	bf00      	nop
   2a970:	00038688 	.word	0x00038688
   2a974:	fffcfffd 	.word	0xfffcfffd

0002a978 <blst_fp12_inverse>:
   2a978:	b508      	push	{r3, lr}
   2a97a:	f7ff fe7b 	bl	2a674 <inverse_fp12>
   2a97e:	bd08      	pop	{r3, pc}

0002a980 <final_exp>:
   2a980:	b530      	push	{r4, r5, lr}
   2a982:	f6ad 1d04 	subw	sp, sp, #2308	; 0x904
   2a986:	4604      	mov	r4, r0
   2a988:	460d      	mov	r5, r1
   2a98a:	f1a1 0c04 	sub.w	ip, r1, #4
   2a98e:	f50d 6390 	add.w	r3, sp, #1152	; 0x480
   2a992:	f50d 60d8 	add.w	r0, sp, #1728	; 0x6c0
   2a996:	f85c 2f04 	ldr.w	r2, [ip, #4]!
   2a99a:	f843 2b04 	str.w	r2, [r3], #4
   2a99e:	4283      	cmp	r3, r0
   2a9a0:	d1f9      	bne.n	2a996 <final_exp+0x16>
   2a9a2:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
   2a9a6:	f7f7 f9cf 	bl	21d48 <conjugate_fp12>
   2a9aa:	4629      	mov	r1, r5
   2a9ac:	a890      	add	r0, sp, #576	; 0x240
   2a9ae:	f7ff fe61 	bl	2a674 <inverse_fp12>
   2a9b2:	aa90      	add	r2, sp, #576	; 0x240
   2a9b4:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
   2a9b8:	4620      	mov	r0, r4
   2a9ba:	f7f9 ffdf 	bl	2497c <mul_fp12>
   2a9be:	2202      	movs	r2, #2
   2a9c0:	4621      	mov	r1, r4
   2a9c2:	a890      	add	r0, sp, #576	; 0x240
   2a9c4:	f7f9 fdfa 	bl	245bc <frobenius_map_fp12>
   2a9c8:	aa90      	add	r2, sp, #576	; 0x240
   2a9ca:	4621      	mov	r1, r4
   2a9cc:	4620      	mov	r0, r4
   2a9ce:	f7f9 ffd5 	bl	2497c <mul_fp12>
   2a9d2:	4621      	mov	r1, r4
   2a9d4:	f50d 60d8 	add.w	r0, sp, #1728	; 0x6c0
   2a9d8:	f7ff fbb8 	bl	2a14c <cyclotomic_sqr_fp12>
   2a9dc:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
   2a9e0:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
   2a9e4:	f7ff fd22 	bl	2a42c <raise_to_z_div_by_2>
   2a9e8:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
   2a9ec:	4608      	mov	r0, r1
   2a9ee:	f7ff fbad 	bl	2a14c <cyclotomic_sqr_fp12>
   2a9f2:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
   2a9f6:	a890      	add	r0, sp, #576	; 0x240
   2a9f8:	f7ff fd18 	bl	2a42c <raise_to_z_div_by_2>
   2a9fc:	f1a4 0c04 	sub.w	ip, r4, #4
   2aa00:	466b      	mov	r3, sp
   2aa02:	a990      	add	r1, sp, #576	; 0x240
   2aa04:	f85c 2f04 	ldr.w	r2, [ip, #4]!
   2aa08:	f843 2b04 	str.w	r2, [r3], #4
   2aa0c:	428b      	cmp	r3, r1
   2aa0e:	d1f9      	bne.n	2aa04 <final_exp+0x84>
   2aa10:	4668      	mov	r0, sp
   2aa12:	f7f7 f999 	bl	21d48 <conjugate_fp12>
   2aa16:	466a      	mov	r2, sp
   2aa18:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
   2aa1c:	4608      	mov	r0, r1
   2aa1e:	f7f9 ffad 	bl	2497c <mul_fp12>
   2aa22:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
   2aa26:	f7f7 f98f 	bl	21d48 <conjugate_fp12>
   2aa2a:	aa90      	add	r2, sp, #576	; 0x240
   2aa2c:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
   2aa30:	4608      	mov	r0, r1
   2aa32:	f7f9 ffa3 	bl	2497c <mul_fp12>
   2aa36:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
   2aa3a:	a890      	add	r0, sp, #576	; 0x240
   2aa3c:	f7ff fcf6 	bl	2a42c <raise_to_z_div_by_2>
   2aa40:	a990      	add	r1, sp, #576	; 0x240
   2aa42:	4608      	mov	r0, r1
   2aa44:	f7ff fb82 	bl	2a14c <cyclotomic_sqr_fp12>
   2aa48:	a990      	add	r1, sp, #576	; 0x240
   2aa4a:	4668      	mov	r0, sp
   2aa4c:	f7ff fcee 	bl	2a42c <raise_to_z_div_by_2>
   2aa50:	4669      	mov	r1, sp
   2aa52:	4668      	mov	r0, sp
   2aa54:	f7ff fb7a 	bl	2a14c <cyclotomic_sqr_fp12>
   2aa58:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
   2aa5c:	f7f7 f974 	bl	21d48 <conjugate_fp12>
   2aa60:	f50d 6290 	add.w	r2, sp, #1152	; 0x480
   2aa64:	4669      	mov	r1, sp
   2aa66:	4668      	mov	r0, sp
   2aa68:	f7f9 ff88 	bl	2497c <mul_fp12>
   2aa6c:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
   2aa70:	f7f7 f96a 	bl	21d48 <conjugate_fp12>
   2aa74:	2203      	movs	r2, #3
   2aa76:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
   2aa7a:	4608      	mov	r0, r1
   2aa7c:	f7f9 fd9e 	bl	245bc <frobenius_map_fp12>
   2aa80:	2202      	movs	r2, #2
   2aa82:	a990      	add	r1, sp, #576	; 0x240
   2aa84:	4608      	mov	r0, r1
   2aa86:	f7f9 fd99 	bl	245bc <frobenius_map_fp12>
   2aa8a:	aa90      	add	r2, sp, #576	; 0x240
   2aa8c:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
   2aa90:	4608      	mov	r0, r1
   2aa92:	f7f9 ff73 	bl	2497c <mul_fp12>
   2aa96:	4669      	mov	r1, sp
   2aa98:	a890      	add	r0, sp, #576	; 0x240
   2aa9a:	f7ff fcc7 	bl	2a42c <raise_to_z_div_by_2>
   2aa9e:	a990      	add	r1, sp, #576	; 0x240
   2aaa0:	4608      	mov	r0, r1
   2aaa2:	f7ff fb53 	bl	2a14c <cyclotomic_sqr_fp12>
   2aaa6:	f50d 62d8 	add.w	r2, sp, #1728	; 0x6c0
   2aaaa:	a990      	add	r1, sp, #576	; 0x240
   2aaac:	4608      	mov	r0, r1
   2aaae:	f7f9 ff65 	bl	2497c <mul_fp12>
   2aab2:	4622      	mov	r2, r4
   2aab4:	a990      	add	r1, sp, #576	; 0x240
   2aab6:	4608      	mov	r0, r1
   2aab8:	f7f9 ff60 	bl	2497c <mul_fp12>
   2aabc:	aa90      	add	r2, sp, #576	; 0x240
   2aabe:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
   2aac2:	4608      	mov	r0, r1
   2aac4:	f7f9 ff5a 	bl	2497c <mul_fp12>
   2aac8:	2201      	movs	r2, #1
   2aaca:	4669      	mov	r1, sp
   2aacc:	a890      	add	r0, sp, #576	; 0x240
   2aace:	f7f9 fd75 	bl	245bc <frobenius_map_fp12>
   2aad2:	aa90      	add	r2, sp, #576	; 0x240
   2aad4:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
   2aad8:	4620      	mov	r0, r4
   2aada:	f7f9 ff4f 	bl	2497c <mul_fp12>
   2aade:	f60d 1d04 	addw	sp, sp, #2308	; 0x904
   2aae2:	bd30      	pop	{r4, r5, pc}

0002aae4 <blst_final_exp>:
   2aae4:	b508      	push	{r3, lr}
   2aae6:	f7ff ff4b 	bl	2a980 <final_exp>
   2aaea:	bd08      	pop	{r3, pc}

0002aaec <line_dbl>:
   2aaec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2aaf0:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
   2aaf4:	4606      	mov	r6, r0
   2aaf6:	4689      	mov	r9, r1
   2aaf8:	4617      	mov	r7, r2
   2aafa:	f8df a2dc 	ldr.w	sl, [pc, #732]	; 2add8 <line_dbl+0x2ec>
   2aafe:	4cb7      	ldr	r4, [pc, #732]	; (2addc <line_dbl+0x2f0>)
   2ab00:	4653      	mov	r3, sl
   2ab02:	4622      	mov	r2, r4
   2ab04:	4639      	mov	r1, r7
   2ab06:	a87e      	add	r0, sp, #504	; 0x1f8
   2ab08:	f7fc feb2 	bl	27870 <sqr_mont_384x>
   2ab0c:	f107 0b60 	add.w	fp, r7, #96	; 0x60
   2ab10:	4653      	mov	r3, sl
   2ab12:	4622      	mov	r2, r4
   2ab14:	4659      	mov	r1, fp
   2ab16:	a866      	add	r0, sp, #408	; 0x198
   2ab18:	f7fc feaa 	bl	27870 <sqr_mont_384x>
   2ab1c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
   2ab20:	4619      	mov	r1, r3
   2ab22:	4653      	mov	r3, sl
   2ab24:	4622      	mov	r2, r4
   2ab26:	9103      	str	r1, [sp, #12]
   2ab28:	a896      	add	r0, sp, #600	; 0x258
   2ab2a:	f7fc fea1 	bl	27870 <sqr_mont_384x>
   2ab2e:	4653      	mov	r3, sl
   2ab30:	4622      	mov	r2, r4
   2ab32:	a866      	add	r0, sp, #408	; 0x198
   2ab34:	4601      	mov	r1, r0
   2ab36:	a84e      	add	r0, sp, #312	; 0x138
   2ab38:	f7fc fe9a 	bl	27870 <sqr_mont_384x>
   2ab3c:	250c      	movs	r5, #12
   2ab3e:	9500      	str	r5, [sp, #0]
   2ab40:	4623      	mov	r3, r4
   2ab42:	aa66      	add	r2, sp, #408	; 0x198
   2ab44:	4639      	mov	r1, r7
   2ab46:	a836      	add	r0, sp, #216	; 0xd8
   2ab48:	f7f6 f8ea 	bl	20d20 <add_mod_n>
   2ab4c:	f107 0830 	add.w	r8, r7, #48	; 0x30
   2ab50:	9500      	str	r5, [sp, #0]
   2ab52:	4623      	mov	r3, r4
   2ab54:	aa72      	add	r2, sp, #456	; 0x1c8
   2ab56:	4641      	mov	r1, r8
   2ab58:	a842      	add	r0, sp, #264	; 0x108
   2ab5a:	f7f6 f8e1 	bl	20d20 <add_mod_n>
   2ab5e:	4653      	mov	r3, sl
   2ab60:	4622      	mov	r2, r4
   2ab62:	a836      	add	r0, sp, #216	; 0xd8
   2ab64:	4601      	mov	r1, r0
   2ab66:	f7fc fe83 	bl	27870 <sqr_mont_384x>
   2ab6a:	9500      	str	r5, [sp, #0]
   2ab6c:	4623      	mov	r3, r4
   2ab6e:	aa7e      	add	r2, sp, #504	; 0x1f8
   2ab70:	a836      	add	r0, sp, #216	; 0xd8
   2ab72:	4601      	mov	r1, r0
   2ab74:	f7f5 fd7e 	bl	20674 <sub_mod_n>
   2ab78:	9500      	str	r5, [sp, #0]
   2ab7a:	4623      	mov	r3, r4
   2ab7c:	aa8a      	add	r2, sp, #552	; 0x228
   2ab7e:	a842      	add	r0, sp, #264	; 0x108
   2ab80:	4601      	mov	r1, r0
   2ab82:	f7f5 fd77 	bl	20674 <sub_mod_n>
   2ab86:	9500      	str	r5, [sp, #0]
   2ab88:	4623      	mov	r3, r4
   2ab8a:	aa4e      	add	r2, sp, #312	; 0x138
   2ab8c:	a836      	add	r0, sp, #216	; 0xd8
   2ab8e:	4601      	mov	r1, r0
   2ab90:	f7f5 fd70 	bl	20674 <sub_mod_n>
   2ab94:	9500      	str	r5, [sp, #0]
   2ab96:	4623      	mov	r3, r4
   2ab98:	aa5a      	add	r2, sp, #360	; 0x168
   2ab9a:	a842      	add	r0, sp, #264	; 0x108
   2ab9c:	4601      	mov	r1, r0
   2ab9e:	f7f5 fd69 	bl	20674 <sub_mod_n>
   2aba2:	9500      	str	r5, [sp, #0]
   2aba4:	4623      	mov	r3, r4
   2aba6:	aa36      	add	r2, sp, #216	; 0xd8
   2aba8:	4610      	mov	r0, r2
   2abaa:	4611      	mov	r1, r2
   2abac:	f7f6 f8b8 	bl	20d20 <add_mod_n>
   2abb0:	9500      	str	r5, [sp, #0]
   2abb2:	4623      	mov	r3, r4
   2abb4:	aa42      	add	r2, sp, #264	; 0x108
   2abb6:	4610      	mov	r0, r2
   2abb8:	4611      	mov	r1, r2
   2abba:	f7f6 f8b1 	bl	20d20 <add_mod_n>
   2abbe:	462b      	mov	r3, r5
   2abc0:	4622      	mov	r2, r4
   2abc2:	a87e      	add	r0, sp, #504	; 0x1f8
   2abc4:	4601      	mov	r1, r0
   2abc6:	a81e      	add	r0, sp, #120	; 0x78
   2abc8:	f7f6 f932 	bl	20e30 <mul_by_3_mod_n>
   2abcc:	462b      	mov	r3, r5
   2abce:	4622      	mov	r2, r4
   2abd0:	a88a      	add	r0, sp, #552	; 0x228
   2abd2:	4601      	mov	r1, r0
   2abd4:	a82a      	add	r0, sp, #168	; 0xa8
   2abd6:	f7f6 f92b 	bl	20e30 <mul_by_3_mod_n>
   2abda:	4653      	mov	r3, sl
   2abdc:	4622      	mov	r2, r4
   2abde:	a81e      	add	r0, sp, #120	; 0x78
   2abe0:	4601      	mov	r1, r0
   2abe2:	a806      	add	r0, sp, #24
   2abe4:	f7fc fe44 	bl	27870 <sqr_mont_384x>
   2abe8:	9500      	str	r5, [sp, #0]
   2abea:	4623      	mov	r3, r4
   2abec:	463a      	mov	r2, r7
   2abee:	a81e      	add	r0, sp, #120	; 0x78
   2abf0:	4601      	mov	r1, r0
   2abf2:	4630      	mov	r0, r6
   2abf4:	f7f6 f894 	bl	20d20 <add_mod_n>
   2abf8:	f106 0030 	add.w	r0, r6, #48	; 0x30
   2abfc:	9500      	str	r5, [sp, #0]
   2abfe:	4623      	mov	r3, r4
   2ac00:	4642      	mov	r2, r8
   2ac02:	f10d 0ca8 	add.w	ip, sp, #168	; 0xa8
   2ac06:	4661      	mov	r1, ip
   2ac08:	9005      	str	r0, [sp, #20]
   2ac0a:	f7f6 f889 	bl	20d20 <add_mod_n>
   2ac0e:	9500      	str	r5, [sp, #0]
   2ac10:	4623      	mov	r3, r4
   2ac12:	aa36      	add	r2, sp, #216	; 0xd8
   2ac14:	f10d 0c18 	add.w	ip, sp, #24
   2ac18:	4661      	mov	r1, ip
   2ac1a:	4648      	mov	r0, r9
   2ac1c:	f7f5 fd2a 	bl	20674 <sub_mod_n>
   2ac20:	f109 0830 	add.w	r8, r9, #48	; 0x30
   2ac24:	9500      	str	r5, [sp, #0]
   2ac26:	4623      	mov	r3, r4
   2ac28:	aa42      	add	r2, sp, #264	; 0x108
   2ac2a:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
   2ac2e:	4661      	mov	r1, ip
   2ac30:	4640      	mov	r0, r8
   2ac32:	f7f5 fd1f 	bl	20674 <sub_mod_n>
   2ac36:	9500      	str	r5, [sp, #0]
   2ac38:	4623      	mov	r3, r4
   2ac3a:	aa36      	add	r2, sp, #216	; 0xd8
   2ac3c:	4649      	mov	r1, r9
   2ac3e:	4648      	mov	r0, r9
   2ac40:	f7f5 fd18 	bl	20674 <sub_mod_n>
   2ac44:	9500      	str	r5, [sp, #0]
   2ac46:	4623      	mov	r3, r4
   2ac48:	aa42      	add	r2, sp, #264	; 0x108
   2ac4a:	4641      	mov	r1, r8
   2ac4c:	f8cd 8010 	str.w	r8, [sp, #16]
   2ac50:	4640      	mov	r0, r8
   2ac52:	f7f5 fd0f 	bl	20674 <sub_mod_n>
   2ac56:	f109 08c0 	add.w	r8, r9, #192	; 0xc0
   2ac5a:	9500      	str	r5, [sp, #0]
   2ac5c:	4623      	mov	r3, r4
   2ac5e:	9a03      	ldr	r2, [sp, #12]
   2ac60:	4659      	mov	r1, fp
   2ac62:	4640      	mov	r0, r8
   2ac64:	f7f6 f85c 	bl	20d20 <add_mod_n>
   2ac68:	f109 0bf0 	add.w	fp, r9, #240	; 0xf0
   2ac6c:	9500      	str	r5, [sp, #0]
   2ac6e:	4623      	mov	r3, r4
   2ac70:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
   2ac74:	f107 0190 	add.w	r1, r7, #144	; 0x90
   2ac78:	4658      	mov	r0, fp
   2ac7a:	f7f6 f851 	bl	20d20 <add_mod_n>
   2ac7e:	4653      	mov	r3, sl
   2ac80:	4622      	mov	r2, r4
   2ac82:	4641      	mov	r1, r8
   2ac84:	4640      	mov	r0, r8
   2ac86:	f7fc fdf3 	bl	27870 <sqr_mont_384x>
   2ac8a:	9500      	str	r5, [sp, #0]
   2ac8c:	4623      	mov	r3, r4
   2ac8e:	aa66      	add	r2, sp, #408	; 0x198
   2ac90:	4641      	mov	r1, r8
   2ac92:	4640      	mov	r0, r8
   2ac94:	f7f5 fcee 	bl	20674 <sub_mod_n>
   2ac98:	9500      	str	r5, [sp, #0]
   2ac9a:	4623      	mov	r3, r4
   2ac9c:	aa72      	add	r2, sp, #456	; 0x1c8
   2ac9e:	4659      	mov	r1, fp
   2aca0:	4658      	mov	r0, fp
   2aca2:	f7f5 fce7 	bl	20674 <sub_mod_n>
   2aca6:	9500      	str	r5, [sp, #0]
   2aca8:	4623      	mov	r3, r4
   2acaa:	aa96      	add	r2, sp, #600	; 0x258
   2acac:	4641      	mov	r1, r8
   2acae:	4640      	mov	r0, r8
   2acb0:	f7f5 fce0 	bl	20674 <sub_mod_n>
   2acb4:	9500      	str	r5, [sp, #0]
   2acb6:	4623      	mov	r3, r4
   2acb8:	aaa2      	add	r2, sp, #648	; 0x288
   2acba:	4659      	mov	r1, fp
   2acbc:	4658      	mov	r0, fp
   2acbe:	f7f5 fcd9 	bl	20674 <sub_mod_n>
   2acc2:	9500      	str	r5, [sp, #0]
   2acc4:	4623      	mov	r3, r4
   2acc6:	2203      	movs	r2, #3
   2acc8:	a94e      	add	r1, sp, #312	; 0x138
   2acca:	4608      	mov	r0, r1
   2accc:	f7f6 f950 	bl	20f70 <lshift_mod_n>
   2acd0:	9500      	str	r5, [sp, #0]
   2acd2:	4623      	mov	r3, r4
   2acd4:	2203      	movs	r2, #3
   2acd6:	a95a      	add	r1, sp, #360	; 0x168
   2acd8:	4608      	mov	r0, r1
   2acda:	f7f6 f949 	bl	20f70 <lshift_mod_n>
   2acde:	f109 0b60 	add.w	fp, r9, #96	; 0x60
   2ace2:	9500      	str	r5, [sp, #0]
   2ace4:	4623      	mov	r3, r4
   2ace6:	464a      	mov	r2, r9
   2ace8:	a936      	add	r1, sp, #216	; 0xd8
   2acea:	4658      	mov	r0, fp
   2acec:	f7f5 fcc2 	bl	20674 <sub_mod_n>
   2acf0:	f109 0790 	add.w	r7, r9, #144	; 0x90
   2acf4:	9500      	str	r5, [sp, #0]
   2acf6:	4623      	mov	r3, r4
   2acf8:	9a04      	ldr	r2, [sp, #16]
   2acfa:	a942      	add	r1, sp, #264	; 0x108
   2acfc:	4638      	mov	r0, r7
   2acfe:	f7f5 fcb9 	bl	20674 <sub_mod_n>
   2ad02:	f8cd a000 	str.w	sl, [sp]
   2ad06:	4623      	mov	r3, r4
   2ad08:	aa1e      	add	r2, sp, #120	; 0x78
   2ad0a:	4659      	mov	r1, fp
   2ad0c:	4658      	mov	r0, fp
   2ad0e:	f7f9 fb21 	bl	24354 <mul_mont_384x>
   2ad12:	9500      	str	r5, [sp, #0]
   2ad14:	4623      	mov	r3, r4
   2ad16:	aa4e      	add	r2, sp, #312	; 0x138
   2ad18:	4659      	mov	r1, fp
   2ad1a:	4658      	mov	r0, fp
   2ad1c:	f7f5 fcaa 	bl	20674 <sub_mod_n>
   2ad20:	9500      	str	r5, [sp, #0]
   2ad22:	4623      	mov	r3, r4
   2ad24:	aa5a      	add	r2, sp, #360	; 0x168
   2ad26:	4639      	mov	r1, r7
   2ad28:	4638      	mov	r0, r7
   2ad2a:	f7f5 fca3 	bl	20674 <sub_mod_n>
   2ad2e:	4653      	mov	r3, sl
   2ad30:	4622      	mov	r2, r4
   2ad32:	4631      	mov	r1, r6
   2ad34:	4630      	mov	r0, r6
   2ad36:	f7fc fd9b 	bl	27870 <sqr_mont_384x>
   2ad3a:	9500      	str	r5, [sp, #0]
   2ad3c:	4623      	mov	r3, r4
   2ad3e:	aa7e      	add	r2, sp, #504	; 0x1f8
   2ad40:	4631      	mov	r1, r6
   2ad42:	4630      	mov	r0, r6
   2ad44:	f7f5 fc96 	bl	20674 <sub_mod_n>
   2ad48:	9500      	str	r5, [sp, #0]
   2ad4a:	4623      	mov	r3, r4
   2ad4c:	aa8a      	add	r2, sp, #552	; 0x228
   2ad4e:	9f05      	ldr	r7, [sp, #20]
   2ad50:	4639      	mov	r1, r7
   2ad52:	4638      	mov	r0, r7
   2ad54:	f7f5 fc8e 	bl	20674 <sub_mod_n>
   2ad58:	9500      	str	r5, [sp, #0]
   2ad5a:	4623      	mov	r3, r4
   2ad5c:	aa06      	add	r2, sp, #24
   2ad5e:	4631      	mov	r1, r6
   2ad60:	4630      	mov	r0, r6
   2ad62:	f7f5 fc87 	bl	20674 <sub_mod_n>
   2ad66:	9500      	str	r5, [sp, #0]
   2ad68:	4623      	mov	r3, r4
   2ad6a:	aa12      	add	r2, sp, #72	; 0x48
   2ad6c:	4639      	mov	r1, r7
   2ad6e:	4638      	mov	r0, r7
   2ad70:	f7f5 fc80 	bl	20674 <sub_mod_n>
   2ad74:	9500      	str	r5, [sp, #0]
   2ad76:	4623      	mov	r3, r4
   2ad78:	2202      	movs	r2, #2
   2ad7a:	a966      	add	r1, sp, #408	; 0x198
   2ad7c:	4608      	mov	r0, r1
   2ad7e:	f7f6 f8f7 	bl	20f70 <lshift_mod_n>
   2ad82:	9500      	str	r5, [sp, #0]
   2ad84:	4623      	mov	r3, r4
   2ad86:	2202      	movs	r2, #2
   2ad88:	a972      	add	r1, sp, #456	; 0x1c8
   2ad8a:	4608      	mov	r0, r1
   2ad8c:	f7f6 f8f0 	bl	20f70 <lshift_mod_n>
   2ad90:	9500      	str	r5, [sp, #0]
   2ad92:	4623      	mov	r3, r4
   2ad94:	aa66      	add	r2, sp, #408	; 0x198
   2ad96:	4631      	mov	r1, r6
   2ad98:	4630      	mov	r0, r6
   2ad9a:	f7f5 fc6b 	bl	20674 <sub_mod_n>
   2ad9e:	9500      	str	r5, [sp, #0]
   2ada0:	4623      	mov	r3, r4
   2ada2:	aa72      	add	r2, sp, #456	; 0x1c8
   2ada4:	4639      	mov	r1, r7
   2ada6:	4638      	mov	r0, r7
   2ada8:	f7f5 fc64 	bl	20674 <sub_mod_n>
   2adac:	f8cd a000 	str.w	sl, [sp]
   2adb0:	4623      	mov	r3, r4
   2adb2:	aa96      	add	r2, sp, #600	; 0x258
   2adb4:	a91e      	add	r1, sp, #120	; 0x78
   2adb6:	f106 0060 	add.w	r0, r6, #96	; 0x60
   2adba:	f7f9 facb 	bl	24354 <mul_mont_384x>
   2adbe:	f8cd a000 	str.w	sl, [sp]
   2adc2:	4623      	mov	r3, r4
   2adc4:	aa96      	add	r2, sp, #600	; 0x258
   2adc6:	4641      	mov	r1, r8
   2adc8:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   2adcc:	f7f9 fac2 	bl	24354 <mul_mont_384x>
   2add0:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
   2add4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2add8:	fffcfffd 	.word	0xfffcfffd
   2addc:	00038688 	.word	0x00038688

0002ade0 <start_dbl_n>:
   2ade0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ade4:	b0c8      	sub	sp, #288	; 0x120
   2ade6:	4606      	mov	r6, r0
   2ade8:	460c      	mov	r4, r1
   2adea:	4615      	mov	r5, r2
   2adec:	461f      	mov	r7, r3
   2adee:	460a      	mov	r2, r1
   2adf0:	4668      	mov	r0, sp
   2adf2:	f7ff fe7b 	bl	2aaec <line_dbl>
   2adf6:	4629      	mov	r1, r5
   2adf8:	4668      	mov	r0, sp
   2adfa:	f7f5 ff0b 	bl	20c14 <line_by_Px2>
   2adfe:	4633      	mov	r3, r6
   2ae00:	f506 7110 	add.w	r1, r6, #576	; 0x240
   2ae04:	2200      	movs	r2, #0
   2ae06:	f843 2b04 	str.w	r2, [r3], #4
   2ae0a:	428b      	cmp	r3, r1
   2ae0c:	d1fb      	bne.n	2ae06 <start_dbl_n+0x26>
   2ae0e:	f1ad 0204 	sub.w	r2, sp, #4
   2ae12:	1f33      	subs	r3, r6, #4
   2ae14:	a82f      	add	r0, sp, #188	; 0xbc
   2ae16:	f852 1f04 	ldr.w	r1, [r2, #4]!
   2ae1a:	f843 1f04 	str.w	r1, [r3, #4]!
   2ae1e:	4282      	cmp	r2, r0
   2ae20:	d1f9      	bne.n	2ae16 <start_dbl_n+0x36>
   2ae22:	aa2f      	add	r2, sp, #188	; 0xbc
   2ae24:	f506 73be 	add.w	r3, r6, #380	; 0x17c
   2ae28:	a847      	add	r0, sp, #284	; 0x11c
   2ae2a:	f852 1f04 	ldr.w	r1, [r2, #4]!
   2ae2e:	f843 1f04 	str.w	r1, [r3, #4]!
   2ae32:	4282      	cmp	r2, r0
   2ae34:	d1f9      	bne.n	2ae2a <start_dbl_n+0x4a>
   2ae36:	2f01      	cmp	r7, #1
   2ae38:	d919      	bls.n	2ae6e <start_dbl_n+0x8e>
   2ae3a:	f504 7490 	add.w	r4, r4, #288	; 0x120
   2ae3e:	3560      	adds	r5, #96	; 0x60
   2ae40:	f04f 0801 	mov.w	r8, #1
   2ae44:	4622      	mov	r2, r4
   2ae46:	4621      	mov	r1, r4
   2ae48:	4668      	mov	r0, sp
   2ae4a:	f7ff fe4f 	bl	2aaec <line_dbl>
   2ae4e:	4629      	mov	r1, r5
   2ae50:	4668      	mov	r0, sp
   2ae52:	f7f5 fedf 	bl	20c14 <line_by_Px2>
   2ae56:	466a      	mov	r2, sp
   2ae58:	4631      	mov	r1, r6
   2ae5a:	4630      	mov	r0, r6
   2ae5c:	f7f9 ffb2 	bl	24dc4 <mul_by_xy00z0_fp12>
   2ae60:	f108 0801 	add.w	r8, r8, #1
   2ae64:	f504 7490 	add.w	r4, r4, #288	; 0x120
   2ae68:	3560      	adds	r5, #96	; 0x60
   2ae6a:	4547      	cmp	r7, r8
   2ae6c:	d1ea      	bne.n	2ae44 <start_dbl_n+0x64>
   2ae6e:	b048      	add	sp, #288	; 0x120
   2ae70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002ae74 <line_add>:
   2ae74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ae78:	f5ad 7d47 	sub.w	sp, sp, #796	; 0x31c
   2ae7c:	4682      	mov	sl, r0
   2ae7e:	460e      	mov	r6, r1
   2ae80:	4693      	mov	fp, r2
   2ae82:	4699      	mov	r9, r3
   2ae84:	f102 05c0 	add.w	r5, r2, #192	; 0xc0
   2ae88:	4fcc      	ldr	r7, [pc, #816]	; (2b1bc <line_add+0x348>)
   2ae8a:	4ccd      	ldr	r4, [pc, #820]	; (2b1c0 <line_add+0x34c>)
   2ae8c:	463b      	mov	r3, r7
   2ae8e:	4622      	mov	r2, r4
   2ae90:	4629      	mov	r1, r5
   2ae92:	a8ae      	add	r0, sp, #696	; 0x2b8
   2ae94:	f7fc fcec 	bl	27870 <sqr_mont_384x>
   2ae98:	9700      	str	r7, [sp, #0]
   2ae9a:	4623      	mov	r3, r4
   2ae9c:	aaae      	add	r2, sp, #696	; 0x2b8
   2ae9e:	4649      	mov	r1, r9
   2aea0:	a896      	add	r0, sp, #600	; 0x258
   2aea2:	f7f9 fa57 	bl	24354 <mul_mont_384x>
   2aea6:	f8cd 9014 	str.w	r9, [sp, #20]
   2aeaa:	f109 0060 	add.w	r0, r9, #96	; 0x60
   2aeae:	9700      	str	r7, [sp, #0]
   2aeb0:	4623      	mov	r3, r4
   2aeb2:	9502      	str	r5, [sp, #8]
   2aeb4:	462a      	mov	r2, r5
   2aeb6:	9003      	str	r0, [sp, #12]
   2aeb8:	4601      	mov	r1, r0
   2aeba:	a87e      	add	r0, sp, #504	; 0x1f8
   2aebc:	f7f9 fa4a 	bl	24354 <mul_mont_384x>
   2aec0:	9700      	str	r7, [sp, #0]
   2aec2:	4623      	mov	r3, r4
   2aec4:	adae      	add	r5, sp, #696	; 0x2b8
   2aec6:	462a      	mov	r2, r5
   2aec8:	ad7e      	add	r5, sp, #504	; 0x1f8
   2aeca:	4629      	mov	r1, r5
   2aecc:	4628      	mov	r0, r5
   2aece:	f7f9 fa41 	bl	24354 <mul_mont_384x>
   2aed2:	250c      	movs	r5, #12
   2aed4:	9500      	str	r5, [sp, #0]
   2aed6:	4623      	mov	r3, r4
   2aed8:	465a      	mov	r2, fp
   2aeda:	f50d 7c16 	add.w	ip, sp, #600	; 0x258
   2aede:	4661      	mov	r1, ip
   2aee0:	a866      	add	r0, sp, #408	; 0x198
   2aee2:	f7f5 fbc7 	bl	20674 <sub_mod_n>
   2aee6:	9500      	str	r5, [sp, #0]
   2aee8:	4623      	mov	r3, r4
   2aeea:	f10b 0230 	add.w	r2, fp, #48	; 0x30
   2aeee:	a9a2      	add	r1, sp, #648	; 0x288
   2aef0:	a872      	add	r0, sp, #456	; 0x1c8
   2aef2:	f7f5 fbbf 	bl	20674 <sub_mod_n>
   2aef6:	463b      	mov	r3, r7
   2aef8:	4622      	mov	r2, r4
   2aefa:	f50d 7ccc 	add.w	ip, sp, #408	; 0x198
   2aefe:	4661      	mov	r1, ip
   2af00:	a84e      	add	r0, sp, #312	; 0x138
   2af02:	f7fc fcb5 	bl	27870 <sqr_mont_384x>
   2af06:	9500      	str	r5, [sp, #0]
   2af08:	4623      	mov	r3, r4
   2af0a:	f50d 7c9c 	add.w	ip, sp, #312	; 0x138
   2af0e:	4662      	mov	r2, ip
   2af10:	4661      	mov	r1, ip
   2af12:	a836      	add	r0, sp, #216	; 0xd8
   2af14:	f7f5 ff04 	bl	20d20 <add_mod_n>
   2af18:	9500      	str	r5, [sp, #0]
   2af1a:	4623      	mov	r3, r4
   2af1c:	f50d 7cb4 	add.w	ip, sp, #360	; 0x168
   2af20:	4662      	mov	r2, ip
   2af22:	4661      	mov	r1, ip
   2af24:	a842      	add	r0, sp, #264	; 0x108
   2af26:	f7f5 fefb 	bl	20d20 <add_mod_n>
   2af2a:	9500      	str	r5, [sp, #0]
   2af2c:	4623      	mov	r3, r4
   2af2e:	f10d 0cd8 	add.w	ip, sp, #216	; 0xd8
   2af32:	4662      	mov	r2, ip
   2af34:	4661      	mov	r1, ip
   2af36:	4660      	mov	r0, ip
   2af38:	f7f5 fef2 	bl	20d20 <add_mod_n>
   2af3c:	9500      	str	r5, [sp, #0]
   2af3e:	4623      	mov	r3, r4
   2af40:	f50d 7c84 	add.w	ip, sp, #264	; 0x108
   2af44:	4662      	mov	r2, ip
   2af46:	4661      	mov	r1, ip
   2af48:	4660      	mov	r0, ip
   2af4a:	f7f5 fee9 	bl	20d20 <add_mod_n>
   2af4e:	9700      	str	r7, [sp, #0]
   2af50:	4623      	mov	r3, r4
   2af52:	f10d 0cd8 	add.w	ip, sp, #216	; 0xd8
   2af56:	4662      	mov	r2, ip
   2af58:	f50d 7ccc 	add.w	ip, sp, #408	; 0x198
   2af5c:	4661      	mov	r1, ip
   2af5e:	a81e      	add	r0, sp, #120	; 0x78
   2af60:	f7f9 f9f8 	bl	24354 <mul_mont_384x>
   2af64:	f10a 0860 	add.w	r8, sl, #96	; 0x60
   2af68:	f10b 0960 	add.w	r9, fp, #96	; 0x60
   2af6c:	9500      	str	r5, [sp, #0]
   2af6e:	4623      	mov	r3, r4
   2af70:	464a      	mov	r2, r9
   2af72:	f50d 7cfc 	add.w	ip, sp, #504	; 0x1f8
   2af76:	4661      	mov	r1, ip
   2af78:	4640      	mov	r0, r8
   2af7a:	f7f5 fb7b 	bl	20674 <sub_mod_n>
   2af7e:	f8cd a010 	str.w	sl, [sp, #16]
   2af82:	f10a 0a90 	add.w	sl, sl, #144	; 0x90
   2af86:	9500      	str	r5, [sp, #0]
   2af88:	4623      	mov	r3, r4
   2af8a:	f10b 0290 	add.w	r2, fp, #144	; 0x90
   2af8e:	a98a      	add	r1, sp, #552	; 0x228
   2af90:	4650      	mov	r0, sl
   2af92:	f7f5 fb6f 	bl	20674 <sub_mod_n>
   2af96:	9500      	str	r5, [sp, #0]
   2af98:	4623      	mov	r3, r4
   2af9a:	4642      	mov	r2, r8
   2af9c:	4641      	mov	r1, r8
   2af9e:	4640      	mov	r0, r8
   2afa0:	f7f5 febe 	bl	20d20 <add_mod_n>
   2afa4:	9500      	str	r5, [sp, #0]
   2afa6:	4623      	mov	r3, r4
   2afa8:	4652      	mov	r2, sl
   2afaa:	4651      	mov	r1, sl
   2afac:	4650      	mov	r0, sl
   2afae:	f7f5 feb7 	bl	20d20 <add_mod_n>
   2afb2:	9700      	str	r7, [sp, #0]
   2afb4:	4623      	mov	r3, r4
   2afb6:	f10d 0cd8 	add.w	ip, sp, #216	; 0xd8
   2afba:	4662      	mov	r2, ip
   2afbc:	4659      	mov	r1, fp
   2afbe:	a806      	add	r0, sp, #24
   2afc0:	f7f9 f9c8 	bl	24354 <mul_mont_384x>
   2afc4:	463b      	mov	r3, r7
   2afc6:	4622      	mov	r2, r4
   2afc8:	4641      	mov	r1, r8
   2afca:	4630      	mov	r0, r6
   2afcc:	f7fc fc50 	bl	27870 <sqr_mont_384x>
   2afd0:	9500      	str	r5, [sp, #0]
   2afd2:	4623      	mov	r3, r4
   2afd4:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
   2afd8:	4662      	mov	r2, ip
   2afda:	4631      	mov	r1, r6
   2afdc:	4630      	mov	r0, r6
   2afde:	f7f5 fb49 	bl	20674 <sub_mod_n>
   2afe2:	f106 0a30 	add.w	sl, r6, #48	; 0x30
   2afe6:	9500      	str	r5, [sp, #0]
   2afe8:	4623      	mov	r3, r4
   2afea:	f10d 0ca8 	add.w	ip, sp, #168	; 0xa8
   2afee:	4662      	mov	r2, ip
   2aff0:	4651      	mov	r1, sl
   2aff2:	4650      	mov	r0, sl
   2aff4:	f7f5 fb3e 	bl	20674 <sub_mod_n>
   2aff8:	9500      	str	r5, [sp, #0]
   2affa:	4623      	mov	r3, r4
   2affc:	f10d 0c18 	add.w	ip, sp, #24
   2b000:	4662      	mov	r2, ip
   2b002:	4631      	mov	r1, r6
   2b004:	4630      	mov	r0, r6
   2b006:	f7f5 fb35 	bl	20674 <sub_mod_n>
   2b00a:	9500      	str	r5, [sp, #0]
   2b00c:	4623      	mov	r3, r4
   2b00e:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
   2b012:	4662      	mov	r2, ip
   2b014:	4651      	mov	r1, sl
   2b016:	4650      	mov	r0, sl
   2b018:	f7f5 fb2c 	bl	20674 <sub_mod_n>
   2b01c:	9500      	str	r5, [sp, #0]
   2b01e:	4623      	mov	r3, r4
   2b020:	f10d 0c18 	add.w	ip, sp, #24
   2b024:	4662      	mov	r2, ip
   2b026:	4631      	mov	r1, r6
   2b028:	4630      	mov	r0, r6
   2b02a:	f7f5 fb23 	bl	20674 <sub_mod_n>
   2b02e:	9500      	str	r5, [sp, #0]
   2b030:	4623      	mov	r3, r4
   2b032:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
   2b036:	4662      	mov	r2, ip
   2b038:	4651      	mov	r1, sl
   2b03a:	4650      	mov	r0, sl
   2b03c:	f7f5 fb1a 	bl	20674 <sub_mod_n>
   2b040:	9700      	str	r7, [sp, #0]
   2b042:	4623      	mov	r3, r4
   2b044:	464a      	mov	r2, r9
   2b046:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
   2b04a:	4661      	mov	r1, ip
   2b04c:	4660      	mov	r0, ip
   2b04e:	f7f9 f981 	bl	24354 <mul_mont_384x>
   2b052:	f106 0960 	add.w	r9, r6, #96	; 0x60
   2b056:	9500      	str	r5, [sp, #0]
   2b058:	4623      	mov	r3, r4
   2b05a:	4632      	mov	r2, r6
   2b05c:	f10d 0c18 	add.w	ip, sp, #24
   2b060:	4661      	mov	r1, ip
   2b062:	4648      	mov	r0, r9
   2b064:	f7f5 fb06 	bl	20674 <sub_mod_n>
   2b068:	f106 0090 	add.w	r0, r6, #144	; 0x90
   2b06c:	9500      	str	r5, [sp, #0]
   2b06e:	4623      	mov	r3, r4
   2b070:	4652      	mov	r2, sl
   2b072:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
   2b076:	4661      	mov	r1, ip
   2b078:	4682      	mov	sl, r0
   2b07a:	f7f5 fafb 	bl	20674 <sub_mod_n>
   2b07e:	9700      	str	r7, [sp, #0]
   2b080:	4623      	mov	r3, r4
   2b082:	4642      	mov	r2, r8
   2b084:	4649      	mov	r1, r9
   2b086:	4648      	mov	r0, r9
   2b088:	f7f9 f964 	bl	24354 <mul_mont_384x>
   2b08c:	9500      	str	r5, [sp, #0]
   2b08e:	4623      	mov	r3, r4
   2b090:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
   2b094:	4662      	mov	r2, ip
   2b096:	4649      	mov	r1, r9
   2b098:	4648      	mov	r0, r9
   2b09a:	f7f5 faeb 	bl	20674 <sub_mod_n>
   2b09e:	9500      	str	r5, [sp, #0]
   2b0a0:	4623      	mov	r3, r4
   2b0a2:	f10d 0ca8 	add.w	ip, sp, #168	; 0xa8
   2b0a6:	4662      	mov	r2, ip
   2b0a8:	4651      	mov	r1, sl
   2b0aa:	4650      	mov	r0, sl
   2b0ac:	f7f5 fae2 	bl	20674 <sub_mod_n>
   2b0b0:	9500      	str	r5, [sp, #0]
   2b0b2:	4623      	mov	r3, r4
   2b0b4:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
   2b0b8:	4662      	mov	r2, ip
   2b0ba:	4649      	mov	r1, r9
   2b0bc:	4648      	mov	r0, r9
   2b0be:	f7f5 fad9 	bl	20674 <sub_mod_n>
   2b0c2:	9500      	str	r5, [sp, #0]
   2b0c4:	4623      	mov	r3, r4
   2b0c6:	f10d 0ca8 	add.w	ip, sp, #168	; 0xa8
   2b0ca:	4662      	mov	r2, ip
   2b0cc:	4651      	mov	r1, sl
   2b0ce:	4650      	mov	r0, sl
   2b0d0:	f7f5 fad0 	bl	20674 <sub_mod_n>
   2b0d4:	f106 09c0 	add.w	r9, r6, #192	; 0xc0
   2b0d8:	9500      	str	r5, [sp, #0]
   2b0da:	4623      	mov	r3, r4
   2b0dc:	f50d 7ccc 	add.w	ip, sp, #408	; 0x198
   2b0e0:	4662      	mov	r2, ip
   2b0e2:	9902      	ldr	r1, [sp, #8]
   2b0e4:	4648      	mov	r0, r9
   2b0e6:	f7f5 fe1b 	bl	20d20 <add_mod_n>
   2b0ea:	f106 0af0 	add.w	sl, r6, #240	; 0xf0
   2b0ee:	9500      	str	r5, [sp, #0]
   2b0f0:	4623      	mov	r3, r4
   2b0f2:	aa72      	add	r2, sp, #456	; 0x1c8
   2b0f4:	f10b 01f0 	add.w	r1, fp, #240	; 0xf0
   2b0f8:	4650      	mov	r0, sl
   2b0fa:	f7f5 fe11 	bl	20d20 <add_mod_n>
   2b0fe:	463b      	mov	r3, r7
   2b100:	4622      	mov	r2, r4
   2b102:	4649      	mov	r1, r9
   2b104:	4648      	mov	r0, r9
   2b106:	f7fc fbb3 	bl	27870 <sqr_mont_384x>
   2b10a:	9500      	str	r5, [sp, #0]
   2b10c:	4623      	mov	r3, r4
   2b10e:	aaae      	add	r2, sp, #696	; 0x2b8
   2b110:	4649      	mov	r1, r9
   2b112:	4648      	mov	r0, r9
   2b114:	f7f5 faae 	bl	20674 <sub_mod_n>
   2b118:	9500      	str	r5, [sp, #0]
   2b11a:	4623      	mov	r3, r4
   2b11c:	aaba      	add	r2, sp, #744	; 0x2e8
   2b11e:	4651      	mov	r1, sl
   2b120:	4650      	mov	r0, sl
   2b122:	f7f5 faa7 	bl	20674 <sub_mod_n>
   2b126:	9500      	str	r5, [sp, #0]
   2b128:	4623      	mov	r3, r4
   2b12a:	aa4e      	add	r2, sp, #312	; 0x138
   2b12c:	4649      	mov	r1, r9
   2b12e:	4648      	mov	r0, r9
   2b130:	f7f5 faa0 	bl	20674 <sub_mod_n>
   2b134:	9500      	str	r5, [sp, #0]
   2b136:	4623      	mov	r3, r4
   2b138:	aa5a      	add	r2, sp, #360	; 0x168
   2b13a:	4651      	mov	r1, sl
   2b13c:	4650      	mov	r0, sl
   2b13e:	f7f5 fa99 	bl	20674 <sub_mod_n>
   2b142:	9700      	str	r7, [sp, #0]
   2b144:	4623      	mov	r3, r4
   2b146:	9a05      	ldr	r2, [sp, #20]
   2b148:	4641      	mov	r1, r8
   2b14a:	a836      	add	r0, sp, #216	; 0xd8
   2b14c:	f7f9 f902 	bl	24354 <mul_mont_384x>
   2b150:	9700      	str	r7, [sp, #0]
   2b152:	4623      	mov	r3, r4
   2b154:	464a      	mov	r2, r9
   2b156:	9903      	ldr	r1, [sp, #12]
   2b158:	a81e      	add	r0, sp, #120	; 0x78
   2b15a:	f7f9 f8fb 	bl	24354 <mul_mont_384x>
   2b15e:	9500      	str	r5, [sp, #0]
   2b160:	4623      	mov	r3, r4
   2b162:	aa1e      	add	r2, sp, #120	; 0x78
   2b164:	a936      	add	r1, sp, #216	; 0xd8
   2b166:	4608      	mov	r0, r1
   2b168:	f7f5 fa84 	bl	20674 <sub_mod_n>
   2b16c:	9500      	str	r5, [sp, #0]
   2b16e:	4623      	mov	r3, r4
   2b170:	aa2a      	add	r2, sp, #168	; 0xa8
   2b172:	a942      	add	r1, sp, #264	; 0x108
   2b174:	4608      	mov	r0, r1
   2b176:	f7f5 fa7d 	bl	20674 <sub_mod_n>
   2b17a:	9500      	str	r5, [sp, #0]
   2b17c:	4623      	mov	r3, r4
   2b17e:	aa36      	add	r2, sp, #216	; 0xd8
   2b180:	4611      	mov	r1, r2
   2b182:	f8dd 8010 	ldr.w	r8, [sp, #16]
   2b186:	4640      	mov	r0, r8
   2b188:	f7f5 fdca 	bl	20d20 <add_mod_n>
   2b18c:	9500      	str	r5, [sp, #0]
   2b18e:	4623      	mov	r3, r4
   2b190:	aa42      	add	r2, sp, #264	; 0x108
   2b192:	4611      	mov	r1, r2
   2b194:	f108 0030 	add.w	r0, r8, #48	; 0x30
   2b198:	f7f5 fdc2 	bl	20d20 <add_mod_n>
   2b19c:	f106 03bc 	add.w	r3, r6, #188	; 0xbc
   2b1a0:	f108 00bc 	add.w	r0, r8, #188	; 0xbc
   2b1a4:	f506 768e 	add.w	r6, r6, #284	; 0x11c
   2b1a8:	f853 2f04 	ldr.w	r2, [r3, #4]!
   2b1ac:	f840 2f04 	str.w	r2, [r0, #4]!
   2b1b0:	429e      	cmp	r6, r3
   2b1b2:	d1f9      	bne.n	2b1a8 <line_add+0x334>
   2b1b4:	f50d 7d47 	add.w	sp, sp, #796	; 0x31c
   2b1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b1bc:	fffcfffd 	.word	0xfffcfffd
   2b1c0:	00038688 	.word	0x00038688

0002b1c4 <add_n_dbl_n>:
   2b1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b1c8:	b0c9      	sub	sp, #292	; 0x124
   2b1ca:	4604      	mov	r4, r0
   2b1cc:	468b      	mov	fp, r1
   2b1ce:	469a      	mov	sl, r3
   2b1d0:	9d52      	ldr	r5, [sp, #328]	; 0x148
   2b1d2:	b1e5      	cbz	r5, 2b20e <add_n_dbl_n+0x4a>
   2b1d4:	460e      	mov	r6, r1
   2b1d6:	4617      	mov	r7, r2
   2b1d8:	4699      	mov	r9, r3
   2b1da:	f04f 0800 	mov.w	r8, #0
   2b1de:	463b      	mov	r3, r7
   2b1e0:	4632      	mov	r2, r6
   2b1e2:	4631      	mov	r1, r6
   2b1e4:	4668      	mov	r0, sp
   2b1e6:	f7ff fe45 	bl	2ae74 <line_add>
   2b1ea:	4649      	mov	r1, r9
   2b1ec:	4668      	mov	r0, sp
   2b1ee:	f7f5 fd11 	bl	20c14 <line_by_Px2>
   2b1f2:	466a      	mov	r2, sp
   2b1f4:	4621      	mov	r1, r4
   2b1f6:	4620      	mov	r0, r4
   2b1f8:	f7f9 fde4 	bl	24dc4 <mul_by_xy00z0_fp12>
   2b1fc:	f108 0801 	add.w	r8, r8, #1
   2b200:	f506 7690 	add.w	r6, r6, #288	; 0x120
   2b204:	37c0      	adds	r7, #192	; 0xc0
   2b206:	f109 0960 	add.w	r9, r9, #96	; 0x60
   2b20a:	4545      	cmp	r5, r8
   2b20c:	d1e7      	bne.n	2b1de <add_n_dbl_n+0x1a>
   2b20e:	9b53      	ldr	r3, [sp, #332]	; 0x14c
   2b210:	f103 38ff 	add.w	r8, r3, #4294967295
   2b214:	b30b      	cbz	r3, 2b25a <add_n_dbl_n+0x96>
   2b216:	4621      	mov	r1, r4
   2b218:	4620      	mov	r0, r4
   2b21a:	f7f9 fc31 	bl	24a80 <sqr_fp12>
   2b21e:	b1bd      	cbz	r5, 2b250 <add_n_dbl_n+0x8c>
   2b220:	465e      	mov	r6, fp
   2b222:	46d1      	mov	r9, sl
   2b224:	2700      	movs	r7, #0
   2b226:	4632      	mov	r2, r6
   2b228:	4631      	mov	r1, r6
   2b22a:	4668      	mov	r0, sp
   2b22c:	f7ff fc5e 	bl	2aaec <line_dbl>
   2b230:	4649      	mov	r1, r9
   2b232:	4668      	mov	r0, sp
   2b234:	f7f5 fcee 	bl	20c14 <line_by_Px2>
   2b238:	466a      	mov	r2, sp
   2b23a:	4621      	mov	r1, r4
   2b23c:	4620      	mov	r0, r4
   2b23e:	f7f9 fdc1 	bl	24dc4 <mul_by_xy00z0_fp12>
   2b242:	3701      	adds	r7, #1
   2b244:	f506 7690 	add.w	r6, r6, #288	; 0x120
   2b248:	f109 0960 	add.w	r9, r9, #96	; 0x60
   2b24c:	42bd      	cmp	r5, r7
   2b24e:	d1ea      	bne.n	2b226 <add_n_dbl_n+0x62>
   2b250:	f108 38ff 	add.w	r8, r8, #4294967295
   2b254:	f1b8 3fff 	cmp.w	r8, #4294967295
   2b258:	d1dd      	bne.n	2b216 <add_n_dbl_n+0x52>
   2b25a:	b049      	add	sp, #292	; 0x124
   2b25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b260 <miller_loop_n>:
   2b260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b264:	b089      	sub	sp, #36	; 0x24
   2b266:	af02      	add	r7, sp, #8
   2b268:	6038      	str	r0, [r7, #0]
   2b26a:	6139      	str	r1, [r7, #16]
   2b26c:	4690      	mov	r8, r2
   2b26e:	461a      	mov	r2, r3
   2b270:	617b      	str	r3, [r7, #20]
   2b272:	f8c7 d004 	str.w	sp, [r7, #4]
   2b276:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2b27a:	4669      	mov	r1, sp
   2b27c:	eba1 1343 	sub.w	r3, r1, r3, lsl #5
   2b280:	469d      	mov	sp, r3
   2b282:	ab02      	add	r3, sp, #8
   2b284:	60fb      	str	r3, [r7, #12]
   2b286:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   2b28a:	4669      	mov	r1, sp
   2b28c:	eba1 1343 	sub.w	r3, r1, r3, lsl #5
   2b290:	469d      	mov	sp, r3
   2b292:	ab02      	add	r3, sp, #8
   2b294:	60bb      	str	r3, [r7, #8]
   2b296:	2a01      	cmp	r2, #1
   2b298:	f000 808b 	beq.w	2b3b2 <miller_loop_n+0x152>
   2b29c:	697b      	ldr	r3, [r7, #20]
   2b29e:	2b00      	cmp	r3, #0
   2b2a0:	d044      	beq.n	2b32c <miller_loop_n+0xcc>
   2b2a2:	68be      	ldr	r6, [r7, #8]
   2b2a4:	68fb      	ldr	r3, [r7, #12]
   2b2a6:	f103 0abc 	add.w	sl, r3, #188	; 0xbc
   2b2aa:	693b      	ldr	r3, [r7, #16]
   2b2ac:	f103 04bc 	add.w	r4, r3, #188	; 0xbc
   2b2b0:	f04f 0b00 	mov.w	fp, #0
   2b2b4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 2b410 <miller_loop_n+0x1b0>
   2b2b8:	f109 05ec 	add.w	r5, r9, #236	; 0xec
   2b2bc:	230c      	movs	r3, #12
   2b2be:	9300      	str	r3, [sp, #0]
   2b2c0:	464b      	mov	r3, r9
   2b2c2:	4642      	mov	r2, r8
   2b2c4:	4641      	mov	r1, r8
   2b2c6:	4630      	mov	r0, r6
   2b2c8:	f7f5 fd2a 	bl	20d20 <add_mod_n>
   2b2cc:	230c      	movs	r3, #12
   2b2ce:	9300      	str	r3, [sp, #0]
   2b2d0:	464b      	mov	r3, r9
   2b2d2:	2201      	movs	r2, #1
   2b2d4:	4631      	mov	r1, r6
   2b2d6:	4630      	mov	r0, r6
   2b2d8:	f7f6 fbb6 	bl	21a48 <cneg_mod_n>
   2b2dc:	f108 0130 	add.w	r1, r8, #48	; 0x30
   2b2e0:	230c      	movs	r3, #12
   2b2e2:	9300      	str	r3, [sp, #0]
   2b2e4:	464b      	mov	r3, r9
   2b2e6:	460a      	mov	r2, r1
   2b2e8:	f106 0030 	add.w	r0, r6, #48	; 0x30
   2b2ec:	f7f5 fd18 	bl	20d20 <add_mod_n>
   2b2f0:	f1a4 03c0 	sub.w	r3, r4, #192	; 0xc0
   2b2f4:	f1aa 02c0 	sub.w	r2, sl, #192	; 0xc0
   2b2f8:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2b2fc:	f842 1f04 	str.w	r1, [r2, #4]!
   2b300:	42a3      	cmp	r3, r4
   2b302:	d1f9      	bne.n	2b2f8 <miller_loop_n+0x98>
   2b304:	f109 038c 	add.w	r3, r9, #140	; 0x8c
   2b308:	4652      	mov	r2, sl
   2b30a:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2b30e:	f842 1f04 	str.w	r1, [r2, #4]!
   2b312:	42ab      	cmp	r3, r5
   2b314:	d1f9      	bne.n	2b30a <miller_loop_n+0xaa>
   2b316:	f10b 0b01 	add.w	fp, fp, #1
   2b31a:	3660      	adds	r6, #96	; 0x60
   2b31c:	f108 0860 	add.w	r8, r8, #96	; 0x60
   2b320:	f50a 7a90 	add.w	sl, sl, #288	; 0x120
   2b324:	34c0      	adds	r4, #192	; 0xc0
   2b326:	697b      	ldr	r3, [r7, #20]
   2b328:	455b      	cmp	r3, fp
   2b32a:	d8c7      	bhi.n	2b2bc <miller_loop_n+0x5c>
   2b32c:	697d      	ldr	r5, [r7, #20]
   2b32e:	462b      	mov	r3, r5
   2b330:	f8d7 8008 	ldr.w	r8, [r7, #8]
   2b334:	4642      	mov	r2, r8
   2b336:	68fe      	ldr	r6, [r7, #12]
   2b338:	4631      	mov	r1, r6
   2b33a:	683c      	ldr	r4, [r7, #0]
   2b33c:	4620      	mov	r0, r4
   2b33e:	f7ff fd4f 	bl	2ade0 <start_dbl_n>
   2b342:	2302      	movs	r3, #2
   2b344:	9301      	str	r3, [sp, #4]
   2b346:	9500      	str	r5, [sp, #0]
   2b348:	4643      	mov	r3, r8
   2b34a:	f8d7 9010 	ldr.w	r9, [r7, #16]
   2b34e:	464a      	mov	r2, r9
   2b350:	4631      	mov	r1, r6
   2b352:	4620      	mov	r0, r4
   2b354:	f7ff ff36 	bl	2b1c4 <add_n_dbl_n>
   2b358:	2303      	movs	r3, #3
   2b35a:	9301      	str	r3, [sp, #4]
   2b35c:	9500      	str	r5, [sp, #0]
   2b35e:	4643      	mov	r3, r8
   2b360:	464a      	mov	r2, r9
   2b362:	4631      	mov	r1, r6
   2b364:	4620      	mov	r0, r4
   2b366:	f7ff ff2d 	bl	2b1c4 <add_n_dbl_n>
   2b36a:	2309      	movs	r3, #9
   2b36c:	9301      	str	r3, [sp, #4]
   2b36e:	9500      	str	r5, [sp, #0]
   2b370:	4643      	mov	r3, r8
   2b372:	464a      	mov	r2, r9
   2b374:	4631      	mov	r1, r6
   2b376:	4620      	mov	r0, r4
   2b378:	f7ff ff24 	bl	2b1c4 <add_n_dbl_n>
   2b37c:	2320      	movs	r3, #32
   2b37e:	9301      	str	r3, [sp, #4]
   2b380:	9500      	str	r5, [sp, #0]
   2b382:	4643      	mov	r3, r8
   2b384:	464a      	mov	r2, r9
   2b386:	4631      	mov	r1, r6
   2b388:	4620      	mov	r0, r4
   2b38a:	f7ff ff1b 	bl	2b1c4 <add_n_dbl_n>
   2b38e:	2310      	movs	r3, #16
   2b390:	9301      	str	r3, [sp, #4]
   2b392:	9500      	str	r5, [sp, #0]
   2b394:	4643      	mov	r3, r8
   2b396:	464a      	mov	r2, r9
   2b398:	4631      	mov	r1, r6
   2b39a:	4620      	mov	r0, r4
   2b39c:	f7ff ff12 	bl	2b1c4 <add_n_dbl_n>
   2b3a0:	4620      	mov	r0, r4
   2b3a2:	f7f6 fcd1 	bl	21d48 <conjugate_fp12>
   2b3a6:	f8d7 d004 	ldr.w	sp, [r7, #4]
   2b3aa:	371c      	adds	r7, #28
   2b3ac:	46bd      	mov	sp, r7
   2b3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b3b2:	693a      	ldr	r2, [r7, #16]
   2b3b4:	1f13      	subs	r3, r2, #4
   2b3b6:	f102 00bc 	add.w	r0, r2, #188	; 0xbc
   2b3ba:	2100      	movs	r1, #0
   2b3bc:	f853 2f04 	ldr.w	r2, [r3, #4]!
   2b3c0:	4311      	orrs	r1, r2
   2b3c2:	4283      	cmp	r3, r0
   2b3c4:	d1fa      	bne.n	2b3bc <miller_loop_n+0x15c>
   2b3c6:	1e4c      	subs	r4, r1, #1
   2b3c8:	ea24 0101 	bic.w	r1, r4, r1
   2b3cc:	0fcc      	lsrs	r4, r1, #31
   2b3ce:	f1a8 0304 	sub.w	r3, r8, #4
   2b3d2:	f108 005c 	add.w	r0, r8, #92	; 0x5c
   2b3d6:	2100      	movs	r1, #0
   2b3d8:	f853 2f04 	ldr.w	r2, [r3, #4]!
   2b3dc:	4311      	orrs	r1, r2
   2b3de:	4283      	cmp	r3, r0
   2b3e0:	d1fa      	bne.n	2b3d8 <miller_loop_n+0x178>
   2b3e2:	1e4b      	subs	r3, r1, #1
   2b3e4:	ea23 0101 	bic.w	r1, r3, r1
   2b3e8:	ea54 73d1 	orrs.w	r3, r4, r1, lsr #31
   2b3ec:	f43f af59 	beq.w	2b2a2 <miller_loop_n+0x42>
   2b3f0:	4807      	ldr	r0, [pc, #28]	; (2b410 <miller_loop_n+0x1b0>)
   2b3f2:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   2b3f6:	683a      	ldr	r2, [r7, #0]
   2b3f8:	3a04      	subs	r2, #4
   2b3fa:	f500 7033 	add.w	r0, r0, #716	; 0x2cc
   2b3fe:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2b402:	f842 1f04 	str.w	r1, [r2, #4]!
   2b406:	4283      	cmp	r3, r0
   2b408:	d1f9      	bne.n	2b3fe <miller_loop_n+0x19e>
   2b40a:	f8d7 d004 	ldr.w	sp, [r7, #4]
   2b40e:	e7cc      	b.n	2b3aa <miller_loop_n+0x14a>
   2b410:	00038688 	.word	0x00038688

0002b414 <blst_miller_loop>:
   2b414:	b508      	push	{r3, lr}
   2b416:	2301      	movs	r3, #1
   2b418:	f7ff ff22 	bl	2b260 <miller_loop_n>
   2b41c:	bd08      	pop	{r3, pc}

0002b41e <PAIRING_Aggregate_PK_in_G2>:
   2b41e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b422:	f5ad 7d38 	sub.w	sp, sp, #736	; 0x2e0
   2b426:	4698      	mov	r8, r3
   2b428:	6803      	ldr	r3, [r0, #0]
   2b42a:	f013 0602 	ands.w	r6, r3, #2
   2b42e:	f040 8148 	bne.w	2b6c2 <PAIRING_Aggregate_PK_in_G2+0x2a4>
   2b432:	4607      	mov	r7, r0
   2b434:	460d      	mov	r5, r1
   2b436:	4691      	mov	r9, r2
   2b438:	f043 0301 	orr.w	r3, r3, #1
   2b43c:	6003      	str	r3, [r0, #0]
   2b43e:	f1b8 0f00 	cmp.w	r8, #0
   2b442:	d072      	beq.n	2b52a <PAIRING_Aggregate_PK_in_G2+0x10c>
   2b444:	f1a8 0304 	sub.w	r3, r8, #4
   2b448:	f108 045c 	add.w	r4, r8, #92	; 0x5c
   2b44c:	461a      	mov	r2, r3
   2b44e:	4631      	mov	r1, r6
   2b450:	f852 0f04 	ldr.w	r0, [r2, #4]!
   2b454:	4301      	orrs	r1, r0
   2b456:	42a2      	cmp	r2, r4
   2b458:	d1fa      	bne.n	2b450 <PAIRING_Aggregate_PK_in_G2+0x32>
   2b45a:	1e48      	subs	r0, r1, #1
   2b45c:	ea20 0101 	bic.w	r1, r0, r1
   2b460:	0fc9      	lsrs	r1, r1, #31
   2b462:	d162      	bne.n	2b52a <PAIRING_Aggregate_PK_in_G2+0x10c>
   2b464:	f507 7a14 	add.w	sl, r7, #592	; 0x250
   2b468:	f50d 7e80 	add.w	lr, sp, #256	; 0x100
   2b46c:	aa28      	add	r2, sp, #160	; 0xa0
   2b46e:	4618      	mov	r0, r3
   2b470:	f850 cf04 	ldr.w	ip, [r0, #4]!
   2b474:	f842 cb04 	str.w	ip, [r2], #4
   2b478:	4572      	cmp	r2, lr
   2b47a:	d1f9      	bne.n	2b470 <PAIRING_Aggregate_PK_in_G2+0x52>
   2b47c:	461a      	mov	r2, r3
   2b47e:	f852 0f04 	ldr.w	r0, [r2, #4]!
   2b482:	4301      	orrs	r1, r0
   2b484:	42a2      	cmp	r2, r4
   2b486:	d1fa      	bne.n	2b47e <PAIRING_Aggregate_PK_in_G2+0x60>
   2b488:	1e48      	subs	r0, r1, #1
   2b48a:	ea20 0101 	bic.w	r1, r0, r1
   2b48e:	17c8      	asrs	r0, r1, #31
   2b490:	498e      	ldr	r1, [pc, #568]	; (2b6cc <PAIRING_Aggregate_PK_in_G2+0x2ae>)
   2b492:	aa3f      	add	r2, sp, #252	; 0xfc
   2b494:	f108 0c2c 	add.w	ip, r8, #44	; 0x2c
   2b498:	f851 eb04 	ldr.w	lr, [r1], #4
   2b49c:	f853 4f04 	ldr.w	r4, [r3, #4]!
   2b4a0:	ea8e 0404 	eor.w	r4, lr, r4
   2b4a4:	4004      	ands	r4, r0
   2b4a6:	ea84 040e 	eor.w	r4, r4, lr
   2b4aa:	f842 4f04 	str.w	r4, [r2, #4]!
   2b4ae:	4563      	cmp	r3, ip
   2b4b0:	d1f2      	bne.n	2b498 <PAIRING_Aggregate_PK_in_G2+0x7a>
   2b4b2:	9bc0      	ldr	r3, [sp, #768]	; 0x300
   2b4b4:	b9a3      	cbnz	r3, 2b4e0 <PAIRING_Aggregate_PK_in_G2+0xc2>
   2b4b6:	683b      	ldr	r3, [r7, #0]
   2b4b8:	f013 0f10 	tst.w	r3, #16
   2b4bc:	d01d      	beq.n	2b4fa <PAIRING_Aggregate_PK_in_G2+0xdc>
   2b4be:	9bc2      	ldr	r3, [sp, #776]	; 0x308
   2b4c0:	b1ab      	cbz	r3, 2b4ee <PAIRING_Aggregate_PK_in_G2+0xd0>
   2b4c2:	9bc1      	ldr	r3, [sp, #772]	; 0x304
   2b4c4:	b19b      	cbz	r3, 2b4ee <PAIRING_Aggregate_PK_in_G2+0xd0>
   2b4c6:	9bc2      	ldr	r3, [sp, #776]	; 0x308
   2b4c8:	9ac1      	ldr	r2, [sp, #772]	; 0x304
   2b4ca:	a928      	add	r1, sp, #160	; 0xa0
   2b4cc:	4608      	mov	r0, r1
   2b4ce:	f7f8 f804 	bl	234da <POINTonE1_mult_w5>
   2b4d2:	2300      	movs	r3, #0
   2b4d4:	aa28      	add	r2, sp, #160	; 0xa0
   2b4d6:	4651      	mov	r1, sl
   2b4d8:	4650      	mov	r0, sl
   2b4da:	f7f7 fd1f 	bl	22f1c <POINTonE1_dadd>
   2b4de:	e024      	b.n	2b52a <PAIRING_Aggregate_PK_in_G2+0x10c>
   2b4e0:	a828      	add	r0, sp, #160	; 0xa0
   2b4e2:	f7f8 f8a3 	bl	2362c <POINTonE1_in_G1>
   2b4e6:	2800      	cmp	r0, #0
   2b4e8:	d1e5      	bne.n	2b4b6 <PAIRING_Aggregate_PK_in_G2+0x98>
   2b4ea:	2003      	movs	r0, #3
   2b4ec:	e0b1      	b.n	2b652 <PAIRING_Aggregate_PK_in_G2+0x234>
   2b4ee:	4642      	mov	r2, r8
   2b4f0:	4651      	mov	r1, sl
   2b4f2:	4650      	mov	r0, sl
   2b4f4:	f7f7 fba0 	bl	22c38 <POINTonE1_dadd_affine>
   2b4f8:	e017      	b.n	2b52a <PAIRING_Aggregate_PK_in_G2+0x10c>
   2b4fa:	f043 0310 	orr.w	r3, r3, #16
   2b4fe:	603b      	str	r3, [r7, #0]
   2b500:	9bc2      	ldr	r3, [sp, #776]	; 0x308
   2b502:	b143      	cbz	r3, 2b516 <PAIRING_Aggregate_PK_in_G2+0xf8>
   2b504:	9bc1      	ldr	r3, [sp, #772]	; 0x304
   2b506:	b133      	cbz	r3, 2b516 <PAIRING_Aggregate_PK_in_G2+0xf8>
   2b508:	9bc2      	ldr	r3, [sp, #776]	; 0x308
   2b50a:	9ac1      	ldr	r2, [sp, #772]	; 0x304
   2b50c:	a928      	add	r1, sp, #160	; 0xa0
   2b50e:	4650      	mov	r0, sl
   2b510:	f7f7 ffe3 	bl	234da <POINTonE1_mult_w5>
   2b514:	e009      	b.n	2b52a <PAIRING_Aggregate_PK_in_G2+0x10c>
   2b516:	ab27      	add	r3, sp, #156	; 0x9c
   2b518:	f507 7213 	add.w	r2, r7, #588	; 0x24c
   2b51c:	a84b      	add	r0, sp, #300	; 0x12c
   2b51e:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2b522:	f842 1f04 	str.w	r1, [r2, #4]!
   2b526:	4283      	cmp	r3, r0
   2b528:	d1f9      	bne.n	2b51e <PAIRING_Aggregate_PK_in_G2+0x100>
   2b52a:	2d00      	cmp	r5, #0
   2b52c:	f000 80cb 	beq.w	2b6c6 <PAIRING_Aggregate_PK_in_G2+0x2a8>
   2b530:	f8d7 8008 	ldr.w	r8, [r7, #8]
   2b534:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
   2b538:	bf08      	it	eq
   2b53a:	f507 6847 	addeq.w	r8, r7, #3184	; 0xc70
   2b53e:	1f2c      	subs	r4, r5, #4
   2b540:	35bc      	adds	r5, #188	; 0xbc
   2b542:	4623      	mov	r3, r4
   2b544:	f853 2f04 	ldr.w	r2, [r3, #4]!
   2b548:	4316      	orrs	r6, r2
   2b54a:	42ab      	cmp	r3, r5
   2b54c:	d1fa      	bne.n	2b544 <PAIRING_Aggregate_PK_in_G2+0x126>
   2b54e:	1e73      	subs	r3, r6, #1
   2b550:	ea23 0606 	bic.w	r6, r3, r6
   2b554:	0ff6      	lsrs	r6, r6, #31
   2b556:	f040 80b2 	bne.w	2b6be <PAIRING_Aggregate_PK_in_G2+0x2a0>
   2b55a:	f1b9 0f00 	cmp.w	r9, #0
   2b55e:	d02f      	beq.n	2b5c0 <PAIRING_Aggregate_PK_in_G2+0x1a2>
   2b560:	ab28      	add	r3, sp, #160	; 0xa0
   2b562:	a858      	add	r0, sp, #352	; 0x160
   2b564:	4622      	mov	r2, r4
   2b566:	f852 1f04 	ldr.w	r1, [r2, #4]!
   2b56a:	f843 1b04 	str.w	r1, [r3], #4
   2b56e:	4283      	cmp	r3, r0
   2b570:	d1f9      	bne.n	2b566 <PAIRING_Aggregate_PK_in_G2+0x148>
   2b572:	4623      	mov	r3, r4
   2b574:	4632      	mov	r2, r6
   2b576:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2b57a:	430a      	orrs	r2, r1
   2b57c:	42ab      	cmp	r3, r5
   2b57e:	d1fa      	bne.n	2b576 <PAIRING_Aggregate_PK_in_G2+0x158>
   2b580:	f102 3cff 	add.w	ip, r2, #4294967295
   2b584:	ea2c 0c02 	bic.w	ip, ip, r2
   2b588:	ea4f 7cec 	mov.w	ip, ip, asr #31
   2b58c:	4b50      	ldr	r3, [pc, #320]	; (2b6d0 <PAIRING_Aggregate_PK_in_G2+0x2b2>)
   2b58e:	f103 0290 	add.w	r2, r3, #144	; 0x90
   2b592:	a857      	add	r0, sp, #348	; 0x15c
   2b594:	f103 0ef0 	add.w	lr, r3, #240	; 0xf0
   2b598:	4621      	mov	r1, r4
   2b59a:	f852 9b04 	ldr.w	r9, [r2], #4
   2b59e:	f851 3f04 	ldr.w	r3, [r1, #4]!
   2b5a2:	ea89 0303 	eor.w	r3, r9, r3
   2b5a6:	ea03 030c 	and.w	r3, r3, ip
   2b5aa:	ea83 0309 	eor.w	r3, r3, r9
   2b5ae:	f840 3f04 	str.w	r3, [r0, #4]!
   2b5b2:	4572      	cmp	r2, lr
   2b5b4:	d1f1      	bne.n	2b59a <PAIRING_Aggregate_PK_in_G2+0x17c>
   2b5b6:	a828      	add	r0, sp, #160	; 0xa0
   2b5b8:	f7fd ff0a 	bl	293d0 <POINTonE2_in_G2>
   2b5bc:	2800      	cmp	r0, #0
   2b5be:	d04c      	beq.n	2b65a <PAIRING_Aggregate_PK_in_G2+0x23c>
   2b5c0:	683b      	ldr	r3, [r7, #0]
   2b5c2:	f013 0f40 	tst.w	r3, #64	; 0x40
   2b5c6:	d04a      	beq.n	2b65e <PAIRING_Aggregate_PK_in_G2+0x240>
   2b5c8:	68fb      	ldr	r3, [r7, #12]
   2b5ca:	9303      	str	r3, [sp, #12]
   2b5cc:	f8cd 8008 	str.w	r8, [sp, #8]
   2b5d0:	9bc4      	ldr	r3, [sp, #784]	; 0x310
   2b5d2:	9301      	str	r3, [sp, #4]
   2b5d4:	9bc3      	ldr	r3, [sp, #780]	; 0x30c
   2b5d6:	9300      	str	r3, [sp, #0]
   2b5d8:	9bc6      	ldr	r3, [sp, #792]	; 0x318
   2b5da:	9ac5      	ldr	r2, [sp, #788]	; 0x314
   2b5dc:	2102      	movs	r1, #2
   2b5de:	a828      	add	r0, sp, #160	; 0xa0
   2b5e0:	f7fb fd0d 	bl	26ffe <hash_to_field>
   2b5e4:	aa34      	add	r2, sp, #208	; 0xd0
   2b5e6:	a928      	add	r1, sp, #160	; 0xa0
   2b5e8:	a804      	add	r0, sp, #16
   2b5ea:	f7fb f85b 	bl	266a4 <map_to_g1>
   2b5ee:	9bc2      	ldr	r3, [sp, #776]	; 0x308
   2b5f0:	b13b      	cbz	r3, 2b602 <PAIRING_Aggregate_PK_in_G2+0x1e4>
   2b5f2:	9bc1      	ldr	r3, [sp, #772]	; 0x304
   2b5f4:	b12b      	cbz	r3, 2b602 <PAIRING_Aggregate_PK_in_G2+0x1e4>
   2b5f6:	9bc2      	ldr	r3, [sp, #776]	; 0x308
   2b5f8:	9ac1      	ldr	r2, [sp, #772]	; 0x304
   2b5fa:	a904      	add	r1, sp, #16
   2b5fc:	4608      	mov	r0, r1
   2b5fe:	f7f7 ff6c 	bl	234da <POINTonE1_mult_w5>
   2b602:	a904      	add	r1, sp, #16
   2b604:	4608      	mov	r0, r1
   2b606:	f7fa f8c1 	bl	2578c <POINTonE1_from_Jacobian>
   2b60a:	687a      	ldr	r2, [r7, #4]
   2b60c:	f507 715c 	add.w	r1, r7, #880	; 0x370
   2b610:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   2b614:	eb07 1383 	add.w	r3, r7, r3, lsl #6
   2b618:	f503 735b 	add.w	r3, r3, #876	; 0x36c
   2b61c:	f854 0f04 	ldr.w	r0, [r4, #4]!
   2b620:	f843 0f04 	str.w	r0, [r3, #4]!
   2b624:	42ac      	cmp	r4, r5
   2b626:	d1f9      	bne.n	2b61c <PAIRING_Aggregate_PK_in_G2+0x1fe>
   2b628:	f507 6c17 	add.w	ip, r7, #2416	; 0x970
   2b62c:	ab03      	add	r3, sp, #12
   2b62e:	eb02 0042 	add.w	r0, r2, r2, lsl #1
   2b632:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   2b636:	f600 106c 	addw	r0, r0, #2412	; 0x96c
   2b63a:	ad1b      	add	r5, sp, #108	; 0x6c
   2b63c:	f853 4f04 	ldr.w	r4, [r3, #4]!
   2b640:	f840 4f04 	str.w	r4, [r0, #4]!
   2b644:	429d      	cmp	r5, r3
   2b646:	d1f9      	bne.n	2b63c <PAIRING_Aggregate_PK_in_G2+0x21e>
   2b648:	1c54      	adds	r4, r2, #1
   2b64a:	2a07      	cmp	r2, #7
   2b64c:	d01b      	beq.n	2b686 <PAIRING_Aggregate_PK_in_G2+0x268>
   2b64e:	607c      	str	r4, [r7, #4]
   2b650:	2000      	movs	r0, #0
   2b652:	f50d 7d38 	add.w	sp, sp, #736	; 0x2e0
   2b656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b65a:	2003      	movs	r0, #3
   2b65c:	e7f9      	b.n	2b652 <PAIRING_Aggregate_PK_in_G2+0x234>
   2b65e:	68fb      	ldr	r3, [r7, #12]
   2b660:	9303      	str	r3, [sp, #12]
   2b662:	f8cd 8008 	str.w	r8, [sp, #8]
   2b666:	9bc4      	ldr	r3, [sp, #784]	; 0x310
   2b668:	9301      	str	r3, [sp, #4]
   2b66a:	9bc3      	ldr	r3, [sp, #780]	; 0x30c
   2b66c:	9300      	str	r3, [sp, #0]
   2b66e:	9bc6      	ldr	r3, [sp, #792]	; 0x318
   2b670:	9ac5      	ldr	r2, [sp, #788]	; 0x314
   2b672:	2101      	movs	r1, #1
   2b674:	a828      	add	r0, sp, #160	; 0xa0
   2b676:	f7fb fcc2 	bl	26ffe <hash_to_field>
   2b67a:	2200      	movs	r2, #0
   2b67c:	a928      	add	r1, sp, #160	; 0xa0
   2b67e:	a804      	add	r0, sp, #16
   2b680:	f7fb f810 	bl	266a4 <map_to_g1>
   2b684:	e7b3      	b.n	2b5ee <PAIRING_Aggregate_PK_in_G2+0x1d0>
   2b686:	683c      	ldr	r4, [r7, #0]
   2b688:	f014 0420 	ands.w	r4, r4, #32
   2b68c:	d00c      	beq.n	2b6a8 <PAIRING_Aggregate_PK_in_G2+0x28a>
   2b68e:	2308      	movs	r3, #8
   2b690:	4662      	mov	r2, ip
   2b692:	a828      	add	r0, sp, #160	; 0xa0
   2b694:	f7ff fde4 	bl	2b260 <miller_loop_n>
   2b698:	f107 0010 	add.w	r0, r7, #16
   2b69c:	aa28      	add	r2, sp, #160	; 0xa0
   2b69e:	4601      	mov	r1, r0
   2b6a0:	f7f9 f96c 	bl	2497c <mul_fp12>
   2b6a4:	4634      	mov	r4, r6
   2b6a6:	e7d2      	b.n	2b64e <PAIRING_Aggregate_PK_in_G2+0x230>
   2b6a8:	2308      	movs	r3, #8
   2b6aa:	4662      	mov	r2, ip
   2b6ac:	f107 0010 	add.w	r0, r7, #16
   2b6b0:	f7ff fdd6 	bl	2b260 <miller_loop_n>
   2b6b4:	683b      	ldr	r3, [r7, #0]
   2b6b6:	f043 0320 	orr.w	r3, r3, #32
   2b6ba:	603b      	str	r3, [r7, #0]
   2b6bc:	e7c7      	b.n	2b64e <PAIRING_Aggregate_PK_in_G2+0x230>
   2b6be:	2006      	movs	r0, #6
   2b6c0:	e7c7      	b.n	2b652 <PAIRING_Aggregate_PK_in_G2+0x234>
   2b6c2:	2004      	movs	r0, #4
   2b6c4:	e7c5      	b.n	2b652 <PAIRING_Aggregate_PK_in_G2+0x234>
   2b6c6:	2000      	movs	r0, #0
   2b6c8:	e7c3      	b.n	2b652 <PAIRING_Aggregate_PK_in_G2+0x234>
   2b6ca:	bf00      	nop
   2b6cc:	00038718 	.word	0x00038718
   2b6d0:	00038688 	.word	0x00038688

0002b6d4 <blst_pairing_aggregate_pk_in_g2>:
   2b6d4:	b500      	push	{lr}
   2b6d6:	b089      	sub	sp, #36	; 0x24
   2b6d8:	4694      	mov	ip, r2
   2b6da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2b6dc:	9206      	str	r2, [sp, #24]
   2b6de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2b6e0:	9205      	str	r2, [sp, #20]
   2b6e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2b6e4:	9204      	str	r2, [sp, #16]
   2b6e6:	9303      	str	r3, [sp, #12]
   2b6e8:	2200      	movs	r2, #0
   2b6ea:	9202      	str	r2, [sp, #8]
   2b6ec:	9201      	str	r2, [sp, #4]
   2b6ee:	2301      	movs	r3, #1
   2b6f0:	9300      	str	r3, [sp, #0]
   2b6f2:	4663      	mov	r3, ip
   2b6f4:	f7ff fe93 	bl	2b41e <PAIRING_Aggregate_PK_in_G2>
   2b6f8:	b009      	add	sp, #36	; 0x24
   2b6fa:	f85d fb04 	ldr.w	pc, [sp], #4

0002b6fe <blst_pairing_mul_n_aggregate_pk_in_g2>:
   2b6fe:	b500      	push	{lr}
   2b700:	b089      	sub	sp, #36	; 0x24
   2b702:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   2b706:	f8cd c018 	str.w	ip, [sp, #24]
   2b70a:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
   2b70e:	f8cd c014 	str.w	ip, [sp, #20]
   2b712:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   2b716:	f8cd c010 	str.w	ip, [sp, #16]
   2b71a:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
   2b71e:	f8cd c00c 	str.w	ip, [sp, #12]
   2b722:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   2b726:	f8cd c008 	str.w	ip, [sp, #8]
   2b72a:	9301      	str	r3, [sp, #4]
   2b72c:	2301      	movs	r3, #1
   2b72e:	9300      	str	r3, [sp, #0]
   2b730:	4613      	mov	r3, r2
   2b732:	2200      	movs	r2, #0
   2b734:	f7ff fe73 	bl	2b41e <PAIRING_Aggregate_PK_in_G2>
   2b738:	b009      	add	sp, #36	; 0x24
   2b73a:	f85d fb04 	ldr.w	pc, [sp], #4

0002b73e <blst_pairing_chk_n_aggr_pk_in_g2>:
   2b73e:	b510      	push	{r4, lr}
   2b740:	b088      	sub	sp, #32
   2b742:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   2b744:	9406      	str	r4, [sp, #24]
   2b746:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   2b748:	9405      	str	r4, [sp, #20]
   2b74a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2b74c:	9404      	str	r4, [sp, #16]
   2b74e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2b750:	9403      	str	r4, [sp, #12]
   2b752:	2400      	movs	r4, #0
   2b754:	9402      	str	r4, [sp, #8]
   2b756:	9401      	str	r4, [sp, #4]
   2b758:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2b75a:	9400      	str	r4, [sp, #0]
   2b75c:	f7ff fe5f 	bl	2b41e <PAIRING_Aggregate_PK_in_G2>
   2b760:	b008      	add	sp, #32
   2b762:	bd10      	pop	{r4, pc}

0002b764 <blst_pairing_chk_n_mul_n_aggr_pk_in_g2>:
   2b764:	b500      	push	{lr}
   2b766:	b089      	sub	sp, #36	; 0x24
   2b768:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   2b76c:	f8cd c018 	str.w	ip, [sp, #24]
   2b770:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
   2b774:	f8cd c014 	str.w	ip, [sp, #20]
   2b778:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   2b77c:	f8cd c010 	str.w	ip, [sp, #16]
   2b780:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
   2b784:	f8cd c00c 	str.w	ip, [sp, #12]
   2b788:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   2b78c:	f8cd c008 	str.w	ip, [sp, #8]
   2b790:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
   2b794:	f8cd c004 	str.w	ip, [sp, #4]
   2b798:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   2b79c:	f8cd c000 	str.w	ip, [sp]
   2b7a0:	f7ff fe3d 	bl	2b41e <PAIRING_Aggregate_PK_in_G2>
   2b7a4:	b009      	add	sp, #36	; 0x24
   2b7a6:	f85d fb04 	ldr.w	pc, [sp], #4

0002b7aa <PAIRING_Commit>:
   2b7aa:	6843      	ldr	r3, [r0, #4]
   2b7ac:	b32b      	cbz	r3, 2b7fa <PAIRING_Commit+0x50>
   2b7ae:	b510      	push	{r4, lr}
   2b7b0:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
   2b7b4:	4604      	mov	r4, r0
   2b7b6:	6802      	ldr	r2, [r0, #0]
   2b7b8:	f012 0f20 	tst.w	r2, #32
   2b7bc:	d011      	beq.n	2b7e2 <PAIRING_Commit+0x38>
   2b7be:	f500 6217 	add.w	r2, r0, #2416	; 0x970
   2b7c2:	f500 715c 	add.w	r1, r0, #880	; 0x370
   2b7c6:	4668      	mov	r0, sp
   2b7c8:	f7ff fd4a 	bl	2b260 <miller_loop_n>
   2b7cc:	f104 0010 	add.w	r0, r4, #16
   2b7d0:	466a      	mov	r2, sp
   2b7d2:	4601      	mov	r1, r0
   2b7d4:	f7f9 f8d2 	bl	2497c <mul_fp12>
   2b7d8:	2300      	movs	r3, #0
   2b7da:	6063      	str	r3, [r4, #4]
   2b7dc:	f50d 7d10 	add.w	sp, sp, #576	; 0x240
   2b7e0:	bd10      	pop	{r4, pc}
   2b7e2:	f500 6217 	add.w	r2, r0, #2416	; 0x970
   2b7e6:	f500 715c 	add.w	r1, r0, #880	; 0x370
   2b7ea:	3010      	adds	r0, #16
   2b7ec:	f7ff fd38 	bl	2b260 <miller_loop_n>
   2b7f0:	6823      	ldr	r3, [r4, #0]
   2b7f2:	f043 0320 	orr.w	r3, r3, #32
   2b7f6:	6023      	str	r3, [r4, #0]
   2b7f8:	e7ee      	b.n	2b7d8 <PAIRING_Commit+0x2e>
   2b7fa:	4770      	bx	lr

0002b7fc <blst_pairing_commit>:
   2b7fc:	b508      	push	{r3, lr}
   2b7fe:	f7ff ffd4 	bl	2b7aa <PAIRING_Commit>
   2b802:	bd08      	pop	{r3, pc}

0002b804 <PAIRING_FinalVerify>:
   2b804:	b530      	push	{r4, r5, lr}
   2b806:	f5ad 7d59 	sub.w	sp, sp, #868	; 0x364
   2b80a:	4605      	mov	r5, r0
   2b80c:	6803      	ldr	r3, [r0, #0]
   2b80e:	f013 0020 	ands.w	r0, r3, #32
   2b812:	d03a      	beq.n	2b88a <PAIRING_FinalVerify+0x86>
   2b814:	2900      	cmp	r1, #0
   2b816:	d03b      	beq.n	2b890 <PAIRING_FinalVerify+0x8c>
   2b818:	3904      	subs	r1, #4
   2b81a:	ab48      	add	r3, sp, #288	; 0x120
   2b81c:	a8d8      	add	r0, sp, #864	; 0x360
   2b81e:	f851 2f04 	ldr.w	r2, [r1, #4]!
   2b822:	f843 2b04 	str.w	r2, [r3], #4
   2b826:	4283      	cmp	r3, r0
   2b828:	d1f9      	bne.n	2b81e <PAIRING_FinalVerify+0x1a>
   2b82a:	ac48      	add	r4, sp, #288	; 0x120
   2b82c:	4620      	mov	r0, r4
   2b82e:	f7f6 fa8b 	bl	21d48 <conjugate_fp12>
   2b832:	f105 0210 	add.w	r2, r5, #16
   2b836:	4621      	mov	r1, r4
   2b838:	4620      	mov	r0, r4
   2b83a:	f7f9 f89f 	bl	2497c <mul_fp12>
   2b83e:	4621      	mov	r1, r4
   2b840:	4620      	mov	r0, r4
   2b842:	f7ff f89d 	bl	2a980 <final_exp>
   2b846:	aa47      	add	r2, sp, #284	; 0x11c
   2b848:	4929      	ldr	r1, [pc, #164]	; (2b8f0 <PAIRING_FinalVerify+0xec>)
   2b84a:	f50d 7ebe 	add.w	lr, sp, #380	; 0x17c
   2b84e:	f04f 0c00 	mov.w	ip, #0
   2b852:	f852 3f04 	ldr.w	r3, [r2, #4]!
   2b856:	f851 0f04 	ldr.w	r0, [r1, #4]!
   2b85a:	4043      	eors	r3, r0
   2b85c:	ea4c 0c03 	orr.w	ip, ip, r3
   2b860:	4572      	cmp	r2, lr
   2b862:	d1f6      	bne.n	2b852 <PAIRING_FinalVerify+0x4e>
   2b864:	f10c 30ff 	add.w	r0, ip, #4294967295
   2b868:	ea20 000c 	bic.w	r0, r0, ip
   2b86c:	0fc0      	lsrs	r0, r0, #31
   2b86e:	ab5f      	add	r3, sp, #380	; 0x17c
   2b870:	f504 710f 	add.w	r1, r4, #572	; 0x23c
   2b874:	2200      	movs	r2, #0
   2b876:	f853 4f04 	ldr.w	r4, [r3, #4]!
   2b87a:	4322      	orrs	r2, r4
   2b87c:	4299      	cmp	r1, r3
   2b87e:	d1fa      	bne.n	2b876 <PAIRING_FinalVerify+0x72>
   2b880:	1e53      	subs	r3, r2, #1
   2b882:	ea23 0202 	bic.w	r2, r3, r2
   2b886:	ea00 70d2 	and.w	r0, r0, r2, lsr #31
   2b88a:	f50d 7d59 	add.w	sp, sp, #868	; 0x364
   2b88e:	bd30      	pop	{r4, r5, pc}
   2b890:	f013 0f10 	tst.w	r3, #16
   2b894:	d01f      	beq.n	2b8d6 <PAIRING_FinalVerify+0xd2>
   2b896:	f003 0303 	and.w	r3, r3, #3
   2b89a:	2b01      	cmp	r3, #1
   2b89c:	d003      	beq.n	2b8a6 <PAIRING_FinalVerify+0xa2>
   2b89e:	2b02      	cmp	r3, #2
   2b8a0:	d00d      	beq.n	2b8be <PAIRING_FinalVerify+0xba>
   2b8a2:	2000      	movs	r0, #0
   2b8a4:	e7f1      	b.n	2b88a <PAIRING_FinalVerify+0x86>
   2b8a6:	f505 7114 	add.w	r1, r5, #592	; 0x250
   2b8aa:	4668      	mov	r0, sp
   2b8ac:	f7f9 ff6e 	bl	2578c <POINTonE1_from_Jacobian>
   2b8b0:	2301      	movs	r3, #1
   2b8b2:	466a      	mov	r2, sp
   2b8b4:	490f      	ldr	r1, [pc, #60]	; (2b8f4 <PAIRING_FinalVerify+0xf0>)
   2b8b6:	a848      	add	r0, sp, #288	; 0x120
   2b8b8:	f7ff fcd2 	bl	2b260 <miller_loop_n>
   2b8bc:	e7b5      	b.n	2b82a <PAIRING_FinalVerify+0x26>
   2b8be:	f505 7114 	add.w	r1, r5, #592	; 0x250
   2b8c2:	4668      	mov	r0, sp
   2b8c4:	f7fc f809 	bl	278da <POINTonE2_from_Jacobian>
   2b8c8:	2301      	movs	r3, #1
   2b8ca:	4a0b      	ldr	r2, [pc, #44]	; (2b8f8 <PAIRING_FinalVerify+0xf4>)
   2b8cc:	4669      	mov	r1, sp
   2b8ce:	a848      	add	r0, sp, #288	; 0x120
   2b8d0:	f7ff fcc6 	bl	2b260 <miller_loop_n>
   2b8d4:	e7a9      	b.n	2b82a <PAIRING_FinalVerify+0x26>
   2b8d6:	4809      	ldr	r0, [pc, #36]	; (2b8fc <PAIRING_FinalVerify+0xf8>)
   2b8d8:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   2b8dc:	aa47      	add	r2, sp, #284	; 0x11c
   2b8de:	f500 7033 	add.w	r0, r0, #716	; 0x2cc
   2b8e2:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2b8e6:	f842 1f04 	str.w	r1, [r2, #4]!
   2b8ea:	4283      	cmp	r3, r0
   2b8ec:	d1f9      	bne.n	2b8e2 <PAIRING_FinalVerify+0xde>
   2b8ee:	e79c      	b.n	2b82a <PAIRING_FinalVerify+0x26>
   2b8f0:	00038714 	.word	0x00038714
   2b8f4:	00039408 	.word	0x00039408
   2b8f8:	00039378 	.word	0x00039378
   2b8fc:	00038688 	.word	0x00038688

0002b900 <blst_pairing_finalverify>:
   2b900:	b508      	push	{r3, lr}
   2b902:	f7ff ff7f 	bl	2b804 <PAIRING_FinalVerify>
   2b906:	bd08      	pop	{r3, pc}

0002b908 <blst_core_verify_pk_in_g2>:
   2b908:	b510      	push	{r4, lr}
   2b90a:	f5ad 6d49 	sub.w	sp, sp, #3216	; 0xc90
   2b90e:	2a00      	cmp	r2, #0
   2b910:	bf14      	ite	ne
   2b912:	2240      	movne	r2, #64	; 0x40
   2b914:	2200      	moveq	r2, #0
   2b916:	9208      	str	r2, [sp, #32]
   2b918:	2200      	movs	r2, #0
   2b91a:	9209      	str	r2, [sp, #36]	; 0x24
   2b91c:	f8dd 4c9c 	ldr.w	r4, [sp, #3228]	; 0xc9c
   2b920:	940a      	str	r4, [sp, #40]	; 0x28
   2b922:	f8dd 4ca0 	ldr.w	r4, [sp, #3232]	; 0xca0
   2b926:	940b      	str	r4, [sp, #44]	; 0x2c
   2b928:	f8dd 4ca8 	ldr.w	r4, [sp, #3240]	; 0xca8
   2b92c:	9406      	str	r4, [sp, #24]
   2b92e:	f8dd 4ca4 	ldr.w	r4, [sp, #3236]	; 0xca4
   2b932:	9405      	str	r4, [sp, #20]
   2b934:	f8dd 4c98 	ldr.w	r4, [sp, #3224]	; 0xc98
   2b938:	9404      	str	r4, [sp, #16]
   2b93a:	9303      	str	r3, [sp, #12]
   2b93c:	9202      	str	r2, [sp, #8]
   2b93e:	9201      	str	r2, [sp, #4]
   2b940:	2201      	movs	r2, #1
   2b942:	9200      	str	r2, [sp, #0]
   2b944:	460b      	mov	r3, r1
   2b946:	4601      	mov	r1, r0
   2b948:	a808      	add	r0, sp, #32
   2b94a:	f7ff fd68 	bl	2b41e <PAIRING_Aggregate_PK_in_G2>
   2b94e:	4604      	mov	r4, r0
   2b950:	b118      	cbz	r0, 2b95a <blst_core_verify_pk_in_g2+0x52>
   2b952:	4620      	mov	r0, r4
   2b954:	f50d 6d49 	add.w	sp, sp, #3216	; 0xc90
   2b958:	bd10      	pop	{r4, pc}
   2b95a:	a808      	add	r0, sp, #32
   2b95c:	f7ff ff25 	bl	2b7aa <PAIRING_Commit>
   2b960:	2100      	movs	r1, #0
   2b962:	a808      	add	r0, sp, #32
   2b964:	f7ff ff4e 	bl	2b804 <PAIRING_FinalVerify>
   2b968:	2800      	cmp	r0, #0
   2b96a:	bf08      	it	eq
   2b96c:	2405      	moveq	r4, #5
   2b96e:	e7f0      	b.n	2b952 <blst_core_verify_pk_in_g2+0x4a>

0002b970 <blst_aggregated_in_g1>:
   2b970:	b508      	push	{r3, lr}
   2b972:	460a      	mov	r2, r1
   2b974:	2301      	movs	r3, #1
   2b976:	4902      	ldr	r1, [pc, #8]	; (2b980 <blst_aggregated_in_g1+0x10>)
   2b978:	f7ff fc72 	bl	2b260 <miller_loop_n>
   2b97c:	bd08      	pop	{r3, pc}
   2b97e:	bf00      	nop
   2b980:	00039408 	.word	0x00039408

0002b984 <blst_aggregated_in_g2>:
   2b984:	b508      	push	{r3, lr}
   2b986:	2301      	movs	r3, #1
   2b988:	4a01      	ldr	r2, [pc, #4]	; (2b990 <blst_aggregated_in_g2+0xc>)
   2b98a:	f7ff fc69 	bl	2b260 <miller_loop_n>
   2b98e:	bd08      	pop	{r3, pc}
   2b990:	00039378 	.word	0x00039378

0002b994 <pre_add_n_dbl>:
   2b994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b996:	460e      	mov	r6, r1
   2b998:	461f      	mov	r7, r3
   2b99a:	f500 7490 	add.w	r4, r0, #288	; 0x120
   2b99e:	4613      	mov	r3, r2
   2b9a0:	460a      	mov	r2, r1
   2b9a2:	f7ff fa67 	bl	2ae74 <line_add>
   2b9a6:	1e7d      	subs	r5, r7, #1
   2b9a8:	b157      	cbz	r7, 2b9c0 <pre_add_n_dbl+0x2c>
   2b9aa:	4620      	mov	r0, r4
   2b9ac:	4632      	mov	r2, r6
   2b9ae:	4631      	mov	r1, r6
   2b9b0:	f504 7490 	add.w	r4, r4, #288	; 0x120
   2b9b4:	f7ff f89a 	bl	2aaec <line_dbl>
   2b9b8:	3d01      	subs	r5, #1
   2b9ba:	f1b5 3fff 	cmp.w	r5, #4294967295
   2b9be:	d1f4      	bne.n	2b9aa <pre_add_n_dbl+0x16>
   2b9c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002b9c2 <precompute_lines>:
   2b9c2:	b530      	push	{r4, r5, lr}
   2b9c4:	b0c9      	sub	sp, #292	; 0x124
   2b9c6:	4604      	mov	r4, r0
   2b9c8:	460d      	mov	r5, r1
   2b9ca:	f1a1 0c04 	sub.w	ip, r1, #4
   2b9ce:	466b      	mov	r3, sp
   2b9d0:	a930      	add	r1, sp, #192	; 0xc0
   2b9d2:	f85c 2f04 	ldr.w	r2, [ip, #4]!
   2b9d6:	f843 2b04 	str.w	r2, [r3], #4
   2b9da:	428b      	cmp	r3, r1
   2b9dc:	d1f9      	bne.n	2b9d2 <precompute_lines+0x10>
   2b9de:	491b      	ldr	r1, [pc, #108]	; (2ba4c <precompute_lines+0x8a>)
   2b9e0:	f101 038c 	add.w	r3, r1, #140	; 0x8c
   2b9e4:	f10d 0cbc 	add.w	ip, sp, #188	; 0xbc
   2b9e8:	31ec      	adds	r1, #236	; 0xec
   2b9ea:	f853 2f04 	ldr.w	r2, [r3, #4]!
   2b9ee:	f84c 2f04 	str.w	r2, [ip, #4]!
   2b9f2:	428b      	cmp	r3, r1
   2b9f4:	d1f9      	bne.n	2b9ea <precompute_lines+0x28>
   2b9f6:	466a      	mov	r2, sp
   2b9f8:	4669      	mov	r1, sp
   2b9fa:	4620      	mov	r0, r4
   2b9fc:	f7ff f876 	bl	2aaec <line_dbl>
   2ba00:	2302      	movs	r3, #2
   2ba02:	462a      	mov	r2, r5
   2ba04:	4669      	mov	r1, sp
   2ba06:	f504 7090 	add.w	r0, r4, #288	; 0x120
   2ba0a:	f7ff ffc3 	bl	2b994 <pre_add_n_dbl>
   2ba0e:	2303      	movs	r3, #3
   2ba10:	462a      	mov	r2, r5
   2ba12:	4669      	mov	r1, sp
   2ba14:	f504 6090 	add.w	r0, r4, #1152	; 0x480
   2ba18:	f7ff ffbc 	bl	2b994 <pre_add_n_dbl>
   2ba1c:	2309      	movs	r3, #9
   2ba1e:	462a      	mov	r2, r5
   2ba20:	4669      	mov	r1, sp
   2ba22:	f504 6010 	add.w	r0, r4, #2304	; 0x900
   2ba26:	f7ff ffb5 	bl	2b994 <pre_add_n_dbl>
   2ba2a:	2320      	movs	r3, #32
   2ba2c:	462a      	mov	r2, r5
   2ba2e:	4669      	mov	r1, sp
   2ba30:	f504 50a2 	add.w	r0, r4, #5184	; 0x1440
   2ba34:	f7ff ffae 	bl	2b994 <pre_add_n_dbl>
   2ba38:	2310      	movs	r3, #16
   2ba3a:	462a      	mov	r2, r5
   2ba3c:	4669      	mov	r1, sp
   2ba3e:	f504 5065 	add.w	r0, r4, #14656	; 0x3940
   2ba42:	3020      	adds	r0, #32
   2ba44:	f7ff ffa6 	bl	2b994 <pre_add_n_dbl>
   2ba48:	b049      	add	sp, #292	; 0x124
   2ba4a:	bd30      	pop	{r4, r5, pc}
   2ba4c:	00038688 	.word	0x00038688

0002ba50 <blst_precompute_lines>:
   2ba50:	b508      	push	{r3, lr}
   2ba52:	f7ff ffb6 	bl	2b9c2 <precompute_lines>
   2ba56:	bd08      	pop	{r3, pc}

0002ba58 <POINTonE2_dadd_affine>:
   2ba58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ba5c:	f5ad 7d5f 	sub.w	sp, sp, #892	; 0x37c
   2ba60:	9005      	str	r0, [sp, #20]
   2ba62:	460c      	mov	r4, r1
   2ba64:	4616      	mov	r6, r2
   2ba66:	1f17      	subs	r7, r2, #4
   2ba68:	f102 00bc 	add.w	r0, r2, #188	; 0xbc
   2ba6c:	463b      	mov	r3, r7
   2ba6e:	2200      	movs	r2, #0
   2ba70:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2ba74:	430a      	orrs	r2, r1
   2ba76:	4283      	cmp	r3, r0
   2ba78:	d1fa      	bne.n	2ba70 <POINTonE2_dadd_affine+0x18>
   2ba7a:	1e53      	subs	r3, r2, #1
   2ba7c:	ea23 0202 	bic.w	r2, r3, r2
   2ba80:	0fd3      	lsrs	r3, r2, #31
   2ba82:	9304      	str	r3, [sp, #16]
   2ba84:	4dc1      	ldr	r5, [pc, #772]	; (2bd8c <POINTonE2_dadd_affine+0x334>)
   2ba86:	f04f 090c 	mov.w	r9, #12
   2ba8a:	f8cd 9000 	str.w	r9, [sp]
   2ba8e:	462b      	mov	r3, r5
   2ba90:	4632      	mov	r2, r6
   2ba92:	4631      	mov	r1, r6
   2ba94:	a836      	add	r0, sp, #216	; 0xd8
   2ba96:	f7f5 f943 	bl	20d20 <add_mod_n>
   2ba9a:	f106 0130 	add.w	r1, r6, #48	; 0x30
   2ba9e:	f8cd 9000 	str.w	r9, [sp]
   2baa2:	462b      	mov	r3, r5
   2baa4:	460a      	mov	r2, r1
   2baa6:	a842      	add	r0, sp, #264	; 0x108
   2baa8:	f7f5 f93a 	bl	20d20 <add_mod_n>
   2baac:	4bb8      	ldr	r3, [pc, #736]	; (2bd90 <POINTonE2_dadd_affine+0x338>)
   2baae:	462a      	mov	r2, r5
   2bab0:	4631      	mov	r1, r6
   2bab2:	a81e      	add	r0, sp, #120	; 0x78
   2bab4:	f7fb fedc 	bl	27870 <sqr_mont_384x>
   2bab8:	464b      	mov	r3, r9
   2baba:	462a      	mov	r2, r5
   2babc:	a91e      	add	r1, sp, #120	; 0x78
   2babe:	4608      	mov	r0, r1
   2bac0:	f7f5 f9b6 	bl	20e30 <mul_by_3_mod_n>
   2bac4:	464b      	mov	r3, r9
   2bac6:	462a      	mov	r2, r5
   2bac8:	a92a      	add	r1, sp, #168	; 0xa8
   2baca:	4608      	mov	r0, r1
   2bacc:	f7f5 f9b0 	bl	20e30 <mul_by_3_mod_n>
   2bad0:	f106 0860 	add.w	r8, r6, #96	; 0x60
   2bad4:	f8cd 9000 	str.w	r9, [sp]
   2bad8:	462b      	mov	r3, r5
   2bada:	4642      	mov	r2, r8
   2badc:	4641      	mov	r1, r8
   2bade:	a806      	add	r0, sp, #24
   2bae0:	f7f5 f91e 	bl	20d20 <add_mod_n>
   2bae4:	f106 0190 	add.w	r1, r6, #144	; 0x90
   2bae8:	f8cd 9000 	str.w	r9, [sp]
   2baec:	462b      	mov	r3, r5
   2baee:	460a      	mov	r2, r1
   2baf0:	a812      	add	r0, sp, #72	; 0x48
   2baf2:	f7f5 f915 	bl	20d20 <add_mod_n>
   2baf6:	f104 0ac0 	add.w	sl, r4, #192	; 0xc0
   2bafa:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
   2bafe:	f504 708e 	add.w	r0, r4, #284	; 0x11c
   2bb02:	2200      	movs	r2, #0
   2bb04:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2bb08:	430a      	orrs	r2, r1
   2bb0a:	4283      	cmp	r3, r0
   2bb0c:	d1fa      	bne.n	2bb04 <POINTonE2_dadd_affine+0xac>
   2bb0e:	1e53      	subs	r3, r2, #1
   2bb10:	ea23 0202 	bic.w	r2, r3, r2
   2bb14:	0fd3      	lsrs	r3, r2, #31
   2bb16:	9303      	str	r3, [sp, #12]
   2bb18:	f8df 9274 	ldr.w	r9, [pc, #628]	; 2bd90 <POINTonE2_dadd_affine+0x338>
   2bb1c:	4d9b      	ldr	r5, [pc, #620]	; (2bd8c <POINTonE2_dadd_affine+0x334>)
   2bb1e:	464b      	mov	r3, r9
   2bb20:	462a      	mov	r2, r5
   2bb22:	4651      	mov	r1, sl
   2bb24:	a84e      	add	r0, sp, #312	; 0x138
   2bb26:	f7fb fea3 	bl	27870 <sqr_mont_384x>
   2bb2a:	f8cd 9000 	str.w	r9, [sp]
   2bb2e:	462b      	mov	r3, r5
   2bb30:	4652      	mov	r2, sl
   2bb32:	a94e      	add	r1, sp, #312	; 0x138
   2bb34:	a866      	add	r0, sp, #408	; 0x198
   2bb36:	f7f8 fc0d 	bl	24354 <mul_mont_384x>
   2bb3a:	f8cd 9000 	str.w	r9, [sp]
   2bb3e:	462b      	mov	r3, r5
   2bb40:	4642      	mov	r2, r8
   2bb42:	a966      	add	r1, sp, #408	; 0x198
   2bb44:	4608      	mov	r0, r1
   2bb46:	f7f8 fc05 	bl	24354 <mul_mont_384x>
   2bb4a:	f04f 080c 	mov.w	r8, #12
   2bb4e:	f8cd 8000 	str.w	r8, [sp]
   2bb52:	462b      	mov	r3, r5
   2bb54:	f104 0260 	add.w	r2, r4, #96	; 0x60
   2bb58:	a966      	add	r1, sp, #408	; 0x198
   2bb5a:	4608      	mov	r0, r1
   2bb5c:	f7f4 fd8a 	bl	20674 <sub_mod_n>
   2bb60:	f8cd 8000 	str.w	r8, [sp]
   2bb64:	462b      	mov	r3, r5
   2bb66:	f104 0290 	add.w	r2, r4, #144	; 0x90
   2bb6a:	a972      	add	r1, sp, #456	; 0x1c8
   2bb6c:	4608      	mov	r0, r1
   2bb6e:	f7f4 fd81 	bl	20674 <sub_mod_n>
   2bb72:	f8cd 9000 	str.w	r9, [sp]
   2bb76:	462b      	mov	r3, r5
   2bb78:	4632      	mov	r2, r6
   2bb7a:	a94e      	add	r1, sp, #312	; 0x138
   2bb7c:	4608      	mov	r0, r1
   2bb7e:	f7f8 fbe9 	bl	24354 <mul_mont_384x>
   2bb82:	f8cd 8000 	str.w	r8, [sp]
   2bb86:	462b      	mov	r3, r5
   2bb88:	4622      	mov	r2, r4
   2bb8a:	a94e      	add	r1, sp, #312	; 0x138
   2bb8c:	a87e      	add	r0, sp, #504	; 0x1f8
   2bb8e:	f7f5 f8c7 	bl	20d20 <add_mod_n>
   2bb92:	f104 0630 	add.w	r6, r4, #48	; 0x30
   2bb96:	f8cd 8000 	str.w	r8, [sp]
   2bb9a:	462b      	mov	r3, r5
   2bb9c:	4632      	mov	r2, r6
   2bb9e:	a95a      	add	r1, sp, #360	; 0x168
   2bba0:	a88a      	add	r0, sp, #552	; 0x228
   2bba2:	f7f5 f8bd 	bl	20d20 <add_mod_n>
   2bba6:	f8cd 8000 	str.w	r8, [sp]
   2bbaa:	462b      	mov	r3, r5
   2bbac:	4622      	mov	r2, r4
   2bbae:	a94e      	add	r1, sp, #312	; 0x138
   2bbb0:	4608      	mov	r0, r1
   2bbb2:	f7f4 fd5f 	bl	20674 <sub_mod_n>
   2bbb6:	f8cd 8000 	str.w	r8, [sp]
   2bbba:	462b      	mov	r3, r5
   2bbbc:	4632      	mov	r2, r6
   2bbbe:	a95a      	add	r1, sp, #360	; 0x168
   2bbc0:	4608      	mov	r0, r1
   2bbc2:	f7f4 fd57 	bl	20674 <sub_mod_n>
   2bbc6:	f8cd 9000 	str.w	r9, [sp]
   2bbca:	462b      	mov	r3, r5
   2bbcc:	4652      	mov	r2, sl
   2bbce:	a94e      	add	r1, sp, #312	; 0x138
   2bbd0:	a8c6      	add	r0, sp, #792	; 0x318
   2bbd2:	f7f8 fbbf 	bl	24354 <mul_mont_384x>
   2bbd6:	f50d 7c9a 	add.w	ip, sp, #308	; 0x134
   2bbda:	a87d      	add	r0, sp, #500	; 0x1f4
   2bbdc:	4663      	mov	r3, ip
   2bbde:	2200      	movs	r2, #0
   2bbe0:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2bbe4:	430a      	orrs	r2, r1
   2bbe6:	4283      	cmp	r3, r0
   2bbe8:	d1fa      	bne.n	2bbe0 <POINTonE2_dadd_affine+0x188>
   2bbea:	1e50      	subs	r0, r2, #1
   2bbec:	ea20 0002 	bic.w	r0, r0, r2
   2bbf0:	17c0      	asrs	r0, r0, #31
   2bbf2:	3c04      	subs	r4, #4
   2bbf4:	ad96      	add	r5, sp, #600	; 0x258
   2bbf6:	f50d 7846 	add.w	r8, sp, #792	; 0x318
   2bbfa:	462a      	mov	r2, r5
   2bbfc:	4626      	mov	r6, r4
   2bbfe:	46be      	mov	lr, r7
   2bc00:	f856 1f04 	ldr.w	r1, [r6, #4]!
   2bc04:	f85e 3f04 	ldr.w	r3, [lr, #4]!
   2bc08:	404b      	eors	r3, r1
   2bc0a:	4003      	ands	r3, r0
   2bc0c:	404b      	eors	r3, r1
   2bc0e:	f842 3b04 	str.w	r3, [r2], #4
   2bc12:	4542      	cmp	r2, r8
   2bc14:	d1f4      	bne.n	2bc00 <POINTonE2_dadd_affine+0x1a8>
   2bc16:	aa05      	add	r2, sp, #20
   2bc18:	aec5      	add	r6, sp, #788	; 0x314
   2bc1a:	f10d 0a74 	add.w	sl, sp, #116	; 0x74
   2bc1e:	46b6      	mov	lr, r6
   2bc20:	4611      	mov	r1, r2
   2bc22:	f85e 9f04 	ldr.w	r9, [lr, #4]!
   2bc26:	f851 3f04 	ldr.w	r3, [r1, #4]!
   2bc2a:	ea89 0303 	eor.w	r3, r9, r3
   2bc2e:	4003      	ands	r3, r0
   2bc30:	ea83 0309 	eor.w	r3, r3, r9
   2bc34:	f8ce 3000 	str.w	r3, [lr]
   2bc38:	4551      	cmp	r1, sl
   2bc3a:	d1f2      	bne.n	2bc22 <POINTonE2_dadd_affine+0x1ca>
   2bc3c:	a94d      	add	r1, sp, #308	; 0x134
   2bc3e:	468e      	mov	lr, r1
   2bc40:	f85c 1f04 	ldr.w	r1, [ip, #4]!
   2bc44:	f852 3f04 	ldr.w	r3, [r2, #4]!
   2bc48:	404b      	eors	r3, r1
   2bc4a:	4003      	ands	r3, r0
   2bc4c:	404b      	eors	r3, r1
   2bc4e:	f8cc 3000 	str.w	r3, [ip]
   2bc52:	4572      	cmp	r2, lr
   2bc54:	d1f4      	bne.n	2bc40 <POINTonE2_dadd_affine+0x1e8>
   2bc56:	f8df a138 	ldr.w	sl, [pc, #312]	; 2bd90 <POINTonE2_dadd_affine+0x338>
   2bc5a:	f8df 9130 	ldr.w	r9, [pc, #304]	; 2bd8c <POINTonE2_dadd_affine+0x334>
   2bc5e:	4653      	mov	r3, sl
   2bc60:	464a      	mov	r2, r9
   2bc62:	a94e      	add	r1, sp, #312	; 0x138
   2bc64:	a806      	add	r0, sp, #24
   2bc66:	f7fb fe03 	bl	27870 <sqr_mont_384x>
   2bc6a:	f8cd a000 	str.w	sl, [sp]
   2bc6e:	464b      	mov	r3, r9
   2bc70:	aa4e      	add	r2, sp, #312	; 0x138
   2bc72:	a906      	add	r1, sp, #24
   2bc74:	a81e      	add	r0, sp, #120	; 0x78
   2bc76:	f7f8 fb6d 	bl	24354 <mul_mont_384x>
   2bc7a:	f8cd a000 	str.w	sl, [sp]
   2bc7e:	464b      	mov	r3, r9
   2bc80:	aaae      	add	r2, sp, #696	; 0x2b8
   2bc82:	a91e      	add	r1, sp, #120	; 0x78
   2bc84:	4608      	mov	r0, r1
   2bc86:	f7f8 fb65 	bl	24354 <mul_mont_384x>
   2bc8a:	f8cd a000 	str.w	sl, [sp]
   2bc8e:	464b      	mov	r3, r9
   2bc90:	aa96      	add	r2, sp, #600	; 0x258
   2bc92:	a906      	add	r1, sp, #24
   2bc94:	a8ae      	add	r0, sp, #696	; 0x2b8
   2bc96:	f7f8 fb5d 	bl	24354 <mul_mont_384x>
   2bc9a:	f8cd a000 	str.w	sl, [sp]
   2bc9e:	464b      	mov	r3, r9
   2bca0:	aa7e      	add	r2, sp, #504	; 0x1f8
   2bca2:	a906      	add	r1, sp, #24
   2bca4:	4608      	mov	r0, r1
   2bca6:	f7f8 fb55 	bl	24354 <mul_mont_384x>
   2bcaa:	4653      	mov	r3, sl
   2bcac:	464a      	mov	r2, r9
   2bcae:	a966      	add	r1, sp, #408	; 0x198
   2bcb0:	a896      	add	r0, sp, #600	; 0x258
   2bcb2:	f7fb fddd 	bl	27870 <sqr_mont_384x>
   2bcb6:	f04f 0b0c 	mov.w	fp, #12
   2bcba:	f8cd b000 	str.w	fp, [sp]
   2bcbe:	464b      	mov	r3, r9
   2bcc0:	aa06      	add	r2, sp, #24
   2bcc2:	a996      	add	r1, sp, #600	; 0x258
   2bcc4:	4608      	mov	r0, r1
   2bcc6:	f7f4 fcd5 	bl	20674 <sub_mod_n>
   2bcca:	f8cd b000 	str.w	fp, [sp]
   2bcce:	464b      	mov	r3, r9
   2bcd0:	aa12      	add	r2, sp, #72	; 0x48
   2bcd2:	a9a2      	add	r1, sp, #648	; 0x288
   2bcd4:	4608      	mov	r0, r1
   2bcd6:	f7f4 fccd 	bl	20674 <sub_mod_n>
   2bcda:	f8cd b000 	str.w	fp, [sp]
   2bcde:	464b      	mov	r3, r9
   2bce0:	aa96      	add	r2, sp, #600	; 0x258
   2bce2:	a9ae      	add	r1, sp, #696	; 0x2b8
   2bce4:	4608      	mov	r0, r1
   2bce6:	f7f4 fcc5 	bl	20674 <sub_mod_n>
   2bcea:	f8cd b000 	str.w	fp, [sp]
   2bcee:	464b      	mov	r3, r9
   2bcf0:	aaa2      	add	r2, sp, #648	; 0x288
   2bcf2:	a9ba      	add	r1, sp, #744	; 0x2e8
   2bcf4:	4608      	mov	r0, r1
   2bcf6:	f7f4 fcbd 	bl	20674 <sub_mod_n>
   2bcfa:	f8cd a000 	str.w	sl, [sp]
   2bcfe:	464b      	mov	r3, r9
   2bd00:	aa66      	add	r2, sp, #408	; 0x198
   2bd02:	a9ae      	add	r1, sp, #696	; 0x2b8
   2bd04:	4608      	mov	r0, r1
   2bd06:	f7f8 fb25 	bl	24354 <mul_mont_384x>
   2bd0a:	f8cd b000 	str.w	fp, [sp]
   2bd0e:	464b      	mov	r3, r9
   2bd10:	aa1e      	add	r2, sp, #120	; 0x78
   2bd12:	a9ae      	add	r1, sp, #696	; 0x2b8
   2bd14:	4608      	mov	r0, r1
   2bd16:	f7f4 fcad 	bl	20674 <sub_mod_n>
   2bd1a:	f8cd b000 	str.w	fp, [sp]
   2bd1e:	464b      	mov	r3, r9
   2bd20:	aa2a      	add	r2, sp, #168	; 0xa8
   2bd22:	a9ba      	add	r1, sp, #744	; 0x2e8
   2bd24:	4608      	mov	r0, r1
   2bd26:	f7f4 fca5 	bl	20674 <sub_mod_n>
   2bd2a:	9b03      	ldr	r3, [sp, #12]
   2bd2c:	425a      	negs	r2, r3
   2bd2e:	4629      	mov	r1, r5
   2bd30:	6808      	ldr	r0, [r1, #0]
   2bd32:	f857 3f04 	ldr.w	r3, [r7, #4]!
   2bd36:	4043      	eors	r3, r0
   2bd38:	4013      	ands	r3, r2
   2bd3a:	4043      	eors	r3, r0
   2bd3c:	f841 3b04 	str.w	r3, [r1], #4
   2bd40:	4541      	cmp	r1, r8
   2bd42:	d1f5      	bne.n	2bd30 <POINTonE2_dadd_affine+0x2d8>
   2bd44:	4f11      	ldr	r7, [pc, #68]	; (2bd8c <POINTonE2_dadd_affine+0x334>)
   2bd46:	f107 018c 	add.w	r1, r7, #140	; 0x8c
   2bd4a:	37ec      	adds	r7, #236	; 0xec
   2bd4c:	f856 0f04 	ldr.w	r0, [r6, #4]!
   2bd50:	f851 3f04 	ldr.w	r3, [r1, #4]!
   2bd54:	4043      	eors	r3, r0
   2bd56:	4013      	ands	r3, r2
   2bd58:	4043      	eors	r3, r0
   2bd5a:	6033      	str	r3, [r6, #0]
   2bd5c:	42b9      	cmp	r1, r7
   2bd5e:	d1f5      	bne.n	2bd4c <POINTonE2_dadd_affine+0x2f4>
   2bd60:	9b04      	ldr	r3, [sp, #16]
   2bd62:	4259      	negs	r1, r3
   2bd64:	9b05      	ldr	r3, [sp, #20]
   2bd66:	1f18      	subs	r0, r3, #4
   2bd68:	f505 7690 	add.w	r6, r5, #288	; 0x120
   2bd6c:	f855 2b04 	ldr.w	r2, [r5], #4
   2bd70:	f854 3f04 	ldr.w	r3, [r4, #4]!
   2bd74:	4053      	eors	r3, r2
   2bd76:	400b      	ands	r3, r1
   2bd78:	4053      	eors	r3, r2
   2bd7a:	f840 3f04 	str.w	r3, [r0, #4]!
   2bd7e:	42b5      	cmp	r5, r6
   2bd80:	d1f4      	bne.n	2bd6c <POINTonE2_dadd_affine+0x314>
   2bd82:	f50d 7d5f 	add.w	sp, sp, #892	; 0x37c
   2bd86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bd8a:	bf00      	nop
   2bd8c:	00038688 	.word	0x00038688
   2bd90:	fffcfffd 	.word	0xfffcfffd

0002bd94 <PAIRING_Aggregate_PK_in_G1>:
   2bd94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bd98:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
   2bd9c:	4698      	mov	r8, r3
   2bd9e:	6803      	ldr	r3, [r0, #0]
   2bda0:	f013 0501 	ands.w	r5, r3, #1
   2bda4:	f040 818b 	bne.w	2c0be <PAIRING_Aggregate_PK_in_G1+0x32a>
   2bda8:	4607      	mov	r7, r0
   2bdaa:	460e      	mov	r6, r1
   2bdac:	4691      	mov	r9, r2
   2bdae:	f043 0302 	orr.w	r3, r3, #2
   2bdb2:	6003      	str	r3, [r0, #0]
   2bdb4:	f1b8 0f00 	cmp.w	r8, #0
   2bdb8:	d07d      	beq.n	2beb6 <PAIRING_Aggregate_PK_in_G1+0x122>
   2bdba:	f1a8 0204 	sub.w	r2, r8, #4
   2bdbe:	f108 04bc 	add.w	r4, r8, #188	; 0xbc
   2bdc2:	4613      	mov	r3, r2
   2bdc4:	4629      	mov	r1, r5
   2bdc6:	f853 0f04 	ldr.w	r0, [r3, #4]!
   2bdca:	4301      	orrs	r1, r0
   2bdcc:	42a3      	cmp	r3, r4
   2bdce:	d1fa      	bne.n	2bdc6 <PAIRING_Aggregate_PK_in_G1+0x32>
   2bdd0:	1e48      	subs	r0, r1, #1
   2bdd2:	ea20 0101 	bic.w	r1, r0, r1
   2bdd6:	0fc9      	lsrs	r1, r1, #31
   2bdd8:	d16d      	bne.n	2beb6 <PAIRING_Aggregate_PK_in_G1+0x122>
   2bdda:	f507 7a14 	add.w	sl, r7, #592	; 0x250
   2bdde:	f50d 7e20 	add.w	lr, sp, #640	; 0x280
   2bde2:	ab70      	add	r3, sp, #448	; 0x1c0
   2bde4:	4610      	mov	r0, r2
   2bde6:	f850 cf04 	ldr.w	ip, [r0, #4]!
   2bdea:	f843 cb04 	str.w	ip, [r3], #4
   2bdee:	4573      	cmp	r3, lr
   2bdf0:	d1f9      	bne.n	2bde6 <PAIRING_Aggregate_PK_in_G1+0x52>
   2bdf2:	4613      	mov	r3, r2
   2bdf4:	f853 0f04 	ldr.w	r0, [r3, #4]!
   2bdf8:	4301      	orrs	r1, r0
   2bdfa:	42a3      	cmp	r3, r4
   2bdfc:	d1fa      	bne.n	2bdf4 <PAIRING_Aggregate_PK_in_G1+0x60>
   2bdfe:	1e48      	subs	r0, r1, #1
   2be00:	ea20 0101 	bic.w	r1, r0, r1
   2be04:	17c8      	asrs	r0, r1, #31
   2be06:	4cb0      	ldr	r4, [pc, #704]	; (2c0c8 <PAIRING_Aggregate_PK_in_G1+0x334>)
   2be08:	f104 0390 	add.w	r3, r4, #144	; 0x90
   2be0c:	a99f      	add	r1, sp, #636	; 0x27c
   2be0e:	f104 0cf0 	add.w	ip, r4, #240	; 0xf0
   2be12:	f853 eb04 	ldr.w	lr, [r3], #4
   2be16:	f852 4f04 	ldr.w	r4, [r2, #4]!
   2be1a:	ea8e 0404 	eor.w	r4, lr, r4
   2be1e:	4004      	ands	r4, r0
   2be20:	ea84 040e 	eor.w	r4, r4, lr
   2be24:	f841 4f04 	str.w	r4, [r1, #4]!
   2be28:	4563      	cmp	r3, ip
   2be2a:	d1f2      	bne.n	2be12 <PAIRING_Aggregate_PK_in_G1+0x7e>
   2be2c:	f8dd 3428 	ldr.w	r3, [sp, #1064]	; 0x428
   2be30:	b9c3      	cbnz	r3, 2be64 <PAIRING_Aggregate_PK_in_G1+0xd0>
   2be32:	683b      	ldr	r3, [r7, #0]
   2be34:	f013 0f10 	tst.w	r3, #16
   2be38:	d021      	beq.n	2be7e <PAIRING_Aggregate_PK_in_G1+0xea>
   2be3a:	f8dd 3430 	ldr.w	r3, [sp, #1072]	; 0x430
   2be3e:	b1c3      	cbz	r3, 2be72 <PAIRING_Aggregate_PK_in_G1+0xde>
   2be40:	f8dd 342c 	ldr.w	r3, [sp, #1068]	; 0x42c
   2be44:	b1ab      	cbz	r3, 2be72 <PAIRING_Aggregate_PK_in_G1+0xde>
   2be46:	f8dd 3430 	ldr.w	r3, [sp, #1072]	; 0x430
   2be4a:	f8dd 242c 	ldr.w	r2, [sp, #1068]	; 0x42c
   2be4e:	a970      	add	r1, sp, #448	; 0x1c0
   2be50:	4608      	mov	r0, r1
   2be52:	f7fd f9a5 	bl	291a0 <POINTonE2_mult_w5>
   2be56:	2300      	movs	r3, #0
   2be58:	aa70      	add	r2, sp, #448	; 0x1c0
   2be5a:	4651      	mov	r1, sl
   2be5c:	4650      	mov	r0, sl
   2be5e:	f7fc fe4d 	bl	28afc <POINTonE2_dadd>
   2be62:	e028      	b.n	2beb6 <PAIRING_Aggregate_PK_in_G1+0x122>
   2be64:	a870      	add	r0, sp, #448	; 0x1c0
   2be66:	f7fd fab3 	bl	293d0 <POINTonE2_in_G2>
   2be6a:	2800      	cmp	r0, #0
   2be6c:	d1e1      	bne.n	2be32 <PAIRING_Aggregate_PK_in_G1+0x9e>
   2be6e:	2003      	movs	r0, #3
   2be70:	e0e9      	b.n	2c046 <PAIRING_Aggregate_PK_in_G1+0x2b2>
   2be72:	4642      	mov	r2, r8
   2be74:	4651      	mov	r1, sl
   2be76:	4650      	mov	r0, sl
   2be78:	f7ff fdee 	bl	2ba58 <POINTonE2_dadd_affine>
   2be7c:	e01b      	b.n	2beb6 <PAIRING_Aggregate_PK_in_G1+0x122>
   2be7e:	f043 0310 	orr.w	r3, r3, #16
   2be82:	603b      	str	r3, [r7, #0]
   2be84:	f8dd 3430 	ldr.w	r3, [sp, #1072]	; 0x430
   2be88:	b15b      	cbz	r3, 2bea2 <PAIRING_Aggregate_PK_in_G1+0x10e>
   2be8a:	f8dd 342c 	ldr.w	r3, [sp, #1068]	; 0x42c
   2be8e:	b143      	cbz	r3, 2bea2 <PAIRING_Aggregate_PK_in_G1+0x10e>
   2be90:	f8dd 3430 	ldr.w	r3, [sp, #1072]	; 0x430
   2be94:	f8dd 242c 	ldr.w	r2, [sp, #1068]	; 0x42c
   2be98:	a970      	add	r1, sp, #448	; 0x1c0
   2be9a:	4650      	mov	r0, sl
   2be9c:	f7fd f980 	bl	291a0 <POINTonE2_mult_w5>
   2bea0:	e009      	b.n	2beb6 <PAIRING_Aggregate_PK_in_G1+0x122>
   2bea2:	ab6f      	add	r3, sp, #444	; 0x1bc
   2bea4:	f507 7213 	add.w	r2, r7, #588	; 0x24c
   2bea8:	a8b7      	add	r0, sp, #732	; 0x2dc
   2beaa:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2beae:	f842 1f04 	str.w	r1, [r2, #4]!
   2beb2:	4283      	cmp	r3, r0
   2beb4:	d1f9      	bne.n	2beaa <PAIRING_Aggregate_PK_in_G1+0x116>
   2beb6:	2e00      	cmp	r6, #0
   2beb8:	f000 8103 	beq.w	2c0c2 <PAIRING_Aggregate_PK_in_G1+0x32e>
   2bebc:	f8d7 b008 	ldr.w	fp, [r7, #8]
   2bec0:	f1bb 0f2a 	cmp.w	fp, #42	; 0x2a
   2bec4:	bf08      	it	eq
   2bec6:	f507 6b47 	addeq.w	fp, r7, #3184	; 0xc70
   2beca:	f1a6 0804 	sub.w	r8, r6, #4
   2bece:	46b2      	mov	sl, r6
   2bed0:	f106 045c 	add.w	r4, r6, #92	; 0x5c
   2bed4:	4643      	mov	r3, r8
   2bed6:	f853 2f04 	ldr.w	r2, [r3, #4]!
   2beda:	4315      	orrs	r5, r2
   2bedc:	42a3      	cmp	r3, r4
   2bede:	d1fa      	bne.n	2bed6 <PAIRING_Aggregate_PK_in_G1+0x142>
   2bee0:	1e6b      	subs	r3, r5, #1
   2bee2:	ea23 0505 	bic.w	r5, r3, r5
   2bee6:	0fed      	lsrs	r5, r5, #31
   2bee8:	f040 80e7 	bne.w	2c0ba <PAIRING_Aggregate_PK_in_G1+0x326>
   2beec:	f1b9 0f00 	cmp.w	r9, #0
   2bef0:	d02d      	beq.n	2bf4e <PAIRING_Aggregate_PK_in_G1+0x1ba>
   2bef2:	ab70      	add	r3, sp, #448	; 0x1c0
   2bef4:	a888      	add	r0, sp, #544	; 0x220
   2bef6:	4642      	mov	r2, r8
   2bef8:	f852 1f04 	ldr.w	r1, [r2, #4]!
   2befc:	f843 1b04 	str.w	r1, [r3], #4
   2bf00:	4283      	cmp	r3, r0
   2bf02:	d1f9      	bne.n	2bef8 <PAIRING_Aggregate_PK_in_G1+0x164>
   2bf04:	4643      	mov	r3, r8
   2bf06:	462a      	mov	r2, r5
   2bf08:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2bf0c:	430a      	orrs	r2, r1
   2bf0e:	42a3      	cmp	r3, r4
   2bf10:	d1fa      	bne.n	2bf08 <PAIRING_Aggregate_PK_in_G1+0x174>
   2bf12:	f102 3cff 	add.w	ip, r2, #4294967295
   2bf16:	ea2c 0c02 	bic.w	ip, ip, r2
   2bf1a:	ea4f 7cec 	mov.w	ip, ip, asr #31
   2bf1e:	486b      	ldr	r0, [pc, #428]	; (2c0cc <PAIRING_Aggregate_PK_in_G1+0x338>)
   2bf20:	a987      	add	r1, sp, #540	; 0x21c
   2bf22:	f10a 0e2c 	add.w	lr, sl, #44	; 0x2c
   2bf26:	4642      	mov	r2, r8
   2bf28:	f850 9b04 	ldr.w	r9, [r0], #4
   2bf2c:	f852 3f04 	ldr.w	r3, [r2, #4]!
   2bf30:	ea89 0303 	eor.w	r3, r9, r3
   2bf34:	ea03 030c 	and.w	r3, r3, ip
   2bf38:	ea83 0309 	eor.w	r3, r3, r9
   2bf3c:	f841 3f04 	str.w	r3, [r1, #4]!
   2bf40:	4572      	cmp	r2, lr
   2bf42:	d1f1      	bne.n	2bf28 <PAIRING_Aggregate_PK_in_G1+0x194>
   2bf44:	a870      	add	r0, sp, #448	; 0x1c0
   2bf46:	f7f7 fb71 	bl	2362c <POINTonE1_in_G1>
   2bf4a:	2800      	cmp	r0, #0
   2bf4c:	d07f      	beq.n	2c04e <PAIRING_Aggregate_PK_in_G1+0x2ba>
   2bf4e:	683b      	ldr	r3, [r7, #0]
   2bf50:	f013 0f40 	tst.w	r3, #64	; 0x40
   2bf54:	d07d      	beq.n	2c052 <PAIRING_Aggregate_PK_in_G1+0x2be>
   2bf56:	68fb      	ldr	r3, [r7, #12]
   2bf58:	9303      	str	r3, [sp, #12]
   2bf5a:	f8cd b008 	str.w	fp, [sp, #8]
   2bf5e:	f8dd 3438 	ldr.w	r3, [sp, #1080]	; 0x438
   2bf62:	9301      	str	r3, [sp, #4]
   2bf64:	f8dd 3434 	ldr.w	r3, [sp, #1076]	; 0x434
   2bf68:	9300      	str	r3, [sp, #0]
   2bf6a:	f8dd 3440 	ldr.w	r3, [sp, #1088]	; 0x440
   2bf6e:	f8dd 243c 	ldr.w	r2, [sp, #1084]	; 0x43c
   2bf72:	2104      	movs	r1, #4
   2bf74:	a870      	add	r0, sp, #448	; 0x1c0
   2bf76:	f7fb f842 	bl	26ffe <hash_to_field>
   2bf7a:	aa88      	add	r2, sp, #544	; 0x220
   2bf7c:	a970      	add	r1, sp, #448	; 0x1c0
   2bf7e:	a828      	add	r0, sp, #160	; 0xa0
   2bf80:	f7fd fee8 	bl	29d54 <map_to_g2>
   2bf84:	a928      	add	r1, sp, #160	; 0xa0
   2bf86:	4608      	mov	r0, r1
   2bf88:	f7fb fca7 	bl	278da <POINTonE2_from_Jacobian>
   2bf8c:	f8dd 3430 	ldr.w	r3, [sp, #1072]	; 0x430
   2bf90:	b393      	cbz	r3, 2bff8 <PAIRING_Aggregate_PK_in_G1+0x264>
   2bf92:	f8dd 342c 	ldr.w	r3, [sp, #1068]	; 0x42c
   2bf96:	b37b      	cbz	r3, 2bff8 <PAIRING_Aggregate_PK_in_G1+0x264>
   2bf98:	ab04      	add	r3, sp, #16
   2bf9a:	a81c      	add	r0, sp, #112	; 0x70
   2bf9c:	4642      	mov	r2, r8
   2bf9e:	f852 1f04 	ldr.w	r1, [r2, #4]!
   2bfa2:	f843 1b04 	str.w	r1, [r3], #4
   2bfa6:	4283      	cmp	r3, r0
   2bfa8:	d1f9      	bne.n	2bf9e <PAIRING_Aggregate_PK_in_G1+0x20a>
   2bfaa:	4643      	mov	r3, r8
   2bfac:	462a      	mov	r2, r5
   2bfae:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2bfb2:	430a      	orrs	r2, r1
   2bfb4:	42a3      	cmp	r3, r4
   2bfb6:	d1fa      	bne.n	2bfae <PAIRING_Aggregate_PK_in_G1+0x21a>
   2bfb8:	1e54      	subs	r4, r2, #1
   2bfba:	ea24 0202 	bic.w	r2, r4, r2
   2bfbe:	17d4      	asrs	r4, r2, #31
   2bfc0:	4842      	ldr	r0, [pc, #264]	; (2c0cc <PAIRING_Aggregate_PK_in_G1+0x338>)
   2bfc2:	a91b      	add	r1, sp, #108	; 0x6c
   2bfc4:	f10a 0a2c 	add.w	sl, sl, #44	; 0x2c
   2bfc8:	f850 2b04 	ldr.w	r2, [r0], #4
   2bfcc:	f858 3f04 	ldr.w	r3, [r8, #4]!
   2bfd0:	4053      	eors	r3, r2
   2bfd2:	4023      	ands	r3, r4
   2bfd4:	4053      	eors	r3, r2
   2bfd6:	f841 3f04 	str.w	r3, [r1, #4]!
   2bfda:	45d0      	cmp	r8, sl
   2bfdc:	d1f4      	bne.n	2bfc8 <PAIRING_Aggregate_PK_in_G1+0x234>
   2bfde:	f8dd 3430 	ldr.w	r3, [sp, #1072]	; 0x430
   2bfe2:	f8dd 242c 	ldr.w	r2, [sp, #1068]	; 0x42c
   2bfe6:	a904      	add	r1, sp, #16
   2bfe8:	4608      	mov	r0, r1
   2bfea:	f7f7 fa76 	bl	234da <POINTonE1_mult_w5>
   2bfee:	a904      	add	r1, sp, #16
   2bff0:	4608      	mov	r0, r1
   2bff2:	f7f9 fbcb 	bl	2578c <POINTonE1_from_Jacobian>
   2bff6:	ae04      	add	r6, sp, #16
   2bff8:	687c      	ldr	r4, [r7, #4]
   2bffa:	f507 715c 	add.w	r1, r7, #880	; 0x370
   2bffe:	ab27      	add	r3, sp, #156	; 0x9c
   2c000:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   2c004:	eb07 1282 	add.w	r2, r7, r2, lsl #6
   2c008:	f502 725b 	add.w	r2, r2, #876	; 0x36c
   2c00c:	f50d 7cae 	add.w	ip, sp, #348	; 0x15c
   2c010:	f853 0f04 	ldr.w	r0, [r3, #4]!
   2c014:	f842 0f04 	str.w	r0, [r2, #4]!
   2c018:	4563      	cmp	r3, ip
   2c01a:	d1f9      	bne.n	2c010 <PAIRING_Aggregate_PK_in_G1+0x27c>
   2c01c:	f507 6c17 	add.w	ip, r7, #2416	; 0x970
   2c020:	1f33      	subs	r3, r6, #4
   2c022:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   2c026:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   2c02a:	f600 106c 	addw	r0, r0, #2412	; 0x96c
   2c02e:	365c      	adds	r6, #92	; 0x5c
   2c030:	f853 2f04 	ldr.w	r2, [r3, #4]!
   2c034:	f840 2f04 	str.w	r2, [r0, #4]!
   2c038:	42b3      	cmp	r3, r6
   2c03a:	d1f9      	bne.n	2c030 <PAIRING_Aggregate_PK_in_G1+0x29c>
   2c03c:	1c66      	adds	r6, r4, #1
   2c03e:	2c07      	cmp	r4, #7
   2c040:	d01f      	beq.n	2c082 <PAIRING_Aggregate_PK_in_G1+0x2ee>
   2c042:	607e      	str	r6, [r7, #4]
   2c044:	2000      	movs	r0, #0
   2c046:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
   2c04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c04e:	2003      	movs	r0, #3
   2c050:	e7f9      	b.n	2c046 <PAIRING_Aggregate_PK_in_G1+0x2b2>
   2c052:	68fb      	ldr	r3, [r7, #12]
   2c054:	9303      	str	r3, [sp, #12]
   2c056:	f8cd b008 	str.w	fp, [sp, #8]
   2c05a:	f8dd 3438 	ldr.w	r3, [sp, #1080]	; 0x438
   2c05e:	9301      	str	r3, [sp, #4]
   2c060:	f8dd 3434 	ldr.w	r3, [sp, #1076]	; 0x434
   2c064:	9300      	str	r3, [sp, #0]
   2c066:	f8dd 3440 	ldr.w	r3, [sp, #1088]	; 0x440
   2c06a:	f8dd 243c 	ldr.w	r2, [sp, #1084]	; 0x43c
   2c06e:	2102      	movs	r1, #2
   2c070:	a870      	add	r0, sp, #448	; 0x1c0
   2c072:	f7fa ffc4 	bl	26ffe <hash_to_field>
   2c076:	2200      	movs	r2, #0
   2c078:	a970      	add	r1, sp, #448	; 0x1c0
   2c07a:	a828      	add	r0, sp, #160	; 0xa0
   2c07c:	f7fd fe6a 	bl	29d54 <map_to_g2>
   2c080:	e780      	b.n	2bf84 <PAIRING_Aggregate_PK_in_G1+0x1f0>
   2c082:	683e      	ldr	r6, [r7, #0]
   2c084:	f016 0620 	ands.w	r6, r6, #32
   2c088:	d00c      	beq.n	2c0a4 <PAIRING_Aggregate_PK_in_G1+0x310>
   2c08a:	2308      	movs	r3, #8
   2c08c:	4662      	mov	r2, ip
   2c08e:	a870      	add	r0, sp, #448	; 0x1c0
   2c090:	f7ff f8e6 	bl	2b260 <miller_loop_n>
   2c094:	f107 0010 	add.w	r0, r7, #16
   2c098:	aa70      	add	r2, sp, #448	; 0x1c0
   2c09a:	4601      	mov	r1, r0
   2c09c:	f7f8 fc6e 	bl	2497c <mul_fp12>
   2c0a0:	462e      	mov	r6, r5
   2c0a2:	e7ce      	b.n	2c042 <PAIRING_Aggregate_PK_in_G1+0x2ae>
   2c0a4:	2308      	movs	r3, #8
   2c0a6:	4662      	mov	r2, ip
   2c0a8:	f107 0010 	add.w	r0, r7, #16
   2c0ac:	f7ff f8d8 	bl	2b260 <miller_loop_n>
   2c0b0:	683b      	ldr	r3, [r7, #0]
   2c0b2:	f043 0320 	orr.w	r3, r3, #32
   2c0b6:	603b      	str	r3, [r7, #0]
   2c0b8:	e7c3      	b.n	2c042 <PAIRING_Aggregate_PK_in_G1+0x2ae>
   2c0ba:	2006      	movs	r0, #6
   2c0bc:	e7c3      	b.n	2c046 <PAIRING_Aggregate_PK_in_G1+0x2b2>
   2c0be:	2004      	movs	r0, #4
   2c0c0:	e7c1      	b.n	2c046 <PAIRING_Aggregate_PK_in_G1+0x2b2>
   2c0c2:	2000      	movs	r0, #0
   2c0c4:	e7bf      	b.n	2c046 <PAIRING_Aggregate_PK_in_G1+0x2b2>
   2c0c6:	bf00      	nop
   2c0c8:	00038688 	.word	0x00038688
   2c0cc:	00038718 	.word	0x00038718

0002c0d0 <blst_pairing_aggregate_pk_in_g1>:
   2c0d0:	b500      	push	{lr}
   2c0d2:	b089      	sub	sp, #36	; 0x24
   2c0d4:	4694      	mov	ip, r2
   2c0d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2c0d8:	9206      	str	r2, [sp, #24]
   2c0da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2c0dc:	9205      	str	r2, [sp, #20]
   2c0de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2c0e0:	9204      	str	r2, [sp, #16]
   2c0e2:	9303      	str	r3, [sp, #12]
   2c0e4:	2200      	movs	r2, #0
   2c0e6:	9202      	str	r2, [sp, #8]
   2c0e8:	9201      	str	r2, [sp, #4]
   2c0ea:	2301      	movs	r3, #1
   2c0ec:	9300      	str	r3, [sp, #0]
   2c0ee:	4663      	mov	r3, ip
   2c0f0:	f7ff fe50 	bl	2bd94 <PAIRING_Aggregate_PK_in_G1>
   2c0f4:	b009      	add	sp, #36	; 0x24
   2c0f6:	f85d fb04 	ldr.w	pc, [sp], #4

0002c0fa <blst_pairing_mul_n_aggregate_pk_in_g1>:
   2c0fa:	b500      	push	{lr}
   2c0fc:	b089      	sub	sp, #36	; 0x24
   2c0fe:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   2c102:	f8cd c018 	str.w	ip, [sp, #24]
   2c106:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
   2c10a:	f8cd c014 	str.w	ip, [sp, #20]
   2c10e:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   2c112:	f8cd c010 	str.w	ip, [sp, #16]
   2c116:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
   2c11a:	f8cd c00c 	str.w	ip, [sp, #12]
   2c11e:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   2c122:	f8cd c008 	str.w	ip, [sp, #8]
   2c126:	9301      	str	r3, [sp, #4]
   2c128:	2301      	movs	r3, #1
   2c12a:	9300      	str	r3, [sp, #0]
   2c12c:	4613      	mov	r3, r2
   2c12e:	2200      	movs	r2, #0
   2c130:	f7ff fe30 	bl	2bd94 <PAIRING_Aggregate_PK_in_G1>
   2c134:	b009      	add	sp, #36	; 0x24
   2c136:	f85d fb04 	ldr.w	pc, [sp], #4

0002c13a <blst_pairing_chk_n_aggr_pk_in_g1>:
   2c13a:	b510      	push	{r4, lr}
   2c13c:	b088      	sub	sp, #32
   2c13e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   2c140:	9406      	str	r4, [sp, #24]
   2c142:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   2c144:	9405      	str	r4, [sp, #20]
   2c146:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2c148:	9404      	str	r4, [sp, #16]
   2c14a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2c14c:	9403      	str	r4, [sp, #12]
   2c14e:	2400      	movs	r4, #0
   2c150:	9402      	str	r4, [sp, #8]
   2c152:	9401      	str	r4, [sp, #4]
   2c154:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2c156:	9400      	str	r4, [sp, #0]
   2c158:	f7ff fe1c 	bl	2bd94 <PAIRING_Aggregate_PK_in_G1>
   2c15c:	b008      	add	sp, #32
   2c15e:	bd10      	pop	{r4, pc}

0002c160 <blst_pairing_chk_n_mul_n_aggr_pk_in_g1>:
   2c160:	b500      	push	{lr}
   2c162:	b089      	sub	sp, #36	; 0x24
   2c164:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   2c168:	f8cd c018 	str.w	ip, [sp, #24]
   2c16c:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
   2c170:	f8cd c014 	str.w	ip, [sp, #20]
   2c174:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   2c178:	f8cd c010 	str.w	ip, [sp, #16]
   2c17c:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
   2c180:	f8cd c00c 	str.w	ip, [sp, #12]
   2c184:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   2c188:	f8cd c008 	str.w	ip, [sp, #8]
   2c18c:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
   2c190:	f8cd c004 	str.w	ip, [sp, #4]
   2c194:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   2c198:	f8cd c000 	str.w	ip, [sp]
   2c19c:	f7ff fdfa 	bl	2bd94 <PAIRING_Aggregate_PK_in_G1>
   2c1a0:	b009      	add	sp, #36	; 0x24
   2c1a2:	f85d fb04 	ldr.w	pc, [sp], #4

0002c1a6 <blst_core_verify_pk_in_g1>:
   2c1a6:	b510      	push	{r4, lr}
   2c1a8:	f5ad 6d49 	sub.w	sp, sp, #3216	; 0xc90
   2c1ac:	2a00      	cmp	r2, #0
   2c1ae:	bf14      	ite	ne
   2c1b0:	2240      	movne	r2, #64	; 0x40
   2c1b2:	2200      	moveq	r2, #0
   2c1b4:	9208      	str	r2, [sp, #32]
   2c1b6:	2200      	movs	r2, #0
   2c1b8:	9209      	str	r2, [sp, #36]	; 0x24
   2c1ba:	f8dd 4c9c 	ldr.w	r4, [sp, #3228]	; 0xc9c
   2c1be:	940a      	str	r4, [sp, #40]	; 0x28
   2c1c0:	f8dd 4ca0 	ldr.w	r4, [sp, #3232]	; 0xca0
   2c1c4:	940b      	str	r4, [sp, #44]	; 0x2c
   2c1c6:	f8dd 4ca8 	ldr.w	r4, [sp, #3240]	; 0xca8
   2c1ca:	9406      	str	r4, [sp, #24]
   2c1cc:	f8dd 4ca4 	ldr.w	r4, [sp, #3236]	; 0xca4
   2c1d0:	9405      	str	r4, [sp, #20]
   2c1d2:	f8dd 4c98 	ldr.w	r4, [sp, #3224]	; 0xc98
   2c1d6:	9404      	str	r4, [sp, #16]
   2c1d8:	9303      	str	r3, [sp, #12]
   2c1da:	9202      	str	r2, [sp, #8]
   2c1dc:	9201      	str	r2, [sp, #4]
   2c1de:	2201      	movs	r2, #1
   2c1e0:	9200      	str	r2, [sp, #0]
   2c1e2:	460b      	mov	r3, r1
   2c1e4:	4601      	mov	r1, r0
   2c1e6:	a808      	add	r0, sp, #32
   2c1e8:	f7ff fdd4 	bl	2bd94 <PAIRING_Aggregate_PK_in_G1>
   2c1ec:	4604      	mov	r4, r0
   2c1ee:	b118      	cbz	r0, 2c1f8 <blst_core_verify_pk_in_g1+0x52>
   2c1f0:	4620      	mov	r0, r4
   2c1f2:	f50d 6d49 	add.w	sp, sp, #3216	; 0xc90
   2c1f6:	bd10      	pop	{r4, pc}
   2c1f8:	a808      	add	r0, sp, #32
   2c1fa:	f7ff fad6 	bl	2b7aa <PAIRING_Commit>
   2c1fe:	2100      	movs	r1, #0
   2c200:	a808      	add	r0, sp, #32
   2c202:	f7ff faff 	bl	2b804 <PAIRING_FinalVerify>
   2c206:	2800      	cmp	r0, #0
   2c208:	bf08      	it	eq
   2c20a:	2405      	moveq	r4, #5
   2c20c:	e7f0      	b.n	2c1f0 <blst_core_verify_pk_in_g1+0x4a>

0002c20e <blst_aggregate_in_g2>:
   2c20e:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c210:	b0c9      	sub	sp, #292	; 0x124
   2c212:	4605      	mov	r5, r0
   2c214:	460e      	mov	r6, r1
   2c216:	7813      	ldrb	r3, [r2, #0]
   2c218:	f013 0740 	ands.w	r7, r3, #64	; 0x40
   2c21c:	d120      	bne.n	2c260 <blst_aggregate_in_g2+0x52>
   2c21e:	4611      	mov	r1, r2
   2c220:	f013 0f80 	tst.w	r3, #128	; 0x80
   2c224:	d12b      	bne.n	2c27e <blst_aggregate_in_g2+0x70>
   2c226:	4668      	mov	r0, sp
   2c228:	f7fb fcca 	bl	27bc0 <POINTonE2_Deserialize_BE>
   2c22c:	4668      	mov	r0, sp
   2c22e:	f7fb fc65 	bl	27afc <POINTonE2_affine_on_curve>
   2c232:	b3b0      	cbz	r0, 2c2a2 <blst_aggregate_in_g2+0x94>
   2c234:	481d      	ldr	r0, [pc, #116]	; (2c2ac <blst_aggregate_in_g2+0x9e>)
   2c236:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   2c23a:	aa2f      	add	r2, sp, #188	; 0xbc
   2c23c:	30ec      	adds	r0, #236	; 0xec
   2c23e:	f853 4f04 	ldr.w	r4, [r3, #4]!
   2c242:	f842 4f04 	str.w	r4, [r2, #4]!
   2c246:	4283      	cmp	r3, r0
   2c248:	d1f9      	bne.n	2c23e <blst_aggregate_in_g2+0x30>
   2c24a:	4668      	mov	r0, sp
   2c24c:	f7fd f8c0 	bl	293d0 <POINTonE2_in_G2>
   2c250:	b348      	cbz	r0, 2c2a6 <blst_aggregate_in_g2+0x98>
   2c252:	b1de      	cbz	r6, 2c28c <blst_aggregate_in_g2+0x7e>
   2c254:	466a      	mov	r2, sp
   2c256:	4631      	mov	r1, r6
   2c258:	4628      	mov	r0, r5
   2c25a:	f7ff fbfd 	bl	2ba58 <POINTonE2_dadd_affine>
   2c25e:	e001      	b.n	2c264 <blst_aggregate_in_g2+0x56>
   2c260:	b119      	cbz	r1, 2c26a <blst_aggregate_in_g2+0x5c>
   2c262:	2700      	movs	r7, #0
   2c264:	4638      	mov	r0, r7
   2c266:	b049      	add	sp, #292	; 0x124
   2c268:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c26a:	4603      	mov	r3, r0
   2c26c:	f500 7190 	add.w	r1, r0, #288	; 0x120
   2c270:	2200      	movs	r2, #0
   2c272:	f843 2b04 	str.w	r2, [r3], #4
   2c276:	4299      	cmp	r1, r3
   2c278:	d1fb      	bne.n	2c272 <blst_aggregate_in_g2+0x64>
   2c27a:	2700      	movs	r7, #0
   2c27c:	e7f2      	b.n	2c264 <blst_aggregate_in_g2+0x56>
   2c27e:	4668      	mov	r0, sp
   2c280:	f7fc f89c 	bl	283bc <POINTonE2_Uncompress>
   2c284:	2800      	cmp	r0, #0
   2c286:	d0d5      	beq.n	2c234 <blst_aggregate_in_g2+0x26>
   2c288:	4607      	mov	r7, r0
   2c28a:	e7eb      	b.n	2c264 <blst_aggregate_in_g2+0x56>
   2c28c:	f1ad 0304 	sub.w	r3, sp, #4
   2c290:	3d04      	subs	r5, #4
   2c292:	a947      	add	r1, sp, #284	; 0x11c
   2c294:	f853 2f04 	ldr.w	r2, [r3, #4]!
   2c298:	f845 2f04 	str.w	r2, [r5, #4]!
   2c29c:	428b      	cmp	r3, r1
   2c29e:	d1f9      	bne.n	2c294 <blst_aggregate_in_g2+0x86>
   2c2a0:	e7e0      	b.n	2c264 <blst_aggregate_in_g2+0x56>
   2c2a2:	2702      	movs	r7, #2
   2c2a4:	e7de      	b.n	2c264 <blst_aggregate_in_g2+0x56>
   2c2a6:	2703      	movs	r7, #3
   2c2a8:	e7dc      	b.n	2c264 <blst_aggregate_in_g2+0x56>
   2c2aa:	bf00      	nop
   2c2ac:	00038688 	.word	0x00038688

0002c2b0 <POINTonE2_add_affine>:
   2c2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c2b4:	f5ad 7d45 	sub.w	sp, sp, #788	; 0x314
   2c2b8:	9003      	str	r0, [sp, #12]
   2c2ba:	460d      	mov	r5, r1
   2c2bc:	4616      	mov	r6, r2
   2c2be:	f101 0bc0 	add.w	fp, r1, #192	; 0xc0
   2c2c2:	f101 03bc 	add.w	r3, r1, #188	; 0xbc
   2c2c6:	f501 708e 	add.w	r0, r1, #284	; 0x11c
   2c2ca:	2200      	movs	r2, #0
   2c2cc:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2c2d0:	430a      	orrs	r2, r1
   2c2d2:	4283      	cmp	r3, r0
   2c2d4:	d1fa      	bne.n	2c2cc <POINTonE2_add_affine+0x1c>
   2c2d6:	1e57      	subs	r7, r2, #1
   2c2d8:	ea27 0702 	bic.w	r7, r7, r2
   2c2dc:	0fff      	lsrs	r7, r7, #31
   2c2de:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 2c5a4 <POINTonE2_add_affine+0x2f4>
   2c2e2:	4cb1      	ldr	r4, [pc, #708]	; (2c5a8 <POINTonE2_add_affine+0x2f8>)
   2c2e4:	4643      	mov	r3, r8
   2c2e6:	4622      	mov	r2, r4
   2c2e8:	4659      	mov	r1, fp
   2c2ea:	a864      	add	r0, sp, #400	; 0x190
   2c2ec:	f7fb fac0 	bl	27870 <sqr_mont_384x>
   2c2f0:	f8cd 8000 	str.w	r8, [sp]
   2c2f4:	4623      	mov	r3, r4
   2c2f6:	465a      	mov	r2, fp
   2c2f8:	a964      	add	r1, sp, #400	; 0x190
   2c2fa:	a8ac      	add	r0, sp, #688	; 0x2b0
   2c2fc:	f7f8 f82a 	bl	24354 <mul_mont_384x>
   2c300:	f8cd 8000 	str.w	r8, [sp]
   2c304:	4623      	mov	r3, r4
   2c306:	f106 0260 	add.w	r2, r6, #96	; 0x60
   2c30a:	a9ac      	add	r1, sp, #688	; 0x2b0
   2c30c:	4608      	mov	r0, r1
   2c30e:	f7f8 f821 	bl	24354 <mul_mont_384x>
   2c312:	f1a6 0804 	sub.w	r8, r6, #4
   2c316:	f106 00bc 	add.w	r0, r6, #188	; 0xbc
   2c31a:	4643      	mov	r3, r8
   2c31c:	2200      	movs	r2, #0
   2c31e:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2c322:	430a      	orrs	r2, r1
   2c324:	4283      	cmp	r3, r0
   2c326:	d1fa      	bne.n	2c31e <POINTonE2_add_affine+0x6e>
   2c328:	1e53      	subs	r3, r2, #1
   2c32a:	ea23 0202 	bic.w	r2, r3, r2
   2c32e:	0fd3      	lsrs	r3, r2, #31
   2c330:	9302      	str	r3, [sp, #8]
   2c332:	4c9d      	ldr	r4, [pc, #628]	; (2c5a8 <POINTonE2_add_affine+0x2f8>)
   2c334:	f8df 926c 	ldr.w	r9, [pc, #620]	; 2c5a4 <POINTonE2_add_affine+0x2f4>
   2c338:	f8cd 9000 	str.w	r9, [sp]
   2c33c:	4623      	mov	r3, r4
   2c33e:	aa64      	add	r2, sp, #400	; 0x190
   2c340:	4631      	mov	r1, r6
   2c342:	a84c      	add	r0, sp, #304	; 0x130
   2c344:	f7f8 f806 	bl	24354 <mul_mont_384x>
   2c348:	260c      	movs	r6, #12
   2c34a:	9600      	str	r6, [sp, #0]
   2c34c:	4623      	mov	r3, r4
   2c34e:	462a      	mov	r2, r5
   2c350:	a94c      	add	r1, sp, #304	; 0x130
   2c352:	4608      	mov	r0, r1
   2c354:	f7f4 f98e 	bl	20674 <sub_mod_n>
   2c358:	9600      	str	r6, [sp, #0]
   2c35a:	4623      	mov	r3, r4
   2c35c:	f105 0230 	add.w	r2, r5, #48	; 0x30
   2c360:	a958      	add	r1, sp, #352	; 0x160
   2c362:	4608      	mov	r0, r1
   2c364:	f7f4 f986 	bl	20674 <sub_mod_n>
   2c368:	464b      	mov	r3, r9
   2c36a:	4622      	mov	r2, r4
   2c36c:	a94c      	add	r1, sp, #304	; 0x130
   2c36e:	a834      	add	r0, sp, #208	; 0xd0
   2c370:	f7fb fa7e 	bl	27870 <sqr_mont_384x>
   2c374:	9600      	str	r6, [sp, #0]
   2c376:	4623      	mov	r3, r4
   2c378:	aa34      	add	r2, sp, #208	; 0xd0
   2c37a:	4611      	mov	r1, r2
   2c37c:	a81c      	add	r0, sp, #112	; 0x70
   2c37e:	f7f4 fccf 	bl	20d20 <add_mod_n>
   2c382:	9600      	str	r6, [sp, #0]
   2c384:	4623      	mov	r3, r4
   2c386:	aa40      	add	r2, sp, #256	; 0x100
   2c388:	4611      	mov	r1, r2
   2c38a:	a828      	add	r0, sp, #160	; 0xa0
   2c38c:	f7f4 fcc8 	bl	20d20 <add_mod_n>
   2c390:	9600      	str	r6, [sp, #0]
   2c392:	4623      	mov	r3, r4
   2c394:	aa1c      	add	r2, sp, #112	; 0x70
   2c396:	4611      	mov	r1, r2
   2c398:	4610      	mov	r0, r2
   2c39a:	f7f4 fcc1 	bl	20d20 <add_mod_n>
   2c39e:	9600      	str	r6, [sp, #0]
   2c3a0:	4623      	mov	r3, r4
   2c3a2:	aa28      	add	r2, sp, #160	; 0xa0
   2c3a4:	4611      	mov	r1, r2
   2c3a6:	4610      	mov	r0, r2
   2c3a8:	f7f4 fcba 	bl	20d20 <add_mod_n>
   2c3ac:	f8cd 9000 	str.w	r9, [sp]
   2c3b0:	4623      	mov	r3, r4
   2c3b2:	aa1c      	add	r2, sp, #112	; 0x70
   2c3b4:	4629      	mov	r1, r5
   2c3b6:	a894      	add	r0, sp, #592	; 0x250
   2c3b8:	f7f7 ffcc 	bl	24354 <mul_mont_384x>
   2c3bc:	f8cd 9000 	str.w	r9, [sp]
   2c3c0:	4623      	mov	r3, r4
   2c3c2:	aa1c      	add	r2, sp, #112	; 0x70
   2c3c4:	a94c      	add	r1, sp, #304	; 0x130
   2c3c6:	a804      	add	r0, sp, #16
   2c3c8:	f7f7 ffc4 	bl	24354 <mul_mont_384x>
   2c3cc:	f105 0a60 	add.w	sl, r5, #96	; 0x60
   2c3d0:	f8cd 9000 	str.w	r9, [sp]
   2c3d4:	4623      	mov	r3, r4
   2c3d6:	4652      	mov	r2, sl
   2c3d8:	a904      	add	r1, sp, #16
   2c3da:	a81c      	add	r0, sp, #112	; 0x70
   2c3dc:	f7f7 ffba 	bl	24354 <mul_mont_384x>
   2c3e0:	9600      	str	r6, [sp, #0]
   2c3e2:	4623      	mov	r3, r4
   2c3e4:	4652      	mov	r2, sl
   2c3e6:	a9ac      	add	r1, sp, #688	; 0x2b0
   2c3e8:	4608      	mov	r0, r1
   2c3ea:	f7f4 f943 	bl	20674 <sub_mod_n>
   2c3ee:	9600      	str	r6, [sp, #0]
   2c3f0:	4623      	mov	r3, r4
   2c3f2:	f105 0290 	add.w	r2, r5, #144	; 0x90
   2c3f6:	a9b8      	add	r1, sp, #736	; 0x2e0
   2c3f8:	4608      	mov	r0, r1
   2c3fa:	f7f4 f93b 	bl	20674 <sub_mod_n>
   2c3fe:	9600      	str	r6, [sp, #0]
   2c400:	4623      	mov	r3, r4
   2c402:	aaac      	add	r2, sp, #688	; 0x2b0
   2c404:	4611      	mov	r1, r2
   2c406:	4610      	mov	r0, r2
   2c408:	f7f4 fc8a 	bl	20d20 <add_mod_n>
   2c40c:	9600      	str	r6, [sp, #0]
   2c40e:	4623      	mov	r3, r4
   2c410:	aab8      	add	r2, sp, #736	; 0x2e0
   2c412:	4611      	mov	r1, r2
   2c414:	4610      	mov	r0, r2
   2c416:	f7f4 fc83 	bl	20d20 <add_mod_n>
   2c41a:	464b      	mov	r3, r9
   2c41c:	4622      	mov	r2, r4
   2c41e:	a9ac      	add	r1, sp, #688	; 0x2b0
   2c420:	a87c      	add	r0, sp, #496	; 0x1f0
   2c422:	f7fb fa25 	bl	27870 <sqr_mont_384x>
   2c426:	9600      	str	r6, [sp, #0]
   2c428:	4623      	mov	r3, r4
   2c42a:	aa04      	add	r2, sp, #16
   2c42c:	a97c      	add	r1, sp, #496	; 0x1f0
   2c42e:	4608      	mov	r0, r1
   2c430:	f7f4 f920 	bl	20674 <sub_mod_n>
   2c434:	9600      	str	r6, [sp, #0]
   2c436:	4623      	mov	r3, r4
   2c438:	aa10      	add	r2, sp, #64	; 0x40
   2c43a:	a988      	add	r1, sp, #544	; 0x220
   2c43c:	4608      	mov	r0, r1
   2c43e:	f7f4 f919 	bl	20674 <sub_mod_n>
   2c442:	9600      	str	r6, [sp, #0]
   2c444:	4623      	mov	r3, r4
   2c446:	aa94      	add	r2, sp, #592	; 0x250
   2c448:	a97c      	add	r1, sp, #496	; 0x1f0
   2c44a:	4608      	mov	r0, r1
   2c44c:	f7f4 f912 	bl	20674 <sub_mod_n>
   2c450:	9600      	str	r6, [sp, #0]
   2c452:	4623      	mov	r3, r4
   2c454:	aaa0      	add	r2, sp, #640	; 0x280
   2c456:	a988      	add	r1, sp, #544	; 0x220
   2c458:	4608      	mov	r0, r1
   2c45a:	f7f4 f90b 	bl	20674 <sub_mod_n>
   2c45e:	9600      	str	r6, [sp, #0]
   2c460:	4623      	mov	r3, r4
   2c462:	aa94      	add	r2, sp, #592	; 0x250
   2c464:	a97c      	add	r1, sp, #496	; 0x1f0
   2c466:	4608      	mov	r0, r1
   2c468:	f7f4 f904 	bl	20674 <sub_mod_n>
   2c46c:	9600      	str	r6, [sp, #0]
   2c46e:	4623      	mov	r3, r4
   2c470:	aaa0      	add	r2, sp, #640	; 0x280
   2c472:	a988      	add	r1, sp, #544	; 0x220
   2c474:	4608      	mov	r0, r1
   2c476:	f7f4 f8fd 	bl	20674 <sub_mod_n>
   2c47a:	9600      	str	r6, [sp, #0]
   2c47c:	4623      	mov	r3, r4
   2c47e:	aa7c      	add	r2, sp, #496	; 0x1f0
   2c480:	a994      	add	r1, sp, #592	; 0x250
   2c482:	4608      	mov	r0, r1
   2c484:	f7f4 f8f6 	bl	20674 <sub_mod_n>
   2c488:	9600      	str	r6, [sp, #0]
   2c48a:	4623      	mov	r3, r4
   2c48c:	aa88      	add	r2, sp, #544	; 0x220
   2c48e:	a9a0      	add	r1, sp, #640	; 0x280
   2c490:	4608      	mov	r0, r1
   2c492:	f7f4 f8ef 	bl	20674 <sub_mod_n>
   2c496:	f8cd 9000 	str.w	r9, [sp]
   2c49a:	4623      	mov	r3, r4
   2c49c:	aaac      	add	r2, sp, #688	; 0x2b0
   2c49e:	a994      	add	r1, sp, #592	; 0x250
   2c4a0:	4608      	mov	r0, r1
   2c4a2:	f7f7 ff57 	bl	24354 <mul_mont_384x>
   2c4a6:	9600      	str	r6, [sp, #0]
   2c4a8:	4623      	mov	r3, r4
   2c4aa:	aa1c      	add	r2, sp, #112	; 0x70
   2c4ac:	a994      	add	r1, sp, #592	; 0x250
   2c4ae:	4608      	mov	r0, r1
   2c4b0:	f7f4 f8e0 	bl	20674 <sub_mod_n>
   2c4b4:	9600      	str	r6, [sp, #0]
   2c4b6:	4623      	mov	r3, r4
   2c4b8:	aa28      	add	r2, sp, #160	; 0xa0
   2c4ba:	a9a0      	add	r1, sp, #640	; 0x280
   2c4bc:	4608      	mov	r0, r1
   2c4be:	f7f4 f8d9 	bl	20674 <sub_mod_n>
   2c4c2:	9600      	str	r6, [sp, #0]
   2c4c4:	4623      	mov	r3, r4
   2c4c6:	aa1c      	add	r2, sp, #112	; 0x70
   2c4c8:	a994      	add	r1, sp, #592	; 0x250
   2c4ca:	4608      	mov	r0, r1
   2c4cc:	f7f4 f8d2 	bl	20674 <sub_mod_n>
   2c4d0:	9600      	str	r6, [sp, #0]
   2c4d2:	4623      	mov	r3, r4
   2c4d4:	aa28      	add	r2, sp, #160	; 0xa0
   2c4d6:	a9a0      	add	r1, sp, #640	; 0x280
   2c4d8:	4608      	mov	r0, r1
   2c4da:	f7f4 f8cb 	bl	20674 <sub_mod_n>
   2c4de:	9600      	str	r6, [sp, #0]
   2c4e0:	4623      	mov	r3, r4
   2c4e2:	aa4c      	add	r2, sp, #304	; 0x130
   2c4e4:	4659      	mov	r1, fp
   2c4e6:	a8ac      	add	r0, sp, #688	; 0x2b0
   2c4e8:	f7f4 fc1a 	bl	20d20 <add_mod_n>
   2c4ec:	9600      	str	r6, [sp, #0]
   2c4ee:	4623      	mov	r3, r4
   2c4f0:	aa58      	add	r2, sp, #352	; 0x160
   2c4f2:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   2c4f6:	a8b8      	add	r0, sp, #736	; 0x2e0
   2c4f8:	f7f4 fc12 	bl	20d20 <add_mod_n>
   2c4fc:	464b      	mov	r3, r9
   2c4fe:	4622      	mov	r2, r4
   2c500:	a9ac      	add	r1, sp, #688	; 0x2b0
   2c502:	4608      	mov	r0, r1
   2c504:	f7fb f9b4 	bl	27870 <sqr_mont_384x>
   2c508:	9600      	str	r6, [sp, #0]
   2c50a:	4623      	mov	r3, r4
   2c50c:	aa64      	add	r2, sp, #400	; 0x190
   2c50e:	a9ac      	add	r1, sp, #688	; 0x2b0
   2c510:	4608      	mov	r0, r1
   2c512:	f7f4 f8af 	bl	20674 <sub_mod_n>
   2c516:	9600      	str	r6, [sp, #0]
   2c518:	4623      	mov	r3, r4
   2c51a:	aa70      	add	r2, sp, #448	; 0x1c0
   2c51c:	a9b8      	add	r1, sp, #736	; 0x2e0
   2c51e:	4608      	mov	r0, r1
   2c520:	f7f4 f8a8 	bl	20674 <sub_mod_n>
   2c524:	9600      	str	r6, [sp, #0]
   2c526:	4623      	mov	r3, r4
   2c528:	aa34      	add	r2, sp, #208	; 0xd0
   2c52a:	a9ac      	add	r1, sp, #688	; 0x2b0
   2c52c:	4608      	mov	r0, r1
   2c52e:	f7f4 f8a1 	bl	20674 <sub_mod_n>
   2c532:	9600      	str	r6, [sp, #0]
   2c534:	4623      	mov	r3, r4
   2c536:	aa40      	add	r2, sp, #256	; 0x100
   2c538:	a9b8      	add	r1, sp, #736	; 0x2e0
   2c53a:	4608      	mov	r0, r1
   2c53c:	f7f4 f89a 	bl	20674 <sub_mod_n>
   2c540:	427f      	negs	r7, r7
   2c542:	f104 018c 	add.w	r1, r4, #140	; 0x8c
   2c546:	aaab      	add	r2, sp, #684	; 0x2ac
   2c548:	34ec      	adds	r4, #236	; 0xec
   2c54a:	f852 0f04 	ldr.w	r0, [r2, #4]!
   2c54e:	f851 3f04 	ldr.w	r3, [r1, #4]!
   2c552:	4043      	eors	r3, r0
   2c554:	403b      	ands	r3, r7
   2c556:	4043      	eors	r3, r0
   2c558:	6013      	str	r3, [r2, #0]
   2c55a:	428c      	cmp	r4, r1
   2c55c:	d1f5      	bne.n	2c54a <POINTonE2_add_affine+0x29a>
   2c55e:	aa7c      	add	r2, sp, #496	; 0x1f0
   2c560:	acac      	add	r4, sp, #688	; 0x2b0
   2c562:	4611      	mov	r1, r2
   2c564:	6808      	ldr	r0, [r1, #0]
   2c566:	f858 3f04 	ldr.w	r3, [r8, #4]!
   2c56a:	4043      	eors	r3, r0
   2c56c:	403b      	ands	r3, r7
   2c56e:	4043      	eors	r3, r0
   2c570:	f841 3b04 	str.w	r3, [r1], #4
   2c574:	428c      	cmp	r4, r1
   2c576:	d1f5      	bne.n	2c564 <POINTonE2_add_affine+0x2b4>
   2c578:	9b02      	ldr	r3, [sp, #8]
   2c57a:	425c      	negs	r4, r3
   2c57c:	3d04      	subs	r5, #4
   2c57e:	9b03      	ldr	r3, [sp, #12]
   2c580:	1f18      	subs	r0, r3, #4
   2c582:	f502 7690 	add.w	r6, r2, #288	; 0x120
   2c586:	f852 1b04 	ldr.w	r1, [r2], #4
   2c58a:	f855 3f04 	ldr.w	r3, [r5, #4]!
   2c58e:	404b      	eors	r3, r1
   2c590:	4023      	ands	r3, r4
   2c592:	404b      	eors	r3, r1
   2c594:	f840 3f04 	str.w	r3, [r0, #4]!
   2c598:	4296      	cmp	r6, r2
   2c59a:	d1f4      	bne.n	2c586 <POINTonE2_add_affine+0x2d6>
   2c59c:	f50d 7d45 	add.w	sp, sp, #788	; 0x314
   2c5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c5a4:	fffcfffd 	.word	0xfffcfffd
   2c5a8:	00038688 	.word	0x00038688

0002c5ac <blst_fr_add>:
   2c5ac:	b500      	push	{lr}
   2c5ae:	b083      	sub	sp, #12
   2c5b0:	2308      	movs	r3, #8
   2c5b2:	9300      	str	r3, [sp, #0]
   2c5b4:	4b02      	ldr	r3, [pc, #8]	; (2c5c0 <blst_fr_add+0x14>)
   2c5b6:	f7f4 fbb3 	bl	20d20 <add_mod_n>
   2c5ba:	b003      	add	sp, #12
   2c5bc:	f85d fb04 	ldr.w	pc, [sp], #4
   2c5c0:	00039a48 	.word	0x00039a48

0002c5c4 <blst_fr_sub>:
   2c5c4:	b500      	push	{lr}
   2c5c6:	b083      	sub	sp, #12
   2c5c8:	2308      	movs	r3, #8
   2c5ca:	9300      	str	r3, [sp, #0]
   2c5cc:	4b02      	ldr	r3, [pc, #8]	; (2c5d8 <blst_fr_sub+0x14>)
   2c5ce:	f7f4 f851 	bl	20674 <sub_mod_n>
   2c5d2:	b003      	add	sp, #12
   2c5d4:	f85d fb04 	ldr.w	pc, [sp], #4
   2c5d8:	00039a48 	.word	0x00039a48

0002c5dc <blst_fr_mul_by_3>:
   2c5dc:	b508      	push	{r3, lr}
   2c5de:	2308      	movs	r3, #8
   2c5e0:	4a01      	ldr	r2, [pc, #4]	; (2c5e8 <blst_fr_mul_by_3+0xc>)
   2c5e2:	f7f4 fc25 	bl	20e30 <mul_by_3_mod_n>
   2c5e6:	bd08      	pop	{r3, pc}
   2c5e8:	00039a48 	.word	0x00039a48

0002c5ec <blst_fr_lshift>:
   2c5ec:	b500      	push	{lr}
   2c5ee:	b083      	sub	sp, #12
   2c5f0:	2308      	movs	r3, #8
   2c5f2:	9300      	str	r3, [sp, #0]
   2c5f4:	4b02      	ldr	r3, [pc, #8]	; (2c600 <blst_fr_lshift+0x14>)
   2c5f6:	f7f4 fcbb 	bl	20f70 <lshift_mod_n>
   2c5fa:	b003      	add	sp, #12
   2c5fc:	f85d fb04 	ldr.w	pc, [sp], #4
   2c600:	00039a48 	.word	0x00039a48

0002c604 <blst_fr_rshift>:
   2c604:	b500      	push	{lr}
   2c606:	b083      	sub	sp, #12
   2c608:	2308      	movs	r3, #8
   2c60a:	9300      	str	r3, [sp, #0]
   2c60c:	4b02      	ldr	r3, [pc, #8]	; (2c618 <blst_fr_rshift+0x14>)
   2c60e:	f7f4 f899 	bl	20744 <rshift_mod_n>
   2c612:	b003      	add	sp, #12
   2c614:	f85d fb04 	ldr.w	pc, [sp], #4
   2c618:	00039a48 	.word	0x00039a48

0002c61c <blst_fr_mul>:
   2c61c:	b500      	push	{lr}
   2c61e:	b083      	sub	sp, #12
   2c620:	2308      	movs	r3, #8
   2c622:	9301      	str	r3, [sp, #4]
   2c624:	f04f 33ff 	mov.w	r3, #4294967295
   2c628:	9300      	str	r3, [sp, #0]
   2c62a:	4b03      	ldr	r3, [pc, #12]	; (2c638 <blst_fr_mul+0x1c>)
   2c62c:	f7f4 f9d0 	bl	209d0 <mul_mont_n>
   2c630:	b003      	add	sp, #12
   2c632:	f85d fb04 	ldr.w	pc, [sp], #4
   2c636:	bf00      	nop
   2c638:	00039a48 	.word	0x00039a48

0002c63c <blst_fr_sqr>:
   2c63c:	b500      	push	{lr}
   2c63e:	b083      	sub	sp, #12
   2c640:	460a      	mov	r2, r1
   2c642:	2308      	movs	r3, #8
   2c644:	9301      	str	r3, [sp, #4]
   2c646:	f04f 33ff 	mov.w	r3, #4294967295
   2c64a:	9300      	str	r3, [sp, #0]
   2c64c:	4b02      	ldr	r3, [pc, #8]	; (2c658 <blst_fr_sqr+0x1c>)
   2c64e:	f7f4 f9bf 	bl	209d0 <mul_mont_n>
   2c652:	b003      	add	sp, #12
   2c654:	f85d fb04 	ldr.w	pc, [sp], #4
   2c658:	00039a48 	.word	0x00039a48

0002c65c <blst_fr_cneg>:
   2c65c:	b500      	push	{lr}
   2c65e:	b083      	sub	sp, #12
   2c660:	1e53      	subs	r3, r2, #1
   2c662:	ea23 0202 	bic.w	r2, r3, r2
   2c666:	2308      	movs	r3, #8
   2c668:	9300      	str	r3, [sp, #0]
   2c66a:	4b04      	ldr	r3, [pc, #16]	; (2c67c <blst_fr_cneg+0x20>)
   2c66c:	43d2      	mvns	r2, r2
   2c66e:	0fd2      	lsrs	r2, r2, #31
   2c670:	f7f5 f9ea 	bl	21a48 <cneg_mod_n>
   2c674:	b003      	add	sp, #12
   2c676:	f85d fb04 	ldr.w	pc, [sp], #4
   2c67a:	bf00      	nop
   2c67c:	00039a48 	.word	0x00039a48

0002c680 <blst_fr_to>:
   2c680:	b500      	push	{lr}
   2c682:	b083      	sub	sp, #12
   2c684:	4a07      	ldr	r2, [pc, #28]	; (2c6a4 <blst_fr_to+0x24>)
   2c686:	2308      	movs	r3, #8
   2c688:	9301      	str	r3, [sp, #4]
   2c68a:	f04f 33ff 	mov.w	r3, #4294967295
   2c68e:	9300      	str	r3, [sp, #0]
   2c690:	f502 7332 	add.w	r3, r2, #712	; 0x2c8
   2c694:	f502 6288 	add.w	r2, r2, #1088	; 0x440
   2c698:	f7f4 f99a 	bl	209d0 <mul_mont_n>
   2c69c:	b003      	add	sp, #12
   2c69e:	f85d fb04 	ldr.w	pc, [sp], #4
   2c6a2:	bf00      	nop
   2c6a4:	00039780 	.word	0x00039780

0002c6a8 <blst_fr_from>:
   2c6a8:	b500      	push	{lr}
   2c6aa:	b083      	sub	sp, #12
   2c6ac:	2308      	movs	r3, #8
   2c6ae:	9300      	str	r3, [sp, #0]
   2c6b0:	f04f 33ff 	mov.w	r3, #4294967295
   2c6b4:	4a02      	ldr	r2, [pc, #8]	; (2c6c0 <blst_fr_from+0x18>)
   2c6b6:	f7f4 fcbd 	bl	21034 <from_mont_n>
   2c6ba:	b003      	add	sp, #12
   2c6bc:	f85d fb04 	ldr.w	pc, [sp], #4
   2c6c0:	00039a48 	.word	0x00039a48

0002c6c4 <blst_fr_eucl_inverse>:
   2c6c4:	b500      	push	{lr}
   2c6c6:	b083      	sub	sp, #12
   2c6c8:	4a05      	ldr	r2, [pc, #20]	; (2c6e0 <blst_fr_eucl_inverse+0x1c>)
   2c6ca:	2308      	movs	r3, #8
   2c6cc:	9300      	str	r3, [sp, #0]
   2c6ce:	f502 6388 	add.w	r3, r2, #1088	; 0x440
   2c6d2:	f502 7232 	add.w	r2, r2, #712	; 0x2c8
   2c6d6:	f7f6 f99b 	bl	22a10 <eucl_inverse_mod_n>
   2c6da:	b003      	add	sp, #12
   2c6dc:	f85d fb04 	ldr.w	pc, [sp], #4
   2c6e0:	00039780 	.word	0x00039780

0002c6e4 <blst_fp_add>:
   2c6e4:	b500      	push	{lr}
   2c6e6:	b083      	sub	sp, #12
   2c6e8:	230c      	movs	r3, #12
   2c6ea:	9300      	str	r3, [sp, #0]
   2c6ec:	4b02      	ldr	r3, [pc, #8]	; (2c6f8 <blst_fp_add+0x14>)
   2c6ee:	f7f4 fb17 	bl	20d20 <add_mod_n>
   2c6f2:	b003      	add	sp, #12
   2c6f4:	f85d fb04 	ldr.w	pc, [sp], #4
   2c6f8:	00038688 	.word	0x00038688

0002c6fc <blst_fp_sub>:
   2c6fc:	b500      	push	{lr}
   2c6fe:	b083      	sub	sp, #12
   2c700:	230c      	movs	r3, #12
   2c702:	9300      	str	r3, [sp, #0]
   2c704:	4b02      	ldr	r3, [pc, #8]	; (2c710 <blst_fp_sub+0x14>)
   2c706:	f7f3 ffb5 	bl	20674 <sub_mod_n>
   2c70a:	b003      	add	sp, #12
   2c70c:	f85d fb04 	ldr.w	pc, [sp], #4
   2c710:	00038688 	.word	0x00038688

0002c714 <blst_fp_mul_by_3>:
   2c714:	b508      	push	{r3, lr}
   2c716:	230c      	movs	r3, #12
   2c718:	4a01      	ldr	r2, [pc, #4]	; (2c720 <blst_fp_mul_by_3+0xc>)
   2c71a:	f7f4 fb89 	bl	20e30 <mul_by_3_mod_n>
   2c71e:	bd08      	pop	{r3, pc}
   2c720:	00038688 	.word	0x00038688

0002c724 <blst_fp_mul_by_8>:
   2c724:	b500      	push	{lr}
   2c726:	b083      	sub	sp, #12
   2c728:	230c      	movs	r3, #12
   2c72a:	9300      	str	r3, [sp, #0]
   2c72c:	4b03      	ldr	r3, [pc, #12]	; (2c73c <blst_fp_mul_by_8+0x18>)
   2c72e:	2203      	movs	r2, #3
   2c730:	f7f4 fc1e 	bl	20f70 <lshift_mod_n>
   2c734:	b003      	add	sp, #12
   2c736:	f85d fb04 	ldr.w	pc, [sp], #4
   2c73a:	bf00      	nop
   2c73c:	00038688 	.word	0x00038688

0002c740 <blst_fp_lshift>:
   2c740:	b500      	push	{lr}
   2c742:	b083      	sub	sp, #12
   2c744:	230c      	movs	r3, #12
   2c746:	9300      	str	r3, [sp, #0]
   2c748:	4b02      	ldr	r3, [pc, #8]	; (2c754 <blst_fp_lshift+0x14>)
   2c74a:	f7f4 fc11 	bl	20f70 <lshift_mod_n>
   2c74e:	b003      	add	sp, #12
   2c750:	f85d fb04 	ldr.w	pc, [sp], #4
   2c754:	00038688 	.word	0x00038688

0002c758 <blst_fp_mul>:
   2c758:	b500      	push	{lr}
   2c75a:	b083      	sub	sp, #12
   2c75c:	230c      	movs	r3, #12
   2c75e:	9301      	str	r3, [sp, #4]
   2c760:	4b03      	ldr	r3, [pc, #12]	; (2c770 <blst_fp_mul+0x18>)
   2c762:	9300      	str	r3, [sp, #0]
   2c764:	4b03      	ldr	r3, [pc, #12]	; (2c774 <blst_fp_mul+0x1c>)
   2c766:	f7f4 f933 	bl	209d0 <mul_mont_n>
   2c76a:	b003      	add	sp, #12
   2c76c:	f85d fb04 	ldr.w	pc, [sp], #4
   2c770:	fffcfffd 	.word	0xfffcfffd
   2c774:	00038688 	.word	0x00038688

0002c778 <blst_fp_sqr>:
   2c778:	b500      	push	{lr}
   2c77a:	b083      	sub	sp, #12
   2c77c:	460a      	mov	r2, r1
   2c77e:	230c      	movs	r3, #12
   2c780:	9301      	str	r3, [sp, #4]
   2c782:	4b04      	ldr	r3, [pc, #16]	; (2c794 <blst_fp_sqr+0x1c>)
   2c784:	9300      	str	r3, [sp, #0]
   2c786:	4b04      	ldr	r3, [pc, #16]	; (2c798 <blst_fp_sqr+0x20>)
   2c788:	f7f4 f922 	bl	209d0 <mul_mont_n>
   2c78c:	b003      	add	sp, #12
   2c78e:	f85d fb04 	ldr.w	pc, [sp], #4
   2c792:	bf00      	nop
   2c794:	fffcfffd 	.word	0xfffcfffd
   2c798:	00038688 	.word	0x00038688

0002c79c <blst_fp_cneg>:
   2c79c:	b500      	push	{lr}
   2c79e:	b083      	sub	sp, #12
   2c7a0:	1e53      	subs	r3, r2, #1
   2c7a2:	ea23 0202 	bic.w	r2, r3, r2
   2c7a6:	230c      	movs	r3, #12
   2c7a8:	9300      	str	r3, [sp, #0]
   2c7aa:	4b04      	ldr	r3, [pc, #16]	; (2c7bc <blst_fp_cneg+0x20>)
   2c7ac:	43d2      	mvns	r2, r2
   2c7ae:	0fd2      	lsrs	r2, r2, #31
   2c7b0:	f7f5 f94a 	bl	21a48 <cneg_mod_n>
   2c7b4:	b003      	add	sp, #12
   2c7b6:	f85d fb04 	ldr.w	pc, [sp], #4
   2c7ba:	bf00      	nop
   2c7bc:	00038688 	.word	0x00038688

0002c7c0 <blst_fp_to>:
   2c7c0:	b500      	push	{lr}
   2c7c2:	b083      	sub	sp, #12
   2c7c4:	4b05      	ldr	r3, [pc, #20]	; (2c7dc <blst_fp_to+0x1c>)
   2c7c6:	220c      	movs	r2, #12
   2c7c8:	9201      	str	r2, [sp, #4]
   2c7ca:	4a05      	ldr	r2, [pc, #20]	; (2c7e0 <blst_fp_to+0x20>)
   2c7cc:	9200      	str	r2, [sp, #0]
   2c7ce:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
   2c7d2:	f7f4 f8fd 	bl	209d0 <mul_mont_n>
   2c7d6:	b003      	add	sp, #12
   2c7d8:	f85d fb04 	ldr.w	pc, [sp], #4
   2c7dc:	00038688 	.word	0x00038688
   2c7e0:	fffcfffd 	.word	0xfffcfffd

0002c7e4 <blst_fp_from>:
   2c7e4:	b500      	push	{lr}
   2c7e6:	b083      	sub	sp, #12
   2c7e8:	230c      	movs	r3, #12
   2c7ea:	9300      	str	r3, [sp, #0]
   2c7ec:	4b03      	ldr	r3, [pc, #12]	; (2c7fc <blst_fp_from+0x18>)
   2c7ee:	4a04      	ldr	r2, [pc, #16]	; (2c800 <blst_fp_from+0x1c>)
   2c7f0:	f7f4 fc20 	bl	21034 <from_mont_n>
   2c7f4:	b003      	add	sp, #12
   2c7f6:	f85d fb04 	ldr.w	pc, [sp], #4
   2c7fa:	bf00      	nop
   2c7fc:	fffcfffd 	.word	0xfffcfffd
   2c800:	00038688 	.word	0x00038688

0002c804 <blst_fp_from_uint32>:
   2c804:	b500      	push	{lr}
   2c806:	b083      	sub	sp, #12
   2c808:	4b05      	ldr	r3, [pc, #20]	; (2c820 <blst_fp_from_uint32+0x1c>)
   2c80a:	220c      	movs	r2, #12
   2c80c:	9201      	str	r2, [sp, #4]
   2c80e:	4a05      	ldr	r2, [pc, #20]	; (2c824 <blst_fp_from_uint32+0x20>)
   2c810:	9200      	str	r2, [sp, #0]
   2c812:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
   2c816:	f7f4 f8db 	bl	209d0 <mul_mont_n>
   2c81a:	b003      	add	sp, #12
   2c81c:	f85d fb04 	ldr.w	pc, [sp], #4
   2c820:	00038688 	.word	0x00038688
   2c824:	fffcfffd 	.word	0xfffcfffd

0002c828 <blst_uint32_from_fp>:
   2c828:	b500      	push	{lr}
   2c82a:	b083      	sub	sp, #12
   2c82c:	230c      	movs	r3, #12
   2c82e:	9300      	str	r3, [sp, #0]
   2c830:	4b03      	ldr	r3, [pc, #12]	; (2c840 <blst_uint32_from_fp+0x18>)
   2c832:	4a04      	ldr	r2, [pc, #16]	; (2c844 <blst_uint32_from_fp+0x1c>)
   2c834:	f7f4 fbfe 	bl	21034 <from_mont_n>
   2c838:	b003      	add	sp, #12
   2c83a:	f85d fb04 	ldr.w	pc, [sp], #4
   2c83e:	bf00      	nop
   2c840:	fffcfffd 	.word	0xfffcfffd
   2c844:	00038688 	.word	0x00038688

0002c848 <blst_fp_from_uint64>:
   2c848:	b500      	push	{lr}
   2c84a:	b083      	sub	sp, #12
   2c84c:	4b05      	ldr	r3, [pc, #20]	; (2c864 <blst_fp_from_uint64+0x1c>)
   2c84e:	220c      	movs	r2, #12
   2c850:	9201      	str	r2, [sp, #4]
   2c852:	4a05      	ldr	r2, [pc, #20]	; (2c868 <blst_fp_from_uint64+0x20>)
   2c854:	9200      	str	r2, [sp, #0]
   2c856:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
   2c85a:	f7f4 f8b9 	bl	209d0 <mul_mont_n>
   2c85e:	b003      	add	sp, #12
   2c860:	f85d fb04 	ldr.w	pc, [sp], #4
   2c864:	00038688 	.word	0x00038688
   2c868:	fffcfffd 	.word	0xfffcfffd

0002c86c <blst_uint64_from_fp>:
   2c86c:	b500      	push	{lr}
   2c86e:	b083      	sub	sp, #12
   2c870:	230c      	movs	r3, #12
   2c872:	9300      	str	r3, [sp, #0]
   2c874:	4b03      	ldr	r3, [pc, #12]	; (2c884 <blst_uint64_from_fp+0x18>)
   2c876:	4a04      	ldr	r2, [pc, #16]	; (2c888 <blst_uint64_from_fp+0x1c>)
   2c878:	f7f4 fbdc 	bl	21034 <from_mont_n>
   2c87c:	b003      	add	sp, #12
   2c87e:	f85d fb04 	ldr.w	pc, [sp], #4
   2c882:	bf00      	nop
   2c884:	fffcfffd 	.word	0xfffcfffd
   2c888:	00038688 	.word	0x00038688

0002c88c <blst_fp_from_bendian>:
   2c88c:	b510      	push	{r4, lr}
   2c88e:	b08e      	sub	sp, #56	; 0x38
   2c890:	f101 0e30 	add.w	lr, r1, #48	; 0x30
   2c894:	460a      	mov	r2, r1
   2c896:	2400      	movs	r4, #0
   2c898:	f101 0c2f 	add.w	ip, r1, #47	; 0x2f
   2c89c:	ebac 0302 	sub.w	r3, ip, r2
   2c8a0:	f812 1b01 	ldrb.w	r1, [r2], #1
   2c8a4:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
   2c8a8:	f023 0303 	bic.w	r3, r3, #3
   2c8ac:	a90e      	add	r1, sp, #56	; 0x38
   2c8ae:	440b      	add	r3, r1
   2c8b0:	f843 4c30 	str.w	r4, [r3, #-48]
   2c8b4:	4572      	cmp	r2, lr
   2c8b6:	d1f1      	bne.n	2c89c <blst_fp_from_bendian+0x10>
   2c8b8:	4b05      	ldr	r3, [pc, #20]	; (2c8d0 <blst_fp_from_bendian+0x44>)
   2c8ba:	220c      	movs	r2, #12
   2c8bc:	9201      	str	r2, [sp, #4]
   2c8be:	4a05      	ldr	r2, [pc, #20]	; (2c8d4 <blst_fp_from_bendian+0x48>)
   2c8c0:	9200      	str	r2, [sp, #0]
   2c8c2:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
   2c8c6:	a902      	add	r1, sp, #8
   2c8c8:	f7f4 f882 	bl	209d0 <mul_mont_n>
   2c8cc:	b00e      	add	sp, #56	; 0x38
   2c8ce:	bd10      	pop	{r4, pc}
   2c8d0:	00038688 	.word	0x00038688
   2c8d4:	fffcfffd 	.word	0xfffcfffd

0002c8d8 <blst_bendian_from_fp>:
   2c8d8:	b510      	push	{r4, lr}
   2c8da:	b08e      	sub	sp, #56	; 0x38
   2c8dc:	4604      	mov	r4, r0
   2c8de:	230c      	movs	r3, #12
   2c8e0:	9300      	str	r3, [sp, #0]
   2c8e2:	4b0e      	ldr	r3, [pc, #56]	; (2c91c <blst_bendian_from_fp+0x44>)
   2c8e4:	4a0e      	ldr	r2, [pc, #56]	; (2c920 <blst_bendian_from_fp+0x48>)
   2c8e6:	a802      	add	r0, sp, #8
   2c8e8:	f7f4 fba4 	bl	21034 <from_mont_n>
   2c8ec:	f104 0c30 	add.w	ip, r4, #48	; 0x30
   2c8f0:	4622      	mov	r2, r4
   2c8f2:	f104 002f 	add.w	r0, r4, #47	; 0x2f
   2c8f6:	1a83      	subs	r3, r0, r2
   2c8f8:	f023 0103 	bic.w	r1, r3, #3
   2c8fc:	ac0e      	add	r4, sp, #56	; 0x38
   2c8fe:	4421      	add	r1, r4
   2c900:	f003 0303 	and.w	r3, r3, #3
   2c904:	00db      	lsls	r3, r3, #3
   2c906:	f851 1c30 	ldr.w	r1, [r1, #-48]
   2c90a:	fa21 f303 	lsr.w	r3, r1, r3
   2c90e:	f802 3b01 	strb.w	r3, [r2], #1
   2c912:	4562      	cmp	r2, ip
   2c914:	d1ef      	bne.n	2c8f6 <blst_bendian_from_fp+0x1e>
   2c916:	b00e      	add	sp, #56	; 0x38
   2c918:	bd10      	pop	{r4, pc}
   2c91a:	bf00      	nop
   2c91c:	fffcfffd 	.word	0xfffcfffd
   2c920:	00038688 	.word	0x00038688

0002c924 <blst_fp_from_lendian>:
   2c924:	b510      	push	{r4, lr}
   2c926:	b08e      	sub	sp, #56	; 0x38
   2c928:	f101 0230 	add.w	r2, r1, #48	; 0x30
   2c92c:	2400      	movs	r4, #0
   2c92e:	ea6f 0e01 	mvn.w	lr, r1
   2c932:	eb0e 0302 	add.w	r3, lr, r2
   2c936:	f812 cd01 	ldrb.w	ip, [r2, #-1]!
   2c93a:	ea4c 2404 	orr.w	r4, ip, r4, lsl #8
   2c93e:	f023 0303 	bic.w	r3, r3, #3
   2c942:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
   2c946:	4463      	add	r3, ip
   2c948:	f843 4c30 	str.w	r4, [r3, #-48]
   2c94c:	428a      	cmp	r2, r1
   2c94e:	d1f0      	bne.n	2c932 <blst_fp_from_lendian+0xe>
   2c950:	4b05      	ldr	r3, [pc, #20]	; (2c968 <blst_fp_from_lendian+0x44>)
   2c952:	220c      	movs	r2, #12
   2c954:	9201      	str	r2, [sp, #4]
   2c956:	4a05      	ldr	r2, [pc, #20]	; (2c96c <blst_fp_from_lendian+0x48>)
   2c958:	9200      	str	r2, [sp, #0]
   2c95a:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
   2c95e:	a902      	add	r1, sp, #8
   2c960:	f7f4 f836 	bl	209d0 <mul_mont_n>
   2c964:	b00e      	add	sp, #56	; 0x38
   2c966:	bd10      	pop	{r4, pc}
   2c968:	00038688 	.word	0x00038688
   2c96c:	fffcfffd 	.word	0xfffcfffd

0002c970 <blst_lendian_from_fp>:
   2c970:	b530      	push	{r4, r5, lr}
   2c972:	b08f      	sub	sp, #60	; 0x3c
   2c974:	4604      	mov	r4, r0
   2c976:	ad02      	add	r5, sp, #8
   2c978:	230c      	movs	r3, #12
   2c97a:	9300      	str	r3, [sp, #0]
   2c97c:	4b0c      	ldr	r3, [pc, #48]	; (2c9b0 <blst_lendian_from_fp+0x40>)
   2c97e:	4a0d      	ldr	r2, [pc, #52]	; (2c9b4 <blst_lendian_from_fp+0x44>)
   2c980:	4628      	mov	r0, r5
   2c982:	f7f4 fb57 	bl	21034 <from_mont_n>
   2c986:	42ac      	cmp	r4, r5
   2c988:	d00f      	beq.n	2c9aa <blst_lendian_from_fp+0x3a>
   2c98a:	4628      	mov	r0, r5
   2c98c:	1d21      	adds	r1, r4, #4
   2c98e:	ac0e      	add	r4, sp, #56	; 0x38
   2c990:	e002      	b.n	2c998 <blst_lendian_from_fp+0x28>
   2c992:	3104      	adds	r1, #4
   2c994:	42a0      	cmp	r0, r4
   2c996:	d008      	beq.n	2c9aa <blst_lendian_from_fp+0x3a>
   2c998:	1f0a      	subs	r2, r1, #4
   2c99a:	f850 3b04 	ldr.w	r3, [r0], #4
   2c99e:	f802 3b01 	strb.w	r3, [r2], #1
   2c9a2:	0a1b      	lsrs	r3, r3, #8
   2c9a4:	428a      	cmp	r2, r1
   2c9a6:	d1fa      	bne.n	2c99e <blst_lendian_from_fp+0x2e>
   2c9a8:	e7f3      	b.n	2c992 <blst_lendian_from_fp+0x22>
   2c9aa:	b00f      	add	sp, #60	; 0x3c
   2c9ac:	bd30      	pop	{r4, r5, pc}
   2c9ae:	bf00      	nop
   2c9b0:	fffcfffd 	.word	0xfffcfffd
   2c9b4:	00038688 	.word	0x00038688

0002c9b8 <blst_fp2_add>:
   2c9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c9bc:	b082      	sub	sp, #8
   2c9be:	4604      	mov	r4, r0
   2c9c0:	460d      	mov	r5, r1
   2c9c2:	4616      	mov	r6, r2
   2c9c4:	4f0a      	ldr	r7, [pc, #40]	; (2c9f0 <blst_fp2_add+0x38>)
   2c9c6:	f04f 080c 	mov.w	r8, #12
   2c9ca:	f8cd 8000 	str.w	r8, [sp]
   2c9ce:	463b      	mov	r3, r7
   2c9d0:	f7f4 f9a6 	bl	20d20 <add_mod_n>
   2c9d4:	f8cd 8000 	str.w	r8, [sp]
   2c9d8:	463b      	mov	r3, r7
   2c9da:	f106 0230 	add.w	r2, r6, #48	; 0x30
   2c9de:	f105 0130 	add.w	r1, r5, #48	; 0x30
   2c9e2:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2c9e6:	f7f4 f99b 	bl	20d20 <add_mod_n>
   2c9ea:	b002      	add	sp, #8
   2c9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c9f0:	00038688 	.word	0x00038688

0002c9f4 <blst_fp2_sub>:
   2c9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c9f8:	b082      	sub	sp, #8
   2c9fa:	4604      	mov	r4, r0
   2c9fc:	460d      	mov	r5, r1
   2c9fe:	4616      	mov	r6, r2
   2ca00:	4f0a      	ldr	r7, [pc, #40]	; (2ca2c <blst_fp2_sub+0x38>)
   2ca02:	f04f 080c 	mov.w	r8, #12
   2ca06:	f8cd 8000 	str.w	r8, [sp]
   2ca0a:	463b      	mov	r3, r7
   2ca0c:	f7f3 fe32 	bl	20674 <sub_mod_n>
   2ca10:	f8cd 8000 	str.w	r8, [sp]
   2ca14:	463b      	mov	r3, r7
   2ca16:	f106 0230 	add.w	r2, r6, #48	; 0x30
   2ca1a:	f105 0130 	add.w	r1, r5, #48	; 0x30
   2ca1e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2ca22:	f7f3 fe27 	bl	20674 <sub_mod_n>
   2ca26:	b002      	add	sp, #8
   2ca28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2ca2c:	00038688 	.word	0x00038688

0002ca30 <blst_fp2_mul_by_3>:
   2ca30:	b570      	push	{r4, r5, r6, lr}
   2ca32:	4604      	mov	r4, r0
   2ca34:	460d      	mov	r5, r1
   2ca36:	4e07      	ldr	r6, [pc, #28]	; (2ca54 <blst_fp2_mul_by_3+0x24>)
   2ca38:	230c      	movs	r3, #12
   2ca3a:	4632      	mov	r2, r6
   2ca3c:	f7f4 f9f8 	bl	20e30 <mul_by_3_mod_n>
   2ca40:	230c      	movs	r3, #12
   2ca42:	4632      	mov	r2, r6
   2ca44:	f105 0130 	add.w	r1, r5, #48	; 0x30
   2ca48:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2ca4c:	f7f4 f9f0 	bl	20e30 <mul_by_3_mod_n>
   2ca50:	bd70      	pop	{r4, r5, r6, pc}
   2ca52:	bf00      	nop
   2ca54:	00038688 	.word	0x00038688

0002ca58 <blst_fp2_mul_by_8>:
   2ca58:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ca5a:	b083      	sub	sp, #12
   2ca5c:	4604      	mov	r4, r0
   2ca5e:	460d      	mov	r5, r1
   2ca60:	4e08      	ldr	r6, [pc, #32]	; (2ca84 <blst_fp2_mul_by_8+0x2c>)
   2ca62:	270c      	movs	r7, #12
   2ca64:	9700      	str	r7, [sp, #0]
   2ca66:	4633      	mov	r3, r6
   2ca68:	2203      	movs	r2, #3
   2ca6a:	f7f4 fa81 	bl	20f70 <lshift_mod_n>
   2ca6e:	9700      	str	r7, [sp, #0]
   2ca70:	4633      	mov	r3, r6
   2ca72:	2203      	movs	r2, #3
   2ca74:	f105 0130 	add.w	r1, r5, #48	; 0x30
   2ca78:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2ca7c:	f7f4 fa78 	bl	20f70 <lshift_mod_n>
   2ca80:	b003      	add	sp, #12
   2ca82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ca84:	00038688 	.word	0x00038688

0002ca88 <blst_fp2_lshift>:
   2ca88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ca8c:	b082      	sub	sp, #8
   2ca8e:	4604      	mov	r4, r0
   2ca90:	460d      	mov	r5, r1
   2ca92:	4616      	mov	r6, r2
   2ca94:	4f0a      	ldr	r7, [pc, #40]	; (2cac0 <blst_fp2_lshift+0x38>)
   2ca96:	f04f 080c 	mov.w	r8, #12
   2ca9a:	f8cd 8000 	str.w	r8, [sp]
   2ca9e:	463b      	mov	r3, r7
   2caa0:	f7f4 fa66 	bl	20f70 <lshift_mod_n>
   2caa4:	f8cd 8000 	str.w	r8, [sp]
   2caa8:	463b      	mov	r3, r7
   2caaa:	4632      	mov	r2, r6
   2caac:	f105 0130 	add.w	r1, r5, #48	; 0x30
   2cab0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2cab4:	f7f4 fa5c 	bl	20f70 <lshift_mod_n>
   2cab8:	b002      	add	sp, #8
   2caba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2cabe:	bf00      	nop
   2cac0:	00038688 	.word	0x00038688

0002cac4 <blst_fp2_mul>:
   2cac4:	b500      	push	{lr}
   2cac6:	b083      	sub	sp, #12
   2cac8:	4b03      	ldr	r3, [pc, #12]	; (2cad8 <blst_fp2_mul+0x14>)
   2caca:	9300      	str	r3, [sp, #0]
   2cacc:	4b03      	ldr	r3, [pc, #12]	; (2cadc <blst_fp2_mul+0x18>)
   2cace:	f7f7 fc41 	bl	24354 <mul_mont_384x>
   2cad2:	b003      	add	sp, #12
   2cad4:	f85d fb04 	ldr.w	pc, [sp], #4
   2cad8:	fffcfffd 	.word	0xfffcfffd
   2cadc:	00038688 	.word	0x00038688

0002cae0 <blst_fp2_sqr>:
   2cae0:	b508      	push	{r3, lr}
   2cae2:	4b02      	ldr	r3, [pc, #8]	; (2caec <blst_fp2_sqr+0xc>)
   2cae4:	4a02      	ldr	r2, [pc, #8]	; (2caf0 <blst_fp2_sqr+0x10>)
   2cae6:	f7fa fec3 	bl	27870 <sqr_mont_384x>
   2caea:	bd08      	pop	{r3, pc}
   2caec:	fffcfffd 	.word	0xfffcfffd
   2caf0:	00038688 	.word	0x00038688

0002caf4 <blst_fp2_cneg>:
   2caf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2caf8:	b082      	sub	sp, #8
   2cafa:	4605      	mov	r5, r0
   2cafc:	460e      	mov	r6, r1
   2cafe:	1e54      	subs	r4, r2, #1
   2cb00:	ea24 0402 	bic.w	r4, r4, r2
   2cb04:	43e4      	mvns	r4, r4
   2cb06:	0fe4      	lsrs	r4, r4, #31
   2cb08:	4f0a      	ldr	r7, [pc, #40]	; (2cb34 <blst_fp2_cneg+0x40>)
   2cb0a:	f04f 080c 	mov.w	r8, #12
   2cb0e:	f8cd 8000 	str.w	r8, [sp]
   2cb12:	463b      	mov	r3, r7
   2cb14:	4622      	mov	r2, r4
   2cb16:	f7f4 ff97 	bl	21a48 <cneg_mod_n>
   2cb1a:	f8cd 8000 	str.w	r8, [sp]
   2cb1e:	463b      	mov	r3, r7
   2cb20:	4622      	mov	r2, r4
   2cb22:	f106 0130 	add.w	r1, r6, #48	; 0x30
   2cb26:	f105 0030 	add.w	r0, r5, #48	; 0x30
   2cb2a:	f7f4 ff8d 	bl	21a48 <cneg_mod_n>
   2cb2e:	b002      	add	sp, #8
   2cb30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2cb34:	00038688 	.word	0x00038688

0002cb38 <blst_p1_add>:
   2cb38:	b508      	push	{r3, lr}
   2cb3a:	f7f5 fc97 	bl	2246c <POINTonE1_add>
   2cb3e:	bd08      	pop	{r3, pc}

0002cb40 <blst_p1_add_or_double>:
   2cb40:	b508      	push	{r3, lr}
   2cb42:	2300      	movs	r3, #0
   2cb44:	f7f6 f9ea 	bl	22f1c <POINTonE1_dadd>
   2cb48:	bd08      	pop	{r3, pc}

0002cb4a <blst_p1_add_affine>:
   2cb4a:	b508      	push	{r3, lr}
   2cb4c:	f7f5 fac0 	bl	220d0 <POINTonE1_add_affine>
   2cb50:	bd08      	pop	{r3, pc}

0002cb52 <blst_p1_add_or_double_affine>:
   2cb52:	b508      	push	{r3, lr}
   2cb54:	f7f6 f870 	bl	22c38 <POINTonE1_dadd_affine>
   2cb58:	bd08      	pop	{r3, pc}

0002cb5a <blst_p1_double>:
   2cb5a:	b508      	push	{r3, lr}
   2cb5c:	f7f5 f982 	bl	21e64 <POINTonE1_double>
   2cb60:	bd08      	pop	{r3, pc}

0002cb62 <blst_p1_affine_is_equal>:
   2cb62:	b410      	push	{r4}
   2cb64:	1f02      	subs	r2, r0, #4
   2cb66:	3904      	subs	r1, #4
   2cb68:	f100 0c5c 	add.w	ip, r0, #92	; 0x5c
   2cb6c:	2000      	movs	r0, #0
   2cb6e:	f852 3f04 	ldr.w	r3, [r2, #4]!
   2cb72:	f851 4f04 	ldr.w	r4, [r1, #4]!
   2cb76:	4063      	eors	r3, r4
   2cb78:	4318      	orrs	r0, r3
   2cb7a:	4562      	cmp	r2, ip
   2cb7c:	d1f7      	bne.n	2cb6e <blst_p1_affine_is_equal+0xc>
   2cb7e:	1e43      	subs	r3, r0, #1
   2cb80:	ea23 0000 	bic.w	r0, r3, r0
   2cb84:	0fc0      	lsrs	r0, r0, #31
   2cb86:	bc10      	pop	{r4}
   2cb88:	4770      	bx	lr

0002cb8a <blst_p2_add>:
   2cb8a:	b508      	push	{r3, lr}
   2cb8c:	f7fb fd26 	bl	285dc <POINTonE2_add>
   2cb90:	bd08      	pop	{r3, pc}

0002cb92 <blst_p2_add_or_double>:
   2cb92:	b508      	push	{r3, lr}
   2cb94:	2300      	movs	r3, #0
   2cb96:	f7fb ffb1 	bl	28afc <POINTonE2_dadd>
   2cb9a:	bd08      	pop	{r3, pc}

0002cb9c <blst_p2_add_affine>:
   2cb9c:	b508      	push	{r3, lr}
   2cb9e:	f7ff fb87 	bl	2c2b0 <POINTonE2_add_affine>
   2cba2:	bd08      	pop	{r3, pc}

0002cba4 <blst_p2_add_or_double_affine>:
   2cba4:	b508      	push	{r3, lr}
   2cba6:	f7fe ff57 	bl	2ba58 <POINTonE2_dadd_affine>
   2cbaa:	bd08      	pop	{r3, pc}

0002cbac <blst_p2_double>:
   2cbac:	b508      	push	{r3, lr}
   2cbae:	f7fb fe9d 	bl	288ec <POINTonE2_double>
   2cbb2:	bd08      	pop	{r3, pc}

0002cbb4 <blst_p2_affine_is_equal>:
   2cbb4:	b410      	push	{r4}
   2cbb6:	1f02      	subs	r2, r0, #4
   2cbb8:	3904      	subs	r1, #4
   2cbba:	f100 0cbc 	add.w	ip, r0, #188	; 0xbc
   2cbbe:	2000      	movs	r0, #0
   2cbc0:	f852 3f04 	ldr.w	r3, [r2, #4]!
   2cbc4:	f851 4f04 	ldr.w	r4, [r1, #4]!
   2cbc8:	4063      	eors	r3, r4
   2cbca:	4318      	orrs	r0, r3
   2cbcc:	4562      	cmp	r2, ip
   2cbce:	d1f7      	bne.n	2cbc0 <blst_p2_affine_is_equal+0xc>
   2cbd0:	1e43      	subs	r3, r0, #1
   2cbd2:	ea23 0000 	bic.w	r0, r3, r0
   2cbd6:	0fc0      	lsrs	r0, r0, #31
   2cbd8:	bc10      	pop	{r4}
   2cbda:	4770      	bx	lr

0002cbdc <blst_scalar_from_uint32>:
   2cbdc:	4281      	cmp	r1, r0
   2cbde:	d014      	beq.n	2cc0a <blst_scalar_from_uint32+0x2e>
   2cbe0:	1d03      	adds	r3, r0, #4
   2cbe2:	3904      	subs	r1, #4
   2cbe4:	3024      	adds	r0, #36	; 0x24
   2cbe6:	f851 2f04 	ldr.w	r2, [r1, #4]!
   2cbea:	f803 2c04 	strb.w	r2, [r3, #-4]
   2cbee:	ea4f 2c12 	mov.w	ip, r2, lsr #8
   2cbf2:	f803 cc03 	strb.w	ip, [r3, #-3]
   2cbf6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   2cbfa:	f803 cc02 	strb.w	ip, [r3, #-2]
   2cbfe:	0e12      	lsrs	r2, r2, #24
   2cc00:	f803 2c01 	strb.w	r2, [r3, #-1]
   2cc04:	3304      	adds	r3, #4
   2cc06:	4283      	cmp	r3, r0
   2cc08:	d1ed      	bne.n	2cbe6 <blst_scalar_from_uint32+0xa>
   2cc0a:	4770      	bx	lr

0002cc0c <blst_uint32_from_scalar>:
   2cc0c:	4288      	cmp	r0, r1
   2cc0e:	d019      	beq.n	2cc44 <blst_uint32_from_scalar+0x38>
   2cc10:	b500      	push	{lr}
   2cc12:	1d0a      	adds	r2, r1, #4
   2cc14:	3804      	subs	r0, #4
   2cc16:	3124      	adds	r1, #36	; 0x24
   2cc18:	f812 cc04 	ldrb.w	ip, [r2, #-4]
   2cc1c:	f812 ec03 	ldrb.w	lr, [r2, #-3]
   2cc20:	f812 3c02 	ldrb.w	r3, [r2, #-2]
   2cc24:	041b      	lsls	r3, r3, #16
   2cc26:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
   2cc2a:	ea43 030c 	orr.w	r3, r3, ip
   2cc2e:	f812 cc01 	ldrb.w	ip, [r2, #-1]
   2cc32:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   2cc36:	f840 3f04 	str.w	r3, [r0, #4]!
   2cc3a:	3204      	adds	r2, #4
   2cc3c:	428a      	cmp	r2, r1
   2cc3e:	d1eb      	bne.n	2cc18 <blst_uint32_from_scalar+0xc>
   2cc40:	f85d fb04 	ldr.w	pc, [sp], #4
   2cc44:	4770      	bx	lr

0002cc46 <blst_scalar_from_uint64>:
   2cc46:	4281      	cmp	r1, r0
   2cc48:	d026      	beq.n	2cc98 <blst_scalar_from_uint64+0x52>
   2cc4a:	b500      	push	{lr}
   2cc4c:	f100 0308 	add.w	r3, r0, #8
   2cc50:	f1a1 0c08 	sub.w	ip, r1, #8
   2cc54:	3028      	adds	r0, #40	; 0x28
   2cc56:	f85c 1f08 	ldr.w	r1, [ip, #8]!
   2cc5a:	f8dc 2004 	ldr.w	r2, [ip, #4]
   2cc5e:	f803 1c08 	strb.w	r1, [r3, #-8]
   2cc62:	ea4f 2e11 	mov.w	lr, r1, lsr #8
   2cc66:	f803 ec07 	strb.w	lr, [r3, #-7]
   2cc6a:	ea4f 4e11 	mov.w	lr, r1, lsr #16
   2cc6e:	f803 ec06 	strb.w	lr, [r3, #-6]
   2cc72:	0e09      	lsrs	r1, r1, #24
   2cc74:	f803 1c05 	strb.w	r1, [r3, #-5]
   2cc78:	f803 2c04 	strb.w	r2, [r3, #-4]
   2cc7c:	0a11      	lsrs	r1, r2, #8
   2cc7e:	f803 1c03 	strb.w	r1, [r3, #-3]
   2cc82:	0c11      	lsrs	r1, r2, #16
   2cc84:	f803 1c02 	strb.w	r1, [r3, #-2]
   2cc88:	0e12      	lsrs	r2, r2, #24
   2cc8a:	f803 2c01 	strb.w	r2, [r3, #-1]
   2cc8e:	3308      	adds	r3, #8
   2cc90:	4283      	cmp	r3, r0
   2cc92:	d1e0      	bne.n	2cc56 <blst_scalar_from_uint64+0x10>
   2cc94:	f85d fb04 	ldr.w	pc, [sp], #4
   2cc98:	4770      	bx	lr

0002cc9a <blst_uint64_from_scalar>:
   2cc9a:	4288      	cmp	r0, r1
   2cc9c:	d029      	beq.n	2ccf2 <blst_uint64_from_scalar+0x58>
   2cc9e:	b500      	push	{lr}
   2cca0:	f101 0308 	add.w	r3, r1, #8
   2cca4:	3808      	subs	r0, #8
   2cca6:	f101 0c28 	add.w	ip, r1, #40	; 0x28
   2ccaa:	f813 1c08 	ldrb.w	r1, [r3, #-8]
   2ccae:	f813 ec07 	ldrb.w	lr, [r3, #-7]
   2ccb2:	f813 2c06 	ldrb.w	r2, [r3, #-6]
   2ccb6:	0412      	lsls	r2, r2, #16
   2ccb8:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
   2ccbc:	430a      	orrs	r2, r1
   2ccbe:	f813 1c05 	ldrb.w	r1, [r3, #-5]
   2ccc2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   2ccc6:	f813 1c04 	ldrb.w	r1, [r3, #-4]
   2ccca:	f813 ec03 	ldrb.w	lr, [r3, #-3]
   2ccce:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
   2ccd2:	f813 ec02 	ldrb.w	lr, [r3, #-2]
   2ccd6:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
   2ccda:	f813 ec01 	ldrb.w	lr, [r3, #-1]
   2ccde:	ea41 610e 	orr.w	r1, r1, lr, lsl #24
   2cce2:	f840 2f08 	str.w	r2, [r0, #8]!
   2cce6:	6041      	str	r1, [r0, #4]
   2cce8:	3308      	adds	r3, #8
   2ccea:	4563      	cmp	r3, ip
   2ccec:	d1dd      	bne.n	2ccaa <blst_uint64_from_scalar+0x10>
   2ccee:	f85d fb04 	ldr.w	pc, [sp], #4
   2ccf2:	4770      	bx	lr

0002ccf4 <blst_scalar_from_bendian>:
   2ccf4:	b510      	push	{r4, lr}
   2ccf6:	b088      	sub	sp, #32
   2ccf8:	468e      	mov	lr, r1
   2ccfa:	f101 0420 	add.w	r4, r1, #32
   2ccfe:	460a      	mov	r2, r1
   2cd00:	2100      	movs	r1, #0
   2cd02:	f10e 0e1f 	add.w	lr, lr, #31
   2cd06:	ebae 0302 	sub.w	r3, lr, r2
   2cd0a:	f812 cb01 	ldrb.w	ip, [r2], #1
   2cd0e:	ea4c 2101 	orr.w	r1, ip, r1, lsl #8
   2cd12:	f023 0303 	bic.w	r3, r3, #3
   2cd16:	f10d 0c20 	add.w	ip, sp, #32
   2cd1a:	4463      	add	r3, ip
   2cd1c:	f843 1c20 	str.w	r1, [r3, #-32]
   2cd20:	42a2      	cmp	r2, r4
   2cd22:	d1f0      	bne.n	2cd06 <blst_scalar_from_bendian+0x12>
   2cd24:	46ec      	mov	ip, sp
   2cd26:	4560      	cmp	r0, ip
   2cd28:	d005      	beq.n	2cd36 <blst_scalar_from_bendian+0x42>
   2cd2a:	1d01      	adds	r1, r0, #4
   2cd2c:	f1ad 0004 	sub.w	r0, sp, #4
   2cd30:	f10c 041c 	add.w	r4, ip, #28
   2cd34:	e00c      	b.n	2cd50 <blst_scalar_from_bendian+0x5c>
   2cd36:	f10c 0220 	add.w	r2, ip, #32
   2cd3a:	2300      	movs	r3, #0
   2cd3c:	f84c 3b04 	str.w	r3, [ip], #4
   2cd40:	4562      	cmp	r2, ip
   2cd42:	d1fb      	bne.n	2cd3c <blst_scalar_from_bendian+0x48>
   2cd44:	466b      	mov	r3, sp
   2cd46:	b008      	add	sp, #32
   2cd48:	bd10      	pop	{r4, pc}
   2cd4a:	3104      	adds	r1, #4
   2cd4c:	42a0      	cmp	r0, r4
   2cd4e:	d0f2      	beq.n	2cd36 <blst_scalar_from_bendian+0x42>
   2cd50:	1f0a      	subs	r2, r1, #4
   2cd52:	f850 3f04 	ldr.w	r3, [r0, #4]!
   2cd56:	f802 3b01 	strb.w	r3, [r2], #1
   2cd5a:	0a1b      	lsrs	r3, r3, #8
   2cd5c:	428a      	cmp	r2, r1
   2cd5e:	d1fa      	bne.n	2cd56 <blst_scalar_from_bendian+0x62>
   2cd60:	e7f3      	b.n	2cd4a <blst_scalar_from_bendian+0x56>

0002cd62 <blst_bendian_from_scalar>:
   2cd62:	b510      	push	{r4, lr}
   2cd64:	b088      	sub	sp, #32
   2cd66:	f101 0220 	add.w	r2, r1, #32
   2cd6a:	2400      	movs	r4, #0
   2cd6c:	ea6f 0e01 	mvn.w	lr, r1
   2cd70:	eb0e 0302 	add.w	r3, lr, r2
   2cd74:	f812 cd01 	ldrb.w	ip, [r2, #-1]!
   2cd78:	ea4c 2404 	orr.w	r4, ip, r4, lsl #8
   2cd7c:	f023 0303 	bic.w	r3, r3, #3
   2cd80:	f10d 0c20 	add.w	ip, sp, #32
   2cd84:	4463      	add	r3, ip
   2cd86:	f843 4c20 	str.w	r4, [r3, #-32]
   2cd8a:	428a      	cmp	r2, r1
   2cd8c:	d1f0      	bne.n	2cd70 <blst_bendian_from_scalar+0xe>
   2cd8e:	f100 0420 	add.w	r4, r0, #32
   2cd92:	4602      	mov	r2, r0
   2cd94:	301f      	adds	r0, #31
   2cd96:	1a83      	subs	r3, r0, r2
   2cd98:	f023 0103 	bic.w	r1, r3, #3
   2cd9c:	f10d 0c20 	add.w	ip, sp, #32
   2cda0:	4461      	add	r1, ip
   2cda2:	f003 0303 	and.w	r3, r3, #3
   2cda6:	00db      	lsls	r3, r3, #3
   2cda8:	f851 1c20 	ldr.w	r1, [r1, #-32]
   2cdac:	fa21 f303 	lsr.w	r3, r1, r3
   2cdb0:	f802 3b01 	strb.w	r3, [r2], #1
   2cdb4:	42a2      	cmp	r2, r4
   2cdb6:	d1ee      	bne.n	2cd96 <blst_bendian_from_scalar+0x34>
   2cdb8:	466b      	mov	r3, sp
   2cdba:	4661      	mov	r1, ip
   2cdbc:	2200      	movs	r2, #0
   2cdbe:	f843 2b04 	str.w	r2, [r3], #4
   2cdc2:	4299      	cmp	r1, r3
   2cdc4:	d1fb      	bne.n	2cdbe <blst_bendian_from_scalar+0x5c>
   2cdc6:	466b      	mov	r3, sp
   2cdc8:	b008      	add	sp, #32
   2cdca:	bd10      	pop	{r4, pc}

0002cdcc <blst_scalar_from_lendian>:
   2cdcc:	4288      	cmp	r0, r1
   2cdce:	d009      	beq.n	2cde4 <blst_scalar_from_lendian+0x18>
   2cdd0:	1e4b      	subs	r3, r1, #1
   2cdd2:	1e42      	subs	r2, r0, #1
   2cdd4:	f101 001f 	add.w	r0, r1, #31
   2cdd8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   2cddc:	f802 1f01 	strb.w	r1, [r2, #1]!
   2cde0:	4283      	cmp	r3, r0
   2cde2:	d1f9      	bne.n	2cdd8 <blst_scalar_from_lendian+0xc>
   2cde4:	4770      	bx	lr

0002cde6 <blst_lendian_from_scalar>:
   2cde6:	4288      	cmp	r0, r1
   2cde8:	d009      	beq.n	2cdfe <blst_lendian_from_scalar+0x18>
   2cdea:	1e4b      	subs	r3, r1, #1
   2cdec:	1e42      	subs	r2, r0, #1
   2cdee:	f101 001f 	add.w	r0, r1, #31
   2cdf2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   2cdf6:	f802 1f01 	strb.w	r1, [r2, #1]!
   2cdfa:	4283      	cmp	r3, r0
   2cdfc:	d1f9      	bne.n	2cdf2 <blst_lendian_from_scalar+0xc>
   2cdfe:	4770      	bx	lr

0002ce00 <blst_scalar_fr_check>:
   2ce00:	b530      	push	{r4, r5, lr}
   2ce02:	b093      	sub	sp, #76	; 0x4c
   2ce04:	4605      	mov	r5, r0
   2ce06:	2220      	movs	r2, #32
   2ce08:	2100      	movs	r1, #0
   2ce0a:	a802      	add	r0, sp, #8
   2ce0c:	f00a fc2b 	bl	37666 <memset>
   2ce10:	f105 0220 	add.w	r2, r5, #32
   2ce14:	2100      	movs	r1, #0
   2ce16:	43e8      	mvns	r0, r5
   2ce18:	1883      	adds	r3, r0, r2
   2ce1a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2ce1e:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
   2ce22:	f023 0303 	bic.w	r3, r3, #3
   2ce26:	ac12      	add	r4, sp, #72	; 0x48
   2ce28:	4423      	add	r3, r4
   2ce2a:	f843 1c20 	str.w	r1, [r3, #-32]
   2ce2e:	42aa      	cmp	r2, r5
   2ce30:	d1f2      	bne.n	2ce18 <blst_scalar_fr_check+0x18>
   2ce32:	2308      	movs	r3, #8
   2ce34:	9300      	str	r3, [sp, #0]
   2ce36:	4b15      	ldr	r3, [pc, #84]	; (2ce8c <blst_scalar_fr_check+0x8c>)
   2ce38:	aa0a      	add	r2, sp, #40	; 0x28
   2ce3a:	a902      	add	r1, sp, #8
   2ce3c:	4608      	mov	r0, r1
   2ce3e:	f7f3 ff6f 	bl	20d20 <add_mod_n>
   2ce42:	a901      	add	r1, sp, #4
   2ce44:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
   2ce48:	aa02      	add	r2, sp, #8
   2ce4a:	4665      	mov	r5, ip
   2ce4c:	2000      	movs	r0, #0
   2ce4e:	f851 3f04 	ldr.w	r3, [r1, #4]!
   2ce52:	f85c 4f04 	ldr.w	r4, [ip, #4]!
   2ce56:	4063      	eors	r3, r4
   2ce58:	4318      	orrs	r0, r3
   2ce5a:	42a9      	cmp	r1, r5
   2ce5c:	d1f7      	bne.n	2ce4e <blst_scalar_fr_check+0x4e>
   2ce5e:	1e43      	subs	r3, r0, #1
   2ce60:	ea23 0000 	bic.w	r0, r3, r0
   2ce64:	0fc0      	lsrs	r0, r0, #31
   2ce66:	f102 0120 	add.w	r1, r2, #32
   2ce6a:	2300      	movs	r3, #0
   2ce6c:	f842 3b04 	str.w	r3, [r2], #4
   2ce70:	428a      	cmp	r2, r1
   2ce72:	d1fb      	bne.n	2ce6c <blst_scalar_fr_check+0x6c>
   2ce74:	ab02      	add	r3, sp, #8
   2ce76:	ab0a      	add	r3, sp, #40	; 0x28
   2ce78:	a912      	add	r1, sp, #72	; 0x48
   2ce7a:	2200      	movs	r2, #0
   2ce7c:	f843 2b04 	str.w	r2, [r3], #4
   2ce80:	4299      	cmp	r1, r3
   2ce82:	d1fb      	bne.n	2ce7c <blst_scalar_fr_check+0x7c>
   2ce84:	ab0a      	add	r3, sp, #40	; 0x28
   2ce86:	b013      	add	sp, #76	; 0x4c
   2ce88:	bd30      	pop	{r4, r5, pc}
   2ce8a:	bf00      	nop
   2ce8c:	00039a48 	.word	0x00039a48

0002ce90 <blst_sk_check>:
   2ce90:	b508      	push	{r3, lr}
   2ce92:	2208      	movs	r2, #8
   2ce94:	4901      	ldr	r1, [pc, #4]	; (2ce9c <blst_sk_check+0xc>)
   2ce96:	f7f3 fc26 	bl	206e6 <check_mod_n>
   2ce9a:	bd08      	pop	{r3, pc}
   2ce9c:	00039a48 	.word	0x00039a48

0002cea0 <blst_fr_from_uint64>:
   2cea0:	b500      	push	{lr}
   2cea2:	b083      	sub	sp, #12
   2cea4:	4a07      	ldr	r2, [pc, #28]	; (2cec4 <blst_fr_from_uint64+0x24>)
   2cea6:	2308      	movs	r3, #8
   2cea8:	9301      	str	r3, [sp, #4]
   2ceaa:	f04f 33ff 	mov.w	r3, #4294967295
   2ceae:	9300      	str	r3, [sp, #0]
   2ceb0:	f502 7332 	add.w	r3, r2, #712	; 0x2c8
   2ceb4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
   2ceb8:	f7f3 fd8a 	bl	209d0 <mul_mont_n>
   2cebc:	b003      	add	sp, #12
   2cebe:	f85d fb04 	ldr.w	pc, [sp], #4
   2cec2:	bf00      	nop
   2cec4:	00039780 	.word	0x00039780

0002cec8 <blst_uint64_from_fr>:
   2cec8:	b500      	push	{lr}
   2ceca:	b083      	sub	sp, #12
   2cecc:	2308      	movs	r3, #8
   2cece:	9300      	str	r3, [sp, #0]
   2ced0:	f04f 33ff 	mov.w	r3, #4294967295
   2ced4:	4a02      	ldr	r2, [pc, #8]	; (2cee0 <blst_uint64_from_fr+0x18>)
   2ced6:	f7f4 f8ad 	bl	21034 <from_mont_n>
   2ceda:	b003      	add	sp, #12
   2cedc:	f85d fb04 	ldr.w	pc, [sp], #4
   2cee0:	00039a48 	.word	0x00039a48

0002cee4 <blst_fr_from_scalar>:
   2cee4:	b510      	push	{r4, lr}
   2cee6:	b082      	sub	sp, #8
   2cee8:	f101 0320 	add.w	r3, r1, #32
   2ceec:	2400      	movs	r4, #0
   2ceee:	ea6f 0e01 	mvn.w	lr, r1
   2cef2:	eb0e 0203 	add.w	r2, lr, r3
   2cef6:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   2cefa:	ea4c 2404 	orr.w	r4, ip, r4, lsl #8
   2cefe:	f022 0203 	bic.w	r2, r2, #3
   2cf02:	5084      	str	r4, [r0, r2]
   2cf04:	428b      	cmp	r3, r1
   2cf06:	d1f4      	bne.n	2cef2 <blst_fr_from_scalar+0xe>
   2cf08:	4a07      	ldr	r2, [pc, #28]	; (2cf28 <blst_fr_from_scalar+0x44>)
   2cf0a:	2308      	movs	r3, #8
   2cf0c:	9301      	str	r3, [sp, #4]
   2cf0e:	f04f 33ff 	mov.w	r3, #4294967295
   2cf12:	9300      	str	r3, [sp, #0]
   2cf14:	f502 7332 	add.w	r3, r2, #712	; 0x2c8
   2cf18:	f502 6288 	add.w	r2, r2, #1088	; 0x440
   2cf1c:	4601      	mov	r1, r0
   2cf1e:	f7f3 fd57 	bl	209d0 <mul_mont_n>
   2cf22:	b002      	add	sp, #8
   2cf24:	bd10      	pop	{r4, pc}
   2cf26:	bf00      	nop
   2cf28:	00039780 	.word	0x00039780

0002cf2c <blst_scalar_from_fr>:
   2cf2c:	b530      	push	{r4, r5, lr}
   2cf2e:	b08b      	sub	sp, #44	; 0x2c
   2cf30:	4604      	mov	r4, r0
   2cf32:	ad02      	add	r5, sp, #8
   2cf34:	2308      	movs	r3, #8
   2cf36:	9300      	str	r3, [sp, #0]
   2cf38:	f04f 33ff 	mov.w	r3, #4294967295
   2cf3c:	4a10      	ldr	r2, [pc, #64]	; (2cf80 <blst_scalar_from_fr+0x54>)
   2cf3e:	4628      	mov	r0, r5
   2cf40:	f7f4 f878 	bl	21034 <from_mont_n>
   2cf44:	4628      	mov	r0, r5
   2cf46:	42ac      	cmp	r4, r5
   2cf48:	d004      	beq.n	2cf54 <blst_scalar_from_fr+0x28>
   2cf4a:	1d21      	adds	r1, r4, #4
   2cf4c:	ac01      	add	r4, sp, #4
   2cf4e:	f105 0c1c 	add.w	ip, r5, #28
   2cf52:	e00c      	b.n	2cf6e <blst_scalar_from_fr+0x42>
   2cf54:	f100 0220 	add.w	r2, r0, #32
   2cf58:	2300      	movs	r3, #0
   2cf5a:	f840 3b04 	str.w	r3, [r0], #4
   2cf5e:	4290      	cmp	r0, r2
   2cf60:	d1fb      	bne.n	2cf5a <blst_scalar_from_fr+0x2e>
   2cf62:	ab02      	add	r3, sp, #8
   2cf64:	b00b      	add	sp, #44	; 0x2c
   2cf66:	bd30      	pop	{r4, r5, pc}
   2cf68:	3104      	adds	r1, #4
   2cf6a:	4564      	cmp	r4, ip
   2cf6c:	d0f2      	beq.n	2cf54 <blst_scalar_from_fr+0x28>
   2cf6e:	1f0a      	subs	r2, r1, #4
   2cf70:	f854 3f04 	ldr.w	r3, [r4, #4]!
   2cf74:	f802 3b01 	strb.w	r3, [r2], #1
   2cf78:	0a1b      	lsrs	r3, r3, #8
   2cf7a:	428a      	cmp	r2, r1
   2cf7c:	d1fa      	bne.n	2cf74 <blst_scalar_from_fr+0x48>
   2cf7e:	e7f3      	b.n	2cf68 <blst_scalar_from_fr+0x3c>
   2cf80:	00039a48 	.word	0x00039a48

0002cf84 <blst_scalar_from_hexascii>:
   2cf84:	b508      	push	{r3, lr}
   2cf86:	460a      	mov	r2, r1
   2cf88:	2120      	movs	r1, #32
   2cf8a:	f7f3 fcdd 	bl	20948 <limbs_from_hexascii>
   2cf8e:	bd08      	pop	{r3, pc}

0002cf90 <blst_fp_from_hexascii>:
   2cf90:	b510      	push	{r4, lr}
   2cf92:	b082      	sub	sp, #8
   2cf94:	4604      	mov	r4, r0
   2cf96:	460a      	mov	r2, r1
   2cf98:	2130      	movs	r1, #48	; 0x30
   2cf9a:	f7f3 fcd5 	bl	20948 <limbs_from_hexascii>
   2cf9e:	4b06      	ldr	r3, [pc, #24]	; (2cfb8 <blst_fp_from_hexascii+0x28>)
   2cfa0:	220c      	movs	r2, #12
   2cfa2:	9201      	str	r2, [sp, #4]
   2cfa4:	4a05      	ldr	r2, [pc, #20]	; (2cfbc <blst_fp_from_hexascii+0x2c>)
   2cfa6:	9200      	str	r2, [sp, #0]
   2cfa8:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
   2cfac:	4621      	mov	r1, r4
   2cfae:	4620      	mov	r0, r4
   2cfb0:	f7f3 fd0e 	bl	209d0 <mul_mont_n>
   2cfb4:	b002      	add	sp, #8
   2cfb6:	bd10      	pop	{r4, pc}
   2cfb8:	00038688 	.word	0x00038688
   2cfbc:	fffcfffd 	.word	0xfffcfffd

0002cfc0 <blst_uniq_sizeof>:
   2cfc0:	0100      	lsls	r0, r0, #4
   2cfc2:	3008      	adds	r0, #8
   2cfc4:	4770      	bx	lr

0002cfc6 <blst_uniq_init>:
   2cfc6:	2300      	movs	r3, #0
   2cfc8:	6003      	str	r3, [r0, #0]
   2cfca:	6043      	str	r3, [r0, #4]
   2cfcc:	4770      	bx	lr

0002cfce <blst_uniq_test>:
   2cfce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2cfd2:	b0a8      	sub	sp, #160	; 0xa0
   2cfd4:	4607      	mov	r7, r0
   2cfd6:	4688      	mov	r8, r1
   2cfd8:	4615      	mov	r5, r2
   2cfda:	6801      	ldr	r1, [r0, #0]
   2cfdc:	2900      	cmp	r1, #0
   2cfde:	f000 80ac 	beq.w	2d13a <blst_uniq_test+0x16c>
   2cfe2:	f10d 0920 	add.w	r9, sp, #32
   2cfe6:	466e      	mov	r6, sp
   2cfe8:	2400      	movs	r4, #0
   2cfea:	e014      	b.n	2d016 <blst_uniq_test+0x48>
   2cfec:	eba0 000e 	sub.w	r0, r0, lr
   2cff0:	e001      	b.n	2cff6 <blst_uniq_test+0x28>
   2cff2:	eba5 000a 	sub.w	r0, r5, sl
   2cff6:	2800      	cmp	r0, #0
   2cff8:	f000 80b7 	beq.w	2d16a <blst_uniq_test+0x19c>
   2cffc:	f849 1b04 	str.w	r1, [r9], #4
   2d000:	2800      	cmp	r0, #0
   2d002:	bfd4      	ite	le
   2d004:	2000      	movle	r0, #0
   2d006:	2001      	movgt	r0, #1
   2d008:	f806 0b01 	strb.w	r0, [r6], #1
   2d00c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   2d010:	1c63      	adds	r3, r4, #1
   2d012:	b1c1      	cbz	r1, 2d046 <blst_uniq_test+0x78>
   2d014:	461c      	mov	r4, r3
   2d016:	688a      	ldr	r2, [r1, #8]
   2d018:	68cb      	ldr	r3, [r1, #12]
   2d01a:	ea4f 0a53 	mov.w	sl, r3, lsr #1
   2d01e:	4628      	mov	r0, r5
   2d020:	4555      	cmp	r5, sl
   2d022:	bf28      	it	cs
   2d024:	4650      	movcs	r0, sl
   2d026:	2800      	cmp	r0, #0
   2d028:	d0e3      	beq.n	2cff2 <blst_uniq_test+0x24>
   2d02a:	f108 33ff 	add.w	r3, r8, #4294967295
   2d02e:	f102 3cff 	add.w	ip, r2, #4294967295
   2d032:	181a      	adds	r2, r3, r0
   2d034:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   2d038:	f81c ef01 	ldrb.w	lr, [ip, #1]!
   2d03c:	4570      	cmp	r0, lr
   2d03e:	d1d5      	bne.n	2cfec <blst_uniq_test+0x1e>
   2d040:	4293      	cmp	r3, r2
   2d042:	d1f7      	bne.n	2d034 <blst_uniq_test+0x66>
   2d044:	e7d5      	b.n	2cff2 <blst_uniq_test+0x24>
   2d046:	687a      	ldr	r2, [r7, #4]
   2d048:	1c51      	adds	r1, r2, #1
   2d04a:	6079      	str	r1, [r7, #4]
   2d04c:	0112      	lsls	r2, r2, #4
   2d04e:	f102 0108 	add.w	r1, r2, #8
   2d052:	4439      	add	r1, r7
   2d054:	443a      	add	r2, r7
   2d056:	2000      	movs	r0, #0
   2d058:	60d0      	str	r0, [r2, #12]
   2d05a:	6090      	str	r0, [r2, #8]
   2d05c:	f8c2 8010 	str.w	r8, [r2, #16]
   2d060:	0068      	lsls	r0, r5, #1
   2d062:	f040 0001 	orr.w	r0, r0, #1
   2d066:	6150      	str	r0, [r2, #20]
   2d068:	2b00      	cmp	r3, #0
   2d06a:	d077      	beq.n	2d15c <blst_uniq_test+0x18e>
   2d06c:	aa28      	add	r2, sp, #160	; 0xa0
   2d06e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
   2d072:	f852 2c80 	ldr.w	r2, [r2, #-128]
   2d076:	a828      	add	r0, sp, #160	; 0xa0
   2d078:	4404      	add	r4, r0
   2d07a:	f814 0ca0 	ldrb.w	r0, [r4, #-160]
   2d07e:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
   2d082:	2b01      	cmp	r3, #1
   2d084:	d96b      	bls.n	2d15e <blst_uniq_test+0x190>
   2d086:	aa08      	add	r2, sp, #32
   2d088:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   2d08c:	f103 3eff 	add.w	lr, r3, #4294967295
   2d090:	f851 4c04 	ldr.w	r4, [r1, #-4]
   2d094:	68e2      	ldr	r2, [r4, #12]
   2d096:	f012 0f01 	tst.w	r2, #1
   2d09a:	d060      	beq.n	2d15e <blst_uniq_test+0x190>
   2d09c:	eb0d 0203 	add.w	r2, sp, r3
   2d0a0:	f812 cc02 	ldrb.w	ip, [r2, #-2]
   2d0a4:	f851 0c08 	ldr.w	r0, [r1, #-8]
   2d0a8:	f08c 0501 	eor.w	r5, ip, #1
   2d0ac:	f850 2025 	ldr.w	r2, [r0, r5, lsl #2]
   2d0b0:	b1a2      	cbz	r2, 2d0dc <blst_uniq_test+0x10e>
   2d0b2:	68d6      	ldr	r6, [r2, #12]
   2d0b4:	f016 0f01 	tst.w	r6, #1
   2d0b8:	d010      	beq.n	2d0dc <blst_uniq_test+0x10e>
   2d0ba:	68c5      	ldr	r5, [r0, #12]
   2d0bc:	f045 0501 	orr.w	r5, r5, #1
   2d0c0:	60c5      	str	r5, [r0, #12]
   2d0c2:	68e0      	ldr	r0, [r4, #12]
   2d0c4:	f020 0001 	bic.w	r0, r0, #1
   2d0c8:	60e0      	str	r0, [r4, #12]
   2d0ca:	68d0      	ldr	r0, [r2, #12]
   2d0cc:	f020 0001 	bic.w	r0, r0, #1
   2d0d0:	60d0      	str	r0, [r2, #12]
   2d0d2:	3b02      	subs	r3, #2
   2d0d4:	3908      	subs	r1, #8
   2d0d6:	2b01      	cmp	r3, #1
   2d0d8:	d8d8      	bhi.n	2d08c <blst_uniq_test+0xbe>
   2d0da:	e040      	b.n	2d15e <blst_uniq_test+0x190>
   2d0dc:	aa28      	add	r2, sp, #160	; 0xa0
   2d0de:	4496      	add	lr, r2
   2d0e0:	f81e 2ca0 	ldrb.w	r2, [lr, #-160]
   2d0e4:	4562      	cmp	r2, ip
   2d0e6:	d024      	beq.n	2d132 <blst_uniq_test+0x164>
   2d0e8:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
   2d0ec:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
   2d0f0:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   2d0f4:	f842 402c 	str.w	r4, [r2, ip, lsl #2]
   2d0f8:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
   2d0fc:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
   2d100:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
   2d104:	68c1      	ldr	r1, [r0, #12]
   2d106:	f041 0101 	orr.w	r1, r1, #1
   2d10a:	60c1      	str	r1, [r0, #12]
   2d10c:	68d1      	ldr	r1, [r2, #12]
   2d10e:	f021 0101 	bic.w	r1, r1, #1
   2d112:	60d1      	str	r1, [r2, #12]
   2d114:	2b02      	cmp	r3, #2
   2d116:	d90e      	bls.n	2d136 <blst_uniq_test+0x168>
   2d118:	3b03      	subs	r3, #3
   2d11a:	a928      	add	r1, sp, #160	; 0xa0
   2d11c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   2d120:	f851 1c80 	ldr.w	r1, [r1, #-128]
   2d124:	a828      	add	r0, sp, #160	; 0xa0
   2d126:	4403      	add	r3, r0
   2d128:	f813 3ca0 	ldrb.w	r3, [r3, #-160]
   2d12c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   2d130:	e015      	b.n	2d15e <blst_uniq_test+0x190>
   2d132:	4622      	mov	r2, r4
   2d134:	e7e0      	b.n	2d0f8 <blst_uniq_test+0x12a>
   2d136:	603a      	str	r2, [r7, #0]
   2d138:	e011      	b.n	2d15e <blst_uniq_test+0x190>
   2d13a:	6842      	ldr	r2, [r0, #4]
   2d13c:	1c53      	adds	r3, r2, #1
   2d13e:	6043      	str	r3, [r0, #4]
   2d140:	0112      	lsls	r2, r2, #4
   2d142:	f102 0108 	add.w	r1, r2, #8
   2d146:	4401      	add	r1, r0
   2d148:	4402      	add	r2, r0
   2d14a:	2300      	movs	r3, #0
   2d14c:	60d3      	str	r3, [r2, #12]
   2d14e:	6093      	str	r3, [r2, #8]
   2d150:	f8c2 8010 	str.w	r8, [r2, #16]
   2d154:	006b      	lsls	r3, r5, #1
   2d156:	f043 0301 	orr.w	r3, r3, #1
   2d15a:	6153      	str	r3, [r2, #20]
   2d15c:	6039      	str	r1, [r7, #0]
   2d15e:	683a      	ldr	r2, [r7, #0]
   2d160:	68d3      	ldr	r3, [r2, #12]
   2d162:	f023 0301 	bic.w	r3, r3, #1
   2d166:	60d3      	str	r3, [r2, #12]
   2d168:	2001      	movs	r0, #1
   2d16a:	b028      	add	sp, #160	; 0xa0
   2d16c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002d170 <z_impl_clock_gettime>:
int z_impl_clock_gettime(clockid_t clock_id, struct timespec *ts)
{
	uint64_t elapsed_nsecs;
	struct timespec base;

	switch (clock_id) {
   2d170:	2801      	cmp	r0, #1
{
   2d172:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d176:	460d      	mov	r5, r1
	switch (clock_id) {
   2d178:	d009      	beq.n	2d18e <z_impl_clock_gettime+0x1e>
   2d17a:	2804      	cmp	r0, #4
   2d17c:	d03a      	beq.n	2d1f4 <z_impl_clock_gettime+0x84>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2d17e:	f006 fa83 	bl	33688 <z_impl_z_errno>
	case CLOCK_REALTIME:
		base = rt_clock_base;
		break;

	default:
		errno = EINVAL;
   2d182:	2316      	movs	r3, #22
   2d184:	6003      	str	r3, [r0, #0]
   2d186:	f04f 30ff 	mov.w	r0, #4294967295
		ts->tv_sec++;
		ts->tv_nsec -= NSEC_PER_SEC;
	}

	return 0;
}
   2d18a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		base = rt_clock_base;
   2d18e:	4b1e      	ldr	r3, [pc, #120]	; (2d208 <z_impl_clock_gettime+0x98>)
   2d190:	689e      	ldr	r6, [r3, #8]
   2d192:	e9d3 4800 	ldrd	r4, r8, [r3]
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
   2d196:	f00a feaa 	bl	37eee <z_impl_k_uptime_ticks>
   2d19a:	460b      	mov	r3, r1
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   2d19c:	4f1b      	ldr	r7, [pc, #108]	; (2d20c <z_impl_clock_gettime+0x9c>)
   2d19e:	fba0 0107 	umull	r0, r1, r0, r7
   2d1a2:	fb07 1103 	mla	r1, r7, r3, r1
	ts->tv_sec = (int32_t) (elapsed_nsecs / NSEC_PER_SEC);
   2d1a6:	a316      	add	r3, pc, #88	; (adr r3, 2d200 <z_impl_clock_gettime+0x90>)
   2d1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   2d1ac:	ea4f 39d0 	mov.w	r9, r0, lsr #15
   2d1b0:	ea49 4941 	orr.w	r9, r9, r1, lsl #17
   2d1b4:	ea4f 3ad1 	mov.w	sl, r1, lsr #15
   2d1b8:	4648      	mov	r0, r9
   2d1ba:	4651      	mov	r1, sl
   2d1bc:	f7f3 f890 	bl	202e0 <__aeabi_uldivmod>
	ts->tv_nsec = (int32_t) (elapsed_nsecs % NSEC_PER_SEC);
   2d1c0:	a30f      	add	r3, pc, #60	; (adr r3, 2d200 <z_impl_clock_gettime+0x90>)
   2d1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
	ts->tv_sec += base.tv_sec;
   2d1c6:	1904      	adds	r4, r0, r4
   2d1c8:	eb41 0808 	adc.w	r8, r1, r8
	ts->tv_nsec = (int32_t) (elapsed_nsecs % NSEC_PER_SEC);
   2d1cc:	4648      	mov	r0, r9
   2d1ce:	4651      	mov	r1, sl
	ts->tv_sec += base.tv_sec;
   2d1d0:	e9c5 4800 	strd	r4, r8, [r5]
	ts->tv_nsec = (int32_t) (elapsed_nsecs % NSEC_PER_SEC);
   2d1d4:	f7f3 f884 	bl	202e0 <__aeabi_uldivmod>
	if (ts->tv_nsec >= NSEC_PER_SEC) {
   2d1d8:	4b0d      	ldr	r3, [pc, #52]	; (2d210 <z_impl_clock_gettime+0xa0>)
	ts->tv_nsec += base.tv_nsec;
   2d1da:	4432      	add	r2, r6
	if (ts->tv_nsec >= NSEC_PER_SEC) {
   2d1dc:	429a      	cmp	r2, r3
	ts->tv_nsec += base.tv_nsec;
   2d1de:	60aa      	str	r2, [r5, #8]
	if (ts->tv_nsec >= NSEC_PER_SEC) {
   2d1e0:	d906      	bls.n	2d1f0 <z_impl_clock_gettime+0x80>
		ts->tv_sec++;
   2d1e2:	3401      	adds	r4, #1
   2d1e4:	f148 0100 	adc.w	r1, r8, #0
   2d1e8:	e9c5 4100 	strd	r4, r1, [r5]
		ts->tv_nsec -= NSEC_PER_SEC;
   2d1ec:	1bd2      	subs	r2, r2, r7
   2d1ee:	60aa      	str	r2, [r5, #8]
	return 0;
   2d1f0:	2000      	movs	r0, #0
   2d1f2:	e7ca      	b.n	2d18a <z_impl_clock_gettime+0x1a>
	switch (clock_id) {
   2d1f4:	2600      	movs	r6, #0
   2d1f6:	4634      	mov	r4, r6
   2d1f8:	46b0      	mov	r8, r6
   2d1fa:	e7cc      	b.n	2d196 <z_impl_clock_gettime+0x26>
   2d1fc:	f3af 8000 	nop.w
   2d200:	3b9aca00 	.word	0x3b9aca00
   2d204:	00000000 	.word	0x00000000
   2d208:	20008600 	.word	0x20008600
   2d20c:	3b9aca00 	.word	0x3b9aca00
   2d210:	3b9ac9ff 	.word	0x3b9ac9ff
   2d214:	00000000 	.word	0x00000000

0002d218 <clock_settime>:
 */
int clock_settime(clockid_t clock_id, const struct timespec *tp)
{
	struct timespec base;

	if (clock_id != CLOCK_REALTIME) {
   2d218:	2801      	cmp	r0, #1
{
   2d21a:	b570      	push	{r4, r5, r6, lr}
   2d21c:	460c      	mov	r4, r1
	if (clock_id != CLOCK_REALTIME) {
   2d21e:	d006      	beq.n	2d22e <clock_settime+0x16>
   2d220:	f006 fa32 	bl	33688 <z_impl_z_errno>
		errno = EINVAL;
   2d224:	2316      	movs	r3, #22
   2d226:	6003      	str	r3, [r0, #0]
		return -1;
   2d228:	f04f 30ff 	mov.w	r0, #4294967295
	base.tv_nsec = delta % NSEC_PER_SEC;

	rt_clock_base = base;

	return 0;
}
   2d22c:	bd70      	pop	{r4, r5, r6, pc}
   2d22e:	f00a fe5e 	bl	37eee <z_impl_k_uptime_ticks>
   2d232:	460e      	mov	r6, r1
	int64_t delta = (int64_t)NSEC_PER_SEC * tp->tv_sec + tp->tv_nsec
   2d234:	4d18      	ldr	r5, [pc, #96]	; (2d298 <clock_settime+0x80>)
   2d236:	6822      	ldr	r2, [r4, #0]
   2d238:	6861      	ldr	r1, [r4, #4]
   2d23a:	fba2 2305 	umull	r2, r3, r2, r5
   2d23e:	fb05 3301 	mla	r3, r5, r1, r3
   2d242:	68a1      	ldr	r1, [r4, #8]
   2d244:	1852      	adds	r2, r2, r1
   2d246:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   2d24a:	fba0 0105 	umull	r0, r1, r0, r5
   2d24e:	fb05 1106 	mla	r1, r5, r6, r1
   2d252:	0bc4      	lsrs	r4, r0, #15
   2d254:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
		- elapsed_nsecs;
   2d258:	1b14      	subs	r4, r2, r4
   2d25a:	ea4f 35d1 	mov.w	r5, r1, lsr #15
   2d25e:	eb63 0505 	sbc.w	r5, r3, r5
	base.tv_sec = delta / NSEC_PER_SEC;
   2d262:	4620      	mov	r0, r4
   2d264:	a30a      	add	r3, pc, #40	; (adr r3, 2d290 <clock_settime+0x78>)
   2d266:	e9d3 2300 	ldrd	r2, r3, [r3]
   2d26a:	4629      	mov	r1, r5
   2d26c:	f7f2 ffe8 	bl	20240 <__aeabi_ldivmod>
	base.tv_nsec = delta % NSEC_PER_SEC;
   2d270:	a307      	add	r3, pc, #28	; (adr r3, 2d290 <clock_settime+0x78>)
   2d272:	e9d3 2300 	ldrd	r2, r3, [r3]
	rt_clock_base = base;
   2d276:	4e09      	ldr	r6, [pc, #36]	; (2d29c <clock_settime+0x84>)
   2d278:	e9c6 0100 	strd	r0, r1, [r6]
	base.tv_nsec = delta % NSEC_PER_SEC;
   2d27c:	4620      	mov	r0, r4
   2d27e:	4629      	mov	r1, r5
   2d280:	f7f2 ffde 	bl	20240 <__aeabi_ldivmod>
	return 0;
   2d284:	2000      	movs	r0, #0
	base.tv_nsec = delta % NSEC_PER_SEC;
   2d286:	60b2      	str	r2, [r6, #8]
	return 0;
   2d288:	e7d0      	b.n	2d22c <clock_settime+0x14>
   2d28a:	bf00      	nop
   2d28c:	f3af 8000 	nop.w
   2d290:	3b9aca00 	.word	0x3b9aca00
   2d294:	00000000 	.word	0x00000000
   2d298:	3b9aca00 	.word	0x3b9aca00
   2d29c:	20008600 	.word	0x20008600

0002d2a0 <cmd_public_key>:
	return 0;
}


static int cmd_public_key(const struct shell *shell, size_t argc, char **argv)
{
   2d2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

        printf("Public key: \n");
        
        printf("0x");
        int cont = keys_counter - 1;
        for(int i = 96 * cont; i < 96 * cont + 96; i++) {
   2d2a2:	2460      	movs	r4, #96	; 0x60
        printf("Public key: \n");
   2d2a4:	480d      	ldr	r0, [pc, #52]	; (2d2dc <cmd_public_key+0x3c>)
   2d2a6:	f005 fa45 	bl	32734 <printf>
        printf("0x");
   2d2aa:	480d      	ldr	r0, [pc, #52]	; (2d2e0 <cmd_public_key+0x40>)
   2d2ac:	f005 fa42 	bl	32734 <printf>
        int cont = keys_counter - 1;
   2d2b0:	4b0c      	ldr	r3, [pc, #48]	; (2d2e4 <cmd_public_key+0x44>)
          printf("%c", public_keys_hex_store[i]);
   2d2b2:	4e0d      	ldr	r6, [pc, #52]	; (2d2e8 <cmd_public_key+0x48>)
        int cont = keys_counter - 1;
   2d2b4:	681b      	ldr	r3, [r3, #0]
          printf("%c", public_keys_hex_store[i]);
   2d2b6:	4f0d      	ldr	r7, [pc, #52]	; (2d2ec <cmd_public_key+0x4c>)
        int cont = keys_counter - 1;
   2d2b8:	3b01      	subs	r3, #1
        for(int i = 96 * cont; i < 96 * cont + 96; i++) {
   2d2ba:	435c      	muls	r4, r3
   2d2bc:	f104 0560 	add.w	r5, r4, #96	; 0x60
   2d2c0:	42a5      	cmp	r5, r4
   2d2c2:	dc04      	bgt.n	2d2ce <cmd_public_key+0x2e>
        }
        printf("\n");
   2d2c4:	480a      	ldr	r0, [pc, #40]	; (2d2f0 <cmd_public_key+0x50>)
   2d2c6:	f005 fa35 	bl	32734 <printf>

	return 0;
}
   2d2ca:	2000      	movs	r0, #0
   2d2cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          printf("%c", public_keys_hex_store[i]);
   2d2ce:	5d31      	ldrb	r1, [r6, r4]
   2d2d0:	4638      	mov	r0, r7
   2d2d2:	f005 fa2f 	bl	32734 <printf>
        for(int i = 96 * cont; i < 96 * cont + 96; i++) {
   2d2d6:	3401      	adds	r4, #1
   2d2d8:	e7f2      	b.n	2d2c0 <cmd_public_key+0x20>
   2d2da:	bf00      	nop
   2d2dc:	0003af62 	.word	0x0003af62
   2d2e0:	0003af70 	.word	0x0003af70
   2d2e4:	20008860 	.word	0x20008860
   2d2e8:	20008e9c 	.word	0x20008e9c
   2d2ec:	0003c00a 	.word	0x0003c00a
   2d2f0:	0003ba4d 	.word	0x0003ba4d

0002d2f4 <cmd_get_keys>:

	return 0;
}

static int cmd_get_keys(const struct shell *shell, size_t argc, char **argv)
{
   2d2f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        int j = 0;
        int cont = keys_counter - 1;
        int counter = keys_counter;
        
        printf("{'keys':['");
        for(int i = 0; i < 96 * cont + 96; i++){
   2d2f8:	2400      	movs	r4, #0
   2d2fa:	2760      	movs	r7, #96	; 0x60
        int cont = keys_counter - 1;
   2d2fc:	4b12      	ldr	r3, [pc, #72]	; (2d348 <cmd_get_keys+0x54>)
        printf("{'keys':['");
   2d2fe:	4813      	ldr	r0, [pc, #76]	; (2d34c <cmd_get_keys+0x58>)
        int cont = keys_counter - 1;
   2d300:	681e      	ldr	r6, [r3, #0]
        int j = 0;
   2d302:	4625      	mov	r5, r4
        printf("{'keys':['");
   2d304:	f005 fa16 	bl	32734 <printf>
        for(int i = 0; i < 96 * cont + 96; i++){
   2d308:	4377      	muls	r7, r6
   2d30a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 2d350 <cmd_get_keys+0x5c>
            printf("%c", public_keys_hex_store[i]);
   2d30e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 2d354 <cmd_get_keys+0x60>
            j++;
            if (j == 96){
                if(counter > 1) {
                    printf("'\n'");
                } else {
                    printf("']}\n");
   2d312:	f8df a044 	ldr.w	sl, [pc, #68]	; 2d358 <cmd_get_keys+0x64>
                    printf("'\n'");
   2d316:	f8df b044 	ldr.w	fp, [pc, #68]	; 2d35c <cmd_get_keys+0x68>
        for(int i = 0; i < 96 * cont + 96; i++){
   2d31a:	42a7      	cmp	r7, r4
   2d31c:	dc02      	bgt.n	2d324 <cmd_get_keys+0x30>
                counter--;
            }           
        }

	return 0;
}
   2d31e:	2000      	movs	r0, #0
   2d320:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            printf("%c", public_keys_hex_store[i]);
   2d324:	4648      	mov	r0, r9
   2d326:	f818 1b01 	ldrb.w	r1, [r8], #1
            j++;
   2d32a:	3501      	adds	r5, #1
            printf("%c", public_keys_hex_store[i]);
   2d32c:	f005 fa02 	bl	32734 <printf>
            if (j == 96){
   2d330:	2d60      	cmp	r5, #96	; 0x60
   2d332:	d107      	bne.n	2d344 <cmd_get_keys+0x50>
                if(counter > 1) {
   2d334:	2e01      	cmp	r6, #1
                    printf("'\n'");
   2d336:	bfcc      	ite	gt
   2d338:	4658      	movgt	r0, fp
                    printf("']}\n");
   2d33a:	4650      	movle	r0, sl
   2d33c:	f005 f9fa 	bl	32734 <printf>
                j = 0;
   2d340:	2500      	movs	r5, #0
                counter--;
   2d342:	3e01      	subs	r6, #1
        for(int i = 0; i < 96 * cont + 96; i++){
   2d344:	3401      	adds	r4, #1
   2d346:	e7e8      	b.n	2d31a <cmd_get_keys+0x26>
   2d348:	20008860 	.word	0x20008860
   2d34c:	0003af73 	.word	0x0003af73
   2d350:	20008e9c 	.word	0x20008e9c
   2d354:	0003c00a 	.word	0x0003c00a
   2d358:	0003af82 	.word	0x0003af82
   2d35c:	0003af7e 	.word	0x0003af7e

0002d360 <cmd_keygen>:
{
   2d360:	b570      	push	{r4, r5, r6, lr}
        ikm_sk(&keys_counter);
   2d362:	481e      	ldr	r0, [pc, #120]	; (2d3dc <cmd_keygen+0x7c>)
{
   2d364:	b0c8      	sub	sp, #288	; 0x120
        ikm_sk(&keys_counter);
   2d366:	f7ee fe3b 	bl	1bfe0 <ikm_sk>
        sk_to_pk(&pk);
   2d36a:	a824      	add	r0, sp, #144	; 0x90
   2d36c:	f7ee fe44 	bl	1bff8 <sk_to_pk>
        blst_p1_to_affine(&pk2, &pk);
   2d370:	481b      	ldr	r0, [pc, #108]	; (2d3e0 <cmd_keygen+0x80>)
   2d372:	a924      	add	r1, sp, #144	; 0x90
   2d374:	f7f8 fa70 	bl	25858 <blst_p1_to_affine>
        blst_p1_compress(out, &pk);
   2d378:	a924      	add	r1, sp, #144	; 0x90
   2d37a:	4668      	mov	r0, sp
   2d37c:	f7f8 fad2 	bl	25924 <blst_p1_compress>
        printf("Public key: \n");
   2d380:	4818      	ldr	r0, [pc, #96]	; (2d3e4 <cmd_keygen+0x84>)
   2d382:	f005 f9d7 	bl	32734 <printf>
        if(bin2hex(&out, sizeof(out), public_key_hex, sizeof(public_key_hex)) == 0) {
   2d386:	2360      	movs	r3, #96	; 0x60
   2d388:	2130      	movs	r1, #48	; 0x30
   2d38a:	4668      	mov	r0, sp
   2d38c:	aa0c      	add	r2, sp, #48	; 0x30
   2d38e:	f007 ff1c 	bl	351ca <bin2hex>
   2d392:	b910      	cbnz	r0, 2d39a <cmd_keygen+0x3a>
          printf("Error3\n");
   2d394:	4814      	ldr	r0, [pc, #80]	; (2d3e8 <cmd_keygen+0x88>)
   2d396:	f005 f9cd 	bl	32734 <printf>
            public_keys_hex_store[i+96*cont] = public_key_hex[i];
   2d39a:	2460      	movs	r4, #96	; 0x60
        int cont = keys_counter - 1;
   2d39c:	4b0f      	ldr	r3, [pc, #60]	; (2d3dc <cmd_keygen+0x7c>)
   2d39e:	4a13      	ldr	r2, [pc, #76]	; (2d3ec <cmd_keygen+0x8c>)
   2d3a0:	681b      	ldr	r3, [r3, #0]
   2d3a2:	ad0c      	add	r5, sp, #48	; 0x30
   2d3a4:	3b01      	subs	r3, #1
   2d3a6:	fb04 2303 	mla	r3, r4, r3, r2
            public_keys_hex_store[i+96*cont] = public_key_hex[i];
   2d3aa:	462a      	mov	r2, r5
   2d3ac:	f812 1b01 	ldrb.w	r1, [r2], #1
        for(int i = 0; i < 96; i++){
   2d3b0:	3c01      	subs	r4, #1
            public_keys_hex_store[i+96*cont] = public_key_hex[i];
   2d3b2:	f803 1b01 	strb.w	r1, [r3], #1
        for(int i = 0; i < 96; i++){
   2d3b6:	d1f9      	bne.n	2d3ac <cmd_keygen+0x4c>
        printf("0x");
   2d3b8:	480d      	ldr	r0, [pc, #52]	; (2d3f0 <cmd_keygen+0x90>)
   2d3ba:	f005 f9bb 	bl	32734 <printf>
          printf("%c", public_key_hex[i]);
   2d3be:	4e0d      	ldr	r6, [pc, #52]	; (2d3f4 <cmd_keygen+0x94>)
   2d3c0:	4630      	mov	r0, r6
   2d3c2:	f815 1b01 	ldrb.w	r1, [r5], #1
        for(int i = 0; i < 96; i++) {
   2d3c6:	3401      	adds	r4, #1
          printf("%c", public_key_hex[i]);
   2d3c8:	f005 f9b4 	bl	32734 <printf>
        for(int i = 0; i < 96; i++) {
   2d3cc:	2c60      	cmp	r4, #96	; 0x60
   2d3ce:	d1f7      	bne.n	2d3c0 <cmd_keygen+0x60>
        printf("\n");
   2d3d0:	4809      	ldr	r0, [pc, #36]	; (2d3f8 <cmd_keygen+0x98>)
   2d3d2:	f005 f9af 	bl	32734 <printf>
}
   2d3d6:	2000      	movs	r0, #0
   2d3d8:	b048      	add	sp, #288	; 0x120
   2d3da:	bd70      	pop	{r4, r5, r6, pc}
   2d3dc:	20008860 	.word	0x20008860
   2d3e0:	20008328 	.word	0x20008328
   2d3e4:	0003af62 	.word	0x0003af62
   2d3e8:	0003af87 	.word	0x0003af87
   2d3ec:	20008e9c 	.word	0x20008e9c
   2d3f0:	0003af70 	.word	0x0003af70
   2d3f4:	0003c00a 	.word	0x0003c00a
   2d3f8:	0003ba4d 	.word	0x0003ba4d

0002d3fc <cmd_signature_message>:
{
   2d3fc:	b570      	push	{r4, r5, r6, lr}
   2d3fe:	4614      	mov	r4, r2
        public_key_to_sk(argv[1], &sk_sign, public_keys_hex_store, keys_counter);
   2d400:	4b35      	ldr	r3, [pc, #212]	; (2d4d8 <cmd_signature_message+0xdc>)
{
   2d402:	f5ad 7d38 	sub.w	sp, sp, #736	; 0x2e0
        public_key_to_sk(argv[1], &sk_sign, public_keys_hex_store, keys_counter);
   2d406:	681b      	ldr	r3, [r3, #0]
   2d408:	4a34      	ldr	r2, [pc, #208]	; (2d4dc <cmd_signature_message+0xe0>)
   2d40a:	6860      	ldr	r0, [r4, #4]
   2d40c:	a905      	add	r1, sp, #20
   2d40e:	f7ee fdeb 	bl	1bfe8 <public_key_to_sk>
        char * msg_hex = argv[2];
   2d412:	68a4      	ldr	r4, [r4, #8]
        if(hex2bin(msg_hex, strlen(msg_hex), &msg_bin, sizeof(msg_bin)) == 0) {
   2d414:	4620      	mov	r0, r4
   2d416:	f00a f8a9 	bl	3756c <strlen>
   2d41a:	2320      	movs	r3, #32
   2d41c:	4601      	mov	r1, r0
   2d41e:	4a30      	ldr	r2, [pc, #192]	; (2d4e0 <cmd_signature_message+0xe4>)
   2d420:	4620      	mov	r0, r4
   2d422:	f007 fefd 	bl	35220 <hex2bin>
   2d426:	b910      	cbnz	r0, 2d42e <cmd_signature_message+0x32>
          printf("Error4\n");
   2d428:	482e      	ldr	r0, [pc, #184]	; (2d4e4 <cmd_signature_message+0xe8>)
   2d42a:	f005 f983 	bl	32734 <printf>
        if(bin2hex(&msg_bin, sizeof(msg_bin), &message, sizeof(message)) == 0) {
   2d42e:	2340      	movs	r3, #64	; 0x40
   2d430:	2120      	movs	r1, #32
   2d432:	482b      	ldr	r0, [pc, #172]	; (2d4e0 <cmd_signature_message+0xe4>)
   2d434:	aa18      	add	r2, sp, #96	; 0x60
   2d436:	f007 fec8 	bl	351ca <bin2hex>
   2d43a:	b910      	cbnz	r0, 2d442 <cmd_signature_message+0x46>
          printf("Error5\n");
   2d43c:	482a      	ldr	r0, [pc, #168]	; (2d4e8 <cmd_signature_message+0xec>)
   2d43e:	f005 f979 	bl	32734 <printf>
        char dst[] = "BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_POP"; //IETF BLS Signature V4
   2d442:	4b2a      	ldr	r3, [pc, #168]	; (2d4ec <cmd_signature_message+0xf0>)
   2d444:	aa0d      	add	r2, sp, #52	; 0x34
   2d446:	f103 0528 	add.w	r5, r3, #40	; 0x28
   2d44a:	4614      	mov	r4, r2
   2d44c:	6818      	ldr	r0, [r3, #0]
   2d44e:	6859      	ldr	r1, [r3, #4]
   2d450:	3308      	adds	r3, #8
   2d452:	c403      	stmia	r4!, {r0, r1}
   2d454:	42ab      	cmp	r3, r5
   2d456:	4622      	mov	r2, r4
   2d458:	d1f7      	bne.n	2d44a <cmd_signature_message+0x4e>
   2d45a:	8819      	ldrh	r1, [r3, #0]
   2d45c:	789b      	ldrb	r3, [r3, #2]
   2d45e:	8021      	strh	r1, [r4, #0]
   2d460:	70a3      	strb	r3, [r4, #2]
        blst_hash_to_g2(&hash, msg_bin, sizeof(msg_bin), dst, sizeof(dst), NULL, 0);
   2d462:	2300      	movs	r3, #0
   2d464:	e9cd 3301 	strd	r3, r3, [sp, #4]
   2d468:	232b      	movs	r3, #43	; 0x2b
   2d46a:	2220      	movs	r2, #32
   2d46c:	491c      	ldr	r1, [pc, #112]	; (2d4e0 <cmd_signature_message+0xe4>)
   2d46e:	4820      	ldr	r0, [pc, #128]	; (2d4f0 <cmd_signature_message+0xf4>)
   2d470:	9300      	str	r3, [sp, #0]
   2d472:	ab0d      	add	r3, sp, #52	; 0x34
   2d474:	f7fc fdcd 	bl	2a012 <blst_hash_to_g2>
        blst_sign_pk_in_g1(&sig, &hash, &sk_sign); 
   2d478:	aa05      	add	r2, sp, #20
   2d47a:	491d      	ldr	r1, [pc, #116]	; (2d4f0 <cmd_signature_message+0xf4>)
   2d47c:	a870      	add	r0, sp, #448	; 0x1c0
   2d47e:	f7fc f93f 	bl	29700 <blst_sign_pk_in_g1>
        blst_p2_to_affine(&sig2, &sig);
   2d482:	481c      	ldr	r0, [pc, #112]	; (2d4f4 <cmd_signature_message+0xf8>)
   2d484:	a970      	add	r1, sp, #448	; 0x1c0
   2d486:	f7fa faa7 	bl	279d8 <blst_p2_to_affine>
        blst_p2_compress(out2, &sig);
   2d48a:	a970      	add	r1, sp, #448	; 0x1c0
   2d48c:	a828      	add	r0, sp, #160	; 0xa0
   2d48e:	f7fa fb0f 	bl	27ab0 <blst_p2_compress>
        printf("Signature: \n");
   2d492:	4819      	ldr	r0, [pc, #100]	; (2d4f8 <cmd_signature_message+0xfc>)
   2d494:	f005 f94e 	bl	32734 <printf>
        if(bin2hex(&out2, sizeof(out2), sig_hex, sizeof(sig_hex)) == 0) {
   2d498:	23c0      	movs	r3, #192	; 0xc0
   2d49a:	2160      	movs	r1, #96	; 0x60
   2d49c:	aa40      	add	r2, sp, #256	; 0x100
   2d49e:	a828      	add	r0, sp, #160	; 0xa0
   2d4a0:	f007 fe93 	bl	351ca <bin2hex>
   2d4a4:	b910      	cbnz	r0, 2d4ac <cmd_signature_message+0xb0>
          printf("Error6\n");
   2d4a6:	4815      	ldr	r0, [pc, #84]	; (2d4fc <cmd_signature_message+0x100>)
   2d4a8:	f005 f944 	bl	32734 <printf>
        printf("0x");
   2d4ac:	4814      	ldr	r0, [pc, #80]	; (2d500 <cmd_signature_message+0x104>)
   2d4ae:	f005 f941 	bl	32734 <printf>
        for(int i = 0; i < 192; i++) {
   2d4b2:	2500      	movs	r5, #0
          printf("%c", sig_hex[i]);
   2d4b4:	4e13      	ldr	r6, [pc, #76]	; (2d504 <cmd_signature_message+0x108>)
   2d4b6:	ac40      	add	r4, sp, #256	; 0x100
   2d4b8:	4630      	mov	r0, r6
   2d4ba:	f814 1b01 	ldrb.w	r1, [r4], #1
        for(int i = 0; i < 192; i++) {
   2d4be:	3501      	adds	r5, #1
          printf("%c", sig_hex[i]);
   2d4c0:	f005 f938 	bl	32734 <printf>
        for(int i = 0; i < 192; i++) {
   2d4c4:	2dc0      	cmp	r5, #192	; 0xc0
   2d4c6:	d1f7      	bne.n	2d4b8 <cmd_signature_message+0xbc>
        printf("\n\n");
   2d4c8:	480f      	ldr	r0, [pc, #60]	; (2d508 <cmd_signature_message+0x10c>)
   2d4ca:	f005 f933 	bl	32734 <printf>
}
   2d4ce:	2000      	movs	r0, #0
   2d4d0:	f50d 7d38 	add.w	sp, sp, #736	; 0x2e0
   2d4d4:	bd70      	pop	{r4, r5, r6, pc}
   2d4d6:	bf00      	nop
   2d4d8:	20008860 	.word	0x20008860
   2d4dc:	20008e9c 	.word	0x20008e9c
   2d4e0:	20008e7c 	.word	0x20008e7c
   2d4e4:	0003af8f 	.word	0x0003af8f
   2d4e8:	0003af97 	.word	0x0003af97
   2d4ec:	0003afa7 	.word	0x0003afa7
   2d4f0:	20008208 	.word	0x20008208
   2d4f4:	20008388 	.word	0x20008388
   2d4f8:	0003b0b7 	.word	0x0003b0b7
   2d4fc:	0003af9f 	.word	0x0003af9f
   2d500:	0003af70 	.word	0x0003af70
   2d504:	0003c00a 	.word	0x0003c00a
   2d508:	0003ba4c 	.word	0x0003ba4c

0002d50c <cmd_signature_verification>:
{
   2d50c:	b570      	push	{r4, r5, r6, lr}
   2d50e:	b092      	sub	sp, #72	; 0x48
        char dst[] = "BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_POP"; //IETF BLS Signature V4
   2d510:	aa07      	add	r2, sp, #28
   2d512:	4615      	mov	r5, r2
   2d514:	4b12      	ldr	r3, [pc, #72]	; (2d560 <cmd_signature_verification+0x54>)
   2d516:	f103 0628 	add.w	r6, r3, #40	; 0x28
   2d51a:	4614      	mov	r4, r2
   2d51c:	6818      	ldr	r0, [r3, #0]
   2d51e:	6859      	ldr	r1, [r3, #4]
   2d520:	3308      	adds	r3, #8
   2d522:	c403      	stmia	r4!, {r0, r1}
   2d524:	42b3      	cmp	r3, r6
   2d526:	4622      	mov	r2, r4
   2d528:	d1f7      	bne.n	2d51a <cmd_signature_verification+0xe>
   2d52a:	8819      	ldrh	r1, [r3, #0]
   2d52c:	789b      	ldrb	r3, [r3, #2]
   2d52e:	8021      	strh	r1, [r4, #0]
   2d530:	70a3      	strb	r3, [r4, #2]
        if(blst_core_verify_pk_in_g1(&pk2, &sig2, 1, msg_bin, sizeof(msg_bin), dst, sizeof(dst), NULL, 0) != BLST_SUCCESS){
   2d532:	2300      	movs	r3, #0
   2d534:	e9cd 3303 	strd	r3, r3, [sp, #12]
   2d538:	232b      	movs	r3, #43	; 0x2b
   2d53a:	e9cd 5301 	strd	r5, r3, [sp, #4]
   2d53e:	2320      	movs	r3, #32
   2d540:	2201      	movs	r2, #1
   2d542:	9300      	str	r3, [sp, #0]
   2d544:	4907      	ldr	r1, [pc, #28]	; (2d564 <cmd_signature_verification+0x58>)
   2d546:	4b08      	ldr	r3, [pc, #32]	; (2d568 <cmd_signature_verification+0x5c>)
   2d548:	4808      	ldr	r0, [pc, #32]	; (2d56c <cmd_signature_verification+0x60>)
   2d54a:	f7fe fe2c 	bl	2c1a6 <blst_core_verify_pk_in_g1>
   2d54e:	b128      	cbz	r0, 2d55c <cmd_signature_verification+0x50>
          printf("Error\n");
   2d550:	4807      	ldr	r0, [pc, #28]	; (2d570 <cmd_signature_verification+0x64>)
          printf("Success\n");
   2d552:	f005 f8ef 	bl	32734 <printf>
}
   2d556:	2000      	movs	r0, #0
   2d558:	b012      	add	sp, #72	; 0x48
   2d55a:	bd70      	pop	{r4, r5, r6, pc}
          printf("Success\n");
   2d55c:	4805      	ldr	r0, [pc, #20]	; (2d574 <cmd_signature_verification+0x68>)
   2d55e:	e7f8      	b.n	2d552 <cmd_signature_verification+0x46>
   2d560:	0003afa7 	.word	0x0003afa7
   2d564:	20008388 	.word	0x20008388
   2d568:	20008e7c 	.word	0x20008e7c
   2d56c:	20008328 	.word	0x20008328
   2d570:	0003afd2 	.word	0x0003afd2
   2d574:	0003afd9 	.word	0x0003afd9

0002d578 <k_timer_remaining_get.constprop.0>:
 *
 * @param timer     Address of timer.
 *
 * @return Remaining time (in milliseconds).
 */
static inline uint32_t k_timer_remaining_get(struct k_timer *timer)
   2d578:	b508      	push	{r3, lr}
	return z_timeout_remaining(&timer->timeout);
   2d57a:	4805      	ldr	r0, [pc, #20]	; (2d590 <k_timer_remaining_get.constprop.0+0x18>)
   2d57c:	f00a fc79 	bl	37e72 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
   2d580:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2d584:	fba0 2302 	umull	r2, r3, r0, r2
   2d588:	0bd0      	lsrs	r0, r2, #15
{
	return k_ticks_to_ms_floor32(k_timer_remaining_ticks(timer));
}
   2d58a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   2d58e:	bd08      	pop	{r3, pc}
   2d590:	20008188 	.word	0x20008188

0002d594 <cmd_benchmark>:
	ARG_UNUSED(argv);

        unsigned char ikm[32];
	const int random_number_len = 144;     
        uint8_t random_number[random_number_len];
        size_t olen = random_number_len;
   2d594:	2190      	movs	r1, #144	; 0x90
{
   2d596:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d598:	f2ad 7d14 	subw	sp, sp, #1812	; 0x714
        int ret;

        ret = spm_request_random_number(random_number, random_number_len, &olen);
   2d59c:	aa04      	add	r2, sp, #16
   2d59e:	a8b0      	add	r0, sp, #704	; 0x2c0
        size_t olen = random_number_len;
   2d5a0:	9104      	str	r1, [sp, #16]
        ret = spm_request_random_number(random_number, random_number_len, &olen);
   2d5a2:	f009 fede 	bl	37362 <spm_request_random_number>
        if (ret != 0) {
   2d5a6:	4601      	mov	r1, r0
   2d5a8:	b110      	cbz	r0, 2d5b0 <cmd_benchmark+0x1c>
           printk("Could not get random number (err: %d)\n", ret);
   2d5aa:	488c      	ldr	r0, [pc, #560]	; (2d7dc <cmd_benchmark+0x248>)
   2d5ac:	f007 feb4 	bl	35318 <printk>
        }

        for(int i = 0; i < sizeof(ikm); i++){
   2d5b0:	a905      	add	r1, sp, #20
{
   2d5b2:	2200      	movs	r2, #0
   2d5b4:	460d      	mov	r5, r1
   2d5b6:	abb0      	add	r3, sp, #704	; 0x2c0
          ikm[i] = random_number[i];
   2d5b8:	f813 0b01 	ldrb.w	r0, [r3], #1
        for(int i = 0; i < sizeof(ikm); i++){
   2d5bc:	3201      	adds	r2, #1
   2d5be:	2a20      	cmp	r2, #32
          ikm[i] = random_number[i];
   2d5c0:	f801 0b01 	strb.w	r0, [r1], #1
        for(int i = 0; i < sizeof(ikm); i++){
   2d5c4:	d1f8      	bne.n	2d5b8 <cmd_benchmark+0x24>
        } 

        // key_info is an optional parameter.  This parameter MAY be used to derive
        // multiple independent keys from the same IKM.  By default, key_info is the empty string.
        char info[] = {
   2d5c6:	4b86      	ldr	r3, [pc, #536]	; (2d7e0 <cmd_benchmark+0x24c>)
   2d5c8:	ac0d      	add	r4, sp, #52	; 0x34
   2d5ca:	f103 0620 	add.w	r6, r3, #32
   2d5ce:	4622      	mov	r2, r4
   2d5d0:	6818      	ldr	r0, [r3, #0]
   2d5d2:	6859      	ldr	r1, [r3, #4]
   2d5d4:	3308      	adds	r3, #8
   2d5d6:	c203      	stmia	r2!, {r0, r1}
   2d5d8:	42b3      	cmp	r3, r6
   2d5da:	4614      	mov	r4, r2
   2d5dc:	d1f7      	bne.n	2d5ce <cmd_benchmark+0x3a>
	z_impl_k_timer_start(timer, duration, period);
   2d5de:	2200      	movs	r2, #0
   2d5e0:	2300      	movs	r3, #0
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

        k_timer_start(&my_timer, K_MSEC(3000), K_NO_WAIT);
        
        //Secret key (256-bit scalar)
        blst_keygen(&sk, ikm, sizeof(ikm), info, sizeof(info));
   2d5e2:	2420      	movs	r4, #32
   2d5e4:	e9cd 2300 	strd	r2, r3, [sp]
   2d5e8:	487e      	ldr	r0, [pc, #504]	; (2d7e4 <cmd_benchmark+0x250>)
   2d5ea:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
   2d5ee:	2300      	movs	r3, #0
   2d5f0:	f007 fa6e 	bl	34ad0 <z_impl_k_timer_start>
   2d5f4:	4622      	mov	r2, r4
   2d5f6:	ab0d      	add	r3, sp, #52	; 0x34
   2d5f8:	4629      	mov	r1, r5
   2d5fa:	487b      	ldr	r0, [pc, #492]	; (2d7e8 <cmd_benchmark+0x254>)
   2d5fc:	9400      	str	r4, [sp, #0]
   2d5fe:	f7f9 ff7f 	bl	27500 <blst_keygen>
                
        uint8_t priv_key_bin[32];
        blst_bendian_from_scalar(priv_key_bin, &sk);
   2d602:	4979      	ldr	r1, [pc, #484]	; (2d7e8 <cmd_benchmark+0x254>)
   2d604:	a815      	add	r0, sp, #84	; 0x54
   2d606:	f7ff fbac 	bl	2cd62 <blst_bendian_from_scalar>

        char priv_key_hex2[64];
        if(bin2hex(priv_key_bin, sizeof(priv_key_bin), priv_key_hex2, sizeof(priv_key_hex2)) == 0) {
   2d60a:	2340      	movs	r3, #64	; 0x40
   2d60c:	4621      	mov	r1, r4
   2d60e:	aa3c      	add	r2, sp, #240	; 0xf0
   2d610:	a815      	add	r0, sp, #84	; 0x54
   2d612:	f007 fdda 	bl	351ca <bin2hex>
   2d616:	b910      	cbnz	r0, 2d61e <cmd_benchmark+0x8a>
          printf("Error2\n");
   2d618:	4874      	ldr	r0, [pc, #464]	; (2d7ec <cmd_benchmark+0x258>)
   2d61a:	f005 f88b 	bl	32734 <printf>
        }

        printf("Secret key: \n");
   2d61e:	4874      	ldr	r0, [pc, #464]	; (2d7f0 <cmd_benchmark+0x25c>)
   2d620:	f005 f888 	bl	32734 <printf>
        printf("0x");
   2d624:	4873      	ldr	r0, [pc, #460]	; (2d7f4 <cmd_benchmark+0x260>)
   2d626:	f005 f885 	bl	32734 <printf>
        printf("%s\n", priv_key_hex2);
   2d62a:	a93c      	add	r1, sp, #240	; 0xf0
   2d62c:	4872      	ldr	r0, [pc, #456]	; (2d7f8 <cmd_benchmark+0x264>)
   2d62e:	f005 f881 	bl	32734 <printf>

        //The secret key allow us to generate the associated public key
        blst_p1 pk;
        byte out[48];
        char public_key_hex[96];
        blst_sk_to_pk_in_g1(&pk, &sk);
   2d632:	a88c      	add	r0, sp, #560	; 0x230
   2d634:	496c      	ldr	r1, [pc, #432]	; (2d7e8 <cmd_benchmark+0x254>)
   2d636:	f7f9 fa21 	bl	26a7c <blst_sk_to_pk_in_g1>
        blst_p1_to_affine(&pk2, &pk);
   2d63a:	a98c      	add	r1, sp, #560	; 0x230
   2d63c:	486f      	ldr	r0, [pc, #444]	; (2d7fc <cmd_benchmark+0x268>)
   2d63e:	f7f8 f90b 	bl	25858 <blst_p1_to_affine>
        blst_p1_compress(out, &pk);
   2d642:	a98c      	add	r1, sp, #560	; 0x230
   2d644:	a830      	add	r0, sp, #192	; 0xc0
   2d646:	f7f8 f96d 	bl	25924 <blst_p1_compress>

        uint32_t time_left;
        time_left = k_timer_remaining_get(&my_timer);
   2d64a:	f7ff ff95 	bl	2d578 <k_timer_remaining_get.constprop.0>
   2d64e:	4605      	mov	r5, r0
	z_impl_k_timer_stop(timer);
   2d650:	4864      	ldr	r0, [pc, #400]	; (2d7e4 <cmd_benchmark+0x250>)
   2d652:	f00a fc5e 	bl	37f12 <z_impl_k_timer_stop>
        k_timer_stop(&my_timer);

        printf("Public key: \n");
   2d656:	486a      	ldr	r0, [pc, #424]	; (2d800 <cmd_benchmark+0x26c>)
   2d658:	f005 f86c 	bl	32734 <printf>
        if(bin2hex(&out, sizeof(out), public_key_hex, sizeof(public_key_hex)) == 0) {
   2d65c:	2360      	movs	r3, #96	; 0x60
   2d65e:	2130      	movs	r1, #48	; 0x30
   2d660:	aa5c      	add	r2, sp, #368	; 0x170
   2d662:	a830      	add	r0, sp, #192	; 0xc0
   2d664:	f007 fdb1 	bl	351ca <bin2hex>
   2d668:	b910      	cbnz	r0, 2d670 <cmd_benchmark+0xdc>
          printf("Error3\n");
   2d66a:	4866      	ldr	r0, [pc, #408]	; (2d804 <cmd_benchmark+0x270>)
   2d66c:	f005 f862 	bl	32734 <printf>
        }
           
        printf("0x");
   2d670:	4860      	ldr	r0, [pc, #384]	; (2d7f4 <cmd_benchmark+0x260>)
   2d672:	f005 f85f 	bl	32734 <printf>
        for(int i = 0; i < 96; i++) {
   2d676:	2600      	movs	r6, #0
          printf("%c", public_key_hex[i]);
   2d678:	4f63      	ldr	r7, [pc, #396]	; (2d808 <cmd_benchmark+0x274>)
   2d67a:	ac5c      	add	r4, sp, #368	; 0x170
   2d67c:	4638      	mov	r0, r7
   2d67e:	f814 1b01 	ldrb.w	r1, [r4], #1
        for(int i = 0; i < 96; i++) {
   2d682:	3601      	adds	r6, #1
          printf("%c", public_key_hex[i]);
   2d684:	f005 f856 	bl	32734 <printf>
        for(int i = 0; i < 96; i++) {
   2d688:	2e60      	cmp	r6, #96	; 0x60
   2d68a:	d1f7      	bne.n	2d67c <cmd_benchmark+0xe8>
        }
        printf("\n");
   2d68c:	485f      	ldr	r0, [pc, #380]	; (2d80c <cmd_benchmark+0x278>)
   2d68e:	f005 f851 	bl	32734 <printf>

        printf("\nBenchmark for key generation: %u ms\n", 3000-time_left);
   2d692:	f5c5 613b 	rsb	r1, r5, #2992	; 0xbb0
   2d696:	3108      	adds	r1, #8
   2d698:	485d      	ldr	r0, [pc, #372]	; (2d810 <cmd_benchmark+0x27c>)
   2d69a:	f005 f84b 	bl	32734 <printf>
	z_impl_k_timer_start(timer, duration, period);
   2d69e:	2200      	movs	r2, #0
   2d6a0:	2300      	movs	r3, #0
   2d6a2:	4850      	ldr	r0, [pc, #320]	; (2d7e4 <cmd_benchmark+0x250>)
   2d6a4:	e9cd 2300 	strd	r2, r3, [sp]
   2d6a8:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
   2d6ac:	2300      	movs	r3, #0
   2d6ae:	f007 fa0f 	bl	34ad0 <z_impl_k_timer_start>
        
        blst_p2 hash;
        char * msg_hex = "5656565656565656565656565656565656565656565656565656565656565656";
        uint8_t msg_bin[32];
             
        if(hex2bin(msg_hex, strlen(msg_hex), &msg_bin, sizeof(msg_bin)) == 0) {
   2d6b2:	4858      	ldr	r0, [pc, #352]	; (2d814 <cmd_benchmark+0x280>)
   2d6b4:	f009 ff5a 	bl	3756c <strlen>
   2d6b8:	2320      	movs	r3, #32
   2d6ba:	4601      	mov	r1, r0
   2d6bc:	aa1d      	add	r2, sp, #116	; 0x74
   2d6be:	4855      	ldr	r0, [pc, #340]	; (2d814 <cmd_benchmark+0x280>)
   2d6c0:	f007 fdae 	bl	35220 <hex2bin>
   2d6c4:	b910      	cbnz	r0, 2d6cc <cmd_benchmark+0x138>
          printf("Error4\n");
   2d6c6:	4854      	ldr	r0, [pc, #336]	; (2d818 <cmd_benchmark+0x284>)
   2d6c8:	f005 f834 	bl	32734 <printf>
        }

        char message[64];
        if(bin2hex(&msg_bin, sizeof(msg_bin), &message, sizeof(message)) == 0) {
   2d6cc:	2340      	movs	r3, #64	; 0x40
   2d6ce:	2120      	movs	r1, #32
   2d6d0:	aa4c      	add	r2, sp, #304	; 0x130
   2d6d2:	a81d      	add	r0, sp, #116	; 0x74
   2d6d4:	f007 fd79 	bl	351ca <bin2hex>
   2d6d8:	b910      	cbnz	r0, 2d6e0 <cmd_benchmark+0x14c>
          printf("Error5\n");
   2d6da:	4850      	ldr	r0, [pc, #320]	; (2d81c <cmd_benchmark+0x288>)
   2d6dc:	f005 f82a 	bl	32734 <printf>
        }

        printf("\nMessage: \n");
   2d6e0:	484f      	ldr	r0, [pc, #316]	; (2d820 <cmd_benchmark+0x28c>)
   2d6e2:	f005 f827 	bl	32734 <printf>
        printf("0x");
   2d6e6:	4843      	ldr	r0, [pc, #268]	; (2d7f4 <cmd_benchmark+0x260>)
   2d6e8:	f005 f824 	bl	32734 <printf>
        printf("%s\n", message);
   2d6ec:	4842      	ldr	r0, [pc, #264]	; (2d7f8 <cmd_benchmark+0x264>)
   2d6ee:	a94c      	add	r1, sp, #304	; 0x130
   2d6f0:	f005 f820 	bl	32734 <printf>
               
        char dst[] = "BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_POP"; //IETF BLS Signature V4
   2d6f4:	4b4b      	ldr	r3, [pc, #300]	; (2d824 <cmd_benchmark+0x290>)
   2d6f6:	aa25      	add	r2, sp, #148	; 0x94
   2d6f8:	f103 0528 	add.w	r5, r3, #40	; 0x28
   2d6fc:	4614      	mov	r4, r2
   2d6fe:	6818      	ldr	r0, [r3, #0]
   2d700:	6859      	ldr	r1, [r3, #4]
   2d702:	3308      	adds	r3, #8
   2d704:	c403      	stmia	r4!, {r0, r1}
   2d706:	42ab      	cmp	r3, r5
   2d708:	4622      	mov	r2, r4
   2d70a:	d1f7      	bne.n	2d6fc <cmd_benchmark+0x168>
   2d70c:	8819      	ldrh	r1, [r3, #0]
   2d70e:	789b      	ldrb	r3, [r3, #2]
   2d710:	8021      	strh	r1, [r4, #0]
   2d712:	70a3      	strb	r3, [r4, #2]
        //Obtain the point from a message
        blst_hash_to_g2(&hash, msg_bin, sizeof(msg_bin), dst, sizeof(dst), NULL, 0);
   2d714:	2300      	movs	r3, #0
   2d716:	e9cd 3301 	strd	r3, r3, [sp, #4]
   2d71a:	232b      	movs	r3, #43	; 0x2b
   2d71c:	2220      	movs	r2, #32
   2d71e:	9300      	str	r3, [sp, #0]
   2d720:	a91d      	add	r1, sp, #116	; 0x74
   2d722:	ab25      	add	r3, sp, #148	; 0x94
   2d724:	f50d 609a 	add.w	r0, sp, #1232	; 0x4d0
   2d728:	f7fc fc73 	bl	2a012 <blst_hash_to_g2>

        time_left = k_timer_remaining_get(&my_timer);
   2d72c:	f7ff ff24 	bl	2d578 <k_timer_remaining_get.constprop.0>
   2d730:	4604      	mov	r4, r0
	z_impl_k_timer_stop(timer);
   2d732:	482c      	ldr	r0, [pc, #176]	; (2d7e4 <cmd_benchmark+0x250>)
   2d734:	f00a fbed 	bl	37f12 <z_impl_k_timer_stop>
        k_timer_stop(&my_timer);
        printf("\nBenchmark for message hash: %u ms\n", 3000-time_left);
   2d738:	f5c4 613b 	rsb	r1, r4, #2992	; 0xbb0
   2d73c:	3108      	adds	r1, #8
   2d73e:	483a      	ldr	r0, [pc, #232]	; (2d828 <cmd_benchmark+0x294>)
   2d740:	f004 fff8 	bl	32734 <printf>
	z_impl_k_timer_start(timer, duration, period);
   2d744:	2200      	movs	r2, #0
   2d746:	2300      	movs	r3, #0
   2d748:	4826      	ldr	r0, [pc, #152]	; (2d7e4 <cmd_benchmark+0x250>)
   2d74a:	e9cd 2300 	strd	r2, r3, [sp]
   2d74e:	2300      	movs	r3, #0
   2d750:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
   2d754:	f007 f9bc 	bl	34ad0 <z_impl_k_timer_start>
        blst_p2 sig;
        blst_p2_affine sig2;
        byte out2[96];
        char sig_hex[192];

        blst_sign_pk_in_g1(&sig, &hash, &sk); 
   2d758:	4a23      	ldr	r2, [pc, #140]	; (2d7e8 <cmd_benchmark+0x254>)
   2d75a:	f50d 619a 	add.w	r1, sp, #1232	; 0x4d0
   2d75e:	f50d 60be 	add.w	r0, sp, #1520	; 0x5f0
   2d762:	f7fb ffcd 	bl	29700 <blst_sign_pk_in_g1>
        blst_p2_to_affine(&sig2, &sig);
   2d766:	f50d 61be 	add.w	r1, sp, #1520	; 0x5f0
   2d76a:	a8d4      	add	r0, sp, #848	; 0x350
   2d76c:	f7fa f934 	bl	279d8 <blst_p2_to_affine>
        blst_p2_compress(out2, &sig);
   2d770:	f50d 61be 	add.w	r1, sp, #1520	; 0x5f0
   2d774:	a874      	add	r0, sp, #464	; 0x1d0
   2d776:	f7fa f99b 	bl	27ab0 <blst_p2_compress>
        
        time_left = k_timer_remaining_get(&my_timer);
   2d77a:	f7ff fefd 	bl	2d578 <k_timer_remaining_get.constprop.0>
   2d77e:	4605      	mov	r5, r0
	z_impl_k_timer_stop(timer);
   2d780:	4818      	ldr	r0, [pc, #96]	; (2d7e4 <cmd_benchmark+0x250>)
   2d782:	f00a fbc6 	bl	37f12 <z_impl_k_timer_stop>
        k_timer_stop(&my_timer);
        
        printf("\nSignature: \n");
   2d786:	4829      	ldr	r0, [pc, #164]	; (2d82c <cmd_benchmark+0x298>)
   2d788:	f004 ffd4 	bl	32734 <printf>
        if(bin2hex(&out2, sizeof(out2), sig_hex, sizeof(sig_hex)) == 0) {
   2d78c:	23c0      	movs	r3, #192	; 0xc0
   2d78e:	2160      	movs	r1, #96	; 0x60
   2d790:	f50d 6282 	add.w	r2, sp, #1040	; 0x410
   2d794:	a874      	add	r0, sp, #464	; 0x1d0
   2d796:	f007 fd18 	bl	351ca <bin2hex>
   2d79a:	b910      	cbnz	r0, 2d7a2 <cmd_benchmark+0x20e>
          printf("Error6\n");
   2d79c:	4824      	ldr	r0, [pc, #144]	; (2d830 <cmd_benchmark+0x29c>)
   2d79e:	f004 ffc9 	bl	32734 <printf>
        }
        
        printf("0x");
   2d7a2:	4814      	ldr	r0, [pc, #80]	; (2d7f4 <cmd_benchmark+0x260>)
   2d7a4:	f004 ffc6 	bl	32734 <printf>
        for(int i = 0; i < 192; i++) {
   2d7a8:	2600      	movs	r6, #0
          printf("%c", sig_hex[i]);
   2d7aa:	4f17      	ldr	r7, [pc, #92]	; (2d808 <cmd_benchmark+0x274>)
   2d7ac:	f50d 6482 	add.w	r4, sp, #1040	; 0x410
   2d7b0:	4638      	mov	r0, r7
   2d7b2:	f814 1b01 	ldrb.w	r1, [r4], #1
        for(int i = 0; i < 192; i++) {
   2d7b6:	3601      	adds	r6, #1
          printf("%c", sig_hex[i]);
   2d7b8:	f004 ffbc 	bl	32734 <printf>
        for(int i = 0; i < 192; i++) {
   2d7bc:	2ec0      	cmp	r6, #192	; 0xc0
   2d7be:	d1f7      	bne.n	2d7b0 <cmd_benchmark+0x21c>
        }
        printf("\n");
   2d7c0:	4812      	ldr	r0, [pc, #72]	; (2d80c <cmd_benchmark+0x278>)
   2d7c2:	f004 ffb7 	bl	32734 <printf>

        printf("\nBenchmark for signature: %u ms\n", 3000-time_left);
   2d7c6:	f5c5 613b 	rsb	r1, r5, #2992	; 0xbb0
   2d7ca:	3108      	adds	r1, #8
   2d7cc:	4819      	ldr	r0, [pc, #100]	; (2d834 <cmd_benchmark+0x2a0>)
   2d7ce:	f004 ffb1 	bl	32734 <printf>

	return 0;
}
   2d7d2:	2000      	movs	r0, #0
   2d7d4:	f20d 7d14 	addw	sp, sp, #1812	; 0x714
   2d7d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d7da:	bf00      	nop
   2d7dc:	0003afe2 	.word	0x0003afe2
   2d7e0:	0003a694 	.word	0x0003a694
   2d7e4:	20008188 	.word	0x20008188
   2d7e8:	2000925c 	.word	0x2000925c
   2d7ec:	0003b009 	.word	0x0003b009
   2d7f0:	0003b011 	.word	0x0003b011
   2d7f4:	0003af70 	.word	0x0003af70
   2d7f8:	0003bba7 	.word	0x0003bba7
   2d7fc:	20008328 	.word	0x20008328
   2d800:	0003af62 	.word	0x0003af62
   2d804:	0003af87 	.word	0x0003af87
   2d808:	0003c00a 	.word	0x0003c00a
   2d80c:	0003ba4d 	.word	0x0003ba4d
   2d810:	0003b01f 	.word	0x0003b01f
   2d814:	0003b045 	.word	0x0003b045
   2d818:	0003af8f 	.word	0x0003af8f
   2d81c:	0003af97 	.word	0x0003af97
   2d820:	0003b086 	.word	0x0003b086
   2d824:	0003afa7 	.word	0x0003afa7
   2d828:	0003b092 	.word	0x0003b092
   2d82c:	0003b0b6 	.word	0x0003b0b6
   2d830:	0003af9f 	.word	0x0003af9f
   2d834:	0003b0c4 	.word	0x0003b0c4

0002d838 <dynamic_cmd_get>:
}

/* dynamic command creation */
static void dynamic_cmd_get(size_t idx, struct shell_static_entry *entry)
{
	if (idx < dynamic_cmd_cnt) {
   2d838:	4b08      	ldr	r3, [pc, #32]	; (2d85c <dynamic_cmd_get+0x24>)
   2d83a:	781b      	ldrb	r3, [r3, #0]
   2d83c:	4283      	cmp	r3, r0
   2d83e:	d90a      	bls.n	2d856 <dynamic_cmd_get+0x1e>
		/* m_dynamic_cmd_buffer must be sorted alphabetically to ensure
		 * correct CLI completion
		 */
		entry->syntax = dynamic_cmd_buffer[idx];
   2d840:	4b07      	ldr	r3, [pc, #28]	; (2d860 <dynamic_cmd_get+0x28>)
   2d842:	eb00 1040 	add.w	r0, r0, r0, lsl #5
   2d846:	4418      	add	r0, r3
		entry->handler  = NULL;
   2d848:	2300      	movs	r3, #0
		entry->subcmd = NULL;
   2d84a:	e9c1 3302 	strd	r3, r3, [r1, #8]
		entry->help = "Show dynamic command name.";
   2d84e:	4b05      	ldr	r3, [pc, #20]	; (2d864 <dynamic_cmd_get+0x2c>)
		entry->syntax = dynamic_cmd_buffer[idx];
   2d850:	6008      	str	r0, [r1, #0]
		entry->help = "Show dynamic command name.";
   2d852:	604b      	str	r3, [r1, #4]
   2d854:	4770      	bx	lr
	} else {
		/* if there are no more dynamic commands available syntax
		 * must be set to NULL.
		 */
		entry->syntax = NULL;
   2d856:	2300      	movs	r3, #0
   2d858:	600b      	str	r3, [r1, #0]
	}
}
   2d85a:	4770      	bx	lr
   2d85c:	20009510 	.word	0x20009510
   2d860:	2000927c 	.word	0x2000927c
   2d864:	0003b224 	.word	0x0003b224

0002d868 <cmd_dynamic_show>:
{
   2d868:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (dynamic_cmd_cnt == 0U) {
   2d86c:	4d12      	ldr	r5, [pc, #72]	; (2d8b8 <cmd_dynamic_show+0x50>)
{
   2d86e:	4606      	mov	r6, r0
	if (dynamic_cmd_cnt == 0U) {
   2d870:	782a      	ldrb	r2, [r5, #0]
   2d872:	b942      	cbnz	r2, 2d886 <cmd_dynamic_show+0x1e>
		shell_warn(shell, "Please add some commands first.");
   2d874:	2104      	movs	r1, #4
   2d876:	4a11      	ldr	r2, [pc, #68]	; (2d8bc <cmd_dynamic_show+0x54>)
   2d878:	f008 fe02 	bl	36480 <shell_fprintf>
   2d87c:	f06f 0007 	mvn.w	r0, #7
}
   2d880:	b002      	add	sp, #8
   2d882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	shell_print(shell, "Dynamic command list:");
   2d886:	2100      	movs	r1, #0
   2d888:	4a0d      	ldr	r2, [pc, #52]	; (2d8c0 <cmd_dynamic_show+0x58>)
   2d88a:	f008 fdf9 	bl	36480 <shell_fprintf>
	for (uint8_t i = 0; i < dynamic_cmd_cnt; i++) {
   2d88e:	2400      	movs	r4, #0
		shell_print(shell, "[%3d] %s", i, dynamic_cmd_buffer[i]);
   2d890:	4f0c      	ldr	r7, [pc, #48]	; (2d8c4 <cmd_dynamic_show+0x5c>)
   2d892:	f8df 8034 	ldr.w	r8, [pc, #52]	; 2d8c8 <cmd_dynamic_show+0x60>
	for (uint8_t i = 0; i < dynamic_cmd_cnt; i++) {
   2d896:	7829      	ldrb	r1, [r5, #0]
   2d898:	b2e3      	uxtb	r3, r4
   2d89a:	4299      	cmp	r1, r3
   2d89c:	d801      	bhi.n	2d8a2 <cmd_dynamic_show+0x3a>
	return 0;
   2d89e:	2000      	movs	r0, #0
   2d8a0:	e7ee      	b.n	2d880 <cmd_dynamic_show+0x18>
		shell_print(shell, "[%3d] %s", i, dynamic_cmd_buffer[i]);
   2d8a2:	eb03 1143 	add.w	r1, r3, r3, lsl #5
   2d8a6:	4439      	add	r1, r7
   2d8a8:	9100      	str	r1, [sp, #0]
   2d8aa:	4642      	mov	r2, r8
   2d8ac:	2100      	movs	r1, #0
   2d8ae:	4630      	mov	r0, r6
   2d8b0:	f008 fde6 	bl	36480 <shell_fprintf>
	for (uint8_t i = 0; i < dynamic_cmd_cnt; i++) {
   2d8b4:	3401      	adds	r4, #1
   2d8b6:	e7ee      	b.n	2d896 <cmd_dynamic_show+0x2e>
   2d8b8:	20009510 	.word	0x20009510
   2d8bc:	0003b23f 	.word	0x0003b23f
   2d8c0:	0003b260 	.word	0x0003b260
   2d8c4:	2000927c 	.word	0x2000927c
   2d8c8:	0003b277 	.word	0x0003b277

0002d8cc <cmd_dynamic_execute>:
{
   2d8cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2d8d0:	4606      	mov	r6, r0
   2d8d2:	4615      	mov	r5, r2
	for (uint8_t idx = 0; idx <  dynamic_cmd_cnt; idx++) {
   2d8d4:	2700      	movs	r7, #0
   2d8d6:	f8df 8058 	ldr.w	r8, [pc, #88]	; 2d930 <cmd_dynamic_execute+0x64>
		if (!strcmp(dynamic_cmd_buffer[idx], argv[1])) {
   2d8da:	f8df 9058 	ldr.w	r9, [pc, #88]	; 2d934 <cmd_dynamic_execute+0x68>
	for (uint8_t idx = 0; idx <  dynamic_cmd_cnt; idx++) {
   2d8de:	f898 2000 	ldrb.w	r2, [r8]
   2d8e2:	b2fb      	uxtb	r3, r7
   2d8e4:	429a      	cmp	r2, r3
   2d8e6:	6869      	ldr	r1, [r5, #4]
   2d8e8:	d809      	bhi.n	2d8fe <cmd_dynamic_execute+0x32>
	shell_error(shell, "%s: uknown parameter: %s", argv[0], argv[1]);
   2d8ea:	9100      	str	r1, [sp, #0]
   2d8ec:	4630      	mov	r0, r6
   2d8ee:	2102      	movs	r1, #2
   2d8f0:	682b      	ldr	r3, [r5, #0]
   2d8f2:	4a0d      	ldr	r2, [pc, #52]	; (2d928 <cmd_dynamic_execute+0x5c>)
   2d8f4:	f008 fdc4 	bl	36480 <shell_fprintf>
	return -ENOEXEC;
   2d8f8:	f06f 0407 	mvn.w	r4, #7
   2d8fc:	e00f      	b.n	2d91e <cmd_dynamic_execute+0x52>
		if (!strcmp(dynamic_cmd_buffer[idx], argv[1])) {
   2d8fe:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   2d902:	eb09 0003 	add.w	r0, r9, r3
   2d906:	f009 fe41 	bl	3758c <strcmp>
   2d90a:	3701      	adds	r7, #1
   2d90c:	4604      	mov	r4, r0
   2d90e:	2800      	cmp	r0, #0
   2d910:	d1e5      	bne.n	2d8de <cmd_dynamic_execute+0x12>
			shell_print(shell, "dynamic command: %s", argv[1]);
   2d912:	4601      	mov	r1, r0
   2d914:	686b      	ldr	r3, [r5, #4]
   2d916:	4630      	mov	r0, r6
   2d918:	4a04      	ldr	r2, [pc, #16]	; (2d92c <cmd_dynamic_execute+0x60>)
   2d91a:	f008 fdb1 	bl	36480 <shell_fprintf>
}
   2d91e:	4620      	mov	r0, r4
   2d920:	b003      	add	sp, #12
   2d922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2d926:	bf00      	nop
   2d928:	0003b296 	.word	0x0003b296
   2d92c:	0003b281 	.word	0x0003b281
   2d930:	20009510 	.word	0x20009510
   2d934:	2000927c 	.word	0x2000927c

0002d938 <cmd_dynamic_remove>:
{
   2d938:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint8_t idx = 0; idx <  dynamic_cmd_cnt; idx++) {
   2d93c:	f8df a08c 	ldr.w	sl, [pc, #140]	; 2d9cc <cmd_dynamic_remove+0x94>
{
   2d940:	4693      	mov	fp, r2
   2d942:	4606      	mov	r6, r0
	for (uint8_t idx = 0; idx <  dynamic_cmd_cnt; idx++) {
   2d944:	2200      	movs	r2, #0
   2d946:	46d0      	mov	r8, sl
		if (!strcmp(dynamic_cmd_buffer[idx], argv[1])) {
   2d948:	f8df 9084 	ldr.w	r9, [pc, #132]	; 2d9d0 <cmd_dynamic_remove+0x98>
	for (uint8_t idx = 0; idx <  dynamic_cmd_cnt; idx++) {
   2d94c:	f89a 1000 	ldrb.w	r1, [sl]
   2d950:	b2d4      	uxtb	r4, r2
   2d952:	42a1      	cmp	r1, r4
   2d954:	f8db 3004 	ldr.w	r3, [fp, #4]
   2d958:	d807      	bhi.n	2d96a <cmd_dynamic_remove+0x32>
	shell_error(shell, "did not find command: %s", argv[1]);
   2d95a:	2102      	movs	r1, #2
   2d95c:	4630      	mov	r0, r6
   2d95e:	4a19      	ldr	r2, [pc, #100]	; (2d9c4 <cmd_dynamic_remove+0x8c>)
   2d960:	f008 fd8e 	bl	36480 <shell_fprintf>
	return -ENOEXEC;
   2d964:	f06f 0507 	mvn.w	r5, #7
   2d968:	e01a      	b.n	2d9a0 <cmd_dynamic_remove+0x68>
		if (!strcmp(dynamic_cmd_buffer[idx], argv[1])) {
   2d96a:	eb04 1744 	add.w	r7, r4, r4, lsl #5
   2d96e:	444f      	add	r7, r9
   2d970:	4619      	mov	r1, r3
   2d972:	4638      	mov	r0, r7
   2d974:	9201      	str	r2, [sp, #4]
   2d976:	f009 fe09 	bl	3758c <strcmp>
   2d97a:	9a01      	ldr	r2, [sp, #4]
   2d97c:	4605      	mov	r5, r0
   2d97e:	3201      	adds	r2, #1
   2d980:	2800      	cmp	r0, #0
   2d982:	d1e3      	bne.n	2d94c <cmd_dynamic_remove+0x14>
			if (idx == MAX_CMD_CNT - 1) {
   2d984:	2c13      	cmp	r4, #19
   2d986:	d10f      	bne.n	2d9a8 <cmd_dynamic_remove+0x70>
				dynamic_cmd_buffer[idx][0] = '\0';
   2d988:	f889 0273 	strb.w	r0, [r9, #627]	; 0x273
			--dynamic_cmd_cnt;
   2d98c:	f898 3000 	ldrb.w	r3, [r8]
			shell_print(shell, "command removed successfully");
   2d990:	2100      	movs	r1, #0
			--dynamic_cmd_cnt;
   2d992:	3b01      	subs	r3, #1
			shell_print(shell, "command removed successfully");
   2d994:	4630      	mov	r0, r6
   2d996:	4a0c      	ldr	r2, [pc, #48]	; (2d9c8 <cmd_dynamic_remove+0x90>)
			--dynamic_cmd_cnt;
   2d998:	f888 3000 	strb.w	r3, [r8]
			shell_print(shell, "command removed successfully");
   2d99c:	f008 fd70 	bl	36480 <shell_fprintf>
}
   2d9a0:	4628      	mov	r0, r5
   2d9a2:	b003      	add	sp, #12
   2d9a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					(dynamic_cmd_cnt - idx));
   2d9a8:	f89a 2000 	ldrb.w	r2, [sl]
				memmove(dynamic_cmd_buffer[idx],
   2d9ac:	4638      	mov	r0, r7
					(dynamic_cmd_cnt - idx));
   2d9ae:	1b12      	subs	r2, r2, r4
					dynamic_cmd_buffer[idx + 1],
   2d9b0:	3401      	adds	r4, #1
   2d9b2:	eb04 1444 	add.w	r4, r4, r4, lsl #5
				memmove(dynamic_cmd_buffer[idx],
   2d9b6:	eb02 1242 	add.w	r2, r2, r2, lsl #5
   2d9ba:	eb09 0104 	add.w	r1, r9, r4
   2d9be:	f009 fe10 	bl	375e2 <memmove>
   2d9c2:	e7e3      	b.n	2d98c <cmd_dynamic_remove+0x54>
   2d9c4:	0003b2ce 	.word	0x0003b2ce
   2d9c8:	0003b2b0 	.word	0x0003b2b0
   2d9cc:	20009510 	.word	0x20009510
   2d9d0:	2000927c 	.word	0x2000927c

0002d9d4 <cmd_dynamic_add>:
{
   2d9d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (dynamic_cmd_cnt >= MAX_CMD_CNT) {
   2d9d8:	4d29      	ldr	r5, [pc, #164]	; (2da80 <cmd_dynamic_add+0xac>)
{
   2d9da:	4604      	mov	r4, r0
	if (dynamic_cmd_cnt >= MAX_CMD_CNT) {
   2d9dc:	782b      	ldrb	r3, [r5, #0]
{
   2d9de:	4616      	mov	r6, r2
	if (dynamic_cmd_cnt >= MAX_CMD_CNT) {
   2d9e0:	2b13      	cmp	r3, #19
   2d9e2:	d907      	bls.n	2d9f4 <cmd_dynamic_add+0x20>
		shell_error(shell, "command limit reached");
   2d9e4:	2102      	movs	r1, #2
   2d9e6:	4a27      	ldr	r2, [pc, #156]	; (2da84 <cmd_dynamic_add+0xb0>)
			shell_error(shell, "duplicated command");
   2d9e8:	f008 fd4a 	bl	36480 <shell_fprintf>
			return -ENOEXEC;
   2d9ec:	f06f 0007 	mvn.w	r0, #7
}
   2d9f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	cmd_len = strlen(argv[1]);
   2d9f4:	6850      	ldr	r0, [r2, #4]
   2d9f6:	f009 fdb9 	bl	3756c <strlen>
   2d9fa:	b280      	uxth	r0, r0
	if (cmd_len >= MAX_CMD_LEN) {
   2d9fc:	2820      	cmp	r0, #32
   2d9fe:	d80f      	bhi.n	2da20 <cmd_dynamic_add+0x4c>
   2da00:	2300      	movs	r3, #0
   2da02:	6877      	ldr	r7, [r6, #4]
	for (idx = 0U; idx < cmd_len; idx++) {
   2da04:	b29a      	uxth	r2, r3
   2da06:	4290      	cmp	r0, r2
   2da08:	d80e      	bhi.n	2da28 <cmd_dynamic_add+0x54>
   2da0a:	4f1f      	ldr	r7, [pc, #124]	; (2da88 <cmd_dynamic_add+0xb4>)
   2da0c:	f04f 0800 	mov.w	r8, #0
   2da10:	46b9      	mov	r9, r7
		if (!strcmp(dynamic_cmd_buffer[idx], argv[1])) {
   2da12:	4638      	mov	r0, r7
   2da14:	6871      	ldr	r1, [r6, #4]
   2da16:	f009 fdb9 	bl	3758c <strcmp>
   2da1a:	b990      	cbnz	r0, 2da42 <cmd_dynamic_add+0x6e>
			shell_error(shell, "duplicated command");
   2da1c:	4a1b      	ldr	r2, [pc, #108]	; (2da8c <cmd_dynamic_add+0xb8>)
   2da1e:	e000      	b.n	2da22 <cmd_dynamic_add+0x4e>
		shell_error(shell, "too long command");
   2da20:	4a1b      	ldr	r2, [pc, #108]	; (2da90 <cmd_dynamic_add+0xbc>)
			shell_error(shell, "duplicated command");
   2da22:	2102      	movs	r1, #2
   2da24:	4620      	mov	r0, r4
   2da26:	e7df      	b.n	2d9e8 <cmd_dynamic_add+0x14>
		if (!isalnum((int)(argv[1][idx]))) {
   2da28:	5cfa      	ldrb	r2, [r7, r3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
}

static inline int isalpha(int c)
{
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   2da2a:	f042 0120 	orr.w	r1, r2, #32
   2da2e:	3961      	subs	r1, #97	; 0x61
				(int)'z') ? (chr - 32) : (chr));
}

static inline int isalnum(int chr)
{
	return (int)(isalpha(chr) || isdigit(chr));
   2da30:	2919      	cmp	r1, #25
   2da32:	d904      	bls.n	2da3e <cmd_dynamic_add+0x6a>
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   2da34:	3a30      	subs	r2, #48	; 0x30
	return (int)(isalpha(chr) || isdigit(chr));
   2da36:	2a09      	cmp	r2, #9
   2da38:	d901      	bls.n	2da3e <cmd_dynamic_add+0x6a>
			shell_error(shell,
   2da3a:	4a16      	ldr	r2, [pc, #88]	; (2da94 <cmd_dynamic_add+0xc0>)
   2da3c:	e7f1      	b.n	2da22 <cmd_dynamic_add+0x4e>
	for (idx = 0U; idx < cmd_len; idx++) {
   2da3e:	3301      	adds	r3, #1
   2da40:	e7e0      	b.n	2da04 <cmd_dynamic_add+0x30>
	for (idx = 0U; idx < MAX_CMD_CNT; idx++) {
   2da42:	f108 0801 	add.w	r8, r8, #1
   2da46:	f1b8 0f14 	cmp.w	r8, #20
   2da4a:	f107 0721 	add.w	r7, r7, #33	; 0x21
   2da4e:	d1e0      	bne.n	2da12 <cmd_dynamic_add+0x3e>
	sprintf(dynamic_cmd_buffer[dynamic_cmd_cnt++], "%s", argv[1]);
   2da50:	7828      	ldrb	r0, [r5, #0]
   2da52:	6872      	ldr	r2, [r6, #4]
   2da54:	1c43      	adds	r3, r0, #1
   2da56:	eb00 1040 	add.w	r0, r0, r0, lsl #5
   2da5a:	490f      	ldr	r1, [pc, #60]	; (2da98 <cmd_dynamic_add+0xc4>)
   2da5c:	4448      	add	r0, r9
   2da5e:	702b      	strb	r3, [r5, #0]
   2da60:	f004 fe50 	bl	32704 <sprintf>
	qsort(dynamic_cmd_buffer, dynamic_cmd_cnt,
   2da64:	2221      	movs	r2, #33	; 0x21
   2da66:	4b0d      	ldr	r3, [pc, #52]	; (2da9c <cmd_dynamic_add+0xc8>)
   2da68:	7829      	ldrb	r1, [r5, #0]
   2da6a:	4807      	ldr	r0, [pc, #28]	; (2da88 <cmd_dynamic_add+0xb4>)
   2da6c:	f007 fa94 	bl	34f98 <qsort>
	shell_print(shell, "command added successfully");
   2da70:	4620      	mov	r0, r4
   2da72:	2100      	movs	r1, #0
   2da74:	4a0a      	ldr	r2, [pc, #40]	; (2daa0 <cmd_dynamic_add+0xcc>)
   2da76:	f008 fd03 	bl	36480 <shell_fprintf>
	return 0;
   2da7a:	2000      	movs	r0, #0
   2da7c:	e7b8      	b.n	2d9f0 <cmd_dynamic_add+0x1c>
   2da7e:	bf00      	nop
   2da80:	20009510 	.word	0x20009510
   2da84:	0003b2e8 	.word	0x0003b2e8
   2da88:	2000927c 	.word	0x2000927c
   2da8c:	0003b34f 	.word	0x0003b34f
   2da90:	0003b2ff 	.word	0x0003b2ff
   2da94:	0003b311 	.word	0x0003b311
   2da98:	0003bb9b 	.word	0x0003bb9b
   2da9c:	00034f3f 	.word	0x00034f3f
   2daa0:	0003b363 	.word	0x0003b363

0002daa4 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   2daa4:	680b      	ldr	r3, [r1, #0]
   2daa6:	3301      	adds	r3, #1
   2daa8:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   2daaa:	4b01      	ldr	r3, [pc, #4]	; (2dab0 <char_out+0xc>)
   2daac:	681b      	ldr	r3, [r3, #0]
   2daae:	4718      	bx	r3
   2dab0:	20008000 	.word	0x20008000

0002dab4 <__printk_hook_install>:
	_char_out = fn;
   2dab4:	4b01      	ldr	r3, [pc, #4]	; (2dabc <__printk_hook_install+0x8>)
   2dab6:	6018      	str	r0, [r3, #0]
}
   2dab8:	4770      	bx	lr
   2daba:	bf00      	nop
   2dabc:	20008000 	.word	0x20008000

0002dac0 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   2dac0:	b507      	push	{r0, r1, r2, lr}
   2dac2:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   2dac4:	2100      	movs	r1, #0
{
   2dac6:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   2dac8:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   2daca:	4803      	ldr	r0, [pc, #12]	; (2dad8 <vprintk+0x18>)
   2dacc:	a901      	add	r1, sp, #4
   2dace:	f000 f981 	bl	2ddd4 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   2dad2:	b003      	add	sp, #12
   2dad4:	f85d fb04 	ldr.w	pc, [sp], #4
   2dad8:	0002daa5 	.word	0x0002daa5

0002dadc <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   2dadc:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   2dade:	2500      	movs	r5, #0
{
   2dae0:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   2dae2:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   2dae6:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
   2dae8:	a901      	add	r1, sp, #4
   2daea:	4805      	ldr	r0, [pc, #20]	; (2db00 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   2daec:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   2daee:	f000 f971 	bl	2ddd4 <cbvprintf>

	if (ctx.count < ctx.max) {
   2daf2:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   2daf6:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   2daf8:	bfb8      	it	lt
   2dafa:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   2dafc:	b005      	add	sp, #20
   2dafe:	bd30      	pop	{r4, r5, pc}
   2db00:	000352f3 	.word	0x000352f3

0002db04 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   2db04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2db08:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
   2db0c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   2db0e:	f019 0808 	ands.w	r8, r9, #8
{
   2db12:	4693      	mov	fp, r2
	if (processing) {
   2db14:	d00d      	beq.n	2db32 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
   2db16:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   2db18:	bf0c      	ite	eq
   2db1a:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   2db1e:	f049 0920 	orrne.w	r9, r9, #32
   2db22:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   2db26:	f38b 8811 	msr	BASEPRI, fp
   2db2a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   2db2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2db32:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   2db36:	2902      	cmp	r1, #2
   2db38:	d107      	bne.n	2db4a <process_event+0x46>
			evt = process_recheck(mgr);
   2db3a:	4620      	mov	r0, r4
   2db3c:	f007 fc06 	bl	3534c <process_recheck>
		if (evt == EVT_NOP) {
   2db40:	2800      	cmp	r0, #0
   2db42:	d0f0      	beq.n	2db26 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   2db44:	2801      	cmp	r0, #1
   2db46:	8b23      	ldrh	r3, [r4, #24]
   2db48:	d150      	bne.n	2dbec <process_event+0xe8>
			res = mgr->last_res;
   2db4a:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2db4c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   2db4e:	2f00      	cmp	r7, #0
   2db50:	da15      	bge.n	2db7e <process_event+0x7a>
		*clients = mgr->clients;
   2db52:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2db54:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   2db58:	e9c4 8800 	strd	r8, r8, [r4]
   2db5c:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   2db60:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   2db62:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   2db64:	8b21      	ldrh	r1, [r4, #24]
   2db66:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   2db6a:	45ca      	cmp	sl, r9
   2db6c:	d002      	beq.n	2db74 <process_event+0x70>
		if (do_monitors
   2db6e:	68a3      	ldr	r3, [r4, #8]
   2db70:	2b00      	cmp	r3, #0
   2db72:	d15c      	bne.n	2dc2e <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
   2db74:	b90d      	cbnz	r5, 2db7a <process_event+0x76>
		    || (transit != NULL)) {
   2db76:	2e00      	cmp	r6, #0
   2db78:	d074      	beq.n	2dc64 <process_event+0x160>
   2db7a:	2300      	movs	r3, #0
   2db7c:	e058      	b.n	2dc30 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2db7e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   2db82:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   2db84:	2a01      	cmp	r2, #1
   2db86:	d820      	bhi.n	2dbca <process_event+0xc6>
		*clients = mgr->clients;
   2db88:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   2db8c:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   2db8e:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
   2db90:	b289      	uxth	r1, r1
	list->tail = NULL;
   2db92:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   2db96:	d10c      	bne.n	2dbb2 <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   2db98:	2d00      	cmp	r5, #0
   2db9a:	462b      	mov	r3, r5
   2db9c:	bf38      	it	cc
   2db9e:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   2dba0:	b12b      	cbz	r3, 2dbae <process_event+0xaa>
				mgr->refs += 1U;
   2dba2:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2dba4:	681b      	ldr	r3, [r3, #0]
   2dba6:	3201      	adds	r2, #1
   2dba8:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   2dbaa:	2b00      	cmp	r3, #0
   2dbac:	d1f8      	bne.n	2dba0 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2dbae:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
   2dbb2:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   2dbb4:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   2dbb6:	f007 fbc9 	bl	3534c <process_recheck>
   2dbba:	4606      	mov	r6, r0
   2dbbc:	2800      	cmp	r0, #0
   2dbbe:	d0d1      	beq.n	2db64 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   2dbc0:	8b23      	ldrh	r3, [r4, #24]
   2dbc2:	f043 0320 	orr.w	r3, r3, #32
   2dbc6:	8323      	strh	r3, [r4, #24]
   2dbc8:	e7cb      	b.n	2db62 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   2dbca:	2b04      	cmp	r3, #4
   2dbcc:	d10c      	bne.n	2dbe8 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2dbce:	f021 0107 	bic.w	r1, r1, #7
   2dbd2:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
   2dbd4:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   2dbd6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   2dbd8:	f007 fbb8 	bl	3534c <process_recheck>
   2dbdc:	4605      	mov	r5, r0
   2dbde:	2800      	cmp	r0, #0
   2dbe0:	d0bf      	beq.n	2db62 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   2dbe2:	f041 0120 	orr.w	r1, r1, #32
   2dbe6:	8321      	strh	r1, [r4, #24]
   2dbe8:	2500      	movs	r5, #0
   2dbea:	e7ba      	b.n	2db62 <process_event+0x5e>
		} else if (evt == EVT_START) {
   2dbec:	2803      	cmp	r0, #3
   2dbee:	d109      	bne.n	2dc04 <process_event+0x100>
			transit = mgr->transitions->start;
   2dbf0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2dbf2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   2dbf6:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2dbf8:	f043 0306 	orr.w	r3, r3, #6
}
   2dbfc:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
   2dbfe:	8323      	strh	r3, [r4, #24]
		res = 0;
   2dc00:	462f      	mov	r7, r5
   2dc02:	e7af      	b.n	2db64 <process_event+0x60>
		} else if (evt == EVT_STOP) {
   2dc04:	2804      	cmp	r0, #4
   2dc06:	d106      	bne.n	2dc16 <process_event+0x112>
			transit = mgr->transitions->stop;
   2dc08:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2dc0a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   2dc0e:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2dc10:	f043 0304 	orr.w	r3, r3, #4
   2dc14:	e7f2      	b.n	2dbfc <process_event+0xf8>
		} else if (evt == EVT_RESET) {
   2dc16:	2805      	cmp	r0, #5
   2dc18:	d106      	bne.n	2dc28 <process_event+0x124>
			transit = mgr->transitions->reset;
   2dc1a:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2dc1c:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   2dc20:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2dc22:	f043 0305 	orr.w	r3, r3, #5
   2dc26:	e7e9      	b.n	2dbfc <process_event+0xf8>
   2dc28:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   2dc2a:	462e      	mov	r6, r5
   2dc2c:	e7e8      	b.n	2dc00 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
   2dc2e:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   2dc30:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   2dc34:	8321      	strh	r1, [r4, #24]
   2dc36:	f38b 8811 	msr	BASEPRI, fp
   2dc3a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   2dc3e:	bb03      	cbnz	r3, 2dc82 <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
   2dc40:	2d00      	cmp	r5, #0
   2dc42:	d133      	bne.n	2dcac <process_event+0x1a8>
			if (transit != NULL) {
   2dc44:	b116      	cbz	r6, 2dc4c <process_event+0x148>
				transit(mgr, transition_complete);
   2dc46:	4620      	mov	r0, r4
   2dc48:	4920      	ldr	r1, [pc, #128]	; (2dccc <process_event+0x1c8>)
   2dc4a:	47b0      	blx	r6
	__asm__ volatile(
   2dc4c:	f04f 0320 	mov.w	r3, #32
   2dc50:	f3ef 8b11 	mrs	fp, BASEPRI
   2dc54:	f383 8811 	msr	BASEPRI, r3
   2dc58:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   2dc5c:	8b23      	ldrh	r3, [r4, #24]
   2dc5e:	f023 0308 	bic.w	r3, r3, #8
   2dc62:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   2dc64:	8b23      	ldrh	r3, [r4, #24]
   2dc66:	06da      	lsls	r2, r3, #27
   2dc68:	d528      	bpl.n	2dcbc <process_event+0x1b8>
			evt = EVT_COMPLETE;
   2dc6a:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   2dc6c:	f023 0310 	bic.w	r3, r3, #16
   2dc70:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   2dc72:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   2dc76:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   2dc7a:	2900      	cmp	r1, #0
   2dc7c:	f47f af5b 	bne.w	2db36 <process_event+0x32>
out:
   2dc80:	e751      	b.n	2db26 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   2dc82:	68a1      	ldr	r1, [r4, #8]
   2dc84:	2900      	cmp	r1, #0
   2dc86:	d0db      	beq.n	2dc40 <process_event+0x13c>
	return node->next;
   2dc88:	680b      	ldr	r3, [r1, #0]
   2dc8a:	2b00      	cmp	r3, #0
   2dc8c:	bf38      	it	cc
   2dc8e:	2300      	movcc	r3, #0
   2dc90:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
   2dc92:	4652      	mov	r2, sl
   2dc94:	463b      	mov	r3, r7
   2dc96:	4620      	mov	r0, r4
   2dc98:	f8d1 b004 	ldr.w	fp, [r1, #4]
   2dc9c:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   2dc9e:	f1b9 0f00 	cmp.w	r9, #0
   2dca2:	d0cd      	beq.n	2dc40 <process_event+0x13c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2dca4:	4649      	mov	r1, r9
   2dca6:	f8d9 3000 	ldr.w	r3, [r9]
   2dcaa:	e7ee      	b.n	2dc8a <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2dcac:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   2dcae:	463b      	mov	r3, r7
   2dcb0:	4652      	mov	r2, sl
   2dcb2:	4620      	mov	r0, r4
   2dcb4:	682d      	ldr	r5, [r5, #0]
   2dcb6:	f007 fb65 	bl	35384 <notify_one>
   2dcba:	e7c1      	b.n	2dc40 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   2dcbc:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   2dcc0:	bf1e      	ittt	ne
   2dcc2:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
   2dcc6:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   2dcc8:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   2dcca:	e7d2      	b.n	2dc72 <process_event+0x16e>
   2dccc:	000353b1 	.word	0x000353b1

0002dcd0 <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

int64_t timeutil_timegm64(const struct tm *tm)
{
   2dcd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int64_t y = 1900 + (int64_t)tm->tm_year;
	unsigned int m = tm->tm_mon + 1;
   2dcd4:	6903      	ldr	r3, [r0, #16]
	unsigned int d = tm->tm_mday - 1;
   2dcd6:	68c4      	ldr	r4, [r0, #12]
	unsigned int m = tm->tm_mon + 1;
   2dcd8:	f103 0901 	add.w	r9, r3, #1
	unsigned int d = tm->tm_mday - 1;
   2dcdc:	1e63      	subs	r3, r4, #1
	int64_t y = 1900 + (int64_t)tm->tm_year;
   2dcde:	f240 746c 	movw	r4, #1900	; 0x76c
   2dce2:	2500      	movs	r5, #0
	unsigned int d = tm->tm_mday - 1;
   2dce4:	9301      	str	r3, [sp, #4]
	int64_t y = 1900 + (int64_t)tm->tm_year;
   2dce6:	6943      	ldr	r3, [r0, #20]
{
   2dce8:	4680      	mov	r8, r0
	int64_t y = 1900 + (int64_t)tm->tm_year;
   2dcea:	18e4      	adds	r4, r4, r3
   2dcec:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
	y -= m <= 2;
   2dcf0:	f1b9 0f02 	cmp.w	r9, #2
   2dcf4:	bf8c      	ite	hi
   2dcf6:	2300      	movhi	r3, #0
   2dcf8:	2301      	movls	r3, #1
   2dcfa:	1ae4      	subs	r4, r4, r3
   2dcfc:	f165 0500 	sbc.w	r5, r5, #0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   2dd00:	2c00      	cmp	r4, #0
   2dd02:	f175 0300 	sbcs.w	r3, r5, #0
   2dd06:	da57      	bge.n	2ddb8 <timeutil_timegm64+0xe8>
   2dd08:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
   2dd0c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   2dd10:	2300      	movs	r3, #0
   2dd12:	1820      	adds	r0, r4, r0
   2dd14:	f145 31ff 	adc.w	r1, r5, #4294967295
   2dd18:	f7f2 fa92 	bl	20240 <__aeabi_ldivmod>
	unsigned int yoe = y - era * 400;
   2dd1c:	4b29      	ldr	r3, [pc, #164]	; (2ddc4 <timeutil_timegm64+0xf4>)
	int64_t ndays = time_days_from_civil(y, m, d);
	int64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   2dd1e:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
	unsigned int yoe = y - era * 400;
   2dd22:	fb03 4400 	mla	r4, r3, r0, r4
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   2dd26:	e9d8 5300 	ldrd	r5, r3, [r8]
   2dd2a:	469a      	mov	sl, r3
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   2dd2c:	f1b9 0f02 	cmp.w	r9, #2
   2dd30:	bf8c      	ite	hi
   2dd32:	f06f 0e02 	mvnhi.w	lr, #2
   2dd36:	f04f 0e09 	movls.w	lr, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   2dd3a:	ea4f 7be3 	mov.w	fp, r3, asr #31
   2dd3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   2dd42:	44f1      	add	r9, lr
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   2dd44:	fbcc ab03 	smlal	sl, fp, ip, r3
   2dd48:	fbaa 230c 	umull	r2, r3, sl, ip
   2dd4c:	fb0c 330b 	mla	r3, ip, fp, r3
   2dd50:	1952      	adds	r2, r2, r5
   2dd52:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   2dd56:	f240 156d 	movw	r5, #365	; 0x16d
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   2dd5a:	f04f 0e99 	mov.w	lr, #153	; 0x99
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   2dd5e:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   2dd62:	fb05 cc04 	mla	ip, r5, r4, ip
   2dd66:	9d01      	ldr	r5, [sp, #4]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   2dd68:	fb0e fe09 	mul.w	lr, lr, r9
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   2dd6c:	4465      	add	r5, ip
   2dd6e:	f04f 0c64 	mov.w	ip, #100	; 0x64
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   2dd72:	f04f 0905 	mov.w	r9, #5
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   2dd76:	fbb4 f4fc 	udiv	r4, r4, ip
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   2dd7a:	f10e 0e02 	add.w	lr, lr, #2
   2dd7e:	fbbe fef9 	udiv	lr, lr, r9
	return era * 146097 + (time_t)doe - 719468;
   2dd82:	f8df c04c 	ldr.w	ip, [pc, #76]	; 2ddd0 <timeutil_timegm64+0x100>
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   2dd86:	1b2c      	subs	r4, r5, r4
   2dd88:	44a6      	add	lr, r4
	return era * 146097 + (time_t)doe - 719468;
   2dd8a:	fba0 450c 	umull	r4, r5, r0, ip
   2dd8e:	fb0c 5501 	mla	r5, ip, r1, r5
   2dd92:	490d      	ldr	r1, [pc, #52]	; (2ddc8 <timeutil_timegm64+0xf8>)
   2dd94:	1866      	adds	r6, r4, r1
	time += 86400LL * ndays;
   2dd96:	490d      	ldr	r1, [pc, #52]	; (2ddcc <timeutil_timegm64+0xfc>)
	return era * 146097 + (time_t)doe - 719468;
   2dd98:	f145 37ff 	adc.w	r7, r5, #4294967295
   2dd9c:	eb16 060e 	adds.w	r6, r6, lr
	time += 86400LL * ndays;
   2dda0:	fba6 4501 	umull	r4, r5, r6, r1
	return era * 146097 + (time_t)doe - 719468;
   2dda4:	f147 0700 	adc.w	r7, r7, #0
	time += 86400LL * ndays;
   2dda8:	fb01 5507 	mla	r5, r1, r7, r5

	return time;
}
   2ddac:	18a0      	adds	r0, r4, r2
   2ddae:	eb45 0103 	adc.w	r1, r5, r3
   2ddb2:	b003      	add	sp, #12
   2ddb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   2ddb8:	f44f 72c8 	mov.w	r2, #400	; 0x190
   2ddbc:	2300      	movs	r3, #0
   2ddbe:	4620      	mov	r0, r4
   2ddc0:	4629      	mov	r1, r5
   2ddc2:	e7a9      	b.n	2dd18 <timeutil_timegm64+0x48>
   2ddc4:	fffffe70 	.word	0xfffffe70
   2ddc8:	fff50594 	.word	0xfff50594
   2ddcc:	00015180 	.word	0x00015180
   2ddd0:	00023ab1 	.word	0x00023ab1

0002ddd4 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   2ddd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ddd8:	468b      	mov	fp, r1
   2ddda:	4692      	mov	sl, r2
   2dddc:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   2ddde:	2500      	movs	r5, #0
{
   2dde0:	b091      	sub	sp, #68	; 0x44
   2dde2:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   2dde4:	f89a 0000 	ldrb.w	r0, [sl]
   2dde8:	b908      	cbnz	r0, 2ddee <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   2ddea:	4628      	mov	r0, r5
   2ddec:	e35e      	b.n	2e4ac <cbvprintf+0x6d8>
		if (*fp != '%') {
   2ddee:	2825      	cmp	r0, #37	; 0x25
   2ddf0:	f10a 0701 	add.w	r7, sl, #1
   2ddf4:	d007      	beq.n	2de06 <cbvprintf+0x32>
			OUTC('%');
   2ddf6:	4659      	mov	r1, fp
   2ddf8:	9b02      	ldr	r3, [sp, #8]
   2ddfa:	4798      	blx	r3
   2ddfc:	2800      	cmp	r0, #0
   2ddfe:	f2c0 8355 	blt.w	2e4ac <cbvprintf+0x6d8>
   2de02:	3501      	adds	r5, #1
			break;
   2de04:	e210      	b.n	2e228 <cbvprintf+0x454>
		} state = {
   2de06:	2218      	movs	r2, #24
   2de08:	2100      	movs	r1, #0
   2de0a:	a80a      	add	r0, sp, #40	; 0x28
   2de0c:	f009 fc2b 	bl	37666 <memset>
	if (*sp == '%') {
   2de10:	f89a 3001 	ldrb.w	r3, [sl, #1]
   2de14:	2b25      	cmp	r3, #37	; 0x25
   2de16:	d078      	beq.n	2df0a <cbvprintf+0x136>
   2de18:	2200      	movs	r2, #0
   2de1a:	4694      	mov	ip, r2
   2de1c:	4616      	mov	r6, r2
   2de1e:	4696      	mov	lr, r2
   2de20:	4610      	mov	r0, r2
   2de22:	4639      	mov	r1, r7
		switch (*sp) {
   2de24:	f817 3b01 	ldrb.w	r3, [r7], #1
   2de28:	2b2b      	cmp	r3, #43	; 0x2b
   2de2a:	f000 809d 	beq.w	2df68 <cbvprintf+0x194>
   2de2e:	f200 8094 	bhi.w	2df5a <cbvprintf+0x186>
   2de32:	2b20      	cmp	r3, #32
   2de34:	f000 809b 	beq.w	2df6e <cbvprintf+0x19a>
   2de38:	2b23      	cmp	r3, #35	; 0x23
   2de3a:	f000 809a 	beq.w	2df72 <cbvprintf+0x19e>
   2de3e:	b128      	cbz	r0, 2de4c <cbvprintf+0x78>
   2de40:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   2de44:	f040 0004 	orr.w	r0, r0, #4
   2de48:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   2de4c:	f1be 0f00 	cmp.w	lr, #0
   2de50:	d005      	beq.n	2de5e <cbvprintf+0x8a>
   2de52:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   2de56:	f040 0008 	orr.w	r0, r0, #8
   2de5a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   2de5e:	b12e      	cbz	r6, 2de6c <cbvprintf+0x98>
   2de60:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   2de64:	f040 0010 	orr.w	r0, r0, #16
   2de68:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   2de6c:	f1bc 0f00 	cmp.w	ip, #0
   2de70:	d005      	beq.n	2de7e <cbvprintf+0xaa>
   2de72:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   2de76:	f040 0020 	orr.w	r0, r0, #32
   2de7a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   2de7e:	b12a      	cbz	r2, 2de8c <cbvprintf+0xb8>
   2de80:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   2de84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   2de88:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
   2de8c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   2de90:	f002 0044 	and.w	r0, r2, #68	; 0x44
   2de94:	2844      	cmp	r0, #68	; 0x44
   2de96:	d103      	bne.n	2dea0 <cbvprintf+0xcc>
		conv->flag_zero = false;
   2de98:	f36f 1286 	bfc	r2, #6, #1
   2de9c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
   2dea0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   2dea4:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
   2dea6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   2deaa:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   2deae:	d17b      	bne.n	2dfa8 <cbvprintf+0x1d4>
		conv->width_star = true;
   2deb0:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   2deb4:	1c4b      	adds	r3, r1, #1
   2deb6:	f042 0201 	orr.w	r2, r2, #1
   2deba:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
   2debe:	781a      	ldrb	r2, [r3, #0]
   2dec0:	2a2e      	cmp	r2, #46	; 0x2e
   2dec2:	bf0c      	ite	eq
   2dec4:	2101      	moveq	r1, #1
   2dec6:	2100      	movne	r1, #0
   2dec8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   2decc:	f361 0241 	bfi	r2, r1, #1, #1
   2ded0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
   2ded4:	d174      	bne.n	2dfc0 <cbvprintf+0x1ec>
	if (*sp == '*') {
   2ded6:	785a      	ldrb	r2, [r3, #1]
   2ded8:	2a2a      	cmp	r2, #42	; 0x2a
   2deda:	d06a      	beq.n	2dfb2 <cbvprintf+0x1de>
	size_t val = 0;
   2dedc:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
   2dede:	260a      	movs	r6, #10
   2dee0:	3301      	adds	r3, #1
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   2dee2:	4618      	mov	r0, r3
   2dee4:	f810 2b01 	ldrb.w	r2, [r0], #1
   2dee8:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   2deec:	2f09      	cmp	r7, #9
   2deee:	f240 808e 	bls.w	2e00e <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
   2def2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
   2def6:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
   2def8:	f3c2 0040 	ubfx	r0, r2, #1, #1
   2defc:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
   2df00:	f361 0241 	bfi	r2, r1, #1, #1
   2df04:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   2df08:	e05a      	b.n	2dfc0 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
   2df0a:	f10a 0702 	add.w	r7, sl, #2
   2df0e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
   2df12:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   2df16:	07d9      	lsls	r1, r3, #31
   2df18:	f140 8149 	bpl.w	2e1ae <cbvprintf+0x3da>
			width = va_arg(ap, int);
   2df1c:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
   2df20:	f1b9 0f00 	cmp.w	r9, #0
   2df24:	da07      	bge.n	2df36 <cbvprintf+0x162>
				conv->flag_dash = true;
   2df26:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
   2df2a:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
   2df2e:	f042 0204 	orr.w	r2, r2, #4
   2df32:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
   2df36:	075a      	lsls	r2, r3, #29
   2df38:	f140 8142 	bpl.w	2e1c0 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
   2df3c:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
   2df40:	f1b8 0f00 	cmp.w	r8, #0
   2df44:	f280 8141 	bge.w	2e1ca <cbvprintf+0x3f6>
				conv->prec_present = false;
   2df48:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   2df4c:	f36f 0341 	bfc	r3, #1, #1
   2df50:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
   2df54:	f04f 38ff 	mov.w	r8, #4294967295
   2df58:	e137      	b.n	2e1ca <cbvprintf+0x3f6>
		switch (*sp) {
   2df5a:	2b2d      	cmp	r3, #45	; 0x2d
   2df5c:	d00c      	beq.n	2df78 <cbvprintf+0x1a4>
   2df5e:	2b30      	cmp	r3, #48	; 0x30
   2df60:	f47f af6d 	bne.w	2de3e <cbvprintf+0x6a>
			conv->flag_zero = true;
   2df64:	2201      	movs	r2, #1
	} while (loop);
   2df66:	e75c      	b.n	2de22 <cbvprintf+0x4e>
			conv->flag_plus = true;
   2df68:	f04f 0e01 	mov.w	lr, #1
   2df6c:	e759      	b.n	2de22 <cbvprintf+0x4e>
			conv->flag_space = true;
   2df6e:	2601      	movs	r6, #1
   2df70:	e757      	b.n	2de22 <cbvprintf+0x4e>
			conv->flag_hash = true;
   2df72:	f04f 0c01 	mov.w	ip, #1
   2df76:	e754      	b.n	2de22 <cbvprintf+0x4e>
		switch (*sp) {
   2df78:	2001      	movs	r0, #1
   2df7a:	e752      	b.n	2de22 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
   2df7c:	4633      	mov	r3, r6
   2df7e:	fb0c 0202 	mla	r2, ip, r2, r0
   2df82:	3a30      	subs	r2, #48	; 0x30
   2df84:	461e      	mov	r6, r3
   2df86:	f816 0b01 	ldrb.w	r0, [r6], #1
   2df8a:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   2df8e:	2f09      	cmp	r7, #9
   2df90:	d9f4      	bls.n	2df7c <cbvprintf+0x1a8>
	if (sp != wp) {
   2df92:	4299      	cmp	r1, r3
   2df94:	d093      	beq.n	2debe <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   2df96:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
   2df9a:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
   2df9c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   2df9e:	f362 0141 	bfi	r1, r2, #1, #1
   2dfa2:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   2dfa6:	e78a      	b.n	2debe <cbvprintf+0xea>
   2dfa8:	460b      	mov	r3, r1
	size_t val = 0;
   2dfaa:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   2dfac:	f04f 0c0a 	mov.w	ip, #10
   2dfb0:	e7e8      	b.n	2df84 <cbvprintf+0x1b0>
		conv->prec_star = true;
   2dfb2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
   2dfb6:	3302      	adds	r3, #2
		conv->prec_star = true;
   2dfb8:	f042 0204 	orr.w	r2, r2, #4
   2dfbc:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
   2dfc0:	461f      	mov	r7, r3
   2dfc2:	f817 2b01 	ldrb.w	r2, [r7], #1
   2dfc6:	2a6c      	cmp	r2, #108	; 0x6c
   2dfc8:	d041      	beq.n	2e04e <cbvprintf+0x27a>
   2dfca:	d825      	bhi.n	2e018 <cbvprintf+0x244>
   2dfcc:	2a68      	cmp	r2, #104	; 0x68
   2dfce:	d02b      	beq.n	2e028 <cbvprintf+0x254>
   2dfd0:	2a6a      	cmp	r2, #106	; 0x6a
   2dfd2:	d046      	beq.n	2e062 <cbvprintf+0x28e>
   2dfd4:	2a4c      	cmp	r2, #76	; 0x4c
   2dfd6:	d04c      	beq.n	2e072 <cbvprintf+0x29e>
   2dfd8:	461f      	mov	r7, r3
	conv->specifier = *sp++;
   2dfda:	f817 2b01 	ldrb.w	r2, [r7], #1
   2dfde:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
   2dfe2:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   2dfe4:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
   2dfe8:	f200 80d9 	bhi.w	2e19e <cbvprintf+0x3ca>
   2dfec:	2a57      	cmp	r2, #87	; 0x57
   2dfee:	d84d      	bhi.n	2e08c <cbvprintf+0x2b8>
   2dff0:	2a41      	cmp	r2, #65	; 0x41
   2dff2:	d003      	beq.n	2dffc <cbvprintf+0x228>
   2dff4:	3a45      	subs	r2, #69	; 0x45
   2dff6:	2a02      	cmp	r2, #2
   2dff8:	f200 80d1 	bhi.w	2e19e <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
   2dffc:	2204      	movs	r2, #4
   2dffe:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   2e002:	f362 0302 	bfi	r3, r2, #0, #3
   2e006:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
   2e00a:	2301      	movs	r3, #1
			break;
   2e00c:	e09e      	b.n	2e14c <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
   2e00e:	fb06 2101 	mla	r1, r6, r1, r2
   2e012:	4603      	mov	r3, r0
   2e014:	3930      	subs	r1, #48	; 0x30
   2e016:	e764      	b.n	2dee2 <cbvprintf+0x10e>
	switch (*sp) {
   2e018:	2a74      	cmp	r2, #116	; 0x74
   2e01a:	d026      	beq.n	2e06a <cbvprintf+0x296>
   2e01c:	2a7a      	cmp	r2, #122	; 0x7a
   2e01e:	d1db      	bne.n	2dfd8 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
   2e020:	2206      	movs	r2, #6
   2e022:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   2e026:	e00d      	b.n	2e044 <cbvprintf+0x270>
		if (*++sp == 'h') {
   2e028:	785a      	ldrb	r2, [r3, #1]
   2e02a:	2a68      	cmp	r2, #104	; 0x68
   2e02c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   2e030:	d106      	bne.n	2e040 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
   2e032:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   2e034:	f361 02c6 	bfi	r2, r1, #3, #4
   2e038:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
   2e03c:	1c9f      	adds	r7, r3, #2
   2e03e:	e7cc      	b.n	2dfda <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
   2e040:	4613      	mov	r3, r2
   2e042:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
   2e044:	f362 03c6 	bfi	r3, r2, #3, #4
   2e048:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
   2e04c:	e7c5      	b.n	2dfda <cbvprintf+0x206>
		if (*++sp == 'l') {
   2e04e:	785a      	ldrb	r2, [r3, #1]
   2e050:	2a6c      	cmp	r2, #108	; 0x6c
   2e052:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   2e056:	d101      	bne.n	2e05c <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
   2e058:	2104      	movs	r1, #4
   2e05a:	e7eb      	b.n	2e034 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
   2e05c:	4613      	mov	r3, r2
   2e05e:	2203      	movs	r2, #3
   2e060:	e7f0      	b.n	2e044 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
   2e062:	2205      	movs	r2, #5
   2e064:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   2e068:	e7ec      	b.n	2e044 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
   2e06a:	2207      	movs	r2, #7
   2e06c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   2e070:	e7e8      	b.n	2e044 <cbvprintf+0x270>
		conv->unsupported = true;
   2e072:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   2e076:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   2e07a:	f023 0302 	bic.w	r3, r3, #2
   2e07e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   2e082:	f043 0302 	orr.w	r3, r3, #2
   2e086:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
   2e08a:	e7a6      	b.n	2dfda <cbvprintf+0x206>
   2e08c:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   2e090:	2920      	cmp	r1, #32
   2e092:	f200 8084 	bhi.w	2e19e <cbvprintf+0x3ca>
   2e096:	a001      	add	r0, pc, #4	; (adr r0, 2e09c <cbvprintf+0x2c8>)
   2e098:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   2e09c:	0002e161 	.word	0x0002e161
   2e0a0:	0002e19f 	.word	0x0002e19f
   2e0a4:	0002e19f 	.word	0x0002e19f
   2e0a8:	0002e19f 	.word	0x0002e19f
   2e0ac:	0002e19f 	.word	0x0002e19f
   2e0b0:	0002e19f 	.word	0x0002e19f
   2e0b4:	0002e19f 	.word	0x0002e19f
   2e0b8:	0002e19f 	.word	0x0002e19f
   2e0bc:	0002e19f 	.word	0x0002e19f
   2e0c0:	0002dffd 	.word	0x0002dffd
   2e0c4:	0002e19f 	.word	0x0002e19f
   2e0c8:	0002e161 	.word	0x0002e161
   2e0cc:	0002e121 	.word	0x0002e121
   2e0d0:	0002dffd 	.word	0x0002dffd
   2e0d4:	0002dffd 	.word	0x0002dffd
   2e0d8:	0002dffd 	.word	0x0002dffd
   2e0dc:	0002e19f 	.word	0x0002e19f
   2e0e0:	0002e121 	.word	0x0002e121
   2e0e4:	0002e19f 	.word	0x0002e19f
   2e0e8:	0002e19f 	.word	0x0002e19f
   2e0ec:	0002e19f 	.word	0x0002e19f
   2e0f0:	0002e19f 	.word	0x0002e19f
   2e0f4:	0002e169 	.word	0x0002e169
   2e0f8:	0002e161 	.word	0x0002e161
   2e0fc:	0002e185 	.word	0x0002e185
   2e100:	0002e19f 	.word	0x0002e19f
   2e104:	0002e19f 	.word	0x0002e19f
   2e108:	0002e185 	.word	0x0002e185
   2e10c:	0002e19f 	.word	0x0002e19f
   2e110:	0002e161 	.word	0x0002e161
   2e114:	0002e19f 	.word	0x0002e19f
   2e118:	0002e19f 	.word	0x0002e19f
   2e11c:	0002e161 	.word	0x0002e161
		conv->specifier_cat = SPECIFIER_SINT;
   2e120:	2001      	movs	r0, #1
   2e122:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   2e126:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   2e12a:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   2e12e:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   2e130:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
   2e134:	bf02      	ittt	eq
   2e136:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
   2e13a:	f041 0101 	orreq.w	r1, r1, #1
   2e13e:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
   2e142:	2a63      	cmp	r2, #99	; 0x63
   2e144:	d131      	bne.n	2e1aa <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
   2e146:	3b00      	subs	r3, #0
   2e148:	bf18      	it	ne
   2e14a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   2e14c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   2e150:	f3c2 0140 	ubfx	r1, r2, #1, #1
   2e154:	430b      	orrs	r3, r1
   2e156:	f363 0241 	bfi	r2, r3, #1, #1
   2e15a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   2e15e:	e6d8      	b.n	2df12 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
   2e160:	2002      	movs	r0, #2
   2e162:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   2e166:	e7de      	b.n	2e126 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
   2e168:	2103      	movs	r1, #3
   2e16a:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   2e16e:	f003 0378 	and.w	r3, r3, #120	; 0x78
   2e172:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   2e176:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   2e17a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   2e17c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   2e180:	4143      	adcs	r3, r0
   2e182:	e7e3      	b.n	2e14c <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
   2e184:	2103      	movs	r1, #3
   2e186:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   2e18a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   2e18e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   2e192:	bf14      	ite	ne
   2e194:	2301      	movne	r3, #1
   2e196:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
   2e198:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   2e19c:	e7d6      	b.n	2e14c <cbvprintf+0x378>
		conv->invalid = true;
   2e19e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   2e1a2:	f043 0301 	orr.w	r3, r3, #1
   2e1a6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
   2e1aa:	2300      	movs	r3, #0
   2e1ac:	e7ce      	b.n	2e14c <cbvprintf+0x378>
		} else if (conv->width_present) {
   2e1ae:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
   2e1b2:	2a00      	cmp	r2, #0
		int width = -1;
   2e1b4:	bfac      	ite	ge
   2e1b6:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
   2e1ba:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
   2e1be:	e6ba      	b.n	2df36 <cbvprintf+0x162>
		} else if (conv->prec_present) {
   2e1c0:	079b      	lsls	r3, r3, #30
   2e1c2:	f57f aec7 	bpl.w	2df54 <cbvprintf+0x180>
			precision = conv->prec_value;
   2e1c6:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
   2e1ca:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   2e1cc:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
   2e1d0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
   2e1d4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
   2e1d8:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   2e1dc:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   2e1de:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   2e1e2:	d136      	bne.n	2e252 <cbvprintf+0x47e>
			switch (length_mod) {
   2e1e4:	1ed3      	subs	r3, r2, #3
   2e1e6:	2b04      	cmp	r3, #4
   2e1e8:	d820      	bhi.n	2e22c <cbvprintf+0x458>
   2e1ea:	e8df f003 	tbb	[pc, r3]
   2e1ee:	0703      	.short	0x0703
   2e1f0:	1f07      	.short	0x1f07
   2e1f2:	1f          	.byte	0x1f
   2e1f3:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   2e1f4:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
   2e1f8:	17c1      	asrs	r1, r0, #31
   2e1fa:	e004      	b.n	2e206 <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
   2e1fc:	3407      	adds	r4, #7
   2e1fe:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   2e202:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
   2e206:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
   2e20a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   2e20e:	f013 0603 	ands.w	r6, r3, #3
   2e212:	d054      	beq.n	2e2be <cbvprintf+0x4ea>
			OUTS(sp, fp);
   2e214:	463b      	mov	r3, r7
   2e216:	4652      	mov	r2, sl
   2e218:	4659      	mov	r1, fp
   2e21a:	9802      	ldr	r0, [sp, #8]
   2e21c:	f007 fa80 	bl	35720 <outs>
   2e220:	2800      	cmp	r0, #0
   2e222:	f2c0 8143 	blt.w	2e4ac <cbvprintf+0x6d8>
   2e226:	4405      	add	r5, r0
			continue;
   2e228:	46ba      	mov	sl, r7
   2e22a:	e5db      	b.n	2dde4 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   2e22c:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
   2e230:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   2e232:	ea4f 71e0 	mov.w	r1, r0, asr #31
   2e236:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   2e23a:	d105      	bne.n	2e248 <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
   2e23c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
   2e240:	930a      	str	r3, [sp, #40]	; 0x28
   2e242:	2300      	movs	r3, #0
   2e244:	930b      	str	r3, [sp, #44]	; 0x2c
   2e246:	e7e0      	b.n	2e20a <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
   2e248:	2a02      	cmp	r2, #2
   2e24a:	d1de      	bne.n	2e20a <cbvprintf+0x436>
				value->sint = (short)value->sint;
   2e24c:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
   2e250:	e7d2      	b.n	2e1f8 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
   2e252:	2b02      	cmp	r3, #2
   2e254:	d123      	bne.n	2e29e <cbvprintf+0x4ca>
			switch (length_mod) {
   2e256:	1ed3      	subs	r3, r2, #3
   2e258:	2b04      	cmp	r3, #4
   2e25a:	d813      	bhi.n	2e284 <cbvprintf+0x4b0>
   2e25c:	e8df f003 	tbb	[pc, r3]
   2e260:	120a0a03 	.word	0x120a0a03
   2e264:	12          	.byte	0x12
   2e265:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
   2e266:	2100      	movs	r1, #0
					value->uint = (wchar_t)va_arg(ap,
   2e268:	6820      	ldr	r0, [r4, #0]
   2e26a:	1d23      	adds	r3, r4, #4
   2e26c:	900a      	str	r0, [sp, #40]	; 0x28
   2e26e:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
   2e270:	461c      	mov	r4, r3
   2e272:	e7ca      	b.n	2e20a <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
   2e274:	3407      	adds	r4, #7
   2e276:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
   2e27a:	e8f3 0102 	ldrd	r0, r1, [r3], #8
   2e27e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
   2e282:	e7f5      	b.n	2e270 <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
   2e284:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   2e288:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
   2e28a:	930a      	str	r3, [sp, #40]	; 0x28
   2e28c:	f04f 0300 	mov.w	r3, #0
   2e290:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
   2e292:	d0d3      	beq.n	2e23c <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
   2e294:	2a02      	cmp	r2, #2
   2e296:	d1b8      	bne.n	2e20a <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
   2e298:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2e29c:	e7d0      	b.n	2e240 <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
   2e29e:	2b04      	cmp	r3, #4
   2e2a0:	d107      	bne.n	2e2b2 <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
   2e2a2:	3407      	adds	r4, #7
   2e2a4:	f024 0407 	bic.w	r4, r4, #7
   2e2a8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
   2e2ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   2e2b0:	e7ab      	b.n	2e20a <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
   2e2b2:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   2e2b4:	bf04      	itt	eq
   2e2b6:	f854 3b04 	ldreq.w	r3, [r4], #4
   2e2ba:	930a      	streq	r3, [sp, #40]	; 0x28
   2e2bc:	e7a5      	b.n	2e20a <cbvprintf+0x436>
		switch (conv->specifier) {
   2e2be:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   2e2c2:	2878      	cmp	r0, #120	; 0x78
   2e2c4:	d8b0      	bhi.n	2e228 <cbvprintf+0x454>
   2e2c6:	2862      	cmp	r0, #98	; 0x62
   2e2c8:	d822      	bhi.n	2e310 <cbvprintf+0x53c>
   2e2ca:	2825      	cmp	r0, #37	; 0x25
   2e2cc:	f43f ad93 	beq.w	2ddf6 <cbvprintf+0x22>
   2e2d0:	2858      	cmp	r0, #88	; 0x58
   2e2d2:	d1a9      	bne.n	2e228 <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
   2e2d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   2e2d8:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   2e2dc:	9300      	str	r3, [sp, #0]
   2e2de:	aa0c      	add	r2, sp, #48	; 0x30
   2e2e0:	ab04      	add	r3, sp, #16
   2e2e2:	f007 f9d2 	bl	3568a <encode_uint>
   2e2e6:	4682      	mov	sl, r0
			if (precision >= 0) {
   2e2e8:	f1b8 0f00 	cmp.w	r8, #0
   2e2ec:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   2e2f0:	db0c      	blt.n	2e30c <cbvprintf+0x538>
				conv->flag_zero = false;
   2e2f2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
   2e2f6:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
   2e2fa:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   2e2fe:	4598      	cmp	r8, r3
				conv->flag_zero = false;
   2e300:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
   2e304:	d902      	bls.n	2e30c <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
   2e306:	eba8 0303 	sub.w	r3, r8, r3
   2e30a:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
   2e30c:	4680      	mov	r8, r0
   2e30e:	e03d      	b.n	2e38c <cbvprintf+0x5b8>
   2e310:	3863      	subs	r0, #99	; 0x63
   2e312:	2815      	cmp	r0, #21
   2e314:	d888      	bhi.n	2e228 <cbvprintf+0x454>
   2e316:	a101      	add	r1, pc, #4	; (adr r1, 2e31c <cbvprintf+0x548>)
   2e318:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
   2e31c:	0002e39d 	.word	0x0002e39d
   2e320:	0002e401 	.word	0x0002e401
   2e324:	0002e229 	.word	0x0002e229
   2e328:	0002e229 	.word	0x0002e229
   2e32c:	0002e229 	.word	0x0002e229
   2e330:	0002e229 	.word	0x0002e229
   2e334:	0002e401 	.word	0x0002e401
   2e338:	0002e229 	.word	0x0002e229
   2e33c:	0002e229 	.word	0x0002e229
   2e340:	0002e229 	.word	0x0002e229
   2e344:	0002e229 	.word	0x0002e229
   2e348:	0002e45f 	.word	0x0002e45f
   2e34c:	0002e42d 	.word	0x0002e42d
   2e350:	0002e431 	.word	0x0002e431
   2e354:	0002e229 	.word	0x0002e229
   2e358:	0002e229 	.word	0x0002e229
   2e35c:	0002e375 	.word	0x0002e375
   2e360:	0002e229 	.word	0x0002e229
   2e364:	0002e42d 	.word	0x0002e42d
   2e368:	0002e229 	.word	0x0002e229
   2e36c:	0002e229 	.word	0x0002e229
   2e370:	0002e42d 	.word	0x0002e42d
			if (precision >= 0) {
   2e374:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
   2e378:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
   2e37c:	db0a      	blt.n	2e394 <cbvprintf+0x5c0>
				len = strnlen(bps, precision);
   2e37e:	4641      	mov	r1, r8
   2e380:	4650      	mov	r0, sl
   2e382:	f009 f8fa 	bl	3757a <strnlen>
		char sign = 0;
   2e386:	2600      	movs	r6, #0
			bpe = bps + len;
   2e388:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
   2e38c:	f1ba 0f00 	cmp.w	sl, #0
   2e390:	d10c      	bne.n	2e3ac <cbvprintf+0x5d8>
   2e392:	e749      	b.n	2e228 <cbvprintf+0x454>
				len = strlen(bps);
   2e394:	4650      	mov	r0, sl
   2e396:	f009 f8e9 	bl	3756c <strlen>
   2e39a:	e7f4      	b.n	2e386 <cbvprintf+0x5b2>
			break;
   2e39c:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   2e39e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bpe = buf + 1;
   2e3a0:	f10d 0811 	add.w	r8, sp, #17
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   2e3a4:	f88d 3010 	strb.w	r3, [sp, #16]
			bps = buf;
   2e3a8:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
   2e3ac:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
   2e3b0:	b106      	cbz	r6, 2e3b4 <cbvprintf+0x5e0>
			nj_len += 1U;
   2e3b2:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   2e3b4:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   2e3b8:	06d0      	lsls	r0, r2, #27
   2e3ba:	d56b      	bpl.n	2e494 <cbvprintf+0x6c0>
			nj_len += 2U;
   2e3bc:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   2e3be:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   2e3c0:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
   2e3c2:	bf48      	it	mi
   2e3c4:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
   2e3c6:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   2e3c8:	bf48      	it	mi
   2e3ca:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   2e3cc:	f1b9 0f00 	cmp.w	r9, #0
   2e3d0:	dd79      	ble.n	2e4c6 <cbvprintf+0x6f2>
			if (!conv->flag_dash) {
   2e3d2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
   2e3d6:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
   2e3da:	f3c2 0380 	ubfx	r3, r2, #2, #1
   2e3de:	9303      	str	r3, [sp, #12]
   2e3e0:	0753      	lsls	r3, r2, #29
   2e3e2:	d470      	bmi.n	2e4c6 <cbvprintf+0x6f2>
				if (conv->flag_zero) {
   2e3e4:	0650      	lsls	r0, r2, #25
   2e3e6:	d564      	bpl.n	2e4b2 <cbvprintf+0x6de>
					if (sign != 0) {
   2e3e8:	b146      	cbz	r6, 2e3fc <cbvprintf+0x628>
						OUTC(sign);
   2e3ea:	4659      	mov	r1, fp
   2e3ec:	4630      	mov	r0, r6
   2e3ee:	9b02      	ldr	r3, [sp, #8]
   2e3f0:	4798      	blx	r3
   2e3f2:	2800      	cmp	r0, #0
   2e3f4:	db5a      	blt.n	2e4ac <cbvprintf+0x6d8>
						sign = 0;
   2e3f6:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   2e3f8:	3501      	adds	r5, #1
						sign = 0;
   2e3fa:	461e      	mov	r6, r3
					pad = '0';
   2e3fc:	2330      	movs	r3, #48	; 0x30
   2e3fe:	e059      	b.n	2e4b4 <cbvprintf+0x6e0>
			if (conv->flag_plus) {
   2e400:	071e      	lsls	r6, r3, #28
   2e402:	d411      	bmi.n	2e428 <cbvprintf+0x654>
				sign = ' ';
   2e404:	f013 0610 	ands.w	r6, r3, #16
   2e408:	bf18      	it	ne
   2e40a:	2620      	movne	r6, #32
			sint = value->sint;
   2e40c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
   2e410:	2a00      	cmp	r2, #0
   2e412:	f173 0100 	sbcs.w	r1, r3, #0
   2e416:	f6bf af5d 	bge.w	2e2d4 <cbvprintf+0x500>
				value->uint = (uint_value_type)-sint;
   2e41a:	4252      	negs	r2, r2
   2e41c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
   2e420:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
   2e422:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   2e426:	e755      	b.n	2e2d4 <cbvprintf+0x500>
				sign = '+';
   2e428:	262b      	movs	r6, #43	; 0x2b
   2e42a:	e7ef      	b.n	2e40c <cbvprintf+0x638>
		switch (conv->specifier) {
   2e42c:	2600      	movs	r6, #0
   2e42e:	e751      	b.n	2e2d4 <cbvprintf+0x500>
			if (value->ptr != NULL) {
   2e430:	980a      	ldr	r0, [sp, #40]	; 0x28
   2e432:	b348      	cbz	r0, 2e488 <cbvprintf+0x6b4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   2e434:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   2e438:	9300      	str	r3, [sp, #0]
   2e43a:	2100      	movs	r1, #0
   2e43c:	ab04      	add	r3, sp, #16
   2e43e:	aa0c      	add	r2, sp, #48	; 0x30
   2e440:	f007 f923 	bl	3568a <encode_uint>
				conv->altform_0c = true;
   2e444:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
   2e448:	4682      	mov	sl, r0
				conv->altform_0c = true;
   2e44a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   2e44e:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   2e452:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
   2e456:	2600      	movs	r6, #0
				conv->altform_0c = true;
   2e458:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
   2e45c:	e744      	b.n	2e2e8 <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
   2e45e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
   2e460:	2a07      	cmp	r2, #7
   2e462:	f63f aee1 	bhi.w	2e228 <cbvprintf+0x454>
   2e466:	e8df f002 	tbb	[pc, r2]
   2e46a:	040d      	.short	0x040d
   2e46c:	08080d06 	.word	0x08080d06
   2e470:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   2e472:	701d      	strb	r5, [r3, #0]
		break;
   2e474:	e6d8      	b.n	2e228 <cbvprintf+0x454>
		*(short *)dp = (short)count;
   2e476:	801d      	strh	r5, [r3, #0]
		break;
   2e478:	e6d6      	b.n	2e228 <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
   2e47a:	4628      	mov	r0, r5
   2e47c:	17e9      	asrs	r1, r5, #31
   2e47e:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   2e482:	e6d1      	b.n	2e228 <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   2e484:	601d      	str	r5, [r3, #0]
		break;
   2e486:	e6cf      	b.n	2e228 <cbvprintf+0x454>
			bpe = bps + 5;
   2e488:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 2e550 <cbvprintf+0x77c>
   2e48c:	4606      	mov	r6, r0
			bps = "(nil)";
   2e48e:	f1a8 0a05 	sub.w	sl, r8, #5
   2e492:	e78b      	b.n	2e3ac <cbvprintf+0x5d8>
		} else if (conv->altform_0) {
   2e494:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   2e496:	bf48      	it	mi
   2e498:	3301      	addmi	r3, #1
   2e49a:	e790      	b.n	2e3be <cbvprintf+0x5ea>
					OUTC(pad);
   2e49c:	4618      	mov	r0, r3
   2e49e:	9303      	str	r3, [sp, #12]
   2e4a0:	4659      	mov	r1, fp
   2e4a2:	9b02      	ldr	r3, [sp, #8]
   2e4a4:	4798      	blx	r3
   2e4a6:	2800      	cmp	r0, #0
   2e4a8:	9b03      	ldr	r3, [sp, #12]
   2e4aa:	da04      	bge.n	2e4b6 <cbvprintf+0x6e2>
#undef OUTS
#undef OUTC
}
   2e4ac:	b011      	add	sp, #68	; 0x44
   2e4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   2e4b2:	2320      	movs	r3, #32
   2e4b4:	444d      	add	r5, r9
   2e4b6:	464a      	mov	r2, r9
				while (width-- > 0) {
   2e4b8:	2a00      	cmp	r2, #0
   2e4ba:	eba5 0109 	sub.w	r1, r5, r9
   2e4be:	f109 39ff 	add.w	r9, r9, #4294967295
   2e4c2:	dceb      	bgt.n	2e49c <cbvprintf+0x6c8>
   2e4c4:	460d      	mov	r5, r1
		if (sign != 0) {
   2e4c6:	b136      	cbz	r6, 2e4d6 <cbvprintf+0x702>
			OUTC(sign);
   2e4c8:	4659      	mov	r1, fp
   2e4ca:	4630      	mov	r0, r6
   2e4cc:	9b02      	ldr	r3, [sp, #8]
   2e4ce:	4798      	blx	r3
   2e4d0:	2800      	cmp	r0, #0
   2e4d2:	dbeb      	blt.n	2e4ac <cbvprintf+0x6d8>
   2e4d4:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   2e4d6:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   2e4da:	06d9      	lsls	r1, r3, #27
   2e4dc:	d401      	bmi.n	2e4e2 <cbvprintf+0x70e>
   2e4de:	071a      	lsls	r2, r3, #28
   2e4e0:	d506      	bpl.n	2e4f0 <cbvprintf+0x71c>
				OUTC('0');
   2e4e2:	4659      	mov	r1, fp
   2e4e4:	2030      	movs	r0, #48	; 0x30
   2e4e6:	9b02      	ldr	r3, [sp, #8]
   2e4e8:	4798      	blx	r3
   2e4ea:	2800      	cmp	r0, #0
   2e4ec:	dbde      	blt.n	2e4ac <cbvprintf+0x6d8>
   2e4ee:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   2e4f0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   2e4f4:	06db      	lsls	r3, r3, #27
   2e4f6:	d507      	bpl.n	2e508 <cbvprintf+0x734>
				OUTC(conv->specifier);
   2e4f8:	4659      	mov	r1, fp
   2e4fa:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   2e4fe:	9b02      	ldr	r3, [sp, #8]
   2e500:	4798      	blx	r3
   2e502:	2800      	cmp	r0, #0
   2e504:	dbd2      	blt.n	2e4ac <cbvprintf+0x6d8>
   2e506:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   2e508:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   2e50a:	442e      	add	r6, r5
   2e50c:	1b73      	subs	r3, r6, r5
   2e50e:	2b00      	cmp	r3, #0
   2e510:	dc16      	bgt.n	2e540 <cbvprintf+0x76c>
			OUTS(bps, bpe);
   2e512:	4643      	mov	r3, r8
   2e514:	4652      	mov	r2, sl
   2e516:	4659      	mov	r1, fp
   2e518:	9802      	ldr	r0, [sp, #8]
   2e51a:	f007 f901 	bl	35720 <outs>
   2e51e:	2800      	cmp	r0, #0
   2e520:	dbc4      	blt.n	2e4ac <cbvprintf+0x6d8>
   2e522:	4405      	add	r5, r0
		while (width > 0) {
   2e524:	44a9      	add	r9, r5
   2e526:	eba9 0305 	sub.w	r3, r9, r5
   2e52a:	2b00      	cmp	r3, #0
   2e52c:	f77f ae7c 	ble.w	2e228 <cbvprintf+0x454>
			OUTC(' ');
   2e530:	4659      	mov	r1, fp
   2e532:	2020      	movs	r0, #32
   2e534:	9b02      	ldr	r3, [sp, #8]
   2e536:	4798      	blx	r3
   2e538:	2800      	cmp	r0, #0
   2e53a:	dbb7      	blt.n	2e4ac <cbvprintf+0x6d8>
   2e53c:	3501      	adds	r5, #1
			--width;
   2e53e:	e7f2      	b.n	2e526 <cbvprintf+0x752>
				OUTC('0');
   2e540:	4659      	mov	r1, fp
   2e542:	2030      	movs	r0, #48	; 0x30
   2e544:	9b02      	ldr	r3, [sp, #8]
   2e546:	4798      	blx	r3
   2e548:	2800      	cmp	r0, #0
   2e54a:	dbaf      	blt.n	2e4ac <cbvprintf+0x6d8>
   2e54c:	3501      	adds	r5, #1
   2e54e:	e7dd      	b.n	2e50c <cbvprintf+0x738>
   2e550:	0003b511 	.word	0x0003b511

0002e554 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   2e554:	4604      	mov	r4, r0
   2e556:	b508      	push	{r3, lr}
   2e558:	f04f 0220 	mov.w	r2, #32
   2e55c:	f3ef 8311 	mrs	r3, BASEPRI
   2e560:	f382 8811 	msr	BASEPRI, r2
   2e564:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   2e568:	f008 fefa 	bl	37360 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   2e56c:	4620      	mov	r0, r4
   2e56e:	f003 fec3 	bl	322f8 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   2e572:	4803      	ldr	r0, [pc, #12]	; (2e580 <sys_reboot+0x2c>)
   2e574:	f006 fed0 	bl	35318 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   2e578:	f003 fb70 	bl	31c5c <arch_cpu_idle>
   2e57c:	e7fc      	b.n	2e578 <sys_reboot+0x24>
   2e57e:	bf00      	nop
   2e580:	0003b512 	.word	0x0003b512

0002e584 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   2e584:	b148      	cbz	r0, 2e59a <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
   2e586:	4b05      	ldr	r3, [pc, #20]	; (2e59c <arch_busy_wait+0x18>)
   2e588:	681a      	ldr	r2, [r3, #0]
   2e58a:	4b05      	ldr	r3, [pc, #20]	; (2e5a0 <arch_busy_wait+0x1c>)
   2e58c:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   2e590:	4b04      	ldr	r3, [pc, #16]	; (2e5a4 <arch_busy_wait+0x20>)
    delay_cycles(cycles);
   2e592:	4350      	muls	r0, r2
   2e594:	f043 0301 	orr.w	r3, r3, #1
   2e598:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   2e59a:	4770      	bx	lr
   2e59c:	200080b0 	.word	0x200080b0
   2e5a0:	000f4240 	.word	0x000f4240
   2e5a4:	0003a6c0 	.word	0x0003a6c0

0002e5a8 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   2e5a8:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   2e5aa:	2200      	movs	r2, #0
{
   2e5ac:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   2e5ae:	490f      	ldr	r1, [pc, #60]	; (2e5ec <enable_logger+0x44>)
   2e5b0:	480f      	ldr	r0, [pc, #60]	; (2e5f0 <enable_logger+0x48>)
   2e5b2:	f009 fca2 	bl	37efa <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2e5b6:	2200      	movs	r2, #0
   2e5b8:	2300      	movs	r3, #0
   2e5ba:	2400      	movs	r4, #0
   2e5bc:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2e5c0:	230e      	movs	r3, #14
   2e5c2:	4d0c      	ldr	r5, [pc, #48]	; (2e5f4 <enable_logger+0x4c>)
   2e5c4:	e9cd 3403 	strd	r3, r4, [sp, #12]
   2e5c8:	f44f 7240 	mov.w	r2, #768	; 0x300
   2e5cc:	4628      	mov	r0, r5
   2e5ce:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2e5d2:	4b09      	ldr	r3, [pc, #36]	; (2e5f8 <enable_logger+0x50>)
   2e5d4:	4909      	ldr	r1, [pc, #36]	; (2e5fc <enable_logger+0x54>)
   2e5d6:	9400      	str	r4, [sp, #0]
   2e5d8:	f005 fac0 	bl	33b5c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   2e5dc:	4908      	ldr	r1, [pc, #32]	; (2e600 <enable_logger+0x58>)
   2e5de:	4628      	mov	r0, r5
   2e5e0:	f005 fa12 	bl	33a08 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   2e5e4:	4620      	mov	r0, r4
   2e5e6:	b009      	add	sp, #36	; 0x24
   2e5e8:	bd30      	pop	{r4, r5, pc}
   2e5ea:	bf00      	nop
   2e5ec:	0002e605 	.word	0x0002e605
   2e5f0:	20008448 	.word	0x20008448
   2e5f4:	20008480 	.word	0x20008480
   2e5f8:	0002eb95 	.word	0x0002eb95
   2e5fc:	200095a0 	.word	0x200095a0
   2e600:	0003b8b2 	.word	0x0003b8b2

0002e604 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   2e604:	4801      	ldr	r0, [pc, #4]	; (2e60c <log_process_thread_timer_expiry_fn+0x8>)
   2e606:	f005 bcc7 	b.w	33f98 <z_impl_k_sem_give>
   2e60a:	bf00      	nop
   2e60c:	200081f0 	.word	0x200081f0

0002e610 <log_core_init>:
{
   2e610:	b538      	push	{r3, r4, r5, lr}
	panic_mode = false;
   2e612:	2400      	movs	r4, #0
   2e614:	4b14      	ldr	r3, [pc, #80]	; (2e668 <log_core_init+0x58>)
		timestamp_func = default_get_timestamp;
   2e616:	4a15      	ldr	r2, [pc, #84]	; (2e66c <log_core_init+0x5c>)
	panic_mode = false;
   2e618:	701c      	strb	r4, [r3, #0]
		timestamp_func = default_get_timestamp;
   2e61a:	4b15      	ldr	r3, [pc, #84]	; (2e670 <log_core_init+0x60>)
	log_output_timestamp_freq_set(freq);
   2e61c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = default_get_timestamp;
   2e620:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   2e622:	f000 fd5f 	bl	2f0e4 <log_output_timestamp_freq_set>
		log_msg_pool_init();
   2e626:	f000 fb13 	bl	2ec50 <log_msg_pool_init>
		log_list_init(&list);
   2e62a:	4812      	ldr	r0, [pc, #72]	; (2e674 <log_core_init+0x64>)
   2e62c:	f007 fab7 	bl	35b9e <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   2e630:	2304      	movs	r3, #4
   2e632:	2228      	movs	r2, #40	; 0x28
   2e634:	4910      	ldr	r1, [pc, #64]	; (2e678 <log_core_init+0x68>)
   2e636:	4811      	ldr	r0, [pc, #68]	; (2e67c <log_core_init+0x6c>)
   2e638:	f009 fa77 	bl	37b2a <k_mem_slab_init>
		for (int i = 0; i < log_sources_count(); i++) {
   2e63c:	4623      	mov	r3, r4
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   2e63e:	4810      	ldr	r0, [pc, #64]	; (2e680 <log_core_init+0x70>)
   2e640:	4a10      	ldr	r2, [pc, #64]	; (2e684 <log_core_init+0x74>)
   2e642:	4d11      	ldr	r5, [pc, #68]	; (2e688 <log_core_init+0x78>)
   2e644:	1a12      	subs	r2, r2, r0
   2e646:	08d2      	lsrs	r2, r2, #3
	return __log_const_start[source_id].level;
   2e648:	3004      	adds	r0, #4
   2e64a:	4293      	cmp	r3, r2
   2e64c:	d100      	bne.n	2e650 <log_core_init+0x40>
}
   2e64e:	bd38      	pop	{r3, r4, r5, pc}
			LOG_FILTER_SLOT_SET(filters,
   2e650:	f810 1033 	ldrb.w	r1, [r0, r3, lsl #3]
   2e654:	682c      	ldr	r4, [r5, #0]
   2e656:	f001 0107 	and.w	r1, r1, #7
   2e65a:	f024 0407 	bic.w	r4, r4, #7
   2e65e:	4321      	orrs	r1, r4
   2e660:	f845 1b04 	str.w	r1, [r5], #4
		for (int i = 0; i < log_sources_count(); i++) {
   2e664:	3301      	adds	r3, #1
   2e666:	e7f0      	b.n	2e64a <log_core_init+0x3a>
   2e668:	20009512 	.word	0x20009512
   2e66c:	00035bdd 	.word	0x00035bdd
   2e670:	20008004 	.word	0x20008004
   2e674:	20008870 	.word	0x20008870
   2e678:	200169e0 	.word	0x200169e0
   2e67c:	20008878 	.word	0x20008878
   2e680:	00038508 	.word	0x00038508
   2e684:	00038568 	.word	0x00038568
   2e688:	20008154 	.word	0x20008154

0002e68c <get_msg>:
{
   2e68c:	b510      	push	{r4, lr}
   2e68e:	f04f 0320 	mov.w	r3, #32
   2e692:	f3ef 8411 	mrs	r4, BASEPRI
   2e696:	f383 8811 	msr	BASEPRI, r3
   2e69a:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
   2e69e:	4804      	ldr	r0, [pc, #16]	; (2e6b0 <get_msg+0x24>)
   2e6a0:	f007 fa8d 	bl	35bbe <log_list_head_get>
	__asm__ volatile(
   2e6a4:	f384 8811 	msr	BASEPRI, r4
   2e6a8:	f3bf 8f6f 	isb	sy
}
   2e6ac:	bd10      	pop	{r4, pc}
   2e6ae:	bf00      	nop
   2e6b0:	20008870 	.word	0x20008870

0002e6b4 <z_log_dropped>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2e6b4:	4b04      	ldr	r3, [pc, #16]	; (2e6c8 <z_log_dropped+0x14>)
   2e6b6:	e8d3 2fef 	ldaex	r2, [r3]
   2e6ba:	3201      	adds	r2, #1
   2e6bc:	e8c3 2fe1 	stlex	r1, r2, [r3]
   2e6c0:	2900      	cmp	r1, #0
   2e6c2:	d1f8      	bne.n	2e6b6 <z_log_dropped+0x2>
}
   2e6c4:	4770      	bx	lr
   2e6c6:	bf00      	nop
   2e6c8:	20008868 	.word	0x20008868

0002e6cc <z_log_dropped_read_and_clear>:
}
   2e6cc:	2000      	movs	r0, #0
   2e6ce:	4602      	mov	r2, r0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2e6d0:	4b03      	ldr	r3, [pc, #12]	; (2e6e0 <z_log_dropped_read_and_clear+0x14>)
   2e6d2:	e8d3 0fef 	ldaex	r0, [r3]
   2e6d6:	e8c3 2fe1 	stlex	r1, r2, [r3]
   2e6da:	2900      	cmp	r1, #0
   2e6dc:	d1f9      	bne.n	2e6d2 <z_log_dropped_read_and_clear+0x6>
   2e6de:	4770      	bx	lr
   2e6e0:	20008868 	.word	0x20008868

0002e6e4 <dropped_notify>:
{
   2e6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   2e6e6:	f7ff fff1 	bl	2e6cc <z_log_dropped_read_and_clear>
	for (int i = 0; i < log_backend_count_get(); i++) {
   2e6ea:	2600      	movs	r6, #0
	uint32_t dropped = z_log_dropped_read_and_clear();
   2e6ec:	4607      	mov	r7, r0
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   2e6ee:	4c09      	ldr	r4, [pc, #36]	; (2e714 <dropped_notify+0x30>)
   2e6f0:	4d09      	ldr	r5, [pc, #36]	; (2e718 <dropped_notify+0x34>)
   2e6f2:	1b2d      	subs	r5, r5, r4
   2e6f4:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   2e6f6:	42ae      	cmp	r6, r5
   2e6f8:	db00      	blt.n	2e6fc <dropped_notify+0x18>
}
   2e6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   2e6fc:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   2e6fe:	795b      	ldrb	r3, [r3, #5]
   2e700:	b12b      	cbz	r3, 2e70e <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
   2e702:	6823      	ldr	r3, [r4, #0]
   2e704:	691b      	ldr	r3, [r3, #16]
   2e706:	b113      	cbz	r3, 2e70e <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
   2e708:	4639      	mov	r1, r7
   2e70a:	4620      	mov	r0, r4
   2e70c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   2e70e:	3601      	adds	r6, #1
   2e710:	3410      	adds	r4, #16
   2e712:	e7f0      	b.n	2e6f6 <dropped_notify+0x12>
   2e714:	00038568 	.word	0x00038568
   2e718:	00038578 	.word	0x00038578

0002e71c <log_source_name_get>:
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   2e71c:	4a04      	ldr	r2, [pc, #16]	; (2e730 <log_source_name_get+0x14>)
   2e71e:	4b05      	ldr	r3, [pc, #20]	; (2e734 <log_source_name_get+0x18>)
   2e720:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   2e722:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   2e726:	bf34      	ite	cc
   2e728:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   2e72c:	2000      	movcs	r0, #0
}
   2e72e:	4770      	bx	lr
   2e730:	00038508 	.word	0x00038508
   2e734:	00038568 	.word	0x00038568

0002e738 <z_impl_log_filter_set>:
{
   2e738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e73c:	4689      	mov	r9, r1
   2e73e:	4616      	mov	r6, r2
   2e740:	4698      	mov	r8, r3
		if (backend == NULL) {
   2e742:	4604      	mov	r4, r0
   2e744:	b9b0      	cbnz	r0, 2e774 <z_impl_log_filter_set+0x3c>
	return __log_backends_end - __log_backends_start;
   2e746:	4b21      	ldr	r3, [pc, #132]	; (2e7cc <z_impl_log_filter_set+0x94>)
			uint32_t max = 0U;
   2e748:	4605      	mov	r5, r0
   2e74a:	469a      	mov	sl, r3
   2e74c:	4f20      	ldr	r7, [pc, #128]	; (2e7d0 <z_impl_log_filter_set+0x98>)
   2e74e:	1aff      	subs	r7, r7, r3
   2e750:	113f      	asrs	r7, r7, #4
			for (int i = 0; i < log_backend_count_get(); i++) {
   2e752:	42bc      	cmp	r4, r7
   2e754:	db02      	blt.n	2e75c <z_impl_log_filter_set+0x24>
}
   2e756:	4628      	mov	r0, r5
   2e758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (z_syscall_trap()) {
		return (uint32_t) arch_syscall_invoke4(*(uintptr_t *)&backend, *(uintptr_t *)&domain_id, *(uintptr_t *)&source_id, *(uintptr_t *)&level, K_SYSCALL_LOG_FILTER_SET);
	}
#endif
	compiler_barrier();
	return z_impl_log_filter_set(backend, domain_id, source_id, level);
   2e75c:	eb0a 1004 	add.w	r0, sl, r4, lsl #4
   2e760:	4643      	mov	r3, r8
   2e762:	4632      	mov	r2, r6
   2e764:	4649      	mov	r1, r9
   2e766:	f7ff ffe7 	bl	2e738 <z_impl_log_filter_set>
				max = MAX(current, max);
   2e76a:	4285      	cmp	r5, r0
   2e76c:	bf38      	it	cc
   2e76e:	4605      	movcc	r5, r0
			for (int i = 0; i < log_backend_count_get(); i++) {
   2e770:	3401      	adds	r4, #1
   2e772:	e7ee      	b.n	2e752 <z_impl_log_filter_set+0x1a>
	return __log_const_start[source_id].level;
   2e774:	4b17      	ldr	r3, [pc, #92]	; (2e7d4 <z_impl_log_filter_set+0x9c>)
			LOG_FILTER_SLOT_SET(filters,
   2e776:	4918      	ldr	r1, [pc, #96]	; (2e7d8 <z_impl_log_filter_set+0xa0>)
   2e778:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	return log_compiled_level_get(source_id);
   2e77c:	791d      	ldrb	r5, [r3, #4]
	return backend->cb->id;
   2e77e:	6843      	ldr	r3, [r0, #4]
			level = MIN(level, max);
   2e780:	4545      	cmp	r5, r8
			LOG_FILTER_SLOT_SET(filters,
   2e782:	791a      	ldrb	r2, [r3, #4]
   2e784:	f04f 0307 	mov.w	r3, #7
			level = MIN(level, max);
   2e788:	bf28      	it	cs
   2e78a:	4645      	movcs	r5, r8
			LOG_FILTER_SLOT_SET(filters,
   2e78c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   2e790:	fa03 f002 	lsl.w	r0, r3, r2
   2e794:	f851 3026 	ldr.w	r3, [r1, r6, lsl #2]
   2e798:	ea23 0300 	bic.w	r3, r3, r0
   2e79c:	f005 0007 	and.w	r0, r5, #7
   2e7a0:	fa00 f202 	lsl.w	r2, r0, r2
   2e7a4:	4313      	orrs	r3, r2
	uint32_t max_filter = LOG_LEVEL_NONE;
   2e7a6:	2000      	movs	r0, #0
			LOG_FILTER_SLOT_SET(filters,
   2e7a8:	2203      	movs	r2, #3
		uint32_t tmp_filter = LOG_FILTER_SLOT_GET(&filters, i);
   2e7aa:	fa23 f402 	lsr.w	r4, r3, r2
   2e7ae:	f004 0407 	and.w	r4, r4, #7
   2e7b2:	42a0      	cmp	r0, r4
   2e7b4:	f102 0203 	add.w	r2, r2, #3
   2e7b8:	bf38      	it	cc
   2e7ba:	4620      	movcc	r0, r4
	for (i = first_slot; i < LOG_FILTERS_NUM_OF_SLOTS; i++) {
   2e7bc:	2a1e      	cmp	r2, #30
   2e7be:	d1f4      	bne.n	2e7aa <z_impl_log_filter_set+0x72>
			LOG_FILTER_SLOT_SET(filters,
   2e7c0:	f023 0307 	bic.w	r3, r3, #7
   2e7c4:	4303      	orrs	r3, r0
   2e7c6:	f841 3026 	str.w	r3, [r1, r6, lsl #2]
	return level;
   2e7ca:	e7c4      	b.n	2e756 <z_impl_log_filter_set+0x1e>
   2e7cc:	00038568 	.word	0x00038568
   2e7d0:	00038578 	.word	0x00038578
   2e7d4:	00038508 	.word	0x00038508
   2e7d8:	20008154 	.word	0x20008154

0002e7dc <backend_filter_set>:
{
   2e7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e7de:	4606      	mov	r6, r0
   2e7e0:	460f      	mov	r7, r1
		for (int i = 0; i < log_sources_count(); i++) {
   2e7e2:	2500      	movs	r5, #0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   2e7e4:	4c07      	ldr	r4, [pc, #28]	; (2e804 <backend_filter_set+0x28>)
   2e7e6:	4b08      	ldr	r3, [pc, #32]	; (2e808 <backend_filter_set+0x2c>)
   2e7e8:	1ae4      	subs	r4, r4, r3
   2e7ea:	08e4      	lsrs	r4, r4, #3
   2e7ec:	42a5      	cmp	r5, r4
   2e7ee:	d100      	bne.n	2e7f2 <backend_filter_set+0x16>
}
   2e7f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e7f2:	2100      	movs	r1, #0
   2e7f4:	b22a      	sxth	r2, r5
   2e7f6:	463b      	mov	r3, r7
   2e7f8:	4630      	mov	r0, r6
   2e7fa:	f7ff ff9d 	bl	2e738 <z_impl_log_filter_set>
		for (int i = 0; i < log_sources_count(); i++) {
   2e7fe:	3501      	adds	r5, #1
   2e800:	e7f4      	b.n	2e7ec <backend_filter_set+0x10>
   2e802:	bf00      	nop
   2e804:	00038568 	.word	0x00038568
   2e808:	00038508 	.word	0x00038508

0002e80c <log_backend_enable>:
	id += backend - log_backend_get(0);
   2e80c:	4b0c      	ldr	r3, [pc, #48]	; (2e840 <log_backend_enable+0x34>)
{
   2e80e:	b570      	push	{r4, r5, r6, lr}
	id += backend - log_backend_get(0);
   2e810:	1ac3      	subs	r3, r0, r3
	log_backend_id_set(backend, id);
   2e812:	6846      	ldr	r6, [r0, #4]
	id += backend - log_backend_get(0);
   2e814:	111b      	asrs	r3, r3, #4
{
   2e816:	4604      	mov	r4, r0
	id += backend - log_backend_get(0);
   2e818:	3301      	adds	r3, #1
{
   2e81a:	460d      	mov	r5, r1
	log_backend_id_set(backend, id);
   2e81c:	7133      	strb	r3, [r6, #4]
	backend_filter_set(backend, level);
   2e81e:	4611      	mov	r1, r2
   2e820:	f7ff ffdc 	bl	2e7dc <backend_filter_set>
	backend->cb->active = true;
   2e824:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
   2e826:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   2e828:	4c06      	ldr	r4, [pc, #24]	; (2e844 <log_backend_enable+0x38>)
   2e82a:	715a      	strb	r2, [r3, #5]
   2e82c:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
   2e82e:	601d      	str	r5, [r3, #0]
   2e830:	b912      	cbnz	r2, 2e838 <log_backend_enable+0x2c>
   2e832:	4805      	ldr	r0, [pc, #20]	; (2e848 <log_backend_enable+0x3c>)
   2e834:	f005 fbb0 	bl	33f98 <z_impl_k_sem_give>
	backend_attached = true;
   2e838:	2301      	movs	r3, #1
   2e83a:	7023      	strb	r3, [r4, #0]
}
   2e83c:	bd70      	pop	{r4, r5, r6, pc}
   2e83e:	bf00      	nop
   2e840:	00038568 	.word	0x00038568
   2e844:	20009511 	.word	0x20009511
   2e848:	200081f0 	.word	0x200081f0

0002e84c <log_init>:
{
   2e84c:	b570      	push	{r4, r5, r6, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2e84e:	4b10      	ldr	r3, [pc, #64]	; (2e890 <log_init+0x44>)
   2e850:	e8d3 5fef 	ldaex	r5, [r3]
   2e854:	1c6a      	adds	r2, r5, #1
   2e856:	e8c3 2fe1 	stlex	r1, r2, [r3]
   2e85a:	2900      	cmp	r1, #0
   2e85c:	d1f8      	bne.n	2e850 <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
   2e85e:	b92d      	cbnz	r5, 2e86c <log_init+0x20>
	return __log_backends_end - __log_backends_start;
   2e860:	4c0c      	ldr	r4, [pc, #48]	; (2e894 <log_init+0x48>)
   2e862:	4e0d      	ldr	r6, [pc, #52]	; (2e898 <log_init+0x4c>)
   2e864:	1b36      	subs	r6, r6, r4
   2e866:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
   2e868:	42b5      	cmp	r5, r6
   2e86a:	db00      	blt.n	2e86e <log_init+0x22>
}
   2e86c:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   2e86e:	7b23      	ldrb	r3, [r4, #12]
   2e870:	b153      	cbz	r3, 2e888 <log_init+0x3c>
			if (backend->api->init != NULL) {
   2e872:	6823      	ldr	r3, [r4, #0]
   2e874:	699b      	ldr	r3, [r3, #24]
   2e876:	b10b      	cbz	r3, 2e87c <log_init+0x30>
				backend->api->init(backend);
   2e878:	4620      	mov	r0, r4
   2e87a:	4798      	blx	r3
			log_backend_enable(backend,
   2e87c:	6863      	ldr	r3, [r4, #4]
   2e87e:	2204      	movs	r2, #4
   2e880:	4620      	mov	r0, r4
   2e882:	6819      	ldr	r1, [r3, #0]
   2e884:	f7ff ffc2 	bl	2e80c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   2e888:	3501      	adds	r5, #1
   2e88a:	3410      	adds	r4, #16
   2e88c:	e7ec      	b.n	2e868 <log_init+0x1c>
   2e88e:	bf00      	nop
   2e890:	2000886c 	.word	0x2000886c
   2e894:	00038568 	.word	0x00038568
   2e898:	00038578 	.word	0x00038578

0002e89c <log_filter_get>:
	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) && runtime) {
   2e89c:	b163      	cbz	r3, 2e8b8 <log_filter_get+0x1c>
		if (source_id < 0) {
   2e89e:	2a00      	cmp	r2, #0
   2e8a0:	db0f      	blt.n	2e8c2 <log_filter_get+0x26>
	return backend->cb->id;
   2e8a2:	6843      	ldr	r3, [r0, #4]
		return LOG_FILTER_SLOT_GET(filters,
   2e8a4:	4908      	ldr	r1, [pc, #32]	; (2e8c8 <log_filter_get+0x2c>)
   2e8a6:	7918      	ldrb	r0, [r3, #4]
   2e8a8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   2e8ac:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
   2e8b0:	40d8      	lsrs	r0, r3
   2e8b2:	f000 0007 	and.w	r0, r0, #7
   2e8b6:	4770      	bx	lr
	return __log_const_start[source_id].level;
   2e8b8:	4b04      	ldr	r3, [pc, #16]	; (2e8cc <log_filter_get+0x30>)
   2e8ba:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
	return log_compiled_level_get(source_id);
   2e8be:	7910      	ldrb	r0, [r2, #4]
   2e8c0:	4770      	bx	lr
			return LOG_LEVEL_DBG;
   2e8c2:	2004      	movs	r0, #4
}
   2e8c4:	4770      	bx	lr
   2e8c6:	bf00      	nop
   2e8c8:	20008154 	.word	0x20008154
   2e8cc:	00038508 	.word	0x00038508

0002e8d0 <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   2e8d0:	4b14      	ldr	r3, [pc, #80]	; (2e924 <z_log_strdup+0x54>)
{
   2e8d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
   2e8d4:	4298      	cmp	r0, r3
{
   2e8d6:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   2e8d8:	d302      	bcc.n	2e8e0 <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   2e8da:	4b13      	ldr	r3, [pc, #76]	; (2e928 <z_log_strdup+0x58>)
   2e8dc:	4298      	cmp	r0, r3
   2e8de:	d31c      	bcc.n	2e91a <z_log_strdup+0x4a>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   2e8e0:	2200      	movs	r2, #0
   2e8e2:	2300      	movs	r3, #0
   2e8e4:	4811      	ldr	r0, [pc, #68]	; (2e92c <z_log_strdup+0x5c>)
   2e8e6:	a901      	add	r1, sp, #4
   2e8e8:	f005 f826 	bl	33938 <k_mem_slab_alloc>
	if (err != 0) {
   2e8ec:	4605      	mov	r5, r0
   2e8ee:	b9b8      	cbnz	r0, 2e920 <z_log_strdup+0x50>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2e8f0:	2201      	movs	r2, #1
   2e8f2:	9b01      	ldr	r3, [sp, #4]
   2e8f4:	e8d3 1fef 	ldaex	r1, [r3]
   2e8f8:	e8c3 2fe0 	stlex	r0, r2, [r3]
   2e8fc:	2800      	cmp	r0, #0
   2e8fe:	d1f9      	bne.n	2e8f4 <z_log_strdup+0x24>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   2e900:	9801      	ldr	r0, [sp, #4]
   2e902:	4621      	mov	r1, r4
   2e904:	221f      	movs	r2, #31
   2e906:	3004      	adds	r0, #4
   2e908:	f008 fe0f 	bl	3752a <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   2e90c:	237e      	movs	r3, #126	; 0x7e
   2e90e:	9c01      	ldr	r4, [sp, #4]
   2e910:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   2e914:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
   2e918:	3404      	adds	r4, #4
}
   2e91a:	4620      	mov	r0, r4
   2e91c:	b003      	add	sp, #12
   2e91e:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
   2e920:	4c03      	ldr	r4, [pc, #12]	; (2e930 <z_log_strdup+0x60>)
   2e922:	e7fa      	b.n	2e91a <z_log_strdup+0x4a>
   2e924:	00038270 	.word	0x00038270
   2e928:	0003cc30 	.word	0x0003cc30
   2e92c:	20008878 	.word	0x20008878
   2e930:	0003b53f 	.word	0x0003b53f

0002e934 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   2e934:	b148      	cbz	r0, 2e94a <log_is_strdup+0x16>
   2e936:	4b05      	ldr	r3, [pc, #20]	; (2e94c <log_is_strdup+0x18>)
   2e938:	4298      	cmp	r0, r3
   2e93a:	d305      	bcc.n	2e948 <log_is_strdup+0x14>
   2e93c:	33a0      	adds	r3, #160	; 0xa0
   2e93e:	4298      	cmp	r0, r3
   2e940:	bf2c      	ite	cs
   2e942:	2000      	movcs	r0, #0
   2e944:	2001      	movcc	r0, #1
   2e946:	4770      	bx	lr
   2e948:	2000      	movs	r0, #0
}
   2e94a:	4770      	bx	lr
   2e94c:	200169e0 	.word	0x200169e0

0002e950 <z_impl_log_process>:
{
   2e950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
   2e954:	4b51      	ldr	r3, [pc, #324]	; (2ea9c <z_impl_log_process+0x14c>)
{
   2e956:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
   2e958:	781b      	ldrb	r3, [r3, #0]
{
   2e95a:	b085      	sub	sp, #20
	if (!backend_attached && !bypass) {
   2e95c:	b903      	cbnz	r3, 2e960 <z_impl_log_process+0x10>
   2e95e:	b1e0      	cbz	r0, 2e99a <z_impl_log_process+0x4a>
	msg = get_msg();
   2e960:	f7ff fe94 	bl	2e68c <get_msg>
	if (msg.msg) {
   2e964:	4604      	mov	r4, r0
   2e966:	b158      	cbz	r0, 2e980 <z_impl_log_process+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2e968:	4b4d      	ldr	r3, [pc, #308]	; (2eaa0 <z_impl_log_process+0x150>)
   2e96a:	e8d3 2fef 	ldaex	r2, [r3]
   2e96e:	3a01      	subs	r2, #1
   2e970:	e8c3 2fe1 	stlex	r1, r2, [r3]
   2e974:	2900      	cmp	r1, #0
   2e976:	d1f8      	bne.n	2e96a <z_impl_log_process+0x1a>
	if (!bypass) {
   2e978:	b19d      	cbz	r5, 2e9a2 <z_impl_log_process+0x52>
			log_msg_put(msg.msg);
   2e97a:	4620      	mov	r0, r4
   2e97c:	f007 fa2e 	bl	35ddc <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
   2e980:	b92d      	cbnz	r5, 2e98e <z_impl_log_process+0x3e>
	return dropped_cnt > 0;
   2e982:	4b48      	ldr	r3, [pc, #288]	; (2eaa4 <z_impl_log_process+0x154>)
	if (!bypass && z_log_dropped_pending()) {
   2e984:	681b      	ldr	r3, [r3, #0]
   2e986:	2b00      	cmp	r3, #0
   2e988:	dd01      	ble.n	2e98e <z_impl_log_process+0x3e>
		dropped_notify();
   2e98a:	f7ff feab 	bl	2e6e4 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
   2e98e:	4846      	ldr	r0, [pc, #280]	; (2eaa8 <z_impl_log_process+0x158>)
   2e990:	f007 f913 	bl	35bba <log_list_head_peek>
   2e994:	1e05      	subs	r5, r0, #0
   2e996:	bf18      	it	ne
   2e998:	2501      	movne	r5, #1
}
   2e99a:	4628      	mov	r0, r5
   2e99c:	b005      	add	sp, #20
   2e99e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
   2e9a2:	4b42      	ldr	r3, [pc, #264]	; (2eaac <z_impl_log_process+0x15c>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
   2e9a4:	781b      	ldrb	r3, [r3, #0]
   2e9a6:	b9e3      	cbnz	r3, 2e9e2 <z_impl_log_process+0x92>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   2e9a8:	7a23      	ldrb	r3, [r4, #8]
	if (!log_msg_is_std(msg)) {
   2e9aa:	07da      	lsls	r2, r3, #31
   2e9ac:	d419      	bmi.n	2e9e2 <z_impl_log_process+0x92>
	msg_str = log_msg_str_get(msg);
   2e9ae:	f007 fa24 	bl	35dfa <log_msg_str_get>
   2e9b2:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   2e9b4:	4620      	mov	r0, r4
   2e9b6:	f007 f9ef 	bl	35d98 <log_msg_nargs_get>
   2e9ba:	4601      	mov	r1, r0
   2e9bc:	4638      	mov	r0, r7
   2e9be:	f007 f911 	bl	35be4 <z_log_get_s_mask>
 *
 * @return Source ID.
 */
static inline uint32_t log_dynamic_source_id(struct log_source_dynamic_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
   2e9c2:	4a3b      	ldr	r2, [pc, #236]	; (2eab0 <z_impl_log_process+0x160>)
   2e9c4:	4606      	mov	r6, r0
	while (mask) {
   2e9c6:	4690      	mov	r8, r2
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   2e9c8:	493a      	ldr	r1, [pc, #232]	; (2eab4 <z_impl_log_process+0x164>)
   2e9ca:	4b3b      	ldr	r3, [pc, #236]	; (2eab8 <z_impl_log_process+0x168>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   2e9cc:	f8df b104 	ldr.w	fp, [pc, #260]	; 2ead4 <z_impl_log_process+0x184>
   2e9d0:	1a5b      	subs	r3, r3, r1
   2e9d2:	08db      	lsrs	r3, r3, #3
   2e9d4:	9302      	str	r3, [sp, #8]
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
   2e9d6:	4b39      	ldr	r3, [pc, #228]	; (2eabc <z_impl_log_process+0x16c>)
   2e9d8:	9103      	str	r1, [sp, #12]
   2e9da:	1ad3      	subs	r3, r2, r3
   2e9dc:	ea4f 0a93 	mov.w	sl, r3, lsr #2
	while (mask) {
   2e9e0:	b946      	cbnz	r6, 2e9f4 <z_impl_log_process+0xa4>
	return __log_backends_end - __log_backends_start;
   2e9e2:	4e37      	ldr	r6, [pc, #220]	; (2eac0 <z_impl_log_process+0x170>)
   2e9e4:	4f37      	ldr	r7, [pc, #220]	; (2eac4 <z_impl_log_process+0x174>)
   2e9e6:	f04f 0800 	mov.w	r8, #0
   2e9ea:	1bbf      	subs	r7, r7, r6
		return LOG_FILTER_SLOT_GET(filters,
   2e9ec:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 2eabc <z_impl_log_process+0x16c>
   2e9f0:	113f      	asrs	r7, r7, #4
   2e9f2:	e04f      	b.n	2ea94 <z_impl_log_process+0x144>
		idx = 31 - __builtin_clz(mask);
   2e9f4:	fab6 f186 	clz	r1, r6
   2e9f8:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   2e9fc:	4649      	mov	r1, r9
   2e9fe:	4620      	mov	r0, r4
   2ea00:	f007 f9cd 	bl	35d9e <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   2ea04:	4b30      	ldr	r3, [pc, #192]	; (2eac8 <z_impl_log_process+0x178>)
		str = (const char *)log_msg_arg_get(msg, idx);
   2ea06:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   2ea08:	4298      	cmp	r0, r3
   2ea0a:	d302      	bcc.n	2ea12 <z_impl_log_process+0xc2>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   2ea0c:	4b2f      	ldr	r3, [pc, #188]	; (2eacc <z_impl_log_process+0x17c>)
   2ea0e:	4298      	cmp	r0, r3
   2ea10:	d31f      	bcc.n	2ea52 <z_impl_log_process+0x102>
   2ea12:	4608      	mov	r0, r1
   2ea14:	f7ff ff8e 	bl	2e934 <log_is_strdup>
   2ea18:	4602      	mov	r2, r0
   2ea1a:	b9d0      	cbnz	r0, 2ea52 <z_impl_log_process+0x102>
   2ea1c:	4b2c      	ldr	r3, [pc, #176]	; (2ead0 <z_impl_log_process+0x180>)
   2ea1e:	4299      	cmp	r1, r3
   2ea20:	d017      	beq.n	2ea52 <z_impl_log_process+0x102>
	return msg->hdr.ids.source_id;
   2ea22:	8963      	ldrh	r3, [r4, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   2ea24:	9902      	ldr	r1, [sp, #8]
   2ea26:	f3c3 1389 	ubfx	r3, r3, #6, #10
   2ea2a:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
   2ea2c:	bf3c      	itt	cc
   2ea2e:	9a03      	ldrcc	r2, [sp, #12]
   2ea30:	f852 2033 	ldrcc.w	r2, [r2, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   2ea34:	f8d8 3000 	ldr.w	r3, [r8]
   2ea38:	075b      	lsls	r3, r3, #29
   2ea3a:	d00a      	beq.n	2ea52 <z_impl_log_process+0x102>
   2ea3c:	ea4f 138a 	mov.w	r3, sl, lsl #6
   2ea40:	f043 0301 	orr.w	r3, r3, #1
   2ea44:	f8ad 3000 	strh.w	r3, [sp]
   2ea48:	4649      	mov	r1, r9
   2ea4a:	463b      	mov	r3, r7
   2ea4c:	4658      	mov	r0, fp
   2ea4e:	f007 f928 	bl	35ca2 <log_3>
		mask &= ~BIT(idx);
   2ea52:	2101      	movs	r1, #1
   2ea54:	fa01 f109 	lsl.w	r1, r1, r9
   2ea58:	ea26 0601 	bic.w	r6, r6, r1
   2ea5c:	e7c0      	b.n	2e9e0 <z_impl_log_process+0x90>
			if (log_backend_is_active(backend) &&
   2ea5e:	6873      	ldr	r3, [r6, #4]
   2ea60:	795a      	ldrb	r2, [r3, #5]
   2ea62:	b1a2      	cbz	r2, 2ea8e <z_impl_log_process+0x13e>
   2ea64:	8960      	ldrh	r0, [r4, #10]
		return LOG_FILTER_SLOT_GET(filters,
   2ea66:	791b      	ldrb	r3, [r3, #4]
		uint32_t *filters = log_dynamic_filters_get(source_id);
   2ea68:	f3c0 1089 	ubfx	r0, r0, #6, #10
		return LOG_FILTER_SLOT_GET(filters,
   2ea6c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   2ea70:	f859 3020 	ldr.w	r3, [r9, r0, lsl #2]
	return msg->hdr.ids.level;
   2ea74:	7aa1      	ldrb	r1, [r4, #10]
   2ea76:	40d3      	lsrs	r3, r2
   2ea78:	f001 0107 	and.w	r1, r1, #7
   2ea7c:	f003 0307 	and.w	r3, r3, #7
			if (log_backend_is_active(backend) &&
   2ea80:	4299      	cmp	r1, r3
   2ea82:	d804      	bhi.n	2ea8e <z_impl_log_process+0x13e>
	backend->api->put(backend, msg);
   2ea84:	6833      	ldr	r3, [r6, #0]
   2ea86:	4621      	mov	r1, r4
   2ea88:	4630      	mov	r0, r6
   2ea8a:	685b      	ldr	r3, [r3, #4]
   2ea8c:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   2ea8e:	f108 0801 	add.w	r8, r8, #1
   2ea92:	3610      	adds	r6, #16
   2ea94:	45b8      	cmp	r8, r7
   2ea96:	dbe2      	blt.n	2ea5e <z_impl_log_process+0x10e>
   2ea98:	e76f      	b.n	2e97a <z_impl_log_process+0x2a>
   2ea9a:	bf00      	nop
   2ea9c:	20009511 	.word	0x20009511
   2eaa0:	20008864 	.word	0x20008864
   2eaa4:	20008868 	.word	0x20008868
   2eaa8:	20008870 	.word	0x20008870
   2eaac:	20009512 	.word	0x20009512
   2eab0:	20008164 	.word	0x20008164
   2eab4:	00038508 	.word	0x00038508
   2eab8:	00038568 	.word	0x00038568
   2eabc:	20008154 	.word	0x20008154
   2eac0:	00038568 	.word	0x00038568
   2eac4:	00038578 	.word	0x00038578
   2eac8:	00038270 	.word	0x00038270
   2eacc:	0003cc30 	.word	0x0003cc30
   2ead0:	0003b53f 	.word	0x0003b53f
   2ead4:	0003b559 	.word	0x0003b559

0002ead8 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   2ead8:	4b27      	ldr	r3, [pc, #156]	; (2eb78 <msg_finalize+0xa0>)
{
   2eada:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
   2eadc:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   2eade:	8141      	strh	r1, [r0, #10]
{
   2eae0:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   2eae2:	4798      	blx	r3
   2eae4:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   2eae6:	f04f 0320 	mov.w	r3, #32
   2eaea:	f3ef 8511 	mrs	r5, BASEPRI
   2eaee:	f383 8811 	msr	BASEPRI, r3
   2eaf2:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   2eaf6:	4821      	ldr	r0, [pc, #132]	; (2eb7c <msg_finalize+0xa4>)
   2eaf8:	4621      	mov	r1, r4
   2eafa:	f007 f854 	bl	35ba6 <log_list_add_tail>
	__asm__ volatile(
   2eafe:	f385 8811 	msr	BASEPRI, r5
   2eb02:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2eb06:	4b1e      	ldr	r3, [pc, #120]	; (2eb80 <msg_finalize+0xa8>)
   2eb08:	e8d3 2fef 	ldaex	r2, [r3]
   2eb0c:	3201      	adds	r2, #1
   2eb0e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   2eb12:	2900      	cmp	r1, #0
   2eb14:	d1f8      	bne.n	2eb08 <msg_finalize+0x30>
	if (panic_mode) {
   2eb16:	4a1b      	ldr	r2, [pc, #108]	; (2eb84 <msg_finalize+0xac>)
   2eb18:	7812      	ldrb	r2, [r2, #0]
   2eb1a:	b182      	cbz	r2, 2eb3e <msg_finalize+0x66>
	__asm__ volatile(
   2eb1c:	f04f 0320 	mov.w	r3, #32
   2eb20:	f3ef 8411 	mrs	r4, BASEPRI
   2eb24:	f383 8811 	msr	BASEPRI, r3
   2eb28:	f3bf 8f6f 	isb	sy
	return z_impl_log_process(bypass);
   2eb2c:	2000      	movs	r0, #0
   2eb2e:	f7ff ff0f 	bl	2e950 <z_impl_log_process>
	__asm__ volatile(
   2eb32:	f384 8811 	msr	BASEPRI, r4
   2eb36:	f3bf 8f6f 	isb	sy
}
   2eb3a:	b003      	add	sp, #12
   2eb3c:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   2eb3e:	4a12      	ldr	r2, [pc, #72]	; (2eb88 <msg_finalize+0xb0>)
   2eb40:	681b      	ldr	r3, [r3, #0]
   2eb42:	6812      	ldr	r2, [r2, #0]
   2eb44:	2a00      	cmp	r2, #0
   2eb46:	d0f8      	beq.n	2eb3a <msg_finalize+0x62>
   2eb48:	2b01      	cmp	r3, #1
   2eb4a:	d10a      	bne.n	2eb62 <msg_finalize+0x8a>
	z_impl_k_timer_start(timer, duration, period);
   2eb4c:	2200      	movs	r2, #0
   2eb4e:	2300      	movs	r3, #0
   2eb50:	480e      	ldr	r0, [pc, #56]	; (2eb8c <msg_finalize+0xb4>)
   2eb52:	e9cd 2300 	strd	r2, r3, [sp]
   2eb56:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   2eb5a:	2300      	movs	r3, #0
   2eb5c:	f005 ffb8 	bl	34ad0 <z_impl_k_timer_start>
   2eb60:	e7eb      	b.n	2eb3a <msg_finalize+0x62>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   2eb62:	2b0a      	cmp	r3, #10
   2eb64:	d1e9      	bne.n	2eb3a <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
   2eb66:	4809      	ldr	r0, [pc, #36]	; (2eb8c <msg_finalize+0xb4>)
   2eb68:	f009 f9d3 	bl	37f12 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   2eb6c:	4808      	ldr	r0, [pc, #32]	; (2eb90 <msg_finalize+0xb8>)
}
   2eb6e:	b003      	add	sp, #12
   2eb70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2eb74:	f005 ba10 	b.w	33f98 <z_impl_k_sem_give>
   2eb78:	20008004 	.word	0x20008004
   2eb7c:	20008870 	.word	0x20008870
   2eb80:	20008864 	.word	0x20008864
   2eb84:	20009512 	.word	0x20009512
   2eb88:	20008894 	.word	0x20008894
   2eb8c:	20008448 	.word	0x20008448
   2eb90:	200081f0 	.word	0x200081f0

0002eb94 <log_process_thread_func>:
{
   2eb94:	b510      	push	{r4, lr}
	log_init();
   2eb96:	f7ff fe59 	bl	2e84c <log_init>
	return z_impl_k_current_get();
   2eb9a:	f005 fd57 	bl	3464c <z_impl_k_current_get>
	proc_tid = process_tid;
   2eb9e:	4b0c      	ldr	r3, [pc, #48]	; (2ebd0 <log_process_thread_func+0x3c>)
   2eba0:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   2eba2:	b130      	cbz	r0, 2ebb2 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   2eba4:	4b0b      	ldr	r3, [pc, #44]	; (2ebd4 <log_process_thread_func+0x40>)
	    process_tid &&
   2eba6:	681b      	ldr	r3, [r3, #0]
   2eba8:	2b09      	cmp	r3, #9
   2ebaa:	dd02      	ble.n	2ebb2 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
   2ebac:	480a      	ldr	r0, [pc, #40]	; (2ebd8 <log_process_thread_func+0x44>)
   2ebae:	f005 f9f3 	bl	33f98 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   2ebb2:	4c09      	ldr	r4, [pc, #36]	; (2ebd8 <log_process_thread_func+0x44>)
   2ebb4:	2000      	movs	r0, #0
   2ebb6:	f7ff fecb 	bl	2e950 <z_impl_log_process>
		if (log_process(false) == false) {
   2ebba:	2800      	cmp	r0, #0
   2ebbc:	d1fa      	bne.n	2ebb4 <log_process_thread_func+0x20>
   2ebbe:	f04f 32ff 	mov.w	r2, #4294967295
   2ebc2:	f04f 33ff 	mov.w	r3, #4294967295
   2ebc6:	4620      	mov	r0, r4
   2ebc8:	f005 fa0c 	bl	33fe4 <z_impl_k_sem_take>
   2ebcc:	e7f2      	b.n	2ebb4 <log_process_thread_func+0x20>
   2ebce:	bf00      	nop
   2ebd0:	20008894 	.word	0x20008894
   2ebd4:	20008864 	.word	0x20008864
   2ebd8:	200081f0 	.word	0x200081f0

0002ebdc <z_impl_log_panic>:
{
   2ebdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   2ebde:	4f0e      	ldr	r7, [pc, #56]	; (2ec18 <z_impl_log_panic+0x3c>)
   2ebe0:	783d      	ldrb	r5, [r7, #0]
   2ebe2:	b975      	cbnz	r5, 2ec02 <z_impl_log_panic+0x26>
	log_init();
   2ebe4:	f7ff fe32 	bl	2e84c <log_init>
	return __log_backends_end - __log_backends_start;
   2ebe8:	4c0c      	ldr	r4, [pc, #48]	; (2ec1c <z_impl_log_panic+0x40>)
   2ebea:	4e0d      	ldr	r6, [pc, #52]	; (2ec20 <z_impl_log_panic+0x44>)
   2ebec:	1b36      	subs	r6, r6, r4
   2ebee:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   2ebf0:	42b5      	cmp	r5, r6
   2ebf2:	db07      	blt.n	2ec04 <z_impl_log_panic+0x28>
   2ebf4:	2000      	movs	r0, #0
   2ebf6:	f7ff feab 	bl	2e950 <z_impl_log_process>
		while (log_process(false) == true) {
   2ebfa:	2800      	cmp	r0, #0
   2ebfc:	d1fa      	bne.n	2ebf4 <z_impl_log_panic+0x18>
	panic_mode = true;
   2ebfe:	2301      	movs	r3, #1
   2ec00:	703b      	strb	r3, [r7, #0]
}
   2ec02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
   2ec04:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   2ec06:	795b      	ldrb	r3, [r3, #5]
   2ec08:	b11b      	cbz	r3, 2ec12 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
   2ec0a:	6823      	ldr	r3, [r4, #0]
   2ec0c:	4620      	mov	r0, r4
   2ec0e:	695b      	ldr	r3, [r3, #20]
   2ec10:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   2ec12:	3501      	adds	r5, #1
   2ec14:	3410      	adds	r4, #16
   2ec16:	e7eb      	b.n	2ebf0 <z_impl_log_panic+0x14>
   2ec18:	20009512 	.word	0x20009512
   2ec1c:	00038568 	.word	0x00038568
   2ec20:	00038578 	.word	0x00038578

0002ec24 <log_free>:
{
   2ec24:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   2ec26:	3804      	subs	r0, #4
   2ec28:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2ec2a:	e8d0 3fef 	ldaex	r3, [r0]
   2ec2e:	1e5a      	subs	r2, r3, #1
   2ec30:	e8c0 2fe1 	stlex	r1, r2, [r0]
   2ec34:	2900      	cmp	r1, #0
   2ec36:	d1f8      	bne.n	2ec2a <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
   2ec38:	2b01      	cmp	r3, #1
   2ec3a:	d103      	bne.n	2ec44 <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   2ec3c:	4803      	ldr	r0, [pc, #12]	; (2ec4c <log_free+0x28>)
   2ec3e:	a901      	add	r1, sp, #4
   2ec40:	f008 ff8e 	bl	37b60 <k_mem_slab_free>
}
   2ec44:	b003      	add	sp, #12
   2ec46:	f85d fb04 	ldr.w	pc, [sp], #4
   2ec4a:	bf00      	nop
   2ec4c:	20008878 	.word	0x20008878

0002ec50 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   2ec50:	2320      	movs	r3, #32
   2ec52:	4902      	ldr	r1, [pc, #8]	; (2ec5c <log_msg_pool_init+0xc>)
   2ec54:	461a      	mov	r2, r3
   2ec56:	4802      	ldr	r0, [pc, #8]	; (2ec60 <log_msg_pool_init+0x10>)
   2ec58:	f008 bf67 	b.w	37b2a <k_mem_slab_init>
   2ec5c:	20016a80 	.word	0x20016a80
   2ec60:	20008898 	.word	0x20008898

0002ec64 <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
   2ec64:	2300      	movs	r3, #0
{
   2ec66:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   2ec68:	4d09      	ldr	r5, [pc, #36]	; (2ec90 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   2ec6a:	9301      	str	r3, [sp, #4]
   2ec6c:	2001      	movs	r0, #1
   2ec6e:	f7ff fe6f 	bl	2e950 <z_impl_log_process>
   2ec72:	4604      	mov	r4, r0
			z_log_dropped();
   2ec74:	f7ff fd1e 	bl	2e6b4 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   2ec78:	2200      	movs	r2, #0
   2ec7a:	2300      	movs	r3, #0
   2ec7c:	4628      	mov	r0, r5
   2ec7e:	a901      	add	r1, sp, #4
   2ec80:	f004 fe5a 	bl	33938 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   2ec84:	b108      	cbz	r0, 2ec8a <log_msg_no_space_handle+0x26>
   2ec86:	2c00      	cmp	r4, #0
   2ec88:	d1f0      	bne.n	2ec6c <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
   2ec8a:	9801      	ldr	r0, [sp, #4]
   2ec8c:	b003      	add	sp, #12
   2ec8e:	bd30      	pop	{r4, r5, pc}
   2ec90:	20008898 	.word	0x20008898

0002ec94 <log_msg_chunk_alloc>:
	union log_msg_chunk *msg = NULL;
   2ec94:	2300      	movs	r3, #0
{
   2ec96:	b507      	push	{r0, r1, r2, lr}
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   2ec98:	2200      	movs	r2, #0
	union log_msg_chunk *msg = NULL;
   2ec9a:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   2ec9c:	4806      	ldr	r0, [pc, #24]	; (2ecb8 <log_msg_chunk_alloc+0x24>)
   2ec9e:	2300      	movs	r3, #0
   2eca0:	a901      	add	r1, sp, #4
   2eca2:	f004 fe49 	bl	33938 <k_mem_slab_alloc>
	if (err != 0) {
   2eca6:	b110      	cbz	r0, 2ecae <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
   2eca8:	f7ff ffdc 	bl	2ec64 <log_msg_no_space_handle>
   2ecac:	9001      	str	r0, [sp, #4]
}
   2ecae:	9801      	ldr	r0, [sp, #4]
   2ecb0:	b003      	add	sp, #12
   2ecb2:	f85d fb04 	ldr.w	pc, [sp], #4
   2ecb6:	bf00      	nop
   2ecb8:	20008898 	.word	0x20008898

0002ecbc <msg_free>:
{
   2ecbc:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   2ecbe:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   2ecc0:	7a45      	ldrb	r5, [r0, #9]
{
   2ecc2:	b085      	sub	sp, #20
   2ecc4:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   2ecc6:	07d8      	lsls	r0, r3, #31
	return msg->hdr.params.std.nargs;
   2ecc8:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
   2eccc:	d41c      	bmi.n	2ed08 <msg_free+0x4c>
   2ecce:	b1dd      	cbz	r5, 2ed08 <msg_free+0x4c>
		uint32_t smask = 0U;
   2ecd0:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
   2ecd2:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   2ecd4:	4631      	mov	r1, r6
   2ecd6:	9801      	ldr	r0, [sp, #4]
   2ecd8:	f007 f861 	bl	35d9e <log_msg_arg_get>
   2ecdc:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   2ecde:	f7ff fe29 	bl	2e934 <log_is_strdup>
   2ece2:	b170      	cbz	r0, 2ed02 <msg_free+0x46>
				if (smask == 0U) {
   2ece4:	b934      	cbnz	r4, 2ecf4 <msg_free+0x38>
					smask = z_log_get_s_mask(
   2ece6:	9b01      	ldr	r3, [sp, #4]
   2ece8:	4629      	mov	r1, r5
   2ecea:	6918      	ldr	r0, [r3, #16]
   2ecec:	f006 ff7a 	bl	35be4 <z_log_get_s_mask>
					if (smask == 0U) {
   2ecf0:	4604      	mov	r4, r0
   2ecf2:	b148      	cbz	r0, 2ed08 <msg_free+0x4c>
				if (smask & BIT(i)) {
   2ecf4:	fa24 f306 	lsr.w	r3, r4, r6
   2ecf8:	07d9      	lsls	r1, r3, #31
   2ecfa:	d502      	bpl.n	2ed02 <msg_free+0x46>
					log_free(buf);
   2ecfc:	4638      	mov	r0, r7
   2ecfe:	f7ff ff91 	bl	2ec24 <log_free>
		for (i = 0U; i < nargs; i++) {
   2ed02:	3601      	adds	r6, #1
   2ed04:	42ae      	cmp	r6, r5
   2ed06:	d3e5      	bcc.n	2ecd4 <msg_free+0x18>
	if (msg->hdr.params.generic.ext == 1) {
   2ed08:	9b01      	ldr	r3, [sp, #4]
   2ed0a:	7a1a      	ldrb	r2, [r3, #8]
   2ed0c:	0792      	lsls	r2, r2, #30
   2ed0e:	d504      	bpl.n	2ed1a <msg_free+0x5e>
		cont_free(msg->payload.ext.next);
   2ed10:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   2ed12:	4c08      	ldr	r4, [pc, #32]	; (2ed34 <msg_free+0x78>)
   2ed14:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   2ed16:	9b03      	ldr	r3, [sp, #12]
   2ed18:	b92b      	cbnz	r3, 2ed26 <msg_free+0x6a>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   2ed1a:	4806      	ldr	r0, [pc, #24]	; (2ed34 <msg_free+0x78>)
   2ed1c:	a901      	add	r1, sp, #4
   2ed1e:	f008 ff1f 	bl	37b60 <k_mem_slab_free>
}
   2ed22:	b005      	add	sp, #20
   2ed24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
   2ed26:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   2ed28:	4620      	mov	r0, r4
   2ed2a:	a903      	add	r1, sp, #12
   2ed2c:	f008 ff18 	bl	37b60 <k_mem_slab_free>
		cont = next;
   2ed30:	9503      	str	r5, [sp, #12]
   2ed32:	e7f0      	b.n	2ed16 <msg_free+0x5a>
   2ed34:	20008898 	.word	0x20008898

0002ed38 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   2ed38:	b40e      	push	{r1, r2, r3}
   2ed3a:	b503      	push	{r0, r1, lr}
   2ed3c:	ab03      	add	r3, sp, #12
   2ed3e:	f853 2b04 	ldr.w	r2, [r3], #4
   2ed42:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   2ed44:	4804      	ldr	r0, [pc, #16]	; (2ed58 <print_formatted+0x20>)
	va_start(args, fmt);
   2ed46:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   2ed48:	f7ff f844 	bl	2ddd4 <cbvprintf>
	va_end(args);

	return length;
}
   2ed4c:	b002      	add	sp, #8
   2ed4e:	f85d eb04 	ldr.w	lr, [sp], #4
   2ed52:	b003      	add	sp, #12
   2ed54:	4770      	bx	lr
   2ed56:	bf00      	nop
   2ed58:	000360fb 	.word	0x000360fb

0002ed5c <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
   2ed5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   2ed60:	f011 0602 	ands.w	r6, r1, #2
{
   2ed64:	b087      	sub	sp, #28
   2ed66:	9205      	str	r2, [sp, #20]
   2ed68:	4607      	mov	r7, r0
   2ed6a:	461a      	mov	r2, r3
   2ed6c:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   2ed70:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   2ed74:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   2ed78:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   2ed7c:	d006      	beq.n	2ed8c <prefix_print+0x30>
	if (!format) {
   2ed7e:	f011 0f44 	tst.w	r1, #68	; 0x44
   2ed82:	d138      	bne.n	2edf6 <prefix_print+0x9a>
		length = print_formatted(output, "[%08lu] ", timestamp);
   2ed84:	4932      	ldr	r1, [pc, #200]	; (2ee50 <prefix_print+0xf4>)
   2ed86:	f7ff ffd7 	bl	2ed38 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   2ed8a:	4606      	mov	r6, r0
	if (color) {
   2ed8c:	f1ba 0f00 	cmp.w	sl, #0
   2ed90:	d00a      	beq.n	2eda8 <prefix_print+0x4c>
		const char *log_color = start && (colors[level] != NULL) ?
   2ed92:	4b30      	ldr	r3, [pc, #192]	; (2ee54 <prefix_print+0xf8>)
		print_formatted(output, "%s", log_color);
   2ed94:	4638      	mov	r0, r7
		const char *log_color = start && (colors[level] != NULL) ?
   2ed96:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
		print_formatted(output, "%s", log_color);
   2ed9a:	4b2f      	ldr	r3, [pc, #188]	; (2ee58 <prefix_print+0xfc>)
   2ed9c:	492f      	ldr	r1, [pc, #188]	; (2ee5c <prefix_print+0x100>)
   2ed9e:	2a00      	cmp	r2, #0
   2eda0:	bf08      	it	eq
   2eda2:	461a      	moveq	r2, r3
   2eda4:	f7ff ffc8 	bl	2ed38 <print_formatted>
	if (level_on) {
   2eda8:	b13d      	cbz	r5, 2edba <prefix_print+0x5e>
		total += print_formatted(output, "<%s> ", severity[level]);
   2edaa:	4b2d      	ldr	r3, [pc, #180]	; (2ee60 <prefix_print+0x104>)
   2edac:	4638      	mov	r0, r7
   2edae:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
   2edb2:	492c      	ldr	r1, [pc, #176]	; (2ee64 <prefix_print+0x108>)
   2edb4:	f7ff ffc0 	bl	2ed38 <print_formatted>
   2edb8:	4605      	mov	r5, r0
	if (source_id >= 0) {
   2edba:	f1b9 0f00 	cmp.w	r9, #0
   2edbe:	db16      	blt.n	2edee <prefix_print+0x92>
		total += print_formatted(output,
   2edc0:	9b05      	ldr	r3, [sp, #20]
   2edc2:	2b00      	cmp	r3, #0
   2edc4:	d041      	beq.n	2ee4a <prefix_print+0xee>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   2edc6:	2301      	movs	r3, #1
   2edc8:	fa03 f808 	lsl.w	r8, r3, r8
		total += print_formatted(output,
   2edcc:	4b26      	ldr	r3, [pc, #152]	; (2ee68 <prefix_print+0x10c>)
   2edce:	f018 0f10 	tst.w	r8, #16
   2edd2:	4c26      	ldr	r4, [pc, #152]	; (2ee6c <prefix_print+0x110>)
   2edd4:	bf18      	it	ne
   2edd6:	461c      	movne	r4, r3
   2edd8:	4649      	mov	r1, r9
   2edda:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   2edde:	f7ff fc9d 	bl	2e71c <log_source_name_get>
   2ede2:	4621      	mov	r1, r4
   2ede4:	4602      	mov	r2, r0
   2ede6:	4638      	mov	r0, r7
   2ede8:	f7ff ffa6 	bl	2ed38 <print_formatted>
   2edec:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
   2edee:	19a8      	adds	r0, r5, r6
   2edf0:	b007      	add	sp, #28
   2edf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   2edf6:	4b1e      	ldr	r3, [pc, #120]	; (2ee70 <prefix_print+0x114>)
   2edf8:	6819      	ldr	r1, [r3, #0]
   2edfa:	b321      	cbz	r1, 2ee46 <prefix_print+0xea>
		timestamp /= timestamp_div;
   2edfc:	4b1d      	ldr	r3, [pc, #116]	; (2ee74 <prefix_print+0x118>)
   2edfe:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
   2ee02:	681b      	ldr	r3, [r3, #0]
		ms = (remainder * 1000U) / freq;
   2ee04:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
		timestamp /= timestamp_div;
   2ee08:	fbb2 f3f3 	udiv	r3, r2, r3
		total_seconds = timestamp / freq;
   2ee0c:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   2ee10:	fbb4 f2fc 	udiv	r2, r4, ip
   2ee14:	fb0c 4c12 	mls	ip, ip, r2, r4
		remainder = timestamp % freq;
   2ee18:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   2ee1c:	4374      	muls	r4, r6
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   2ee1e:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
   2ee22:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   2ee26:	fb01 441b 	mls	r4, r1, fp, r4
   2ee2a:	4374      	muls	r4, r6
		mins = seconds / 60U;
   2ee2c:	fbbc f3fe 	udiv	r3, ip, lr
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   2ee30:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(output,
   2ee34:	e9cd b101 	strd	fp, r1, [sp, #4]
   2ee38:	fb0e c113 	mls	r1, lr, r3, ip
   2ee3c:	9100      	str	r1, [sp, #0]
   2ee3e:	490e      	ldr	r1, [pc, #56]	; (2ee78 <prefix_print+0x11c>)
   2ee40:	f7ff ff7a 	bl	2ed38 <print_formatted>
   2ee44:	e7a1      	b.n	2ed8a <prefix_print+0x2e>
		length = 0;
   2ee46:	4608      	mov	r0, r1
   2ee48:	e79f      	b.n	2ed8a <prefix_print+0x2e>
		total += print_formatted(output,
   2ee4a:	4c08      	ldr	r4, [pc, #32]	; (2ee6c <prefix_print+0x110>)
   2ee4c:	e7c4      	b.n	2edd8 <prefix_print+0x7c>
   2ee4e:	bf00      	nop
   2ee50:	0003b5aa 	.word	0x0003b5aa
   2ee54:	0003a7c8 	.word	0x0003a7c8
   2ee58:	0003b59c 	.word	0x0003b59c
   2ee5c:	0003bb9b 	.word	0x0003bb9b
   2ee60:	0003a7dc 	.word	0x0003a7dc
   2ee64:	0003b5cf 	.word	0x0003b5cf
   2ee68:	0003b5a6 	.word	0x0003b5a6
   2ee6c:	0003b5a1 	.word	0x0003b5a1
   2ee70:	200088b4 	.word	0x200088b4
   2ee74:	200088b8 	.word	0x200088b8
   2ee78:	0003b5b3 	.word	0x0003b5b3

0002ee7c <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
   2ee7c:	b538      	push	{r3, r4, r5, lr}
   2ee7e:	460c      	mov	r4, r1
	if (color) {
   2ee80:	07e1      	lsls	r1, r4, #31
{
   2ee82:	4605      	mov	r5, r0
	if (color) {
   2ee84:	d503      	bpl.n	2ee8e <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
   2ee86:	4a08      	ldr	r2, [pc, #32]	; (2eea8 <postfix_print+0x2c>)
   2ee88:	4908      	ldr	r1, [pc, #32]	; (2eeac <postfix_print+0x30>)
   2ee8a:	f7ff ff55 	bl	2ed38 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   2ee8e:	06e2      	lsls	r2, r4, #27
   2ee90:	d408      	bmi.n	2eea4 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   2ee92:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   2ee94:	4628      	mov	r0, r5
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
   2ee96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   2ee9a:	bf4c      	ite	mi
   2ee9c:	4904      	ldrmi	r1, [pc, #16]	; (2eeb0 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   2ee9e:	4905      	ldrpl	r1, [pc, #20]	; (2eeb4 <postfix_print+0x38>)
   2eea0:	f7ff bf4a 	b.w	2ed38 <print_formatted>
}
   2eea4:	bd38      	pop	{r3, r4, r5, pc}
   2eea6:	bf00      	nop
   2eea8:	0003b59c 	.word	0x0003b59c
   2eeac:	0003bb9b 	.word	0x0003bb9b
   2eeb0:	0003ba4d 	.word	0x0003ba4d
   2eeb4:	0003b64f 	.word	0x0003b64f

0002eeb8 <hexdump_line_print>:
{
   2eeb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2eebc:	461d      	mov	r5, r3
   2eebe:	9b08      	ldr	r3, [sp, #32]
   2eec0:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   2eec2:	06da      	lsls	r2, r3, #27
{
   2eec4:	4604      	mov	r4, r0
   2eec6:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   2eec8:	d405      	bmi.n	2eed6 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   2eeca:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   2eecc:	bf4c      	ite	mi
   2eece:	492a      	ldrmi	r1, [pc, #168]	; (2ef78 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
   2eed0:	492a      	ldrpl	r1, [pc, #168]	; (2ef7c <hexdump_line_print+0xc4>)
   2eed2:	f7ff ff31 	bl	2ed38 <print_formatted>
{
   2eed6:	f04f 0800 	mov.w	r8, #0
		print_formatted(output, " ");
   2eeda:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 2ef84 <hexdump_line_print+0xcc>
	for (int i = 0; i < prefix_offset; i++) {
   2eede:	45a8      	cmp	r8, r5
   2eee0:	db2a      	blt.n	2ef38 <hexdump_line_print+0x80>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   2eee2:	2500      	movs	r5, #0
			print_formatted(output, "   ");
   2eee4:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 2ef88 <hexdump_line_print+0xd0>
			print_formatted(output, "%02x ", data[i]);
   2eee8:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 2ef8c <hexdump_line_print+0xd4>
			print_formatted(output, " ");
   2eeec:	f8df a094 	ldr.w	sl, [pc, #148]	; 2ef84 <hexdump_line_print+0xcc>
		if (i < length) {
   2eef0:	42bd      	cmp	r5, r7
   2eef2:	d22f      	bcs.n	2ef54 <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
   2eef4:	4649      	mov	r1, r9
   2eef6:	4620      	mov	r0, r4
   2eef8:	5d72      	ldrb	r2, [r6, r5]
   2eefa:	f7ff ff1d 	bl	2ed38 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   2eefe:	3501      	adds	r5, #1
   2ef00:	2d10      	cmp	r5, #16
   2ef02:	d120      	bne.n	2ef46 <hexdump_line_print+0x8e>
	print_formatted(output, "|");
   2ef04:	4620      	mov	r0, r4
   2ef06:	491e      	ldr	r1, [pc, #120]	; (2ef80 <hexdump_line_print+0xc8>)
   2ef08:	f7ff ff16 	bl	2ed38 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   2ef0c:	2500      	movs	r5, #0
			print_formatted(output, " ");
   2ef0e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2ef84 <hexdump_line_print+0xcc>
			print_formatted(output, "%c",
   2ef12:	f8df 907c 	ldr.w	r9, [pc, #124]	; 2ef90 <hexdump_line_print+0xd8>
		if (i < length) {
   2ef16:	42af      	cmp	r7, r5
   2ef18:	d928      	bls.n	2ef6c <hexdump_line_print+0xb4>
			char c = (char)data[i];
   2ef1a:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(output, "%c",
   2ef1c:	4649      	mov	r1, r9
	return (int)((((unsigned)c) >= ' ') &&
   2ef1e:	f1a2 0320 	sub.w	r3, r2, #32
   2ef22:	2b5f      	cmp	r3, #95	; 0x5f
   2ef24:	bf28      	it	cs
   2ef26:	222e      	movcs	r2, #46	; 0x2e
   2ef28:	4620      	mov	r0, r4
   2ef2a:	f7ff ff05 	bl	2ed38 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   2ef2e:	3501      	adds	r5, #1
   2ef30:	2d10      	cmp	r5, #16
   2ef32:	d114      	bne.n	2ef5e <hexdump_line_print+0xa6>
}
   2ef34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
   2ef38:	4649      	mov	r1, r9
   2ef3a:	4620      	mov	r0, r4
   2ef3c:	f7ff fefc 	bl	2ed38 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   2ef40:	f108 0801 	add.w	r8, r8, #1
   2ef44:	e7cb      	b.n	2eede <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   2ef46:	076a      	lsls	r2, r5, #29
   2ef48:	d1d2      	bne.n	2eef0 <hexdump_line_print+0x38>
			print_formatted(output, " ");
   2ef4a:	4651      	mov	r1, sl
   2ef4c:	4620      	mov	r0, r4
   2ef4e:	f7ff fef3 	bl	2ed38 <print_formatted>
   2ef52:	e7cd      	b.n	2eef0 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
   2ef54:	4641      	mov	r1, r8
   2ef56:	4620      	mov	r0, r4
   2ef58:	f7ff feee 	bl	2ed38 <print_formatted>
   2ef5c:	e7cf      	b.n	2eefe <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   2ef5e:	076b      	lsls	r3, r5, #29
   2ef60:	d1d9      	bne.n	2ef16 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
   2ef62:	4641      	mov	r1, r8
   2ef64:	4620      	mov	r0, r4
   2ef66:	f7ff fee7 	bl	2ed38 <print_formatted>
   2ef6a:	e7d4      	b.n	2ef16 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
   2ef6c:	4641      	mov	r1, r8
   2ef6e:	4620      	mov	r0, r4
   2ef70:	f7ff fee2 	bl	2ed38 <print_formatted>
   2ef74:	e7db      	b.n	2ef2e <hexdump_line_print+0x76>
   2ef76:	bf00      	nop
   2ef78:	0003ba4d 	.word	0x0003ba4d
   2ef7c:	0003b64f 	.word	0x0003b64f
   2ef80:	0003b5df 	.word	0x0003b5df
   2ef84:	0003b5dd 	.word	0x0003b5dd
   2ef88:	0003b5db 	.word	0x0003b5db
   2ef8c:	0003b5d5 	.word	0x0003b5d5
   2ef90:	0003c00a 	.word	0x0003c00a

0002ef94 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
   2ef94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
   2ef98:	7a8b      	ldrb	r3, [r1, #10]
   2ef9a:	4617      	mov	r7, r2
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
   2ef9c:	f013 0807 	ands.w	r8, r3, #7
{
   2efa0:	4605      	mov	r5, r0
   2efa2:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   2efa4:	7a0a      	ldrb	r2, [r1, #8]
   2efa6:	b08a      	sub	sp, #40	; 0x28
			0 : prefix_print(output, flags, std_msg, timestamp,
   2efa8:	d021      	beq.n	2efee <log_output_msg_process+0x5a>
   2efaa:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
   2efac:	8949      	ldrh	r1, [r1, #10]
   2efae:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   2efb2:	f3c1 1189 	ubfx	r1, r1, #6, #10
   2efb6:	e9cd 8300 	strd	r8, r3, [sp]
   2efba:	9102      	str	r1, [sp, #8]
   2efbc:	68f3      	ldr	r3, [r6, #12]
   2efbe:	4639      	mov	r1, r7
   2efc0:	f002 0201 	and.w	r2, r2, #1
   2efc4:	f7ff feca 	bl	2ed5c <prefix_print>
   2efc8:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   2efca:	7a34      	ldrb	r4, [r6, #8]
   2efcc:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
   2efce:	f014 0401 	ands.w	r4, r4, #1
   2efd2:	d00e      	beq.n	2eff2 <log_output_msg_process+0x5e>
		std_print(msg, output);
   2efd4:	4629      	mov	r1, r5
   2efd6:	4630      	mov	r0, r6
   2efd8:	f006 ff25 	bl	35e26 <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
   2efdc:	f1b8 0f00 	cmp.w	r8, #0
   2efe0:	d02b      	beq.n	2f03a <log_output_msg_process+0xa6>
		postfix_print(output, flags, level);
   2efe2:	4642      	mov	r2, r8
   2efe4:	4639      	mov	r1, r7
   2efe6:	4628      	mov	r0, r5
   2efe8:	f7ff ff48 	bl	2ee7c <postfix_print>
   2efec:	e025      	b.n	2f03a <log_output_msg_process+0xa6>
			0 : prefix_print(output, flags, std_msg, timestamp,
   2efee:	46c1      	mov	r9, r8
   2eff0:	e7eb      	b.n	2efca <log_output_msg_process+0x36>
	} else if (raw_string) {
   2eff2:	f1b8 0f00 	cmp.w	r8, #0
   2eff6:	d126      	bne.n	2f046 <log_output_msg_process+0xb2>
	size_t offset = 0;
   2eff8:	4627      	mov	r7, r4
		length = output->size;
   2effa:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
   2effc:	aa06      	add	r2, sp, #24
		length = output->size;
   2effe:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
   2f000:	4630      	mov	r0, r6
   2f002:	463b      	mov	r3, r7
   2f004:	68a9      	ldr	r1, [r5, #8]
   2f006:	f006 fefa 	bl	35dfe <log_msg_hexdump_data_get>
		output->control_block->offset = length;
   2f00a:	9a06      	ldr	r2, [sp, #24]
   2f00c:	686b      	ldr	r3, [r5, #4]
   2f00e:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   2f010:	b13a      	cbz	r2, 2f022 <log_output_msg_process+0x8e>
			eol = (output->buf[length - 1] == '\n');
   2f012:	68ab      	ldr	r3, [r5, #8]
   2f014:	4413      	add	r3, r2
   2f016:	f813 4c01 	ldrb.w	r4, [r3, #-1]
   2f01a:	f1a4 030a 	sub.w	r3, r4, #10
   2f01e:	425c      	negs	r4, r3
   2f020:	415c      	adcs	r4, r3
		log_output_flush(output);
   2f022:	4628      	mov	r0, r5
   2f024:	f007 f85c 	bl	360e0 <log_output_flush>
		offset += length;
   2f028:	9b06      	ldr	r3, [sp, #24]
   2f02a:	441f      	add	r7, r3
	} while (length > 0);
   2f02c:	2b00      	cmp	r3, #0
   2f02e:	d1e4      	bne.n	2effa <log_output_msg_process+0x66>
	if (eol) {
   2f030:	b11c      	cbz	r4, 2f03a <log_output_msg_process+0xa6>
		print_formatted(output, "\r");
   2f032:	4628      	mov	r0, r5
   2f034:	4913      	ldr	r1, [pc, #76]	; (2f084 <log_output_msg_process+0xf0>)
   2f036:	f7ff fe7f 	bl	2ed38 <print_formatted>
	}

	log_output_flush(output);
   2f03a:	4628      	mov	r0, r5
   2f03c:	f007 f850 	bl	360e0 <log_output_flush>
}
   2f040:	b00a      	add	sp, #40	; 0x28
   2f042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(output, "%s", log_msg_str_get(msg));
   2f046:	4630      	mov	r0, r6
   2f048:	f006 fed7 	bl	35dfa <log_msg_str_get>
   2f04c:	490e      	ldr	r1, [pc, #56]	; (2f088 <log_output_msg_process+0xf4>)
   2f04e:	4602      	mov	r2, r0
   2f050:	4628      	mov	r0, r5
   2f052:	f7ff fe71 	bl	2ed38 <print_formatted>
		length = sizeof(buf);
   2f056:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   2f05a:	aa05      	add	r2, sp, #20
   2f05c:	4623      	mov	r3, r4
   2f05e:	4630      	mov	r0, r6
   2f060:	a906      	add	r1, sp, #24
		length = sizeof(buf);
   2f062:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   2f066:	f006 feca 	bl	35dfe <log_msg_hexdump_data_get>
		if (length) {
   2f06a:	9a05      	ldr	r2, [sp, #20]
   2f06c:	2a00      	cmp	r2, #0
   2f06e:	d0b8      	beq.n	2efe2 <log_output_msg_process+0x4e>
			hexdump_line_print(output, buf, length,
   2f070:	464b      	mov	r3, r9
   2f072:	4628      	mov	r0, r5
   2f074:	9700      	str	r7, [sp, #0]
   2f076:	a906      	add	r1, sp, #24
   2f078:	f7ff ff1e 	bl	2eeb8 <hexdump_line_print>
			offset += length;
   2f07c:	9b05      	ldr	r3, [sp, #20]
   2f07e:	441c      	add	r4, r3
		length = sizeof(buf);
   2f080:	e7eb      	b.n	2f05a <log_output_msg_process+0xc6>
   2f082:	bf00      	nop
   2f084:	0003b5e1 	.word	0x0003b5e1
   2f088:	0003bb9b 	.word	0x0003bb9b

0002f08c <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   2f08c:	f242 730f 	movw	r3, #9999	; 0x270f
{
   2f090:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   2f092:	428b      	cmp	r3, r1
   2f094:	bf28      	it	cs
   2f096:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   2f098:	6805      	ldr	r5, [r0, #0]
{
   2f09a:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   2f09c:	2105      	movs	r1, #5
   2f09e:	4668      	mov	r0, sp
   2f0a0:	4a0d      	ldr	r2, [pc, #52]	; (2f0d8 <log_output_dropped_process+0x4c>)
   2f0a2:	f006 f946 	bl	35332 <snprintk>
   2f0a6:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   2f0a8:	6863      	ldr	r3, [r4, #4]
   2f0aa:	4628      	mov	r0, r5
   2f0ac:	2204      	movs	r2, #4
   2f0ae:	685b      	ldr	r3, [r3, #4]
   2f0b0:	490a      	ldr	r1, [pc, #40]	; (2f0dc <log_output_dropped_process+0x50>)
   2f0b2:	f006 feab 	bl	35e0c <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   2f0b6:	6863      	ldr	r3, [r4, #4]
   2f0b8:	4632      	mov	r2, r6
   2f0ba:	4669      	mov	r1, sp
   2f0bc:	4628      	mov	r0, r5
   2f0be:	685b      	ldr	r3, [r3, #4]
   2f0c0:	f006 fea4 	bl	35e0c <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   2f0c4:	6863      	ldr	r3, [r4, #4]
   2f0c6:	2217      	movs	r2, #23
   2f0c8:	4628      	mov	r0, r5
   2f0ca:	685b      	ldr	r3, [r3, #4]
   2f0cc:	4904      	ldr	r1, [pc, #16]	; (2f0e0 <log_output_dropped_process+0x54>)
   2f0ce:	f006 fe9d 	bl	35e0c <buffer_write>
		     output->control_block->ctx);
}
   2f0d2:	b002      	add	sp, #8
   2f0d4:	bd70      	pop	{r4, r5, r6, pc}
   2f0d6:	bf00      	nop
   2f0d8:	0003be3c 	.word	0x0003be3c
   2f0dc:	0003b61b 	.word	0x0003b61b
   2f0e0:	0003b603 	.word	0x0003b603

0002f0e4 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   2f0e4:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   2f0e6:	2100      	movs	r1, #0
	timestamp_div = 1U;
   2f0e8:	4a07      	ldr	r2, [pc, #28]	; (2f108 <log_output_timestamp_freq_set+0x24>)
{
   2f0ea:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   2f0ec:	4c07      	ldr	r4, [pc, #28]	; (2f10c <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   2f0ee:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   2f0f0:	42a0      	cmp	r0, r4
   2f0f2:	d804      	bhi.n	2f0fe <log_output_timestamp_freq_set+0x1a>
   2f0f4:	b101      	cbz	r1, 2f0f8 <log_output_timestamp_freq_set+0x14>
   2f0f6:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   2f0f8:	4b05      	ldr	r3, [pc, #20]	; (2f110 <log_output_timestamp_freq_set+0x2c>)
   2f0fa:	6018      	str	r0, [r3, #0]
}
   2f0fc:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
   2f0fe:	2101      	movs	r1, #1
		frequency /= 2U;
   2f100:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   2f102:	005b      	lsls	r3, r3, #1
   2f104:	e7f4      	b.n	2f0f0 <log_output_timestamp_freq_set+0xc>
   2f106:	bf00      	nop
   2f108:	200088b8 	.word	0x200088b8
   2f10c:	000f4240 	.word	0x000f4240
   2f110:	200088b4 	.word	0x200088b4

0002f114 <severity_lvl_get>:
}


static void severity_lvl_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
   2f114:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &dsub_module_name;
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
					severity_lvls_sorted[idx] : NULL;
   2f116:	2804      	cmp	r0, #4
	entry->handler = NULL;
   2f118:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
   2f11a:	604b      	str	r3, [r1, #4]
					severity_lvls_sorted[idx] : NULL;
   2f11c:	bf98      	it	ls
   2f11e:	4b04      	ldrls	r3, [pc, #16]	; (2f130 <severity_lvl_get+0x1c>)
	entry->subcmd = &dsub_module_name;
   2f120:	4a04      	ldr	r2, [pc, #16]	; (2f134 <severity_lvl_get+0x20>)
					severity_lvls_sorted[idx] : NULL;
   2f122:	bf98      	it	ls
   2f124:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	entry->subcmd = &dsub_module_name;
   2f128:	608a      	str	r2, [r1, #8]
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
   2f12a:	600b      	str	r3, [r1, #0]
}
   2f12c:	4770      	bx	lr
   2f12e:	bf00      	nop
   2f130:	0003a830 	.word	0x0003a830
   2f134:	0003a80c 	.word	0x0003a80c

0002f138 <backend_name_get>:
	SHELL_SUBCMD_SET_END
);

static void backend_name_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
   2f138:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &sub_log_backend;
   2f13a:	4a08      	ldr	r2, [pc, #32]	; (2f15c <backend_name_get+0x24>)
	entry->syntax  = NULL;
   2f13c:	600b      	str	r3, [r1, #0]
	entry->handler = NULL;
   2f13e:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
   2f140:	604b      	str	r3, [r1, #4]
	entry->subcmd = &sub_log_backend;
   2f142:	608a      	str	r2, [r1, #8]
	return __log_backends_end - __log_backends_start;
   2f144:	4b06      	ldr	r3, [pc, #24]	; (2f160 <backend_name_get+0x28>)
   2f146:	4a07      	ldr	r2, [pc, #28]	; (2f164 <backend_name_get+0x2c>)
   2f148:	1ad2      	subs	r2, r2, r3

	if (idx < log_backend_count_get()) {
   2f14a:	ebb0 1f22 	cmp.w	r0, r2, asr #4
		const struct log_backend *backend = log_backend_get(idx);

		entry->syntax = backend->name;
   2f14e:	bf3e      	ittt	cc
   2f150:	eb03 1300 	addcc.w	r3, r3, r0, lsl #4
   2f154:	689b      	ldrcc	r3, [r3, #8]
   2f156:	600b      	strcc	r3, [r1, #0]
	}
}
   2f158:	4770      	bx	lr
   2f15a:	bf00      	nop
   2f15c:	0003a970 	.word	0x0003a970
   2f160:	00038568 	.word	0x00038568
   2f164:	00038578 	.word	0x00038578

0002f168 <cmd_log_backends_list>:
{
   2f168:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2f16c:	4607      	mov	r7, r0
	for (int i = 0; i < backend_count; i++) {
   2f16e:	2600      	movs	r6, #0
   2f170:	4c10      	ldr	r4, [pc, #64]	; (2f1b4 <cmd_log_backends_list+0x4c>)
   2f172:	4d11      	ldr	r5, [pc, #68]	; (2f1b8 <cmd_log_backends_list+0x50>)
		shell_fprintf(shell, SHELL_NORMAL,
   2f174:	f8df 8044 	ldr.w	r8, [pc, #68]	; 2f1bc <cmd_log_backends_list+0x54>
   2f178:	1b2d      	subs	r5, r5, r4
   2f17a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 2f1c0 <cmd_log_backends_list+0x58>
   2f17e:	f8df a044 	ldr.w	sl, [pc, #68]	; 2f1c4 <cmd_log_backends_list+0x5c>
   2f182:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < backend_count; i++) {
   2f184:	42ae      	cmp	r6, r5
   2f186:	db03      	blt.n	2f190 <cmd_log_backends_list+0x28>
}
   2f188:	2000      	movs	r0, #0
   2f18a:	b002      	add	sp, #8
   2f18c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			      backend->cb->active ? "enabled" : "disabled",
   2f190:	6862      	ldr	r2, [r4, #4]
		shell_fprintf(shell, SHELL_NORMAL,
   2f192:	2100      	movs	r1, #0
   2f194:	7953      	ldrb	r3, [r2, #5]
   2f196:	7912      	ldrb	r2, [r2, #4]
   2f198:	2b00      	cmp	r3, #0
   2f19a:	bf14      	ite	ne
   2f19c:	4643      	movne	r3, r8
   2f19e:	464b      	moveq	r3, r9
   2f1a0:	4638      	mov	r0, r7
   2f1a2:	e9cd 3200 	strd	r3, r2, [sp]
   2f1a6:	68a3      	ldr	r3, [r4, #8]
   2f1a8:	4652      	mov	r2, sl
   2f1aa:	f007 f969 	bl	36480 <shell_fprintf>
	for (int i = 0; i < backend_count; i++) {
   2f1ae:	3601      	adds	r6, #1
   2f1b0:	3410      	adds	r4, #16
   2f1b2:	e7e7      	b.n	2f184 <cmd_log_backends_list+0x1c>
   2f1b4:	00038568 	.word	0x00038568
   2f1b8:	00038578 	.word	0x00038578
   2f1bc:	0003b620 	.word	0x0003b620
   2f1c0:	0003b628 	.word	0x0003b628
   2f1c4:	0003b631 	.word	0x0003b631

0002f1c8 <log_status>:
{
   2f1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   2f1cc:	4b24      	ldr	r3, [pc, #144]	; (2f260 <log_status+0x98>)
   2f1ce:	4c25      	ldr	r4, [pc, #148]	; (2f264 <log_status+0x9c>)
   2f1d0:	4605      	mov	r5, r0
   2f1d2:	1ae4      	subs	r4, r4, r3
	return backend->cb->active;
   2f1d4:	684b      	ldr	r3, [r1, #4]
   2f1d6:	460e      	mov	r6, r1
	if (!log_backend_is_active(backend)) {
   2f1d8:	795b      	ldrb	r3, [r3, #5]
{
   2f1da:	b085      	sub	sp, #20
   2f1dc:	08e4      	lsrs	r4, r4, #3
	if (!log_backend_is_active(backend)) {
   2f1de:	b91b      	cbnz	r3, 2f1e8 <log_status+0x20>
		shell_warn(shell, "Logs are halted!");
   2f1e0:	2104      	movs	r1, #4
   2f1e2:	4a21      	ldr	r2, [pc, #132]	; (2f268 <log_status+0xa0>)
   2f1e4:	f007 f94c 	bl	36480 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
   2f1e8:	2100      	movs	r1, #0
   2f1ea:	4628      	mov	r0, r5
   2f1ec:	4b1f      	ldr	r3, [pc, #124]	; (2f26c <log_status+0xa4>)
   2f1ee:	4a20      	ldr	r2, [pc, #128]	; (2f270 <log_status+0xa8>)
   2f1f0:	f007 f946 	bl	36480 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL,
   2f1f4:	2100      	movs	r1, #0
   2f1f6:	4628      	mov	r0, r5
   2f1f8:	4a1e      	ldr	r2, [pc, #120]	; (2f274 <log_status+0xac>)
   2f1fa:	f007 f941 	bl	36480 <shell_fprintf>
	for (int16_t i = 0U; i < modules_cnt; i++) {
   2f1fe:	f04f 0800 	mov.w	r8, #0
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
   2f202:	f8df a074 	ldr.w	sl, [pc, #116]	; 2f278 <log_status+0xb0>
   2f206:	f8df b074 	ldr.w	fp, [pc, #116]	; 2f27c <log_status+0xb4>
   2f20a:	fa0f f788 	sxth.w	r7, r8
	for (int16_t i = 0U; i < modules_cnt; i++) {
   2f20e:	42a7      	cmp	r7, r4
   2f210:	f108 0801 	add.w	r8, r8, #1
   2f214:	d303      	bcc.n	2f21e <log_status+0x56>
}
   2f216:	2000      	movs	r0, #0
   2f218:	b005      	add	sp, #20
   2f21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   2f21e:	463a      	mov	r2, r7
   2f220:	2301      	movs	r3, #1
   2f222:	2100      	movs	r1, #0
   2f224:	4630      	mov	r0, r6
   2f226:	f7ff fb39 	bl	2e89c <log_filter_get>
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   2f22a:	2300      	movs	r3, #0
   2f22c:	463a      	mov	r2, r7
   2f22e:	4619      	mov	r1, r3
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   2f230:	4681      	mov	r9, r0
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   2f232:	4630      	mov	r0, r6
   2f234:	f7ff fb32 	bl	2e89c <log_filter_get>
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
   2f238:	4639      	mov	r1, r7
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   2f23a:	9003      	str	r0, [sp, #12]
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
   2f23c:	2000      	movs	r0, #0
   2f23e:	f7ff fa6d 	bl	2e71c <log_source_name_get>
   2f242:	9a03      	ldr	r2, [sp, #12]
   2f244:	4603      	mov	r3, r0
   2f246:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
   2f24a:	2100      	movs	r1, #0
   2f24c:	9201      	str	r2, [sp, #4]
   2f24e:	f85a 2029 	ldr.w	r2, [sl, r9, lsl #2]
   2f252:	4628      	mov	r0, r5
   2f254:	9200      	str	r2, [sp, #0]
   2f256:	465a      	mov	r2, fp
   2f258:	f007 f912 	bl	36480 <shell_fprintf>
	for (int16_t i = 0U; i < modules_cnt; i++) {
   2f25c:	e7d5      	b.n	2f20a <log_status+0x42>
   2f25e:	bf00      	nop
   2f260:	00038508 	.word	0x00038508
   2f264:	00038568 	.word	0x00038568
   2f268:	0003b652 	.word	0x0003b652
   2f26c:	0003b664 	.word	0x0003b664
   2f270:	0003b670 	.word	0x0003b670
   2f274:	0003b68e 	.word	0x0003b68e
   2f278:	0003a81c 	.word	0x0003a81c
   2f27c:	0003b6cb 	.word	0x0003b6cb

0002f280 <module_name_get>:
	entry->handler = NULL;
   2f280:	2300      	movs	r3, #0
	entry->subcmd = &dsub_module_name;
   2f282:	4a06      	ldr	r2, [pc, #24]	; (2f29c <module_name_get+0x1c>)
{
   2f284:	b510      	push	{r4, lr}
   2f286:	460c      	mov	r4, r1
	entry->handler = NULL;
   2f288:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
   2f28a:	604b      	str	r3, [r1, #4]
	entry->subcmd = &dsub_module_name;
   2f28c:	608a      	str	r2, [r1, #8]
	entry->syntax = log_source_name_get(CONFIG_LOG_DOMAIN_ID, idx);
   2f28e:	4601      	mov	r1, r0
   2f290:	4618      	mov	r0, r3
   2f292:	f7ff fa43 	bl	2e71c <log_source_name_get>
   2f296:	6020      	str	r0, [r4, #0]
}
   2f298:	bd10      	pop	{r4, pc}
   2f29a:	bf00      	nop
   2f29c:	0003a80c 	.word	0x0003a80c

0002f2a0 <shell_backend_cmd_execute>:
{
   2f2a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char const *name = argv[-1];
   2f2a4:	f852 bc04 	ldr.w	fp, [r2, #-4]
{
   2f2a8:	4607      	mov	r7, r0
	size_t slen = strlen(name);
   2f2aa:	4658      	mov	r0, fp
{
   2f2ac:	4691      	mov	r9, r2
   2f2ae:	468a      	mov	sl, r1
   2f2b0:	9300      	str	r3, [sp, #0]
	size_t slen = strlen(name);
   2f2b2:	f008 f95b 	bl	3756c <strlen>
	for (int i = 0; i < log_backend_count_get(); i++) {
   2f2b6:	f04f 0800 	mov.w	r8, #0
	size_t slen = strlen(name);
   2f2ba:	4602      	mov	r2, r0
	return __log_backends_end - __log_backends_start;
   2f2bc:	4c13      	ldr	r4, [pc, #76]	; (2f30c <shell_backend_cmd_execute+0x6c>)
   2f2be:	4e14      	ldr	r6, [pc, #80]	; (2f310 <shell_backend_cmd_execute+0x70>)
   2f2c0:	1b36      	subs	r6, r6, r4
   2f2c2:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   2f2c4:	45b0      	cmp	r8, r6
   2f2c6:	db08      	blt.n	2f2da <shell_backend_cmd_execute+0x3a>
		shell_error(shell, "Invalid backend: %s", name);
   2f2c8:	465b      	mov	r3, fp
   2f2ca:	2102      	movs	r1, #2
   2f2cc:	4638      	mov	r0, r7
   2f2ce:	4a11      	ldr	r2, [pc, #68]	; (2f314 <shell_backend_cmd_execute+0x74>)
   2f2d0:	f007 f8d6 	bl	36480 <shell_fprintf>
		return -ENOEXEC;
   2f2d4:	f06f 0507 	mvn.w	r5, #7
   2f2d8:	e013      	b.n	2f302 <shell_backend_cmd_execute+0x62>
		if (strncmp(name, backend->name, slen) == 0) {
   2f2da:	68a1      	ldr	r1, [r4, #8]
   2f2dc:	4658      	mov	r0, fp
   2f2de:	9201      	str	r2, [sp, #4]
   2f2e0:	f008 f960 	bl	375a4 <strncmp>
   2f2e4:	3410      	adds	r4, #16
   2f2e6:	4605      	mov	r5, r0
   2f2e8:	b118      	cbz	r0, 2f2f2 <shell_backend_cmd_execute+0x52>
	for (int i = 0; i < log_backend_count_get(); i++) {
   2f2ea:	9a01      	ldr	r2, [sp, #4]
   2f2ec:	f108 0801 	add.w	r8, r8, #1
   2f2f0:	e7e8      	b.n	2f2c4 <shell_backend_cmd_execute+0x24>
		func(shell, backend, argc, argv);
   2f2f2:	4906      	ldr	r1, [pc, #24]	; (2f30c <shell_backend_cmd_execute+0x6c>)
   2f2f4:	464b      	mov	r3, r9
   2f2f6:	4652      	mov	r2, sl
   2f2f8:	4638      	mov	r0, r7
   2f2fa:	9c00      	ldr	r4, [sp, #0]
   2f2fc:	eb01 1108 	add.w	r1, r1, r8, lsl #4
   2f300:	47a0      	blx	r4
}
   2f302:	4628      	mov	r0, r5
   2f304:	b003      	add	sp, #12
   2f306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f30a:	bf00      	nop
   2f30c:	00038568 	.word	0x00038568
   2f310:	00038578 	.word	0x00038578
   2f314:	0003b6df 	.word	0x0003b6df

0002f318 <cmd_log_backend_status>:
{
   2f318:	b508      	push	{r3, lr}
	shell_backend_cmd_execute(shell, argc, argv, log_status);
   2f31a:	4b02      	ldr	r3, [pc, #8]	; (2f324 <cmd_log_backend_status+0xc>)
   2f31c:	f7ff ffc0 	bl	2f2a0 <shell_backend_cmd_execute>
}
   2f320:	2000      	movs	r0, #0
   2f322:	bd08      	pop	{r3, pc}
   2f324:	0002f1c9 	.word	0x0002f1c9

0002f328 <cmd_log_backend_halt>:
	return shell_backend_cmd_execute(shell, argc, argv, log_halt);
   2f328:	4b01      	ldr	r3, [pc, #4]	; (2f330 <cmd_log_backend_halt+0x8>)
   2f32a:	f7ff bfb9 	b.w	2f2a0 <shell_backend_cmd_execute>
   2f32e:	bf00      	nop
   2f330:	00036129 	.word	0x00036129

0002f334 <cmd_log_backend_go>:
	return shell_backend_cmd_execute(shell, argc, argv, log_go);
   2f334:	4b01      	ldr	r3, [pc, #4]	; (2f33c <cmd_log_backend_go+0x8>)
   2f336:	f7ff bfb3 	b.w	2f2a0 <shell_backend_cmd_execute>
   2f33a:	bf00      	nop
   2f33c:	00036131 	.word	0x00036131

0002f340 <cmd_log_backend_enable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_enable);
   2f340:	4b01      	ldr	r3, [pc, #4]	; (2f348 <cmd_log_backend_enable+0x8>)
   2f342:	f7ff bfad 	b.w	2f2a0 <shell_backend_cmd_execute>
   2f346:	bf00      	nop
   2f348:	0002f449 	.word	0x0002f449

0002f34c <cmd_log_backend_disable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_disable);
   2f34c:	4b01      	ldr	r3, [pc, #4]	; (2f354 <cmd_log_backend_disable+0x8>)
   2f34e:	f7ff bfa7 	b.w	2f2a0 <shell_backend_cmd_execute>
   2f352:	bf00      	nop
   2f354:	000361ad 	.word	0x000361ad

0002f358 <shell_state_precheck>:
{
   2f358:	b510      	push	{r4, lr}
	if (shell->log_backend->control_block->state
   2f35a:	69c3      	ldr	r3, [r0, #28]
   2f35c:	68db      	ldr	r3, [r3, #12]
   2f35e:	791c      	ldrb	r4, [r3, #4]
   2f360:	b92c      	cbnz	r4, 2f36e <shell_state_precheck+0x16>
		shell_error(shell, "Shell log backend not initialized.");
   2f362:	2102      	movs	r1, #2
   2f364:	4a03      	ldr	r2, [pc, #12]	; (2f374 <shell_state_precheck+0x1c>)
   2f366:	f007 f88b 	bl	36480 <shell_fprintf>
   2f36a:	4620      	mov	r0, r4
}
   2f36c:	bd10      	pop	{r4, pc}
	return true;
   2f36e:	2001      	movs	r0, #1
   2f370:	e7fc      	b.n	2f36c <shell_state_precheck+0x14>
   2f372:	bf00      	nop
   2f374:	0003b6f4 	.word	0x0003b6f4

0002f378 <filters_set>:
{
   2f378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f37c:	461f      	mov	r7, r3
   2f37e:	4e2c      	ldr	r6, [pc, #176]	; (2f430 <filters_set+0xb8>)
   2f380:	4b2c      	ldr	r3, [pc, #176]	; (2f434 <filters_set+0xbc>)
	int cnt = all ? log_sources_count() : argc;
   2f382:	1e15      	subs	r5, r2, #0
   2f384:	eba6 0603 	sub.w	r6, r6, r3
   2f388:	ea4f 06d6 	mov.w	r6, r6, lsr #3
   2f38c:	bf14      	ite	ne
   2f38e:	462b      	movne	r3, r5
   2f390:	4633      	moveq	r3, r6
{
   2f392:	b085      	sub	sp, #20
	int cnt = all ? log_sources_count() : argc;
   2f394:	9302      	str	r3, [sp, #8]
	if (!backend->cb->active) {
   2f396:	684b      	ldr	r3, [r1, #4]
{
   2f398:	4680      	mov	r8, r0
	if (!backend->cb->active) {
   2f39a:	795b      	ldrb	r3, [r3, #5]
{
   2f39c:	4689      	mov	r9, r1
	if (!backend->cb->active) {
   2f39e:	b91b      	cbnz	r3, 2f3a8 <filters_set+0x30>
		shell_warn(shell, "Backend not active.");
   2f3a0:	2104      	movs	r1, #4
   2f3a2:	4a25      	ldr	r2, [pc, #148]	; (2f438 <filters_set+0xc0>)
   2f3a4:	f007 f86c 	bl	36480 <shell_fprintf>
	for (i = 0U; i < modules_cnt; i++) {
   2f3a8:	2400      	movs	r4, #0
				shell_warn(shell, "%s: level set to %s.",
   2f3aa:	f8df a098 	ldr.w	sl, [pc, #152]	; 2f444 <filters_set+0xcc>
	for (i = 0; i < cnt; i++) {
   2f3ae:	9b02      	ldr	r3, [sp, #8]
   2f3b0:	429c      	cmp	r4, r3
   2f3b2:	db02      	blt.n	2f3ba <filters_set+0x42>
}
   2f3b4:	b005      	add	sp, #20
   2f3b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		id = all ? i : module_id_get(argv[i]);
   2f3ba:	b3bd      	cbz	r5, 2f42c <filters_set+0xb4>
	for (i = 0U; i < modules_cnt; i++) {
   2f3bc:	2300      	movs	r3, #0
		id = all ? i : module_id_get(argv[i]);
   2f3be:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
	for (i = 0U; i < modules_cnt; i++) {
   2f3c2:	429e      	cmp	r6, r3
   2f3c4:	d107      	bne.n	2f3d6 <filters_set+0x5e>
			shell_error(shell, "%s: unknown source name.", argv[i]);
   2f3c6:	2102      	movs	r1, #2
   2f3c8:	4640      	mov	r0, r8
   2f3ca:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   2f3ce:	4a1b      	ldr	r2, [pc, #108]	; (2f43c <filters_set+0xc4>)
   2f3d0:	f007 f856 	bl	36480 <shell_fprintf>
   2f3d4:	e023      	b.n	2f41e <filters_set+0xa6>
		tmp_name = log_source_name_get(CONFIG_LOG_DOMAIN_ID, i);
   2f3d6:	4619      	mov	r1, r3
   2f3d8:	2000      	movs	r0, #0
   2f3da:	9303      	str	r3, [sp, #12]
   2f3dc:	f7ff f99e 	bl	2e71c <log_source_name_get>
		if (strncmp(tmp_name, name, 64) == 0) {
   2f3e0:	2240      	movs	r2, #64	; 0x40
   2f3e2:	4659      	mov	r1, fp
   2f3e4:	f008 f8de 	bl	375a4 <strncmp>
   2f3e8:	9b03      	ldr	r3, [sp, #12]
   2f3ea:	b9d0      	cbnz	r0, 2f422 <filters_set+0xaa>
			return i;
   2f3ec:	461a      	mov	r2, r3
	return z_impl_log_filter_set(backend, domain_id, source_id, level);
   2f3ee:	2100      	movs	r1, #0
   2f3f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2f3f2:	4648      	mov	r0, r9
   2f3f4:	b212      	sxth	r2, r2
   2f3f6:	f7ff f99f 	bl	2e738 <z_impl_log_filter_set>
			if (set_lvl != level) {
   2f3fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2f3fc:	4683      	mov	fp, r0
   2f3fe:	4283      	cmp	r3, r0
   2f400:	d00d      	beq.n	2f41e <filters_set+0xa6>
						CONFIG_LOG_DOMAIN_ID, i) :
   2f402:	b985      	cbnz	r5, 2f426 <filters_set+0xae>
					log_source_name_get(
   2f404:	4621      	mov	r1, r4
   2f406:	4628      	mov	r0, r5
   2f408:	f7ff f988 	bl	2e71c <log_source_name_get>
   2f40c:	4603      	mov	r3, r0
				shell_warn(shell, "%s: level set to %s.",
   2f40e:	f85a 202b 	ldr.w	r2, [sl, fp, lsl #2]
   2f412:	2104      	movs	r1, #4
   2f414:	9200      	str	r2, [sp, #0]
   2f416:	4640      	mov	r0, r8
   2f418:	4a09      	ldr	r2, [pc, #36]	; (2f440 <filters_set+0xc8>)
   2f41a:	f007 f831 	bl	36480 <shell_fprintf>
	for (i = 0; i < cnt; i++) {
   2f41e:	3401      	adds	r4, #1
   2f420:	e7c5      	b.n	2f3ae <filters_set+0x36>
	for (i = 0U; i < modules_cnt; i++) {
   2f422:	3301      	adds	r3, #1
   2f424:	e7cd      	b.n	2f3c2 <filters_set+0x4a>
						CONFIG_LOG_DOMAIN_ID, i) :
   2f426:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   2f42a:	e7f0      	b.n	2f40e <filters_set+0x96>
   2f42c:	4622      	mov	r2, r4
   2f42e:	e7de      	b.n	2f3ee <filters_set+0x76>
   2f430:	00038568 	.word	0x00038568
   2f434:	00038508 	.word	0x00038508
   2f438:	0003b718 	.word	0x0003b718
   2f43c:	0003b743 	.word	0x0003b743
   2f440:	0003b72d 	.word	0x0003b72d
   2f444:	0003a81c 	.word	0x0003a81c

0002f448 <log_enable>:
{
   2f448:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f44c:	4606      	mov	r6, r0
   2f44e:	4688      	mov	r8, r1
   2f450:	4691      	mov	r9, r2
   2f452:	461d      	mov	r5, r3
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
   2f454:	2700      	movs	r7, #0
	severity_level = severity_level_get(argv[1]);
   2f456:	f8d3 b004 	ldr.w	fp, [r3, #4]
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
   2f45a:	f8df a048 	ldr.w	sl, [pc, #72]	; 2f4a4 <log_enable+0x5c>
		if (strncmp(str, severity_lvls[i], 4) == 0) {
   2f45e:	2204      	movs	r2, #4
   2f460:	4658      	mov	r0, fp
   2f462:	f85a 1b04 	ldr.w	r1, [sl], #4
   2f466:	f008 f89d 	bl	375a4 <strncmp>
   2f46a:	4604      	mov	r4, r0
   2f46c:	b170      	cbz	r0, 2f48c <log_enable+0x44>
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
   2f46e:	3701      	adds	r7, #1
   2f470:	2f05      	cmp	r7, #5
   2f472:	d1f4      	bne.n	2f45e <log_enable+0x16>
		shell_error(shell, "Invalid severity: %s", argv[1]);
   2f474:	2102      	movs	r1, #2
   2f476:	4630      	mov	r0, r6
   2f478:	686b      	ldr	r3, [r5, #4]
   2f47a:	4a09      	ldr	r2, [pc, #36]	; (2f4a0 <log_enable+0x58>)
   2f47c:	f007 f800 	bl	36480 <shell_fprintf>
   2f480:	f06f 0407 	mvn.w	r4, #7
}
   2f484:	4620      	mov	r0, r4
   2f486:	b003      	add	sp, #12
   2f488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	filters_set(shell, backend, argc - 2, &argv[2], severity_level);
   2f48c:	4641      	mov	r1, r8
   2f48e:	4630      	mov	r0, r6
   2f490:	9700      	str	r7, [sp, #0]
   2f492:	f105 0308 	add.w	r3, r5, #8
   2f496:	f1a9 0202 	sub.w	r2, r9, #2
   2f49a:	f7ff ff6d 	bl	2f378 <filters_set>
	return 0;
   2f49e:	e7f1      	b.n	2f484 <log_enable+0x3c>
   2f4a0:	0003b75d 	.word	0x0003b75d
   2f4a4:	0003a81c 	.word	0x0003a81c

0002f4a8 <cmd_kernel_version>:
#include <drivers/timer/system_timer.h>
#include <kernel.h>

static int cmd_kernel_version(const struct shell *shell,
			      size_t argc, char **argv)
{
   2f4a8:	b513      	push	{r0, r1, r4, lr}
   2f4aa:	4604      	mov	r4, r0
	uint32_t version = sys_kernel_version_get();
   2f4ac:	f004 fbe0 	bl	33c70 <sys_kernel_version_get>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Zephyr version %d.%d.%d",
   2f4b0:	f3c0 2307 	ubfx	r3, r0, #8, #8
   2f4b4:	9301      	str	r3, [sp, #4]
   2f4b6:	f3c0 4307 	ubfx	r3, r0, #16, #8
   2f4ba:	9300      	str	r3, [sp, #0]
   2f4bc:	2100      	movs	r1, #0
   2f4be:	0e03      	lsrs	r3, r0, #24
   2f4c0:	4a03      	ldr	r2, [pc, #12]	; (2f4d0 <cmd_kernel_version+0x28>)
   2f4c2:	4620      	mov	r0, r4
   2f4c4:	f006 ffdc 	bl	36480 <shell_fprintf>
		      SYS_KERNEL_VER_MAJOR(version),
		      SYS_KERNEL_VER_MINOR(version),
		      SYS_KERNEL_VER_PATCHLEVEL(version));
	return 0;
}
   2f4c8:	2000      	movs	r0, #0
   2f4ca:	b002      	add	sp, #8
   2f4cc:	bd10      	pop	{r4, pc}
   2f4ce:	bf00      	nop
   2f4d0:	0003b904 	.word	0x0003b904

0002f4d4 <cmd_kernel_uptime>:

static int cmd_kernel_uptime(const struct shell *shell,
			     size_t argc, char **argv)
{
   2f4d4:	e92d 4878 	stmdb	sp!, {r3, r4, r5, r6, fp, lr}
   2f4d8:	4604      	mov	r4, r0
	return z_impl_k_uptime_ticks();
   2f4da:	f008 fd08 	bl	37eee <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
   2f4de:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   2f4e2:	2500      	movs	r5, #0
   2f4e4:	fba0 bc06 	umull	fp, ip, r0, r6
   2f4e8:	fb06 cc01 	mla	ip, r6, r1, ip
   2f4ec:	ea4f 32db 	mov.w	r2, fp, lsr #15
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Uptime: %u ms", k_uptime_get_32());
   2f4f0:	4620      	mov	r0, r4
   2f4f2:	ea42 434c 	orr.w	r3, r2, ip, lsl #17
   2f4f6:	4629      	mov	r1, r5
   2f4f8:	4a02      	ldr	r2, [pc, #8]	; (2f504 <cmd_kernel_uptime+0x30>)
   2f4fa:	f006 ffc1 	bl	36480 <shell_fprintf>
	return 0;
}
   2f4fe:	4628      	mov	r0, r5
   2f500:	e8bd 8878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, pc}
   2f504:	0003b91d 	.word	0x0003b91d

0002f508 <cmd_kernel_threads>:

}

static int cmd_kernel_threads(const struct shell *shell,
			      size_t argc, char **argv)
{
   2f508:	b510      	push	{r4, lr}
   2f50a:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Scheduler: %u since last call", sys_clock_elapsed());
   2f50c:	f002 fa3e 	bl	3198c <sys_clock_elapsed>
   2f510:	2100      	movs	r1, #0
   2f512:	4603      	mov	r3, r0
   2f514:	4a07      	ldr	r2, [pc, #28]	; (2f534 <cmd_kernel_threads+0x2c>)
   2f516:	4620      	mov	r0, r4
   2f518:	f006 ffb2 	bl	36480 <shell_fprintf>
	shell_print(shell, "Threads:");
   2f51c:	4620      	mov	r0, r4
   2f51e:	4a06      	ldr	r2, [pc, #24]	; (2f538 <cmd_kernel_threads+0x30>)
   2f520:	2100      	movs	r1, #0
   2f522:	f006 ffad 	bl	36480 <shell_fprintf>
	k_thread_foreach(shell_tdata_dump, (void *)shell);
   2f526:	4621      	mov	r1, r4
   2f528:	4804      	ldr	r0, [pc, #16]	; (2f53c <cmd_kernel_threads+0x34>)
   2f52a:	f004 fa35 	bl	33998 <k_thread_foreach>
	return 0;
}
   2f52e:	2000      	movs	r0, #0
   2f530:	bd10      	pop	{r4, pc}
   2f532:	bf00      	nop
   2f534:	0003b92c 	.word	0x0003b92c
   2f538:	0003b94b 	.word	0x0003b94b
   2f53c:	0002f59d 	.word	0x0002f59d

0002f540 <cmd_kernel_stacks>:
extern K_KERNEL_STACK_ARRAY_DEFINE(z_interrupt_stacks, CONFIG_MP_NUM_CPUS,
				   CONFIG_ISR_STACK_SIZE);

static int cmd_kernel_stacks(const struct shell *shell,
			     size_t argc, char **argv)
{
   2f540:	b530      	push	{r4, r5, lr}
	uint8_t *buf;
	size_t size, unused;

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	k_thread_foreach(shell_stack_dump, (void *)shell);
   2f542:	4601      	mov	r1, r0
{
   2f544:	4604      	mov	r4, r0
   2f546:	b087      	sub	sp, #28
	k_thread_foreach(shell_stack_dump, (void *)shell);
   2f548:	4811      	ldr	r0, [pc, #68]	; (2f590 <cmd_kernel_stacks+0x50>)
   2f54a:	f004 fa25 	bl	33998 <k_thread_foreach>
	 */
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
		buf = Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]);
		size = K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]);

		unused = 0;
   2f54e:	2300      	movs	r3, #0
   2f550:	4a10      	ldr	r2, [pc, #64]	; (2f594 <cmd_kernel_stacks+0x54>)
		for (size_t i = 0; i < size; i++) {
			if (buf[i] == 0xAAU) {
   2f552:	f812 1b01 	ldrb.w	r1, [r2], #1
   2f556:	29aa      	cmp	r1, #170	; 0xaa
   2f558:	d103      	bne.n	2f562 <cmd_kernel_stacks+0x22>
				unused++;
   2f55a:	3301      	adds	r3, #1
		for (size_t i = 0; i < size; i++) {
   2f55c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   2f560:	d1f7      	bne.n	2f552 <cmd_kernel_stacks+0x12>
			} else {
				break;
			}
		}

		shell_print(shell,
   2f562:	2264      	movs	r2, #100	; 0x64
   2f564:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
   2f568:	434a      	muls	r2, r1
   2f56a:	0ad2      	lsrs	r2, r2, #11
   2f56c:	2500      	movs	r5, #0
   2f56e:	9205      	str	r2, [sp, #20]
   2f570:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2f574:	4620      	mov	r0, r4
   2f576:	e9cd 1203 	strd	r1, r2, [sp, #12]
   2f57a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2f57e:	4629      	mov	r1, r5
   2f580:	4b04      	ldr	r3, [pc, #16]	; (2f594 <cmd_kernel_stacks+0x54>)
   2f582:	4a05      	ldr	r2, [pc, #20]	; (2f598 <cmd_kernel_stacks+0x58>)
   2f584:	9500      	str	r5, [sp, #0]
   2f586:	f006 ff7b 	bl	36480 <shell_fprintf>
			      size - unused, size,
			      ((size - unused) * 100U) / size);
	}

	return 0;
}
   2f58a:	4628      	mov	r0, r5
   2f58c:	b007      	add	sp, #28
   2f58e:	bd30      	pop	{r4, r5, pc}
   2f590:	0002f685 	.word	0x0002f685
   2f594:	20015de0 	.word	0x20015de0
   2f598:	0003b955 	.word	0x0003b955

0002f59c <shell_tdata_dump>:
{
   2f59c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f59e:	b087      	sub	sp, #28
   2f5a0:	4604      	mov	r4, r0
   2f5a2:	460d      	mov	r5, r1
	size_t size = thread->stack_info.size;
   2f5a4:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
	tname = k_thread_name_get(thread);
   2f5a8:	f008 fb0a 	bl	37bc0 <k_thread_name_get>
   2f5ac:	4606      	mov	r6, r0
	return z_impl_k_current_get();
   2f5ae:	f005 f84d 	bl	3464c <z_impl_k_current_get>
	shell_print(shell, "%s%p %-10s",
   2f5b2:	4b25      	ldr	r3, [pc, #148]	; (2f648 <shell_tdata_dump+0xac>)
   2f5b4:	4a25      	ldr	r2, [pc, #148]	; (2f64c <shell_tdata_dump+0xb0>)
   2f5b6:	2e00      	cmp	r6, #0
   2f5b8:	bf08      	it	eq
   2f5ba:	461e      	moveq	r6, r3
   2f5bc:	4b24      	ldr	r3, [pc, #144]	; (2f650 <shell_tdata_dump+0xb4>)
   2f5be:	e9cd 4600 	strd	r4, r6, [sp]
   2f5c2:	4284      	cmp	r4, r0
   2f5c4:	bf18      	it	ne
   2f5c6:	4613      	movne	r3, r2
   2f5c8:	2100      	movs	r1, #0
   2f5ca:	4628      	mov	r0, r5
   2f5cc:	4a21      	ldr	r2, [pc, #132]	; (2f654 <shell_tdata_dump+0xb8>)
   2f5ce:	f006 ff57 	bl	36480 <shell_fprintf>
	shell_print(shell, "\toptions: 0x%x, priority: %d timeout: %d",
   2f5d2:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   2f5d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2f5da:	f994 300e 	ldrsb.w	r3, [r4, #14]
   2f5de:	2100      	movs	r1, #0
   2f5e0:	4628      	mov	r0, r5
   2f5e2:	4a1d      	ldr	r2, [pc, #116]	; (2f658 <shell_tdata_dump+0xbc>)
   2f5e4:	9300      	str	r3, [sp, #0]
   2f5e6:	7b23      	ldrb	r3, [r4, #12]
   2f5e8:	f006 ff4a 	bl	36480 <shell_fprintf>
	shell_print(shell, "\tstate: %s, entry: %p", k_thread_state_str(thread),
   2f5ec:	4620      	mov	r0, r4
   2f5ee:	f004 fa1b 	bl	33a28 <k_thread_state_str>
   2f5f2:	4606      	mov	r6, r0
   2f5f4:	f104 0364 	add.w	r3, r4, #100	; 0x64
   2f5f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   2f5fa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   2f5fe:	4633      	mov	r3, r6
   2f600:	2100      	movs	r1, #0
   2f602:	4628      	mov	r0, r5
   2f604:	4a15      	ldr	r2, [pc, #84]	; (2f65c <shell_tdata_dump+0xc0>)
   2f606:	f006 ff3b 	bl	36480 <shell_fprintf>
	return z_impl_k_thread_stack_space_get(thread, unused_ptr);
   2f60a:	a905      	add	r1, sp, #20
   2f60c:	4620      	mov	r0, r4
   2f60e:	f008 fadb 	bl	37bc8 <z_impl_k_thread_stack_space_get>
	if (ret) {
   2f612:	4601      	mov	r1, r0
   2f614:	b138      	cbz	r0, 2f626 <shell_tdata_dump+0x8a>
		shell_print(shell,
   2f616:	4603      	mov	r3, r0
   2f618:	2100      	movs	r1, #0
   2f61a:	4628      	mov	r0, r5
   2f61c:	4a10      	ldr	r2, [pc, #64]	; (2f660 <shell_tdata_dump+0xc4>)
   2f61e:	f006 ff2f 	bl	36480 <shell_fprintf>
}
   2f622:	b007      	add	sp, #28
   2f624:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcnt = ((size - unused) * 100U) / size;
   2f626:	2364      	movs	r3, #100	; 0x64
   2f628:	9a05      	ldr	r2, [sp, #20]
   2f62a:	1ab8      	subs	r0, r7, r2
   2f62c:	4343      	muls	r3, r0
   2f62e:	fbb3 f3f7 	udiv	r3, r3, r7
		shell_print(shell,
   2f632:	e9cd 2000 	strd	r2, r0, [sp]
   2f636:	e9cd 7302 	strd	r7, r3, [sp, #8]
   2f63a:	4628      	mov	r0, r5
   2f63c:	463b      	mov	r3, r7
   2f63e:	4a09      	ldr	r2, [pc, #36]	; (2f664 <shell_tdata_dump+0xc8>)
   2f640:	f006 ff1e 	bl	36480 <shell_fprintf>
}
   2f644:	e7ed      	b.n	2f622 <shell_tdata_dump+0x86>
   2f646:	bf00      	nop
   2f648:	0003b99b 	.word	0x0003b99b
   2f64c:	0003b5dd 	.word	0x0003b5dd
   2f650:	0003c9d5 	.word	0x0003c9d5
   2f654:	0003b99e 	.word	0x0003b99e
   2f658:	0003b9aa 	.word	0x0003b9aa
   2f65c:	0003b9d4 	.word	0x0003b9d4
   2f660:	0003b9eb 	.word	0x0003b9eb
   2f664:	0003ba18 	.word	0x0003ba18

0002f668 <cmd_kernel_cycles>:
{
   2f668:	b510      	push	{r4, lr}
   2f66a:	4604      	mov	r4, r0
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   2f66c:	f002 f99c 	bl	319a8 <sys_clock_cycle_get_32>
	shell_print(shell, "cycles: %u hw cycles", k_cycle_get_32());
   2f670:	2100      	movs	r1, #0
   2f672:	4603      	mov	r3, r0
   2f674:	4a02      	ldr	r2, [pc, #8]	; (2f680 <cmd_kernel_cycles+0x18>)
   2f676:	4620      	mov	r0, r4
   2f678:	f006 ff02 	bl	36480 <shell_fprintf>
}
   2f67c:	2000      	movs	r0, #0
   2f67e:	bd10      	pop	{r4, pc}
   2f680:	0003ba4f 	.word	0x0003ba4f

0002f684 <shell_stack_dump>:
{
   2f684:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f686:	4605      	mov	r5, r0
   2f688:	460e      	mov	r6, r1
	size_t size = thread->stack_info.size;
   2f68a:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
{
   2f68e:	b089      	sub	sp, #36	; 0x24
   2f690:	a907      	add	r1, sp, #28
   2f692:	f008 fa99 	bl	37bc8 <z_impl_k_thread_stack_space_get>
	if (ret) {
   2f696:	4604      	mov	r4, r0
   2f698:	b138      	cbz	r0, 2f6aa <shell_stack_dump+0x26>
		shell_print(shell,
   2f69a:	4603      	mov	r3, r0
   2f69c:	2100      	movs	r1, #0
   2f69e:	4630      	mov	r0, r6
   2f6a0:	4a0f      	ldr	r2, [pc, #60]	; (2f6e0 <shell_stack_dump+0x5c>)
   2f6a2:	f006 feed 	bl	36480 <shell_fprintf>
}
   2f6a6:	b009      	add	sp, #36	; 0x24
   2f6a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tname = k_thread_name_get((struct k_thread *)thread);
   2f6aa:	4628      	mov	r0, r5
   2f6ac:	f008 fa88 	bl	37bc0 <k_thread_name_get>
	pcnt = ((size - unused) * 100U) / size;
   2f6b0:	2364      	movs	r3, #100	; 0x64
   2f6b2:	9a07      	ldr	r2, [sp, #28]
	shell_print((const struct shell *)user_data,
   2f6b4:	f8df c030 	ldr.w	ip, [pc, #48]	; 2f6e8 <shell_stack_dump+0x64>
	pcnt = ((size - unused) * 100U) / size;
   2f6b8:	1ab9      	subs	r1, r7, r2
   2f6ba:	434b      	muls	r3, r1
	shell_print((const struct shell *)user_data,
   2f6bc:	2800      	cmp	r0, #0
   2f6be:	bf08      	it	eq
   2f6c0:	4660      	moveq	r0, ip
	pcnt = ((size - unused) * 100U) / size;
   2f6c2:	fbb3 f3f7 	udiv	r3, r3, r7
	shell_print((const struct shell *)user_data,
   2f6c6:	e9cd 2102 	strd	r2, r1, [sp, #8]
   2f6ca:	e9cd 7304 	strd	r7, r3, [sp, #16]
   2f6ce:	e9cd 0700 	strd	r0, r7, [sp]
   2f6d2:	462b      	mov	r3, r5
   2f6d4:	4621      	mov	r1, r4
   2f6d6:	4630      	mov	r0, r6
   2f6d8:	4a02      	ldr	r2, [pc, #8]	; (2f6e4 <shell_stack_dump+0x60>)
   2f6da:	f006 fed1 	bl	36480 <shell_fprintf>
   2f6de:	e7e2      	b.n	2f6a6 <shell_stack_dump+0x22>
   2f6e0:	0003b9eb 	.word	0x0003b9eb
   2f6e4:	0003ba65 	.word	0x0003ba65
   2f6e8:	0003b99b 	.word	0x0003b99b

0002f6ec <get_device_name>:
};

static const char *get_device_name(const struct device *dev,
				   char *buf,
				   size_t len)
{
   2f6ec:	4603      	mov	r3, r0
	const char *name = dev->name;
   2f6ee:	6800      	ldr	r0, [r0, #0]
{
   2f6f0:	b510      	push	{r4, lr}
   2f6f2:	460c      	mov	r4, r1
   2f6f4:	4611      	mov	r1, r2

	if ((name == NULL) || (name[0] == 0)) {
   2f6f6:	b108      	cbz	r0, 2f6fc <get_device_name+0x10>
   2f6f8:	7802      	ldrb	r2, [r0, #0]
   2f6fa:	b922      	cbnz	r2, 2f706 <get_device_name+0x1a>
		snprintf(buf, len, "[%p]", dev);
   2f6fc:	4620      	mov	r0, r4
   2f6fe:	4a02      	ldr	r2, [pc, #8]	; (2f708 <get_device_name+0x1c>)
   2f700:	f002 ffe8 	bl	326d4 <snprintf>
		name = buf;
   2f704:	4620      	mov	r0, r4
	}

	return name;
}
   2f706:	bd10      	pop	{r4, pc}
   2f708:	0003bb6b 	.word	0x0003bb6b

0002f70c <cmd_device_list_visitor>:
	size_t buf_size;
};

static int cmd_device_list_visitor(const struct device *dev,
				   void *context)
{
   2f70c:	b510      	push	{r4, lr}
	const struct cmd_device_list_visitor_context *ctx = context;

	shell_fprintf(ctx->shell, SHELL_NORMAL, "  requires: %s\n",
   2f70e:	680c      	ldr	r4, [r1, #0]
   2f710:	e9d1 1201 	ldrd	r1, r2, [r1, #4]
   2f714:	f7ff ffea 	bl	2f6ec <get_device_name>
   2f718:	2100      	movs	r1, #0
   2f71a:	4603      	mov	r3, r0
   2f71c:	4a02      	ldr	r2, [pc, #8]	; (2f728 <cmd_device_list_visitor+0x1c>)
   2f71e:	4620      	mov	r0, r4
   2f720:	f006 feae 	bl	36480 <shell_fprintf>
		      get_device_name(dev, ctx->buf, ctx->buf_size));

	return 0;
}
   2f724:	2000      	movs	r0, #0
   2f726:	bd10      	pop	{r4, pc}
   2f728:	0003bb70 	.word	0x0003bb70

0002f72c <cmd_device_list>:

static int cmd_device_list(const struct shell *shell,
			   size_t argc, char **argv)
{
   2f72c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2f730:	b08a      	sub	sp, #40	; 0x28
   2f732:	4605      	mov	r5, r0
	const struct device *devlist;
	size_t devcnt = z_device_get_all_static(&devlist);
   2f734:	a801      	add	r0, sp, #4
   2f736:	f003 ff33 	bl	335a0 <z_device_get_all_static>
	const struct device *devlist_end = devlist + devcnt;
   2f73a:	2618      	movs	r6, #24
   2f73c:	9b01      	ldr	r3, [sp, #4]
	const struct device *dev;
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
   2f73e:	2100      	movs	r1, #0
	const struct device *devlist_end = devlist + devcnt;
   2f740:	fb06 3600 	mla	r6, r6, r0, r3
	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
   2f744:	4a19      	ldr	r2, [pc, #100]	; (2f7ac <cmd_device_list+0x80>)
   2f746:	4628      	mov	r0, r5
   2f748:	f006 fe9a 	bl	36480 <shell_fprintf>
	for (dev = devlist; dev < devlist_end; dev++) {
		char buf[20];
		const char *name = get_device_name(dev, buf, sizeof(buf));
		const char *state = "READY";

		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
   2f74c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 2f7b8 <cmd_device_list+0x8c>
	for (dev = devlist; dev < devlist_end; dev++) {
   2f750:	9c01      	ldr	r4, [sp, #4]
		if (!device_is_ready(dev)) {
			state = "DISABLED";
   2f752:	f8df 9068 	ldr.w	r9, [pc, #104]	; 2f7bc <cmd_device_list+0x90>
   2f756:	f8df a068 	ldr.w	sl, [pc, #104]	; 2f7c0 <cmd_device_list+0x94>
	for (dev = devlist; dev < devlist_end; dev++) {
   2f75a:	42b4      	cmp	r4, r6
   2f75c:	d303      	bcc.n	2f766 <cmd_device_list+0x3a>
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
		}
	}

	return 0;
}
   2f75e:	2000      	movs	r0, #0
   2f760:	b00a      	add	sp, #40	; 0x28
   2f762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const char *name = get_device_name(dev, buf, sizeof(buf));
   2f766:	af05      	add	r7, sp, #20
   2f768:	4639      	mov	r1, r7
   2f76a:	2214      	movs	r2, #20
   2f76c:	4620      	mov	r0, r4
   2f76e:	f7ff ffbd 	bl	2f6ec <get_device_name>
		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
   2f772:	4642      	mov	r2, r8
		const char *name = get_device_name(dev, buf, sizeof(buf));
   2f774:	4603      	mov	r3, r0
		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
   2f776:	2100      	movs	r1, #0
   2f778:	4628      	mov	r0, r5
   2f77a:	f006 fe81 	bl	36480 <shell_fprintf>
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   2f77e:	4620      	mov	r0, r4
   2f780:	f008 f9ca 	bl	37b18 <z_device_ready>
		shell_fprintf(shell, SHELL_NORMAL, " (%s)\n", state);
   2f784:	2100      	movs	r1, #0
   2f786:	2800      	cmp	r0, #0
   2f788:	bf14      	ite	ne
   2f78a:	464b      	movne	r3, r9
   2f78c:	4653      	moveq	r3, sl
   2f78e:	4a08      	ldr	r2, [pc, #32]	; (2f7b0 <cmd_device_list+0x84>)
   2f790:	4628      	mov	r0, r5
   2f792:	f006 fe75 	bl	36480 <shell_fprintf>
			struct cmd_device_list_visitor_context ctx = {
   2f796:	2314      	movs	r3, #20
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
   2f798:	4620      	mov	r0, r4
   2f79a:	4906      	ldr	r1, [pc, #24]	; (2f7b4 <cmd_device_list+0x88>)
   2f79c:	aa02      	add	r2, sp, #8
			struct cmd_device_list_visitor_context ctx = {
   2f79e:	e9cd 5702 	strd	r5, r7, [sp, #8]
   2f7a2:	9304      	str	r3, [sp, #16]
	for (dev = devlist; dev < devlist_end; dev++) {
   2f7a4:	3418      	adds	r4, #24
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
   2f7a6:	f003 ff35 	bl	33614 <device_required_foreach>
	for (dev = devlist; dev < devlist_end; dev++) {
   2f7aa:	e7d6      	b.n	2f75a <cmd_device_list+0x2e>
   2f7ac:	0003bb8f 	.word	0x0003bb8f
   2f7b0:	0003bb9e 	.word	0x0003bb9e
   2f7b4:	0002f70d 	.word	0x0002f70d
   2f7b8:	0003bb99 	.word	0x0003bb99
   2f7bc:	0003bb80 	.word	0x0003bb80
   2f7c0:	0003bb86 	.word	0x0003bb86

0002f7c4 <device_get_config_level>:
{
   2f7c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2f7c8:	4606      	mov	r6, r0
	bool devices = false;
   2f7ca:	2700      	movs	r7, #0
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
   2f7cc:	4b10      	ldr	r3, [pc, #64]	; (2f810 <device_get_config_level+0x4c>)
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
   2f7ce:	f8df 9044 	ldr.w	r9, [pc, #68]	; 2f814 <device_get_config_level+0x50>
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
   2f7d2:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
   2f7d6:	3101      	adds	r1, #1
   2f7d8:	f853 8021 	ldr.w	r8, [r3, r1, lsl #2]
{
   2f7dc:	b087      	sub	sp, #28
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
   2f7de:	45a0      	cmp	r8, r4
   2f7e0:	d803      	bhi.n	2f7ea <device_get_config_level+0x26>
}
   2f7e2:	4638      	mov	r0, r7
   2f7e4:	b007      	add	sp, #28
   2f7e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2f7ea:	4620      	mov	r0, r4
   2f7ec:	f008 f994 	bl	37b18 <z_device_ready>
   2f7f0:	4605      	mov	r5, r0
   2f7f2:	b158      	cbz	r0, 2f80c <device_get_config_level+0x48>
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
   2f7f4:	2214      	movs	r2, #20
   2f7f6:	a901      	add	r1, sp, #4
   2f7f8:	4620      	mov	r0, r4
   2f7fa:	f7ff ff77 	bl	2f6ec <get_device_name>
   2f7fe:	464a      	mov	r2, r9
   2f800:	4603      	mov	r3, r0
   2f802:	2100      	movs	r1, #0
   2f804:	4630      	mov	r0, r6
   2f806:	f006 fe3b 	bl	36480 <shell_fprintf>
			devices = true;
   2f80a:	462f      	mov	r7, r5
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
   2f80c:	3418      	adds	r4, #24
   2f80e:	e7e6      	b.n	2f7de <device_get_config_level+0x1a>
   2f810:	0003aa80 	.word	0x0003aa80
   2f814:	0003bba5 	.word	0x0003bba5

0002f818 <cmd_device_levels>:
{
   2f818:	b510      	push	{r4, lr}
   2f81a:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
   2f81c:	2100      	movs	r1, #0
   2f81e:	4a1e      	ldr	r2, [pc, #120]	; (2f898 <cmd_device_levels+0x80>)
   2f820:	f006 fe2e 	bl	36480 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_1);
   2f824:	2100      	movs	r1, #0
   2f826:	4620      	mov	r0, r4
   2f828:	f7ff ffcc 	bl	2f7c4 <device_get_config_level>
	if (ret == false) {
   2f82c:	4601      	mov	r1, r0
   2f82e:	b918      	cbnz	r0, 2f838 <cmd_device_levels+0x20>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
   2f830:	4620      	mov	r0, r4
   2f832:	4a1a      	ldr	r2, [pc, #104]	; (2f89c <cmd_device_levels+0x84>)
   2f834:	f006 fe24 	bl	36480 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 2:\n");
   2f838:	2100      	movs	r1, #0
   2f83a:	4620      	mov	r0, r4
   2f83c:	4a18      	ldr	r2, [pc, #96]	; (2f8a0 <cmd_device_levels+0x88>)
   2f83e:	f006 fe1f 	bl	36480 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_2);
   2f842:	2101      	movs	r1, #1
   2f844:	4620      	mov	r0, r4
   2f846:	f7ff ffbd 	bl	2f7c4 <device_get_config_level>
	if (ret == false) {
   2f84a:	4601      	mov	r1, r0
   2f84c:	b918      	cbnz	r0, 2f856 <cmd_device_levels+0x3e>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
   2f84e:	4620      	mov	r0, r4
   2f850:	4a12      	ldr	r2, [pc, #72]	; (2f89c <cmd_device_levels+0x84>)
   2f852:	f006 fe15 	bl	36480 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "POST_KERNEL:\n");
   2f856:	2100      	movs	r1, #0
   2f858:	4620      	mov	r0, r4
   2f85a:	4a12      	ldr	r2, [pc, #72]	; (2f8a4 <cmd_device_levels+0x8c>)
   2f85c:	f006 fe10 	bl	36480 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_POST_KERNEL);
   2f860:	2102      	movs	r1, #2
   2f862:	4620      	mov	r0, r4
   2f864:	f7ff ffae 	bl	2f7c4 <device_get_config_level>
	if (ret == false) {
   2f868:	4601      	mov	r1, r0
   2f86a:	b918      	cbnz	r0, 2f874 <cmd_device_levels+0x5c>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
   2f86c:	4620      	mov	r0, r4
   2f86e:	4a0b      	ldr	r2, [pc, #44]	; (2f89c <cmd_device_levels+0x84>)
   2f870:	f006 fe06 	bl	36480 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "APPLICATION:\n");
   2f874:	2100      	movs	r1, #0
   2f876:	4620      	mov	r0, r4
   2f878:	4a0b      	ldr	r2, [pc, #44]	; (2f8a8 <cmd_device_levels+0x90>)
   2f87a:	f006 fe01 	bl	36480 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_APPLICATION);
   2f87e:	2103      	movs	r1, #3
   2f880:	4620      	mov	r0, r4
   2f882:	f7ff ff9f 	bl	2f7c4 <device_get_config_level>
	if (ret == false) {
   2f886:	4601      	mov	r1, r0
   2f888:	b918      	cbnz	r0, 2f892 <cmd_device_levels+0x7a>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
   2f88a:	4620      	mov	r0, r4
   2f88c:	4a03      	ldr	r2, [pc, #12]	; (2f89c <cmd_device_levels+0x84>)
   2f88e:	f006 fdf7 	bl	36480 <shell_fprintf>
}
   2f892:	2000      	movs	r0, #0
   2f894:	bd10      	pop	{r4, pc}
   2f896:	bf00      	nop
   2f898:	0003bbab 	.word	0x0003bbab
   2f89c:	0003bbba 	.word	0x0003bbba
   2f8a0:	0003bbc2 	.word	0x0003bbc2
   2f8a4:	0003bbd1 	.word	0x0003bbd1
   2f8a8:	0003bbdf 	.word	0x0003bbdf

0002f8ac <date_print>:

#define HELP_NONE      "[none]"
#define HELP_DATE_SET  "[Y-m-d] <H:M:S>"

static void date_print(const struct shell *shell, struct tm *tm)
{
   2f8ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	shell_print(shell,
   2f8ae:	680a      	ldr	r2, [r1, #0]
   2f8b0:	694b      	ldr	r3, [r1, #20]
   2f8b2:	9204      	str	r2, [sp, #16]
   2f8b4:	684a      	ldr	r2, [r1, #4]
   2f8b6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   2f8ba:	9203      	str	r2, [sp, #12]
   2f8bc:	688a      	ldr	r2, [r1, #8]
   2f8be:	9202      	str	r2, [sp, #8]
   2f8c0:	68ca      	ldr	r2, [r1, #12]
   2f8c2:	9201      	str	r2, [sp, #4]
   2f8c4:	690a      	ldr	r2, [r1, #16]
   2f8c6:	2100      	movs	r1, #0
   2f8c8:	3201      	adds	r2, #1
   2f8ca:	9200      	str	r2, [sp, #0]
   2f8cc:	4a02      	ldr	r2, [pc, #8]	; (2f8d8 <date_print+0x2c>)
   2f8ce:	f006 fdd7 	bl	36480 <shell_fprintf>
		    tm->tm_mon + 1,
		    tm->tm_mday,
		    tm->tm_hour,
		    tm->tm_min,
		    tm->tm_sec);
}
   2f8d2:	b007      	add	sp, #28
   2f8d4:	f85d fb04 	ldr.w	pc, [sp], #4
   2f8d8:	0003bc43 	.word	0x0003bc43

0002f8dc <get_h_m_s>:
 * For user convenience of small adjustments to time the time argument will
 * accept H:M:S, :M:S or ::S where the missing field(s) will be filled in by
 * the previous time state.
 */
static int get_h_m_s(const struct shell *shell, struct tm *tm, char *time_str)
{
   2f8dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	char *endptr;

	if (*time_str == ':') {
   2f8de:	7813      	ldrb	r3, [r2, #0]
{
   2f8e0:	4606      	mov	r6, r0
	if (*time_str == ':') {
   2f8e2:	2b3a      	cmp	r3, #58	; 0x3a
{
   2f8e4:	460f      	mov	r7, r1
   2f8e6:	4615      	mov	r5, r2
	if (*time_str == ':') {
   2f8e8:	d116      	bne.n	2f918 <get_h_m_s+0x3c>
		time_str++;
   2f8ea:	1c54      	adds	r4, r2, #1
		} else {
			return -EINVAL;
		}
	}

	if (*time_str == ':') {
   2f8ec:	7823      	ldrb	r3, [r4, #0]
   2f8ee:	2b3a      	cmp	r3, #58	; 0x3a
   2f8f0:	d12e      	bne.n	2f950 <get_h_m_s+0x74>
		time_str++;
   2f8f2:	3401      	adds	r4, #1
		} else {
			return -EINVAL;
		}
	}

	endptr = NULL;
   2f8f4:	2300      	movs	r3, #0
	tm->tm_sec = strtol(time_str, &endptr, 10);
   2f8f6:	220a      	movs	r2, #10
   2f8f8:	4620      	mov	r0, r4
   2f8fa:	a901      	add	r1, sp, #4
	endptr = NULL;
   2f8fc:	9301      	str	r3, [sp, #4]
	tm->tm_sec = strtol(time_str, &endptr, 10);
   2f8fe:	f007 fd74 	bl	373ea <strtol>
	if ((endptr == time_str) || (*endptr != '\0')) {
   2f902:	9a01      	ldr	r2, [sp, #4]
	tm->tm_sec = strtol(time_str, &endptr, 10);
   2f904:	4603      	mov	r3, r0
	if ((endptr == time_str) || (*endptr != '\0')) {
   2f906:	42a2      	cmp	r2, r4
	tm->tm_sec = strtol(time_str, &endptr, 10);
   2f908:	6038      	str	r0, [r7, #0]
	if ((endptr == time_str) || (*endptr != '\0')) {
   2f90a:	d010      	beq.n	2f92e <get_h_m_s+0x52>
   2f90c:	7810      	ldrb	r0, [r2, #0]
   2f90e:	b970      	cbnz	r0, 2f92e <get_h_m_s+0x52>
		return -EINVAL;
	}

	/* Note range allows for a leap second */
	if ((tm->tm_sec < 0) || (tm->tm_sec > 60)) {
   2f910:	2b3c      	cmp	r3, #60	; 0x3c
   2f912:	d90e      	bls.n	2f932 <get_h_m_s+0x56>
		shell_error(shell, "Invalid second");
   2f914:	4a18      	ldr	r2, [pc, #96]	; (2f978 <get_h_m_s+0x9c>)
   2f916:	e014      	b.n	2f942 <get_h_m_s+0x66>
		endptr = NULL;
   2f918:	2300      	movs	r3, #0
		tm->tm_hour = strtol(time_str, &endptr, 10);
   2f91a:	220a      	movs	r2, #10
   2f91c:	4628      	mov	r0, r5
   2f91e:	a901      	add	r1, sp, #4
		endptr = NULL;
   2f920:	9301      	str	r3, [sp, #4]
		tm->tm_hour = strtol(time_str, &endptr, 10);
   2f922:	f007 fd62 	bl	373ea <strtol>
		if (endptr == time_str) {
   2f926:	9c01      	ldr	r4, [sp, #4]
		tm->tm_hour = strtol(time_str, &endptr, 10);
   2f928:	60b8      	str	r0, [r7, #8]
		if (endptr == time_str) {
   2f92a:	42ac      	cmp	r4, r5
   2f92c:	d103      	bne.n	2f936 <get_h_m_s+0x5a>
		return -EINVAL;
   2f92e:	f06f 0015 	mvn.w	r0, #21
	}

	return 0;
}
   2f932:	b003      	add	sp, #12
   2f934:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (*endptr == ':') {
   2f936:	7823      	ldrb	r3, [r4, #0]
   2f938:	2b3a      	cmp	r3, #58	; 0x3a
   2f93a:	d1f8      	bne.n	2f92e <get_h_m_s+0x52>
			if ((tm->tm_hour < 0) || (tm->tm_hour > 23)) {
   2f93c:	2817      	cmp	r0, #23
   2f93e:	d905      	bls.n	2f94c <get_h_m_s+0x70>
				shell_error(shell, "Invalid hour");
   2f940:	4a0e      	ldr	r2, [pc, #56]	; (2f97c <get_h_m_s+0xa0>)
		shell_error(shell, "Invalid second");
   2f942:	2102      	movs	r1, #2
   2f944:	4630      	mov	r0, r6
   2f946:	f006 fd9b 	bl	36480 <shell_fprintf>
   2f94a:	e7f0      	b.n	2f92e <get_h_m_s+0x52>
			time_str = endptr + 1;
   2f94c:	3401      	adds	r4, #1
   2f94e:	e7cd      	b.n	2f8ec <get_h_m_s+0x10>
		endptr = NULL;
   2f950:	2300      	movs	r3, #0
		tm->tm_min = strtol(time_str, &endptr, 10);
   2f952:	220a      	movs	r2, #10
   2f954:	4620      	mov	r0, r4
   2f956:	a901      	add	r1, sp, #4
		endptr = NULL;
   2f958:	9301      	str	r3, [sp, #4]
		tm->tm_min = strtol(time_str, &endptr, 10);
   2f95a:	f007 fd46 	bl	373ea <strtol>
		if (endptr == time_str) {
   2f95e:	9a01      	ldr	r2, [sp, #4]
		tm->tm_min = strtol(time_str, &endptr, 10);
   2f960:	6078      	str	r0, [r7, #4]
		if (endptr == time_str) {
   2f962:	42a2      	cmp	r2, r4
   2f964:	d0e3      	beq.n	2f92e <get_h_m_s+0x52>
		} else if (*endptr == ':') {
   2f966:	7813      	ldrb	r3, [r2, #0]
   2f968:	2b3a      	cmp	r3, #58	; 0x3a
   2f96a:	d1e0      	bne.n	2f92e <get_h_m_s+0x52>
			if ((tm->tm_min < 0) || (tm->tm_min > 59)) {
   2f96c:	283b      	cmp	r0, #59	; 0x3b
   2f96e:	d901      	bls.n	2f974 <get_h_m_s+0x98>
				shell_error(shell, "Invalid minute");
   2f970:	4a03      	ldr	r2, [pc, #12]	; (2f980 <get_h_m_s+0xa4>)
   2f972:	e7e6      	b.n	2f942 <get_h_m_s+0x66>
			time_str = endptr + 1;
   2f974:	1c54      	adds	r4, r2, #1
   2f976:	e7bd      	b.n	2f8f4 <get_h_m_s+0x18>
   2f978:	0003bc82 	.word	0x0003bc82
   2f97c:	0003bc64 	.word	0x0003bc64
   2f980:	0003bc72 	.word	0x0003bc72

0002f984 <cmd_date_set>:

static int cmd_date_set(const struct shell *shell, size_t argc, char **argv)
{
   2f984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2f988:	4604      	mov	r4, r0
   2f98a:	460d      	mov	r5, r1
   2f98c:	4617      	mov	r7, r2
   2f98e:	b091      	sub	sp, #68	; 0x44
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&clock_id, *(uintptr_t *)&ts, K_SYSCALL_CLOCK_GETTIME);
	}
#endif
	compiler_barrier();
	return z_impl_clock_gettime(clock_id, ts);
   2f990:	2001      	movs	r0, #1
   2f992:	a902      	add	r1, sp, #8
   2f994:	f7fd fbec 	bl	2d170 <z_impl_clock_gettime>
	struct tm tm;
	int ret;

	clock_gettime(CLOCK_REALTIME, &tp);

	gmtime_r(&tp.tv_sec, &tm);
   2f998:	a907      	add	r1, sp, #28
   2f99a:	a802      	add	r0, sp, #8
   2f99c:	f002 fedc 	bl	32758 <gmtime_r>

	if (argc == 3) {
   2f9a0:	2d03      	cmp	r5, #3
   2f9a2:	d160      	bne.n	2fa66 <cmd_date_set+0xe2>
	endptr = NULL;
   2f9a4:	f04f 0900 	mov.w	r9, #0
		ret = get_y_m_d(shell, &tm, argv[1]);
   2f9a8:	687d      	ldr	r5, [r7, #4]
	year = strtol(date_str, &endptr, 10);
   2f9aa:	220a      	movs	r2, #10
   2f9ac:	4628      	mov	r0, r5
   2f9ae:	a901      	add	r1, sp, #4
	endptr = NULL;
   2f9b0:	f8cd 9004 	str.w	r9, [sp, #4]
	year = strtol(date_str, &endptr, 10);
   2f9b4:	f007 fd19 	bl	373ea <strtol>
	if ((endptr == date_str) || (*endptr != '-')) {
   2f9b8:	9e01      	ldr	r6, [sp, #4]
	year = strtol(date_str, &endptr, 10);
   2f9ba:	4680      	mov	r8, r0
	if ((endptr == date_str) || (*endptr != '-')) {
   2f9bc:	42b5      	cmp	r5, r6
   2f9be:	d018      	beq.n	2f9f2 <cmd_date_set+0x6e>
   2f9c0:	7832      	ldrb	r2, [r6, #0]
   2f9c2:	2a2d      	cmp	r2, #45	; 0x2d
   2f9c4:	d115      	bne.n	2f9f2 <cmd_date_set+0x6e>
	date_str = endptr + 1;
   2f9c6:	3601      	adds	r6, #1
	month = strtol(date_str, &endptr, 10);
   2f9c8:	220a      	movs	r2, #10
   2f9ca:	4630      	mov	r0, r6
   2f9cc:	a901      	add	r1, sp, #4
	endptr = NULL;
   2f9ce:	f8cd 9004 	str.w	r9, [sp, #4]
	month = strtol(date_str, &endptr, 10);
   2f9d2:	f007 fd0a 	bl	373ea <strtol>
	if ((endptr == date_str) || (*endptr != '-')) {
   2f9d6:	9b01      	ldr	r3, [sp, #4]
   2f9d8:	429e      	cmp	r6, r3
   2f9da:	d00a      	beq.n	2f9f2 <cmd_date_set+0x6e>
   2f9dc:	781a      	ldrb	r2, [r3, #0]
   2f9de:	2a2d      	cmp	r2, #45	; 0x2d
   2f9e0:	d107      	bne.n	2f9f2 <cmd_date_set+0x6e>
	if ((month < 1) || (month > 12)) {
   2f9e2:	1e45      	subs	r5, r0, #1
   2f9e4:	2d0b      	cmp	r5, #11
   2f9e6:	d90d      	bls.n	2fa04 <cmd_date_set+0x80>
		shell_error(shell, "Invalid month");
   2f9e8:	4a2b      	ldr	r2, [pc, #172]	; (2fa98 <cmd_date_set+0x114>)
		shell_error(shell, "Invalid day");
   2f9ea:	2102      	movs	r1, #2
   2f9ec:	4620      	mov	r0, r4
   2f9ee:	f006 fd47 	bl	36480 <shell_fprintf>
		if (ret != 0) {
			shell_help(shell);
   2f9f2:	4620      	mov	r0, r4
   2f9f4:	f006 fd51 	bl	3649a <shell_help>
	tp.tv_nsec = 0;

	ret = clock_settime(CLOCK_REALTIME, &tp);
	if (ret != 0) {
		shell_error(shell, "Could not set date %d", ret);
		return -EINVAL;
   2f9f8:	f06f 0515 	mvn.w	r5, #21
	}

	date_print(shell, &tm);

	return 0;
}
   2f9fc:	4628      	mov	r0, r5
   2f9fe:	b011      	add	sp, #68	; 0x44
   2fa00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	date_str = endptr + 1;
   2fa04:	1c5e      	adds	r6, r3, #1
	day = strtol(date_str, &endptr, 10);
   2fa06:	220a      	movs	r2, #10
   2fa08:	4630      	mov	r0, r6
   2fa0a:	a901      	add	r1, sp, #4
	endptr = NULL;
   2fa0c:	f8cd 9004 	str.w	r9, [sp, #4]
	day = strtol(date_str, &endptr, 10);
   2fa10:	f007 fceb 	bl	373ea <strtol>
	if ((endptr == date_str) || (*endptr != '\0')) {
   2fa14:	9b01      	ldr	r3, [sp, #4]
   2fa16:	429e      	cmp	r6, r3
   2fa18:	d0eb      	beq.n	2f9f2 <cmd_date_set+0x6e>
   2fa1a:	781b      	ldrb	r3, [r3, #0]
   2fa1c:	2b00      	cmp	r3, #0
   2fa1e:	d1e8      	bne.n	2f9f2 <cmd_date_set+0x6e>
	if ((day < 1) || (day > 31)) {
   2fa20:	1e43      	subs	r3, r0, #1
   2fa22:	2b1e      	cmp	r3, #30
   2fa24:	d901      	bls.n	2fa2a <cmd_date_set+0xa6>
		shell_error(shell, "Invalid day");
   2fa26:	4a1d      	ldr	r2, [pc, #116]	; (2fa9c <cmd_date_set+0x118>)
   2fa28:	e7df      	b.n	2f9ea <cmd_date_set+0x66>
	tm->tm_year = year - 1900;
   2fa2a:	f2a8 736c 	subw	r3, r8, #1900	; 0x76c
	tm->tm_mon = month - 1;
   2fa2e:	e9cd 530b 	strd	r5, r3, [sp, #44]	; 0x2c
		ret = get_h_m_s(shell, &tm, argv[2]);
   2fa32:	68ba      	ldr	r2, [r7, #8]
	tm->tm_mday = day;
   2fa34:	900a      	str	r0, [sp, #40]	; 0x28
		ret = get_h_m_s(shell, &tm, argv[2]);
   2fa36:	4620      	mov	r0, r4
   2fa38:	a907      	add	r1, sp, #28
   2fa3a:	f7ff ff4f 	bl	2f8dc <get_h_m_s>
		if (ret != 0) {
   2fa3e:	2800      	cmp	r0, #0
   2fa40:	d1d7      	bne.n	2f9f2 <cmd_date_set+0x6e>
	tp.tv_sec = timeutil_timegm(&tm);
   2fa42:	a807      	add	r0, sp, #28
   2fa44:	f005 fd37 	bl	354b6 <timeutil_timegm>
   2fa48:	460b      	mov	r3, r1
   2fa4a:	4602      	mov	r2, r0
   2fa4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
	if (tp.tv_sec == -1) {
   2fa50:	3301      	adds	r3, #1
   2fa52:	bf08      	it	eq
   2fa54:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   2fa58:	d109      	bne.n	2fa6e <cmd_date_set+0xea>
		shell_error(shell, "Failed to calculate seconds since Epoch");
   2fa5a:	2102      	movs	r1, #2
   2fa5c:	4620      	mov	r0, r4
   2fa5e:	4a10      	ldr	r2, [pc, #64]	; (2faa0 <cmd_date_set+0x11c>)
   2fa60:	f006 fd0e 	bl	36480 <shell_fprintf>
		return -EINVAL;
   2fa64:	e7c8      	b.n	2f9f8 <cmd_date_set+0x74>
	} else if (argc == 2) {
   2fa66:	2d02      	cmp	r5, #2
   2fa68:	d1c3      	bne.n	2f9f2 <cmd_date_set+0x6e>
		ret = get_h_m_s(shell, &tm, argv[1]);
   2fa6a:	687a      	ldr	r2, [r7, #4]
   2fa6c:	e7e3      	b.n	2fa36 <cmd_date_set+0xb2>
	tp.tv_nsec = 0;
   2fa6e:	2300      	movs	r3, #0
	ret = clock_settime(CLOCK_REALTIME, &tp);
   2fa70:	2001      	movs	r0, #1
   2fa72:	a902      	add	r1, sp, #8
	tp.tv_nsec = 0;
   2fa74:	9304      	str	r3, [sp, #16]
	ret = clock_settime(CLOCK_REALTIME, &tp);
   2fa76:	f7fd fbcf 	bl	2d218 <clock_settime>
	if (ret != 0) {
   2fa7a:	4605      	mov	r5, r0
   2fa7c:	b130      	cbz	r0, 2fa8c <cmd_date_set+0x108>
		shell_error(shell, "Could not set date %d", ret);
   2fa7e:	4603      	mov	r3, r0
   2fa80:	2102      	movs	r1, #2
   2fa82:	4620      	mov	r0, r4
   2fa84:	4a07      	ldr	r2, [pc, #28]	; (2faa4 <cmd_date_set+0x120>)
   2fa86:	f006 fcfb 	bl	36480 <shell_fprintf>
   2fa8a:	e7b5      	b.n	2f9f8 <cmd_date_set+0x74>
	date_print(shell, &tm);
   2fa8c:	4620      	mov	r0, r4
   2fa8e:	a907      	add	r1, sp, #28
   2fa90:	f7ff ff0c 	bl	2f8ac <date_print>
	return 0;
   2fa94:	e7b2      	b.n	2f9fc <cmd_date_set+0x78>
   2fa96:	bf00      	nop
   2fa98:	0003bc92 	.word	0x0003bc92
   2fa9c:	0003bca1 	.word	0x0003bca1
   2faa0:	0003bcae 	.word	0x0003bcae
   2faa4:	0003bcd7 	.word	0x0003bcd7

0002faa8 <shell_internal_help_print>:
	shell->ctx->cmd_buff_pos = 0;
	shell->ctx->cmd_buff_len = 0;
}

static void shell_internal_help_print(const struct shell *shell)
{
   2faa8:	b510      	push	{r4, lr}
   2faaa:	4604      	mov	r4, r0
	if (!IS_ENABLED(CONFIG_SHELL_HELP)) {
		return;
	}

	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
   2faac:	6881      	ldr	r1, [r0, #8]
   2faae:	3108      	adds	r1, #8
   2fab0:	f001 f9be 	bl	30e30 <z_shell_help_cmd_print>
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
   2fab4:	68a1      	ldr	r1, [r4, #8]
   2fab6:	4620      	mov	r0, r4
				  "Subcommands:\n");
}
   2fab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
   2fabc:	4a01      	ldr	r2, [pc, #4]	; (2fac4 <shell_internal_help_print+0x1c>)
   2fabe:	3108      	adds	r1, #8
   2fac0:	f001 b958 	b.w	30d74 <z_shell_help_subcmd_print>
   2fac4:	0003bd1c 	.word	0x0003bd1c

0002fac8 <state_set.part.0>:
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
   2fac8:	2200      	movs	r2, #0
	}

	return 0;
}

static inline void state_set(const struct shell *shell, enum shell_state state)
   2faca:	b510      	push	{r4, lr}
{
	shell->ctx->state = state;

	if (state == SHELL_STATE_ACTIVE) {
		cmd_buffer_clear(shell);
   2facc:	6883      	ldr	r3, [r0, #8]
static inline void state_set(const struct shell *shell, enum shell_state state)
   2face:	4604      	mov	r4, r0
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
   2fad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	shell->ctx->cmd_buff_len = 0;
   2fad4:	639a      	str	r2, [r3, #56]	; 0x38
		if (z_flag_print_noinit_get(shell)) {
   2fad6:	6883      	ldr	r3, [r0, #8]
	shell->ctx->internal.flags.last_nl = val;
}

static inline bool z_flag_print_noinit_get(const struct shell *shell)
{
	return shell->ctx->internal.flags.print_noinit == 1;
   2fad8:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
   2fadc:	039b      	lsls	r3, r3, #14
   2fade:	d50b      	bpl.n	2faf8 <state_set.part.0+0x30>
			z_shell_fprintf(shell, SHELL_WARNING, "%s",
   2fae0:	2104      	movs	r1, #4
   2fae2:	4b08      	ldr	r3, [pc, #32]	; (2fb04 <state_set.part.0+0x3c>)
   2fae4:	4a08      	ldr	r2, [pc, #32]	; (2fb08 <state_set.part.0+0x40>)
   2fae6:	f007 f827 	bl	36b38 <z_shell_fprintf>

static inline bool z_flag_print_noinit_set(const struct shell *shell, bool val)
{
	bool ret;

	Z_SHELL_SET_FLAG_ATOMIC(shell, print_noinit, val, ret);
   2faea:	68a0      	ldr	r0, [r4, #8]
   2faec:	f46f 3100 	mvn.w	r1, #131072	; 0x20000
   2faf0:	f500 7017 	add.w	r0, r0, #604	; 0x25c
   2faf4:	f006 fb9e 	bl	36234 <atomic_and>
					SHELL_MSG_BACKEND_NOT_ACTIVE);
			z_flag_print_noinit_set(shell, false);
		}
		z_shell_print_prompt_and_cmd(shell);
   2faf8:	4620      	mov	r0, r4
	}
}
   2fafa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_print_prompt_and_cmd(shell);
   2fafe:	f000 bfdd 	b.w	30abc <z_shell_print_prompt_and_cmd>
   2fb02:	bf00      	nop
   2fb04:	0003bd2a 	.word	0x0003bd2a
   2fb08:	0003bb9b 	.word	0x0003bb9b

0002fb0c <history_handle>:

	z_shell_history_put(shell->history, line, length);
}

static void history_handle(const struct shell *shell, bool up)
{
   2fb0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2fb0e:	4604      	mov	r4, r0
	if (!IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		return;
	}

	/* Checking if history process has been stopped */
	if (z_flag_history_exit_get(shell)) {
   2fb10:	6880      	ldr	r0, [r0, #8]
{
   2fb12:	460d      	mov	r5, r1
	return shell->ctx->internal.flags.history_exit == 1;
   2fb14:	f8d0 325c 	ldr.w	r3, [r0, #604]	; 0x25c
	if (z_flag_history_exit_get(shell)) {
   2fb18:	061b      	lsls	r3, r3, #24
   2fb1a:	d505      	bpl.n	2fb28 <history_handle+0x1c>
		z_flag_history_exit_set(shell, false);
   2fb1c:	2100      	movs	r1, #0
   2fb1e:	f006 fc26 	bl	3636e <z_flag_history_exit_set.isra.0>
		z_shell_history_mode_exit(shell->history);
   2fb22:	68e0      	ldr	r0, [r4, #12]
   2fb24:	f007 f94b 	bl	36dbe <z_shell_history_mode_exit>
	}

	/* Backup command if history is entered */
	if (!z_shell_history_active(shell->history)) {
   2fb28:	68e3      	ldr	r3, [r4, #12]
   2fb2a:	68db      	ldr	r3, [r3, #12]
   2fb2c:	b963      	cbnz	r3, 2fb48 <history_handle+0x3c>
		if (up) {
   2fb2e:	b39d      	cbz	r5, 2fb98 <history_handle+0x8c>
			uint16_t cmd_len = z_shell_strlen(shell->ctx->cmd_buff);
   2fb30:	68a0      	ldr	r0, [r4, #8]
   2fb32:	303e      	adds	r0, #62	; 0x3e
   2fb34:	f006 fbc8 	bl	362c8 <z_shell_strlen>

			if (cmd_len) {
   2fb38:	68a3      	ldr	r3, [r4, #8]
   2fb3a:	b378      	cbz	r0, 2fb9c <history_handle+0x90>
				strcpy(shell->ctx->temp_buff,
   2fb3c:	f103 013e 	add.w	r1, r3, #62	; 0x3e
   2fb40:	f503 709f 	add.w	r0, r3, #318	; 0x13e
   2fb44:	f007 fce7 	bl	37516 <strcpy>
		}
	}

	/* Start by checking if history is not empty. */
	history_mode = z_shell_history_get(shell->history, up,
					   shell->ctx->cmd_buff, &len);
   2fb48:	68a2      	ldr	r2, [r4, #8]
	history_mode = z_shell_history_get(shell->history, up,
   2fb4a:	4629      	mov	r1, r5
   2fb4c:	68e0      	ldr	r0, [r4, #12]
   2fb4e:	f10d 0306 	add.w	r3, sp, #6
   2fb52:	323e      	adds	r2, #62	; 0x3e
   2fb54:	f007 f936 	bl	36dc4 <z_shell_history_get>

	/* On exiting history mode print backed up command. */
	if (!history_mode) {
   2fb58:	b958      	cbnz	r0, 2fb72 <history_handle+0x66>
		strcpy(shell->ctx->cmd_buff, shell->ctx->temp_buff);
   2fb5a:	68a0      	ldr	r0, [r4, #8]
   2fb5c:	f500 719f 	add.w	r1, r0, #318	; 0x13e
   2fb60:	303e      	adds	r0, #62	; 0x3e
   2fb62:	f007 fcd8 	bl	37516 <strcpy>
		len = z_shell_strlen(shell->ctx->cmd_buff);
   2fb66:	68a0      	ldr	r0, [r4, #8]
   2fb68:	303e      	adds	r0, #62	; 0x3e
   2fb6a:	f006 fbad 	bl	362c8 <z_shell_strlen>
   2fb6e:	f8ad 0006 	strh.w	r0, [sp, #6]
	}

	z_shell_op_cursor_home_move(shell);
   2fb72:	4620      	mov	r0, r4
   2fb74:	f006 ff39 	bl	369ea <z_shell_op_cursor_home_move>
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
   2fb78:	4a0a      	ldr	r2, [pc, #40]	; (2fba4 <history_handle+0x98>)
   2fb7a:	490b      	ldr	r1, [pc, #44]	; (2fba8 <history_handle+0x9c>)
   2fb7c:	6960      	ldr	r0, [r4, #20]
   2fb7e:	f006 fba9 	bl	362d4 <z_shell_raw_fprintf>
	z_clear_eos(shell);
	z_shell_print_cmd(shell);
   2fb82:	4620      	mov	r0, r4
   2fb84:	f000 fe7c 	bl	30880 <z_shell_print_cmd>
	shell->ctx->cmd_buff_pos = len;
   2fb88:	68a3      	ldr	r3, [r4, #8]
   2fb8a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
	shell->ctx->cmd_buff_len = len;
	z_shell_op_cond_next_line(shell);
   2fb8e:	4620      	mov	r0, r4
	shell->ctx->cmd_buff_pos = len;
   2fb90:	875a      	strh	r2, [r3, #58]	; 0x3a
	shell->ctx->cmd_buff_len = len;
   2fb92:	871a      	strh	r2, [r3, #56]	; 0x38
	z_shell_op_cond_next_line(shell);
   2fb94:	f000 fe36 	bl	30804 <z_shell_op_cond_next_line>
}
   2fb98:	b003      	add	sp, #12
   2fb9a:	bd30      	pop	{r4, r5, pc}
				shell->ctx->temp_buff[0] = '\0';
   2fb9c:	f883 013e 	strb.w	r0, [r3, #318]	; 0x13e
   2fba0:	e7d2      	b.n	2fb48 <history_handle+0x3c>
   2fba2:	bf00      	nop
   2fba4:	0003bff9 	.word	0x0003bff9
   2fba8:	0003bb9b 	.word	0x0003bb9b

0002fbac <execute>:
	struct shell_static_entry dloc; /* Memory for dynamic commands. */
	const char *argv[CONFIG_SHELL_ARGC_MAX + 1]; /* +1 reserved for NULL */
	const struct shell_static_entry *parent = selected_cmd_get(shell);
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry help_entry;
	size_t cmd_lvl = 0;
   2fbac:	2300      	movs	r3, #0
{
   2fbae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fbb2:	4604      	mov	r4, r0
   2fbb4:	b09f      	sub	sp, #124	; 0x7c
	size_t cmd_with_handler_lvl = 0;
	bool wildcard_found = false;
	size_t argc = 0, args_left = SIZE_MAX;
   2fbb6:	e9cd 3305 	strd	r3, r3, [sp, #20]
	char quote;
	const char **argvp;
	char *cmd_buf = shell->ctx->cmd_buff;
   2fbba:	6883      	ldr	r3, [r0, #8]
   2fbbc:	333e      	adds	r3, #62	; 0x3e
   2fbbe:	9303      	str	r3, [sp, #12]
	bool has_last_handler = false;

	z_shell_op_cursor_end_move(shell);
   2fbc0:	f006 ff19 	bl	369f6 <z_shell_op_cursor_end_move>
	if (!z_shell_cursor_in_empty_line(shell)) {
   2fbc4:	4620      	mov	r0, r4
   2fbc6:	f006 fe9e 	bl	36906 <z_shell_cursor_in_empty_line>
   2fbca:	b918      	cbnz	r0, 2fbd4 <execute+0x28>
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n");
   2fbcc:	499f      	ldr	r1, [pc, #636]	; (2fe4c <execute+0x2a0>)
   2fbce:	6960      	ldr	r0, [r4, #20]
   2fbd0:	f006 fb80 	bl	362d4 <z_shell_raw_fprintf>
		argvp = &argv[1];
		active_cmd_prepare(parent, &shell->ctx->active_cmd, &help_entry,
				   &cmd_lvl, &cmd_with_handler_lvl, &args_left);
		cmd_lvl++;
	} else {
		help_entry.help = NULL;
   2fbd4:	2600      	movs	r6, #0
	size_t argc = 0, args_left = SIZE_MAX;
   2fbd6:	f04f 38ff 	mov.w	r8, #4294967295
	size_t cmd_with_handler_lvl = 0;
   2fbda:	46b1      	mov	r9, r6
		z_shell_wildcard_prepare(shell);
   2fbdc:	46b2      	mov	sl, r6
   2fbde:	4635      	mov	r5, r6
   2fbe0:	46b3      	mov	fp, r6
	memset(&shell->ctx->active_cmd, 0, sizeof(shell->ctx->active_cmd));
   2fbe2:	68a0      	ldr	r0, [r4, #8]
   2fbe4:	2214      	movs	r2, #20
   2fbe6:	2100      	movs	r1, #0
   2fbe8:	3008      	adds	r0, #8
   2fbea:	f007 fd3c 	bl	37666 <memset>
		z_shell_cmd_trim(shell);
   2fbee:	4620      	mov	r0, r4
   2fbf0:	f006 fe36 	bl	36860 <z_shell_cmd_trim>
		history_put(shell, shell->ctx->cmd_buff,
   2fbf4:	68a1      	ldr	r1, [r4, #8]
	z_shell_history_put(shell->history, line, length);
   2fbf6:	68e0      	ldr	r0, [r4, #12]
   2fbf8:	8f0a      	ldrh	r2, [r1, #56]	; 0x38
   2fbfa:	313e      	adds	r1, #62	; 0x3e
   2fbfc:	f007 f919 	bl	36e32 <z_shell_history_put>
		z_shell_wildcard_prepare(shell);
   2fc00:	4620      	mov	r0, r4
   2fc02:	f007 fad6 	bl	371b2 <z_shell_wildcard_prepare>
   2fc06:	af11      	add	r7, sp, #68	; 0x44
   2fc08:	9602      	str	r6, [sp, #8]
		argvp = &argv[0];
	}

	/* Below loop is analyzing subcommands of found root command. */
	while ((argc != 1) && (cmd_lvl < CONFIG_SHELL_ARGC_MAX)
   2fc0a:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   2fc0e:	2a01      	cmp	r2, #1
   2fc10:	f000 80d7 	beq.w	2fdc2 <execute+0x216>
   2fc14:	2b0b      	cmp	r3, #11
   2fc16:	f240 80af 	bls.w	2fd78 <execute+0x1cc>
			cmd_lvl++;
		}

	}

	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
   2fc1a:	9906      	ldr	r1, [sp, #24]
   2fc1c:	2902      	cmp	r1, #2
   2fc1e:	f040 80af 	bne.w	2fd80 <execute+0x1d4>
		/* argc == 2 indicates that when command string was parsed
		 * there was more characters remaining. It means that number of
		 * arguments exceeds the limit.
		 */
		z_shell_fprintf(shell, SHELL_ERROR, "%s\n",
   2fc22:	4b8b      	ldr	r3, [pc, #556]	; (2fe50 <execute+0x2a4>)
   2fc24:	4a8b      	ldr	r2, [pc, #556]	; (2fe54 <execute+0x2a8>)
   2fc26:	e015      	b.n	2fc54 <execute+0xa8>
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
   2fc28:	2302      	movs	r3, #2
   2fc2a:	9a03      	ldr	r2, [sp, #12]
   2fc2c:	4639      	mov	r1, r7
   2fc2e:	a806      	add	r0, sp, #24
   2fc30:	f006 fcb0 	bl	36594 <z_shell_make_argv>
		cmd_buf = (char *)argvp[1];
   2fc34:	687a      	ldr	r2, [r7, #4]
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
   2fc36:	4603      	mov	r3, r0
		cmd_buf = (char *)argvp[1];
   2fc38:	9203      	str	r2, [sp, #12]
		if (argc == 0) {
   2fc3a:	9a06      	ldr	r2, [sp, #24]
   2fc3c:	b92a      	cbnz	r2, 2fc4a <execute+0x9e>
			return -ENOEXEC;
   2fc3e:	f06f 0507 	mvn.w	r5, #7
	/* terminate arguments with NULL */
	argv[cmd_lvl] = NULL;
	/* Executing the deepest found handler. */
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
			&argv[cmd_with_handler_lvl], &help_entry);
}
   2fc42:	4628      	mov	r0, r5
   2fc44:	b01f      	add	sp, #124	; 0x7c
   2fc46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if ((argc == 1) && (quote != 0)) {
   2fc4a:	2a01      	cmp	r2, #1
   2fc4c:	d106      	bne.n	2fc5c <execute+0xb0>
   2fc4e:	b128      	cbz	r0, 2fc5c <execute+0xb0>
			z_shell_fprintf(shell, SHELL_ERROR,
   2fc50:	2102      	movs	r1, #2
   2fc52:	4a81      	ldr	r2, [pc, #516]	; (2fe58 <execute+0x2ac>)
   2fc54:	4620      	mov	r0, r4
   2fc56:	f006 ff6f 	bl	36b38 <z_shell_fprintf>
   2fc5a:	e7f0      	b.n	2fc3e <execute+0x92>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
   2fc5c:	9b05      	ldr	r3, [sp, #20]
   2fc5e:	b34b      	cbz	r3, 2fcb4 <execute+0x108>
		    z_shell_help_request(argvp[0])) {
   2fc60:	6838      	ldr	r0, [r7, #0]
   2fc62:	f001 f909 	bl	30e78 <z_shell_help_request>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
   2fc66:	b198      	cbz	r0, 2fc90 <execute+0xe4>
			if (help_entry.help) {
   2fc68:	b166      	cbz	r6, 2fc84 <execute+0xd8>
				shell->ctx->active_cmd = help_entry;
   2fc6a:	68a5      	ldr	r5, [r4, #8]
   2fc6c:	960d      	str	r6, [sp, #52]	; 0x34
   2fc6e:	3508      	adds	r5, #8
				shell->ctx->active_cmd = *help_entry;
   2fc70:	ae0c      	add	r6, sp, #48	; 0x30
   2fc72:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2fc74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2fc76:	6833      	ldr	r3, [r6, #0]
   2fc78:	602b      	str	r3, [r5, #0]
			shell_internal_help_print(shell);
   2fc7a:	4620      	mov	r0, r4
   2fc7c:	f7ff ff14 	bl	2faa8 <shell_internal_help_print>
			return SHELL_CMD_HELP_PRINTED;
   2fc80:	2501      	movs	r5, #1
   2fc82:	e7de      	b.n	2fc42 <execute+0x96>
			z_shell_fprintf(shell, SHELL_ERROR,
   2fc84:	4a75      	ldr	r2, [pc, #468]	; (2fe5c <execute+0x2b0>)
		z_shell_fprintf(shell, SHELL_ERROR,
   2fc86:	2102      	movs	r1, #2
   2fc88:	4620      	mov	r0, r4
   2fc8a:	f006 ff55 	bl	36b38 <z_shell_fprintf>
		return false;
   2fc8e:	e7d6      	b.n	2fc3e <execute+0x92>
		if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && (cmd_lvl > 0)) {
   2fc90:	9b05      	ldr	r3, [sp, #20]
   2fc92:	b17b      	cbz	r3, 2fcb4 <execute+0x108>
			status = z_shell_wildcard_process(shell, entry,
   2fc94:	4629      	mov	r1, r5
   2fc96:	4620      	mov	r0, r4
   2fc98:	683a      	ldr	r2, [r7, #0]
   2fc9a:	f001 fa41 	bl	31120 <z_shell_wildcard_process>
			if (status == SHELL_WILDCARD_CMD_NO_MATCH_FOUND) {
   2fc9e:	2802      	cmp	r0, #2
   2fca0:	f000 808f 	beq.w	2fdc2 <execute+0x216>
			if (status != SHELL_WILDCARD_NOT_FOUND) {
   2fca4:	2803      	cmp	r0, #3
   2fca6:	d005      	beq.n	2fcb4 <execute+0x108>
				++cmd_lvl;
   2fca8:	9b05      	ldr	r3, [sp, #20]
   2fcaa:	3301      	adds	r3, #1
   2fcac:	9305      	str	r3, [sp, #20]
				wildcard_found = true;
   2fcae:	2301      	movs	r3, #1
   2fcb0:	9302      	str	r3, [sp, #8]
				continue;
   2fcb2:	e7aa      	b.n	2fc0a <execute+0x5e>
		if (has_last_handler == false) {
   2fcb4:	f1ba 0f00 	cmp.w	sl, #0
   2fcb8:	d105      	bne.n	2fcc6 <execute+0x11a>
			entry = z_shell_find_cmd(parent, argvp[0], &dloc);
   2fcba:	4658      	mov	r0, fp
   2fcbc:	6839      	ldr	r1, [r7, #0]
   2fcbe:	aa07      	add	r2, sp, #28
   2fcc0:	f006 fd53 	bl	3676a <z_shell_find_cmd>
   2fcc4:	4605      	mov	r5, r0
		argvp++;
   2fcc6:	3704      	adds	r7, #4
		args_left--;
   2fcc8:	f108 38ff 	add.w	r8, r8, #4294967295
		if (entry) {
   2fccc:	2d00      	cmp	r5, #0
   2fcce:	d041      	beq.n	2fd54 <execute+0x1a8>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && found && entry->handler) {
   2fcd0:	9b02      	ldr	r3, [sp, #8]
   2fcd2:	b14b      	cbz	r3, 2fce8 <execute+0x13c>
   2fcd4:	68eb      	ldr	r3, [r5, #12]
   2fcd6:	b13b      	cbz	r3, 2fce8 <execute+0x13c>
		z_shell_op_cursor_end_move(shell);
   2fcd8:	4620      	mov	r0, r4
   2fcda:	f006 fe8c 	bl	369f6 <z_shell_op_cursor_end_move>
		z_shell_op_cond_next_line(shell);
   2fcde:	4620      	mov	r0, r4
   2fce0:	f000 fd90 	bl	30804 <z_shell_op_cond_next_line>
		z_shell_fprintf(shell, SHELL_ERROR,
   2fce4:	4a5e      	ldr	r2, [pc, #376]	; (2fe60 <execute+0x2b4>)
   2fce6:	e7ce      	b.n	2fc86 <execute+0xda>
	if (entry->handler) {
   2fce8:	68eb      	ldr	r3, [r5, #12]
   2fcea:	b1cb      	cbz	r3, 2fd20 <execute+0x174>
		*active_cmd = *entry;
   2fcec:	46ae      	mov	lr, r5
   2fcee:	68a3      	ldr	r3, [r4, #8]
   2fcf0:	f8dd 9014 	ldr.w	r9, [sp, #20]
   2fcf4:	f103 0c08 	add.w	ip, r3, #8
   2fcf8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   2fcfc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   2fd00:	f8de 3000 	ldr.w	r3, [lr]
   2fd04:	f8cc 3000 	str.w	r3, [ip]
		if ((entry->subcmd == NULL)
   2fd08:	68ab      	ldr	r3, [r5, #8]
   2fd0a:	b94b      	cbnz	r3, 2fd20 <execute+0x174>
		    && entry->args.optional == SHELL_OPT_ARG_RAW) {
   2fd0c:	7c6b      	ldrb	r3, [r5, #17]
   2fd0e:	2bfe      	cmp	r3, #254	; 0xfe
			*args_left = entry->args.mandatory - 1;
   2fd10:	bf01      	itttt	eq
   2fd12:	f895 8010 	ldrbeq.w	r8, [r5, #16]
			*lvl = *lvl + 1;
   2fd16:	f109 0301 	addeq.w	r3, r9, #1
			*args_left = entry->args.mandatory - 1;
   2fd1a:	f108 38ff 	addeq.w	r8, r8, #4294967295
			*lvl = *lvl + 1;
   2fd1e:	9305      	streq	r3, [sp, #20]
	if (entry->help) {
   2fd20:	f8d5 c004 	ldr.w	ip, [r5, #4]
   2fd24:	f1bc 0f00 	cmp.w	ip, #0
   2fd28:	d008      	beq.n	2fd3c <execute+0x190>
		*help_entry = *entry;
   2fd2a:	46ae      	mov	lr, r5
   2fd2c:	ae0c      	add	r6, sp, #48	; 0x30
   2fd2e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   2fd32:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   2fd34:	f8de 3000 	ldr.w	r3, [lr]
   2fd38:	6033      	str	r3, [r6, #0]
   2fd3a:	4666      	mov	r6, ip
   2fd3c:	46ab      	mov	fp, r5
		if (args_left || (argc == 2)) {
   2fd3e:	f1b8 0f00 	cmp.w	r8, #0
   2fd42:	d103      	bne.n	2fd4c <execute+0x1a0>
   2fd44:	9b06      	ldr	r3, [sp, #24]
   2fd46:	2b02      	cmp	r3, #2
   2fd48:	f47f af5f 	bne.w	2fc0a <execute+0x5e>
			cmd_lvl++;
   2fd4c:	9b05      	ldr	r3, [sp, #20]
   2fd4e:	3301      	adds	r3, #1
   2fd50:	9305      	str	r3, [sp, #20]
   2fd52:	e75a      	b.n	2fc0a <execute+0x5e>
			if (cmd_lvl == 0 &&
   2fd54:	9b05      	ldr	r3, [sp, #20]
   2fd56:	b963      	cbnz	r3, 2fd72 <execute+0x1c6>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
}

static inline bool z_shell_in_select_mode(const struct shell *shell)
{
	return shell->ctx->selected_cmd == NULL ? false : true;
   2fd58:	68a3      	ldr	r3, [r4, #8]
   2fd5a:	69db      	ldr	r3, [r3, #28]
   2fd5c:	b10b      	cbz	r3, 2fd62 <execute+0x1b6>
				(!z_shell_in_select_mode(shell) ||
   2fd5e:	68db      	ldr	r3, [r3, #12]
   2fd60:	b93b      	cbnz	r3, 2fd72 <execute+0x1c6>
				z_shell_fprintf(shell, SHELL_ERROR,
   2fd62:	4b40      	ldr	r3, [pc, #256]	; (2fe64 <execute+0x2b8>)
   2fd64:	2102      	movs	r1, #2
   2fd66:	9300      	str	r3, [sp, #0]
   2fd68:	4620      	mov	r0, r4
   2fd6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2fd6c:	4a3e      	ldr	r2, [pc, #248]	; (2fe68 <execute+0x2bc>)
   2fd6e:	f006 fee3 	bl	36b38 <z_shell_fprintf>
			has_last_handler = true;
   2fd72:	f04f 0a01 	mov.w	sl, #1
   2fd76:	e7e2      	b.n	2fd3e <execute+0x192>
		&& args_left > 0) {
   2fd78:	f1b8 0f00 	cmp.w	r8, #0
   2fd7c:	f47f af54 	bne.w	2fc28 <execute+0x7c>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && wildcard_found) {
   2fd80:	9b02      	ldr	r3, [sp, #8]
   2fd82:	b14b      	cbz	r3, 2fd98 <execute+0x1ec>
		z_shell_wildcard_finalize(shell);
   2fd84:	4620      	mov	r0, r4
   2fd86:	f007 fa38 	bl	371fa <z_shell_wildcard_finalize>
					shell->ctx->cmd_buff,
   2fd8a:	68a2      	ldr	r2, [r4, #8]
		(void)z_shell_make_argv(&cmd_lvl,
   2fd8c:	230c      	movs	r3, #12
   2fd8e:	323e      	adds	r2, #62	; 0x3e
   2fd90:	a911      	add	r1, sp, #68	; 0x44
   2fd92:	a805      	add	r0, sp, #20
   2fd94:	f006 fbfe 	bl	36594 <z_shell_make_argv>
	argv[cmd_lvl] = NULL;
   2fd98:	2200      	movs	r2, #0
   2fd9a:	9d05      	ldr	r5, [sp, #20]
	if (shell->ctx->active_cmd.handler == NULL) {
   2fd9c:	68a0      	ldr	r0, [r4, #8]
	argv[cmd_lvl] = NULL;
   2fd9e:	ab1e      	add	r3, sp, #120	; 0x78
   2fda0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   2fda4:	f843 2c34 	str.w	r2, [r3, #-52]
	if (shell->ctx->active_cmd.handler == NULL) {
   2fda8:	6943      	ldr	r3, [r0, #20]
   2fdaa:	b973      	cbnz	r3, 2fdca <execute+0x21e>
			if (help_entry->help == NULL) {
   2fdac:	2e00      	cmp	r6, #0
   2fdae:	f43f af46 	beq.w	2fc3e <execute+0x92>
			if (help_entry->help != shell->ctx->active_cmd.help) {
   2fdb2:	68c3      	ldr	r3, [r0, #12]
   2fdb4:	42b3      	cmp	r3, r6
   2fdb6:	f43f af60 	beq.w	2fc7a <execute+0xce>
				shell->ctx->active_cmd = *help_entry;
   2fdba:	960d      	str	r6, [sp, #52]	; 0x34
   2fdbc:	f100 0508 	add.w	r5, r0, #8
   2fdc0:	e756      	b.n	2fc70 <execute+0xc4>
	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
   2fdc2:	9b05      	ldr	r3, [sp, #20]
   2fdc4:	2b0b      	cmp	r3, #11
   2fdc6:	d9db      	bls.n	2fd80 <execute+0x1d4>
   2fdc8:	e727      	b.n	2fc1a <execute+0x6e>
	if (shell->ctx->active_cmd.args.mandatory) {
   2fdca:	7e03      	ldrb	r3, [r0, #24]
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
   2fdcc:	eba5 0509 	sub.w	r5, r5, r9
	if (shell->ctx->active_cmd.args.mandatory) {
   2fdd0:	b1b3      	cbz	r3, 2fe00 <execute+0x254>
				UINT16_MAX : opt8;
   2fdd2:	f64f 71ff 	movw	r1, #65535	; 0xffff
		uint8_t opt8 = shell->ctx->active_cmd.args.optional;
   2fdd6:	7e42      	ldrb	r2, [r0, #25]
				UINT16_MAX : opt8;
   2fdd8:	2aff      	cmp	r2, #255	; 0xff
   2fdda:	bf08      	it	eq
   2fddc:	460a      	moveq	r2, r1
		bool in_range = (argc >= mand) && (argc <= (mand + opt));
   2fdde:	429d      	cmp	r5, r3
   2fde0:	d302      	bcc.n	2fde8 <execute+0x23c>
   2fde2:	4413      	add	r3, r2
	if (!arg_cnt_ok) {
   2fde4:	429d      	cmp	r5, r3
   2fde6:	d90b      	bls.n	2fe00 <execute+0x254>
		z_shell_fprintf(shell, SHELL_ERROR,
   2fde8:	6883      	ldr	r3, [r0, #8]
   2fdea:	2102      	movs	r1, #2
   2fdec:	4620      	mov	r0, r4
   2fdee:	4a1f      	ldr	r2, [pc, #124]	; (2fe6c <execute+0x2c0>)
   2fdf0:	f006 fea2 	bl	36b38 <z_shell_fprintf>
			shell_internal_help_print(shell);
   2fdf4:	4620      	mov	r0, r4
   2fdf6:	f7ff fe57 	bl	2faa8 <shell_internal_help_print>
		return -EINVAL;
   2fdfa:	f06f 0515 	mvn.w	r5, #21
   2fdfe:	e720      	b.n	2fc42 <execute+0x96>
	Z_SHELL_SET_FLAG_ATOMIC(shell, cmd_ctx, val, ret);
   2fe00:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   2fe04:	f500 7017 	add.w	r0, r0, #604	; 0x25c
   2fe08:	f006 fa09 	bl	3621e <atomic_or>
		k_mutex_unlock(&shell->ctx->wr_mtx);
   2fe0c:	68a0      	ldr	r0, [r4, #8]
   2fe0e:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
   2fe12:	f006 fa57 	bl	362c4 <k_mutex_unlock>
		ret_val = shell->ctx->active_cmd.handler(shell, argc,
   2fe16:	68a3      	ldr	r3, [r4, #8]
   2fe18:	aa11      	add	r2, sp, #68	; 0x44
   2fe1a:	4629      	mov	r1, r5
   2fe1c:	eb02 0289 	add.w	r2, r2, r9, lsl #2
   2fe20:	4620      	mov	r0, r4
   2fe22:	695b      	ldr	r3, [r3, #20]
   2fe24:	4798      	blx	r3
   2fe26:	4605      	mov	r5, r0
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   2fe28:	68a0      	ldr	r0, [r4, #8]
   2fe2a:	f04f 32ff 	mov.w	r2, #4294967295
   2fe2e:	f04f 33ff 	mov.w	r3, #4294967295
   2fe32:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
   2fe36:	f006 fac4 	bl	363c2 <k_mutex_lock.constprop.0>
   2fe3a:	68a0      	ldr	r0, [r4, #8]
   2fe3c:	f46f 3180 	mvn.w	r1, #65536	; 0x10000
   2fe40:	f500 7017 	add.w	r0, r0, #604	; 0x25c
   2fe44:	f006 f9f6 	bl	36234 <atomic_and>
	return ret;
   2fe48:	e6fb      	b.n	2fc42 <execute+0x96>
   2fe4a:	bf00      	nop
   2fe4c:	0003ba4d 	.word	0x0003ba4d
   2fe50:	0003bde3 	.word	0x0003bde3
   2fe54:	0003bba7 	.word	0x0003bba7
   2fe58:	0003bd6e 	.word	0x0003bd6e
   2fe5c:	0003bd82 	.word	0x0003bd82
   2fe60:	0003bda0 	.word	0x0003bda0
   2fe64:	0003bdcf 	.word	0x0003bdcf
   2fe68:	0003c095 	.word	0x0003c095
   2fe6c:	0003be07 	.word	0x0003be07

0002fe70 <shell_process>:

	return 0;
}

void shell_process(const struct shell *shell)
{
   2fe70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fe74:	4604      	mov	r4, r0
	Z_SHELL_SET_FLAG_ATOMIC(shell, processing, val, ret);
   2fe76:	6880      	ldr	r0, [r0, #8]
   2fe78:	2110      	movs	r1, #16
   2fe7a:	b0ab      	sub	sp, #172	; 0xac
   2fe7c:	f500 7017 	add.w	r0, r0, #604	; 0x25c
   2fe80:	f006 f9cd 	bl	3621e <atomic_or>
	__ASSERT_NO_MSG(shell->ctx);

	/* atomically set the processing flag */
	z_flag_processing_set(shell, true);

	switch (shell->ctx->state) {
   2fe84:	68a3      	ldr	r3, [r4, #8]
   2fe86:	791b      	ldrb	r3, [r3, #4]
   2fe88:	2b02      	cmp	r3, #2
   2fe8a:	f040 830a 	bne.w	304a2 <CONFIG_FLASH_LOAD_SIZE+0x4a2>
	size_t count = 0;
   2fe8e:	2300      	movs	r3, #0
   2fe90:	930b      	str	r3, [sp, #44]	; 0x2c
		(void)shell->iface->api->read(shell->iface, &data,
   2fe92:	6860      	ldr	r0, [r4, #4]
   2fe94:	2201      	movs	r2, #1
   2fe96:	6803      	ldr	r3, [r0, #0]
   2fe98:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
   2fe9c:	691d      	ldr	r5, [r3, #16]
   2fe9e:	ab0b      	add	r3, sp, #44	; 0x2c
   2fea0:	47a8      	blx	r5
		if (count == 0) {
   2fea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2fea4:	2b00      	cmp	r3, #0
   2fea6:	f000 82fc 	beq.w	304a2 <CONFIG_FLASH_LOAD_SIZE+0x4a2>
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
   2feaa:	f99d 202b 	ldrsb.w	r2, [sp, #43]	; 0x2b
		if (ascii_filter(data) != 0) {
   2feae:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
   2feb2:	2a00      	cmp	r2, #0
   2feb4:	dbed      	blt.n	2fe92 <shell_process+0x22>
		switch (shell->ctx->receive_state) {
   2feb6:	68a0      	ldr	r0, [r4, #8]
   2feb8:	7941      	ldrb	r1, [r0, #5]
   2feba:	2901      	cmp	r1, #1
   2febc:	f000 8273 	beq.w	303a6 <CONFIG_FLASH_LOAD_SIZE+0x3a6>
   2fec0:	2902      	cmp	r1, #2
   2fec2:	f000 8286 	beq.w	303d2 <CONFIG_FLASH_LOAD_SIZE+0x3d2>
   2fec6:	2900      	cmp	r1, #0
   2fec8:	f040 82e9 	bne.w	3049e <CONFIG_FLASH_LOAD_SIZE+0x49e>
	if ((data != '\r') && (data != '\n')) {
   2fecc:	2b0d      	cmp	r3, #13
	shell->ctx->internal.flags.last_nl = val;
   2fece:	f8d0 225c 	ldr.w	r2, [r0, #604]	; 0x25c
   2fed2:	d018      	beq.n	2ff06 <shell_process+0x96>
   2fed4:	2b0a      	cmp	r3, #10
   2fed6:	d016      	beq.n	2ff06 <shell_process+0x96>
   2fed8:	f361 220f 	bfi	r2, r1, #8, #8
   2fedc:	f8c0 225c 	str.w	r2, [r0, #604]	; 0x25c
			switch (data) {
   2fee0:	2b09      	cmp	r3, #9
   2fee2:	d04d      	beq.n	2ff80 <shell_process+0x110>
   2fee4:	d834      	bhi.n	2ff50 <shell_process+0xe0>
   2fee6:	2b00      	cmp	r3, #0
   2fee8:	d0d3      	beq.n	2fe92 <shell_process+0x22>
   2feea:	2b08      	cmp	r3, #8
   2feec:	f000 81c9 	beq.w	30282 <CONFIG_FLASH_LOAD_SIZE+0x282>
   2fef0:	f1a3 0220 	sub.w	r2, r3, #32
				if (isprint((int) data)) {
   2fef4:	2a5e      	cmp	r2, #94	; 0x5e
   2fef6:	f200 81d0 	bhi.w	3029a <CONFIG_FLASH_LOAD_SIZE+0x29a>
					z_flag_history_exit_set(shell, true);
   2fefa:	2101      	movs	r1, #1
   2fefc:	f006 fa37 	bl	3636e <z_flag_history_exit_set.isra.0>
					z_shell_op_char_insert(shell, data);
   2ff00:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
   2ff04:	e0e8      	b.n	300d8 <CONFIG_FLASH_LOAD_SIZE+0xd8>
	if ((z_flag_last_nl_get(shell) == 0U) ||
   2ff06:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
   2ff0a:	d005      	beq.n	2ff18 <shell_process+0xa8>
	return shell->ctx->internal.flags.last_nl;
   2ff0c:	f8d0 225c 	ldr.w	r2, [r0, #604]	; 0x25c
   2ff10:	f3c2 2207 	ubfx	r2, r2, #8, #8
   2ff14:	4293      	cmp	r3, r2
   2ff16:	d1e3      	bne.n	2fee0 <shell_process+0x70>
	shell->ctx->internal.flags.last_nl = val;
   2ff18:	f8d0 225c 	ldr.w	r2, [r0, #604]	; 0x25c
				if (!shell->ctx->cmd_buff_len) {
   2ff1c:	8f01      	ldrh	r1, [r0, #56]	; 0x38
   2ff1e:	f363 220f 	bfi	r2, r3, #8, #8
   2ff22:	f8c0 225c 	str.w	r2, [r0, #604]	; 0x25c
   2ff26:	b979      	cbnz	r1, 2ff48 <shell_process+0xd8>
	z_flag_history_exit_set(shell, false);
   2ff28:	f006 fa21 	bl	3636e <z_flag_history_exit_set.isra.0>
	z_shell_history_mode_exit(shell->history);
   2ff2c:	68e0      	ldr	r0, [r4, #12]
   2ff2e:	f006 ff46 	bl	36dbe <z_shell_history_mode_exit>
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n");
   2ff32:	49ad      	ldr	r1, [pc, #692]	; (301e8 <CONFIG_FLASH_LOAD_SIZE+0x1e8>)
   2ff34:	6960      	ldr	r0, [r4, #20]
   2ff36:	f006 f9cd 	bl	362d4 <z_shell_raw_fprintf>
	shell->ctx->state = state;
   2ff3a:	2202      	movs	r2, #2
   2ff3c:	68a3      	ldr	r3, [r4, #8]
   2ff3e:	4620      	mov	r0, r4
   2ff40:	711a      	strb	r2, [r3, #4]
	if (state == SHELL_STATE_ACTIVE) {
   2ff42:	f7ff fdc1 	bl	2fac8 <state_set.part.0>
   2ff46:	e7a4      	b.n	2fe92 <shell_process+0x22>
					(void)execute(shell);
   2ff48:	4620      	mov	r0, r4
   2ff4a:	f7ff fe2f 	bl	2fbac <execute>
	shell->ctx->state = state;
   2ff4e:	e7f4      	b.n	2ff3a <shell_process+0xca>
   2ff50:	2b1b      	cmp	r3, #27
   2ff52:	d012      	beq.n	2ff7a <shell_process+0x10a>
   2ff54:	2b7f      	cmp	r3, #127	; 0x7f
   2ff56:	d1cb      	bne.n	2fef0 <shell_process+0x80>
	return shell->ctx->internal.flags.echo == 1;
   2ff58:	f8d0 325c 	ldr.w	r3, [r0, #604]	; 0x25c
				if (z_flag_echo_get(shell)) {
   2ff5c:	075f      	lsls	r7, r3, #29
   2ff5e:	d598      	bpl.n	2fe92 <shell_process+0x22>
					z_flag_history_exit_set(shell, true);
   2ff60:	2101      	movs	r1, #1
   2ff62:	f006 fa04 	bl	3636e <z_flag_history_exit_set.isra.0>
					if (z_flag_mode_delete_get(shell)) {
   2ff66:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.mode_delete == 1;
   2ff68:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
   2ff6c:	065e      	lsls	r6, r3, #25
   2ff6e:	f100 8190 	bmi.w	30292 <CONFIG_FLASH_LOAD_SIZE+0x292>
		z_shell_op_char_delete(shell);
   2ff72:	4620      	mov	r0, r4
   2ff74:	f006 fe21 	bl	36bba <z_shell_op_char_delete>
		break;
   2ff78:	e78b      	b.n	2fe92 <shell_process+0x22>
	shell->ctx->receive_state = state;
   2ff7a:	2301      	movs	r3, #1
   2ff7c:	7143      	strb	r3, [r0, #5]
}
   2ff7e:	e788      	b.n	2fe92 <shell_process+0x22>
	return shell->ctx->internal.flags.echo == 1;
   2ff80:	f8d0 325c 	ldr.w	r3, [r0, #604]	; 0x25c
				if (z_flag_echo_get(shell) &&
   2ff84:	0759      	lsls	r1, r3, #29
   2ff86:	d584      	bpl.n	2fe92 <shell_process+0x22>
					z_flag_history_exit_set(shell, true);
   2ff88:	2101      	movs	r1, #1
   2ff8a:	f006 f9f0 	bl	3636e <z_flag_history_exit_set.isra.0>
	uint16_t compl_space = completion_space_get(shell);
   2ff8e:	68a0      	ldr	r0, [r4, #8]
	if (compl_space == 0U) {
   2ff90:	8f03      	ldrh	r3, [r0, #56]	; 0x38
   2ff92:	2bff      	cmp	r3, #255	; 0xff
   2ff94:	f43f af7d 	beq.w	2fe92 <shell_process+0x22>
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
   2ff98:	2500      	movs	r5, #0
	memcpy(shell->ctx->temp_buff, shell->ctx->cmd_buff,
   2ff9a:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
   2ff9c:	f100 013e 	add.w	r1, r0, #62	; 0x3e
   2ffa0:	f500 709f 	add.w	r0, r0, #318	; 0x13e
   2ffa4:	f007 fb34 	bl	37610 <memcpy>
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
   2ffa8:	68a2      	ldr	r2, [r4, #8]
	(void)z_shell_make_argv(argc, *argv, shell->ctx->temp_buff,
   2ffaa:	a91d      	add	r1, sp, #116	; 0x74
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
   2ffac:	8f53      	ldrh	r3, [r2, #58]	; 0x3a
	(void)z_shell_make_argv(argc, *argv, shell->ctx->temp_buff,
   2ffae:	a80d      	add	r0, sp, #52	; 0x34
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
   2ffb0:	4413      	add	r3, r2
   2ffb2:	f883 513e 	strb.w	r5, [r3, #318]	; 0x13e
	(void)z_shell_make_argv(argc, *argv, shell->ctx->temp_buff,
   2ffb6:	f502 729f 	add.w	r2, r2, #318	; 0x13e
   2ffba:	230c      	movs	r3, #12
   2ffbc:	f006 faea 	bl	36594 <z_shell_make_argv>
	if (*argc > CONFIG_SHELL_ARGC_MAX) {
   2ffc0:	990d      	ldr	r1, [sp, #52]	; 0x34
   2ffc2:	290c      	cmp	r1, #12
   2ffc4:	f63f af65 	bhi.w	2fe92 <shell_process+0x22>
	(*argv)[*argc] = NULL;
   2ffc8:	ab2a      	add	r3, sp, #168	; 0xa8
   2ffca:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   2ffce:	f843 5c34 	str.w	r5, [r3, #-52]
	int space = isspace((int)shell->ctx->cmd_buff[
   2ffd2:	68a3      	ldr	r3, [r4, #8]
						shell->ctx->cmd_buff_pos - 1]);
   2ffd4:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
	int space = isspace((int)shell->ctx->cmd_buff[
   2ffd6:	4413      	add	r3, r2
   2ffd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   2ffdc:	2b20      	cmp	r3, #32
   2ffde:	f000 826a 	beq.w	304b6 <CONFIG_FLASH_LOAD_SIZE+0x4b6>
   2ffe2:	3b09      	subs	r3, #9
   2ffe4:	2b04      	cmp	r3, #4
   2ffe6:	f240 8266 	bls.w	304b6 <CONFIG_FLASH_LOAD_SIZE+0x4b6>
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
   2ffea:	2901      	cmp	r1, #1
   2ffec:	d84f      	bhi.n	3008e <CONFIG_FLASH_LOAD_SIZE+0x8e>
		*complete_arg_idx = Z_SHELL_CMD_ROOT_LVL;
   2ffee:	2500      	movs	r5, #0
   2fff0:	950c      	str	r5, [sp, #48]	; 0x30
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
   2fff2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2fff4:	aa2a      	add	r2, sp, #168	; 0xa8
   2fff6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2fffa:	f853 ac34 	ldr.w	sl, [r3, #-52]
	*cnt = 0;
   2fffe:	2600      	movs	r6, #0
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
   30000:	4650      	mov	r0, sl
   30002:	f006 f961 	bl	362c8 <z_shell_strlen>
	size_t first = 0;
   30006:	46b0      	mov	r8, r6
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
   30008:	4681      	mov	r9, r0
	size_t idx = 0;
   3000a:	4637      	mov	r7, r6
	*longest = 0U;
   3000c:	9604      	str	r6, [sp, #16]
	while ((candidate = z_shell_cmd_get(cmd, idx, &dloc)) != NULL) {
   3000e:	4639      	mov	r1, r7
   30010:	4628      	mov	r0, r5
   30012:	aa18      	add	r2, sp, #96	; 0x60
   30014:	f000 fba8 	bl	30768 <z_shell_cmd_get>
   30018:	4683      	mov	fp, r0
   3001a:	2800      	cmp	r0, #0
   3001c:	d144      	bne.n	300a8 <CONFIG_FLASH_LOAD_SIZE+0xa8>
	if (cnt == 1) {
   3001e:	2e01      	cmp	r6, #1
   30020:	d163      	bne.n	300ea <CONFIG_FLASH_LOAD_SIZE+0xea>
		autocomplete(shell, cmd, argv[arg_idx], first);
   30022:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   30024:	aa2a      	add	r2, sp, #168	; 0xa8
   30026:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	uint16_t arg_len = z_shell_strlen(arg);
   3002a:	f853 0c34 	ldr.w	r0, [r3, #-52]
   3002e:	f006 f94b 	bl	362c8 <z_shell_strlen>
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
   30032:	68a2      	ldr	r2, [r4, #8]
	uint16_t arg_len = z_shell_strlen(arg);
   30034:	4606      	mov	r6, r0
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
   30036:	4641      	mov	r1, r8
   30038:	4628      	mov	r0, r5
   3003a:	3208      	adds	r2, #8
   3003c:	f000 fb94 	bl	30768 <z_shell_cmd_get>
   30040:	4605      	mov	r5, r0
	cmd_len = z_shell_strlen(match->syntax);
   30042:	6800      	ldr	r0, [r0, #0]
   30044:	f006 f940 	bl	362c8 <z_shell_strlen>
	if (cmd_len != arg_len) {
   30048:	4286      	cmp	r6, r0
   3004a:	d006      	beq.n	3005a <CONFIG_FLASH_LOAD_SIZE+0x5a>
		z_shell_op_completion_insert(shell,
   3004c:	6829      	ldr	r1, [r5, #0]
   3004e:	1b82      	subs	r2, r0, r6
   30050:	b292      	uxth	r2, r2
   30052:	4620      	mov	r0, r4
   30054:	4431      	add	r1, r6
   30056:	f006 fdae 	bl	36bb6 <z_shell_op_completion_insert>
	if (!isspace((int) shell->ctx->cmd_buff[
   3005a:	68a0      	ldr	r0, [r4, #8]
					shell->ctx->cmd_buff_pos])) {
   3005c:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
	if (!isspace((int) shell->ctx->cmd_buff[
   3005e:	4403      	add	r3, r0
   30060:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   30064:	2b20      	cmp	r3, #32
   30066:	d03b      	beq.n	300e0 <CONFIG_FLASH_LOAD_SIZE+0xe0>
   30068:	3b09      	subs	r3, #9
   3006a:	2b04      	cmp	r3, #4
   3006c:	d938      	bls.n	300e0 <CONFIG_FLASH_LOAD_SIZE+0xe0>
	return shell->ctx->internal.flags.insert_mode == 1;
   3006e:	f8d0 325c 	ldr.w	r3, [r0, #604]	; 0x25c
		if (z_flag_insert_mode_get(shell)) {
   30072:	07da      	lsls	r2, r3, #31
   30074:	d52f      	bpl.n	300d6 <CONFIG_FLASH_LOAD_SIZE+0xd6>
			z_flag_insert_mode_set(shell, false);
   30076:	2100      	movs	r1, #0
   30078:	f006 f989 	bl	3638e <z_flag_insert_mode_set.isra.0>
			z_shell_op_char_insert(shell, ' ');
   3007c:	2120      	movs	r1, #32
   3007e:	4620      	mov	r0, r4
   30080:	f000 fce4 	bl	30a4c <z_shell_op_char_insert>
			z_flag_insert_mode_set(shell, true);
   30084:	2101      	movs	r1, #1
   30086:	68a0      	ldr	r0, [r4, #8]
				z_flag_insert_mode_set(shell, !status);
   30088:	f006 f981 	bl	3638e <z_flag_insert_mode_set.isra.0>
				break;
   3008c:	e701      	b.n	2fe92 <shell_process+0x22>
	search_argc = space ? *argc : *argc - 1;
   3008e:	3901      	subs	r1, #1
	*cmd = z_shell_get_last_command(selected_cmd_get(shell), search_argc,
   30090:	2000      	movs	r0, #0
   30092:	ab0e      	add	r3, sp, #56	; 0x38
   30094:	9300      	str	r3, [sp, #0]
   30096:	9001      	str	r0, [sp, #4]
   30098:	ab0c      	add	r3, sp, #48	; 0x30
   3009a:	aa1d      	add	r2, sp, #116	; 0x74
   3009c:	f006 fb7c 	bl	36798 <z_shell_get_last_command>
	if ((*cmd == NULL) && (search_argc != 0)) {
   300a0:	4605      	mov	r5, r0
   300a2:	2800      	cmp	r0, #0
   300a4:	d1a5      	bne.n	2fff2 <shell_process+0x182>
   300a6:	e6f4      	b.n	2fe92 <shell_process+0x22>
	return (strncmp(candidate, str, len) == 0) ? true : false;
   300a8:	464a      	mov	r2, r9
   300aa:	4651      	mov	r1, sl
   300ac:	f8db 0000 	ldr.w	r0, [fp]
   300b0:	f007 fa78 	bl	375a4 <strncmp>
		if (is_candidate) {
   300b4:	b968      	cbnz	r0, 300d2 <CONFIG_FLASH_LOAD_SIZE+0xd2>
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
   300b6:	f8db 0000 	ldr.w	r0, [fp]
   300ba:	f007 fa57 	bl	3756c <strlen>
   300be:	9b04      	ldr	r3, [sp, #16]
   300c0:	4283      	cmp	r3, r0
   300c2:	bf38      	it	cc
   300c4:	4603      	movcc	r3, r0
   300c6:	b29b      	uxth	r3, r3
				*first_idx = idx;
   300c8:	2e00      	cmp	r6, #0
   300ca:	bf08      	it	eq
   300cc:	46b8      	moveq	r8, r7
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
   300ce:	9304      	str	r3, [sp, #16]
			(*cnt)++;
   300d0:	3601      	adds	r6, #1
		idx++;
   300d2:	3701      	adds	r7, #1
   300d4:	e79b      	b.n	3000e <CONFIG_FLASH_LOAD_SIZE+0xe>
			z_shell_op_char_insert(shell, ' ');
   300d6:	2120      	movs	r1, #32
					z_shell_op_char_insert(shell, data);
   300d8:	4620      	mov	r0, r4
   300da:	f000 fcb7 	bl	30a4c <z_shell_op_char_insert>
   300de:	e6d8      	b.n	2fe92 <shell_process+0x22>
		z_shell_op_cursor_move(shell, 1);
   300e0:	2101      	movs	r1, #1
   300e2:	4620      	mov	r0, r4
   300e4:	f006 fc23 	bl	3692e <z_shell_op_cursor_move>
   300e8:	e6d3      	b.n	2fe92 <shell_process+0x22>
	} else if (cnt > 1) {
   300ea:	f67f aed2 	bls.w	2fe92 <shell_process+0x22>
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
   300ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   300f0:	aa2a      	add	r2, sp, #168	; 0xa8
   300f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   300f6:	f853 ac34 	ldr.w	sl, [r3, #-52]
	size_t str_len = z_shell_strlen(str);
   300fa:	4650      	mov	r0, sl
   300fc:	f006 f8e4 	bl	362c8 <z_shell_strlen>
		shell->ctx->vt100_ctx.printed_cmd = 0;
   30100:	68a3      	ldr	r3, [r4, #8]
	size_t str_len = z_shell_strlen(str);
   30102:	9006      	str	r0, [sp, #24]
		shell->ctx->vt100_ctx.printed_cmd = 0;
   30104:	f8a3 b030 	strh.w	fp, [r3, #48]	; 0x30
	longest_option += z_shell_strlen(tab);
   30108:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 301ec <CONFIG_FLASH_LOAD_SIZE+0x1ec>
		shell->ctx->vt100_ctx.printed_cmd = 0;
   3010c:	9605      	str	r6, [sp, #20]
   3010e:	f8cd 800c 	str.w	r8, [sp, #12]
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
   30112:	68a2      	ldr	r2, [r4, #8]
   30114:	4628      	mov	r0, r5
   30116:	9903      	ldr	r1, [sp, #12]
   30118:	3208      	adds	r2, #8
   3011a:	f000 fb25 	bl	30768 <z_shell_cmd_get>
		idx++;
   3011e:	9b03      	ldr	r3, [sp, #12]
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
   30120:	4607      	mov	r7, r0
		idx++;
   30122:	3301      	adds	r3, #1
   30124:	9303      	str	r3, [sp, #12]
		if (str && match->syntax &&
   30126:	f1ba 0f00 	cmp.w	sl, #0
   3012a:	d152      	bne.n	301d2 <CONFIG_FLASH_LOAD_SIZE+0x1d2>
		tab_item_print(shell, match->syntax, longest);
   3012c:	683b      	ldr	r3, [r7, #0]
	if (option == NULL) {
   3012e:	2b00      	cmp	r3, #0
   30130:	d15e      	bne.n	301f0 <CONFIG_FLASH_LOAD_SIZE+0x1f0>
		shell->ctx->vt100_ctx.printed_cmd = 0;
   30132:	68a2      	ldr	r2, [r4, #8]
   30134:	8613      	strh	r3, [r2, #48]	; 0x30
	while (cnt) {
   30136:	9b05      	ldr	r3, [sp, #20]
   30138:	3b01      	subs	r3, #1
   3013a:	9305      	str	r3, [sp, #20]
   3013c:	d1e9      	bne.n	30112 <CONFIG_FLASH_LOAD_SIZE+0x112>
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n");
   3013e:	492a      	ldr	r1, [pc, #168]	; (301e8 <CONFIG_FLASH_LOAD_SIZE+0x1e8>)
   30140:	6960      	ldr	r0, [r4, #20]
   30142:	f006 f8c7 	bl	362d4 <z_shell_raw_fprintf>
	z_shell_print_prompt_and_cmd(shell);
   30146:	4620      	mov	r0, r4
   30148:	f000 fcb8 	bl	30abc <z_shell_print_prompt_and_cmd>
		partial_autocomplete(shell, cmd, argv[arg_idx], first, cnt);
   3014c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   3014e:	aa2a      	add	r2, sp, #168	; 0xa8
   30150:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	uint16_t arg_len = z_shell_strlen(arg);
   30154:	f853 0c34 	ldr.w	r0, [r3, #-52]
   30158:	f006 f8b6 	bl	362c8 <z_shell_strlen>
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
   3015c:	4641      	mov	r1, r8
   3015e:	aa13      	add	r2, sp, #76	; 0x4c
	uint16_t arg_len = z_shell_strlen(arg);
   30160:	4607      	mov	r7, r0
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
   30162:	4628      	mov	r0, r5
   30164:	f000 fb00 	bl	30768 <z_shell_cmd_get>
	size_t idx = first + 1;
   30168:	f108 0901 	add.w	r9, r8, #1
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
   3016c:	4680      	mov	r8, r0
	strncpy(shell->ctx->temp_buff, match->syntax,
   3016e:	68a0      	ldr	r0, [r4, #8]
   30170:	f8d8 1000 	ldr.w	r1, [r8]
   30174:	22ff      	movs	r2, #255	; 0xff
   30176:	f500 709f 	add.w	r0, r0, #318	; 0x13e
   3017a:	f007 f9d6 	bl	3752a <strncpy>
	*str = match->syntax;
   3017e:	f8d8 a000 	ldr.w	sl, [r8]
	uint16_t common = UINT16_MAX;
   30182:	f64f 78ff 	movw	r8, #65535	; 0xffff
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
   30186:	4649      	mov	r1, r9
   30188:	4628      	mov	r0, r5
   3018a:	aa18      	add	r2, sp, #96	; 0x60
   3018c:	f109 0b01 	add.w	fp, r9, #1
   30190:	f000 faea 	bl	30768 <z_shell_cmd_get>
		if (match2 == NULL) {
   30194:	2800      	cmp	r0, #0
   30196:	d067      	beq.n	30268 <CONFIG_FLASH_LOAD_SIZE+0x268>
	size_t common = 0;
   30198:	2200      	movs	r2, #0
   3019a:	68a3      	ldr	r3, [r4, #8]
		curr_common = str_common(shell->ctx->temp_buff, match2->syntax,
   3019c:	6800      	ldr	r0, [r0, #0]
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   3019e:	f503 739f 	add.w	r3, r3, #318	; 0x13e
   301a2:	f813 cb01 	ldrb.w	ip, [r3], #1
   301a6:	5c81      	ldrb	r1, [r0, r2]
   301a8:	4561      	cmp	r1, ip
   301aa:	d105      	bne.n	301b8 <CONFIG_FLASH_LOAD_SIZE+0x1b8>
   301ac:	b121      	cbz	r1, 301b8 <CONFIG_FLASH_LOAD_SIZE+0x1b8>
   301ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
		common++;
   301b2:	3201      	adds	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   301b4:	428a      	cmp	r2, r1
   301b6:	d1f4      	bne.n	301a2 <CONFIG_FLASH_LOAD_SIZE+0x1a2>
		if ((arg_len == 0U) || (curr_common >= arg_len)) {
   301b8:	b10f      	cbz	r7, 301be <CONFIG_FLASH_LOAD_SIZE+0x1be>
   301ba:	42ba      	cmp	r2, r7
   301bc:	db07      	blt.n	301ce <CONFIG_FLASH_LOAD_SIZE+0x1ce>
			common = (curr_common < common) ? curr_common : common;
   301be:	4590      	cmp	r8, r2
   301c0:	bfa8      	it	ge
   301c2:	4690      	movge	r8, r2
			--cnt;
   301c4:	3e01      	subs	r6, #1
	while (cnt > 1) {
   301c6:	2e01      	cmp	r6, #1
			common = (curr_common < common) ? curr_common : common;
   301c8:	fa1f f888 	uxth.w	r8, r8
	while (cnt > 1) {
   301cc:	d04c      	beq.n	30268 <CONFIG_FLASH_LOAD_SIZE+0x268>
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
   301ce:	46d9      	mov	r9, fp
   301d0:	e7d9      	b.n	30186 <CONFIG_FLASH_LOAD_SIZE+0x186>
		if (str && match->syntax &&
   301d2:	6800      	ldr	r0, [r0, #0]
   301d4:	2800      	cmp	r0, #0
   301d6:	d0a9      	beq.n	3012c <CONFIG_FLASH_LOAD_SIZE+0x12c>
	return (strncmp(candidate, str, len) == 0) ? true : false;
   301d8:	4651      	mov	r1, sl
   301da:	9a06      	ldr	r2, [sp, #24]
   301dc:	f007 f9e2 	bl	375a4 <strncmp>
		if (str && match->syntax &&
   301e0:	2800      	cmp	r0, #0
   301e2:	d0a3      	beq.n	3012c <CONFIG_FLASH_LOAD_SIZE+0x12c>
   301e4:	e795      	b.n	30112 <CONFIG_FLASH_LOAD_SIZE+0x112>
   301e6:	bf00      	nop
   301e8:	0003ba4d 	.word	0x0003ba4d
   301ec:	0003b5dc 	.word	0x0003b5dc
	longest_option += z_shell_strlen(tab);
   301f0:	4658      	mov	r0, fp
   301f2:	9307      	str	r3, [sp, #28]
   301f4:	f006 f868 	bl	362c8 <z_shell_strlen>
   301f8:	9b04      	ldr	r3, [sp, #16]
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
   301fa:	68a1      	ldr	r1, [r4, #8]
	longest_option += z_shell_strlen(tab);
   301fc:	18c2      	adds	r2, r0, r3
   301fe:	b292      	uxth	r2, r2
			- z_shell_strlen(tab)) / longest_option;
   30200:	4658      	mov	r0, fp
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
   30202:	8d4f      	ldrh	r7, [r1, #42]	; 0x2a
	longest_option += z_shell_strlen(tab);
   30204:	9209      	str	r2, [sp, #36]	; 0x24
			- z_shell_strlen(tab)) / longest_option;
   30206:	f006 f85f 	bl	362c8 <z_shell_strlen>
	diff = longest_option - z_shell_strlen(option);
   3020a:	9b07      	ldr	r3, [sp, #28]
			- z_shell_strlen(tab)) / longest_option;
   3020c:	9008      	str	r0, [sp, #32]
	diff = longest_option - z_shell_strlen(option);
   3020e:	4618      	mov	r0, r3
   30210:	f006 f85a 	bl	362c8 <z_shell_strlen>
			- z_shell_strlen(tab)) / longest_option;
   30214:	9908      	ldr	r1, [sp, #32]
	diff = longest_option - z_shell_strlen(option);
   30216:	9a09      	ldr	r2, [sp, #36]	; 0x24
			- z_shell_strlen(tab)) / longest_option;
   30218:	1a7f      	subs	r7, r7, r1
	diff = longest_option - z_shell_strlen(option);
   3021a:	eba2 0900 	sub.w	r9, r2, r0
			- z_shell_strlen(tab)) / longest_option;
   3021e:	fb97 f2f2 	sdiv	r2, r7, r2
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
   30222:	68a0      	ldr	r0, [r4, #8]
   30224:	b292      	uxth	r2, r2
   30226:	f8b0 c030 	ldrh.w	ip, [r0, #48]	; 0x30
   3022a:	9b07      	ldr	r3, [sp, #28]
   3022c:	fbbc f1f2 	udiv	r1, ip, r2
   30230:	fb02 c211 	mls	r2, r2, r1, ip
   30234:	f10c 0e01 	add.w	lr, ip, #1
   30238:	b292      	uxth	r2, r2
	diff = longest_option - z_shell_strlen(option);
   3023a:	fa1f f989 	uxth.w	r9, r9
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
   3023e:	f8a0 e030 	strh.w	lr, [r0, #48]	; 0x30
   30242:	b95a      	cbnz	r2, 3025c <CONFIG_FLASH_LOAD_SIZE+0x25c>
		z_shell_fprintf(shell, SHELL_OPTION, "\n%s%s", tab, option);
   30244:	9300      	str	r3, [sp, #0]
   30246:	2107      	movs	r1, #7
   30248:	465b      	mov	r3, fp
   3024a:	4620      	mov	r0, r4
   3024c:	4a9c      	ldr	r2, [pc, #624]	; (304c0 <CONFIG_FLASH_LOAD_SIZE+0x4c0>)
   3024e:	f006 fc73 	bl	36b38 <z_shell_fprintf>
	z_shell_op_cursor_horiz_move(shell, diff);
   30252:	4649      	mov	r1, r9
   30254:	4620      	mov	r0, r4
   30256:	f000 fac5 	bl	307e4 <z_shell_op_cursor_horiz_move>
   3025a:	e76c      	b.n	30136 <CONFIG_FLASH_LOAD_SIZE+0x136>
		z_shell_fprintf(shell, SHELL_OPTION, "%s", option);
   3025c:	2107      	movs	r1, #7
   3025e:	4620      	mov	r0, r4
   30260:	4a98      	ldr	r2, [pc, #608]	; (304c4 <CONFIG_FLASH_LOAD_SIZE+0x4c4>)
   30262:	f006 fc69 	bl	36b38 <z_shell_fprintf>
   30266:	e7f4      	b.n	30252 <CONFIG_FLASH_LOAD_SIZE+0x252>
	if (common) {
   30268:	f1b8 0f00 	cmp.w	r8, #0
   3026c:	f43f ae11 	beq.w	2fe92 <shell_process+0x22>
		z_shell_op_completion_insert(shell, &completion[arg_len],
   30270:	eba8 0207 	sub.w	r2, r8, r7
   30274:	4620      	mov	r0, r4
   30276:	b292      	uxth	r2, r2
   30278:	eb0a 0107 	add.w	r1, sl, r7
   3027c:	f006 fc9b 	bl	36bb6 <z_shell_op_completion_insert>
   30280:	e607      	b.n	2fe92 <shell_process+0x22>
	return shell->ctx->internal.flags.echo == 1;
   30282:	f8d0 325c 	ldr.w	r3, [r0, #604]	; 0x25c
				if (z_flag_echo_get(shell)) {
   30286:	075b      	lsls	r3, r3, #29
   30288:	f57f ae03 	bpl.w	2fe92 <shell_process+0x22>
					z_flag_history_exit_set(shell, true);
   3028c:	2101      	movs	r1, #1
   3028e:	f006 f86e 	bl	3636e <z_flag_history_exit_set.isra.0>
						z_shell_op_char_backspace(shell);
   30292:	4620      	mov	r0, r4
   30294:	f006 fcac 	bl	36bf0 <z_shell_op_char_backspace>
   30298:	e5fb      	b.n	2fe92 <shell_process+0x22>
   3029a:	f8d0 225c 	ldr.w	r2, [r0, #604]	; 0x25c
				} else if (z_flag_echo_get(shell)) {
   3029e:	0755      	lsls	r5, r2, #29
   302a0:	f57f adf7 	bpl.w	2fe92 <shell_process+0x22>
	switch (data) {
   302a4:	3b01      	subs	r3, #1
   302a6:	2b16      	cmp	r3, #22
   302a8:	f63f adf3 	bhi.w	2fe92 <shell_process+0x22>
   302ac:	a201      	add	r2, pc, #4	; (adr r2, 302b4 <CONFIG_FLASH_LOAD_SIZE+0x2b4>)
   302ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   302b2:	bf00      	nop
   302b4:	00030471 	.word	0x00030471
   302b8:	00030311 	.word	0x00030311
   302bc:	00030319 	.word	0x00030319
   302c0:	0002ff73 	.word	0x0002ff73
   302c4:	00030465 	.word	0x00030465
   302c8:	00030339 	.word	0x00030339
   302cc:	0002fe93 	.word	0x0002fe93
   302d0:	0002fe93 	.word	0x0002fe93
   302d4:	0002fe93 	.word	0x0002fe93
   302d8:	0002fe93 	.word	0x0002fe93
   302dc:	00030341 	.word	0x00030341
   302e0:	00030349 	.word	0x00030349
   302e4:	0002fe93 	.word	0x0002fe93
   302e8:	00030365 	.word	0x00030365
   302ec:	0002fe93 	.word	0x0002fe93
   302f0:	0003036f 	.word	0x0003036f
   302f4:	0002fe93 	.word	0x0002fe93
   302f8:	0002fe93 	.word	0x0002fe93
   302fc:	0002fe93 	.word	0x0002fe93
   30300:	0002fe93 	.word	0x0002fe93
   30304:	00030373 	.word	0x00030373
   30308:	0002fe93 	.word	0x0002fe93
   3030c:	00030397 	.word	0x00030397
		z_shell_op_left_arrow(shell);
   30310:	4620      	mov	r0, r4
   30312:	f006 fb77 	bl	36a04 <z_shell_op_left_arrow>
		break;
   30316:	e5bc      	b.n	2fe92 <shell_process+0x22>
		z_shell_op_cursor_end_move(shell);
   30318:	4620      	mov	r0, r4
   3031a:	f006 fb6c 	bl	369f6 <z_shell_op_cursor_end_move>
		if (!z_shell_cursor_in_empty_line(shell)) {
   3031e:	4620      	mov	r0, r4
   30320:	f006 faf1 	bl	36906 <z_shell_cursor_in_empty_line>
   30324:	b918      	cbnz	r0, 3032e <CONFIG_FLASH_LOAD_SIZE+0x32e>
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n");
   30326:	4968      	ldr	r1, [pc, #416]	; (304c8 <CONFIG_FLASH_LOAD_SIZE+0x4c8>)
   30328:	6960      	ldr	r0, [r4, #20]
   3032a:	f005 ffd3 	bl	362d4 <z_shell_raw_fprintf>
		z_flag_history_exit_set(shell, true);
   3032e:	2101      	movs	r1, #1
   30330:	68a0      	ldr	r0, [r4, #8]
   30332:	f006 f81c 	bl	3636e <z_flag_history_exit_set.isra.0>
   30336:	e600      	b.n	2ff3a <shell_process+0xca>
		z_shell_op_right_arrow(shell);
   30338:	4620      	mov	r0, r4
   3033a:	f006 fb6b 	bl	36a14 <z_shell_op_right_arrow>
		break;
   3033e:	e5a8      	b.n	2fe92 <shell_process+0x22>
		z_shell_op_delete_from_cursor(shell);
   30340:	4620      	mov	r0, r4
   30342:	f006 fb70 	bl	36a26 <z_shell_op_delete_from_cursor>
		break;
   30346:	e5a4      	b.n	2fe92 <shell_process+0x22>
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
   30348:	6960      	ldr	r0, [r4, #20]
   3034a:	4a60      	ldr	r2, [pc, #384]	; (304cc <CONFIG_FLASH_LOAD_SIZE+0x4cc>)
   3034c:	495d      	ldr	r1, [pc, #372]	; (304c4 <CONFIG_FLASH_LOAD_SIZE+0x4c4>)
   3034e:	f005 ffc1 	bl	362d4 <z_shell_raw_fprintf>
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
   30352:	6960      	ldr	r0, [r4, #20]
   30354:	4a5e      	ldr	r2, [pc, #376]	; (304d0 <CONFIG_FLASH_LOAD_SIZE+0x4d0>)
   30356:	495b      	ldr	r1, [pc, #364]	; (304c4 <CONFIG_FLASH_LOAD_SIZE+0x4c4>)
   30358:	f005 ffbc 	bl	362d4 <z_shell_raw_fprintf>
		z_shell_print_prompt_and_cmd(shell);
   3035c:	4620      	mov	r0, r4
   3035e:	f000 fbad 	bl	30abc <z_shell_print_prompt_and_cmd>
		break;
   30362:	e596      	b.n	2fe92 <shell_process+0x22>
		history_handle(shell, false);
   30364:	2100      	movs	r1, #0
		history_handle(shell, true);
   30366:	4620      	mov	r0, r4
   30368:	f7ff fbd0 	bl	2fb0c <history_handle>
		break;
   3036c:	e591      	b.n	2fe92 <shell_process+0x22>
		history_handle(shell, true);
   3036e:	2101      	movs	r1, #1
   30370:	e7f9      	b.n	30366 <CONFIG_FLASH_LOAD_SIZE+0x366>
		z_shell_op_cursor_home_move(shell);
   30372:	4620      	mov	r0, r4
   30374:	f006 fb39 	bl	369ea <z_shell_op_cursor_home_move>
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
   30378:	2200      	movs	r2, #0
		cmd_buffer_clear(shell);
   3037a:	68a3      	ldr	r3, [r4, #8]
		z_flag_history_exit_set(shell, true);
   3037c:	2101      	movs	r1, #1
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
   3037e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	shell->ctx->cmd_buff_len = 0;
   30382:	639a      	str	r2, [r3, #56]	; 0x38
		z_flag_history_exit_set(shell, true);
   30384:	68a0      	ldr	r0, [r4, #8]
   30386:	f005 fff2 	bl	3636e <z_flag_history_exit_set.isra.0>
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
   3038a:	4a52      	ldr	r2, [pc, #328]	; (304d4 <CONFIG_FLASH_LOAD_SIZE+0x4d4>)
   3038c:	494d      	ldr	r1, [pc, #308]	; (304c4 <CONFIG_FLASH_LOAD_SIZE+0x4c4>)
   3038e:	6960      	ldr	r0, [r4, #20]
   30390:	f005 ffa0 	bl	362d4 <z_shell_raw_fprintf>
}
   30394:	e57d      	b.n	2fe92 <shell_process+0x22>
		z_shell_op_word_remove(shell);
   30396:	4620      	mov	r0, r4
   30398:	f000 fac4 	bl	30924 <z_shell_op_word_remove>
		z_flag_history_exit_set(shell, true);
   3039c:	2101      	movs	r1, #1
   3039e:	68a0      	ldr	r0, [r4, #8]
   303a0:	f005 ffe5 	bl	3636e <z_flag_history_exit_set.isra.0>
		break;
   303a4:	e575      	b.n	2fe92 <shell_process+0x22>
			if (data == '[') {
   303a6:	2b5b      	cmp	r3, #91	; 0x5b
   303a8:	d101      	bne.n	303ae <CONFIG_FLASH_LOAD_SIZE+0x3ae>
	shell->ctx->receive_state = state;
   303aa:	2302      	movs	r3, #2
   303ac:	e5e6      	b.n	2ff7c <shell_process+0x10c>
	return shell->ctx->internal.flags.echo == 1;
   303ae:	f8d0 225c 	ldr.w	r2, [r0, #604]	; 0x25c
			} else if (z_flag_echo_get(shell)) {
   303b2:	0750      	lsls	r0, r2, #29
   303b4:	d509      	bpl.n	303ca <CONFIG_FLASH_LOAD_SIZE+0x3ca>
	if (data == SHELL_VT100_ASCII_ALT_B) {
   303b6:	2b62      	cmp	r3, #98	; 0x62
   303b8:	d105      	bne.n	303c6 <CONFIG_FLASH_LOAD_SIZE+0x3c6>
		z_shell_op_cursor_word_move(shell, -1);
   303ba:	f04f 31ff 	mov.w	r1, #4294967295
		z_shell_op_cursor_word_move(shell, 1);
   303be:	4620      	mov	r0, r4
   303c0:	f006 fad9 	bl	36976 <z_shell_op_cursor_word_move>
   303c4:	e001      	b.n	303ca <CONFIG_FLASH_LOAD_SIZE+0x3ca>
	} else if (data == SHELL_VT100_ASCII_ALT_F) {
   303c6:	2b66      	cmp	r3, #102	; 0x66
   303c8:	d0f9      	beq.n	303be <CONFIG_FLASH_LOAD_SIZE+0x3be>
	shell->ctx->receive_state = state;
   303ca:	2200      	movs	r2, #0
			receive_state_change(shell, SHELL_RECEIVE_DEFAULT);
   303cc:	68a3      	ldr	r3, [r4, #8]
	shell->ctx->receive_state = state;
   303ce:	715a      	strb	r2, [r3, #5]
}
   303d0:	e55f      	b.n	2fe92 <shell_process+0x22>
	shell->ctx->receive_state = state;
   303d2:	2200      	movs	r2, #0
   303d4:	7142      	strb	r2, [r0, #5]
			if (!z_flag_echo_get(shell)) {
   303d6:	68a2      	ldr	r2, [r4, #8]
   303d8:	f8d2 125c 	ldr.w	r1, [r2, #604]	; 0x25c
   303dc:	0749      	lsls	r1, r1, #29
   303de:	f57f ad58 	bpl.w	2fe92 <shell_process+0x22>
			switch (data) {
   303e2:	3b31      	subs	r3, #49	; 0x31
   303e4:	2b1b      	cmp	r3, #27
   303e6:	f63f ad54 	bhi.w	2fe92 <shell_process+0x22>
   303ea:	a101      	add	r1, pc, #4	; (adr r1, 303f0 <CONFIG_FLASH_LOAD_SIZE+0x3f0>)
   303ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   303f0:	0003046d 	.word	0x0003046d
   303f4:	00030479 	.word	0x00030479
   303f8:	0003048d 	.word	0x0003048d
   303fc:	00030461 	.word	0x00030461
   30400:	0002fe93 	.word	0x0002fe93
   30404:	0002fe93 	.word	0x0002fe93
   30408:	0002fe93 	.word	0x0002fe93
   3040c:	0002fe93 	.word	0x0002fe93
   30410:	0002fe93 	.word	0x0002fe93
   30414:	0002fe93 	.word	0x0002fe93
   30418:	0002fe93 	.word	0x0002fe93
   3041c:	0002fe93 	.word	0x0002fe93
   30420:	0002fe93 	.word	0x0002fe93
   30424:	0002fe93 	.word	0x0002fe93
   30428:	0002fe93 	.word	0x0002fe93
   3042c:	0002fe93 	.word	0x0002fe93
   30430:	0003036f 	.word	0x0003036f
   30434:	00030365 	.word	0x00030365
   30438:	00030339 	.word	0x00030339
   3043c:	00030311 	.word	0x00030311
   30440:	0002fe93 	.word	0x0002fe93
   30444:	00030465 	.word	0x00030465
   30448:	0002fe93 	.word	0x0002fe93
   3044c:	00030471 	.word	0x00030471
   30450:	0002fe93 	.word	0x0002fe93
   30454:	0002fe93 	.word	0x0002fe93
   30458:	0002fe93 	.word	0x0002fe93
   3045c:	0003047d 	.word	0x0003047d
	shell->ctx->receive_state = state;
   30460:	2303      	movs	r3, #3
   30462:	7153      	strb	r3, [r2, #5]
		z_shell_op_cursor_end_move(shell);
   30464:	4620      	mov	r0, r4
   30466:	f006 fac6 	bl	369f6 <z_shell_op_cursor_end_move>
		break;
   3046a:	e512      	b.n	2fe92 <shell_process+0x22>
	shell->ctx->receive_state = state;
   3046c:	2303      	movs	r3, #3
   3046e:	7153      	strb	r3, [r2, #5]
		z_shell_op_cursor_home_move(shell);
   30470:	4620      	mov	r0, r4
   30472:	f006 faba 	bl	369ea <z_shell_op_cursor_home_move>
		break;
   30476:	e50c      	b.n	2fe92 <shell_process+0x22>
	shell->ctx->receive_state = state;
   30478:	2303      	movs	r3, #3
   3047a:	7153      	strb	r3, [r2, #5]
				bool status = z_flag_insert_mode_get(shell);
   3047c:	68a0      	ldr	r0, [r4, #8]
	return shell->ctx->internal.flags.insert_mode == 1;
   3047e:	f8d0 125c 	ldr.w	r1, [r0, #604]	; 0x25c
   30482:	f001 0101 	and.w	r1, r1, #1
				z_flag_insert_mode_set(shell, !status);
   30486:	f081 0101 	eor.w	r1, r1, #1
   3048a:	e5fd      	b.n	30088 <CONFIG_FLASH_LOAD_SIZE+0x88>
	shell->ctx->receive_state = state;
   3048c:	2303      	movs	r3, #3
   3048e:	7153      	strb	r3, [r2, #5]
				if (z_flag_echo_get(shell)) {
   30490:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.echo == 1;
   30492:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
   30496:	075b      	lsls	r3, r3, #29
   30498:	f57f acfb 	bpl.w	2fe92 <shell_process+0x22>
   3049c:	e569      	b.n	2ff72 <shell_process+0x102>
	shell->ctx->receive_state = state;
   3049e:	2300      	movs	r3, #0
   304a0:	e56c      	b.n	2ff7c <shell_process+0x10c>
	Z_SHELL_SET_FLAG_ATOMIC(shell, processing, val, ret);
   304a2:	68a0      	ldr	r0, [r4, #8]
   304a4:	f06f 0110 	mvn.w	r1, #16
   304a8:	f500 7017 	add.w	r0, r0, #604	; 0x25c
   304ac:	f005 fec2 	bl	36234 <atomic_and>
		break;
	}

	/* atomically clear the processing flag */
	z_flag_processing_set(shell, false);
}
   304b0:	b02b      	add	sp, #172	; 0xac
   304b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
   304b6:	2900      	cmp	r1, #0
   304b8:	f43f ad99 	beq.w	2ffee <shell_process+0x17e>
   304bc:	e5e8      	b.n	30090 <CONFIG_FLASH_LOAD_SIZE+0x90>
   304be:	bf00      	nop
   304c0:	0003be22 	.word	0x0003be22
   304c4:	0003bb9b 	.word	0x0003bb9b
   304c8:	0003ba4d 	.word	0x0003ba4d
   304cc:	0003bffd 	.word	0x0003bffd
   304d0:	0003c001 	.word	0x0003c001
   304d4:	0003bff9 	.word	0x0003bff9

000304d8 <shell_init>:
{
   304d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   304dc:	4604      	mov	r4, r0
	if (shell->ctx->tid) {
   304de:	6880      	ldr	r0, [r0, #8]
{
   304e0:	460f      	mov	r7, r1
	if (shell->ctx->tid) {
   304e2:	f8d0 1304 	ldr.w	r1, [r0, #772]	; 0x304
{
   304e6:	461e      	mov	r6, r3
   304e8:	b088      	sub	sp, #32
	if (shell->ctx->tid) {
   304ea:	2900      	cmp	r1, #0
   304ec:	d16d      	bne.n	305ca <shell_init+0xf2>
	memset(shell->ctx, 0, sizeof(*shell->ctx));
   304ee:	f44f 7242 	mov.w	r2, #776	; 0x308
   304f2:	f007 f8b8 	bl	37666 <memset>
	shell->ctx->prompt = shell->default_prompt;
   304f6:	68a3      	ldr	r3, [r4, #8]
   304f8:	6822      	ldr	r2, [r4, #0]
	z_shell_history_init(shell->history);
   304fa:	68e0      	ldr	r0, [r4, #12]
	shell->ctx->prompt = shell->default_prompt;
   304fc:	601a      	str	r2, [r3, #0]
	z_shell_history_init(shell->history);
   304fe:	f006 fd04 	bl	36f0a <z_shell_history_init>
	k_mutex_init(&shell->ctx->wr_mtx);
   30502:	68a0      	ldr	r0, [r4, #8]
   30504:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
	return z_impl_k_mutex_init(mutex);
   30508:	f007 fb8d 	bl	37c26 <z_impl_k_mutex_init>
   3050c:	f44f 7828 	mov.w	r8, #672	; 0x2a0
   30510:	f44f 7518 	mov.w	r5, #608	; 0x260
		k_poll_signal_init(&shell->ctx->signals[i]);
   30514:	68a0      	ldr	r0, [r4, #8]
   30516:	4428      	add	r0, r5
		arch_syscall_invoke1(*(uintptr_t *)&sig, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
   30518:	f007 fe6a 	bl	381f0 <z_impl_k_poll_signal_init>
		k_poll_event_init(&shell->ctx->events[i],
   3051c:	68a0      	ldr	r0, [r4, #8]
   3051e:	2200      	movs	r2, #0
   30520:	1943      	adds	r3, r0, r5
   30522:	2101      	movs	r1, #1
   30524:	4440      	add	r0, r8
   30526:	3510      	adds	r5, #16
   30528:	f007 fe45 	bl	381b6 <k_poll_event_init>
	for (int i = 0; i < SHELL_SIGNALS; i++) {
   3052c:	f5b5 7f28 	cmp.w	r5, #672	; 0x2a0
   30530:	f108 0814 	add.w	r8, r8, #20
   30534:	d1ee      	bne.n	30514 <shell_init+0x3c>
		shell->stats->log_lost_cnt = 0;
   30536:	2500      	movs	r5, #0
   30538:	69a3      	ldr	r3, [r4, #24]
	Z_SHELL_SET_FLAG_ATOMIC(shell, tx_rdy, val, ret);
   3053a:	68a0      	ldr	r0, [r4, #8]
   3053c:	601d      	str	r5, [r3, #0]
   3053e:	2120      	movs	r1, #32
   30540:	f500 7017 	add.w	r0, r0, #604	; 0x25c
   30544:	f005 fe6b 	bl	3621e <atomic_or>
	z_flag_echo_set(shell, IS_ENABLED(CONFIG_SHELL_ECHO_STATUS));
   30548:	2101      	movs	r1, #1
   3054a:	68a0      	ldr	r0, [r4, #8]
   3054c:	f005 fecf 	bl	362ee <z_flag_echo_set.isra.0>
	z_flag_obscure_set(shell, IS_ENABLED(CONFIG_SHELL_START_OBSCURED));
   30550:	4629      	mov	r1, r5
   30552:	68a0      	ldr	r0, [r4, #8]
   30554:	f005 fedb 	bl	3630e <z_flag_obscure_set.isra.0>
	z_flag_mode_delete_set(shell,
   30558:	2101      	movs	r1, #1
   3055a:	68a0      	ldr	r0, [r4, #8]
   3055c:	f005 fee7 	bl	3632e <z_flag_mode_delete_set.isra.0>
	shell->ctx->vt100_ctx.cons.terminal_wid =
   30560:	68a3      	ldr	r3, [r4, #8]
	shell->ctx->vt100_ctx.cons.terminal_hei =
   30562:	4a1b      	ldr	r2, [pc, #108]	; (305d0 <shell_init+0xf8>)
	shell->ctx->vt100_ctx.cons.name_len = z_shell_strlen(shell->ctx->prompt);
   30564:	6818      	ldr	r0, [r3, #0]
	shell->ctx->vt100_ctx.cons.terminal_hei =
   30566:	629a      	str	r2, [r3, #40]	; 0x28
	shell->ctx->vt100_ctx.cons.name_len = z_shell_strlen(shell->ctx->prompt);
   30568:	f005 feae 	bl	362c8 <z_shell_strlen>
   3056c:	68a3      	ldr	r3, [r4, #8]
	z_flag_use_colors_set(shell, IS_ENABLED(CONFIG_SHELL_VT100_COLORS));
   3056e:	2101      	movs	r1, #1
	shell->ctx->vt100_ctx.cons.name_len = z_shell_strlen(shell->ctx->prompt);
   30570:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
	z_flag_use_colors_set(shell, IS_ENABLED(CONFIG_SHELL_VT100_COLORS));
   30574:	68a0      	ldr	r0, [r4, #8]
   30576:	f005 feea 	bl	3634e <z_flag_use_colors_set.isra.0>
	int ret = shell->iface->api->init(shell->iface, p_config,
   3057a:	6860      	ldr	r0, [r4, #4]
   3057c:	4639      	mov	r1, r7
   3057e:	6803      	ldr	r3, [r0, #0]
   30580:	4a14      	ldr	r2, [pc, #80]	; (305d4 <shell_init+0xfc>)
   30582:	681d      	ldr	r5, [r3, #0]
   30584:	4623      	mov	r3, r4
   30586:	47a8      	blx	r5
	if (ret == 0) {
   30588:	4605      	mov	r5, r0
   3058a:	b9d0      	cbnz	r0, 305c2 <shell_init+0xea>
	shell->ctx->state = state;
   3058c:	2201      	movs	r2, #1
   3058e:	68a3      	ldr	r3, [r4, #8]
   30590:	711a      	strb	r2, [r3, #4]
	k_tid_t tid = k_thread_create(shell->thread,
   30592:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   30596:	2200      	movs	r2, #0
   30598:	2300      	movs	r3, #0
   3059a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   3059e:	230e      	movs	r3, #14
   305a0:	9303      	str	r3, [sp, #12]
   305a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   305a4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   305a8:	e9cd 6301 	strd	r6, r3, [sp, #4]
   305ac:	9504      	str	r5, [sp, #16]
   305ae:	4b0a      	ldr	r3, [pc, #40]	; (305d8 <shell_init+0x100>)
   305b0:	9400      	str	r4, [sp, #0]
   305b2:	f003 fad3 	bl	33b5c <z_impl_k_thread_create>
	shell->ctx->tid = tid;
   305b6:	68a3      	ldr	r3, [r4, #8]
	k_thread_name_set(tid, shell->thread_name);
   305b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
	shell->ctx->tid = tid;
   305ba:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
	return z_impl_k_thread_name_set(thread, str);
   305be:	f003 fa23 	bl	33a08 <z_impl_k_thread_name_set>
}
   305c2:	4628      	mov	r0, r5
   305c4:	b008      	add	sp, #32
   305c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EALREADY;
   305ca:	f06f 0577 	mvn.w	r5, #119	; 0x77
   305ce:	e7f8      	b.n	305c2 <shell_init+0xea>
   305d0:	00500018 	.word	0x00500018
   305d4:	000363af 	.word	0x000363af
   305d8:	0003062d 	.word	0x0003062d

000305dc <shell_start>:
{
   305dc:	b510      	push	{r4, lr}
   305de:	4604      	mov	r4, r0
	if (state_get(shell) != SHELL_STATE_INITIALIZED) {
   305e0:	6880      	ldr	r0, [r0, #8]
   305e2:	7903      	ldrb	r3, [r0, #4]
   305e4:	2b01      	cmp	r3, #1
   305e6:	d11c      	bne.n	30622 <shell_start+0x46>
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   305e8:	f04f 32ff 	mov.w	r2, #4294967295
   305ec:	f04f 33ff 	mov.w	r3, #4294967295
   305f0:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
   305f4:	f005 fee5 	bl	363c2 <k_mutex_lock.constprop.0>
		z_shell_vt100_color_set(shell, SHELL_NORMAL);
   305f8:	2100      	movs	r1, #0
   305fa:	4620      	mov	r0, r4
   305fc:	f000 f948 	bl	30890 <z_shell_vt100_color_set>
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n\n");
   30600:	4909      	ldr	r1, [pc, #36]	; (30628 <shell_start+0x4c>)
   30602:	6960      	ldr	r0, [r4, #20]
   30604:	f005 fe66 	bl	362d4 <z_shell_raw_fprintf>
	shell->ctx->state = state;
   30608:	2202      	movs	r2, #2
   3060a:	68a3      	ldr	r3, [r4, #8]
   3060c:	4620      	mov	r0, r4
   3060e:	711a      	strb	r2, [r3, #4]
	if (state == SHELL_STATE_ACTIVE) {
   30610:	f7ff fa5a 	bl	2fac8 <state_set.part.0>
	k_mutex_unlock(&shell->ctx->wr_mtx);
   30614:	68a0      	ldr	r0, [r4, #8]
   30616:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
   3061a:	f005 fe53 	bl	362c4 <k_mutex_unlock>
	return 0;
   3061e:	2000      	movs	r0, #0
}
   30620:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   30622:	f06f 0085 	mvn.w	r0, #133	; 0x85
   30626:	e7fb      	b.n	30620 <shell_start+0x44>
   30628:	0003ba4c 	.word	0x0003ba4c

0003062c <shell_thread>:
{
   3062c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30630:	4604      	mov	r4, r0
	err = shell->iface->api->enable(shell->iface, false);
   30632:	6840      	ldr	r0, [r0, #4]
{
   30634:	460e      	mov	r6, r1
	err = shell->iface->api->enable(shell->iface, false);
   30636:	6803      	ldr	r3, [r0, #0]
   30638:	2100      	movs	r1, #0
   3063a:	689b      	ldr	r3, [r3, #8]
{
   3063c:	4615      	mov	r5, r2
	err = shell->iface->api->enable(shell->iface, false);
   3063e:	4798      	blx	r3
	if (err != 0) {
   30640:	2800      	cmp	r0, #0
   30642:	d14c      	bne.n	306de <shell_thread+0xb2>
	if (IS_ENABLED(CONFIG_SHELL_LOG_BACKEND) && log_backend) {
   30644:	b126      	cbz	r6, 30650 <shell_thread+0x24>
		z_shell_log_backend_enable(shell->log_backend, (void *)shell,
   30646:	462a      	mov	r2, r5
   30648:	4621      	mov	r1, r4
   3064a:	69e0      	ldr	r0, [r4, #28]
   3064c:	f006 fd19 	bl	37082 <z_shell_log_backend_enable>
	err = shell_start(shell);
   30650:	4620      	mov	r0, r4
   30652:	f7ff ffc3 	bl	305dc <shell_start>
	if (err != 0) {
   30656:	2800      	cmp	r0, #0
   30658:	d141      	bne.n	306de <shell_thread+0xb2>
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
   3065a:	f8df 8094 	ldr.w	r8, [pc, #148]	; 306f0 <shell_thread+0xc4>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
   3065e:	4f21      	ldr	r7, [pc, #132]	; (306e4 <shell_thread+0xb8>)
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
   30660:	4e21      	ldr	r6, [pc, #132]	; (306e8 <shell_thread+0xbc>)
		err = k_poll(shell->ctx->events, SHELL_SIGNAL_TXDONE,
   30662:	68a0      	ldr	r0, [r4, #8]
   30664:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
	return z_impl_k_poll(events, num_events, timeout);
   30668:	f04f 32ff 	mov.w	r2, #4294967295
   3066c:	f04f 33ff 	mov.w	r3, #4294967295
   30670:	2103      	movs	r1, #3
   30672:	f004 fa8d 	bl	34b90 <z_impl_k_poll>
		if (err != 0) {
   30676:	4605      	mov	r5, r0
   30678:	68a0      	ldr	r0, [r4, #8]
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   3067a:	f04f 32ff 	mov.w	r2, #4294967295
   3067e:	f04f 33ff 	mov.w	r3, #4294967295
   30682:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
		if (err != 0) {
   30686:	b175      	cbz	r5, 306a6 <shell_thread+0x7a>
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   30688:	f005 fe9b 	bl	363c2 <k_mutex_lock.constprop.0>
			z_shell_fprintf(shell, SHELL_ERROR,
   3068c:	4620      	mov	r0, r4
   3068e:	462b      	mov	r3, r5
   30690:	2102      	movs	r1, #2
   30692:	4a16      	ldr	r2, [pc, #88]	; (306ec <shell_thread+0xc0>)
   30694:	f006 fa50 	bl	36b38 <z_shell_fprintf>
			k_mutex_unlock(&shell->ctx->wr_mtx);
   30698:	68a0      	ldr	r0, [r4, #8]
}
   3069a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_mutex_unlock(&shell->ctx->wr_mtx);
   3069e:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
   306a2:	f005 be0f 	b.w	362c4 <k_mutex_unlock>
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   306a6:	f005 fe8c 	bl	363c2 <k_mutex_lock.constprop.0>
		if (shell->iface->api->update) {
   306aa:	6860      	ldr	r0, [r4, #4]
   306ac:	6803      	ldr	r3, [r0, #0]
   306ae:	695b      	ldr	r3, [r3, #20]
   306b0:	b103      	cbz	r3, 306b4 <shell_thread+0x88>
			shell->iface->api->update(shell->iface);
   306b2:	4798      	blx	r3
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
   306b4:	4642      	mov	r2, r8
   306b6:	4620      	mov	r0, r4
   306b8:	2102      	movs	r1, #2
   306ba:	f005 fdee 	bl	3629a <shell_signal_handle>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
   306be:	463a      	mov	r2, r7
   306c0:	4620      	mov	r0, r4
   306c2:	2100      	movs	r1, #0
   306c4:	f005 fde9 	bl	3629a <shell_signal_handle>
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
   306c8:	4620      	mov	r0, r4
   306ca:	4632      	mov	r2, r6
   306cc:	2101      	movs	r1, #1
   306ce:	f005 fde4 	bl	3629a <shell_signal_handle>
		k_mutex_unlock(&shell->ctx->wr_mtx);
   306d2:	68a0      	ldr	r0, [r4, #8]
   306d4:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
   306d8:	f005 fdf4 	bl	362c4 <k_mutex_unlock>
   306dc:	e7c1      	b.n	30662 <shell_thread+0x36>
}
   306de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   306e2:	bf00      	nop
   306e4:	0002fe71 	.word	0x0002fe71
   306e8:	000363c7 	.word	0x000363c7
   306ec:	0003be28 	.word	0x0003be28
   306f0:	0003624b 	.word	0x0003624b

000306f4 <cmd_help>:

	return (int)z_flag_mode_delete_set(shell, val);
}

static int cmd_help(const struct shell *shell, size_t argc, char **argv)
{
   306f4:	b510      	push	{r4, lr}
   306f6:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

#if defined(CONFIG_SHELL_TAB)
	shell_print(shell, "Please press the <Tab> button to see all available "
   306f8:	2100      	movs	r1, #0
   306fa:	4a0c      	ldr	r2, [pc, #48]	; (3072c <cmd_help+0x38>)
   306fc:	f005 fec0 	bl	36480 <shell_fprintf>
			   "commands.");
#endif

#if defined(CONFIG_SHELL_TAB_AUTOCOMPLETION)
	shell_print(shell,
   30700:	4620      	mov	r0, r4
   30702:	2100      	movs	r1, #0
   30704:	4a0a      	ldr	r2, [pc, #40]	; (30730 <cmd_help+0x3c>)
   30706:	f005 febb 	bl	36480 <shell_fprintf>
		"You can also use the <Tab> button to prompt or auto-complete"
		" all commands or its subcommands.");
#endif

#if defined(CONFIG_SHELL_HELP)
	shell_print(shell,
   3070a:	4620      	mov	r0, r4
   3070c:	2100      	movs	r1, #0
   3070e:	4a09      	ldr	r2, [pc, #36]	; (30734 <cmd_help+0x40>)
   30710:	f005 feb6 	bl	36480 <shell_fprintf>
		"You can try to call commands with <-h> or <--help> parameter"
		" for more information.");
#endif

#if defined(CONFIG_SHELL_METAKEYS)
	shell_print(shell,
   30714:	4620      	mov	r0, r4
   30716:	2100      	movs	r1, #0
   30718:	4a07      	ldr	r2, [pc, #28]	; (30738 <cmd_help+0x44>)
   3071a:	f005 feb1 	bl	36480 <shell_fprintf>
		"Please refer to shell documentation for more details.");
#endif

	if (IS_ENABLED(CONFIG_SHELL_HELP)) {
		/* For NULL argument function will print all root commands */
		z_shell_help_subcmd_print(shell, NULL,
   3071e:	4620      	mov	r0, r4
   30720:	2100      	movs	r1, #0
   30722:	4a06      	ldr	r2, [pc, #24]	; (3073c <cmd_help+0x48>)
   30724:	f000 fb26 	bl	30d74 <z_shell_help_subcmd_print>
			shell_print(shell, "  %s", entry->syntax);
		}
	}

	return 0;
}
   30728:	2000      	movs	r0, #0
   3072a:	bd10      	pop	{r4, pc}
   3072c:	0003be3f 	.word	0x0003be3f
   30730:	0003be7d 	.word	0x0003be7d
   30734:	0003bedc 	.word	0x0003bedc
   30738:	0003bf30 	.word	0x0003bf30
   3073c:	0003bfca 	.word	0x0003bfca

00030740 <z_shell_fprintf_fmt>:
	return 0;
}

void z_shell_fprintf_fmt(const struct shell_fprintf *sh_fprintf,
			 const char *fmt, va_list args)
{
   30740:	b510      	push	{r4, lr}
   30742:	4604      	mov	r4, r0
   30744:	4613      	mov	r3, r2
	(void)cbvprintf(out_func, (void *)sh_fprintf, fmt, args);
   30746:	460a      	mov	r2, r1
   30748:	4601      	mov	r1, r0
   3074a:	4806      	ldr	r0, [pc, #24]	; (30764 <z_shell_fprintf_fmt+0x24>)
   3074c:	f7fd fb42 	bl	2ddd4 <cbvprintf>

	if (sh_fprintf->ctrl_blk->autoflush) {
   30750:	6923      	ldr	r3, [r4, #16]
   30752:	791b      	ldrb	r3, [r3, #4]
   30754:	b123      	cbz	r3, 30760 <z_shell_fprintf_fmt+0x20>
		z_shell_fprintf_buffer_flush(sh_fprintf);
   30756:	4620      	mov	r0, r4
	}
}
   30758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_fprintf_buffer_flush(sh_fprintf);
   3075c:	f005 beb2 	b.w	364c4 <z_shell_fprintf_buffer_flush>
}
   30760:	bd10      	pop	{r4, pc}
   30762:	bf00      	nop
   30764:	000364dd 	.word	0x000364dd

00030768 <z_shell_cmd_get>:

const struct shell_static_entry *z_shell_cmd_get(
					const struct shell_static_entry *parent,
					size_t idx,
					struct shell_static_entry *dloc)
{
   30768:	b510      	push	{r4, lr}
   3076a:	460b      	mov	r3, r1
   3076c:	4614      	mov	r4, r2
	const struct shell_static_entry *res = NULL;

	if (parent == NULL) {
   3076e:	b950      	cbnz	r0, 30786 <z_shell_cmd_get+0x1e>
	return ((uint8_t *)__shell_root_cmds_end -
   30770:	490e      	ldr	r1, [pc, #56]	; (307ac <z_shell_cmd_get+0x44>)
   30772:	4a0f      	ldr	r2, [pc, #60]	; (307b0 <z_shell_cmd_get+0x48>)
   30774:	1a52      	subs	r2, r2, r1
		return  (idx < shell_root_cmd_count()) ?
				shell_root_cmd_get(idx)->u.entry : NULL;
   30776:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
   3077a:	d20f      	bcs.n	3079c <z_shell_cmd_get+0x34>
   3077c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   30780:	684c      	ldr	r4, [r1, #4]
			}
		}
	}

	return res;
}
   30782:	4620      	mov	r0, r4
   30784:	bd10      	pop	{r4, pc}
	if (parent->subcmd) {
   30786:	6881      	ldr	r1, [r0, #8]
   30788:	b141      	cbz	r1, 3079c <z_shell_cmd_get+0x34>
		if (parent->subcmd->is_dynamic) {
   3078a:	684a      	ldr	r2, [r1, #4]
   3078c:	7809      	ldrb	r1, [r1, #0]
   3078e:	b139      	cbz	r1, 307a0 <z_shell_cmd_get+0x38>
			parent->subcmd->u.dynamic_get(idx, dloc);
   30790:	4618      	mov	r0, r3
   30792:	4621      	mov	r1, r4
   30794:	4790      	blx	r2
			if (dloc->syntax != NULL) {
   30796:	6823      	ldr	r3, [r4, #0]
   30798:	2b00      	cmp	r3, #0
   3079a:	d1f2      	bne.n	30782 <z_shell_cmd_get+0x1a>
	const struct shell_static_entry *res = NULL;
   3079c:	2400      	movs	r4, #0
   3079e:	e7f0      	b.n	30782 <z_shell_cmd_get+0x1a>
			if (parent->subcmd->u.entry[idx].syntax != NULL) {
   307a0:	2014      	movs	r0, #20
   307a2:	4343      	muls	r3, r0
   307a4:	18d4      	adds	r4, r2, r3
   307a6:	58d3      	ldr	r3, [r2, r3]
   307a8:	e7f6      	b.n	30798 <z_shell_cmd_get+0x30>
   307aa:	bf00      	nop
   307ac:	000385a8 	.word	0x000385a8
   307b0:	00038630 	.word	0x00038630

000307b4 <z_clear_eos.isra.0>:
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
   307b4:	4a01      	ldr	r2, [pc, #4]	; (307bc <z_clear_eos.isra.0+0x8>)
   307b6:	4902      	ldr	r1, [pc, #8]	; (307c0 <z_clear_eos.isra.0+0xc>)
   307b8:	f006 b884 	b.w	368c4 <z_shell_raw_fprintf>
   307bc:	0003c00d 	.word	0x0003c00d
   307c0:	0003bb9b 	.word	0x0003bb9b

000307c4 <z_shell_op_cursor_vert_move>:
#include <ctype.h>
#include "shell_ops.h"

void z_shell_op_cursor_vert_move(const struct shell *shell, int32_t delta)
{
	if (delta != 0) {
   307c4:	b159      	cbz	r1, 307de <z_shell_op_cursor_vert_move+0x1a>
		z_shell_raw_fprintf(shell->fprintf_ctx, "\033[%d%c",
   307c6:	2900      	cmp	r1, #0
   307c8:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
   307cc:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
   307d0:	bfcc      	ite	gt
   307d2:	2341      	movgt	r3, #65	; 0x41
   307d4:	2342      	movle	r3, #66	; 0x42
   307d6:	4902      	ldr	r1, [pc, #8]	; (307e0 <z_shell_op_cursor_vert_move+0x1c>)
   307d8:	6940      	ldr	r0, [r0, #20]
   307da:	f006 b873 	b.w	368c4 <z_shell_raw_fprintf>
				    delta > 0 ? delta : -delta,
				    delta > 0 ? 'A' : 'B');
	}
}
   307de:	4770      	bx	lr
   307e0:	0003c006 	.word	0x0003c006

000307e4 <z_shell_op_cursor_horiz_move>:

void z_shell_op_cursor_horiz_move(const struct shell *shell, int32_t delta)
{
	if (delta != 0) {
   307e4:	b159      	cbz	r1, 307fe <z_shell_op_cursor_horiz_move+0x1a>
		z_shell_raw_fprintf(shell->fprintf_ctx, "\033[%d%c",
   307e6:	2900      	cmp	r1, #0
   307e8:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
   307ec:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
   307f0:	bfcc      	ite	gt
   307f2:	2343      	movgt	r3, #67	; 0x43
   307f4:	2344      	movle	r3, #68	; 0x44
   307f6:	4902      	ldr	r1, [pc, #8]	; (30800 <z_shell_op_cursor_horiz_move+0x1c>)
   307f8:	6940      	ldr	r0, [r0, #20]
   307fa:	f006 b863 	b.w	368c4 <z_shell_raw_fprintf>
				    delta > 0 ? delta : -delta,
				    delta > 0 ? 'C' : 'D');
	}
}
   307fe:	4770      	bx	lr
   30800:	0003c006 	.word	0x0003c006

00030804 <z_shell_op_cond_next_line>:
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
}

void z_shell_op_cond_next_line(const struct shell *shell)
{
   30804:	b510      	push	{r4, lr}
   30806:	4604      	mov	r4, r0
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
   30808:	f006 f87d 	bl	36906 <z_shell_cursor_in_empty_line>
   3080c:	b128      	cbz	r0, 3081a <z_shell_op_cond_next_line+0x16>
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n");
   3080e:	6960      	ldr	r0, [r4, #20]
   30810:	4905      	ldr	r1, [pc, #20]	; (30828 <z_shell_op_cond_next_line+0x24>)
		z_cursor_next_line_move(shell);
	}
}
   30812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   30816:	f006 b855 	b.w	368c4 <z_shell_raw_fprintf>
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
   3081a:	f104 0008 	add.w	r0, r4, #8
   3081e:	f006 f85e 	bl	368de <full_line_cmd.isra.0>
   30822:	2800      	cmp	r0, #0
   30824:	d1f3      	bne.n	3080e <z_shell_op_cond_next_line+0xa>
}
   30826:	bd10      	pop	{r4, pc}
   30828:	0003ba4d 	.word	0x0003ba4d

0003082c <z_shell_op_cursor_position_synchronize>:

void z_shell_op_cursor_position_synchronize(const struct shell *shell)
{
   3082c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
   30830:	4606      	mov	r6, r0
   30832:	f856 4f08 	ldr.w	r4, [r6, #8]!
{
   30836:	4605      	mov	r5, r0
	bool last_line;

	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   30838:	8f22      	ldrh	r2, [r4, #56]	; 0x38
   3083a:	f104 0020 	add.w	r0, r4, #32
   3083e:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
   30840:	f005 fe92 	bl	36568 <z_shell_multiline_data_calc>
	last_line = (cons->cur_y == cons->cur_y_end);

	/* In case cursor reaches the bottom line of a terminal, it will
	 * be moved to the next line.
	 */
	if (full_line_cmd(shell)) {
   30844:	4630      	mov	r0, r6
	last_line = (cons->cur_y == cons->cur_y_end);
   30846:	f8b4 8024 	ldrh.w	r8, [r4, #36]	; 0x24
   3084a:	8ce7      	ldrh	r7, [r4, #38]	; 0x26
	if (full_line_cmd(shell)) {
   3084c:	f006 f847 	bl	368de <full_line_cmd.isra.0>
   30850:	b118      	cbz	r0, 3085a <z_shell_op_cursor_position_synchronize+0x2e>
   30852:	490a      	ldr	r1, [pc, #40]	; (3087c <z_shell_op_cursor_position_synchronize+0x50>)
   30854:	6968      	ldr	r0, [r5, #20]
   30856:	f006 f835 	bl	368c4 <z_shell_raw_fprintf>
		z_cursor_next_line_move(shell);
	}

	if (last_line) {
   3085a:	45b8      	cmp	r8, r7
   3085c:	d107      	bne.n	3086e <z_shell_op_cursor_position_synchronize+0x42>
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
							       cons->cur_x_end);
	} else {
		z_shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
   3085e:	8c21      	ldrh	r1, [r4, #32]
							       cons->cur_x_end);
   30860:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
   30862:	4628      	mov	r0, r5
	}
}
   30864:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
   30868:	1ac9      	subs	r1, r1, r3
   3086a:	f7ff bfbb 	b.w	307e4 <z_shell_op_cursor_horiz_move>
		z_shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
   3086e:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
   30870:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   30872:	4628      	mov	r0, r5
   30874:	1ac9      	subs	r1, r1, r3
   30876:	f7ff ffa5 	bl	307c4 <z_shell_op_cursor_vert_move>
   3087a:	e7f0      	b.n	3085e <z_shell_op_cursor_position_synchronize+0x32>
   3087c:	0003ba4d 	.word	0x0003ba4d

00030880 <z_shell_print_cmd>:
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
}

void z_shell_print_cmd(const struct shell *shell)
{
	z_shell_raw_fprintf(shell->fprintf_ctx, "%s", shell->ctx->cmd_buff);
   30880:	6882      	ldr	r2, [r0, #8]
   30882:	4902      	ldr	r1, [pc, #8]	; (3088c <z_shell_print_cmd+0xc>)
   30884:	6940      	ldr	r0, [r0, #20]
   30886:	323e      	adds	r2, #62	; 0x3e
   30888:	f006 b81c 	b.w	368c4 <z_shell_raw_fprintf>
   3088c:	0003bb9b 	.word	0x0003bb9b

00030890 <z_shell_vt100_color_set>:

}

void z_shell_vt100_color_set(const struct shell *shell,
			     enum shell_vt100_color color)
{
   30890:	b507      	push	{r0, r1, r2, lr}

	if (shell->ctx->vt100_ctx.col.col == color) {
   30892:	6883      	ldr	r3, [r0, #8]
   30894:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
   30898:	428a      	cmp	r2, r1
   3089a:	d012      	beq.n	308c2 <z_shell_vt100_color_set+0x32>
		return;
	}

	shell->ctx->vt100_ctx.col.col = color;
   3089c:	f883 102e 	strb.w	r1, [r3, #46]	; 0x2e

	if (color != SHELL_NORMAL) {
   308a0:	6940      	ldr	r0, [r0, #20]
   308a2:	b189      	cbz	r1, 308c8 <z_shell_vt100_color_set+0x38>

		uint8_t cmd[] = SHELL_VT100_COLOR(color - 1);
   308a4:	4b09      	ldr	r3, [pc, #36]	; (308cc <z_shell_vt100_color_set+0x3c>)

		z_shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
   308a6:	466a      	mov	r2, sp
		uint8_t cmd[] = SHELL_VT100_COLOR(color - 1);
   308a8:	9300      	str	r3, [sp, #0]
   308aa:	2333      	movs	r3, #51	; 0x33
   308ac:	f88d 3004 	strb.w	r3, [sp, #4]
   308b0:	236d      	movs	r3, #109	; 0x6d
   308b2:	312f      	adds	r1, #47	; 0x2f
   308b4:	f88d 1005 	strb.w	r1, [sp, #5]
   308b8:	f8ad 3006 	strh.w	r3, [sp, #6]
	} else {
		static const uint8_t cmd[] = SHELL_VT100_MODESOFF;

		z_shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
   308bc:	4904      	ldr	r1, [pc, #16]	; (308d0 <z_shell_vt100_color_set+0x40>)
   308be:	f006 f801 	bl	368c4 <z_shell_raw_fprintf>
	}
}
   308c2:	b003      	add	sp, #12
   308c4:	f85d fb04 	ldr.w	pc, [sp], #4
		z_shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
   308c8:	4a02      	ldr	r2, [pc, #8]	; (308d4 <z_shell_vt100_color_set+0x44>)
   308ca:	e7f7      	b.n	308bc <z_shell_vt100_color_set+0x2c>
   308cc:	3b315b1b 	.word	0x3b315b1b
   308d0:	0003bb9b 	.word	0x0003bb9b
   308d4:	0003c017 	.word	0x0003c017

000308d8 <z_shell_vt100_colors_restore>:

void z_shell_vt100_colors_restore(const struct shell *shell,
				       const struct shell_vt100_colors *color)
{
   308d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   308da:	460d      	mov	r5, r1
	z_shell_vt100_color_set(shell, color->col);
   308dc:	7809      	ldrb	r1, [r1, #0]
{
   308de:	4604      	mov	r4, r0
	z_shell_vt100_color_set(shell, color->col);
   308e0:	f7ff ffd6 	bl	30890 <z_shell_vt100_color_set>
	vt100_bgcolor_set(shell, color->bgcol);
   308e4:	786b      	ldrb	r3, [r5, #1]
	if ((bgcolor == SHELL_NORMAL) ||
   308e6:	b1cb      	cbz	r3, 3091c <z_shell_vt100_colors_restore+0x44>
	    (shell->ctx->vt100_ctx.col.bgcol == bgcolor)) {
   308e8:	68a2      	ldr	r2, [r4, #8]
	if ((bgcolor == SHELL_NORMAL) ||
   308ea:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
   308ee:	4299      	cmp	r1, r3
   308f0:	d014      	beq.n	3091c <z_shell_vt100_colors_restore+0x44>
	uint8_t cmd[] = SHELL_VT100_BGCOLOR(bgcolor - 1);
   308f2:	f645 311b 	movw	r1, #23323	; 0x5b1b
   308f6:	f8ad 1000 	strh.w	r1, [sp]
   308fa:	2134      	movs	r1, #52	; 0x34
   308fc:	f88d 1002 	strb.w	r1, [sp, #2]
   30900:	f103 012f 	add.w	r1, r3, #47	; 0x2f
   30904:	f88d 1003 	strb.w	r1, [sp, #3]
   30908:	216d      	movs	r1, #109	; 0x6d
	shell->ctx->vt100_ctx.col.bgcol = bgcolor;
   3090a:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
	uint8_t cmd[] = SHELL_VT100_BGCOLOR(bgcolor - 1);
   3090e:	f8ad 1004 	strh.w	r1, [sp, #4]
	z_shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
   30912:	466a      	mov	r2, sp
   30914:	4902      	ldr	r1, [pc, #8]	; (30920 <z_shell_vt100_colors_restore+0x48>)
   30916:	6960      	ldr	r0, [r4, #20]
   30918:	f005 ffd4 	bl	368c4 <z_shell_raw_fprintf>
}
   3091c:	b003      	add	sp, #12
   3091e:	bd30      	pop	{r4, r5, pc}
   30920:	0003bb9b 	.word	0x0003bb9b

00030924 <z_shell_op_word_remove>:
{
   30924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
   30926:	6883      	ldr	r3, [r0, #8]
{
   30928:	4605      	mov	r5, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
   3092a:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   3092c:	2a00      	cmp	r2, #0
   3092e:	d046      	beq.n	309be <z_shell_op_word_remove+0x9a>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
   30930:	8f58      	ldrh	r0, [r3, #58]	; 0x3a
	if ((shell->ctx->cmd_buff_len == 0) ||
   30932:	2800      	cmp	r0, #0
   30934:	d043      	beq.n	309be <z_shell_op_word_remove+0x9a>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
   30936:	303d      	adds	r0, #61	; 0x3d
   30938:	4418      	add	r0, r3
	char *str_start = &shell->ctx->cmd_buff[0];
   3093a:	f103 063e 	add.w	r6, r3, #62	; 0x3e
   3093e:	4603      	mov	r3, r0
   30940:	1ac4      	subs	r4, r0, r3
	while ((str >= str_start) && (*str == ' ')) {
   30942:	42b3      	cmp	r3, r6
   30944:	4619      	mov	r1, r3
   30946:	b2a4      	uxth	r4, r4
   30948:	d30d      	bcc.n	30966 <z_shell_op_word_remove+0x42>
   3094a:	f811 7901 	ldrb.w	r7, [r1], #-1
   3094e:	2f20      	cmp	r7, #32
   30950:	d033      	beq.n	309ba <z_shell_op_word_remove+0x96>
   30952:	4619      	mov	r1, r3
	while ((str >= str_start) && (*str != ' ')) {
   30954:	7808      	ldrb	r0, [r1, #0]
   30956:	3b01      	subs	r3, #1
   30958:	2820      	cmp	r0, #32
   3095a:	d004      	beq.n	30966 <z_shell_op_word_remove+0x42>
		++chars_to_delete;
   3095c:	3401      	adds	r4, #1
	while ((str >= str_start) && (*str != ' ')) {
   3095e:	429e      	cmp	r6, r3
		--str;
   30960:	4619      	mov	r1, r3
		++chars_to_delete;
   30962:	b2a4      	uxth	r4, r4
	while ((str >= str_start) && (*str != ' ')) {
   30964:	d9f5      	bls.n	30952 <z_shell_op_word_remove+0x2e>
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
   30966:	2700      	movs	r7, #0
	memmove(str + 1, str + 1 + chars_to_delete,
   30968:	1c63      	adds	r3, r4, #1
   3096a:	1c4e      	adds	r6, r1, #1
   3096c:	1b12      	subs	r2, r2, r4
   3096e:	4419      	add	r1, r3
   30970:	4630      	mov	r0, r6
   30972:	f006 fe36 	bl	375e2 <memmove>
	shell->ctx->cmd_buff_len -= chars_to_delete;
   30976:	68a9      	ldr	r1, [r5, #8]
	z_shell_op_cursor_move(shell, -chars_to_delete);
   30978:	4628      	mov	r0, r5
	shell->ctx->cmd_buff_len -= chars_to_delete;
   3097a:	8f0a      	ldrh	r2, [r1, #56]	; 0x38
   3097c:	1b12      	subs	r2, r2, r4
   3097e:	b292      	uxth	r2, r2
   30980:	870a      	strh	r2, [r1, #56]	; 0x38
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
   30982:	440a      	add	r2, r1
	z_shell_op_cursor_move(shell, -chars_to_delete);
   30984:	4261      	negs	r1, r4
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
   30986:	f882 703e 	strb.w	r7, [r2, #62]	; 0x3e
	z_shell_op_cursor_move(shell, -chars_to_delete);
   3098a:	b209      	sxth	r1, r1
   3098c:	f005 ffcf 	bl	3692e <z_shell_op_cursor_move>
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SAVECURSOR);
   30990:	6968      	ldr	r0, [r5, #20]
   30992:	4a0b      	ldr	r2, [pc, #44]	; (309c0 <z_shell_op_word_remove+0x9c>)
   30994:	490b      	ldr	r1, [pc, #44]	; (309c4 <z_shell_op_word_remove+0xa0>)
   30996:	f005 ff95 	bl	368c4 <z_shell_raw_fprintf>
	z_shell_fprintf(shell, SHELL_NORMAL, "%s", str + 1);
   3099a:	4639      	mov	r1, r7
   3099c:	4633      	mov	r3, r6
   3099e:	4628      	mov	r0, r5
   309a0:	4a08      	ldr	r2, [pc, #32]	; (309c4 <z_shell_op_word_remove+0xa0>)
   309a2:	f006 f8c9 	bl	36b38 <z_shell_fprintf>
	z_clear_eos(shell);
   309a6:	6968      	ldr	r0, [r5, #20]
   309a8:	f7ff ff04 	bl	307b4 <z_clear_eos.isra.0>
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_RESTORECURSOR);
   309ac:	6968      	ldr	r0, [r5, #20]
   309ae:	4a06      	ldr	r2, [pc, #24]	; (309c8 <z_shell_op_word_remove+0xa4>)
   309b0:	4904      	ldr	r1, [pc, #16]	; (309c4 <z_shell_op_word_remove+0xa0>)
}
   309b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   309b6:	f005 bf85 	b.w	368c4 <z_shell_raw_fprintf>
   309ba:	460b      	mov	r3, r1
   309bc:	e7c0      	b.n	30940 <z_shell_op_word_remove+0x1c>
   309be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   309c0:	0003c011 	.word	0x0003c011
   309c4:	0003bb9b 	.word	0x0003bb9b
   309c8:	0003c014 	.word	0x0003c014

000309cc <reprint_from_cursor>:
{
   309cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   309d0:	4604      	mov	r4, r0
   309d2:	460d      	mov	r5, r1
	if (data_removed) {
   309d4:	4617      	mov	r7, r2
   309d6:	b112      	cbz	r2, 309de <reprint_from_cursor+0x12>
		z_clear_eos(shell);
   309d8:	6940      	ldr	r0, [r0, #20]
   309da:	f7ff feeb 	bl	307b4 <z_clear_eos.isra.0>
	if (z_flag_obscure_get(shell)) {
   309de:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.obscure == 1;
   309e0:	f8d3 225c 	ldr.w	r2, [r3, #604]	; 0x25c
   309e4:	8f58      	ldrh	r0, [r3, #58]	; 0x3a
   309e6:	f3c2 01c0 	ubfx	r1, r2, #3, #1
   309ea:	303e      	adds	r0, #62	; 0x3e
   309ec:	0712      	lsls	r2, r2, #28
   309ee:	4403      	add	r3, r0
   309f0:	d521      	bpl.n	30a36 <reprint_from_cursor+0x6a>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
   309f2:	4618      	mov	r0, r3
   309f4:	f006 fdba 	bl	3756c <strlen>
   309f8:	4606      	mov	r6, r0
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
   309fa:	f8df 804c 	ldr.w	r8, [pc, #76]	; 30a48 <reprint_from_cursor+0x7c>
		while (len--) {
   309fe:	3e01      	subs	r6, #1
   30a00:	d214      	bcs.n	30a2c <reprint_from_cursor+0x60>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
   30a02:	4620      	mov	r0, r4
   30a04:	f850 3f08 	ldr.w	r3, [r0, #8]!
   30a08:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   30a0a:	875a      	strh	r2, [r3, #58]	; 0x3a
	if (full_line_cmd(shell)) {
   30a0c:	f005 ff67 	bl	368de <full_line_cmd.isra.0>
   30a10:	b128      	cbz	r0, 30a1e <reprint_from_cursor+0x52>
		if (((data_removed) && (diff > 0)) || (!data_removed)) {
   30a12:	b107      	cbz	r7, 30a16 <reprint_from_cursor+0x4a>
   30a14:	b11d      	cbz	r5, 30a1e <reprint_from_cursor+0x52>
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n");
   30a16:	490a      	ldr	r1, [pc, #40]	; (30a40 <reprint_from_cursor+0x74>)
   30a18:	6960      	ldr	r0, [r4, #20]
   30a1a:	f005 ff53 	bl	368c4 <z_shell_raw_fprintf>
	z_shell_op_cursor_move(shell, -diff);
   30a1e:	4269      	negs	r1, r5
   30a20:	4620      	mov	r0, r4
}
   30a22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_shell_op_cursor_move(shell, -diff);
   30a26:	b209      	sxth	r1, r1
   30a28:	f005 bf81 	b.w	3692e <z_shell_op_cursor_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
   30a2c:	4641      	mov	r1, r8
   30a2e:	6960      	ldr	r0, [r4, #20]
   30a30:	f005 ff48 	bl	368c4 <z_shell_raw_fprintf>
   30a34:	e7e3      	b.n	309fe <reprint_from_cursor+0x32>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s",
   30a36:	4620      	mov	r0, r4
   30a38:	4a02      	ldr	r2, [pc, #8]	; (30a44 <reprint_from_cursor+0x78>)
   30a3a:	f006 f87d 	bl	36b38 <z_shell_fprintf>
   30a3e:	e7e0      	b.n	30a02 <reprint_from_cursor+0x36>
   30a40:	0003ba4d 	.word	0x0003ba4d
   30a44:	0003bb9b 	.word	0x0003bb9b
   30a48:	0003c9d5 	.word	0x0003c9d5

00030a4c <z_shell_op_char_insert>:
{
   30a4c:	b513      	push	{r0, r1, r4, lr}
	if (shell->ctx->internal.flags.insert_mode &&
   30a4e:	6883      	ldr	r3, [r0, #8]
{
   30a50:	f88d 1007 	strb.w	r1, [sp, #7]
	if (shell->ctx->internal.flags.insert_mode &&
   30a54:	f8d3 225c 	ldr.w	r2, [r3, #604]	; 0x25c
{
   30a58:	4604      	mov	r4, r0
	if (shell->ctx->internal.flags.insert_mode &&
   30a5a:	07d0      	lsls	r0, r2, #31
   30a5c:	d523      	bpl.n	30aa6 <z_shell_op_char_insert+0x5a>
		(shell->ctx->cmd_buff_len != shell->ctx->cmd_buff_pos)) {
   30a5e:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
	if (shell->ctx->internal.flags.insert_mode &&
   30a60:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   30a62:	428a      	cmp	r2, r1
   30a64:	d01f      	beq.n	30aa6 <z_shell_op_char_insert+0x5a>
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
   30a66:	1c48      	adds	r0, r1, #1
		char_replace(shell, data);
   30a68:	f89d 2007 	ldrb.w	r2, [sp, #7]
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
   30a6c:	8758      	strh	r0, [r3, #58]	; 0x3a
   30a6e:	440b      	add	r3, r1
   30a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	if (!z_flag_echo_get(shell)) {
   30a74:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.echo == 1;
   30a76:	f8d3 125c 	ldr.w	r1, [r3, #604]	; 0x25c
   30a7a:	0749      	lsls	r1, r1, #29
   30a7c:	d511      	bpl.n	30aa2 <z_shell_op_char_insert+0x56>
	return shell->ctx->internal.flags.obscure == 1;
   30a7e:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
   30a82:	6960      	ldr	r0, [r4, #20]
		data = '*';
   30a84:	f013 0f08 	tst.w	r3, #8
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
   30a88:	bf18      	it	ne
   30a8a:	222a      	movne	r2, #42	; 0x2a
   30a8c:	4909      	ldr	r1, [pc, #36]	; (30ab4 <z_shell_op_char_insert+0x68>)
   30a8e:	f005 ff19 	bl	368c4 <z_shell_raw_fprintf>
	if (z_shell_cursor_in_empty_line(shell)) {
   30a92:	4620      	mov	r0, r4
   30a94:	f005 ff37 	bl	36906 <z_shell_cursor_in_empty_line>
   30a98:	b118      	cbz	r0, 30aa2 <z_shell_op_char_insert+0x56>
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n");
   30a9a:	4907      	ldr	r1, [pc, #28]	; (30ab8 <z_shell_op_char_insert+0x6c>)
   30a9c:	6960      	ldr	r0, [r4, #20]
   30a9e:	f005 ff11 	bl	368c4 <z_shell_raw_fprintf>
}
   30aa2:	b002      	add	sp, #8
   30aa4:	bd10      	pop	{r4, pc}
		data_insert(shell, &data, 1);
   30aa6:	2201      	movs	r2, #1
   30aa8:	4620      	mov	r0, r4
   30aaa:	f10d 0107 	add.w	r1, sp, #7
   30aae:	f006 f850 	bl	36b52 <data_insert>
}
   30ab2:	e7f6      	b.n	30aa2 <z_shell_op_char_insert+0x56>
   30ab4:	0003c00a 	.word	0x0003c00a
   30ab8:	0003ba4d 	.word	0x0003ba4d

00030abc <z_shell_print_prompt_and_cmd>:
{
   30abc:	b510      	push	{r4, lr}
   30abe:	4604      	mov	r4, r0
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
   30ac0:	6883      	ldr	r3, [r0, #8]
   30ac2:	2103      	movs	r1, #3
   30ac4:	681b      	ldr	r3, [r3, #0]
   30ac6:	4a08      	ldr	r2, [pc, #32]	; (30ae8 <z_shell_print_prompt_and_cmd+0x2c>)
   30ac8:	f006 f836 	bl	36b38 <z_shell_fprintf>
	if (z_flag_echo_get(shell)) {
   30acc:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.echo == 1;
   30ace:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
   30ad2:	075b      	lsls	r3, r3, #29
   30ad4:	d507      	bpl.n	30ae6 <z_shell_print_prompt_and_cmd+0x2a>
		z_shell_print_cmd(shell);
   30ad6:	4620      	mov	r0, r4
   30ad8:	f7ff fed2 	bl	30880 <z_shell_print_cmd>
		z_shell_op_cursor_position_synchronize(shell);
   30adc:	4620      	mov	r0, r4
}
   30ade:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_op_cursor_position_synchronize(shell);
   30ae2:	f7ff bea3 	b.w	3082c <z_shell_op_cursor_position_synchronize>
}
   30ae6:	bd10      	pop	{r4, pc}
   30ae8:	0003bb9b 	.word	0x0003bb9b

00030aec <enable_shell_uart>:
	.update = update,
#endif /* CONFIG_MCUMGR_SMP_SHELL */
};

static int enable_shell_uart(const struct device *arg)
{
   30aec:	b507      	push	{r0, r1, r2, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   30aee:	4809      	ldr	r0, [pc, #36]	; (30b14 <enable_shell_uart+0x28>)
   30af0:	f002 fd64 	bl	335bc <z_impl_device_get_binding>
	bool log_backend = CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > 0;
	uint32_t level =
		(CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > LOG_LEVEL_DBG) ?
		CONFIG_LOG_MAX_LEVEL : CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL;

	if (dev == NULL) {
   30af4:	4601      	mov	r1, r0
   30af6:	b150      	cbz	r0, 30b0e <enable_shell_uart+0x22>

	if (IS_ENABLED(CONFIG_MCUMGR_SMP_SHELL)) {
		smp_shell_init();
	}

	shell_init(&shell_uart, dev, true, log_backend, level);
   30af8:	2304      	movs	r3, #4
   30afa:	9300      	str	r3, [sp, #0]
   30afc:	2301      	movs	r3, #1
   30afe:	4806      	ldr	r0, [pc, #24]	; (30b18 <enable_shell_uart+0x2c>)
   30b00:	461a      	mov	r2, r3
   30b02:	f7ff fce9 	bl	304d8 <shell_init>

	return 0;
   30b06:	2000      	movs	r0, #0
}
   30b08:	b003      	add	sp, #12
   30b0a:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENODEV;
   30b0e:	f06f 0012 	mvn.w	r0, #18
   30b12:	e7f9      	b.n	30b08 <enable_shell_uart+0x1c>
   30b14:	0003c01b 	.word	0x0003c01b
   30b18:	00038578 	.word	0x00038578

00030b1c <uart_callback>:
{
   30b1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30b20:	4683      	mov	fp, r0
   30b22:	460d      	mov	r5, r1
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
   30b24:	6883      	ldr	r3, [r0, #8]
   30b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   30b28:	b103      	cbz	r3, 30b2c <uart_callback+0x10>
		return -ENOSYS;
	}
	return api->irq_update(dev);
   30b2a:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
   30b2c:	f8db 3008 	ldr.w	r3, [fp, #8]
   30b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   30b32:	bb83      	cbnz	r3, 30b96 <uart_callback+0x7a>
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
   30b34:	4b39      	ldr	r3, [pc, #228]	; (30c1c <uart_callback+0x100>)
   30b36:	f04f 0900 	mov.w	r9, #0
   30b3a:	4698      	mov	r8, r3
   30b3c:	4e38      	ldr	r6, [pc, #224]	; (30c20 <uart_callback+0x104>)
			LOG_WRN("RX ring buffer full.");
   30b3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 30c24 <uart_callback+0x108>
   30b42:	1b9e      	subs	r6, r3, r6
   30b44:	08b6      	lsrs	r6, r6, #2
   30b46:	01b6      	lsls	r6, r6, #6
   30b48:	f046 0602 	orr.w	r6, r6, #2
		len = ring_buf_put_claim(sh_uart->rx_ringbuf, &data,
   30b4c:	68e8      	ldr	r0, [r5, #12]
   30b4e:	a901      	add	r1, sp, #4
   30b50:	6902      	ldr	r2, [r0, #16]
   30b52:	f004 fdfe 	bl	35752 <ring_buf_put_claim>
		if (len > 0) {
   30b56:	4607      	mov	r7, r0
   30b58:	2800      	cmp	r0, #0
   30b5a:	d042      	beq.n	30be2 <uart_callback+0xc6>
	if (api->fifo_read != NULL) {
   30b5c:	f8db 3008 	ldr.w	r3, [fp, #8]
   30b60:	699c      	ldr	r4, [r3, #24]
   30b62:	b124      	cbz	r4, 30b6e <uart_callback+0x52>
		return api->fifo_read(dev, rx_data, size);
   30b64:	4602      	mov	r2, r0
   30b66:	9901      	ldr	r1, [sp, #4]
   30b68:	4658      	mov	r0, fp
   30b6a:	47a0      	blx	r4
   30b6c:	4604      	mov	r4, r0
				new_data = true;
   30b6e:	2c00      	cmp	r4, #0
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
   30b70:	4621      	mov	r1, r4
   30b72:	68e8      	ldr	r0, [r5, #12]
				new_data = true;
   30b74:	bf18      	it	ne
   30b76:	f04f 0901 	movne.w	r9, #1
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
   30b7a:	f004 fe06 	bl	3578a <ring_buf_put_finish>
	} while (rd_len && (rd_len == len));
   30b7e:	b10c      	cbz	r4, 30b84 <uart_callback+0x68>
   30b80:	42a7      	cmp	r7, r4
   30b82:	d0e3      	beq.n	30b4c <uart_callback+0x30>
	if (new_data) {
   30b84:	f1b9 0f00 	cmp.w	r9, #0
   30b88:	d009      	beq.n	30b9e <uart_callback+0x82>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_RX_RDY,
   30b8a:	682b      	ldr	r3, [r5, #0]
   30b8c:	2000      	movs	r0, #0
   30b8e:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   30b92:	4790      	blx	r2
}
   30b94:	e003      	b.n	30b9e <uart_callback+0x82>
	return api->irq_rx_ready(dev);
   30b96:	4658      	mov	r0, fp
   30b98:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
   30b9a:	2800      	cmp	r0, #0
   30b9c:	d1ca      	bne.n	30b34 <uart_callback+0x18>
	if (api->irq_tx_ready != NULL) {
   30b9e:	f8db 3008 	ldr.w	r3, [fp, #8]
   30ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   30ba4:	b1d3      	cbz	r3, 30bdc <uart_callback+0xc0>
		return api->irq_tx_ready(dev);
   30ba6:	4658      	mov	r0, fp
   30ba8:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
   30baa:	b1b8      	cbz	r0, 30bdc <uart_callback+0xc0>
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (uint8_t **)&data,
   30bac:	68a8      	ldr	r0, [r5, #8]
   30bae:	a901      	add	r1, sp, #4
   30bb0:	6902      	ldr	r2, [r0, #16]
   30bb2:	f004 fe16 	bl	357e2 <ring_buf_get_claim>
	if (len) {
   30bb6:	4604      	mov	r4, r0
   30bb8:	b350      	cbz	r0, 30c10 <uart_callback+0xf4>
	if (api->fifo_fill != NULL) {
   30bba:	f8db 3008 	ldr.w	r3, [fp, #8]
   30bbe:	695b      	ldr	r3, [r3, #20]
   30bc0:	b323      	cbz	r3, 30c0c <uart_callback+0xf0>
		return api->fifo_fill(dev, tx_data, size);
   30bc2:	4602      	mov	r2, r0
   30bc4:	9901      	ldr	r1, [sp, #4]
   30bc6:	4658      	mov	r0, fp
   30bc8:	4798      	blx	r3
   30bca:	4601      	mov	r1, r0
		err = ring_buf_get_finish(sh_uart->tx_ringbuf, len);
   30bcc:	68a8      	ldr	r0, [r5, #8]
   30bce:	f004 fe24 	bl	3581a <ring_buf_get_finish>
	sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
   30bd2:	682b      	ldr	r3, [r5, #0]
   30bd4:	2001      	movs	r0, #1
   30bd6:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   30bda:	4790      	blx	r2
}
   30bdc:	b003      	add	sp, #12
   30bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_WRN("RX ring buffer full.");
   30be2:	f8d8 3000 	ldr.w	r3, [r8]
   30be6:	f013 0f06 	tst.w	r3, #6
   30bea:	d003      	beq.n	30bf4 <uart_callback+0xd8>
   30bec:	4631      	mov	r1, r6
   30bee:	4650      	mov	r0, sl
   30bf0:	f005 f81d 	bl	35c2e <log_0>
	if (api->fifo_read != NULL) {
   30bf4:	f8db 3008 	ldr.w	r3, [fp, #8]
   30bf8:	699c      	ldr	r4, [r3, #24]
   30bfa:	2c00      	cmp	r4, #0
   30bfc:	d0c2      	beq.n	30b84 <uart_callback+0x68>
		return api->fifo_read(dev, rx_data, size);
   30bfe:	2201      	movs	r2, #1
   30c00:	4658      	mov	r0, fp
   30c02:	f10d 0103 	add.w	r1, sp, #3
   30c06:	47a0      	blx	r4
   30c08:	4604      	mov	r4, r0
   30c0a:	e7b8      	b.n	30b7e <uart_callback+0x62>
	return 0;
   30c0c:	4619      	mov	r1, r3
   30c0e:	e7dd      	b.n	30bcc <uart_callback+0xb0>
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_TX_DISABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
   30c10:	4658      	mov	r0, fp
   30c12:	f005 fffe 	bl	36c12 <z_impl_uart_irq_tx_disable>
		sh_uart->ctrl_blk->tx_busy = 0;
   30c16:	682b      	ldr	r3, [r5, #0]
   30c18:	60dc      	str	r4, [r3, #12]
   30c1a:	e7da      	b.n	30bd2 <uart_callback+0xb6>
   30c1c:	20008178 	.word	0x20008178
   30c20:	20008154 	.word	0x20008154
   30c24:	0003c022 	.word	0x0003c022

00030c28 <init>:
{
   30c28:	b570      	push	{r4, r5, r6, lr}
   30c2a:	460c      	mov	r4, r1
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
   30c2c:	6846      	ldr	r6, [r0, #4]
 *
 * @param buf Address of ring buffer.
 */
static inline void ring_buf_reset(struct ring_buf *buf)
{
	buf->head = 0;
   30c2e:	2500      	movs	r5, #0
	sh_uart->ctrl_blk->dev = (const struct device *)config;
   30c30:	6831      	ldr	r1, [r6, #0]
	ring_buf_reset(sh_uart->tx_ringbuf);
   30c32:	68b0      	ldr	r0, [r6, #8]
	sh_uart->ctrl_blk->handler = evt_handler;
   30c34:	e9c1 4200 	strd	r4, r2, [r1]
	buf->tail = 0;
	memset(&buf->misc, 0, sizeof(buf->misc));
   30c38:	2208      	movs	r2, #8
	sh_uart->ctrl_blk->context = context;
   30c3a:	608b      	str	r3, [r1, #8]
   30c3c:	4629      	mov	r1, r5
	buf->tail = 0;
   30c3e:	e9c0 5500 	strd	r5, r5, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
   30c42:	4410      	add	r0, r2
   30c44:	f006 fd0f 	bl	37666 <memset>
   30c48:	2208      	movs	r2, #8
	ring_buf_reset(sh_uart->rx_ringbuf);
   30c4a:	68f0      	ldr	r0, [r6, #12]
   30c4c:	4629      	mov	r1, r5
	buf->tail = 0;
   30c4e:	e9c0 5500 	strd	r5, r5, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
   30c52:	4410      	add	r0, r2
   30c54:	f006 fd07 	bl	37666 <memset>
	sh_uart->ctrl_blk->tx_busy = 0;
   30c58:	6833      	ldr	r3, [r6, #0]
   30c5a:	60dd      	str	r5, [r3, #12]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   30c5c:	68a3      	ldr	r3, [r4, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   30c5e:	b12b      	cbz	r3, 30c6c <init+0x44>
   30c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   30c62:	b11b      	cbz	r3, 30c6c <init+0x44>
		api->irq_callback_set(dev, cb, user_data);
   30c64:	4632      	mov	r2, r6
   30c66:	4620      	mov	r0, r4
   30c68:	4904      	ldr	r1, [pc, #16]	; (30c7c <init+0x54>)
   30c6a:	4798      	blx	r3
	if (api->irq_rx_enable != NULL) {
   30c6c:	68a3      	ldr	r3, [r4, #8]
   30c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   30c70:	b10b      	cbz	r3, 30c76 <init+0x4e>
		api->irq_rx_enable(dev);
   30c72:	4620      	mov	r0, r4
   30c74:	4798      	blx	r3
}
   30c76:	2000      	movs	r0, #0
   30c78:	bd70      	pop	{r4, r5, r6, pc}
   30c7a:	bf00      	nop
   30c7c:	00030b1d 	.word	0x00030b1d

00030c80 <formatted_text_print.constprop.0>:
 *   shell		Pointer to shell instance.
 *   p_str		Pointer to string to be printed.
 *   terminal_offset	Requested left margin.
 *   offset_first_line	Add margin to the first printed line.
 */
static void formatted_text_print(const struct shell *shell, const char *str,
   30c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   30c84:	4604      	mov	r4, r0
   30c86:	4690      	mov	r8, r2
				 size_t terminal_offset, bool offset_first_line)
{
	size_t offset = 0;
	size_t length;

	if (str == NULL) {
   30c88:	460e      	mov	r6, r1
   30c8a:	2900      	cmp	r1, #0
   30c8c:	d06e      	beq.n	30d6c <formatted_text_print.constprop.0+0xec>
   30c8e:	2500      	movs	r5, #0
		z_shell_op_cursor_horiz_move(shell, terminal_offset);
	}


	/* Skipping whitespace. */
	while (isspace((int) *(str + offset))) {
   30c90:	5d73      	ldrb	r3, [r6, r5]
   30c92:	2b20      	cmp	r3, #32
   30c94:	d025      	beq.n	30ce2 <formatted_text_print.constprop.0+0x62>
   30c96:	3b09      	subs	r3, #9
   30c98:	2b04      	cmp	r3, #4
   30c9a:	d922      	bls.n	30ce2 <formatted_text_print.constprop.0+0x62>
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n");
   30c9c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 30d70 <formatted_text_print.constprop.0+0xf0>
	return str == NULL ? 0U : (uint16_t)strlen(str);
   30ca0:	4630      	mov	r0, r6
   30ca2:	f006 fc63 	bl	3756c <strlen>
		size_t idx = 0;

		length = z_shell_strlen(str) - offset;

		if (length <=
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
   30ca6:	68a3      	ldr	r3, [r4, #8]
		length = z_shell_strlen(str) - offset;
   30ca8:	b280      	uxth	r0, r0
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
   30caa:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
		length = z_shell_strlen(str) - offset;
   30cac:	1b40      	subs	r0, r0, r5
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
   30cae:	eba1 0308 	sub.w	r3, r1, r8
		if (length <=
   30cb2:	4298      	cmp	r0, r3
   30cb4:	eb06 0a05 	add.w	sl, r6, r5
   30cb8:	d915      	bls.n	30ce6 <formatted_text_print.constprop.0+0x66>
   30cba:	4650      	mov	r0, sl
		size_t idx = 0;
   30cbc:	2700      	movs	r7, #0
		length = shell->ctx->vt100_ctx.cons.terminal_wid
				- terminal_offset;

		while (true) {
			/* Determining line break. */
			if (isspace((int) (*(str + offset + idx)))) {
   30cbe:	f810 2b01 	ldrb.w	r2, [r0], #1
   30cc2:	2a20      	cmp	r2, #32
   30cc4:	d006      	beq.n	30cd4 <formatted_text_print.constprop.0+0x54>
   30cc6:	f1a2 0c09 	sub.w	ip, r2, #9
   30cca:	f1bc 0f04 	cmp.w	ip, #4
   30cce:	d802      	bhi.n	30cd6 <formatted_text_print.constprop.0+0x56>
				length = idx;
				if (*(str + offset + idx) == '\n') {
   30cd0:	2a0a      	cmp	r2, #10
   30cd2:	d031      	beq.n	30d38 <formatted_text_print.constprop.0+0xb8>
   30cd4:	463b      	mov	r3, r7
					break;
				}
			}

			if ((idx + terminal_offset) >=
   30cd6:	eb08 0207 	add.w	r2, r8, r7
   30cda:	4291      	cmp	r1, r2
   30cdc:	d92b      	bls.n	30d36 <formatted_text_print.constprop.0+0xb6>
			    shell->ctx->vt100_ctx.cons.terminal_wid) {
				/* End of line reached. */
				break;
			}

			++idx;
   30cde:	3701      	adds	r7, #1
			if (isspace((int) (*(str + offset + idx)))) {
   30ce0:	e7ed      	b.n	30cbe <formatted_text_print.constprop.0+0x3e>
		++offset;
   30ce2:	3501      	adds	r5, #1
   30ce4:	e7d4      	b.n	30c90 <formatted_text_print.constprop.0+0x10>
   30ce6:	4653      	mov	r3, sl
			for (idx = 0; idx < length; idx++) {
   30ce8:	2700      	movs	r7, #0
   30cea:	42b8      	cmp	r0, r7
   30cec:	d017      	beq.n	30d1e <formatted_text_print.constprop.0+0x9e>
				if (*(str + offset + idx) == '\n') {
   30cee:	f813 2b01 	ldrb.w	r2, [r3], #1
   30cf2:	eb05 0907 	add.w	r9, r5, r7
   30cf6:	2a0a      	cmp	r2, #10
   30cf8:	d11b      	bne.n	30d32 <formatted_text_print.constprop.0+0xb2>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
   30cfa:	6960      	ldr	r0, [r4, #20]
   30cfc:	f005 fbe2 	bl	364c4 <z_shell_fprintf_buffer_flush>
					z_shell_write(shell, str + offset, idx);
   30d00:	463a      	mov	r2, r7
   30d02:	4651      	mov	r1, sl
   30d04:	4620      	mov	r0, r4
   30d06:	f005 feb2 	bl	36a6e <z_shell_write>
   30d0a:	4919      	ldr	r1, [pc, #100]	; (30d70 <formatted_text_print.constprop.0+0xf0>)
   30d0c:	6960      	ldr	r0, [r4, #20]
   30d0e:	f005 ffd8 	bl	36cc2 <z_shell_raw_fprintf>
					z_shell_op_cursor_horiz_move(shell,
   30d12:	4641      	mov	r1, r8
   30d14:	4620      	mov	r0, r4
					offset += idx + 1;
   30d16:	f109 0501 	add.w	r5, r9, #1
					z_shell_op_cursor_horiz_move(shell,
   30d1a:	f7ff fd63 	bl	307e4 <z_shell_op_cursor_horiz_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, str + offset);
   30d1e:	6960      	ldr	r0, [r4, #20]
   30d20:	1971      	adds	r1, r6, r5
   30d22:	f005 ffce 	bl	36cc2 <z_shell_raw_fprintf>
   30d26:	6960      	ldr	r0, [r4, #20]
   30d28:	4911      	ldr	r1, [pc, #68]	; (30d70 <formatted_text_print.constprop.0+0xf0>)
		z_cursor_next_line_move(shell);
		z_shell_op_cursor_horiz_move(shell, terminal_offset);

	}
	z_cursor_next_line_move(shell);
}
   30d2a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   30d2e:	f005 bfc8 	b.w	36cc2 <z_shell_raw_fprintf>
			for (idx = 0; idx < length; idx++) {
   30d32:	3701      	adds	r7, #1
   30d34:	e7d9      	b.n	30cea <formatted_text_print.constprop.0+0x6a>
   30d36:	461f      	mov	r7, r3
   30d38:	6960      	ldr	r0, [r4, #20]
   30d3a:	f005 fbc3 	bl	364c4 <z_shell_fprintf_buffer_flush>
		z_shell_write(shell, str + offset, length);
   30d3e:	463a      	mov	r2, r7
   30d40:	4651      	mov	r1, sl
   30d42:	4620      	mov	r0, r4
   30d44:	f005 fe93 	bl	36a6e <z_shell_write>
		offset += length;
   30d48:	443d      	add	r5, r7
		while (isspace((int) (*(str + offset)))) {
   30d4a:	5d73      	ldrb	r3, [r6, r5]
   30d4c:	2b20      	cmp	r3, #32
   30d4e:	d00b      	beq.n	30d68 <formatted_text_print.constprop.0+0xe8>
   30d50:	3b09      	subs	r3, #9
   30d52:	2b04      	cmp	r3, #4
   30d54:	d908      	bls.n	30d68 <formatted_text_print.constprop.0+0xe8>
   30d56:	4649      	mov	r1, r9
   30d58:	6960      	ldr	r0, [r4, #20]
   30d5a:	f005 ffb2 	bl	36cc2 <z_shell_raw_fprintf>
		z_shell_op_cursor_horiz_move(shell, terminal_offset);
   30d5e:	4641      	mov	r1, r8
   30d60:	4620      	mov	r0, r4
   30d62:	f7ff fd3f 	bl	307e4 <z_shell_op_cursor_horiz_move>
	while (true) {
   30d66:	e79b      	b.n	30ca0 <formatted_text_print.constprop.0+0x20>
			++offset;
   30d68:	3501      	adds	r5, #1
   30d6a:	e7ee      	b.n	30d4a <formatted_text_print.constprop.0+0xca>
}
   30d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   30d70:	0003ba4d 	.word	0x0003ba4d

00030d74 <z_shell_help_subcmd_print>:
 * help string
 */
void z_shell_help_subcmd_print(const struct shell *shell,
			       const struct shell_static_entry *parent,
			       const char *description)
{
   30d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30d78:	460e      	mov	r6, r1
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry dloc;
	uint16_t longest = 0U;
	size_t idx = 0;
   30d7a:	2100      	movs	r1, #0
{
   30d7c:	4604      	mov	r4, r0
   30d7e:	4617      	mov	r7, r2
	uint16_t longest = 0U;
   30d80:	460d      	mov	r5, r1
{
   30d82:	b08d      	sub	sp, #52	; 0x34

	/* Searching for the longest subcommand to print. */
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
   30d84:	4630      	mov	r0, r6
   30d86:	aa07      	add	r2, sp, #28
   30d88:	f101 0801 	add.w	r8, r1, #1
   30d8c:	f7ff fcec 	bl	30768 <z_shell_cmd_get>
   30d90:	4601      	mov	r1, r0
   30d92:	b9b0      	cbnz	r0, 30dc2 <z_shell_help_subcmd_print+0x4e>
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
	}

	/* No help to print */
	if (longest == 0) {
   30d94:	b195      	cbz	r5, 30dbc <z_shell_help_subcmd_print+0x48>
		return;
	}

	if (description != NULL) {
   30d96:	b11f      	cbz	r7, 30da0 <z_shell_help_subcmd_print+0x2c>
		z_shell_fprintf(shell, SHELL_NORMAL, description);
   30d98:	463a      	mov	r2, r7
   30d9a:	4620      	mov	r0, r4
   30d9c:	f005 fecc 	bl	36b38 <z_shell_fprintf>
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
   30da0:	2100      	movs	r1, #0
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
   30da2:	f8df 8080 	ldr.w	r8, [pc, #128]	; 30e24 <z_shell_help_subcmd_print+0xb0>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%-*s%s:", tabulator,
   30da6:	f8df a080 	ldr.w	sl, [pc, #128]	; 30e28 <z_shell_help_subcmd_print+0xb4>
   30daa:	f8df b080 	ldr.w	fp, [pc, #128]	; 30e2c <z_shell_help_subcmd_print+0xb8>
	}

	/* Printing subcommands and help string (if exists). */
	idx = 0;

	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
   30dae:	1c4b      	adds	r3, r1, #1
   30db0:	4630      	mov	r0, r6
   30db2:	aa07      	add	r2, sp, #28
   30db4:	9304      	str	r3, [sp, #16]
   30db6:	f7ff fcd7 	bl	30768 <z_shell_cmd_get>
   30dba:	b960      	cbnz	r0, 30dd6 <z_shell_help_subcmd_print+0x62>
		help_item_print(shell, entry->syntax, longest, entry->help);
	}
}
   30dbc:	b00d      	add	sp, #52	; 0x34
   30dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
   30dc2:	6808      	ldr	r0, [r1, #0]
	return str == NULL ? 0U : (uint16_t)strlen(str);
   30dc4:	b110      	cbz	r0, 30dcc <z_shell_help_subcmd_print+0x58>
   30dc6:	f006 fbd1 	bl	3756c <strlen>
   30dca:	b280      	uxth	r0, r0
   30dcc:	4285      	cmp	r5, r0
   30dce:	bf38      	it	cc
   30dd0:	4605      	movcc	r5, r0
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
   30dd2:	4641      	mov	r1, r8
   30dd4:	e7d6      	b.n	30d84 <z_shell_help_subcmd_print+0x10>
		help_item_print(shell, entry->syntax, longest, entry->help);
   30dd6:	6803      	ldr	r3, [r0, #0]
   30dd8:	f8d0 9004 	ldr.w	r9, [r0, #4]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
   30ddc:	4811      	ldr	r0, [pc, #68]	; (30e24 <z_shell_help_subcmd_print+0xb0>)
		help_item_print(shell, entry->syntax, longest, entry->help);
   30dde:	9305      	str	r3, [sp, #20]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
   30de0:	f006 fbc4 	bl	3756c <strlen>
	if ((item_name == NULL) || (item_name[0] == '\0')) {
   30de4:	9b05      	ldr	r3, [sp, #20]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
   30de6:	4607      	mov	r7, r0
	if ((item_name == NULL) || (item_name[0] == '\0')) {
   30de8:	b18b      	cbz	r3, 30e0e <z_shell_help_subcmd_print+0x9a>
   30dea:	781a      	ldrb	r2, [r3, #0]
   30dec:	b17a      	cbz	r2, 30e0e <z_shell_help_subcmd_print+0x9a>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%-*s%s:", tabulator,
   30dee:	e9cd 3801 	strd	r3, r8, [sp, #4]
   30df2:	4652      	mov	r2, sl
   30df4:	4643      	mov	r3, r8
   30df6:	2100      	movs	r1, #0
   30df8:	4620      	mov	r0, r4
   30dfa:	9500      	str	r5, [sp, #0]
   30dfc:	f005 fe9c 	bl	36b38 <z_shell_fprintf>
	if (item_help == NULL) {
   30e00:	f1b9 0f00 	cmp.w	r9, #0
   30e04:	d105      	bne.n	30e12 <z_shell_help_subcmd_print+0x9e>
   30e06:	4659      	mov	r1, fp
   30e08:	6960      	ldr	r0, [r4, #20]
   30e0a:	f005 ff5a 	bl	36cc2 <z_shell_raw_fprintf>
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
   30e0e:	9904      	ldr	r1, [sp, #16]
   30e10:	e7cd      	b.n	30dae <z_shell_help_subcmd_print+0x3a>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
   30e12:	1c6a      	adds	r2, r5, #1
   30e14:	eb02 0247 	add.w	r2, r2, r7, lsl #1
	formatted_text_print(shell, item_help, offset, false);
   30e18:	4649      	mov	r1, r9
   30e1a:	4620      	mov	r0, r4
   30e1c:	b292      	uxth	r2, r2
   30e1e:	f7ff ff2f 	bl	30c80 <formatted_text_print.constprop.0>
   30e22:	e7f4      	b.n	30e0e <z_shell_help_subcmd_print+0x9a>
   30e24:	0003c07c 	.word	0x0003c07c
   30e28:	0003c064 	.word	0x0003c064
   30e2c:	0003ba4d 	.word	0x0003ba4d

00030e30 <z_shell_help_cmd_print>:

void z_shell_help_cmd_print(const struct shell *shell,
			    const struct shell_static_entry *cmd)
{
   30e30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   30e32:	4606      	mov	r6, r0
	static const char cmd_sep[] = " - "; /* commands separator */
	uint16_t field_width;

	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
   30e34:	6808      	ldr	r0, [r1, #0]
{
   30e36:	460d      	mov	r5, r1
   30e38:	b1b8      	cbz	r0, 30e6a <z_shell_help_cmd_print+0x3a>
   30e3a:	f006 fb97 	bl	3756c <strlen>
   30e3e:	b284      	uxth	r4, r0
   30e40:	4f0b      	ldr	r7, [pc, #44]	; (30e70 <z_shell_help_cmd_print+0x40>)
   30e42:	4638      	mov	r0, r7
   30e44:	f006 fb92 	bl	3756c <strlen>
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
   30e48:	4404      	add	r4, r0

	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
   30e4a:	2100      	movs	r1, #0
   30e4c:	4630      	mov	r0, r6
   30e4e:	682b      	ldr	r3, [r5, #0]
   30e50:	4a08      	ldr	r2, [pc, #32]	; (30e74 <z_shell_help_cmd_print+0x44>)
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
   30e52:	b2a4      	uxth	r4, r4
	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
   30e54:	9700      	str	r7, [sp, #0]
   30e56:	f005 fe6f 	bl	36b38 <z_shell_fprintf>

	formatted_text_print(shell, cmd->help, field_width, false);
   30e5a:	4622      	mov	r2, r4
   30e5c:	4630      	mov	r0, r6
   30e5e:	6869      	ldr	r1, [r5, #4]
}
   30e60:	b003      	add	sp, #12
   30e62:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	formatted_text_print(shell, cmd->help, field_width, false);
   30e66:	f7ff bf0b 	b.w	30c80 <formatted_text_print.constprop.0>
   30e6a:	4604      	mov	r4, r0
   30e6c:	e7e8      	b.n	30e40 <z_shell_help_cmd_print+0x10>
   30e6e:	bf00      	nop
   30e70:	0003c078 	.word	0x0003c078
   30e74:	0003be23 	.word	0x0003be23

00030e78 <z_shell_help_request>:

bool z_shell_help_request(const char *str)
{
   30e78:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP_OPT_PARSE)) {
		return false;
	}

	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
   30e7a:	4907      	ldr	r1, [pc, #28]	; (30e98 <z_shell_help_request+0x20>)
{
   30e7c:	4604      	mov	r4, r0
	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
   30e7e:	f006 fb85 	bl	3758c <strcmp>
   30e82:	b138      	cbz	r0, 30e94 <z_shell_help_request+0x1c>
   30e84:	4620      	mov	r0, r4
   30e86:	4905      	ldr	r1, [pc, #20]	; (30e9c <z_shell_help_request+0x24>)
   30e88:	f006 fb80 	bl	3758c <strcmp>
   30e8c:	fab0 f080 	clz	r0, r0
   30e90:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   30e92:	bd10      	pop	{r4, pc}
		return true;
   30e94:	2001      	movs	r0, #1
   30e96:	e7fc      	b.n	30e92 <z_shell_help_request+0x1a>
   30e98:	0003c06e 	.word	0x0003c06e
   30e9c:	0003c071 	.word	0x0003c071

00030ea0 <cmd_clear>:
	z_cursor_restore(shell);
	return ret_val;
}

static int cmd_clear(const struct shell *shell, size_t argc, char **argv)
{
   30ea0:	b538      	push	{r3, r4, r5, lr}
   30ea2:	4604      	mov	r4, r0
	ARG_UNUSED(argv);

	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
   30ea4:	4d06      	ldr	r5, [pc, #24]	; (30ec0 <cmd_clear+0x20>)
   30ea6:	4a07      	ldr	r2, [pc, #28]	; (30ec4 <cmd_clear+0x24>)
   30ea8:	4629      	mov	r1, r5
   30eaa:	6940      	ldr	r0, [r0, #20]
   30eac:	f005 ff1a 	bl	36ce4 <z_shell_raw_fprintf>
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
   30eb0:	6960      	ldr	r0, [r4, #20]
   30eb2:	4629      	mov	r1, r5
   30eb4:	4a04      	ldr	r2, [pc, #16]	; (30ec8 <cmd_clear+0x28>)
   30eb6:	f005 ff15 	bl	36ce4 <z_shell_raw_fprintf>

	return 0;
}
   30eba:	2000      	movs	r0, #0
   30ebc:	bd38      	pop	{r3, r4, r5, pc}
   30ebe:	bf00      	nop
   30ec0:	0003bb9b 	.word	0x0003bb9b
   30ec4:	0003c4c0 	.word	0x0003c4c0
   30ec8:	0003c4c4 	.word	0x0003c4c4

00030ecc <cmd_resize_default>:
	return 0;
}

static int cmd_resize_default(const struct shell *shell,
			      size_t argc, char **argv)
{
   30ecc:	b510      	push	{r4, lr}
   30ece:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
   30ed0:	4a04      	ldr	r2, [pc, #16]	; (30ee4 <cmd_resize_default+0x18>)
   30ed2:	4905      	ldr	r1, [pc, #20]	; (30ee8 <cmd_resize_default+0x1c>)
   30ed4:	6940      	ldr	r0, [r0, #20]
   30ed6:	f005 ff05 	bl	36ce4 <z_shell_raw_fprintf>
	shell->ctx->vt100_ctx.cons.terminal_wid = SHELL_DEFAULT_TERMINAL_WIDTH;
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
   30eda:	68a3      	ldr	r3, [r4, #8]
   30edc:	4a03      	ldr	r2, [pc, #12]	; (30eec <cmd_resize_default+0x20>)

	return 0;
}
   30ede:	2000      	movs	r0, #0
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
   30ee0:	629a      	str	r2, [r3, #40]	; 0x28
}
   30ee2:	bd10      	pop	{r4, pc}
   30ee4:	0003c4c9 	.word	0x0003c4c9
   30ee8:	0003bb9b 	.word	0x0003bb9b
   30eec:	00500018 	.word	0x00500018

00030ef0 <cmd_shell_stats_show>:
{
   30ef0:	b508      	push	{r3, lr}
	shell_print(shell, "Lost logs: %u", shell->stats->log_lost_cnt);
   30ef2:	6983      	ldr	r3, [r0, #24]
   30ef4:	2100      	movs	r1, #0
   30ef6:	681b      	ldr	r3, [r3, #0]
   30ef8:	4a02      	ldr	r2, [pc, #8]	; (30f04 <cmd_shell_stats_show+0x14>)
   30efa:	f005 fac1 	bl	36480 <shell_fprintf>
}
   30efe:	2000      	movs	r0, #0
   30f00:	bd08      	pop	{r3, pc}
   30f02:	bf00      	nop
   30f04:	0003c07f 	.word	0x0003c07f

00030f08 <cmd_history>:
{
   30f08:	b5f0      	push	{r4, r5, r6, r7, lr}
   30f0a:	4604      	mov	r4, r0
	size_t i = 0;
   30f0c:	2500      	movs	r5, #0
			shell_print(shell, "[%3d] %s",
   30f0e:	4f0f      	ldr	r7, [pc, #60]	; (30f4c <cmd_history+0x44>)
{
   30f10:	b085      	sub	sp, #20
				    shell->ctx->temp_buff, &len);
   30f12:	68a2      	ldr	r2, [r4, #8]
		z_shell_history_get(shell->history, true,
   30f14:	f10d 030e 	add.w	r3, sp, #14
   30f18:	2101      	movs	r1, #1
   30f1a:	68e0      	ldr	r0, [r4, #12]
   30f1c:	f502 729f 	add.w	r2, r2, #318	; 0x13e
   30f20:	f005 ff50 	bl	36dc4 <z_shell_history_get>
		if (len) {
   30f24:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   30f28:	68a3      	ldr	r3, [r4, #8]
   30f2a:	b158      	cbz	r0, 30f44 <cmd_history+0x3c>
			shell_print(shell, "[%3d] %s",
   30f2c:	f503 739f 	add.w	r3, r3, #318	; 0x13e
   30f30:	9300      	str	r3, [sp, #0]
   30f32:	463a      	mov	r2, r7
   30f34:	462b      	mov	r3, r5
   30f36:	2100      	movs	r1, #0
   30f38:	4620      	mov	r0, r4
   30f3a:	1c6e      	adds	r6, r5, #1
   30f3c:	f005 faa0 	bl	36480 <shell_fprintf>
   30f40:	4635      	mov	r5, r6
		z_shell_history_get(shell->history, true,
   30f42:	e7e6      	b.n	30f12 <cmd_history+0xa>
	shell->ctx->temp_buff[0] = '\0';
   30f44:	f883 013e 	strb.w	r0, [r3, #318]	; 0x13e
}
   30f48:	b005      	add	sp, #20
   30f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30f4c:	0003b277 	.word	0x0003b277

00030f50 <cmd_echo>:
	if (argc == 2) {
   30f50:	2902      	cmp	r1, #2
{
   30f52:	b507      	push	{r0, r1, r2, lr}
	if (argc == 2) {
   30f54:	d10c      	bne.n	30f70 <cmd_echo+0x20>
		shell_error(shell, "%s:%s%s", argv[0],
   30f56:	6853      	ldr	r3, [r2, #4]
   30f58:	9301      	str	r3, [sp, #4]
   30f5a:	4b0d      	ldr	r3, [pc, #52]	; (30f90 <cmd_echo+0x40>)
   30f5c:	9300      	str	r3, [sp, #0]
   30f5e:	6813      	ldr	r3, [r2, #0]
   30f60:	4a0c      	ldr	r2, [pc, #48]	; (30f94 <cmd_echo+0x44>)
   30f62:	f005 fa8d 	bl	36480 <shell_fprintf>
   30f66:	f06f 0015 	mvn.w	r0, #21
}
   30f6a:	b003      	add	sp, #12
   30f6c:	f85d fb04 	ldr.w	pc, [sp], #4
	shell_print(shell, "Echo status: %s",
   30f70:	6883      	ldr	r3, [r0, #8]
   30f72:	4a09      	ldr	r2, [pc, #36]	; (30f98 <cmd_echo+0x48>)
	return shell->ctx->internal.flags.echo == 1;
   30f74:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
   30f78:	2100      	movs	r1, #0
   30f7a:	f013 0f04 	tst.w	r3, #4
   30f7e:	4b07      	ldr	r3, [pc, #28]	; (30f9c <cmd_echo+0x4c>)
   30f80:	bf18      	it	ne
   30f82:	4613      	movne	r3, r2
   30f84:	4a06      	ldr	r2, [pc, #24]	; (30fa0 <cmd_echo+0x50>)
   30f86:	f005 fa7b 	bl	36480 <shell_fprintf>
	return 0;
   30f8a:	2000      	movs	r0, #0
   30f8c:	e7ed      	b.n	30f6a <cmd_echo+0x1a>
   30f8e:	bf00      	nop
   30f90:	0003c09b 	.word	0x0003c09b
   30f94:	0003c092 	.word	0x0003c092
   30f98:	0003bb34 	.word	0x0003bb34
   30f9c:	0003c08e 	.word	0x0003c08e
   30fa0:	0003c0b0 	.word	0x0003c0b0

00030fa4 <cmd_resize>:

static int cmd_resize(const struct shell *shell, size_t argc, char **argv)
{
   30fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (argc != 1) {
   30fa6:	2901      	cmp	r1, #1
{
   30fa8:	4605      	mov	r5, r0
   30faa:	b085      	sub	sp, #20
	if (argc != 1) {
   30fac:	d00d      	beq.n	30fca <cmd_resize+0x26>
		shell_error(shell, "%s:%s%s", argv[0],
   30fae:	6853      	ldr	r3, [r2, #4]
   30fb0:	2102      	movs	r1, #2
   30fb2:	9301      	str	r3, [sp, #4]
   30fb4:	4b52      	ldr	r3, [pc, #328]	; (31100 <cmd_resize+0x15c>)
			    SHELL_MSG_UNKNOWN_PARAMETER, argv[1]);
		return -EINVAL;
   30fb6:	f06f 0415 	mvn.w	r4, #21
		shell_error(shell, "%s:%s%s", argv[0],
   30fba:	9300      	str	r3, [sp, #0]
   30fbc:	6813      	ldr	r3, [r2, #0]
   30fbe:	4a51      	ldr	r2, [pc, #324]	; (31104 <cmd_resize+0x160>)
   30fc0:	f005 fa5e 	bl	36480 <shell_fprintf>
			   " screen size");
		return -ENOEXEC;
	}

	return 0;
}
   30fc4:	4620      	mov	r0, r4
   30fc6:	b005      	add	sp, #20
   30fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	char c = 0;
   30fca:	2400      	movs	r4, #0
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SAVECURSOR);
   30fcc:	4a4e      	ldr	r2, [pc, #312]	; (31108 <cmd_resize+0x164>)
   30fce:	494f      	ldr	r1, [pc, #316]	; (3110c <cmd_resize+0x168>)
   30fd0:	6940      	ldr	r0, [r0, #20]
   30fd2:	f005 fe87 	bl	36ce4 <z_shell_raw_fprintf>
	z_shell_op_cursor_vert_move(shell, -SHELL_MAX_TERMINAL_SIZE);
   30fd6:	f06f 01f9 	mvn.w	r1, #249	; 0xf9
   30fda:	4628      	mov	r0, r5
   30fdc:	f7ff fbf2 	bl	307c4 <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, SHELL_MAX_TERMINAL_SIZE);
   30fe0:	21fa      	movs	r1, #250	; 0xfa
   30fe2:	4628      	mov	r0, r5
   30fe4:	f7ff fbfe 	bl	307e4 <z_shell_op_cursor_horiz_move>
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
   30fe8:	68a8      	ldr	r0, [r5, #8]
   30fea:	f44f 7280 	mov.w	r2, #256	; 0x100
   30fee:	4621      	mov	r1, r4
   30ff0:	f500 709f 	add.w	r0, r0, #318	; 0x13e
	char c = 0;
   30ff4:	f88d 400b 	strb.w	r4, [sp, #11]
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
   30ff8:	f006 fb35 	bl	37666 <memset>
	z_shell_raw_fprintf(shell->fprintf_ctx, cmd_get_terminal_size);
   30ffc:	4944      	ldr	r1, [pc, #272]	; (31110 <cmd_resize+0x16c>)
   30ffe:	6968      	ldr	r0, [r5, #20]
   31000:	f005 fe70 	bl	36ce4 <z_shell_raw_fprintf>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
   31004:	6968      	ldr	r0, [r5, #20]
   31006:	f005 fa5d 	bl	364c4 <z_shell_fprintf_buffer_flush>
   3100a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
			(void)shell->iface->api->read(shell->iface, &c,
   3100e:	6868      	ldr	r0, [r5, #4]
   31010:	2201      	movs	r2, #1
   31012:	6803      	ldr	r3, [r0, #0]
   31014:	f10d 010b 	add.w	r1, sp, #11
   31018:	691f      	ldr	r7, [r3, #16]
   3101a:	ab03      	add	r3, sp, #12
   3101c:	47b8      	blx	r7
			if (cnt == 0) {
   3101e:	9b03      	ldr	r3, [sp, #12]
   31020:	b953      	cbnz	r3, 31038 <cmd_resize+0x94>
	z_impl_k_busy_wait(usec_to_wait);
   31022:	3e01      	subs	r6, #1
   31024:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   31028:	b2b6      	uxth	r6, r6
   3102a:	f006 ff62 	bl	37ef2 <z_impl_k_busy_wait>
	for (uint16_t i = 0; i < 1000; i++) {
   3102e:	2e00      	cmp	r6, #0
   31030:	d1ed      	bne.n	3100e <cmd_resize+0x6a>
		ret_val = -ENOTSUP;
   31032:	f06f 0485 	mvn.w	r4, #133	; 0x85
   31036:	e031      	b.n	3109c <cmd_resize+0xf8>
			if ((c != SHELL_VT100_ASCII_ESC) &&
   31038:	f89d 300b 	ldrb.w	r3, [sp, #11]
   3103c:	68aa      	ldr	r2, [r5, #8]
   3103e:	2b1b      	cmp	r3, #27
   31040:	d053      	beq.n	310ea <cmd_resize+0x146>
   31042:	f892 113e 	ldrb.w	r1, [r2, #318]	; 0x13e
   31046:	291b      	cmp	r1, #27
   31048:	d1e1      	bne.n	3100e <cmd_resize+0x6a>
			if (c == 'R') { /* End of response from the terminal. */
   3104a:	2b52      	cmp	r3, #82	; 0x52
   3104c:	d14d      	bne.n	310ea <cmd_resize+0x146>
				shell->ctx->temp_buff[buff_idx] = '\0';
   3104e:	2300      	movs	r3, #0
   31050:	4414      	add	r4, r2
   31052:	f884 313e 	strb.w	r3, [r4, #318]	; 0x13e
				if (shell->ctx->temp_buff[1] != '[') {
   31056:	f892 113f 	ldrb.w	r1, [r2, #319]	; 0x13f
   3105a:	295b      	cmp	r1, #91	; 0x5b
   3105c:	d14d      	bne.n	310fa <cmd_resize+0x156>
	*y = 0U;
   3105e:	461f      	mov	r7, r3
				buff_idx = 2U;
   31060:	2602      	movs	r6, #2
   31062:	f502 70a0 	add.w	r0, r2, #320	; 0x140
				while (shell->ctx->temp_buff[buff_idx] != ';') {
   31066:	f810 1b01 	ldrb.w	r1, [r0], #1
   3106a:	3601      	adds	r6, #1
   3106c:	293b      	cmp	r1, #59	; 0x3b
   3106e:	b2b6      	uxth	r6, r6
   31070:	d126      	bne.n	310c0 <cmd_resize+0x11c>
				if (++buff_idx >= CONFIG_SHELL_CMD_BUFF_SIZE) {
   31072:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   31076:	d0dc      	beq.n	31032 <cmd_resize+0x8e>
	*x = 0U;
   31078:	2300      	movs	r3, #0
   3107a:	f506 709f 	add.w	r0, r6, #318	; 0x13e
   3107e:	4410      	add	r0, r2
				while (shell->ctx->temp_buff[buff_idx]
   31080:	f810 4b01 	ldrb.w	r4, [r0], #1
   31084:	bb34      	cbnz	r4, 310d4 <cmd_resize+0x130>
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
   31086:	2bfa      	cmp	r3, #250	; 0xfa
   31088:	bf28      	it	cs
   3108a:	23fa      	movcs	r3, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
   3108c:	2ffa      	cmp	r7, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
   3108e:	8553      	strh	r3, [r2, #42]	; 0x2a
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
   31090:	463b      	mov	r3, r7
   31092:	bf28      	it	cs
   31094:	23fa      	movcs	r3, #250	; 0xfa
				shell->ctx->temp_buff[0] = 0;
   31096:	f882 413e 	strb.w	r4, [r2, #318]	; 0x13e
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
   3109a:	8513      	strh	r3, [r2, #40]	; 0x28
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_RESTORECURSOR);
   3109c:	4a1d      	ldr	r2, [pc, #116]	; (31114 <cmd_resize+0x170>)
   3109e:	491b      	ldr	r1, [pc, #108]	; (3110c <cmd_resize+0x168>)
   310a0:	6968      	ldr	r0, [r5, #20]
   310a2:	f005 fe1f 	bl	36ce4 <z_shell_raw_fprintf>
	if (err != 0) {
   310a6:	2c00      	cmp	r4, #0
   310a8:	d08c      	beq.n	30fc4 <cmd_resize+0x20>
		shell->ctx->vt100_ctx.cons.terminal_hei =
   310aa:	68ab      	ldr	r3, [r5, #8]
   310ac:	4a1a      	ldr	r2, [pc, #104]	; (31118 <cmd_resize+0x174>)
		shell_warn(shell, "No response from the terminal, assumed 80x24"
   310ae:	2104      	movs	r1, #4
		shell->ctx->vt100_ctx.cons.terminal_hei =
   310b0:	629a      	str	r2, [r3, #40]	; 0x28
		shell_warn(shell, "No response from the terminal, assumed 80x24"
   310b2:	4628      	mov	r0, r5
   310b4:	4a19      	ldr	r2, [pc, #100]	; (3111c <cmd_resize+0x178>)
   310b6:	f005 f9e3 	bl	36480 <shell_fprintf>
   310ba:	f06f 0407 	mvn.w	r4, #7
   310be:	e781      	b.n	30fc4 <cmd_resize+0x20>
					*y = *y * 10U +
   310c0:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   310c4:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   310c8:	3b30      	subs	r3, #48	; 0x30
					if (buff_idx >=
   310ca:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
					*y = *y * 10U +
   310ce:	b29f      	uxth	r7, r3
					if (buff_idx >=
   310d0:	d1c9      	bne.n	31066 <cmd_resize+0xc2>
   310d2:	e7ae      	b.n	31032 <cmd_resize+0x8e>
					*x = *x * 10U +
   310d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
					(shell->ctx->temp_buff[buff_idx++] -
   310d8:	3601      	adds	r6, #1
					*x = *x * 10U +
   310da:	eb04 0443 	add.w	r4, r4, r3, lsl #1
					(shell->ctx->temp_buff[buff_idx++] -
   310de:	b2b6      	uxth	r6, r6
					*x = *x * 10U +
   310e0:	3c30      	subs	r4, #48	; 0x30
					if (buff_idx >=
   310e2:	2eff      	cmp	r6, #255	; 0xff
					*x = *x * 10U +
   310e4:	b2a3      	uxth	r3, r4
					if (buff_idx >=
   310e6:	d9cb      	bls.n	31080 <cmd_resize+0xdc>
   310e8:	e7a3      	b.n	31032 <cmd_resize+0x8e>
			shell->ctx->temp_buff[buff_idx] = c;
   310ea:	1911      	adds	r1, r2, r4
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
   310ec:	3401      	adds	r4, #1
   310ee:	b2a4      	uxth	r4, r4
   310f0:	2c09      	cmp	r4, #9
			shell->ctx->temp_buff[buff_idx] = c;
   310f2:	f881 313e 	strb.w	r3, [r1, #318]	; 0x13e
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
   310f6:	d98a      	bls.n	3100e <cmd_resize+0x6a>
				shell->ctx->temp_buff[0] = 0;
   310f8:	2300      	movs	r3, #0
   310fa:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
				return -ENOMEM;
   310fe:	e798      	b.n	31032 <cmd_resize+0x8e>
   31100:	0003c09b 	.word	0x0003c09b
   31104:	0003c092 	.word	0x0003c092
   31108:	0003c4ba 	.word	0x0003c4ba
   3110c:	0003bb9b 	.word	0x0003bb9b
   31110:	0003c4cf 	.word	0x0003c4cf
   31114:	0003c4bd 	.word	0x0003c4bd
   31118:	00500018 	.word	0x00500018
   3111c:	0003c0c1 	.word	0x0003c0c1

00031120 <z_shell_wildcard_process>:


enum shell_wildcard_status z_shell_wildcard_process(const struct shell *shell,
					const struct shell_static_entry *cmd,
					const char *pattern)
{
   31120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31124:	4607      	mov	r7, r0
   31126:	4615      	mov	r5, r2
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_NOT_FOUND;

	if (cmd == NULL) {
   31128:	4689      	mov	r9, r1
{
   3112a:	b089      	sub	sp, #36	; 0x24
	if (cmd == NULL) {
   3112c:	b921      	cbnz	r1, 31138 <z_shell_wildcard_process+0x18>
		return ret_val;
   3112e:	2403      	movs	r4, #3
	 * and it will try to add matching commands.
	 */
	ret_val = commands_expand(shell, cmd, pattern);

	return ret_val;
}
   31130:	4620      	mov	r0, r4
   31132:	b009      	add	sp, #36	; 0x24
   31134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!z_shell_has_wildcard(pattern)) {
   31138:	4610      	mov	r0, r2
   3113a:	f006 f826 	bl	3718a <z_shell_has_wildcard>
   3113e:	2800      	cmp	r0, #0
   31140:	d0f5      	beq.n	3112e <z_shell_wildcard_process+0xe>
	size_t cnt = 0;
   31142:	f04f 0800 	mov.w	r8, #0
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
   31146:	2402      	movs	r4, #2
	size_t cmd_idx = 0;
   31148:	4641      	mov	r1, r8
   3114a:	e024      	b.n	31196 <z_shell_wildcard_process+0x76>
	return str == NULL ? 0U : (uint16_t)strlen(str);
   3114c:	465c      	mov	r4, fp
   3114e:	e03c      	b.n	311ca <z_shell_wildcard_process+0xaa>
	completion_addr = strstr(buff, pattern);
   31150:	4629      	mov	r1, r5
   31152:	f50a 709f 	add.w	r0, sl, #318	; 0x13e
   31156:	f006 f9be 	bl	374d6 <strstr>
	if (!completion_addr) {
   3115a:	4606      	mov	r6, r0
   3115c:	2800      	cmp	r0, #0
   3115e:	d04e      	beq.n	311fe <z_shell_wildcard_process+0xde>
   31160:	f006 fa04 	bl	3756c <strlen>
	memmove(completion_addr + cmd_len + 1, completion_addr, shift + 1);
   31164:	b282      	uxth	r2, r0
   31166:	1c60      	adds	r0, r4, #1
   31168:	4631      	mov	r1, r6
   3116a:	3201      	adds	r2, #1
   3116c:	4430      	add	r0, r6
   3116e:	f006 fa38 	bl	375e2 <memmove>
	memcpy(completion_addr, cmd, cmd_len);
   31172:	4622      	mov	r2, r4
   31174:	4659      	mov	r1, fp
   31176:	4630      	mov	r0, r6
   31178:	f006 fa4a 	bl	37610 <memcpy>
	completion_addr[cmd_len] = ' ';
   3117c:	f04f 0320 	mov.w	r3, #32
   31180:	5533      	strb	r3, [r6, r4]
	*buff_len += cmd_len + 1; /* + 1 for space */
   31182:	f8ba 003c 	ldrh.w	r0, [sl, #60]	; 0x3c
			cnt++;
   31186:	f108 0801 	add.w	r8, r8, #1
	*buff_len += cmd_len + 1; /* + 1 for space */
   3118a:	4404      	add	r4, r0
   3118c:	3401      	adds	r4, #1
   3118e:	f8aa 403c 	strh.w	r4, [sl, #60]	; 0x3c
			ret_val = command_add(shell->ctx->temp_buff,
   31192:	2400      	movs	r4, #0
   31194:	9901      	ldr	r1, [sp, #4]
	while ((entry = z_shell_cmd_get(cmd, cmd_idx++, &dloc)) != NULL) {
   31196:	1c4b      	adds	r3, r1, #1
   31198:	4648      	mov	r0, r9
   3119a:	aa03      	add	r2, sp, #12
   3119c:	9301      	str	r3, [sp, #4]
   3119e:	f7ff fae3 	bl	30768 <z_shell_cmd_get>
   311a2:	4606      	mov	r6, r0
   311a4:	b1f8      	cbz	r0, 311e6 <z_shell_wildcard_process+0xc6>
		if (fnmatch(pattern, entry->syntax, 0) == 0) {
   311a6:	2200      	movs	r2, #0
   311a8:	4628      	mov	r0, r5
   311aa:	6831      	ldr	r1, [r6, #0]
   311ac:	f004 fcbc 	bl	35b28 <fnmatch>
   311b0:	2800      	cmp	r0, #0
   311b2:	d1ef      	bne.n	31194 <z_shell_wildcard_process+0x74>
			ret_val = command_add(shell->ctx->temp_buff,
   311b4:	f8d6 b000 	ldr.w	fp, [r6]
   311b8:	f8d7 a008 	ldr.w	sl, [r7, #8]
   311bc:	f1bb 0f00 	cmp.w	fp, #0
   311c0:	d0c4      	beq.n	3114c <z_shell_wildcard_process+0x2c>
   311c2:	4658      	mov	r0, fp
   311c4:	f006 f9d2 	bl	3756c <strlen>
   311c8:	b284      	uxth	r4, r0
	if ((*buff_len + cmd_len + 1) > CONFIG_SHELL_CMD_BUFF_SIZE) {
   311ca:	f8ba 203c 	ldrh.w	r2, [sl, #60]	; 0x3c
   311ce:	3201      	adds	r2, #1
   311d0:	4422      	add	r2, r4
   311d2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   311d6:	ddbb      	ble.n	31150 <z_shell_wildcard_process+0x30>
				z_shell_fprintf(shell, SHELL_WARNING,
   311d8:	462b      	mov	r3, r5
   311da:	2104      	movs	r1, #4
   311dc:	4638      	mov	r0, r7
   311de:	4a09      	ldr	r2, [pc, #36]	; (31204 <z_shell_wildcard_process+0xe4>)
   311e0:	f005 fcaa 	bl	36b38 <z_shell_fprintf>
			ret_val = command_add(shell->ctx->temp_buff,
   311e4:	2401      	movs	r4, #1
	if (cnt > 0) {
   311e6:	f1b8 0f00 	cmp.w	r8, #0
   311ea:	d0a1      	beq.n	31130 <z_shell_wildcard_process+0x10>
		z_shell_pattern_remove(shell->ctx->temp_buff,
   311ec:	68b8      	ldr	r0, [r7, #8]
   311ee:	462a      	mov	r2, r5
   311f0:	f100 013c 	add.w	r1, r0, #60	; 0x3c
   311f4:	f500 709f 	add.w	r0, r0, #318	; 0x13e
   311f8:	f005 fa90 	bl	3671c <z_shell_pattern_remove>
	return ret_val;
   311fc:	e798      	b.n	31130 <z_shell_wildcard_process+0x10>
		return SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
   311fe:	2402      	movs	r4, #2
   31200:	e7f1      	b.n	311e6 <z_shell_wildcard_process+0xc6>
   31202:	bf00      	nop
   31204:	0003c4d4 	.word	0x0003c4d4

00031208 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   31208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3120a:	4605      	mov	r5, r0
	__asm__ volatile(
   3120c:	f04f 0320 	mov.w	r3, #32
   31210:	f3ef 8611 	mrs	r6, BASEPRI
   31214:	f383 8811 	msr	BASEPRI, r3
   31218:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   3121c:	4b0b      	ldr	r3, [pc, #44]	; (3124c <pm_state_notify+0x44>)
   3121e:	681c      	ldr	r4, [r3, #0]
   31220:	2c00      	cmp	r4, #0
   31222:	bf38      	it	cc
   31224:	2400      	movcc	r4, #0
   31226:	b15c      	cbz	r4, 31240 <pm_state_notify+0x38>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
   31228:	4f09      	ldr	r7, [pc, #36]	; (31250 <pm_state_notify+0x48>)
			callback = notifier->state_exit;
   3122a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   3122e:	2d00      	cmp	r5, #0
   31230:	bf08      	it	eq
   31232:	4613      	moveq	r3, r2
		if (callback) {
   31234:	b10b      	cbz	r3, 3123a <pm_state_notify+0x32>
			callback(z_power_state.state);
   31236:	7838      	ldrb	r0, [r7, #0]
   31238:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   3123a:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   3123c:	2c00      	cmp	r4, #0
   3123e:	d1f4      	bne.n	3122a <pm_state_notify+0x22>
	__asm__ volatile(
   31240:	f386 8811 	msr	BASEPRI, r6
   31244:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   31248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3124a:	bf00      	nop
   3124c:	20008bf8 	.word	0x20008bf8
   31250:	20008c00 	.word	0x20008c00

00031254 <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
   31254:	4b08      	ldr	r3, [pc, #32]	; (31278 <pm_system_resume+0x24>)
{
   31256:	b510      	push	{r4, lr}
	if (!post_ops_done) {
   31258:	681c      	ldr	r4, [r3, #0]
   3125a:	b95c      	cbnz	r4, 31274 <pm_system_resume+0x20>
		post_ops_done = 1;
   3125c:	2201      	movs	r2, #1
   3125e:	601a      	str	r2, [r3, #0]
		pm_power_state_exit_post_ops(z_power_state);
   31260:	4b06      	ldr	r3, [pc, #24]	; (3127c <pm_system_resume+0x28>)
   31262:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   31266:	f004 fc8f 	bl	35b88 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   3126a:	4620      	mov	r0, r4
	}
}
   3126c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pm_state_notify(false);
   31270:	f7ff bfca 	b.w	31208 <pm_state_notify>
}
   31274:	bd10      	pop	{r4, pc}
   31276:	bf00      	nop
   31278:	2000807c 	.word	0x2000807c
   3127c:	20008c00 	.word	0x20008c00

00031280 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
   31280:	b5f0      	push	{r4, r5, r6, r7, lr}
   31282:	b085      	sub	sp, #20
	z_power_state = pm_policy_next_state(ticks);
   31284:	466e      	mov	r6, sp
   31286:	4c18      	ldr	r4, [pc, #96]	; (312e8 <pm_system_suspend+0x68>)
   31288:	4601      	mov	r1, r0
{
   3128a:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
   3128c:	4630      	mov	r0, r6
   3128e:	f005 ffc1 	bl	37214 <pm_policy_next_state>
   31292:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   31296:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
   3129a:	7820      	ldrb	r0, [r4, #0]
   3129c:	b308      	cbz	r0, 312e2 <pm_system_suspend+0x62>
		LOG_DBG("No PM operations done.");
		return z_power_state.state;
	}
	post_ops_done = 0;
   3129e:	2100      	movs	r1, #0
   312a0:	4b12      	ldr	r3, [pc, #72]	; (312ec <pm_system_suspend+0x6c>)
   312a2:	6019      	str	r1, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
   312a4:	1c6b      	adds	r3, r5, #1
   312a6:	d00e      	beq.n	312c6 <pm_system_suspend+0x46>
			return (uint32_t)((t * to_hz + off) / from_hz);
   312a8:	4617      	mov	r7, r2
   312aa:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   312ae:	2100      	movs	r1, #0
   312b0:	480f      	ldr	r0, [pc, #60]	; (312f0 <pm_system_suspend+0x70>)
   312b2:	2300      	movs	r3, #0
   312b4:	fbe6 0107 	umlal	r0, r1, r6, r7
   312b8:	4a0e      	ldr	r2, [pc, #56]	; (312f4 <pm_system_suspend+0x74>)
   312ba:	f7ef f811 	bl	202e0 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   312be:	2101      	movs	r1, #1
   312c0:	1a28      	subs	r0, r5, r0
   312c2:	f006 fdf6 	bl	37eb2 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   312c6:	f002 ff11 	bl	340ec <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
   312ca:	2001      	movs	r0, #1
   312cc:	f7ff ff9c 	bl	31208 <pm_state_notify>
	pm_power_state_set(z_power_state);
   312d0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   312d4:	f004 fc45 	bl	35b62 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
   312d8:	f7ff ffbc 	bl	31254 <pm_system_resume>
	k_sched_unlock();
   312dc:	f002 fff8 	bl	342d0 <k_sched_unlock>

	return z_power_state.state;
   312e0:	7820      	ldrb	r0, [r4, #0]
}
   312e2:	b005      	add	sp, #20
   312e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   312e6:	bf00      	nop
   312e8:	20008c00 	.word	0x20008c00
   312ec:	2000807c 	.word	0x2000807c
   312f0:	000f423f 	.word	0x000f423f
   312f4:	000f4240 	.word	0x000f4240

000312f8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   312f8:	b510      	push	{r4, lr}
   312fa:	4807      	ldr	r0, [pc, #28]	; (31318 <uart_console_init+0x20>)
   312fc:	f002 f95e 	bl	335bc <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
   31300:	4c06      	ldr	r4, [pc, #24]	; (3131c <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   31302:	4b07      	ldr	r3, [pc, #28]	; (31320 <uart_console_init+0x28>)
   31304:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
   31306:	4620      	mov	r0, r4
   31308:	f001 f9d2 	bl	326b0 <__stdout_hook_install>
	__printk_hook_install(console_out);
   3130c:	4620      	mov	r0, r4
   3130e:	f7fc fbd1 	bl	2dab4 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
   31312:	2000      	movs	r0, #0
   31314:	bd10      	pop	{r4, pc}
   31316:	bf00      	nop
   31318:	0003c01b 	.word	0x0003c01b
   3131c:	00031325 	.word	0x00031325
   31320:	20008c0c 	.word	0x20008c0c

00031324 <console_out>:
	if ('\n' == c) {
   31324:	280a      	cmp	r0, #10
{
   31326:	b538      	push	{r3, r4, r5, lr}
   31328:	4604      	mov	r4, r0
   3132a:	4d07      	ldr	r5, [pc, #28]	; (31348 <console_out+0x24>)
	if ('\n' == c) {
   3132c:	d104      	bne.n	31338 <console_out+0x14>
   3132e:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
   31330:	6883      	ldr	r3, [r0, #8]
   31332:	210d      	movs	r1, #13
   31334:	685b      	ldr	r3, [r3, #4]
   31336:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   31338:	6828      	ldr	r0, [r5, #0]
   3133a:	6883      	ldr	r3, [r0, #8]
   3133c:	b2e1      	uxtb	r1, r4
   3133e:	685b      	ldr	r3, [r3, #4]
   31340:	4798      	blx	r3
}
   31342:	4620      	mov	r0, r4
   31344:	bd38      	pop	{r3, r4, r5, pc}
   31346:	bf00      	nop
   31348:	20008c0c 	.word	0x20008c0c

0003134c <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   3134c:	b570      	push	{r4, r5, r6, lr}
   3134e:	4604      	mov	r4, r0
	err = set_off_state(&subdata->flags, ctx);
   31350:	250c      	movs	r5, #12
	size_t offset = (size_t)(mgr - data->mgr);
   31352:	480d      	ldr	r0, [pc, #52]	; (31388 <onoff_stop+0x3c>)
{
   31354:	460e      	mov	r6, r1
	size_t offset = (size_t)(mgr - data->mgr);
   31356:	1a23      	subs	r3, r4, r0
   31358:	109a      	asrs	r2, r3, #2
   3135a:	4b0c      	ldr	r3, [pc, #48]	; (3138c <onoff_stop+0x40>)
	err = set_off_state(&subdata->flags, ctx);
   3135c:	2140      	movs	r1, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   3135e:	4353      	muls	r3, r2
   31360:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
   31362:	435d      	muls	r5, r3
   31364:	f105 0378 	add.w	r3, r5, #120	; 0x78
   31368:	4418      	add	r0, r3
   3136a:	f005 ff61 	bl	37230 <set_off_state>
	if (err < 0) {
   3136e:	1e01      	subs	r1, r0, #0
   31370:	db04      	blt.n	3137c <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
   31372:	4b07      	ldr	r3, [pc, #28]	; (31390 <onoff_stop+0x44>)
   31374:	442b      	add	r3, r5
   31376:	685b      	ldr	r3, [r3, #4]
   31378:	4798      	blx	r3
	return 0;
   3137a:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
   3137c:	4620      	mov	r0, r4
   3137e:	4633      	mov	r3, r6
}
   31380:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   31384:	4718      	bx	r3
   31386:	bf00      	nop
   31388:	20008c24 	.word	0x20008c24
   3138c:	b6db6db7 	.word	0xb6db6db7
   31390:	0003adec 	.word	0x0003adec

00031394 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   31394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   31398:	4c0f      	ldr	r4, [pc, #60]	; (313d8 <onoff_start+0x44>)
   3139a:	4d10      	ldr	r5, [pc, #64]	; (313dc <onoff_start+0x48>)
   3139c:	1b03      	subs	r3, r0, r4
   3139e:	109b      	asrs	r3, r3, #2
   313a0:	435d      	muls	r5, r3
   313a2:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
   313a4:	250c      	movs	r5, #12
   313a6:	435d      	muls	r5, r3
{
   313a8:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
   313aa:	f105 0078 	add.w	r0, r5, #120	; 0x78
{
   313ae:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   313b0:	4420      	add	r0, r4
   313b2:	2140      	movs	r1, #64	; 0x40
   313b4:	f005 ff55 	bl	37262 <set_starting_state>
	if (err < 0) {
   313b8:	1e01      	subs	r1, r0, #0
   313ba:	db08      	blt.n	313ce <onoff_start+0x3a>
	subdata->cb = cb;
   313bc:	4b08      	ldr	r3, [pc, #32]	; (313e0 <onoff_start+0x4c>)
   313be:	442c      	add	r4, r5
	subdata->user_data = user_data;
   313c0:	e9c4 361c 	strd	r3, r6, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
   313c4:	4b07      	ldr	r3, [pc, #28]	; (313e4 <onoff_start+0x50>)
   313c6:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   313c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   313cc:	4718      	bx	r3
		notify(mgr, err);
   313ce:	4638      	mov	r0, r7
   313d0:	4633      	mov	r3, r6
}
   313d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   313d6:	4718      	bx	r3
   313d8:	20008c24 	.word	0x20008c24
   313dc:	b6db6db7 	.word	0xb6db6db7
   313e0:	000372c5 	.word	0x000372c5
   313e4:	0003adec 	.word	0x0003adec

000313e8 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
   313e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   313ec:	2200      	movs	r2, #0
   313ee:	2101      	movs	r1, #1
{
   313f0:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   313f2:	2005      	movs	r0, #5
   313f4:	f000 fb40 	bl	31a78 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   313f8:	2005      	movs	r0, #5
   313fa:	f000 fb1f 	bl	31a3c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   313fe:	4811      	ldr	r0, [pc, #68]	; (31444 <clk_init+0x5c>)
   31400:	f001 fef8 	bl	331f4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   31404:	4b10      	ldr	r3, [pc, #64]	; (31448 <clk_init+0x60>)
   31406:	4298      	cmp	r0, r3
   31408:	d119      	bne.n	3143e <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   3140a:	f001 ff03 	bl	33214 <nrfx_clock_enable>
   3140e:	2400      	movs	r4, #0
	return &data->mgr[type];
   31410:	f04f 081c 	mov.w	r8, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   31414:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
   31416:	f8df 9034 	ldr.w	r9, [pc, #52]	; 3144c <clk_init+0x64>
						get_sub_data(dev, i);
   3141a:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   3141c:	4649      	mov	r1, r9
   3141e:	fb08 5004 	mla	r0, r8, r4, r5
   31422:	f003 ffe2 	bl	353ea <onoff_manager_init>
		if (err < 0) {
   31426:	2800      	cmp	r0, #0
   31428:	db07      	blt.n	3143a <clk_init+0x52>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   3142a:	2301      	movs	r3, #1
   3142c:	fb07 5504 	mla	r5, r7, r4, r5
   31430:	441c      	add	r4, r3
	for (enum clock_control_nrf_type i = 0;
   31432:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   31434:	67ab      	str	r3, [r5, #120]	; 0x78
	for (enum clock_control_nrf_type i = 0;
   31436:	d1f0      	bne.n	3141a <clk_init+0x32>
	}

	return 0;
   31438:	2000      	movs	r0, #0
}
   3143a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
   3143e:	f06f 0004 	mvn.w	r0, #4
   31442:	e7fa      	b.n	3143a <clk_init+0x52>
   31444:	00031485 	.word	0x00031485
   31448:	0bad0000 	.word	0x0bad0000
   3144c:	0003ae4c 	.word	0x0003ae4c

00031450 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   31450:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   31452:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   31454:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
   31456:	434b      	muls	r3, r1
   31458:	4808      	ldr	r0, [pc, #32]	; (3147c <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
   3145a:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   3145c:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   3145e:	3378      	adds	r3, #120	; 0x78
	void *user_data = sub_data->user_data;
   31460:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
   31464:	4418      	add	r0, r3
	sub_data->cb = NULL;
   31466:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
   31468:	f005 ff19 	bl	3729e <set_on_state>
	if (callback) {
   3146c:	b12d      	cbz	r5, 3147a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   3146e:	4632      	mov	r2, r6
   31470:	462b      	mov	r3, r5
}
   31472:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   31476:	4802      	ldr	r0, [pc, #8]	; (31480 <clkstarted_handle.constprop.0+0x30>)
   31478:	4718      	bx	r3
}
   3147a:	bd70      	pop	{r4, r5, r6, pc}
   3147c:	20008c24 	.word	0x20008c24
   31480:	200080c4 	.word	0x200080c4

00031484 <clock_event_handler>:
	switch (event) {
   31484:	2805      	cmp	r0, #5
   31486:	d811      	bhi.n	314ac <clock_event_handler+0x28>
   31488:	e8df f000 	tbb	[pc, r0]
   3148c:	10100e03 	.word	0x10100e03
   31490:	0a0c      	.short	0x0a0c
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   31492:	4b07      	ldr	r3, [pc, #28]	; (314b0 <clock_event_handler+0x2c>)
   31494:	6f98      	ldr	r0, [r3, #120]	; 0x78
   31496:	f010 0007 	ands.w	r0, r0, #7
   3149a:	d107      	bne.n	314ac <clock_event_handler+0x28>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   3149c:	f7ff bfd8 	b.w	31450 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
   314a0:	2002      	movs	r0, #2
   314a2:	e7fb      	b.n	3149c <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
   314a4:	2003      	movs	r0, #3
   314a6:	e7f9      	b.n	3149c <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   314a8:	2001      	movs	r0, #1
   314aa:	e7f7      	b.n	3149c <clock_event_handler+0x18>
}
   314ac:	4770      	bx	lr
   314ae:	bf00      	nop
   314b0:	20008c24 	.word	0x20008c24

000314b4 <hfclk_start>:
{
   314b4:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   314b6:	f006 fd1a 	bl	37eee <z_impl_k_uptime_ticks>
			return (t * to_hz + off) / from_hz;
   314ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   314be:	460c      	mov	r4, r1
   314c0:	fba0 0103 	umull	r0, r1, r0, r3
   314c4:	fb03 1104 	mla	r1, r3, r4, r1
}
   314c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   314cc:	0bc3      	lsrs	r3, r0, #15
		hf_start_tstamp = k_uptime_get();
   314ce:	4a04      	ldr	r2, [pc, #16]	; (314e0 <hfclk_start+0x2c>)
   314d0:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   314d4:	2001      	movs	r0, #1
   314d6:	0bc9      	lsrs	r1, r1, #15
   314d8:	e9c2 3100 	strd	r3, r1, [r2]
   314dc:	f001 beac 	b.w	33238 <nrfx_clock_start>
   314e0:	200085f0 	.word	0x200085f0

000314e4 <generic_hfclk_start>:
{
   314e4:	b508      	push	{r3, lr}
	__asm__ volatile(
   314e6:	f04f 0320 	mov.w	r3, #32
   314ea:	f3ef 8111 	mrs	r1, BASEPRI
   314ee:	f383 8811 	msr	BASEPRI, r3
   314f2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   314f6:	4a11      	ldr	r2, [pc, #68]	; (3153c <generic_hfclk_start+0x58>)
   314f8:	6813      	ldr	r3, [r2, #0]
   314fa:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   314fe:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   31502:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   31504:	d00b      	beq.n	3151e <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   31506:	4a0e      	ldr	r2, [pc, #56]	; (31540 <generic_hfclk_start+0x5c>)
   31508:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   3150c:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   31510:	f013 0301 	ands.w	r3, r3, #1
   31514:	d003      	beq.n	3151e <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
   31516:	480b      	ldr	r0, [pc, #44]	; (31544 <generic_hfclk_start+0x60>)
   31518:	f005 fec1 	bl	3729e <set_on_state>
			already_started = true;
   3151c:	2301      	movs	r3, #1
	__asm__ volatile(
   3151e:	f381 8811 	msr	BASEPRI, r1
   31522:	f3bf 8f6f 	isb	sy
	if (already_started) {
   31526:	b123      	cbz	r3, 31532 <generic_hfclk_start+0x4e>
}
   31528:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   3152c:	2000      	movs	r0, #0
   3152e:	f7ff bf8f 	b.w	31450 <clkstarted_handle.constprop.0>
}
   31532:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	hfclk_start();
   31536:	f7ff bfbd 	b.w	314b4 <hfclk_start>
   3153a:	bf00      	nop
   3153c:	20008cc4 	.word	0x20008cc4
   31540:	40005000 	.word	0x40005000
   31544:	20008c9c 	.word	0x20008c9c

00031548 <hfclk_stop>:
{
   31548:	b510      	push	{r4, lr}
   3154a:	f006 fcd0 	bl	37eee <z_impl_k_uptime_ticks>
   3154e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   31552:	460c      	mov	r4, r1
   31554:	fba0 0103 	umull	r0, r1, r0, r3
   31558:	fb03 1104 	mla	r1, r3, r4, r1
}
   3155c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   31560:	0bc3      	lsrs	r3, r0, #15
		hf_stop_tstamp = k_uptime_get();
   31562:	4a04      	ldr	r2, [pc, #16]	; (31574 <hfclk_stop+0x2c>)
   31564:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   31568:	2001      	movs	r0, #1
   3156a:	0bc9      	lsrs	r1, r1, #15
   3156c:	e9c2 3100 	strd	r3, r1, [r2]
   31570:	f001 beb2 	b.w	332d8 <nrfx_clock_stop>
   31574:	200085f8 	.word	0x200085f8

00031578 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   31578:	4b06      	ldr	r3, [pc, #24]	; (31594 <generic_hfclk_stop+0x1c>)
   3157a:	e8d3 2fef 	ldaex	r2, [r3]
   3157e:	f022 0102 	bic.w	r1, r2, #2
   31582:	e8c3 1fe0 	stlex	r0, r1, [r3]
   31586:	2800      	cmp	r0, #0
   31588:	d1f7      	bne.n	3157a <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   3158a:	07d3      	lsls	r3, r2, #31
   3158c:	d401      	bmi.n	31592 <generic_hfclk_stop+0x1a>
	hfclk_stop();
   3158e:	f7ff bfdb 	b.w	31548 <hfclk_stop>
}
   31592:	4770      	bx	lr
   31594:	20008cc4 	.word	0x20008cc4

00031598 <cmd_status>:
		 &data, &config,
		 PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		 &clock_control_api);

static int cmd_status(const struct shell *shell, size_t argc, char **argv)
{
   31598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   3159c:	4f32      	ldr	r7, [pc, #200]	; (31668 <cmd_status+0xd0>)
   3159e:	4604      	mov	r4, r0
   315a0:	f8d7 6418 	ldr.w	r6, [r7, #1048]	; 0x418
   315a4:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
	__asm__ volatile(
   315a8:	f04f 0320 	mov.w	r3, #32
   315ac:	f3ef 8811 	mrs	r8, BASEPRI
   315b0:	f383 8811 	msr	BASEPRI, r3
   315b4:	f3bf 8f6f 	isb	sy
   315b8:	f006 fc99 	bl	37eee <z_impl_k_uptime_ticks>
   315bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   315c0:	460a      	mov	r2, r1
   315c2:	fba0 0103 	umull	r0, r1, r0, r3
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   315c6:	f8d7 940c 	ldr.w	r9, [r7, #1036]	; 0x40c
   315ca:	fb03 1102 	mla	r1, r3, r2, r1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   315ce:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
	uint64_t now = k_uptime_get();

	(void)nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, (void *)&hfclk_src);
	hf_status = (hfclk_src == NRF_CLOCK_HFCLK_HIGH_ACCURACY);

	abs_start = hf_start_tstamp;
   315d2:	4b26      	ldr	r3, [pc, #152]	; (3166c <cmd_status+0xd4>)
   315d4:	0bc5      	lsrs	r5, r0, #15
   315d6:	f8d3 b000 	ldr.w	fp, [r3]
	abs_stop = hf_stop_tstamp;
   315da:	4b25      	ldr	r3, [pc, #148]	; (31670 <cmd_status+0xd8>)
   315dc:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
   315e0:	f8d3 a000 	ldr.w	sl, [r3]
	__asm__ volatile(
   315e4:	f388 8811 	msr	BASEPRI, r8
   315e8:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	shell_print(shell, "HF clock:");
   315ec:	2100      	movs	r1, #0
   315ee:	4620      	mov	r0, r4
   315f0:	4a20      	ldr	r2, [pc, #128]	; (31674 <cmd_status+0xdc>)
   315f2:	f004 ff45 	bl	36480 <shell_fprintf>
	shell_print(shell, "\t- %srunning (users: %u)",
   315f6:	f019 0f01 	tst.w	r9, #1
   315fa:	f8df 9090 	ldr.w	r9, [pc, #144]	; 3168c <cmd_status+0xf4>
   315fe:	f8df 8090 	ldr.w	r8, [pc, #144]	; 31690 <cmd_status+0xf8>
   31602:	f8b9 301a 	ldrh.w	r3, [r9, #26]
   31606:	4f1c      	ldr	r7, [pc, #112]	; (31678 <cmd_status+0xe0>)
   31608:	9300      	str	r3, [sp, #0]
   3160a:	4620      	mov	r0, r4
   3160c:	bf14      	ite	ne
   3160e:	4643      	movne	r3, r8
   31610:	463b      	moveq	r3, r7
   31612:	2100      	movs	r1, #0
   31614:	4a19      	ldr	r2, [pc, #100]	; (3167c <cmd_status+0xe4>)
   31616:	f004 ff33 	bl	36480 <shell_fprintf>
			hf_status ? "" : "not ", hf_mgr->refs);
	shell_print(shell, "\t- last start: %u ms (%u ms ago)",
   3161a:	eba5 030b 	sub.w	r3, r5, fp
   3161e:	4620      	mov	r0, r4
   31620:	9300      	str	r3, [sp, #0]
   31622:	2100      	movs	r1, #0
   31624:	465b      	mov	r3, fp
   31626:	4a16      	ldr	r2, [pc, #88]	; (31680 <cmd_status+0xe8>)
			(uint32_t)abs_start, (uint32_t)(now - abs_start));
	shell_print(shell, "\t- last stop: %u ms (%u ms ago)",
   31628:	eba5 050a 	sub.w	r5, r5, sl
	shell_print(shell, "\t- last start: %u ms (%u ms ago)",
   3162c:	f004 ff28 	bl	36480 <shell_fprintf>
	shell_print(shell, "\t- last stop: %u ms (%u ms ago)",
   31630:	4653      	mov	r3, sl
   31632:	4620      	mov	r0, r4
   31634:	2100      	movs	r1, #0
   31636:	4a13      	ldr	r2, [pc, #76]	; (31684 <cmd_status+0xec>)
   31638:	9500      	str	r5, [sp, #0]
   3163a:	f004 ff21 	bl	36480 <shell_fprintf>
			(uint32_t)abs_stop, (uint32_t)(now - abs_stop));
	shell_print(shell, "LF clock:");
   3163e:	4620      	mov	r0, r4
   31640:	2100      	movs	r1, #0
   31642:	4a11      	ldr	r2, [pc, #68]	; (31688 <cmd_status+0xf0>)
   31644:	f004 ff1c 	bl	36480 <shell_fprintf>
	shell_print(shell, "\t- %srunning (users: %u)",
   31648:	f8b9 3036 	ldrh.w	r3, [r9, #54]	; 0x36
   3164c:	4620      	mov	r0, r4
   3164e:	9300      	str	r3, [sp, #0]
   31650:	2100      	movs	r1, #0
   31652:	2e00      	cmp	r6, #0
   31654:	bf14      	ite	ne
   31656:	4643      	movne	r3, r8
   31658:	463b      	moveq	r3, r7
   3165a:	4a08      	ldr	r2, [pc, #32]	; (3167c <cmd_status+0xe4>)
   3165c:	f004 ff10 	bl	36480 <shell_fprintf>
			lf_status ? "" : "not ", lf_mgr->refs);

	return 0;
}
   31660:	2000      	movs	r0, #0
   31662:	b003      	add	sp, #12
   31664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31668:	40005000 	.word	0x40005000
   3166c:	200085f0 	.word	0x200085f0
   31670:	200085f8 	.word	0x200085f8
   31674:	0003c531 	.word	0x0003c531
   31678:	0003c52c 	.word	0x0003c52c
   3167c:	0003c53c 	.word	0x0003c53c
   31680:	0003c556 	.word	0x0003c556
   31684:	0003c578 	.word	0x0003c578
   31688:	0003c599 	.word	0x0003c599
   3168c:	20008c24 	.word	0x20008c24
   31690:	0003ba4e 	.word	0x0003ba4e

00031694 <api_blocking_start>:
{
   31694:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   31696:	2200      	movs	r2, #0
   31698:	2301      	movs	r3, #1
   3169a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   3169e:	ab04      	add	r3, sp, #16
   316a0:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   316a4:	4a09      	ldr	r2, [pc, #36]	; (316cc <api_blocking_start+0x38>)
   316a6:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   316a8:	f8cd d000 	str.w	sp, [sp]
   316ac:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   316b0:	f005 fe3a 	bl	37328 <api_start>
	if (err < 0) {
   316b4:	2800      	cmp	r0, #0
   316b6:	db05      	blt.n	316c4 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   316b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   316bc:	2300      	movs	r3, #0
   316be:	4668      	mov	r0, sp
   316c0:	f002 fc90 	bl	33fe4 <z_impl_k_sem_take>
}
   316c4:	b007      	add	sp, #28
   316c6:	f85d fb04 	ldr.w	pc, [sp], #4
   316ca:	bf00      	nop
   316cc:	000372fb 	.word	0x000372fb

000316d0 <z_nrf_clock_control_lf_on>:
{
   316d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   316d4:	2201      	movs	r2, #1
   316d6:	4607      	mov	r7, r0
   316d8:	4936      	ldr	r1, [pc, #216]	; (317b4 <z_nrf_clock_control_lf_on+0xe4>)
   316da:	e8d1 3fef 	ldaex	r3, [r1]
   316de:	e8c1 2fe0 	stlex	r0, r2, [r1]
   316e2:	2800      	cmp	r0, #0
   316e4:	d1f9      	bne.n	316da <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   316e6:	b933      	cbnz	r3, 316f6 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   316e8:	4933      	ldr	r1, [pc, #204]	; (317b8 <z_nrf_clock_control_lf_on+0xe8>)
		err = onoff_request(mgr, &cli);
   316ea:	4834      	ldr	r0, [pc, #208]	; (317bc <z_nrf_clock_control_lf_on+0xec>)
   316ec:	604b      	str	r3, [r1, #4]
   316ee:	60cb      	str	r3, [r1, #12]
   316f0:	608a      	str	r2, [r1, #8]
   316f2:	f003 fe8d 	bl	35410 <onoff_request>
	switch (start_mode) {
   316f6:	1e7b      	subs	r3, r7, #1
   316f8:	2b01      	cmp	r3, #1
   316fa:	d82e      	bhi.n	3175a <z_nrf_clock_control_lf_on+0x8a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   316fc:	2f01      	cmp	r7, #1
   316fe:	d106      	bne.n	3170e <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   31700:	4b2f      	ldr	r3, [pc, #188]	; (317c0 <z_nrf_clock_control_lf_on+0xf0>)
   31702:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   31706:	f003 0303 	and.w	r3, r3, #3
   3170a:	2b02      	cmp	r3, #2
   3170c:	d025      	beq.n	3175a <z_nrf_clock_control_lf_on+0x8a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   3170e:	f006 fa51 	bl	37bb4 <k_is_in_isr>
   31712:	4604      	mov	r4, r0
   31714:	b918      	cbnz	r0, 3171e <z_nrf_clock_control_lf_on+0x4e>
	return !z_sys_post_kernel;
   31716:	4b2b      	ldr	r3, [pc, #172]	; (317c4 <z_nrf_clock_control_lf_on+0xf4>)
	int key = isr_mode ? irq_lock() : 0;
   31718:	781b      	ldrb	r3, [r3, #0]
   3171a:	2b00      	cmp	r3, #0
   3171c:	d144      	bne.n	317a8 <z_nrf_clock_control_lf_on+0xd8>
	__asm__ volatile(
   3171e:	f04f 0320 	mov.w	r3, #32
   31722:	f3ef 8611 	mrs	r6, BASEPRI
   31726:	f383 8811 	msr	BASEPRI, r3
   3172a:	f3bf 8f6f 	isb	sy
   3172e:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   31730:	4d23      	ldr	r5, [pc, #140]	; (317c0 <z_nrf_clock_control_lf_on+0xf0>)
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   31732:	f8df 809c 	ldr.w	r8, [pc, #156]	; 317d0 <z_nrf_clock_control_lf_on+0x100>
   31736:	46a9      	mov	r9, r5
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   31738:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   3173c:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   31740:	03d2      	lsls	r2, r2, #15
   31742:	d50c      	bpl.n	3175e <z_nrf_clock_control_lf_on+0x8e>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   31744:	f003 0303 	and.w	r3, r3, #3
   31748:	2b02      	cmp	r3, #2
   3174a:	d001      	beq.n	31750 <z_nrf_clock_control_lf_on+0x80>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   3174c:	2f01      	cmp	r7, #1
   3174e:	d106      	bne.n	3175e <z_nrf_clock_control_lf_on+0x8e>
	if (isr_mode) {
   31750:	b334      	cbz	r4, 317a0 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   31752:	f386 8811 	msr	BASEPRI, r6
   31756:	f3bf 8f6f 	isb	sy
}
   3175a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   3175e:	b1d4      	cbz	r4, 31796 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   31760:	4630      	mov	r0, r6
   31762:	f000 fa89 	bl	31c78 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   31766:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   3176a:	b2db      	uxtb	r3, r3
   3176c:	2b01      	cmp	r3, #1
   3176e:	d1e3      	bne.n	31738 <z_nrf_clock_control_lf_on+0x68>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   31770:	f8d8 2000 	ldr.w	r2, [r8]
		    && nrf_clock_event_check(NRF_CLOCK,
   31774:	2a00      	cmp	r2, #0
   31776:	d0df      	beq.n	31738 <z_nrf_clock_control_lf_on+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   31778:	2200      	movs	r2, #0
   3177a:	f8c8 2000 	str.w	r2, [r8]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   3177e:	f8d8 2000 	ldr.w	r2, [r8]
    p_reg->LFCLKSRC = (uint32_t)(source);
   31782:	2202      	movs	r2, #2
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   31784:	2120      	movs	r1, #32
   31786:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
   3178a:	4a0f      	ldr	r2, [pc, #60]	; (317c8 <z_nrf_clock_control_lf_on+0xf8>)
   3178c:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   31790:	4a0e      	ldr	r2, [pc, #56]	; (317cc <z_nrf_clock_control_lf_on+0xfc>)
   31792:	6013      	str	r3, [r2, #0]
}
   31794:	e7d0      	b.n	31738 <z_nrf_clock_control_lf_on+0x68>
	return z_impl_k_sleep(timeout);
   31796:	2100      	movs	r1, #0
   31798:	2021      	movs	r0, #33	; 0x21
   3179a:	f002 ff35 	bl	34608 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   3179e:	e7e2      	b.n	31766 <z_nrf_clock_control_lf_on+0x96>
    p_reg->INTENSET = mask;
   317a0:	2302      	movs	r3, #2
   317a2:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   317a6:	e7d8      	b.n	3175a <z_nrf_clock_control_lf_on+0x8a>
    p_reg->INTENCLR = mask;
   317a8:	2202      	movs	r2, #2
   317aa:	4b05      	ldr	r3, [pc, #20]	; (317c0 <z_nrf_clock_control_lf_on+0xf0>)
	int key = isr_mode ? irq_lock() : 0;
   317ac:	4606      	mov	r6, r0
   317ae:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   317b2:	e7bd      	b.n	31730 <z_nrf_clock_control_lf_on+0x60>
   317b4:	20008cc8 	.word	0x20008cc8
   317b8:	20008c14 	.word	0x20008c14
   317bc:	20008c40 	.word	0x20008c40
   317c0:	40005000 	.word	0x40005000
   317c4:	2000959b 	.word	0x2000959b
   317c8:	e000e100 	.word	0xe000e100
   317cc:	40005008 	.word	0x40005008
   317d0:	40005104 	.word	0x40005104

000317d4 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
   317d4:	4a04      	ldr	r2, [pc, #16]	; (317e8 <sys_clock_timeout_handler+0x14>)
   317d6:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   317d8:	1ac8      	subs	r0, r1, r3
   317da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   317de:	4403      	add	r3, r0
   317e0:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   317e2:	f003 b8c9 	b.w	34978 <sys_clock_announce>
   317e6:	bf00      	nop
   317e8:	20008cdc 	.word	0x20008cdc

000317ec <set_absolute_alarm>:
{
   317ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   317f0:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   317f4:	f04f 0900 	mov.w	r9, #0
   317f8:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   317fa:	f100 0450 	add.w	r4, r0, #80	; 0x50
   317fe:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
   31802:	00a4      	lsls	r4, r4, #2
   31804:	f506 36a8 	add.w	r6, r6, #86016	; 0x15000
   31808:	b2a4      	uxth	r4, r4
   3180a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    return p_reg->CC[ch];
   3180e:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   31812:	f8df 806c 	ldr.w	r8, [pc, #108]	; 31880 <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
   31816:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   3181a:	f504 34a8 	add.w	r4, r4, #86016	; 0x15000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   3181e:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
   31820:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   31824:	eba3 030a 	sub.w	r3, r3, sl
   31828:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   3182c:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   31830:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
   31832:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
   31836:	d102      	bne.n	3183e <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
   31838:	2013      	movs	r0, #19
   3183a:	f006 fb5a 	bl	37ef2 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   3183e:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
   31842:	1aab      	subs	r3, r5, r2
   31844:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
   31848:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   3184c:	bf88      	it	hi
   3184e:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   31850:	f8c4 9000 	str.w	r9, [r4]
   31854:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   31856:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   3185a:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
   3185e:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
   31862:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   31866:	459a      	cmp	sl, r3
   31868:	d006      	beq.n	31878 <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
   3186a:	1aeb      	subs	r3, r5, r3
   3186c:	3b02      	subs	r3, #2
   3186e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   31872:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   31876:	d801      	bhi.n	3187c <set_absolute_alarm+0x90>
}
   31878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
   3187c:	462b      	mov	r3, r5
   3187e:	e7cf      	b.n	31820 <set_absolute_alarm+0x34>
   31880:	40015000 	.word	0x40015000

00031884 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   31884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   31886:	2400      	movs	r4, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   31888:	4627      	mov	r7, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3188a:	4e0f      	ldr	r6, [pc, #60]	; (318c8 <rtc_nrf_isr+0x44>)
   3188c:	4b0f      	ldr	r3, [pc, #60]	; (318cc <rtc_nrf_isr+0x48>)
    return p_reg->INTENSET & mask;
   3188e:	4a10      	ldr	r2, [pc, #64]	; (318d0 <rtc_nrf_isr+0x4c>)
   31890:	4618      	mov	r0, r3
   31892:	681d      	ldr	r5, [r3, #0]
   31894:	b104      	cbz	r4, 31898 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
   31896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   31898:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
   3189c:	03c9      	lsls	r1, r1, #15
   3189e:	d5fa      	bpl.n	31896 <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   318a0:	6831      	ldr	r1, [r6, #0]
   318a2:	2900      	cmp	r1, #0
   318a4:	d0f7      	beq.n	31896 <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   318a6:	6034      	str	r4, [r6, #0]
   318a8:	6831      	ldr	r1, [r6, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   318aa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   318ae:	f8c2 1348 	str.w	r1, [r2, #840]	; 0x348
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   318b2:	2401      	movs	r4, #1
    return p_reg->CC[ch];
   318b4:	f8d2 1540 	ldr.w	r1, [r2, #1344]	; 0x540
			if (handler) {
   318b8:	b125      	cbz	r5, 318c4 <rtc_nrf_isr+0x40>
				handler(chan, cc_val,
   318ba:	2000      	movs	r0, #0
   318bc:	685a      	ldr	r2, [r3, #4]
   318be:	601f      	str	r7, [r3, #0]
   318c0:	47a8      	blx	r5
   318c2:	e7e3      	b.n	3188c <rtc_nrf_isr+0x8>
   318c4:	6005      	str	r5, [r0, #0]
}
   318c6:	e7e6      	b.n	31896 <rtc_nrf_isr+0x12>
   318c8:	40015140 	.word	0x40015140
   318cc:	20008cd0 	.word	0x20008cd0
   318d0:	40015000 	.word	0x40015000

000318d4 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
   318d4:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
   318d6:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
   318d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   318dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
   318e0:	4d0d      	ldr	r5, [pc, #52]	; (31918 <sys_clock_driver_init+0x44>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   318e2:	2101      	movs	r1, #1
   318e4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
   318e8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   318ec:	4b0b      	ldr	r3, [pc, #44]	; (3191c <sys_clock_driver_init+0x48>)
   318ee:	2015      	movs	r0, #21
   318f0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   318f4:	4622      	mov	r2, r4
   318f6:	f000 f8bf 	bl	31a78 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   318fa:	2015      	movs	r0, #21
   318fc:	f000 f89e 	bl	31a3c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   31900:	2301      	movs	r3, #1
   31902:	4a07      	ldr	r2, [pc, #28]	; (31920 <sys_clock_driver_init+0x4c>)
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
   31904:	2002      	movs	r0, #2
   31906:	6013      	str	r3, [r2, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
   31908:	4a06      	ldr	r2, [pc, #24]	; (31924 <sys_clock_driver_init+0x50>)
   3190a:	602b      	str	r3, [r5, #0]
   3190c:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
   3190e:	f7ff fedf 	bl	316d0 <z_nrf_clock_control_lf_on>

	return 0;
}
   31912:	4620      	mov	r0, r4
   31914:	bd38      	pop	{r3, r4, r5, pc}
   31916:	bf00      	nop
   31918:	40015000 	.word	0x40015000
   3191c:	e000e100 	.word	0xe000e100
   31920:	40015008 	.word	0x40015008
   31924:	20008cd8 	.word	0x20008cd8

00031928 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   31928:	4b13      	ldr	r3, [pc, #76]	; (31978 <sys_clock_set_timeout+0x50>)
   3192a:	f1b0 3fff 	cmp.w	r0, #4294967295
   3192e:	bf08      	it	eq
   31930:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   31932:	3801      	subs	r0, #1
   31934:	2800      	cmp	r0, #0
   31936:	dd1c      	ble.n	31972 <sys_clock_set_timeout+0x4a>
   31938:	4298      	cmp	r0, r3
   3193a:	bfa8      	it	ge
   3193c:	4618      	movge	r0, r3
     return p_reg->COUNTER;
   3193e:	4b0f      	ldr	r3, [pc, #60]	; (3197c <sys_clock_set_timeout+0x54>)
   31940:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
   31944:	4b0e      	ldr	r3, [pc, #56]	; (31980 <sys_clock_set_timeout+0x58>)
   31946:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
   31948:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
   3194a:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   3194e:	bf18      	it	ne
   31950:	2000      	movne	r0, #0
	return (a - b) & COUNTER_MAX;
   31952:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   31956:	3301      	adds	r3, #1
	cc_data[chan].callback = handler;
   31958:	4a0a      	ldr	r2, [pc, #40]	; (31984 <sys_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   3195a:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
   3195c:	480a      	ldr	r0, [pc, #40]	; (31988 <sys_clock_set_timeout+0x60>)
   3195e:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
   31960:	2000      	movs	r0, #0
   31962:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
   31964:	4a04      	ldr	r2, [pc, #16]	; (31978 <sys_clock_set_timeout+0x50>)
   31966:	4293      	cmp	r3, r2
   31968:	bf94      	ite	ls
   3196a:	18c9      	addls	r1, r1, r3
   3196c:	1889      	addhi	r1, r1, r2
   3196e:	f7ff bf3d 	b.w	317ec <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   31972:	2000      	movs	r0, #0
   31974:	e7e3      	b.n	3193e <sys_clock_set_timeout+0x16>
   31976:	bf00      	nop
   31978:	007fffff 	.word	0x007fffff
   3197c:	40015000 	.word	0x40015000
   31980:	20008cdc 	.word	0x20008cdc
   31984:	20008cd0 	.word	0x20008cd0
   31988:	000317d5 	.word	0x000317d5

0003198c <sys_clock_elapsed>:
   3198c:	4b04      	ldr	r3, [pc, #16]	; (319a0 <sys_clock_elapsed+0x14>)
   3198e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
   31992:	4b04      	ldr	r3, [pc, #16]	; (319a4 <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
   31994:	681b      	ldr	r3, [r3, #0]
   31996:	1ac0      	subs	r0, r0, r3
}
   31998:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   3199c:	4770      	bx	lr
   3199e:	bf00      	nop
   319a0:	40015000 	.word	0x40015000
   319a4:	20008cdc 	.word	0x20008cdc

000319a8 <sys_clock_cycle_get_32>:
	__asm__ volatile(
   319a8:	f04f 0320 	mov.w	r3, #32
   319ac:	f3ef 8211 	mrs	r2, BASEPRI
   319b0:	f383 8811 	msr	BASEPRI, r3
   319b4:	f3bf 8f6f 	isb	sy

uint32_t sys_clock_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   319b8:	4906      	ldr	r1, [pc, #24]	; (319d4 <sys_clock_cycle_get_32+0x2c>)
   319ba:	4b07      	ldr	r3, [pc, #28]	; (319d8 <sys_clock_cycle_get_32+0x30>)
   319bc:	6808      	ldr	r0, [r1, #0]
   319be:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
   319c2:	f382 8811 	msr	BASEPRI, r2
   319c6:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
   319ca:	1a1b      	subs	r3, r3, r0
   319cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
   319d0:	4418      	add	r0, r3
   319d2:	4770      	bx	lr
   319d4:	20008cdc 	.word	0x20008cdc
   319d8:	40015000 	.word	0x40015000

000319dc <before_nse>:
#include <arch/arm/aarch32/cortex_m/fpu.h>

static struct fpu_ctx_full context_buffer;

void before_nse(void)
{
   319dc:	b508      	push	{r3, lr}
	k_sched_lock();
   319de:	f002 fb85 	bl	340ec <k_sched_lock>
	z_arm_save_fp_context(&context_buffer);
}
   319e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_save_fp_context(&context_buffer);
   319e6:	4801      	ldr	r0, [pc, #4]	; (319ec <before_nse+0x10>)
   319e8:	f005 bcdb 	b.w	373a2 <z_arm_save_fp_context>
   319ec:	20008ce0 	.word	0x20008ce0

000319f0 <after_nse>:

void after_nse(void)
{
   319f0:	b508      	push	{r3, lr}
	k_sched_unlock();
   319f2:	f002 fc6d 	bl	342d0 <k_sched_unlock>
	z_arm_restore_fp_context(&context_buffer);
}
   319f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_restore_fp_context(&context_buffer);
   319fa:	4801      	ldr	r0, [pc, #4]	; (31a00 <after_nse+0x10>)
   319fc:	f005 bcd2 	b.w	373a4 <z_arm_restore_fp_context>
   31a00:	20008ce0 	.word	0x20008ce0

00031a04 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   31a04:	4a0a      	ldr	r2, [pc, #40]	; (31a30 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
   31a06:	490b      	ldr	r1, [pc, #44]	; (31a34 <arch_swap+0x30>)
	_current->arch.basepri = key;
   31a08:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   31a0a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   31a0c:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
   31a10:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   31a14:	4908      	ldr	r1, [pc, #32]	; (31a38 <arch_swap+0x34>)
   31a16:	684b      	ldr	r3, [r1, #4]
   31a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   31a1c:	604b      	str	r3, [r1, #4]
   31a1e:	2300      	movs	r3, #0
   31a20:	f383 8811 	msr	BASEPRI, r3
   31a24:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   31a28:	6893      	ldr	r3, [r2, #8]
}
   31a2a:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
   31a2e:	4770      	bx	lr
   31a30:	20008e30 	.word	0x20008e30
   31a34:	0003af38 	.word	0x0003af38
   31a38:	e000ed00 	.word	0xe000ed00

00031a3c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   31a3c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   31a3e:	2b00      	cmp	r3, #0
   31a40:	db08      	blt.n	31a54 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   31a42:	2201      	movs	r2, #1
   31a44:	f000 001f 	and.w	r0, r0, #31
   31a48:	fa02 f000 	lsl.w	r0, r2, r0
   31a4c:	4a02      	ldr	r2, [pc, #8]	; (31a58 <arch_irq_enable+0x1c>)
   31a4e:	095b      	lsrs	r3, r3, #5
   31a50:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   31a54:	4770      	bx	lr
   31a56:	bf00      	nop
   31a58:	e000e100 	.word	0xe000e100

00031a5c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   31a5c:	4b05      	ldr	r3, [pc, #20]	; (31a74 <arch_irq_is_enabled+0x18>)
   31a5e:	0942      	lsrs	r2, r0, #5
   31a60:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   31a64:	2301      	movs	r3, #1
   31a66:	f000 001f 	and.w	r0, r0, #31
   31a6a:	fa03 f000 	lsl.w	r0, r3, r0
}
   31a6e:	4010      	ands	r0, r2
   31a70:	4770      	bx	lr
   31a72:	bf00      	nop
   31a74:	e000e100 	.word	0xe000e100

00031a78 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   31a78:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   31a7a:	2b00      	cmp	r3, #0
		prio += _IRQ_PRIO_OFFSET;
   31a7c:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   31a80:	bfac      	ite	ge
   31a82:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   31a86:	4b06      	ldrlt	r3, [pc, #24]	; (31aa0 <z_arm_irq_priority_set+0x28>)
   31a88:	ea4f 1141 	mov.w	r1, r1, lsl #5
   31a8c:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   31a8e:	bfab      	itete	ge
   31a90:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   31a94:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   31a98:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   31a9c:	5419      	strblt	r1, [r3, r0]
}
   31a9e:	4770      	bx	lr
   31aa0:	e000ed14 	.word	0xe000ed14

00031aa4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   31aa4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   31aa8:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   31aaa:	490b      	ldr	r1, [pc, #44]	; (31ad8 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
   31aac:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   31ab0:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   31ab2:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   31ab6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   31aba:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   31abc:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   31ac0:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   31ac4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   31ac8:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   31acc:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   31ace:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   31ad0:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   31ad2:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   31ad6:	4770      	bx	lr
   31ad8:	000354a3 	.word	0x000354a3

00031adc <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   31adc:	4b09      	ldr	r3, [pc, #36]	; (31b04 <arch_switch_to_main_thread+0x28>)
   31ade:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   31ae0:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   31ae4:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   31ae8:	4610      	mov	r0, r2
   31aea:	f381 8809 	msr	PSP, r1
   31aee:	2100      	movs	r1, #0
   31af0:	b663      	cpsie	if
   31af2:	f381 8811 	msr	BASEPRI, r1
   31af6:	f3bf 8f6f 	isb	sy
   31afa:	2200      	movs	r2, #0
   31afc:	2300      	movs	r3, #0
   31afe:	f003 fcd0 	bl	354a2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   31b02:	bf00      	nop
   31b04:	20008e30 	.word	0x20008e30

00031b08 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   31b08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   31b0a:	4607      	mov	r7, r0

	if (esf != NULL) {
   31b0c:	460c      	mov	r4, r1
   31b0e:	b361      	cbz	r1, 31b6a <z_arm_fatal_error+0x62>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   31b10:	4e19      	ldr	r6, [pc, #100]	; (31b78 <z_arm_fatal_error+0x70>)
   31b12:	6833      	ldr	r3, [r6, #0]
   31b14:	0758      	lsls	r0, r3, #29
   31b16:	d028      	beq.n	31b6a <z_arm_fatal_error+0x62>
   31b18:	4d18      	ldr	r5, [pc, #96]	; (31b7c <z_arm_fatal_error+0x74>)
   31b1a:	4819      	ldr	r0, [pc, #100]	; (31b80 <z_arm_fatal_error+0x78>)
   31b1c:	1b75      	subs	r5, r6, r5
   31b1e:	08ad      	lsrs	r5, r5, #2
   31b20:	01ad      	lsls	r5, r5, #6
   31b22:	f045 0501 	orr.w	r5, r5, #1
   31b26:	f8ad 5000 	strh.w	r5, [sp]
   31b2a:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   31b2e:	6809      	ldr	r1, [r1, #0]
   31b30:	f004 f8b7 	bl	35ca2 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   31b34:	6833      	ldr	r3, [r6, #0]
   31b36:	0759      	lsls	r1, r3, #29
   31b38:	d017      	beq.n	31b6a <z_arm_fatal_error+0x62>
   31b3a:	f8ad 5000 	strh.w	r5, [sp]
   31b3e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   31b42:	68e1      	ldr	r1, [r4, #12]
   31b44:	480f      	ldr	r0, [pc, #60]	; (31b84 <z_arm_fatal_error+0x7c>)
   31b46:	f004 f8ac 	bl	35ca2 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   31b4a:	6833      	ldr	r3, [r6, #0]
   31b4c:	075a      	lsls	r2, r3, #29
   31b4e:	d00c      	beq.n	31b6a <z_arm_fatal_error+0x62>
   31b50:	462a      	mov	r2, r5
   31b52:	69e1      	ldr	r1, [r4, #28]
   31b54:	480c      	ldr	r0, [pc, #48]	; (31b88 <z_arm_fatal_error+0x80>)
   31b56:	f004 f877 	bl	35c48 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   31b5a:	6833      	ldr	r3, [r6, #0]
   31b5c:	075b      	lsls	r3, r3, #29
   31b5e:	d004      	beq.n	31b6a <z_arm_fatal_error+0x62>
   31b60:	462a      	mov	r2, r5
   31b62:	69a1      	ldr	r1, [r4, #24]
   31b64:	4809      	ldr	r0, [pc, #36]	; (31b8c <z_arm_fatal_error+0x84>)
   31b66:	f004 f86f 	bl	35c48 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   31b6a:	4621      	mov	r1, r4
   31b6c:	4638      	mov	r0, r7
}
   31b6e:	b003      	add	sp, #12
   31b70:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	z_fatal_error(reason, esf);
   31b74:	f001 bd8e 	b.w	33694 <z_fatal_error>
   31b78:	2000816c 	.word	0x2000816c
   31b7c:	20008154 	.word	0x20008154
   31b80:	0003c606 	.word	0x0003c606
   31b84:	0003c635 	.word	0x0003c635
   31b88:	0003c664 	.word	0x0003c664
   31b8c:	0003c673 	.word	0x0003c673

00031b90 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   31b90:	4a0e      	ldr	r2, [pc, #56]	; (31bcc <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   31b92:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   31b94:	4b0e      	ldr	r3, [pc, #56]	; (31bd0 <z_arm_prep_c+0x40>)
   31b96:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   31b9a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   31b9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   31ba0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   31ba4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   31ba8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   31bac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   31bb0:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   31bb4:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   31bb8:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   31bbc:	f001 fde2 	bl	33784 <z_bss_zero>
	z_data_copy();
   31bc0:	f002 fdc2 	bl	34748 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   31bc4:	f000 fbaa 	bl	3231c <z_arm_interrupt_init>
	z_cstart();
   31bc8:	f001 fe00 	bl	337cc <z_cstart>
   31bcc:	00020000 	.word	0x00020000
   31bd0:	e000ed00 	.word	0xe000ed00

00031bd4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   31bd4:	4914      	ldr	r1, [pc, #80]	; (31c28 <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
   31bd6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   31bd8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   31bdc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   31bde:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   31be2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   31be6:	2020      	movs	r0, #32
    msr BASEPRI, r0
   31be8:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   31bec:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   31bf0:	4f0e      	ldr	r7, [pc, #56]	; (31c2c <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   31bf2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   31bf6:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   31bf8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   31bfa:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   31bfc:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
   31c00:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   31c02:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   31c06:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   31c0a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   31c0e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   31c12:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   31c16:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   31c1a:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   31c1c:	f005 fbb1 	bl	37382 <configure_builtin_stack_guard>
    pop {r2, lr}
   31c20:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   31c24:	4770      	bx	lr
   31c26:	0000      	.short	0x0000
    ldr r1, =_kernel
   31c28:	20008e30 	.word	0x20008e30
    ldr v4, =_SCS_ICSR
   31c2c:	e000ed04 	.word	0xe000ed04

00031c30 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   31c30:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   31c34:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   31c36:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   31c3a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   31c3e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   31c40:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   31c44:	2902      	cmp	r1, #2
    beq _oops
   31c46:	d0ff      	beq.n	31c48 <_oops>

00031c48 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   31c48:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   31c4a:	f005 fb9f 	bl	3738c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   31c4e:	bd01      	pop	{r0, pc}

00031c50 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   31c50:	4901      	ldr	r1, [pc, #4]	; (31c58 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   31c52:	2210      	movs	r2, #16
	str	r2, [r1]
   31c54:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   31c56:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   31c58:	e000ed10 	.word	0xe000ed10

00031c5c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   31c5c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   31c5e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   31c60:	f380 8811 	msr	BASEPRI, r0
	isb
   31c64:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   31c68:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   31c6c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   31c6e:	b662      	cpsie	i
	isb
   31c70:	f3bf 8f6f 	isb	sy

	bx	lr
   31c74:	4770      	bx	lr
   31c76:	bf00      	nop

00031c78 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   31c78:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   31c7a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   31c7c:	f381 8811 	msr	BASEPRI, r1

	wfe
   31c80:	bf20      	wfe

	msr	BASEPRI, r0
   31c82:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   31c86:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   31c88:	4770      	bx	lr
   31c8a:	bf00      	nop

00031c8c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   31c8c:	bf30      	wfi
    b z_SysNmiOnReset
   31c8e:	f7ff bffd 	b.w	31c8c <z_SysNmiOnReset>
   31c92:	bf00      	nop

00031c94 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   31c94:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   31c96:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   31c98:	4a0b      	ldr	r2, [pc, #44]	; (31cc8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   31c9a:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   31c9c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   31c9e:	bf1e      	ittt	ne
	movne	r1, #0
   31ca0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   31ca2:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
   31ca4:	f005 ff9e 	blne	37be4 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   31ca8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   31caa:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   31cae:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   31cb2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   31cb6:	4905      	ldr	r1, [pc, #20]	; (31ccc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   31cb8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   31cba:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   31cbc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   31cbe:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   31cc2:	4903      	ldr	r1, [pc, #12]	; (31cd0 <_isr_wrapper+0x3c>)
	bx r1
   31cc4:	4708      	bx	r1
   31cc6:	0000      	.short	0x0000
	ldr r2, =_kernel
   31cc8:	20008e30 	.word	0x20008e30
	ldr r1, =_sw_isr_table
   31ccc:	000382e0 	.word	0x000382e0
	ldr r1, =z_arm_int_exit
   31cd0:	00031d25 	.word	0x00031d25

00031cd4 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   31cd4:	f003 ff43 	bl	35b5e <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   31cd8:	2020      	movs	r0, #32
    msr BASEPRI, r0
   31cda:	f380 8811 	msr	BASEPRI, r0
 * (may be larger due to rounding up for stack pointer aligning
 * purposes but this is sufficient during initialization).
 */

#ifdef CONFIG_INIT_STACKS
    ldr r0, =z_interrupt_stacks
   31cde:	480b      	ldr	r0, [pc, #44]	; (31d0c <__start+0x38>)
    ldr r1, =0xaa
   31ce0:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   31ce4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bl memset
   31ce8:	f005 fcbd 	bl	37666 <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   31cec:	4807      	ldr	r0, [pc, #28]	; (31d0c <__start+0x38>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   31cee:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   31cf2:	1840      	adds	r0, r0, r1
    msr PSP, r0
   31cf4:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   31cf8:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   31cfc:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   31cfe:	4308      	orrs	r0, r1
    msr CONTROL, r0
   31d00:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   31d04:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   31d08:	f7ff ff42 	bl	31b90 <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
   31d0c:	20015de0 	.word	0x20015de0

00031d10 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   31d10:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   31d14:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   31d18:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   31d1a:	4672      	mov	r2, lr
	bl z_arm_fault
   31d1c:	f000 f9ec 	bl	320f8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   31d20:	bd01      	pop	{r0, pc}
   31d22:	bf00      	nop

00031d24 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   31d24:	4b04      	ldr	r3, [pc, #16]	; (31d38 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   31d26:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   31d28:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   31d2a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   31d2c:	d003      	beq.n	31d36 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   31d2e:	4903      	ldr	r1, [pc, #12]	; (31d3c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   31d30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   31d34:	600a      	str	r2, [r1, #0]

00031d36 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   31d36:	4770      	bx	lr
	ldr r3, =_kernel
   31d38:	20008e30 	.word	0x20008e30
	ldr r1, =_SCS_ICSR
   31d3c:	e000ed04 	.word	0xe000ed04

00031d40 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   31d40:	b538      	push	{r3, r4, r5, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   31d42:	4c44      	ldr	r4, [pc, #272]	; (31e54 <usage_fault.isra.0+0x114>)
   31d44:	6823      	ldr	r3, [r4, #0]
   31d46:	075d      	lsls	r5, r3, #29
   31d48:	d008      	beq.n	31d5c <usage_fault.isra.0+0x1c>
   31d4a:	4943      	ldr	r1, [pc, #268]	; (31e58 <usage_fault.isra.0+0x118>)
   31d4c:	4843      	ldr	r0, [pc, #268]	; (31e5c <usage_fault.isra.0+0x11c>)
   31d4e:	1a61      	subs	r1, r4, r1
   31d50:	0889      	lsrs	r1, r1, #2
   31d52:	0189      	lsls	r1, r1, #6
   31d54:	f041 0101 	orr.w	r1, r1, #1
   31d58:	f003 ff69 	bl	35c2e <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   31d5c:	4b40      	ldr	r3, [pc, #256]	; (31e60 <usage_fault.isra.0+0x120>)
   31d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   31d60:	0198      	lsls	r0, r3, #6
   31d62:	d50b      	bpl.n	31d7c <usage_fault.isra.0+0x3c>
		PR_FAULT_INFO("  Division by zero");
   31d64:	6823      	ldr	r3, [r4, #0]
   31d66:	0759      	lsls	r1, r3, #29
   31d68:	d008      	beq.n	31d7c <usage_fault.isra.0+0x3c>
   31d6a:	493b      	ldr	r1, [pc, #236]	; (31e58 <usage_fault.isra.0+0x118>)
   31d6c:	483d      	ldr	r0, [pc, #244]	; (31e64 <usage_fault.isra.0+0x124>)
   31d6e:	1a61      	subs	r1, r4, r1
   31d70:	0889      	lsrs	r1, r1, #2
   31d72:	0189      	lsls	r1, r1, #6
   31d74:	f041 0101 	orr.w	r1, r1, #1
   31d78:	f003 ff59 	bl	35c2e <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   31d7c:	4b38      	ldr	r3, [pc, #224]	; (31e60 <usage_fault.isra.0+0x120>)
   31d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   31d80:	01da      	lsls	r2, r3, #7
   31d82:	d50b      	bpl.n	31d9c <usage_fault.isra.0+0x5c>
		PR_FAULT_INFO("  Unaligned memory access");
   31d84:	6823      	ldr	r3, [r4, #0]
   31d86:	075b      	lsls	r3, r3, #29
   31d88:	d008      	beq.n	31d9c <usage_fault.isra.0+0x5c>
   31d8a:	4933      	ldr	r1, [pc, #204]	; (31e58 <usage_fault.isra.0+0x118>)
   31d8c:	4836      	ldr	r0, [pc, #216]	; (31e68 <usage_fault.isra.0+0x128>)
   31d8e:	1a61      	subs	r1, r4, r1
   31d90:	0889      	lsrs	r1, r1, #2
   31d92:	0189      	lsls	r1, r1, #6
   31d94:	f041 0101 	orr.w	r1, r1, #1
   31d98:	f003 ff49 	bl	35c2e <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   31d9c:	4b30      	ldr	r3, [pc, #192]	; (31e60 <usage_fault.isra.0+0x120>)
   31d9e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   31da0:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
   31da4:	d00c      	beq.n	31dc0 <usage_fault.isra.0+0x80>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   31da6:	6823      	ldr	r3, [r4, #0]
   31da8:	075d      	lsls	r5, r3, #29
   31daa:	d008      	beq.n	31dbe <usage_fault.isra.0+0x7e>
   31dac:	492a      	ldr	r1, [pc, #168]	; (31e58 <usage_fault.isra.0+0x118>)
   31dae:	482f      	ldr	r0, [pc, #188]	; (31e6c <usage_fault.isra.0+0x12c>)
   31db0:	1a61      	subs	r1, r4, r1
   31db2:	0889      	lsrs	r1, r1, #2
   31db4:	0189      	lsls	r1, r1, #6
   31db6:	f041 0101 	orr.w	r1, r1, #1
   31dba:	f003 ff38 	bl	35c2e <log_0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   31dbe:	2502      	movs	r5, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   31dc0:	4b27      	ldr	r3, [pc, #156]	; (31e60 <usage_fault.isra.0+0x120>)
   31dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   31dc4:	0318      	lsls	r0, r3, #12
   31dc6:	d50b      	bpl.n	31de0 <usage_fault.isra.0+0xa0>
		PR_FAULT_INFO("  No coprocessor instructions");
   31dc8:	6823      	ldr	r3, [r4, #0]
   31dca:	0759      	lsls	r1, r3, #29
   31dcc:	d008      	beq.n	31de0 <usage_fault.isra.0+0xa0>
   31dce:	4922      	ldr	r1, [pc, #136]	; (31e58 <usage_fault.isra.0+0x118>)
   31dd0:	4827      	ldr	r0, [pc, #156]	; (31e70 <usage_fault.isra.0+0x130>)
   31dd2:	1a61      	subs	r1, r4, r1
   31dd4:	0889      	lsrs	r1, r1, #2
   31dd6:	0189      	lsls	r1, r1, #6
   31dd8:	f041 0101 	orr.w	r1, r1, #1
   31ddc:	f003 ff27 	bl	35c2e <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   31de0:	4b1f      	ldr	r3, [pc, #124]	; (31e60 <usage_fault.isra.0+0x120>)
   31de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   31de4:	035a      	lsls	r2, r3, #13
   31de6:	d50b      	bpl.n	31e00 <usage_fault.isra.0+0xc0>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   31de8:	6823      	ldr	r3, [r4, #0]
   31dea:	075b      	lsls	r3, r3, #29
   31dec:	d008      	beq.n	31e00 <usage_fault.isra.0+0xc0>
   31dee:	491a      	ldr	r1, [pc, #104]	; (31e58 <usage_fault.isra.0+0x118>)
   31df0:	4820      	ldr	r0, [pc, #128]	; (31e74 <usage_fault.isra.0+0x134>)
   31df2:	1a61      	subs	r1, r4, r1
   31df4:	0889      	lsrs	r1, r1, #2
   31df6:	0189      	lsls	r1, r1, #6
   31df8:	f041 0101 	orr.w	r1, r1, #1
   31dfc:	f003 ff17 	bl	35c2e <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   31e00:	4b17      	ldr	r3, [pc, #92]	; (31e60 <usage_fault.isra.0+0x120>)
   31e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   31e04:	0398      	lsls	r0, r3, #14
   31e06:	d50b      	bpl.n	31e20 <usage_fault.isra.0+0xe0>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   31e08:	6823      	ldr	r3, [r4, #0]
   31e0a:	0759      	lsls	r1, r3, #29
   31e0c:	d008      	beq.n	31e20 <usage_fault.isra.0+0xe0>
   31e0e:	4912      	ldr	r1, [pc, #72]	; (31e58 <usage_fault.isra.0+0x118>)
   31e10:	4819      	ldr	r0, [pc, #100]	; (31e78 <usage_fault.isra.0+0x138>)
   31e12:	1a61      	subs	r1, r4, r1
   31e14:	0889      	lsrs	r1, r1, #2
   31e16:	0189      	lsls	r1, r1, #6
   31e18:	f041 0101 	orr.w	r1, r1, #1
   31e1c:	f003 ff07 	bl	35c2e <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   31e20:	4b0f      	ldr	r3, [pc, #60]	; (31e60 <usage_fault.isra.0+0x120>)
   31e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   31e24:	03da      	lsls	r2, r3, #15
   31e26:	d50b      	bpl.n	31e40 <usage_fault.isra.0+0x100>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   31e28:	6823      	ldr	r3, [r4, #0]
   31e2a:	075b      	lsls	r3, r3, #29
   31e2c:	d008      	beq.n	31e40 <usage_fault.isra.0+0x100>
   31e2e:	490a      	ldr	r1, [pc, #40]	; (31e58 <usage_fault.isra.0+0x118>)
   31e30:	4812      	ldr	r0, [pc, #72]	; (31e7c <usage_fault.isra.0+0x13c>)
   31e32:	1a61      	subs	r1, r4, r1
   31e34:	0889      	lsrs	r1, r1, #2
   31e36:	0189      	lsls	r1, r1, #6
   31e38:	f041 0101 	orr.w	r1, r1, #1
   31e3c:	f003 fef7 	bl	35c2e <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   31e40:	4a07      	ldr	r2, [pc, #28]	; (31e60 <usage_fault.isra.0+0x120>)

	return reason;
}
   31e42:	4628      	mov	r0, r5
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   31e44:	6a93      	ldr	r3, [r2, #40]	; 0x28
   31e46:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   31e4a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   31e4e:	6293      	str	r3, [r2, #40]	; 0x28
}
   31e50:	bd38      	pop	{r3, r4, r5, pc}
   31e52:	bf00      	nop
   31e54:	2000816c 	.word	0x2000816c
   31e58:	20008154 	.word	0x20008154
   31e5c:	0003c6a1 	.word	0x0003c6a1
   31e60:	e000ed00 	.word	0xe000ed00
   31e64:	0003c6b9 	.word	0x0003c6b9
   31e68:	0003c6cc 	.word	0x0003c6cc
   31e6c:	0003c6e6 	.word	0x0003c6e6
   31e70:	0003c710 	.word	0x0003c710
   31e74:	0003c72e 	.word	0x0003c72e
   31e78:	0003c753 	.word	0x0003c753
   31e7c:	0003c76d 	.word	0x0003c76d

00031e80 <mem_manage_fault.isra.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   31e80:	b570      	push	{r4, r5, r6, lr}
	PR_FAULT_INFO("***** MPU FAULT *****");
   31e82:	4c41      	ldr	r4, [pc, #260]	; (31f88 <mem_manage_fault.isra.0+0x108>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   31e84:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   31e86:	6823      	ldr	r3, [r4, #0]
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   31e88:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
   31e8a:	0759      	lsls	r1, r3, #29
   31e8c:	d008      	beq.n	31ea0 <mem_manage_fault.isra.0+0x20>
   31e8e:	493f      	ldr	r1, [pc, #252]	; (31f8c <mem_manage_fault.isra.0+0x10c>)
   31e90:	483f      	ldr	r0, [pc, #252]	; (31f90 <mem_manage_fault.isra.0+0x110>)
   31e92:	1a61      	subs	r1, r4, r1
   31e94:	0889      	lsrs	r1, r1, #2
   31e96:	0189      	lsls	r1, r1, #6
   31e98:	f041 0101 	orr.w	r1, r1, #1
   31e9c:	f003 fec7 	bl	35c2e <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   31ea0:	4b3c      	ldr	r3, [pc, #240]	; (31f94 <mem_manage_fault.isra.0+0x114>)
   31ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   31ea4:	06da      	lsls	r2, r3, #27
   31ea6:	d50b      	bpl.n	31ec0 <mem_manage_fault.isra.0+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
   31ea8:	6823      	ldr	r3, [r4, #0]
   31eaa:	075b      	lsls	r3, r3, #29
   31eac:	d008      	beq.n	31ec0 <mem_manage_fault.isra.0+0x40>
   31eae:	4937      	ldr	r1, [pc, #220]	; (31f8c <mem_manage_fault.isra.0+0x10c>)
   31eb0:	4839      	ldr	r0, [pc, #228]	; (31f98 <mem_manage_fault.isra.0+0x118>)
   31eb2:	1a61      	subs	r1, r4, r1
   31eb4:	0889      	lsrs	r1, r1, #2
   31eb6:	0189      	lsls	r1, r1, #6
   31eb8:	f041 0101 	orr.w	r1, r1, #1
   31ebc:	f003 feb7 	bl	35c2e <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   31ec0:	4b34      	ldr	r3, [pc, #208]	; (31f94 <mem_manage_fault.isra.0+0x114>)
   31ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   31ec4:	0718      	lsls	r0, r3, #28
   31ec6:	d50b      	bpl.n	31ee0 <mem_manage_fault.isra.0+0x60>
		PR_FAULT_INFO("  Unstacking error");
   31ec8:	6823      	ldr	r3, [r4, #0]
   31eca:	0759      	lsls	r1, r3, #29
   31ecc:	d008      	beq.n	31ee0 <mem_manage_fault.isra.0+0x60>
   31ece:	492f      	ldr	r1, [pc, #188]	; (31f8c <mem_manage_fault.isra.0+0x10c>)
   31ed0:	4832      	ldr	r0, [pc, #200]	; (31f9c <mem_manage_fault.isra.0+0x11c>)
   31ed2:	1a61      	subs	r1, r4, r1
   31ed4:	0889      	lsrs	r1, r1, #2
   31ed6:	0189      	lsls	r1, r1, #6
   31ed8:	f041 0101 	orr.w	r1, r1, #1
   31edc:	f003 fea7 	bl	35c2e <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   31ee0:	4b2c      	ldr	r3, [pc, #176]	; (31f94 <mem_manage_fault.isra.0+0x114>)
   31ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   31ee4:	079a      	lsls	r2, r3, #30
   31ee6:	d522      	bpl.n	31f2e <mem_manage_fault.isra.0+0xae>
		PR_FAULT_INFO("  Data Access Violation");
   31ee8:	6823      	ldr	r3, [r4, #0]
   31eea:	075b      	lsls	r3, r3, #29
   31eec:	d008      	beq.n	31f00 <mem_manage_fault.isra.0+0x80>
   31eee:	4927      	ldr	r1, [pc, #156]	; (31f8c <mem_manage_fault.isra.0+0x10c>)
   31ef0:	482b      	ldr	r0, [pc, #172]	; (31fa0 <mem_manage_fault.isra.0+0x120>)
   31ef2:	1a61      	subs	r1, r4, r1
   31ef4:	0889      	lsrs	r1, r1, #2
   31ef6:	0189      	lsls	r1, r1, #6
   31ef8:	f041 0101 	orr.w	r1, r1, #1
   31efc:	f003 fe97 	bl	35c2e <log_0>
		uint32_t temp = SCB->MMFAR;
   31f00:	4b24      	ldr	r3, [pc, #144]	; (31f94 <mem_manage_fault.isra.0+0x114>)
   31f02:	6b59      	ldr	r1, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   31f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   31f06:	0618      	lsls	r0, r3, #24
   31f08:	d511      	bpl.n	31f2e <mem_manage_fault.isra.0+0xae>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   31f0a:	6823      	ldr	r3, [r4, #0]
   31f0c:	075a      	lsls	r2, r3, #29
   31f0e:	d008      	beq.n	31f22 <mem_manage_fault.isra.0+0xa2>
   31f10:	4a1e      	ldr	r2, [pc, #120]	; (31f8c <mem_manage_fault.isra.0+0x10c>)
   31f12:	4824      	ldr	r0, [pc, #144]	; (31fa4 <mem_manage_fault.isra.0+0x124>)
   31f14:	1aa2      	subs	r2, r4, r2
   31f16:	0892      	lsrs	r2, r2, #2
   31f18:	0192      	lsls	r2, r2, #6
   31f1a:	f042 0201 	orr.w	r2, r2, #1
   31f1e:	f003 fe93 	bl	35c48 <log_1>
			if (from_hard_fault != 0) {
   31f22:	b126      	cbz	r6, 31f2e <mem_manage_fault.isra.0+0xae>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   31f24:	4a1b      	ldr	r2, [pc, #108]	; (31f94 <mem_manage_fault.isra.0+0x114>)
   31f26:	6a93      	ldr	r3, [r2, #40]	; 0x28
   31f28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   31f2c:	6293      	str	r3, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   31f2e:	4b19      	ldr	r3, [pc, #100]	; (31f94 <mem_manage_fault.isra.0+0x114>)
   31f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   31f32:	07db      	lsls	r3, r3, #31
   31f34:	d50b      	bpl.n	31f4e <mem_manage_fault.isra.0+0xce>
		PR_FAULT_INFO("  Instruction Access Violation");
   31f36:	6823      	ldr	r3, [r4, #0]
   31f38:	075e      	lsls	r6, r3, #29
   31f3a:	d008      	beq.n	31f4e <mem_manage_fault.isra.0+0xce>
   31f3c:	4b13      	ldr	r3, [pc, #76]	; (31f8c <mem_manage_fault.isra.0+0x10c>)
   31f3e:	481a      	ldr	r0, [pc, #104]	; (31fa8 <mem_manage_fault.isra.0+0x128>)
   31f40:	1ae3      	subs	r3, r4, r3
   31f42:	089b      	lsrs	r3, r3, #2
   31f44:	019b      	lsls	r3, r3, #6
   31f46:	f043 0101 	orr.w	r1, r3, #1
   31f4a:	f003 fe70 	bl	35c2e <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   31f4e:	4b11      	ldr	r3, [pc, #68]	; (31f94 <mem_manage_fault.isra.0+0x114>)
   31f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   31f52:	0698      	lsls	r0, r3, #26
   31f54:	d50b      	bpl.n	31f6e <mem_manage_fault.isra.0+0xee>
		PR_FAULT_INFO(
   31f56:	6823      	ldr	r3, [r4, #0]
   31f58:	0759      	lsls	r1, r3, #29
   31f5a:	d008      	beq.n	31f6e <mem_manage_fault.isra.0+0xee>
   31f5c:	490b      	ldr	r1, [pc, #44]	; (31f8c <mem_manage_fault.isra.0+0x10c>)
   31f5e:	4813      	ldr	r0, [pc, #76]	; (31fac <mem_manage_fault.isra.0+0x12c>)
   31f60:	1a64      	subs	r4, r4, r1
   31f62:	08a4      	lsrs	r4, r4, #2
   31f64:	01a4      	lsls	r4, r4, #6
   31f66:	f044 0101 	orr.w	r1, r4, #1
   31f6a:	f003 fe60 	bl	35c2e <log_0>
	*recoverable = memory_fault_recoverable(esf, true);
   31f6e:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   31f70:	4b08      	ldr	r3, [pc, #32]	; (31f94 <mem_manage_fault.isra.0+0x114>)
   31f72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   31f74:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   31f76:	bf58      	it	pl
   31f78:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   31f7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   31f7c:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   31f80:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   31f82:	7028      	strb	r0, [r5, #0]
}
   31f84:	bd70      	pop	{r4, r5, r6, pc}
   31f86:	bf00      	nop
   31f88:	2000816c 	.word	0x2000816c
   31f8c:	20008154 	.word	0x20008154
   31f90:	0003c798 	.word	0x0003c798
   31f94:	e000ed00 	.word	0xe000ed00
   31f98:	0003c7ae 	.word	0x0003c7ae
   31f9c:	0003c7e1 	.word	0x0003c7e1
   31fa0:	0003c7f4 	.word	0x0003c7f4
   31fa4:	0003c80c 	.word	0x0003c80c
   31fa8:	0003c822 	.word	0x0003c822
   31fac:	0003c841 	.word	0x0003c841

00031fb0 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   31fb0:	b570      	push	{r4, r5, r6, lr}
	PR_FAULT_INFO("***** BUS FAULT *****");
   31fb2:	4c46      	ldr	r4, [pc, #280]	; (320cc <bus_fault.isra.0+0x11c>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   31fb4:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   31fb6:	6823      	ldr	r3, [r4, #0]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   31fb8:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
   31fba:	0759      	lsls	r1, r3, #29
   31fbc:	d008      	beq.n	31fd0 <bus_fault.isra.0+0x20>
   31fbe:	4944      	ldr	r1, [pc, #272]	; (320d0 <bus_fault.isra.0+0x120>)
   31fc0:	4844      	ldr	r0, [pc, #272]	; (320d4 <bus_fault.isra.0+0x124>)
   31fc2:	1a61      	subs	r1, r4, r1
   31fc4:	0889      	lsrs	r1, r1, #2
   31fc6:	0189      	lsls	r1, r1, #6
   31fc8:	f041 0101 	orr.w	r1, r1, #1
   31fcc:	f003 fe2f 	bl	35c2e <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   31fd0:	4b41      	ldr	r3, [pc, #260]	; (320d8 <bus_fault.isra.0+0x128>)
   31fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   31fd4:	04da      	lsls	r2, r3, #19
   31fd6:	d50b      	bpl.n	31ff0 <bus_fault.isra.0+0x40>
		PR_FAULT_INFO("  Stacking error");
   31fd8:	6823      	ldr	r3, [r4, #0]
   31fda:	075b      	lsls	r3, r3, #29
   31fdc:	d008      	beq.n	31ff0 <bus_fault.isra.0+0x40>
   31fde:	493c      	ldr	r1, [pc, #240]	; (320d0 <bus_fault.isra.0+0x120>)
   31fe0:	483e      	ldr	r0, [pc, #248]	; (320dc <bus_fault.isra.0+0x12c>)
   31fe2:	1a61      	subs	r1, r4, r1
   31fe4:	0889      	lsrs	r1, r1, #2
   31fe6:	0189      	lsls	r1, r1, #6
   31fe8:	f041 0101 	orr.w	r1, r1, #1
   31fec:	f003 fe1f 	bl	35c2e <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   31ff0:	4b39      	ldr	r3, [pc, #228]	; (320d8 <bus_fault.isra.0+0x128>)
   31ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   31ff4:	0518      	lsls	r0, r3, #20
   31ff6:	d50b      	bpl.n	32010 <bus_fault.isra.0+0x60>
		PR_FAULT_INFO("  Unstacking error");
   31ff8:	6823      	ldr	r3, [r4, #0]
   31ffa:	0759      	lsls	r1, r3, #29
   31ffc:	d008      	beq.n	32010 <bus_fault.isra.0+0x60>
   31ffe:	4934      	ldr	r1, [pc, #208]	; (320d0 <bus_fault.isra.0+0x120>)
   32000:	4837      	ldr	r0, [pc, #220]	; (320e0 <bus_fault.isra.0+0x130>)
   32002:	1a61      	subs	r1, r4, r1
   32004:	0889      	lsrs	r1, r1, #2
   32006:	0189      	lsls	r1, r1, #6
   32008:	f041 0101 	orr.w	r1, r1, #1
   3200c:	f003 fe0f 	bl	35c2e <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   32010:	4b31      	ldr	r3, [pc, #196]	; (320d8 <bus_fault.isra.0+0x128>)
   32012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   32014:	059a      	lsls	r2, r3, #22
   32016:	d522      	bpl.n	3205e <bus_fault.isra.0+0xae>
		PR_FAULT_INFO("  Precise data bus error");
   32018:	6823      	ldr	r3, [r4, #0]
   3201a:	075b      	lsls	r3, r3, #29
   3201c:	d008      	beq.n	32030 <bus_fault.isra.0+0x80>
   3201e:	492c      	ldr	r1, [pc, #176]	; (320d0 <bus_fault.isra.0+0x120>)
   32020:	4830      	ldr	r0, [pc, #192]	; (320e4 <bus_fault.isra.0+0x134>)
   32022:	1a61      	subs	r1, r4, r1
   32024:	0889      	lsrs	r1, r1, #2
   32026:	0189      	lsls	r1, r1, #6
   32028:	f041 0101 	orr.w	r1, r1, #1
   3202c:	f003 fdff 	bl	35c2e <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   32030:	4b29      	ldr	r3, [pc, #164]	; (320d8 <bus_fault.isra.0+0x128>)
   32032:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   32034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   32036:	0418      	lsls	r0, r3, #16
   32038:	d511      	bpl.n	3205e <bus_fault.isra.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   3203a:	6823      	ldr	r3, [r4, #0]
   3203c:	075a      	lsls	r2, r3, #29
   3203e:	d008      	beq.n	32052 <bus_fault.isra.0+0xa2>
   32040:	4a23      	ldr	r2, [pc, #140]	; (320d0 <bus_fault.isra.0+0x120>)
   32042:	4829      	ldr	r0, [pc, #164]	; (320e8 <bus_fault.isra.0+0x138>)
   32044:	1aa2      	subs	r2, r4, r2
   32046:	0892      	lsrs	r2, r2, #2
   32048:	0192      	lsls	r2, r2, #6
   3204a:	f042 0201 	orr.w	r2, r2, #1
   3204e:	f003 fdfb 	bl	35c48 <log_1>
			if (from_hard_fault != 0) {
   32052:	b126      	cbz	r6, 3205e <bus_fault.isra.0+0xae>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   32054:	4a20      	ldr	r2, [pc, #128]	; (320d8 <bus_fault.isra.0+0x128>)
   32056:	6a93      	ldr	r3, [r2, #40]	; 0x28
   32058:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   3205c:	6293      	str	r3, [r2, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   3205e:	4b1e      	ldr	r3, [pc, #120]	; (320d8 <bus_fault.isra.0+0x128>)
   32060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   32062:	055b      	lsls	r3, r3, #21
   32064:	d50b      	bpl.n	3207e <bus_fault.isra.0+0xce>
		PR_FAULT_INFO("  Imprecise data bus error");
   32066:	6823      	ldr	r3, [r4, #0]
   32068:	075e      	lsls	r6, r3, #29
   3206a:	d008      	beq.n	3207e <bus_fault.isra.0+0xce>
   3206c:	4918      	ldr	r1, [pc, #96]	; (320d0 <bus_fault.isra.0+0x120>)
   3206e:	481f      	ldr	r0, [pc, #124]	; (320ec <bus_fault.isra.0+0x13c>)
   32070:	1a61      	subs	r1, r4, r1
   32072:	0889      	lsrs	r1, r1, #2
   32074:	0189      	lsls	r1, r1, #6
   32076:	f041 0101 	orr.w	r1, r1, #1
   3207a:	f003 fdd8 	bl	35c2e <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   3207e:	4b16      	ldr	r3, [pc, #88]	; (320d8 <bus_fault.isra.0+0x128>)
   32080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   32082:	05d0      	lsls	r0, r2, #23
   32084:	d513      	bpl.n	320ae <bus_fault.isra.0+0xfe>
		PR_FAULT_INFO("  Instruction bus error");
   32086:	6823      	ldr	r3, [r4, #0]
   32088:	0759      	lsls	r1, r3, #29
   3208a:	d008      	beq.n	3209e <bus_fault.isra.0+0xee>
   3208c:	4910      	ldr	r1, [pc, #64]	; (320d0 <bus_fault.isra.0+0x120>)
   3208e:	4818      	ldr	r0, [pc, #96]	; (320f0 <bus_fault.isra.0+0x140>)
   32090:	1a64      	subs	r4, r4, r1
   32092:	08a4      	lsrs	r4, r4, #2
   32094:	01a4      	lsls	r4, r4, #6
   32096:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   3209a:	f003 fdc8 	bl	35c2e <log_0>
	*recoverable = memory_fault_recoverable(esf, true);
   3209e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   320a0:	4a0d      	ldr	r2, [pc, #52]	; (320d8 <bus_fault.isra.0+0x128>)
   320a2:	6a93      	ldr	r3, [r2, #40]	; 0x28
   320a4:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   320a8:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   320aa:	7028      	strb	r0, [r5, #0]
}
   320ac:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   320ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   320b0:	049a      	lsls	r2, r3, #18
   320b2:	d5f4      	bpl.n	3209e <bus_fault.isra.0+0xee>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   320b4:	6823      	ldr	r3, [r4, #0]
   320b6:	075b      	lsls	r3, r3, #29
   320b8:	d0f1      	beq.n	3209e <bus_fault.isra.0+0xee>
   320ba:	4905      	ldr	r1, [pc, #20]	; (320d0 <bus_fault.isra.0+0x120>)
   320bc:	480d      	ldr	r0, [pc, #52]	; (320f4 <bus_fault.isra.0+0x144>)
   320be:	1a64      	subs	r4, r4, r1
   320c0:	08a4      	lsrs	r4, r4, #2
   320c2:	01a4      	lsls	r4, r4, #6
   320c4:	f044 0101 	orr.w	r1, r4, #1
   320c8:	e7e7      	b.n	3209a <bus_fault.isra.0+0xea>
   320ca:	bf00      	nop
   320cc:	2000816c 	.word	0x2000816c
   320d0:	20008154 	.word	0x20008154
   320d4:	0003c870 	.word	0x0003c870
   320d8:	e000ed00 	.word	0xe000ed00
   320dc:	0003c886 	.word	0x0003c886
   320e0:	0003c7e1 	.word	0x0003c7e1
   320e4:	0003c897 	.word	0x0003c897
   320e8:	0003c8b0 	.word	0x0003c8b0
   320ec:	0003c8c5 	.word	0x0003c8c5
   320f0:	0003c8e0 	.word	0x0003c8e0
   320f4:	0003c841 	.word	0x0003c841

000320f8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   320f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   320fc:	4b6a      	ldr	r3, [pc, #424]	; (322a8 <z_arm_fault+0x1b0>)
{
   320fe:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   32100:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   32104:	4689      	mov	r9, r1
   32106:	4614      	mov	r4, r2
   32108:	2500      	movs	r5, #0
   3210a:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   3210c:	f3c8 0708 	ubfx	r7, r8, #0, #9
   32110:	f385 8811 	msr	BASEPRI, r5
   32114:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   32118:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   3211c:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   32120:	d127      	bne.n	32172 <z_arm_fault+0x7a>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   32122:	07d1      	lsls	r1, r2, #31
   32124:	d425      	bmi.n	32172 <z_arm_fault+0x7a>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   32126:	0662      	lsls	r2, r4, #25
   32128:	d403      	bmi.n	32132 <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   3212a:	0723      	lsls	r3, r4, #28
   3212c:	d411      	bmi.n	32152 <z_arm_fault+0x5a>
			*nested_exc = true;
   3212e:	2501      	movs	r5, #1
   32130:	e011      	b.n	32156 <z_arm_fault+0x5e>
		PR_FAULT_INFO("Exception occurred in Secure State");
   32132:	4b5e      	ldr	r3, [pc, #376]	; (322ac <z_arm_fault+0x1b4>)
   32134:	681a      	ldr	r2, [r3, #0]
   32136:	0755      	lsls	r5, r2, #29
   32138:	d008      	beq.n	3214c <z_arm_fault+0x54>
   3213a:	495d      	ldr	r1, [pc, #372]	; (322b0 <z_arm_fault+0x1b8>)
   3213c:	485d      	ldr	r0, [pc, #372]	; (322b4 <z_arm_fault+0x1bc>)
   3213e:	1a5b      	subs	r3, r3, r1
   32140:	089b      	lsrs	r3, r3, #2
   32142:	019b      	lsls	r3, r3, #6
   32144:	f043 0101 	orr.w	r1, r3, #1
   32148:	f003 fd71 	bl	35c2e <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   3214c:	f014 0504 	ands.w	r5, r4, #4
   32150:	d001      	beq.n	32156 <z_arm_fault+0x5e>
			ptr_esf = (z_arch_esf_t *)psp;
   32152:	464e      	mov	r6, r9
	*nested_exc = false;
   32154:	2500      	movs	r5, #0
	*recoverable = false;
   32156:	2300      	movs	r3, #0
   32158:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   3215c:	1efb      	subs	r3, r7, #3
   3215e:	2b09      	cmp	r3, #9
   32160:	f200 8085 	bhi.w	3226e <z_arm_fault+0x176>
   32164:	e8df f003 	tbb	[pc, r3]
   32168:	69716d07 	.word	0x69716d07
   3216c:	83838383 	.word	0x83838383
   32170:	7583      	.short	0x7583
		return NULL;
   32172:	462e      	mov	r6, r5
   32174:	e7ef      	b.n	32156 <z_arm_fault+0x5e>
	PR_FAULT_INFO("***** HARD FAULT *****");
   32176:	4f4d      	ldr	r7, [pc, #308]	; (322ac <z_arm_fault+0x1b4>)
   32178:	683b      	ldr	r3, [r7, #0]
   3217a:	0758      	lsls	r0, r3, #29
   3217c:	d008      	beq.n	32190 <z_arm_fault+0x98>
   3217e:	494c      	ldr	r1, [pc, #304]	; (322b0 <z_arm_fault+0x1b8>)
   32180:	484d      	ldr	r0, [pc, #308]	; (322b8 <z_arm_fault+0x1c0>)
   32182:	1a79      	subs	r1, r7, r1
   32184:	0889      	lsrs	r1, r1, #2
   32186:	0189      	lsls	r1, r1, #6
   32188:	f041 0101 	orr.w	r1, r1, #1
   3218c:	f003 fd4f 	bl	35c2e <log_0>
	*recoverable = false;
   32190:	2400      	movs	r4, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   32192:	4b45      	ldr	r3, [pc, #276]	; (322a8 <z_arm_fault+0x1b0>)
	*recoverable = false;
   32194:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   32198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   3219a:	0791      	lsls	r1, r2, #30
   3219c:	d527      	bpl.n	321ee <z_arm_fault+0xf6>
		PR_EXC("  Bus fault on vector table read");
   3219e:	683b      	ldr	r3, [r7, #0]
   321a0:	075a      	lsls	r2, r3, #29
   321a2:	d101      	bne.n	321a8 <z_arm_fault+0xb0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   321a4:	2400      	movs	r4, #0
   321a6:	e008      	b.n	321ba <z_arm_fault+0xc2>
   321a8:	4941      	ldr	r1, [pc, #260]	; (322b0 <z_arm_fault+0x1b8>)
		PR_EXC("  Bus fault on vector table read");
   321aa:	4844      	ldr	r0, [pc, #272]	; (322bc <z_arm_fault+0x1c4>)
   321ac:	1a79      	subs	r1, r7, r1
   321ae:	0889      	lsrs	r1, r1, #2
   321b0:	0189      	lsls	r1, r1, #6
   321b2:	f041 0101 	orr.w	r1, r1, #1
   321b6:	f003 fd3a 	bl	35c2e <log_0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   321ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
   321be:	b99b      	cbnz	r3, 321e8 <z_arm_fault+0xf0>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   321c0:	2220      	movs	r2, #32
   321c2:	4631      	mov	r1, r6
   321c4:	a802      	add	r0, sp, #8
   321c6:	f005 fa23 	bl	37610 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   321ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   321cc:	2d00      	cmp	r5, #0
   321ce:	d065      	beq.n	3229c <z_arm_fault+0x1a4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   321d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
   321d4:	b922      	cbnz	r2, 321e0 <z_arm_fault+0xe8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   321d6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   321da:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   321de:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   321e0:	4620      	mov	r0, r4
   321e2:	a902      	add	r1, sp, #8
   321e4:	f7ff fc90 	bl	31b08 <z_arm_fatal_error>
}
   321e8:	b00b      	add	sp, #44	; 0x2c
   321ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   321ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   321f0:	005b      	lsls	r3, r3, #1
   321f2:	d5d7      	bpl.n	321a4 <z_arm_fault+0xac>
		PR_EXC("  Fault escalation (see below)");
   321f4:	683b      	ldr	r3, [r7, #0]
   321f6:	075c      	lsls	r4, r3, #29
   321f8:	d008      	beq.n	3220c <z_arm_fault+0x114>
   321fa:	492d      	ldr	r1, [pc, #180]	; (322b0 <z_arm_fault+0x1b8>)
   321fc:	4830      	ldr	r0, [pc, #192]	; (322c0 <z_arm_fault+0x1c8>)
   321fe:	1a79      	subs	r1, r7, r1
   32200:	0889      	lsrs	r1, r1, #2
   32202:	0189      	lsls	r1, r1, #6
   32204:	f041 0101 	orr.w	r1, r1, #1
   32208:	f003 fd11 	bl	35c2e <log_0>
		if (SCB_MMFSR != 0) {
   3220c:	4b2d      	ldr	r3, [pc, #180]	; (322c4 <z_arm_fault+0x1cc>)
   3220e:	781b      	ldrb	r3, [r3, #0]
   32210:	b12b      	cbz	r3, 3221e <z_arm_fault+0x126>
			reason = mem_manage_fault(esf, 1, recoverable);
   32212:	2001      	movs	r0, #1
   32214:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   32218:	f7ff fe32 	bl	31e80 <mem_manage_fault.isra.0>
   3221c:	e00f      	b.n	3223e <z_arm_fault+0x146>
		} else if (SCB_BFSR != 0) {
   3221e:	4b2a      	ldr	r3, [pc, #168]	; (322c8 <z_arm_fault+0x1d0>)
   32220:	781b      	ldrb	r3, [r3, #0]
   32222:	b12b      	cbz	r3, 32230 <z_arm_fault+0x138>
			reason = bus_fault(esf, 1, recoverable);
   32224:	2001      	movs	r0, #1
   32226:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   3222a:	f7ff fec1 	bl	31fb0 <bus_fault.isra.0>
   3222e:	e006      	b.n	3223e <z_arm_fault+0x146>
		} else if (SCB_UFSR != 0) {
   32230:	4b26      	ldr	r3, [pc, #152]	; (322cc <z_arm_fault+0x1d4>)
   32232:	881b      	ldrh	r3, [r3, #0]
   32234:	b29b      	uxth	r3, r3
   32236:	2b00      	cmp	r3, #0
   32238:	d0b4      	beq.n	321a4 <z_arm_fault+0xac>
			reason = usage_fault(esf);
   3223a:	f7ff fd81 	bl	31d40 <usage_fault.isra.0>
   3223e:	4604      	mov	r4, r0
   32240:	e7bb      	b.n	321ba <z_arm_fault+0xc2>
		reason = mem_manage_fault(esf, 0, recoverable);
   32242:	2000      	movs	r0, #0
   32244:	f10d 0107 	add.w	r1, sp, #7
   32248:	e7e6      	b.n	32218 <z_arm_fault+0x120>
		reason = bus_fault(esf, 0, recoverable);
   3224a:	2000      	movs	r0, #0
   3224c:	f10d 0107 	add.w	r1, sp, #7
   32250:	e7eb      	b.n	3222a <z_arm_fault+0x132>
	PR_FAULT_INFO(
   32252:	4916      	ldr	r1, [pc, #88]	; (322ac <z_arm_fault+0x1b4>)
   32254:	680b      	ldr	r3, [r1, #0]
   32256:	0758      	lsls	r0, r3, #29
   32258:	d0a4      	beq.n	321a4 <z_arm_fault+0xac>
   3225a:	4b15      	ldr	r3, [pc, #84]	; (322b0 <z_arm_fault+0x1b8>)
   3225c:	481c      	ldr	r0, [pc, #112]	; (322d0 <z_arm_fault+0x1d8>)
   3225e:	1ac9      	subs	r1, r1, r3
   32260:	0889      	lsrs	r1, r1, #2
   32262:	0189      	lsls	r1, r1, #6
   32264:	f041 0101 	orr.w	r1, r1, #1
   32268:	f003 fce1 	bl	35c2e <log_0>
   3226c:	e79a      	b.n	321a4 <z_arm_fault+0xac>
	PR_FAULT_INFO("***** %s %d) *****",
   3226e:	4b0f      	ldr	r3, [pc, #60]	; (322ac <z_arm_fault+0x1b4>)
   32270:	681a      	ldr	r2, [r3, #0]
   32272:	0752      	lsls	r2, r2, #29
   32274:	d096      	beq.n	321a4 <z_arm_fault+0xac>
   32276:	4a0e      	ldr	r2, [pc, #56]	; (322b0 <z_arm_fault+0x1b8>)
   32278:	4816      	ldr	r0, [pc, #88]	; (322d4 <z_arm_fault+0x1dc>)
   3227a:	1a9b      	subs	r3, r3, r2
   3227c:	089b      	lsrs	r3, r3, #2
   3227e:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   32282:	ea4f 1383 	mov.w	r3, r3, lsl #6
   32286:	4914      	ldr	r1, [pc, #80]	; (322d8 <z_arm_fault+0x1e0>)
   32288:	f043 0301 	orr.w	r3, r3, #1
   3228c:	bf18      	it	ne
   3228e:	4601      	movne	r1, r0
   32290:	f1a7 0210 	sub.w	r2, r7, #16
   32294:	4811      	ldr	r0, [pc, #68]	; (322dc <z_arm_fault+0x1e4>)
   32296:	f003 fceb 	bl	35c70 <log_2>
   3229a:	e783      	b.n	321a4 <z_arm_fault+0xac>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   3229c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   322a0:	f023 0301 	bic.w	r3, r3, #1
   322a4:	e79b      	b.n	321de <z_arm_fault+0xe6>
   322a6:	bf00      	nop
   322a8:	e000ed00 	.word	0xe000ed00
   322ac:	2000816c 	.word	0x2000816c
   322b0:	20008154 	.word	0x20008154
   322b4:	0003c8f8 	.word	0x0003c8f8
   322b8:	0003c91b 	.word	0x0003c91b
   322bc:	0003c932 	.word	0x0003c932
   322c0:	0003c953 	.word	0x0003c953
   322c4:	e000ed28 	.word	0xe000ed28
   322c8:	e000ed29 	.word	0xe000ed29
   322cc:	e000ed2a 	.word	0xe000ed2a
   322d0:	0003c972 	.word	0x0003c972
   322d4:	0003c9ab 	.word	0x0003c9ab
   322d8:	0003c996 	.word	0x0003c996
   322dc:	0003c9c4 	.word	0x0003c9c4

000322e0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   322e0:	4b04      	ldr	r3, [pc, #16]	; (322f4 <z_arm_fault_init+0x14>)
   322e2:	695a      	ldr	r2, [r3, #20]
   322e4:	f042 0210 	orr.w	r2, r2, #16
   322e8:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   322ea:	695a      	ldr	r2, [r3, #20]
   322ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   322f0:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   322f2:	4770      	bx	lr
   322f4:	e000ed00 	.word	0xe000ed00

000322f8 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   322f8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   322fc:	4905      	ldr	r1, [pc, #20]	; (32314 <sys_arch_reboot+0x1c>)
   322fe:	4b06      	ldr	r3, [pc, #24]	; (32318 <sys_arch_reboot+0x20>)
   32300:	68ca      	ldr	r2, [r1, #12]
   32302:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   32306:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   32308:	60cb      	str	r3, [r1, #12]
   3230a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   3230e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   32310:	e7fd      	b.n	3230e <sys_arch_reboot+0x16>
   32312:	bf00      	nop
   32314:	e000ed00 	.word	0xe000ed00
   32318:	05fa0004 	.word	0x05fa0004

0003231c <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   3231c:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   3231e:	2120      	movs	r1, #32
   32320:	4803      	ldr	r0, [pc, #12]	; (32330 <z_arm_interrupt_init+0x14>)
   32322:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   32324:	3301      	adds	r3, #1
   32326:	2b45      	cmp	r3, #69	; 0x45
   32328:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   3232c:	d1f9      	bne.n	32322 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   3232e:	4770      	bx	lr
   32330:	e000e100 	.word	0xe000e100

00032334 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   32334:	4b06      	ldr	r3, [pc, #24]	; (32350 <z_impl_k_thread_abort+0x1c>)
   32336:	689b      	ldr	r3, [r3, #8]
   32338:	4283      	cmp	r3, r0
   3233a:	d107      	bne.n	3234c <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   3233c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   32340:	b123      	cbz	r3, 3234c <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   32342:	4a04      	ldr	r2, [pc, #16]	; (32354 <z_impl_k_thread_abort+0x20>)
   32344:	6853      	ldr	r3, [r2, #4]
   32346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   3234a:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   3234c:	f002 b994 	b.w	34678 <z_thread_abort>
   32350:	20008e30 	.word	0x20008e30
   32354:	e000ed00 	.word	0xe000ed00

00032358 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   32358:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   3235a:	4c09      	ldr	r4, [pc, #36]	; (32380 <z_arm_configure_static_mpu_regions+0x28>)
   3235c:	4a09      	ldr	r2, [pc, #36]	; (32384 <z_arm_configure_static_mpu_regions+0x2c>)
   3235e:	4623      	mov	r3, r4
   32360:	2101      	movs	r1, #1
   32362:	4809      	ldr	r0, [pc, #36]	; (32388 <z_arm_configure_static_mpu_regions+0x30>)
   32364:	f000 f91e 	bl	325a4 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   32368:	2300      	movs	r3, #0
   3236a:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   3236c:	4b07      	ldr	r3, [pc, #28]	; (3238c <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   3236e:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   32370:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   32372:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   32374:	9301      	str	r3, [sp, #4]
   32376:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   32378:	f000 f91e 	bl	325b8 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   3237c:	b004      	add	sp, #16
   3237e:	bd10      	pop	{r4, pc}
   32380:	20080000 	.word	0x20080000
   32384:	20008000 	.word	0x20008000
   32388:	0003ae58 	.word	0x0003ae58
   3238c:	20008208 	.word	0x20008208

00032390 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   32390:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   32392:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   32394:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   32396:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   3239a:	f004 031f 	and.w	r3, r4, #31
   3239e:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   323a0:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   323a2:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   323a4:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   323a8:	4904      	ldr	r1, [pc, #16]	; (323bc <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   323aa:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   323ae:	f043 0301 	orr.w	r3, r3, #1
   323b2:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   323b4:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   323b6:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   323b8:	bd10      	pop	{r4, pc}
   323ba:	bf00      	nop
   323bc:	e000ed90 	.word	0xe000ed90

000323c0 <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   323c0:	2807      	cmp	r0, #7
{
   323c2:	b510      	push	{r4, lr}
	if (index > (get_num_regions() - 1U)) {
   323c4:	d910      	bls.n	323e8 <region_allocate_and_init+0x28>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   323c6:	4a0a      	ldr	r2, [pc, #40]	; (323f0 <region_allocate_and_init+0x30>)
   323c8:	6813      	ldr	r3, [r2, #0]
   323ca:	075b      	lsls	r3, r3, #29
   323cc:	d009      	beq.n	323e2 <region_allocate_and_init+0x22>
   323ce:	4b09      	ldr	r3, [pc, #36]	; (323f4 <region_allocate_and_init+0x34>)
   323d0:	4601      	mov	r1, r0
   323d2:	1ad2      	subs	r2, r2, r3
   323d4:	0892      	lsrs	r2, r2, #2
   323d6:	0192      	lsls	r2, r2, #6
   323d8:	4807      	ldr	r0, [pc, #28]	; (323f8 <region_allocate_and_init+0x38>)
   323da:	f042 0201 	orr.w	r2, r2, #1
   323de:	f003 fc33 	bl	35c48 <log_1>
		return -EINVAL;
   323e2:	f06f 0015 	mvn.w	r0, #21
   323e6:	e001      	b.n	323ec <region_allocate_and_init+0x2c>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   323e8:	f7ff ffd2 	bl	32390 <region_init>

	return index;
}
   323ec:	bd10      	pop	{r4, pc}
   323ee:	bf00      	nop
   323f0:	20008168 	.word	0x20008168
   323f4:	20008154 	.word	0x20008154
   323f8:	0003c9db 	.word	0x0003c9db

000323fc <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   323fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32400:	4689      	mov	r9, r1
   32402:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   32404:	4606      	mov	r6, r0
   32406:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
   3240a:	4d58      	ldr	r5, [pc, #352]	; (3256c <mpu_configure_regions_and_partition.constprop.0+0x170>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   3240c:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   3240e:	45c8      	cmp	r8, r9
   32410:	da2f      	bge.n	32472 <mpu_configure_regions_and_partition.constprop.0+0x76>
		if (regions[i].size == 0U) {
   32412:	f8d6 a004 	ldr.w	sl, [r6, #4]
   32416:	f1ba 0f00 	cmp.w	sl, #0
   3241a:	d054      	beq.n	324c6 <mpu_configure_regions_and_partition.constprop.0+0xca>
		&&
   3241c:	f1ba 0f1f 	cmp.w	sl, #31
   32420:	d921      	bls.n	32466 <mpu_configure_regions_and_partition.constprop.0+0x6a>
		&&
   32422:	f01a 0f1f 	tst.w	sl, #31
   32426:	d11e      	bne.n	32466 <mpu_configure_regions_and_partition.constprop.0+0x6a>
		((part->start &
   32428:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   3242c:	f01b 0f1f 	tst.w	fp, #31
   32430:	d119      	bne.n	32466 <mpu_configure_regions_and_partition.constprop.0+0x6a>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   32432:	4658      	mov	r0, fp
   32434:	f004 ffb7 	bl	373a6 <arm_cmse_mpu_region_get>
   32438:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   3243a:	eb0a 000b 	add.w	r0, sl, fp
   3243e:	3801      	subs	r0, #1
   32440:	f004 ffb1 	bl	373a6 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   32444:	4287      	cmp	r7, r0
   32446:	d023      	beq.n	32490 <mpu_configure_regions_and_partition.constprop.0+0x94>
	return -EINVAL;
   32448:	f06f 0715 	mvn.w	r7, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   3244c:	4a48      	ldr	r2, [pc, #288]	; (32570 <mpu_configure_regions_and_partition.constprop.0+0x174>)
   3244e:	6813      	ldr	r3, [r2, #0]
   32450:	075b      	lsls	r3, r3, #29
   32452:	d00c      	beq.n	3246e <mpu_configure_regions_and_partition.constprop.0+0x72>
   32454:	4b47      	ldr	r3, [pc, #284]	; (32574 <mpu_configure_regions_and_partition.constprop.0+0x178>)
   32456:	4639      	mov	r1, r7
   32458:	1ad2      	subs	r2, r2, r3
   3245a:	0892      	lsrs	r2, r2, #2
   3245c:	0192      	lsls	r2, r2, #6
   3245e:	4846      	ldr	r0, [pc, #280]	; (32578 <mpu_configure_regions_and_partition.constprop.0+0x17c>)
   32460:	f042 0201 	orr.w	r2, r2, #1
   32464:	e011      	b.n	3248a <mpu_configure_regions_and_partition.constprop.0+0x8e>
			LOG_ERR("Partition %u: sanity check failed.", i);
   32466:	4a42      	ldr	r2, [pc, #264]	; (32570 <mpu_configure_regions_and_partition.constprop.0+0x174>)
   32468:	6813      	ldr	r3, [r2, #0]
   3246a:	0759      	lsls	r1, r3, #29
   3246c:	d105      	bne.n	3247a <mpu_configure_regions_and_partition.constprop.0+0x7e>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   3246e:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   32472:	4620      	mov	r0, r4
   32474:	b005      	add	sp, #20
   32476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("Partition %u: sanity check failed.", i);
   3247a:	4641      	mov	r1, r8
   3247c:	4b3d      	ldr	r3, [pc, #244]	; (32574 <mpu_configure_regions_and_partition.constprop.0+0x178>)
   3247e:	483f      	ldr	r0, [pc, #252]	; (3257c <mpu_configure_regions_and_partition.constprop.0+0x180>)
   32480:	1ad2      	subs	r2, r2, r3
   32482:	0892      	lsrs	r2, r2, #2
   32484:	0192      	lsls	r2, r2, #6
   32486:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Invalid underlying region index %u",
   3248a:	f003 fbdd 	bl	35c48 <log_1>
   3248e:	e7ee      	b.n	3246e <mpu_configure_regions_and_partition.constprop.0+0x72>
		if ((u_reg_index == -EINVAL) ||
   32490:	f117 0f16 	cmn.w	r7, #22
   32494:	d0da      	beq.n	3244c <mpu_configure_regions_and_partition.constprop.0+0x50>
			(u_reg_index > (reg_index - 1))) {
   32496:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   32498:	42bb      	cmp	r3, r7
   3249a:	dbd7      	blt.n	3244c <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
   3249c:	60af      	str	r7, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   3249e:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
   324a0:	60af      	str	r7, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   324a2:	692b      	ldr	r3, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   324a4:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   324a8:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   324ac:	e9d6 3200 	ldrd	r3, r2, [r6]
   324b0:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
   324b2:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   324b4:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
   324b8:	d11a      	bne.n	324f0 <mpu_configure_regions_and_partition.constprop.0+0xf4>
   324ba:	45d3      	cmp	fp, sl
   324bc:	d107      	bne.n	324ce <mpu_configure_regions_and_partition.constprop.0+0xd2>
			mpu_configure_region(u_reg_index, &regions[i]);
   324be:	4631      	mov	r1, r6
   324c0:	b2f8      	uxtb	r0, r7
   324c2:	f004 ff79 	bl	373b8 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   324c6:	f108 0801 	add.w	r8, r8, #1
   324ca:	360c      	adds	r6, #12
   324cc:	e79f      	b.n	3240e <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
   324ce:	4631      	mov	r1, r6
	MPU->RNR = index;
   324d0:	60af      	str	r7, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   324d2:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   324d4:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   324d8:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   324dc:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   324de:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
   324e0:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   324e2:	f004 ff69 	bl	373b8 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   324e6:	f110 0f16 	cmn.w	r0, #22
   324ea:	d0c0      	beq.n	3246e <mpu_configure_regions_and_partition.constprop.0+0x72>
			reg_index++;
   324ec:	1c44      	adds	r4, r0, #1
   324ee:	e7ea      	b.n	324c6 <mpu_configure_regions_and_partition.constprop.0+0xca>
		} else if (reg_last == u_reg_last) {
   324f0:	3b01      	subs	r3, #1
   324f2:	45d3      	cmp	fp, sl
   324f4:	b2e0      	uxtb	r0, r4
   324f6:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
   324fa:	60af      	str	r7, [r5, #8]
		} else if (reg_last == u_reg_last) {
   324fc:	d106      	bne.n	3250c <mpu_configure_regions_and_partition.constprop.0+0x110>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   324fe:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
   32500:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   32502:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   32506:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   32508:	612b      	str	r3, [r5, #16]
			reg_index =
   3250a:	e7ea      	b.n	324e2 <mpu_configure_regions_and_partition.constprop.0+0xe6>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   3250c:	6929      	ldr	r1, [r5, #16]
   3250e:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   32512:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   32514:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
   32516:	4631      	mov	r1, r6
   32518:	f004 ff4e 	bl	373b8 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   3251c:	f110 0f16 	cmn.w	r0, #22
   32520:	d0a5      	beq.n	3246e <mpu_configure_regions_and_partition.constprop.0+0x72>
	MPU->RNR = index;
   32522:	60af      	str	r7, [r5, #8]
	attr->rbar = MPU->RBAR &
   32524:	68ea      	ldr	r2, [r5, #12]
   32526:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   3252a:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
   3252e:	f362 0304 	bfi	r3, r2, #0, #5
   32532:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   32536:	692b      	ldr	r3, [r5, #16]
   32538:	f89d 2008 	ldrb.w	r2, [sp, #8]
   3253c:	085b      	lsrs	r3, r3, #1
   3253e:	f363 1247 	bfi	r2, r3, #5, #3
   32542:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
   32546:	e9d6 3200 	ldrd	r3, r2, [r6]
   3254a:	4413      	add	r3, r2
   3254c:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
   3254e:	f023 031f 	bic.w	r3, r3, #31
   32552:	445b      	add	r3, fp
   32554:	eba3 030a 	sub.w	r3, r3, sl
			reg_index++;
   32558:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   3255a:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
   3255e:	4669      	mov	r1, sp
   32560:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   32562:	9303      	str	r3, [sp, #12]
				region_allocate_and_init(reg_index,
   32564:	f7ff ff2c 	bl	323c0 <region_allocate_and_init>
   32568:	e7bd      	b.n	324e6 <mpu_configure_regions_and_partition.constprop.0+0xea>
   3256a:	bf00      	nop
   3256c:	e000ed90 	.word	0xe000ed90
   32570:	20008168 	.word	0x20008168
   32574:	20008154 	.word	0x20008154
   32578:	0003ca24 	.word	0x0003ca24
   3257c:	0003ca01 	.word	0x0003ca01

00032580 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   32580:	2205      	movs	r2, #5
   32582:	4b03      	ldr	r3, [pc, #12]	; (32590 <arm_core_mpu_enable+0x10>)
   32584:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   32586:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   3258a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   3258e:	4770      	bx	lr
   32590:	e000ed90 	.word	0xe000ed90

00032594 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   32594:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   32598:	2200      	movs	r2, #0
   3259a:	4b01      	ldr	r3, [pc, #4]	; (325a0 <arm_core_mpu_disable+0xc>)
   3259c:	605a      	str	r2, [r3, #4]
}
   3259e:	4770      	bx	lr
   325a0:	e000ed90 	.word	0xe000ed90

000325a4 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   325a4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   325a6:	4c03      	ldr	r4, [pc, #12]	; (325b4 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   325a8:	7822      	ldrb	r2, [r4, #0]
   325aa:	f7ff ff27 	bl	323fc <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   325ae:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   325b0:	bd10      	pop	{r4, pc}
   325b2:	bf00      	nop
   325b4:	20009579 	.word	0x20009579

000325b8 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   325b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   325bc:	4d26      	ldr	r5, [pc, #152]	; (32658 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
   325be:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   325c0:	4606      	mov	r6, r0
   325c2:	f04f 0800 	mov.w	r8, #0
   325c6:	46ab      	mov	fp, r5
	MPU->RNR = index;
   325c8:	4f24      	ldr	r7, [pc, #144]	; (3265c <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   325ca:	45d0      	cmp	r8, sl
   325cc:	da1b      	bge.n	32606 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   325ce:	f8d6 9004 	ldr.w	r9, [r6, #4]
   325d2:	f1b9 0f00 	cmp.w	r9, #0
   325d6:	d039      	beq.n	3264c <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   325d8:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   325da:	4608      	mov	r0, r1
   325dc:	9101      	str	r1, [sp, #4]
   325de:	f004 fee2 	bl	373a6 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   325e2:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   325e4:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   325e6:	eb09 0001 	add.w	r0, r9, r1
   325ea:	3801      	subs	r0, #1
   325ec:	f004 fedb 	bl	373a6 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   325f0:	4284      	cmp	r4, r0
   325f2:	f04f 0214 	mov.w	r2, #20
   325f6:	4b1a      	ldr	r3, [pc, #104]	; (32660 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
   325f8:	d008      	beq.n	3260c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   325fa:	f06f 0315 	mvn.w	r3, #21
   325fe:	fb02 f808 	mul.w	r8, r2, r8
   32602:	f84b 3008 	str.w	r3, [fp, r8]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   32606:	b003      	add	sp, #12
   32608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   3260c:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   32610:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   32612:	d0f8      	beq.n	32606 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   32614:	7819      	ldrb	r1, [r3, #0]
   32616:	42a1      	cmp	r1, r4
   32618:	ddf5      	ble.n	32606 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
   3261a:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   3261e:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   32620:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   32622:	68fc      	ldr	r4, [r7, #12]
   32624:	f100 0108 	add.w	r1, r0, #8
   32628:	7b00      	ldrb	r0, [r0, #12]
   3262a:	f364 0004 	bfi	r0, r4, #0, #5
   3262e:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   32630:	6938      	ldr	r0, [r7, #16]
   32632:	790c      	ldrb	r4, [r1, #4]
   32634:	0840      	lsrs	r0, r0, #1
   32636:	f360 1447 	bfi	r4, r0, #5, #3
   3263a:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   3263c:	68f9      	ldr	r1, [r7, #12]
   3263e:	f021 011f 	bic.w	r1, r1, #31
   32642:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   32644:	6939      	ldr	r1, [r7, #16]
   32646:	f021 011f 	bic.w	r1, r1, #31
   3264a:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   3264c:	f108 0801 	add.w	r8, r8, #1
   32650:	3514      	adds	r5, #20
   32652:	360c      	adds	r6, #12
   32654:	e7b9      	b.n	325ca <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   32656:	bf00      	nop
   32658:	20008d68 	.word	0x20008d68
   3265c:	e000ed90 	.word	0xe000ed90
   32660:	20009579 	.word	0x20009579

00032664 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   32664:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   32666:	4c0e      	ldr	r4, [pc, #56]	; (326a0 <z_arm_mpu_init+0x3c>)
   32668:	6825      	ldr	r5, [r4, #0]
   3266a:	2d08      	cmp	r5, #8
   3266c:	d814      	bhi.n	32698 <z_arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   3266e:	f7ff ff91 	bl	32594 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   32672:	2000      	movs	r0, #0
	MPU->MAIR0 =
   32674:	4b0b      	ldr	r3, [pc, #44]	; (326a4 <z_arm_mpu_init+0x40>)
   32676:	4a0c      	ldr	r2, [pc, #48]	; (326a8 <z_arm_mpu_init+0x44>)
   32678:	631a      	str	r2, [r3, #48]	; 0x30
   3267a:	4285      	cmp	r5, r0
   3267c:	d105      	bne.n	3268a <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   3267e:	4b0b      	ldr	r3, [pc, #44]	; (326ac <z_arm_mpu_init+0x48>)
   32680:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   32682:	f7ff ff7d 	bl	32580 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   32686:	2000      	movs	r0, #0
}
   32688:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   3268a:	6861      	ldr	r1, [r4, #4]
   3268c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   32690:	f7ff fe7e 	bl	32390 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   32694:	3001      	adds	r0, #1
   32696:	e7f0      	b.n	3267a <z_arm_mpu_init+0x16>
		return -1;
   32698:	f04f 30ff 	mov.w	r0, #4294967295
   3269c:	e7f4      	b.n	32688 <z_arm_mpu_init+0x24>
   3269e:	bf00      	nop
   326a0:	0003ae64 	.word	0x0003ae64
   326a4:	e000ed90 	.word	0xe000ed90
   326a8:	0044ffaa 	.word	0x0044ffaa
   326ac:	20009579 	.word	0x20009579

000326b0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   326b0:	4b01      	ldr	r3, [pc, #4]	; (326b8 <__stdout_hook_install+0x8>)
   326b2:	6018      	str	r0, [r3, #0]
}
   326b4:	4770      	bx	lr
   326b6:	bf00      	nop
   326b8:	20008080 	.word	0x20008080

000326bc <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
   326bc:	3902      	subs	r1, #2
   326be:	2901      	cmp	r1, #1
   326c0:	d802      	bhi.n	326c8 <z_impl_zephyr_fputc+0xc>
   326c2:	4b03      	ldr	r3, [pc, #12]	; (326d0 <z_impl_zephyr_fputc+0x14>)
   326c4:	681b      	ldr	r3, [r3, #0]
   326c6:	4718      	bx	r3
}
   326c8:	f04f 30ff 	mov.w	r0, #4294967295
   326cc:	4770      	bx	lr
   326ce:	bf00      	nop
   326d0:	20008080 	.word	0x20008080

000326d4 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT str, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
   326d4:	b40c      	push	{r2, r3}
   326d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
   326d8:	b909      	cbnz	r1, 326de <snprintf+0xa>
		str = &dummy; /* write final NUL to dummy, can't change *s */
   326da:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = str;
	p.len = (int) len;
   326de:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
   326e2:	ab07      	add	r3, sp, #28
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   326e4:	9a06      	ldr	r2, [sp, #24]
   326e6:	a902      	add	r1, sp, #8
   326e8:	4805      	ldr	r0, [pc, #20]	; (32700 <snprintf+0x2c>)
	va_start(vargs, format);
   326ea:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   326ec:	f7fb fb72 	bl	2ddd4 <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
   326f0:	2200      	movs	r2, #0
   326f2:	9b02      	ldr	r3, [sp, #8]
   326f4:	701a      	strb	r2, [r3, #0]
	return r;
}
   326f6:	b005      	add	sp, #20
   326f8:	f85d eb04 	ldr.w	lr, [sp], #4
   326fc:	b002      	add	sp, #8
   326fe:	4770      	bx	lr
   32700:	000376b7 	.word	0x000376b7

00032704 <sprintf>:

int sprintf(char *_MLIBC_RESTRICT str, const char *_MLIBC_RESTRICT format, ...)
{
   32704:	b40e      	push	{r1, r2, r3}
   32706:	b50f      	push	{r0, r1, r2, r3, lr}

	struct emitter p;
	int     r;

	p.ptr = str;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   32708:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
   3270c:	ab05      	add	r3, sp, #20
   3270e:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = str;
   32712:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   32714:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   32716:	4806      	ldr	r0, [pc, #24]	; (32730 <sprintf+0x2c>)
   32718:	a902      	add	r1, sp, #8
	va_start(vargs, format);
   3271a:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   3271c:	f7fb fb5a 	bl	2ddd4 <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
   32720:	2200      	movs	r2, #0
   32722:	9b02      	ldr	r3, [sp, #8]
   32724:	701a      	strb	r2, [r3, #0]
	return r;
}
   32726:	b004      	add	sp, #16
   32728:	f85d eb04 	ldr.w	lr, [sp], #4
   3272c:	b003      	add	sp, #12
   3272e:	4770      	bx	lr
   32730:	000376b7 	.word	0x000376b7

00032734 <printf>:

	return r;
}

int printf(const char *_MLIBC_RESTRICT format, ...)
{
   32734:	b40f      	push	{r0, r1, r2, r3}
   32736:	b507      	push	{r0, r1, r2, lr}
   32738:	ab04      	add	r3, sp, #16
   3273a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
   3273e:	2102      	movs	r1, #2
   32740:	4804      	ldr	r0, [pc, #16]	; (32754 <printf+0x20>)
	va_start(vargs, format);
   32742:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
   32744:	f7fb fb46 	bl	2ddd4 <cbvprintf>
	va_end(vargs);

	return r;
}
   32748:	b003      	add	sp, #12
   3274a:	f85d eb04 	ldr.w	lr, [sp], #4
   3274e:	b004      	add	sp, #16
   32750:	4770      	bx	lr
   32752:	bf00      	nop
   32754:	000376b3 	.word	0x000376b3

00032758 <gmtime_r>:
 * due to time zone, leap seconds, or a different epoch must be
 * applied to @p time before invoking this function.
 */
struct tm *gmtime_r(const time_t *_MLIBC_RESTRICT timep,
		    struct tm *_MLIBC_RESTRICT result)
{
   32758:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	time_t z = *timep;
   3275c:	e9d0 6700 	ldrd	r6, r7, [r0]
	bigint_type days = (z >= 0 ? z : z - 86399) / 86400;
   32760:	2e00      	cmp	r6, #0
   32762:	f177 0300 	sbcs.w	r3, r7, #0
{
   32766:	468a      	mov	sl, r1
	bigint_type days = (z >= 0 ? z : z - 86399) / 86400;
   32768:	f280 80a8 	bge.w	328bc <gmtime_r+0x164>
   3276c:	2300      	movs	r3, #0
   3276e:	4863      	ldr	r0, [pc, #396]	; (328fc <gmtime_r+0x1a4>)
   32770:	4a63      	ldr	r2, [pc, #396]	; (32900 <gmtime_r+0x1a8>)
   32772:	1830      	adds	r0, r6, r0
   32774:	f147 31ff 	adc.w	r1, r7, #4294967295
   32778:	f7ed fd62 	bl	20240 <__aeabi_ldivmod>
	unsigned int rem = z - days * 86400;
   3277c:	4b61      	ldr	r3, [pc, #388]	; (32904 <gmtime_r+0x1ac>)
	bigint_type days = (z >= 0 ? z : z - 86399) / 86400;
   3277e:	4604      	mov	r4, r0
	unsigned int rem = z - days * 86400;
   32780:	fb03 6600 	mla	r6, r3, r0, r6
	bigint_type days = (z >= 0 ? z : z - 86399) / 86400;
   32784:	460d      	mov	r5, r1

	*result = (struct tm){ 0 };
   32786:	2224      	movs	r2, #36	; 0x24
   32788:	2100      	movs	r1, #0
   3278a:	4650      	mov	r0, sl
   3278c:	f004 ff6b 	bl	37666 <memset>
	tp->tm_wday = (z >= -4) ? ((z + 4) % 7) : ((z + 5) % 7 + 6);
   32790:	f06f 0203 	mvn.w	r2, #3
   32794:	f04f 33ff 	mov.w	r3, #4294967295
   32798:	4294      	cmp	r4, r2
   3279a:	eb75 0303 	sbcs.w	r3, r5, r3
   3279e:	f04f 0207 	mov.w	r2, #7
   327a2:	f04f 0300 	mov.w	r3, #0
   327a6:	f2c0 808e 	blt.w	328c6 <gmtime_r+0x16e>
   327aa:	1d20      	adds	r0, r4, #4
   327ac:	f145 0100 	adc.w	r1, r5, #0
   327b0:	f7ed fd46 	bl	20240 <__aeabi_ldivmod>
	z += 719468;
   327b4:	4b54      	ldr	r3, [pc, #336]	; (32908 <gmtime_r+0x1b0>)
	tp->tm_wday = (z >= -4) ? ((z + 4) % 7) : ((z + 5) % 7 + 6);
   327b6:	f8ca 2018 	str.w	r2, [sl, #24]
	z += 719468;
   327ba:	eb14 0803 	adds.w	r8, r4, r3
   327be:	f04f 0300 	mov.w	r3, #0
   327c2:	eb45 0903 	adc.w	r9, r5, r3
	bigint_type era = ((z >= 0) ? z : (z - 146096)) / 146097;
   327c6:	f1b8 0f00 	cmp.w	r8, #0
   327ca:	f179 0300 	sbcs.w	r3, r9, #0
   327ce:	f280 8081 	bge.w	328d4 <gmtime_r+0x17c>
   327d2:	2100      	movs	r1, #0
   327d4:	2300      	movs	r3, #0
   327d6:	484d      	ldr	r0, [pc, #308]	; (3290c <gmtime_r+0x1b4>)
   327d8:	4a4d      	ldr	r2, [pc, #308]	; (32910 <gmtime_r+0x1b8>)
   327da:	1820      	adds	r0, r4, r0
   327dc:	eb45 0101 	adc.w	r1, r5, r1
   327e0:	f7ed fd2e 	bl	20240 <__aeabi_ldivmod>
	unsigned int yoe = (doe - doe / 1460U + doe / 36524U - doe / 146096U)
   327e4:	f648 62ac 	movw	r2, #36524	; 0x8eac
   327e8:	f240 55b4 	movw	r5, #1460	; 0x5b4
	unsigned int doe = (z - era * (bigint_type)146097);
   327ec:	4b49      	ldr	r3, [pc, #292]	; (32914 <gmtime_r+0x1bc>)
	bigint_type y = (time_t)yoe + era * 400;
   327ee:	f44f 7cc8 	mov.w	ip, #400	; 0x190
	unsigned int doe = (z - era * (bigint_type)146097);
   327f2:	fb03 8800 	mla	r8, r3, r0, r8
	unsigned int yoe = (doe - doe / 1460U + doe / 36524U - doe / 146096U)
   327f6:	fbb8 f2f2 	udiv	r2, r8, r2
   327fa:	fbb8 f3f5 	udiv	r3, r8, r5
   327fe:	4442      	add	r2, r8
   32800:	1ad2      	subs	r2, r2, r3
   32802:	4b45      	ldr	r3, [pc, #276]	; (32918 <gmtime_r+0x1c0>)
	bigint_type era = ((z >= 0) ? z : (z - 146096)) / 146097;
   32804:	460f      	mov	r7, r1
	unsigned int yoe = (doe - doe / 1460U + doe / 36524U - doe / 146096U)
   32806:	fbb8 f3f3 	udiv	r3, r8, r3
   3280a:	1ad2      	subs	r2, r2, r3
   3280c:	f240 136d 	movw	r3, #365	; 0x16d
	unsigned int doy = doe - (365U * yoe + yoe / 4U - yoe / 100U);
   32810:	f04f 0e64 	mov.w	lr, #100	; 0x64
	unsigned int yoe = (doe - doe / 1460U + doe / 36524U - doe / 146096U)
   32814:	fbb2 f4f3 	udiv	r4, r2, r3
	bigint_type y = (time_t)yoe + era * 400;
   32818:	fba0 010c 	umull	r0, r1, r0, ip
	unsigned int doy = doe - (365U * yoe + yoe / 4U - yoe / 100U);
   3281c:	fbb2 f5f5 	udiv	r5, r2, r5
	bigint_type y = (time_t)yoe + era * 400;
   32820:	fb0c 1107 	mla	r1, ip, r7, r1
	unsigned int doy = doe - (365U * yoe + yoe / 4U - yoe / 100U);
   32824:	fbb4 f7fe 	udiv	r7, r4, lr
	bigint_type y = (time_t)yoe + era * 400;
   32828:	1900      	adds	r0, r0, r4
   3282a:	f141 0100 	adc.w	r1, r1, #0
   3282e:	e9cd 0100 	strd	r0, r1, [sp]
	unsigned int mp = (5U * doy + 2U) / 153U;
   32832:	2199      	movs	r1, #153	; 0x99
	unsigned int doy = doe - (365U * yoe + yoe / 4U - yoe / 100U);
   32834:	1b7d      	subs	r5, r7, r5
   32836:	44a8      	add	r8, r5
   32838:	fb03 8314 	mls	r3, r3, r4, r8
	unsigned int mp = (5U * doy + 2U) / 153U;
   3283c:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   32840:	f10c 0c02 	add.w	ip, ip, #2
   32844:	fbbc f5f1 	udiv	r5, ip, r1
	unsigned int d = doy - (153U * mp + 2U) / 5U + 1U;
   32848:	f04f 0905 	mov.w	r9, #5
   3284c:	4369      	muls	r1, r5
   3284e:	3102      	adds	r1, #2
   32850:	fbb1 f1f9 	udiv	r1, r1, r9
   32854:	f103 0801 	add.w	r8, r3, #1
   32858:	eba8 0101 	sub.w	r1, r8, r1
	unsigned int m = mp + ((mp < 10) ? 3 : -9);
   3285c:	f240 58f9 	movw	r8, #1529	; 0x5f9
   32860:	45c4      	cmp	ip, r8
   32862:	bf94      	ite	ls
   32864:	f04f 0c03 	movls.w	ip, #3
   32868:	f06f 0c08 	mvnhi.w	ip, #8
	tp->tm_year = y + (m <= 2) - 1900;
   3286c:	9800      	ldr	r0, [sp, #0]
	unsigned int m = mp + ((mp < 10) ? 3 : -9);
   3286e:	4465      	add	r5, ip
	tp->tm_year = y + (m <= 2) - 1900;
   32870:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   32874:	2d02      	cmp	r5, #2
   32876:	bf98      	it	ls
   32878:	3001      	addls	r0, #1
	tp->tm_mon = m - 1;
   3287a:	3d01      	subs	r5, #1
	if (doy >= 306U) {
   3287c:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
	tp->tm_mday = d;
   32880:	e9ca 1503 	strd	r1, r5, [sl, #12]
	tp->tm_year = y + (m <= 2) - 1900;
   32884:	f8ca 0014 	str.w	r0, [sl, #20]
	if (doy >= 306U) {
   32888:	d329      	bcc.n	328de <gmtime_r+0x186>
		tp->tm_yday = doy - 306U;
   3288a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132

	time_civil_from_days(days, result);

	result->tm_hour = rem / 60U / 60U;
   3288e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
		tp->tm_yday = doy + 59U + (((yoe % 4U == 0U) && (yoe % 100U != 0U)) || (yoe == 0U));
   32892:	f8ca 301c 	str.w	r3, [sl, #28]
	result->tm_hour = rem / 60U / 60U;
   32896:	fbb6 f3f2 	udiv	r3, r6, r2
	rem -= result->tm_hour * 60 * 60;
   3289a:	fb02 6613 	mls	r6, r2, r3, r6
	result->tm_min = rem / 60;
   3289e:	223c      	movs	r2, #60	; 0x3c
	result->tm_hour = rem / 60U / 60U;
   328a0:	f8ca 3008 	str.w	r3, [sl, #8]
	result->tm_min = rem / 60;
   328a4:	fbb6 f3f2 	udiv	r3, r6, r2
	result->tm_sec = rem - result->tm_min * 60;

	return result;
}
   328a8:	4650      	mov	r0, sl
	result->tm_sec = rem - result->tm_min * 60;
   328aa:	fb02 6613 	mls	r6, r2, r3, r6
	result->tm_min = rem / 60;
   328ae:	f8ca 3004 	str.w	r3, [sl, #4]
	result->tm_sec = rem - result->tm_min * 60;
   328b2:	f8ca 6000 	str.w	r6, [sl]
}
   328b6:	b002      	add	sp, #8
   328b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	bigint_type days = (z >= 0 ? z : z - 86399) / 86400;
   328bc:	2300      	movs	r3, #0
   328be:	4630      	mov	r0, r6
   328c0:	4639      	mov	r1, r7
   328c2:	4a0f      	ldr	r2, [pc, #60]	; (32900 <gmtime_r+0x1a8>)
   328c4:	e758      	b.n	32778 <gmtime_r+0x20>
	tp->tm_wday = (z >= -4) ? ((z + 4) % 7) : ((z + 5) % 7 + 6);
   328c6:	1d60      	adds	r0, r4, #5
   328c8:	f145 0100 	adc.w	r1, r5, #0
   328cc:	f7ed fcb8 	bl	20240 <__aeabi_ldivmod>
   328d0:	3206      	adds	r2, #6
   328d2:	e76f      	b.n	327b4 <gmtime_r+0x5c>
	bigint_type era = ((z >= 0) ? z : (z - 146096)) / 146097;
   328d4:	2300      	movs	r3, #0
   328d6:	4640      	mov	r0, r8
   328d8:	4649      	mov	r1, r9
   328da:	4a0d      	ldr	r2, [pc, #52]	; (32910 <gmtime_r+0x1b8>)
   328dc:	e780      	b.n	327e0 <gmtime_r+0x88>
		tp->tm_yday = doy + 59U + (((yoe % 4U == 0U) && (yoe % 100U != 0U)) || (yoe == 0U));
   328de:	07a1      	lsls	r1, r4, #30
   328e0:	d102      	bne.n	328e8 <gmtime_r+0x190>
   328e2:	fb0e 4417 	mls	r4, lr, r7, r4
   328e6:	b93c      	cbnz	r4, 328f8 <gmtime_r+0x1a0>
   328e8:	f5b2 7fb6 	cmp.w	r2, #364	; 0x16c
   328ec:	bf8c      	ite	hi
   328ee:	2200      	movhi	r2, #0
   328f0:	2201      	movls	r2, #1
   328f2:	333b      	adds	r3, #59	; 0x3b
   328f4:	4413      	add	r3, r2
   328f6:	e7ca      	b.n	3288e <gmtime_r+0x136>
   328f8:	2201      	movs	r2, #1
   328fa:	e7fa      	b.n	328f2 <gmtime_r+0x19a>
   328fc:	fffeae81 	.word	0xfffeae81
   32900:	00015180 	.word	0x00015180
   32904:	fffeae80 	.word	0xfffeae80
   32908:	000afa6c 	.word	0x000afa6c
   3290c:	0008bfbc 	.word	0x0008bfbc
   32910:	00023ab1 	.word	0x00023ab1
   32914:	fffdc54f 	.word	0xfffdc54f
   32918:	00023ab0 	.word	0x00023ab0

0003291c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   3291c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   3291e:	4b09      	ldr	r3, [pc, #36]	; (32944 <gpio_nrfx_init+0x28>)
   32920:	781a      	ldrb	r2, [r3, #0]
   32922:	b96a      	cbnz	r2, 32940 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   32924:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   32926:	202f      	movs	r0, #47	; 0x2f
		gpio_initialized = true;
   32928:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   3292a:	2105      	movs	r1, #5
   3292c:	f7ff f8a4 	bl	31a78 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   32930:	202f      	movs	r0, #47	; 0x2f
   32932:	f7ff f883 	bl	31a3c <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   32936:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   3293a:	4b03      	ldr	r3, [pc, #12]	; (32948 <gpio_nrfx_init+0x2c>)
   3293c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   32940:	2000      	movs	r0, #0
   32942:	bd08      	pop	{r3, pc}
   32944:	2000957a 	.word	0x2000957a
   32948:	4002f000 	.word	0x4002f000

0003294c <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   3294c:	4b2d      	ldr	r3, [pc, #180]	; (32a04 <gpio_nrfx_config+0xb8>)
{
   3294e:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   32950:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   32952:	482d      	ldr	r0, [pc, #180]	; (32a08 <gpio_nrfx_config+0xbc>)
   32954:	4013      	ands	r3, r2
   32956:	4283      	cmp	r3, r0
   32958:	d045      	beq.n	329e6 <gpio_nrfx_config+0x9a>
   3295a:	d80d      	bhi.n	32978 <gpio_nrfx_config+0x2c>
   3295c:	2b06      	cmp	r3, #6
   3295e:	d015      	beq.n	3298c <gpio_nrfx_config+0x40>
   32960:	d805      	bhi.n	3296e <gpio_nrfx_config+0x22>
   32962:	b19b      	cbz	r3, 3298c <gpio_nrfx_config+0x40>
   32964:	2b02      	cmp	r3, #2
   32966:	d040      	beq.n	329ea <gpio_nrfx_config+0x9e>
   32968:	f06f 0015 	mvn.w	r0, #21
   3296c:	e03a      	b.n	329e4 <gpio_nrfx_config+0x98>
   3296e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   32972:	d1f9      	bne.n	32968 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   32974:	2301      	movs	r3, #1
   32976:	e009      	b.n	3298c <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   32978:	4824      	ldr	r0, [pc, #144]	; (32a0c <gpio_nrfx_config+0xc0>)
   3297a:	4283      	cmp	r3, r0
   3297c:	d037      	beq.n	329ee <gpio_nrfx_config+0xa2>
   3297e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   32982:	d036      	beq.n	329f2 <gpio_nrfx_config+0xa6>
   32984:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   32988:	d1ee      	bne.n	32968 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   3298a:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   3298c:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_PULLUP;
   3298e:	bf4c      	ite	mi
   32990:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
   32992:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   32996:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   3299a:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   3299c:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   329a0:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   329a4:	d506      	bpl.n	329b4 <gpio_nrfx_config+0x68>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   329a6:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   329aa:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   329ac:	d023      	beq.n	329f6 <gpio_nrfx_config+0xaa>
			nrf_gpio_port_out_set(reg, BIT(pin));
   329ae:	2201      	movs	r2, #1
   329b0:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   329b2:	60ba      	str	r2, [r7, #8]
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   329b4:	7a27      	ldrb	r7, [r4, #8]
        case 1: return NRF_P1;
   329b6:	4a16      	ldr	r2, [pc, #88]	; (32a10 <gpio_nrfx_config+0xc4>)
   329b8:	4c16      	ldr	r4, [pc, #88]	; (32a14 <gpio_nrfx_config+0xc8>)
    *p_pin = pin_number & 0x1F;
   329ba:	f001 011f 	and.w	r1, r1, #31
        case 1: return NRF_P1;
   329be:	2f01      	cmp	r7, #1
   329c0:	bf08      	it	eq
   329c2:	4614      	moveq	r4, r2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   329c4:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
	return 0;
   329c8:	2000      	movs	r0, #0
   329ca:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   329ce:	f8d1 4200 	ldr.w	r4, [r1, #512]	; 0x200
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   329d2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   329d6:	f004 44e0 	and.w	r4, r4, #1879048192	; 0x70000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   329da:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   329de:	4323      	orrs	r3, r4
    reg->PIN_CNF[pin_number] = cnf;
   329e0:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
   329e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   329e6:	2307      	movs	r3, #7
   329e8:	e7d0      	b.n	3298c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   329ea:	2304      	movs	r3, #4
   329ec:	e7ce      	b.n	3298c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   329ee:	2305      	movs	r3, #5
   329f0:	e7cc      	b.n	3298c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   329f2:	2303      	movs	r3, #3
   329f4:	e7ca      	b.n	3298c <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   329f6:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   329f8:	bf42      	ittt	mi
   329fa:	2201      	movmi	r2, #1
   329fc:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   329fe:	60fa      	strmi	r2, [r7, #12]
}
   32a00:	e7d8      	b.n	329b4 <gpio_nrfx_config+0x68>
   32a02:	bf00      	nop
   32a04:	00f00006 	.word	0x00f00006
   32a08:	00100006 	.word	0x00100006
   32a0c:	00400002 	.word	0x00400002
   32a10:	40842800 	.word	0x40842800
   32a14:	40842500 	.word	0x40842500

00032a18 <nrf_gpio_cfg_sense_set>:
{
   32a18:	b510      	push	{r4, lr}
        case 1: return NRF_P1;
   32a1a:	4b09      	ldr	r3, [pc, #36]	; (32a40 <nrf_gpio_cfg_sense_set+0x28>)
   32a1c:	4c09      	ldr	r4, [pc, #36]	; (32a44 <nrf_gpio_cfg_sense_set+0x2c>)
    *p_pin = pin_number & 0x1F;
   32a1e:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   32a22:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   32a24:	2801      	cmp	r0, #1
   32a26:	bf08      	it	eq
   32a28:	4623      	moveq	r3, r4
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   32a2a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   32a2e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   32a32:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   32a36:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   32a3a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
   32a3e:	bd10      	pop	{r4, pc}
   32a40:	40842500 	.word	0x40842500
   32a44:	40842800 	.word	0x40842800

00032a48 <check_level_trigger_pins>:
{
   32a48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
   32a4c:	6903      	ldr	r3, [r0, #16]
{
   32a4e:	4688      	mov	r8, r1
	out &= ~data->trig_edge & ~data->double_edge;
   32a50:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
	uint32_t out = data->pin_int_en;
   32a54:	68de      	ldr	r6, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   32a56:	430a      	orrs	r2, r1
   32a58:	ea26 0602 	bic.w	r6, r6, r2
	uint32_t check_pins = level_pins;
   32a5c:	4637      	mov	r7, r6
	uint32_t bit = 1U << pin;
   32a5e:	2401      	movs	r4, #1
	uint32_t pin = 0U;
   32a60:	f04f 0900 	mov.w	r9, #0
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   32a64:	f8d0 a004 	ldr.w	sl, [r0, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   32a68:	691b      	ldr	r3, [r3, #16]
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   32a6a:	f8da 2004 	ldr.w	r2, [sl, #4]
        case 1: return NRF_P1;
   32a6e:	f8df b068 	ldr.w	fp, [pc, #104]	; 32ad8 <check_level_trigger_pins+0x90>
    return p_reg->IN;
   32a72:	6915      	ldr	r5, [r2, #16]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   32a74:	405d      	eors	r5, r3
        case 1: return NRF_P1;
   32a76:	4b17      	ldr	r3, [pc, #92]	; (32ad4 <check_level_trigger_pins+0x8c>)
	uint32_t out = pin_states & level_pins;
   32a78:	ea26 0505 	bic.w	r5, r6, r5
	while (check_pins) {
   32a7c:	b917      	cbnz	r7, 32a84 <check_level_trigger_pins+0x3c>
}
   32a7e:	4628      	mov	r0, r5
   32a80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
   32a84:	423c      	tst	r4, r7
   32a86:	d020      	beq.n	32aca <check_level_trigger_pins+0x82>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   32a88:	f89a 2008 	ldrb.w	r2, [sl, #8]
   32a8c:	f009 001f 	and.w	r0, r9, #31
			if (!(level_pins & bit)) {
   32a90:	4234      	tst	r4, r6
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   32a92:	ea40 1042 	orr.w	r0, r0, r2, lsl #5
			if (!(level_pins & bit)) {
   32a96:	d112      	bne.n	32abe <check_level_trigger_pins+0x76>
    return pin_number >> 5;
   32a98:	0941      	lsrs	r1, r0, #5
        case 1: return NRF_P1;
   32a9a:	2901      	cmp	r1, #1
   32a9c:	bf14      	ite	ne
   32a9e:	4659      	movne	r1, fp
   32aa0:	4619      	moveq	r1, r3
    *p_pin = pin_number & 0x1F;
   32aa2:	f000 021f 	and.w	r2, r0, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   32aa6:	3280      	adds	r2, #128	; 0x80
   32aa8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   32aac:	f3c2 4201 	ubfx	r2, r2, #16, #2
				if (high) {
   32ab0:	2a02      	cmp	r2, #2
					*sense_levels |= bit;
   32ab2:	bf02      	ittt	eq
   32ab4:	f8d8 2000 	ldreq.w	r2, [r8]
   32ab8:	4322      	orreq	r2, r4
   32aba:	f8c8 2000 	streq.w	r2, [r8]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   32abe:	2100      	movs	r1, #0
   32ac0:	f7ff ffaa 	bl	32a18 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
   32ac4:	4b03      	ldr	r3, [pc, #12]	; (32ad4 <check_level_trigger_pins+0x8c>)
   32ac6:	ea27 0704 	bic.w	r7, r7, r4
		++pin;
   32aca:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   32ace:	0064      	lsls	r4, r4, #1
   32ad0:	e7d4      	b.n	32a7c <check_level_trigger_pins+0x34>
   32ad2:	bf00      	nop
   32ad4:	40842800 	.word	0x40842800
   32ad8:	40842500 	.word	0x40842500

00032adc <gpio_nrfx_pin_interrupt_configure>:
{
   32adc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   32ade:	460e      	mov	r6, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   32ae0:	6841      	ldr	r1, [r0, #4]
   32ae2:	f006 051f 	and.w	r5, r6, #31
   32ae6:	7a09      	ldrb	r1, [r1, #8]
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   32ae8:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
	struct gpio_nrfx_data *data = get_port_data(port);
   32aec:	6907      	ldr	r7, [r0, #16]
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   32aee:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
   32af2:	d111      	bne.n	32b18 <gpio_nrfx_pin_interrupt_configure+0x3c>
        case 1: return NRF_P1;
   32af4:	4c5e      	ldr	r4, [pc, #376]	; (32c70 <gpio_nrfx_pin_interrupt_configure+0x194>)
   32af6:	f8df c188 	ldr.w	ip, [pc, #392]	; 32c80 <gpio_nrfx_pin_interrupt_configure+0x1a4>
    return pin_number >> 5;
   32afa:	0968      	lsrs	r0, r5, #5
        case 1: return NRF_P1;
   32afc:	2801      	cmp	r0, #1
   32afe:	bf14      	ite	ne
   32b00:	4620      	movne	r0, r4
   32b02:	4660      	moveq	r0, ip
    *p_pin = pin_number & 0x1F;
   32b04:	f005 011f 	and.w	r1, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   32b08:	3180      	adds	r1, #128	; 0x80
   32b0a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   32b0e:	07c8      	lsls	r0, r1, #31
   32b10:	d507      	bpl.n	32b22 <gpio_nrfx_pin_interrupt_configure+0x46>
		return -ENOTSUP;
   32b12:	f06f 0085 	mvn.w	r0, #133	; 0x85
   32b16:	e091      	b.n	32c3c <gpio_nrfx_pin_interrupt_configure+0x160>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   32b18:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   32b1c:	68f9      	ldr	r1, [r7, #12]
   32b1e:	f000 808f 	beq.w	32c40 <gpio_nrfx_pin_interrupt_configure+0x164>
   32b22:	2101      	movs	r1, #1
   32b24:	68f8      	ldr	r0, [r7, #12]
   32b26:	40b1      	lsls	r1, r6
   32b28:	4301      	orrs	r1, r0
   32b2a:	60f9      	str	r1, [r7, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   32b2c:	2101      	movs	r1, #1
   32b2e:	6978      	ldr	r0, [r7, #20]
   32b30:	40b1      	lsls	r1, r6
   32b32:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   32b36:	bf0c      	ite	eq
   32b38:	4308      	orreq	r0, r1
   32b3a:	4388      	bicne	r0, r1
   32b3c:	6178      	str	r0, [r7, #20]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   32b3e:	2000      	movs	r0, #0
   32b40:	69ba      	ldr	r2, [r7, #24]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   32b42:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   32b46:	bf0c      	ite	eq
   32b48:	430a      	orreq	r2, r1
   32b4a:	438a      	bicne	r2, r1
   32b4c:	61ba      	str	r2, [r7, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   32b4e:	693a      	ldr	r2, [r7, #16]
   32b50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   32b54:	bf0c      	ite	eq
   32b56:	4311      	orreq	r1, r2
   32b58:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   32b5c:	4a45      	ldr	r2, [pc, #276]	; (32c74 <gpio_nrfx_pin_interrupt_configure+0x198>)
   32b5e:	6139      	str	r1, [r7, #16]
   32b60:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
   32b64:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   32b66:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   32b6a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   32b6e:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   32b72:	428d      	cmp	r5, r1
   32b74:	d169      	bne.n	32c4a <gpio_nrfx_pin_interrupt_configure+0x16e>
		    && (intenset & BIT(i))) {
   32b76:	fa23 f100 	lsr.w	r1, r3, r0
   32b7a:	07c9      	lsls	r1, r1, #31
   32b7c:	d565      	bpl.n	32c4a <gpio_nrfx_pin_interrupt_configure+0x16e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   32b7e:	0083      	lsls	r3, r0, #2
   32b80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   32b84:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   32b88:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   32b8c:	f021 0101 	bic.w	r1, r1, #1
   32b90:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   32b94:	2301      	movs	r3, #1
   32b96:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   32b98:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   32b9c:	b2c0      	uxtb	r0, r0
   32b9e:	f000 fc85 	bl	334ac <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   32ba2:	4628      	mov	r0, r5
   32ba4:	2100      	movs	r1, #0
   32ba6:	f7ff ff37 	bl	32a18 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   32baa:	68f8      	ldr	r0, [r7, #12]
   32bac:	40f0      	lsrs	r0, r6
   32bae:	f010 0001 	ands.w	r0, r0, #1
   32bb2:	d043      	beq.n	32c3c <gpio_nrfx_pin_interrupt_configure+0x160>
		if (data->trig_edge & BIT(pin)) {
   32bb4:	6978      	ldr	r0, [r7, #20]
   32bb6:	40f0      	lsrs	r0, r6
   32bb8:	f010 0401 	ands.w	r4, r0, #1
   32bbc:	d04c      	beq.n	32c58 <gpio_nrfx_pin_interrupt_configure+0x17c>
				if (data->double_edge & BIT(pin)) {
   32bbe:	69bb      	ldr	r3, [r7, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   32bc0:	f10d 0007 	add.w	r0, sp, #7
				if (data->double_edge & BIT(pin)) {
   32bc4:	40f3      	lsrs	r3, r6
   32bc6:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   32bc8:	bf57      	itett	pl
   32bca:	6939      	ldrpl	r1, [r7, #16]
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
   32bcc:	2603      	movmi	r6, #3
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   32bce:	fa21 f606 	lsrpl.w	r6, r1, r6
   32bd2:	f006 0601 	andpl.w	r6, r6, #1
   32bd6:	bf5c      	itt	pl
   32bd8:	f1c6 0602 	rsbpl	r6, r6, #2
   32bdc:	b2f6      	uxtbpl	r6, r6
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   32bde:	f000 fc87 	bl	334f0 <nrfx_gpiote_channel_alloc>
   32be2:	4b25      	ldr	r3, [pc, #148]	; (32c78 <gpio_nrfx_pin_interrupt_configure+0x19c>)
   32be4:	4298      	cmp	r0, r3
   32be6:	d134      	bne.n	32c52 <gpio_nrfx_pin_interrupt_configure+0x176>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   32be8:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   32bec:	022d      	lsls	r5, r5, #8
   32bee:	008b      	lsls	r3, r1, #2
   32bf0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   32bf4:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   32bf8:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   32bfc:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   32c00:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
   32c04:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   32c08:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   32c0c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   32c10:	0088      	lsls	r0, r1, #2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   32c12:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
   32c14:	4a19      	ldr	r2, [pc, #100]	; (32c7c <gpio_nrfx_pin_interrupt_configure+0x1a0>)
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   32c16:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    return ((uint32_t)p_reg + event);
   32c1a:	4402      	add	r2, r0
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   32c1c:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   32c1e:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   32c22:	6010      	str	r0, [r2, #0]
   32c24:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   32c26:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   32c2a:	f042 0201 	orr.w	r2, r2, #1
   32c2e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   32c32:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
   32c34:	4a0f      	ldr	r2, [pc, #60]	; (32c74 <gpio_nrfx_pin_interrupt_configure+0x198>)
   32c36:	408b      	lsls	r3, r1
   32c38:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   32c3c:	b003      	add	sp, #12
   32c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   32c40:	2001      	movs	r0, #1
   32c42:	40b0      	lsls	r0, r6
   32c44:	ea21 0100 	bic.w	r1, r1, r0
   32c48:	e76f      	b.n	32b2a <gpio_nrfx_pin_interrupt_configure+0x4e>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   32c4a:	3001      	adds	r0, #1
   32c4c:	2808      	cmp	r0, #8
   32c4e:	d18a      	bne.n	32b66 <gpio_nrfx_pin_interrupt_configure+0x8a>
   32c50:	e7a7      	b.n	32ba2 <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
   32c52:	f06f 0012 	mvn.w	r0, #18
   32c56:	e7f1      	b.n	32c3c <gpio_nrfx_pin_interrupt_configure+0x160>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   32c58:	6939      	ldr	r1, [r7, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   32c5a:	4628      	mov	r0, r5
	if ((BIT(pin) & data->int_active_level) != 0U) {
   32c5c:	40f1      	lsrs	r1, r6
   32c5e:	f001 0101 	and.w	r1, r1, #1
   32c62:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   32c66:	b2c9      	uxtb	r1, r1
   32c68:	f7ff fed6 	bl	32a18 <nrf_gpio_cfg_sense_set>
	int res = 0;
   32c6c:	4620      	mov	r0, r4
   32c6e:	e7e5      	b.n	32c3c <gpio_nrfx_pin_interrupt_configure+0x160>
   32c70:	40842500 	.word	0x40842500
   32c74:	4002f000 	.word	0x4002f000
   32c78:	0bad0000 	.word	0x0bad0000
   32c7c:	4002f100 	.word	0x4002f100
   32c80:	40842800 	.word	0x40842800

00032c84 <gpiote_event_handler>:
{
   32c84:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   32c86:	2400      	movs	r4, #0
{
   32c88:	b085      	sub	sp, #20
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   32c8a:	e9cd 4400 	strd	r4, r4, [sp]
	uint32_t sense_levels[GPIO_COUNT] = {0};
   32c8e:	e9cd 4402 	strd	r4, r4, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   32c92:	4e25      	ldr	r6, [pc, #148]	; (32d28 <gpiote_event_handler+0xa4>)
   32c94:	6835      	ldr	r5, [r6, #0]
	if (port_event) {
   32c96:	b15d      	cbz	r5, 32cb0 <gpiote_event_handler+0x2c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
   32c98:	a902      	add	r1, sp, #8
   32c9a:	4824      	ldr	r0, [pc, #144]	; (32d2c <gpiote_event_handler+0xa8>)
   32c9c:	f7ff fed4 	bl	32a48 <check_level_trigger_pins>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
   32ca0:	a903      	add	r1, sp, #12
		fired_triggers[0] =
   32ca2:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
   32ca4:	4822      	ldr	r0, [pc, #136]	; (32d30 <gpiote_event_handler+0xac>)
   32ca6:	f7ff fecf 	bl	32a48 <check_level_trigger_pins>
		fired_triggers[1] =
   32caa:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   32cac:	6034      	str	r4, [r6, #0]
   32cae:	6833      	ldr	r3, [r6, #0]
{
   32cb0:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   32cb2:	2601      	movs	r6, #1
   32cb4:	469c      	mov	ip, r3
    return p_reg->INTENSET & mask;
   32cb6:	4c1f      	ldr	r4, [pc, #124]	; (32d34 <gpiote_event_handler+0xb0>)
   32cb8:	481f      	ldr	r0, [pc, #124]	; (32d38 <gpiote_event_handler+0xb4>)
   32cba:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
   32cbe:	fa06 f103 	lsl.w	r1, r6, r3
   32cc2:	4211      	tst	r1, r2
   32cc4:	d018      	beq.n	32cf8 <gpiote_event_handler+0x74>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   32cc6:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
   32cca:	b1aa      	cbz	r2, 32cf8 <gpiote_event_handler+0x74>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   32ccc:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   32cd0:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   32cd4:	af04      	add	r7, sp, #16
   32cd6:	f3c2 3140 	ubfx	r1, r2, #13, #1
   32cda:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   32cde:	f851 7c10 	ldr.w	r7, [r1, #-16]
   32ce2:	f3c2 2204 	ubfx	r2, r2, #8, #5
   32ce6:	fa06 f202 	lsl.w	r2, r6, r2
   32cea:	433a      	orrs	r2, r7
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   32cec:	f840 c023 	str.w	ip, [r0, r3, lsl #2]
   32cf0:	f841 2c10 	str.w	r2, [r1, #-16]
   32cf4:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   32cf8:	3301      	adds	r3, #1
   32cfa:	2b08      	cmp	r3, #8
   32cfc:	d1dd      	bne.n	32cba <gpiote_event_handler+0x36>
	if (fired_triggers[0]) {
   32cfe:	9a00      	ldr	r2, [sp, #0]
   32d00:	b11a      	cbz	r2, 32d0a <gpiote_event_handler+0x86>
	gpio_fire_callbacks(list, port, pins);
   32d02:	490a      	ldr	r1, [pc, #40]	; (32d2c <gpiote_event_handler+0xa8>)
   32d04:	480d      	ldr	r0, [pc, #52]	; (32d3c <gpiote_event_handler+0xb8>)
   32d06:	f004 fce3 	bl	376d0 <gpio_fire_callbacks>
	if (fired_triggers[1]) {
   32d0a:	9a01      	ldr	r2, [sp, #4]
   32d0c:	b11a      	cbz	r2, 32d16 <gpiote_event_handler+0x92>
	gpio_fire_callbacks(list, port, pins);
   32d0e:	4908      	ldr	r1, [pc, #32]	; (32d30 <gpiote_event_handler+0xac>)
   32d10:	480b      	ldr	r0, [pc, #44]	; (32d40 <gpiote_event_handler+0xbc>)
   32d12:	f004 fcdd 	bl	376d0 <gpio_fire_callbacks>
	if (port_event) {
   32d16:	b12d      	cbz	r5, 32d24 <gpiote_event_handler+0xa0>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   32d18:	4804      	ldr	r0, [pc, #16]	; (32d2c <gpiote_event_handler+0xa8>)
   32d1a:	f004 fd3c 	bl	37796 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   32d1e:	4804      	ldr	r0, [pc, #16]	; (32d30 <gpiote_event_handler+0xac>)
   32d20:	f004 fd39 	bl	37796 <cfg_level_pins>
}
   32d24:	b005      	add	sp, #20
   32d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32d28:	4002f17c 	.word	0x4002f17c
   32d2c:	20008124 	.word	0x20008124
   32d30:	2000813c 	.word	0x2000813c
   32d34:	4002f000 	.word	0x4002f000
   32d38:	4002f100 	.word	0x4002f100
   32d3c:	20008d88 	.word	0x20008d88
   32d40:	20008da4 	.word	0x20008da4

00032d44 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   32d44:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   32d46:	794b      	ldrb	r3, [r1, #5]
   32d48:	2b01      	cmp	r3, #1
   32d4a:	d02c      	beq.n	32da6 <uarte_nrfx_configure+0x62>
   32d4c:	2b03      	cmp	r3, #3
   32d4e:	d127      	bne.n	32da0 <uarte_nrfx_configure+0x5c>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   32d50:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   32d52:	798b      	ldrb	r3, [r1, #6]
   32d54:	2b03      	cmp	r3, #3
   32d56:	d123      	bne.n	32da0 <uarte_nrfx_configure+0x5c>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   32d58:	79cd      	ldrb	r5, [r1, #7]
   32d5a:	b12d      	cbz	r5, 32d68 <uarte_nrfx_configure+0x24>
   32d5c:	2d01      	cmp	r5, #1
   32d5e:	d11f      	bne.n	32da0 <uarte_nrfx_configure+0x5c>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   32d60:	6843      	ldr	r3, [r0, #4]
   32d62:	685b      	ldr	r3, [r3, #4]
   32d64:	079b      	lsls	r3, r3, #30
   32d66:	d01b      	beq.n	32da0 <uarte_nrfx_configure+0x5c>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   32d68:	790a      	ldrb	r2, [r1, #4]
   32d6a:	2a01      	cmp	r2, #1
   32d6c:	d01d      	beq.n	32daa <uarte_nrfx_configure+0x66>
   32d6e:	2a02      	cmp	r2, #2
   32d70:	d01f      	beq.n	32db2 <uarte_nrfx_configure+0x6e>
   32d72:	b9aa      	cbnz	r2, 32da0 <uarte_nrfx_configure+0x5c>
   32d74:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   32d76:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   32d78:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
   32d7a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   32d7e:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
   32d80:	d06e      	beq.n	32e60 <uarte_nrfx_configure+0x11c>
   32d82:	d833      	bhi.n	32dec <uarte_nrfx_configure+0xa8>
   32d84:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   32d88:	d06d      	beq.n	32e66 <uarte_nrfx_configure+0x122>
   32d8a:	d81c      	bhi.n	32dc6 <uarte_nrfx_configure+0x82>
   32d8c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   32d90:	d06b      	beq.n	32e6a <uarte_nrfx_configure+0x126>
   32d92:	d810      	bhi.n	32db6 <uarte_nrfx_configure+0x72>
   32d94:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   32d98:	d06a      	beq.n	32e70 <uarte_nrfx_configure+0x12c>
   32d9a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   32d9e:	d06a      	beq.n	32e76 <uarte_nrfx_configure+0x132>
   32da0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   32da4:	e05b      	b.n	32e5e <uarte_nrfx_configure+0x11a>
	switch (cfg->stop_bits) {
   32da6:	2700      	movs	r7, #0
   32da8:	e7d3      	b.n	32d52 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   32daa:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   32dae:	220e      	movs	r2, #14
   32db0:	e7e1      	b.n	32d76 <uarte_nrfx_configure+0x32>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   32db2:	2400      	movs	r4, #0
   32db4:	e7fb      	b.n	32dae <uarte_nrfx_configure+0x6a>
	switch (baudrate) {
   32db6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   32dba:	d05f      	beq.n	32e7c <uarte_nrfx_configure+0x138>
   32dbc:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   32dc0:	d1ee      	bne.n	32da0 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   32dc2:	4b39      	ldr	r3, [pc, #228]	; (32ea8 <uarte_nrfx_configure+0x164>)
   32dc4:	e03e      	b.n	32e44 <uarte_nrfx_configure+0x100>
	switch (baudrate) {
   32dc6:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   32dca:	d05a      	beq.n	32e82 <uarte_nrfx_configure+0x13e>
   32dcc:	d807      	bhi.n	32dde <uarte_nrfx_configure+0x9a>
   32dce:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   32dd2:	d058      	beq.n	32e86 <uarte_nrfx_configure+0x142>
   32dd4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   32dd8:	d1e2      	bne.n	32da0 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   32dda:	4b34      	ldr	r3, [pc, #208]	; (32eac <uarte_nrfx_configure+0x168>)
   32ddc:	e032      	b.n	32e44 <uarte_nrfx_configure+0x100>
	switch (baudrate) {
   32dde:	f647 2c12 	movw	ip, #31250	; 0x7a12
   32de2:	4563      	cmp	r3, ip
   32de4:	d1dc      	bne.n	32da0 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   32de6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   32dea:	e02b      	b.n	32e44 <uarte_nrfx_configure+0x100>
	switch (baudrate) {
   32dec:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   32df0:	d04b      	beq.n	32e8a <uarte_nrfx_configure+0x146>
   32df2:	d813      	bhi.n	32e1c <uarte_nrfx_configure+0xd8>
   32df4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   32df8:	d04a      	beq.n	32e90 <uarte_nrfx_configure+0x14c>
   32dfa:	d809      	bhi.n	32e10 <uarte_nrfx_configure+0xcc>
   32dfc:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
   32e00:	4563      	cmp	r3, ip
   32e02:	d047      	beq.n	32e94 <uarte_nrfx_configure+0x150>
   32e04:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   32e08:	d1ca      	bne.n	32da0 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   32e0a:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   32e0e:	e019      	b.n	32e44 <uarte_nrfx_configure+0x100>
	switch (baudrate) {
   32e10:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   32e14:	d1c4      	bne.n	32da0 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   32e16:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   32e1a:	e013      	b.n	32e44 <uarte_nrfx_configure+0x100>
	switch (baudrate) {
   32e1c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   32e20:	d03b      	beq.n	32e9a <uarte_nrfx_configure+0x156>
   32e22:	d809      	bhi.n	32e38 <uarte_nrfx_configure+0xf4>
   32e24:	f8df c098 	ldr.w	ip, [pc, #152]	; 32ec0 <uarte_nrfx_configure+0x17c>
   32e28:	4563      	cmp	r3, ip
   32e2a:	d039      	beq.n	32ea0 <uarte_nrfx_configure+0x15c>
   32e2c:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   32e30:	d1b6      	bne.n	32da0 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   32e32:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   32e36:	e005      	b.n	32e44 <uarte_nrfx_configure+0x100>
	switch (baudrate) {
   32e38:	f8df c088 	ldr.w	ip, [pc, #136]	; 32ec4 <uarte_nrfx_configure+0x180>
   32e3c:	4563      	cmp	r3, ip
   32e3e:	d1af      	bne.n	32da0 <uarte_nrfx_configure+0x5c>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   32e40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   32e44:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   32e48:	6903      	ldr	r3, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
   32e4a:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
   32e4c:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
   32e4e:	4322      	orrs	r2, r4
   32e50:	3304      	adds	r3, #4
   32e52:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   32e54:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
   32e58:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   32e5c:	2000      	movs	r0, #0
}
   32e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   32e60:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   32e64:	e7ee      	b.n	32e44 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   32e66:	4b12      	ldr	r3, [pc, #72]	; (32eb0 <uarte_nrfx_configure+0x16c>)
   32e68:	e7ec      	b.n	32e44 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   32e6a:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   32e6e:	e7e9      	b.n	32e44 <uarte_nrfx_configure+0x100>
		nrf_baudrate = 0x00014000;
   32e70:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   32e74:	e7e6      	b.n	32e44 <uarte_nrfx_configure+0x100>
	switch (baudrate) {
   32e76:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   32e7a:	e7e3      	b.n	32e44 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   32e7c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   32e80:	e7e0      	b.n	32e44 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   32e82:	4b0c      	ldr	r3, [pc, #48]	; (32eb4 <uarte_nrfx_configure+0x170>)
   32e84:	e7de      	b.n	32e44 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   32e86:	4b0c      	ldr	r3, [pc, #48]	; (32eb8 <uarte_nrfx_configure+0x174>)
   32e88:	e7dc      	b.n	32e44 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   32e8a:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   32e8e:	e7d9      	b.n	32e44 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   32e90:	4b0a      	ldr	r3, [pc, #40]	; (32ebc <uarte_nrfx_configure+0x178>)
   32e92:	e7d7      	b.n	32e44 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   32e94:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   32e98:	e7d4      	b.n	32e44 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   32e9a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   32e9e:	e7d1      	b.n	32e44 <uarte_nrfx_configure+0x100>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   32ea0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   32ea4:	e7ce      	b.n	32e44 <uarte_nrfx_configure+0x100>
   32ea6:	bf00      	nop
   32ea8:	0013b000 	.word	0x0013b000
   32eac:	004ea000 	.word	0x004ea000
   32eb0:	00275000 	.word	0x00275000
   32eb4:	0075c000 	.word	0x0075c000
   32eb8:	003af000 	.word	0x003af000
   32ebc:	013a9000 	.word	0x013a9000
   32ec0:	0003d090 	.word	0x0003d090
   32ec4:	000f4240 	.word	0x000f4240

00032ec8 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   32ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32eca:	4605      	mov	r5, r0
   32ecc:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
   32ece:	6906      	ldr	r6, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   32ed0:	f004 fe70 	bl	37bb4 <k_is_in_isr>
   32ed4:	b910      	cbnz	r0, 32edc <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   32ed6:	4b20      	ldr	r3, [pc, #128]	; (32f58 <uarte_nrfx_poll_out+0x90>)
	int key;

	if (isr_mode) {
   32ed8:	781b      	ldrb	r3, [r3, #0]
   32eda:	b983      	cbnz	r3, 32efe <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   32edc:	f04f 0320 	mov.w	r3, #32
   32ee0:	f3ef 8411 	mrs	r4, BASEPRI
   32ee4:	f383 8811 	msr	BASEPRI, r3
   32ee8:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   32eec:	4628      	mov	r0, r5
   32eee:	f004 fce5 	bl	378bc <is_tx_ready>
   32ef2:	bb28      	cbnz	r0, 32f40 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   32ef4:	f384 8811 	msr	BASEPRI, r4
   32ef8:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   32efc:	e7ee      	b.n	32edc <uarte_nrfx_poll_out+0x14>
{
   32efe:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   32f00:	4628      	mov	r0, r5
   32f02:	f004 fcdb 	bl	378bc <is_tx_ready>
   32f06:	b970      	cbnz	r0, 32f26 <uarte_nrfx_poll_out+0x5e>
   32f08:	2001      	movs	r0, #1
   32f0a:	f004 fe02 	bl	37b12 <nrfx_busy_wait>
   32f0e:	3c01      	subs	r4, #1
   32f10:	d1f6      	bne.n	32f00 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
   32f12:	2100      	movs	r1, #0
   32f14:	2021      	movs	r0, #33	; 0x21
   32f16:	f001 fb77 	bl	34608 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   32f1a:	e7f0      	b.n	32efe <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   32f1c:	f384 8811 	msr	BASEPRI, r4
   32f20:	f3bf 8f6f 	isb	sy
}
   32f24:	e7f5      	b.n	32f12 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   32f26:	f04f 0320 	mov.w	r3, #32
   32f2a:	f3ef 8411 	mrs	r4, BASEPRI
   32f2e:	f383 8811 	msr	BASEPRI, r3
   32f32:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   32f36:	4628      	mov	r0, r5
   32f38:	f004 fcc0 	bl	378bc <is_tx_ready>
   32f3c:	2800      	cmp	r0, #0
   32f3e:	d0ed      	beq.n	32f1c <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   32f40:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
   32f42:	2201      	movs	r2, #1
   32f44:	4628      	mov	r0, r5
	data->char_out = c;
   32f46:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
   32f4a:	f004 fd4a 	bl	379e2 <tx_start>
	__asm__ volatile(
   32f4e:	f384 8811 	msr	BASEPRI, r4
   32f52:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   32f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32f58:	2000959b 	.word	0x2000959b

00032f5c <nrf_gpio_cfg_input.constprop.0>:
        case 1: return NRF_P1;
   32f5c:	4b09      	ldr	r3, [pc, #36]	; (32f84 <nrf_gpio_cfg_input.constprop.0+0x28>)
   32f5e:	490a      	ldr	r1, [pc, #40]	; (32f88 <nrf_gpio_cfg_input.constprop.0+0x2c>)
    *p_pin = pin_number & 0x1F;
   32f60:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   32f64:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   32f66:	2801      	cmp	r0, #1
   32f68:	bf08      	it	eq
   32f6a:	460b      	moveq	r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   32f6c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   32f70:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   32f74:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   32f78:	f042 020c 	orr.w	r2, r2, #12
    reg->PIN_CNF[pin_number] = cnf;
   32f7c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
   32f80:	4770      	bx	lr
   32f82:	bf00      	nop
   32f84:	40842500 	.word	0x40842500
   32f88:	40842800 	.word	0x40842800

00032f8c <nrf_gpio_pin_set>:
        case 1: return NRF_P1;
   32f8c:	4b06      	ldr	r3, [pc, #24]	; (32fa8 <nrf_gpio_pin_set+0x1c>)
   32f8e:	4907      	ldr	r1, [pc, #28]	; (32fac <nrf_gpio_pin_set+0x20>)
    *p_pin = pin_number & 0x1F;
   32f90:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   32f94:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   32f96:	2801      	cmp	r0, #1
   32f98:	bf14      	ite	ne
   32f9a:	4618      	movne	r0, r3
   32f9c:	4608      	moveq	r0, r1
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   32f9e:	2301      	movs	r3, #1
   32fa0:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   32fa2:	6083      	str	r3, [r0, #8]
}
   32fa4:	4770      	bx	lr
   32fa6:	bf00      	nop
   32fa8:	40842500 	.word	0x40842500
   32fac:	40842800 	.word	0x40842800

00032fb0 <nrf_gpio_cfg_output>:
        case 1: return NRF_P1;
   32fb0:	4b09      	ldr	r3, [pc, #36]	; (32fd8 <nrf_gpio_cfg_output+0x28>)
   32fb2:	490a      	ldr	r1, [pc, #40]	; (32fdc <nrf_gpio_cfg_output+0x2c>)
    *p_pin = pin_number & 0x1F;
   32fb4:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   32fb8:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   32fba:	2801      	cmp	r0, #1
   32fbc:	bf08      	it	eq
   32fbe:	460b      	moveq	r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   32fc0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   32fc4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   32fc8:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   32fcc:	f042 0203 	orr.w	r2, r2, #3
    reg->PIN_CNF[pin_number] = cnf;
   32fd0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
   32fd4:	4770      	bx	lr
   32fd6:	bf00      	nop
   32fd8:	40842500 	.word	0x40842500
   32fdc:	40842800 	.word	0x40842800

00032fe0 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   32fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32fe2:	4605      	mov	r5, r0
   32fe4:	2200      	movs	r2, #0
   32fe6:	2101      	movs	r1, #1
   32fe8:	2008      	movs	r0, #8
   32fea:	f7fe fd45 	bl	31a78 <z_arm_irq_priority_set>
   32fee:	2008      	movs	r0, #8
   32ff0:	f7fe fd24 	bl	31a3c <arch_irq_enable>
	return config->uarte_regs;
   32ff4:	686b      	ldr	r3, [r5, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   32ff6:	692e      	ldr	r6, [r5, #16]
	return config->uarte_regs;
   32ff8:	681c      	ldr	r4, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   32ffa:	2300      	movs	r3, #0
        nrf_gpio_pin_set(pin_number);
   32ffc:	2014      	movs	r0, #20
   32ffe:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
   33002:	6035      	str	r5, [r6, #0]
   33004:	f7ff ffc2 	bl	32f8c <nrf_gpio_pin_set>
	nrf_gpio_cfg_output(config->pseltxd);
   33008:	2014      	movs	r0, #20
   3300a:	f7ff ffd1 	bl	32fb0 <nrf_gpio_cfg_output>
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_PULLUP);
   3300e:	2016      	movs	r0, #22
   33010:	f7ff ffa4 	bl	32f5c <nrf_gpio_cfg_input.constprop.0>
    p_reg->PSEL.TXD = pseltxd;
   33014:	2314      	movs	r3, #20
   33016:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   3301a:	2316      	movs	r3, #22
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_PULLUP);
   3301c:	2015      	movs	r0, #21
   3301e:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
   33022:	f7ff ff9b 	bl	32f5c <nrf_gpio_cfg_input.constprop.0>
   33026:	2013      	movs	r0, #19
   33028:	f7ff ffb0 	bl	32f8c <nrf_gpio_pin_set>
		nrf_gpio_cfg_output(config->pselrts);
   3302c:	2013      	movs	r0, #19
   3302e:	f7ff ffbf 	bl	32fb0 <nrf_gpio_cfg_output>
    p_reg->PSEL.RTS = pselrts;
   33032:	2313      	movs	r3, #19
   33034:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   33038:	2315      	movs	r3, #21
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   3303a:	6929      	ldr	r1, [r5, #16]
   3303c:	4628      	mov	r0, r5
   3303e:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   33042:	3104      	adds	r1, #4
   33044:	f7ff fe7e 	bl	32d44 <uarte_nrfx_configure>
	if (err) {
   33048:	4607      	mov	r7, r0
   3304a:	2800      	cmp	r0, #0
   3304c:	d14e      	bne.n	330ec <uarte_0_init+0x10c>
	    get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   3304e:	686b      	ldr	r3, [r5, #4]
   33050:	685b      	ldr	r3, [r3, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   33052:	071b      	lsls	r3, r3, #28
   33054:	d523      	bpl.n	3309e <uarte_0_init+0xbe>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   33056:	f106 0016 	add.w	r0, r6, #22
   3305a:	f000 f9ff 	bl	3345c <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   3305e:	4b24      	ldr	r3, [pc, #144]	; (330f0 <uarte_0_init+0x110>)
   33060:	4298      	cmp	r0, r3
   33062:	d00f      	beq.n	33084 <uarte_0_init+0xa4>
		LOG_ERR("Failed to allocate PPI Channel");
   33064:	4923      	ldr	r1, [pc, #140]	; (330f4 <uarte_0_init+0x114>)
   33066:	680b      	ldr	r3, [r1, #0]
   33068:	0758      	lsls	r0, r3, #29
   3306a:	d008      	beq.n	3307e <uarte_0_init+0x9e>
   3306c:	4b22      	ldr	r3, [pc, #136]	; (330f8 <uarte_0_init+0x118>)
   3306e:	4823      	ldr	r0, [pc, #140]	; (330fc <uarte_0_init+0x11c>)
   33070:	1ac9      	subs	r1, r1, r3
   33072:	0889      	lsrs	r1, r1, #2
   33074:	0189      	lsls	r1, r1, #6
   33076:	f041 0101 	orr.w	r1, r1, #1
   3307a:	f002 fdd8 	bl	35c2e <log_0>
		return -EIO;
   3307e:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
   33082:	e033      	b.n	330ec <uarte_0_init+0x10c>
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   33084:	7db3      	ldrb	r3, [r6, #22]
   33086:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   3308a:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   3308e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   33092:	2301      	movs	r3, #1
   33094:	7db2      	ldrb	r2, [r6, #22]
   33096:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   33098:	4a19      	ldr	r2, [pc, #100]	; (33100 <uarte_0_init+0x120>)
   3309a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   3309e:	2308      	movs	r3, #8
   330a0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   330a4:	2300      	movs	r3, #0
   330a6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   330aa:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   330ae:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   330b2:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   330b6:	2301      	movs	r3, #1
   330b8:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   330bc:	6023      	str	r3, [r4, #0]
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   330be:	686b      	ldr	r3, [r5, #4]
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   330c0:	3614      	adds	r6, #20
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   330c2:	685b      	ldr	r3, [r3, #4]
   330c4:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
   330c6:	bf5c      	itt	pl
   330c8:	f44f 7280 	movpl.w	r2, #256	; 0x100
   330cc:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   330d0:	06db      	lsls	r3, r3, #27
   330d2:	bf44      	itt	mi
   330d4:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   330d8:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   330dc:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   330de:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   330e2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   330e6:	2301      	movs	r3, #1
   330e8:	60a3      	str	r3, [r4, #8]
   330ea:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   330ec:	4638      	mov	r0, r7
   330ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   330f0:	0bad0000 	.word	0x0bad0000
   330f4:	20008180 	.word	0x20008180
   330f8:	20008154 	.word	0x20008154
   330fc:	0003ca64 	.word	0x0003ca64
   33100:	40017000 	.word	0x40017000

00033104 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   33104:	b508      	push	{r3, lr}
	z_impl_log_panic();
   33106:	f7fb fd69 	bl	2ebdc <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   3310a:	4908      	ldr	r1, [pc, #32]	; (3312c <k_sys_fatal_error_handler+0x28>)
   3310c:	680b      	ldr	r3, [r1, #0]
   3310e:	075b      	lsls	r3, r3, #29
   33110:	d008      	beq.n	33124 <k_sys_fatal_error_handler+0x20>
   33112:	4b07      	ldr	r3, [pc, #28]	; (33130 <k_sys_fatal_error_handler+0x2c>)
   33114:	4807      	ldr	r0, [pc, #28]	; (33134 <k_sys_fatal_error_handler+0x30>)
   33116:	1ac9      	subs	r1, r1, r3
   33118:	0889      	lsrs	r1, r1, #2
   3311a:	0189      	lsls	r1, r1, #6
   3311c:	f041 0101 	orr.w	r1, r1, #1
   33120:	f002 fd85 	bl	35c2e <log_0>
		sys_arch_reboot(0);
   33124:	2000      	movs	r0, #0
   33126:	f7ff f8e7 	bl	322f8 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   3312a:	bf00      	nop
   3312c:	20008160 	.word	0x20008160
   33130:	20008154 	.word	0x20008154
   33134:	0003caa1 	.word	0x0003caa1

00033138 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   33138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   3313c:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   3313e:	4c21      	ldr	r4, [pc, #132]	; (331c4 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   33140:	4e21      	ldr	r6, [pc, #132]	; (331c8 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   33142:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   33146:	f8df 9088 	ldr.w	r9, [pc, #136]	; 331d0 <check_ext_api_requests+0x98>
{
   3314a:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   3314c:	45a8      	cmp	r8, r5
   3314e:	d803      	bhi.n	33158 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   33150:	2000      	movs	r0, #0
   33152:	b005      	add	sp, #20
   33154:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   33158:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3315a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   3315e:	681f      	ldr	r7, [r3, #0]
   33160:	ab01      	add	r3, sp, #4
   33162:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   33166:	220c      	movs	r2, #12
   33168:	4619      	mov	r1, r3
   3316a:	4638      	mov	r0, r7
   3316c:	f004 fa29 	bl	375c2 <memcmp>
   33170:	b990      	cbnz	r0, 33198 <check_ext_api_requests+0x60>
   33172:	b18f      	cbz	r7, 33198 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   33174:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   33176:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   33178:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   3317a:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   3317c:	4291      	cmp	r1, r2
   3317e:	d10b      	bne.n	33198 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   33180:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   33182:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   33184:	4291      	cmp	r1, r2
   33186:	d807      	bhi.n	33198 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   33188:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   3318a:	4291      	cmp	r1, r2
   3318c:	d904      	bls.n	33198 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   3318e:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   33190:	695b      	ldr	r3, [r3, #20]
   33192:	ea32 0303 	bics.w	r3, r2, r3
   33196:	d00a      	beq.n	331ae <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   33198:	6a27      	ldr	r7, [r4, #32]
   3319a:	b167      	cbz	r7, 331b6 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   3319c:	480b      	ldr	r0, [pc, #44]	; (331cc <check_ext_api_requests+0x94>)
   3319e:	f002 f8bb 	bl	35318 <printk>
			k_panic();
   331a2:	4040      	eors	r0, r0
   331a4:	f380 8811 	msr	BASEPRI, r0
   331a8:	f04f 0004 	mov.w	r0, #4
   331ac:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   331ae:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   331b0:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   331b2:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   331b4:	e7ca      	b.n	3314c <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   331b6:	4648      	mov	r0, r9
   331b8:	f002 f8ae 	bl	35318 <printk>
			*ext_api_req->ext_api = NULL;
   331bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   331be:	601f      	str	r7, [r3, #0]
   331c0:	e7f5      	b.n	331ae <check_ext_api_requests+0x76>
   331c2:	bf00      	nop
   331c4:	0002023c 	.word	0x0002023c
   331c8:	00038670 	.word	0x00038670
   331cc:	0003cabe 	.word	0x0003cabe
   331d0:	0003cae7 	.word	0x0003cae7

000331d4 <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   331d4:	4b04      	ldr	r3, [pc, #16]	; (331e8 <SystemCoreClockUpdate+0x14>)
   331d6:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   331da:	4b04      	ldr	r3, [pc, #16]	; (331ec <SystemCoreClockUpdate+0x18>)
   331dc:	f002 0203 	and.w	r2, r2, #3
   331e0:	40d3      	lsrs	r3, r2
   331e2:	4a03      	ldr	r2, [pc, #12]	; (331f0 <SystemCoreClockUpdate+0x1c>)
   331e4:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   331e6:	4770      	bx	lr
   331e8:	40005000 	.word	0x40005000
   331ec:	07a12000 	.word	0x07a12000
   331f0:	200080b0 	.word	0x200080b0

000331f4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   331f4:	4b04      	ldr	r3, [pc, #16]	; (33208 <nrfx_clock_init+0x14>)
   331f6:	791a      	ldrb	r2, [r3, #4]
   331f8:	b922      	cbnz	r2, 33204 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   331fa:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   331fc:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   331fe:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   33200:	4802      	ldr	r0, [pc, #8]	; (3320c <nrfx_clock_init+0x18>)
   33202:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   33204:	4802      	ldr	r0, [pc, #8]	; (33210 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   33206:	4770      	bx	lr
   33208:	20008dc4 	.word	0x20008dc4
   3320c:	0bad0000 	.word	0x0bad0000
   33210:	0bad000c 	.word	0x0bad000c

00033214 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   33214:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   33216:	2005      	movs	r0, #5
   33218:	f7fe fc20 	bl	31a5c <arch_irq_is_enabled>
   3321c:	b910      	cbnz	r0, 33224 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   3321e:	2005      	movs	r0, #5
   33220:	f7fe fc0c 	bl	31a3c <arch_irq_enable>
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
   33224:	2201      	movs	r2, #1
   33226:	4b03      	ldr	r3, [pc, #12]	; (33234 <nrfx_clock_enable+0x20>)
   33228:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   3322c:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   33230:	bd08      	pop	{r3, pc}
   33232:	bf00      	nop
   33234:	40005000 	.word	0x40005000

00033238 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   33238:	2803      	cmp	r0, #3
   3323a:	d842      	bhi.n	332c2 <nrfx_clock_start+0x8a>
   3323c:	e8df f000 	tbb	[pc, r0]
   33240:	362a2002 	.word	0x362a2002
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   33244:	4b1f      	ldr	r3, [pc, #124]	; (332c4 <nrfx_clock_start+0x8c>)
   33246:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   3324a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   3324e:	f411 3f80 	tst.w	r1, #65536	; 0x10000
   33252:	4619      	mov	r1, r3
   33254:	d010      	beq.n	33278 <nrfx_clock_start+0x40>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   33256:	f002 0203 	and.w	r2, r2, #3
   3325a:	2a02      	cmp	r2, #2
   3325c:	d10c      	bne.n	33278 <nrfx_clock_start+0x40>
    p_reg->LFCLKSRC = (uint32_t)(source);
   3325e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   33262:	2200      	movs	r2, #0
   33264:	4b18      	ldr	r3, [pc, #96]	; (332c8 <nrfx_clock_start+0x90>)
   33266:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   33268:	2202      	movs	r2, #2
   3326a:	681b      	ldr	r3, [r3, #0]
   3326c:	4b15      	ldr	r3, [pc, #84]	; (332c4 <nrfx_clock_start+0x8c>)
   3326e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   33272:	2201      	movs	r2, #1
   33274:	609a      	str	r2, [r3, #8]
}
   33276:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   33278:	2301      	movs	r3, #1
   3327a:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
   3327e:	e7f0      	b.n	33262 <nrfx_clock_start+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   33280:	2200      	movs	r2, #0
   33282:	4b12      	ldr	r3, [pc, #72]	; (332cc <nrfx_clock_start+0x94>)
   33284:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   33286:	2201      	movs	r2, #1
   33288:	681b      	ldr	r3, [r3, #0]
   3328a:	4b0e      	ldr	r3, [pc, #56]	; (332c4 <nrfx_clock_start+0x8c>)
   3328c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   33290:	601a      	str	r2, [r3, #0]
}
   33292:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   33294:	2200      	movs	r2, #0
   33296:	4b0e      	ldr	r3, [pc, #56]	; (332d0 <nrfx_clock_start+0x98>)
   33298:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   3329a:	f44f 7200 	mov.w	r2, #512	; 0x200
   3329e:	681b      	ldr	r3, [r3, #0]
   332a0:	4b08      	ldr	r3, [pc, #32]	; (332c4 <nrfx_clock_start+0x8c>)
   332a2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   332a6:	2201      	movs	r2, #1
   332a8:	621a      	str	r2, [r3, #32]
}
   332aa:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   332ac:	2200      	movs	r2, #0
   332ae:	4b09      	ldr	r3, [pc, #36]	; (332d4 <nrfx_clock_start+0x9c>)
   332b0:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   332b2:	f44f 7280 	mov.w	r2, #256	; 0x100
   332b6:	681b      	ldr	r3, [r3, #0]
   332b8:	4b02      	ldr	r3, [pc, #8]	; (332c4 <nrfx_clock_start+0x8c>)
   332ba:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   332be:	2201      	movs	r2, #1
   332c0:	619a      	str	r2, [r3, #24]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   332c2:	4770      	bx	lr
   332c4:	40005000 	.word	0x40005000
   332c8:	40005104 	.word	0x40005104
   332cc:	40005100 	.word	0x40005100
   332d0:	40005124 	.word	0x40005124
   332d4:	40005120 	.word	0x40005120

000332d8 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   332d8:	b570      	push	{r4, r5, r6, lr}
   332da:	4604      	mov	r4, r0
   332dc:	2803      	cmp	r0, #3
   332de:	d83b      	bhi.n	33358 <nrfx_clock_stop+0x80>
   332e0:	e8df f000 	tbb	[pc, r0]
   332e4:	473b2002 	.word	0x473b2002
    p_reg->INTENCLR = mask;
   332e8:	2202      	movs	r2, #2
   332ea:	4b2b      	ldr	r3, [pc, #172]	; (33398 <nrfx_clock_stop+0xc0>)
   332ec:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   332f0:	2200      	movs	r2, #0
   332f2:	f503 7382 	add.w	r3, r3, #260	; 0x104
   332f6:	601a      	str	r2, [r3, #0]
   332f8:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   332fa:	4b28      	ldr	r3, [pc, #160]	; (3339c <nrfx_clock_stop+0xc4>)
   332fc:	2201      	movs	r2, #1
   332fe:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   33302:	4e25      	ldr	r6, [pc, #148]	; (33398 <nrfx_clock_stop+0xc0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   33304:	601a      	str	r2, [r3, #0]
    switch (domain)
   33306:	2c02      	cmp	r4, #2
   33308:	d03f      	beq.n	3338a <nrfx_clock_stop+0xb2>
   3330a:	2c03      	cmp	r4, #3
   3330c:	d040      	beq.n	33390 <nrfx_clock_stop+0xb8>
   3330e:	bb1c      	cbnz	r4, 33358 <nrfx_clock_stop+0x80>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   33310:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   33314:	03db      	lsls	r3, r3, #15
   33316:	d51f      	bpl.n	33358 <nrfx_clock_stop+0x80>
   33318:	2001      	movs	r0, #1
   3331a:	f004 fbfa 	bl	37b12 <nrfx_busy_wait>
   3331e:	3d01      	subs	r5, #1
   33320:	d1f1      	bne.n	33306 <nrfx_clock_stop+0x2e>
   33322:	e019      	b.n	33358 <nrfx_clock_stop+0x80>
    p_reg->INTENCLR = mask;
   33324:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   33326:	2100      	movs	r1, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   33328:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3332c:	4a1c      	ldr	r2, [pc, #112]	; (333a0 <nrfx_clock_stop+0xc8>)
    p_reg->INTENCLR = mask;
   3332e:	4c1a      	ldr	r4, [pc, #104]	; (33398 <nrfx_clock_stop+0xc0>)
   33330:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   33334:	6011      	str	r1, [r2, #0]
   33336:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   33338:	4a1a      	ldr	r2, [pc, #104]	; (333a4 <nrfx_clock_stop+0xcc>)
   3333a:	6013      	str	r3, [r2, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   3333c:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   33340:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   33344:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   33348:	03d2      	lsls	r2, r2, #15
   3334a:	d505      	bpl.n	33358 <nrfx_clock_stop+0x80>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   3334c:	b123      	cbz	r3, 33358 <nrfx_clock_stop+0x80>
   3334e:	2001      	movs	r0, #1
   33350:	f004 fbdf 	bl	37b12 <nrfx_busy_wait>
   33354:	3d01      	subs	r5, #1
   33356:	d1f1      	bne.n	3333c <nrfx_clock_stop+0x64>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   33358:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
   3335a:	f44f 7200 	mov.w	r2, #512	; 0x200
   3335e:	4b0e      	ldr	r3, [pc, #56]	; (33398 <nrfx_clock_stop+0xc0>)
   33360:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   33364:	2200      	movs	r2, #0
   33366:	f503 7392 	add.w	r3, r3, #292	; 0x124
   3336a:	601a      	str	r2, [r3, #0]
   3336c:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3336e:	4b0e      	ldr	r3, [pc, #56]	; (333a8 <nrfx_clock_stop+0xd0>)
   33370:	e7c4      	b.n	332fc <nrfx_clock_stop+0x24>
    p_reg->INTENCLR = mask;
   33372:	f44f 7280 	mov.w	r2, #256	; 0x100
   33376:	4b08      	ldr	r3, [pc, #32]	; (33398 <nrfx_clock_stop+0xc0>)
   33378:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3337c:	2200      	movs	r2, #0
   3337e:	f503 7390 	add.w	r3, r3, #288	; 0x120
   33382:	601a      	str	r2, [r3, #0]
   33384:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   33386:	4b09      	ldr	r3, [pc, #36]	; (333ac <nrfx_clock_stop+0xd4>)
   33388:	e7b8      	b.n	332fc <nrfx_clock_stop+0x24>
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   3338a:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   3338e:	e7c1      	b.n	33314 <nrfx_clock_stop+0x3c>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   33390:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   33394:	e7be      	b.n	33314 <nrfx_clock_stop+0x3c>
   33396:	bf00      	nop
   33398:	40005000 	.word	0x40005000
   3339c:	4000500c 	.word	0x4000500c
   333a0:	40005100 	.word	0x40005100
   333a4:	40005004 	.word	0x40005004
   333a8:	40005024 	.word	0x40005024
   333ac:	4000501c 	.word	0x4000501c

000333b0 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   333b0:	4b24      	ldr	r3, [pc, #144]	; (33444 <nrfx_power_clock_irq_handler+0x94>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   333b2:	b510      	push	{r4, lr}
   333b4:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   333b6:	b14a      	cbz	r2, 333cc <nrfx_power_clock_irq_handler+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   333b8:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
   333ba:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   333bc:	6018      	str	r0, [r3, #0]
   333be:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   333c0:	4b21      	ldr	r3, [pc, #132]	; (33448 <nrfx_power_clock_irq_handler+0x98>)
   333c2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   333c6:	4b21      	ldr	r3, [pc, #132]	; (3344c <nrfx_power_clock_irq_handler+0x9c>)
   333c8:	681b      	ldr	r3, [r3, #0]
   333ca:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   333cc:	4b20      	ldr	r3, [pc, #128]	; (33450 <nrfx_power_clock_irq_handler+0xa0>)
   333ce:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   333d0:	b182      	cbz	r2, 333f4 <nrfx_power_clock_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   333d2:	2200      	movs	r2, #0
   333d4:	601a      	str	r2, [r3, #0]
   333d6:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   333d8:	4b1b      	ldr	r3, [pc, #108]	; (33448 <nrfx_power_clock_irq_handler+0x98>)
   333da:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   333de:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   333e2:	f002 0203 	and.w	r2, r2, #3
   333e6:	2a01      	cmp	r2, #1
   333e8:	f04f 0102 	mov.w	r1, #2
   333ec:	d122      	bne.n	33434 <nrfx_power_clock_irq_handler+0x84>
    p_reg->LFCLKSRC = (uint32_t)(source);
   333ee:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   333f2:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   333f4:	4b17      	ldr	r3, [pc, #92]	; (33454 <nrfx_power_clock_irq_handler+0xa4>)
   333f6:	681a      	ldr	r2, [r3, #0]
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   333f8:	b15a      	cbz	r2, 33412 <nrfx_power_clock_irq_handler+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   333fa:	2200      	movs	r2, #0
   333fc:	601a      	str	r2, [r3, #0]
    p_reg->INTENCLR = mask;
   333fe:	f44f 7280 	mov.w	r2, #256	; 0x100
   33402:	681b      	ldr	r3, [r3, #0]
   33404:	4b10      	ldr	r3, [pc, #64]	; (33448 <nrfx_power_clock_irq_handler+0x98>)
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   33406:	2004      	movs	r0, #4
   33408:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   3340c:	4b0f      	ldr	r3, [pc, #60]	; (3344c <nrfx_power_clock_irq_handler+0x9c>)
   3340e:	681b      	ldr	r3, [r3, #0]
   33410:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   33412:	4b11      	ldr	r3, [pc, #68]	; (33458 <nrfx_power_clock_irq_handler+0xa8>)
   33414:	681a      	ldr	r2, [r3, #0]
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   33416:	b1a2      	cbz	r2, 33442 <nrfx_power_clock_irq_handler+0x92>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   33418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3341c:	2200      	movs	r2, #0
   3341e:	601a      	str	r2, [r3, #0]
    p_reg->INTENCLR = mask;
   33420:	f44f 7200 	mov.w	r2, #512	; 0x200
   33424:	681b      	ldr	r3, [r3, #0]
   33426:	4b08      	ldr	r3, [pc, #32]	; (33448 <nrfx_power_clock_irq_handler+0x98>)
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   33428:	2005      	movs	r0, #5
   3342a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   3342e:	4b07      	ldr	r3, [pc, #28]	; (3344c <nrfx_power_clock_irq_handler+0x9c>)
   33430:	681b      	ldr	r3, [r3, #0]
   33432:	4718      	bx	r3
   33434:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   33438:	4b04      	ldr	r3, [pc, #16]	; (3344c <nrfx_power_clock_irq_handler+0x9c>)
   3343a:	2001      	movs	r0, #1
   3343c:	681b      	ldr	r3, [r3, #0]
   3343e:	4798      	blx	r3
   33440:	e7d8      	b.n	333f4 <nrfx_power_clock_irq_handler+0x44>
}
   33442:	bd10      	pop	{r4, pc}
   33444:	40005100 	.word	0x40005100
   33448:	40005000 	.word	0x40005000
   3344c:	20008dc4 	.word	0x20008dc4
   33450:	40005104 	.word	0x40005104
   33454:	40005120 	.word	0x40005120
   33458:	40005124 	.word	0x40005124

0003345c <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = 0;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   3345c:	b5f0      	push	{r4, r5, r6, r7, lr}
	__asm__ volatile(
   3345e:	f04f 0320 	mov.w	r3, #32
   33462:	f3ef 8511 	mrs	r5, BASEPRI
   33466:	f383 8811 	msr	BASEPRI, r3
   3346a:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code;

    NRFX_CRITICAL_SECTION_ENTER();
    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   3346e:	4a0c      	ldr	r2, [pc, #48]	; (334a0 <nrfx_dppi_channel_alloc+0x44>)
   33470:	6814      	ldr	r4, [r2, #0]
    uint8_t channel = 0;

    if (!remaining_channels)
   33472:	43e7      	mvns	r7, r4
   33474:	d012      	beq.n	3349c <nrfx_dppi_channel_alloc+0x40>
   33476:	2300      	movs	r3, #0
   33478:	b2d9      	uxtb	r1, r3
        err_code = NRFX_ERROR_NO_MEM;
    }
    else
    {
        // Find first free channel
        while (!(remaining_channels & DPPI_BIT_SET(channel)))
   3347a:	fa27 f601 	lsr.w	r6, r7, r1
   3347e:	07f6      	lsls	r6, r6, #31
   33480:	f103 0301 	add.w	r3, r3, #1
   33484:	d5f8      	bpl.n	33478 <nrfx_dppi_channel_alloc+0x1c>
        {
            channel++;
        }

        m_allocated_channels |= DPPI_BIT_SET(channel);
   33486:	2301      	movs	r3, #1
   33488:	408b      	lsls	r3, r1
   3348a:	4323      	orrs	r3, r4
        *p_channel = channel;
   3348c:	7001      	strb	r1, [r0, #0]

        err_code = NRFX_SUCCESS;
   3348e:	4805      	ldr	r0, [pc, #20]	; (334a4 <nrfx_dppi_channel_alloc+0x48>)
        m_allocated_channels |= DPPI_BIT_SET(channel);
   33490:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   33492:	f385 8811 	msr	BASEPRI, r5
   33496:	f3bf 8f6f 	isb	sy
        NRFX_LOG_INFO("Function: %s, error code: %s.",
                      __func__,
                      NRFX_LOG_ERROR_STRING_GET(err_code));
    }
    return err_code;
}
   3349a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        err_code = NRFX_ERROR_NO_MEM;
   3349c:	4802      	ldr	r0, [pc, #8]	; (334a8 <nrfx_dppi_channel_alloc+0x4c>)
   3349e:	e7f8      	b.n	33492 <nrfx_dppi_channel_alloc+0x36>
   334a0:	20008dcc 	.word	0x20008dcc
   334a4:	0bad0000 	.word	0x0bad0000
   334a8:	0bad0002 	.word	0x0bad0002

000334ac <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   334ac:	2301      	movs	r3, #1
   334ae:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   334b2:	f010 0fff 	tst.w	r0, #255	; 0xff
   334b6:	d012      	beq.n	334de <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
   334b8:	f04f 0320 	mov.w	r3, #32
   334bc:	f3ef 8111 	mrs	r1, BASEPRI
   334c0:	f383 8811 	msr	BASEPRI, r3
   334c4:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   334c8:	4a06      	ldr	r2, [pc, #24]	; (334e4 <nrfx_gpiote_channel_free+0x38>)
   334ca:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   334cc:	ea23 0000 	bic.w	r0, r3, r0
   334d0:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   334d2:	f381 8811 	msr	BASEPRI, r1
   334d6:	f3bf 8f6f 	isb	sy
   334da:	4803      	ldr	r0, [pc, #12]	; (334e8 <nrfx_gpiote_channel_free+0x3c>)
   334dc:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   334de:	4803      	ldr	r0, [pc, #12]	; (334ec <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   334e0:	4770      	bx	lr
   334e2:	bf00      	nop
   334e4:	20008dd0 	.word	0x20008dd0
   334e8:	0bad0000 	.word	0x0bad0000
   334ec:	0bad0004 	.word	0x0bad0004

000334f0 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   334f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   334f4:	22ff      	movs	r2, #255	; 0xff
{
   334f6:	2400      	movs	r4, #0
    return m_cb.allocated_channels_mask & (1UL << index);
   334f8:	2601      	movs	r6, #1
{
   334fa:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   334fc:	f8df e058 	ldr.w	lr, [pc, #88]	; 33558 <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   33500:	4814      	ldr	r0, [pc, #80]	; (33554 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   33502:	f8df 8058 	ldr.w	r8, [pc, #88]	; 3355c <nrfx_gpiote_channel_alloc+0x6c>
   33506:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   33508:	f04f 0120 	mov.w	r1, #32
   3350c:	f3ef 8c11 	mrs	ip, BASEPRI
   33510:	f381 8811 	msr	BASEPRI, r1
   33514:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   33518:	fa22 f103 	lsr.w	r1, r2, r3
   3351c:	07c9      	lsls	r1, r1, #31
   3351e:	d50a      	bpl.n	33536 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   33520:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
   33524:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   33528:	4239      	tst	r1, r7
            err_code = NRFX_SUCCESS;
   3352a:	bf01      	itttt	eq
   3352c:	4640      	moveq	r0, r8
    m_cb.allocated_channels_mask |= (1UL << index);
   3352e:	4339      	orreq	r1, r7
   33530:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            *p_channel = ch_idx;
   33534:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   33536:	f38c 8811 	msr	BASEPRI, ip
   3353a:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   3353e:	4540      	cmp	r0, r8
   33540:	d005      	beq.n	3354e <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   33542:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   33546:	439a      	bics	r2, r3
   33548:	f104 0401 	add.w	r4, r4, #1
   3354c:	d1db      	bne.n	33506 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   3354e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33552:	bf00      	nop
   33554:	0bad0002 	.word	0x0bad0002
   33558:	20008dd0 	.word	0x20008dd0
   3355c:	0bad0000 	.word	0x0bad0000

00033560 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   33560:	4b0e      	ldr	r3, [pc, #56]	; (3359c <z_sys_init_run_level+0x3c>)
{
   33562:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   33564:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   33568:	3001      	adds	r0, #1
   3356a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   3356e:	42a6      	cmp	r6, r4
   33570:	d800      	bhi.n	33574 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   33572:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   33574:	e9d4 3500 	ldrd	r3, r5, [r4]
   33578:	4628      	mov	r0, r5
   3357a:	4798      	blx	r3
		if (dev != NULL) {
   3357c:	b165      	cbz	r5, 33598 <z_sys_init_run_level+0x38>
			if (rc != 0) {
   3357e:	68eb      	ldr	r3, [r5, #12]
   33580:	b130      	cbz	r0, 33590 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   33582:	2800      	cmp	r0, #0
   33584:	bfb8      	it	lt
   33586:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   33588:	28ff      	cmp	r0, #255	; 0xff
   3358a:	bfa8      	it	ge
   3358c:	20ff      	movge	r0, #255	; 0xff
   3358e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   33590:	785a      	ldrb	r2, [r3, #1]
   33592:	f042 0201 	orr.w	r2, r2, #1
   33596:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   33598:	3408      	adds	r4, #8
   3359a:	e7e8      	b.n	3356e <z_sys_init_run_level+0xe>
   3359c:	0003af24 	.word	0x0003af24

000335a0 <z_device_get_all_static>:
#include <syscalls/device_usable_check_mrsh.c>
#endif /* CONFIG_USERSPACE */

size_t z_device_get_all_static(struct device const **devices)
{
	*devices = __device_start;
   335a0:	4a03      	ldr	r2, [pc, #12]	; (335b0 <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
   335a2:	4b04      	ldr	r3, [pc, #16]	; (335b4 <z_device_get_all_static+0x14>)
	*devices = __device_start;
   335a4:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
   335a6:	1a9b      	subs	r3, r3, r2
}
   335a8:	4803      	ldr	r0, [pc, #12]	; (335b8 <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
   335aa:	10db      	asrs	r3, r3, #3
}
   335ac:	4358      	muls	r0, r3
   335ae:	4770      	bx	lr
   335b0:	200080c4 	.word	0x200080c4
   335b4:	20008154 	.word	0x20008154
   335b8:	aaaaaaab 	.word	0xaaaaaaab

000335bc <z_impl_device_get_binding>:
{
   335bc:	b570      	push	{r4, r5, r6, lr}
	if ((name == NULL) || (name[0] == '\0')) {
   335be:	4605      	mov	r5, r0
   335c0:	b910      	cbnz	r0, 335c8 <z_impl_device_get_binding+0xc>
		return NULL;
   335c2:	2400      	movs	r4, #0
}
   335c4:	4620      	mov	r0, r4
   335c6:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   335c8:	7803      	ldrb	r3, [r0, #0]
   335ca:	2b00      	cmp	r3, #0
   335cc:	d0f9      	beq.n	335c2 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   335ce:	4a0f      	ldr	r2, [pc, #60]	; (3360c <z_impl_device_get_binding+0x50>)
   335d0:	4c0f      	ldr	r4, [pc, #60]	; (33610 <z_impl_device_get_binding+0x54>)
   335d2:	4616      	mov	r6, r2
   335d4:	4294      	cmp	r4, r2
   335d6:	d108      	bne.n	335ea <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   335d8:	4c0d      	ldr	r4, [pc, #52]	; (33610 <z_impl_device_get_binding+0x54>)
   335da:	42b4      	cmp	r4, r6
   335dc:	d0f1      	beq.n	335c2 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   335de:	4620      	mov	r0, r4
   335e0:	f004 fa9a 	bl	37b18 <z_device_ready>
   335e4:	b950      	cbnz	r0, 335fc <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   335e6:	3418      	adds	r4, #24
   335e8:	e7f7      	b.n	335da <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   335ea:	4620      	mov	r0, r4
   335ec:	f004 fa94 	bl	37b18 <z_device_ready>
   335f0:	b110      	cbz	r0, 335f8 <z_impl_device_get_binding+0x3c>
   335f2:	6823      	ldr	r3, [r4, #0]
   335f4:	42ab      	cmp	r3, r5
   335f6:	d0e5      	beq.n	335c4 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   335f8:	3418      	adds	r4, #24
   335fa:	e7eb      	b.n	335d4 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   335fc:	4628      	mov	r0, r5
   335fe:	6821      	ldr	r1, [r4, #0]
   33600:	f003 ffc4 	bl	3758c <strcmp>
   33604:	2800      	cmp	r0, #0
   33606:	d1ee      	bne.n	335e6 <z_impl_device_get_binding+0x2a>
   33608:	e7dc      	b.n	335c4 <z_impl_device_get_binding+0x8>
   3360a:	bf00      	nop
   3360c:	20008154 	.word	0x20008154
   33610:	200080c4 	.word	0x200080c4

00033614 <device_required_foreach>:
}

int device_required_foreach(const struct device *dev,
			  device_visitor_callback_t visitor_cb,
			  void *context)
{
   33614:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t handle_count = 0;
	const device_handle_t *handles =
		device_required_handles_get(dev, &handle_count);
   33618:	6944      	ldr	r4, [r0, #20]
{
   3361a:	4688      	mov	r8, r1
   3361c:	4693      	mov	fp, r2
	if (rv != NULL) {
   3361e:	bb24      	cbnz	r4, 3366a <device_required_foreach+0x56>
	size_t handle_count = 0;
   33620:	4625      	mov	r5, r4
		if (rc < 0) {
			return rc;
		}
	}

	return handle_count;
   33622:	4628      	mov	r0, r5
   33624:	e01f      	b.n	33666 <device_required_foreach+0x52>
			++i;
   33626:	3501      	adds	r5, #1
		       && (rv[i] != DEVICE_HANDLE_SEP)) {
   33628:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
   3362c:	440b      	add	r3, r1
		while ((rv[i] != DEVICE_HANDLE_ENDS)
   3362e:	b29b      	uxth	r3, r3
   33630:	4293      	cmp	r3, r2
   33632:	d9f8      	bls.n	33626 <device_required_foreach+0x12>
		dev = &__device_start[dev_handle - 1];
   33634:	f04f 0a18 	mov.w	sl, #24
	size_t numdev = __device_end - __device_start;
   33638:	4e10      	ldr	r6, [pc, #64]	; (3367c <device_required_foreach+0x68>)
   3363a:	4f11      	ldr	r7, [pc, #68]	; (33680 <device_required_foreach+0x6c>)
   3363c:	eb04 0945 	add.w	r9, r4, r5, lsl #1
   33640:	1bbf      	subs	r7, r7, r6
   33642:	10fb      	asrs	r3, r7, #3
   33644:	4f0f      	ldr	r7, [pc, #60]	; (33684 <device_required_foreach+0x70>)
   33646:	435f      	muls	r7, r3
	for (size_t i = 0; i < handle_count; ++i) {
   33648:	45a1      	cmp	r9, r4
   3364a:	d0ea      	beq.n	33622 <device_required_foreach+0xe>
		device_handle_t dh = handles[i];
   3364c:	f934 0b02 	ldrsh.w	r0, [r4], #2
	if ((dev_handle > 0) && ((size_t)dev_handle < numdev)) {
   33650:	2800      	cmp	r0, #0
   33652:	dd10      	ble.n	33676 <device_required_foreach+0x62>
   33654:	4287      	cmp	r7, r0
   33656:	d90e      	bls.n	33676 <device_required_foreach+0x62>
		dev = &__device_start[dev_handle - 1];
   33658:	3801      	subs	r0, #1
   3365a:	fb0a 6000 	mla	r0, sl, r0, r6
		int rc = visitor_cb(rdev, context);
   3365e:	4659      	mov	r1, fp
   33660:	47c0      	blx	r8
		if (rc < 0) {
   33662:	2800      	cmp	r0, #0
   33664:	daf0      	bge.n	33648 <device_required_foreach+0x34>
}
   33666:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		size_t i = 0;
   3366a:	2500      	movs	r5, #0
		       && (rv[i] != DEVICE_HANDLE_SEP)) {
   3366c:	f647 71ff 	movw	r1, #32767	; 0x7fff
		while ((rv[i] != DEVICE_HANDLE_ENDS)
   33670:	f64f 72fd 	movw	r2, #65533	; 0xfffd
   33674:	e7d8      	b.n	33628 <device_required_foreach+0x14>
	const struct device *dev = NULL;
   33676:	2000      	movs	r0, #0
   33678:	e7f1      	b.n	3365e <device_required_foreach+0x4a>
   3367a:	bf00      	nop
   3367c:	200080c4 	.word	0x200080c4
   33680:	20008154 	.word	0x20008154
   33684:	aaaaaaab 	.word	0xaaaaaaab

00033688 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   33688:	4b01      	ldr	r3, [pc, #4]	; (33690 <z_impl_z_errno+0x8>)
   3368a:	6898      	ldr	r0, [r3, #8]
}
   3368c:	3098      	adds	r0, #152	; 0x98
   3368e:	4770      	bx	lr
   33690:	20008e30 	.word	0x20008e30

00033694 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   33694:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   33698:	4606      	mov	r6, r0
   3369a:	460f      	mov	r7, r1
	__asm__ volatile(
   3369c:	f04f 0320 	mov.w	r3, #32
   336a0:	f3ef 8811 	mrs	r8, BASEPRI
   336a4:	f383 8811 	msr	BASEPRI, r3
   336a8:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   336ac:	f000 ffce 	bl	3464c <z_impl_k_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   336b0:	4c2c      	ldr	r4, [pc, #176]	; (33764 <z_fatal_error+0xd0>)
   336b2:	4605      	mov	r5, r0
   336b4:	6823      	ldr	r3, [r4, #0]
   336b6:	0759      	lsls	r1, r3, #29
   336b8:	d051      	beq.n	3375e <z_fatal_error+0xca>
   336ba:	4b2b      	ldr	r3, [pc, #172]	; (33768 <z_fatal_error+0xd4>)
   336bc:	2e04      	cmp	r6, #4
   336be:	eba4 0303 	sub.w	r3, r4, r3
   336c2:	ea4f 0393 	mov.w	r3, r3, lsr #2
   336c6:	bf98      	it	ls
   336c8:	4a28      	ldrls	r2, [pc, #160]	; (3376c <z_fatal_error+0xd8>)
   336ca:	ea4f 1383 	mov.w	r3, r3, lsl #6
   336ce:	f043 0301 	orr.w	r3, r3, #1
	switch (reason) {
   336d2:	bf94      	ite	ls
   336d4:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   336d8:	4a25      	ldrhi	r2, [pc, #148]	; (33770 <z_fatal_error+0xdc>)
   336da:	f8ad 3000 	strh.w	r3, [sp]
   336de:	4631      	mov	r1, r6
   336e0:	2300      	movs	r3, #0
   336e2:	4824      	ldr	r0, [pc, #144]	; (33774 <z_fatal_error+0xe0>)
   336e4:	f002 fadd 	bl	35ca2 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   336e8:	b17f      	cbz	r7, 3370a <z_fatal_error+0x76>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   336ea:	69fb      	ldr	r3, [r7, #28]
   336ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
   336f0:	b15b      	cbz	r3, 3370a <z_fatal_error+0x76>
		LOG_ERR("Fault during interrupt handling\n");
   336f2:	6823      	ldr	r3, [r4, #0]
   336f4:	075a      	lsls	r2, r3, #29
   336f6:	d01b      	beq.n	33730 <z_fatal_error+0x9c>
   336f8:	491b      	ldr	r1, [pc, #108]	; (33768 <z_fatal_error+0xd4>)
   336fa:	481f      	ldr	r0, [pc, #124]	; (33778 <z_fatal_error+0xe4>)
   336fc:	1a61      	subs	r1, r4, r1
   336fe:	0889      	lsrs	r1, r1, #2
   33700:	0189      	lsls	r1, r1, #6
   33702:	f041 0101 	orr.w	r1, r1, #1
   33706:	f002 fa92 	bl	35c2e <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   3370a:	6823      	ldr	r3, [r4, #0]
   3370c:	075b      	lsls	r3, r3, #29
   3370e:	d00f      	beq.n	33730 <z_fatal_error+0x9c>
   33710:	4b15      	ldr	r3, [pc, #84]	; (33768 <z_fatal_error+0xd4>)
   33712:	1ae4      	subs	r4, r4, r3
   33714:	08a4      	lsrs	r4, r4, #2
   33716:	01a4      	lsls	r4, r4, #6
   33718:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   3371c:	b9b5      	cbnz	r5, 3374c <z_fatal_error+0xb8>
		thread_name = "unknown";
   3371e:	4817      	ldr	r0, [pc, #92]	; (3377c <z_fatal_error+0xe8>)
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   33720:	f7fb f8d6 	bl	2e8d0 <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
   33724:	4623      	mov	r3, r4
   33726:	4602      	mov	r2, r0
   33728:	4629      	mov	r1, r5
   3372a:	4815      	ldr	r0, [pc, #84]	; (33780 <z_fatal_error+0xec>)
   3372c:	f002 faa0 	bl	35c70 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   33730:	4639      	mov	r1, r7
   33732:	4630      	mov	r0, r6
   33734:	f7ff fce6 	bl	33104 <k_sys_fatal_error_handler>
	__asm__ volatile(
   33738:	f388 8811 	msr	BASEPRI, r8
   3373c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   33740:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   33742:	b002      	add	sp, #8
   33744:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   33748:	f7fe bdf4 	b.w	32334 <z_impl_k_thread_abort>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   3374c:	4628      	mov	r0, r5
   3374e:	f004 fa37 	bl	37bc0 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   33752:	2800      	cmp	r0, #0
   33754:	d0e3      	beq.n	3371e <z_fatal_error+0x8a>
   33756:	7803      	ldrb	r3, [r0, #0]
   33758:	2b00      	cmp	r3, #0
   3375a:	d0e0      	beq.n	3371e <z_fatal_error+0x8a>
   3375c:	e7e0      	b.n	33720 <z_fatal_error+0x8c>
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   3375e:	2f00      	cmp	r7, #0
   33760:	d1c3      	bne.n	336ea <z_fatal_error+0x56>
   33762:	e7e5      	b.n	33730 <z_fatal_error+0x9c>
   33764:	2000816c 	.word	0x2000816c
   33768:	20008154 	.word	0x20008154
   3376c:	0003af3c 	.word	0x0003af3c
   33770:	0003cb1a 	.word	0x0003cb1a
   33774:	0003cb30 	.word	0x0003cb30
   33778:	0003cb58 	.word	0x0003cb58
   3377c:	0003cb28 	.word	0x0003cb28
   33780:	0003cb79 	.word	0x0003cb79

00033784 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   33784:	4802      	ldr	r0, [pc, #8]	; (33790 <z_bss_zero+0xc>)
   33786:	4a03      	ldr	r2, [pc, #12]	; (33794 <z_bss_zero+0x10>)
   33788:	2100      	movs	r1, #0
   3378a:	1a12      	subs	r2, r2, r0
   3378c:	f003 bf6b 	b.w	37666 <memset>
   33790:	20008208 	.word	0x20008208
   33794:	2000959c 	.word	0x2000959c

00033798 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   33798:	2201      	movs	r2, #1
{
   3379a:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   3379c:	4b09      	ldr	r3, [pc, #36]	; (337c4 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   3379e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   337a0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   337a2:	f7ff fedd 	bl	33560 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   337a6:	f004 fd30 	bl	3820a <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   337aa:	2003      	movs	r0, #3
   337ac:	f7ff fed8 	bl	33560 <z_sys_init_run_level>

	z_init_static_threads();
   337b0:	f000 fa00 	bl	33bb4 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
   337b4:	f001 fbc2 	bl	34f3c <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   337b8:	4a03      	ldr	r2, [pc, #12]	; (337c8 <bg_thread_main+0x30>)
   337ba:	7b13      	ldrb	r3, [r2, #12]
   337bc:	f023 0301 	bic.w	r3, r3, #1
   337c0:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   337c2:	bd08      	pop	{r3, pc}
   337c4:	2000959b 	.word	0x2000959b
   337c8:	200086c8 	.word	0x200086c8

000337cc <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   337cc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   337d0:	b0b7      	sub	sp, #220	; 0xdc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   337d2:	f7fa ff1d 	bl	2e610 <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   337d6:	4b3c      	ldr	r3, [pc, #240]	; (338c8 <z_cstart+0xfc>)
	uint32_t msp =
   337d8:	f503 6a00 	add.w	sl, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   337dc:	f38a 8808 	msr	MSP, sl
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   337e0:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   337e4:	2400      	movs	r4, #0
   337e6:	23e0      	movs	r3, #224	; 0xe0
   337e8:	4d38      	ldr	r5, [pc, #224]	; (338cc <z_cstart+0x100>)
	_kernel.ready_q.cache = &z_main_thread;
   337ea:	4e39      	ldr	r6, [pc, #228]	; (338d0 <z_cstart+0x104>)
   337ec:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   337f0:	77ec      	strb	r4, [r5, #31]
   337f2:	762c      	strb	r4, [r5, #24]
   337f4:	766c      	strb	r4, [r5, #25]
   337f6:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   337f8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   337fa:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 338f0 <z_cstart+0x124>
   337fe:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   33802:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   33804:	f7fe fd6c 	bl	322e0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   33808:	f7fe fa22 	bl	31c50 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   3380c:	f04f 33ff 	mov.w	r3, #4294967295
   33810:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   33812:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   33814:	f7fe ff26 	bl	32664 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   33818:	f7fe fd9e 	bl	32358 <z_arm_configure_static_mpu_regions>
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   3381c:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   33820:	4d2c      	ldr	r5, [pc, #176]	; (338d4 <z_cstart+0x108>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   33822:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	_current_cpu->current = dummy_thread;
   33826:	ab08      	add	r3, sp, #32
   33828:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
   3382a:	e9cd 442f 	strd	r4, r4, [sp, #188]	; 0xbc
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   3382e:	f004 f972 	bl	37b16 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   33832:	4620      	mov	r0, r4
   33834:	f7ff fe94 	bl	33560 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   33838:	2001      	movs	r0, #1
   3383a:	f7ff fe91 	bl	33560 <z_sys_init_run_level>
	z_sched_init();
   3383e:	f000 fe85 	bl	3454c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   33842:	4b25      	ldr	r3, [pc, #148]	; (338d8 <z_cstart+0x10c>)
	_kernel.ready_q.cache = &z_main_thread;
   33844:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   33846:	9305      	str	r3, [sp, #20]
   33848:	2301      	movs	r3, #1
   3384a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   3384e:	4923      	ldr	r1, [pc, #140]	; (338dc <z_cstart+0x110>)
   33850:	e9cd 4303 	strd	r4, r3, [sp, #12]
   33854:	4630      	mov	r0, r6
   33856:	464b      	mov	r3, r9
   33858:	e9cd 4401 	strd	r4, r4, [sp, #4]
   3385c:	9400      	str	r4, [sp, #0]
   3385e:	f000 f91d 	bl	33a9c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   33862:	7b73      	ldrb	r3, [r6, #13]
   33864:	4680      	mov	r8, r0
   33866:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   3386a:	4630      	mov	r0, r6
	snprintk(tname, 8, "idle %02d", i);
   3386c:	f10d 0b18 	add.w	fp, sp, #24
   33870:	7373      	strb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
   33872:	f004 fa6b 	bl	37d4c <z_ready_thread>
	snprintk(tname, 8, "idle %02d", i);
   33876:	4623      	mov	r3, r4
   33878:	2108      	movs	r1, #8
   3387a:	4a19      	ldr	r2, [pc, #100]	; (338e0 <z_cstart+0x114>)
   3387c:	4658      	mov	r0, fp
   3387e:	f001 fd58 	bl	35332 <snprintk>
	z_setup_new_thread(thread, stack,
   33882:	230f      	movs	r3, #15
   33884:	2201      	movs	r2, #1
   33886:	4f17      	ldr	r7, [pc, #92]	; (338e4 <z_cstart+0x118>)
   33888:	e9cd 3203 	strd	r3, r2, [sp, #12]
   3388c:	4916      	ldr	r1, [pc, #88]	; (338e8 <z_cstart+0x11c>)
   3388e:	f44f 72a0 	mov.w	r2, #320	; 0x140
   33892:	4b16      	ldr	r3, [pc, #88]	; (338ec <z_cstart+0x120>)
   33894:	4638      	mov	r0, r7
   33896:	e9cd 4401 	strd	r4, r4, [sp, #4]
   3389a:	f8cd b014 	str.w	fp, [sp, #20]
   3389e:	9500      	str	r5, [sp, #0]
   338a0:	f000 f8fc 	bl	33a9c <z_setup_new_thread>
   338a4:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   338a6:	464a      	mov	r2, r9
   338a8:	f023 0304 	bic.w	r3, r3, #4
   338ac:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   338ae:	f105 0318 	add.w	r3, r5, #24
   338b2:	4641      	mov	r1, r8
   338b4:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   338b6:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   338ba:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   338bc:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   338be:	f8c5 a004 	str.w	sl, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   338c2:	f7fe f90b 	bl	31adc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   338c6:	bf00      	nop
   338c8:	20015de0 	.word	0x20015de0
   338cc:	e000ed00 	.word	0xe000ed00
   338d0:	200086c8 	.word	0x200086c8
   338d4:	20008e30 	.word	0x20008e30
   338d8:	0003cbdb 	.word	0x0003cbdb
   338dc:	200158a0 	.word	0x200158a0
   338e0:	0003cbe0 	.word	0x0003cbe0
   338e4:	20008610 	.word	0x20008610
   338e8:	20015ca0 	.word	0x20015ca0
   338ec:	00033c79 	.word	0x00033c79
   338f0:	00033799 	.word	0x00033799

000338f4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   338f4:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   338f6:	4b0e      	ldr	r3, [pc, #56]	; (33930 <init_mem_slab_module+0x3c>)
   338f8:	4c0e      	ldr	r4, [pc, #56]	; (33934 <init_mem_slab_module+0x40>)
   338fa:	42a3      	cmp	r3, r4
   338fc:	d301      	bcc.n	33902 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   338fe:	2000      	movs	r0, #0
	return rc;
}
   33900:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   33902:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   33906:	ea41 0200 	orr.w	r2, r1, r0
   3390a:	f012 0203 	ands.w	r2, r2, #3
   3390e:	d10b      	bne.n	33928 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   33910:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   33912:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   33914:	42aa      	cmp	r2, r5
   33916:	d101      	bne.n	3391c <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   33918:	331c      	adds	r3, #28
   3391a:	e7ee      	b.n	338fa <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   3391c:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   3391e:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
   33920:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
   33922:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   33924:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   33926:	e7f5      	b.n	33914 <init_mem_slab_module+0x20>
		return -EINVAL;
   33928:	f06f 0015 	mvn.w	r0, #21
	return rc;
   3392c:	e7e8      	b.n	33900 <init_mem_slab_module+0xc>
   3392e:	bf00      	nop
   33930:	200081c0 	.word	0x200081c0
   33934:	200081c0 	.word	0x200081c0

00033938 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   33938:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   3393a:	460c      	mov	r4, r1
   3393c:	4616      	mov	r6, r2
   3393e:	461f      	mov	r7, r3
	__asm__ volatile(
   33940:	f04f 0320 	mov.w	r3, #32
   33944:	f3ef 8111 	mrs	r1, BASEPRI
   33948:	f383 8811 	msr	BASEPRI, r3
   3394c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   33950:	6943      	ldr	r3, [r0, #20]
   33952:	b15b      	cbz	r3, 3396c <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   33954:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   33956:	681b      	ldr	r3, [r3, #0]
   33958:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   3395a:	6983      	ldr	r3, [r0, #24]
   3395c:	3301      	adds	r3, #1
   3395e:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   33960:	2000      	movs	r0, #0
	__asm__ volatile(
   33962:	f381 8811 	msr	BASEPRI, r1
   33966:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   3396a:	e011      	b.n	33990 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   3396c:	ea56 0207 	orrs.w	r2, r6, r7
   33970:	d103      	bne.n	3397a <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
   33972:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   33976:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   33978:	e7f3      	b.n	33962 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   3397a:	4602      	mov	r2, r0
   3397c:	e9cd 6700 	strd	r6, r7, [sp]
   33980:	3008      	adds	r0, #8
   33982:	f000 fc25 	bl	341d0 <z_pend_curr>
		if (result == 0) {
   33986:	b918      	cbnz	r0, 33990 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   33988:	4b02      	ldr	r3, [pc, #8]	; (33994 <k_mem_slab_alloc+0x5c>)
   3398a:	689b      	ldr	r3, [r3, #8]
   3398c:	695b      	ldr	r3, [r3, #20]
   3398e:	6023      	str	r3, [r4, #0]
}
   33990:	b002      	add	sp, #8
   33992:	bdd0      	pop	{r4, r6, r7, pc}
   33994:	20008e30 	.word	0x20008e30

00033998 <k_thread_foreach>:

#define _FOREACH_STATIC_THREAD(thread_data)              \
	Z_STRUCT_SECTION_FOREACH(_static_thread_data, thread_data)

void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data)
{
   33998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3399a:	4605      	mov	r5, r0
   3399c:	460e      	mov	r6, r1
	__asm__ volatile(
   3399e:	f04f 0320 	mov.w	r3, #32
   339a2:	f3ef 8711 	mrs	r7, BASEPRI
   339a6:	f383 8811 	msr	BASEPRI, r3
   339aa:	f3bf 8f6f 	isb	sy
	 */
	key = k_spin_lock(&z_thread_monitor_lock);

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, foreach);

	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
   339ae:	4b06      	ldr	r3, [pc, #24]	; (339c8 <k_thread_foreach+0x30>)
   339b0:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   339b2:	b924      	cbnz	r4, 339be <k_thread_foreach+0x26>
	__asm__ volatile(
   339b4:	f387 8811 	msr	BASEPRI, r7
   339b8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, foreach);

	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
}
   339bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		user_cb(thread, user_data);
   339be:	4620      	mov	r0, r4
   339c0:	4631      	mov	r1, r6
   339c2:	47a8      	blx	r5
	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
   339c4:	6f64      	ldr	r4, [r4, #116]	; 0x74
   339c6:	e7f4      	b.n	339b2 <k_thread_foreach+0x1a>
   339c8:	20008e30 	.word	0x20008e30

000339cc <z_thread_monitor_exit>:
	__asm__ volatile(
   339cc:	f04f 0320 	mov.w	r3, #32
   339d0:	f3ef 8111 	mrs	r1, BASEPRI
   339d4:	f383 8811 	msr	BASEPRI, r3
   339d8:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   339dc:	4a09      	ldr	r2, [pc, #36]	; (33a04 <z_thread_monitor_exit+0x38>)
   339de:	6b13      	ldr	r3, [r2, #48]	; 0x30
   339e0:	4283      	cmp	r3, r0
   339e2:	d107      	bne.n	339f4 <z_thread_monitor_exit+0x28>
		_kernel.threads = _kernel.threads->next_thread;
   339e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   339e6:	6313      	str	r3, [r2, #48]	; 0x30
	__asm__ volatile(
   339e8:	f381 8811 	msr	BASEPRI, r1
   339ec:	f3bf 8f6f 	isb	sy
			prev_thread->next_thread = thread->next_thread;
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   339f0:	4770      	bx	lr
   339f2:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   339f4:	2b00      	cmp	r3, #0
   339f6:	d0f7      	beq.n	339e8 <z_thread_monitor_exit+0x1c>
			(thread != prev_thread->next_thread)) {
   339f8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   339fa:	4282      	cmp	r2, r0
   339fc:	d1f9      	bne.n	339f2 <z_thread_monitor_exit+0x26>
			prev_thread->next_thread = thread->next_thread;
   339fe:	6f42      	ldr	r2, [r0, #116]	; 0x74
   33a00:	675a      	str	r2, [r3, #116]	; 0x74
   33a02:	e7f1      	b.n	339e8 <z_thread_monitor_exit+0x1c>
   33a04:	20008e30 	.word	0x20008e30

00033a08 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   33a08:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   33a0a:	4604      	mov	r4, r0
   33a0c:	b908      	cbnz	r0, 33a12 <z_impl_k_thread_name_set+0xa>
		thread = _current;
   33a0e:	4b05      	ldr	r3, [pc, #20]	; (33a24 <z_impl_k_thread_name_set+0x1c>)
   33a10:	689c      	ldr	r4, [r3, #8]
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
   33a12:	2220      	movs	r2, #32
   33a14:	f104 0078 	add.w	r0, r4, #120	; 0x78
   33a18:	f003 fd87 	bl	3752a <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   33a1c:	2000      	movs	r0, #0
   33a1e:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   33a22:	bd10      	pop	{r4, pc}
   33a24:	20008e30 	.word	0x20008e30

00033a28 <k_thread_state_str>:
#endif /* CONFIG_THREAD_NAME */
}

const char *k_thread_state_str(k_tid_t thread_id)
{
	switch (thread_id->base.thread_state) {
   33a28:	7b43      	ldrb	r3, [r0, #13]
   33a2a:	2b10      	cmp	r3, #16
   33a2c:	d80e      	bhi.n	33a4c <k_thread_state_str+0x24>
   33a2e:	2b10      	cmp	r3, #16
   33a30:	d81c      	bhi.n	33a6c <k_thread_state_str+0x44>
   33a32:	e8df f003 	tbb	[pc, r3]
   33a36:	091d      	.short	0x091d
   33a38:	1b151b13 	.word	0x1b151b13
   33a3c:	1b171b1b 	.word	0x1b171b1b
   33a40:	1b1b1b1b 	.word	0x1b1b1b1b
   33a44:	1b1b      	.short	0x1b1b
   33a46:	19          	.byte	0x19
   33a47:	00          	.byte	0x00
   33a48:	480b      	ldr	r0, [pc, #44]	; (33a78 <k_thread_state_str+0x50>)
   33a4a:	4770      	bx	lr
   33a4c:	2b20      	cmp	r3, #32
   33a4e:	d011      	beq.n	33a74 <k_thread_state_str+0x4c>
		break;
	case _THREAD_ABORTING:
		return "aborting";
		break;
	case _THREAD_QUEUED:
		return "queued";
   33a50:	4a0a      	ldr	r2, [pc, #40]	; (33a7c <k_thread_state_str+0x54>)
   33a52:	480b      	ldr	r0, [pc, #44]	; (33a80 <k_thread_state_str+0x58>)
   33a54:	2b80      	cmp	r3, #128	; 0x80
   33a56:	bf08      	it	eq
   33a58:	4610      	moveq	r0, r2
   33a5a:	4770      	bx	lr
		return "pending";
   33a5c:	4809      	ldr	r0, [pc, #36]	; (33a84 <k_thread_state_str+0x5c>)
   33a5e:	4770      	bx	lr
		return "prestart";
   33a60:	4809      	ldr	r0, [pc, #36]	; (33a88 <k_thread_state_str+0x60>)
   33a62:	4770      	bx	lr
		return "dead";
   33a64:	4809      	ldr	r0, [pc, #36]	; (33a8c <k_thread_state_str+0x64>)
   33a66:	4770      	bx	lr
		return "suspended";
   33a68:	4809      	ldr	r0, [pc, #36]	; (33a90 <k_thread_state_str+0x68>)
   33a6a:	4770      	bx	lr
		break;
	}
	return "unknown";
   33a6c:	4804      	ldr	r0, [pc, #16]	; (33a80 <k_thread_state_str+0x58>)
   33a6e:	4770      	bx	lr
		return "";
   33a70:	4808      	ldr	r0, [pc, #32]	; (33a94 <k_thread_state_str+0x6c>)
   33a72:	4770      	bx	lr
		return "aborting";
   33a74:	4808      	ldr	r0, [pc, #32]	; (33a98 <k_thread_state_str+0x70>)
}
   33a76:	4770      	bx	lr
   33a78:	0003cc0d 	.word	0x0003cc0d
   33a7c:	0003cc1c 	.word	0x0003cc1c
   33a80:	0003cb28 	.word	0x0003cb28
   33a84:	0003cbed 	.word	0x0003cbed
   33a88:	0003cbf5 	.word	0x0003cbf5
   33a8c:	0003cbfe 	.word	0x0003cbfe
   33a90:	0003cc03 	.word	0x0003cc03
   33a94:	0003ba4e 	.word	0x0003ba4e
   33a98:	0003cc13 	.word	0x0003cc13

00033a9c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   33a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33aa0:	460e      	mov	r6, r1
   33aa2:	b085      	sub	sp, #20
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   33aa4:	f100 0158 	add.w	r1, r0, #88	; 0x58
   33aa8:	e9c0 1116 	strd	r1, r1, [r0, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   33aac:	9912      	ldr	r1, [sp, #72]	; 0x48
	thread_base->pended_on = NULL;
   33aae:	2500      	movs	r5, #0
	thread_base->user_options = (uint8_t)options;
   33ab0:	7301      	strb	r1, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   33ab2:	2104      	movs	r1, #4
{
   33ab4:	4604      	mov	r4, r0
   33ab6:	4699      	mov	r9, r3
	thread_base->thread_state = (uint8_t)initial_state;
   33ab8:	7341      	strb	r1, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   33aba:	3207      	adds	r2, #7

	thread_base->prio = priority;
   33abc:	9911      	ldr	r1, [sp, #68]	; 0x44
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   33abe:	f022 0a07 	bic.w	sl, r2, #7
	memset(stack_buf_start, 0xaa, stack_buf_size);
   33ac2:	4652      	mov	r2, sl
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   33ac4:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->pended_on = NULL;
   33ac8:	6085      	str	r5, [r0, #8]
	thread_base->prio = priority;
   33aca:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   33acc:	73c5      	strb	r5, [r0, #15]
	memset(stack_buf_start, 0xaa, stack_buf_size);
   33ace:	21aa      	movs	r1, #170	; 0xaa
   33ad0:	4630      	mov	r0, r6
{
   33ad2:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   33ad6:	9f13      	ldr	r7, [sp, #76]	; 0x4c
	memset(stack_buf_start, 0xaa, stack_buf_size);
   33ad8:	f003 fdc5 	bl	37666 <memset>
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   33adc:	9b10      	ldr	r3, [sp, #64]	; 0x40
	stack_ptr = (char *)stack + stack_obj_size;
   33ade:	eb06 080a 	add.w	r8, r6, sl
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   33ae2:	9302      	str	r3, [sp, #8]
   33ae4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   33ae6:	4642      	mov	r2, r8
   33ae8:	e9cd b300 	strd	fp, r3, [sp]
   33aec:	4631      	mov	r1, r6
   33aee:	464b      	mov	r3, r9
   33af0:	4620      	mov	r0, r4
	new_thread->stack_info.size = stack_buf_size;
   33af2:	e9c4 6a27 	strd	r6, sl, [r4, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
   33af6:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   33afa:	f7fd ffd3 	bl	31aa4 <arch_new_thread>
	new_thread->entry.parameter2 = p2;
   33afe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	new_thread->entry.parameter1 = p1;
   33b00:	e9c4 9b19 	strd	r9, fp, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
   33b04:	66e3      	str	r3, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   33b06:	9b10      	ldr	r3, [sp, #64]	; 0x40
	new_thread->init_data = NULL;
   33b08:	6565      	str	r5, [r4, #84]	; 0x54
	new_thread->entry.parameter3 = p3;
   33b0a:	6723      	str	r3, [r4, #112]	; 0x70
	__asm__ volatile(
   33b0c:	f04f 0320 	mov.w	r3, #32
   33b10:	f3ef 8211 	mrs	r2, BASEPRI
   33b14:	f383 8811 	msr	BASEPRI, r3
   33b18:	f3bf 8f6f 	isb	sy
	new_thread->next_thread = _kernel.threads;
   33b1c:	4e0e      	ldr	r6, [pc, #56]	; (33b58 <z_setup_new_thread+0xbc>)
   33b1e:	6b31      	ldr	r1, [r6, #48]	; 0x30
	_kernel.threads = new_thread;
   33b20:	6334      	str	r4, [r6, #48]	; 0x30
	new_thread->next_thread = _kernel.threads;
   33b22:	6761      	str	r1, [r4, #116]	; 0x74
	__asm__ volatile(
   33b24:	f382 8811 	msr	BASEPRI, r2
   33b28:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
   33b2c:	b18f      	cbz	r7, 33b52 <z_setup_new_thread+0xb6>
		strncpy(new_thread->name, name,
   33b2e:	221f      	movs	r2, #31
   33b30:	4639      	mov	r1, r7
   33b32:	f104 0078 	add.w	r0, r4, #120	; 0x78
   33b36:	f003 fcf8 	bl	3752a <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   33b3a:	f884 5097 	strb.w	r5, [r4, #151]	; 0x97
	if (!_current) {
   33b3e:	68b3      	ldr	r3, [r6, #8]
   33b40:	b10b      	cbz	r3, 33b46 <z_setup_new_thread+0xaa>
	new_thread->resource_pool = _current->resource_pool;
   33b42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
}
   33b46:	4640      	mov	r0, r8
   33b48:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
   33b4c:	b005      	add	sp, #20
   33b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   33b52:	f884 7078 	strb.w	r7, [r4, #120]	; 0x78
   33b56:	e7f2      	b.n	33b3e <z_setup_new_thread+0xa2>
   33b58:	20008e30 	.word	0x20008e30

00033b5c <z_impl_k_thread_create>:
{
   33b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   33b5e:	2500      	movs	r5, #0
{
   33b60:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   33b62:	9505      	str	r5, [sp, #20]
   33b64:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   33b66:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   33b6a:	9504      	str	r5, [sp, #16]
   33b6c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   33b6e:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   33b70:	9503      	str	r5, [sp, #12]
   33b72:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   33b74:	9502      	str	r5, [sp, #8]
   33b76:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   33b78:	9501      	str	r5, [sp, #4]
   33b7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   33b7c:	9500      	str	r5, [sp, #0]
   33b7e:	f7ff ff8d 	bl	33a9c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   33b82:	1c7b      	adds	r3, r7, #1
   33b84:	bf08      	it	eq
   33b86:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   33b8a:	d005      	beq.n	33b98 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   33b8c:	ea56 0307 	orrs.w	r3, r6, r7
   33b90:	d105      	bne.n	33b9e <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   33b92:	4620      	mov	r0, r4
   33b94:	f000 fc70 	bl	34478 <z_sched_start>
}
   33b98:	4620      	mov	r0, r4
   33b9a:	b007      	add	sp, #28
   33b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   33b9e:	4632      	mov	r2, r6
   33ba0:	463b      	mov	r3, r7
   33ba2:	4903      	ldr	r1, [pc, #12]	; (33bb0 <z_impl_k_thread_create+0x54>)
   33ba4:	f104 0018 	add.w	r0, r4, #24
   33ba8:	f000 fe5e 	bl	34868 <z_add_timeout>
   33bac:	e7f4      	b.n	33b98 <z_impl_k_thread_create+0x3c>
   33bae:	bf00      	nop
   33bb0:	00037d6d 	.word	0x00037d6d

00033bb4 <z_init_static_threads>:
{
   33bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   33bb8:	4e2a      	ldr	r6, [pc, #168]	; (33c64 <z_init_static_threads+0xb0>)
   33bba:	4d2b      	ldr	r5, [pc, #172]	; (33c68 <z_init_static_threads+0xb4>)
   33bbc:	46b0      	mov	r8, r6
{
   33bbe:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   33bc0:	42b5      	cmp	r5, r6
   33bc2:	f105 0430 	add.w	r4, r5, #48	; 0x30
   33bc6:	d310      	bcc.n	33bea <z_init_static_threads+0x36>
	k_sched_lock();
   33bc8:	f000 fa90 	bl	340ec <k_sched_lock>
   33bcc:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   33bd0:	f240 36e7 	movw	r6, #999	; 0x3e7
   33bd4:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   33bd6:	4c24      	ldr	r4, [pc, #144]	; (33c68 <z_init_static_threads+0xb4>)
   33bd8:	f8df a090 	ldr.w	sl, [pc, #144]	; 33c6c <z_init_static_threads+0xb8>
   33bdc:	4544      	cmp	r4, r8
   33bde:	d321      	bcc.n	33c24 <z_init_static_threads+0x70>
}
   33be0:	b006      	add	sp, #24
   33be2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   33be6:	f000 bb73 	b.w	342d0 <k_sched_unlock>
		z_setup_new_thread(
   33bea:	f854 3c04 	ldr.w	r3, [r4, #-4]
   33bee:	9305      	str	r3, [sp, #20]
   33bf0:	f854 3c10 	ldr.w	r3, [r4, #-16]
   33bf4:	9304      	str	r3, [sp, #16]
   33bf6:	f854 3c14 	ldr.w	r3, [r4, #-20]
   33bfa:	9303      	str	r3, [sp, #12]
   33bfc:	f854 3c18 	ldr.w	r3, [r4, #-24]
   33c00:	9302      	str	r3, [sp, #8]
   33c02:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   33c06:	9301      	str	r3, [sp, #4]
   33c08:	f854 3c20 	ldr.w	r3, [r4, #-32]
   33c0c:	9300      	str	r3, [sp, #0]
   33c0e:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   33c12:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   33c16:	f7ff ff41 	bl	33a9c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   33c1a:	f854 3c30 	ldr.w	r3, [r4, #-48]
   33c1e:	655d      	str	r5, [r3, #84]	; 0x54
   33c20:	4625      	mov	r5, r4
   33c22:	e7cd      	b.n	33bc0 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   33c24:	6a63      	ldr	r3, [r4, #36]	; 0x24
   33c26:	1c5a      	adds	r2, r3, #1
   33c28:	d00d      	beq.n	33c46 <z_init_static_threads+0x92>
   33c2a:	4630      	mov	r0, r6
   33c2c:	4639      	mov	r1, r7
					    K_MSEC(thread_data->init_delay));
   33c2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   33c32:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   33c36:	42b9      	cmp	r1, r7
   33c38:	bf08      	it	eq
   33c3a:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   33c3c:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   33c3e:	d104      	bne.n	33c4a <z_init_static_threads+0x96>
	z_sched_start(thread);
   33c40:	4628      	mov	r0, r5
   33c42:	f000 fc19 	bl	34478 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   33c46:	3430      	adds	r4, #48	; 0x30
   33c48:	e7c8      	b.n	33bdc <z_init_static_threads+0x28>
   33c4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   33c4e:	2300      	movs	r3, #0
   33c50:	f7ec fb46 	bl	202e0 <__aeabi_uldivmod>
   33c54:	4602      	mov	r2, r0
   33c56:	460b      	mov	r3, r1
   33c58:	f105 0018 	add.w	r0, r5, #24
   33c5c:	4651      	mov	r1, sl
   33c5e:	f000 fe03 	bl	34868 <z_add_timeout>
   33c62:	e7f0      	b.n	33c46 <z_init_static_threads+0x92>
   33c64:	20008184 	.word	0x20008184
   33c68:	20008184 	.word	0x20008184
   33c6c:	00037d6d 	.word	0x00037d6d

00033c70 <sys_kernel_version_get>:
 * @return kernel version
 */
uint32_t sys_kernel_version_get(void)
{
	return KERNELVERSION;
}
   33c70:	4800      	ldr	r0, [pc, #0]	; (33c74 <sys_kernel_version_get+0x4>)
   33c72:	4770      	bx	lr
   33c74:	02060000 	.word	0x02060000

00033c78 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   33c78:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   33c7a:	4c09      	ldr	r4, [pc, #36]	; (33ca0 <idle+0x28>)
	__asm__ volatile(
   33c7c:	f04f 0220 	mov.w	r2, #32
   33c80:	f3ef 8311 	mrs	r3, BASEPRI
   33c84:	f382 8811 	msr	BASEPRI, r2
   33c88:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   33c8c:	f004 f901 	bl	37e92 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   33c90:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   33c92:	f7fd faf5 	bl	31280 <pm_system_suspend>
   33c96:	2800      	cmp	r0, #0
   33c98:	d1f0      	bne.n	33c7c <idle+0x4>
	arch_cpu_idle();
   33c9a:	f7fd ffdf 	bl	31c5c <arch_cpu_idle>
}
   33c9e:	e7ed      	b.n	33c7c <idle+0x4>
   33ca0:	20008e30 	.word	0x20008e30

00033ca4 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   33ca4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   33ca8:	4604      	mov	r4, r0
   33caa:	468a      	mov	sl, r1
   33cac:	4616      	mov	r6, r2
   33cae:	461f      	mov	r7, r3

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   33cb0:	f100 0908 	add.w	r9, r0, #8
   33cb4:	f04f 0320 	mov.w	r3, #32
   33cb8:	f3ef 8811 	mrs	r8, BASEPRI
   33cbc:	f383 8811 	msr	BASEPRI, r3
   33cc0:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
   33cc4:	6a02      	ldr	r2, [r0, #32]
   33cc6:	68c3      	ldr	r3, [r0, #12]
   33cc8:	429a      	cmp	r2, r3
   33cca:	d232      	bcs.n	33d32 <z_impl_k_msgq_put+0x8e>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   33ccc:	f004 f885 	bl	37dda <z_unpend_first_thread>
		if (pending_thread != NULL) {
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, 0);

			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   33cd0:	4651      	mov	r1, sl
		if (pending_thread != NULL) {
   33cd2:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
   33cd4:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
   33cd6:	b180      	cbz	r0, 33cfa <z_impl_k_msgq_put+0x56>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   33cd8:	2400      	movs	r4, #0
			(void)memcpy(pending_thread->base.swap_data, data,
   33cda:	6940      	ldr	r0, [r0, #20]
   33cdc:	f003 fc98 	bl	37610 <memcpy>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   33ce0:	4628      	mov	r0, r5
   33ce2:	f8c5 40b0 	str.w	r4, [r5, #176]	; 0xb0
   33ce6:	f004 f831 	bl	37d4c <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   33cea:	4648      	mov	r0, r9
   33cec:	4641      	mov	r1, r8
   33cee:	f000 f9eb 	bl	340c8 <z_reschedule>
			return 0;
   33cf2:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   33cf4:	b002      	add	sp, #8
   33cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
   33cfa:	69e0      	ldr	r0, [r4, #28]
   33cfc:	f003 fc88 	bl	37610 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   33d00:	69e3      	ldr	r3, [r4, #28]
   33d02:	68a2      	ldr	r2, [r4, #8]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   33d04:	f104 0024 	add.w	r0, r4, #36	; 0x24
			msgq->write_ptr += msgq->msg_size;
   33d08:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   33d0a:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   33d0c:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   33d0e:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   33d10:	bf08      	it	eq
   33d12:	6923      	ldreq	r3, [r4, #16]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   33d14:	f04f 0110 	mov.w	r1, #16
				msgq->write_ptr = msgq->buffer_start;
   33d18:	bf08      	it	eq
   33d1a:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   33d1c:	6a23      	ldr	r3, [r4, #32]
   33d1e:	3301      	adds	r3, #1
   33d20:	6223      	str	r3, [r4, #32]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   33d22:	f004 fa57 	bl	381d4 <z_handle_obj_poll_events>
		result = 0;
   33d26:	2000      	movs	r0, #0
	__asm__ volatile(
   33d28:	f388 8811 	msr	BASEPRI, r8
   33d2c:	f3bf 8f6f 	isb	sy
	return result;
   33d30:	e7e0      	b.n	33cf4 <z_impl_k_msgq_put+0x50>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   33d32:	ea56 0307 	orrs.w	r3, r6, r7
   33d36:	d00a      	beq.n	33d4e <z_impl_k_msgq_put+0xaa>
		_current->base.swap_data = (void *) data;
   33d38:	4b06      	ldr	r3, [pc, #24]	; (33d54 <z_impl_k_msgq_put+0xb0>)
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   33d3a:	4602      	mov	r2, r0
		_current->base.swap_data = (void *) data;
   33d3c:	689b      	ldr	r3, [r3, #8]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   33d3e:	4648      	mov	r0, r9
		_current->base.swap_data = (void *) data;
   33d40:	6159      	str	r1, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   33d42:	4641      	mov	r1, r8
   33d44:	e9cd 6700 	strd	r6, r7, [sp]
   33d48:	f000 fa42 	bl	341d0 <z_pend_curr>
		return result;
   33d4c:	e7d2      	b.n	33cf4 <z_impl_k_msgq_put+0x50>
		result = -ENOMSG;
   33d4e:	f06f 0022 	mvn.w	r0, #34	; 0x22
   33d52:	e7e9      	b.n	33d28 <z_impl_k_msgq_put+0x84>
   33d54:	20008e30 	.word	0x20008e30

00033d58 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   33d58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   33d5c:	4604      	mov	r4, r0
   33d5e:	4616      	mov	r6, r2
   33d60:	4608      	mov	r0, r1
   33d62:	461f      	mov	r7, r3

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   33d64:	f104 0908 	add.w	r9, r4, #8
	__asm__ volatile(
   33d68:	f04f 0320 	mov.w	r3, #32
   33d6c:	f3ef 8811 	mrs	r8, BASEPRI
   33d70:	f383 8811 	msr	BASEPRI, r3
   33d74:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
   33d78:	6a23      	ldr	r3, [r4, #32]
   33d7a:	2b00      	cmp	r3, #0
   33d7c:	d034      	beq.n	33de8 <z_impl_k_msgq_get+0x90>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   33d7e:	68a2      	ldr	r2, [r4, #8]
   33d80:	69a1      	ldr	r1, [r4, #24]
   33d82:	f003 fc45 	bl	37610 <memcpy>
		msgq->read_ptr += msgq->msg_size;
   33d86:	69a3      	ldr	r3, [r4, #24]
   33d88:	68a2      	ldr	r2, [r4, #8]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   33d8a:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   33d8c:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   33d8e:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   33d90:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   33d92:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   33d94:	bf04      	itt	eq
   33d96:	6923      	ldreq	r3, [r4, #16]
   33d98:	61a3      	streq	r3, [r4, #24]
		msgq->used_msgs--;
   33d9a:	6a23      	ldr	r3, [r4, #32]
   33d9c:	3b01      	subs	r3, #1
   33d9e:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   33da0:	f004 f81b 	bl	37dda <z_unpend_first_thread>
		if (pending_thread != NULL) {
   33da4:	4605      	mov	r5, r0
   33da6:	2800      	cmp	r0, #0
   33da8:	d02e      	beq.n	33e08 <z_impl_k_msgq_get+0xb0>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
   33daa:	6941      	ldr	r1, [r0, #20]
   33dac:	68a2      	ldr	r2, [r4, #8]
   33dae:	69e0      	ldr	r0, [r4, #28]
   33db0:	f003 fc2e 	bl	37610 <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   33db4:	69e3      	ldr	r3, [r4, #28]
   33db6:	68a2      	ldr	r2, [r4, #8]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   33db8:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   33dba:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   33dbc:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   33dbe:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   33dc0:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   33dc2:	bf04      	itt	eq
   33dc4:	6923      	ldreq	r3, [r4, #16]
   33dc6:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   33dc8:	6a23      	ldr	r3, [r4, #32]
   33dca:	3301      	adds	r3, #1
   33dcc:	6223      	str	r3, [r4, #32]
   33dce:	2400      	movs	r4, #0
   33dd0:	f8c5 40b0 	str.w	r4, [r5, #176]	; 0xb0
			z_ready_thread(pending_thread);
   33dd4:	f003 ffba 	bl	37d4c <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   33dd8:	4648      	mov	r0, r9
   33dda:	4641      	mov	r1, r8
   33ddc:	f000 f974 	bl	340c8 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
   33de0:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   33de2:	b003      	add	sp, #12
   33de4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   33de8:	ea56 0307 	orrs.w	r3, r6, r7
   33dec:	d00a      	beq.n	33e04 <z_impl_k_msgq_get+0xac>
		_current->base.swap_data = data;
   33dee:	4b09      	ldr	r3, [pc, #36]	; (33e14 <z_impl_k_msgq_get+0xbc>)
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   33df0:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   33df2:	689b      	ldr	r3, [r3, #8]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   33df4:	4648      	mov	r0, r9
		_current->base.swap_data = data;
   33df6:	6159      	str	r1, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   33df8:	4641      	mov	r1, r8
   33dfa:	e9cd 6700 	strd	r6, r7, [sp]
   33dfe:	f000 f9e7 	bl	341d0 <z_pend_curr>
		return result;
   33e02:	e7ee      	b.n	33de2 <z_impl_k_msgq_get+0x8a>
		result = -ENOMSG;
   33e04:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
   33e08:	f388 8811 	msr	BASEPRI, r8
   33e0c:	f3bf 8f6f 	isb	sy
	return result;
   33e10:	e7e7      	b.n	33de2 <z_impl_k_msgq_get+0x8a>
   33e12:	bf00      	nop
   33e14:	20008e30 	.word	0x20008e30

00033e18 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   33e18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   33e1c:	4604      	mov	r4, r0
   33e1e:	4616      	mov	r6, r2
   33e20:	461f      	mov	r7, r3
	__asm__ volatile(
   33e22:	f04f 0320 	mov.w	r3, #32
   33e26:	f3ef 8811 	mrs	r8, BASEPRI
   33e2a:	f383 8811 	msr	BASEPRI, r3
   33e2e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   33e32:	68c3      	ldr	r3, [r0, #12]
   33e34:	4a32      	ldr	r2, [pc, #200]	; (33f00 <z_impl_k_mutex_lock+0xe8>)
   33e36:	b16b      	cbz	r3, 33e54 <z_impl_k_mutex_lock+0x3c>
   33e38:	6880      	ldr	r0, [r0, #8]
   33e3a:	6891      	ldr	r1, [r2, #8]
   33e3c:	4288      	cmp	r0, r1
   33e3e:	d019      	beq.n	33e74 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   33e40:	ea56 0307 	orrs.w	r3, r6, r7
   33e44:	d118      	bne.n	33e78 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   33e46:	f388 8811 	msr	BASEPRI, r8
   33e4a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   33e4e:	f06f 000f 	mvn.w	r0, #15
   33e52:	e00c      	b.n	33e6e <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   33e54:	6891      	ldr	r1, [r2, #8]
   33e56:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   33e5a:	3301      	adds	r3, #1
   33e5c:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   33e5e:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   33e60:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   33e62:	60a3      	str	r3, [r4, #8]
   33e64:	f388 8811 	msr	BASEPRI, r8
   33e68:	f3bf 8f6f 	isb	sy
		return 0;
   33e6c:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   33e6e:	b002      	add	sp, #8
   33e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   33e74:	6921      	ldr	r1, [r4, #16]
   33e76:	e7f0      	b.n	33e5a <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   33e78:	f990 300e 	ldrsb.w	r3, [r0, #14]
   33e7c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   33e80:	4299      	cmp	r1, r3
   33e82:	bfa8      	it	ge
   33e84:	4619      	movge	r1, r3
   33e86:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   33e8a:	428b      	cmp	r3, r1
   33e8c:	dd2c      	ble.n	33ee8 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   33e8e:	f000 fb11 	bl	344b4 <z_set_prio>
   33e92:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   33e94:	4622      	mov	r2, r4
   33e96:	4641      	mov	r1, r8
   33e98:	e9cd 6700 	strd	r6, r7, [sp]
   33e9c:	4819      	ldr	r0, [pc, #100]	; (33f04 <z_impl_k_mutex_lock+0xec>)
   33e9e:	f000 f997 	bl	341d0 <z_pend_curr>
	if (got_mutex == 0) {
   33ea2:	2800      	cmp	r0, #0
   33ea4:	d0e3      	beq.n	33e6e <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   33ea6:	f04f 0320 	mov.w	r3, #32
   33eaa:	f3ef 8611 	mrs	r6, BASEPRI
   33eae:	f383 8811 	msr	BASEPRI, r3
   33eb2:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   33eb6:	6823      	ldr	r3, [r4, #0]
   33eb8:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   33eba:	429c      	cmp	r4, r3
   33ebc:	d007      	beq.n	33ece <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   33ebe:	b133      	cbz	r3, 33ece <z_impl_k_mutex_lock+0xb6>
   33ec0:	f993 300e 	ldrsb.w	r3, [r3, #14]
   33ec4:	4299      	cmp	r1, r3
   33ec6:	bfa8      	it	ge
   33ec8:	4619      	movge	r1, r3
   33eca:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   33ece:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   33ed0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   33ed4:	4299      	cmp	r1, r3
   33ed6:	d109      	bne.n	33eec <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   33ed8:	b16d      	cbz	r5, 33ef6 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   33eda:	4631      	mov	r1, r6
   33edc:	4809      	ldr	r0, [pc, #36]	; (33f04 <z_impl_k_mutex_lock+0xec>)
   33ede:	f000 f8f3 	bl	340c8 <z_reschedule>
	return -EAGAIN;
   33ee2:	f06f 000a 	mvn.w	r0, #10
   33ee6:	e7c2      	b.n	33e6e <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   33ee8:	2500      	movs	r5, #0
   33eea:	e7d3      	b.n	33e94 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   33eec:	f000 fae2 	bl	344b4 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   33ef0:	2800      	cmp	r0, #0
   33ef2:	d1f2      	bne.n	33eda <z_impl_k_mutex_lock+0xc2>
   33ef4:	e7f0      	b.n	33ed8 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   33ef6:	f386 8811 	msr	BASEPRI, r6
   33efa:	f3bf 8f6f 	isb	sy
   33efe:	e7f0      	b.n	33ee2 <z_impl_k_mutex_lock+0xca>
   33f00:	20008e30 	.word	0x20008e30
   33f04:	2000959c 	.word	0x2000959c

00033f08 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   33f08:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   33f0a:	6883      	ldr	r3, [r0, #8]
{
   33f0c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   33f0e:	2b00      	cmp	r3, #0
   33f10:	d037      	beq.n	33f82 <z_impl_k_mutex_unlock+0x7a>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   33f12:	4a1f      	ldr	r2, [pc, #124]	; (33f90 <z_impl_k_mutex_unlock+0x88>)
   33f14:	6892      	ldr	r2, [r2, #8]
   33f16:	4293      	cmp	r3, r2
   33f18:	d136      	bne.n	33f88 <z_impl_k_mutex_unlock+0x80>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   33f1a:	7bda      	ldrb	r2, [r3, #15]
   33f1c:	3a01      	subs	r2, #1
   33f1e:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   33f20:	68c3      	ldr	r3, [r0, #12]
   33f22:	2b01      	cmp	r3, #1
   33f24:	d005      	beq.n	33f32 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   33f26:	3b01      	subs	r3, #1
   33f28:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   33f2a:	f000 f9d1 	bl	342d0 <k_sched_unlock>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   33f2e:	2000      	movs	r0, #0
}
   33f30:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   33f32:	f04f 0320 	mov.w	r3, #32
   33f36:	f3ef 8511 	mrs	r5, BASEPRI
   33f3a:	f383 8811 	msr	BASEPRI, r3
   33f3e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   33f42:	6901      	ldr	r1, [r0, #16]
   33f44:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   33f46:	f990 300e 	ldrsb.w	r3, [r0, #14]
   33f4a:	4299      	cmp	r1, r3
   33f4c:	d001      	beq.n	33f52 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   33f4e:	f000 fab1 	bl	344b4 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   33f52:	4620      	mov	r0, r4
   33f54:	f003 ff41 	bl	37dda <z_unpend_first_thread>
	mutex->owner = new_owner;
   33f58:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   33f5a:	b160      	cbz	r0, 33f76 <z_impl_k_mutex_unlock+0x6e>
		mutex->owner_orig_prio = new_owner->base.prio;
   33f5c:	f990 200e 	ldrsb.w	r2, [r0, #14]
   33f60:	6122      	str	r2, [r4, #16]
   33f62:	2200      	movs	r2, #0
   33f64:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   33f68:	f003 fef0 	bl	37d4c <z_ready_thread>
		z_reschedule(&lock, key);
   33f6c:	4629      	mov	r1, r5
   33f6e:	4809      	ldr	r0, [pc, #36]	; (33f94 <z_impl_k_mutex_unlock+0x8c>)
   33f70:	f000 f8aa 	bl	340c8 <z_reschedule>
   33f74:	e7d9      	b.n	33f2a <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   33f76:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   33f78:	f385 8811 	msr	BASEPRI, r5
   33f7c:	f3bf 8f6f 	isb	sy
   33f80:	e7d3      	b.n	33f2a <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   33f82:	f06f 0015 	mvn.w	r0, #21
   33f86:	e7d3      	b.n	33f30 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   33f88:	f04f 30ff 	mov.w	r0, #4294967295
   33f8c:	e7d0      	b.n	33f30 <z_impl_k_mutex_unlock+0x28>
   33f8e:	bf00      	nop
   33f90:	20008e30 	.word	0x20008e30
   33f94:	2000959c 	.word	0x2000959c

00033f98 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   33f98:	b538      	push	{r3, r4, r5, lr}
   33f9a:	4604      	mov	r4, r0
	__asm__ volatile(
   33f9c:	f04f 0320 	mov.w	r3, #32
   33fa0:	f3ef 8511 	mrs	r5, BASEPRI
   33fa4:	f383 8811 	msr	BASEPRI, r3
   33fa8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   33fac:	f003 ff15 	bl	37dda <z_unpend_first_thread>

	if (thread != NULL) {
   33fb0:	b150      	cbz	r0, 33fc8 <z_impl_k_sem_give+0x30>
   33fb2:	2200      	movs	r2, #0
   33fb4:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   33fb8:	f003 fec8 	bl	37d4c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   33fbc:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   33fbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   33fc2:	4807      	ldr	r0, [pc, #28]	; (33fe0 <z_impl_k_sem_give+0x48>)
   33fc4:	f000 b880 	b.w	340c8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   33fc8:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   33fcc:	429a      	cmp	r2, r3
   33fce:	bf18      	it	ne
   33fd0:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   33fd2:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   33fd4:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   33fd6:	f104 0010 	add.w	r0, r4, #16
   33fda:	f004 f8fb 	bl	381d4 <z_handle_obj_poll_events>
}
   33fde:	e7ed      	b.n	33fbc <z_impl_k_sem_give+0x24>
   33fe0:	2000959c 	.word	0x2000959c

00033fe4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   33fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   33fe6:	4614      	mov	r4, r2
   33fe8:	461d      	mov	r5, r3
   33fea:	f04f 0320 	mov.w	r3, #32
   33fee:	f3ef 8111 	mrs	r1, BASEPRI
   33ff2:	f383 8811 	msr	BASEPRI, r3
   33ff6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   33ffa:	6883      	ldr	r3, [r0, #8]
   33ffc:	b143      	cbz	r3, 34010 <z_impl_k_sem_take+0x2c>
		sem->count--;
   33ffe:	3b01      	subs	r3, #1
   34000:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   34002:	f381 8811 	msr	BASEPRI, r1
   34006:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   3400a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   3400c:	b003      	add	sp, #12
   3400e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   34010:	ea54 0305 	orrs.w	r3, r4, r5
   34014:	d106      	bne.n	34024 <z_impl_k_sem_take+0x40>
   34016:	f381 8811 	msr	BASEPRI, r1
   3401a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   3401e:	f06f 000f 	mvn.w	r0, #15
   34022:	e7f3      	b.n	3400c <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   34024:	4602      	mov	r2, r0
   34026:	e9cd 4500 	strd	r4, r5, [sp]
   3402a:	4802      	ldr	r0, [pc, #8]	; (34034 <z_impl_k_sem_take+0x50>)
   3402c:	f000 f8d0 	bl	341d0 <z_pend_curr>
	return ret;
   34030:	e7ec      	b.n	3400c <z_impl_k_sem_take+0x28>
   34032:	bf00      	nop
   34034:	2000959c 	.word	0x2000959c

00034038 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   34038:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   3403a:	4c08      	ldr	r4, [pc, #32]	; (3405c <z_reset_time_slice+0x24>)
   3403c:	6823      	ldr	r3, [r4, #0]
   3403e:	b15b      	cbz	r3, 34058 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   34040:	f7fd fca4 	bl	3198c <sys_clock_elapsed>
   34044:	4603      	mov	r3, r0
   34046:	6820      	ldr	r0, [r4, #0]
   34048:	4a05      	ldr	r2, [pc, #20]	; (34060 <z_reset_time_slice+0x28>)
   3404a:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
   3404c:	2100      	movs	r1, #0
	}
}
   3404e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   34052:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   34054:	f003 bf2d 	b.w	37eb2 <z_set_timeout_expiry>
}
   34058:	bd10      	pop	{r4, pc}
   3405a:	bf00      	nop
   3405c:	20008e6c 	.word	0x20008e6c
   34060:	20008e30 	.word	0x20008e30

00034064 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   34064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34066:	4604      	mov	r4, r0
   34068:	460d      	mov	r5, r1
	__asm__ volatile(
   3406a:	f04f 0320 	mov.w	r3, #32
   3406e:	f3ef 8611 	mrs	r6, BASEPRI
   34072:	f383 8811 	msr	BASEPRI, r3
   34076:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   3407a:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   3407c:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   34080:	f240 30e7 	movw	r0, #999	; 0x3e7
   34084:	2100      	movs	r1, #0
   34086:	4b0d      	ldr	r3, [pc, #52]	; (340bc <k_sched_time_slice_set+0x58>)
   34088:	fbe7 0104 	umlal	r0, r1, r7, r4
   3408c:	611a      	str	r2, [r3, #16]
   3408e:	2300      	movs	r3, #0
   34090:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   34094:	f7ec f924 	bl	202e0 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   34098:	2c00      	cmp	r4, #0
   3409a:	4b09      	ldr	r3, [pc, #36]	; (340c0 <k_sched_time_slice_set+0x5c>)
   3409c:	dc09      	bgt.n	340b2 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   3409e:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   340a0:	4b08      	ldr	r3, [pc, #32]	; (340c4 <k_sched_time_slice_set+0x60>)
   340a2:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   340a4:	f7ff ffc8 	bl	34038 <z_reset_time_slice>
	__asm__ volatile(
   340a8:	f386 8811 	msr	BASEPRI, r6
   340ac:	f3bf 8f6f 	isb	sy
	}
}
   340b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   340b2:	2802      	cmp	r0, #2
   340b4:	bfb8      	it	lt
   340b6:	2002      	movlt	r0, #2
   340b8:	e7f1      	b.n	3409e <k_sched_time_slice_set+0x3a>
   340ba:	bf00      	nop
   340bc:	20008e30 	.word	0x20008e30
   340c0:	20008e6c 	.word	0x20008e6c
   340c4:	20008e68 	.word	0x20008e68

000340c8 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   340c8:	b949      	cbnz	r1, 340de <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   340ca:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   340ce:	b930      	cbnz	r0, 340de <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   340d0:	4b05      	ldr	r3, [pc, #20]	; (340e8 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   340d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   340d4:	689b      	ldr	r3, [r3, #8]
   340d6:	429a      	cmp	r2, r3
   340d8:	d001      	beq.n	340de <z_reschedule+0x16>
	ret = arch_swap(key);
   340da:	f7fd bc93 	b.w	31a04 <arch_swap>
   340de:	f381 8811 	msr	BASEPRI, r1
   340e2:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   340e6:	4770      	bx	lr
   340e8:	20008e30 	.word	0x20008e30

000340ec <k_sched_lock>:
	__asm__ volatile(
   340ec:	f04f 0320 	mov.w	r3, #32
   340f0:	f3ef 8111 	mrs	r1, BASEPRI
   340f4:	f383 8811 	msr	BASEPRI, r3
   340f8:	f3bf 8f6f 	isb	sy
   340fc:	4b04      	ldr	r3, [pc, #16]	; (34110 <k_sched_lock+0x24>)
   340fe:	689a      	ldr	r2, [r3, #8]
   34100:	7bd3      	ldrb	r3, [r2, #15]
   34102:	3b01      	subs	r3, #1
   34104:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   34106:	f381 8811 	msr	BASEPRI, r1
   3410a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   3410e:	4770      	bx	lr
   34110:	20008e30 	.word	0x20008e30

00034114 <update_cache>:
{
   34114:	b538      	push	{r3, r4, r5, lr}
   34116:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   34118:	480c      	ldr	r0, [pc, #48]	; (3414c <update_cache+0x38>)
   3411a:	f003 fde0 	bl	37cde <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   3411e:	4d0c      	ldr	r5, [pc, #48]	; (34150 <update_cache+0x3c>)
   34120:	4604      	mov	r4, r0
   34122:	b900      	cbnz	r0, 34126 <update_cache+0x12>
   34124:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   34126:	68ab      	ldr	r3, [r5, #8]
   34128:	b94a      	cbnz	r2, 3413e <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   3412a:	7b5a      	ldrb	r2, [r3, #13]
   3412c:	06d2      	lsls	r2, r2, #27
   3412e:	d106      	bne.n	3413e <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   34130:	69a2      	ldr	r2, [r4, #24]
   34132:	b922      	cbnz	r2, 3413e <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   34134:	89da      	ldrh	r2, [r3, #14]
   34136:	2a7f      	cmp	r2, #127	; 0x7f
   34138:	d901      	bls.n	3413e <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   3413a:	626b      	str	r3, [r5, #36]	; 0x24
}
   3413c:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   3413e:	429c      	cmp	r4, r3
   34140:	d001      	beq.n	34146 <update_cache+0x32>
			z_reset_time_slice();
   34142:	f7ff ff79 	bl	34038 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   34146:	626c      	str	r4, [r5, #36]	; 0x24
}
   34148:	e7f8      	b.n	3413c <update_cache+0x28>
   3414a:	bf00      	nop
   3414c:	20008e58 	.word	0x20008e58
   34150:	20008e30 	.word	0x20008e30

00034154 <unready_thread>:
{
   34154:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   34156:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   3415a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   3415c:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   3415e:	7b43      	ldrb	r3, [r0, #13]
   34160:	da04      	bge.n	3416c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   34162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   34166:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   34168:	f003 fd64 	bl	37c34 <sys_dlist_remove>
	update_cache(thread == _current);
   3416c:	4b04      	ldr	r3, [pc, #16]	; (34180 <unready_thread+0x2c>)
   3416e:	6898      	ldr	r0, [r3, #8]
   34170:	1a43      	subs	r3, r0, r1
   34172:	4258      	negs	r0, r3
   34174:	4158      	adcs	r0, r3
}
   34176:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   3417a:	f7ff bfcb 	b.w	34114 <update_cache>
   3417e:	bf00      	nop
   34180:	20008e30 	.word	0x20008e30

00034184 <pend>:
{
   34184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34188:	4606      	mov	r6, r0
   3418a:	4614      	mov	r4, r2
   3418c:	461d      	mov	r5, r3
	__asm__ volatile(
   3418e:	f04f 0320 	mov.w	r3, #32
   34192:	f3ef 8711 	mrs	r7, BASEPRI
   34196:	f383 8811 	msr	BASEPRI, r3
   3419a:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   3419e:	f003 fda8 	bl	37cf2 <add_to_waitq_locked>
	__asm__ volatile(
   341a2:	f387 8811 	msr	BASEPRI, r7
   341a6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   341aa:	1c6b      	adds	r3, r5, #1
   341ac:	bf08      	it	eq
   341ae:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   341b2:	d008      	beq.n	341c6 <pend+0x42>
   341b4:	4622      	mov	r2, r4
   341b6:	462b      	mov	r3, r5
   341b8:	f106 0018 	add.w	r0, r6, #24
   341bc:	4903      	ldr	r1, [pc, #12]	; (341cc <pend+0x48>)
}
   341be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   341c2:	f000 bb51 	b.w	34868 <z_add_timeout>
   341c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   341ca:	bf00      	nop
   341cc:	00037d6d 	.word	0x00037d6d

000341d0 <z_pend_curr>:
{
   341d0:	b510      	push	{r4, lr}
   341d2:	460c      	mov	r4, r1
	pending_current = _current;
   341d4:	4b06      	ldr	r3, [pc, #24]	; (341f0 <z_pend_curr+0x20>)
{
   341d6:	4611      	mov	r1, r2
	pending_current = _current;
   341d8:	6898      	ldr	r0, [r3, #8]
   341da:	4b06      	ldr	r3, [pc, #24]	; (341f4 <z_pend_curr+0x24>)
   341dc:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   341de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   341e2:	f7ff ffcf 	bl	34184 <pend>
   341e6:	4620      	mov	r0, r4
}
   341e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   341ec:	f7fd bc0a 	b.w	31a04 <arch_swap>
   341f0:	20008e30 	.word	0x20008e30
   341f4:	20008e64 	.word	0x20008e64

000341f8 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
   341f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   341fc:	4605      	mov	r5, r0
   341fe:	460f      	mov	r7, r1
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);

	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   34200:	f003 fe71 	bl	37ee6 <sys_clock_tick_get_32>
   34204:	4604      	mov	r4, r0
	__asm__ volatile(
   34206:	f04f 0320 	mov.w	r3, #32
   3420a:	f3ef 8811 	mrs	r8, BASEPRI
   3420e:	f383 8811 	msr	BASEPRI, r3
   34212:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   34216:	4e12      	ldr	r6, [pc, #72]	; (34260 <z_tick_sleep.part.0+0x68>)
   34218:	4b12      	ldr	r3, [pc, #72]	; (34264 <z_tick_sleep.part.0+0x6c>)
   3421a:	68b0      	ldr	r0, [r6, #8]
	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   3421c:	442c      	add	r4, r5
	pending_current = _current;
   3421e:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   34220:	f7ff ff98 	bl	34154 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   34224:	68b0      	ldr	r0, [r6, #8]
   34226:	4910      	ldr	r1, [pc, #64]	; (34268 <z_tick_sleep.part.0+0x70>)
   34228:	462a      	mov	r2, r5
   3422a:	463b      	mov	r3, r7
   3422c:	3018      	adds	r0, #24
   3422e:	f000 fb1b 	bl	34868 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   34232:	68b2      	ldr	r2, [r6, #8]
   34234:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
   34236:	7b53      	ldrb	r3, [r2, #13]

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   34238:	2500      	movs	r5, #0
   3423a:	f043 0310 	orr.w	r3, r3, #16
   3423e:	7353      	strb	r3, [r2, #13]
   34240:	f7fd fbe0 	bl	31a04 <arch_swap>
   34244:	f003 fe4f 	bl	37ee6 <sys_clock_tick_get_32>
   34248:	1a24      	subs	r4, r4, r0
   3424a:	f165 0500 	sbc.w	r5, r5, #0
   3424e:	2c00      	cmp	r4, #0
   34250:	f175 0300 	sbcs.w	r3, r5, #0
   34254:	bfb8      	it	lt
   34256:	2400      	movlt	r4, #0
		return ticks;
	}
#endif

	return 0;
}
   34258:	4620      	mov	r0, r4
   3425a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3425e:	bf00      	nop
   34260:	20008e30 	.word	0x20008e30
   34264:	20008e64 	.word	0x20008e64
   34268:	00037d6d 	.word	0x00037d6d

0003426c <z_impl_k_thread_suspend>:
{
   3426c:	b570      	push	{r4, r5, r6, lr}
   3426e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   34270:	3018      	adds	r0, #24
   34272:	f003 fde8 	bl	37e46 <z_abort_timeout>
   34276:	f04f 0320 	mov.w	r3, #32
   3427a:	f3ef 8611 	mrs	r6, BASEPRI
   3427e:	f383 8811 	msr	BASEPRI, r3
   34282:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   34286:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   3428a:	7b63      	ldrb	r3, [r4, #13]
   3428c:	2a00      	cmp	r2, #0
   3428e:	da05      	bge.n	3429c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   34290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
   34294:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
   34296:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   34298:	f003 fccc 	bl	37c34 <sys_dlist_remove>
		update_cache(thread == _current);
   3429c:	4d0b      	ldr	r5, [pc, #44]	; (342cc <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   3429e:	7b63      	ldrb	r3, [r4, #13]
   342a0:	68a8      	ldr	r0, [r5, #8]
   342a2:	f043 0310 	orr.w	r3, r3, #16
   342a6:	7363      	strb	r3, [r4, #13]
   342a8:	1b03      	subs	r3, r0, r4
   342aa:	4258      	negs	r0, r3
   342ac:	4158      	adcs	r0, r3
   342ae:	f7ff ff31 	bl	34114 <update_cache>
	__asm__ volatile(
   342b2:	f386 8811 	msr	BASEPRI, r6
   342b6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   342ba:	68ab      	ldr	r3, [r5, #8]
   342bc:	42a3      	cmp	r3, r4
   342be:	d103      	bne.n	342c8 <z_impl_k_thread_suspend+0x5c>
}
   342c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   342c4:	f003 bd01 	b.w	37cca <z_reschedule_unlocked>
}
   342c8:	bd70      	pop	{r4, r5, r6, pc}
   342ca:	bf00      	nop
   342cc:	20008e30 	.word	0x20008e30

000342d0 <k_sched_unlock>:
{
   342d0:	b510      	push	{r4, lr}
	__asm__ volatile(
   342d2:	f04f 0320 	mov.w	r3, #32
   342d6:	f3ef 8411 	mrs	r4, BASEPRI
   342da:	f383 8811 	msr	BASEPRI, r3
   342de:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   342e2:	4b08      	ldr	r3, [pc, #32]	; (34304 <k_sched_unlock+0x34>)
		update_cache(0);
   342e4:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   342e6:	689a      	ldr	r2, [r3, #8]
   342e8:	7bd3      	ldrb	r3, [r2, #15]
   342ea:	3301      	adds	r3, #1
   342ec:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   342ee:	f7ff ff11 	bl	34114 <update_cache>
	__asm__ volatile(
   342f2:	f384 8811 	msr	BASEPRI, r4
   342f6:	f3bf 8f6f 	isb	sy
}
   342fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   342fe:	f003 bce4 	b.w	37cca <z_reschedule_unlocked>
   34302:	bf00      	nop
   34304:	20008e30 	.word	0x20008e30

00034308 <move_thread_to_end_of_prio_q>:
{
   34308:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   3430a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   3430e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   34310:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   34312:	7b43      	ldrb	r3, [r0, #13]
   34314:	da04      	bge.n	34320 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   34316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   3431a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   3431c:	f003 fc8a 	bl	37c34 <sys_dlist_remove>
	return list->head == list;
   34320:	4a17      	ldr	r2, [pc, #92]	; (34380 <move_thread_to_end_of_prio_q+0x78>)
	thread->base.thread_state |= _THREAD_QUEUED;
   34322:	7b4b      	ldrb	r3, [r1, #13]
   34324:	4610      	mov	r0, r2
   34326:	f063 037f 	orn	r3, r3, #127	; 0x7f
   3432a:	734b      	strb	r3, [r1, #13]
   3432c:	f850 3f28 	ldr.w	r3, [r0, #40]!
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   34330:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   34332:	4283      	cmp	r3, r0
   34334:	bf08      	it	eq
   34336:	2300      	moveq	r3, #0
   34338:	2b00      	cmp	r3, #0
   3433a:	bf38      	it	cc
   3433c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3433e:	b1cb      	cbz	r3, 34374 <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
   34340:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   34344:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   34348:	42a6      	cmp	r6, r4
   3434a:	d00f      	beq.n	3436c <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
   3434c:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   3434e:	2c00      	cmp	r4, #0
   34350:	dd0c      	ble.n	3436c <move_thread_to_end_of_prio_q+0x64>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   34352:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   34354:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   34358:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   3435a:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   3435c:	6890      	ldr	r0, [r2, #8]
}
   3435e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   34362:	1a43      	subs	r3, r0, r1
   34364:	4258      	negs	r0, r3
   34366:	4158      	adcs	r0, r3
   34368:	f7ff bed4 	b.w	34114 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   3436c:	42ab      	cmp	r3, r5
   3436e:	d001      	beq.n	34374 <move_thread_to_end_of_prio_q+0x6c>
   34370:	681b      	ldr	r3, [r3, #0]
   34372:	e7e4      	b.n	3433e <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
   34374:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
   34378:	6029      	str	r1, [r5, #0]
	list->tail = node;
   3437a:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   3437c:	e7ee      	b.n	3435c <move_thread_to_end_of_prio_q+0x54>
   3437e:	bf00      	nop
   34380:	20008e30 	.word	0x20008e30

00034384 <z_time_slice>:
{
   34384:	4601      	mov	r1, r0
   34386:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   34388:	f04f 0320 	mov.w	r3, #32
   3438c:	f3ef 8411 	mrs	r4, BASEPRI
   34390:	f383 8811 	msr	BASEPRI, r3
   34394:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   34398:	4b16      	ldr	r3, [pc, #88]	; (343f4 <z_time_slice+0x70>)
   3439a:	4a17      	ldr	r2, [pc, #92]	; (343f8 <z_time_slice+0x74>)
   3439c:	6898      	ldr	r0, [r3, #8]
   3439e:	6815      	ldr	r5, [r2, #0]
   343a0:	42a8      	cmp	r0, r5
   343a2:	461d      	mov	r5, r3
   343a4:	d106      	bne.n	343b4 <z_time_slice+0x30>
			z_reset_time_slice();
   343a6:	f7ff fe47 	bl	34038 <z_reset_time_slice>
	__asm__ volatile(
   343aa:	f384 8811 	msr	BASEPRI, r4
   343ae:	f3bf 8f6f 	isb	sy
}
   343b2:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   343b4:	2600      	movs	r6, #0
   343b6:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   343b8:	4a10      	ldr	r2, [pc, #64]	; (343fc <z_time_slice+0x78>)
   343ba:	6812      	ldr	r2, [r2, #0]
   343bc:	b1ba      	cbz	r2, 343ee <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   343be:	89c2      	ldrh	r2, [r0, #14]
   343c0:	2a7f      	cmp	r2, #127	; 0x7f
   343c2:	d814      	bhi.n	343ee <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   343c4:	7b42      	ldrb	r2, [r0, #13]
   343c6:	06d2      	lsls	r2, r2, #27
   343c8:	d111      	bne.n	343ee <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   343ca:	4a0d      	ldr	r2, [pc, #52]	; (34400 <z_time_slice+0x7c>)
   343cc:	f990 600e 	ldrsb.w	r6, [r0, #14]
   343d0:	6812      	ldr	r2, [r2, #0]
   343d2:	4296      	cmp	r6, r2
   343d4:	db0b      	blt.n	343ee <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   343d6:	4a0b      	ldr	r2, [pc, #44]	; (34404 <z_time_slice+0x80>)
   343d8:	4290      	cmp	r0, r2
   343da:	d008      	beq.n	343ee <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   343dc:	691a      	ldr	r2, [r3, #16]
   343de:	428a      	cmp	r2, r1
   343e0:	dc02      	bgt.n	343e8 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   343e2:	f7ff ff91 	bl	34308 <move_thread_to_end_of_prio_q>
   343e6:	e7de      	b.n	343a6 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   343e8:	1a52      	subs	r2, r2, r1
   343ea:	611a      	str	r2, [r3, #16]
   343ec:	e7dd      	b.n	343aa <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   343ee:	2300      	movs	r3, #0
   343f0:	612b      	str	r3, [r5, #16]
   343f2:	e7da      	b.n	343aa <z_time_slice+0x26>
   343f4:	20008e30 	.word	0x20008e30
   343f8:	20008e64 	.word	0x20008e64
   343fc:	20008e6c 	.word	0x20008e6c
   34400:	20008e68 	.word	0x20008e68
   34404:	20008610 	.word	0x20008610

00034408 <ready_thread>:
{
   34408:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   3440a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   3440e:	7b42      	ldrb	r2, [r0, #13]
   34410:	2b00      	cmp	r3, #0
   34412:	db2d      	blt.n	34470 <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   34414:	06d3      	lsls	r3, r2, #27
   34416:	d12b      	bne.n	34470 <ready_thread+0x68>
	return !sys_dnode_is_linked(&to->node);
   34418:	6983      	ldr	r3, [r0, #24]
   3441a:	bb4b      	cbnz	r3, 34470 <ready_thread+0x68>
	return list->head == list;
   3441c:	4915      	ldr	r1, [pc, #84]	; (34474 <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
   3441e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   34422:	7342      	strb	r2, [r0, #13]
   34424:	460a      	mov	r2, r1
   34426:	f852 4f28 	ldr.w	r4, [r2, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   3442a:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3442c:	4294      	cmp	r4, r2
   3442e:	bf18      	it	ne
   34430:	4623      	movne	r3, r4
   34432:	2b00      	cmp	r3, #0
   34434:	bf38      	it	cc
   34436:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   34438:	b1ab      	cbz	r3, 34466 <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
   3443a:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   3443e:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   34442:	42a6      	cmp	r6, r4
   34444:	d00b      	beq.n	3445e <ready_thread+0x56>
		return b2 - b1;
   34446:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   34448:	2c00      	cmp	r4, #0
   3444a:	dd08      	ble.n	3445e <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
   3444c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   3444e:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   34452:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   34454:	6058      	str	r0, [r3, #4]
		update_cache(0);
   34456:	2000      	movs	r0, #0
}
   34458:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   3445a:	f7ff be5b 	b.w	34114 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   3445e:	42ab      	cmp	r3, r5
   34460:	d001      	beq.n	34466 <ready_thread+0x5e>
   34462:	681b      	ldr	r3, [r3, #0]
   34464:	e7e8      	b.n	34438 <ready_thread+0x30>
	node->prev = tail;
   34466:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
   3446a:	6028      	str	r0, [r5, #0]
	list->tail = node;
   3446c:	62c8      	str	r0, [r1, #44]	; 0x2c
}
   3446e:	e7f2      	b.n	34456 <ready_thread+0x4e>
}
   34470:	bc70      	pop	{r4, r5, r6}
   34472:	4770      	bx	lr
   34474:	20008e30 	.word	0x20008e30

00034478 <z_sched_start>:
{
   34478:	b510      	push	{r4, lr}
	__asm__ volatile(
   3447a:	f04f 0220 	mov.w	r2, #32
   3447e:	f3ef 8411 	mrs	r4, BASEPRI
   34482:	f382 8811 	msr	BASEPRI, r2
   34486:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   3448a:	7b42      	ldrb	r2, [r0, #13]
   3448c:	0751      	lsls	r1, r2, #29
   3448e:	d404      	bmi.n	3449a <z_sched_start+0x22>
	__asm__ volatile(
   34490:	f384 8811 	msr	BASEPRI, r4
   34494:	f3bf 8f6f 	isb	sy
}
   34498:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3449a:	f022 0204 	bic.w	r2, r2, #4
   3449e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   344a0:	f7ff ffb2 	bl	34408 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   344a4:	4621      	mov	r1, r4
}
   344a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   344aa:	4801      	ldr	r0, [pc, #4]	; (344b0 <z_sched_start+0x38>)
   344ac:	f7ff be0c 	b.w	340c8 <z_reschedule>
   344b0:	2000959c 	.word	0x2000959c

000344b4 <z_set_prio>:
{
   344b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   344b6:	4604      	mov	r4, r0
	__asm__ volatile(
   344b8:	f04f 0320 	mov.w	r3, #32
   344bc:	f3ef 8611 	mrs	r6, BASEPRI
   344c0:	f383 8811 	msr	BASEPRI, r3
   344c4:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   344c8:	7b43      	ldrb	r3, [r0, #13]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
   344ca:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   344cc:	06da      	lsls	r2, r3, #27
   344ce:	d138      	bne.n	34542 <z_set_prio+0x8e>
   344d0:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   344d2:	2d00      	cmp	r5, #0
   344d4:	d135      	bne.n	34542 <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   344d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   344da:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   344dc:	f003 fbaa 	bl	37c34 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   344e0:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   344e2:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   344e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   344e8:	7343      	strb	r3, [r0, #13]
	return list->head == list;
   344ea:	4817      	ldr	r0, [pc, #92]	; (34548 <z_set_prio+0x94>)
   344ec:	4603      	mov	r3, r0
   344ee:	f853 7f28 	ldr.w	r7, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   344f2:	429f      	cmp	r7, r3
   344f4:	bf18      	it	ne
   344f6:	463d      	movne	r5, r7
   344f8:	2d00      	cmp	r5, #0
   344fa:	461a      	mov	r2, r3
   344fc:	462b      	mov	r3, r5
   344fe:	bf38      	it	cc
   34500:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   34502:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   34504:	b1c3      	cbz	r3, 34538 <z_set_prio+0x84>
	int32_t b2 = thread_2->base.prio;
   34506:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   3450a:	42a9      	cmp	r1, r5
   3450c:	d010      	beq.n	34530 <z_set_prio+0x7c>
		return b2 - b1;
   3450e:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   34510:	2d00      	cmp	r5, #0
   34512:	dd0d      	ble.n	34530 <z_set_prio+0x7c>
	sys_dnode_t *const prev = successor->prev;
   34514:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   34516:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   3451a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   3451c:	605c      	str	r4, [r3, #4]
			update_cache(1);
   3451e:	2001      	movs	r0, #1
   34520:	f7ff fdf8 	bl	34114 <update_cache>
   34524:	2001      	movs	r0, #1
	__asm__ volatile(
   34526:	f386 8811 	msr	BASEPRI, r6
   3452a:	f3bf 8f6f 	isb	sy
}
   3452e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   34530:	42bb      	cmp	r3, r7
   34532:	d001      	beq.n	34538 <z_set_prio+0x84>
   34534:	681b      	ldr	r3, [r3, #0]
   34536:	e7e5      	b.n	34504 <z_set_prio+0x50>
	node->prev = tail;
   34538:	e9c4 2700 	strd	r2, r7, [r4]
	tail->next = node;
   3453c:	603c      	str	r4, [r7, #0]
	list->tail = node;
   3453e:	62c4      	str	r4, [r0, #44]	; 0x2c
}
   34540:	e7ed      	b.n	3451e <z_set_prio+0x6a>
			thread->base.prio = prio;
   34542:	2000      	movs	r0, #0
   34544:	73a1      	strb	r1, [r4, #14]
   34546:	e7ee      	b.n	34526 <z_set_prio+0x72>
   34548:	20008e30 	.word	0x20008e30

0003454c <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   3454c:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   3454e:	4b04      	ldr	r3, [pc, #16]	; (34560 <z_sched_init+0x14>)
   34550:	4608      	mov	r0, r1
   34552:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   34556:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   3455a:	f7ff bd83 	b.w	34064 <k_sched_time_slice_set>
   3455e:	bf00      	nop
   34560:	20008e30 	.word	0x20008e30

00034564 <z_impl_k_yield>:
	if (!z_is_idle_thread_object(_current)) {
   34564:	4926      	ldr	r1, [pc, #152]	; (34600 <z_impl_k_yield+0x9c>)
{
   34566:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   34568:	688a      	ldr	r2, [r1, #8]
   3456a:	4b26      	ldr	r3, [pc, #152]	; (34604 <z_impl_k_yield+0xa0>)
   3456c:	429a      	cmp	r2, r3
   3456e:	d03d      	beq.n	345ec <z_impl_k_yield+0x88>
	__asm__ volatile(
   34570:	f04f 0320 	mov.w	r3, #32
   34574:	f3ef 8511 	mrs	r5, BASEPRI
   34578:	f383 8811 	msr	BASEPRI, r3
   3457c:	f3bf 8f6f 	isb	sy
			dequeue_thread(&_kernel.ready_q.runq,
   34580:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   34582:	7b43      	ldrb	r3, [r0, #13]
   34584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   34588:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   3458a:	f003 fb53 	bl	37c34 <sys_dlist_remove>
	return list->head == list;
   3458e:	4608      	mov	r0, r1
		queue_thread(&_kernel.ready_q.runq, _current);
   34590:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   34592:	7b53      	ldrb	r3, [r2, #13]
   34594:	f063 037f 	orn	r3, r3, #127	; 0x7f
   34598:	7353      	strb	r3, [r2, #13]
   3459a:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   3459e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   345a0:	4283      	cmp	r3, r0
   345a2:	bf08      	it	eq
   345a4:	2300      	moveq	r3, #0
   345a6:	2b00      	cmp	r3, #0
   345a8:	bf38      	it	cc
   345aa:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   345ac:	b1cb      	cbz	r3, 345e2 <z_impl_k_yield+0x7e>
	int32_t b1 = thread_1->base.prio;
   345ae:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
   345b2:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   345b6:	42a7      	cmp	r7, r4
   345b8:	d00f      	beq.n	345da <z_impl_k_yield+0x76>
		return b2 - b1;
   345ba:	1be4      	subs	r4, r4, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   345bc:	2c00      	cmp	r4, #0
   345be:	dd0c      	ble.n	345da <z_impl_k_yield+0x76>
	sys_dnode_t *const prev = successor->prev;
   345c0:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   345c2:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
   345c6:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   345c8:	605a      	str	r2, [r3, #4]
		update_cache(1);
   345ca:	2001      	movs	r0, #1
   345cc:	f7ff fda2 	bl	34114 <update_cache>
   345d0:	4628      	mov	r0, r5
}
   345d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   345d6:	f7fd ba15 	b.w	31a04 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   345da:	42b3      	cmp	r3, r6
   345dc:	d001      	beq.n	345e2 <z_impl_k_yield+0x7e>
   345de:	681b      	ldr	r3, [r3, #0]
   345e0:	e7e4      	b.n	345ac <z_impl_k_yield+0x48>
	node->prev = tail;
   345e2:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
   345e6:	6032      	str	r2, [r6, #0]
	list->tail = node;
   345e8:	62ca      	str	r2, [r1, #44]	; 0x2c
}
   345ea:	e7ee      	b.n	345ca <z_impl_k_yield+0x66>
   345ec:	f04f 0320 	mov.w	r3, #32
   345f0:	f3ef 8011 	mrs	r0, BASEPRI
   345f4:	f383 8811 	msr	BASEPRI, r3
   345f8:	f3bf 8f6f 	isb	sy
   345fc:	e7e9      	b.n	345d2 <z_impl_k_yield+0x6e>
   345fe:	bf00      	nop
   34600:	20008e30 	.word	0x20008e30
   34604:	20008610 	.word	0x20008610

00034608 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   34608:	f1b1 3fff 	cmp.w	r1, #4294967295
   3460c:	bf08      	it	eq
   3460e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   34612:	b508      	push	{r3, lr}
   34614:	4602      	mov	r2, r0
   34616:	460b      	mov	r3, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   34618:	d106      	bne.n	34628 <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
   3461a:	4b0b      	ldr	r3, [pc, #44]	; (34648 <z_impl_k_sleep+0x40>)
   3461c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   3461e:	f7ff fe25 	bl	3426c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   34622:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   34626:	bd08      	pop	{r3, pc}
	if (ticks == 0) {
   34628:	4313      	orrs	r3, r2
   3462a:	d10a      	bne.n	34642 <z_impl_k_sleep+0x3a>
	z_impl_k_yield();
   3462c:	f7ff ff9a 	bl	34564 <z_impl_k_yield>
		return 0;
   34630:	2000      	movs	r0, #0
			return (t * to_hz + off) / from_hz;
   34632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   34636:	fb80 2303 	smull	r2, r3, r0, r3
   3463a:	0bd0      	lsrs	r0, r2, #15
   3463c:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   34640:	e7f1      	b.n	34626 <z_impl_k_sleep+0x1e>
   34642:	f7ff fdd9 	bl	341f8 <z_tick_sleep.part.0>
   34646:	e7f4      	b.n	34632 <z_impl_k_sleep+0x2a>
   34648:	20008e30 	.word	0x20008e30

0003464c <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   3464c:	4b01      	ldr	r3, [pc, #4]	; (34654 <z_impl_k_current_get+0x8>)
   3464e:	6898      	ldr	r0, [r3, #8]
   34650:	4770      	bx	lr
   34652:	bf00      	nop
   34654:	20008e30 	.word	0x20008e30

00034658 <z_impl_k_is_preempt_thread>:
   34658:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/k_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   3465c:	b93b      	cbnz	r3, 3466e <z_impl_k_is_preempt_thread+0x16>
   3465e:	4b05      	ldr	r3, [pc, #20]	; (34674 <z_impl_k_is_preempt_thread+0x1c>)
   34660:	689b      	ldr	r3, [r3, #8]
   34662:	89d8      	ldrh	r0, [r3, #14]
   34664:	287f      	cmp	r0, #127	; 0x7f
   34666:	bf8c      	ite	hi
   34668:	2000      	movhi	r0, #0
   3466a:	2001      	movls	r0, #1
   3466c:	4770      	bx	lr
   3466e:	2000      	movs	r0, #0
}
   34670:	4770      	bx	lr
   34672:	bf00      	nop
   34674:	20008e30 	.word	0x20008e30

00034678 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   34678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3467c:	4604      	mov	r4, r0
   3467e:	f04f 0320 	mov.w	r3, #32
   34682:	f3ef 8611 	mrs	r6, BASEPRI
   34686:	f383 8811 	msr	BASEPRI, r3
   3468a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   3468e:	7b43      	ldrb	r3, [r0, #13]
   34690:	071a      	lsls	r2, r3, #28
   34692:	d505      	bpl.n	346a0 <z_thread_abort+0x28>
	__asm__ volatile(
   34694:	f386 8811 	msr	BASEPRI, r6
   34698:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   3469c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   346a0:	f023 0220 	bic.w	r2, r3, #32
   346a4:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   346a8:	09d2      	lsrs	r2, r2, #7
   346aa:	d123      	bne.n	346f4 <z_thread_abort+0x7c>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   346ac:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   346ae:	68a3      	ldr	r3, [r4, #8]
   346b0:	b113      	cbz	r3, 346b8 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   346b2:	4620      	mov	r0, r4
   346b4:	f003 fac6 	bl	37c44 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   346b8:	f104 0018 	add.w	r0, r4, #24
   346bc:	f003 fbc3 	bl	37e46 <z_abort_timeout>
   346c0:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   346c4:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   346c8:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   346ca:	42bd      	cmp	r5, r7
   346cc:	d000      	beq.n	346d0 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   346ce:	b9cd      	cbnz	r5, 34704 <z_thread_abort+0x8c>
		update_cache(1);
   346d0:	2001      	movs	r0, #1
   346d2:	f7ff fd1f 	bl	34114 <update_cache>
		z_thread_monitor_exit(thread);
   346d6:	4620      	mov	r0, r4
   346d8:	f7ff f978 	bl	339cc <z_thread_monitor_exit>
	if (thread == _current && !arch_is_in_isr()) {
   346dc:	4b10      	ldr	r3, [pc, #64]	; (34720 <z_thread_abort+0xa8>)
   346de:	689b      	ldr	r3, [r3, #8]
   346e0:	42a3      	cmp	r3, r4
   346e2:	d1d7      	bne.n	34694 <z_thread_abort+0x1c>
   346e4:	f3ef 8305 	mrs	r3, IPSR
   346e8:	2b00      	cmp	r3, #0
   346ea:	d1d3      	bne.n	34694 <z_thread_abort+0x1c>
   346ec:	4630      	mov	r0, r6
   346ee:	f7fd f989 	bl	31a04 <arch_swap>
	return ret;
   346f2:	e7cf      	b.n	34694 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   346f4:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   346f8:	f043 0308 	orr.w	r3, r3, #8
   346fc:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   346fe:	f003 fa99 	bl	37c34 <sys_dlist_remove>
}
   34702:	e7d4      	b.n	346ae <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   34704:	4628      	mov	r0, r5
   34706:	f003 fa9d 	bl	37c44 <unpend_thread_no_timeout>
   3470a:	f105 0018 	add.w	r0, r5, #24
   3470e:	f003 fb9a 	bl	37e46 <z_abort_timeout>
		ready_thread(thread);
   34712:	4628      	mov	r0, r5
   34714:	f8c5 80b0 	str.w	r8, [r5, #176]	; 0xb0
   34718:	f7ff fe76 	bl	34408 <ready_thread>
   3471c:	e7d4      	b.n	346c8 <z_thread_abort+0x50>
   3471e:	bf00      	nop
   34720:	20008e30 	.word	0x20008e30

00034724 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   34724:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   34726:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   3472a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   3472c:	e9cd 6700 	strd	r6, r7, [sp]
   34730:	f7ff fd4e 	bl	341d0 <z_pend_curr>

	if (data != NULL) {
   34734:	b11c      	cbz	r4, 3473e <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   34736:	4b03      	ldr	r3, [pc, #12]	; (34744 <z_sched_wait+0x20>)
   34738:	689b      	ldr	r3, [r3, #8]
   3473a:	695b      	ldr	r3, [r3, #20]
   3473c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   3473e:	b002      	add	sp, #8
   34740:	bdd0      	pop	{r4, r6, r7, pc}
   34742:	bf00      	nop
   34744:	20008e30 	.word	0x20008e30

00034748 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   34748:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   3474a:	4806      	ldr	r0, [pc, #24]	; (34764 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   3474c:	4a06      	ldr	r2, [pc, #24]	; (34768 <z_data_copy+0x20>)
   3474e:	4907      	ldr	r1, [pc, #28]	; (3476c <z_data_copy+0x24>)
   34750:	1a12      	subs	r2, r2, r0
   34752:	f002 ff5d 	bl	37610 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   34756:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   3475a:	4a05      	ldr	r2, [pc, #20]	; (34770 <z_data_copy+0x28>)
   3475c:	4905      	ldr	r1, [pc, #20]	; (34774 <z_data_copy+0x2c>)
   3475e:	4806      	ldr	r0, [pc, #24]	; (34778 <z_data_copy+0x30>)
   34760:	f002 bf56 	b.w	37610 <memcpy>
   34764:	20008000 	.word	0x20008000
   34768:	20008208 	.word	0x20008208
   3476c:	0003cc30 	.word	0x0003cc30
   34770:	00000000 	.word	0x00000000
   34774:	0003cc30 	.word	0x0003cc30
   34778:	20008000 	.word	0x20008000

0003477c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   3477c:	4b03      	ldr	r3, [pc, #12]	; (3478c <elapsed+0x10>)
   3477e:	681b      	ldr	r3, [r3, #0]
   34780:	b90b      	cbnz	r3, 34786 <elapsed+0xa>
   34782:	f7fd b903 	b.w	3198c <sys_clock_elapsed>
}
   34786:	2000      	movs	r0, #0
   34788:	4770      	bx	lr
   3478a:	bf00      	nop
   3478c:	20008e70 	.word	0x20008e70

00034790 <remove_timeout>:
{
   34790:	b530      	push	{r4, r5, lr}
   34792:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   34794:	b168      	cbz	r0, 347b2 <remove_timeout+0x22>
   34796:	4a0a      	ldr	r2, [pc, #40]	; (347c0 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   34798:	6852      	ldr	r2, [r2, #4]
   3479a:	4290      	cmp	r0, r2
   3479c:	d009      	beq.n	347b2 <remove_timeout+0x22>
	if (next(t) != NULL) {
   3479e:	b143      	cbz	r3, 347b2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   347a0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   347a4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   347a8:	1912      	adds	r2, r2, r4
   347aa:	eb45 0101 	adc.w	r1, r5, r1
   347ae:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   347b2:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   347b4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   347b6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   347b8:	2300      	movs	r3, #0
	node->prev = NULL;
   347ba:	e9c0 3300 	strd	r3, r3, [r0]
}
   347be:	bd30      	pop	{r4, r5, pc}
   347c0:	200080b4 	.word	0x200080b4

000347c4 <next_timeout>:

static int32_t next_timeout(void)
{
   347c4:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   347c6:	4b13      	ldr	r3, [pc, #76]	; (34814 <next_timeout+0x50>)
   347c8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   347ca:	429c      	cmp	r4, r3
   347cc:	bf08      	it	eq
   347ce:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   347d0:	f7ff ffd4 	bl	3477c <elapsed>
   347d4:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   347d6:	b1bc      	cbz	r4, 34808 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   347d8:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   347dc:	1b40      	subs	r0, r0, r5
   347de:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   347e2:	2801      	cmp	r0, #1
   347e4:	f171 0300 	sbcs.w	r3, r1, #0
   347e8:	db11      	blt.n	3480e <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   347ea:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   347ee:	2300      	movs	r3, #0
   347f0:	4282      	cmp	r2, r0
   347f2:	eb73 0401 	sbcs.w	r4, r3, r1
   347f6:	da00      	bge.n	347fa <next_timeout+0x36>
   347f8:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   347fa:	4b07      	ldr	r3, [pc, #28]	; (34818 <next_timeout+0x54>)
   347fc:	691b      	ldr	r3, [r3, #16]
   347fe:	b113      	cbz	r3, 34806 <next_timeout+0x42>
   34800:	4298      	cmp	r0, r3
   34802:	bfa8      	it	ge
   34804:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   34806:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   34808:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   3480c:	e7f5      	b.n	347fa <next_timeout+0x36>
   3480e:	2000      	movs	r0, #0
   34810:	e7f3      	b.n	347fa <next_timeout+0x36>
   34812:	bf00      	nop
   34814:	200080b4 	.word	0x200080b4
   34818:	20008e30 	.word	0x20008e30

0003481c <timeout_rem>:
/* must be locked */
static k_ticks_t timeout_rem(const struct _timeout *timeout)
{
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   3481c:	6803      	ldr	r3, [r0, #0]
{
   3481e:	b570      	push	{r4, r5, r6, lr}
	if (z_is_inactive_timeout(timeout)) {
   34820:	b1eb      	cbz	r3, 3485e <timeout_rem+0x42>
	return list->head == list;
   34822:	4a10      	ldr	r2, [pc, #64]	; (34864 <timeout_rem+0x48>)
   34824:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   34826:	4293      	cmp	r3, r2
   34828:	d016      	beq.n	34858 <timeout_rem+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   3482a:	2400      	movs	r4, #0
   3482c:	2500      	movs	r5, #0
   3482e:	6851      	ldr	r1, [r2, #4]
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   34830:	b93b      	cbnz	r3, 34842 <timeout_rem+0x26>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   34832:	f7ff ffa3 	bl	3477c <elapsed>
   34836:	1a24      	subs	r4, r4, r0
   34838:	eb65 75e0 	sbc.w	r5, r5, r0, asr #31
}
   3483c:	4620      	mov	r0, r4
   3483e:	4629      	mov	r1, r5
   34840:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
   34842:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
   34846:	18a4      	adds	r4, r4, r2
   34848:	eb46 0505 	adc.w	r5, r6, r5
		if (timeout == t) {
   3484c:	4283      	cmp	r3, r0
   3484e:	d0f0      	beq.n	34832 <timeout_rem+0x16>
	return (node == list->tail) ? NULL : node->next;
   34850:	428b      	cmp	r3, r1
   34852:	d0ee      	beq.n	34832 <timeout_rem+0x16>
   34854:	681b      	ldr	r3, [r3, #0]
   34856:	e7eb      	b.n	34830 <timeout_rem+0x14>
   34858:	2400      	movs	r4, #0
   3485a:	2500      	movs	r5, #0
   3485c:	e7e9      	b.n	34832 <timeout_rem+0x16>
		return 0;
   3485e:	2400      	movs	r4, #0
   34860:	2500      	movs	r5, #0
   34862:	e7eb      	b.n	3483c <timeout_rem+0x20>
   34864:	200080b4 	.word	0x200080b4

00034868 <z_add_timeout>:
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   34868:	f1b3 3fff 	cmp.w	r3, #4294967295
   3486c:	bf08      	it	eq
   3486e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   34872:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34876:	4604      	mov	r4, r0
   34878:	4692      	mov	sl, r2
   3487a:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3487c:	d073      	beq.n	34966 <z_add_timeout+0xfe>
	to->fn = fn;
   3487e:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   34880:	f04f 0320 	mov.w	r3, #32
   34884:	f3ef 8511 	mrs	r5, BASEPRI
   34888:	f383 8811 	msr	BASEPRI, r3
   3488c:	f3bf 8f6f 	isb	sy
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   34890:	f06f 0301 	mvn.w	r3, #1
   34894:	f04f 32ff 	mov.w	r2, #4294967295
   34898:	ebb3 080a 	subs.w	r8, r3, sl
   3489c:	eb62 090b 	sbc.w	r9, r2, fp
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   348a0:	f1b8 0f00 	cmp.w	r8, #0
   348a4:	f179 0100 	sbcs.w	r1, r9, #0
   348a8:	db1c      	blt.n	348e4 <z_add_timeout+0x7c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   348aa:	4830      	ldr	r0, [pc, #192]	; (3496c <z_add_timeout+0x104>)
   348ac:	e9d0 1000 	ldrd	r1, r0, [r0]
   348b0:	1a5b      	subs	r3, r3, r1
   348b2:	eb62 0200 	sbc.w	r2, r2, r0
			to->dticks = MAX(1, ticks);
   348b6:	ebb3 060a 	subs.w	r6, r3, sl
   348ba:	eb62 070b 	sbc.w	r7, r2, fp
   348be:	2e01      	cmp	r6, #1
   348c0:	f177 0300 	sbcs.w	r3, r7, #0
   348c4:	bfbc      	itt	lt
   348c6:	2601      	movlt	r6, #1
   348c8:	2700      	movlt	r7, #0
   348ca:	e9c4 6704 	strd	r6, r7, [r4, #16]
	return list->head == list;
   348ce:	4a28      	ldr	r2, [pc, #160]	; (34970 <z_add_timeout+0x108>)
   348d0:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   348d4:	4293      	cmp	r3, r2
   348d6:	d11e      	bne.n	34916 <z_add_timeout+0xae>
	node->prev = tail;
   348d8:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
   348dc:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   348e0:	6054      	str	r4, [r2, #4]
}
   348e2:	e02d      	b.n	34940 <z_add_timeout+0xd8>
			to->dticks = timeout.ticks + 1 + elapsed();
   348e4:	f7ff ff4a 	bl	3477c <elapsed>
   348e8:	f11a 0301 	adds.w	r3, sl, #1
   348ec:	9300      	str	r3, [sp, #0]
   348ee:	f14b 0300 	adc.w	r3, fp, #0
   348f2:	9301      	str	r3, [sp, #4]
   348f4:	e9dd 2300 	ldrd	r2, r3, [sp]
   348f8:	1812      	adds	r2, r2, r0
   348fa:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   348fe:	e9c4 2304 	strd	r2, r3, [r4, #16]
   34902:	e7e4      	b.n	348ce <z_add_timeout+0x66>
			to->dticks -= t->dticks;
   34904:	ebb6 0008 	subs.w	r0, r6, r8
   34908:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
   3490c:	4563      	cmp	r3, ip
   3490e:	e9c4 0104 	strd	r0, r1, [r4, #16]
   34912:	d0e1      	beq.n	348d8 <z_add_timeout+0x70>
   34914:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   34916:	2b00      	cmp	r3, #0
   34918:	d0de      	beq.n	348d8 <z_add_timeout+0x70>
			if (t->dticks > to->dticks) {
   3491a:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
   3491e:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
   34922:	4546      	cmp	r6, r8
   34924:	eb77 0109 	sbcs.w	r1, r7, r9
   34928:	daec      	bge.n	34904 <z_add_timeout+0x9c>
				t->dticks -= to->dticks;
   3492a:	ebb8 0006 	subs.w	r0, r8, r6
   3492e:	eb69 0107 	sbc.w	r1, r9, r7
   34932:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   34936:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   34938:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   3493c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   3493e:	605c      	str	r4, [r3, #4]
	return list->head == list;
   34940:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   34942:	4293      	cmp	r3, r2
   34944:	d00b      	beq.n	3495e <z_add_timeout+0xf6>
		if (to == first()) {
   34946:	429c      	cmp	r4, r3
   34948:	d109      	bne.n	3495e <z_add_timeout+0xf6>
			int32_t next_time = next_timeout();
   3494a:	f7ff ff3b 	bl	347c4 <next_timeout>
			if (next_time == 0 ||
   3494e:	b118      	cbz	r0, 34958 <z_add_timeout+0xf0>
			    _current_cpu->slice_ticks != next_time) {
   34950:	4b08      	ldr	r3, [pc, #32]	; (34974 <z_add_timeout+0x10c>)
			if (next_time == 0 ||
   34952:	691b      	ldr	r3, [r3, #16]
   34954:	4283      	cmp	r3, r0
   34956:	d002      	beq.n	3495e <z_add_timeout+0xf6>
				sys_clock_set_timeout(next_time, false);
   34958:	2100      	movs	r1, #0
   3495a:	f7fc ffe5 	bl	31928 <sys_clock_set_timeout>
	__asm__ volatile(
   3495e:	f385 8811 	msr	BASEPRI, r5
   34962:	f3bf 8f6f 	isb	sy
}
   34966:	b003      	add	sp, #12
   34968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3496c:	20008780 	.word	0x20008780
   34970:	200080b4 	.word	0x200080b4
   34974:	20008e30 	.word	0x20008e30

00034978 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   34978:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3497c:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   3497e:	f7ff fd01 	bl	34384 <z_time_slice>
	__asm__ volatile(
   34982:	f04f 0320 	mov.w	r3, #32
   34986:	f3ef 8411 	mrs	r4, BASEPRI
   3498a:	f383 8811 	msr	BASEPRI, r3
   3498e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   34992:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 34a44 <sys_clock_announce+0xcc>
   34996:	4d2a      	ldr	r5, [pc, #168]	; (34a40 <sys_clock_announce+0xc8>)
   34998:	4651      	mov	r1, sl
	return list->head == list;
   3499a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 34a48 <sys_clock_announce+0xd0>
   3499e:	602e      	str	r6, [r5, #0]
   349a0:	f8d5 c000 	ldr.w	ip, [r5]
   349a4:	f8db 0000 	ldr.w	r0, [fp]
   349a8:	4662      	mov	r2, ip
   349aa:	e9da 8900 	ldrd	r8, r9, [sl]
   349ae:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   349b0:	4558      	cmp	r0, fp
   349b2:	e9cd 2300 	strd	r2, r3, [sp]
   349b6:	d00d      	beq.n	349d4 <sys_clock_announce+0x5c>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   349b8:	b160      	cbz	r0, 349d4 <sys_clock_announce+0x5c>
   349ba:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   349be:	45b4      	cmp	ip, r6
   349c0:	41bb      	sbcs	r3, r7
   349c2:	da1d      	bge.n	34a00 <sys_clock_announce+0x88>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   349c4:	9b00      	ldr	r3, [sp, #0]
   349c6:	ebb6 0c03 	subs.w	ip, r6, r3
   349ca:	9b01      	ldr	r3, [sp, #4]
   349cc:	eb67 0603 	sbc.w	r6, r7, r3
   349d0:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   349d4:	2600      	movs	r6, #0
	curr_tick += announce_remaining;
   349d6:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
   349d8:	602e      	str	r6, [r5, #0]
	curr_tick += announce_remaining;
   349da:	eb13 0208 	adds.w	r2, r3, r8
   349de:	9b01      	ldr	r3, [sp, #4]
   349e0:	eb43 0309 	adc.w	r3, r3, r9
   349e4:	e9c1 2300 	strd	r2, r3, [r1]

	sys_clock_set_timeout(next_timeout(), false);
   349e8:	f7ff feec 	bl	347c4 <next_timeout>
   349ec:	4631      	mov	r1, r6
   349ee:	f7fc ff9b 	bl	31928 <sys_clock_set_timeout>
	__asm__ volatile(
   349f2:	f384 8811 	msr	BASEPRI, r4
   349f6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   349fa:	b003      	add	sp, #12
   349fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   34a00:	2200      	movs	r2, #0
   34a02:	2300      	movs	r3, #0
		curr_tick += dt;
   34a04:	eb18 0806 	adds.w	r8, r8, r6
   34a08:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   34a0c:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   34a10:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   34a14:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   34a18:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   34a1a:	f7ff feb9 	bl	34790 <remove_timeout>
   34a1e:	f384 8811 	msr	BASEPRI, r4
   34a22:	f3bf 8f6f 	isb	sy
		t->fn(t);
   34a26:	6883      	ldr	r3, [r0, #8]
   34a28:	4798      	blx	r3
	__asm__ volatile(
   34a2a:	f04f 0320 	mov.w	r3, #32
   34a2e:	f3ef 8411 	mrs	r4, BASEPRI
   34a32:	f383 8811 	msr	BASEPRI, r3
   34a36:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   34a3a:	4902      	ldr	r1, [pc, #8]	; (34a44 <sys_clock_announce+0xcc>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   34a3c:	e7b0      	b.n	349a0 <sys_clock_announce+0x28>
   34a3e:	bf00      	nop
   34a40:	20008e70 	.word	0x20008e70
   34a44:	20008780 	.word	0x20008780
   34a48:	200080b4 	.word	0x200080b4

00034a4c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   34a4c:	b510      	push	{r4, lr}
   34a4e:	f04f 0320 	mov.w	r3, #32
   34a52:	f3ef 8411 	mrs	r4, BASEPRI
   34a56:	f383 8811 	msr	BASEPRI, r3
   34a5a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   34a5e:	f7fc ff95 	bl	3198c <sys_clock_elapsed>
   34a62:	4b06      	ldr	r3, [pc, #24]	; (34a7c <sys_clock_tick_get+0x30>)
   34a64:	e9d3 2300 	ldrd	r2, r3, [r3]
   34a68:	1812      	adds	r2, r2, r0
   34a6a:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   34a6e:	f384 8811 	msr	BASEPRI, r4
   34a72:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   34a76:	4610      	mov	r0, r2
   34a78:	4619      	mov	r1, r3
   34a7a:	bd10      	pop	{r4, pc}
   34a7c:	20008780 	.word	0x20008780

00034a80 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   34a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   34a82:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   34a86:	1c56      	adds	r6, r2, #1
   34a88:	f143 0700 	adc.w	r7, r3, #0
   34a8c:	2f00      	cmp	r7, #0
   34a8e:	bf08      	it	eq
   34a90:	2e02      	cmpeq	r6, #2
{
   34a92:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   34a94:	d302      	bcc.n	34a9c <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   34a96:	490d      	ldr	r1, [pc, #52]	; (34acc <z_timer_expiration_handler+0x4c>)
   34a98:	f7ff fee6 	bl	34868 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   34a9c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   34a9e:	3301      	adds	r3, #1
   34aa0:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   34aa2:	6a23      	ldr	r3, [r4, #32]
   34aa4:	b10b      	cbz	r3, 34aaa <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   34aa6:	4620      	mov	r0, r4
   34aa8:	4798      	blx	r3
	return list->head == list;
   34aaa:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   34aae:	42a5      	cmp	r5, r4
   34ab0:	d00b      	beq.n	34aca <z_timer_expiration_handler+0x4a>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   34ab2:	b155      	cbz	r5, 34aca <z_timer_expiration_handler+0x4a>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   34ab4:	4628      	mov	r0, r5
   34ab6:	f003 f8d8 	bl	37c6a <z_unpend_thread_no_timeout>
   34aba:	2300      	movs	r3, #0

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
   34abc:	4628      	mov	r0, r5
   34abe:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
}
   34ac2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   34ac6:	f003 b941 	b.w	37d4c <z_ready_thread>
}
   34aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34acc:	00034a81 	.word	0x00034a81

00034ad0 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   34ad0:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   34ad4:	4619      	mov	r1, r3
   34ad6:	4606      	mov	r6, r0
   34ad8:	4610      	mov	r0, r2
   34ada:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   34ade:	1c4c      	adds	r4, r1, #1
   34ae0:	bf08      	it	eq
   34ae2:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   34ae6:	4680      	mov	r8, r0
   34ae8:	4689      	mov	r9, r1
   34aea:	d04c      	beq.n	34b86 <z_impl_k_timer_start+0xb6>
   34aec:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   34aee:	1c6b      	adds	r3, r5, #1
   34af0:	bf08      	it	eq
   34af2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   34af6:	4614      	mov	r4, r2
   34af8:	d019      	beq.n	34b2e <z_impl_k_timer_start+0x5e>
   34afa:	ea54 0305 	orrs.w	r3, r4, r5
   34afe:	d016      	beq.n	34b2e <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
   34b00:	f06f 0301 	mvn.w	r3, #1
   34b04:	ebb3 0a02 	subs.w	sl, r3, r2
   34b08:	f04f 33ff 	mov.w	r3, #4294967295
   34b0c:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   34b10:	f1ba 0f00 	cmp.w	sl, #0
   34b14:	f17b 0300 	sbcs.w	r3, fp, #0
   34b18:	da09      	bge.n	34b2e <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
   34b1a:	f112 34ff 	adds.w	r4, r2, #4294967295
   34b1e:	f145 35ff 	adc.w	r5, r5, #4294967295
   34b22:	2c01      	cmp	r4, #1
   34b24:	f175 0300 	sbcs.w	r3, r5, #0
   34b28:	bfbc      	itt	lt
   34b2a:	2401      	movlt	r4, #1
   34b2c:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   34b2e:	f06f 0301 	mvn.w	r3, #1
   34b32:	1a1b      	subs	r3, r3, r0
   34b34:	9300      	str	r3, [sp, #0]
   34b36:	f04f 33ff 	mov.w	r3, #4294967295
   34b3a:	eb63 0301 	sbc.w	r3, r3, r1
   34b3e:	9301      	str	r3, [sp, #4]
   34b40:	e9dd 2300 	ldrd	r2, r3, [sp]
   34b44:	2a00      	cmp	r2, #0
   34b46:	f173 0300 	sbcs.w	r3, r3, #0
   34b4a:	da0c      	bge.n	34b66 <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
   34b4c:	f110 38ff 	adds.w	r8, r0, #4294967295
   34b50:	f141 39ff 	adc.w	r9, r1, #4294967295
   34b54:	f1b8 0f00 	cmp.w	r8, #0
   34b58:	f179 0300 	sbcs.w	r3, r9, #0
   34b5c:	bfbc      	itt	lt
   34b5e:	f04f 0800 	movlt.w	r8, #0
   34b62:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   34b66:	4630      	mov	r0, r6
   34b68:	f003 f96d 	bl	37e46 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   34b6c:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   34b6e:	4642      	mov	r2, r8
	timer->status = 0U;
   34b70:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   34b72:	4630      	mov	r0, r6
   34b74:	464b      	mov	r3, r9
   34b76:	4905      	ldr	r1, [pc, #20]	; (34b8c <z_impl_k_timer_start+0xbc>)
	timer->period = period;
   34b78:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   34b7c:	b002      	add	sp, #8
   34b7e:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   34b82:	f7ff be71 	b.w	34868 <z_add_timeout>
}
   34b86:	b002      	add	sp, #8
   34b88:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   34b8c:	00034a81 	.word	0x00034a81

00034b90 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   34b90:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   34b94:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   34b96:	4b29      	ldr	r3, [pc, #164]	; (34c3c <z_impl_k_poll+0xac>)
{
   34b98:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   34b9a:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   34b9c:	2301      	movs	r3, #1
   34b9e:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
   34ba2:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   34ba6:	ea52 0307 	orrs.w	r3, r2, r7
   34baa:	bf0c      	ite	eq
   34bac:	2301      	moveq	r3, #1
   34bae:	2300      	movne	r3, #0
   34bb0:	f105 0260 	add.w	r2, r5, #96	; 0x60
{
   34bb4:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   34bb6:	f003 fa2b 	bl	38010 <register_events>
   34bba:	4681      	mov	r9, r0
	__asm__ volatile(
   34bbc:	f04f 0320 	mov.w	r3, #32
   34bc0:	f3ef 8a11 	mrs	sl, BASEPRI
   34bc4:	f383 8811 	msr	BASEPRI, r3
   34bc8:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   34bcc:	f895 4060 	ldrb.w	r4, [r5, #96]	; 0x60
   34bd0:	b964      	cbnz	r4, 34bec <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   34bd2:	4601      	mov	r1, r0
   34bd4:	4652      	mov	r2, sl
   34bd6:	4640      	mov	r0, r8
   34bd8:	f003 f9b8 	bl	37f4c <clear_event_registrations>
	__asm__ volatile(
   34bdc:	f38a 8811 	msr	BASEPRI, sl
   34be0:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   34be4:	4620      	mov	r0, r4
   34be6:	b002      	add	sp, #8
   34be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   34bec:	2300      	movs	r3, #0
   34bee:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   34bf2:	ea56 0307 	orrs.w	r3, r6, r7
   34bf6:	d106      	bne.n	34c06 <z_impl_k_poll+0x76>
   34bf8:	f38a 8811 	msr	BASEPRI, sl
   34bfc:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   34c00:	f06f 040a 	mvn.w	r4, #10
   34c04:	e7ee      	b.n	34be4 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   34c06:	4651      	mov	r1, sl
   34c08:	e9cd 6700 	strd	r6, r7, [sp]
   34c0c:	4a0c      	ldr	r2, [pc, #48]	; (34c40 <z_impl_k_poll+0xb0>)
   34c0e:	480d      	ldr	r0, [pc, #52]	; (34c44 <z_impl_k_poll+0xb4>)
   34c10:	f7ff fade 	bl	341d0 <z_pend_curr>
   34c14:	4604      	mov	r4, r0
	__asm__ volatile(
   34c16:	f04f 0320 	mov.w	r3, #32
   34c1a:	f3ef 8511 	mrs	r5, BASEPRI
   34c1e:	f383 8811 	msr	BASEPRI, r3
   34c22:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   34c26:	462a      	mov	r2, r5
   34c28:	4649      	mov	r1, r9
   34c2a:	4640      	mov	r0, r8
   34c2c:	f003 f98e 	bl	37f4c <clear_event_registrations>
	__asm__ volatile(
   34c30:	f385 8811 	msr	BASEPRI, r5
   34c34:	f3bf 8f6f 	isb	sy
	return swap_rc;
   34c38:	e7d4      	b.n	34be4 <z_impl_k_poll+0x54>
   34c3a:	bf00      	nop
   34c3c:	20008e30 	.word	0x20008e30
   34c40:	200080bc 	.word	0x200080bc
   34c44:	2000959c 	.word	0x2000959c

00034c48 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   34c48:	b538      	push	{r3, r4, r5, lr}
   34c4a:	4603      	mov	r3, r0
	__asm__ volatile(
   34c4c:	f04f 0220 	mov.w	r2, #32
   34c50:	f3ef 8511 	mrs	r5, BASEPRI
   34c54:	f382 8811 	msr	BASEPRI, r2
   34c58:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   34c5c:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   34c5e:	2101      	movs	r1, #1
   34c60:	6081      	str	r1, [r0, #8]
	return list->head == list;
   34c62:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   34c64:	4283      	cmp	r3, r0
   34c66:	d106      	bne.n	34c76 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   34c68:	f385 8811 	msr	BASEPRI, r5
   34c6c:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   34c70:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   34c72:	4620      	mov	r0, r4
   34c74:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   34c76:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   34c7a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   34c7c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   34c7e:	2300      	movs	r3, #0
	node->prev = NULL;
   34c80:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   34c84:	f003 fa3b 	bl	380fe <signal_poll_event>
	z_reschedule(&lock, key);
   34c88:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   34c8a:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   34c8c:	4801      	ldr	r0, [pc, #4]	; (34c94 <z_impl_k_poll_signal_raise+0x4c>)
   34c8e:	f7ff fa1b 	bl	340c8 <z_reschedule>
	return rc;
   34c92:	e7ee      	b.n	34c72 <z_impl_k_poll_signal_raise+0x2a>
   34c94:	2000959c 	.word	0x2000959c

00034c98 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   34c98:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   34c9a:	4c06      	ldr	r4, [pc, #24]	; (34cb4 <statics_init+0x1c>)
   34c9c:	4d06      	ldr	r5, [pc, #24]	; (34cb8 <statics_init+0x20>)
   34c9e:	42ac      	cmp	r4, r5
   34ca0:	d301      	bcc.n	34ca6 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   34ca2:	2000      	movs	r0, #0
   34ca4:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   34ca6:	4620      	mov	r0, r4
   34ca8:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   34cac:	f003 faae 	bl	3820c <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   34cb0:	3414      	adds	r4, #20
   34cb2:	e7f4      	b.n	34c9e <statics_init+0x6>
   34cb4:	200081c0 	.word	0x200081c0
   34cb8:	200081c0 	.word	0x200081c0

00034cbc <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   34cbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   34cbe:	2400      	movs	r4, #0
   34cc0:	4b08      	ldr	r3, [pc, #32]	; (34ce4 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   34cc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
	struct k_work_queue_config cfg = {
   34cc6:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   34cc8:	ab02      	add	r3, sp, #8
   34cca:	9300      	str	r3, [sp, #0]
   34ccc:	4906      	ldr	r1, [pc, #24]	; (34ce8 <k_sys_work_q_init+0x2c>)
   34cce:	f04f 33ff 	mov.w	r3, #4294967295
   34cd2:	4806      	ldr	r0, [pc, #24]	; (34cec <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   34cd4:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   34cd8:	f000 f8f8 	bl	34ecc <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   34cdc:	4620      	mov	r0, r4
   34cde:	b004      	add	sp, #16
   34ce0:	bd10      	pop	{r4, pc}
   34ce2:	bf00      	nop
   34ce4:	0003cc23 	.word	0x0003cc23
   34ce8:	200165e0 	.word	0x200165e0
   34cec:	20008788 	.word	0x20008788

00034cf0 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   34cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34cf4:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   34cf6:	f04f 38ff 	mov.w	r8, #4294967295
   34cfa:	f04f 39ff 	mov.w	r9, #4294967295
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   34cfe:	4e49      	ldr	r6, [pc, #292]	; (34e24 <work_queue_main+0x134>)
{
   34d00:	b085      	sub	sp, #20
	__asm__ volatile(
   34d02:	f04f 0320 	mov.w	r3, #32
   34d06:	f3ef 8711 	mrs	r7, BASEPRI
   34d0a:	f383 8811 	msr	BASEPRI, r3
   34d0e:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   34d12:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
	return list->head;
   34d16:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   34d1a:	b985      	cbnz	r5, 34d3e <work_queue_main+0x4e>
	*flagp &= ~BIT(bit);
   34d1c:	f023 0204 	bic.w	r2, r3, #4
		} else if (flag_test_and_clear(&queue->flags,
   34d20:	075d      	lsls	r5, r3, #29
	*flagp &= ~BIT(bit);
   34d22:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
		} else if (flag_test_and_clear(&queue->flags,
   34d26:	d433      	bmi.n	34d90 <work_queue_main+0xa0>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   34d28:	2300      	movs	r3, #0
   34d2a:	4639      	mov	r1, r7
   34d2c:	e9cd 8900 	strd	r8, r9, [sp]
   34d30:	9302      	str	r3, [sp, #8]
   34d32:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
   34d36:	483c      	ldr	r0, [pc, #240]	; (34e28 <work_queue_main+0x138>)
   34d38:	f7ff fcf4 	bl	34724 <z_sched_wait>
			continue;
   34d3c:	e7e1      	b.n	34d02 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   34d3e:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   34d42:	6829      	ldr	r1, [r5, #0]
   34d44:	4295      	cmp	r5, r2
	list->head = node;
   34d46:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   34d4a:	d101      	bne.n	34d50 <work_queue_main+0x60>
	list->tail = node;
   34d4c:	f8c4 10bc 	str.w	r1, [r4, #188]	; 0xbc
	*flagp |= BIT(bit);
   34d50:	f043 0302 	orr.w	r3, r3, #2
   34d54:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   34d58:	68eb      	ldr	r3, [r5, #12]
   34d5a:	f023 0304 	bic.w	r3, r3, #4
   34d5e:	f043 0301 	orr.w	r3, r3, #1
   34d62:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   34d64:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   34d66:	f387 8811 	msr	BASEPRI, r7
   34d6a:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
   34d6e:	4628      	mov	r0, r5
   34d70:	4798      	blx	r3
	__asm__ volatile(
   34d72:	f04f 0320 	mov.w	r3, #32
   34d76:	f3ef 8b11 	mrs	fp, BASEPRI
   34d7a:	f383 8811 	msr	BASEPRI, r3
   34d7e:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   34d82:	68eb      	ldr	r3, [r5, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   34d84:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   34d86:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   34d8a:	d40b      	bmi.n	34da4 <work_queue_main+0xb4>
	*flagp &= ~BIT(bit);
   34d8c:	60ea      	str	r2, [r5, #12]
   34d8e:	e00e      	b.n	34dae <work_queue_main+0xbe>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   34d90:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   34d94:	2200      	movs	r2, #0
   34d96:	2101      	movs	r1, #1
   34d98:	4628      	mov	r0, r5
   34d9a:	f003 f836 	bl	37e0a <z_sched_wake>
   34d9e:	2800      	cmp	r0, #0
   34da0:	d1f8      	bne.n	34d94 <work_queue_main+0xa4>
   34da2:	e7c1      	b.n	34d28 <work_queue_main+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   34da4:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   34da6:	f023 0303 	bic.w	r3, r3, #3
   34daa:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   34dac:	b970      	cbnz	r0, 34dcc <work_queue_main+0xdc>
	*flagp &= ~BIT(bit);
   34dae:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   34db2:	f023 0302 	bic.w	r3, r3, #2
   34db6:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	__asm__ volatile(
   34dba:	f38b 8811 	msr	BASEPRI, fp
   34dbe:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   34dc2:	05d8      	lsls	r0, r3, #23
   34dc4:	d49d      	bmi.n	34d02 <work_queue_main+0x12>
   34dc6:	f7ff fbcd 	bl	34564 <z_impl_k_yield>
}
   34dca:	e79a      	b.n	34d02 <work_queue_main+0x12>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   34dcc:	f04f 0a00 	mov.w	sl, #0
   34dd0:	6807      	ldr	r7, [r0, #0]
	parent->next = child;
   34dd2:	4653      	mov	r3, sl
   34dd4:	2f00      	cmp	r7, #0
   34dd6:	bf38      	it	cc
   34dd8:	2700      	movcc	r7, #0
		if (wc->work == work) {
   34dda:	6842      	ldr	r2, [r0, #4]
   34ddc:	4601      	mov	r1, r0
   34dde:	4295      	cmp	r5, r2
   34de0:	d10e      	bne.n	34e00 <work_queue_main+0x110>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   34de2:	6801      	ldr	r1, [r0, #0]
   34de4:	f1ba 0f00 	cmp.w	sl, #0
   34de8:	d114      	bne.n	34e14 <work_queue_main+0x124>
   34dea:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   34dec:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   34dee:	4290      	cmp	r0, r2
   34df0:	d100      	bne.n	34df4 <work_queue_main+0x104>
	list->tail = node;
   34df2:	6071      	str	r1, [r6, #4]
	parent->next = child;
   34df4:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   34df8:	f7ff f8ce 	bl	33f98 <z_impl_k_sem_give>
}
   34dfc:	4651      	mov	r1, sl
   34dfe:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   34e00:	2f00      	cmp	r7, #0
   34e02:	d0d4      	beq.n	34dae <work_queue_main+0xbe>
	return node->next;
   34e04:	683a      	ldr	r2, [r7, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   34e06:	4638      	mov	r0, r7
   34e08:	2a00      	cmp	r2, #0
   34e0a:	bf38      	it	cc
   34e0c:	2200      	movcc	r2, #0
   34e0e:	468a      	mov	sl, r1
   34e10:	4617      	mov	r7, r2
   34e12:	e7e2      	b.n	34dda <work_queue_main+0xea>
	parent->next = child;
   34e14:	f8ca 1000 	str.w	r1, [sl]
Z_GENLIST_REMOVE(slist, snode)
   34e18:	6872      	ldr	r2, [r6, #4]
   34e1a:	4290      	cmp	r0, r2
	list->tail = node;
   34e1c:	bf08      	it	eq
   34e1e:	f8c6 a004 	streq.w	sl, [r6, #4]
}
   34e22:	e7e7      	b.n	34df4 <work_queue_main+0x104>
   34e24:	20008e74 	.word	0x20008e74
   34e28:	2000959c 	.word	0x2000959c

00034e2c <submit_to_queue_locked>:
{
   34e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   34e2e:	68c3      	ldr	r3, [r0, #12]
{
   34e30:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   34e32:	079a      	lsls	r2, r3, #30
{
   34e34:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   34e36:	f3c3 0540 	ubfx	r5, r3, #1, #1
   34e3a:	d41f      	bmi.n	34e7c <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   34e3c:	075f      	lsls	r7, r3, #29
   34e3e:	d41f      	bmi.n	34e80 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   34e40:	680a      	ldr	r2, [r1, #0]
   34e42:	b90a      	cbnz	r2, 34e48 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   34e44:	6882      	ldr	r2, [r0, #8]
   34e46:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   34e48:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   34e4a:	bf42      	ittt	mi
   34e4c:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
   34e4e:	2502      	movmi	r5, #2
			*queuep = work->queue;
   34e50:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   34e52:	6837      	ldr	r7, [r6, #0]
		ret = 1;
   34e54:	bf58      	it	pl
   34e56:	2501      	movpl	r5, #1
	if (queue == NULL) {
   34e58:	b37f      	cbz	r7, 34eba <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   34e5a:	4b1b      	ldr	r3, [pc, #108]	; (34ec8 <submit_to_queue_locked+0x9c>)
   34e5c:	689b      	ldr	r3, [r3, #8]
   34e5e:	42bb      	cmp	r3, r7
   34e60:	d111      	bne.n	34e86 <submit_to_queue_locked+0x5a>
   34e62:	f002 fea7 	bl	37bb4 <k_is_in_isr>
   34e66:	f080 0001 	eor.w	r0, r0, #1
   34e6a:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   34e6c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   34e70:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   34e72:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   34e76:	d523      	bpl.n	34ec0 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   34e78:	b13a      	cbz	r2, 34e8a <submit_to_queue_locked+0x5e>
   34e7a:	b940      	cbnz	r0, 34e8e <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   34e7c:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   34e80:	2300      	movs	r3, #0
   34e82:	6033      	str	r3, [r6, #0]
	return ret;
   34e84:	e013      	b.n	34eae <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   34e86:	2000      	movs	r0, #0
   34e88:	e7f0      	b.n	34e6c <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   34e8a:	071b      	lsls	r3, r3, #28
   34e8c:	d4f6      	bmi.n	34e7c <submit_to_queue_locked+0x50>
	parent->next = child;
   34e8e:	2300      	movs	r3, #0
   34e90:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   34e92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   34e96:	b963      	cbnz	r3, 34eb2 <submit_to_queue_locked+0x86>
	list->head = node;
   34e98:	e9c7 442e 	strd	r4, r4, [r7, #184]	; 0xb8
		(void)notify_queue_locked(queue);
   34e9c:	4638      	mov	r0, r7
   34e9e:	f003 f9bd 	bl	3821c <notify_queue_locked>
	*flagp |= BIT(bit);
   34ea2:	68e3      	ldr	r3, [r4, #12]
   34ea4:	f043 0304 	orr.w	r3, r3, #4
   34ea8:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   34eaa:	6833      	ldr	r3, [r6, #0]
   34eac:	60a3      	str	r3, [r4, #8]
}
   34eae:	4628      	mov	r0, r5
   34eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   34eb2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   34eb4:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
}
   34eb8:	e7f0      	b.n	34e9c <submit_to_queue_locked+0x70>
		return -EINVAL;
   34eba:	f06f 0515 	mvn.w	r5, #21
   34ebe:	e7df      	b.n	34e80 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   34ec0:	f06f 0512 	mvn.w	r5, #18
   34ec4:	e7dc      	b.n	34e80 <submit_to_queue_locked+0x54>
   34ec6:	bf00      	nop
   34ec8:	20008e30 	.word	0x20008e30

00034ecc <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   34ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
   34ece:	4604      	mov	r4, r0
	list->head = NULL;
   34ed0:	2000      	movs	r0, #0
   34ed2:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
   34ed4:	e9c4 002e 	strd	r0, r0, [r4, #184]	; 0xb8
   34ed8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	sys_dlist_init(&w->waitq);
   34eda:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->tail = (sys_dnode_t *)list;
   34ede:	e9c4 0030 	strd	r0, r0, [r4, #192]	; 0xc0
   34ee2:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
   34ee6:	e9c4 0032 	strd	r0, r0, [r4, #200]	; 0xc8

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   34eea:	b31d      	cbz	r5, 34f34 <k_work_queue_start+0x68>
   34eec:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   34eee:	2800      	cmp	r0, #0
   34ef0:	f240 1001 	movw	r0, #257	; 0x101
   34ef4:	bf08      	it	eq
   34ef6:	2001      	moveq	r0, #1
	*flagp = flags;
   34ef8:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   34efc:	2000      	movs	r0, #0
   34efe:	f04f 36ff 	mov.w	r6, #4294967295
   34f02:	f04f 37ff 	mov.w	r7, #4294967295
   34f06:	e9cd 3003 	strd	r3, r0, [sp, #12]
   34f0a:	e9cd 0001 	strd	r0, r0, [sp, #4]
   34f0e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   34f12:	4620      	mov	r0, r4
   34f14:	4b08      	ldr	r3, [pc, #32]	; (34f38 <k_work_queue_start+0x6c>)
   34f16:	9400      	str	r4, [sp, #0]
   34f18:	f7fe fe20 	bl	33b5c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   34f1c:	b125      	cbz	r5, 34f28 <k_work_queue_start+0x5c>
   34f1e:	6829      	ldr	r1, [r5, #0]
   34f20:	b111      	cbz	r1, 34f28 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   34f22:	4620      	mov	r0, r4
   34f24:	f7fe fd70 	bl	33a08 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   34f28:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   34f2a:	b009      	add	sp, #36	; 0x24
   34f2c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   34f30:	f002 be48 	b.w	37bc4 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   34f34:	2001      	movs	r0, #1
   34f36:	e7df      	b.n	34ef8 <k_work_queue_start+0x2c>
   34f38:	00034cf1 	.word	0x00034cf1

00034f3c <main>:
SHELL_CMD_ARG_REGISTER(benchmark, NULL, "Benchmark for key generation and signature proccess", cmd_benchmark, 1, 0);

void main(void)
{

   34f3c:	4770      	bx	lr

00034f3e <string_cmp>:
	return strcmp((const char *)p_a, (const char *)p_b);
   34f3e:	f002 bb25 	b.w	3758c <strcmp>

00034f42 <swapfunc>:
 * Qsort routine from Bentley & McIlroy's "Engineering a Sort Function".
 */

static inline void
swapfunc(char *a, char *b, size_t es)
{
   34f42:	b510      	push	{r4, lr}
   34f44:	4402      	add	r2, r0
	char t;

	do {
		t = *a;
		*a++ = *b;
   34f46:	780c      	ldrb	r4, [r1, #0]
		t = *a;
   34f48:	7803      	ldrb	r3, [r0, #0]
		*a++ = *b;
   34f4a:	f800 4b01 	strb.w	r4, [r0], #1
		*b++ = t;
	} while (--es > 0);
   34f4e:	4290      	cmp	r0, r2
		*b++ = t;
   34f50:	f801 3b01 	strb.w	r3, [r1], #1
	} while (--es > 0);
   34f54:	d1f7      	bne.n	34f46 <swapfunc+0x4>
}
   34f56:	bd10      	pop	{r4, pc}

00034f58 <med3.isra.0>:
#else
#define	CMP(t, x, y) (cmp((x), (y)))
#endif

static inline char *
med3(char *a, char *b, char *c, cmp_t *cmp, void *thunk)
   34f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34f5a:	460f      	mov	r7, r1
   34f5c:	4614      	mov	r4, r2
   34f5e:	4606      	mov	r6, r0
   34f60:	461d      	mov	r5, r3
{
	return CMP(thunk, a, b) < 0 ?
   34f62:	4798      	blx	r3
	       (CMP(thunk, b, c) < 0 ? b : (CMP(thunk, a, c) < 0 ? c : a))
	      : (CMP(thunk, b, c) > 0 ? b : (CMP(thunk, a, c) < 0 ? a : c));
   34f64:	2800      	cmp	r0, #0
	       (CMP(thunk, b, c) < 0 ? b : (CMP(thunk, a, c) < 0 ? c : a))
   34f66:	4621      	mov	r1, r4
   34f68:	4638      	mov	r0, r7
	      : (CMP(thunk, b, c) > 0 ? b : (CMP(thunk, a, c) < 0 ? a : c));
   34f6a:	da0c      	bge.n	34f86 <med3.isra.0+0x2e>
	       (CMP(thunk, b, c) < 0 ? b : (CMP(thunk, a, c) < 0 ? c : a))
   34f6c:	47a8      	blx	r5
   34f6e:	2800      	cmp	r0, #0
   34f70:	da02      	bge.n	34f78 <med3.isra.0+0x20>
   34f72:	463c      	mov	r4, r7
}
   34f74:	4620      	mov	r0, r4
   34f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	       (CMP(thunk, b, c) < 0 ? b : (CMP(thunk, a, c) < 0 ? c : a))
   34f78:	4621      	mov	r1, r4
   34f7a:	4630      	mov	r0, r6
   34f7c:	47a8      	blx	r5
   34f7e:	2800      	cmp	r0, #0
   34f80:	dbf8      	blt.n	34f74 <med3.isra.0+0x1c>
   34f82:	4634      	mov	r4, r6
   34f84:	e7f6      	b.n	34f74 <med3.isra.0+0x1c>
	      : (CMP(thunk, b, c) > 0 ? b : (CMP(thunk, a, c) < 0 ? a : c));
   34f86:	47a8      	blx	r5
   34f88:	2800      	cmp	r0, #0
   34f8a:	dcf2      	bgt.n	34f72 <med3.isra.0+0x1a>
   34f8c:	4621      	mov	r1, r4
   34f8e:	4630      	mov	r0, r6
   34f90:	47a8      	blx	r5
   34f92:	2800      	cmp	r0, #0
   34f94:	daee      	bge.n	34f74 <med3.isra.0+0x1c>
   34f96:	e7f4      	b.n	34f82 <med3.isra.0+0x2a>

00034f98 <qsort>:
void qsort_r(void *a, size_t n, size_t es, void *thunk, cmp_t *cmp)
#else
#define	thunk NULL
void qsort(void *a, size_t n, size_t es, cmp_t *cmp)
#endif
{
   34f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34f9c:	4606      	mov	r6, r0
   34f9e:	468b      	mov	fp, r1
   34fa0:	4614      	mov	r4, r2
   34fa2:	4698      	mov	r8, r3
   34fa4:	b085      	sub	sp, #20
	int cmp_result;
	int swap_cnt;

loop:
	swap_cnt = 0;
	if (n < 7) {
   34fa6:	1933      	adds	r3, r6, r4
   34fa8:	f1bb 0f06 	cmp.w	fp, #6
   34fac:	9300      	str	r3, [sp, #0]
   34fae:	d81a      	bhi.n	34fe6 <qsort+0x4e>
		for (pm = (char *)a + es; pm < (char *)a + n * es; pm += es) {
   34fb0:	461f      	mov	r7, r3
   34fb2:	fb04 6b0b 	mla	fp, r4, fp, r6
   34fb6:	45bb      	cmp	fp, r7
   34fb8:	d802      	bhi.n	34fc0 <qsort+0x28>
			/* qsort(a, d1 / es, es, cmp); */
			n = d1 / es;
			goto loop;
		}
	}
}
   34fba:	b005      	add	sp, #20
   34fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34fc0:	46b9      	mov	r9, r7
   34fc2:	e00c      	b.n	34fde <qsort+0x46>
			     pl > (char *)a && CMP(thunk, pl - es, pl) > 0;
   34fc4:	eba9 0a04 	sub.w	sl, r9, r4
   34fc8:	4649      	mov	r1, r9
   34fca:	4650      	mov	r0, sl
   34fcc:	47c0      	blx	r8
   34fce:	2800      	cmp	r0, #0
   34fd0:	dd07      	ble.n	34fe2 <qsort+0x4a>
				swapfunc(pl, pl - es, es);
   34fd2:	4648      	mov	r0, r9
   34fd4:	4622      	mov	r2, r4
   34fd6:	4651      	mov	r1, sl
   34fd8:	f7ff ffb3 	bl	34f42 <swapfunc>
			     pl -= es) {
   34fdc:	46d1      	mov	r9, sl
			for (pl = pm;
   34fde:	454e      	cmp	r6, r9
   34fe0:	d3f0      	bcc.n	34fc4 <qsort+0x2c>
		for (pm = (char *)a + es; pm < (char *)a + n * es; pm += es) {
   34fe2:	4427      	add	r7, r4
   34fe4:	e7e7      	b.n	34fb6 <qsort+0x1e>
	pm = (char *)a + (n / 2) * es;
   34fe6:	ea4f 095b 	mov.w	r9, fp, lsr #1
   34fea:	f10b 35ff 	add.w	r5, fp, #4294967295
	if (n > 7) {
   34fee:	f1bb 0f07 	cmp.w	fp, #7
	pm = (char *)a + (n / 2) * es;
   34ff2:	fb04 6909 	mla	r9, r4, r9, r6
	if (n > 7) {
   34ff6:	fb04 6505 	mla	r5, r4, r5, r6
   34ffa:	d027      	beq.n	3504c <qsort+0xb4>
		if (n > 40) {
   34ffc:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
   35000:	d945      	bls.n	3508e <qsort+0xf6>
			size_t d = (n / 8) * es;
   35002:	ea4f 0adb 	mov.w	sl, fp, lsr #3
   35006:	fb04 fa0a 	mul.w	sl, r4, sl
			pl = med3(pl, pl + d, pl + 2 * d, cmp, thunk);
   3500a:	4643      	mov	r3, r8
   3500c:	eb06 024a 	add.w	r2, r6, sl, lsl #1
   35010:	eb06 010a 	add.w	r1, r6, sl
   35014:	4630      	mov	r0, r6
   35016:	f7ff ff9f 	bl	34f58 <med3.isra.0>
			pm = med3(pm - d, pm, pm + d, cmp, thunk);
   3501a:	4649      	mov	r1, r9
   3501c:	eb09 020a 	add.w	r2, r9, sl
   35020:	4643      	mov	r3, r8
			pl = med3(pl, pl + d, pl + 2 * d, cmp, thunk);
   35022:	4607      	mov	r7, r0
			pm = med3(pm - d, pm, pm + d, cmp, thunk);
   35024:	eba9 000a 	sub.w	r0, r9, sl
   35028:	f7ff ff96 	bl	34f58 <med3.isra.0>
			pn = med3(pn - 2 * d, pn - d, pn, cmp, thunk);
   3502c:	462a      	mov	r2, r5
			pm = med3(pm - d, pm, pm + d, cmp, thunk);
   3502e:	4681      	mov	r9, r0
			pn = med3(pn - 2 * d, pn - d, pn, cmp, thunk);
   35030:	4643      	mov	r3, r8
   35032:	eba5 010a 	sub.w	r1, r5, sl
   35036:	eba5 004a 	sub.w	r0, r5, sl, lsl #1
   3503a:	f7ff ff8d 	bl	34f58 <med3.isra.0>
   3503e:	4602      	mov	r2, r0
		pm = med3(pl, pm, pn, cmp, thunk);
   35040:	4649      	mov	r1, r9
   35042:	4643      	mov	r3, r8
   35044:	4638      	mov	r0, r7
   35046:	f7ff ff87 	bl	34f58 <med3.isra.0>
   3504a:	4681      	mov	r9, r0
	swapfunc(a, pm, es);
   3504c:	4622      	mov	r2, r4
   3504e:	4649      	mov	r1, r9
	pa = pb = (char *)a + es;
   35050:	1937      	adds	r7, r6, r4
	swapfunc(a, pm, es);
   35052:	4630      	mov	r0, r6
   35054:	f7ff ff75 	bl	34f42 <swapfunc>
	pc = pd = (char *)a + (n - 1) * es;
   35058:	46b9      	mov	r9, r7
	swap_cnt = 0;
   3505a:	2200      	movs	r2, #0
	pa = pb = (char *)a + es;
   3505c:	e9cd 7500 	strd	r7, r5, [sp]
   35060:	4263      	negs	r3, r4
   35062:	9302      	str	r3, [sp, #8]
		while (pb <= pc && (cmp_result = CMP(thunk, pb, a)) <= 0) {
   35064:	45a9      	cmp	r9, r5
   35066:	d823      	bhi.n	350b0 <qsort+0x118>
   35068:	4631      	mov	r1, r6
   3506a:	4648      	mov	r0, r9
   3506c:	9203      	str	r2, [sp, #12]
   3506e:	47c0      	blx	r8
   35070:	2800      	cmp	r0, #0
   35072:	9a03      	ldr	r2, [sp, #12]
   35074:	dc24      	bgt.n	350c0 <qsort+0x128>
			if (cmp_result == 0) {
   35076:	d108      	bne.n	3508a <qsort+0xf2>
				swapfunc(pa, pb, es);
   35078:	4622      	mov	r2, r4
   3507a:	4649      	mov	r1, r9
   3507c:	9800      	ldr	r0, [sp, #0]
   3507e:	f7ff ff60 	bl	34f42 <swapfunc>
				pa += es;
   35082:	9b00      	ldr	r3, [sp, #0]
   35084:	4423      	add	r3, r4
   35086:	9300      	str	r3, [sp, #0]
				swap_cnt = 1;
   35088:	2201      	movs	r2, #1
			pb += es;
   3508a:	44a1      	add	r9, r4
   3508c:	e7ea      	b.n	35064 <qsort+0xcc>
		pn = (char *)a + (n - 1) * es;
   3508e:	462a      	mov	r2, r5
   35090:	4637      	mov	r7, r6
   35092:	e7d5      	b.n	35040 <qsort+0xa8>
			if (cmp_result == 0) {
   35094:	d109      	bne.n	350aa <qsort+0x112>
				swapfunc(pc, pd, es);
   35096:	4622      	mov	r2, r4
   35098:	4628      	mov	r0, r5
   3509a:	9901      	ldr	r1, [sp, #4]
   3509c:	f7ff ff51 	bl	34f42 <swapfunc>
				pd -= es;
   350a0:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   350a4:	4413      	add	r3, r2
				swap_cnt = 1;
   350a6:	2201      	movs	r2, #1
				pd -= es;
   350a8:	9301      	str	r3, [sp, #4]
		while (pb <= pc && (cmp_result = CMP(thunk, pc, a)) >= 0) {
   350aa:	45d1      	cmp	r9, sl
			pc -= es;
   350ac:	4655      	mov	r5, sl
		while (pb <= pc && (cmp_result = CMP(thunk, pc, a)) >= 0) {
   350ae:	d907      	bls.n	350c0 <qsort+0x128>
	if (swap_cnt == 0) {  /* Switch to insertion sort */
   350b0:	fb04 6a0b 	mla	sl, r4, fp, r6
   350b4:	bb32      	cbnz	r2, 35104 <qsort+0x16c>
		for (pm = (char *)a + es; pm < (char *)a + n * es; pm += es) {
   350b6:	45ba      	cmp	sl, r7
   350b8:	f67f af7f 	bls.w	34fba <qsort+0x22>
   350bc:	463d      	mov	r5, r7
   350be:	e01d      	b.n	350fc <qsort+0x164>
		while (pb <= pc && (cmp_result = CMP(thunk, pc, a)) >= 0) {
   350c0:	4631      	mov	r1, r6
   350c2:	4628      	mov	r0, r5
   350c4:	9203      	str	r2, [sp, #12]
   350c6:	47c0      	blx	r8
   350c8:	9b02      	ldr	r3, [sp, #8]
   350ca:	2800      	cmp	r0, #0
   350cc:	9a03      	ldr	r2, [sp, #12]
   350ce:	eb05 0a03 	add.w	sl, r5, r3
   350d2:	dadf      	bge.n	35094 <qsort+0xfc>
		swapfunc(pb, pc, es);
   350d4:	4629      	mov	r1, r5
   350d6:	4622      	mov	r2, r4
   350d8:	4648      	mov	r0, r9
   350da:	f7ff ff32 	bl	34f42 <swapfunc>
		pc -= es;
   350de:	4655      	mov	r5, sl
	for (;;) {
   350e0:	e7d2      	b.n	35088 <qsort+0xf0>
			     pl > (char *)a && CMP(thunk, pl - es, pl) > 0;
   350e2:	eba5 0904 	sub.w	r9, r5, r4
   350e6:	4629      	mov	r1, r5
   350e8:	4648      	mov	r0, r9
   350ea:	47c0      	blx	r8
   350ec:	2800      	cmp	r0, #0
   350ee:	dd07      	ble.n	35100 <qsort+0x168>
				swapfunc(pl, pl - es, es);
   350f0:	4628      	mov	r0, r5
   350f2:	4622      	mov	r2, r4
   350f4:	4649      	mov	r1, r9
   350f6:	f7ff ff24 	bl	34f42 <swapfunc>
			     pl -= es) {
   350fa:	464d      	mov	r5, r9
			for (pl = pm;
   350fc:	42ae      	cmp	r6, r5
   350fe:	d3f0      	bcc.n	350e2 <qsort+0x14a>
		for (pm = (char *)a + es; pm < (char *)a + n * es; pm += es) {
   35100:	4427      	add	r7, r4
   35102:	e7d8      	b.n	350b6 <qsort+0x11e>
	d1 = MIN(pa - (char *)a, pb - pa);
   35104:	9b00      	ldr	r3, [sp, #0]
   35106:	eba9 0b03 	sub.w	fp, r9, r3
   3510a:	1b9a      	subs	r2, r3, r6
   3510c:	455a      	cmp	r2, fp
   3510e:	bfa8      	it	ge
   35110:	465a      	movge	r2, fp
	vecswap(a, pb - d1, d1);
   35112:	b122      	cbz	r2, 3511e <qsort+0x186>
   35114:	4630      	mov	r0, r6
   35116:	eba9 0102 	sub.w	r1, r9, r2
   3511a:	f7ff ff12 	bl	34f42 <swapfunc>
	d1 = MIN(pd - pc, pn - pd - es);
   3511e:	9b01      	ldr	r3, [sp, #4]
   35120:	ebaa 0203 	sub.w	r2, sl, r3
   35124:	1b5d      	subs	r5, r3, r5
   35126:	1b12      	subs	r2, r2, r4
   35128:	42aa      	cmp	r2, r5
   3512a:	bf28      	it	cs
   3512c:	462a      	movcs	r2, r5
	vecswap(pb, pn - d1, d1);
   3512e:	b122      	cbz	r2, 3513a <qsort+0x1a2>
   35130:	4648      	mov	r0, r9
   35132:	ebaa 0102 	sub.w	r1, sl, r2
   35136:	f7ff ff04 	bl	34f42 <swapfunc>
	if (d1 <= d2) {
   3513a:	455d      	cmp	r5, fp
   3513c:	d310      	bcc.n	35160 <qsort+0x1c8>
		if (d1 > es) {
   3513e:	455c      	cmp	r4, fp
   35140:	d206      	bcs.n	35150 <qsort+0x1b8>
			qsort(a, d1 / es, es, cmp);
   35142:	4643      	mov	r3, r8
   35144:	4622      	mov	r2, r4
   35146:	fbbb f1f4 	udiv	r1, fp, r4
   3514a:	4630      	mov	r0, r6
   3514c:	f7ff ff24 	bl	34f98 <qsort>
		if (d2 > es) {
   35150:	42a5      	cmp	r5, r4
   35152:	f67f af32 	bls.w	34fba <qsort+0x22>
			n = d2 / es;
   35156:	fbb5 fbf4 	udiv	fp, r5, r4
			a = pn - d2;
   3515a:	ebaa 0605 	sub.w	r6, sl, r5
			goto loop;
   3515e:	e722      	b.n	34fa6 <qsort+0xe>
		if (d2 > es) {
   35160:	42a5      	cmp	r5, r4
   35162:	d907      	bls.n	35174 <qsort+0x1dc>
			qsort(pn - d2, d2 / es, es, cmp);
   35164:	4643      	mov	r3, r8
   35166:	4622      	mov	r2, r4
   35168:	fbb5 f1f4 	udiv	r1, r5, r4
   3516c:	ebaa 0005 	sub.w	r0, sl, r5
   35170:	f7ff ff12 	bl	34f98 <qsort>
		if (d1 > es) {
   35174:	455c      	cmp	r4, fp
   35176:	f4bf af20 	bcs.w	34fba <qsort+0x22>
			n = d1 / es;
   3517a:	fbbb fbf4 	udiv	fp, fp, r4
			goto loop;
   3517e:	e712      	b.n	34fa6 <qsort+0xe>

00035180 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   35180:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   35184:	b2db      	uxtb	r3, r3
   35186:	2b09      	cmp	r3, #9
   35188:	d802      	bhi.n	35190 <char2hex+0x10>
		*x = c - '0';
   3518a:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   3518c:	2000      	movs	r0, #0
   3518e:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   35190:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   35194:	2b05      	cmp	r3, #5
   35196:	d802      	bhi.n	3519e <char2hex+0x1e>
		*x = c - 'a' + 10;
   35198:	3857      	subs	r0, #87	; 0x57
   3519a:	7008      	strb	r0, [r1, #0]
   3519c:	e7f6      	b.n	3518c <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   3519e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   351a2:	2b05      	cmp	r3, #5
   351a4:	d801      	bhi.n	351aa <char2hex+0x2a>
		*x = c - 'A' + 10;
   351a6:	3837      	subs	r0, #55	; 0x37
   351a8:	e7f7      	b.n	3519a <char2hex+0x1a>
		return -EINVAL;
   351aa:	f06f 0015 	mvn.w	r0, #21
}
   351ae:	4770      	bx	lr

000351b0 <hex2char>:

int hex2char(uint8_t x, char *c)
{
	if (x <= 9) {
   351b0:	2809      	cmp	r0, #9
   351b2:	d803      	bhi.n	351bc <hex2char+0xc>
		*c = x + '0';
   351b4:	3030      	adds	r0, #48	; 0x30
	} else  if (x <= 15) {
		*c = x - 10 + 'a';
   351b6:	7008      	strb	r0, [r1, #0]
	} else {
		return -EINVAL;
	}

	return 0;
   351b8:	2000      	movs	r0, #0
   351ba:	4770      	bx	lr
	} else  if (x <= 15) {
   351bc:	280f      	cmp	r0, #15
   351be:	d801      	bhi.n	351c4 <hex2char+0x14>
		*c = x - 10 + 'a';
   351c0:	3057      	adds	r0, #87	; 0x57
   351c2:	e7f8      	b.n	351b6 <hex2char+0x6>
		return -EINVAL;
   351c4:	f06f 0015 	mvn.w	r0, #21
}
   351c8:	4770      	bx	lr

000351ca <bin2hex>:

size_t bin2hex(const uint8_t *buf, size_t buflen, char *hex, size_t hexlen)
{
	if ((hexlen + 1) < buflen * 2) {
   351ca:	3301      	adds	r3, #1
   351cc:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
{
   351d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   351d4:	460c      	mov	r4, r1
	if ((hexlen + 1) < buflen * 2) {
   351d6:	ea4f 0641 	mov.w	r6, r1, lsl #1
   351da:	d203      	bcs.n	351e4 <bin2hex+0x1a>
		return 0;
   351dc:	2600      	movs	r6, #0
		}
	}

	hex[2 * buflen] = '\0';
	return 2 * buflen;
}
   351de:	4630      	mov	r0, r6
   351e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   351e4:	4603      	mov	r3, r0
   351e6:	1c55      	adds	r5, r2, #1
   351e8:	1847      	adds	r7, r0, r1
	for (size_t i = 0; i < buflen; i++) {
   351ea:	42bb      	cmp	r3, r7
   351ec:	d103      	bne.n	351f6 <bin2hex+0x2c>
	hex[2 * buflen] = '\0';
   351ee:	2300      	movs	r3, #0
   351f0:	f802 3014 	strb.w	r3, [r2, r4, lsl #1]
	return 2 * buflen;
   351f4:	e7f3      	b.n	351de <bin2hex+0x14>
		if (hex2char(buf[i] >> 4, &hex[2 * i]) < 0) {
   351f6:	7818      	ldrb	r0, [r3, #0]
   351f8:	1e69      	subs	r1, r5, #1
   351fa:	0900      	lsrs	r0, r0, #4
   351fc:	4698      	mov	r8, r3
   351fe:	f7ff ffd7 	bl	351b0 <hex2char>
   35202:	2800      	cmp	r0, #0
   35204:	dbea      	blt.n	351dc <bin2hex+0x12>
		if (hex2char(buf[i] & 0xf, &hex[2 * i + 1]) < 0) {
   35206:	f898 0000 	ldrb.w	r0, [r8]
   3520a:	4629      	mov	r1, r5
   3520c:	f000 000f 	and.w	r0, r0, #15
   35210:	3301      	adds	r3, #1
   35212:	f7ff ffcd 	bl	351b0 <hex2char>
   35216:	2800      	cmp	r0, #0
   35218:	f105 0502 	add.w	r5, r5, #2
   3521c:	dae5      	bge.n	351ea <bin2hex+0x20>
   3521e:	e7dd      	b.n	351dc <bin2hex+0x12>

00035220 <hex2bin>:

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   35220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   35222:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   35224:	f001 0001 	and.w	r0, r1, #1
   35228:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   3522c:	429d      	cmp	r5, r3
   3522e:	ea4f 0651 	mov.w	r6, r1, lsr #1
   35232:	d903      	bls.n	3523c <hex2bin+0x1c>
		return 0;
   35234:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   35236:	4628      	mov	r0, r5
   35238:	b003      	add	sp, #12
   3523a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   3523c:	b158      	cbz	r0, 35256 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   3523e:	7820      	ldrb	r0, [r4, #0]
   35240:	f10d 0107 	add.w	r1, sp, #7
   35244:	f7ff ff9c 	bl	35180 <char2hex>
   35248:	2800      	cmp	r0, #0
   3524a:	dbf3      	blt.n	35234 <hex2bin+0x14>
		buf[0] = dec;
   3524c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   35250:	3401      	adds	r4, #1
		buf[0] = dec;
   35252:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   35256:	3401      	adds	r4, #1
   35258:	4416      	add	r6, r2
   3525a:	42b2      	cmp	r2, r6
   3525c:	d0eb      	beq.n	35236 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   3525e:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   35262:	f10d 0107 	add.w	r1, sp, #7
   35266:	f7ff ff8b 	bl	35180 <char2hex>
   3526a:	2800      	cmp	r0, #0
   3526c:	dbe2      	blt.n	35234 <hex2bin+0x14>
		buf[i] = dec << 4;
   3526e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   35272:	f10d 0107 	add.w	r1, sp, #7
		buf[i] = dec << 4;
   35276:	011b      	lsls	r3, r3, #4
   35278:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   3527a:	f814 0b02 	ldrb.w	r0, [r4], #2
   3527e:	f7ff ff7f 	bl	35180 <char2hex>
   35282:	2800      	cmp	r0, #0
   35284:	dbd6      	blt.n	35234 <hex2bin+0x14>
		buf[i] += dec;
   35286:	7813      	ldrb	r3, [r2, #0]
   35288:	f89d 1007 	ldrb.w	r1, [sp, #7]
   3528c:	440b      	add	r3, r1
   3528e:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   35292:	e7e2      	b.n	3525a <hex2bin+0x3a>

00035294 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   35294:	4603      	mov	r3, r0
   35296:	b140      	cbz	r0, 352aa <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   35298:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   3529a:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   3529e:	2a02      	cmp	r2, #2
   352a0:	d006      	beq.n	352b0 <sys_notify_validate+0x1c>
   352a2:	2a03      	cmp	r2, #3
   352a4:	d004      	beq.n	352b0 <sys_notify_validate+0x1c>
   352a6:	2a01      	cmp	r2, #1
   352a8:	d005      	beq.n	352b6 <sys_notify_validate+0x22>
		return -EINVAL;
   352aa:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   352ae:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   352b0:	681a      	ldr	r2, [r3, #0]
   352b2:	2a00      	cmp	r2, #0
   352b4:	d0f9      	beq.n	352aa <sys_notify_validate+0x16>
		notify->result = 0;
   352b6:	2000      	movs	r0, #0
   352b8:	6098      	str	r0, [r3, #8]
   352ba:	4770      	bx	lr

000352bc <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   352bc:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   352be:	b510      	push	{r4, lr}
	return method & SYS_NOTIFY_METHOD_MASK;
   352c0:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   352c4:	2a02      	cmp	r2, #2
{
   352c6:	4603      	mov	r3, r0
	notify->result = res;
   352c8:	6081      	str	r1, [r0, #8]
	switch (method) {
   352ca:	d00a      	beq.n	352e2 <sys_notify_finalize+0x26>
   352cc:	2a03      	cmp	r2, #3
   352ce:	d10b      	bne.n	352e8 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   352d0:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   352d2:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   352d4:	2200      	movs	r2, #0
   352d6:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   352d8:	b108      	cbz	r0, 352de <sys_notify_finalize+0x22>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   352da:	f7ff fcb5 	bl	34c48 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   352de:	4620      	mov	r0, r4
   352e0:	bd10      	pop	{r4, pc}
	sys_notify_generic_callback rv = NULL;
   352e2:	2400      	movs	r4, #0
		sig = notify->method.signal;
   352e4:	6800      	ldr	r0, [r0, #0]
		break;
   352e6:	e7f5      	b.n	352d4 <sys_notify_finalize+0x18>
	switch (method) {
   352e8:	2400      	movs	r4, #0
   352ea:	4620      	mov	r0, r4
   352ec:	e7f2      	b.n	352d4 <sys_notify_finalize+0x18>

000352ee <arch_printk_char_out>:
}
   352ee:	2000      	movs	r0, #0
   352f0:	4770      	bx	lr

000352f2 <str_out>:
{
   352f2:	b530      	push	{r4, r5, lr}
   352f4:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   352f6:	680c      	ldr	r4, [r1, #0]
   352f8:	1c55      	adds	r5, r2, #1
   352fa:	b114      	cbz	r4, 35302 <str_out+0x10>
   352fc:	684b      	ldr	r3, [r1, #4]
   352fe:	4293      	cmp	r3, r2
   35300:	dc01      	bgt.n	35306 <str_out+0x14>
		ctx->count++;
   35302:	608d      	str	r5, [r1, #8]
}
   35304:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   35306:	3b01      	subs	r3, #1
   35308:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   3530a:	bf08      	it	eq
   3530c:	2200      	moveq	r2, #0
   3530e:	608d      	str	r5, [r1, #8]
   35310:	bf0c      	ite	eq
   35312:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   35314:	54a0      	strbne	r0, [r4, r2]
   35316:	e7f5      	b.n	35304 <str_out+0x12>

00035318 <printk>:
{
   35318:	b40f      	push	{r0, r1, r2, r3}
   3531a:	b507      	push	{r0, r1, r2, lr}
   3531c:	a904      	add	r1, sp, #16
   3531e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   35322:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   35324:	f7f8 fbcc 	bl	2dac0 <vprintk>
}
   35328:	b003      	add	sp, #12
   3532a:	f85d eb04 	ldr.w	lr, [sp], #4
   3532e:	b004      	add	sp, #16
   35330:	4770      	bx	lr

00035332 <snprintk>:
{
   35332:	b40c      	push	{r2, r3}
   35334:	b507      	push	{r0, r1, r2, lr}
   35336:	ab04      	add	r3, sp, #16
   35338:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   3533c:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   3533e:	f7f8 fbcd 	bl	2dadc <vsnprintk>
}
   35342:	b003      	add	sp, #12
   35344:	f85d eb04 	ldr.w	lr, [sp], #4
   35348:	b002      	add	sp, #8
   3534a:	4770      	bx	lr

0003534c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   3534c:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   3534e:	f013 0307 	ands.w	r3, r3, #7
   35352:	d105      	bne.n	35360 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   35354:	6803      	ldr	r3, [r0, #0]
   35356:	2b00      	cmp	r3, #0
		evt = EVT_START;
   35358:	bf0c      	ite	eq
   3535a:	2000      	moveq	r0, #0
   3535c:	2003      	movne	r0, #3
   3535e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   35360:	2b02      	cmp	r3, #2
   35362:	d105      	bne.n	35370 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   35364:	8b43      	ldrh	r3, [r0, #26]
   35366:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   35368:	bf14      	ite	ne
   3536a:	2000      	movne	r0, #0
   3536c:	2004      	moveq	r0, #4
   3536e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   35370:	2b01      	cmp	r3, #1
   35372:	d105      	bne.n	35380 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   35374:	6803      	ldr	r3, [r0, #0]
   35376:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   35378:	bf0c      	ite	eq
   3537a:	2000      	moveq	r0, #0
   3537c:	2005      	movne	r0, #5
   3537e:	4770      	bx	lr
	int evt = EVT_NOP;
   35380:	2000      	movs	r0, #0
}
   35382:	4770      	bx	lr

00035384 <notify_one>:
{
   35384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35388:	460d      	mov	r5, r1
   3538a:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   3538c:	4619      	mov	r1, r3
   3538e:	1d28      	adds	r0, r5, #4
{
   35390:	4690      	mov	r8, r2
   35392:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   35394:	f7ff ff92 	bl	352bc <sys_notify_finalize>
	if (cb) {
   35398:	4604      	mov	r4, r0
   3539a:	b138      	cbz	r0, 353ac <notify_one+0x28>
		cb(mgr, cli, state, res);
   3539c:	4633      	mov	r3, r6
   3539e:	4642      	mov	r2, r8
   353a0:	4629      	mov	r1, r5
   353a2:	4638      	mov	r0, r7
   353a4:	46a4      	mov	ip, r4
}
   353a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   353aa:	4760      	bx	ip
}
   353ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000353b0 <transition_complete>:
{
   353b0:	b410      	push	{r4}
	__asm__ volatile(
   353b2:	f04f 0420 	mov.w	r4, #32
   353b6:	f3ef 8211 	mrs	r2, BASEPRI
   353ba:	f384 8811 	msr	BASEPRI, r4
   353be:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   353c2:	6141      	str	r1, [r0, #20]
}
   353c4:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   353c6:	2101      	movs	r1, #1
   353c8:	f7f8 bb9c 	b.w	2db04 <process_event>

000353cc <validate_args>:
{
   353cc:	b510      	push	{r4, lr}
   353ce:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   353d0:	b140      	cbz	r0, 353e4 <validate_args+0x18>
   353d2:	b139      	cbz	r1, 353e4 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   353d4:	1d08      	adds	r0, r1, #4
   353d6:	f7ff ff5d 	bl	35294 <sys_notify_validate>
	if ((rv == 0)
   353da:	b928      	cbnz	r0, 353e8 <validate_args+0x1c>
	    && ((cli->notify.flags
   353dc:	68a3      	ldr	r3, [r4, #8]
   353de:	f033 0303 	bics.w	r3, r3, #3
   353e2:	d001      	beq.n	353e8 <validate_args+0x1c>
		rv = -EINVAL;
   353e4:	f06f 0015 	mvn.w	r0, #21
}
   353e8:	bd10      	pop	{r4, pc}

000353ea <onoff_manager_init>:
{
   353ea:	b538      	push	{r3, r4, r5, lr}
   353ec:	460c      	mov	r4, r1
	if ((mgr == NULL)
   353ee:	4605      	mov	r5, r0
   353f0:	b158      	cbz	r0, 3540a <onoff_manager_init+0x20>
	    || (transitions == NULL)
   353f2:	b151      	cbz	r1, 3540a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   353f4:	680b      	ldr	r3, [r1, #0]
   353f6:	b143      	cbz	r3, 3540a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   353f8:	684b      	ldr	r3, [r1, #4]
   353fa:	b133      	cbz	r3, 3540a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   353fc:	221c      	movs	r2, #28
   353fe:	2100      	movs	r1, #0
   35400:	f002 f931 	bl	37666 <memset>
	return 0;
   35404:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   35406:	612c      	str	r4, [r5, #16]
}
   35408:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3540a:	f06f 0015 	mvn.w	r0, #21
   3540e:	e7fb      	b.n	35408 <onoff_manager_init+0x1e>

00035410 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   35410:	b570      	push	{r4, r5, r6, lr}
   35412:	4604      	mov	r4, r0
   35414:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   35416:	f7ff ffd9 	bl	353cc <validate_args>

	if (rv < 0) {
   3541a:	1e05      	subs	r5, r0, #0
   3541c:	db31      	blt.n	35482 <onoff_request+0x72>
   3541e:	f04f 0320 	mov.w	r3, #32
   35422:	f3ef 8111 	mrs	r1, BASEPRI
   35426:	f383 8811 	msr	BASEPRI, r3
   3542a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   3542e:	f64f 75ff 	movw	r5, #65535	; 0xffff
   35432:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   35434:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   35436:	42ab      	cmp	r3, r5
   35438:	f000 0207 	and.w	r2, r0, #7
   3543c:	d02e      	beq.n	3549c <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   3543e:	2a02      	cmp	r2, #2
   35440:	d10e      	bne.n	35460 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   35442:	3301      	adds	r3, #1
   35444:	8363      	strh	r3, [r4, #26]
	rv = state;
   35446:	4615      	mov	r5, r2
		notify = true;
   35448:	2301      	movs	r3, #1
	__asm__ volatile(
   3544a:	f381 8811 	msr	BASEPRI, r1
   3544e:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   35452:	b1b3      	cbz	r3, 35482 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   35454:	2300      	movs	r3, #0
   35456:	4631      	mov	r1, r6
   35458:	4620      	mov	r0, r4
   3545a:	f7ff ff93 	bl	35384 <notify_one>
   3545e:	e010      	b.n	35482 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   35460:	0783      	lsls	r3, r0, #30
   35462:	d001      	beq.n	35468 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   35464:	2a06      	cmp	r2, #6
   35466:	d10e      	bne.n	35486 <onoff_request+0x76>
	parent->next = child;
   35468:	2300      	movs	r3, #0
   3546a:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   3546c:	6863      	ldr	r3, [r4, #4]
   3546e:	b993      	cbnz	r3, 35496 <onoff_request+0x86>
	list->head = node;
   35470:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   35474:	4615      	mov	r5, r2
   35476:	b962      	cbnz	r2, 35492 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   35478:	460a      	mov	r2, r1
   3547a:	4620      	mov	r0, r4
   3547c:	2102      	movs	r1, #2
   3547e:	f7f8 fb41 	bl	2db04 <process_event>
		}
	}

	return rv;
}
   35482:	4628      	mov	r0, r5
   35484:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   35486:	2a05      	cmp	r2, #5
   35488:	bf0c      	ite	eq
   3548a:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   3548e:	f06f 0504 	mvnne.w	r5, #4
   35492:	2300      	movs	r3, #0
   35494:	e7d9      	b.n	3544a <onoff_request+0x3a>
	parent->next = child;
   35496:	601e      	str	r6, [r3, #0]
	list->tail = node;
   35498:	6066      	str	r6, [r4, #4]
}
   3549a:	e7eb      	b.n	35474 <onoff_request+0x64>
		rv = -EAGAIN;
   3549c:	f06f 050a 	mvn.w	r5, #10
   354a0:	e7f7      	b.n	35492 <onoff_request+0x82>

000354a2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   354a2:	4604      	mov	r4, r0
   354a4:	b508      	push	{r3, lr}
   354a6:	4608      	mov	r0, r1
   354a8:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   354aa:	461a      	mov	r2, r3
   354ac:	47a0      	blx	r4
	return z_impl_k_current_get();
   354ae:	f7ff f8cd 	bl	3464c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   354b2:	f7fc ff3f 	bl	32334 <z_impl_k_thread_abort>

000354b6 <timeutil_timegm>:

time_t timeutil_timegm(const struct tm *tm)
{
   354b6:	b538      	push	{r3, r4, r5, lr}
	int64_t time = timeutil_timegm64(tm);
   354b8:	f7f8 fc0a 	bl	2dcd0 <timeutil_timegm64>
   354bc:	4605      	mov	r5, r0
   354be:	460c      	mov	r4, r1
   354c0:	f7fe f8e2 	bl	33688 <z_impl_z_errno>
	time_t rv = (time_t)time;

	errno = 0;
   354c4:	2300      	movs	r3, #0
		errno = ERANGE;
		rv = -1;
	}

	return rv;
}
   354c6:	4621      	mov	r1, r4
	errno = 0;
   354c8:	6003      	str	r3, [r0, #0]
}
   354ca:	4628      	mov	r0, r5
   354cc:	bd38      	pop	{r3, r4, r5, pc}

000354ce <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   354ce:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   354d0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   354d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   354d8:	bf2c      	ite	cs
   354da:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   354de:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   354e2:	4770      	bx	lr

000354e4 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   354e4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   354e8:	6880      	ldr	r0, [r0, #8]
   354ea:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   354ee:	bf2c      	ite	cs
   354f0:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   354f4:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   354f8:	4770      	bx	lr

000354fa <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   354fa:	2201      	movs	r2, #1
{
   354fc:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   354fe:	f7ff ffe6 	bl	354ce <chunk_field>
}
   35502:	0840      	lsrs	r0, r0, #1
   35504:	bd08      	pop	{r3, pc}

00035506 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   35506:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   35508:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   3550c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   35510:	d308      	bcc.n	35524 <set_chunk_used+0x1e>
		if (used) {
   35512:	684b      	ldr	r3, [r1, #4]
   35514:	b11a      	cbz	r2, 3551e <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   35516:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   3551a:	604b      	str	r3, [r1, #4]
   3551c:	4770      	bx	lr
   3551e:	f023 0301 	bic.w	r3, r3, #1
   35522:	e7fa      	b.n	3551a <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   35524:	884b      	ldrh	r3, [r1, #2]
   35526:	b11a      	cbz	r2, 35530 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   35528:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   3552c:	804b      	strh	r3, [r1, #2]
		}
	}
}
   3552e:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   35530:	f023 0301 	bic.w	r3, r3, #1
   35534:	e7fa      	b.n	3552c <set_chunk_used+0x26>

00035536 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   35536:	0053      	lsls	r3, r2, #1
   35538:	2201      	movs	r2, #1
   3553a:	f7ff bfd3 	b.w	354e4 <chunk_set>

0003553e <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   3553e:	6880      	ldr	r0, [r0, #8]
	return chunksz * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   35540:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   35542:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   35546:	bf2c      	ite	cs
   35548:	2002      	movcs	r0, #2
   3554a:	2001      	movcc	r0, #1
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   3554c:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   3554e:	fab0 f080 	clz	r0, r0
}
   35552:	f1c0 001f 	rsb	r0, r0, #31
   35556:	4770      	bx	lr

00035558 <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   35558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3555c:	4604      	mov	r4, r0
   3555e:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   35560:	f7ff ffcb 	bl	354fa <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   35564:	68a3      	ldr	r3, [r4, #8]
   35566:	4601      	mov	r1, r0
   35568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   3556c:	d301      	bcc.n	35572 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   3556e:	2801      	cmp	r0, #1
   35570:	d035      	beq.n	355de <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   35572:	4620      	mov	r0, r4
   35574:	f7ff ffe3 	bl	3553e <bucket_idx>
	if (b->next == 0U) {
   35578:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   3557c:	6916      	ldr	r6, [r2, #16]
   3557e:	b99e      	cbnz	r6, 355a8 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   35580:	2301      	movs	r3, #1
   35582:	fa03 f000 	lsl.w	r0, r3, r0
   35586:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   35588:	4629      	mov	r1, r5
   3558a:	4303      	orrs	r3, r0
   3558c:	60e3      	str	r3, [r4, #12]
   3558e:	4620      	mov	r0, r4
		b->next = c;
   35590:	6115      	str	r5, [r2, #16]
   35592:	462b      	mov	r3, r5
   35594:	2202      	movs	r2, #2
   35596:	f7ff ffa5 	bl	354e4 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   3559a:	2203      	movs	r2, #3
   3559c:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   3559e:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
   355a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   355a4:	f7ff bf9e 	b.w	354e4 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   355a8:	2202      	movs	r2, #2
   355aa:	4631      	mov	r1, r6
   355ac:	4620      	mov	r0, r4
   355ae:	f7ff ff8e 	bl	354ce <chunk_field>
   355b2:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   355b4:	4603      	mov	r3, r0
   355b6:	2202      	movs	r2, #2
   355b8:	4629      	mov	r1, r5
   355ba:	4620      	mov	r0, r4
   355bc:	f7ff ff92 	bl	354e4 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   355c0:	4633      	mov	r3, r6
   355c2:	2203      	movs	r2, #3
   355c4:	4629      	mov	r1, r5
   355c6:	4620      	mov	r0, r4
   355c8:	f7ff ff8c 	bl	354e4 <chunk_set>
   355cc:	2203      	movs	r2, #3
   355ce:	4639      	mov	r1, r7
   355d0:	462b      	mov	r3, r5
   355d2:	4620      	mov	r0, r4
   355d4:	f7ff ff86 	bl	354e4 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   355d8:	2202      	movs	r2, #2
   355da:	4631      	mov	r1, r6
   355dc:	e7df      	b.n	3559e <free_list_add+0x46>
   355de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000355e2 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   355e2:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   355e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   355e8:	bf2c      	ite	cs
   355ea:	2508      	movcs	r5, #8
   355ec:	2504      	movcc	r5, #4
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   355ee:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
   355f0:	1b55      	subs	r5, r2, r5
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   355f2:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   355f4:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   355f6:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   355fa:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   355fe:	1b2d      	subs	r5, r5, r4
   35600:	08ed      	lsrs	r5, r5, #3
	heap->heap = h;
   35602:	6004      	str	r4, [r0, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   35604:	4629      	mov	r1, r5
   35606:	4620      	mov	r0, r4
	h->end_chunk = heap_sz;
   35608:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   3560a:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   3560c:	f7ff ff97 	bl	3553e <bucket_idx>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   35610:	0086      	lsls	r6, r0, #2
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   35612:	1c41      	adds	r1, r0, #1
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   35614:	4618      	mov	r0, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   35616:	361b      	adds	r6, #27
   35618:	08f6      	lsrs	r6, r6, #3
	for (int i = 0; i < nb_buckets; i++) {
   3561a:	f104 0210 	add.w	r2, r4, #16
   3561e:	428b      	cmp	r3, r1
   35620:	db2f      	blt.n	35682 <sys_heap_init+0xa0>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   35622:	4632      	mov	r2, r6
   35624:	4620      	mov	r0, r4
   35626:	2100      	movs	r1, #0
   35628:	f7ff ff85 	bl	35536 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   3562c:	2300      	movs	r3, #0
   3562e:	4620      	mov	r0, r4
   35630:	461a      	mov	r2, r3
   35632:	4619      	mov	r1, r3
   35634:	f7ff ff56 	bl	354e4 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   35638:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   3563a:	4620      	mov	r0, r4
   3563c:	2201      	movs	r2, #1
   3563e:	2100      	movs	r1, #0
   35640:	f7ff ff61 	bl	35506 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   35644:	463a      	mov	r2, r7
   35646:	4631      	mov	r1, r6
   35648:	f7ff ff75 	bl	35536 <set_chunk_size>
   3564c:	4633      	mov	r3, r6
   3564e:	4631      	mov	r1, r6
   35650:	4620      	mov	r0, r4
   35652:	2200      	movs	r2, #0
   35654:	f7ff ff46 	bl	354e4 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   35658:	4629      	mov	r1, r5
   3565a:	4620      	mov	r0, r4
   3565c:	2200      	movs	r2, #0
   3565e:	f7ff ff6a 	bl	35536 <set_chunk_size>
   35662:	463b      	mov	r3, r7
   35664:	4629      	mov	r1, r5
   35666:	4620      	mov	r0, r4
   35668:	2200      	movs	r2, #0
   3566a:	f7ff ff3b 	bl	354e4 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
   3566e:	4629      	mov	r1, r5
   35670:	4620      	mov	r0, r4
   35672:	2201      	movs	r2, #1
   35674:	f7ff ff47 	bl	35506 <set_chunk_used>

	free_list_add(h, chunk0_size);
   35678:	4631      	mov	r1, r6
}
   3567a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   3567e:	f7ff bf6b 	b.w	35558 <free_list_add>
		h->buckets[i].next = 0;
   35682:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   35686:	3301      	adds	r3, #1
   35688:	e7c9      	b.n	3561e <sys_heap_init+0x3c>

0003568a <encode_uint>:
{
   3568a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3568e:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   35690:	78d3      	ldrb	r3, [r2, #3]
{
   35692:	4614      	mov	r4, r2
	switch (specifier) {
   35694:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   35696:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   3569a:	4606      	mov	r6, r0
   3569c:	460f      	mov	r7, r1
   3569e:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   356a0:	d02d      	beq.n	356fe <encode_uint+0x74>
   356a2:	d828      	bhi.n	356f6 <encode_uint+0x6c>
		return 16;
   356a4:	2b58      	cmp	r3, #88	; 0x58
   356a6:	bf14      	ite	ne
   356a8:	250a      	movne	r5, #10
   356aa:	2510      	moveq	r5, #16
		unsigned int lsv = (unsigned int)(value % radix);
   356ac:	46aa      	mov	sl, r5
   356ae:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
   356b2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   356b6:	4652      	mov	r2, sl
   356b8:	465b      	mov	r3, fp
   356ba:	4630      	mov	r0, r6
   356bc:	4639      	mov	r1, r7
   356be:	f7ea fe0f 	bl	202e0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   356c2:	2a09      	cmp	r2, #9
   356c4:	b2d3      	uxtb	r3, r2
   356c6:	d81f      	bhi.n	35708 <encode_uint+0x7e>
   356c8:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   356ca:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   356cc:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   356ce:	bf08      	it	eq
   356d0:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   356d2:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   356d6:	d301      	bcc.n	356dc <encode_uint+0x52>
   356d8:	45c8      	cmp	r8, r9
   356da:	d812      	bhi.n	35702 <encode_uint+0x78>
	if (conv->flag_hash) {
   356dc:	7823      	ldrb	r3, [r4, #0]
   356de:	069b      	lsls	r3, r3, #26
   356e0:	d505      	bpl.n	356ee <encode_uint+0x64>
		if (radix == 8) {
   356e2:	2d08      	cmp	r5, #8
   356e4:	d116      	bne.n	35714 <encode_uint+0x8a>
			conv->altform_0 = true;
   356e6:	78a3      	ldrb	r3, [r4, #2]
   356e8:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   356ec:	70a3      	strb	r3, [r4, #2]
}
   356ee:	4640      	mov	r0, r8
   356f0:	b003      	add	sp, #12
   356f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   356f6:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   356fa:	2b70      	cmp	r3, #112	; 0x70
   356fc:	e7d3      	b.n	356a6 <encode_uint+0x1c>
	switch (specifier) {
   356fe:	2508      	movs	r5, #8
   35700:	e7d4      	b.n	356ac <encode_uint+0x22>
		value /= radix;
   35702:	4606      	mov	r6, r0
   35704:	460f      	mov	r7, r1
   35706:	e7d6      	b.n	356b6 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   35708:	9a01      	ldr	r2, [sp, #4]
   3570a:	2a19      	cmp	r2, #25
   3570c:	bf94      	ite	ls
   3570e:	3337      	addls	r3, #55	; 0x37
   35710:	3357      	addhi	r3, #87	; 0x57
   35712:	e7da      	b.n	356ca <encode_uint+0x40>
		} else if (radix == 16) {
   35714:	2d10      	cmp	r5, #16
   35716:	d1ea      	bne.n	356ee <encode_uint+0x64>
			conv->altform_0c = true;
   35718:	78a3      	ldrb	r3, [r4, #2]
   3571a:	f043 0310 	orr.w	r3, r3, #16
   3571e:	e7e5      	b.n	356ec <encode_uint+0x62>

00035720 <outs>:
{
   35720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35724:	4607      	mov	r7, r0
   35726:	4688      	mov	r8, r1
   35728:	4615      	mov	r5, r2
   3572a:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   3572c:	4614      	mov	r4, r2
   3572e:	42b4      	cmp	r4, r6
   35730:	eba4 0005 	sub.w	r0, r4, r5
   35734:	d302      	bcc.n	3573c <outs+0x1c>
   35736:	b93e      	cbnz	r6, 35748 <outs+0x28>
   35738:	7823      	ldrb	r3, [r4, #0]
   3573a:	b12b      	cbz	r3, 35748 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   3573c:	4641      	mov	r1, r8
   3573e:	f814 0b01 	ldrb.w	r0, [r4], #1
   35742:	47b8      	blx	r7
		if (rc < 0) {
   35744:	2800      	cmp	r0, #0
   35746:	daf2      	bge.n	3572e <outs+0xe>
}
   35748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003574c <ring_buf_get_rewind_threshold>:
 * rewinding earlier.
 */
uint32_t __weak ring_buf_get_rewind_threshold(void)
{
	return RING_BUFFER_MAX_SIZE;
}
   3574c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   35750:	4770      	bx	lr

00035752 <ring_buf_put_claim>:
{
	return val >= max ? (val - max) : val;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   35752:	b5f0      	push	{r4, r5, r6, r7, lr}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   35754:	6985      	ldr	r5, [r0, #24]
{
   35756:	4604      	mov	r4, r0
	uint32_t space, trail_size, allocated, tmp_trail_mod;

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
   35758:	6886      	ldr	r6, [r0, #8]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   3575a:	6907      	ldr	r7, [r0, #16]
   3575c:	b185      	cbz	r5, 35780 <ring_buf_put_claim+0x2e>
   3575e:	4035      	ands	r5, r6
	space = (buf->head + buf->size) - buf->misc.byte_mode.tmp_tail;
   35760:	6823      	ldr	r3, [r4, #0]
   35762:	443b      	add	r3, r7
   35764:	1b98      	subs	r0, r3, r6
	trail_size = buf->size - tmp_trail_mod;

	/* Limit requested size to available size. */
	size = MIN(size, space);
   35766:	4290      	cmp	r0, r2
   35768:	bf28      	it	cs
   3576a:	4610      	movcs	r0, r2
	trail_size = buf->size - tmp_trail_mod;
   3576c:	1b7f      	subs	r7, r7, r5

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
   3576e:	42b8      	cmp	r0, r7
   35770:	bf28      	it	cs
   35772:	4638      	movcs	r0, r7
	*data = &buf->buf.buf8[tmp_trail_mod];
   35774:	6963      	ldr	r3, [r4, #20]

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
   35776:	4406      	add	r6, r0
	*data = &buf->buf.buf8[tmp_trail_mod];
   35778:	441d      	add	r5, r3
   3577a:	600d      	str	r5, [r1, #0]
	buf->misc.byte_mode.tmp_tail =
   3577c:	60a6      	str	r6, [r4, #8]

	return allocated;
}
   3577e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   35780:	fbb6 f5f7 	udiv	r5, r6, r7
   35784:	fb07 6515 	mls	r5, r7, r5, r6
   35788:	e7ea      	b.n	35760 <ring_buf_put_claim+0xe>

0003578a <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
	if ((buf->tail + size) > (buf->head + buf->size)) {
   3578a:	6843      	ldr	r3, [r0, #4]
   3578c:	6902      	ldr	r2, [r0, #16]
   3578e:	4419      	add	r1, r3
   35790:	6803      	ldr	r3, [r0, #0]
   35792:	4413      	add	r3, r2
   35794:	4299      	cmp	r1, r3
		return -EINVAL;
	}

	buf->tail += size;
	buf->misc.byte_mode.tmp_tail = buf->tail;
   35796:	bf9a      	itte	ls
   35798:	e9c0 1101 	strdls	r1, r1, [r0, #4]

	return 0;
   3579c:	2000      	movls	r0, #0
		return -EINVAL;
   3579e:	f06f 0015 	mvnhi.w	r0, #21
}
   357a2:	4770      	bx	lr

000357a4 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
   357a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   357a8:	4680      	mov	r8, r0
   357aa:	460e      	mov	r6, r1
   357ac:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   357ae:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
   357b0:	462a      	mov	r2, r5
   357b2:	a901      	add	r1, sp, #4
   357b4:	4640      	mov	r0, r8
   357b6:	f7ff ffcc 	bl	35752 <ring_buf_put_claim>
   357ba:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
   357bc:	4602      	mov	r2, r0
   357be:	4631      	mov	r1, r6
   357c0:	9801      	ldr	r0, [sp, #4]
   357c2:	f001 ff25 	bl	37610 <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
   357c6:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
   357c8:	4427      	add	r7, r4
		data += partial_size;
   357ca:	4426      	add	r6, r4
	} while (size && partial_size);
   357cc:	d001      	beq.n	357d2 <ring_buf_put+0x2e>
   357ce:	2c00      	cmp	r4, #0
   357d0:	d1ee      	bne.n	357b0 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
   357d2:	4639      	mov	r1, r7
   357d4:	4640      	mov	r0, r8
   357d6:	f7ff ffd8 	bl	3578a <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   357da:	4638      	mov	r0, r7
   357dc:	b002      	add	sp, #8
   357de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000357e2 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   357e2:	b5f0      	push	{r4, r5, r6, r7, lr}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   357e4:	6985      	ldr	r5, [r0, #24]
{
   357e6:	4604      	mov	r4, r0
	uint32_t space, granted_size, trail_size, tmp_head_mod;

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
   357e8:	68c6      	ldr	r6, [r0, #12]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   357ea:	6903      	ldr	r3, [r0, #16]
   357ec:	b185      	cbz	r5, 35810 <ring_buf_get_claim+0x2e>
   357ee:	4035      	ands	r5, r6
	space = buf->tail - buf->misc.byte_mode.tmp_head;
   357f0:	6867      	ldr	r7, [r4, #4]
   357f2:	1bb8      	subs	r0, r7, r6
	trail_size = buf->size - tmp_head_mod;

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
   357f4:	4290      	cmp	r0, r2
   357f6:	bf28      	it	cs
   357f8:	4610      	movcs	r0, r2
   357fa:	4607      	mov	r7, r0
	trail_size = buf->size - tmp_head_mod;
   357fc:	1b58      	subs	r0, r3, r5

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
   357fe:	42b8      	cmp	r0, r7
   35800:	bf28      	it	cs
   35802:	4638      	movcs	r0, r7

	*data = &buf->buf.buf8[tmp_head_mod];
   35804:	6963      	ldr	r3, [r4, #20]
	buf->misc.byte_mode.tmp_head += granted_size;
   35806:	4406      	add	r6, r0
	*data = &buf->buf.buf8[tmp_head_mod];
   35808:	441d      	add	r5, r3
   3580a:	600d      	str	r5, [r1, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
   3580c:	60e6      	str	r6, [r4, #12]

	return granted_size;
}
   3580e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   35810:	fbb6 f5f3 	udiv	r5, r6, r3
   35814:	fb03 6515 	mls	r5, r3, r5, r6
   35818:	e7ea      	b.n	357f0 <ring_buf_get_claim+0xe>

0003581a <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
	if ((buf->head + size) > buf->tail) {
   3581a:	6803      	ldr	r3, [r0, #0]
{
   3581c:	b510      	push	{r4, lr}
	if ((buf->head + size) > buf->tail) {
   3581e:	4419      	add	r1, r3
   35820:	6843      	ldr	r3, [r0, #4]
{
   35822:	4604      	mov	r4, r0
	if ((buf->head + size) > buf->tail) {
   35824:	4299      	cmp	r1, r3
   35826:	d824      	bhi.n	35872 <ring_buf_get_finish+0x58>
		return -EINVAL;
	}

	buf->head += size;
   35828:	6001      	str	r1, [r0, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
   3582a:	60c1      	str	r1, [r0, #12]
	uint32_t threshold = ring_buf_get_rewind_threshold();
   3582c:	f7ff ff8e 	bl	3574c <ring_buf_get_rewind_threshold>
	if (buf->head < threshold) {
   35830:	6823      	ldr	r3, [r4, #0]
   35832:	4298      	cmp	r0, r3
   35834:	d81b      	bhi.n	3586e <ring_buf_get_finish+0x54>
	rew = buf->size * (threshold / buf->size);
   35836:	6923      	ldr	r3, [r4, #16]
   35838:	fbb0 f0f3 	udiv	r0, r0, r3
   3583c:	4358      	muls	r0, r3
	__asm__ volatile(
   3583e:	f04f 0320 	mov.w	r3, #32
   35842:	f3ef 8211 	mrs	r2, BASEPRI
   35846:	f383 8811 	msr	BASEPRI, r3
   3584a:	f3bf 8f6f 	isb	sy
	buf->tail -= rew;
   3584e:	6863      	ldr	r3, [r4, #4]
   35850:	1a1b      	subs	r3, r3, r0
   35852:	6063      	str	r3, [r4, #4]
	buf->head -= rew;
   35854:	6823      	ldr	r3, [r4, #0]
   35856:	1a1b      	subs	r3, r3, r0
   35858:	6023      	str	r3, [r4, #0]
	buf->misc.byte_mode.tmp_head -= rew;
   3585a:	68e3      	ldr	r3, [r4, #12]
   3585c:	1a1b      	subs	r3, r3, r0
   3585e:	60e3      	str	r3, [r4, #12]
	buf->misc.byte_mode.tmp_tail -= rew;
   35860:	68a3      	ldr	r3, [r4, #8]
   35862:	1a18      	subs	r0, r3, r0
   35864:	60a0      	str	r0, [r4, #8]
	__asm__ volatile(
   35866:	f382 8811 	msr	BASEPRI, r2
   3586a:	f3bf 8f6f 	isb	sy

	byte_indexes_rewind(buf);

	return 0;
   3586e:	2000      	movs	r0, #0
   35870:	e001      	b.n	35876 <ring_buf_get_finish+0x5c>
		return -EINVAL;
   35872:	f06f 0015 	mvn.w	r0, #21
}
   35876:	bd10      	pop	{r4, pc}

00035878 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
   35878:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3587c:	4680      	mov	r8, r0
   3587e:	460d      	mov	r5, r1
   35880:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   35882:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
   35884:	4632      	mov	r2, r6
   35886:	4640      	mov	r0, r8
   35888:	a901      	add	r1, sp, #4
   3588a:	f7ff ffaa 	bl	357e2 <ring_buf_get_claim>
   3588e:	4604      	mov	r4, r0
		if (data) {
   35890:	b12d      	cbz	r5, 3589e <ring_buf_get+0x26>
			memcpy(data, src, partial_size);
   35892:	4602      	mov	r2, r0
   35894:	9901      	ldr	r1, [sp, #4]
   35896:	4628      	mov	r0, r5
   35898:	f001 feba 	bl	37610 <memcpy>
			data += partial_size;
   3589c:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
   3589e:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
   358a0:	4427      	add	r7, r4
	} while (size && partial_size);
   358a2:	d001      	beq.n	358a8 <ring_buf_get+0x30>
   358a4:	2c00      	cmp	r4, #0
   358a6:	d1ed      	bne.n	35884 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
   358a8:	4639      	mov	r1, r7
   358aa:	4640      	mov	r0, r8
   358ac:	f7ff ffb5 	bl	3581a <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   358b0:	4638      	mov	r0, r7
   358b2:	b002      	add	sp, #8
   358b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000358b8 <foldcase>:
#define EOS    '\0'

static inline int foldcase(int ch, int flags)
{

    if ((flags & FNM_CASEFOLD) != 0 && isupper(ch))
   358b8:	070b      	lsls	r3, r1, #28
   358ba:	d504      	bpl.n	358c6 <foldcase+0xe>
   358bc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   358c0:	2b19      	cmp	r3, #25
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
   358c2:	bf98      	it	ls
   358c4:	3020      	addls	r0, #32
        return tolower(ch);
    return ch;
}
   358c6:	4770      	bx	lr

000358c8 <fnmatchx>:
    return ok == negate ? NULL : pattern;
}


static int fnmatchx(const char *pattern, const char *string, int flags, size_t recursion)
{
   358c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   358cc:	b087      	sub	sp, #28
   358ce:	468a      	mov	sl, r1
   358d0:	4614      	mov	r4, r2
    const char *stringstart, *r;
    char c, test;

    if ((pattern == NULL) || (string == NULL))
   358d2:	4605      	mov	r5, r0
{
   358d4:	9302      	str	r3, [sp, #8]
    if ((pattern == NULL) || (string == NULL))
   358d6:	b918      	cbnz	r0, 358e0 <fnmatchx+0x18>
    {
        return FNM_NOMATCH;
   358d8:	2001      	movs	r0, #1
                return FNM_NOMATCH;
            break;
        }
    }
    /* NOTREACHED */
}
   358da:	b007      	add	sp, #28
   358dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pattern == NULL) || (string == NULL))
   358e0:	2900      	cmp	r1, #0
   358e2:	d0f9      	beq.n	358d8 <fnmatchx+0x10>
    if (recursion-- == 0)
   358e4:	9b02      	ldr	r3, [sp, #8]
   358e6:	2b00      	cmp	r3, #0
   358e8:	f000 811a 	beq.w	35b20 <fnmatchx+0x258>
   358ec:	460a      	mov	r2, r1
            if (*string == '.' && (flags & FNM_PERIOD) &&
   358ee:	f004 0304 	and.w	r3, r4, #4
   358f2:	9304      	str	r3, [sp, #16]
        switch (c = FOLDCASE(*pattern++, flags)) {
   358f4:	46a8      	mov	r8, r5
   358f6:	4621      	mov	r1, r4
   358f8:	f818 0b01 	ldrb.w	r0, [r8], #1
   358fc:	f7ff ffdc 	bl	358b8 <foldcase>
   35900:	4603      	mov	r3, r0
   35902:	b2c0      	uxtb	r0, r0
   35904:	283f      	cmp	r0, #63	; 0x3f
   35906:	4606      	mov	r6, r0
   35908:	7817      	ldrb	r7, [r2, #0]
   3590a:	d024      	beq.n	35956 <fnmatchx+0x8e>
   3590c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   35910:	d10a      	bne.n	35928 <fnmatchx+0x60>
   35912:	b1c0      	cbz	r0, 35946 <fnmatchx+0x7e>
   35914:	282a      	cmp	r0, #42	; 0x2a
   35916:	d035      	beq.n	35984 <fnmatchx+0xbc>
            if (c != FOLDCASE(*string++, flags))
   35918:	4621      	mov	r1, r4
   3591a:	4638      	mov	r0, r7
   3591c:	3201      	adds	r2, #1
   3591e:	f7ff ffcb 	bl	358b8 <foldcase>
   35922:	4286      	cmp	r6, r0
   35924:	d01e      	beq.n	35964 <fnmatchx+0x9c>
   35926:	e7d7      	b.n	358d8 <fnmatchx+0x10>
        switch (c = FOLDCASE(*pattern++, flags)) {
   35928:	285b      	cmp	r0, #91	; 0x5b
   3592a:	d07b      	beq.n	35a24 <fnmatchx+0x15c>
   3592c:	285c      	cmp	r0, #92	; 0x5c
   3592e:	d1f3      	bne.n	35918 <fnmatchx+0x50>
            if (!(flags & FNM_NOESCAPE)) {
   35930:	07e3      	lsls	r3, r4, #31
   35932:	d4f1      	bmi.n	35918 <fnmatchx+0x50>
                if ((c = FOLDCASE(*pattern++, flags)) == EOS) {
   35934:	7868      	ldrb	r0, [r5, #1]
   35936:	f7ff ffbf 	bl	358b8 <foldcase>
   3593a:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
   3593e:	bf18      	it	ne
   35940:	f105 0802 	addne.w	r8, r5, #2
   35944:	e7e8      	b.n	35918 <fnmatchx+0x50>
            if ((flags & FNM_LEADING_DIR) && *string == '/')
   35946:	06e4      	lsls	r4, r4, #27
   35948:	d501      	bpl.n	3594e <fnmatchx+0x86>
   3594a:	2f2f      	cmp	r7, #47	; 0x2f
   3594c:	d0c5      	beq.n	358da <fnmatchx+0x12>
            return *string == EOS ? 0 : FNM_NOMATCH;
   3594e:	1e38      	subs	r0, r7, #0
                        0 : FNM_NOMATCH;
   35950:	bf18      	it	ne
   35952:	2001      	movne	r0, #1
   35954:	e7c1      	b.n	358da <fnmatchx+0x12>
            if (*string == EOS)
   35956:	2f00      	cmp	r7, #0
   35958:	d0be      	beq.n	358d8 <fnmatchx+0x10>
            if (*string == '/' && (flags & FNM_PATHNAME))
   3595a:	2f2f      	cmp	r7, #47	; 0x2f
   3595c:	d104      	bne.n	35968 <fnmatchx+0xa0>
   3595e:	07a1      	lsls	r1, r4, #30
   35960:	d4ba      	bmi.n	358d8 <fnmatchx+0x10>
            ++string;
   35962:	3201      	adds	r2, #1
            break;
   35964:	4645      	mov	r5, r8
   35966:	e7c5      	b.n	358f4 <fnmatchx+0x2c>
            if (*string == '.' && (flags & FNM_PERIOD) &&
   35968:	2f2e      	cmp	r7, #46	; 0x2e
   3596a:	d1fa      	bne.n	35962 <fnmatchx+0x9a>
   3596c:	9b04      	ldr	r3, [sp, #16]
   3596e:	2b00      	cmp	r3, #0
   35970:	d0f7      	beq.n	35962 <fnmatchx+0x9a>
   35972:	4552      	cmp	r2, sl
   35974:	d0b0      	beq.n	358d8 <fnmatchx+0x10>
                (string == stringstart ||
   35976:	07a3      	lsls	r3, r4, #30
   35978:	d5f3      	bpl.n	35962 <fnmatchx+0x9a>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
   3597a:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   3597e:	2b2f      	cmp	r3, #47	; 0x2f
   35980:	d1ef      	bne.n	35962 <fnmatchx+0x9a>
   35982:	e7a9      	b.n	358d8 <fnmatchx+0x10>
            c = FOLDCASE(*pattern, flags);
   35984:	7868      	ldrb	r0, [r5, #1]
                c = FOLDCASE(*++pattern, flags);
   35986:	f7ff ff97 	bl	358b8 <foldcase>
   3598a:	b2c1      	uxtb	r1, r0
            while (c == '*')
   3598c:	292a      	cmp	r1, #42	; 0x2a
   3598e:	d018      	beq.n	359c2 <fnmatchx+0xfa>
            if (*string == '.' && (flags & FNM_PERIOD) &&
   35990:	2f2e      	cmp	r7, #46	; 0x2e
   35992:	d109      	bne.n	359a8 <fnmatchx+0xe0>
   35994:	9b04      	ldr	r3, [sp, #16]
   35996:	b13b      	cbz	r3, 359a8 <fnmatchx+0xe0>
   35998:	4552      	cmp	r2, sl
   3599a:	d09d      	beq.n	358d8 <fnmatchx+0x10>
                (string == stringstart ||
   3599c:	07a7      	lsls	r7, r4, #30
   3599e:	d503      	bpl.n	359a8 <fnmatchx+0xe0>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
   359a0:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   359a4:	2b2f      	cmp	r3, #47	; 0x2f
   359a6:	d097      	beq.n	358d8 <fnmatchx+0x10>
            if (c == EOS) {
   359a8:	b979      	cbnz	r1, 359ca <fnmatchx+0x102>
                if (flags & FNM_PATHNAME)
   359aa:	f014 0002 	ands.w	r0, r4, #2
   359ae:	d094      	beq.n	358da <fnmatchx+0x12>
                        0 : FNM_NOMATCH;
   359b0:	06e6      	lsls	r6, r4, #27
   359b2:	f100 80b7 	bmi.w	35b24 <fnmatchx+0x25c>
                        strchr(string, '/') == NULL ?
   359b6:	212f      	movs	r1, #47	; 0x2f
   359b8:	4610      	mov	r0, r2
   359ba:	f001 fdc9 	bl	37550 <strchr>
                        0 : FNM_NOMATCH;
   359be:	3800      	subs	r0, #0
   359c0:	e7c6      	b.n	35950 <fnmatchx+0x88>
                c = FOLDCASE(*++pattern, flags);
   359c2:	4621      	mov	r1, r4
   359c4:	f818 0f01 	ldrb.w	r0, [r8, #1]!
   359c8:	e7dd      	b.n	35986 <fnmatchx+0xbe>
            } else if (c == '/' && flags & FNM_PATHNAME) {
   359ca:	292f      	cmp	r1, #47	; 0x2f
   359cc:	d021      	beq.n	35a12 <fnmatchx+0x14a>
   359ce:	4616      	mov	r6, r2
    if (recursion-- == 0)
   359d0:	9b02      	ldr	r3, [sp, #8]
                switch ((e = fnmatchx(pattern, string,
   359d2:	f024 0904 	bic.w	r9, r4, #4
    if (recursion-- == 0)
   359d6:	1e5f      	subs	r7, r3, #1
                if (test == '/' && flags & FNM_PATHNAME)
   359d8:	f004 0a02 	and.w	sl, r4, #2
   359dc:	46b3      	mov	fp, r6
            while ((test = FOLDCASE(*string, flags)) != EOS) {
   359de:	4621      	mov	r1, r4
   359e0:	f89b 0000 	ldrb.w	r0, [fp]
   359e4:	f7ff ff68 	bl	358b8 <foldcase>
   359e8:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
   359ec:	f106 0601 	add.w	r6, r6, #1
   359f0:	f43f af72 	beq.w	358d8 <fnmatchx+0x10>
                switch ((e = fnmatchx(pattern, string,
   359f4:	463b      	mov	r3, r7
   359f6:	464a      	mov	r2, r9
   359f8:	4659      	mov	r1, fp
   359fa:	4640      	mov	r0, r8
   359fc:	f7ff ff64 	bl	358c8 <fnmatchx>
   35a00:	2801      	cmp	r0, #1
   35a02:	f47f af6a 	bne.w	358da <fnmatchx+0x12>
                if (test == '/' && flags & FNM_PATHNAME)
   35a06:	2d2f      	cmp	r5, #47	; 0x2f
   35a08:	d1e8      	bne.n	359dc <fnmatchx+0x114>
   35a0a:	f1ba 0f00 	cmp.w	sl, #0
   35a0e:	d0e5      	beq.n	359dc <fnmatchx+0x114>
   35a10:	e762      	b.n	358d8 <fnmatchx+0x10>
            } else if (c == '/' && flags & FNM_PATHNAME) {
   35a12:	07a5      	lsls	r5, r4, #30
   35a14:	d5db      	bpl.n	359ce <fnmatchx+0x106>
                if ((string = strchr(string, '/')) == NULL)
   35a16:	4610      	mov	r0, r2
   35a18:	f001 fd9a 	bl	37550 <strchr>
   35a1c:	4602      	mov	r2, r0
   35a1e:	2800      	cmp	r0, #0
   35a20:	d1a0      	bne.n	35964 <fnmatchx+0x9c>
   35a22:	e759      	b.n	358d8 <fnmatchx+0x10>
            if (*string == EOS)
   35a24:	2f00      	cmp	r7, #0
   35a26:	f43f af57 	beq.w	358d8 <fnmatchx+0x10>
            if (*string == '/' && flags & FNM_PATHNAME)
   35a2a:	2f2f      	cmp	r7, #47	; 0x2f
   35a2c:	d102      	bne.n	35a34 <fnmatchx+0x16c>
   35a2e:	07a0      	lsls	r0, r4, #30
   35a30:	f53f af52 	bmi.w	358d8 <fnmatchx+0x10>
            if ((r = rangematch(pattern,
   35a34:	4621      	mov	r1, r4
   35a36:	4638      	mov	r0, r7
   35a38:	f7ff ff3e 	bl	358b8 <foldcase>
   35a3c:	9000      	str	r0, [sp, #0]
    if (pattern == NULL)
   35a3e:	f1b8 0f00 	cmp.w	r8, #0
   35a42:	f43f af49 	beq.w	358d8 <fnmatchx+0x10>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   35a46:	786b      	ldrb	r3, [r5, #1]
   35a48:	2b21      	cmp	r3, #33	; 0x21
   35a4a:	d001      	beq.n	35a50 <fnmatchx+0x188>
   35a4c:	2b5e      	cmp	r3, #94	; 0x5e
   35a4e:	d126      	bne.n	35a9e <fnmatchx+0x1d6>
        ++pattern;
   35a50:	2301      	movs	r3, #1
   35a52:	3502      	adds	r5, #2
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   35a54:	9301      	str	r3, [sp, #4]
    need = 1;
   35a56:	2301      	movs	r3, #1
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
   35a58:	f04f 0b00 	mov.w	fp, #0
        if (c == '\\' && !(flags & FNM_NOESCAPE))
   35a5c:	ea04 0103 	and.w	r1, r4, r3
   35a60:	9103      	str	r1, [sp, #12]
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
   35a62:	462e      	mov	r6, r5
   35a64:	4621      	mov	r1, r4
   35a66:	f816 0b01 	ldrb.w	r0, [r6], #1
   35a6a:	9305      	str	r3, [sp, #20]
   35a6c:	f7ff ff24 	bl	358b8 <foldcase>
   35a70:	fa5f f980 	uxtb.w	r9, r0
   35a74:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   35a78:	9b05      	ldr	r3, [sp, #20]
   35a7a:	d113      	bne.n	35aa4 <fnmatchx+0x1dc>
   35a7c:	bb2b      	cbnz	r3, 35aca <fnmatchx+0x202>
    return ok == negate ? NULL : pattern;
   35a7e:	9b01      	ldr	r3, [sp, #4]
   35a80:	455b      	cmp	r3, fp
   35a82:	f43f af29 	beq.w	358d8 <fnmatchx+0x10>
            if ((r = rangematch(pattern,
   35a86:	2e00      	cmp	r6, #0
   35a88:	f43f af26 	beq.w	358d8 <fnmatchx+0x10>
            if (r == (void *)-1) {
   35a8c:	1c71      	adds	r1, r6, #1
   35a8e:	d103      	bne.n	35a98 <fnmatchx+0x1d0>
                if (*string != '[')
   35a90:	2f5b      	cmp	r7, #91	; 0x5b
   35a92:	f47f af21 	bne.w	358d8 <fnmatchx+0x10>
   35a96:	4646      	mov	r6, r8
            break;
   35a98:	46b0      	mov	r8, r6
            ++string;
   35a9a:	3201      	adds	r2, #1
            break;
   35a9c:	e762      	b.n	35964 <fnmatchx+0x9c>
   35a9e:	4645      	mov	r5, r8
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   35aa0:	2300      	movs	r3, #0
   35aa2:	e7d7      	b.n	35a54 <fnmatchx+0x18c>
        if (c == '/')
   35aa4:	f1b9 0f2f 	cmp.w	r9, #47	; 0x2f
   35aa8:	d0f2      	beq.n	35a90 <fnmatchx+0x1c8>
        if (c == '\\' && !(flags & FNM_NOESCAPE))
   35aaa:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
   35aae:	d108      	bne.n	35ac2 <fnmatchx+0x1fa>
   35ab0:	9b03      	ldr	r3, [sp, #12]
   35ab2:	b953      	cbnz	r3, 35aca <fnmatchx+0x202>
            c = FOLDCASE(*pattern++, flags);
   35ab4:	4621      	mov	r1, r4
   35ab6:	7868      	ldrb	r0, [r5, #1]
   35ab8:	f7ff fefe 	bl	358b8 <foldcase>
   35abc:	1cae      	adds	r6, r5, #2
   35abe:	fa5f f980 	uxtb.w	r9, r0
        if (c == EOS)
   35ac2:	f1b9 0f00 	cmp.w	r9, #0
   35ac6:	f43f af07 	beq.w	358d8 <fnmatchx+0x10>
        if (*pattern == '-' 
   35aca:	7833      	ldrb	r3, [r6, #0]
   35acc:	2b2d      	cmp	r3, #45	; 0x2d
   35ace:	d120      	bne.n	35b12 <fnmatchx+0x24a>
            && (c2 = FOLDCASE(*(pattern + 1), flags)) != EOS &&
   35ad0:	4621      	mov	r1, r4
   35ad2:	7870      	ldrb	r0, [r6, #1]
   35ad4:	f7ff fef0 	bl	358b8 <foldcase>
   35ad8:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
   35adc:	d019      	beq.n	35b12 <fnmatchx+0x24a>
   35ade:	285d      	cmp	r0, #93	; 0x5d
   35ae0:	d017      	beq.n	35b12 <fnmatchx+0x24a>
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
   35ae2:	285c      	cmp	r0, #92	; 0x5c
            pattern += 2;
   35ae4:	f106 0502 	add.w	r5, r6, #2
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
   35ae8:	d10a      	bne.n	35b00 <fnmatchx+0x238>
   35aea:	9b03      	ldr	r3, [sp, #12]
   35aec:	b943      	cbnz	r3, 35b00 <fnmatchx+0x238>
                c2 = FOLDCASE(*pattern++, flags);
   35aee:	78b0      	ldrb	r0, [r6, #2]
   35af0:	f7ff fee2 	bl	358b8 <foldcase>
            if (c2 == EOS)
   35af4:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
                c2 = FOLDCASE(*pattern++, flags);
   35af8:	f106 0503 	add.w	r5, r6, #3
            if (c2 == EOS)
   35afc:	f43f aeec 	beq.w	358d8 <fnmatchx+0x10>
            if (c <= test && test <= c2)
   35b00:	9b00      	ldr	r3, [sp, #0]
   35b02:	454b      	cmp	r3, r9
   35b04:	db03      	blt.n	35b0e <fnmatchx+0x246>
                ok = 1;
   35b06:	4283      	cmp	r3, r0
   35b08:	bfd8      	it	le
   35b0a:	f04f 0b01 	movle.w	fp, #1
            ok = 1;
   35b0e:	2300      	movs	r3, #0
   35b10:	e7a7      	b.n	35a62 <fnmatchx+0x19a>
        } else if (c == test)
   35b12:	9b00      	ldr	r3, [sp, #0]
   35b14:	4635      	mov	r5, r6
   35b16:	454b      	cmp	r3, r9
   35b18:	bf08      	it	eq
   35b1a:	f04f 0b01 	moveq.w	fp, #1
   35b1e:	e7f6      	b.n	35b0e <fnmatchx+0x246>
        return FNM_NORES;
   35b20:	2003      	movs	r0, #3
   35b22:	e6da      	b.n	358da <fnmatchx+0x12>
                return 0;
   35b24:	4608      	mov	r0, r1
   35b26:	e6d8      	b.n	358da <fnmatchx+0x12>

00035b28 <fnmatch>:

int fnmatch(const char *pattern, const char *string, int flags)
{
    return fnmatchx(pattern, string, flags, 64);
   35b28:	2340      	movs	r3, #64	; 0x40
   35b2a:	f7ff becd 	b.w	358c8 <fnmatchx>

00035b2e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   35b2e:	4770      	bx	lr

00035b30 <nordicsemi_nrf53_init>:
	__asm__ volatile(
   35b30:	f04f 0320 	mov.w	r3, #32
   35b34:	f3ef 8111 	mrs	r1, BASEPRI
   35b38:	f383 8811 	msr	BASEPRI, r3
   35b3c:	f3bf 8f6f 	isb	sy
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   35b40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   35b44:	2201      	movs	r2, #1
   35b46:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   35b4a:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   35b4e:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
	__asm__ volatile(
   35b52:	f381 8811 	msr	BASEPRI, r1
   35b56:	f3bf 8f6f 	isb	sy
}
   35b5a:	2000      	movs	r0, #0
   35b5c:	4770      	bx	lr

00035b5e <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   35b5e:	f001 bfd5 	b.w	37b0c <SystemInit>

00035b62 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void pm_power_state_set(struct pm_state_info info)
{
   35b62:	b084      	sub	sp, #16
   35b64:	ab04      	add	r3, sp, #16
   35b66:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   35b6a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   35b6e:	2b06      	cmp	r3, #6
   35b70:	d108      	bne.n	35b84 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   35b72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   35b76:	2201      	movs	r2, #1
   35b78:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   35b7c:	f3bf 8f4f 	dsb	sy
        __WFE();
   35b80:	bf20      	wfe
    while (true)
   35b82:	e7fd      	b.n	35b80 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   35b84:	b004      	add	sp, #16
   35b86:	4770      	bx	lr

00035b88 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   35b88:	b084      	sub	sp, #16
   35b8a:	ab04      	add	r3, sp, #16
   35b8c:	e903 0007 	stmdb	r3, {r0, r1, r2}
   35b90:	2300      	movs	r3, #0
   35b92:	f383 8811 	msr	BASEPRI, r3
   35b96:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   35b9a:	b004      	add	sp, #16
   35b9c:	4770      	bx	lr

00035b9e <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   35b9e:	2300      	movs	r3, #0
	list->head = NULL;
   35ba0:	e9c0 3300 	strd	r3, r3, [r0]
}
   35ba4:	4770      	bx	lr

00035ba6 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   35ba6:	6803      	ldr	r3, [r0, #0]
   35ba8:	b923      	cbnz	r3, 35bb4 <log_list_add_tail+0xe>
		list->head = msg;
   35baa:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   35bac:	2300      	movs	r3, #0
	list->tail = msg;
   35bae:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   35bb0:	600b      	str	r3, [r1, #0]
}
   35bb2:	4770      	bx	lr
		list->tail->next = msg;
   35bb4:	6843      	ldr	r3, [r0, #4]
   35bb6:	6019      	str	r1, [r3, #0]
   35bb8:	e7f8      	b.n	35bac <log_list_add_tail+0x6>

00035bba <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   35bba:	6800      	ldr	r0, [r0, #0]
   35bbc:	4770      	bx	lr

00035bbe <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   35bbe:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   35bc0:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   35bc2:	b108      	cbz	r0, 35bc8 <log_list_head_get+0xa>
		list->head = list->head->next;
   35bc4:	6802      	ldr	r2, [r0, #0]
   35bc6:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   35bc8:	4770      	bx	lr

00035bca <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   35bca:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   35bcc:	f7f9 f862 	bl	2ec94 <log_msg_chunk_alloc>

	if (msg != NULL) {
   35bd0:	b118      	cbz	r0, 35bda <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   35bd2:	2301      	movs	r3, #1
   35bd4:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   35bd6:	2300      	movs	r3, #0
   35bd8:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   35bda:	bd08      	pop	{r3, pc}

00035bdc <default_get_timestamp>:
   35bdc:	f7fb bee4 	b.w	319a8 <sys_clock_cycle_get_32>

00035be0 <dummy_timestamp>:
   35be0:	2000      	movs	r0, #0
   35be2:	4770      	bx	lr

00035be4 <z_log_get_s_mask>:
{
   35be4:	b5f0      	push	{r4, r5, r6, r7, lr}
   35be6:	4605      	mov	r5, r0
	uint32_t mask = 0U;
   35be8:	2000      	movs	r0, #0
				mask |= BIT(arg);
   35bea:	2701      	movs	r7, #1
	uint32_t arg = 0U;
   35bec:	4603      	mov	r3, r0
	bool arm = false;
   35bee:	4602      	mov	r2, r0
	while ((curr = *str++) && arg < nargs) {
   35bf0:	f815 4b01 	ldrb.w	r4, [r5], #1
   35bf4:	b10c      	cbz	r4, 35bfa <z_log_get_s_mask+0x16>
   35bf6:	428b      	cmp	r3, r1
   35bf8:	d300      	bcc.n	35bfc <z_log_get_s_mask+0x18>
}
   35bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   35bfc:	2c25      	cmp	r4, #37	; 0x25
   35bfe:	d102      	bne.n	35c06 <z_log_get_s_mask+0x22>
			arm = !arm;
   35c00:	f082 0201 	eor.w	r2, r2, #1
   35c04:	e7f4      	b.n	35bf0 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   35c06:	2a00      	cmp	r2, #0
   35c08:	d0f2      	beq.n	35bf0 <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   35c0a:	f044 0620 	orr.w	r6, r4, #32
   35c0e:	3e61      	subs	r6, #97	; 0x61
   35c10:	2e19      	cmp	r6, #25
   35c12:	d8ed      	bhi.n	35bf0 <z_log_get_s_mask+0xc>
			if (curr == 's') {
   35c14:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   35c16:	bf04      	itt	eq
   35c18:	fa07 f203 	lsleq.w	r2, r7, r3
   35c1c:	4310      	orreq	r0, r2
			arg++;
   35c1e:	3301      	adds	r3, #1
			arm = false;
   35c20:	2200      	movs	r2, #0
   35c22:	e7e5      	b.n	35bf0 <z_log_get_s_mask+0xc>

00035c24 <log_backend_disable>:
	backend->cb->active = false;
   35c24:	2100      	movs	r1, #0
   35c26:	6843      	ldr	r3, [r0, #4]
   35c28:	7159      	strb	r1, [r3, #5]
	backend_filter_set(backend, LOG_LEVEL_NONE);
   35c2a:	f7f8 bdd7 	b.w	2e7dc <backend_filter_set>

00035c2e <log_0>:
{
   35c2e:	b538      	push	{r3, r4, r5, lr}
   35c30:	4605      	mov	r5, r0
   35c32:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   35c34:	f7ff ffc9 	bl	35bca <z_log_msg_std_alloc>

	if (msg != NULL) {
   35c38:	b128      	cbz	r0, 35c46 <log_0+0x18>
		msg_finalize(msg, src_level);
   35c3a:	4621      	mov	r1, r4
		msg->str = str;
   35c3c:	6105      	str	r5, [r0, #16]
}
   35c3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   35c42:	f7f8 bf49 	b.w	2ead8 <msg_finalize>
}
   35c46:	bd38      	pop	{r3, r4, r5, pc}

00035c48 <log_1>:
{
   35c48:	b570      	push	{r4, r5, r6, lr}
   35c4a:	4606      	mov	r6, r0
   35c4c:	460d      	mov	r5, r1
   35c4e:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   35c50:	f7ff ffbb 	bl	35bca <z_log_msg_std_alloc>

	if (msg != NULL) {
   35c54:	b158      	cbz	r0, 35c6e <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   35c56:	2101      	movs	r1, #1
   35c58:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   35c5a:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   35c5c:	f361 1207 	bfi	r2, r1, #4, #4
   35c60:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
   35c62:	4621      	mov	r1, r4
		msg->payload.single.args[0] = arg1;
   35c64:	6145      	str	r5, [r0, #20]
}
   35c66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   35c6a:	f7f8 bf35 	b.w	2ead8 <msg_finalize>
}
   35c6e:	bd70      	pop	{r4, r5, r6, pc}

00035c70 <log_2>:
{
   35c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35c74:	4680      	mov	r8, r0
   35c76:	460f      	mov	r7, r1
   35c78:	4616      	mov	r6, r2
   35c7a:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   35c7c:	f7ff ffa5 	bl	35bca <z_log_msg_std_alloc>

	if (msg != NULL) {
   35c80:	b168      	cbz	r0, 35c9e <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   35c82:	2202      	movs	r2, #2
   35c84:	7a43      	ldrb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   35c86:	4629      	mov	r1, r5
   35c88:	f362 1307 	bfi	r3, r2, #4, #4
   35c8c:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   35c8e:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->str = str;
   35c92:	f8c0 8010 	str.w	r8, [r0, #16]
}
   35c96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   35c9a:	f7f8 bf1d 	b.w	2ead8 <msg_finalize>
}
   35c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00035ca2 <log_3>:
{
   35ca2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   35ca6:	4680      	mov	r8, r0
   35ca8:	460f      	mov	r7, r1
   35caa:	4616      	mov	r6, r2
   35cac:	461d      	mov	r5, r3
   35cae:	f8bd 9020 	ldrh.w	r9, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   35cb2:	f7ff ff8a 	bl	35bca <z_log_msg_std_alloc>

	if (msg != NULL) {
   35cb6:	b170      	cbz	r0, 35cd6 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   35cb8:	2203      	movs	r2, #3
   35cba:	7a43      	ldrb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   35cbc:	4649      	mov	r1, r9
   35cbe:	f362 1307 	bfi	r3, r2, #4, #4
   35cc2:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   35cc4:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->str = str;
   35cc8:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->payload.single.args[2] = arg3;
   35ccc:	61c5      	str	r5, [r0, #28]
}
   35cce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   35cd2:	f7f8 bf01 	b.w	2ead8 <msg_finalize>
}
   35cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00035cda <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   35cda:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   35cde:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   35ce0:	8903      	ldrh	r3, [r0, #8]
{
   35ce2:	460e      	mov	r6, r1
   35ce4:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   35ce6:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   35cea:	42a2      	cmp	r2, r4
{
   35cec:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   35cf0:	d803      	bhi.n	35cfa <log_msg_hexdump_data_op+0x20>
		*length = 0;
   35cf2:	2300      	movs	r3, #0
   35cf4:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   35cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   35cfa:	680b      	ldr	r3, [r1, #0]
   35cfc:	4423      	add	r3, r4
   35cfe:	4293      	cmp	r3, r2
		*length = available_len - offset;
   35d00:	bf84      	itt	hi
   35d02:	1b13      	subhi	r3, r2, r4
   35d04:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   35d06:	2a0c      	cmp	r2, #12
	req_len = *length;
   35d08:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   35d0c:	d92a      	bls.n	35d64 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   35d0e:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   35d10:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   35d14:	d82d      	bhi.n	35d72 <log_msg_hexdump_data_op+0x98>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   35d16:	2208      	movs	r2, #8
		head_data = msg->payload.ext.data.bytes;
   35d18:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   35d1a:	454a      	cmp	r2, r9
   35d1c:	bf28      	it	cs
   35d1e:	464a      	movcs	r2, r9
   35d20:	4420      	add	r0, r4
   35d22:	4615      	mov	r5, r2
		if (put_op) {
   35d24:	b317      	cbz	r7, 35d6c <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
   35d26:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   35d28:	f001 fc72 	bl	37610 <memcpy>
		req_len -= cpy_len;
   35d2c:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   35d30:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   35d32:	f1b9 0f00 	cmp.w	r9, #0
   35d36:	d0de      	beq.n	35cf6 <log_msg_hexdump_data_op+0x1c>
   35d38:	f1b8 0f00 	cmp.w	r8, #0
   35d3c:	d0db      	beq.n	35cf6 <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   35d3e:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   35d42:	454d      	cmp	r5, r9
   35d44:	bf28      	it	cs
   35d46:	464d      	movcs	r5, r9
		if (put_op) {
   35d48:	1d20      	adds	r0, r4, #4
			(void)memcpy(&cont->payload.bytes[offset],
   35d4a:	462a      	mov	r2, r5
   35d4c:	4440      	add	r0, r8
		if (put_op) {
   35d4e:	b1bf      	cbz	r7, 35d80 <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
   35d50:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   35d52:	f001 fc5d 	bl	37610 <memcpy>
		offset = 0;
   35d56:	2400      	movs	r4, #0
		cont = cont->next;
   35d58:	f8d8 8000 	ldr.w	r8, [r8]
		req_len -= cpy_len;
   35d5c:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   35d60:	442e      	add	r6, r5
   35d62:	e7e6      	b.n	35d32 <log_msg_hexdump_data_op+0x58>
	struct log_msg_cont *cont = NULL;
   35d64:	f04f 0800 	mov.w	r8, #0
		head_data = msg->payload.single.bytes;
   35d68:	3014      	adds	r0, #20
	if (offset < chunk_len) {
   35d6a:	e7d6      	b.n	35d1a <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
   35d6c:	4601      	mov	r1, r0
   35d6e:	4630      	mov	r0, r6
   35d70:	e7da      	b.n	35d28 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   35d72:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   35d74:	2c1b      	cmp	r4, #27
   35d76:	d9dc      	bls.n	35d32 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   35d78:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   35d7c:	3c1c      	subs	r4, #28
   35d7e:	e7f9      	b.n	35d74 <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
   35d80:	4601      	mov	r1, r0
   35d82:	4630      	mov	r0, r6
   35d84:	e7e5      	b.n	35d52 <log_msg_hexdump_data_op+0x78>

00035d86 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   35d86:	3004      	adds	r0, #4
   35d88:	e8d0 3fef 	ldaex	r3, [r0]
   35d8c:	3301      	adds	r3, #1
   35d8e:	e8c0 3fe2 	stlex	r2, r3, [r0]
   35d92:	2a00      	cmp	r2, #0
   35d94:	d1f8      	bne.n	35d88 <log_msg_get+0x2>
}
   35d96:	4770      	bx	lr

00035d98 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   35d98:	7a40      	ldrb	r0, [r0, #9]
}
   35d9a:	0900      	lsrs	r0, r0, #4
   35d9c:	4770      	bx	lr

00035d9e <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   35d9e:	7a43      	ldrb	r3, [r0, #9]
   35da0:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   35da4:	ea4f 1213 	mov.w	r2, r3, lsr #4
   35da8:	d216      	bcs.n	35dd8 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   35daa:	2a03      	cmp	r2, #3
   35dac:	d803      	bhi.n	35db6 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   35dae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   35db2:	6948      	ldr	r0, [r1, #20]
   35db4:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   35db6:	2901      	cmp	r1, #1
   35db8:	d803      	bhi.n	35dc2 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   35dba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   35dbe:	6988      	ldr	r0, [r1, #24]
   35dc0:	4770      	bx	lr
	cont = msg->payload.ext.next;
   35dc2:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   35dc4:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   35dc6:	2906      	cmp	r1, #6
   35dc8:	d803      	bhi.n	35dd2 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   35dca:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   35dce:	6848      	ldr	r0, [r1, #4]
   35dd0:	4770      	bx	lr
		cont = cont->next;
   35dd2:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   35dd4:	3907      	subs	r1, #7
		cont = cont->next;
   35dd6:	e7f6      	b.n	35dc6 <log_msg_arg_get+0x28>
		return 0;
   35dd8:	2000      	movs	r0, #0
}
   35dda:	4770      	bx	lr

00035ddc <log_msg_put>:
{
   35ddc:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   35dde:	1d02      	adds	r2, r0, #4
   35de0:	e8d2 1fef 	ldaex	r1, [r2]
   35de4:	3901      	subs	r1, #1
   35de6:	e8c2 1fec 	stlex	ip, r1, [r2]
   35dea:	f1bc 0f00 	cmp.w	ip, #0
   35dee:	d1f7      	bne.n	35de0 <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   35df0:	685b      	ldr	r3, [r3, #4]
   35df2:	b90b      	cbnz	r3, 35df8 <log_msg_put+0x1c>
		msg_free(msg);
   35df4:	f7f8 bf62 	b.w	2ecbc <msg_free>
}
   35df8:	4770      	bx	lr

00035dfa <log_msg_str_get>:
}
   35dfa:	6900      	ldr	r0, [r0, #16]
   35dfc:	4770      	bx	lr

00035dfe <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   35dfe:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   35e00:	2400      	movs	r4, #0
   35e02:	9400      	str	r4, [sp, #0]
   35e04:	f7ff ff69 	bl	35cda <log_msg_hexdump_data_op>
}
   35e08:	b002      	add	sp, #8
   35e0a:	bd10      	pop	{r4, pc}

00035e0c <buffer_write>:
{
   35e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35e0e:	4606      	mov	r6, r0
   35e10:	460d      	mov	r5, r1
   35e12:	4614      	mov	r4, r2
   35e14:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   35e16:	4621      	mov	r1, r4
   35e18:	4628      	mov	r0, r5
   35e1a:	463a      	mov	r2, r7
   35e1c:	47b0      	blx	r6
	} while (len != 0);
   35e1e:	1a24      	subs	r4, r4, r0
		buf += processed;
   35e20:	4405      	add	r5, r0
	} while (len != 0);
   35e22:	d1f8      	bne.n	35e16 <buffer_write+0xa>
}
   35e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00035e26 <std_print>:
{
   35e26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   35e2a:	b08e      	sub	sp, #56	; 0x38
   35e2c:	af0e      	add	r7, sp, #56	; 0x38
   35e2e:	4680      	mov	r8, r0
   35e30:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   35e32:	f7ff ffe2 	bl	35dfa <log_msg_str_get>
   35e36:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   35e38:	4640      	mov	r0, r8
   35e3a:	f7ff ffad 	bl	35d98 <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   35e3e:	f04f 0900 	mov.w	r9, #0
	uint32_t nargs = log_msg_nargs_get(msg);
   35e42:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   35e44:	0083      	lsls	r3, r0, #2
   35e46:	3307      	adds	r3, #7
   35e48:	f023 0307 	bic.w	r3, r3, #7
   35e4c:	ebad 0d03 	sub.w	sp, sp, r3
   35e50:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   35e52:	45d1      	cmp	r9, sl
   35e54:	d116      	bne.n	35e84 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   35e56:	4640      	mov	r0, r8
   35e58:	f7ff ff9e 	bl	35d98 <log_msg_nargs_get>
   35e5c:	280f      	cmp	r0, #15
   35e5e:	d81e      	bhi.n	35e9e <std_print+0x78>
   35e60:	e8df f010 	tbh	[pc, r0, lsl #1]
   35e64:	00200019 	.word	0x00200019
   35e68:	002d0026 	.word	0x002d0026
   35e6c:	00410036 	.word	0x00410036
   35e70:	005d004e 	.word	0x005d004e
   35e74:	0081006e 	.word	0x0081006e
   35e78:	00ad0096 	.word	0x00ad0096
   35e7c:	00e100c6 	.word	0x00e100c6
   35e80:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   35e84:	4649      	mov	r1, r9
   35e86:	4640      	mov	r0, r8
   35e88:	f7ff ff89 	bl	35d9e <log_msg_arg_get>
   35e8c:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   35e90:	f109 0901 	add.w	r9, r9, #1
   35e94:	e7dd      	b.n	35e52 <std_print+0x2c>
		print_formatted(output, str);
   35e96:	4631      	mov	r1, r6
   35e98:	4628      	mov	r0, r5
   35e9a:	f7f8 ff4d 	bl	2ed38 <print_formatted>
}
   35e9e:	46bd      	mov	sp, r7
   35ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   35ea4:	4631      	mov	r1, r6
   35ea6:	4628      	mov	r0, r5
   35ea8:	6822      	ldr	r2, [r4, #0]
   35eaa:	f7f8 ff45 	bl	2ed38 <print_formatted>
		break;
   35eae:	e7f6      	b.n	35e9e <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
   35eb0:	4631      	mov	r1, r6
   35eb2:	e9d4 2300 	ldrd	r2, r3, [r4]
   35eb6:	4628      	mov	r0, r5
   35eb8:	f7f8 ff3e 	bl	2ed38 <print_formatted>
		break;
   35ebc:	e7ef      	b.n	35e9e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
   35ebe:	68a3      	ldr	r3, [r4, #8]
   35ec0:	4631      	mov	r1, r6
   35ec2:	9300      	str	r3, [sp, #0]
   35ec4:	4628      	mov	r0, r5
   35ec6:	e9d4 2300 	ldrd	r2, r3, [r4]
   35eca:	f7f8 ff35 	bl	2ed38 <print_formatted>
		break;
   35ece:	e7e6      	b.n	35e9e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   35ed0:	68e3      	ldr	r3, [r4, #12]
   35ed2:	4631      	mov	r1, r6
   35ed4:	9301      	str	r3, [sp, #4]
   35ed6:	68a3      	ldr	r3, [r4, #8]
   35ed8:	4628      	mov	r0, r5
   35eda:	9300      	str	r3, [sp, #0]
   35edc:	e9d4 2300 	ldrd	r2, r3, [r4]
   35ee0:	f7f8 ff2a 	bl	2ed38 <print_formatted>
		break;
   35ee4:	e7db      	b.n	35e9e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   35ee6:	6923      	ldr	r3, [r4, #16]
   35ee8:	4631      	mov	r1, r6
   35eea:	9302      	str	r3, [sp, #8]
   35eec:	68e3      	ldr	r3, [r4, #12]
   35eee:	4628      	mov	r0, r5
   35ef0:	9301      	str	r3, [sp, #4]
   35ef2:	68a3      	ldr	r3, [r4, #8]
   35ef4:	9300      	str	r3, [sp, #0]
   35ef6:	e9d4 2300 	ldrd	r2, r3, [r4]
   35efa:	f7f8 ff1d 	bl	2ed38 <print_formatted>
		break;
   35efe:	e7ce      	b.n	35e9e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   35f00:	6963      	ldr	r3, [r4, #20]
   35f02:	4631      	mov	r1, r6
   35f04:	9303      	str	r3, [sp, #12]
   35f06:	6923      	ldr	r3, [r4, #16]
   35f08:	4628      	mov	r0, r5
   35f0a:	9302      	str	r3, [sp, #8]
   35f0c:	68e3      	ldr	r3, [r4, #12]
   35f0e:	9301      	str	r3, [sp, #4]
   35f10:	68a3      	ldr	r3, [r4, #8]
   35f12:	9300      	str	r3, [sp, #0]
   35f14:	e9d4 2300 	ldrd	r2, r3, [r4]
   35f18:	f7f8 ff0e 	bl	2ed38 <print_formatted>
		break;
   35f1c:	e7bf      	b.n	35e9e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   35f1e:	69a3      	ldr	r3, [r4, #24]
   35f20:	4631      	mov	r1, r6
   35f22:	9304      	str	r3, [sp, #16]
   35f24:	6963      	ldr	r3, [r4, #20]
   35f26:	4628      	mov	r0, r5
   35f28:	9303      	str	r3, [sp, #12]
   35f2a:	6923      	ldr	r3, [r4, #16]
   35f2c:	9302      	str	r3, [sp, #8]
   35f2e:	68e3      	ldr	r3, [r4, #12]
   35f30:	9301      	str	r3, [sp, #4]
   35f32:	68a3      	ldr	r3, [r4, #8]
   35f34:	9300      	str	r3, [sp, #0]
   35f36:	e9d4 2300 	ldrd	r2, r3, [r4]
   35f3a:	f7f8 fefd 	bl	2ed38 <print_formatted>
		break;
   35f3e:	e7ae      	b.n	35e9e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   35f40:	69e3      	ldr	r3, [r4, #28]
   35f42:	4631      	mov	r1, r6
   35f44:	9305      	str	r3, [sp, #20]
   35f46:	69a3      	ldr	r3, [r4, #24]
   35f48:	4628      	mov	r0, r5
   35f4a:	9304      	str	r3, [sp, #16]
   35f4c:	6963      	ldr	r3, [r4, #20]
   35f4e:	9303      	str	r3, [sp, #12]
   35f50:	6923      	ldr	r3, [r4, #16]
   35f52:	9302      	str	r3, [sp, #8]
   35f54:	68e3      	ldr	r3, [r4, #12]
   35f56:	9301      	str	r3, [sp, #4]
   35f58:	68a3      	ldr	r3, [r4, #8]
   35f5a:	9300      	str	r3, [sp, #0]
   35f5c:	e9d4 2300 	ldrd	r2, r3, [r4]
   35f60:	f7f8 feea 	bl	2ed38 <print_formatted>
		break;
   35f64:	e79b      	b.n	35e9e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   35f66:	6a23      	ldr	r3, [r4, #32]
   35f68:	4631      	mov	r1, r6
   35f6a:	9306      	str	r3, [sp, #24]
   35f6c:	69e3      	ldr	r3, [r4, #28]
   35f6e:	4628      	mov	r0, r5
   35f70:	9305      	str	r3, [sp, #20]
   35f72:	69a3      	ldr	r3, [r4, #24]
   35f74:	9304      	str	r3, [sp, #16]
   35f76:	6963      	ldr	r3, [r4, #20]
   35f78:	9303      	str	r3, [sp, #12]
   35f7a:	6923      	ldr	r3, [r4, #16]
   35f7c:	9302      	str	r3, [sp, #8]
   35f7e:	68e3      	ldr	r3, [r4, #12]
   35f80:	9301      	str	r3, [sp, #4]
   35f82:	68a3      	ldr	r3, [r4, #8]
   35f84:	9300      	str	r3, [sp, #0]
   35f86:	e9d4 2300 	ldrd	r2, r3, [r4]
   35f8a:	f7f8 fed5 	bl	2ed38 <print_formatted>
		break;
   35f8e:	e786      	b.n	35e9e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   35f90:	6a63      	ldr	r3, [r4, #36]	; 0x24
   35f92:	4631      	mov	r1, r6
   35f94:	9307      	str	r3, [sp, #28]
   35f96:	6a23      	ldr	r3, [r4, #32]
   35f98:	4628      	mov	r0, r5
   35f9a:	9306      	str	r3, [sp, #24]
   35f9c:	69e3      	ldr	r3, [r4, #28]
   35f9e:	9305      	str	r3, [sp, #20]
   35fa0:	69a3      	ldr	r3, [r4, #24]
   35fa2:	9304      	str	r3, [sp, #16]
   35fa4:	6963      	ldr	r3, [r4, #20]
   35fa6:	9303      	str	r3, [sp, #12]
   35fa8:	6923      	ldr	r3, [r4, #16]
   35faa:	9302      	str	r3, [sp, #8]
   35fac:	68e3      	ldr	r3, [r4, #12]
   35fae:	9301      	str	r3, [sp, #4]
   35fb0:	68a3      	ldr	r3, [r4, #8]
   35fb2:	9300      	str	r3, [sp, #0]
   35fb4:	e9d4 2300 	ldrd	r2, r3, [r4]
   35fb8:	f7f8 febe 	bl	2ed38 <print_formatted>
		break;
   35fbc:	e76f      	b.n	35e9e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   35fbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   35fc0:	4631      	mov	r1, r6
   35fc2:	9308      	str	r3, [sp, #32]
   35fc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   35fc6:	4628      	mov	r0, r5
   35fc8:	9307      	str	r3, [sp, #28]
   35fca:	6a23      	ldr	r3, [r4, #32]
   35fcc:	9306      	str	r3, [sp, #24]
   35fce:	69e3      	ldr	r3, [r4, #28]
   35fd0:	9305      	str	r3, [sp, #20]
   35fd2:	69a3      	ldr	r3, [r4, #24]
   35fd4:	9304      	str	r3, [sp, #16]
   35fd6:	6963      	ldr	r3, [r4, #20]
   35fd8:	9303      	str	r3, [sp, #12]
   35fda:	6923      	ldr	r3, [r4, #16]
   35fdc:	9302      	str	r3, [sp, #8]
   35fde:	68e3      	ldr	r3, [r4, #12]
   35fe0:	9301      	str	r3, [sp, #4]
   35fe2:	68a3      	ldr	r3, [r4, #8]
   35fe4:	9300      	str	r3, [sp, #0]
   35fe6:	e9d4 2300 	ldrd	r2, r3, [r4]
   35fea:	f7f8 fea5 	bl	2ed38 <print_formatted>
		break;
   35fee:	e756      	b.n	35e9e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   35ff0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   35ff2:	4631      	mov	r1, r6
   35ff4:	9309      	str	r3, [sp, #36]	; 0x24
   35ff6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   35ff8:	4628      	mov	r0, r5
   35ffa:	9308      	str	r3, [sp, #32]
   35ffc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   35ffe:	9307      	str	r3, [sp, #28]
   36000:	6a23      	ldr	r3, [r4, #32]
   36002:	9306      	str	r3, [sp, #24]
   36004:	69e3      	ldr	r3, [r4, #28]
   36006:	9305      	str	r3, [sp, #20]
   36008:	69a3      	ldr	r3, [r4, #24]
   3600a:	9304      	str	r3, [sp, #16]
   3600c:	6963      	ldr	r3, [r4, #20]
   3600e:	9303      	str	r3, [sp, #12]
   36010:	6923      	ldr	r3, [r4, #16]
   36012:	9302      	str	r3, [sp, #8]
   36014:	68e3      	ldr	r3, [r4, #12]
   36016:	9301      	str	r3, [sp, #4]
   36018:	68a3      	ldr	r3, [r4, #8]
   3601a:	9300      	str	r3, [sp, #0]
   3601c:	e9d4 2300 	ldrd	r2, r3, [r4]
   36020:	f7f8 fe8a 	bl	2ed38 <print_formatted>
		break;
   36024:	e73b      	b.n	35e9e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   36026:	6b23      	ldr	r3, [r4, #48]	; 0x30
   36028:	4631      	mov	r1, r6
   3602a:	930a      	str	r3, [sp, #40]	; 0x28
   3602c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   3602e:	4628      	mov	r0, r5
   36030:	9309      	str	r3, [sp, #36]	; 0x24
   36032:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   36034:	9308      	str	r3, [sp, #32]
   36036:	6a63      	ldr	r3, [r4, #36]	; 0x24
   36038:	9307      	str	r3, [sp, #28]
   3603a:	6a23      	ldr	r3, [r4, #32]
   3603c:	9306      	str	r3, [sp, #24]
   3603e:	69e3      	ldr	r3, [r4, #28]
   36040:	9305      	str	r3, [sp, #20]
   36042:	69a3      	ldr	r3, [r4, #24]
   36044:	9304      	str	r3, [sp, #16]
   36046:	6963      	ldr	r3, [r4, #20]
   36048:	9303      	str	r3, [sp, #12]
   3604a:	6923      	ldr	r3, [r4, #16]
   3604c:	9302      	str	r3, [sp, #8]
   3604e:	68e3      	ldr	r3, [r4, #12]
   36050:	9301      	str	r3, [sp, #4]
   36052:	68a3      	ldr	r3, [r4, #8]
   36054:	9300      	str	r3, [sp, #0]
   36056:	e9d4 2300 	ldrd	r2, r3, [r4]
   3605a:	f7f8 fe6d 	bl	2ed38 <print_formatted>
		break;
   3605e:	e71e      	b.n	35e9e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   36060:	6b63      	ldr	r3, [r4, #52]	; 0x34
   36062:	4631      	mov	r1, r6
   36064:	930b      	str	r3, [sp, #44]	; 0x2c
   36066:	6b23      	ldr	r3, [r4, #48]	; 0x30
   36068:	4628      	mov	r0, r5
   3606a:	930a      	str	r3, [sp, #40]	; 0x28
   3606c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   3606e:	9309      	str	r3, [sp, #36]	; 0x24
   36070:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   36072:	9308      	str	r3, [sp, #32]
   36074:	6a63      	ldr	r3, [r4, #36]	; 0x24
   36076:	9307      	str	r3, [sp, #28]
   36078:	6a23      	ldr	r3, [r4, #32]
   3607a:	9306      	str	r3, [sp, #24]
   3607c:	69e3      	ldr	r3, [r4, #28]
   3607e:	9305      	str	r3, [sp, #20]
   36080:	69a3      	ldr	r3, [r4, #24]
   36082:	9304      	str	r3, [sp, #16]
   36084:	6963      	ldr	r3, [r4, #20]
   36086:	9303      	str	r3, [sp, #12]
   36088:	6923      	ldr	r3, [r4, #16]
   3608a:	9302      	str	r3, [sp, #8]
   3608c:	68e3      	ldr	r3, [r4, #12]
   3608e:	9301      	str	r3, [sp, #4]
   36090:	68a3      	ldr	r3, [r4, #8]
   36092:	9300      	str	r3, [sp, #0]
   36094:	e9d4 2300 	ldrd	r2, r3, [r4]
   36098:	f7f8 fe4e 	bl	2ed38 <print_formatted>
		break;
   3609c:	e6ff      	b.n	35e9e <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   3609e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   360a0:	4631      	mov	r1, r6
   360a2:	930c      	str	r3, [sp, #48]	; 0x30
   360a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   360a6:	4628      	mov	r0, r5
   360a8:	930b      	str	r3, [sp, #44]	; 0x2c
   360aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
   360ac:	930a      	str	r3, [sp, #40]	; 0x28
   360ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   360b0:	9309      	str	r3, [sp, #36]	; 0x24
   360b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   360b4:	9308      	str	r3, [sp, #32]
   360b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   360b8:	9307      	str	r3, [sp, #28]
   360ba:	6a23      	ldr	r3, [r4, #32]
   360bc:	9306      	str	r3, [sp, #24]
   360be:	69e3      	ldr	r3, [r4, #28]
   360c0:	9305      	str	r3, [sp, #20]
   360c2:	69a3      	ldr	r3, [r4, #24]
   360c4:	9304      	str	r3, [sp, #16]
   360c6:	6963      	ldr	r3, [r4, #20]
   360c8:	9303      	str	r3, [sp, #12]
   360ca:	6923      	ldr	r3, [r4, #16]
   360cc:	9302      	str	r3, [sp, #8]
   360ce:	68e3      	ldr	r3, [r4, #12]
   360d0:	9301      	str	r3, [sp, #4]
   360d2:	68a3      	ldr	r3, [r4, #8]
   360d4:	9300      	str	r3, [sp, #0]
   360d6:	e9d4 2300 	ldrd	r2, r3, [r4]
   360da:	f7f8 fe2d 	bl	2ed38 <print_formatted>
}
   360de:	e6de      	b.n	35e9e <std_print+0x78>

000360e0 <log_output_flush>:
		     output->control_block->offset,
   360e0:	6842      	ldr	r2, [r0, #4]
{
   360e2:	b510      	push	{r4, lr}
	buffer_write(output->func, output->buf,
   360e4:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   360e8:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   360ea:	6881      	ldr	r1, [r0, #8]
   360ec:	6800      	ldr	r0, [r0, #0]
   360ee:	f7ff fe8d 	bl	35e0c <buffer_write>
	output->control_block->offset = 0;
   360f2:	2200      	movs	r2, #0
   360f4:	6863      	ldr	r3, [r4, #4]
   360f6:	601a      	str	r2, [r3, #0]
}
   360f8:	bd10      	pop	{r4, pc}

000360fa <out_func>:
{
   360fa:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   360fc:	684b      	ldr	r3, [r1, #4]
{
   360fe:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   36100:	681a      	ldr	r2, [r3, #0]
   36102:	68cb      	ldr	r3, [r1, #12]
{
   36104:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   36106:	429a      	cmp	r2, r3
   36108:	d102      	bne.n	36110 <out_func+0x16>
		log_output_flush(out_ctx);
   3610a:	4608      	mov	r0, r1
   3610c:	f7ff ffe8 	bl	360e0 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   36110:	6863      	ldr	r3, [r4, #4]
   36112:	e8d3 2fef 	ldaex	r2, [r3]
   36116:	1c51      	adds	r1, r2, #1
   36118:	e8c3 1fe0 	stlex	r0, r1, [r3]
   3611c:	2800      	cmp	r0, #0
   3611e:	d1f8      	bne.n	36112 <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
   36120:	68a3      	ldr	r3, [r4, #8]
}
   36122:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
   36124:	549d      	strb	r5, [r3, r2]
}
   36126:	bd38      	pop	{r3, r4, r5, pc}

00036128 <log_halt>:
   36128:	2000      	movs	r0, #0
   3612a:	684b      	ldr	r3, [r1, #4]
   3612c:	7158      	strb	r0, [r3, #5]
}
   3612e:	4770      	bx	lr

00036130 <log_go>:
	backend->cb->active = true;
   36130:	2201      	movs	r2, #1
   36132:	684b      	ldr	r3, [r1, #4]
}
   36134:	2000      	movs	r0, #0
   36136:	715a      	strb	r2, [r3, #5]
   36138:	4770      	bx	lr

0003613a <cmd_log_self_halt>:
{
   3613a:	b510      	push	{r4, lr}
   3613c:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
   3613e:	f7f9 f90b 	bl	2f358 <shell_state_precheck>
   36142:	b120      	cbz	r0, 3614e <cmd_log_self_halt+0x14>
	backend->cb->active = false;
   36144:	2200      	movs	r2, #0
	return log_halt(shell, shell->log_backend->backend, argc, argv);
   36146:	69e3      	ldr	r3, [r4, #28]
	log_backend_deactivate(backend);
   36148:	681b      	ldr	r3, [r3, #0]
   3614a:	685b      	ldr	r3, [r3, #4]
   3614c:	715a      	strb	r2, [r3, #5]
}
   3614e:	2000      	movs	r0, #0
   36150:	bd10      	pop	{r4, pc}

00036152 <cmd_log_self_go>:
{
   36152:	b510      	push	{r4, lr}
   36154:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
   36156:	f7f9 f8ff 	bl	2f358 <shell_state_precheck>
   3615a:	b120      	cbz	r0, 36166 <cmd_log_self_go+0x14>
	backend->cb->active = true;
   3615c:	2201      	movs	r2, #1
	return log_go(shell, shell->log_backend->backend, argc, argv);
   3615e:	69e3      	ldr	r3, [r4, #28]
	log_backend_activate(backend, backend->cb->ctx);
   36160:	681b      	ldr	r3, [r3, #0]
   36162:	685b      	ldr	r3, [r3, #4]
   36164:	715a      	strb	r2, [r3, #5]
}
   36166:	2000      	movs	r0, #0
   36168:	bd10      	pop	{r4, pc}

0003616a <cmd_log_self_status>:
{
   3616a:	b570      	push	{r4, r5, r6, lr}
   3616c:	4604      	mov	r4, r0
   3616e:	460d      	mov	r5, r1
   36170:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   36172:	f7f9 f8f1 	bl	2f358 <shell_state_precheck>
   36176:	b130      	cbz	r0, 36186 <cmd_log_self_status+0x1c>
	log_status(shell, shell->log_backend->backend, argc, argv);
   36178:	69e1      	ldr	r1, [r4, #28]
   3617a:	4633      	mov	r3, r6
   3617c:	462a      	mov	r2, r5
   3617e:	4620      	mov	r0, r4
   36180:	6809      	ldr	r1, [r1, #0]
   36182:	f7f9 f821 	bl	2f1c8 <log_status>
}
   36186:	2000      	movs	r0, #0
   36188:	bd70      	pop	{r4, r5, r6, pc}

0003618a <cmd_log_self_enable>:
{
   3618a:	b570      	push	{r4, r5, r6, lr}
   3618c:	4604      	mov	r4, r0
   3618e:	460d      	mov	r5, r1
   36190:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   36192:	f7f9 f8e1 	bl	2f358 <shell_state_precheck>
   36196:	b140      	cbz	r0, 361aa <cmd_log_self_enable+0x20>
	return log_enable(shell, shell->log_backend->backend, argc, argv);
   36198:	69e1      	ldr	r1, [r4, #28]
   3619a:	4633      	mov	r3, r6
   3619c:	462a      	mov	r2, r5
   3619e:	4620      	mov	r0, r4
}
   361a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_enable(shell, shell->log_backend->backend, argc, argv);
   361a4:	6809      	ldr	r1, [r1, #0]
   361a6:	f7f9 b94f 	b.w	2f448 <log_enable>
}
   361aa:	bd70      	pop	{r4, r5, r6, pc}

000361ac <log_disable>:
{
   361ac:	b513      	push	{r0, r1, r4, lr}
	filters_set(shell, backend, argc - 1, &argv[1], LOG_LEVEL_NONE);
   361ae:	2400      	movs	r4, #0
   361b0:	3304      	adds	r3, #4
   361b2:	9400      	str	r4, [sp, #0]
   361b4:	3a01      	subs	r2, #1
   361b6:	f7f9 f8df 	bl	2f378 <filters_set>
}
   361ba:	4620      	mov	r0, r4
   361bc:	b002      	add	sp, #8
   361be:	bd10      	pop	{r4, pc}

000361c0 <cmd_log_self_disable>:
{
   361c0:	b570      	push	{r4, r5, r6, lr}
   361c2:	4604      	mov	r4, r0
   361c4:	460d      	mov	r5, r1
   361c6:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   361c8:	f7f9 f8c6 	bl	2f358 <shell_state_precheck>
   361cc:	b140      	cbz	r0, 361e0 <cmd_log_self_disable+0x20>
	return log_disable(shell, shell->log_backend->backend, argc, argv);
   361ce:	69e1      	ldr	r1, [r4, #28]
   361d0:	4633      	mov	r3, r6
   361d2:	462a      	mov	r2, r5
   361d4:	4620      	mov	r0, r4
}
   361d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_disable(shell, shell->log_backend->backend, argc, argv);
   361da:	6809      	ldr	r1, [r1, #0]
   361dc:	f7ff bfe6 	b.w	361ac <log_disable>
}
   361e0:	bd70      	pop	{r4, r5, r6, pc}

000361e2 <cmd_kernel_reboot_warm>:
#endif

#if defined(CONFIG_REBOOT)
static int cmd_kernel_reboot_warm(const struct shell *shell,
				  size_t argc, char **argv)
{
   361e2:	b508      	push	{r3, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	sys_reboot(SYS_REBOOT_WARM);
   361e4:	2000      	movs	r0, #0
   361e6:	f7f8 f9b5 	bl	2e554 <sys_reboot>
	return 0;
}
   361ea:	2000      	movs	r0, #0
   361ec:	bd08      	pop	{r3, pc}

000361ee <cmd_kernel_reboot_cold>:

static int cmd_kernel_reboot_cold(const struct shell *shell,
				  size_t argc, char **argv)
{
   361ee:	b508      	push	{r3, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	sys_reboot(SYS_REBOOT_COLD);
   361f0:	2001      	movs	r0, #1
   361f2:	f7f8 f9af 	bl	2e554 <sys_reboot>
	return 0;
}
   361f6:	2000      	movs	r0, #0
   361f8:	bd08      	pop	{r3, pc}

000361fa <cmd_date_get>:

static int cmd_date_get(const struct shell *shell, size_t argc, char **argv)
{
   361fa:	b510      	push	{r4, lr}
   361fc:	4604      	mov	r4, r0
   361fe:	b08e      	sub	sp, #56	; 0x38
   36200:	2001      	movs	r0, #1
   36202:	4669      	mov	r1, sp
   36204:	f7f6 ffb4 	bl	2d170 <z_impl_clock_gettime>
	struct timespec tp;
	struct tm tm;

	clock_gettime(CLOCK_REALTIME, &tp);

	gmtime_r(&tp.tv_sec, &tm);
   36208:	a905      	add	r1, sp, #20
   3620a:	4668      	mov	r0, sp
   3620c:	f7fc faa4 	bl	32758 <gmtime_r>

	date_print(shell, &tm);
   36210:	4620      	mov	r0, r4
   36212:	a905      	add	r1, sp, #20
   36214:	f7f9 fb4a 	bl	2f8ac <date_print>

	return 0;
}
   36218:	2000      	movs	r0, #0
   3621a:	b00e      	add	sp, #56	; 0x38
   3621c:	bd10      	pop	{r4, pc}

0003621e <atomic_or>:
{
   3621e:	4603      	mov	r3, r0
}
   36220:	e8d3 0fef 	ldaex	r0, [r3]
   36224:	ea40 0201 	orr.w	r2, r0, r1
   36228:	e8c3 2fec 	stlex	ip, r2, [r3]
   3622c:	f1bc 0f00 	cmp.w	ip, #0
   36230:	d1f6      	bne.n	36220 <atomic_or+0x2>
   36232:	4770      	bx	lr

00036234 <atomic_and>:
{
   36234:	4603      	mov	r3, r0
}
   36236:	e8d3 0fef 	ldaex	r0, [r3]
   3623a:	ea00 0201 	and.w	r2, r0, r1
   3623e:	e8c3 2fec 	stlex	ip, r2, [r3]
   36242:	f1bc 0f00 	cmp.w	ip, #0
   36246:	d1f6      	bne.n	36236 <atomic_and+0x2>
   36248:	4770      	bx	lr

0003624a <kill_handler>:
{
   3624a:	b538      	push	{r3, r4, r5, lr}
	if (z_flag_processing_get(shell)) {
   3624c:	6883      	ldr	r3, [r0, #8]
{
   3624e:	4604      	mov	r4, r0
	return shell->ctx->internal.flags.processing == 1;
   36250:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
	if (z_flag_processing_get(shell)) {
   36254:	06db      	lsls	r3, r3, #27
   36256:	d41d      	bmi.n	36294 <kill_handler+0x4a>
		z_shell_log_backend_disable(shell->log_backend);
   36258:	69c0      	ldr	r0, [r0, #28]
   3625a:	f000 ff21 	bl	370a0 <z_shell_log_backend_disable>
	err = shell->iface->api->uninit(shell->iface);
   3625e:	6860      	ldr	r0, [r4, #4]
   36260:	6803      	ldr	r3, [r0, #0]
   36262:	685b      	ldr	r3, [r3, #4]
   36264:	4798      	blx	r3
	if (err != 0) {
   36266:	4605      	mov	r5, r0
   36268:	b920      	cbnz	r0, 36274 <kill_handler+0x2a>
	z_shell_history_purge(shell->history);
   3626a:	68e0      	ldr	r0, [r4, #12]
   3626c:	f000 fdd5 	bl	36e1a <z_shell_history_purge>
	shell->ctx->state = state;
   36270:	68a3      	ldr	r3, [r4, #8]
   36272:	711d      	strb	r5, [r3, #4]
	if (shell->ctx->uninit_cb) {
   36274:	68a3      	ldr	r3, [r4, #8]
   36276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   36278:	b113      	cbz	r3, 36280 <kill_handler+0x36>
		shell->ctx->uninit_cb(shell, err);
   3627a:	4629      	mov	r1, r5
   3627c:	4620      	mov	r0, r4
   3627e:	4798      	blx	r3
	shell->ctx->tid = NULL;
   36280:	2200      	movs	r2, #0
   36282:	68a3      	ldr	r3, [r4, #8]
   36284:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	return z_impl_k_current_get();
   36288:	f7fe f9e0 	bl	3464c <z_impl_k_current_get>
}
   3628c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_thread_abort(thread);
   36290:	f7fc b850 	b.w	32334 <z_impl_k_thread_abort>
		return -EBUSY;
   36294:	f06f 050f 	mvn.w	r5, #15
   36298:	e7ec      	b.n	36274 <kill_handler+0x2a>

0003629a <shell_signal_handle>:
{
   3629a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
   3629c:	6885      	ldr	r5, [r0, #8]
   3629e:	3126      	adds	r1, #38	; 0x26
{
   362a0:	4604      	mov	r4, r0
   362a2:	4616      	mov	r6, r2
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
   362a4:	eb05 1501 	add.w	r5, r5, r1, lsl #4
	z_impl_k_poll_signal_check(sig, signaled, result);
   362a8:	4669      	mov	r1, sp
   362aa:	4628      	mov	r0, r5
   362ac:	aa01      	add	r2, sp, #4
   362ae:	f001 ffa7 	bl	38200 <z_impl_k_poll_signal_check>
	if (set) {
   362b2:	9b00      	ldr	r3, [sp, #0]
   362b4:	b123      	cbz	r3, 362c0 <shell_signal_handle+0x26>
	z_impl_k_poll_signal_reset(sig);
   362b6:	4628      	mov	r0, r5
   362b8:	f001 ff9f 	bl	381fa <z_impl_k_poll_signal_reset>
		handler(shell);
   362bc:	4620      	mov	r0, r4
   362be:	47b0      	blx	r6
}
   362c0:	b002      	add	sp, #8
   362c2:	bd70      	pop	{r4, r5, r6, pc}

000362c4 <k_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   362c4:	f7fd be20 	b.w	33f08 <z_impl_k_mutex_unlock>

000362c8 <z_shell_strlen>:
{
   362c8:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
   362ca:	b110      	cbz	r0, 362d2 <z_shell_strlen+0xa>
   362cc:	f001 f94e 	bl	3756c <strlen>
   362d0:	b280      	uxth	r0, r0
}
   362d2:	bd08      	pop	{r3, pc}

000362d4 <z_shell_raw_fprintf>:
{
   362d4:	b40e      	push	{r1, r2, r3}
   362d6:	b503      	push	{r0, r1, lr}
   362d8:	aa03      	add	r2, sp, #12
   362da:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   362de:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   362e0:	f7fa fa2e 	bl	30740 <z_shell_fprintf_fmt>
}
   362e4:	b002      	add	sp, #8
   362e6:	f85d eb04 	ldr.w	lr, [sp], #4
   362ea:	b003      	add	sp, #12
   362ec:	4770      	bx	lr

000362ee <z_flag_echo_set.isra.0>:
static inline bool z_flag_echo_set(const struct shell *shell, bool val)
   362ee:	b508      	push	{r3, lr}
   362f0:	460b      	mov	r3, r1
	Z_SHELL_SET_FLAG_ATOMIC(shell, echo, val, ret);
   362f2:	f500 7017 	add.w	r0, r0, #604	; 0x25c
   362f6:	2104      	movs	r1, #4
   362f8:	b123      	cbz	r3, 36304 <z_flag_echo_set.isra.0+0x16>
   362fa:	f7ff ff90 	bl	3621e <atomic_or>
}
   362fe:	f3c0 0080 	ubfx	r0, r0, #2, #1
   36302:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(shell, echo, val, ret);
   36304:	f06f 0104 	mvn.w	r1, #4
   36308:	f7ff ff94 	bl	36234 <atomic_and>
   3630c:	e7f7      	b.n	362fe <z_flag_echo_set.isra.0+0x10>

0003630e <z_flag_obscure_set.isra.0>:
static inline bool z_flag_obscure_set(const struct shell *shell, bool val)
   3630e:	b508      	push	{r3, lr}
   36310:	460b      	mov	r3, r1
	Z_SHELL_SET_FLAG_ATOMIC(shell, obscure, val, ret);
   36312:	f500 7017 	add.w	r0, r0, #604	; 0x25c
   36316:	2108      	movs	r1, #8
   36318:	b123      	cbz	r3, 36324 <z_flag_obscure_set.isra.0+0x16>
   3631a:	f7ff ff80 	bl	3621e <atomic_or>
}
   3631e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   36322:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(shell, obscure, val, ret);
   36324:	f06f 0108 	mvn.w	r1, #8
   36328:	f7ff ff84 	bl	36234 <atomic_and>
   3632c:	e7f7      	b.n	3631e <z_flag_obscure_set.isra.0+0x10>

0003632e <z_flag_mode_delete_set.isra.0>:
static inline bool z_flag_mode_delete_set(const struct shell *shell, bool val)
   3632e:	b508      	push	{r3, lr}
   36330:	460b      	mov	r3, r1
	Z_SHELL_SET_FLAG_ATOMIC(shell, mode_delete, val, ret);
   36332:	f500 7017 	add.w	r0, r0, #604	; 0x25c
   36336:	2140      	movs	r1, #64	; 0x40
   36338:	b123      	cbz	r3, 36344 <z_flag_mode_delete_set.isra.0+0x16>
   3633a:	f7ff ff70 	bl	3621e <atomic_or>
}
   3633e:	f3c0 1080 	ubfx	r0, r0, #6, #1
   36342:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(shell, mode_delete, val, ret);
   36344:	f06f 0140 	mvn.w	r1, #64	; 0x40
   36348:	f7ff ff74 	bl	36234 <atomic_and>
   3634c:	e7f7      	b.n	3633e <z_flag_mode_delete_set.isra.0+0x10>

0003634e <z_flag_use_colors_set.isra.0>:
static inline bool z_flag_use_colors_set(const struct shell *shell, bool val)
   3634e:	b508      	push	{r3, lr}
   36350:	460b      	mov	r3, r1
	Z_SHELL_SET_FLAG_ATOMIC(shell, use_colors, val, ret);
   36352:	f500 7017 	add.w	r0, r0, #604	; 0x25c
   36356:	2102      	movs	r1, #2
   36358:	b123      	cbz	r3, 36364 <z_flag_use_colors_set.isra.0+0x16>
   3635a:	f7ff ff60 	bl	3621e <atomic_or>
}
   3635e:	f3c0 0040 	ubfx	r0, r0, #1, #1
   36362:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(shell, use_colors, val, ret);
   36364:	f06f 0102 	mvn.w	r1, #2
   36368:	f7ff ff64 	bl	36234 <atomic_and>
   3636c:	e7f7      	b.n	3635e <z_flag_use_colors_set.isra.0+0x10>

0003636e <z_flag_history_exit_set.isra.0>:
static inline bool z_flag_history_exit_set(const struct shell *shell, bool val)
   3636e:	b508      	push	{r3, lr}
   36370:	460b      	mov	r3, r1
	Z_SHELL_SET_FLAG_ATOMIC(shell, history_exit, val, ret);
   36372:	f500 7017 	add.w	r0, r0, #604	; 0x25c
   36376:	2180      	movs	r1, #128	; 0x80
   36378:	b123      	cbz	r3, 36384 <z_flag_history_exit_set.isra.0+0x16>
   3637a:	f7ff ff50 	bl	3621e <atomic_or>
}
   3637e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   36382:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(shell, history_exit, val, ret);
   36384:	f06f 0180 	mvn.w	r1, #128	; 0x80
   36388:	f7ff ff54 	bl	36234 <atomic_and>
   3638c:	e7f7      	b.n	3637e <z_flag_history_exit_set.isra.0+0x10>

0003638e <z_flag_insert_mode_set.isra.0>:
static inline bool z_flag_insert_mode_set(const struct shell *shell, bool val)
   3638e:	b508      	push	{r3, lr}
   36390:	460b      	mov	r3, r1
	Z_SHELL_SET_FLAG_ATOMIC(shell, insert_mode, val, ret);
   36392:	f500 7017 	add.w	r0, r0, #604	; 0x25c
   36396:	2101      	movs	r1, #1
   36398:	b123      	cbz	r3, 363a4 <z_flag_insert_mode_set.isra.0+0x16>
   3639a:	f7ff ff40 	bl	3621e <atomic_or>
}
   3639e:	f000 0001 	and.w	r0, r0, #1
   363a2:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(shell, insert_mode, val, ret);
   363a4:	f06f 0101 	mvn.w	r1, #1
   363a8:	f7ff ff44 	bl	36234 <atomic_and>
   363ac:	e7f7      	b.n	3639e <z_flag_insert_mode_set.isra.0+0x10>

000363ae <transport_evt_handler>:
	signal = (evt_type == SHELL_TRANSPORT_EVT_RX_RDY) ?
   363ae:	688b      	ldr	r3, [r1, #8]
			&shell->ctx->signals[SHELL_SIGNAL_RXRDY] :
   363b0:	b920      	cbnz	r0, 363bc <transport_evt_handler+0xe>
   363b2:	f503 7018 	add.w	r0, r3, #608	; 0x260
	return z_impl_k_poll_signal_raise(sig, result);
   363b6:	2100      	movs	r1, #0
   363b8:	f7fe bc46 	b.w	34c48 <z_impl_k_poll_signal_raise>
   363bc:	f503 7024 	add.w	r0, r3, #656	; 0x290
   363c0:	e7f9      	b.n	363b6 <transport_evt_handler+0x8>

000363c2 <k_mutex_lock.constprop.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   363c2:	f7fd bd29 	b.w	33e18 <z_impl_k_mutex_lock>

000363c6 <shell_log_process>:
	int signaled = 0;
   363c6:	2300      	movs	r3, #0
{
   363c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   363ca:	4604      	mov	r4, r0
	int signaled = 0;
   363cc:	9300      	str	r3, [sp, #0]
			z_shell_cmd_line_erase(shell);
   363ce:	4620      	mov	r0, r4
   363d0:	f000 fb33 	bl	36a3a <z_shell_cmd_line_erase>
			processed = z_shell_log_backend_process(
   363d4:	69e0      	ldr	r0, [r4, #28]
   363d6:	f000 fe73 	bl	370c0 <z_shell_log_backend_process>
   363da:	4605      	mov	r5, r0
		z_shell_print_prompt_and_cmd(shell);
   363dc:	4620      	mov	r0, r4
		struct k_poll_signal *signal =
   363de:	68a6      	ldr	r6, [r4, #8]
		z_shell_print_prompt_and_cmd(shell);
   363e0:	f7fa fb6c 	bl	30abc <z_shell_print_prompt_and_cmd>
		if (shell->ctx->cmd_buff_len) {
   363e4:	68a3      	ldr	r3, [r4, #8]
		struct k_poll_signal *signal =
   363e6:	f506 7618 	add.w	r6, r6, #608	; 0x260
		if (shell->ctx->cmd_buff_len) {
   363ea:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
   363ec:	b123      	cbz	r3, 363f8 <shell_log_process+0x32>
	return z_impl_k_sleep(timeout);
   363ee:	f44f 70f6 	mov.w	r0, #492	; 0x1ec
   363f2:	2100      	movs	r1, #0
   363f4:	f7fe f908 	bl	34608 <z_impl_k_sleep>
	z_impl_k_poll_signal_check(sig, signaled, result);
   363f8:	4669      	mov	r1, sp
   363fa:	4630      	mov	r0, r6
   363fc:	aa01      	add	r2, sp, #4
   363fe:	f001 feff 	bl	38200 <z_impl_k_poll_signal_check>
	} while (processed && !signaled);
   36402:	b115      	cbz	r5, 3640a <shell_log_process+0x44>
   36404:	9b00      	ldr	r3, [sp, #0]
   36406:	2b00      	cmp	r3, #0
   36408:	d0e1      	beq.n	363ce <shell_log_process+0x8>
}
   3640a:	b002      	add	sp, #8
   3640c:	bd70      	pop	{r4, r5, r6, pc}

0003640e <shell_vfprintf>:
{
   3640e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36410:	4604      	mov	r4, r0
	if (state_get(shell) != SHELL_STATE_ACTIVE) {
   36412:	6880      	ldr	r0, [r0, #8]
{
   36414:	461f      	mov	r7, r3
	if (state_get(shell) != SHELL_STATE_ACTIVE) {
   36416:	7903      	ldrb	r3, [r0, #4]
{
   36418:	460d      	mov	r5, r1
	if (state_get(shell) != SHELL_STATE_ACTIVE) {
   3641a:	2b02      	cmp	r3, #2
{
   3641c:	4616      	mov	r6, r2
	if (state_get(shell) != SHELL_STATE_ACTIVE) {
   3641e:	d007      	beq.n	36430 <shell_vfprintf+0x22>
}
   36420:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	Z_SHELL_SET_FLAG_ATOMIC(shell, print_noinit, val, ret);
   36424:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   36428:	f500 7017 	add.w	r0, r0, #604	; 0x25c
   3642c:	f7ff bef7 	b.w	3621e <atomic_or>
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   36430:	f04f 32ff 	mov.w	r2, #4294967295
   36434:	f04f 33ff 	mov.w	r3, #4294967295
   36438:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
   3643c:	f7ff ffc1 	bl	363c2 <k_mutex_lock.constprop.0>
	if (!z_flag_cmd_ctx_get(shell)) {
   36440:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.cmd_ctx == 1;
   36442:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
   36446:	03da      	lsls	r2, r3, #15
   36448:	d402      	bmi.n	36450 <shell_vfprintf+0x42>
		z_shell_cmd_line_erase(shell);
   3644a:	4620      	mov	r0, r4
   3644c:	f000 faf5 	bl	36a3a <z_shell_cmd_line_erase>
	z_shell_vfprintf(shell, color, fmt, args);
   36450:	463b      	mov	r3, r7
   36452:	4632      	mov	r2, r6
   36454:	4629      	mov	r1, r5
   36456:	4620      	mov	r0, r4
   36458:	f000 fb46 	bl	36ae8 <z_shell_vfprintf>
	if (!z_flag_cmd_ctx_get(shell)) {
   3645c:	68a3      	ldr	r3, [r4, #8]
   3645e:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
   36462:	03db      	lsls	r3, r3, #15
   36464:	d402      	bmi.n	3646c <shell_vfprintf+0x5e>
		z_shell_print_prompt_and_cmd(shell);
   36466:	4620      	mov	r0, r4
   36468:	f7fa fb28 	bl	30abc <z_shell_print_prompt_and_cmd>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
   3646c:	6960      	ldr	r0, [r4, #20]
   3646e:	f000 f829 	bl	364c4 <z_shell_fprintf_buffer_flush>
	k_mutex_unlock(&shell->ctx->wr_mtx);
   36472:	68a0      	ldr	r0, [r4, #8]
}
   36474:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&shell->ctx->wr_mtx);
   36478:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
   3647c:	f7ff bf22 	b.w	362c4 <k_mutex_unlock>

00036480 <shell_fprintf>:
{
   36480:	b40c      	push	{r2, r3}
   36482:	b507      	push	{r0, r1, r2, lr}
   36484:	ab04      	add	r3, sp, #16
   36486:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
   3648a:	9301      	str	r3, [sp, #4]
	shell_vfprintf(shell, color, fmt, args);
   3648c:	f7ff ffbf 	bl	3640e <shell_vfprintf>
}
   36490:	b003      	add	sp, #12
   36492:	f85d eb04 	ldr.w	lr, [sp], #4
   36496:	b002      	add	sp, #8
   36498:	4770      	bx	lr

0003649a <shell_help>:
{
   3649a:	b510      	push	{r4, lr}
   3649c:	4604      	mov	r4, r0
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   3649e:	6880      	ldr	r0, [r0, #8]
   364a0:	f04f 32ff 	mov.w	r2, #4294967295
   364a4:	f04f 33ff 	mov.w	r3, #4294967295
   364a8:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
   364ac:	f7ff ff89 	bl	363c2 <k_mutex_lock.constprop.0>
	shell_internal_help_print(shell);
   364b0:	4620      	mov	r0, r4
   364b2:	f7f9 faf9 	bl	2faa8 <shell_internal_help_print>
	k_mutex_unlock(&shell->ctx->wr_mtx);
   364b6:	68a0      	ldr	r0, [r4, #8]
}
   364b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_mutex_unlock(&shell->ctx->wr_mtx);
   364bc:	f500 703c 	add.w	r0, r0, #752	; 0x2f0
   364c0:	f7ff bf00 	b.w	362c4 <k_mutex_unlock>

000364c4 <z_shell_fprintf_buffer_flush>:


void z_shell_fprintf_buffer_flush(const struct shell_fprintf *sh_fprintf)
{
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
   364c4:	6902      	ldr	r2, [r0, #16]
{
   364c6:	b510      	push	{r4, lr}
   364c8:	4604      	mov	r4, r0
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
   364ca:	6883      	ldr	r3, [r0, #8]
   364cc:	6812      	ldr	r2, [r2, #0]
   364ce:	6801      	ldr	r1, [r0, #0]
   364d0:	68c0      	ldr	r0, [r0, #12]
   364d2:	4798      	blx	r3
			   sh_fprintf->ctrl_blk->buffer_cnt);
	sh_fprintf->ctrl_blk->buffer_cnt = 0;
   364d4:	2200      	movs	r2, #0
   364d6:	6923      	ldr	r3, [r4, #16]
   364d8:	601a      	str	r2, [r3, #0]
}
   364da:	bd10      	pop	{r4, pc}

000364dc <out_func>:
{
   364dc:	b538      	push	{r3, r4, r5, lr}
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
   364de:	68cb      	ldr	r3, [r1, #12]
{
   364e0:	4605      	mov	r5, r0
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
   364e2:	7c1b      	ldrb	r3, [r3, #16]
{
   364e4:	460c      	mov	r4, r1
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
   364e6:	2b02      	cmp	r3, #2
   364e8:	d104      	bne.n	364f4 <out_func+0x18>
   364ea:	280a      	cmp	r0, #10
   364ec:	d102      	bne.n	364f4 <out_func+0x18>
		(void)out_func('\r', ctx);
   364ee:	200d      	movs	r0, #13
   364f0:	f7ff fff4 	bl	364dc <out_func>
	sh_fprintf->buffer[sh_fprintf->ctrl_blk->buffer_cnt] = (uint8_t)c;
   364f4:	6923      	ldr	r3, [r4, #16]
   364f6:	6822      	ldr	r2, [r4, #0]
   364f8:	681b      	ldr	r3, [r3, #0]
   364fa:	54d5      	strb	r5, [r2, r3]
	sh_fprintf->ctrl_blk->buffer_cnt++;
   364fc:	6922      	ldr	r2, [r4, #16]
   364fe:	6813      	ldr	r3, [r2, #0]
   36500:	3301      	adds	r3, #1
   36502:	6013      	str	r3, [r2, #0]
	if (sh_fprintf->ctrl_blk->buffer_cnt == sh_fprintf->buffer_size) {
   36504:	6862      	ldr	r2, [r4, #4]
   36506:	4293      	cmp	r3, r2
   36508:	d102      	bne.n	36510 <out_func+0x34>
		z_shell_fprintf_buffer_flush(sh_fprintf);
   3650a:	4620      	mov	r0, r4
   3650c:	f7ff ffda 	bl	364c4 <z_shell_fprintf_buffer_flush>
}
   36510:	2000      	movs	r0, #0
   36512:	bd38      	pop	{r3, r4, r5, pc}

00036514 <isspace>:
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   36514:	2820      	cmp	r0, #32
   36516:	d005      	beq.n	36524 <isspace+0x10>
   36518:	3809      	subs	r0, #9
   3651a:	2804      	cmp	r0, #4
   3651c:	bf8c      	ite	hi
   3651e:	2000      	movhi	r0, #0
   36520:	2001      	movls	r0, #1
   36522:	4770      	bx	lr
   36524:	2001      	movs	r0, #1
}
   36526:	4770      	bx	lr

00036528 <z_shell_strlen>:
{
   36528:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
   3652a:	b110      	cbz	r0, 36532 <z_shell_strlen+0xa>
   3652c:	f001 f81e 	bl	3756c <strlen>
   36530:	b280      	uxth	r0, r0
}
   36532:	bd08      	pop	{r3, pc}

00036534 <z_column_span_with_buffer_offsets_get>:
{
   36534:	b510      	push	{r4, lr}
	return (1 + ((buffer_pos + cons->name_len) % cons->terminal_wid));
   36536:	7b04      	ldrb	r4, [r0, #12]
   36538:	8943      	ldrh	r3, [r0, #10]
   3653a:	4422      	add	r2, r4
   3653c:	4421      	add	r1, r4
   3653e:	fbb2 f0f3 	udiv	r0, r2, r3
   36542:	fbb1 f4f3 	udiv	r4, r1, r3
   36546:	fb03 2010 	mls	r0, r3, r0, r2
   3654a:	fb03 1114 	mls	r1, r3, r4, r1
}
   3654e:	1a40      	subs	r0, r0, r1
   36550:	bd10      	pop	{r4, pc}

00036552 <z_row_span_with_buffer_offsets_get>:
{
   36552:	b510      	push	{r4, lr}
	return ((buffer_pos + cons->name_len) / cons->terminal_wid);
   36554:	7b04      	ldrb	r4, [r0, #12]
   36556:	8943      	ldrh	r3, [r0, #10]
   36558:	4421      	add	r1, r4
   3655a:	1910      	adds	r0, r2, r4
   3655c:	fbb0 f0f3 	udiv	r0, r0, r3
   36560:	fbb1 f1f3 	udiv	r1, r1, r3
}
   36564:	1a40      	subs	r0, r0, r1
   36566:	bd10      	pop	{r4, pc}

00036568 <z_shell_multiline_data_calc>:
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
   36568:	7b03      	ldrb	r3, [r0, #12]
{
   3656a:	b530      	push	{r4, r5, lr}
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
   3656c:	8944      	ldrh	r4, [r0, #10]
   3656e:	4419      	add	r1, r3
   36570:	fbb1 f5f4 	udiv	r5, r1, r4
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   36574:	441a      	add	r2, r3
   36576:	fbb2 f3f4 	udiv	r3, r2, r4
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
   3657a:	fb04 1115 	mls	r1, r4, r5, r1
   3657e:	3101      	adds	r1, #1
   36580:	8001      	strh	r1, [r0, #0]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   36582:	1c59      	adds	r1, r3, #1
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   36584:	fb04 2313 	mls	r3, r4, r3, r2
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
   36588:	3501      	adds	r5, #1
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   3658a:	3301      	adds	r3, #1
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
   3658c:	8085      	strh	r5, [r0, #4]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   3658e:	80c1      	strh	r1, [r0, #6]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   36590:	8043      	strh	r3, [r0, #2]
}
   36592:	bd30      	pop	{r4, r5, pc}

00036594 <z_shell_make_argv>:
{
   36594:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*argc = 0;
   36598:	2500      	movs	r5, #0
{
   3659a:	4606      	mov	r6, r0
   3659c:	460f      	mov	r7, r1
   3659e:	4614      	mov	r4, r2
   365a0:	4698      	mov	r8, r3
	*argc = 0;
   365a2:	6005      	str	r5, [r0, #0]
		c = *cmd;
   365a4:	7820      	ldrb	r0, [r4, #0]
		if (c == '\0') {
   365a6:	2800      	cmp	r0, #0
   365a8:	f000 80b5 	beq.w	36716 <z_shell_make_argv+0x182>
		if (isspace((int) c)) {
   365ac:	f7ff ffb2 	bl	36514 <isspace>
   365b0:	b118      	cbz	r0, 365ba <z_shell_make_argv+0x26>
			*cmd++ = '\0';
   365b2:	2300      	movs	r3, #0
   365b4:	f804 3b01 	strb.w	r3, [r4], #1
			continue;
   365b8:	e7f4      	b.n	365a4 <z_shell_make_argv+0x10>
		argv[(*argc)++] = cmd;
   365ba:	6832      	ldr	r2, [r6, #0]
   365bc:	1c53      	adds	r3, r2, #1
		if (*argc == max_argc) {
   365be:	4543      	cmp	r3, r8
		argv[(*argc)++] = cmd;
   365c0:	6033      	str	r3, [r6, #0]
   365c2:	f847 4022 	str.w	r4, [r7, r2, lsl #2]
		if (*argc == max_argc) {
   365c6:	f000 80a6 	beq.w	36716 <z_shell_make_argv+0x182>
	char quote = 0;
   365ca:	4605      	mov	r5, r0
		c = *cmd;
   365cc:	f894 9000 	ldrb.w	r9, [r4]
		if (c == '\0') {
   365d0:	f1b9 0f00 	cmp.w	r9, #0
   365d4:	d0e6      	beq.n	365a4 <z_shell_make_argv+0x10>
		if (!quote) {
   365d6:	2d00      	cmp	r5, #0
   365d8:	f040 8089 	bne.w	366ee <z_shell_make_argv+0x15a>
			switch (c) {
   365dc:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
   365e0:	d006      	beq.n	365f0 <z_shell_make_argv+0x5c>
   365e2:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
   365e6:	f000 808a 	beq.w	366fe <z_shell_make_argv+0x16a>
   365ea:	f1b9 0f22 	cmp.w	r9, #34	; 0x22
   365ee:	d176      	bne.n	366de <z_shell_make_argv+0x14a>
						z_shell_strlen(cmd));
   365f0:	4620      	mov	r0, r4
   365f2:	f7ff ff99 	bl	36528 <z_shell_strlen>
				memmove(cmd, cmd + 1,
   365f6:	1c61      	adds	r1, r4, #1
						z_shell_strlen(cmd));
   365f8:	4602      	mov	r2, r0
				memmove(cmd, cmd + 1,
   365fa:	4620      	mov	r0, r4
   365fc:	f000 fff1 	bl	375e2 <memmove>
				continue;
   36600:	464d      	mov	r5, r9
   36602:	e7e3      	b.n	365cc <z_shell_make_argv+0x38>
			memmove(cmd, cmd + 1, z_shell_strlen(cmd));
   36604:	4620      	mov	r0, r4
   36606:	f7ff ff8f 	bl	36528 <z_shell_strlen>
   3660a:	1c61      	adds	r1, r4, #1
   3660c:	4602      	mov	r2, r0
   3660e:	4620      	mov	r0, r4
   36610:	f000 ffe7 	bl	375e2 <memmove>
			quote = 0;
   36614:	2500      	movs	r5, #0
			continue;
   36616:	e7d9      	b.n	365cc <z_shell_make_argv+0x38>
			if (t == '0') {
   36618:	2930      	cmp	r1, #48	; 0x30
   3661a:	d125      	bne.n	36668 <z_shell_make_argv+0xd4>
   3661c:	2302      	movs	r3, #2
				uint8_t v = 0U;
   3661e:	f04f 0a00 	mov.w	sl, #0
					t = *(cmd + i);
   36622:	5ce1      	ldrb	r1, [r4, r3]
   36624:	fa5f f983 	uxtb.w	r9, r3
					if (t >= '0' && t <= '7') {
   36628:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   3662c:	b2d0      	uxtb	r0, r2
   3662e:	2807      	cmp	r0, #7
   36630:	d817      	bhi.n	36662 <z_shell_make_argv+0xce>
						v = (v << 3) | (t - '0');
   36632:	3301      	adds	r3, #1
   36634:	ea42 0aca 	orr.w	sl, r2, sl, lsl #3
				for (i = 2U; i < (2 + 3); i++) {
   36638:	2b05      	cmp	r3, #5
						v = (v << 3) | (t - '0');
   3663a:	fa5f fa8a 	uxtb.w	sl, sl
				for (i = 2U; i < (2 + 3); i++) {
   3663e:	d1f0      	bne.n	36622 <z_shell_make_argv+0x8e>
   36640:	4699      	mov	r9, r3
						z_shell_strlen(cmd) - (i - 2));
   36642:	4620      	mov	r0, r4
   36644:	f7ff ff70 	bl	36528 <z_shell_strlen>
					memmove(cmd, cmd + (i - 1),
   36648:	f109 3bff 	add.w	fp, r9, #4294967295
   3664c:	44a3      	add	fp, r4
						z_shell_strlen(cmd) - (i - 2));
   3664e:	1c82      	adds	r2, r0, #2
					memmove(cmd, cmd + (i - 1),
   36650:	4659      	mov	r1, fp
   36652:	4620      	mov	r0, r4
   36654:	eba2 0209 	sub.w	r2, r2, r9
   36658:	f000 ffc3 	bl	375e2 <memmove>
					*cmd++ = v;
   3665c:	f804 ab01 	strb.w	sl, [r4], #1
					continue;
   36660:	e7b4      	b.n	365cc <z_shell_make_argv+0x38>
				if (i > 2) {
   36662:	f1b9 0f02 	cmp.w	r9, #2
   36666:	d1ec      	bne.n	36642 <z_shell_make_argv+0xae>
			if (t == 'x') {
   36668:	2978      	cmp	r1, #120	; 0x78
   3666a:	d13e      	bne.n	366ea <z_shell_make_argv+0x156>
   3666c:	2302      	movs	r3, #2
				uint8_t v = 0U;
   3666e:	f04f 0900 	mov.w	r9, #0
					t = *(cmd + i);
   36672:	5ce2      	ldrb	r2, [r4, r3]
   36674:	b2d8      	uxtb	r0, r3
					if (t >= '0' && t <= '9') {
   36676:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   3667a:	fa5f fc81 	uxtb.w	ip, r1
   3667e:	f1bc 0f09 	cmp.w	ip, #9
   36682:	d819      	bhi.n	366b8 <z_shell_make_argv+0x124>
						v = (v << 4) | (t - '0');
   36684:	ea41 1209 	orr.w	r2, r1, r9, lsl #4
				for (i = 2U; i < (2 + 2); i++) {
   36688:	2b03      	cmp	r3, #3
						v = (v << 4) | (t - 'A' + 10);
   3668a:	fa5f f982 	uxtb.w	r9, r2
				for (i = 2U; i < (2 + 2); i++) {
   3668e:	d111      	bne.n	366b4 <z_shell_make_argv+0x120>
   36690:	f04f 0b04 	mov.w	fp, #4
						z_shell_strlen(cmd) - (i - 2));
   36694:	4620      	mov	r0, r4
   36696:	f7ff ff47 	bl	36528 <z_shell_strlen>
					memmove(cmd, cmd + (i - 1),
   3669a:	f10b 3aff 	add.w	sl, fp, #4294967295
   3669e:	44a2      	add	sl, r4
						z_shell_strlen(cmd) - (i - 2));
   366a0:	1c82      	adds	r2, r0, #2
					memmove(cmd, cmd + (i - 1),
   366a2:	4651      	mov	r1, sl
   366a4:	4620      	mov	r0, r4
   366a6:	eba2 020b 	sub.w	r2, r2, fp
   366aa:	f000 ff9a 	bl	375e2 <memmove>
					*cmd++ = v;
   366ae:	f804 9b01 	strb.w	r9, [r4], #1
					continue;
   366b2:	e78b      	b.n	365cc <z_shell_make_argv+0x38>
   366b4:	2303      	movs	r3, #3
   366b6:	e7dc      	b.n	36672 <z_shell_make_argv+0xde>
					} else if ((t >= 'a') &&
   366b8:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
   366bc:	2905      	cmp	r1, #5
   366be:	d803      	bhi.n	366c8 <z_shell_make_argv+0x134>
						v = (v << 4) | (t - 'a' + 10);
   366c0:	3a57      	subs	r2, #87	; 0x57
						v = (v << 4) | (t - 'A' + 10);
   366c2:	ea42 1209 	orr.w	r2, r2, r9, lsl #4
   366c6:	e7df      	b.n	36688 <z_shell_make_argv+0xf4>
					} else if ((t >= 'A') && (t <= 'F')) {
   366c8:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   366cc:	2905      	cmp	r1, #5
   366ce:	d801      	bhi.n	366d4 <z_shell_make_argv+0x140>
						v = (v << 4) | (t - 'A' + 10);
   366d0:	3a37      	subs	r2, #55	; 0x37
   366d2:	e7f6      	b.n	366c2 <z_shell_make_argv+0x12e>
				if (i > 2) {
   366d4:	2802      	cmp	r0, #2
   366d6:	d008      	beq.n	366ea <z_shell_make_argv+0x156>
   366d8:	f04f 0b03 	mov.w	fp, #3
   366dc:	e7da      	b.n	36694 <z_shell_make_argv+0x100>
		if (!quote && isspace((int) c)) {
   366de:	4648      	mov	r0, r9
   366e0:	f7ff ff18 	bl	36514 <isspace>
   366e4:	2800      	cmp	r0, #0
   366e6:	f47f af5d 	bne.w	365a4 <z_shell_make_argv+0x10>
		cmd += 1;
   366ea:	3401      	adds	r4, #1
   366ec:	e76e      	b.n	365cc <z_shell_make_argv+0x38>
		if (quote == c) {
   366ee:	45a9      	cmp	r9, r5
   366f0:	d088      	beq.n	36604 <z_shell_make_argv+0x70>
		if (quote && c == '\\') {
   366f2:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
   366f6:	d1f8      	bne.n	366ea <z_shell_make_argv+0x156>
   366f8:	7861      	ldrb	r1, [r4, #1]
			if (t == quote) {
   366fa:	428d      	cmp	r5, r1
   366fc:	d18c      	bne.n	36618 <z_shell_make_argv+0x84>
						z_shell_strlen(cmd));
   366fe:	4620      	mov	r0, r4
   36700:	f7ff ff12 	bl	36528 <z_shell_strlen>
				memmove(cmd, cmd + 1,
   36704:	f104 0901 	add.w	r9, r4, #1
						z_shell_strlen(cmd));
   36708:	4602      	mov	r2, r0
				memmove(cmd, cmd + 1,
   3670a:	4649      	mov	r1, r9
   3670c:	4620      	mov	r0, r4
   3670e:	f000 ff68 	bl	375e2 <memmove>
				cmd += 1;
   36712:	464c      	mov	r4, r9
				continue;
   36714:	e75a      	b.n	365cc <z_shell_make_argv+0x38>
}
   36716:	4628      	mov	r0, r5
   36718:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003671c <z_shell_pattern_remove>:
{
   3671c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3671e:	460e      	mov	r6, r1
	char *pattern_addr = strstr(buff, pattern);
   36720:	4611      	mov	r1, r2
{
   36722:	4615      	mov	r5, r2
   36724:	4607      	mov	r7, r0
	char *pattern_addr = strstr(buff, pattern);
   36726:	f000 fed6 	bl	374d6 <strstr>
   3672a:	4604      	mov	r4, r0
	uint16_t pattern_len = z_shell_strlen(pattern);
   3672c:	4628      	mov	r0, r5
   3672e:	f7ff fefb 	bl	36528 <z_shell_strlen>
   36732:	4605      	mov	r5, r0
	if (!pattern_addr) {
   36734:	b1c4      	cbz	r4, 36768 <z_shell_pattern_remove+0x4c>
	if (pattern_addr > buff) {
   36736:	42a7      	cmp	r7, r4
   36738:	d207      	bcs.n	3674a <z_shell_pattern_remove+0x2e>
		if (*(pattern_addr - 1) == ' ') {
   3673a:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   3673e:	2b20      	cmp	r3, #32
			pattern_len++; /* space needs to be removed as well */
   36740:	bf02      	ittt	eq
   36742:	3501      	addeq	r5, #1
   36744:	b2ad      	uxtheq	r5, r5
			pattern_addr--; /* set pointer to space */
   36746:	f104 34ff 	addeq.w	r4, r4, #4294967295
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   3674a:	4620      	mov	r0, r4
   3674c:	f7ff feec 	bl	36528 <z_shell_strlen>
	*buff_len -= pattern_len;
   36750:	8833      	ldrh	r3, [r6, #0]
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   36752:	1b42      	subs	r2, r0, r5
	*buff_len -= pattern_len;
   36754:	1b5b      	subs	r3, r3, r5
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   36756:	3201      	adds	r2, #1
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
   36758:	4620      	mov	r0, r4
	*buff_len -= pattern_len;
   3675a:	8033      	strh	r3, [r6, #0]
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
   3675c:	1961      	adds	r1, r4, r5
   3675e:	b292      	uxth	r2, r2
}
   36760:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
   36764:	f000 bf3d 	b.w	375e2 <memmove>
}
   36768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003676a <z_shell_find_cmd>:
 */
const struct shell_static_entry *z_shell_find_cmd(
					const struct shell_static_entry *parent,
					const char *cmd_str,
					struct shell_static_entry *dloc)
{
   3676a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3676e:	4605      	mov	r5, r0
   36770:	4688      	mov	r8, r1
   36772:	4617      	mov	r7, r2
	const struct shell_static_entry *entry;
	size_t idx = 0;
   36774:	2600      	movs	r6, #0

	while ((entry = z_shell_cmd_get(parent, idx++, dloc)) != NULL) {
   36776:	4631      	mov	r1, r6
   36778:	463a      	mov	r2, r7
   3677a:	4628      	mov	r0, r5
   3677c:	f7f9 fff4 	bl	30768 <z_shell_cmd_get>
   36780:	3601      	adds	r6, #1
   36782:	4604      	mov	r4, r0
   36784:	b128      	cbz	r0, 36792 <z_shell_find_cmd+0x28>
		if (strcmp(cmd_str, entry->syntax) == 0) {
   36786:	4640      	mov	r0, r8
   36788:	6821      	ldr	r1, [r4, #0]
   3678a:	f000 feff 	bl	3758c <strcmp>
   3678e:	2800      	cmp	r0, #0
   36790:	d1f1      	bne.n	36776 <z_shell_find_cmd+0xc>
			return entry;
		}
	}

	return NULL;
}
   36792:	4620      	mov	r0, r4
   36794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00036798 <z_shell_get_last_command>:
					size_t argc,
					const char *argv[],
					size_t *match_arg,
					struct shell_static_entry *dloc,
					bool only_static)
{
   36798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3679c:	461c      	mov	r4, r3
	const struct shell_static_entry *prev_entry = NULL;

	*match_arg = Z_SHELL_CMD_ROOT_LVL;
   3679e:	2300      	movs	r3, #0
{
   367a0:	460f      	mov	r7, r1
   367a2:	4616      	mov	r6, r2
   367a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
   367a8:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
	*match_arg = Z_SHELL_CMD_ROOT_LVL;
   367ac:	6023      	str	r3, [r4, #0]

	while (*match_arg < argc) {
   367ae:	6823      	ldr	r3, [r4, #0]

		if (IS_ENABLED(CONFIG_SHELL_WILDCARD)) {
			/* ignore wildcard argument */
			if (z_shell_has_wildcard(argv[*match_arg])) {
				(*match_arg)++;
				continue;
   367b0:	4605      	mov	r5, r0
	while (*match_arg < argc) {
   367b2:	42bb      	cmp	r3, r7
   367b4:	d21b      	bcs.n	367ee <z_shell_get_last_command+0x56>
			if (z_shell_has_wildcard(argv[*match_arg])) {
   367b6:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
   367ba:	f000 fce6 	bl	3718a <z_shell_has_wildcard>
   367be:	6823      	ldr	r3, [r4, #0]
   367c0:	4682      	mov	sl, r0
   367c2:	b118      	cbz	r0, 367cc <z_shell_get_last_command+0x34>
				(*match_arg)++;
   367c4:	3301      	adds	r3, #1
				continue;
   367c6:	4628      	mov	r0, r5
				(*match_arg)++;
   367c8:	6023      	str	r3, [r4, #0]
				continue;
   367ca:	e7f0      	b.n	367ae <z_shell_get_last_command+0x16>
			}
		}

		prev_entry = entry;
		entry = z_shell_find_cmd(entry, argv[*match_arg], dloc);
   367cc:	4642      	mov	r2, r8
   367ce:	4628      	mov	r0, r5
   367d0:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   367d4:	f7ff ffc9 	bl	3676a <z_shell_find_cmd>
		if (entry) {
   367d8:	b148      	cbz	r0, 367ee <z_shell_get_last_command+0x56>
			(*match_arg)++;
   367da:	6823      	ldr	r3, [r4, #0]
   367dc:	1c5a      	adds	r2, r3, #1
   367de:	6022      	str	r2, [r4, #0]
		} else {
			entry = prev_entry;
			break;
		}

		if (only_static && (entry == dloc)) {
   367e0:	f1b9 0f00 	cmp.w	r9, #0
   367e4:	d0e3      	beq.n	367ae <z_shell_get_last_command+0x16>
   367e6:	4580      	cmp	r8, r0
   367e8:	d1e1      	bne.n	367ae <z_shell_get_last_command+0x16>
			(*match_arg)--;
			return NULL;
   367ea:	4655      	mov	r5, sl
			(*match_arg)--;
   367ec:	6023      	str	r3, [r4, #0]
		}
	}

	return entry;
}
   367ee:	4628      	mov	r0, r5
   367f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000367f4 <z_shell_spaces_trim>:




void z_shell_spaces_trim(char *str)
{
   367f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   367f8:	4606      	mov	r6, r0
	uint16_t len = z_shell_strlen(str);
   367fa:	f7ff fe95 	bl	36528 <z_shell_strlen>
   367fe:	4605      	mov	r5, r0
	uint16_t shift = 0U;

	if (!str) {
   36800:	bb56      	cbnz	r6, 36858 <z_shell_spaces_trim+0x64>

				break;
			}
		}
	}
}
   36802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (shift > 0) {
   36806:	b14c      	cbz	r4, 3681c <z_shell_spaces_trim+0x28>
						len - j + 1);
   36808:	1c6a      	adds	r2, r5, #1
   3680a:	b29b      	uxth	r3, r3
					memmove(&str[i + 1],
   3680c:	3701      	adds	r7, #1
   3680e:	1ad2      	subs	r2, r2, r3
   36810:	19f0      	adds	r0, r6, r7
					len -= shift;
   36812:	1b2d      	subs	r5, r5, r4
					memmove(&str[i + 1],
   36814:	f000 fee5 	bl	375e2 <memmove>
					shift = 0U;
   36818:	464c      	mov	r4, r9
					len -= shift;
   3681a:	b2ad      	uxth	r5, r5
	for (uint16_t i = 0; i < len - 1; i++) {
   3681c:	f108 0801 	add.w	r8, r8, #1
   36820:	fa1f f388 	uxth.w	r3, r8
   36824:	1e6a      	subs	r2, r5, #1
   36826:	4293      	cmp	r3, r2
   36828:	461f      	mov	r7, r3
   3682a:	daea      	bge.n	36802 <z_shell_spaces_trim+0xe>
		if (isspace((int)str[i])) {
   3682c:	5df0      	ldrb	r0, [r6, r7]
   3682e:	f7ff fe71 	bl	36514 <isspace>
   36832:	2800      	cmp	r0, #0
   36834:	d0f2      	beq.n	3681c <z_shell_spaces_trim+0x28>
			for (uint16_t j = i + 1; j < len; j++) {
   36836:	3301      	adds	r3, #1
   36838:	b29b      	uxth	r3, r3
   3683a:	b29a      	uxth	r2, r3
   3683c:	4295      	cmp	r5, r2
   3683e:	d9ed      	bls.n	3681c <z_shell_spaces_trim+0x28>
				if (isspace((int)str[j])) {
   36840:	5cf0      	ldrb	r0, [r6, r3]
   36842:	18f1      	adds	r1, r6, r3
   36844:	f7ff fe66 	bl	36514 <isspace>
   36848:	4681      	mov	r9, r0
   3684a:	1c5a      	adds	r2, r3, #1
   3684c:	2800      	cmp	r0, #0
   3684e:	d0da      	beq.n	36806 <z_shell_spaces_trim+0x12>
					shift++;
   36850:	3401      	adds	r4, #1
   36852:	4613      	mov	r3, r2
   36854:	b2a4      	uxth	r4, r4
			for (uint16_t j = i + 1; j < len; j++) {
   36856:	e7f0      	b.n	3683a <z_shell_spaces_trim+0x46>
   36858:	f04f 0800 	mov.w	r8, #0
	uint16_t shift = 0U;
   3685c:	4644      	mov	r4, r8
   3685e:	e7df      	b.n	36820 <z_shell_spaces_trim+0x2c>

00036860 <z_shell_cmd_trim>:
		*buff_len = *buff_len - i;
	}
}

void z_shell_cmd_trim(const struct shell *shell)
{
   36860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
   36862:	6884      	ldr	r4, [r0, #8]
{
   36864:	4605      	mov	r5, r0
	if (buff[0] == '\0') {
   36866:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
   3686a:	b953      	cbnz	r3, 36882 <z_shell_cmd_trim+0x22>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
   3686c:	68ab      	ldr	r3, [r5, #8]
   3686e:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   36870:	875a      	strh	r2, [r3, #58]	; 0x3a
}
   36872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*buff_len -= 1U;
   36874:	3a01      	subs	r2, #1
   36876:	b292      	uxth	r2, r2
   36878:	8722      	strh	r2, [r4, #56]	; 0x38
		if (*buff_len == 0U) {
   3687a:	b922      	cbnz	r2, 36886 <z_shell_cmd_trim+0x26>
			buff[0] = '\0';
   3687c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
			return;
   36880:	e7f4      	b.n	3686c <z_shell_cmd_trim+0xc>
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
   36882:	f104 063e 	add.w	r6, r4, #62	; 0x3e
	while (isspace((int) buff[*buff_len - 1U])) {
   36886:	8f22      	ldrh	r2, [r4, #56]	; 0x38
   36888:	18b3      	adds	r3, r6, r2
   3688a:	f813 0c01 	ldrb.w	r0, [r3, #-1]
   3688e:	f7ff fe41 	bl	36514 <isspace>
   36892:	4603      	mov	r3, r0
   36894:	2800      	cmp	r0, #0
   36896:	d1ed      	bne.n	36874 <z_shell_cmd_trim+0x14>
	buff[*buff_len] = '\0';
   36898:	54b0      	strb	r0, [r6, r2]
	while (isspace((int) buff[i++])) {
   3689a:	b29f      	uxth	r7, r3
   3689c:	5df0      	ldrb	r0, [r6, r7]
   3689e:	fa16 f183 	uxtah	r1, r6, r3
   368a2:	f7ff fe37 	bl	36514 <isspace>
   368a6:	3301      	adds	r3, #1
   368a8:	2800      	cmp	r0, #0
   368aa:	d1f6      	bne.n	3689a <z_shell_cmd_trim+0x3a>
	if (--i > 0) {
   368ac:	2f00      	cmp	r7, #0
   368ae:	d0dd      	beq.n	3686c <z_shell_cmd_trim+0xc>
		memmove(buff, buff + i, (*buff_len + 1U) - i); /* +1 for '\0' */
   368b0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   368b2:	4630      	mov	r0, r6
   368b4:	3301      	adds	r3, #1
   368b6:	1bda      	subs	r2, r3, r7
   368b8:	f000 fe93 	bl	375e2 <memmove>
		*buff_len = *buff_len - i;
   368bc:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   368be:	1bdb      	subs	r3, r3, r7
   368c0:	8723      	strh	r3, [r4, #56]	; 0x38
   368c2:	e7d3      	b.n	3686c <z_shell_cmd_trim+0xc>

000368c4 <z_shell_raw_fprintf>:
{
   368c4:	b40e      	push	{r1, r2, r3}
   368c6:	b503      	push	{r0, r1, lr}
   368c8:	aa03      	add	r2, sp, #12
   368ca:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   368ce:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   368d0:	f7f9 ff36 	bl	30740 <z_shell_fprintf_fmt>
}
   368d4:	b002      	add	sp, #8
   368d6:	f85d eb04 	ldr.w	lr, [sp], #4
   368da:	b003      	add	sp, #12
   368dc:	4770      	bx	lr

000368de <full_line_cmd.isra.0>:
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
   368de:	6802      	ldr	r2, [r0, #0]
static inline bool full_line_cmd(const struct shell *shell)
   368e0:	b538      	push	{r3, r4, r5, lr}
   368e2:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
   368e4:	6810      	ldr	r0, [r2, #0]
   368e6:	8f15      	ldrh	r5, [r2, #56]	; 0x38
	return str == NULL ? 0U : (uint16_t)strlen(str);
   368e8:	b110      	cbz	r0, 368f0 <full_line_cmd.isra.0+0x12>
   368ea:	f000 fe3f 	bl	3756c <strlen>
   368ee:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   368f0:	6822      	ldr	r2, [r4, #0]
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
   368f2:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   368f4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
   368f6:	fbb3 f0f2 	udiv	r0, r3, r2
   368fa:	fb02 3010 	mls	r0, r2, r0, r3
}
   368fe:	fab0 f080 	clz	r0, r0
   36902:	0940      	lsrs	r0, r0, #5
   36904:	bd38      	pop	{r3, r4, r5, pc}

00036906 <z_shell_cursor_in_empty_line>:
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
   36906:	6882      	ldr	r2, [r0, #8]
{
   36908:	b538      	push	{r3, r4, r5, lr}
   3690a:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
   3690c:	6810      	ldr	r0, [r2, #0]
   3690e:	8f55      	ldrh	r5, [r2, #58]	; 0x3a
   36910:	b110      	cbz	r0, 36918 <z_shell_cursor_in_empty_line+0x12>
   36912:	f000 fe2b 	bl	3756c <strlen>
   36916:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   36918:	68a2      	ldr	r2, [r4, #8]
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
   3691a:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   3691c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
   3691e:	fbb3 f0f2 	udiv	r0, r3, r2
   36922:	fb02 3010 	mls	r0, r2, r0, r3
}
   36926:	fab0 f080 	clz	r0, r0
   3692a:	0940      	lsrs	r0, r0, #5
   3692c:	bd38      	pop	{r3, r4, r5, pc}

0003692e <z_shell_op_cursor_move>:
{
   3692e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36930:	4604      	mov	r4, r0
   36932:	460d      	mov	r5, r1
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
   36934:	6880      	ldr	r0, [r0, #8]
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
   36936:	8f41      	ldrh	r1, [r0, #58]	; 0x3a
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   36938:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   3693a:	3020      	adds	r0, #32
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
   3693c:	440d      	add	r5, r1
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   3693e:	f7ff fe13 	bl	36568 <z_shell_multiline_data_calc>
						&shell->ctx->vt100_ctx.cons,
   36942:	68a0      	ldr	r0, [r4, #8]
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
   36944:	b2ad      	uxth	r5, r5
	row_span = z_row_span_with_buffer_offsets_get(
   36946:	8f41      	ldrh	r1, [r0, #58]	; 0x3a
   36948:	462a      	mov	r2, r5
   3694a:	3020      	adds	r0, #32
   3694c:	f7ff fe01 	bl	36552 <z_row_span_with_buffer_offsets_get>
   36950:	4607      	mov	r7, r0
						&shell->ctx->vt100_ctx.cons,
   36952:	68a0      	ldr	r0, [r4, #8]
	col_span = z_column_span_with_buffer_offsets_get(
   36954:	462a      	mov	r2, r5
   36956:	8f41      	ldrh	r1, [r0, #58]	; 0x3a
   36958:	3020      	adds	r0, #32
   3695a:	f7ff fdeb 	bl	36534 <z_column_span_with_buffer_offsets_get>
   3695e:	4606      	mov	r6, r0
	z_shell_op_cursor_vert_move(shell, -row_span);
   36960:	4279      	negs	r1, r7
   36962:	4620      	mov	r0, r4
   36964:	f7f9 ff2e 	bl	307c4 <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, col_span);
   36968:	4631      	mov	r1, r6
   3696a:	4620      	mov	r0, r4
   3696c:	f7f9 ff3a 	bl	307e4 <z_shell_op_cursor_horiz_move>
	shell->ctx->cmd_buff_pos = new_pos;
   36970:	68a3      	ldr	r3, [r4, #8]
   36972:	875d      	strh	r5, [r3, #58]	; 0x3a
}
   36974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00036976 <z_shell_op_cursor_word_move>:
{
   36976:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (val < 0) {
   3697a:	1e0c      	subs	r4, r1, #0
{
   3697c:	4606      	mov	r6, r0
	if (val < 0) {
   3697e:	da32      	bge.n	369e6 <z_shell_op_cursor_word_move+0x70>
		sign = -1;
   36980:	f04f 35ff 	mov.w	r5, #4294967295
		val = -val;
   36984:	4264      	negs	r4, r4
   36986:	b224      	sxth	r4, r4
		sign = -1;
   36988:	b2af      	uxth	r7, r5
   3698a:	e022      	b.n	369d2 <z_shell_op_cursor_word_move+0x5c>
		shift = shift_calc(shell->ctx->cmd_buff,
   3698c:	68b3      	ldr	r3, [r6, #8]
	bool found = false;
   3698e:	2000      	movs	r0, #0
		shift = shift_calc(shell->ctx->cmd_buff,
   36990:	f8b3 e03a 	ldrh.w	lr, [r3, #58]	; 0x3a
   36994:	f8b3 9038 	ldrh.w	r9, [r3, #56]	; 0x38
   36998:	f103 083e 	add.w	r8, r3, #62	; 0x3e
   3699c:	4673      	mov	r3, lr
		idx = pos + ret * sign;
   3699e:	eba3 010e 	sub.w	r1, r3, lr
   369a2:	b209      	sxth	r1, r1
		if (((idx == 0U) && (sign < 0)) ||
   369a4:	b90b      	cbnz	r3, 369aa <z_shell_op_cursor_word_move+0x34>
   369a6:	1c6a      	adds	r2, r5, #1
   369a8:	d010      	beq.n	369cc <z_shell_op_cursor_word_move+0x56>
   369aa:	4599      	cmp	r9, r3
   369ac:	d101      	bne.n	369b2 <z_shell_op_cursor_word_move+0x3c>
		    ((idx == len) && (sign > 0))) {
   369ae:	2d01      	cmp	r5, #1
   369b0:	d00c      	beq.n	369cc <z_shell_op_cursor_word_move+0x56>
		if (isalnum((int)str[idx]) != 0) {
   369b2:	f818 2003 	ldrb.w	r2, [r8, r3]
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   369b6:	f042 0c20 	orr.w	ip, r2, #32
   369ba:	f1ac 0c61 	sub.w	ip, ip, #97	; 0x61
	return (int)(isalpha(chr) || isdigit(chr));
   369be:	f1bc 0f19 	cmp.w	ip, #25
   369c2:	d90c      	bls.n	369de <z_shell_op_cursor_word_move+0x68>
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   369c4:	3a30      	subs	r2, #48	; 0x30
	return (int)(isalpha(chr) || isdigit(chr));
   369c6:	2a09      	cmp	r2, #9
   369c8:	d909      	bls.n	369de <z_shell_op_cursor_word_move+0x68>
			if (found) {
   369ca:	b148      	cbz	r0, 369e0 <z_shell_op_cursor_word_move+0x6a>
		z_shell_op_cursor_move(shell, sign * shift);
   369cc:	4630      	mov	r0, r6
   369ce:	f7ff ffae 	bl	3692e <z_shell_op_cursor_move>
	while (val--) {
   369d2:	3c01      	subs	r4, #1
   369d4:	b224      	sxth	r4, r4
   369d6:	1c63      	adds	r3, r4, #1
   369d8:	d1d8      	bne.n	3698c <z_shell_op_cursor_word_move+0x16>
}
   369da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			found = true;
   369de:	2001      	movs	r0, #1
	while (1) {
   369e0:	443b      	add	r3, r7
   369e2:	b29b      	uxth	r3, r3
		idx = pos + ret * sign;
   369e4:	e7db      	b.n	3699e <z_shell_op_cursor_word_move+0x28>
		sign = 1;
   369e6:	2501      	movs	r5, #1
   369e8:	e7ce      	b.n	36988 <z_shell_op_cursor_word_move+0x12>

000369ea <z_shell_op_cursor_home_move>:
	z_shell_op_cursor_move(shell, -shell->ctx->cmd_buff_pos);
   369ea:	6883      	ldr	r3, [r0, #8]
   369ec:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
   369ee:	4249      	negs	r1, r1
   369f0:	b209      	sxth	r1, r1
   369f2:	f7ff bf9c 	b.w	3692e <z_shell_op_cursor_move>

000369f6 <z_shell_op_cursor_end_move>:
	z_shell_op_cursor_move(shell, shell->ctx->cmd_buff_len -
   369f6:	6883      	ldr	r3, [r0, #8]
   369f8:	8f19      	ldrh	r1, [r3, #56]	; 0x38
   369fa:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
   369fc:	1ac9      	subs	r1, r1, r3
   369fe:	b209      	sxth	r1, r1
   36a00:	f7ff bf95 	b.w	3692e <z_shell_op_cursor_move>

00036a04 <z_shell_op_left_arrow>:
	if (shell->ctx->cmd_buff_pos > 0) {
   36a04:	6883      	ldr	r3, [r0, #8]
   36a06:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
   36a08:	b11b      	cbz	r3, 36a12 <z_shell_op_left_arrow+0xe>
		z_shell_op_cursor_move(shell, -1);
   36a0a:	f04f 31ff 	mov.w	r1, #4294967295
   36a0e:	f7ff bf8e 	b.w	3692e <z_shell_op_cursor_move>
}
   36a12:	4770      	bx	lr

00036a14 <z_shell_op_right_arrow>:
	if (shell->ctx->cmd_buff_pos < shell->ctx->cmd_buff_len) {
   36a14:	6883      	ldr	r3, [r0, #8]
   36a16:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
   36a18:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
   36a1a:	429a      	cmp	r2, r3
   36a1c:	d202      	bcs.n	36a24 <z_shell_op_right_arrow+0x10>
		z_shell_op_cursor_move(shell, 1);
   36a1e:	2101      	movs	r1, #1
   36a20:	f7ff bf85 	b.w	3692e <z_shell_op_cursor_move>
}
   36a24:	4770      	bx	lr

00036a26 <z_shell_op_delete_from_cursor>:
	shell->ctx->cmd_buff_len = shell->ctx->cmd_buff_pos;
   36a26:	6883      	ldr	r3, [r0, #8]
   36a28:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
   36a2a:	871a      	strh	r2, [r3, #56]	; 0x38
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos] = '\0';
   36a2c:	4413      	add	r3, r2
   36a2e:	2200      	movs	r2, #0
   36a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	z_clear_eos(shell);
   36a34:	6940      	ldr	r0, [r0, #20]
   36a36:	f7f9 bebd 	b.w	307b4 <z_clear_eos.isra.0>

00036a3a <z_shell_cmd_line_erase>:
{
   36a3a:	b510      	push	{r4, lr}
   36a3c:	4604      	mov	r4, r0
	z_shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
   36a3e:	6880      	ldr	r0, [r0, #8]
   36a40:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   36a42:	8f41      	ldrh	r1, [r0, #58]	; 0x3a
   36a44:	3020      	adds	r0, #32
   36a46:	f7ff fd8f 	bl	36568 <z_shell_multiline_data_calc>
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
   36a4a:	68a3      	ldr	r3, [r4, #8]
	z_shell_op_cursor_horiz_move(shell,
   36a4c:	4620      	mov	r0, r4
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
   36a4e:	8c19      	ldrh	r1, [r3, #32]
	z_shell_op_cursor_horiz_move(shell,
   36a50:	f1c1 0101 	rsb	r1, r1, #1
   36a54:	f7f9 fec6 	bl	307e4 <z_shell_op_cursor_horiz_move>
	z_shell_op_cursor_vert_move(shell, shell->ctx->vt100_ctx.cons.cur_y - 1);
   36a58:	68a3      	ldr	r3, [r4, #8]
   36a5a:	4620      	mov	r0, r4
   36a5c:	8c99      	ldrh	r1, [r3, #36]	; 0x24
   36a5e:	3901      	subs	r1, #1
   36a60:	f7f9 feb0 	bl	307c4 <z_shell_op_cursor_vert_move>
	z_clear_eos(shell);
   36a64:	6960      	ldr	r0, [r4, #20]
}
   36a66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_clear_eos(shell);
   36a6a:	f7f9 bea3 	b.w	307b4 <z_clear_eos.isra.0>

00036a6e <z_shell_write>:
{
   36a6e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   36a72:	4606      	mov	r6, r0
   36a74:	4688      	mov	r8, r1
   36a76:	4615      	mov	r5, r2
	size_t offset = 0;
   36a78:	2700      	movs	r7, #0
	while (length) {
   36a7a:	b915      	cbnz	r5, 36a82 <z_shell_write+0x14>
}
   36a7c:	b002      	add	sp, #8
   36a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		int err = shell->iface->api->write(shell->iface,
   36a82:	6870      	ldr	r0, [r6, #4]
   36a84:	462a      	mov	r2, r5
   36a86:	6803      	ldr	r3, [r0, #0]
   36a88:	eb08 0107 	add.w	r1, r8, r7
   36a8c:	68dc      	ldr	r4, [r3, #12]
   36a8e:	ab01      	add	r3, sp, #4
   36a90:	47a0      	blx	r4
		offset += tmp_cnt;
   36a92:	9b01      	ldr	r3, [sp, #4]
   36a94:	441f      	add	r7, r3
		length -= tmp_cnt;
   36a96:	1aed      	subs	r5, r5, r3
		if (tmp_cnt == 0 &&
   36a98:	2b00      	cmp	r3, #0
   36a9a:	d1ee      	bne.n	36a7a <z_shell_write+0xc>
		    (shell->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
   36a9c:	68b4      	ldr	r4, [r6, #8]
   36a9e:	7923      	ldrb	r3, [r4, #4]
		if (tmp_cnt == 0 &&
   36aa0:	2b03      	cmp	r3, #3
   36aa2:	d0ea      	beq.n	36a7a <z_shell_write+0xc>
	if (IS_ENABLED(CONFIG_MULTITHREADING) &&
   36aa4:	2b02      	cmp	r3, #2
   36aa6:	d80e      	bhi.n	36ac6 <z_shell_write+0x58>
	return z_impl_k_poll(events, num_events, timeout);
   36aa8:	f04f 32ff 	mov.w	r2, #4294967295
   36aac:	f04f 33ff 	mov.w	r3, #4294967295
   36ab0:	2101      	movs	r1, #1
   36ab2:	f504 7037 	add.w	r0, r4, #732	; 0x2dc
   36ab6:	f7fe f86b 	bl	34b90 <z_impl_k_poll>
		k_poll_signal_reset(&shell->ctx->signals[SHELL_SIGNAL_TXDONE]);
   36aba:	68b0      	ldr	r0, [r6, #8]
   36abc:	f500 7024 	add.w	r0, r0, #656	; 0x290
	z_impl_k_poll_signal_reset(sig);
   36ac0:	f001 fb9b 	bl	381fa <z_impl_k_poll_signal_reset>
   36ac4:	e7d9      	b.n	36a7a <z_shell_write+0xc>
	return shell->ctx->internal.flags.tx_rdy == 1;
   36ac6:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
		while (!z_flag_tx_rdy_get(shell)) {
   36aca:	069b      	lsls	r3, r3, #26
   36acc:	d5fb      	bpl.n	36ac6 <z_shell_write+0x58>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   36ace:	f504 7417 	add.w	r4, r4, #604	; 0x25c
   36ad2:	e8d4 3fef 	ldaex	r3, [r4]
   36ad6:	f023 0320 	bic.w	r3, r3, #32
   36ada:	e8c4 3fe2 	stlex	r2, r3, [r4]
   36ade:	2a00      	cmp	r2, #0
   36ae0:	d0cb      	beq.n	36a7a <z_shell_write+0xc>
   36ae2:	e7f6      	b.n	36ad2 <z_shell_write+0x64>

00036ae4 <z_shell_print_stream>:
	z_shell_write((const struct shell *) user_ctx, data, len);
   36ae4:	f7ff bfc3 	b.w	36a6e <z_shell_write>

00036ae8 <z_shell_vfprintf>:

void z_shell_vfprintf(const struct shell *shell, enum shell_vt100_color color,
		      const char *fmt, va_list args)
{
   36ae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   36aea:	460f      	mov	r7, r1
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
	    shell->ctx->internal.flags.use_colors &&
   36aec:	6881      	ldr	r1, [r0, #8]
{
   36aee:	461e      	mov	r6, r3
	    shell->ctx->internal.flags.use_colors &&
   36af0:	f8d1 325c 	ldr.w	r3, [r1, #604]	; 0x25c
{
   36af4:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
   36af6:	079b      	lsls	r3, r3, #30
{
   36af8:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
   36afa:	d517      	bpl.n	36b2c <z_shell_vfprintf+0x44>
	    shell->ctx->internal.flags.use_colors &&
   36afc:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
   36b00:	42bb      	cmp	r3, r7
   36b02:	d013      	beq.n	36b2c <z_shell_vfprintf+0x44>
			     enum shell_vt100_color color);

static inline void z_shell_vt100_colors_store(const struct shell *shell,
					      struct shell_vt100_colors *color)
{
	memcpy(color, &shell->ctx->vt100_ctx.col, sizeof(*color));
   36b04:	2202      	movs	r2, #2
   36b06:	312e      	adds	r1, #46	; 0x2e
   36b08:	a801      	add	r0, sp, #4
   36b0a:	f000 fd81 	bl	37610 <memcpy>
	    (color != shell->ctx->vt100_ctx.col.col)) {
		struct shell_vt100_colors col;

		z_shell_vt100_colors_store(shell, &col);
		z_shell_vt100_color_set(shell, color);
   36b0e:	4639      	mov	r1, r7
   36b10:	4620      	mov	r0, r4
   36b12:	f7f9 febd 	bl	30890 <z_shell_vt100_color_set>

		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
   36b16:	4629      	mov	r1, r5
   36b18:	6960      	ldr	r0, [r4, #20]
   36b1a:	4632      	mov	r2, r6
   36b1c:	f7f9 fe10 	bl	30740 <z_shell_fprintf_fmt>

		z_shell_vt100_colors_restore(shell, &col);
   36b20:	4620      	mov	r0, r4
   36b22:	a901      	add	r1, sp, #4
   36b24:	f7f9 fed8 	bl	308d8 <z_shell_vt100_colors_restore>
	} else {
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
	}
}
   36b28:	b003      	add	sp, #12
   36b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
   36b2c:	4632      	mov	r2, r6
   36b2e:	4629      	mov	r1, r5
   36b30:	6960      	ldr	r0, [r4, #20]
   36b32:	f7f9 fe05 	bl	30740 <z_shell_fprintf_fmt>
}
   36b36:	e7f7      	b.n	36b28 <z_shell_vfprintf+0x40>

00036b38 <z_shell_fprintf>:

void z_shell_fprintf(const struct shell *shell,
			    enum shell_vt100_color color,
			    const char *fmt, ...)
{
   36b38:	b40c      	push	{r2, r3}
   36b3a:	b507      	push	{r0, r1, r2, lr}
   36b3c:	ab04      	add	r3, sp, #16
   36b3e:	f853 2b04 	ldr.w	r2, [r3], #4
	__ASSERT_NO_MSG(shell->fprintf_ctx);
	__ASSERT_NO_MSG(fmt);

	va_list args;

	va_start(args, fmt);
   36b42:	9301      	str	r3, [sp, #4]
	z_shell_vfprintf(shell, color, fmt, args);
   36b44:	f7ff ffd0 	bl	36ae8 <z_shell_vfprintf>
	va_end(args);
}
   36b48:	b003      	add	sp, #12
   36b4a:	f85d eb04 	ldr.w	lr, [sp], #4
   36b4e:	b002      	add	sp, #8
   36b50:	4770      	bx	lr

00036b52 <data_insert>:
{
   36b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   36b56:	6886      	ldr	r6, [r0, #8]
{
   36b58:	4607      	mov	r7, r0
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   36b5a:	8f35      	ldrh	r5, [r6, #56]	; 0x38
{
   36b5c:	4688      	mov	r8, r1
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
   36b5e:	18ab      	adds	r3, r5, r2
   36b60:	2bff      	cmp	r3, #255	; 0xff
{
   36b62:	4614      	mov	r4, r2
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
   36b64:	dc1f      	bgt.n	36ba6 <data_insert+0x54>
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   36b66:	8f73      	ldrh	r3, [r6, #58]	; 0x3a
   36b68:	1aed      	subs	r5, r5, r3
	char *curr_pos = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
   36b6a:	333e      	adds	r3, #62	; 0x3e
   36b6c:	441e      	add	r6, r3
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   36b6e:	b2ad      	uxth	r5, r5
	memmove(curr_pos + len, curr_pos, after);
   36b70:	462a      	mov	r2, r5
   36b72:	4631      	mov	r1, r6
   36b74:	1930      	adds	r0, r6, r4
   36b76:	f000 fd34 	bl	375e2 <memmove>
	memcpy(curr_pos, data, len);
   36b7a:	4622      	mov	r2, r4
   36b7c:	4641      	mov	r1, r8
   36b7e:	4630      	mov	r0, r6
   36b80:	f000 fd46 	bl	37610 <memcpy>
	shell->ctx->cmd_buff_len += len;
   36b84:	68ba      	ldr	r2, [r7, #8]
   36b86:	8f13      	ldrh	r3, [r2, #56]	; 0x38
   36b88:	4423      	add	r3, r4
   36b8a:	b29b      	uxth	r3, r3
   36b8c:	8713      	strh	r3, [r2, #56]	; 0x38
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
   36b8e:	4413      	add	r3, r2
   36b90:	2200      	movs	r2, #0
   36b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	if (!z_flag_echo_get(shell)) {
   36b96:	68bb      	ldr	r3, [r7, #8]
	return shell->ctx->internal.flags.echo == 1;
   36b98:	f8d3 125c 	ldr.w	r1, [r3, #604]	; 0x25c
   36b9c:	0749      	lsls	r1, r1, #29
   36b9e:	d404      	bmi.n	36baa <data_insert+0x58>
		shell->ctx->cmd_buff_pos += len;
   36ba0:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
   36ba2:	4414      	add	r4, r2
   36ba4:	875c      	strh	r4, [r3, #58]	; 0x3a
}
   36ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	reprint_from_cursor(shell, after, false);
   36baa:	4629      	mov	r1, r5
   36bac:	4638      	mov	r0, r7
}
   36bae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	reprint_from_cursor(shell, after, false);
   36bb2:	f7f9 bf0b 	b.w	309cc <reprint_from_cursor>

00036bb6 <z_shell_op_completion_insert>:
	data_insert(shell, compl, compl_len);
   36bb6:	f7ff bfcc 	b.w	36b52 <data_insert>

00036bba <z_shell_op_char_delete>:
{
   36bba:	b538      	push	{r3, r4, r5, lr}
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   36bbc:	6883      	ldr	r3, [r0, #8]
{
   36bbe:	4605      	mov	r5, r0
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   36bc0:	8f1c      	ldrh	r4, [r3, #56]	; 0x38
   36bc2:	8f58      	ldrh	r0, [r3, #58]	; 0x3a
   36bc4:	1a24      	subs	r4, r4, r0
   36bc6:	b2a4      	uxth	r4, r4
	if (diff == 0U) {
   36bc8:	b18c      	cbz	r4, 36bee <z_shell_op_char_delete+0x34>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
   36bca:	303e      	adds	r0, #62	; 0x3e
   36bcc:	4418      	add	r0, r3
	memmove(str, str + 1, diff);
   36bce:	4622      	mov	r2, r4
   36bd0:	1c41      	adds	r1, r0, #1
   36bd2:	f000 fd06 	bl	375e2 <memmove>
	--shell->ctx->cmd_buff_len;
   36bd6:	68aa      	ldr	r2, [r5, #8]
	reprint_from_cursor(shell, --diff, true);
   36bd8:	1e61      	subs	r1, r4, #1
	--shell->ctx->cmd_buff_len;
   36bda:	8f13      	ldrh	r3, [r2, #56]	; 0x38
	reprint_from_cursor(shell, --diff, true);
   36bdc:	4628      	mov	r0, r5
	--shell->ctx->cmd_buff_len;
   36bde:	3b01      	subs	r3, #1
   36be0:	8713      	strh	r3, [r2, #56]	; 0x38
	reprint_from_cursor(shell, --diff, true);
   36be2:	b289      	uxth	r1, r1
   36be4:	2201      	movs	r2, #1
}
   36be6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	reprint_from_cursor(shell, --diff, true);
   36bea:	f7f9 beef 	b.w	309cc <reprint_from_cursor>
}
   36bee:	bd38      	pop	{r3, r4, r5, pc}

00036bf0 <z_shell_op_char_backspace>:
	if ((shell->ctx->cmd_buff_len == 0) ||
   36bf0:	6883      	ldr	r3, [r0, #8]
{
   36bf2:	b510      	push	{r4, lr}
	if ((shell->ctx->cmd_buff_len == 0) ||
   36bf4:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
{
   36bf6:	4604      	mov	r4, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
   36bf8:	b152      	cbz	r2, 36c10 <z_shell_op_char_backspace+0x20>
   36bfa:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
   36bfc:	b143      	cbz	r3, 36c10 <z_shell_op_char_backspace+0x20>
	z_shell_op_cursor_move(shell, -1);
   36bfe:	f04f 31ff 	mov.w	r1, #4294967295
   36c02:	f7ff fe94 	bl	3692e <z_shell_op_cursor_move>
	z_shell_op_char_delete(shell);
   36c06:	4620      	mov	r0, r4
}
   36c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_op_char_delete(shell);
   36c0c:	f7ff bfd5 	b.w	36bba <z_shell_op_char_delete>
}
   36c10:	bd10      	pop	{r4, pc}

00036c12 <z_impl_uart_irq_tx_disable>:
	if (api->irq_tx_disable != NULL) {
   36c12:	6883      	ldr	r3, [r0, #8]
   36c14:	6a1b      	ldr	r3, [r3, #32]
   36c16:	b103      	cbz	r3, 36c1a <z_impl_uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
   36c18:	4718      	bx	r3
}
   36c1a:	4770      	bx	lr

00036c1c <read>:
{
   36c1c:	b510      	push	{r4, lr}
   36c1e:	461c      	mov	r4, r3
	*cnt = ring_buf_get(sh_uart->rx_ringbuf, data, length);
   36c20:	6843      	ldr	r3, [r0, #4]
   36c22:	68d8      	ldr	r0, [r3, #12]
   36c24:	f7fe fe28 	bl	35878 <ring_buf_get>
   36c28:	6020      	str	r0, [r4, #0]
}
   36c2a:	2000      	movs	r0, #0
   36c2c:	bd10      	pop	{r4, pc}

00036c2e <write>:
{
   36c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
   36c32:	6845      	ldr	r5, [r0, #4]
{
   36c34:	461e      	mov	r6, r3
		!sh_uart->ctrl_blk->blocking_tx) {
   36c36:	682b      	ldr	r3, [r5, #0]
{
   36c38:	460c      	mov	r4, r1
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
   36c3a:	7c1b      	ldrb	r3, [r3, #16]
{
   36c3c:	4617      	mov	r7, r2
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
   36c3e:	b153      	cbz	r3, 36c56 <write+0x28>
   36c40:	eb01 0802 	add.w	r8, r1, r2
		for (size_t i = 0; i < length; i++) {
   36c44:	4544      	cmp	r4, r8
   36c46:	682b      	ldr	r3, [r5, #0]
   36c48:	d11c      	bne.n	36c84 <write+0x56>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
   36c4a:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   36c4e:	2001      	movs	r0, #1
		*cnt = length;
   36c50:	6037      	str	r7, [r6, #0]
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
   36c52:	4790      	blx	r2
   36c54:	e013      	b.n	36c7e <write+0x50>
	*cnt = ring_buf_put(sh_uart->tx_ringbuf, data, length);
   36c56:	68a8      	ldr	r0, [r5, #8]
   36c58:	f7fe fda4 	bl	357a4 <ring_buf_put>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   36c5c:	2101      	movs	r1, #1
   36c5e:	682b      	ldr	r3, [r5, #0]
   36c60:	6030      	str	r0, [r6, #0]
   36c62:	330c      	adds	r3, #12
   36c64:	e8d3 2fef 	ldaex	r2, [r3]
   36c68:	e8c3 1fe0 	stlex	r0, r1, [r3]
   36c6c:	2800      	cmp	r0, #0
   36c6e:	d1f9      	bne.n	36c64 <write+0x36>
	if (atomic_set(&sh_uart->ctrl_blk->tx_busy, 1) == 0) {
   36c70:	b92a      	cbnz	r2, 36c7e <write+0x50>
		uart_irq_tx_enable(sh_uart->ctrl_blk->dev);
   36c72:	682b      	ldr	r3, [r5, #0]
   36c74:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable != NULL) {
   36c76:	6883      	ldr	r3, [r0, #8]
   36c78:	69db      	ldr	r3, [r3, #28]
   36c7a:	b103      	cbz	r3, 36c7e <write+0x50>
		api->irq_tx_enable(dev);
   36c7c:	4798      	blx	r3
}
   36c7e:	2000      	movs	r0, #0
   36c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
   36c84:	6818      	ldr	r0, [r3, #0]
   36c86:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
   36c8a:	6883      	ldr	r3, [r0, #8]
   36c8c:	685b      	ldr	r3, [r3, #4]
   36c8e:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   36c90:	e7d8      	b.n	36c44 <write+0x16>

00036c92 <uninit>:
		const struct device *dev = sh_uart->ctrl_blk->dev;
   36c92:	6843      	ldr	r3, [r0, #4]
{
   36c94:	b510      	push	{r4, lr}
		const struct device *dev = sh_uart->ctrl_blk->dev;
   36c96:	681b      	ldr	r3, [r3, #0]
   36c98:	681c      	ldr	r4, [r3, #0]
   36c9a:	4620      	mov	r0, r4
   36c9c:	f7ff ffb9 	bl	36c12 <z_impl_uart_irq_tx_disable>
	if (api->irq_rx_disable != NULL) {
   36ca0:	68a3      	ldr	r3, [r4, #8]
   36ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   36ca4:	b10b      	cbz	r3, 36caa <uninit+0x18>
		api->irq_rx_disable(dev);
   36ca6:	4620      	mov	r0, r4
   36ca8:	4798      	blx	r3
}
   36caa:	2000      	movs	r0, #0
   36cac:	bd10      	pop	{r4, pc}

00036cae <enable>:
{
   36cae:	b508      	push	{r3, lr}
	sh_uart->ctrl_blk->blocking_tx = blocking_tx;
   36cb0:	6843      	ldr	r3, [r0, #4]
   36cb2:	681b      	ldr	r3, [r3, #0]
   36cb4:	7419      	strb	r1, [r3, #16]
	if (blocking_tx) {
   36cb6:	b111      	cbz	r1, 36cbe <enable+0x10>
		uart_irq_tx_disable(sh_uart->ctrl_blk->dev);
   36cb8:	6818      	ldr	r0, [r3, #0]
   36cba:	f7ff ffaa 	bl	36c12 <z_impl_uart_irq_tx_disable>
}
   36cbe:	2000      	movs	r0, #0
   36cc0:	bd08      	pop	{r3, pc}

00036cc2 <z_shell_raw_fprintf>:
{
   36cc2:	b40e      	push	{r1, r2, r3}
   36cc4:	b503      	push	{r0, r1, lr}
   36cc6:	aa03      	add	r2, sp, #12
   36cc8:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   36ccc:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   36cce:	f7f9 fd37 	bl	30740 <z_shell_fprintf_fmt>
}
   36cd2:	b002      	add	sp, #8
   36cd4:	f85d eb04 	ldr.w	lr, [sp], #4
   36cd8:	b003      	add	sp, #12
   36cda:	4770      	bx	lr

00036cdc <cmd_shell_stats_reset>:
	shell->stats->log_lost_cnt = 0;
   36cdc:	6983      	ldr	r3, [r0, #24]
   36cde:	2000      	movs	r0, #0
   36ce0:	6018      	str	r0, [r3, #0]
}
   36ce2:	4770      	bx	lr

00036ce4 <z_shell_raw_fprintf>:
{
   36ce4:	b40e      	push	{r1, r2, r3}
   36ce6:	b503      	push	{r0, r1, lr}
   36ce8:	aa03      	add	r2, sp, #12
   36cea:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   36cee:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   36cf0:	f7f9 fd26 	bl	30740 <z_shell_fprintf_fmt>
}
   36cf4:	b002      	add	sp, #8
   36cf6:	f85d eb04 	ldr.w	lr, [sp], #4
   36cfa:	b003      	add	sp, #12
   36cfc:	4770      	bx	lr

00036cfe <cmd_echo_on>:
	Z_SHELL_SET_FLAG_ATOMIC(shell, echo, val, ret);
   36cfe:	6883      	ldr	r3, [r0, #8]
   36d00:	f503 7317 	add.w	r3, r3, #604	; 0x25c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   36d04:	e8d3 2fef 	ldaex	r2, [r3]
   36d08:	f042 0204 	orr.w	r2, r2, #4
   36d0c:	e8c3 2fe1 	stlex	r1, r2, [r3]
   36d10:	2900      	cmp	r1, #0
   36d12:	d1f7      	bne.n	36d04 <cmd_echo_on+0x6>
}
   36d14:	2000      	movs	r0, #0
   36d16:	4770      	bx	lr

00036d18 <cmd_colors_off>:
	Z_SHELL_SET_FLAG_ATOMIC(shell, use_colors, val, ret);
   36d18:	6883      	ldr	r3, [r0, #8]
   36d1a:	f503 7317 	add.w	r3, r3, #604	; 0x25c
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   36d1e:	e8d3 2fef 	ldaex	r2, [r3]
   36d22:	f022 0202 	bic.w	r2, r2, #2
   36d26:	e8c3 2fe1 	stlex	r1, r2, [r3]
   36d2a:	2900      	cmp	r1, #0
   36d2c:	d1f7      	bne.n	36d1e <cmd_colors_off+0x6>
}
   36d2e:	2000      	movs	r0, #0
   36d30:	4770      	bx	lr

00036d32 <cmd_bacskpace_mode_backspace>:
	Z_SHELL_SET_FLAG_ATOMIC(shell, mode_delete, val, ret);
   36d32:	6883      	ldr	r3, [r0, #8]
   36d34:	f503 7317 	add.w	r3, r3, #604	; 0x25c
   36d38:	e8d3 2fef 	ldaex	r2, [r3]
   36d3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   36d40:	e8c3 2fe1 	stlex	r1, r2, [r3]
   36d44:	2900      	cmp	r1, #0
   36d46:	d1f7      	bne.n	36d38 <cmd_bacskpace_mode_backspace+0x6>
}
   36d48:	2000      	movs	r0, #0
   36d4a:	4770      	bx	lr

00036d4c <cmd_echo_off>:
	Z_SHELL_SET_FLAG_ATOMIC(shell, echo, val, ret);
   36d4c:	6883      	ldr	r3, [r0, #8]
   36d4e:	f503 7317 	add.w	r3, r3, #604	; 0x25c
   36d52:	e8d3 2fef 	ldaex	r2, [r3]
   36d56:	f022 0204 	bic.w	r2, r2, #4
   36d5a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   36d5e:	2900      	cmp	r1, #0
   36d60:	d1f7      	bne.n	36d52 <cmd_echo_off+0x6>
}
   36d62:	2000      	movs	r0, #0
   36d64:	4770      	bx	lr

00036d66 <cmd_bacskpace_mode_delete>:
	Z_SHELL_SET_FLAG_ATOMIC(shell, mode_delete, val, ret);
   36d66:	6883      	ldr	r3, [r0, #8]
   36d68:	f503 7317 	add.w	r3, r3, #604	; 0x25c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   36d6c:	e8d3 2fef 	ldaex	r2, [r3]
   36d70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   36d74:	e8c3 2fe1 	stlex	r1, r2, [r3]
   36d78:	2900      	cmp	r1, #0
   36d7a:	d1f7      	bne.n	36d6c <cmd_bacskpace_mode_delete+0x6>
}
   36d7c:	2000      	movs	r0, #0
   36d7e:	4770      	bx	lr

00036d80 <cmd_colors_on>:
	Z_SHELL_SET_FLAG_ATOMIC(shell, use_colors, val, ret);
   36d80:	6883      	ldr	r3, [r0, #8]
   36d82:	f503 7317 	add.w	r3, r3, #604	; 0x25c
   36d86:	e8d3 2fef 	ldaex	r2, [r3]
   36d8a:	f042 0202 	orr.w	r2, r2, #2
   36d8e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   36d92:	2900      	cmp	r1, #0
   36d94:	d1f7      	bne.n	36d86 <cmd_colors_on+0x6>
}
   36d96:	2000      	movs	r0, #0
   36d98:	4770      	bx	lr

00036d9a <remove_from_tail.part.0>:
	memcpy(item->data, src, len);
	sys_dlist_prepend(&history->list, &item->dnode);
}

/* Returns true if element was removed. */
static bool remove_from_tail(struct shell_history *history)
   36d9a:	b508      	push	{r3, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   36d9c:	6883      	ldr	r3, [r0, #8]

	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);

	total_len = offsetof(struct shell_history_item, data) +
			h_item->len + h_item->padding;
	ring_buf_get_finish(history->ring_buf, total_len);
   36d9e:	6800      	ldr	r0, [r0, #0]
	sys_dnode_t *const next = node->next;
   36da0:	e9d3 2100 	ldrd	r2, r1, [r3]
	prev->next = next;
   36da4:	600a      	str	r2, [r1, #0]
	next->prev = prev;
   36da6:	6051      	str	r1, [r2, #4]
	node->next = NULL;
   36da8:	2200      	movs	r2, #0
			h_item->len + h_item->padding;
   36daa:	8919      	ldrh	r1, [r3, #8]
	node->prev = NULL;
   36dac:	e9c3 2200 	strd	r2, r2, [r3]
   36db0:	895b      	ldrh	r3, [r3, #10]
   36db2:	4419      	add	r1, r3
	ring_buf_get_finish(history->ring_buf, total_len);
   36db4:	310c      	adds	r1, #12
   36db6:	f7fe fd30 	bl	3581a <ring_buf_get_finish>

	return true;
}
   36dba:	2001      	movs	r0, #1
   36dbc:	bd08      	pop	{r3, pc}

00036dbe <z_shell_history_mode_exit>:
	history->current = NULL;
   36dbe:	2300      	movs	r3, #0
   36dc0:	60c3      	str	r3, [r0, #12]
}
   36dc2:	4770      	bx	lr

00036dc4 <z_shell_history_get>:
{
   36dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36dc6:	461f      	mov	r7, r3
	return list->head == list;
   36dc8:	4603      	mov	r3, r0
   36dca:	f853 4f04 	ldr.w	r4, [r3, #4]!
   36dce:	4616      	mov	r6, r2
	if (sys_dlist_is_empty(&history->list)) {
   36dd0:	429c      	cmp	r4, r3
   36dd2:	d102      	bne.n	36dda <z_shell_history_get+0x16>
		*len = 0U;
   36dd4:	2000      	movs	r0, #0
   36dd6:	8038      	strh	r0, [r7, #0]
}
   36dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!up) { /* button down */
   36dda:	68c5      	ldr	r5, [r0, #12]
   36ddc:	b9b1      	cbnz	r1, 36e0c <z_shell_history_get+0x48>
		if (history->current == NULL) {
   36dde:	2d00      	cmp	r5, #0
   36de0:	d0f8      	beq.n	36dd4 <z_shell_history_get+0x10>
	return (node == list->head) ? NULL : node->prev;
   36de2:	42ac      	cmp	r4, r5
   36de4:	d102      	bne.n	36dec <z_shell_history_get+0x28>
	history->current = l_item;
   36de6:	2300      	movs	r3, #0
   36de8:	60c3      	str	r3, [r0, #12]
	if (l_item) {
   36dea:	e7f3      	b.n	36dd4 <z_shell_history_get+0x10>
   36dec:	686c      	ldr	r4, [r5, #4]
	history->current = l_item;
   36dee:	60c4      	str	r4, [r0, #12]
	if (l_item) {
   36df0:	2c00      	cmp	r4, #0
   36df2:	d0ef      	beq.n	36dd4 <z_shell_history_get+0x10>
		memcpy(dst, h_item->data, h_item->len);
   36df4:	8922      	ldrh	r2, [r4, #8]
   36df6:	4630      	mov	r0, r6
   36df8:	f104 010c 	add.w	r1, r4, #12
   36dfc:	f000 fc08 	bl	37610 <memcpy>
		dst[*len] = '\0';
   36e00:	2200      	movs	r2, #0
		*len = h_item->len;
   36e02:	8923      	ldrh	r3, [r4, #8]
		return true;
   36e04:	2001      	movs	r0, #1
		*len = h_item->len;
   36e06:	803b      	strh	r3, [r7, #0]
		dst[*len] = '\0';
   36e08:	54f2      	strb	r2, [r6, r3]
		return true;
   36e0a:	e7e5      	b.n	36dd8 <z_shell_history_get+0x14>
		sys_dlist_peek_head_not_empty(&history->list) :
   36e0c:	2d00      	cmp	r5, #0
   36e0e:	d0ee      	beq.n	36dee <z_shell_history_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
   36e10:	6883      	ldr	r3, [r0, #8]
   36e12:	42ab      	cmp	r3, r5
   36e14:	d0e7      	beq.n	36de6 <z_shell_history_get+0x22>
   36e16:	682c      	ldr	r4, [r5, #0]
   36e18:	e7e9      	b.n	36dee <z_shell_history_get+0x2a>

00036e1a <z_shell_history_purge>:

void z_shell_history_purge(struct shell_history *history)
{
   36e1a:	b538      	push	{r3, r4, r5, lr}
   36e1c:	4604      	mov	r4, r0
	if (sys_dlist_is_empty(&history->list)) {
   36e1e:	1d05      	adds	r5, r0, #4
   36e20:	6863      	ldr	r3, [r4, #4]
   36e22:	42ab      	cmp	r3, r5
   36e24:	d004      	beq.n	36e30 <z_shell_history_purge+0x16>
   36e26:	4620      	mov	r0, r4
   36e28:	f7ff ffb7 	bl	36d9a <remove_from_tail.part.0>
	while (remove_from_tail(history)) {
   36e2c:	2800      	cmp	r0, #0
   36e2e:	d1f7      	bne.n	36e20 <z_shell_history_purge+0x6>
	}
}
   36e30:	bd38      	pop	{r3, r4, r5, pc}

00036e32 <z_shell_history_put>:

void z_shell_history_put(struct shell_history *history, uint8_t *line,
			 size_t len)
{
   36e32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);

	/* align to word. */
	total_len += padding;

	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   36e36:	6803      	ldr	r3, [r0, #0]
	uint32_t total_len = len + offsetof(struct shell_history_item, data);
   36e38:	f102 050c 	add.w	r5, r2, #12
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
   36e3c:	f1c5 0800 	rsb	r8, r5, #0
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   36e40:	691b      	ldr	r3, [r3, #16]
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
   36e42:	f008 0803 	and.w	r8, r8, #3
	total_len += padding;
   36e46:	4445      	add	r5, r8
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   36e48:	429d      	cmp	r5, r3
{
   36e4a:	4604      	mov	r4, r0
   36e4c:	468a      	mov	sl, r1
   36e4e:	4617      	mov	r7, r2
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   36e50:	d841      	bhi.n	36ed6 <z_shell_history_put+0xa4>
	history->current = NULL;
   36e52:	2300      	movs	r3, #0
   36e54:	60c3      	str	r3, [r0, #12]
		return;
	}

	z_shell_history_mode_exit(history);

	if (len == 0) {
   36e56:	2a00      	cmp	r2, #0
   36e58:	d03d      	beq.n	36ed6 <z_shell_history_put+0xa4>
		return;
	}

	l_item = sys_dlist_peek_head(&history->list);
   36e5a:	f100 0904 	add.w	r9, r0, #4
	return list->head == list;
   36e5e:	6840      	ldr	r0, [r0, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   36e60:	4581      	cmp	r9, r0
   36e62:	d12d      	bne.n	36ec0 <z_shell_history_put+0x8e>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
   36e64:	9301      	str	r3, [sp, #4]
			add_to_head(history, h_item, line, len, padding);
			ring_buf_put_finish(history->ring_buf, claim_len);
			break;
		}

		ring_buf_put_finish(history->ring_buf, 0);
   36e66:	f04f 0b00 	mov.w	fp, #0
		claim_len = ring_buf_put_claim(history->ring_buf,
   36e6a:	462a      	mov	r2, r5
   36e6c:	6820      	ldr	r0, [r4, #0]
   36e6e:	a901      	add	r1, sp, #4
   36e70:	f7fe fc6f 	bl	35752 <ring_buf_put_claim>
		if (claim_len < total_len) {
   36e74:	4285      	cmp	r5, r0
		claim_len = ring_buf_put_claim(history->ring_buf,
   36e76:	4606      	mov	r6, r0
		if (claim_len < total_len) {
   36e78:	d930      	bls.n	36edc <z_shell_history_put+0xaa>
				ring_buf_put_claim(history->ring_buf,
   36e7a:	462a      	mov	r2, r5
   36e7c:	6820      	ldr	r0, [r4, #0]
   36e7e:	a901      	add	r1, sp, #4
   36e80:	f7fe fc67 	bl	35752 <ring_buf_put_claim>
			if (claim2_len == total_len) {
   36e84:	4285      	cmp	r5, r0
   36e86:	d12a      	bne.n	36ede <z_shell_history_put+0xac>
				ring_buf_put_finish(history->ring_buf,
   36e88:	4631      	mov	r1, r6
   36e8a:	6820      	ldr	r0, [r4, #0]
				padding += claim_len;
   36e8c:	44b0      	add	r8, r6
				ring_buf_put_finish(history->ring_buf,
   36e8e:	f7fe fc7c 	bl	3578a <ring_buf_put_finish>
				padding += claim_len;
   36e92:	462e      	mov	r6, r5
   36e94:	fa1f f888 	uxth.w	r8, r8
			add_to_head(history, h_item, line, len, padding);
   36e98:	9d01      	ldr	r5, [sp, #4]
	memcpy(item->data, src, len);
   36e9a:	4651      	mov	r1, sl
   36e9c:	463a      	mov	r2, r7
	item->len = len;
   36e9e:	812f      	strh	r7, [r5, #8]
	item->padding = padding;
   36ea0:	f8a5 800a 	strh.w	r8, [r5, #10]
	memcpy(item->data, src, len);
   36ea4:	f105 000c 	add.w	r0, r5, #12
   36ea8:	f000 fbb2 	bl	37610 <memcpy>
	sys_dnode_t *const head = list->head;
   36eac:	6863      	ldr	r3, [r4, #4]
			ring_buf_put_finish(history->ring_buf, claim_len);
   36eae:	4631      	mov	r1, r6
	node->prev = list;
   36eb0:	e9c5 3900 	strd	r3, r9, [r5]
   36eb4:	6820      	ldr	r0, [r4, #0]
	head->prev = node;
   36eb6:	605d      	str	r5, [r3, #4]
	list->head = node;
   36eb8:	6065      	str	r5, [r4, #4]
   36eba:	f7fe fc66 	bl	3578a <ring_buf_put_finish>
			break;
   36ebe:	e00a      	b.n	36ed6 <z_shell_history_put+0xa4>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
   36ec0:	9001      	str	r0, [sp, #4]
	if (l_item &&
   36ec2:	2800      	cmp	r0, #0
   36ec4:	d0cf      	beq.n	36e66 <z_shell_history_put+0x34>
	   (h_item->len == len) &&
   36ec6:	8903      	ldrh	r3, [r0, #8]
	if (l_item &&
   36ec8:	4293      	cmp	r3, r2
   36eca:	d1cc      	bne.n	36e66 <z_shell_history_put+0x34>
	   (memcmp(h_item->data, line, len) == 0)) {
   36ecc:	300c      	adds	r0, #12
   36ece:	f000 fb78 	bl	375c2 <memcmp>
	   (h_item->len == len) &&
   36ed2:	2800      	cmp	r0, #0
   36ed4:	d1c7      	bne.n	36e66 <z_shell_history_put+0x34>
			 * of ring buffer capacity length.
			 */
			ring_buf_reset(history->ring_buf);
		}
	} while (1);
}
   36ed6:	b003      	add	sp, #12
   36ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (claim_len == total_len) {
   36edc:	d0dc      	beq.n	36e98 <z_shell_history_put+0x66>
		ring_buf_put_finish(history->ring_buf, 0);
   36ede:	2100      	movs	r1, #0
   36ee0:	6820      	ldr	r0, [r4, #0]
   36ee2:	f7fe fc52 	bl	3578a <ring_buf_put_finish>
	if (sys_dlist_is_empty(&history->list)) {
   36ee6:	6863      	ldr	r3, [r4, #4]
   36ee8:	4599      	cmp	r9, r3
   36eea:	d108      	bne.n	36efe <z_shell_history_put+0xcc>
   36eec:	2208      	movs	r2, #8
			ring_buf_reset(history->ring_buf);
   36eee:	6820      	ldr	r0, [r4, #0]
   36ef0:	2100      	movs	r1, #0
	buf->tail = 0;
   36ef2:	e9c0 bb00 	strd	fp, fp, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
   36ef6:	4410      	add	r0, r2
   36ef8:	f000 fbb5 	bl	37666 <memset>
}
   36efc:	e7b5      	b.n	36e6a <z_shell_history_put+0x38>
   36efe:	4620      	mov	r0, r4
   36f00:	f7ff ff4b 	bl	36d9a <remove_from_tail.part.0>
		if (remove_from_tail(history) == false) {
   36f04:	2800      	cmp	r0, #0
   36f06:	d1b0      	bne.n	36e6a <z_shell_history_put+0x38>
   36f08:	e7f0      	b.n	36eec <z_shell_history_put+0xba>

00036f0a <z_shell_history_init>:

void z_shell_history_init(struct shell_history *history)
{
	sys_dlist_init(&history->list);
   36f0a:	1d03      	adds	r3, r0, #4
	list->tail = (sys_dnode_t *)list;
   36f0c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	history->current = NULL;
   36f10:	2300      	movs	r3, #0
   36f12:	60c3      	str	r3, [r0, #12]
}
   36f14:	4770      	bx	lr

00036f16 <msg_from_fifo.isra.0>:
		backend->control_block->dropped_cnt = 0;
		backend->control_block->state = SHELL_LOG_BACKEND_ENABLED;
	}
}

static struct log_msg *msg_from_fifo(const struct shell_log_backend *backend)
   36f16:	b507      	push	{r0, r1, r2, lr}
	return z_impl_k_msgq_get(msgq, data, timeout);
   36f18:	2200      	movs	r2, #0
   36f1a:	2300      	movs	r3, #0
   36f1c:	4669      	mov	r1, sp
   36f1e:	f7fc ff1b 	bl	33d58 <z_impl_k_msgq_get>
	struct shell_log_backend_msg msg;
	int err;

	err = k_msgq_get(backend->msgq, &msg, K_NO_WAIT);

	return (err == 0) ? msg.msg : NULL;
   36f22:	b918      	cbnz	r0, 36f2c <msg_from_fifo.isra.0+0x16>
   36f24:	9800      	ldr	r0, [sp, #0]
}
   36f26:	b003      	add	sp, #12
   36f28:	f85d fb04 	ldr.w	pc, [sp], #4
	return (err == 0) ? msg.msg : NULL;
   36f2c:	2000      	movs	r0, #0
   36f2e:	e7fa      	b.n	36f26 <msg_from_fifo.isra.0+0x10>

00036f30 <dropped>:
	}
}

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   36f30:	6843      	ldr	r3, [r0, #4]
   36f32:	681b      	ldr	r3, [r3, #0]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   36f34:	e9d3 3206 	ldrd	r3, r2, [r3, #24]
   36f38:	e8d3 0fef 	ldaex	r0, [r3]
   36f3c:	4408      	add	r0, r1
   36f3e:	e8c3 0fec 	stlex	ip, r0, [r3]
   36f42:	f1bc 0f00 	cmp.w	ip, #0
   36f46:	d1f7      	bne.n	36f38 <dropped+0x8>
   36f48:	68d3      	ldr	r3, [r2, #12]
   36f4a:	e8d3 2fef 	ldaex	r2, [r3]
   36f4e:	440a      	add	r2, r1
   36f50:	e8c3 2fe0 	stlex	r0, r2, [r3]
   36f54:	2800      	cmp	r0, #0
   36f56:	d1f8      	bne.n	36f4a <dropped+0x1a>
	const struct shell_log_backend *log_backend = shell->log_backend;

	atomic_add(&shell->stats->log_lost_cnt, cnt);
	atomic_add(&log_backend->control_block->dropped_cnt, cnt);
}
   36f58:	4770      	bx	lr

00036f5a <put>:
{
   36f5a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   36f5e:	6843      	ldr	r3, [r0, #4]
	log_msg_get(msg);
   36f60:	4608      	mov	r0, r1
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   36f62:	681c      	ldr	r4, [r3, #0]
{
   36f64:	460d      	mov	r5, r1
			shell->ctx->internal.flags.use_colors;
   36f66:	68a3      	ldr	r3, [r4, #8]
   36f68:	f8d3 625c 	ldr.w	r6, [r3, #604]	; 0x25c
	log_msg_get(msg);
   36f6c:	f7fe ff0b 	bl	35d86 <log_msg_get>
	switch (shell->log_backend->control_block->state) {
   36f70:	69e3      	ldr	r3, [r4, #28]
			shell->ctx->internal.flags.use_colors;
   36f72:	f3c6 0640 	ubfx	r6, r6, #1, #1
	switch (shell->log_backend->control_block->state) {
   36f76:	68db      	ldr	r3, [r3, #12]
   36f78:	791b      	ldrb	r3, [r3, #4]
   36f7a:	2b01      	cmp	r3, #1
   36f7c:	d005      	beq.n	36f8a <put+0x30>
   36f7e:	2b03      	cmp	r3, #3
   36f80:	d068      	beq.n	37054 <put+0xfa>
		log_msg_put(msg);
   36f82:	4628      	mov	r0, r5
   36f84:	f7fe ff2a 	bl	35ddc <log_msg_put>
}
   36f88:	e032      	b.n	36ff0 <put+0x96>
	struct shell_log_backend_msg t_msg = {
   36f8a:	9500      	str	r5, [sp, #0]
	return z_impl_k_uptime_ticks();
   36f8c:	f000 ffaf 	bl	37eee <z_impl_k_uptime_ticks>
   36f90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   36f94:	460a      	mov	r2, r1
   36f96:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   36f9a:	f240 36e7 	movw	r6, #999	; 0x3e7
   36f9e:	2700      	movs	r7, #0
   36fa0:	fba0 0103 	umull	r0, r1, r0, r3
   36fa4:	fb03 1102 	mla	r1, r3, r2, r1
   36fa8:	0bc3      	lsrs	r3, r0, #15
   36faa:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
	return (uint32_t)k_uptime_get();
   36fae:	9301      	str	r3, [sp, #4]
   36fb0:	46b1      	mov	r9, r6
   36fb2:	46ba      	mov	sl, r7
		err = k_msgq_put(shell->log_backend->msgq, &t_msg,
   36fb4:	69e3      	ldr	r3, [r4, #28]
   36fb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   36fba:	6919      	ldr	r1, [r3, #16]
   36fbc:	f8d3 8004 	ldr.w	r8, [r3, #4]
   36fc0:	fbe5 9a01 	umlal	r9, sl, r5, r1
   36fc4:	2300      	movs	r3, #0
   36fc6:	4648      	mov	r0, r9
   36fc8:	4651      	mov	r1, sl
   36fca:	f7e9 f989 	bl	202e0 <__aeabi_uldivmod>
   36fce:	4602      	mov	r2, r0
   36fd0:	460b      	mov	r3, r1
	return z_impl_k_msgq_put(msgq, data, timeout);
   36fd2:	4669      	mov	r1, sp
   36fd4:	4640      	mov	r0, r8
   36fd6:	f7fc fe65 	bl	33ca4 <z_impl_k_msgq_put>
		switch (err) {
   36fda:	f110 0f23 	cmn.w	r0, #35	; 0x23
   36fde:	d00a      	beq.n	36ff6 <put+0x9c>
   36fe0:	300b      	adds	r0, #11
   36fe2:	d008      	beq.n	36ff6 <put+0x9c>
			signal = &shell->ctx->signals[SHELL_SIGNAL_LOG_MSG];
   36fe4:	68a0      	ldr	r0, [r4, #8]
   36fe6:	f500 701c 	add.w	r0, r0, #624	; 0x270
	return z_impl_k_poll_signal_raise(sig, result);
   36fea:	2100      	movs	r1, #0
   36fec:	f7fd fe2c 	bl	34c48 <z_impl_k_poll_signal_raise>
}
   36ff0:	b004      	add	sp, #16
   36ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct k_msgq *msgq = shell->log_backend->msgq;
   36ff6:	69e3      	ldr	r3, [r4, #28]
   36ff8:	f8d3 8004 	ldr.w	r8, [r3, #4]
	uint32_t timeout = shell->log_backend->timeout;
   36ffc:	f8d3 9010 	ldr.w	r9, [r3, #16]
	return z_impl_k_uptime_ticks();
   37000:	f000 ff75 	bl	37eee <z_impl_k_uptime_ticks>
   37004:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   37008:	460a      	mov	r2, r1
   3700a:	fba0 0103 	umull	r0, r1, r0, r3
   3700e:	fb03 1102 	mla	r1, r3, r2, r1
   37012:	ea4f 3ad0 	mov.w	sl, r0, lsr #15
   37016:	ea4a 4a41 	orr.w	sl, sl, r1, lsl #17
	return z_impl_k_msgq_peek(msgq, data);
   3701a:	4640      	mov	r0, r8
   3701c:	a902      	add	r1, sp, #8
   3701e:	f000 fde8 	bl	37bf2 <z_impl_k_msgq_peek>
		if (err == 0 && ((now - msg.timestamp) > timeout)) {
   37022:	2800      	cmp	r0, #0
   37024:	d1c4      	bne.n	36fb0 <put+0x56>
   37026:	9b03      	ldr	r3, [sp, #12]
   37028:	ebaa 0303 	sub.w	r3, sl, r3
   3702c:	4599      	cmp	r9, r3
   3702e:	d2bf      	bcs.n	36fb0 <put+0x56>
	return z_impl_k_msgq_get(msgq, data, timeout);
   37030:	2300      	movs	r3, #0
   37032:	2200      	movs	r2, #0
   37034:	a902      	add	r1, sp, #8
   37036:	4640      	mov	r0, r8
   37038:	f7fc fe8e 	bl	33d58 <z_impl_k_msgq_get>
			log_msg_put(msg.msg);
   3703c:	9802      	ldr	r0, [sp, #8]
   3703e:	f7fe fecd 	bl	35ddc <log_msg_put>
   37042:	69a3      	ldr	r3, [r4, #24]
   37044:	e8d3 2fef 	ldaex	r2, [r3]
   37048:	3201      	adds	r2, #1
   3704a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   3704e:	2900      	cmp	r1, #0
   37050:	d0e3      	beq.n	3701a <put+0xc0>
   37052:	e7f7      	b.n	37044 <put+0xea>
		z_shell_cmd_line_erase(shell);
   37054:	4620      	mov	r0, r4
   37056:	f7ff fcf0 	bl	36a3a <z_shell_cmd_line_erase>
		msg_process(shell->log_backend->log_output, msg, colors);
   3705a:	69e3      	ldr	r3, [r4, #28]
		flags |= LOG_OUTPUT_FLAG_COLORS;
   3705c:	2e00      	cmp	r6, #0
	log_output_msg_process(log_output, msg, flags);
   3705e:	bf0c      	ite	eq
   37060:	220e      	moveq	r2, #14
   37062:	220f      	movne	r2, #15
   37064:	4629      	mov	r1, r5
   37066:	6898      	ldr	r0, [r3, #8]
   37068:	f7f7 ff94 	bl	2ef94 <log_output_msg_process>
	log_msg_put(msg);
   3706c:	e789      	b.n	36f82 <put+0x28>

0003706e <z_shell_log_backend_output_func>:
{
   3706e:	4613      	mov	r3, r2
   37070:	b510      	push	{r4, lr}
   37072:	460c      	mov	r4, r1
	z_shell_print_stream(ctx, data, length);
   37074:	460a      	mov	r2, r1
   37076:	4601      	mov	r1, r0
   37078:	4618      	mov	r0, r3
   3707a:	f7ff fd33 	bl	36ae4 <z_shell_print_stream>
}
   3707e:	4620      	mov	r0, r4
   37080:	bd10      	pop	{r4, pc}

00037082 <z_shell_log_backend_enable>:
{
   37082:	b538      	push	{r3, r4, r5, lr}
   37084:	4604      	mov	r4, r0
   37086:	460d      	mov	r5, r1
		log_backend_enable(backend->backend, ctx, init_log_level);
   37088:	6800      	ldr	r0, [r0, #0]
   3708a:	f7f7 fbbf 	bl	2e80c <log_backend_enable>
		backend->control_block->dropped_cnt = 0;
   3708e:	2200      	movs	r2, #0
		log_output_ctx_set(backend->log_output, ctx);
   37090:	68a3      	ldr	r3, [r4, #8]
   37092:	685b      	ldr	r3, [r3, #4]
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *output,
				      void *ctx)
{
	output->control_block->ctx = ctx;
   37094:	605d      	str	r5, [r3, #4]
		backend->control_block->dropped_cnt = 0;
   37096:	68e3      	ldr	r3, [r4, #12]
   37098:	601a      	str	r2, [r3, #0]
		backend->control_block->state = SHELL_LOG_BACKEND_ENABLED;
   3709a:	2201      	movs	r2, #1
   3709c:	711a      	strb	r2, [r3, #4]
}
   3709e:	bd38      	pop	{r3, r4, r5, pc}

000370a0 <z_shell_log_backend_disable>:
{
   370a0:	b510      	push	{r4, lr}
   370a2:	4604      	mov	r4, r0
	while ((msg = msg_from_fifo(backend)) != NULL) {
   370a4:	6860      	ldr	r0, [r4, #4]
   370a6:	f7ff ff36 	bl	36f16 <msg_from_fifo.isra.0>
   370aa:	b930      	cbnz	r0, 370ba <z_shell_log_backend_disable+0x1a>
	log_backend_disable(backend->backend);
   370ac:	6820      	ldr	r0, [r4, #0]
   370ae:	f7fe fdb9 	bl	35c24 <log_backend_disable>
	backend->control_block->state = SHELL_LOG_BACKEND_DISABLED;
   370b2:	2202      	movs	r2, #2
   370b4:	68e3      	ldr	r3, [r4, #12]
   370b6:	711a      	strb	r2, [r3, #4]
}
   370b8:	bd10      	pop	{r4, pc}
		log_msg_put(msg);
   370ba:	f7fe fe8f 	bl	35ddc <log_msg_put>
   370be:	e7f1      	b.n	370a4 <z_shell_log_backend_disable+0x4>

000370c0 <z_shell_log_backend_process>:
{
   370c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   370c2:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   370c4:	2200      	movs	r2, #0
			(const struct shell *)backend->backend->cb->ctx;
   370c6:	6803      	ldr	r3, [r0, #0]
	const struct shell *shell =
   370c8:	685b      	ldr	r3, [r3, #4]
   370ca:	681e      	ldr	r6, [r3, #0]
			shell->ctx->internal.flags.use_colors;
   370cc:	68b3      	ldr	r3, [r6, #8]
   370ce:	f8d3 525c 	ldr.w	r5, [r3, #604]	; 0x25c
   370d2:	68c3      	ldr	r3, [r0, #12]
   370d4:	f3c5 0540 	ubfx	r5, r5, #1, #1
   370d8:	e8d3 7fef 	ldaex	r7, [r3]
   370dc:	e8c3 2fe1 	stlex	r1, r2, [r3]
   370e0:	2900      	cmp	r1, #0
   370e2:	d1f9      	bne.n	370d8 <z_shell_log_backend_process+0x18>
	if (dropped) {
   370e4:	b19f      	cbz	r7, 3710e <z_shell_log_backend_process+0x4e>
		if (colors) {
   370e6:	b14d      	cbz	r5, 370fc <z_shell_log_backend_process+0x3c>
	memcpy(color, &shell->ctx->vt100_ctx.col, sizeof(*color));
   370e8:	68b1      	ldr	r1, [r6, #8]
   370ea:	2202      	movs	r2, #2
   370ec:	312e      	adds	r1, #46	; 0x2e
   370ee:	a801      	add	r0, sp, #4
   370f0:	f000 fa8e 	bl	37610 <memcpy>
			z_shell_vt100_color_set(shell, SHELL_VT100_COLOR_RED);
   370f4:	2102      	movs	r1, #2
   370f6:	4630      	mov	r0, r6
   370f8:	f7f9 fbca 	bl	30890 <z_shell_vt100_color_set>
		log_output_dropped_process(backend->log_output, dropped);
   370fc:	4639      	mov	r1, r7
   370fe:	68a0      	ldr	r0, [r4, #8]
   37100:	f7f7 ffc4 	bl	2f08c <log_output_dropped_process>
		if (colors) {
   37104:	b11d      	cbz	r5, 3710e <z_shell_log_backend_process+0x4e>
			z_shell_vt100_colors_restore(shell, &col);
   37106:	4630      	mov	r0, r6
   37108:	a901      	add	r1, sp, #4
   3710a:	f7f9 fbe5 	bl	308d8 <z_shell_vt100_colors_restore>
	struct log_msg *msg = msg_from_fifo(backend);
   3710e:	6860      	ldr	r0, [r4, #4]
   37110:	f7ff ff01 	bl	36f16 <msg_from_fifo.isra.0>
	if (!msg) {
   37114:	4604      	mov	r4, r0
   37116:	b168      	cbz	r0, 37134 <z_shell_log_backend_process+0x74>
	msg_process(shell->log_backend->log_output, msg, colors);
   37118:	69f3      	ldr	r3, [r6, #28]
		flags |= LOG_OUTPUT_FLAG_COLORS;
   3711a:	2d00      	cmp	r5, #0
	log_output_msg_process(log_output, msg, flags);
   3711c:	4601      	mov	r1, r0
   3711e:	bf08      	it	eq
   37120:	220e      	moveq	r2, #14
   37122:	6898      	ldr	r0, [r3, #8]
   37124:	bf18      	it	ne
   37126:	220f      	movne	r2, #15
   37128:	f7f7 ff34 	bl	2ef94 <log_output_msg_process>
	log_msg_put(msg);
   3712c:	4620      	mov	r0, r4
   3712e:	f7fe fe55 	bl	35ddc <log_msg_put>
	return true;
   37132:	2001      	movs	r0, #1
}
   37134:	b003      	add	sp, #12
   37136:	bdf0      	pop	{r4, r5, r6, r7, pc}

00037138 <panic>:
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   37138:	6843      	ldr	r3, [r0, #4]
{
   3713a:	b510      	push	{r4, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   3713c:	681c      	ldr	r4, [r3, #0]
	err = shell->iface->api->enable(shell->iface, true);
   3713e:	2101      	movs	r1, #1
   37140:	6860      	ldr	r0, [r4, #4]
   37142:	6803      	ldr	r3, [r0, #0]
   37144:	689b      	ldr	r3, [r3, #8]
   37146:	4798      	blx	r3
	if (err == 0) {
   37148:	b9d0      	cbnz	r0, 37180 <panic+0x48>
		shell->log_backend->control_block->state =
   3714a:	2203      	movs	r2, #3
   3714c:	69e3      	ldr	r3, [r4, #28]
   3714e:	68db      	ldr	r3, [r3, #12]
   37150:	711a      	strb	r2, [r3, #4]
		z_shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
   37152:	68a0      	ldr	r0, [r4, #8]
   37154:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   37156:	8f41      	ldrh	r1, [r0, #58]	; 0x3a
   37158:	3020      	adds	r0, #32
   3715a:	f7ff fa05 	bl	36568 <z_shell_multiline_data_calc>
		z_shell_op_cursor_vert_move(shell, -1);
   3715e:	f04f 31ff 	mov.w	r1, #4294967295
   37162:	4620      	mov	r0, r4
   37164:	f7f9 fb2e 	bl	307c4 <z_shell_op_cursor_vert_move>
					   -shell->ctx->vt100_ctx.cons.cur_x);
   37168:	68a3      	ldr	r3, [r4, #8]
		z_shell_op_cursor_horiz_move(shell,
   3716a:	4620      	mov	r0, r4
					   -shell->ctx->vt100_ctx.cons.cur_x);
   3716c:	8c19      	ldrh	r1, [r3, #32]
		z_shell_op_cursor_horiz_move(shell,
   3716e:	4249      	negs	r1, r1
   37170:	f7f9 fb38 	bl	307e4 <z_shell_op_cursor_horiz_move>
			while (z_shell_log_backend_process(
   37174:	69e0      	ldr	r0, [r4, #28]
   37176:	f7ff ffa3 	bl	370c0 <z_shell_log_backend_process>
   3717a:	2800      	cmp	r0, #0
   3717c:	d1fa      	bne.n	37174 <panic+0x3c>
}
   3717e:	bd10      	pop	{r4, pc}
		z_shell_log_backend_disable(shell->log_backend);
   37180:	69e0      	ldr	r0, [r4, #28]
}
   37182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_log_backend_disable(shell->log_backend);
   37186:	f7ff bf8b 	b.w	370a0 <z_shell_log_backend_disable>

0003718a <z_shell_has_wildcard>:
{
   3718a:	b510      	push	{r4, lr}
   3718c:	4604      	mov	r4, r0
   3718e:	b908      	cbnz	r0, 37194 <z_shell_has_wildcard+0xa>
	return false;
   37190:	2000      	movs	r0, #0
}
   37192:	bd10      	pop	{r4, pc}
   37194:	f000 f9ea 	bl	3756c <strlen>
	for (size_t i = 0; i < str_len; i++) {
   37198:	2300      	movs	r3, #0
   3719a:	b280      	uxth	r0, r0
   3719c:	4283      	cmp	r3, r0
   3719e:	d2f7      	bcs.n	37190 <z_shell_has_wildcard+0x6>
		if ((str[i] == '?') || (str[i] == '*')) {
   371a0:	5ce2      	ldrb	r2, [r4, r3]
   371a2:	2a3f      	cmp	r2, #63	; 0x3f
   371a4:	d003      	beq.n	371ae <z_shell_has_wildcard+0x24>
   371a6:	2a2a      	cmp	r2, #42	; 0x2a
   371a8:	d001      	beq.n	371ae <z_shell_has_wildcard+0x24>
	for (size_t i = 0; i < str_len; i++) {
   371aa:	3301      	adds	r3, #1
   371ac:	e7f6      	b.n	3719c <z_shell_has_wildcard+0x12>
			return true;
   371ae:	2001      	movs	r0, #1
   371b0:	e7ef      	b.n	37192 <z_shell_has_wildcard+0x8>

000371b2 <z_shell_wildcard_prepare>:
{
   371b2:	b510      	push	{r4, lr}
   371b4:	4604      	mov	r4, r0
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
   371b6:	6880      	ldr	r0, [r0, #8]
   371b8:	f44f 7280 	mov.w	r2, #256	; 0x100
   371bc:	2100      	movs	r1, #0
   371be:	f500 709f 	add.w	r0, r0, #318	; 0x13e
   371c2:	f000 fa50 	bl	37666 <memset>
	memcpy(shell->ctx->temp_buff,
   371c6:	68a0      	ldr	r0, [r4, #8]
   371c8:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   371ca:	f100 013e 	add.w	r1, r0, #62	; 0x3e
   371ce:	f500 709f 	add.w	r0, r0, #318	; 0x13e
   371d2:	f000 fa1d 	bl	37610 <memcpy>
	z_shell_spaces_trim(shell->ctx->temp_buff);
   371d6:	68a0      	ldr	r0, [r4, #8]
   371d8:	f500 709f 	add.w	r0, r0, #318	; 0x13e
   371dc:	f7ff fb0a 	bl	367f4 <z_shell_spaces_trim>
	shell->ctx->cmd_tmp_buff_len = z_shell_strlen(shell->ctx->temp_buff) + 1;
   371e0:	68a3      	ldr	r3, [r4, #8]
   371e2:	f513 709f 	adds.w	r0, r3, #318	; 0x13e
   371e6:	d006      	beq.n	371f6 <z_shell_wildcard_prepare+0x44>
   371e8:	f000 f9c0 	bl	3756c <strlen>
   371ec:	b283      	uxth	r3, r0
   371ee:	68a2      	ldr	r2, [r4, #8]
   371f0:	3301      	adds	r3, #1
   371f2:	8793      	strh	r3, [r2, #60]	; 0x3c
}
   371f4:	bd10      	pop	{r4, pc}
   371f6:	4603      	mov	r3, r0
   371f8:	e7f9      	b.n	371ee <z_shell_wildcard_prepare+0x3c>

000371fa <z_shell_wildcard_finalize>:

void z_shell_wildcard_finalize(const struct shell *shell)
{
   371fa:	b510      	push	{r4, lr}
   371fc:	4604      	mov	r4, r0
	memcpy(shell->ctx->cmd_buff,
   371fe:	6880      	ldr	r0, [r0, #8]
   37200:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   37202:	f500 719f 	add.w	r1, r0, #318	; 0x13e
   37206:	303e      	adds	r0, #62	; 0x3e
   37208:	f000 fa02 	bl	37610 <memcpy>
	       shell->ctx->temp_buff,
	       shell->ctx->cmd_tmp_buff_len);
	shell->ctx->cmd_buff_len = shell->ctx->cmd_tmp_buff_len;
   3720c:	68a3      	ldr	r3, [r4, #8]
   3720e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
   37210:	871a      	strh	r2, [r3, #56]	; 0x38
}
   37212:	bd10      	pop	{r4, pc}

00037214 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   37214:	2200      	movs	r2, #0
   37216:	e9c0 2200 	strd	r2, r2, [r0]
   3721a:	6082      	str	r2, [r0, #8]
}
   3721c:	4770      	bx	lr

0003721e <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   3721e:	b2cb      	uxtb	r3, r1
   37220:	210c      	movs	r1, #12
   37222:	6902      	ldr	r2, [r0, #16]
   37224:	fb03 2101 	mla	r1, r3, r1, r2
   37228:	6f88      	ldr	r0, [r1, #120]	; 0x78
}
   3722a:	f000 0007 	and.w	r0, r0, #7
   3722e:	4770      	bx	lr

00037230 <set_off_state>:
	__asm__ volatile(
   37230:	f04f 0320 	mov.w	r3, #32
   37234:	f3ef 8211 	mrs	r2, BASEPRI
   37238:	f383 8811 	msr	BASEPRI, r3
   3723c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   37240:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   37242:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   37246:	d001      	beq.n	3724c <set_off_state+0x1c>
   37248:	428b      	cmp	r3, r1
   3724a:	d107      	bne.n	3725c <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   3724c:	2301      	movs	r3, #1
   3724e:	6003      	str	r3, [r0, #0]
	int err = 0;
   37250:	2000      	movs	r0, #0
	__asm__ volatile(
   37252:	f382 8811 	msr	BASEPRI, r2
   37256:	f3bf 8f6f 	isb	sy
}
   3725a:	4770      	bx	lr
		err = -EPERM;
   3725c:	f04f 30ff 	mov.w	r0, #4294967295
   37260:	e7f7      	b.n	37252 <set_off_state+0x22>

00037262 <set_starting_state>:
{
   37262:	b510      	push	{r4, lr}
	__asm__ volatile(
   37264:	f04f 0320 	mov.w	r3, #32
   37268:	f3ef 8211 	mrs	r2, BASEPRI
   3726c:	f383 8811 	msr	BASEPRI, r3
   37270:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   37274:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   37276:	f003 0407 	and.w	r4, r3, #7
   3727a:	2c01      	cmp	r4, #1
   3727c:	d106      	bne.n	3728c <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   3727e:	6001      	str	r1, [r0, #0]
	int err = 0;
   37280:	2000      	movs	r0, #0
	__asm__ volatile(
   37282:	f382 8811 	msr	BASEPRI, r2
   37286:	f3bf 8f6f 	isb	sy
}
   3728a:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   3728c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   37290:	428b      	cmp	r3, r1
		err = -EALREADY;
   37292:	bf14      	ite	ne
   37294:	f04f 30ff 	movne.w	r0, #4294967295
   37298:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   3729c:	e7f1      	b.n	37282 <set_starting_state+0x20>

0003729e <set_on_state>:
	__asm__ volatile(
   3729e:	f04f 0320 	mov.w	r3, #32
   372a2:	f3ef 8211 	mrs	r2, BASEPRI
   372a6:	f383 8811 	msr	BASEPRI, r3
   372aa:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   372ae:	6803      	ldr	r3, [r0, #0]
   372b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   372b4:	f043 0302 	orr.w	r3, r3, #2
   372b8:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   372ba:	f382 8811 	msr	BASEPRI, r2
   372be:	f3bf 8f6f 	isb	sy
}
   372c2:	4770      	bx	lr

000372c4 <onoff_started_callback>:
{
   372c4:	b410      	push	{r4}
	notify(mgr, 0);
   372c6:	241c      	movs	r4, #28
	return &data->mgr[type];
   372c8:	6900      	ldr	r0, [r0, #16]
   372ca:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   372cc:	fb03 0004 	mla	r0, r3, r4, r0
   372d0:	2100      	movs	r1, #0
}
   372d2:	bc10      	pop	{r4}
	notify(mgr, 0);
   372d4:	4710      	bx	r2

000372d6 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   372d6:	2003      	movs	r0, #3
   372d8:	f7fb bfae 	b.w	33238 <nrfx_clock_start>

000372dc <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   372dc:	2002      	movs	r0, #2
   372de:	f7fb bfab 	b.w	33238 <nrfx_clock_start>

000372e2 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   372e2:	2000      	movs	r0, #0
   372e4:	f7fb bfa8 	b.w	33238 <nrfx_clock_start>

000372e8 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   372e8:	2003      	movs	r0, #3
   372ea:	f7fb bff5 	b.w	332d8 <nrfx_clock_stop>

000372ee <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   372ee:	2002      	movs	r0, #2
   372f0:	f7fb bff2 	b.w	332d8 <nrfx_clock_stop>

000372f4 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   372f4:	2000      	movs	r0, #0
   372f6:	f7fb bfef 	b.w	332d8 <nrfx_clock_stop>

000372fa <blocking_start_callback>:
{
   372fa:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   372fc:	f7fc be4c 	b.w	33f98 <z_impl_k_sem_give>

00037300 <api_stop>:
{
   37300:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
   37302:	240c      	movs	r4, #12
   37304:	b2c9      	uxtb	r1, r1
   37306:	434c      	muls	r4, r1
{
   37308:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   3730a:	6900      	ldr	r0, [r0, #16]
   3730c:	f104 0378 	add.w	r3, r4, #120	; 0x78
   37310:	2180      	movs	r1, #128	; 0x80
   37312:	4418      	add	r0, r3
   37314:	f7ff ff8c 	bl	37230 <set_off_state>
	if (err < 0) {
   37318:	2800      	cmp	r0, #0
   3731a:	db04      	blt.n	37326 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   3731c:	6869      	ldr	r1, [r5, #4]
   3731e:	440c      	add	r4, r1
   37320:	6863      	ldr	r3, [r4, #4]
   37322:	4798      	blx	r3
	return 0;
   37324:	2000      	movs	r0, #0
}
   37326:	bd38      	pop	{r3, r4, r5, pc}

00037328 <api_start>:
{
   37328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
   3732c:	240c      	movs	r4, #12
   3732e:	b2c9      	uxtb	r1, r1
   37330:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   37332:	6905      	ldr	r5, [r0, #16]
{
   37334:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   37336:	f104 0078 	add.w	r0, r4, #120	; 0x78
   3733a:	2180      	movs	r1, #128	; 0x80
   3733c:	4428      	add	r0, r5
{
   3733e:	4690      	mov	r8, r2
   37340:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   37342:	f7ff ff8e 	bl	37262 <set_starting_state>
	if (err < 0) {
   37346:	2800      	cmp	r0, #0
   37348:	db06      	blt.n	37358 <api_start+0x30>
	subdata->cb = cb;
   3734a:	4425      	add	r5, r4
	subdata->user_data = user_data;
   3734c:	e9c5 871c 	strd	r8, r7, [r5, #112]	; 0x70
	 get_sub_config(dev, type)->start();
   37350:	6873      	ldr	r3, [r6, #4]
   37352:	591b      	ldr	r3, [r3, r4]
   37354:	4798      	blx	r3
	return 0;
   37356:	2000      	movs	r0, #0
}
   37358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003735c <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   3735c:	4770      	bx	lr

0003735e <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   3735e:	4770      	bx	lr

00037360 <sys_clock_disable>:
   37360:	4770      	bx	lr

00037362 <spm_request_random_number>:
	spm_request_system_reboot();
}
#endif /* CONFIG_SPM_SERVICE_REBOOT */

#ifdef CONFIG_SPM_SERVICE_RNG
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
   37362:	b510      	push	{r4, lr}
   37364:	b40f      	push	{r0, r1, r2, r3}
   37366:	f7fa fb39 	bl	319dc <before_nse>
   3736a:	bc0f      	pop	{r0, r1, r2, r3}
   3736c:	f7e4 fe40 	bl	1bff0 <spm_request_random_number_nse>
   37370:	b40f      	push	{r0, r1, r2, r3}
   37372:	f7fa fb3d 	bl	319f0 <after_nse>
   37376:	bc0f      	pop	{r0, r1, r2, r3}
   37378:	bd10      	pop	{r4, pc}

0003737a <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   3737a:	2100      	movs	r1, #0
   3737c:	2001      	movs	r0, #1
   3737e:	f7fa bbc3 	b.w	31b08 <z_arm_fatal_error>

00037382 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   37382:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   37386:	f383 880b 	msr	PSPLIM, r3
}
   3738a:	4770      	bx	lr

0003738c <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   3738c:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   3738e:	6800      	ldr	r0, [r0, #0]
   37390:	f7fa bbba 	b.w	31b08 <z_arm_fatal_error>

00037394 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   37394:	b508      	push	{r3, lr}
	handler();
   37396:	f7fa fc79 	bl	31c8c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   3739a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   3739e:	f7fa bcc1 	b.w	31d24 <z_arm_exc_exit>

000373a2 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   373a2:	4770      	bx	lr

000373a4 <z_arm_restore_fp_context>:
   373a4:	4770      	bx	lr

000373a6 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   373a6:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   373aa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   373ae:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   373b0:	bf08      	it	eq
   373b2:	f06f 0015 	mvneq.w	r0, #21
   373b6:	4770      	bx	lr

000373b8 <mpu_configure_region>:
{
   373b8:	b530      	push	{r4, r5, lr}
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   373ba:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
   373bc:	680c      	ldr	r4, [r1, #0]
{
   373be:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   373c0:	890a      	ldrh	r2, [r1, #8]
   373c2:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
   373c4:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   373c6:	3b01      	subs	r3, #1
   373c8:	f024 041f 	bic.w	r4, r4, #31
   373cc:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   373ce:	f002 021f 	and.w	r2, r2, #31
   373d2:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   373d6:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   373da:	4669      	mov	r1, sp
	p_attr->rbar = attr->rbar &
   373dc:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   373e0:	9303      	str	r3, [sp, #12]
   373e2:	f7fa ffed 	bl	323c0 <region_allocate_and_init>
}
   373e6:	b005      	add	sp, #20
   373e8:	bd30      	pop	{r4, r5, pc}

000373ea <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   373ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   373ee:	4684      	mov	ip, r0
   373f0:	4688      	mov	r8, r1
	register const char *s = nptr;
   373f2:	4601      	mov	r1, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   373f4:	460c      	mov	r4, r1
   373f6:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   373fa:	2b20      	cmp	r3, #32
   373fc:	d033      	beq.n	37466 <strtol+0x7c>
   373fe:	f1a3 0009 	sub.w	r0, r3, #9
   37402:	2804      	cmp	r0, #4
   37404:	d92f      	bls.n	37466 <strtol+0x7c>
	} while (isspace(c));
	if (c == '-') {
   37406:	2b2d      	cmp	r3, #45	; 0x2d
   37408:	d12f      	bne.n	3746a <strtol+0x80>
		neg = 1;
		c = *s++;
   3740a:	784b      	ldrb	r3, [r1, #1]
   3740c:	1c8c      	adds	r4, r1, #2
		neg = 1;
   3740e:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   37410:	2a00      	cmp	r2, #0
   37412:	d05c      	beq.n	374ce <strtol+0xe4>
   37414:	2a10      	cmp	r2, #16
   37416:	d109      	bne.n	3742c <strtol+0x42>
   37418:	2b30      	cmp	r3, #48	; 0x30
   3741a:	d107      	bne.n	3742c <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   3741c:	7823      	ldrb	r3, [r4, #0]
   3741e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   37422:	2b58      	cmp	r3, #88	; 0x58
   37424:	d14e      	bne.n	374c4 <strtol+0xda>
		c = s[1];
		s += 2;
		base = 16;
   37426:	2210      	movs	r2, #16
		c = s[1];
   37428:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   3742a:	3402      	adds	r4, #2
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   3742c:	2600      	movs	r6, #0
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   3742e:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   37432:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
   37434:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   37438:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   3743a:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   3743e:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   37442:	2d09      	cmp	r5, #9
   37444:	d817      	bhi.n	37476 <strtol+0x8c>
			c -= '0';
   37446:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   37448:	429a      	cmp	r2, r3
   3744a:	dd24      	ble.n	37496 <strtol+0xac>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   3744c:	1c75      	adds	r5, r6, #1
   3744e:	d007      	beq.n	37460 <strtol+0x76>
   37450:	4570      	cmp	r0, lr
   37452:	d81d      	bhi.n	37490 <strtol+0xa6>
   37454:	d101      	bne.n	3745a <strtol+0x70>
   37456:	454b      	cmp	r3, r9
   37458:	dc1a      	bgt.n	37490 <strtol+0xa6>
			any = -1;
		} else {
			any = 1;
   3745a:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   3745c:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   37460:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   37464:	e7eb      	b.n	3743e <strtol+0x54>
{
   37466:	4621      	mov	r1, r4
   37468:	e7c4      	b.n	373f4 <strtol+0xa>
	} else if (c == '+') {
   3746a:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   3746c:	bf04      	itt	eq
   3746e:	784b      	ldrbeq	r3, [r1, #1]
   37470:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   37472:	2100      	movs	r1, #0
   37474:	e7cc      	b.n	37410 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   37476:	f043 0520 	orr.w	r5, r3, #32
   3747a:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   3747c:	2d19      	cmp	r5, #25
   3747e:	d80a      	bhi.n	37496 <strtol+0xac>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   37480:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   37484:	2d1a      	cmp	r5, #26
   37486:	bf34      	ite	cc
   37488:	2537      	movcc	r5, #55	; 0x37
   3748a:	2557      	movcs	r5, #87	; 0x57
   3748c:	1b5b      	subs	r3, r3, r5
   3748e:	e7db      	b.n	37448 <strtol+0x5e>
			any = -1;
   37490:	f04f 36ff 	mov.w	r6, #4294967295
   37494:	e7e4      	b.n	37460 <strtol+0x76>
		}
	}

	if (any < 0) {
   37496:	1c73      	adds	r3, r6, #1
   37498:	d109      	bne.n	374ae <strtol+0xc4>
   3749a:	f7fc f8f5 	bl	33688 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   3749e:	2322      	movs	r3, #34	; 0x22
   374a0:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   374a2:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   374a4:	f1b8 0f00 	cmp.w	r8, #0
   374a8:	d107      	bne.n	374ba <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   374aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   374ae:	b101      	cbz	r1, 374b2 <strtol+0xc8>
		acc = -acc;
   374b0:	4240      	negs	r0, r0
	if (endptr != NULL) {
   374b2:	f1b8 0f00 	cmp.w	r8, #0
   374b6:	d0f8      	beq.n	374aa <strtol+0xc0>
		*endptr = (char *)(any ? s - 1 : nptr);
   374b8:	b10e      	cbz	r6, 374be <strtol+0xd4>
   374ba:	f104 3cff 	add.w	ip, r4, #4294967295
   374be:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   374c2:	e7f2      	b.n	374aa <strtol+0xc0>
	if (base == 0) {
   374c4:	2330      	movs	r3, #48	; 0x30
   374c6:	2a00      	cmp	r2, #0
   374c8:	d1b0      	bne.n	3742c <strtol+0x42>
		base = c == '0' ? 8 : 10;
   374ca:	2208      	movs	r2, #8
   374cc:	e7ae      	b.n	3742c <strtol+0x42>
	if ((base == 0 || base == 16) &&
   374ce:	2b30      	cmp	r3, #48	; 0x30
   374d0:	d0a4      	beq.n	3741c <strtol+0x32>
		base = c == '0' ? 8 : 10;
   374d2:	220a      	movs	r2, #10
   374d4:	e7aa      	b.n	3742c <strtol+0x42>

000374d6 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   374d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
   374da:	f891 8000 	ldrb.w	r8, [r1]
{
   374de:	4605      	mov	r5, r0
	if (c != 0) {
   374e0:	f1b8 0f00 	cmp.w	r8, #0
   374e4:	d010      	beq.n	37508 <strstr+0x32>
	c = *find++;
   374e6:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
   374e8:	4620      	mov	r0, r4
   374ea:	f000 f83f 	bl	3756c <strlen>
   374ee:	4607      	mov	r7, r0
		do {
			do {
				sc = *s++;
   374f0:	462e      	mov	r6, r5
   374f2:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
   374f6:	b163      	cbz	r3, 37512 <strstr+0x3c>
					return NULL;
				}
			} while (sc != c);
   374f8:	4598      	cmp	r8, r3
   374fa:	d108      	bne.n	3750e <strstr+0x38>
		} while (strncmp(s, find, len) != 0);
   374fc:	463a      	mov	r2, r7
   374fe:	4621      	mov	r1, r4
   37500:	4630      	mov	r0, r6
   37502:	f000 f84f 	bl	375a4 <strncmp>
   37506:	b910      	cbnz	r0, 3750e <strstr+0x38>
	s--;
	}
	return (char *)s;
}
   37508:	4628      	mov	r0, r5
   3750a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   3750e:	4635      	mov	r5, r6
   37510:	e7ee      	b.n	374f0 <strstr+0x1a>
					return NULL;
   37512:	461d      	mov	r5, r3
   37514:	e7f8      	b.n	37508 <strstr+0x32>

00037516 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   37516:	4603      	mov	r3, r0
   37518:	3901      	subs	r1, #1
   3751a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   3751e:	b90a      	cbnz	r2, 37524 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   37520:	701a      	strb	r2, [r3, #0]

	return dest;
}
   37522:	4770      	bx	lr
		*d = *s;
   37524:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   37528:	e7f7      	b.n	3751a <strcpy+0x4>

0003752a <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   3752a:	b570      	push	{r4, r5, r6, lr}
   3752c:	4605      	mov	r5, r0
   3752e:	3901      	subs	r1, #1
   37530:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   37532:	b142      	cbz	r2, 37546 <strncpy+0x1c>
   37534:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   37538:	1e56      	subs	r6, r2, #1
   3753a:	b92b      	cbnz	r3, 37548 <strncpy+0x1e>
   3753c:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   3753e:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   37542:	42a2      	cmp	r2, r4
   37544:	d1fb      	bne.n	3753e <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   37546:	bd70      	pop	{r4, r5, r6, pc}
		n--;
   37548:	4632      	mov	r2, r6
		*d = *s;
   3754a:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   3754e:	e7ef      	b.n	37530 <strncpy+0x6>

00037550 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   37550:	4603      	mov	r3, r0
   37552:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   37554:	781a      	ldrb	r2, [r3, #0]
   37556:	4618      	mov	r0, r3
   37558:	428a      	cmp	r2, r1
   3755a:	f103 0301 	add.w	r3, r3, #1
   3755e:	d004      	beq.n	3756a <strchr+0x1a>
   37560:	2a00      	cmp	r2, #0
   37562:	d1f7      	bne.n	37554 <strchr+0x4>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   37564:	2900      	cmp	r1, #0
   37566:	bf18      	it	ne
   37568:	2000      	movne	r0, #0
}
   3756a:	4770      	bx	lr

0003756c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   3756c:	4603      	mov	r3, r0
	size_t n = 0;
   3756e:	2000      	movs	r0, #0

	while (*s != '\0') {
   37570:	5c1a      	ldrb	r2, [r3, r0]
   37572:	b902      	cbnz	r2, 37576 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   37574:	4770      	bx	lr
		n++;
   37576:	3001      	adds	r0, #1
   37578:	e7fa      	b.n	37570 <strlen+0x4>

0003757a <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   3757a:	4603      	mov	r3, r0
	size_t n = 0;
   3757c:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   3757e:	5c1a      	ldrb	r2, [r3, r0]
   37580:	b10a      	cbz	r2, 37586 <strnlen+0xc>
   37582:	4288      	cmp	r0, r1
   37584:	d100      	bne.n	37588 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   37586:	4770      	bx	lr
		n++;
   37588:	3001      	adds	r0, #1
   3758a:	e7f8      	b.n	3757e <strnlen+0x4>

0003758c <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   3758c:	1e43      	subs	r3, r0, #1
   3758e:	3901      	subs	r1, #1
   37590:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   37594:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   37598:	4282      	cmp	r2, r0
   3759a:	d101      	bne.n	375a0 <strcmp+0x14>
   3759c:	2a00      	cmp	r2, #0
   3759e:	d1f7      	bne.n	37590 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   375a0:	1a10      	subs	r0, r2, r0
   375a2:	4770      	bx	lr

000375a4 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   375a4:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   375a6:	2400      	movs	r4, #0
   375a8:	42a2      	cmp	r2, r4
   375aa:	d008      	beq.n	375be <strncmp+0x1a>
   375ac:	5d03      	ldrb	r3, [r0, r4]
   375ae:	5d0d      	ldrb	r5, [r1, r4]
   375b0:	42ab      	cmp	r3, r5
   375b2:	d102      	bne.n	375ba <strncmp+0x16>
   375b4:	3401      	adds	r4, #1
   375b6:	2b00      	cmp	r3, #0
   375b8:	d1f6      	bne.n	375a8 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   375ba:	1b58      	subs	r0, r3, r5
   375bc:	e000      	b.n	375c0 <strncmp+0x1c>
   375be:	2000      	movs	r0, #0
}
   375c0:	bd30      	pop	{r4, r5, pc}

000375c2 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   375c2:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   375c4:	b15a      	cbz	r2, 375de <memcmp+0x1c>
   375c6:	3901      	subs	r1, #1
   375c8:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   375ca:	f810 2b01 	ldrb.w	r2, [r0], #1
   375ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   375d2:	42a0      	cmp	r0, r4
   375d4:	d001      	beq.n	375da <memcmp+0x18>
   375d6:	429a      	cmp	r2, r3
   375d8:	d0f7      	beq.n	375ca <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   375da:	1ad0      	subs	r0, r2, r3
}
   375dc:	bd10      	pop	{r4, pc}
		return 0;
   375de:	4610      	mov	r0, r2
   375e0:	e7fc      	b.n	375dc <memcmp+0x1a>

000375e2 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   375e2:	1a43      	subs	r3, r0, r1
   375e4:	4293      	cmp	r3, r2
{
   375e6:	b510      	push	{r4, lr}
   375e8:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   375ec:	d308      	bcc.n	37600 <memmove+0x1e>
	char *dest = d;
   375ee:	4602      	mov	r2, r0
   375f0:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   375f2:	429a      	cmp	r2, r3
   375f4:	d00b      	beq.n	3760e <memmove+0x2c>
			*dest = *src;
   375f6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   375fa:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   375fe:	e7f8      	b.n	375f2 <memmove+0x10>
   37600:	440a      	add	r2, r1
			dest[n] = src[n];
   37602:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
   37606:	428a      	cmp	r2, r1
			dest[n] = src[n];
   37608:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   3760c:	d1f9      	bne.n	37602 <memmove+0x20>
		}
	}

	return d;
}
   3760e:	bd10      	pop	{r4, pc}

00037610 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   37610:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   37612:	ea81 0400 	eor.w	r4, r1, r0
   37616:	07a5      	lsls	r5, r4, #30
   37618:	4603      	mov	r3, r0
   3761a:	d00b      	beq.n	37634 <memcpy+0x24>
   3761c:	3b01      	subs	r3, #1
   3761e:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   37620:	4291      	cmp	r1, r2
   37622:	d11b      	bne.n	3765c <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   37624:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   37626:	2a00      	cmp	r2, #0
   37628:	d0fc      	beq.n	37624 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   3762a:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   3762e:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   37630:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   37634:	079c      	lsls	r4, r3, #30
   37636:	d1f6      	bne.n	37626 <memcpy+0x16>
   37638:	f022 0403 	bic.w	r4, r2, #3
   3763c:	1f1d      	subs	r5, r3, #4
   3763e:	0896      	lsrs	r6, r2, #2
   37640:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   37642:	42b9      	cmp	r1, r7
   37644:	d105      	bne.n	37652 <memcpy+0x42>
   37646:	f06f 0503 	mvn.w	r5, #3
   3764a:	4423      	add	r3, r4
   3764c:	fb05 2206 	mla	r2, r5, r6, r2
   37650:	e7e4      	b.n	3761c <memcpy+0xc>
			*(d_word++) = *(s_word++);
   37652:	f851 cb04 	ldr.w	ip, [r1], #4
   37656:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   3765a:	e7f2      	b.n	37642 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   3765c:	f811 4b01 	ldrb.w	r4, [r1], #1
   37660:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   37664:	e7dc      	b.n	37620 <memcpy+0x10>

00037666 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   37666:	4603      	mov	r3, r0
{
   37668:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   3766a:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   3766c:	079c      	lsls	r4, r3, #30
   3766e:	d111      	bne.n	37694 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   37670:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   37674:	f022 0603 	bic.w	r6, r2, #3
   37678:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   3767c:	441e      	add	r6, r3
   3767e:	0894      	lsrs	r4, r2, #2
   37680:	42b3      	cmp	r3, r6
   37682:	d10d      	bne.n	376a0 <memset+0x3a>
   37684:	f06f 0503 	mvn.w	r5, #3
   37688:	fb05 2204 	mla	r2, r5, r4, r2
   3768c:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   3768e:	4293      	cmp	r3, r2
   37690:	d109      	bne.n	376a6 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   37692:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   37694:	2a00      	cmp	r2, #0
   37696:	d0fc      	beq.n	37692 <memset+0x2c>
		*(d_byte++) = c_byte;
   37698:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   3769c:	3a01      	subs	r2, #1
   3769e:	e7e5      	b.n	3766c <memset+0x6>
		*(d_word++) = c_word;
   376a0:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   376a4:	e7ec      	b.n	37680 <memset+0x1a>
		*(d_byte++) = c_byte;
   376a6:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   376aa:	e7f0      	b.n	3768e <memset+0x28>

000376ac <_stdout_hook_default>:
}
   376ac:	f04f 30ff 	mov.w	r0, #4294967295
   376b0:	4770      	bx	lr

000376b2 <fputc>:
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&c, *(uintptr_t *)&stream, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
   376b2:	f7fb b803 	b.w	326bc <z_impl_zephyr_fputc>

000376b6 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   376b6:	684b      	ldr	r3, [r1, #4]
   376b8:	2b01      	cmp	r3, #1
   376ba:	dd07      	ble.n	376cc <sprintf_out+0x16>
		*(p->ptr) = c;
   376bc:	680b      	ldr	r3, [r1, #0]
   376be:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   376c0:	680b      	ldr	r3, [r1, #0]
   376c2:	3301      	adds	r3, #1
   376c4:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   376c6:	684b      	ldr	r3, [r1, #4]
   376c8:	3b01      	subs	r3, #1
   376ca:	604b      	str	r3, [r1, #4]
}
   376cc:	2000      	movs	r0, #0
   376ce:	4770      	bx	lr

000376d0 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   376d0:	b570      	push	{r4, r5, r6, lr}
   376d2:	460e      	mov	r6, r1
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   376d4:	6801      	ldr	r1, [r0, #0]
{
   376d6:	4615      	mov	r5, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   376d8:	b189      	cbz	r1, 376fe <gpio_fire_callbacks+0x2e>
	return node->next;
   376da:	680c      	ldr	r4, [r1, #0]
   376dc:	2c00      	cmp	r4, #0
   376de:	bf38      	it	cc
   376e0:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
   376e2:	688a      	ldr	r2, [r1, #8]
   376e4:	402a      	ands	r2, r5
   376e6:	d002      	beq.n	376ee <gpio_fire_callbacks+0x1e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   376e8:	4630      	mov	r0, r6
   376ea:	684b      	ldr	r3, [r1, #4]
   376ec:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   376ee:	b134      	cbz	r4, 376fe <gpio_fire_callbacks+0x2e>
   376f0:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   376f2:	4621      	mov	r1, r4
   376f4:	2b00      	cmp	r3, #0
   376f6:	bf38      	it	cc
   376f8:	2300      	movcc	r3, #0
   376fa:	461c      	mov	r4, r3
   376fc:	e7f1      	b.n	376e2 <gpio_fire_callbacks+0x12>
		}
	}
}
   376fe:	bd70      	pop	{r4, r5, r6, pc}

00037700 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   37700:	6843      	ldr	r3, [r0, #4]
}
   37702:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   37704:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   37706:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   37708:	600b      	str	r3, [r1, #0]
}
   3770a:	4770      	bx	lr

0003770c <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3770c:	6843      	ldr	r3, [r0, #4]
   3770e:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   37710:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   37712:	4042      	eors	r2, r0
   37714:	400a      	ands	r2, r1
   37716:	4042      	eors	r2, r0
    p_reg->OUT = value;
   37718:	605a      	str	r2, [r3, #4]
}
   3771a:	2000      	movs	r0, #0
   3771c:	4770      	bx	lr

0003771e <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3771e:	6843      	ldr	r3, [r0, #4]
}
   37720:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   37722:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   37724:	6099      	str	r1, [r3, #8]
}
   37726:	4770      	bx	lr

00037728 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   37728:	6843      	ldr	r3, [r0, #4]
}
   3772a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3772c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   3772e:	60d9      	str	r1, [r3, #12]
}
   37730:	4770      	bx	lr

00037732 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   37732:	6843      	ldr	r3, [r0, #4]
}
   37734:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   37736:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   37738:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   3773a:	404b      	eors	r3, r1
    p_reg->OUT = value;
   3773c:	6053      	str	r3, [r2, #4]
}
   3773e:	4770      	bx	lr

00037740 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   37740:	6903      	ldr	r3, [r0, #16]
{
   37742:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   37744:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   37746:	b158      	cbz	r0, 37760 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   37748:	2400      	movs	r4, #0
   3774a:	4281      	cmp	r1, r0
   3774c:	d113      	bne.n	37776 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   3774e:	6808      	ldr	r0, [r1, #0]
   37750:	b95c      	cbnz	r4, 3776a <gpio_nrfx_manage_callback+0x2a>
   37752:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   37754:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   37756:	42a1      	cmp	r1, r4
   37758:	d100      	bne.n	3775c <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   3775a:	6098      	str	r0, [r3, #8]
	parent->next = child;
   3775c:	2000      	movs	r0, #0
   3775e:	6008      	str	r0, [r1, #0]
	if (set) {
   37760:	b972      	cbnz	r2, 37780 <gpio_nrfx_manage_callback+0x40>
	return 0;
   37762:	2000      	movs	r0, #0
}
   37764:	bd30      	pop	{r4, r5, pc}
   37766:	4628      	mov	r0, r5
   37768:	e7ef      	b.n	3774a <gpio_nrfx_manage_callback+0xa>
   3776a:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   3776c:	6898      	ldr	r0, [r3, #8]
   3776e:	4281      	cmp	r1, r0
	list->tail = node;
   37770:	bf08      	it	eq
   37772:	609c      	streq	r4, [r3, #8]
}
   37774:	e7f2      	b.n	3775c <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   37776:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   37778:	4604      	mov	r4, r0
   3777a:	2d00      	cmp	r5, #0
   3777c:	d1f3      	bne.n	37766 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   3777e:	b13a      	cbz	r2, 37790 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   37780:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   37782:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   37784:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   37786:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   37788:	2800      	cmp	r0, #0
   3778a:	d1ea      	bne.n	37762 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   3778c:	6099      	str	r1, [r3, #8]
}
   3778e:	e7e9      	b.n	37764 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   37790:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   37794:	e7e6      	b.n	37764 <gpio_nrfx_manage_callback+0x24>

00037796 <cfg_level_pins>:
{
   37796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
   3779a:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   3779c:	2500      	movs	r5, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   3779e:	6907      	ldr	r7, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   377a0:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   377a4:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   377a6:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   377aa:	4313      	orrs	r3, r2
   377ac:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   377b0:	b90c      	cbnz	r4, 377b6 <cfg_level_pins+0x20>
}
   377b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   377b6:	4226      	tst	r6, r4
   377b8:	d010      	beq.n	377dc <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   377ba:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   377bc:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   377c0:	40e9      	lsrs	r1, r5
   377c2:	f001 0101 	and.w	r1, r1, #1
   377c6:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   377ca:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   377ce:	b2c9      	uxtb	r1, r1
   377d0:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   377d4:	f7fb f920 	bl	32a18 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   377d8:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   377dc:	3501      	adds	r5, #1
		bit <<= 1;
   377de:	0076      	lsls	r6, r6, #1
   377e0:	e7e6      	b.n	377b0 <cfg_level_pins+0x1a>

000377e2 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   377e2:	6843      	ldr	r3, [r0, #4]
{
   377e4:	b410      	push	{r4}
	return config->uarte_regs;
   377e6:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   377e8:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   377ec:	05d1      	lsls	r1, r2, #23
   377ee:	d518      	bpl.n	37822 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   377f0:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   377f4:	b1aa      	cbz	r2, 37822 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   377f6:	f04f 0120 	mov.w	r1, #32
   377fa:	f3ef 8211 	mrs	r2, BASEPRI
   377fe:	f381 8811 	msr	BASEPRI, r1
   37802:	f3bf 8f6f 	isb	sy
   37806:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   3780a:	b131      	cbz	r1, 3781a <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3780c:	2100      	movs	r1, #0
   3780e:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   37812:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   37816:	2101      	movs	r1, #1
   37818:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   3781a:	f382 8811 	msr	BASEPRI, r2
   3781e:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   37822:	6842      	ldr	r2, [r0, #4]
   37824:	6852      	ldr	r2, [r2, #4]
   37826:	06d2      	lsls	r2, r2, #27
   37828:	d51a      	bpl.n	37860 <uarte_nrfx_isr_int+0x7e>
	__asm__ volatile(
   3782a:	f04f 0220 	mov.w	r2, #32
   3782e:	f3ef 8111 	mrs	r1, BASEPRI
   37832:	f382 8811 	msr	BASEPRI, r2
   37836:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3783a:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   3783e:	b112      	cbz	r2, 37846 <uarte_nrfx_isr_int+0x64>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   37840:	2200      	movs	r2, #0
   37842:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   37846:	6902      	ldr	r2, [r0, #16]
   37848:	68d2      	ldr	r2, [r2, #12]
   3784a:	b10a      	cbz	r2, 37850 <uarte_nrfx_isr_int+0x6e>
   3784c:	6912      	ldr	r2, [r2, #16]
   3784e:	b91a      	cbnz	r2, 37858 <uarte_nrfx_isr_int+0x76>
    p_reg->INTENCLR = mask;
   37850:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   37854:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   37858:	f381 8811 	msr	BASEPRI, r1
   3785c:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   37860:	6902      	ldr	r2, [r0, #16]
   37862:	68d2      	ldr	r2, [r2, #12]
   37864:	b15a      	cbz	r2, 3787e <uarte_nrfx_isr_int+0x9c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   37866:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   3786a:	b151      	cbz	r1, 37882 <uarte_nrfx_isr_int+0xa0>
		data->int_driven->fifo_fill_lock = 0;
   3786c:	2100      	movs	r1, #0
		if (data->int_driven->disable_tx_irq) {
   3786e:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   37870:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   37872:	b134      	cbz	r4, 37882 <uarte_nrfx_isr_int+0xa0>
    p_reg->INTENCLR = mask;
   37874:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   37878:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   3787c:	7391      	strb	r1, [r2, #14]
}
   3787e:	bc10      	pop	{r4}
   37880:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   37882:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   37886:	b121      	cbz	r1, 37892 <uarte_nrfx_isr_int+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   37888:	2100      	movs	r1, #0
   3788a:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   3788e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   37892:	6813      	ldr	r3, [r2, #0]
   37894:	2b00      	cmp	r3, #0
   37896:	d0f2      	beq.n	3787e <uarte_nrfx_isr_int+0x9c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   37898:	6851      	ldr	r1, [r2, #4]
}
   3789a:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   3789c:	4718      	bx	r3

0003789e <uarte_nrfx_config_get>:
{
   3789e:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   378a0:	6902      	ldr	r2, [r0, #16]
   378a2:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   378a6:	e883 0003 	stmia.w	r3, {r0, r1}
}
   378aa:	2000      	movs	r0, #0
   378ac:	4770      	bx	lr

000378ae <uarte_nrfx_err_check>:
	return config->uarte_regs;
   378ae:	6843      	ldr	r3, [r0, #4]
   378b0:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   378b2:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   378b6:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   378ba:	4770      	bx	lr

000378bc <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   378bc:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   378be:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   378c0:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   378c4:	b940      	cbnz	r0, 378d8 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   378c6:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   378c8:	0712      	lsls	r2, r2, #28
   378ca:	d406      	bmi.n	378da <is_tx_ready+0x1e>
   378cc:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   378d0:	3800      	subs	r0, #0
   378d2:	bf18      	it	ne
   378d4:	2001      	movne	r0, #1
   378d6:	4770      	bx	lr
   378d8:	2001      	movs	r0, #1
}
   378da:	4770      	bx	lr

000378dc <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   378dc:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   378de:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   378e0:	681b      	ldr	r3, [r3, #0]
   378e2:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   378e6:	b148      	cbz	r0, 378fc <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   378e8:	2000      	movs	r0, #0
	*c = data->rx_data;
   378ea:	7d52      	ldrb	r2, [r2, #21]
   378ec:	700a      	strb	r2, [r1, #0]
   378ee:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   378f2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   378f6:	2201      	movs	r2, #1
   378f8:	601a      	str	r2, [r3, #0]
	return 0;
   378fa:	4770      	bx	lr
		return -1;
   378fc:	f04f 30ff 	mov.w	r0, #4294967295
}
   37900:	4770      	bx	lr

00037902 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   37902:	2a00      	cmp	r2, #0
{
   37904:	b510      	push	{r4, lr}
   37906:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   37908:	dd0f      	ble.n	3792a <uarte_nrfx_fifo_read+0x28>
	return config->uarte_regs;
   3790a:	6843      	ldr	r3, [r0, #4]
   3790c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3790e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   37912:	b148      	cbz	r0, 37928 <uarte_nrfx_fifo_read+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   37914:	2000      	movs	r0, #0
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   37916:	6922      	ldr	r2, [r4, #16]
   37918:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   3791c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   37920:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   37922:	7d52      	ldrb	r2, [r2, #21]
   37924:	700a      	strb	r2, [r1, #0]
   37926:	6018      	str	r0, [r3, #0]
}
   37928:	bd10      	pop	{r4, pc}
	int num_rx = 0;
   3792a:	2000      	movs	r0, #0
   3792c:	e7fc      	b.n	37928 <uarte_nrfx_fifo_read+0x26>

0003792e <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   3792e:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   37930:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   37932:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   37934:	f04f 0020 	mov.w	r0, #32
   37938:	f3ef 8311 	mrs	r3, BASEPRI
   3793c:	f380 8811 	msr	BASEPRI, r0
   37940:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   37944:	2000      	movs	r0, #0
   37946:	68c9      	ldr	r1, [r1, #12]
   37948:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   3794a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   3794e:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   37952:	f383 8811 	msr	BASEPRI, r3
   37956:	f3bf 8f6f 	isb	sy
}
   3795a:	4770      	bx	lr

0003795c <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   3795c:	2201      	movs	r2, #1
   3795e:	6903      	ldr	r3, [r0, #16]
   37960:	68db      	ldr	r3, [r3, #12]
   37962:	739a      	strb	r2, [r3, #14]
}
   37964:	4770      	bx	lr

00037966 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   37966:	6903      	ldr	r3, [r0, #16]
   37968:	68db      	ldr	r3, [r3, #12]
   3796a:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   3796c:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   37970:	b962      	cbnz	r2, 3798c <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   37972:	6842      	ldr	r2, [r0, #4]
   37974:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   37976:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   3797a:	b140      	cbz	r0, 3798e <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   3797c:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   37980:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   37984:	d003      	beq.n	3798e <uarte_nrfx_irq_tx_ready_complete+0x28>
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   37986:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
   37988:	6119      	str	r1, [r3, #16]
   3798a:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   3798c:	2000      	movs	r0, #0
}
   3798e:	4770      	bx	lr

00037990 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   37990:	6843      	ldr	r3, [r0, #4]
   37992:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   37994:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   37998:	3800      	subs	r0, #0
   3799a:	bf18      	it	ne
   3799c:	2001      	movne	r0, #1
   3799e:	4770      	bx	lr

000379a0 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   379a0:	2210      	movs	r2, #16
	return config->uarte_regs;
   379a2:	6843      	ldr	r3, [r0, #4]
   379a4:	681b      	ldr	r3, [r3, #0]
   379a6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   379aa:	4770      	bx	lr

000379ac <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   379ac:	2210      	movs	r2, #16
	return config->uarte_regs;
   379ae:	6843      	ldr	r3, [r0, #4]
   379b0:	681b      	ldr	r3, [r3, #0]
   379b2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   379b6:	4770      	bx	lr

000379b8 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   379b8:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   379bc:	6843      	ldr	r3, [r0, #4]
   379be:	681b      	ldr	r3, [r3, #0]
   379c0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   379c4:	4770      	bx	lr

000379c6 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   379c6:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   379ca:	6843      	ldr	r3, [r0, #4]
   379cc:	681b      	ldr	r3, [r3, #0]
   379ce:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   379d2:	4770      	bx	lr

000379d4 <uarte_nrfx_irq_update>:
}
   379d4:	2001      	movs	r0, #1
   379d6:	4770      	bx	lr

000379d8 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   379d8:	6903      	ldr	r3, [r0, #16]
   379da:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   379dc:	e9c3 1200 	strd	r1, r2, [r3]
}
   379e0:	4770      	bx	lr

000379e2 <tx_start>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   379e2:	6840      	ldr	r0, [r0, #4]
	return config->uarte_regs;
   379e4:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   379e6:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   379ea:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   379ee:	2200      	movs	r2, #0
   379f0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   379f4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   379f8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   379fc:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   37a00:	6842      	ldr	r2, [r0, #4]
   37a02:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   37a04:	bf41      	itttt	mi
   37a06:	2208      	movmi	r2, #8
   37a08:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   37a0c:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   37a10:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   37a14:	2201      	movs	r2, #1
   37a16:	609a      	str	r2, [r3, #8]
}
   37a18:	4770      	bx	lr

00037a1a <uarte_nrfx_fifo_fill>:
{
   37a1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   37a1c:	6906      	ldr	r6, [r0, #16]
{
   37a1e:	4605      	mov	r5, r0
	len = MIN(len, data->int_driven->tx_buff_size);
   37a20:	68f3      	ldr	r3, [r6, #12]
   37a22:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   37a24:	3310      	adds	r3, #16
   37a26:	4294      	cmp	r4, r2
   37a28:	bfa8      	it	ge
   37a2a:	4614      	movge	r4, r2
   37a2c:	2201      	movs	r2, #1
   37a2e:	e8d3 0fef 	ldaex	r0, [r3]
   37a32:	2800      	cmp	r0, #0
   37a34:	d103      	bne.n	37a3e <uarte_nrfx_fifo_fill+0x24>
   37a36:	e8c3 2fe7 	stlex	r7, r2, [r3]
   37a3a:	2f00      	cmp	r7, #0
   37a3c:	d1f7      	bne.n	37a2e <uarte_nrfx_fifo_fill+0x14>
   37a3e:	bf0c      	ite	eq
   37a40:	4613      	moveq	r3, r2
   37a42:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   37a44:	d01d      	beq.n	37a82 <uarte_nrfx_fifo_fill+0x68>
		return 0;
   37a46:	461c      	mov	r4, r3
}
   37a48:	4620      	mov	r0, r4
   37a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   37a4c:	68f2      	ldr	r2, [r6, #12]
   37a4e:	5cc8      	ldrb	r0, [r1, r3]
   37a50:	6892      	ldr	r2, [r2, #8]
   37a52:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
   37a54:	3301      	adds	r3, #1
   37a56:	42a3      	cmp	r3, r4
   37a58:	dbf8      	blt.n	37a4c <uarte_nrfx_fifo_fill+0x32>
	__asm__ volatile(
   37a5a:	f04f 0320 	mov.w	r3, #32
   37a5e:	f3ef 8711 	mrs	r7, BASEPRI
   37a62:	f383 8811 	msr	BASEPRI, r3
   37a66:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   37a6a:	4628      	mov	r0, r5
   37a6c:	f7ff ff26 	bl	378bc <is_tx_ready>
   37a70:	68f3      	ldr	r3, [r6, #12]
   37a72:	b940      	cbnz	r0, 37a86 <uarte_nrfx_fifo_fill+0x6c>
		len = 0;
   37a74:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   37a76:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   37a78:	f387 8811 	msr	BASEPRI, r7
   37a7c:	f3bf 8f6f 	isb	sy
	return len;
   37a80:	e7e2      	b.n	37a48 <uarte_nrfx_fifo_fill+0x2e>
	for (int i = 0; i < len; i++) {
   37a82:	2300      	movs	r3, #0
   37a84:	e7e7      	b.n	37a56 <uarte_nrfx_fifo_fill+0x3c>
		tx_start(dev, data->int_driven->tx_buffer, len);
   37a86:	4622      	mov	r2, r4
   37a88:	4628      	mov	r0, r5
   37a8a:	6899      	ldr	r1, [r3, #8]
   37a8c:	f7ff ffa9 	bl	379e2 <tx_start>
   37a90:	e7f2      	b.n	37a78 <uarte_nrfx_fifo_fill+0x5e>

00037a92 <uarte_nrfx_irq_is_pending>:
{
   37a92:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   37a94:	6843      	ldr	r3, [r0, #4]
{
   37a96:	4604      	mov	r4, r0
	return config->uarte_regs;
   37a98:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   37a9a:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   37a9e:	025b      	lsls	r3, r3, #9
   37aa0:	d405      	bmi.n	37aae <uarte_nrfx_irq_is_pending+0x1c>
   37aa2:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   37aa6:	f010 0010 	ands.w	r0, r0, #16
   37aaa:	d106      	bne.n	37aba <uarte_nrfx_irq_is_pending+0x28>
}
   37aac:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   37aae:	f7ff ff5a 	bl	37966 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   37ab2:	2800      	cmp	r0, #0
   37ab4:	d0f5      	beq.n	37aa2 <uarte_nrfx_irq_is_pending+0x10>
		||
   37ab6:	2001      	movs	r0, #1
   37ab8:	e7f8      	b.n	37aac <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   37aba:	4620      	mov	r0, r4
   37abc:	f7ff ff68 	bl	37990 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   37ac0:	3800      	subs	r0, #0
   37ac2:	bf18      	it	ne
   37ac4:	2001      	movne	r0, #1
   37ac6:	e7f1      	b.n	37aac <uarte_nrfx_irq_is_pending+0x1a>

00037ac8 <entropy_cc3xx_rng_init>:
			return -EINVAL;
		}
	#endif

	return 0;
}
   37ac8:	2000      	movs	r0, #0
   37aca:	4770      	bx	lr

00037acc <entropy_cc3xx_rng_get_entropy>:
{
   37acc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   37ace:	460f      	mov	r7, r1
   37ad0:	4616      	mov	r6, r2
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   37ad2:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   37ad6:	2400      	movs	r4, #0
	int res = -EINVAL;
   37ad8:	f06f 0015 	mvn.w	r0, #21
	while (offset < length) {
   37adc:	42a6      	cmp	r6, r4
   37ade:	d801      	bhi.n	37ae4 <entropy_cc3xx_rng_get_entropy+0x18>
}
   37ae0:	b003      	add	sp, #12
   37ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   37ae4:	1b33      	subs	r3, r6, r4
   37ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   37aea:	bf38      	it	cc
   37aec:	461d      	movcc	r5, r3
			res = spm_request_random_number(buffer + offset,
   37aee:	aa01      	add	r2, sp, #4
   37af0:	4629      	mov	r1, r5
   37af2:	1938      	adds	r0, r7, r4
   37af4:	f7ff fc35 	bl	37362 <spm_request_random_number>
		if (olen != chunk_size) {
   37af8:	9b01      	ldr	r3, [sp, #4]
   37afa:	42ab      	cmp	r3, r5
   37afc:	d103      	bne.n	37b06 <entropy_cc3xx_rng_get_entropy+0x3a>
		if (res != 0) {
   37afe:	2800      	cmp	r0, #0
   37b00:	d1ee      	bne.n	37ae0 <entropy_cc3xx_rng_get_entropy+0x14>
		offset += chunk_size;
   37b02:	442c      	add	r4, r5
   37b04:	e7ea      	b.n	37adc <entropy_cc3xx_rng_get_entropy+0x10>
			return -EINVAL;
   37b06:	f06f 0015 	mvn.w	r0, #21
   37b0a:	e7e9      	b.n	37ae0 <entropy_cc3xx_rng_get_entropy+0x14>

00037b0c <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   37b0c:	f7fb bb62 	b.w	331d4 <SystemCoreClockUpdate>

00037b10 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   37b10:	4700      	bx	r0

00037b12 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   37b12:	f000 b9ee 	b.w	37ef2 <z_impl_k_busy_wait>

00037b16 <z_device_state_init>:
}
   37b16:	4770      	bx	lr

00037b18 <z_device_ready>:
	return dev->state->initialized && (dev->state->init_res == 0U);
   37b18:	68c3      	ldr	r3, [r0, #12]
   37b1a:	8818      	ldrh	r0, [r3, #0]
   37b1c:	f3c0 0008 	ubfx	r0, r0, #0, #9
}
   37b20:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   37b24:	4258      	negs	r0, r3
   37b26:	4158      	adcs	r0, r3
   37b28:	4770      	bx	lr

00037b2a <k_mem_slab_init>:
{
   37b2a:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   37b2c:	2400      	movs	r4, #0
   37b2e:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   37b30:	ea41 0402 	orr.w	r4, r1, r2
   37b34:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   37b38:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   37b3c:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   37b3e:	d10c      	bne.n	37b5a <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   37b40:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   37b42:	42a3      	cmp	r3, r4
   37b44:	d103      	bne.n	37b4e <k_mem_slab_init+0x24>
   37b46:	e9c0 0000 	strd	r0, r0, [r0]
}
   37b4a:	2000      	movs	r0, #0
}
   37b4c:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   37b4e:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   37b50:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   37b52:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   37b54:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   37b56:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   37b58:	e7f3      	b.n	37b42 <k_mem_slab_init+0x18>
		return -EINVAL;
   37b5a:	f06f 0015 	mvn.w	r0, #21
	return rc;
   37b5e:	e7f5      	b.n	37b4c <k_mem_slab_init+0x22>

00037b60 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   37b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37b62:	4604      	mov	r4, r0
   37b64:	460d      	mov	r5, r1
	__asm__ volatile(
   37b66:	f04f 0320 	mov.w	r3, #32
   37b6a:	f3ef 8611 	mrs	r6, BASEPRI
   37b6e:	f383 8811 	msr	BASEPRI, r3
   37b72:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   37b76:	6947      	ldr	r7, [r0, #20]
   37b78:	b97f      	cbnz	r7, 37b9a <k_mem_slab_free+0x3a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   37b7a:	f000 f92e 	bl	37dda <z_unpend_first_thread>

		if (pending_thread != NULL) {
   37b7e:	b160      	cbz	r0, 37b9a <k_mem_slab_free+0x3a>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   37b80:	682a      	ldr	r2, [r5, #0]
   37b82:	f8c0 70b0 	str.w	r7, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   37b86:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   37b88:	f000 f8e0 	bl	37d4c <z_ready_thread>
			z_reschedule(&slab->lock, key);
   37b8c:	4631      	mov	r1, r6
   37b8e:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   37b92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   37b96:	f7fc ba97 	b.w	340c8 <z_reschedule>
	**(char ***) mem = slab->free_list;
   37b9a:	682b      	ldr	r3, [r5, #0]
   37b9c:	6962      	ldr	r2, [r4, #20]
   37b9e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   37ba0:	682b      	ldr	r3, [r5, #0]
   37ba2:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   37ba4:	69a3      	ldr	r3, [r4, #24]
   37ba6:	3b01      	subs	r3, #1
   37ba8:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   37baa:	f386 8811 	msr	BASEPRI, r6
   37bae:	f3bf 8f6f 	isb	sy
}
   37bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00037bb4 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   37bb4:	f3ef 8005 	mrs	r0, IPSR
}
   37bb8:	3800      	subs	r0, #0
   37bba:	bf18      	it	ne
   37bbc:	2001      	movne	r0, #1
   37bbe:	4770      	bx	lr

00037bc0 <k_thread_name_get>:
}
   37bc0:	3078      	adds	r0, #120	; 0x78
   37bc2:	4770      	bx	lr

00037bc4 <z_impl_k_thread_start>:
	z_sched_start(thread);
   37bc4:	f7fc bc58 	b.w	34478 <z_sched_start>

00037bc8 <z_impl_k_thread_stack_space_get>:
int z_impl_k_thread_stack_space_get(const struct k_thread *thread,
				    size_t *unused_ptr)
{
	const uint8_t *start = (uint8_t *)thread->stack_info.start;
	size_t size = thread->stack_info.size;
	size_t unused = 0;
   37bc8:	2300      	movs	r3, #0
{
   37bca:	b510      	push	{r4, lr}
	size_t size = thread->stack_info.size;
   37bcc:	e9d0 4227 	ldrd	r4, r2, [r0, #156]	; 0x9c
		 */
		checked_stack += 4;
		size -= 4;
	}

	for (size_t i = 0; i < size; i++) {
   37bd0:	4293      	cmp	r3, r2
   37bd2:	d102      	bne.n	37bda <z_impl_k_thread_stack_space_get+0x12>
	}

	*unused_ptr = unused;

	return 0;
}
   37bd4:	2000      	movs	r0, #0
	*unused_ptr = unused;
   37bd6:	600b      	str	r3, [r1, #0]
}
   37bd8:	bd10      	pop	{r4, pc}
		if ((checked_stack[i]) == 0xaaU) {
   37bda:	5ce0      	ldrb	r0, [r4, r3]
   37bdc:	28aa      	cmp	r0, #170	; 0xaa
   37bde:	d1f9      	bne.n	37bd4 <z_impl_k_thread_stack_space_get+0xc>
			unused++;
   37be0:	3301      	adds	r3, #1
	for (size_t i = 0; i < size; i++) {
   37be2:	e7f5      	b.n	37bd0 <z_impl_k_thread_stack_space_get+0x8>

00037be4 <z_pm_save_idle_exit>:
{
   37be4:	b508      	push	{r3, lr}
	pm_system_resume();
   37be6:	f7f9 fb35 	bl	31254 <pm_system_resume>
}
   37bea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   37bee:	f7ff bbb6 	b.w	3735e <sys_clock_idle_exit>

00037bf2 <z_impl_k_msgq_peek>:
}
#include <syscalls/k_msgq_get_mrsh.c>
#endif

int z_impl_k_msgq_peek(struct k_msgq *msgq, void *data)
{
   37bf2:	4603      	mov	r3, r0
   37bf4:	b510      	push	{r4, lr}
   37bf6:	4608      	mov	r0, r1
	__asm__ volatile(
   37bf8:	f04f 0220 	mov.w	r2, #32
   37bfc:	f3ef 8411 	mrs	r4, BASEPRI
   37c00:	f382 8811 	msr	BASEPRI, r2
   37c04:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);

	if (msgq->used_msgs > 0U) {
   37c08:	6a1a      	ldr	r2, [r3, #32]
   37c0a:	b14a      	cbz	r2, 37c20 <z_impl_k_msgq_peek+0x2e>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   37c0c:	689a      	ldr	r2, [r3, #8]
   37c0e:	6999      	ldr	r1, [r3, #24]
   37c10:	f7ff fcfe 	bl	37610 <memcpy>
		result = 0;
   37c14:	2000      	movs	r0, #0
	__asm__ volatile(
   37c16:	f384 8811 	msr	BASEPRI, r4
   37c1a:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC(k_msgq, peek, msgq, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   37c1e:	bd10      	pop	{r4, pc}
		result = -ENOMSG;
   37c20:	f06f 0022 	mvn.w	r0, #34	; 0x22
   37c24:	e7f7      	b.n	37c16 <z_impl_k_msgq_peek+0x24>

00037c26 <z_impl_k_mutex_init>:
{
   37c26:	4603      	mov	r3, r0
	mutex->owner = NULL;
   37c28:	2000      	movs	r0, #0
   37c2a:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   37c2e:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   37c32:	4770      	bx	lr

00037c34 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   37c34:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   37c38:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   37c3a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   37c3c:	2300      	movs	r3, #0
	node->prev = NULL;
   37c3e:	e9c0 3300 	strd	r3, r3, [r0]
}
   37c42:	4770      	bx	lr

00037c44 <unpend_thread_no_timeout>:
{
   37c44:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   37c46:	f7ff fff5 	bl	37c34 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   37c4a:	7b43      	ldrb	r3, [r0, #13]
   37c4c:	f023 0302 	bic.w	r3, r3, #2
   37c50:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   37c52:	2300      	movs	r3, #0
   37c54:	6083      	str	r3, [r0, #8]
}
   37c56:	bd08      	pop	{r3, pc}

00037c58 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   37c58:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   37c5c:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   37c60:	4283      	cmp	r3, r0
		return b2 - b1;
   37c62:	bf14      	ite	ne
   37c64:	1ac0      	subne	r0, r0, r3
	return 0;
   37c66:	2000      	moveq	r0, #0
}
   37c68:	4770      	bx	lr

00037c6a <z_unpend_thread_no_timeout>:
{
   37c6a:	b508      	push	{r3, lr}
	__asm__ volatile(
   37c6c:	f04f 0320 	mov.w	r3, #32
   37c70:	f3ef 8111 	mrs	r1, BASEPRI
   37c74:	f383 8811 	msr	BASEPRI, r3
   37c78:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   37c7c:	f7ff ffe2 	bl	37c44 <unpend_thread_no_timeout>
	__asm__ volatile(
   37c80:	f381 8811 	msr	BASEPRI, r1
   37c84:	f3bf 8f6f 	isb	sy
}
   37c88:	bd08      	pop	{r3, pc}

00037c8a <z_unpend_thread>:
{
   37c8a:	b510      	push	{r4, lr}
	__asm__ volatile(
   37c8c:	f04f 0320 	mov.w	r3, #32
   37c90:	f3ef 8411 	mrs	r4, BASEPRI
   37c94:	f383 8811 	msr	BASEPRI, r3
   37c98:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   37c9c:	f7ff ffd2 	bl	37c44 <unpend_thread_no_timeout>
	__asm__ volatile(
   37ca0:	f384 8811 	msr	BASEPRI, r4
   37ca4:	f3bf 8f6f 	isb	sy
}
   37ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   37cac:	3018      	adds	r0, #24
   37cae:	f000 b8ca 	b.w	37e46 <z_abort_timeout>

00037cb2 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   37cb2:	4603      	mov	r3, r0
   37cb4:	b920      	cbnz	r0, 37cc0 <z_reschedule_irqlock+0xe>
   37cb6:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   37cba:	b90a      	cbnz	r2, 37cc0 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   37cbc:	f7f9 bea2 	b.w	31a04 <arch_swap>
   37cc0:	f383 8811 	msr	BASEPRI, r3
   37cc4:	f3bf 8f6f 	isb	sy
}
   37cc8:	4770      	bx	lr

00037cca <z_reschedule_unlocked>:
	__asm__ volatile(
   37cca:	f04f 0320 	mov.w	r3, #32
   37cce:	f3ef 8011 	mrs	r0, BASEPRI
   37cd2:	f383 8811 	msr	BASEPRI, r3
   37cd6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   37cda:	f7ff bfea 	b.w	37cb2 <z_reschedule_irqlock>

00037cde <z_priq_dumb_best>:
{
   37cde:	4603      	mov	r3, r0
	return list->head == list;
   37ce0:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   37ce2:	4283      	cmp	r3, r0
   37ce4:	d003      	beq.n	37cee <z_priq_dumb_best+0x10>
	if (n != NULL) {
   37ce6:	2800      	cmp	r0, #0
   37ce8:	bf38      	it	cc
   37cea:	2000      	movcc	r0, #0
   37cec:	4770      	bx	lr
	struct k_thread *thread = NULL;
   37cee:	2000      	movs	r0, #0
}
   37cf0:	4770      	bx	lr

00037cf2 <add_to_waitq_locked>:
{
   37cf2:	b538      	push	{r3, r4, r5, lr}
   37cf4:	4604      	mov	r4, r0
   37cf6:	460d      	mov	r5, r1
	unready_thread(thread);
   37cf8:	f7fc fa2c 	bl	34154 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   37cfc:	7b63      	ldrb	r3, [r4, #13]
   37cfe:	f043 0302 	orr.w	r3, r3, #2
   37d02:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   37d04:	b1b5      	cbz	r5, 37d34 <add_to_waitq_locked+0x42>
	return list->head == list;
   37d06:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   37d08:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   37d0a:	429d      	cmp	r5, r3
   37d0c:	bf08      	it	eq
   37d0e:	2300      	moveq	r3, #0
   37d10:	2b00      	cmp	r3, #0
   37d12:	bf38      	it	cc
   37d14:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   37d16:	b19b      	cbz	r3, 37d40 <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
   37d18:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   37d1c:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   37d20:	4291      	cmp	r1, r2
   37d22:	d008      	beq.n	37d36 <add_to_waitq_locked+0x44>
		return b2 - b1;
   37d24:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   37d26:	2a00      	cmp	r2, #0
   37d28:	dd05      	ble.n	37d36 <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
   37d2a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   37d2c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   37d30:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   37d32:	605c      	str	r4, [r3, #4]
}
   37d34:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   37d36:	686a      	ldr	r2, [r5, #4]
   37d38:	4293      	cmp	r3, r2
   37d3a:	d001      	beq.n	37d40 <add_to_waitq_locked+0x4e>
   37d3c:	681b      	ldr	r3, [r3, #0]
   37d3e:	e7ea      	b.n	37d16 <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
   37d40:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   37d42:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   37d46:	601c      	str	r4, [r3, #0]
	list->tail = node;
   37d48:	606c      	str	r4, [r5, #4]
   37d4a:	e7f3      	b.n	37d34 <add_to_waitq_locked+0x42>

00037d4c <z_ready_thread>:
{
   37d4c:	b510      	push	{r4, lr}
   37d4e:	f04f 0320 	mov.w	r3, #32
   37d52:	f3ef 8411 	mrs	r4, BASEPRI
   37d56:	f383 8811 	msr	BASEPRI, r3
   37d5a:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   37d5e:	f7fc fb53 	bl	34408 <ready_thread>
	__asm__ volatile(
   37d62:	f384 8811 	msr	BASEPRI, r4
   37d66:	f3bf 8f6f 	isb	sy
}
   37d6a:	bd10      	pop	{r4, pc}

00037d6c <z_thread_timeout>:
{
   37d6c:	4601      	mov	r1, r0
   37d6e:	b510      	push	{r4, lr}
	__asm__ volatile(
   37d70:	f04f 0320 	mov.w	r3, #32
   37d74:	f3ef 8411 	mrs	r4, BASEPRI
   37d78:	f383 8811 	msr	BASEPRI, r3
   37d7c:	f3bf 8f6f 	isb	sy
		if (!killed) {
   37d80:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   37d84:	f013 0f28 	tst.w	r3, #40	; 0x28
   37d88:	d10d      	bne.n	37da6 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   37d8a:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   37d8e:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   37d90:	b10b      	cbz	r3, 37d96 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   37d92:	f7ff ff57 	bl	37c44 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   37d96:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   37d9a:	f023 0314 	bic.w	r3, r3, #20
   37d9e:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   37da2:	f7fc fb31 	bl	34408 <ready_thread>
	__asm__ volatile(
   37da6:	f384 8811 	msr	BASEPRI, r4
   37daa:	f3bf 8f6f 	isb	sy
}
   37dae:	bd10      	pop	{r4, pc}

00037db0 <z_unpend1_no_timeout>:
{
   37db0:	b510      	push	{r4, lr}
	__asm__ volatile(
   37db2:	f04f 0320 	mov.w	r3, #32
   37db6:	f3ef 8411 	mrs	r4, BASEPRI
   37dba:	f383 8811 	msr	BASEPRI, r3
   37dbe:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   37dc2:	f7ff ff8c 	bl	37cde <z_priq_dumb_best>
		if (thread != NULL) {
   37dc6:	4601      	mov	r1, r0
   37dc8:	b108      	cbz	r0, 37dce <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   37dca:	f7ff ff3b 	bl	37c44 <unpend_thread_no_timeout>
	__asm__ volatile(
   37dce:	f384 8811 	msr	BASEPRI, r4
   37dd2:	f3bf 8f6f 	isb	sy
}
   37dd6:	4608      	mov	r0, r1
   37dd8:	bd10      	pop	{r4, pc}

00037dda <z_unpend_first_thread>:
{
   37dda:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   37ddc:	f04f 0320 	mov.w	r3, #32
   37de0:	f3ef 8511 	mrs	r5, BASEPRI
   37de4:	f383 8811 	msr	BASEPRI, r3
   37de8:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   37dec:	f7ff ff77 	bl	37cde <z_priq_dumb_best>
		if (thread != NULL) {
   37df0:	4604      	mov	r4, r0
   37df2:	b120      	cbz	r0, 37dfe <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   37df4:	f7ff ff26 	bl	37c44 <unpend_thread_no_timeout>
   37df8:	3018      	adds	r0, #24
   37dfa:	f000 f824 	bl	37e46 <z_abort_timeout>
	__asm__ volatile(
   37dfe:	f385 8811 	msr	BASEPRI, r5
   37e02:	f3bf 8f6f 	isb	sy
}
   37e06:	4620      	mov	r0, r4
   37e08:	bd38      	pop	{r3, r4, r5, pc}

00037e0a <z_sched_wake>:
{
   37e0a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   37e0c:	f04f 0320 	mov.w	r3, #32
   37e10:	f3ef 8511 	mrs	r5, BASEPRI
   37e14:	f383 8811 	msr	BASEPRI, r3
   37e18:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   37e1c:	f7ff ff5f 	bl	37cde <z_priq_dumb_best>
		if (thread != NULL) {
   37e20:	4604      	mov	r4, r0
   37e22:	b158      	cbz	r0, 37e3c <z_sched_wake+0x32>
   37e24:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
   37e28:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   37e2a:	f7ff ff0b 	bl	37c44 <unpend_thread_no_timeout>
   37e2e:	3018      	adds	r0, #24
   37e30:	f000 f809 	bl	37e46 <z_abort_timeout>
			ready_thread(thread);
   37e34:	4620      	mov	r0, r4
   37e36:	f7fc fae7 	bl	34408 <ready_thread>
			ret = true;
   37e3a:	2001      	movs	r0, #1
	__asm__ volatile(
   37e3c:	f385 8811 	msr	BASEPRI, r5
   37e40:	f3bf 8f6f 	isb	sy
}
   37e44:	bd38      	pop	{r3, r4, r5, pc}

00037e46 <z_abort_timeout>:
{
   37e46:	b510      	push	{r4, lr}
	__asm__ volatile(
   37e48:	f04f 0220 	mov.w	r2, #32
   37e4c:	f3ef 8411 	mrs	r4, BASEPRI
   37e50:	f382 8811 	msr	BASEPRI, r2
   37e54:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   37e58:	6803      	ldr	r3, [r0, #0]
   37e5a:	b13b      	cbz	r3, 37e6c <z_abort_timeout+0x26>
			remove_timeout(to);
   37e5c:	f7fc fc98 	bl	34790 <remove_timeout>
			ret = 0;
   37e60:	2000      	movs	r0, #0
	__asm__ volatile(
   37e62:	f384 8811 	msr	BASEPRI, r4
   37e66:	f3bf 8f6f 	isb	sy
}
   37e6a:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   37e6c:	f06f 0015 	mvn.w	r0, #21
   37e70:	e7f7      	b.n	37e62 <z_abort_timeout+0x1c>

00037e72 <z_timeout_remaining>:
{
   37e72:	b510      	push	{r4, lr}
	__asm__ volatile(
   37e74:	f04f 0320 	mov.w	r3, #32
   37e78:	f3ef 8411 	mrs	r4, BASEPRI
   37e7c:	f383 8811 	msr	BASEPRI, r3
   37e80:	f3bf 8f6f 	isb	sy
		ticks = timeout_rem(timeout);
   37e84:	f7fc fcca 	bl	3481c <timeout_rem>
	__asm__ volatile(
   37e88:	f384 8811 	msr	BASEPRI, r4
   37e8c:	f3bf 8f6f 	isb	sy
}
   37e90:	bd10      	pop	{r4, pc}

00037e92 <z_get_next_timeout_expiry>:
{
   37e92:	b510      	push	{r4, lr}
	__asm__ volatile(
   37e94:	f04f 0320 	mov.w	r3, #32
   37e98:	f3ef 8411 	mrs	r4, BASEPRI
   37e9c:	f383 8811 	msr	BASEPRI, r3
   37ea0:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   37ea4:	f7fc fc8e 	bl	347c4 <next_timeout>
	__asm__ volatile(
   37ea8:	f384 8811 	msr	BASEPRI, r4
   37eac:	f3bf 8f6f 	isb	sy
}
   37eb0:	bd10      	pop	{r4, pc}

00037eb2 <z_set_timeout_expiry>:
{
   37eb2:	b570      	push	{r4, r5, r6, lr}
   37eb4:	4604      	mov	r4, r0
   37eb6:	460d      	mov	r5, r1
	__asm__ volatile(
   37eb8:	f04f 0320 	mov.w	r3, #32
   37ebc:	f3ef 8611 	mrs	r6, BASEPRI
   37ec0:	f383 8811 	msr	BASEPRI, r3
   37ec4:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   37ec8:	f7fc fc7c 	bl	347c4 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   37ecc:	2801      	cmp	r0, #1
   37ece:	dd05      	ble.n	37edc <z_set_timeout_expiry+0x2a>
   37ed0:	42a0      	cmp	r0, r4
   37ed2:	db03      	blt.n	37edc <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   37ed4:	4629      	mov	r1, r5
   37ed6:	4620      	mov	r0, r4
   37ed8:	f7f9 fd26 	bl	31928 <sys_clock_set_timeout>
	__asm__ volatile(
   37edc:	f386 8811 	msr	BASEPRI, r6
   37ee0:	f3bf 8f6f 	isb	sy
}
   37ee4:	bd70      	pop	{r4, r5, r6, pc}

00037ee6 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   37ee6:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   37ee8:	f7fc fdb0 	bl	34a4c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   37eec:	bd08      	pop	{r3, pc}

00037eee <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   37eee:	f7fc bdad 	b.w	34a4c <sys_clock_tick_get>

00037ef2 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   37ef2:	b108      	cbz	r0, 37ef8 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   37ef4:	f7f6 bb46 	b.w	2e584 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   37ef8:	4770      	bx	lr

00037efa <k_timer_init>:
	timer->status = 0U;
   37efa:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   37efc:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
   37f00:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   37f04:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   37f08:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   37f0c:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   37f0e:	6343      	str	r3, [r0, #52]	; 0x34
}
   37f10:	4770      	bx	lr

00037f12 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   37f12:	b510      	push	{r4, lr}
   37f14:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   37f16:	f7ff ff96 	bl	37e46 <z_abort_timeout>

	if (inactive) {
   37f1a:	b9b0      	cbnz	r0, 37f4a <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   37f1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   37f1e:	b10b      	cbz	r3, 37f24 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   37f20:	4620      	mov	r0, r4
   37f22:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   37f24:	f104 0018 	add.w	r0, r4, #24
   37f28:	f7ff ff42 	bl	37db0 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   37f2c:	b168      	cbz	r0, 37f4a <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   37f2e:	f7ff ff0d 	bl	37d4c <z_ready_thread>
	__asm__ volatile(
   37f32:	f04f 0320 	mov.w	r3, #32
   37f36:	f3ef 8011 	mrs	r0, BASEPRI
   37f3a:	f383 8811 	msr	BASEPRI, r3
   37f3e:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   37f42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   37f46:	f7ff beb4 	b.w	37cb2 <z_reschedule_irqlock>
   37f4a:	bd10      	pop	{r4, pc}

00037f4c <clear_event_registrations>:
	while (num_events--) {
   37f4c:	2314      	movs	r3, #20
{
   37f4e:	b570      	push	{r4, r5, r6, lr}
	event->poller = NULL;
   37f50:	2400      	movs	r4, #0
   37f52:	2601      	movs	r6, #1
   37f54:	fb03 0101 	mla	r1, r3, r1, r0
	while (num_events--) {
   37f58:	4281      	cmp	r1, r0
   37f5a:	d100      	bne.n	37f5e <clear_event_registrations+0x12>
}
   37f5c:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   37f5e:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   37f62:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   37f66:	f003 031f 	and.w	r3, r3, #31
   37f6a:	2b08      	cmp	r3, #8
   37f6c:	d80d      	bhi.n	37f8a <clear_event_registrations+0x3e>
   37f6e:	fa06 f303 	lsl.w	r3, r6, r3
   37f72:	f413 7f8b 	tst.w	r3, #278	; 0x116
   37f76:	d008      	beq.n	37f8a <clear_event_registrations+0x3e>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   37f78:	f851 3c14 	ldr.w	r3, [r1, #-20]
   37f7c:	b12b      	cbz	r3, 37f8a <clear_event_registrations+0x3e>
	sys_dnode_t *const prev = node->prev;
   37f7e:	f851 5c10 	ldr.w	r5, [r1, #-16]
	prev->next = next;
   37f82:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   37f84:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   37f86:	e941 4405 	strd	r4, r4, [r1, #-20]
	__asm__ volatile(
   37f8a:	f382 8811 	msr	BASEPRI, r2
   37f8e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   37f92:	f04f 0320 	mov.w	r3, #32
   37f96:	f3ef 8211 	mrs	r2, BASEPRI
   37f9a:	f383 8811 	msr	BASEPRI, r3
   37f9e:	f3bf 8f6f 	isb	sy
   37fa2:	3914      	subs	r1, #20
   37fa4:	e7d8      	b.n	37f58 <clear_event_registrations+0xc>

00037fa6 <add_event>:
{
   37fa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37fa8:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   37faa:	e9d0 2300 	ldrd	r2, r3, [r0]
   37fae:	4290      	cmp	r0, r2
   37fb0:	4604      	mov	r4, r0
   37fb2:	460d      	mov	r5, r1
   37fb4:	d105      	bne.n	37fc2 <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   37fb6:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   37fb8:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   37fbc:	601d      	str	r5, [r3, #0]
	list->tail = node;
   37fbe:	6065      	str	r5, [r4, #4]
}
   37fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   37fc2:	2b00      	cmp	r3, #0
   37fc4:	d0f7      	beq.n	37fb6 <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   37fc6:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   37fc8:	b100      	cbz	r0, 37fcc <add_event+0x26>
   37fca:	3860      	subs	r0, #96	; 0x60
   37fcc:	b107      	cbz	r7, 37fd0 <add_event+0x2a>
   37fce:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   37fd0:	4639      	mov	r1, r7
   37fd2:	f7ff fe41 	bl	37c58 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   37fd6:	2800      	cmp	r0, #0
   37fd8:	dced      	bgt.n	37fb6 <add_event+0x10>
	return list->head == list;
   37fda:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   37fdc:	42b4      	cmp	r4, r6
   37fde:	d0ea      	beq.n	37fb6 <add_event+0x10>
   37fe0:	2e00      	cmp	r6, #0
   37fe2:	bf38      	it	cc
   37fe4:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   37fe6:	2e00      	cmp	r6, #0
   37fe8:	d0e5      	beq.n	37fb6 <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   37fea:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   37fec:	b101      	cbz	r1, 37ff0 <add_event+0x4a>
   37fee:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   37ff0:	4638      	mov	r0, r7
   37ff2:	f7ff fe31 	bl	37c58 <z_sched_prio_cmp>
   37ff6:	2800      	cmp	r0, #0
   37ff8:	dd05      	ble.n	38006 <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   37ffa:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   37ffc:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   38000:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   38002:	6075      	str	r5, [r6, #4]
			return;
   38004:	e7dc      	b.n	37fc0 <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   38006:	6863      	ldr	r3, [r4, #4]
   38008:	42b3      	cmp	r3, r6
   3800a:	d0d4      	beq.n	37fb6 <add_event+0x10>
   3800c:	6836      	ldr	r6, [r6, #0]
   3800e:	e7ea      	b.n	37fe6 <add_event+0x40>

00038010 <register_events>:
{
   38010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   38014:	2500      	movs	r5, #0
{
   38016:	468b      	mov	fp, r1
   38018:	4614      	mov	r4, r2
   3801a:	461f      	mov	r7, r3
   3801c:	4682      	mov	sl, r0
	int events_registered = 0;
   3801e:	462e      	mov	r6, r5
	event->poller = NULL;
   38020:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   38022:	455d      	cmp	r5, fp
   38024:	db02      	blt.n	3802c <register_events+0x1c>
}
   38026:	4630      	mov	r0, r6
   38028:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3802c:	f04f 0320 	mov.w	r3, #32
   38030:	f3ef 8911 	mrs	r9, BASEPRI
   38034:	f383 8811 	msr	BASEPRI, r3
   38038:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   3803c:	f89a 300d 	ldrb.w	r3, [sl, #13]
   38040:	f003 031f 	and.w	r3, r3, #31
   38044:	3b01      	subs	r3, #1
   38046:	2b07      	cmp	r3, #7
   38048:	d80f      	bhi.n	3806a <register_events+0x5a>
   3804a:	e8df f003 	tbb	[pc, r3]
   3804e:	041e      	.short	0x041e
   38050:	0e0e0a0e 	.word	0x0e0e0a0e
   38054:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   38056:	f8da 3010 	ldr.w	r3, [sl, #16]
   3805a:	689b      	ldr	r3, [r3, #8]
   3805c:	b12b      	cbz	r3, 3806a <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   3805e:	2302      	movs	r3, #2
   38060:	e020      	b.n	380a4 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   38062:	f8da 3010 	ldr.w	r3, [sl, #16]
   38066:	681b      	ldr	r3, [r3, #0]
   38068:	bb8b      	cbnz	r3, 380ce <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   3806a:	bb47      	cbnz	r7, 380be <register_events+0xae>
   3806c:	7823      	ldrb	r3, [r4, #0]
   3806e:	b333      	cbz	r3, 380be <register_events+0xae>
	switch (event->type) {
   38070:	f89a 300d 	ldrb.w	r3, [sl, #13]
   38074:	f003 031f 	and.w	r3, r3, #31
   38078:	3b01      	subs	r3, #1
   3807a:	2b07      	cmp	r3, #7
   3807c:	d830      	bhi.n	380e0 <register_events+0xd0>
   3807e:	e8df f003 	tbb	[pc, r3]
   38082:	2833      	.short	0x2833
   38084:	2f2f282f 	.word	0x2f2f282f
   38088:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   3808a:	f8da 3010 	ldr.w	r3, [sl, #16]
   3808e:	689b      	ldr	r3, [r3, #8]
   38090:	2b00      	cmp	r3, #0
   38092:	d0ea      	beq.n	3806a <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   38094:	2301      	movs	r3, #1
   38096:	e005      	b.n	380a4 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   38098:	f8da 3010 	ldr.w	r3, [sl, #16]
   3809c:	6a1b      	ldr	r3, [r3, #32]
   3809e:	2b00      	cmp	r3, #0
   380a0:	d0e3      	beq.n	3806a <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   380a2:	2310      	movs	r3, #16
	event->state |= state;
   380a4:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   380a8:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   380ac:	f3c2 3145 	ubfx	r1, r2, #13, #6
   380b0:	430b      	orrs	r3, r1
   380b2:	f363 3252 	bfi	r2, r3, #13, #6
   380b6:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   380ba:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   380be:	f389 8811 	msr	BASEPRI, r9
   380c2:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   380c6:	3501      	adds	r5, #1
   380c8:	f10a 0a14 	add.w	sl, sl, #20
   380cc:	e7a9      	b.n	38022 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   380ce:	2304      	movs	r3, #4
   380d0:	e7e8      	b.n	380a4 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   380d2:	4622      	mov	r2, r4
   380d4:	4651      	mov	r1, sl
   380d6:	f8da 0010 	ldr.w	r0, [sl, #16]
   380da:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   380dc:	f7ff ff63 	bl	37fa6 <add_event>
	event->poller = poller;
   380e0:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   380e4:	3601      	adds	r6, #1
   380e6:	e7ea      	b.n	380be <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   380e8:	4622      	mov	r2, r4
   380ea:	4651      	mov	r1, sl
   380ec:	f8da 0010 	ldr.w	r0, [sl, #16]
   380f0:	e7f4      	b.n	380dc <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   380f2:	f8da 0010 	ldr.w	r0, [sl, #16]
   380f6:	4622      	mov	r2, r4
   380f8:	4651      	mov	r1, sl
   380fa:	3024      	adds	r0, #36	; 0x24
   380fc:	e7ee      	b.n	380dc <register_events+0xcc>

000380fe <signal_poll_event>:
{
   380fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   38102:	6884      	ldr	r4, [r0, #8]
{
   38104:	4605      	mov	r5, r0
   38106:	460e      	mov	r6, r1
	if (poller != NULL) {
   38108:	b144      	cbz	r4, 3811c <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   3810a:	7863      	ldrb	r3, [r4, #1]
   3810c:	2b01      	cmp	r3, #1
   3810e:	d138      	bne.n	38182 <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   38110:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   38114:	f013 0302 	ands.w	r3, r3, #2
   38118:	d10a      	bne.n	38130 <signal_poll_event+0x32>
		poller->is_polling = false;
   3811a:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   3811c:	2000      	movs	r0, #0
	event->state |= state;
   3811e:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   38120:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   38122:	f3c3 3145 	ubfx	r1, r3, #13, #6
   38126:	430e      	orrs	r6, r1
   38128:	f366 3352 	bfi	r3, r6, #13, #6
   3812c:	60eb      	str	r3, [r5, #12]
	return retcode;
   3812e:	e00d      	b.n	3814c <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   38130:	f04f 31ff 	mov.w	r1, #4294967295
   38134:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   38138:	f06f 0001 	mvn.w	r0, #1
   3813c:	428b      	cmp	r3, r1
   3813e:	bf08      	it	eq
   38140:	4282      	cmpeq	r2, r0
   38142:	d105      	bne.n	38150 <signal_poll_event+0x52>
		poller->is_polling = false;
   38144:	2300      	movs	r3, #0
		return -EAGAIN;
   38146:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   3814a:	7023      	strb	r3, [r4, #0]
}
   3814c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   38150:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   38154:	4640      	mov	r0, r8
   38156:	f7ff fd98 	bl	37c8a <z_unpend_thread>
	arch_thread_return_value_set(thread,
   3815a:	2e08      	cmp	r6, #8
   3815c:	bf0c      	ite	eq
   3815e:	f06f 0303 	mvneq.w	r3, #3
   38162:	2300      	movne	r3, #0
   38164:	6523      	str	r3, [r4, #80]	; 0x50
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   38166:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   3816a:	06db      	lsls	r3, r3, #27
   3816c:	d102      	bne.n	38174 <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   3816e:	f854 7c48 	ldr.w	r7, [r4, #-72]
   38172:	b10f      	cbz	r7, 38178 <signal_poll_event+0x7a>
		poller->is_polling = false;
   38174:	2300      	movs	r3, #0
   38176:	e7d0      	b.n	3811a <signal_poll_event+0x1c>
	z_ready_thread(thread);
   38178:	4640      	mov	r0, r8
   3817a:	f7ff fde7 	bl	37d4c <z_ready_thread>
		poller->is_polling = false;
   3817e:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   38180:	e7cc      	b.n	3811c <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   38182:	2b02      	cmp	r3, #2
   38184:	d1f6      	bne.n	38174 <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   38186:	7823      	ldrb	r3, [r4, #0]
   38188:	2b00      	cmp	r3, #0
   3818a:	d0c7      	beq.n	3811c <signal_poll_event+0x1e>
   3818c:	f854 7c04 	ldr.w	r7, [r4, #-4]
   38190:	2f00      	cmp	r7, #0
   38192:	d0f4      	beq.n	3817e <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   38194:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   38198:	f1a4 0914 	sub.w	r9, r4, #20
   3819c:	f104 0014 	add.w	r0, r4, #20
   381a0:	f7ff fe51 	bl	37e46 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   381a4:	4649      	mov	r1, r9
   381a6:	4638      	mov	r0, r7
		twork->poll_result = 0;
   381a8:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   381ac:	f000 f83d 	bl	3822a <k_work_submit_to_queue>
		poller->is_polling = false;
   381b0:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   381b4:	e7b2      	b.n	3811c <signal_poll_event+0x1e>

000381b6 <k_poll_event_init>:
{
   381b6:	b510      	push	{r4, lr}
	event->poller = NULL;
   381b8:	2400      	movs	r4, #0
	event->type = type;
   381ba:	04d2      	lsls	r2, r2, #19
   381bc:	0209      	lsls	r1, r1, #8
   381be:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   381c2:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   381c6:	430a      	orrs	r2, r1
   381c8:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   381ca:	6084      	str	r4, [r0, #8]
	event->type = type;
   381cc:	430a      	orrs	r2, r1
	event->obj = obj;
   381ce:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   381d2:	bd10      	pop	{r4, pc}

000381d4 <z_handle_obj_poll_events>:
{
   381d4:	4603      	mov	r3, r0
	return list->head == list;
   381d6:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   381d8:	4283      	cmp	r3, r0
   381da:	d008      	beq.n	381ee <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   381dc:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   381e0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   381e2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   381e4:	2300      	movs	r3, #0
	node->prev = NULL;
   381e6:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   381ea:	f7ff bf88 	b.w	380fe <signal_poll_event>
}
   381ee:	4770      	bx	lr

000381f0 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   381f0:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   381f2:	e9c0 0000 	strd	r0, r0, [r0]
   381f6:	6083      	str	r3, [r0, #8]
}
   381f8:	4770      	bx	lr

000381fa <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   381fa:	2300      	movs	r3, #0
   381fc:	6083      	str	r3, [r0, #8]
}
   381fe:	4770      	bx	lr

00038200 <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
   38200:	6883      	ldr	r3, [r0, #8]
   38202:	600b      	str	r3, [r1, #0]
	*result = sig->result;
   38204:	68c3      	ldr	r3, [r0, #12]
   38206:	6013      	str	r3, [r2, #0]
}
   38208:	4770      	bx	lr

0003820a <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   3820a:	4770      	bx	lr

0003820c <k_heap_init>:
{
   3820c:	b410      	push	{r4}
   3820e:	f100 040c 	add.w	r4, r0, #12
   38212:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   38216:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   38218:	f7fd b9e3 	b.w	355e2 <sys_heap_init>

0003821c <notify_queue_locked>:
	if (queue != NULL) {
   3821c:	b120      	cbz	r0, 38228 <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   3821e:	2200      	movs	r2, #0
   38220:	30c0      	adds	r0, #192	; 0xc0
   38222:	4611      	mov	r1, r2
   38224:	f7ff bdf1 	b.w	37e0a <z_sched_wake>
}
   38228:	4770      	bx	lr

0003822a <k_work_submit_to_queue>:
{
   3822a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3822c:	9001      	str	r0, [sp, #4]
   3822e:	4608      	mov	r0, r1
	__asm__ volatile(
   38230:	f04f 0320 	mov.w	r3, #32
   38234:	f3ef 8511 	mrs	r5, BASEPRI
   38238:	f383 8811 	msr	BASEPRI, r3
   3823c:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   38240:	a901      	add	r1, sp, #4
   38242:	f7fc fdf3 	bl	34e2c <submit_to_queue_locked>
   38246:	4604      	mov	r4, r0
	__asm__ volatile(
   38248:	f385 8811 	msr	BASEPRI, r5
   3824c:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   38250:	2800      	cmp	r0, #0
   38252:	dd04      	ble.n	3825e <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   38254:	f7fc fa00 	bl	34658 <z_impl_k_is_preempt_thread>
   38258:	b108      	cbz	r0, 3825e <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   3825a:	f7fc f983 	bl	34564 <z_impl_k_yield>
}
   3825e:	4620      	mov	r0, r4
   38260:	b003      	add	sp, #12
   38262:	bd30      	pop	{r4, r5, pc}

00038264 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   38264:	4770      	bx	lr
