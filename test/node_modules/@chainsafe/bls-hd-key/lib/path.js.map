{"version":3,"sources":["../src/path.ts"],"names":["ETH2_COIN_TYPE","pathToIndices","path","coinType","indexOf","components","split","length","shift","indices","map","level","Number","parseInt","some","isNaN","every","i"],"mappings":";;;;;;;AAAA;;;;AAEA,MAAMA,cAAc,GAAG,IAAvB;AAEA;;;;;;AAKO,SAASC,aAAT,CAAuBC,IAAvB,EAAqCC,QAAuB,GAAGH,cAA/D,EAAyF;AAC9F,uBAAOE,IAAI,CAACE,OAAL,CAAa,GAAb,MAAsB,CAAC,CAA9B,EAAiC,6DAAjC;AACA,QAAMC,UAAU,GAAGH,IAAI,CAACI,KAAL,CAAW,GAAX,CAAnB;AACA,uBAAOD,UAAU,CAACE,MAAX,IAAqB,CAA5B,EAA+B,wDAA/B;AACA,uBAAOF,UAAU,CAAC,CAAD,CAAV,KAAkB,GAAzB,EAA8B,qCAA9B,EAJ8F,CAK9F;;AACAA,EAAAA,UAAU,CAACG,KAAX,GAN8F,CAO9F;;AACA,QAAMC,OAAO,GAAGJ,UAAU,CAACK,GAAX,CAAgBC,KAAD,IAAWC,MAAM,CAACC,QAAP,CAAgBF,KAAhB,CAA1B,CAAhB;AACA,uBAAO,CAACF,OAAO,CAACK,IAAR,CAAaF,MAAM,CAACG,KAApB,CAAR,EAAoC,uDAApC;AACA,uBAAON,OAAO,CAACO,KAAR,CAAeC,CAAD,IAAOA,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAG,UAAnC,CAAP,EAAuD,kDAAvD;AACA,uBAAOR,OAAO,CAAC,CAAD,CAAP,KAAe,KAAtB,EAA6B,uCAA7B;;AACA,MAAIN,QAAJ,EAAc;AACZ,yBAAOM,OAAO,CAAC,CAAD,CAAP,KAAeN,QAAtB,EAAgC,wBAAhC;AACD;;AACD,SAAOM,OAAP;AACD","sourcesContent":["import assert from \"assert\";\n\nconst ETH2_COIN_TYPE = 3600;\n\n/**\n * Convert a derivation path to an array of indices,\n * verifying that the path conforms to [EIP-2334](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-2334.md)\n * @param coinType - set to null to disable coin type verification\n */\nexport function pathToIndices(path: string, coinType: number | null = ETH2_COIN_TYPE): number[] {\n  assert(path.indexOf(\"'\") === -1, \"path should not contain \\\"'\\\" - hardened keys not supported\");\n  const components = path.split(\"/\");\n  assert(components.length >= 5, \"path should contain at least 5 levels separated by '/'\");\n  assert(components[0] === \"m\", \"root should be \\\"m\\\" - root of tree\");\n  // remove \"m\"\n  components.shift();\n  // parse levels\n  const indices = components.map((level) => Number.parseInt(level));\n  assert(!indices.some(Number.isNaN), \"every level must be a number (except the master node)\");\n  assert(indices.every((i) => i >= 0 && i < 4294967296), \"every level must be within bounds 0 <= i < 2**32\");\n  assert(indices[0] === 12381, \"purpose should be '12381' - bls12-381\");\n  if (coinType) {\n    assert(indices[1] === coinType, \"coin type should match\");\n  }\n  return indices;\n}\n"],"file":"path.js"}