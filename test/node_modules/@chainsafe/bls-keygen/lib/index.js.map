{"version":3,"sources":["../src/index.ts"],"names":["generateRandomSecretKey","entropy","ikm","Buffer","concat","deriveKeyFromEntropy","deriveKeyFromMnemonic","mnemonic","path","Error","from","masterKey","deriveKeyFromMaster","eth2ValidatorPaths","validatorIndex","withdrawal","signing","deriveEth2ValidatorKeys","paths"],"mappings":";;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA;;;;AAIO,SAASA,uBAAT,CAAiCC,OAAjC,EAA2D;AAChE,MAAIC,GAAG,GAAG,0BAAY,EAAZ,CAAV;;AACA,MAAGD,OAAH,EAAY;AACVC,IAAAA,GAAG,GAAGC,eAAOC,MAAP,CAAc,CAACH,OAAD,EAAUC,GAAV,CAAd,CAAN;AACD;;AACD,SAAOG,oBAAoB,CAACH,GAAD,CAA3B;AACD;AAED;;;;;;;AAKO,SAASI,qBAAT,CAA+BC,QAA/B,EAAiDC,IAAjD,EAAwE;AAC7E,MAAG,CAAC,2BAAiBD,QAAjB,CAAJ,EAAgC;AAC9B,UAAM,IAAIE,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,QAAMP,GAAG,GAAGC,eAAOO,IAAP,CAAY,6BAAmBH,QAAnB,CAAZ,CAAZ;;AACA,SAAOF,oBAAoB,CAACH,GAAD,EAAMM,IAAN,CAA3B;AACD;AAED;;;;;;;AAKO,SAASH,oBAAT,CAA8BJ,OAA9B,EAA+CO,IAA/C,EAAsE;AAC3E,QAAMG,SAAS,GAAG,8BAAeR,eAAOO,IAAP,CAAYT,OAAZ,CAAf,CAAlB;;AACA,MAAGO,IAAH,EAAS;AACP,WAAOI,mBAAmB,CAACD,SAAD,EAAYH,IAAZ,CAA1B;AACD;;AACD,SAAOG,SAAP;AACD;AAED;;;;;;;AAKO,SAASC,mBAAT,CAA6BD,SAA7B,EAAgDH,IAAhD,EAAsE;AAC3E,SAAO,qCAAsBG,SAAtB,EAAiC,6BAAcH,IAAd,CAAjC,CAAP;AACD;;AAOD;;;AAGO,SAASK,kBAAT,CAA4BC,cAA5B,EAGL;AACA,SAAO;AACLC,IAAAA,UAAU,EAAG,gBAAeD,cAAe,IADtC;AAELE,IAAAA,OAAO,EAAG,gBAAeF,cAAe;AAFnC,GAAP;AAID;AAED;;;;;;AAIO,SAASG,uBAAT,CAAiCN,SAAjC,EAAoDG,cAApD,EAAgG;AACrG,QAAMI,KAAK,GAAGL,kBAAkB,CAACC,cAAD,CAAhC;AACA,SAAO;AACLC,IAAAA,UAAU,EAAEH,mBAAmB,CAACD,SAAD,EAAYO,KAAK,CAACH,UAAlB,CAD1B;AAELC,IAAAA,OAAO,EAAEJ,mBAAmB,CAACD,SAAD,EAAYO,KAAK,CAACF,OAAlB;AAFvB,GAAP;AAID","sourcesContent":["import {mnemonicToSeedSync, validateMnemonic} from \"bip39\";\nimport {Buffer} from \"buffer\";\nimport randomBytes from \"randombytes\";\nimport {deriveChildSKMultiple, deriveMasterSK, pathToIndices} from \"@chainsafe/bls-hd-key\";\n\n/**\n *\n * @param entropy optional additional entropy\n */\nexport function generateRandomSecretKey(entropy?: Buffer): Buffer {\n  let ikm = randomBytes(32);\n  if(entropy) {\n    ikm = Buffer.concat([entropy, ikm]);\n  }\n  return deriveKeyFromEntropy(ikm);\n}\n\n/**\n * Derive a secret key from a BIP39 mnemonic seed and optionally an EIP-2334 path.\n * If path is included, the derived key will be the child secret key at that path,\n * otherwise, the derived key will be the master secret key\n */\nexport function deriveKeyFromMnemonic(mnemonic: string, path?: string): Buffer {\n  if(!validateMnemonic(mnemonic)) {\n    throw new Error(\"invalid mnemonic\");\n  }\n  const ikm = Buffer.from(mnemonicToSeedSync(mnemonic));\n  return deriveKeyFromEntropy(ikm, path);\n}\n\n/**\n * Derive a secret key from entropy and optionally an EIP-2334 path.\n * If path is included, the derived key will be the child secret key at that path,\n * otherwise, the derived key will be the master secret key\n */\nexport function deriveKeyFromEntropy(entropy: Buffer, path?: string): Buffer {\n  const masterKey = deriveMasterSK(Buffer.from(entropy));\n  if(path) {\n    return deriveKeyFromMaster(masterKey, path);\n  }\n  return masterKey;\n}\n\n/**\n * Derive a child secret key from a master secret key\n * @param masterKey master secret key\n * @param path EIP-2334 path to child\n */\nexport function deriveKeyFromMaster(masterKey: Buffer, path: string): Buffer {\n  return deriveChildSKMultiple(masterKey, pathToIndices(path));\n}\n\nexport interface IEth2ValidatorKeys {\n  withdrawal: Buffer;\n  signing: Buffer;\n}\n\n/**\n * Return Eth2 validator HD paths\n */\nexport function eth2ValidatorPaths(validatorIndex: number): {\n  withdrawal: string;\n  signing: string;\n} {\n  return {\n    withdrawal: `m/12381/3600/${validatorIndex}/0`,\n    signing: `m/12381/3600/${validatorIndex}/0/0`,\n  };\n}\n\n/**\n * Derive Eth2 validator secret keys from a single master secret key\n * @param masterKey master secret key\n */\nexport function deriveEth2ValidatorKeys(masterKey: Buffer, validatorIndex: number): IEth2ValidatorKeys {\n  const paths = eth2ValidatorPaths(validatorIndex);\n  return {\n    withdrawal: deriveKeyFromMaster(masterKey, paths.withdrawal),\n    signing: deriveKeyFromMaster(masterKey, paths.signing),\n  };\n}\n"],"file":"index.js"}