"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const blst = __importStar(require("@chainsafe/blst"));
const errors_1 = require("../errors");
const helpers_1 = require("../helpers");
class PublicKey {
    constructor(affine, jacobian) {
        this.affine = affine;
        this.jacobian = jacobian;
    }
    static fromBytes(bytes) {
        const affine = blst.PublicKey.fromBytes(bytes);
        if (affine.value.is_inf()) {
            throw new errors_1.ZeroPublicKeyError();
        }
        const jacobian = blst.AggregatePublicKey.fromPublicKey(affine);
        return new PublicKey(affine, jacobian);
    }
    static fromHex(hex) {
        return this.fromBytes(helpers_1.hexToBytes(hex));
    }
    static aggregate(publicKeys) {
        if (publicKeys.length === 0) {
            throw new errors_1.EmptyAggregateError();
        }
        const jacobian = blst.aggregatePubkeys(publicKeys.map((pk) => pk.jacobian));
        const affine = jacobian.toPublicKey();
        return new PublicKey(affine, jacobian);
    }
    toBytes() {
        return this.affine.toBytes();
    }
    toHex() {
        return helpers_1.bytesToHex(this.toBytes());
    }
}
exports.PublicKey = PublicKey;
