"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _utils = require("./utils");

var _crypto = require("crypto");

var _ethereumjsUtil = require("ethereumjs-util");

var _scryptJs = require("scrypt-js");

var verify = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(keystore, password) {
    var derivedKey, kdfparams, _kdfparams, checksum;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            password = (0, _utils.normalizePassword)(password);

            if (!(keystore.crypto.kdf["function"] === _utils.KDFFunctions.Scrypt)) {
              _context.next = 9;
              break;
            }

            kdfparams = keystore.crypto.kdf.params;
            _context.next = 5;
            return (0, _scryptJs.scrypt)(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);

          case 5:
            derivedKey = _context.sent;
            derivedKey = Buffer.from(derivedKey);
            _context.next = 10;
            break;

          case 9:
            if (keystore.crypto.kdf["function"] === _utils.KDFFunctions.PBKDF) {
              _kdfparams = keystore.crypto.kdf.params;
              derivedKey = (0, _crypto.pbkdf2Sync)(Buffer.from(password), Buffer.from(_kdfparams.salt, 'hex'), _kdfparams.c, _kdfparams.dklen, 'sha256');
            }

          case 10:
            checksum = (0, _ethereumjsUtil.sha256)(Buffer.concat([derivedKey.slice(16), Buffer.from(keystore.crypto.cipher.message, 'hex')])).toString('hex');
            return _context.abrupt("return", checksum === keystore.crypto.checksum.message);

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function verify(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var _default = verify;
exports["default"] = _default;